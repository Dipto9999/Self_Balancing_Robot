
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b640  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800b700  0800b700  0001b700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb9c  0800bb9c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb9c  0800bb9c  0001bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba4  0800bba4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba8  0800bba8  0001bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bbac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001d4  0800bd80  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800bd80  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001433d  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e55  00000000  00000000  0003457c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3d  00000000  00000000  00038618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000461a  00000000  00000000  00039455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001757c  00000000  00000000  0003da6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007891c  00000000  00000000  00054feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052c8  00000000  00000000  000cd908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d2bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b6e8 	.word	0x0800b6e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800b6e8 	.word	0x0800b6e8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa8f 	bl	8001960 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9df 	bl	8001810 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa81 	bl	8001960 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa77 	bl	8001960 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa07 	bl	8001894 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9fd 	bl	8001894 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5f 	bl	8000984 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa6b 	bl	80009d0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa61 	bl	80009d0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 f932 	bl	8002840 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 f92d 	bl	8002840 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	464f      	mov	r7, r9
 8000754:	4646      	mov	r6, r8
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0047      	lsls	r7, r0, #1
 800075e:	1c0c      	adds	r4, r1, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	0e3f      	lsrs	r7, r7, #24
 8000764:	0fc6      	lsrs	r6, r0, #31
 8000766:	2f00      	cmp	r7, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0x1c>
 800076a:	e06f      	b.n	800084c <__aeabi_fdiv+0xfc>
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x22>
 8000770:	e074      	b.n	800085c <__aeabi_fdiv+0x10c>
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	00ed      	lsls	r5, r5, #3
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4315      	orrs	r5, r2
 8000780:	3f7f      	subs	r7, #127	; 0x7f
 8000782:	0263      	lsls	r3, r4, #9
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4698      	mov	r8, r3
 8000788:	0063      	lsls	r3, r4, #1
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0fe4      	lsrs	r4, r4, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d04d      	beq.n	800082e <__aeabi_fdiv+0xde>
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d045      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 8000796:	4642      	mov	r2, r8
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	4311      	orrs	r1, r2
 80007a0:	4688      	mov	r8, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	3b7f      	subs	r3, #127	; 0x7f
 80007a6:	0031      	movs	r1, r6
 80007a8:	1aff      	subs	r7, r7, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d900      	bls.n	80007b6 <__aeabi_fdiv+0x66>
 80007b4:	e0b8      	b.n	8000928 <__aeabi_fdiv+0x1d8>
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <__aeabi_fdiv+0x228>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4698      	mov	r8, r3
 80007c2:	0026      	movs	r6, r4
 80007c4:	4645      	mov	r5, r8
 80007c6:	4692      	mov	sl, r2
 80007c8:	4653      	mov	r3, sl
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fdiv+0x80>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fdiv+0x19c>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fdiv+0x86>
 80007d4:	e0a1      	b.n	800091a <__aeabi_fdiv+0x1ca>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d018      	beq.n	800080c <__aeabi_fdiv+0xbc>
 80007da:	003b      	movs	r3, r7
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd6d      	ble.n	80008be <__aeabi_fdiv+0x16e>
 80007e2:	076a      	lsls	r2, r5, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007e6:	220f      	movs	r2, #15
 80007e8:	402a      	ands	r2, r5
 80007ea:	2a04      	cmp	r2, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	3504      	adds	r5, #4
 80007f0:	012a      	lsls	r2, r5, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0xac>
 80007f4:	4b61      	ldr	r3, [pc, #388]	; (800097c <__aeabi_fdiv+0x22c>)
 80007f6:	401d      	ands	r5, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3380      	adds	r3, #128	; 0x80
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	dd00      	ble.n	8000802 <__aeabi_fdiv+0xb2>
 8000800:	e074      	b.n	80008ec <__aeabi_fdiv+0x19c>
 8000802:	01aa      	lsls	r2, r5, #6
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e002      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800080a:	000e      	movs	r6, r1
 800080c:	2000      	movs	r0, #0
 800080e:	2200      	movs	r2, #0
 8000810:	05c0      	lsls	r0, r0, #23
 8000812:	07f6      	lsls	r6, r6, #31
 8000814:	4310      	orrs	r0, r2
 8000816:	4330      	orrs	r0, r6
 8000818:	bce0      	pop	{r5, r6, r7}
 800081a:	46ba      	mov	sl, r7
 800081c:	46b1      	mov	r9, r6
 800081e:	46a8      	mov	r8, r5
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0x158>
 8000828:	2202      	movs	r2, #2
 800082a:	3fff      	subs	r7, #255	; 0xff
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0xe6>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0x140>
 8000834:	2201      	movs	r2, #1
 8000836:	0031      	movs	r1, r6
 8000838:	464b      	mov	r3, r9
 800083a:	4061      	eors	r1, r4
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0x166>
 8000844:	484e      	ldr	r0, [pc, #312]	; (8000980 <__aeabi_fdiv+0x230>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2d00      	cmp	r5, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0x128>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0x32>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0x11c>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e78a      	b.n	8000782 <__aeabi_fdiv+0x32>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	; 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e784      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000878:	0028      	movs	r0, r5
 800087a:	f001 ffc3 	bl	8002804 <__clzsi2>
 800087e:	2776      	movs	r7, #118	; 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409d      	lsls	r5, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e778      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000890:	4640      	mov	r0, r8
 8000892:	f001 ffb7 	bl	8002804 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	; 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	4690      	mov	r8, r2
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	e77e      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	33fc      	adds	r3, #252	; 0xfc
 80008b2:	2203      	movs	r2, #3
 80008b4:	e777      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008b6:	000e      	movs	r6, r1
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	e7a8      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008be:	2201      	movs	r2, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b1b      	cmp	r3, #27
 80008c4:	dca2      	bgt.n	800080c <__aeabi_fdiv+0xbc>
 80008c6:	379e      	adds	r7, #158	; 0x9e
 80008c8:	002a      	movs	r2, r5
 80008ca:	40bd      	lsls	r5, r7
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	1e6b      	subs	r3, r5, #1
 80008d0:	419d      	sbcs	r5, r3
 80008d2:	4315      	orrs	r5, r2
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008d8:	220f      	movs	r2, #15
 80008da:	402a      	ands	r2, r5
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008e0:	3504      	adds	r5, #4
 80008e2:	016a      	lsls	r2, r5, #5
 80008e4:	d544      	bpl.n	8000970 <__aeabi_fdiv+0x220>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	e791      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	e78e      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	2600      	movs	r6, #0
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	e789      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	4215      	tst	r5, r2
 8000906:	d008      	beq.n	800091a <__aeabi_fdiv+0x1ca>
 8000908:	4643      	mov	r3, r8
 800090a:	4213      	tst	r3, r2
 800090c:	d105      	bne.n	800091a <__aeabi_fdiv+0x1ca>
 800090e:	431a      	orrs	r2, r3
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0026      	movs	r6, r4
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e77a      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	432a      	orrs	r2, r5
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e773      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000928:	4642      	mov	r2, r8
 800092a:	016b      	lsls	r3, r5, #5
 800092c:	0155      	lsls	r5, r2, #5
 800092e:	42ab      	cmp	r3, r5
 8000930:	d21a      	bcs.n	8000968 <__aeabi_fdiv+0x218>
 8000932:	201b      	movs	r0, #27
 8000934:	2200      	movs	r2, #0
 8000936:	3f01      	subs	r7, #1
 8000938:	2601      	movs	r6, #1
 800093a:	001c      	movs	r4, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2c00      	cmp	r4, #0
 8000942:	db01      	blt.n	8000948 <__aeabi_fdiv+0x1f8>
 8000944:	429d      	cmp	r5, r3
 8000946:	d801      	bhi.n	800094c <__aeabi_fdiv+0x1fc>
 8000948:	1b5b      	subs	r3, r3, r5
 800094a:	4332      	orrs	r2, r6
 800094c:	3801      	subs	r0, #1
 800094e:	2800      	cmp	r0, #0
 8000950:	d1f3      	bne.n	800093a <__aeabi_fdiv+0x1ea>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	4183      	sbcs	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	001d      	movs	r5, r3
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	000e      	movs	r6, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd00      	ble.n	8000966 <__aeabi_fdiv+0x216>
 8000964:	e73d      	b.n	80007e2 <__aeabi_fdiv+0x92>
 8000966:	e7aa      	b.n	80008be <__aeabi_fdiv+0x16e>
 8000968:	201a      	movs	r0, #26
 800096a:	2201      	movs	r2, #1
 800096c:	1b5b      	subs	r3, r3, r5
 800096e:	e7e3      	b.n	8000938 <__aeabi_fdiv+0x1e8>
 8000970:	01aa      	lsls	r2, r5, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a52      	lsrs	r2, r2, #9
 8000976:	e74b      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000978:	0800b700 	.word	0x0800b700
 800097c:	f7ffffff 	.word	0xf7ffffff
 8000980:	0800b740 	.word	0x0800b740

08000984 <__eqsf2>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0245      	lsls	r5, r0, #9
 800098a:	024e      	lsls	r6, r1, #9
 800098c:	004c      	lsls	r4, r1, #1
 800098e:	0fc3      	lsrs	r3, r0, #31
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	2001      	movs	r0, #1
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0a76      	lsrs	r6, r6, #9
 8000998:	0e24      	lsrs	r4, r4, #24
 800099a:	0fc9      	lsrs	r1, r1, #31
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d006      	beq.n	80009ae <__eqsf2+0x2a>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d003      	beq.n	80009ac <__eqsf2+0x28>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d101      	bne.n	80009ac <__eqsf2+0x28>
 80009a8:	42b5      	cmp	r5, r6
 80009aa:	d006      	beq.n	80009ba <__eqsf2+0x36>
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1fc      	bne.n	80009ac <__eqsf2+0x28>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d1fa      	bne.n	80009ac <__eqsf2+0x28>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1f8      	bne.n	80009ac <__eqsf2+0x28>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d006      	beq.n	80009cc <__eqsf2+0x48>
 80009be:	2001      	movs	r0, #1
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d1f3      	bne.n	80009ac <__eqsf2+0x28>
 80009c4:	0028      	movs	r0, r5
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	e7ef      	b.n	80009ac <__eqsf2+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ed      	b.n	80009ac <__eqsf2+0x28>

080009d0 <__gesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d01b      	beq.n	8000a22 <__gesf2+0x52>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00e      	beq.n	8000a0c <__gesf2+0x3c>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11b      	bne.n	8000a2a <__gesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d101      	bne.n	80009fa <__gesf2+0x2a>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x64>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d00c      	beq.n	8000a18 <__gesf2+0x48>
 80009fe:	4283      	cmp	r3, r0
 8000a00:	d01c      	beq.n	8000a3c <__gesf2+0x6c>
 8000a02:	2102      	movs	r1, #2
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4008      	ands	r0, r1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d122      	bne.n	8000a56 <__gesf2+0x86>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1f4      	bne.n	80009fe <__gesf2+0x2e>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d1f2      	bne.n	80009fe <__gesf2+0x2e>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f6      	bne.n	8000a0a <__gesf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	4240      	negs	r0, r0
 8000a20:	e7f3      	b.n	8000a0a <__gesf2+0x3a>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d117      	bne.n	8000a56 <__gesf2+0x86>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d0f0      	beq.n	8000a0c <__gesf2+0x3c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1e7      	bne.n	80009fe <__gesf2+0x2e>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1e5      	bne.n	80009fe <__gesf2+0x2e>
 8000a32:	e7e6      	b.n	8000a02 <__gesf2+0x32>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0e7      	beq.n	8000a0a <__gesf2+0x3a>
 8000a3a:	e7e2      	b.n	8000a02 <__gesf2+0x32>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__gesf2+0x7c>
 8000a40:	dbea      	blt.n	8000a18 <__gesf2+0x48>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__gesf2+0x7c>
 8000a46:	d3e7      	bcc.n	8000a18 <__gesf2+0x48>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7de      	b.n	8000a0a <__gesf2+0x3a>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7d9      	b.n	8000a0a <__gesf2+0x3a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	4240      	negs	r0, r0
 8000a5a:	e7d6      	b.n	8000a0a <__gesf2+0x3a>

08000a5c <__lesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d00b      	beq.n	8000a8e <__lesf2+0x32>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00d      	beq.n	8000a96 <__lesf2+0x3a>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11f      	bne.n	8000abe <__lesf2+0x62>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d116      	bne.n	8000ab0 <__lesf2+0x54>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d114      	bne.n	8000ab0 <__lesf2+0x54>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d010      	beq.n	8000aae <__lesf2+0x52>
 8000a8c:	e009      	b.n	8000aa2 <__lesf2+0x46>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d10c      	bne.n	8000aac <__lesf2+0x50>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d113      	bne.n	8000abe <__lesf2+0x62>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d108      	bne.n	8000aac <__lesf2+0x50>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d008      	beq.n	8000ab0 <__lesf2+0x54>
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d012      	beq.n	8000ac8 <__lesf2+0x6c>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	1e58      	subs	r0, r3, #1
 8000aa6:	4008      	ands	r0, r1
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e000      	b.n	8000aae <__lesf2+0x52>
 8000aac:	2002      	movs	r0, #2
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d1f4      	bne.n	8000a9e <__lesf2+0x42>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1fa      	bne.n	8000aae <__lesf2+0x52>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4240      	negs	r0, r0
 8000abc:	e7f7      	b.n	8000aae <__lesf2+0x52>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1ed      	bne.n	8000a9e <__lesf2+0x42>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1eb      	bne.n	8000a9e <__lesf2+0x42>
 8000ac6:	e7ec      	b.n	8000aa2 <__lesf2+0x46>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__lesf2+0x7c>
 8000acc:	dbf2      	blt.n	8000ab4 <__lesf2+0x58>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__lesf2+0x7c>
 8000ad2:	d3ef      	bcc.n	8000ab4 <__lesf2+0x58>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ea      	b.n	8000aae <__lesf2+0x52>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e5      	b.n	8000aae <__lesf2+0x52>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__aeabi_ui2f>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	1e04      	subs	r4, r0, #0
 8000ae8:	d00e      	beq.n	8000b08 <__aeabi_ui2f+0x24>
 8000aea:	f001 fe8b 	bl	8002804 <__clzsi2>
 8000aee:	239e      	movs	r3, #158	; 0x9e
 8000af0:	0001      	movs	r1, r0
 8000af2:	1a1b      	subs	r3, r3, r0
 8000af4:	2b96      	cmp	r3, #150	; 0x96
 8000af6:	dc0c      	bgt.n	8000b12 <__aeabi_ui2f+0x2e>
 8000af8:	2808      	cmp	r0, #8
 8000afa:	d02c      	beq.n	8000b56 <__aeabi_ui2f+0x72>
 8000afc:	3908      	subs	r1, #8
 8000afe:	408c      	lsls	r4, r1
 8000b00:	0264      	lsls	r4, r4, #9
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	e001      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	05c0      	lsls	r0, r0, #23
 8000b0e:	4320      	orrs	r0, r4
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b99      	cmp	r3, #153	; 0x99
 8000b14:	dd0a      	ble.n	8000b2c <__aeabi_ui2f+0x48>
 8000b16:	0002      	movs	r2, r0
 8000b18:	0020      	movs	r0, r4
 8000b1a:	321b      	adds	r2, #27
 8000b1c:	4090      	lsls	r0, r2
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1e50      	subs	r0, r2, #1
 8000b22:	4182      	sbcs	r2, r0
 8000b24:	2005      	movs	r0, #5
 8000b26:	1a40      	subs	r0, r0, r1
 8000b28:	40c4      	lsrs	r4, r0
 8000b2a:	4314      	orrs	r4, r2
 8000b2c:	2905      	cmp	r1, #5
 8000b2e:	dc16      	bgt.n	8000b5e <__aeabi_ui2f+0x7a>
 8000b30:	0022      	movs	r2, r4
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b34:	4002      	ands	r2, r0
 8000b36:	0765      	lsls	r5, r4, #29
 8000b38:	d009      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	402c      	ands	r4, r5
 8000b3e:	2c04      	cmp	r4, #4
 8000b40:	d005      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0154      	lsls	r4, r2, #5
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b48:	239f      	movs	r3, #159	; 0x9f
 8000b4a:	4002      	ands	r2, r0
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	0a54      	lsrs	r4, r2, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e7da      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	2096      	movs	r0, #150	; 0x96
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	e7d6      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b5e:	1f4a      	subs	r2, r1, #5
 8000b60:	4094      	lsls	r4, r2
 8000b62:	0022      	movs	r2, r4
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b66:	4002      	ands	r2, r0
 8000b68:	0765      	lsls	r5, r4, #29
 8000b6a:	d0f0      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b6c:	e7e5      	b.n	8000b3a <__aeabi_ui2f+0x56>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fbffffff 	.word	0xfbffffff

08000b74 <__aeabi_dadd>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0004      	movs	r4, r0
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	001f      	movs	r7, r3
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0010      	movs	r0, r2
 8000b86:	004e      	lsls	r6, r1, #1
 8000b88:	0a5b      	lsrs	r3, r3, #9
 8000b8a:	0fcd      	lsrs	r5, r1, #31
 8000b8c:	0f61      	lsrs	r1, r4, #29
 8000b8e:	007a      	lsls	r2, r7, #1
 8000b90:	4319      	orrs	r1, r3
 8000b92:	00e3      	lsls	r3, r4, #3
 8000b94:	033c      	lsls	r4, r7, #12
 8000b96:	0fff      	lsrs	r7, r7, #31
 8000b98:	46bc      	mov	ip, r7
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	0f47      	lsrs	r7, r0, #29
 8000b9e:	4327      	orrs	r7, r4
 8000ba0:	0d76      	lsrs	r6, r6, #21
 8000ba2:	0d52      	lsrs	r2, r2, #21
 8000ba4:	00c0      	lsls	r0, r0, #3
 8000ba6:	46b9      	mov	r9, r7
 8000ba8:	4680      	mov	r8, r0
 8000baa:	1ab7      	subs	r7, r6, r2
 8000bac:	4565      	cmp	r5, ip
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x3e>
 8000bb0:	e09b      	b.n	8000cea <__aeabi_dadd+0x176>
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_dadd+0x44>
 8000bb6:	e084      	b.n	8000cc2 <__aeabi_dadd+0x14e>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x4a>
 8000bbc:	e0be      	b.n	8000d3c <__aeabi_dadd+0x1c8>
 8000bbe:	4ac8      	ldr	r2, [pc, #800]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000bc0:	4296      	cmp	r6, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x52>
 8000bc4:	e124      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0412      	lsls	r2, r2, #16
 8000bcc:	4314      	orrs	r4, r2
 8000bce:	46a1      	mov	r9, r4
 8000bd0:	2f38      	cmp	r7, #56	; 0x38
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x62>
 8000bd4:	e167      	b.n	8000ea6 <__aeabi_dadd+0x332>
 8000bd6:	2f1f      	cmp	r7, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x68>
 8000bda:	e1d6      	b.n	8000f8a <__aeabi_dadd+0x416>
 8000bdc:	2220      	movs	r2, #32
 8000bde:	464c      	mov	r4, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4094      	lsls	r4, r2
 8000be4:	46a2      	mov	sl, r4
 8000be6:	4644      	mov	r4, r8
 8000be8:	40fc      	lsrs	r4, r7
 8000bea:	0020      	movs	r0, r4
 8000bec:	4654      	mov	r4, sl
 8000bee:	4304      	orrs	r4, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4090      	lsls	r0, r2
 8000bf4:	1e42      	subs	r2, r0, #1
 8000bf6:	4190      	sbcs	r0, r2
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	40fa      	lsrs	r2, r7
 8000bfc:	4304      	orrs	r4, r0
 8000bfe:	1a89      	subs	r1, r1, r2
 8000c00:	1b1c      	subs	r4, r3, r4
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	4192      	sbcs	r2, r2
 8000c06:	4252      	negs	r2, r2
 8000c08:	1a8b      	subs	r3, r1, r2
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_dadd+0xa0>
 8000c12:	e0d4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000c14:	4653      	mov	r3, sl
 8000c16:	025a      	lsls	r2, r3, #9
 8000c18:	0a53      	lsrs	r3, r2, #9
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0xb0>
 8000c22:	e104      	b.n	8000e2e <__aeabi_dadd+0x2ba>
 8000c24:	4650      	mov	r0, sl
 8000c26:	f001 fded 	bl	8002804 <__clzsi2>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0020      	movs	r0, r4
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	4651      	mov	r1, sl
 8000c36:	40d0      	lsrs	r0, r2
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	da00      	bge.n	8000c46 <__aeabi_dadd+0xd2>
 8000c44:	e102      	b.n	8000e4c <__aeabi_dadd+0x2d8>
 8000c46:	1b9b      	subs	r3, r3, r6
 8000c48:	1c59      	adds	r1, r3, #1
 8000c4a:	291f      	cmp	r1, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0xdc>
 8000c4e:	e0a7      	b.n	8000da0 <__aeabi_dadd+0x22c>
 8000c50:	2320      	movs	r3, #32
 8000c52:	0010      	movs	r0, r2
 8000c54:	0026      	movs	r6, r4
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	4098      	lsls	r0, r3
 8000c5c:	40ce      	lsrs	r6, r1
 8000c5e:	40ca      	lsrs	r2, r1
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	4692      	mov	sl, r2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4304      	orrs	r4, r0
 8000c6c:	0763      	lsls	r3, r4, #29
 8000c6e:	d009      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d005      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c78:	1d23      	adds	r3, r4, #4
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	41a4      	sbcs	r4, r4
 8000c7e:	4264      	negs	r4, r4
 8000c80:	44a2      	add	sl, r4
 8000c82:	001c      	movs	r4, r3
 8000c84:	4653      	mov	r3, sl
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_dadd+0x118>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_dadd+0x250>
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000c8e:	3601      	adds	r6, #1
 8000c90:	429e      	cmp	r6, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x122>
 8000c94:	e0b8      	b.n	8000e08 <__aeabi_dadd+0x294>
 8000c96:	4653      	mov	r3, sl
 8000c98:	4992      	ldr	r1, [pc, #584]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000c9a:	08e4      	lsrs	r4, r4, #3
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	0572      	lsls	r2, r6, #21
 8000ca6:	024c      	lsls	r4, r1, #9
 8000ca8:	0b24      	lsrs	r4, r4, #12
 8000caa:	0d52      	lsrs	r2, r2, #21
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	07ed      	lsls	r5, r5, #31
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	432a      	orrs	r2, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	bce0      	pop	{r5, r6, r7}
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	46a8      	mov	r8, r5
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d048      	beq.n	8000d58 <__aeabi_dadd+0x1e4>
 8000cc6:	1b97      	subs	r7, r2, r6
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x15a>
 8000ccc:	e10e      	b.n	8000eec <__aeabi_dadd+0x378>
 8000cce:	000c      	movs	r4, r1
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x162>
 8000cd4:	e1b7      	b.n	8001046 <__aeabi_dadd+0x4d2>
 8000cd6:	1e7c      	subs	r4, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16a>
 8000cdc:	e226      	b.n	800112c <__aeabi_dadd+0x5b8>
 8000cde:	4d80      	ldr	r5, [pc, #512]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000ce0:	42af      	cmp	r7, r5
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x172>
 8000ce4:	e1d5      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ce6:	0027      	movs	r7, r4
 8000ce8:	e107      	b.n	8000efa <__aeabi_dadd+0x386>
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_dadd+0x17c>
 8000cee:	e0b2      	b.n	8000e56 <__aeabi_dadd+0x2e2>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d047      	beq.n	8000d84 <__aeabi_dadd+0x210>
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000cf6:	4296      	cmp	r6, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x188>
 8000cfa:	e089      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	464c      	mov	r4, r9
 8000d00:	0412      	lsls	r2, r2, #16
 8000d02:	4314      	orrs	r4, r2
 8000d04:	46a1      	mov	r9, r4
 8000d06:	2f38      	cmp	r7, #56	; 0x38
 8000d08:	dc6b      	bgt.n	8000de2 <__aeabi_dadd+0x26e>
 8000d0a:	2f1f      	cmp	r7, #31
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dadd+0x19c>
 8000d0e:	e16e      	b.n	8000fee <__aeabi_dadd+0x47a>
 8000d10:	003a      	movs	r2, r7
 8000d12:	4648      	mov	r0, r9
 8000d14:	3a20      	subs	r2, #32
 8000d16:	40d0      	lsrs	r0, r2
 8000d18:	4684      	mov	ip, r0
 8000d1a:	2f20      	cmp	r7, #32
 8000d1c:	d007      	beq.n	8000d2e <__aeabi_dadd+0x1ba>
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	4648      	mov	r0, r9
 8000d22:	1bd2      	subs	r2, r2, r7
 8000d24:	4090      	lsls	r0, r2
 8000d26:	0002      	movs	r2, r0
 8000d28:	4640      	mov	r0, r8
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4640      	mov	r0, r8
 8000d30:	1e42      	subs	r2, r0, #1
 8000d32:	4190      	sbcs	r0, r2
 8000d34:	4662      	mov	r2, ip
 8000d36:	0004      	movs	r4, r0
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	e057      	b.n	8000dec <__aeabi_dadd+0x278>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x1d0>
 8000d42:	e103      	b.n	8000f4c <__aeabi_dadd+0x3d8>
 8000d44:	1e7a      	subs	r2, r7, #1
 8000d46:	2f01      	cmp	r7, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x1d8>
 8000d4a:	e193      	b.n	8001074 <__aeabi_dadd+0x500>
 8000d4c:	4c64      	ldr	r4, [pc, #400]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d4e:	42a7      	cmp	r7, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x1e0>
 8000d52:	e18a      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d54:	0017      	movs	r7, r2
 8000d56:	e73b      	b.n	8000bd0 <__aeabi_dadd+0x5c>
 8000d58:	4c63      	ldr	r4, [pc, #396]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000d5a:	1c72      	adds	r2, r6, #1
 8000d5c:	4222      	tst	r2, r4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dadd+0x1ee>
 8000d60:	e0e0      	b.n	8000f24 <__aeabi_dadd+0x3b0>
 8000d62:	000a      	movs	r2, r1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dadd+0x1f8>
 8000d6a:	e174      	b.n	8001056 <__aeabi_dadd+0x4e2>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x1fe>
 8000d70:	e1d0      	b.n	8001114 <__aeabi_dadd+0x5a0>
 8000d72:	464a      	mov	r2, r9
 8000d74:	4302      	orrs	r2, r0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x206>
 8000d78:	e1e3      	b.n	8001142 <__aeabi_dadd+0x5ce>
 8000d7a:	074a      	lsls	r2, r1, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	e029      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000d84:	464a      	mov	r2, r9
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x218>
 8000d8a:	e17d      	b.n	8001088 <__aeabi_dadd+0x514>
 8000d8c:	1e7a      	subs	r2, r7, #1
 8000d8e:	2f01      	cmp	r7, #1
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x220>
 8000d92:	e0e0      	b.n	8000f56 <__aeabi_dadd+0x3e2>
 8000d94:	4c52      	ldr	r4, [pc, #328]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d96:	42a7      	cmp	r7, r4
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x228>
 8000d9a:	e166      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d9c:	0017      	movs	r7, r2
 8000d9e:	e7b2      	b.n	8000d06 <__aeabi_dadd+0x192>
 8000da0:	0010      	movs	r0, r2
 8000da2:	3b1f      	subs	r3, #31
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	2920      	cmp	r1, #32
 8000da8:	d003      	beq.n	8000db2 <__aeabi_dadd+0x23e>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	0763      	lsls	r3, r4, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x250>
 8000dc2:	e755      	b.n	8000c70 <__aeabi_dadd+0xfc>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	08e3      	lsrs	r3, r4, #3
 8000dc8:	0752      	lsls	r2, r2, #29
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	4652      	mov	r2, sl
 8000dce:	0037      	movs	r7, r6
 8000dd0:	08d1      	lsrs	r1, r2, #3
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000dd4:	4297      	cmp	r7, r2
 8000dd6:	d01f      	beq.n	8000e18 <__aeabi_dadd+0x2a4>
 8000dd8:	0309      	lsls	r1, r1, #12
 8000dda:	057a      	lsls	r2, r7, #21
 8000ddc:	0b0c      	lsrs	r4, r1, #12
 8000dde:	0d52      	lsrs	r2, r2, #21
 8000de0:	e764      	b.n	8000cac <__aeabi_dadd+0x138>
 8000de2:	4642      	mov	r2, r8
 8000de4:	464c      	mov	r4, r9
 8000de6:	4314      	orrs	r4, r2
 8000de8:	1e62      	subs	r2, r4, #1
 8000dea:	4194      	sbcs	r4, r2
 8000dec:	18e4      	adds	r4, r4, r3
 8000dee:	429c      	cmp	r4, r3
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4252      	negs	r2, r2
 8000df4:	4692      	mov	sl, r2
 8000df6:	448a      	add	sl, r1
 8000df8:	4653      	mov	r3, sl
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	d5df      	bpl.n	8000dbe <__aeabi_dadd+0x24a>
 8000dfe:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e00:	3601      	adds	r6, #1
 8000e02:	429e      	cmp	r6, r3
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dadd+0x294>
 8000e06:	e0b3      	b.n	8000f70 <__aeabi_dadd+0x3fc>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e74d      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e10:	074a      	lsls	r2, r1, #29
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	08c9      	lsrs	r1, r1, #3
 8000e18:	001a      	movs	r2, r3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x2ac>
 8000e1e:	e200      	b.n	8001222 <__aeabi_dadd+0x6ae>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	0324      	lsls	r4, r4, #12
 8000e24:	430c      	orrs	r4, r1
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e2a:	0b24      	lsrs	r4, r4, #12
 8000e2c:	e73e      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f001 fce8 	bl	8002804 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3318      	adds	r3, #24
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_dadd+0x2ca>
 8000e3c:	e6f7      	b.n	8000c2e <__aeabi_dadd+0xba>
 8000e3e:	0022      	movs	r2, r4
 8000e40:	3808      	subs	r0, #8
 8000e42:	4082      	lsls	r2, r0
 8000e44:	2400      	movs	r4, #0
 8000e46:	42b3      	cmp	r3, r6
 8000e48:	db00      	blt.n	8000e4c <__aeabi_dadd+0x2d8>
 8000e4a:	e6fc      	b.n	8000c46 <__aeabi_dadd+0xd2>
 8000e4c:	1af6      	subs	r6, r6, r3
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	4692      	mov	sl, r2
 8000e54:	e70a      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d02b      	beq.n	8000eb2 <__aeabi_dadd+0x33e>
 8000e5a:	1b97      	subs	r7, r2, r6
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x2ee>
 8000e60:	e0b8      	b.n	8000fd4 <__aeabi_dadd+0x460>
 8000e62:	4c1f      	ldr	r4, [pc, #124]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e64:	42a2      	cmp	r2, r4
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x2f6>
 8000e68:	e11c      	b.n	80010a4 <__aeabi_dadd+0x530>
 8000e6a:	2480      	movs	r4, #128	; 0x80
 8000e6c:	0424      	lsls	r4, r4, #16
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	2f38      	cmp	r7, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x302>
 8000e74:	e11e      	b.n	80010b4 <__aeabi_dadd+0x540>
 8000e76:	2f1f      	cmp	r7, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x308>
 8000e7a:	e19e      	b.n	80011ba <__aeabi_dadd+0x646>
 8000e7c:	2620      	movs	r6, #32
 8000e7e:	000c      	movs	r4, r1
 8000e80:	1bf6      	subs	r6, r6, r7
 8000e82:	0018      	movs	r0, r3
 8000e84:	40b3      	lsls	r3, r6
 8000e86:	40b4      	lsls	r4, r6
 8000e88:	40f8      	lsrs	r0, r7
 8000e8a:	1e5e      	subs	r6, r3, #1
 8000e8c:	41b3      	sbcs	r3, r6
 8000e8e:	40f9      	lsrs	r1, r7
 8000e90:	4304      	orrs	r4, r0
 8000e92:	431c      	orrs	r4, r3
 8000e94:	4489      	add	r9, r1
 8000e96:	4444      	add	r4, r8
 8000e98:	4544      	cmp	r4, r8
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	444b      	add	r3, r9
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	0016      	movs	r6, r2
 8000ea4:	e7a8      	b.n	8000df8 <__aeabi_dadd+0x284>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	464c      	mov	r4, r9
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	1e62      	subs	r2, r4, #1
 8000eae:	4194      	sbcs	r4, r2
 8000eb0:	e6a6      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000eb4:	1c72      	adds	r2, r6, #1
 8000eb6:	4222      	tst	r2, r4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x348>
 8000eba:	e0a8      	b.n	800100e <__aeabi_dadd+0x49a>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x352>
 8000ec4:	e10a      	b.n	80010dc <__aeabi_dadd+0x568>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x358>
 8000eca:	e15e      	b.n	800118a <__aeabi_dadd+0x616>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dadd+0x360>
 8000ed2:	e161      	b.n	8001198 <__aeabi_dadd+0x624>
 8000ed4:	074a      	lsls	r2, r1, #29
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	e77c      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	ff7fffff 	.word	0xff7fffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	4ccf      	ldr	r4, [pc, #828]	; (800122c <__aeabi_dadd+0x6b8>)
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x380>
 8000ef2:	e0ce      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ef4:	2480      	movs	r4, #128	; 0x80
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	4321      	orrs	r1, r4
 8000efa:	2f38      	cmp	r7, #56	; 0x38
 8000efc:	dc5b      	bgt.n	8000fb6 <__aeabi_dadd+0x442>
 8000efe:	2f1f      	cmp	r7, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dadd+0x390>
 8000f02:	e0dc      	b.n	80010be <__aeabi_dadd+0x54a>
 8000f04:	2520      	movs	r5, #32
 8000f06:	000c      	movs	r4, r1
 8000f08:	1bed      	subs	r5, r5, r7
 8000f0a:	001e      	movs	r6, r3
 8000f0c:	40ab      	lsls	r3, r5
 8000f0e:	40ac      	lsls	r4, r5
 8000f10:	40fe      	lsrs	r6, r7
 8000f12:	1e5d      	subs	r5, r3, #1
 8000f14:	41ab      	sbcs	r3, r5
 8000f16:	4334      	orrs	r4, r6
 8000f18:	40f9      	lsrs	r1, r7
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	1a5b      	subs	r3, r3, r1
 8000f20:	4699      	mov	r9, r3
 8000f22:	e04c      	b.n	8000fbe <__aeabi_dadd+0x44a>
 8000f24:	464a      	mov	r2, r9
 8000f26:	1a1c      	subs	r4, r3, r0
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	4192      	sbcs	r2, r2
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4692      	mov	sl, r2
 8000f32:	0002      	movs	r2, r0
 8000f34:	4650      	mov	r0, sl
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	4692      	mov	sl, r2
 8000f3a:	0212      	lsls	r2, r2, #8
 8000f3c:	d478      	bmi.n	8001030 <__aeabi_dadd+0x4bc>
 8000f3e:	4653      	mov	r3, sl
 8000f40:	4323      	orrs	r3, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x3d2>
 8000f44:	e66a      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8000f46:	2100      	movs	r1, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e745      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000f4c:	074a      	lsls	r2, r1, #29
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	08c9      	lsrs	r1, r1, #3
 8000f54:	e73d      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8000f56:	181c      	adds	r4, r3, r0
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	419b      	sbcs	r3, r3
 8000f5c:	4449      	add	r1, r9
 8000f5e:	468a      	mov	sl, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	449a      	add	sl, r3
 8000f64:	4653      	mov	r3, sl
 8000f66:	2601      	movs	r6, #1
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_dadd+0x3fa>
 8000f6c:	e727      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000f6e:	2602      	movs	r6, #2
 8000f70:	4652      	mov	r2, sl
 8000f72:	4baf      	ldr	r3, [pc, #700]	; (8001230 <__aeabi_dadd+0x6bc>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	4021      	ands	r1, r4
 8000f7c:	0862      	lsrs	r2, r4, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	07dc      	lsls	r4, r3, #31
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	469a      	mov	sl, r3
 8000f86:	4314      	orrs	r4, r2
 8000f88:	e670      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	3a20      	subs	r2, #32
 8000f90:	40d4      	lsrs	r4, r2
 8000f92:	46a4      	mov	ip, r4
 8000f94:	2f20      	cmp	r7, #32
 8000f96:	d007      	beq.n	8000fa8 <__aeabi_dadd+0x434>
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	1bd2      	subs	r2, r2, r7
 8000f9e:	4090      	lsls	r0, r2
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4640      	mov	r0, r8
 8000faa:	1e42      	subs	r2, r0, #1
 8000fac:	4190      	sbcs	r0, r2
 8000fae:	4662      	mov	r2, ip
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	e624      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	000c      	movs	r4, r1
 8000fba:	1e63      	subs	r3, r4, #1
 8000fbc:	419c      	sbcs	r4, r3
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	1b1c      	subs	r4, r3, r4
 8000fc2:	45a0      	cmp	r8, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	469a      	mov	sl, r3
 8000fce:	4665      	mov	r5, ip
 8000fd0:	0016      	movs	r6, r2
 8000fd2:	e61b      	b.n	8000c0c <__aeabi_dadd+0x98>
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x468>
 8000fda:	e0c7      	b.n	800116c <__aeabi_dadd+0x5f8>
 8000fdc:	1e7c      	subs	r4, r7, #1
 8000fde:	2f01      	cmp	r7, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x470>
 8000fe2:	e0f9      	b.n	80011d8 <__aeabi_dadd+0x664>
 8000fe4:	4e91      	ldr	r6, [pc, #580]	; (800122c <__aeabi_dadd+0x6b8>)
 8000fe6:	42b7      	cmp	r7, r6
 8000fe8:	d05c      	beq.n	80010a4 <__aeabi_dadd+0x530>
 8000fea:	0027      	movs	r7, r4
 8000fec:	e740      	b.n	8000e70 <__aeabi_dadd+0x2fc>
 8000fee:	2220      	movs	r2, #32
 8000ff0:	464c      	mov	r4, r9
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	1bd2      	subs	r2, r2, r7
 8000ff6:	4094      	lsls	r4, r2
 8000ff8:	40f8      	lsrs	r0, r7
 8000ffa:	4304      	orrs	r4, r0
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	4090      	lsls	r0, r2
 8001000:	1e42      	subs	r2, r0, #1
 8001002:	4190      	sbcs	r0, r2
 8001004:	464a      	mov	r2, r9
 8001006:	40fa      	lsrs	r2, r7
 8001008:	4304      	orrs	r4, r0
 800100a:	1889      	adds	r1, r1, r2
 800100c:	e6ee      	b.n	8000dec <__aeabi_dadd+0x278>
 800100e:	4c87      	ldr	r4, [pc, #540]	; (800122c <__aeabi_dadd+0x6b8>)
 8001010:	42a2      	cmp	r2, r4
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x4a2>
 8001014:	e6f9      	b.n	8000e0a <__aeabi_dadd+0x296>
 8001016:	1818      	adds	r0, r3, r0
 8001018:	4298      	cmp	r0, r3
 800101a:	419b      	sbcs	r3, r3
 800101c:	4449      	add	r1, r9
 800101e:	425b      	negs	r3, r3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	07dc      	lsls	r4, r3, #31
 8001024:	0840      	lsrs	r0, r0, #1
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	469a      	mov	sl, r3
 800102a:	0016      	movs	r6, r2
 800102c:	4304      	orrs	r4, r0
 800102e:	e6c6      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8001030:	4642      	mov	r2, r8
 8001032:	1ad4      	subs	r4, r2, r3
 8001034:	45a0      	cmp	r8, r4
 8001036:	4180      	sbcs	r0, r0
 8001038:	464b      	mov	r3, r9
 800103a:	4240      	negs	r0, r0
 800103c:	1a59      	subs	r1, r3, r1
 800103e:	1a0b      	subs	r3, r1, r0
 8001040:	469a      	mov	sl, r3
 8001042:	4665      	mov	r5, ip
 8001044:	e5ea      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8001046:	464b      	mov	r3, r9
 8001048:	464a      	mov	r2, r9
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	075b      	lsls	r3, r3, #29
 800104e:	4665      	mov	r5, ip
 8001050:	4303      	orrs	r3, r0
 8001052:	08d1      	lsrs	r1, r2, #3
 8001054:	e6bd      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001056:	2a00      	cmp	r2, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x4e8>
 800105a:	e08e      	b.n	800117a <__aeabi_dadd+0x606>
 800105c:	464b      	mov	r3, r9
 800105e:	4303      	orrs	r3, r0
 8001060:	d117      	bne.n	8001092 <__aeabi_dadd+0x51e>
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	2500      	movs	r5, #0
 8001066:	0309      	lsls	r1, r1, #12
 8001068:	e6da      	b.n	8000e20 <__aeabi_dadd+0x2ac>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	08c9      	lsrs	r1, r1, #3
 8001072:	e6d1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001074:	1a1c      	subs	r4, r3, r0
 8001076:	464a      	mov	r2, r9
 8001078:	42a3      	cmp	r3, r4
 800107a:	419b      	sbcs	r3, r3
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	425b      	negs	r3, r3
 8001080:	1acb      	subs	r3, r1, r3
 8001082:	469a      	mov	sl, r3
 8001084:	2601      	movs	r6, #1
 8001086:	e5c1      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001088:	074a      	lsls	r2, r1, #29
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	4313      	orrs	r3, r2
 800108e:	08c9      	lsrs	r1, r1, #3
 8001090:	e69f      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001092:	4643      	mov	r3, r8
 8001094:	08d8      	lsrs	r0, r3, #3
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	4665      	mov	r5, ip
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e6b9      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010a4:	4643      	mov	r3, r8
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	464b      	mov	r3, r9
 80010aa:	464a      	mov	r2, r9
 80010ac:	075b      	lsls	r3, r3, #29
 80010ae:	4303      	orrs	r3, r0
 80010b0:	08d1      	lsrs	r1, r2, #3
 80010b2:	e6b1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010b4:	4319      	orrs	r1, r3
 80010b6:	000c      	movs	r4, r1
 80010b8:	1e63      	subs	r3, r4, #1
 80010ba:	419c      	sbcs	r4, r3
 80010bc:	e6eb      	b.n	8000e96 <__aeabi_dadd+0x322>
 80010be:	003c      	movs	r4, r7
 80010c0:	000d      	movs	r5, r1
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e5      	lsrs	r5, r4
 80010c6:	2f20      	cmp	r7, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x55e>
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	1be4      	subs	r4, r4, r7
 80010ce:	40a1      	lsls	r1, r4
 80010d0:	430b      	orrs	r3, r1
 80010d2:	001c      	movs	r4, r3
 80010d4:	1e63      	subs	r3, r4, #1
 80010d6:	419c      	sbcs	r4, r3
 80010d8:	432c      	orrs	r4, r5
 80010da:	e770      	b.n	8000fbe <__aeabi_dadd+0x44a>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d0e1      	beq.n	80010a4 <__aeabi_dadd+0x530>
 80010e0:	464a      	mov	r2, r9
 80010e2:	4302      	orrs	r2, r0
 80010e4:	d0c1      	beq.n	800106a <__aeabi_dadd+0x4f6>
 80010e6:	074a      	lsls	r2, r1, #29
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	08c9      	lsrs	r1, r1, #3
 80010f0:	0312      	lsls	r2, r2, #12
 80010f2:	4211      	tst	r1, r2
 80010f4:	d008      	beq.n	8001108 <__aeabi_dadd+0x594>
 80010f6:	4648      	mov	r0, r9
 80010f8:	08c4      	lsrs	r4, r0, #3
 80010fa:	4214      	tst	r4, r2
 80010fc:	d104      	bne.n	8001108 <__aeabi_dadd+0x594>
 80010fe:	4643      	mov	r3, r8
 8001100:	0021      	movs	r1, r4
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	0742      	lsls	r2, r0, #29
 8001106:	4313      	orrs	r3, r2
 8001108:	0f5a      	lsrs	r2, r3, #29
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	0752      	lsls	r2, r2, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	e681      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001114:	464b      	mov	r3, r9
 8001116:	4303      	orrs	r3, r0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x5a8>
 800111a:	e714      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 800111c:	464b      	mov	r3, r9
 800111e:	464a      	mov	r2, r9
 8001120:	08c0      	lsrs	r0, r0, #3
 8001122:	075b      	lsls	r3, r3, #29
 8001124:	4665      	mov	r5, ip
 8001126:	4303      	orrs	r3, r0
 8001128:	08d1      	lsrs	r1, r2, #3
 800112a:	e655      	b.n	8000dd8 <__aeabi_dadd+0x264>
 800112c:	1ac4      	subs	r4, r0, r3
 800112e:	45a0      	cmp	r8, r4
 8001130:	4180      	sbcs	r0, r0
 8001132:	464b      	mov	r3, r9
 8001134:	4240      	negs	r0, r0
 8001136:	1a59      	subs	r1, r3, r1
 8001138:	1a0b      	subs	r3, r1, r0
 800113a:	469a      	mov	sl, r3
 800113c:	4665      	mov	r5, ip
 800113e:	2601      	movs	r6, #1
 8001140:	e564      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001142:	1a1c      	subs	r4, r3, r0
 8001144:	464a      	mov	r2, r9
 8001146:	42a3      	cmp	r3, r4
 8001148:	4180      	sbcs	r0, r0
 800114a:	1a8a      	subs	r2, r1, r2
 800114c:	4240      	negs	r0, r0
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	4692      	mov	sl, r2
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	d549      	bpl.n	80011ea <__aeabi_dadd+0x676>
 8001156:	4642      	mov	r2, r8
 8001158:	1ad4      	subs	r4, r2, r3
 800115a:	45a0      	cmp	r8, r4
 800115c:	4180      	sbcs	r0, r0
 800115e:	464b      	mov	r3, r9
 8001160:	4240      	negs	r0, r0
 8001162:	1a59      	subs	r1, r3, r1
 8001164:	1a0b      	subs	r3, r1, r0
 8001166:	469a      	mov	sl, r3
 8001168:	4665      	mov	r5, ip
 800116a:	e57f      	b.n	8000c6c <__aeabi_dadd+0xf8>
 800116c:	464b      	mov	r3, r9
 800116e:	464a      	mov	r2, r9
 8001170:	08c0      	lsrs	r0, r0, #3
 8001172:	075b      	lsls	r3, r3, #29
 8001174:	4303      	orrs	r3, r0
 8001176:	08d1      	lsrs	r1, r2, #3
 8001178:	e62b      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 800117a:	464a      	mov	r2, r9
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	4302      	orrs	r2, r0
 8001180:	d138      	bne.n	80011f4 <__aeabi_dadd+0x680>
 8001182:	074a      	lsls	r2, r1, #29
 8001184:	4313      	orrs	r3, r2
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	e646      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 800118a:	464b      	mov	r3, r9
 800118c:	464a      	mov	r2, r9
 800118e:	08c0      	lsrs	r0, r0, #3
 8001190:	075b      	lsls	r3, r3, #29
 8001192:	4303      	orrs	r3, r0
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	e61f      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8001198:	181c      	adds	r4, r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4449      	add	r1, r9
 80011a0:	468a      	mov	sl, r1
 80011a2:	425b      	negs	r3, r3
 80011a4:	449a      	add	sl, r3
 80011a6:	4653      	mov	r3, sl
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dadd+0x63a>
 80011ac:	e607      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ae:	4652      	mov	r2, sl
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <__aeabi_dadd+0x6bc>)
 80011b2:	2601      	movs	r6, #1
 80011b4:	401a      	ands	r2, r3
 80011b6:	4692      	mov	sl, r2
 80011b8:	e601      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ba:	003c      	movs	r4, r7
 80011bc:	000e      	movs	r6, r1
 80011be:	3c20      	subs	r4, #32
 80011c0:	40e6      	lsrs	r6, r4
 80011c2:	2f20      	cmp	r7, #32
 80011c4:	d003      	beq.n	80011ce <__aeabi_dadd+0x65a>
 80011c6:	2440      	movs	r4, #64	; 0x40
 80011c8:	1be4      	subs	r4, r4, r7
 80011ca:	40a1      	lsls	r1, r4
 80011cc:	430b      	orrs	r3, r1
 80011ce:	001c      	movs	r4, r3
 80011d0:	1e63      	subs	r3, r4, #1
 80011d2:	419c      	sbcs	r4, r3
 80011d4:	4334      	orrs	r4, r6
 80011d6:	e65e      	b.n	8000e96 <__aeabi_dadd+0x322>
 80011d8:	4443      	add	r3, r8
 80011da:	4283      	cmp	r3, r0
 80011dc:	4180      	sbcs	r0, r0
 80011de:	4449      	add	r1, r9
 80011e0:	468a      	mov	sl, r1
 80011e2:	4240      	negs	r0, r0
 80011e4:	001c      	movs	r4, r3
 80011e6:	4482      	add	sl, r0
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_dadd+0x3f0>
 80011ea:	4653      	mov	r3, sl
 80011ec:	4323      	orrs	r3, r4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x67e>
 80011f0:	e6a9      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 80011f2:	e5e4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011f4:	074a      	lsls	r2, r1, #29
 80011f6:	4313      	orrs	r3, r2
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	0312      	lsls	r2, r2, #12
 80011fe:	4211      	tst	r1, r2
 8001200:	d009      	beq.n	8001216 <__aeabi_dadd+0x6a2>
 8001202:	4648      	mov	r0, r9
 8001204:	08c4      	lsrs	r4, r0, #3
 8001206:	4214      	tst	r4, r2
 8001208:	d105      	bne.n	8001216 <__aeabi_dadd+0x6a2>
 800120a:	4643      	mov	r3, r8
 800120c:	4665      	mov	r5, ip
 800120e:	0021      	movs	r1, r4
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	0742      	lsls	r2, r0, #29
 8001214:	4313      	orrs	r3, r2
 8001216:	0f5a      	lsrs	r2, r3, #29
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	0752      	lsls	r2, r2, #29
 800121e:	4313      	orrs	r3, r2
 8001220:	e5fa      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001222:	2300      	movs	r3, #0
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dadd+0x6b8>)
 8001226:	001c      	movs	r4, r3
 8001228:	e540      	b.n	8000cac <__aeabi_dadd+0x138>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	ff7fffff 	.word	0xff7fffff

08001234 <__aeabi_ddiv>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4657      	mov	r7, sl
 8001238:	464e      	mov	r6, r9
 800123a:	4645      	mov	r5, r8
 800123c:	46de      	mov	lr, fp
 800123e:	b5e0      	push	{r5, r6, r7, lr}
 8001240:	030c      	lsls	r4, r1, #12
 8001242:	001f      	movs	r7, r3
 8001244:	004b      	lsls	r3, r1, #1
 8001246:	4681      	mov	r9, r0
 8001248:	4692      	mov	sl, r2
 800124a:	0005      	movs	r5, r0
 800124c:	b085      	sub	sp, #20
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d5b      	lsrs	r3, r3, #21
 8001252:	0fce      	lsrs	r6, r1, #31
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x26>
 8001258:	e152      	b.n	8001500 <__aeabi_ddiv+0x2cc>
 800125a:	4ad2      	ldr	r2, [pc, #840]	; (80015a4 <__aeabi_ddiv+0x370>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2e>
 8001260:	e16e      	b.n	8001540 <__aeabi_ddiv+0x30c>
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00e4      	lsls	r4, r4, #3
 8001266:	4314      	orrs	r4, r2
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	4322      	orrs	r2, r4
 800126e:	4690      	mov	r8, r2
 8001270:	4acd      	ldr	r2, [pc, #820]	; (80015a8 <__aeabi_ddiv+0x374>)
 8001272:	00c5      	lsls	r5, r0, #3
 8001274:	4693      	mov	fp, r2
 8001276:	449b      	add	fp, r3
 8001278:	2300      	movs	r3, #0
 800127a:	4699      	mov	r9, r3
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	033c      	lsls	r4, r7, #12
 8001280:	007b      	lsls	r3, r7, #1
 8001282:	4650      	mov	r0, sl
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fff      	lsrs	r7, r7, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x5c>
 800128e:	e11a      	b.n	80014c6 <__aeabi_ddiv+0x292>
 8001290:	4ac4      	ldr	r2, [pc, #784]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x64>
 8001296:	e15e      	b.n	8001556 <__aeabi_ddiv+0x322>
 8001298:	0f42      	lsrs	r2, r0, #29
 800129a:	00e4      	lsls	r4, r4, #3
 800129c:	4322      	orrs	r2, r4
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	4314      	orrs	r4, r2
 80012a4:	4ac0      	ldr	r2, [pc, #768]	; (80015a8 <__aeabi_ddiv+0x374>)
 80012a6:	00c1      	lsls	r1, r0, #3
 80012a8:	4694      	mov	ip, r2
 80012aa:	465a      	mov	r2, fp
 80012ac:	4463      	add	r3, ip
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	469b      	mov	fp, r3
 80012b2:	2000      	movs	r0, #0
 80012b4:	0033      	movs	r3, r6
 80012b6:	407b      	eors	r3, r7
 80012b8:	469a      	mov	sl, r3
 80012ba:	464b      	mov	r3, r9
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d827      	bhi.n	8001310 <__aeabi_ddiv+0xdc>
 80012c0:	4aba      	ldr	r2, [pc, #744]	; (80015ac <__aeabi_ddiv+0x378>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	469f      	mov	pc, r3
 80012c8:	46b2      	mov	sl, r6
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d016      	beq.n	80012fe <__aeabi_ddiv+0xca>
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0xa2>
 80012d4:	e287      	b.n	80017e6 <__aeabi_ddiv+0x5b2>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa8>
 80012da:	e0d5      	b.n	8001488 <__aeabi_ddiv+0x254>
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	2500      	movs	r5, #0
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	4313      	orrs	r3, r2
 80012e6:	4652      	mov	r2, sl
 80012e8:	07d2      	lsls	r2, r2, #31
 80012ea:	4313      	orrs	r3, r2
 80012ec:	0028      	movs	r0, r5
 80012ee:	0019      	movs	r1, r3
 80012f0:	b005      	add	sp, #20
 80012f2:	bcf0      	pop	{r4, r5, r6, r7}
 80012f4:	46bb      	mov	fp, r7
 80012f6:	46b2      	mov	sl, r6
 80012f8:	46a9      	mov	r9, r5
 80012fa:	46a0      	mov	r8, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	2200      	movs	r2, #0
 8001300:	2500      	movs	r5, #0
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0xae>
 8001306:	46ba      	mov	sl, r7
 8001308:	46a0      	mov	r8, r4
 800130a:	000d      	movs	r5, r1
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	e7dc      	b.n	80012ca <__aeabi_ddiv+0x96>
 8001310:	4544      	cmp	r4, r8
 8001312:	d200      	bcs.n	8001316 <__aeabi_ddiv+0xe2>
 8001314:	e1c4      	b.n	80016a0 <__aeabi_ddiv+0x46c>
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0xe6>
 8001318:	e1bf      	b.n	800169a <__aeabi_ddiv+0x466>
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	469c      	mov	ip, r3
 8001320:	002e      	movs	r6, r5
 8001322:	4640      	mov	r0, r8
 8001324:	2500      	movs	r5, #0
 8001326:	44e3      	add	fp, ip
 8001328:	0223      	lsls	r3, r4, #8
 800132a:	0e0c      	lsrs	r4, r1, #24
 800132c:	431c      	orrs	r4, r3
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	4699      	mov	r9, r3
 8001332:	0423      	lsls	r3, r4, #16
 8001334:	020a      	lsls	r2, r1, #8
 8001336:	0c1f      	lsrs	r7, r3, #16
 8001338:	4649      	mov	r1, r9
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	9701      	str	r7, [sp, #4]
 800133e:	f7fe ff85 	bl	800024c <__aeabi_uidivmod>
 8001342:	0002      	movs	r2, r0
 8001344:	437a      	muls	r2, r7
 8001346:	040b      	lsls	r3, r1, #16
 8001348:	0c31      	lsrs	r1, r6, #16
 800134a:	4680      	mov	r8, r0
 800134c:	4319      	orrs	r1, r3
 800134e:	428a      	cmp	r2, r1
 8001350:	d907      	bls.n	8001362 <__aeabi_ddiv+0x12e>
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	469c      	mov	ip, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	44e0      	add	r8, ip
 800135c:	428c      	cmp	r4, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x12e>
 8001360:	e201      	b.n	8001766 <__aeabi_ddiv+0x532>
 8001362:	1a88      	subs	r0, r1, r2
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff71 	bl	800024c <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	0436      	lsls	r6, r6, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	0c36      	lsrs	r6, r6, #16
 8001374:	0003      	movs	r3, r0
 8001376:	430e      	orrs	r6, r1
 8001378:	42b2      	cmp	r2, r6
 800137a:	d904      	bls.n	8001386 <__aeabi_ddiv+0x152>
 800137c:	1936      	adds	r6, r6, r4
 800137e:	3b01      	subs	r3, #1
 8001380:	42b4      	cmp	r4, r6
 8001382:	d800      	bhi.n	8001386 <__aeabi_ddiv+0x152>
 8001384:	e1e9      	b.n	800175a <__aeabi_ddiv+0x526>
 8001386:	1ab0      	subs	r0, r6, r2
 8001388:	4642      	mov	r2, r8
 800138a:	9e00      	ldr	r6, [sp, #0]
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	0c33      	lsrs	r3, r6, #16
 8001392:	001f      	movs	r7, r3
 8001394:	0c11      	lsrs	r1, r2, #16
 8001396:	4690      	mov	r8, r2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	0413      	lsls	r3, r2, #16
 800139c:	0432      	lsls	r2, r6, #16
 800139e:	0c16      	lsrs	r6, r2, #16
 80013a0:	0032      	movs	r2, r6
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	435a      	muls	r2, r3
 80013a6:	9603      	str	r6, [sp, #12]
 80013a8:	437b      	muls	r3, r7
 80013aa:	434e      	muls	r6, r1
 80013ac:	4379      	muls	r1, r7
 80013ae:	0c17      	lsrs	r7, r2, #16
 80013b0:	46bc      	mov	ip, r7
 80013b2:	199b      	adds	r3, r3, r6
 80013b4:	4463      	add	r3, ip
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d903      	bls.n	80013c2 <__aeabi_ddiv+0x18e>
 80013ba:	2680      	movs	r6, #128	; 0x80
 80013bc:	0276      	lsls	r6, r6, #9
 80013be:	46b4      	mov	ip, r6
 80013c0:	4461      	add	r1, ip
 80013c2:	0c1e      	lsrs	r6, r3, #16
 80013c4:	1871      	adds	r1, r6, r1
 80013c6:	0416      	lsls	r6, r2, #16
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	0c36      	lsrs	r6, r6, #16
 80013cc:	199e      	adds	r6, r3, r6
 80013ce:	4288      	cmp	r0, r1
 80013d0:	d302      	bcc.n	80013d8 <__aeabi_ddiv+0x1a4>
 80013d2:	d112      	bne.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d4:	42b5      	cmp	r5, r6
 80013d6:	d210      	bcs.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d8:	4643      	mov	r3, r8
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	9b00      	ldr	r3, [sp, #0]
 80013de:	469c      	mov	ip, r3
 80013e0:	4465      	add	r5, ip
 80013e2:	001f      	movs	r7, r3
 80013e4:	429d      	cmp	r5, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	425b      	negs	r3, r3
 80013ea:	191b      	adds	r3, r3, r4
 80013ec:	18c0      	adds	r0, r0, r3
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x1c0>
 80013f2:	e19e      	b.n	8001732 <__aeabi_ddiv+0x4fe>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x1c4>
 80013f6:	e199      	b.n	800172c <__aeabi_ddiv+0x4f8>
 80013f8:	4690      	mov	r8, r2
 80013fa:	1bae      	subs	r6, r5, r6
 80013fc:	42b5      	cmp	r5, r6
 80013fe:	41ad      	sbcs	r5, r5
 8001400:	1a40      	subs	r0, r0, r1
 8001402:	426d      	negs	r5, r5
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	4284      	cmp	r4, r0
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x1d8>
 800140a:	e1d2      	b.n	80017b2 <__aeabi_ddiv+0x57e>
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff1d 	bl	800024c <__aeabi_uidivmod>
 8001412:	9a01      	ldr	r2, [sp, #4]
 8001414:	040b      	lsls	r3, r1, #16
 8001416:	4342      	muls	r2, r0
 8001418:	0c31      	lsrs	r1, r6, #16
 800141a:	0005      	movs	r5, r0
 800141c:	4319      	orrs	r1, r3
 800141e:	428a      	cmp	r2, r1
 8001420:	d900      	bls.n	8001424 <__aeabi_ddiv+0x1f0>
 8001422:	e16c      	b.n	80016fe <__aeabi_ddiv+0x4ca>
 8001424:	1a88      	subs	r0, r1, r2
 8001426:	4649      	mov	r1, r9
 8001428:	f7fe ff10 	bl	800024c <__aeabi_uidivmod>
 800142c:	9a01      	ldr	r2, [sp, #4]
 800142e:	0436      	lsls	r6, r6, #16
 8001430:	4342      	muls	r2, r0
 8001432:	0409      	lsls	r1, r1, #16
 8001434:	0c36      	lsrs	r6, r6, #16
 8001436:	0003      	movs	r3, r0
 8001438:	430e      	orrs	r6, r1
 800143a:	42b2      	cmp	r2, r6
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x20c>
 800143e:	e153      	b.n	80016e8 <__aeabi_ddiv+0x4b4>
 8001440:	9803      	ldr	r0, [sp, #12]
 8001442:	1ab6      	subs	r6, r6, r2
 8001444:	0002      	movs	r2, r0
 8001446:	042d      	lsls	r5, r5, #16
 8001448:	431d      	orrs	r5, r3
 800144a:	9f02      	ldr	r7, [sp, #8]
 800144c:	042b      	lsls	r3, r5, #16
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435a      	muls	r2, r3
 8001452:	437b      	muls	r3, r7
 8001454:	469c      	mov	ip, r3
 8001456:	0c29      	lsrs	r1, r5, #16
 8001458:	4348      	muls	r0, r1
 800145a:	0c13      	lsrs	r3, r2, #16
 800145c:	4484      	add	ip, r0
 800145e:	4463      	add	r3, ip
 8001460:	4379      	muls	r1, r7
 8001462:	4298      	cmp	r0, r3
 8001464:	d903      	bls.n	800146e <__aeabi_ddiv+0x23a>
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	0240      	lsls	r0, r0, #9
 800146a:	4684      	mov	ip, r0
 800146c:	4461      	add	r1, ip
 800146e:	0c18      	lsrs	r0, r3, #16
 8001470:	0412      	lsls	r2, r2, #16
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	0c12      	lsrs	r2, r2, #16
 8001476:	1840      	adds	r0, r0, r1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	4286      	cmp	r6, r0
 800147c:	d200      	bcs.n	8001480 <__aeabi_ddiv+0x24c>
 800147e:	e100      	b.n	8001682 <__aeabi_ddiv+0x44e>
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x250>
 8001482:	e0fb      	b.n	800167c <__aeabi_ddiv+0x448>
 8001484:	2301      	movs	r3, #1
 8001486:	431d      	orrs	r5, r3
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <__aeabi_ddiv+0x37c>)
 800148a:	445b      	add	r3, fp
 800148c:	2b00      	cmp	r3, #0
 800148e:	dc00      	bgt.n	8001492 <__aeabi_ddiv+0x25e>
 8001490:	e0aa      	b.n	80015e8 <__aeabi_ddiv+0x3b4>
 8001492:	076a      	lsls	r2, r5, #29
 8001494:	d000      	beq.n	8001498 <__aeabi_ddiv+0x264>
 8001496:	e13d      	b.n	8001714 <__aeabi_ddiv+0x4e0>
 8001498:	08e9      	lsrs	r1, r5, #3
 800149a:	4642      	mov	r2, r8
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d506      	bpl.n	80014ae <__aeabi_ddiv+0x27a>
 80014a0:	4642      	mov	r2, r8
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <__aeabi_ddiv+0x380>)
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	4690      	mov	r8, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	445b      	add	r3, fp
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <__aeabi_ddiv+0x384>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_ddiv+0x282>
 80014b4:	e723      	b.n	80012fe <__aeabi_ddiv+0xca>
 80014b6:	4642      	mov	r2, r8
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	0755      	lsls	r5, r2, #29
 80014bc:	0252      	lsls	r2, r2, #9
 80014be:	430d      	orrs	r5, r1
 80014c0:	0b12      	lsrs	r2, r2, #12
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	e70d      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80014c6:	4651      	mov	r1, sl
 80014c8:	4321      	orrs	r1, r4
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x29a>
 80014cc:	e07c      	b.n	80015c8 <__aeabi_ddiv+0x394>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x2a0>
 80014d2:	e0fb      	b.n	80016cc <__aeabi_ddiv+0x498>
 80014d4:	0020      	movs	r0, r4
 80014d6:	f001 f995 	bl	8002804 <__clzsi2>
 80014da:	0002      	movs	r2, r0
 80014dc:	3a0b      	subs	r2, #11
 80014de:	231d      	movs	r3, #29
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4652      	mov	r2, sl
 80014e4:	0001      	movs	r1, r0
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4653      	mov	r3, sl
 80014ea:	3908      	subs	r1, #8
 80014ec:	408b      	lsls	r3, r1
 80014ee:	408c      	lsls	r4, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	4314      	orrs	r4, r2
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <__aeabi_ddiv+0x388>)
 80014f6:	4458      	add	r0, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	4483      	add	fp, r0
 80014fc:	2000      	movs	r0, #0
 80014fe:	e6d9      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001500:	0003      	movs	r3, r0
 8001502:	4323      	orrs	r3, r4
 8001504:	4698      	mov	r8, r3
 8001506:	d044      	beq.n	8001592 <__aeabi_ddiv+0x35e>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2da>
 800150c:	e0cf      	b.n	80016ae <__aeabi_ddiv+0x47a>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 f978 	bl	8002804 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	0002      	movs	r2, r0
 8001518:	390b      	subs	r1, #11
 800151a:	231d      	movs	r3, #29
 800151c:	1a5b      	subs	r3, r3, r1
 800151e:	4649      	mov	r1, r9
 8001520:	0010      	movs	r0, r2
 8001522:	40d9      	lsrs	r1, r3
 8001524:	3808      	subs	r0, #8
 8001526:	4084      	lsls	r4, r0
 8001528:	000b      	movs	r3, r1
 800152a:	464d      	mov	r5, r9
 800152c:	4323      	orrs	r3, r4
 800152e:	4698      	mov	r8, r3
 8001530:	4085      	lsls	r5, r0
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <__aeabi_ddiv+0x38c>)
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	469b      	mov	fp, r3
 8001538:	2300      	movs	r3, #0
 800153a:	4699      	mov	r9, r3
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	e69e      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001540:	0002      	movs	r2, r0
 8001542:	4322      	orrs	r2, r4
 8001544:	4690      	mov	r8, r2
 8001546:	d11d      	bne.n	8001584 <__aeabi_ddiv+0x350>
 8001548:	2208      	movs	r2, #8
 800154a:	469b      	mov	fp, r3
 800154c:	2302      	movs	r3, #2
 800154e:	2500      	movs	r5, #0
 8001550:	4691      	mov	r9, r2
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	e693      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001556:	4651      	mov	r1, sl
 8001558:	4321      	orrs	r1, r4
 800155a:	d109      	bne.n	8001570 <__aeabi_ddiv+0x33c>
 800155c:	2302      	movs	r3, #2
 800155e:	464a      	mov	r2, r9
 8001560:	431a      	orrs	r2, r3
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001564:	4691      	mov	r9, r2
 8001566:	469c      	mov	ip, r3
 8001568:	2400      	movs	r4, #0
 800156a:	2002      	movs	r0, #2
 800156c:	44e3      	add	fp, ip
 800156e:	e6a1      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001570:	2303      	movs	r3, #3
 8001572:	464a      	mov	r2, r9
 8001574:	431a      	orrs	r2, r3
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001578:	4691      	mov	r9, r2
 800157a:	469c      	mov	ip, r3
 800157c:	4651      	mov	r1, sl
 800157e:	2003      	movs	r0, #3
 8001580:	44e3      	add	fp, ip
 8001582:	e697      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001584:	220c      	movs	r2, #12
 8001586:	469b      	mov	fp, r3
 8001588:	2303      	movs	r3, #3
 800158a:	46a0      	mov	r8, r4
 800158c:	4691      	mov	r9, r2
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	e675      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001592:	2304      	movs	r3, #4
 8001594:	4699      	mov	r9, r3
 8001596:	2300      	movs	r3, #0
 8001598:	469b      	mov	fp, r3
 800159a:	3301      	adds	r3, #1
 800159c:	2500      	movs	r5, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	e66d      	b.n	800127e <__aeabi_ddiv+0x4a>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff
 80015a8:	fffffc01 	.word	0xfffffc01
 80015ac:	0800b780 	.word	0x0800b780
 80015b0:	000003ff 	.word	0x000003ff
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	000007fe 	.word	0x000007fe
 80015bc:	000003f3 	.word	0x000003f3
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	fffff801 	.word	0xfffff801
 80015c8:	464a      	mov	r2, r9
 80015ca:	2301      	movs	r3, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	4691      	mov	r9, r2
 80015d0:	2400      	movs	r4, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	e66e      	b.n	80012b4 <__aeabi_ddiv+0x80>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	469a      	mov	sl, r3
 80015dc:	2500      	movs	r5, #0
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	e67e      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80015e4:	2501      	movs	r5, #1
 80015e6:	426d      	negs	r5, r5
 80015e8:	2201      	movs	r2, #1
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	2a38      	cmp	r2, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0x3be>
 80015f0:	e674      	b.n	80012dc <__aeabi_ddiv+0xa8>
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x3c4>
 80015f6:	e0bd      	b.n	8001774 <__aeabi_ddiv+0x540>
 80015f8:	211f      	movs	r1, #31
 80015fa:	4249      	negs	r1, r1
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	4641      	mov	r1, r8
 8001600:	40d9      	lsrs	r1, r3
 8001602:	000b      	movs	r3, r1
 8001604:	2a20      	cmp	r2, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_ddiv+0x3de>
 8001608:	4641      	mov	r1, r8
 800160a:	4a7e      	ldr	r2, [pc, #504]	; (8001804 <__aeabi_ddiv+0x5d0>)
 800160c:	445a      	add	r2, fp
 800160e:	4091      	lsls	r1, r2
 8001610:	430d      	orrs	r5, r1
 8001612:	0029      	movs	r1, r5
 8001614:	1e4a      	subs	r2, r1, #1
 8001616:	4191      	sbcs	r1, r2
 8001618:	4319      	orrs	r1, r3
 800161a:	2307      	movs	r3, #7
 800161c:	001d      	movs	r5, r3
 800161e:	2200      	movs	r2, #0
 8001620:	400d      	ands	r5, r1
 8001622:	420b      	tst	r3, r1
 8001624:	d100      	bne.n	8001628 <__aeabi_ddiv+0x3f4>
 8001626:	e0d0      	b.n	80017ca <__aeabi_ddiv+0x596>
 8001628:	220f      	movs	r2, #15
 800162a:	2300      	movs	r3, #0
 800162c:	400a      	ands	r2, r1
 800162e:	2a04      	cmp	r2, #4
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x400>
 8001632:	e0c7      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001634:	1d0a      	adds	r2, r1, #4
 8001636:	428a      	cmp	r2, r1
 8001638:	4189      	sbcs	r1, r1
 800163a:	4249      	negs	r1, r1
 800163c:	185b      	adds	r3, r3, r1
 800163e:	0011      	movs	r1, r2
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_ddiv+0x412>
 8001644:	e0be      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e649      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	4643      	mov	r3, r8
 8001652:	0312      	lsls	r2, r2, #12
 8001654:	4213      	tst	r3, r2
 8001656:	d008      	beq.n	800166a <__aeabi_ddiv+0x436>
 8001658:	4214      	tst	r4, r2
 800165a:	d106      	bne.n	800166a <__aeabi_ddiv+0x436>
 800165c:	4322      	orrs	r2, r4
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	46ba      	mov	sl, r7
 8001662:	000d      	movs	r5, r1
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001666:	0b12      	lsrs	r2, r2, #12
 8001668:	e63b      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4643      	mov	r3, r8
 800166e:	0312      	lsls	r2, r2, #12
 8001670:	431a      	orrs	r2, r3
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	46b2      	mov	sl, r6
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	e632      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x44e>
 8001680:	e702      	b.n	8001488 <__aeabi_ddiv+0x254>
 8001682:	19a6      	adds	r6, r4, r6
 8001684:	1e6a      	subs	r2, r5, #1
 8001686:	42a6      	cmp	r6, r4
 8001688:	d200      	bcs.n	800168c <__aeabi_ddiv+0x458>
 800168a:	e089      	b.n	80017a0 <__aeabi_ddiv+0x56c>
 800168c:	4286      	cmp	r6, r0
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0x45e>
 8001690:	e09f      	b.n	80017d2 <__aeabi_ddiv+0x59e>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x462>
 8001694:	e0af      	b.n	80017f6 <__aeabi_ddiv+0x5c2>
 8001696:	0015      	movs	r5, r2
 8001698:	e6f4      	b.n	8001484 <__aeabi_ddiv+0x250>
 800169a:	42a9      	cmp	r1, r5
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x46c>
 800169e:	e63c      	b.n	800131a <__aeabi_ddiv+0xe6>
 80016a0:	4643      	mov	r3, r8
 80016a2:	07de      	lsls	r6, r3, #31
 80016a4:	0858      	lsrs	r0, r3, #1
 80016a6:	086b      	lsrs	r3, r5, #1
 80016a8:	431e      	orrs	r6, r3
 80016aa:	07ed      	lsls	r5, r5, #31
 80016ac:	e63c      	b.n	8001328 <__aeabi_ddiv+0xf4>
 80016ae:	f001 f8a9 	bl	8002804 <__clzsi2>
 80016b2:	0001      	movs	r1, r0
 80016b4:	0002      	movs	r2, r0
 80016b6:	3115      	adds	r1, #21
 80016b8:	3220      	adds	r2, #32
 80016ba:	291c      	cmp	r1, #28
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_ddiv+0x48c>
 80016be:	e72c      	b.n	800151a <__aeabi_ddiv+0x2e6>
 80016c0:	464b      	mov	r3, r9
 80016c2:	3808      	subs	r0, #8
 80016c4:	4083      	lsls	r3, r0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4698      	mov	r8, r3
 80016ca:	e732      	b.n	8001532 <__aeabi_ddiv+0x2fe>
 80016cc:	f001 f89a 	bl	8002804 <__clzsi2>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	3215      	adds	r2, #21
 80016d6:	3020      	adds	r0, #32
 80016d8:	2a1c      	cmp	r2, #28
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x4aa>
 80016dc:	e6ff      	b.n	80014de <__aeabi_ddiv+0x2aa>
 80016de:	4654      	mov	r4, sl
 80016e0:	3b08      	subs	r3, #8
 80016e2:	2100      	movs	r1, #0
 80016e4:	409c      	lsls	r4, r3
 80016e6:	e705      	b.n	80014f4 <__aeabi_ddiv+0x2c0>
 80016e8:	1936      	adds	r6, r6, r4
 80016ea:	3b01      	subs	r3, #1
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x4be>
 80016f0:	e6a6      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f2:	42b2      	cmp	r2, r6
 80016f4:	d800      	bhi.n	80016f8 <__aeabi_ddiv+0x4c4>
 80016f6:	e6a3      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f8:	1e83      	subs	r3, r0, #2
 80016fa:	1936      	adds	r6, r6, r4
 80016fc:	e6a0      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3d01      	subs	r5, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d900      	bls.n	8001708 <__aeabi_ddiv+0x4d4>
 8001706:	e68d      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001708:	428a      	cmp	r2, r1
 800170a:	d800      	bhi.n	800170e <__aeabi_ddiv+0x4da>
 800170c:	e68a      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 800170e:	1e85      	subs	r5, r0, #2
 8001710:	1909      	adds	r1, r1, r4
 8001712:	e687      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001714:	220f      	movs	r2, #15
 8001716:	402a      	ands	r2, r5
 8001718:	2a04      	cmp	r2, #4
 800171a:	d100      	bne.n	800171e <__aeabi_ddiv+0x4ea>
 800171c:	e6bc      	b.n	8001498 <__aeabi_ddiv+0x264>
 800171e:	1d29      	adds	r1, r5, #4
 8001720:	42a9      	cmp	r1, r5
 8001722:	41ad      	sbcs	r5, r5
 8001724:	426d      	negs	r5, r5
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	44a8      	add	r8, r5
 800172a:	e6b6      	b.n	800149a <__aeabi_ddiv+0x266>
 800172c:	42af      	cmp	r7, r5
 800172e:	d900      	bls.n	8001732 <__aeabi_ddiv+0x4fe>
 8001730:	e662      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001732:	4281      	cmp	r1, r0
 8001734:	d804      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 8001736:	d000      	beq.n	800173a <__aeabi_ddiv+0x506>
 8001738:	e65e      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 800173a:	42ae      	cmp	r6, r5
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 800173e:	e65b      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001740:	2302      	movs	r3, #2
 8001742:	425b      	negs	r3, r3
 8001744:	469c      	mov	ip, r3
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	44e0      	add	r8, ip
 800174a:	469c      	mov	ip, r3
 800174c:	4465      	add	r5, ip
 800174e:	429d      	cmp	r5, r3
 8001750:	419b      	sbcs	r3, r3
 8001752:	425b      	negs	r3, r3
 8001754:	191b      	adds	r3, r3, r4
 8001756:	18c0      	adds	r0, r0, r3
 8001758:	e64f      	b.n	80013fa <__aeabi_ddiv+0x1c6>
 800175a:	42b2      	cmp	r2, r6
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x52c>
 800175e:	e612      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001760:	1e83      	subs	r3, r0, #2
 8001762:	1936      	adds	r6, r6, r4
 8001764:	e60f      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001766:	428a      	cmp	r2, r1
 8001768:	d800      	bhi.n	800176c <__aeabi_ddiv+0x538>
 800176a:	e5fa      	b.n	8001362 <__aeabi_ddiv+0x12e>
 800176c:	1e83      	subs	r3, r0, #2
 800176e:	4698      	mov	r8, r3
 8001770:	1909      	adds	r1, r1, r4
 8001772:	e5f6      	b.n	8001362 <__aeabi_ddiv+0x12e>
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <__aeabi_ddiv+0x5d4>)
 8001776:	0028      	movs	r0, r5
 8001778:	445b      	add	r3, fp
 800177a:	4641      	mov	r1, r8
 800177c:	409d      	lsls	r5, r3
 800177e:	4099      	lsls	r1, r3
 8001780:	40d0      	lsrs	r0, r2
 8001782:	1e6b      	subs	r3, r5, #1
 8001784:	419d      	sbcs	r5, r3
 8001786:	4643      	mov	r3, r8
 8001788:	4301      	orrs	r1, r0
 800178a:	4329      	orrs	r1, r5
 800178c:	40d3      	lsrs	r3, r2
 800178e:	074a      	lsls	r2, r1, #29
 8001790:	d100      	bne.n	8001794 <__aeabi_ddiv+0x560>
 8001792:	e755      	b.n	8001640 <__aeabi_ddiv+0x40c>
 8001794:	220f      	movs	r2, #15
 8001796:	400a      	ands	r2, r1
 8001798:	2a04      	cmp	r2, #4
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x56a>
 800179c:	e74a      	b.n	8001634 <__aeabi_ddiv+0x400>
 800179e:	e74f      	b.n	8001640 <__aeabi_ddiv+0x40c>
 80017a0:	0015      	movs	r5, r2
 80017a2:	4286      	cmp	r6, r0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_ddiv+0x574>
 80017a6:	e66d      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017a8:	9a00      	ldr	r2, [sp, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0x57c>
 80017ae:	e669      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017b0:	e66a      	b.n	8001488 <__aeabi_ddiv+0x254>
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <__aeabi_ddiv+0x5d8>)
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_ddiv+0x588>
 80017ba:	e713      	b.n	80015e4 <__aeabi_ddiv+0x3b0>
 80017bc:	2501      	movs	r5, #1
 80017be:	2100      	movs	r1, #0
 80017c0:	44a8      	add	r8, r5
 80017c2:	e66a      	b.n	800149a <__aeabi_ddiv+0x266>
 80017c4:	075d      	lsls	r5, r3, #29
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	0b1a      	lsrs	r2, r3, #12
 80017ca:	08c9      	lsrs	r1, r1, #3
 80017cc:	2300      	movs	r3, #0
 80017ce:	430d      	orrs	r5, r1
 80017d0:	e587      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017d2:	9900      	ldr	r1, [sp, #0]
 80017d4:	3d02      	subs	r5, #2
 80017d6:	004a      	lsls	r2, r1, #1
 80017d8:	428a      	cmp	r2, r1
 80017da:	41bf      	sbcs	r7, r7
 80017dc:	427f      	negs	r7, r7
 80017de:	193f      	adds	r7, r7, r4
 80017e0:	19f6      	adds	r6, r6, r7
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	e7dd      	b.n	80017a2 <__aeabi_ddiv+0x56e>
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4643      	mov	r3, r8
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	431a      	orrs	r2, r3
 80017ee:	0312      	lsls	r2, r2, #12
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	e575      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017f6:	9900      	ldr	r1, [sp, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d3ea      	bcc.n	80017d2 <__aeabi_ddiv+0x59e>
 80017fc:	0015      	movs	r5, r2
 80017fe:	e7d3      	b.n	80017a8 <__aeabi_ddiv+0x574>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4645      	mov	r5, r8
 8001a2c:	46de      	mov	lr, fp
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	001f      	movs	r7, r3
 8001a36:	030b      	lsls	r3, r1, #12
 8001a38:	0b1b      	lsrs	r3, r3, #12
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	004d      	lsls	r5, r1, #1
 8001a3e:	0fcb      	lsrs	r3, r1, #31
 8001a40:	0004      	movs	r4, r0
 8001a42:	4691      	mov	r9, r2
 8001a44:	4698      	mov	r8, r3
 8001a46:	b087      	sub	sp, #28
 8001a48:	0d6d      	lsrs	r5, r5, #21
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x26>
 8001a4c:	e1cd      	b.n	8001dea <__aeabi_dmul+0x3c2>
 8001a4e:	4bce      	ldr	r3, [pc, #824]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a50:	429d      	cmp	r5, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2e>
 8001a54:	e1e9      	b.n	8001e2a <__aeabi_dmul+0x402>
 8001a56:	465a      	mov	r2, fp
 8001a58:	0f43      	lsrs	r3, r0, #29
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	00c3      	lsls	r3, r0, #3
 8001a66:	469a      	mov	sl, r3
 8001a68:	4bc8      	ldr	r3, [pc, #800]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2600      	movs	r6, #0
 8001a72:	4465      	add	r5, ip
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x60>
 8001a86:	e189      	b.n	8001d9c <__aeabi_dmul+0x374>
 8001a88:	4abf      	ldr	r2, [pc, #764]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <__aeabi_dmul+0x9a>
 8001a8e:	0f42      	lsrs	r2, r0, #29
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4322      	orrs	r2, r4
 8001a94:	2480      	movs	r4, #128	; 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4abc      	ldr	r2, [pc, #752]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	4463      	add	r3, ip
 8001aa4:	195b      	adds	r3, r3, r5
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	407a      	eors	r2, r7
 8001aac:	3301      	adds	r3, #1
 8001aae:	00c0      	lsls	r0, r0, #3
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2e0a      	cmp	r6, #10
 8001ab6:	dd1c      	ble.n	8001af2 <__aeabi_dmul+0xca>
 8001ab8:	003a      	movs	r2, r7
 8001aba:	2e0b      	cmp	r6, #11
 8001abc:	d05e      	beq.n	8001b7c <__aeabi_dmul+0x154>
 8001abe:	4647      	mov	r7, r8
 8001ac0:	e056      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	4bb0      	ldr	r3, [pc, #704]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ac6:	4321      	orrs	r1, r4
 8001ac8:	18eb      	adds	r3, r5, r3
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d12a      	bne.n	8001b26 <__aeabi_dmul+0xfe>
 8001ad0:	2080      	movs	r0, #128	; 0x80
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	0100      	lsls	r0, r0, #4
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	4684      	mov	ip, r0
 8001ada:	4316      	orrs	r6, r2
 8001adc:	4642      	mov	r2, r8
 8001ade:	4463      	add	r3, ip
 8001ae0:	407a      	eors	r2, r7
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2e0a      	cmp	r6, #10
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dmul+0xc4>
 8001aea:	e231      	b.n	8001f50 <__aeabi_dmul+0x528>
 8001aec:	2000      	movs	r0, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2102      	movs	r1, #2
 8001af2:	2e02      	cmp	r6, #2
 8001af4:	dc26      	bgt.n	8001b44 <__aeabi_dmul+0x11c>
 8001af6:	3e01      	subs	r6, #1
 8001af8:	2e01      	cmp	r6, #1
 8001afa:	d852      	bhi.n	8001ba2 <__aeabi_dmul+0x17a>
 8001afc:	2902      	cmp	r1, #2
 8001afe:	d04c      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b00:	2901      	cmp	r1, #1
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001b04:	e118      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	07d2      	lsls	r2, r2, #31
 8001b12:	4313      	orrs	r3, r2
 8001b14:	0028      	movs	r0, r5
 8001b16:	0019      	movs	r1, r3
 8001b18:	b007      	add	sp, #28
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	2203      	movs	r2, #3
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	002b      	movs	r3, r5
 8001b2e:	468c      	mov	ip, r1
 8001b30:	4316      	orrs	r6, r2
 8001b32:	4642      	mov	r2, r8
 8001b34:	4463      	add	r3, ip
 8001b36:	407a      	eors	r2, r7
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2e0a      	cmp	r6, #10
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dmul+0x11a>
 8001b40:	e228      	b.n	8001f94 <__aeabi_dmul+0x56c>
 8001b42:	2103      	movs	r1, #3
 8001b44:	2501      	movs	r5, #1
 8001b46:	40b5      	lsls	r5, r6
 8001b48:	46ac      	mov	ip, r5
 8001b4a:	26a6      	movs	r6, #166	; 0xa6
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	00f6      	lsls	r6, r6, #3
 8001b50:	4035      	ands	r5, r6
 8001b52:	4233      	tst	r3, r6
 8001b54:	d10b      	bne.n	8001b6e <__aeabi_dmul+0x146>
 8001b56:	2690      	movs	r6, #144	; 0x90
 8001b58:	00b6      	lsls	r6, r6, #2
 8001b5a:	4233      	tst	r3, r6
 8001b5c:	d118      	bne.n	8001b90 <__aeabi_dmul+0x168>
 8001b5e:	3eb9      	subs	r6, #185	; 0xb9
 8001b60:	3eff      	subs	r6, #255	; 0xff
 8001b62:	421e      	tst	r6, r3
 8001b64:	d01d      	beq.n	8001ba2 <__aeabi_dmul+0x17a>
 8001b66:	46a3      	mov	fp, r4
 8001b68:	4682      	mov	sl, r0
 8001b6a:	9100      	str	r1, [sp, #0]
 8001b6c:	e000      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001b6e:	0017      	movs	r7, r2
 8001b70:	9900      	ldr	r1, [sp, #0]
 8001b72:	003a      	movs	r2, r7
 8001b74:	2902      	cmp	r1, #2
 8001b76:	d010      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	2903      	cmp	r1, #3
 8001b7e:	d1bf      	bne.n	8001b00 <__aeabi_dmul+0xd8>
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	031b      	lsls	r3, r3, #12
 8001b84:	431c      	orrs	r4, r3
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b8c:	0b24      	lsrs	r4, r4, #12
 8001b8e:	e7bd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2200      	movs	r2, #0
 8001b94:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b96:	0324      	lsls	r4, r4, #12
 8001b98:	e7b8      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ba0:	e7b4      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ba2:	4653      	mov	r3, sl
 8001ba4:	041e      	lsls	r6, r3, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	0c1f      	lsrs	r7, r3, #16
 8001baa:	0033      	movs	r3, r6
 8001bac:	0c01      	lsrs	r1, r0, #16
 8001bae:	0400      	lsls	r0, r0, #16
 8001bb0:	0c00      	lsrs	r0, r0, #16
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	437b      	muls	r3, r7
 8001bba:	4699      	mov	r9, r3
 8001bbc:	0033      	movs	r3, r6
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	000d      	movs	r5, r1
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	469a      	mov	sl, r3
 8001bca:	437d      	muls	r5, r7
 8001bcc:	44cc      	add	ip, r9
 8001bce:	44d4      	add	ip, sl
 8001bd0:	9500      	str	r5, [sp, #0]
 8001bd2:	45e1      	cmp	r9, ip
 8001bd4:	d904      	bls.n	8001be0 <__aeabi_dmul+0x1b8>
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	4699      	mov	r9, r3
 8001bdc:	444d      	add	r5, r9
 8001bde:	9500      	str	r5, [sp, #0]
 8001be0:	4663      	mov	r3, ip
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	001d      	movs	r5, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	469c      	mov	ip, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	4663      	mov	r3, ip
 8001bf6:	4443      	add	r3, r8
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	0c23      	lsrs	r3, r4, #16
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	0033      	movs	r3, r6
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	4363      	muls	r3, r4
 8001c06:	469c      	mov	ip, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	437b      	muls	r3, r7
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4643      	mov	r3, r8
 8001c10:	435e      	muls	r6, r3
 8001c12:	435f      	muls	r7, r3
 8001c14:	444e      	add	r6, r9
 8001c16:	4663      	mov	r3, ip
 8001c18:	46b2      	mov	sl, r6
 8001c1a:	0c1e      	lsrs	r6, r3, #16
 8001c1c:	4456      	add	r6, sl
 8001c1e:	45b1      	cmp	r9, r6
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x202>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4699      	mov	r9, r3
 8001c28:	444f      	add	r7, r9
 8001c2a:	0c33      	lsrs	r3, r6, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	003b      	movs	r3, r7
 8001c30:	444b      	add	r3, r9
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	4663      	mov	r3, ip
 8001c36:	46ac      	mov	ip, r5
 8001c38:	041f      	lsls	r7, r3, #16
 8001c3a:	0c3f      	lsrs	r7, r7, #16
 8001c3c:	0436      	lsls	r6, r6, #16
 8001c3e:	19f6      	adds	r6, r6, r7
 8001c40:	44b4      	add	ip, r6
 8001c42:	4663      	mov	r3, ip
 8001c44:	9304      	str	r3, [sp, #16]
 8001c46:	465b      	mov	r3, fp
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	041f      	lsls	r7, r3, #16
 8001c50:	0c3f      	lsrs	r7, r7, #16
 8001c52:	003b      	movs	r3, r7
 8001c54:	4343      	muls	r3, r0
 8001c56:	4699      	mov	r9, r3
 8001c58:	4663      	mov	r3, ip
 8001c5a:	4343      	muls	r3, r0
 8001c5c:	469a      	mov	sl, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	4660      	mov	r0, ip
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	469b      	mov	fp, r3
 8001c66:	4348      	muls	r0, r1
 8001c68:	4379      	muls	r1, r7
 8001c6a:	4451      	add	r1, sl
 8001c6c:	4459      	add	r1, fp
 8001c6e:	458a      	cmp	sl, r1
 8001c70:	d903      	bls.n	8001c7a <__aeabi_dmul+0x252>
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	469a      	mov	sl, r3
 8001c78:	4450      	add	r0, sl
 8001c7a:	0c0b      	lsrs	r3, r1, #16
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	464b      	mov	r3, r9
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	4699      	mov	r9, r3
 8001c86:	003b      	movs	r3, r7
 8001c88:	4363      	muls	r3, r4
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4645      	mov	r5, r8
 8001c8e:	4449      	add	r1, r9
 8001c90:	4699      	mov	r9, r3
 8001c92:	4663      	mov	r3, ip
 8001c94:	435c      	muls	r4, r3
 8001c96:	436b      	muls	r3, r5
 8001c98:	469c      	mov	ip, r3
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	436f      	muls	r7, r5
 8001ca2:	193f      	adds	r7, r7, r4
 8001ca4:	4447      	add	r7, r8
 8001ca6:	4450      	add	r0, sl
 8001ca8:	42bc      	cmp	r4, r7
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_dmul+0x28c>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	44c4      	add	ip, r8
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	9d00      	ldr	r5, [sp, #0]
 8001cb8:	4698      	mov	r8, r3
 8001cba:	4445      	add	r5, r8
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	41b6      	sbcs	r6, r6
 8001cc0:	4273      	negs	r3, r6
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	041e      	lsls	r6, r3, #16
 8001cc8:	9b05      	ldr	r3, [sp, #20]
 8001cca:	043c      	lsls	r4, r7, #16
 8001ccc:	4699      	mov	r9, r3
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	19a4      	adds	r4, r4, r6
 8001cd2:	444c      	add	r4, r9
 8001cd4:	46a1      	mov	r9, r4
 8001cd6:	4683      	mov	fp, r0
 8001cd8:	186e      	adds	r6, r5, r1
 8001cda:	44c1      	add	r9, r8
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	4189      	sbcs	r1, r1
 8001ce0:	44cb      	add	fp, r9
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	186d      	adds	r5, r5, r1
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	41a4      	sbcs	r4, r4
 8001cec:	45c1      	cmp	r9, r8
 8001cee:	419b      	sbcs	r3, r3
 8001cf0:	4583      	cmp	fp, r0
 8001cf2:	4180      	sbcs	r0, r0
 8001cf4:	428d      	cmp	r5, r1
 8001cf6:	4189      	sbcs	r1, r1
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	4264      	negs	r4, r4
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4240      	negs	r0, r0
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	4249      	negs	r1, r1
 8001d04:	4301      	orrs	r1, r0
 8001d06:	0270      	lsls	r0, r6, #9
 8001d08:	0c3f      	lsrs	r7, r7, #16
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	19e4      	adds	r4, r4, r7
 8001d0e:	1e47      	subs	r7, r0, #1
 8001d10:	41b8      	sbcs	r0, r7
 8001d12:	1864      	adds	r4, r4, r1
 8001d14:	4464      	add	r4, ip
 8001d16:	0df6      	lsrs	r6, r6, #23
 8001d18:	0261      	lsls	r1, r4, #9
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	0dec      	lsrs	r4, r5, #23
 8001d1e:	026e      	lsls	r6, r5, #9
 8001d20:	430c      	orrs	r4, r1
 8001d22:	4330      	orrs	r0, r6
 8001d24:	01c9      	lsls	r1, r1, #7
 8001d26:	d400      	bmi.n	8001d2a <__aeabi_dmul+0x302>
 8001d28:	e0f1      	b.n	8001f0e <__aeabi_dmul+0x4e6>
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	0843      	lsrs	r3, r0, #1
 8001d2e:	4001      	ands	r1, r0
 8001d30:	430b      	orrs	r3, r1
 8001d32:	07e0      	lsls	r0, r4, #31
 8001d34:	4318      	orrs	r0, r3
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <__aeabi_dmul+0x368>)
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dmul+0x31e>
 8001d44:	e097      	b.n	8001e76 <__aeabi_dmul+0x44e>
 8001d46:	0741      	lsls	r1, r0, #29
 8001d48:	d009      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	4001      	ands	r1, r0
 8001d4e:	2904      	cmp	r1, #4
 8001d50:	d005      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d52:	1d01      	adds	r1, r0, #4
 8001d54:	4281      	cmp	r1, r0
 8001d56:	4180      	sbcs	r0, r0
 8001d58:	4240      	negs	r0, r0
 8001d5a:	1824      	adds	r4, r4, r0
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	01e1      	lsls	r1, r4, #7
 8001d60:	d506      	bpl.n	8001d70 <__aeabi_dmul+0x348>
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	00c9      	lsls	r1, r1, #3
 8001d66:	468c      	mov	ip, r1
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <__aeabi_dmul+0x36c>)
 8001d6a:	401c      	ands	r4, r3
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	4463      	add	r3, ip
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <__aeabi_dmul+0x370>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dmul+0x350>
 8001d76:	e710      	b.n	8001b9a <__aeabi_dmul+0x172>
 8001d78:	0761      	lsls	r1, r4, #29
 8001d7a:	08c5      	lsrs	r5, r0, #3
 8001d7c:	0264      	lsls	r4, r4, #9
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	430d      	orrs	r5, r1
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	0d5b      	lsrs	r3, r3, #21
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	000003ff 	.word	0x000003ff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	000007fe 	.word	0x000007fe
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	d059      	beq.n	8001e56 <__aeabi_dmul+0x42e>
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dmul+0x380>
 8001da6:	e0a3      	b.n	8001ef0 <__aeabi_dmul+0x4c8>
 8001da8:	0020      	movs	r0, r4
 8001daa:	f000 fd2b 	bl	8002804 <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	390b      	subs	r1, #11
 8001db4:	221d      	movs	r2, #29
 8001db6:	1a52      	subs	r2, r2, r1
 8001db8:	4649      	mov	r1, r9
 8001dba:	0018      	movs	r0, r3
 8001dbc:	40d1      	lsrs	r1, r2
 8001dbe:	464a      	mov	r2, r9
 8001dc0:	3808      	subs	r0, #8
 8001dc2:	4082      	lsls	r2, r0
 8001dc4:	4084      	lsls	r4, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	430c      	orrs	r4, r1
 8001dca:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <__aeabi_dmul+0x574>)
 8001dcc:	1aeb      	subs	r3, r5, r3
 8001dce:	4694      	mov	ip, r2
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	4463      	add	r3, ip
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	407a      	eors	r2, r7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dmul+0x3c0>
 8001de6:	e667      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001de8:	e683      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001dea:	465b      	mov	r3, fp
 8001dec:	4303      	orrs	r3, r0
 8001dee:	469a      	mov	sl, r3
 8001df0:	d02a      	beq.n	8001e48 <__aeabi_dmul+0x420>
 8001df2:	465b      	mov	r3, fp
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06d      	beq.n	8001ed4 <__aeabi_dmul+0x4ac>
 8001df8:	4658      	mov	r0, fp
 8001dfa:	f000 fd03 	bl	8002804 <__clzsi2>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	0003      	movs	r3, r0
 8001e02:	390b      	subs	r1, #11
 8001e04:	221d      	movs	r2, #29
 8001e06:	1a52      	subs	r2, r2, r1
 8001e08:	0021      	movs	r1, r4
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	465d      	mov	r5, fp
 8001e0e:	40d1      	lsrs	r1, r2
 8001e10:	3808      	subs	r0, #8
 8001e12:	4085      	lsls	r5, r0
 8001e14:	000a      	movs	r2, r1
 8001e16:	4084      	lsls	r4, r0
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	4d5f      	ldr	r5, [pc, #380]	; (8001f9c <__aeabi_dmul+0x574>)
 8001e20:	2600      	movs	r6, #0
 8001e22:	1aed      	subs	r5, r5, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	e625      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	d105      	bne.n	8001e3e <__aeabi_dmul+0x416>
 8001e32:	2300      	movs	r3, #0
 8001e34:	469b      	mov	fp, r3
 8001e36:	3302      	adds	r3, #2
 8001e38:	2608      	movs	r6, #8
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e61b      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4682      	mov	sl, r0
 8001e42:	260c      	movs	r6, #12
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	e616      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	469b      	mov	fp, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2500      	movs	r5, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	e60f      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	3301      	adds	r3, #1
 8001e5a:	9501      	str	r5, [sp, #4]
 8001e5c:	431e      	orrs	r6, r3
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	407a      	eors	r2, r7
 8001e62:	3301      	adds	r3, #1
 8001e64:	2400      	movs	r4, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	2101      	movs	r1, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2e0a      	cmp	r6, #10
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dmul+0x44c>
 8001e72:	e621      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001e74:	e63d      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001e76:	2101      	movs	r1, #1
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	2938      	cmp	r1, #56	; 0x38
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x458>
 8001e7e:	e642      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dd47      	ble.n	8001f14 <__aeabi_dmul+0x4ec>
 8001e84:	261f      	movs	r6, #31
 8001e86:	0025      	movs	r5, r4
 8001e88:	4276      	negs	r6, r6
 8001e8a:	1af3      	subs	r3, r6, r3
 8001e8c:	40dd      	lsrs	r5, r3
 8001e8e:	002b      	movs	r3, r5
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_dmul+0x478>
 8001e94:	4942      	ldr	r1, [pc, #264]	; (8001fa0 <__aeabi_dmul+0x578>)
 8001e96:	9d02      	ldr	r5, [sp, #8]
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4465      	add	r5, ip
 8001e9c:	40ac      	lsls	r4, r5
 8001e9e:	4320      	orrs	r0, r4
 8001ea0:	1e41      	subs	r1, r0, #1
 8001ea2:	4188      	sbcs	r0, r1
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	001d      	movs	r5, r3
 8001eaa:	2400      	movs	r4, #0
 8001eac:	4005      	ands	r5, r0
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d04a      	beq.n	8001f48 <__aeabi_dmul+0x520>
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d042      	beq.n	8001f42 <__aeabi_dmul+0x51a>
 8001ebc:	1d03      	adds	r3, r0, #4
 8001ebe:	4283      	cmp	r3, r0
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	0223      	lsls	r3, r4, #8
 8001eca:	d53a      	bpl.n	8001f42 <__aeabi_dmul+0x51a>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e61b      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ed4:	f000 fc96 	bl	8002804 <__clzsi2>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	3115      	adds	r1, #21
 8001ede:	3320      	adds	r3, #32
 8001ee0:	291c      	cmp	r1, #28
 8001ee2:	dd8f      	ble.n	8001e04 <__aeabi_dmul+0x3dc>
 8001ee4:	3808      	subs	r0, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4084      	lsls	r4, r0
 8001eea:	4692      	mov	sl, r2
 8001eec:	46a3      	mov	fp, r4
 8001eee:	e796      	b.n	8001e1e <__aeabi_dmul+0x3f6>
 8001ef0:	f000 fc88 	bl	8002804 <__clzsi2>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	3115      	adds	r1, #21
 8001efa:	3320      	adds	r3, #32
 8001efc:	291c      	cmp	r1, #28
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dmul+0x4da>
 8001f00:	e758      	b.n	8001db4 <__aeabi_dmul+0x38c>
 8001f02:	0002      	movs	r2, r0
 8001f04:	464c      	mov	r4, r9
 8001f06:	3a08      	subs	r2, #8
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4094      	lsls	r4, r2
 8001f0c:	e75d      	b.n	8001dca <__aeabi_dmul+0x3a2>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	e711      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <__aeabi_dmul+0x57c>)
 8001f16:	0026      	movs	r6, r4
 8001f18:	469c      	mov	ip, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	9d02      	ldr	r5, [sp, #8]
 8001f1e:	40cb      	lsrs	r3, r1
 8001f20:	4465      	add	r5, ip
 8001f22:	40ae      	lsls	r6, r5
 8001f24:	431e      	orrs	r6, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	40ab      	lsls	r3, r5
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	4183      	sbcs	r3, r0
 8001f2e:	0030      	movs	r0, r6
 8001f30:	4318      	orrs	r0, r3
 8001f32:	40cc      	lsrs	r4, r1
 8001f34:	0743      	lsls	r3, r0, #29
 8001f36:	d0c7      	beq.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d1bd      	bne.n	8001ebc <__aeabi_dmul+0x494>
 8001f40:	e7c2      	b.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f42:	0765      	lsls	r5, r4, #29
 8001f44:	0264      	lsls	r4, r4, #9
 8001f46:	0b24      	lsrs	r4, r4, #12
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4305      	orrs	r5, r0
 8001f4e:	e5dd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f50:	2500      	movs	r5, #0
 8001f52:	2302      	movs	r3, #2
 8001f54:	2e0f      	cmp	r6, #15
 8001f56:	d10c      	bne.n	8001f72 <__aeabi_dmul+0x54a>
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	4223      	tst	r3, r4
 8001f60:	d00e      	beq.n	8001f80 <__aeabi_dmul+0x558>
 8001f62:	4221      	tst	r1, r4
 8001f64:	d10c      	bne.n	8001f80 <__aeabi_dmul+0x558>
 8001f66:	430c      	orrs	r4, r1
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	003a      	movs	r2, r7
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	e5cc      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f72:	2e0b      	cmp	r6, #11
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dmul+0x550>
 8001f76:	e5a2      	b.n	8001abe <__aeabi_dmul+0x96>
 8001f78:	468b      	mov	fp, r1
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	e5f7      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	465b      	mov	r3, fp
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	431c      	orrs	r4, r3
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4655      	mov	r5, sl
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	e5bb      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f94:	464d      	mov	r5, r9
 8001f96:	0021      	movs	r1, r4
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e7db      	b.n	8001f54 <__aeabi_dmul+0x52c>
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	0000043e 	.word	0x0000043e
 8001fa4:	0000041e 	.word	0x0000041e
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__aeabi_dsub>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	000d      	movs	r5, r1
 8001fba:	0004      	movs	r4, r0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	032b      	lsls	r3, r5, #12
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	0f62      	lsrs	r2, r4, #29
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	00e3      	lsls	r3, r4, #3
 8001fca:	030c      	lsls	r4, r1, #12
 8001fcc:	0a64      	lsrs	r4, r4, #9
 8001fce:	0f47      	lsrs	r7, r0, #29
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	4cd0      	ldr	r4, [pc, #832]	; (8002314 <__aeabi_dsub+0x368>)
 8001fd4:	006e      	lsls	r6, r5, #1
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	b083      	sub	sp, #12
 8001fda:	004a      	lsls	r2, r1, #1
 8001fdc:	00c0      	lsls	r0, r0, #3
 8001fde:	4698      	mov	r8, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	0d76      	lsrs	r6, r6, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	0d52      	lsrs	r2, r2, #21
 8001fe8:	0fc9      	lsrs	r1, r1, #31
 8001fea:	9001      	str	r0, [sp, #4]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x46>
 8001ff0:	e0b9      	b.n	8002166 <__aeabi_dsub+0x1ba>
 8001ff2:	2401      	movs	r4, #1
 8001ff4:	4061      	eors	r1, r4
 8001ff6:	468b      	mov	fp, r1
 8001ff8:	428d      	cmp	r5, r1
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x52>
 8001ffc:	e08d      	b.n	800211a <__aeabi_dsub+0x16e>
 8001ffe:	1ab4      	subs	r4, r6, r2
 8002000:	46a4      	mov	ip, r4
 8002002:	2c00      	cmp	r4, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x5c>
 8002006:	e0b7      	b.n	8002178 <__aeabi_dsub+0x1cc>
 8002008:	2a00      	cmp	r2, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x62>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_dsub+0x1fa>
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <__aeabi_dsub+0x368>)
 8002010:	4296      	cmp	r6, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x6a>
 8002014:	e186      	b.n	8002324 <__aeabi_dsub+0x378>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	4317      	orrs	r7, r2
 800201c:	4662      	mov	r2, ip
 800201e:	2a38      	cmp	r2, #56	; 0x38
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0x78>
 8002022:	e1a4      	b.n	800236e <__aeabi_dsub+0x3c2>
 8002024:	2a1f      	cmp	r2, #31
 8002026:	dd00      	ble.n	800202a <__aeabi_dsub+0x7e>
 8002028:	e21d      	b.n	8002466 <__aeabi_dsub+0x4ba>
 800202a:	4661      	mov	r1, ip
 800202c:	2220      	movs	r2, #32
 800202e:	003c      	movs	r4, r7
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	0001      	movs	r1, r0
 8002034:	4090      	lsls	r0, r2
 8002036:	4094      	lsls	r4, r2
 8002038:	1e42      	subs	r2, r0, #1
 800203a:	4190      	sbcs	r0, r2
 800203c:	4662      	mov	r2, ip
 800203e:	46a0      	mov	r8, r4
 8002040:	4664      	mov	r4, ip
 8002042:	40d7      	lsrs	r7, r2
 8002044:	464a      	mov	r2, r9
 8002046:	40e1      	lsrs	r1, r4
 8002048:	4644      	mov	r4, r8
 800204a:	1bd2      	subs	r2, r2, r7
 800204c:	4691      	mov	r9, r2
 800204e:	430c      	orrs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	1b1c      	subs	r4, r3, r4
 8002054:	42a3      	cmp	r3, r4
 8002056:	4192      	sbcs	r2, r2
 8002058:	464b      	mov	r3, r9
 800205a:	4252      	negs	r2, r2
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	469a      	mov	sl, r3
 8002060:	4653      	mov	r3, sl
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d400      	bmi.n	8002068 <__aeabi_dsub+0xbc>
 8002066:	e12b      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002068:	4653      	mov	r3, sl
 800206a:	025a      	lsls	r2, r3, #9
 800206c:	0a53      	lsrs	r3, r2, #9
 800206e:	469a      	mov	sl, r3
 8002070:	4653      	mov	r3, sl
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0xcc>
 8002076:	e166      	b.n	8002346 <__aeabi_dsub+0x39a>
 8002078:	4650      	mov	r0, sl
 800207a:	f000 fbc3 	bl	8002804 <__clzsi2>
 800207e:	0003      	movs	r3, r0
 8002080:	3b08      	subs	r3, #8
 8002082:	2220      	movs	r2, #32
 8002084:	0020      	movs	r0, r4
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	4651      	mov	r1, sl
 800208a:	40d0      	lsrs	r0, r2
 800208c:	4099      	lsls	r1, r3
 800208e:	0002      	movs	r2, r0
 8002090:	409c      	lsls	r4, r3
 8002092:	430a      	orrs	r2, r1
 8002094:	429e      	cmp	r6, r3
 8002096:	dd00      	ble.n	800209a <__aeabi_dsub+0xee>
 8002098:	e164      	b.n	8002364 <__aeabi_dsub+0x3b8>
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	291f      	cmp	r1, #31
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dsub+0xf8>
 80020a2:	e0fe      	b.n	80022a2 <__aeabi_dsub+0x2f6>
 80020a4:	2320      	movs	r3, #32
 80020a6:	0010      	movs	r0, r2
 80020a8:	0026      	movs	r6, r4
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	409c      	lsls	r4, r3
 80020ae:	4098      	lsls	r0, r3
 80020b0:	40ce      	lsrs	r6, r1
 80020b2:	40ca      	lsrs	r2, r1
 80020b4:	1e63      	subs	r3, r4, #1
 80020b6:	419c      	sbcs	r4, r3
 80020b8:	4330      	orrs	r0, r6
 80020ba:	4692      	mov	sl, r2
 80020bc:	2600      	movs	r6, #0
 80020be:	4304      	orrs	r4, r0
 80020c0:	0763      	lsls	r3, r4, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020c4:	230f      	movs	r3, #15
 80020c6:	4023      	ands	r3, r4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020cc:	1d23      	adds	r3, r4, #4
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	41a4      	sbcs	r4, r4
 80020d2:	4264      	negs	r4, r4
 80020d4:	44a2      	add	sl, r4
 80020d6:	001c      	movs	r4, r3
 80020d8:	4653      	mov	r3, sl
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x134>
 80020de:	e0f2      	b.n	80022c6 <__aeabi_dsub+0x31a>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <__aeabi_dsub+0x368>)
 80020e2:	3601      	adds	r6, #1
 80020e4:	429e      	cmp	r6, r3
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x13e>
 80020e8:	e10f      	b.n	800230a <__aeabi_dsub+0x35e>
 80020ea:	4653      	mov	r3, sl
 80020ec:	498a      	ldr	r1, [pc, #552]	; (8002318 <__aeabi_dsub+0x36c>)
 80020ee:	08e4      	lsrs	r4, r4, #3
 80020f0:	400b      	ands	r3, r1
 80020f2:	0019      	movs	r1, r3
 80020f4:	075b      	lsls	r3, r3, #29
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0572      	lsls	r2, r6, #21
 80020fa:	024c      	lsls	r4, r1, #9
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d52      	lsrs	r2, r2, #21
 8002100:	0512      	lsls	r2, r2, #20
 8002102:	4322      	orrs	r2, r4
 8002104:	07ed      	lsls	r5, r5, #31
 8002106:	432a      	orrs	r2, r5
 8002108:	0018      	movs	r0, r3
 800210a:	0011      	movs	r1, r2
 800210c:	b003      	add	sp, #12
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	46bb      	mov	fp, r7
 8002112:	46b2      	mov	sl, r6
 8002114:	46a9      	mov	r9, r5
 8002116:	46a0      	mov	r8, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	1ab4      	subs	r4, r6, r2
 800211c:	46a4      	mov	ip, r4
 800211e:	2c00      	cmp	r4, #0
 8002120:	dd59      	ble.n	80021d6 <__aeabi_dsub+0x22a>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x17c>
 8002126:	e0b0      	b.n	800228a <__aeabi_dsub+0x2de>
 8002128:	4556      	cmp	r6, sl
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x182>
 800212c:	e0fa      	b.n	8002324 <__aeabi_dsub+0x378>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0412      	lsls	r2, r2, #16
 8002132:	4317      	orrs	r7, r2
 8002134:	4662      	mov	r2, ip
 8002136:	2a38      	cmp	r2, #56	; 0x38
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x190>
 800213a:	e0d4      	b.n	80022e6 <__aeabi_dsub+0x33a>
 800213c:	2a1f      	cmp	r2, #31
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dsub+0x196>
 8002140:	e1c0      	b.n	80024c4 <__aeabi_dsub+0x518>
 8002142:	0039      	movs	r1, r7
 8002144:	3a20      	subs	r2, #32
 8002146:	40d1      	lsrs	r1, r2
 8002148:	4662      	mov	r2, ip
 800214a:	2a20      	cmp	r2, #32
 800214c:	d006      	beq.n	800215c <__aeabi_dsub+0x1b0>
 800214e:	4664      	mov	r4, ip
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	1b12      	subs	r2, r2, r4
 8002154:	003c      	movs	r4, r7
 8002156:	4094      	lsls	r4, r2
 8002158:	4304      	orrs	r4, r0
 800215a:	9401      	str	r4, [sp, #4]
 800215c:	9c01      	ldr	r4, [sp, #4]
 800215e:	1e62      	subs	r2, r4, #1
 8002160:	4194      	sbcs	r4, r2
 8002162:	430c      	orrs	r4, r1
 8002164:	e0c3      	b.n	80022ee <__aeabi_dsub+0x342>
 8002166:	003c      	movs	r4, r7
 8002168:	4304      	orrs	r4, r0
 800216a:	d02b      	beq.n	80021c4 <__aeabi_dsub+0x218>
 800216c:	468b      	mov	fp, r1
 800216e:	428d      	cmp	r5, r1
 8002170:	d02e      	beq.n	80021d0 <__aeabi_dsub+0x224>
 8002172:	4c6a      	ldr	r4, [pc, #424]	; (800231c <__aeabi_dsub+0x370>)
 8002174:	46a4      	mov	ip, r4
 8002176:	44b4      	add	ip, r6
 8002178:	4664      	mov	r4, ip
 800217a:	2c00      	cmp	r4, #0
 800217c:	d05f      	beq.n	800223e <__aeabi_dsub+0x292>
 800217e:	1b94      	subs	r4, r2, r6
 8002180:	46a4      	mov	ip, r4
 8002182:	2e00      	cmp	r6, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x1dc>
 8002186:	e120      	b.n	80023ca <__aeabi_dsub+0x41e>
 8002188:	464c      	mov	r4, r9
 800218a:	431c      	orrs	r4, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x1e4>
 800218e:	e1c7      	b.n	8002520 <__aeabi_dsub+0x574>
 8002190:	4661      	mov	r1, ip
 8002192:	1e4c      	subs	r4, r1, #1
 8002194:	2901      	cmp	r1, #1
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x1ee>
 8002198:	e223      	b.n	80025e2 <__aeabi_dsub+0x636>
 800219a:	4d5e      	ldr	r5, [pc, #376]	; (8002314 <__aeabi_dsub+0x368>)
 800219c:	45ac      	cmp	ip, r5
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x1f6>
 80021a0:	e1d8      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80021a2:	46a4      	mov	ip, r4
 80021a4:	e11a      	b.n	80023dc <__aeabi_dsub+0x430>
 80021a6:	003a      	movs	r2, r7
 80021a8:	4302      	orrs	r2, r0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x202>
 80021ac:	e0e4      	b.n	8002378 <__aeabi_dsub+0x3cc>
 80021ae:	0022      	movs	r2, r4
 80021b0:	3a01      	subs	r2, #1
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x20c>
 80021b6:	e1c3      	b.n	8002540 <__aeabi_dsub+0x594>
 80021b8:	4956      	ldr	r1, [pc, #344]	; (8002314 <__aeabi_dsub+0x368>)
 80021ba:	428c      	cmp	r4, r1
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x214>
 80021be:	e0b1      	b.n	8002324 <__aeabi_dsub+0x378>
 80021c0:	4694      	mov	ip, r2
 80021c2:	e72b      	b.n	800201c <__aeabi_dsub+0x70>
 80021c4:	2401      	movs	r4, #1
 80021c6:	4061      	eors	r1, r4
 80021c8:	468b      	mov	fp, r1
 80021ca:	428d      	cmp	r5, r1
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x224>
 80021ce:	e716      	b.n	8001ffe <__aeabi_dsub+0x52>
 80021d0:	4952      	ldr	r1, [pc, #328]	; (800231c <__aeabi_dsub+0x370>)
 80021d2:	468c      	mov	ip, r1
 80021d4:	44b4      	add	ip, r6
 80021d6:	4664      	mov	r4, ip
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x232>
 80021dc:	e0d3      	b.n	8002386 <__aeabi_dsub+0x3da>
 80021de:	1b91      	subs	r1, r2, r6
 80021e0:	468c      	mov	ip, r1
 80021e2:	2e00      	cmp	r6, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x23c>
 80021e6:	e15e      	b.n	80024a6 <__aeabi_dsub+0x4fa>
 80021e8:	494a      	ldr	r1, [pc, #296]	; (8002314 <__aeabi_dsub+0x368>)
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x244>
 80021ee:	e1be      	b.n	800256e <__aeabi_dsub+0x5c2>
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	464c      	mov	r4, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	430c      	orrs	r4, r1
 80021f8:	46a1      	mov	r9, r4
 80021fa:	4661      	mov	r1, ip
 80021fc:	2938      	cmp	r1, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0x256>
 8002200:	e1ba      	b.n	8002578 <__aeabi_dsub+0x5cc>
 8002202:	291f      	cmp	r1, #31
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x25c>
 8002206:	e227      	b.n	8002658 <__aeabi_dsub+0x6ac>
 8002208:	2420      	movs	r4, #32
 800220a:	1a64      	subs	r4, r4, r1
 800220c:	4649      	mov	r1, r9
 800220e:	40a1      	lsls	r1, r4
 8002210:	001e      	movs	r6, r3
 8002212:	4688      	mov	r8, r1
 8002214:	4661      	mov	r1, ip
 8002216:	40a3      	lsls	r3, r4
 8002218:	40ce      	lsrs	r6, r1
 800221a:	4641      	mov	r1, r8
 800221c:	1e5c      	subs	r4, r3, #1
 800221e:	41a3      	sbcs	r3, r4
 8002220:	4331      	orrs	r1, r6
 8002222:	4319      	orrs	r1, r3
 8002224:	000c      	movs	r4, r1
 8002226:	4663      	mov	r3, ip
 8002228:	4649      	mov	r1, r9
 800222a:	40d9      	lsrs	r1, r3
 800222c:	187f      	adds	r7, r7, r1
 800222e:	1824      	adds	r4, r4, r0
 8002230:	4284      	cmp	r4, r0
 8002232:	419b      	sbcs	r3, r3
 8002234:	425b      	negs	r3, r3
 8002236:	469a      	mov	sl, r3
 8002238:	0016      	movs	r6, r2
 800223a:	44ba      	add	sl, r7
 800223c:	e05d      	b.n	80022fa <__aeabi_dsub+0x34e>
 800223e:	4c38      	ldr	r4, [pc, #224]	; (8002320 <__aeabi_dsub+0x374>)
 8002240:	1c72      	adds	r2, r6, #1
 8002242:	4222      	tst	r2, r4
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x29c>
 8002246:	e0df      	b.n	8002408 <__aeabi_dsub+0x45c>
 8002248:	464a      	mov	r2, r9
 800224a:	431a      	orrs	r2, r3
 800224c:	2e00      	cmp	r6, #0
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x2a6>
 8002250:	e15c      	b.n	800250c <__aeabi_dsub+0x560>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x2ac>
 8002256:	e1cf      	b.n	80025f8 <__aeabi_dsub+0x64c>
 8002258:	003a      	movs	r2, r7
 800225a:	4302      	orrs	r2, r0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x2b4>
 800225e:	e17f      	b.n	8002560 <__aeabi_dsub+0x5b4>
 8002260:	1a1c      	subs	r4, r3, r0
 8002262:	464a      	mov	r2, r9
 8002264:	42a3      	cmp	r3, r4
 8002266:	4189      	sbcs	r1, r1
 8002268:	1bd2      	subs	r2, r2, r7
 800226a:	4249      	negs	r1, r1
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	4692      	mov	sl, r2
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	d400      	bmi.n	8002276 <__aeabi_dsub+0x2ca>
 8002274:	e20a      	b.n	800268c <__aeabi_dsub+0x6e0>
 8002276:	1ac4      	subs	r4, r0, r3
 8002278:	42a0      	cmp	r0, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	464b      	mov	r3, r9
 800227e:	4240      	negs	r0, r0
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	1a3b      	subs	r3, r7, r0
 8002284:	469a      	mov	sl, r3
 8002286:	465d      	mov	r5, fp
 8002288:	e71a      	b.n	80020c0 <__aeabi_dsub+0x114>
 800228a:	003a      	movs	r2, r7
 800228c:	4302      	orrs	r2, r0
 800228e:	d073      	beq.n	8002378 <__aeabi_dsub+0x3cc>
 8002290:	0022      	movs	r2, r4
 8002292:	3a01      	subs	r2, #1
 8002294:	2c01      	cmp	r4, #1
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x2ee>
 8002298:	e0cb      	b.n	8002432 <__aeabi_dsub+0x486>
 800229a:	4554      	cmp	r4, sl
 800229c:	d042      	beq.n	8002324 <__aeabi_dsub+0x378>
 800229e:	4694      	mov	ip, r2
 80022a0:	e748      	b.n	8002134 <__aeabi_dsub+0x188>
 80022a2:	0010      	movs	r0, r2
 80022a4:	3b1f      	subs	r3, #31
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d003      	beq.n	80022b4 <__aeabi_dsub+0x308>
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4314      	orrs	r4, r2
 80022b4:	1e63      	subs	r3, r4, #1
 80022b6:	419c      	sbcs	r4, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	2600      	movs	r6, #0
 80022bc:	469a      	mov	sl, r3
 80022be:	4304      	orrs	r4, r0
 80022c0:	0763      	lsls	r3, r4, #29
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x31a>
 80022c4:	e6fe      	b.n	80020c4 <__aeabi_dsub+0x118>
 80022c6:	4652      	mov	r2, sl
 80022c8:	08e3      	lsrs	r3, r4, #3
 80022ca:	0752      	lsls	r2, r2, #29
 80022cc:	4313      	orrs	r3, r2
 80022ce:	4652      	mov	r2, sl
 80022d0:	46b4      	mov	ip, r6
 80022d2:	08d2      	lsrs	r2, r2, #3
 80022d4:	490f      	ldr	r1, [pc, #60]	; (8002314 <__aeabi_dsub+0x368>)
 80022d6:	458c      	cmp	ip, r1
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dsub+0x384>
 80022da:	0312      	lsls	r2, r2, #12
 80022dc:	0b14      	lsrs	r4, r2, #12
 80022de:	4662      	mov	r2, ip
 80022e0:	0552      	lsls	r2, r2, #21
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	e70c      	b.n	8002100 <__aeabi_dsub+0x154>
 80022e6:	003c      	movs	r4, r7
 80022e8:	4304      	orrs	r4, r0
 80022ea:	1e62      	subs	r2, r4, #1
 80022ec:	4194      	sbcs	r4, r2
 80022ee:	18e4      	adds	r4, r4, r3
 80022f0:	429c      	cmp	r4, r3
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	4252      	negs	r2, r2
 80022f6:	444a      	add	r2, r9
 80022f8:	4692      	mov	sl, r2
 80022fa:	4653      	mov	r3, sl
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	d5df      	bpl.n	80022c0 <__aeabi_dsub+0x314>
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__aeabi_dsub+0x368>)
 8002302:	3601      	adds	r6, #1
 8002304:	429e      	cmp	r6, r3
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x35e>
 8002308:	e0a0      	b.n	800244c <__aeabi_dsub+0x4a0>
 800230a:	0032      	movs	r2, r6
 800230c:	2400      	movs	r4, #0
 800230e:	2300      	movs	r3, #0
 8002310:	e6f6      	b.n	8002100 <__aeabi_dsub+0x154>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	fffff801 	.word	0xfffff801
 8002320:	000007fe 	.word	0x000007fe
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	464a      	mov	r2, r9
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	4313      	orrs	r3, r2
 800232c:	464a      	mov	r2, r9
 800232e:	08d2      	lsrs	r2, r2, #3
 8002330:	0019      	movs	r1, r3
 8002332:	4311      	orrs	r1, r2
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x38c>
 8002336:	e1b5      	b.n	80026a4 <__aeabi_dsub+0x6f8>
 8002338:	2480      	movs	r4, #128	; 0x80
 800233a:	0324      	lsls	r4, r4, #12
 800233c:	4314      	orrs	r4, r2
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	4ad5      	ldr	r2, [pc, #852]	; (8002698 <__aeabi_dsub+0x6ec>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e6dc      	b.n	8002100 <__aeabi_dsub+0x154>
 8002346:	0020      	movs	r0, r4
 8002348:	f000 fa5c 	bl	8002804 <__clzsi2>
 800234c:	0003      	movs	r3, r0
 800234e:	3318      	adds	r3, #24
 8002350:	2b1f      	cmp	r3, #31
 8002352:	dc00      	bgt.n	8002356 <__aeabi_dsub+0x3aa>
 8002354:	e695      	b.n	8002082 <__aeabi_dsub+0xd6>
 8002356:	0022      	movs	r2, r4
 8002358:	3808      	subs	r0, #8
 800235a:	4082      	lsls	r2, r0
 800235c:	2400      	movs	r4, #0
 800235e:	429e      	cmp	r6, r3
 8002360:	dc00      	bgt.n	8002364 <__aeabi_dsub+0x3b8>
 8002362:	e69a      	b.n	800209a <__aeabi_dsub+0xee>
 8002364:	1af6      	subs	r6, r6, r3
 8002366:	4bcd      	ldr	r3, [pc, #820]	; (800269c <__aeabi_dsub+0x6f0>)
 8002368:	401a      	ands	r2, r3
 800236a:	4692      	mov	sl, r2
 800236c:	e6a8      	b.n	80020c0 <__aeabi_dsub+0x114>
 800236e:	003c      	movs	r4, r7
 8002370:	4304      	orrs	r4, r0
 8002372:	1e62      	subs	r2, r4, #1
 8002374:	4194      	sbcs	r4, r2
 8002376:	e66c      	b.n	8002052 <__aeabi_dsub+0xa6>
 8002378:	464a      	mov	r2, r9
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0752      	lsls	r2, r2, #29
 800237e:	4313      	orrs	r3, r2
 8002380:	464a      	mov	r2, r9
 8002382:	08d2      	lsrs	r2, r2, #3
 8002384:	e7a6      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002386:	4cc6      	ldr	r4, [pc, #792]	; (80026a0 <__aeabi_dsub+0x6f4>)
 8002388:	1c72      	adds	r2, r6, #1
 800238a:	4222      	tst	r2, r4
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x3e4>
 800238e:	e0ac      	b.n	80024ea <__aeabi_dsub+0x53e>
 8002390:	464a      	mov	r2, r9
 8002392:	431a      	orrs	r2, r3
 8002394:	2e00      	cmp	r6, #0
 8002396:	d000      	beq.n	800239a <__aeabi_dsub+0x3ee>
 8002398:	e105      	b.n	80025a6 <__aeabi_dsub+0x5fa>
 800239a:	2a00      	cmp	r2, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x3f4>
 800239e:	e156      	b.n	800264e <__aeabi_dsub+0x6a2>
 80023a0:	003a      	movs	r2, r7
 80023a2:	4302      	orrs	r2, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x3fc>
 80023a6:	e0db      	b.n	8002560 <__aeabi_dsub+0x5b4>
 80023a8:	181c      	adds	r4, r3, r0
 80023aa:	429c      	cmp	r4, r3
 80023ac:	419b      	sbcs	r3, r3
 80023ae:	444f      	add	r7, r9
 80023b0:	46ba      	mov	sl, r7
 80023b2:	425b      	negs	r3, r3
 80023b4:	449a      	add	sl, r3
 80023b6:	4653      	mov	r3, sl
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	d400      	bmi.n	80023be <__aeabi_dsub+0x412>
 80023bc:	e780      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023be:	4652      	mov	r2, sl
 80023c0:	4bb6      	ldr	r3, [pc, #728]	; (800269c <__aeabi_dsub+0x6f0>)
 80023c2:	2601      	movs	r6, #1
 80023c4:	401a      	ands	r2, r3
 80023c6:	4692      	mov	sl, r2
 80023c8:	e77a      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023ca:	4cb3      	ldr	r4, [pc, #716]	; (8002698 <__aeabi_dsub+0x6ec>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x426>
 80023d0:	e0c0      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80023d2:	2480      	movs	r4, #128	; 0x80
 80023d4:	464d      	mov	r5, r9
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	4325      	orrs	r5, r4
 80023da:	46a9      	mov	r9, r5
 80023dc:	4664      	mov	r4, ip
 80023de:	2c38      	cmp	r4, #56	; 0x38
 80023e0:	dc53      	bgt.n	800248a <__aeabi_dsub+0x4de>
 80023e2:	4661      	mov	r1, ip
 80023e4:	2c1f      	cmp	r4, #31
 80023e6:	dd00      	ble.n	80023ea <__aeabi_dsub+0x43e>
 80023e8:	e0cd      	b.n	8002586 <__aeabi_dsub+0x5da>
 80023ea:	2520      	movs	r5, #32
 80023ec:	001e      	movs	r6, r3
 80023ee:	1b2d      	subs	r5, r5, r4
 80023f0:	464c      	mov	r4, r9
 80023f2:	40ab      	lsls	r3, r5
 80023f4:	40ac      	lsls	r4, r5
 80023f6:	40ce      	lsrs	r6, r1
 80023f8:	1e5d      	subs	r5, r3, #1
 80023fa:	41ab      	sbcs	r3, r5
 80023fc:	4334      	orrs	r4, r6
 80023fe:	4323      	orrs	r3, r4
 8002400:	464c      	mov	r4, r9
 8002402:	40cc      	lsrs	r4, r1
 8002404:	1b3f      	subs	r7, r7, r4
 8002406:	e045      	b.n	8002494 <__aeabi_dsub+0x4e8>
 8002408:	464a      	mov	r2, r9
 800240a:	1a1c      	subs	r4, r3, r0
 800240c:	1bd1      	subs	r1, r2, r7
 800240e:	42a3      	cmp	r3, r4
 8002410:	4192      	sbcs	r2, r2
 8002412:	4252      	negs	r2, r2
 8002414:	4692      	mov	sl, r2
 8002416:	000a      	movs	r2, r1
 8002418:	4651      	mov	r1, sl
 800241a:	1a52      	subs	r2, r2, r1
 800241c:	4692      	mov	sl, r2
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	d500      	bpl.n	8002424 <__aeabi_dsub+0x478>
 8002422:	e083      	b.n	800252c <__aeabi_dsub+0x580>
 8002424:	4653      	mov	r3, sl
 8002426:	4323      	orrs	r3, r4
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x480>
 800242a:	e621      	b.n	8002070 <__aeabi_dsub+0xc4>
 800242c:	2200      	movs	r2, #0
 800242e:	2500      	movs	r5, #0
 8002430:	e753      	b.n	80022da <__aeabi_dsub+0x32e>
 8002432:	181c      	adds	r4, r3, r0
 8002434:	429c      	cmp	r4, r3
 8002436:	419b      	sbcs	r3, r3
 8002438:	444f      	add	r7, r9
 800243a:	46ba      	mov	sl, r7
 800243c:	425b      	negs	r3, r3
 800243e:	449a      	add	sl, r3
 8002440:	4653      	mov	r3, sl
 8002442:	2601      	movs	r6, #1
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	d400      	bmi.n	800244a <__aeabi_dsub+0x49e>
 8002448:	e73a      	b.n	80022c0 <__aeabi_dsub+0x314>
 800244a:	2602      	movs	r6, #2
 800244c:	4652      	mov	r2, sl
 800244e:	4b93      	ldr	r3, [pc, #588]	; (800269c <__aeabi_dsub+0x6f0>)
 8002450:	2101      	movs	r1, #1
 8002452:	401a      	ands	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	4021      	ands	r1, r4
 8002458:	0862      	lsrs	r2, r4, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	07dc      	lsls	r4, r3, #31
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	469a      	mov	sl, r3
 8002462:	4314      	orrs	r4, r2
 8002464:	e62c      	b.n	80020c0 <__aeabi_dsub+0x114>
 8002466:	0039      	movs	r1, r7
 8002468:	3a20      	subs	r2, #32
 800246a:	40d1      	lsrs	r1, r2
 800246c:	4662      	mov	r2, ip
 800246e:	2a20      	cmp	r2, #32
 8002470:	d006      	beq.n	8002480 <__aeabi_dsub+0x4d4>
 8002472:	4664      	mov	r4, ip
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	1b12      	subs	r2, r2, r4
 8002478:	003c      	movs	r4, r7
 800247a:	4094      	lsls	r4, r2
 800247c:	4304      	orrs	r4, r0
 800247e:	9401      	str	r4, [sp, #4]
 8002480:	9c01      	ldr	r4, [sp, #4]
 8002482:	1e62      	subs	r2, r4, #1
 8002484:	4194      	sbcs	r4, r2
 8002486:	430c      	orrs	r4, r1
 8002488:	e5e3      	b.n	8002052 <__aeabi_dsub+0xa6>
 800248a:	4649      	mov	r1, r9
 800248c:	4319      	orrs	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	1e5c      	subs	r4, r3, #1
 8002492:	41a3      	sbcs	r3, r4
 8002494:	1ac4      	subs	r4, r0, r3
 8002496:	42a0      	cmp	r0, r4
 8002498:	419b      	sbcs	r3, r3
 800249a:	425b      	negs	r3, r3
 800249c:	1afb      	subs	r3, r7, r3
 800249e:	469a      	mov	sl, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	0016      	movs	r6, r2
 80024a4:	e5dc      	b.n	8002060 <__aeabi_dsub+0xb4>
 80024a6:	4649      	mov	r1, r9
 80024a8:	4319      	orrs	r1, r3
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x502>
 80024ac:	e0ae      	b.n	800260c <__aeabi_dsub+0x660>
 80024ae:	4661      	mov	r1, ip
 80024b0:	4664      	mov	r4, ip
 80024b2:	3901      	subs	r1, #1
 80024b4:	2c01      	cmp	r4, #1
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x50e>
 80024b8:	e0e0      	b.n	800267c <__aeabi_dsub+0x6d0>
 80024ba:	4c77      	ldr	r4, [pc, #476]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024bc:	45a4      	cmp	ip, r4
 80024be:	d056      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80024c0:	468c      	mov	ip, r1
 80024c2:	e69a      	b.n	80021fa <__aeabi_dsub+0x24e>
 80024c4:	4661      	mov	r1, ip
 80024c6:	2220      	movs	r2, #32
 80024c8:	003c      	movs	r4, r7
 80024ca:	1a52      	subs	r2, r2, r1
 80024cc:	4094      	lsls	r4, r2
 80024ce:	0001      	movs	r1, r0
 80024d0:	4090      	lsls	r0, r2
 80024d2:	46a0      	mov	r8, r4
 80024d4:	4664      	mov	r4, ip
 80024d6:	1e42      	subs	r2, r0, #1
 80024d8:	4190      	sbcs	r0, r2
 80024da:	4662      	mov	r2, ip
 80024dc:	40e1      	lsrs	r1, r4
 80024de:	4644      	mov	r4, r8
 80024e0:	40d7      	lsrs	r7, r2
 80024e2:	430c      	orrs	r4, r1
 80024e4:	4304      	orrs	r4, r0
 80024e6:	44b9      	add	r9, r7
 80024e8:	e701      	b.n	80022ee <__aeabi_dsub+0x342>
 80024ea:	496b      	ldr	r1, [pc, #428]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024ec:	428a      	cmp	r2, r1
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x546>
 80024f0:	e70c      	b.n	800230c <__aeabi_dsub+0x360>
 80024f2:	1818      	adds	r0, r3, r0
 80024f4:	4298      	cmp	r0, r3
 80024f6:	419b      	sbcs	r3, r3
 80024f8:	444f      	add	r7, r9
 80024fa:	425b      	negs	r3, r3
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	07dc      	lsls	r4, r3, #31
 8002500:	0840      	lsrs	r0, r0, #1
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	469a      	mov	sl, r3
 8002506:	0016      	movs	r6, r2
 8002508:	4304      	orrs	r4, r0
 800250a:	e6d9      	b.n	80022c0 <__aeabi_dsub+0x314>
 800250c:	2a00      	cmp	r2, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x566>
 8002510:	e081      	b.n	8002616 <__aeabi_dsub+0x66a>
 8002512:	003b      	movs	r3, r7
 8002514:	4303      	orrs	r3, r0
 8002516:	d11d      	bne.n	8002554 <__aeabi_dsub+0x5a8>
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	0312      	lsls	r2, r2, #12
 800251e:	e70b      	b.n	8002338 <__aeabi_dsub+0x38c>
 8002520:	08c0      	lsrs	r0, r0, #3
 8002522:	077b      	lsls	r3, r7, #29
 8002524:	465d      	mov	r5, fp
 8002526:	4303      	orrs	r3, r0
 8002528:	08fa      	lsrs	r2, r7, #3
 800252a:	e6d3      	b.n	80022d4 <__aeabi_dsub+0x328>
 800252c:	1ac4      	subs	r4, r0, r3
 800252e:	42a0      	cmp	r0, r4
 8002530:	4180      	sbcs	r0, r0
 8002532:	464b      	mov	r3, r9
 8002534:	4240      	negs	r0, r0
 8002536:	1aff      	subs	r7, r7, r3
 8002538:	1a3b      	subs	r3, r7, r0
 800253a:	469a      	mov	sl, r3
 800253c:	465d      	mov	r5, fp
 800253e:	e597      	b.n	8002070 <__aeabi_dsub+0xc4>
 8002540:	1a1c      	subs	r4, r3, r0
 8002542:	464a      	mov	r2, r9
 8002544:	42a3      	cmp	r3, r4
 8002546:	419b      	sbcs	r3, r3
 8002548:	1bd7      	subs	r7, r2, r7
 800254a:	425b      	negs	r3, r3
 800254c:	1afb      	subs	r3, r7, r3
 800254e:	469a      	mov	sl, r3
 8002550:	2601      	movs	r6, #1
 8002552:	e585      	b.n	8002060 <__aeabi_dsub+0xb4>
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	077b      	lsls	r3, r7, #29
 8002558:	465d      	mov	r5, fp
 800255a:	4303      	orrs	r3, r0
 800255c:	08fa      	lsrs	r2, r7, #3
 800255e:	e6e7      	b.n	8002330 <__aeabi_dsub+0x384>
 8002560:	464a      	mov	r2, r9
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	0752      	lsls	r2, r2, #29
 8002566:	4313      	orrs	r3, r2
 8002568:	464a      	mov	r2, r9
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	e6b5      	b.n	80022da <__aeabi_dsub+0x32e>
 800256e:	08c0      	lsrs	r0, r0, #3
 8002570:	077b      	lsls	r3, r7, #29
 8002572:	4303      	orrs	r3, r0
 8002574:	08fa      	lsrs	r2, r7, #3
 8002576:	e6db      	b.n	8002330 <__aeabi_dsub+0x384>
 8002578:	4649      	mov	r1, r9
 800257a:	4319      	orrs	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	418b      	sbcs	r3, r1
 8002582:	001c      	movs	r4, r3
 8002584:	e653      	b.n	800222e <__aeabi_dsub+0x282>
 8002586:	464d      	mov	r5, r9
 8002588:	3c20      	subs	r4, #32
 800258a:	40e5      	lsrs	r5, r4
 800258c:	2920      	cmp	r1, #32
 800258e:	d005      	beq.n	800259c <__aeabi_dsub+0x5f0>
 8002590:	2440      	movs	r4, #64	; 0x40
 8002592:	1a64      	subs	r4, r4, r1
 8002594:	4649      	mov	r1, r9
 8002596:	40a1      	lsls	r1, r4
 8002598:	430b      	orrs	r3, r1
 800259a:	4698      	mov	r8, r3
 800259c:	4643      	mov	r3, r8
 800259e:	1e5c      	subs	r4, r3, #1
 80025a0:	41a3      	sbcs	r3, r4
 80025a2:	432b      	orrs	r3, r5
 80025a4:	e776      	b.n	8002494 <__aeabi_dsub+0x4e8>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d0e1      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80025aa:	003a      	movs	r2, r7
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	4302      	orrs	r2, r0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x608>
 80025b2:	e6b8      	b.n	8002326 <__aeabi_dsub+0x37a>
 80025b4:	464a      	mov	r2, r9
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	2480      	movs	r4, #128	; 0x80
 80025ba:	4313      	orrs	r3, r2
 80025bc:	464a      	mov	r2, r9
 80025be:	0324      	lsls	r4, r4, #12
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	4222      	tst	r2, r4
 80025c4:	d007      	beq.n	80025d6 <__aeabi_dsub+0x62a>
 80025c6:	08fe      	lsrs	r6, r7, #3
 80025c8:	4226      	tst	r6, r4
 80025ca:	d104      	bne.n	80025d6 <__aeabi_dsub+0x62a>
 80025cc:	465d      	mov	r5, fp
 80025ce:	0032      	movs	r2, r6
 80025d0:	08c3      	lsrs	r3, r0, #3
 80025d2:	077f      	lsls	r7, r7, #29
 80025d4:	433b      	orrs	r3, r7
 80025d6:	0f59      	lsrs	r1, r3, #29
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	430b      	orrs	r3, r1
 80025e0:	e6a6      	b.n	8002330 <__aeabi_dsub+0x384>
 80025e2:	1ac4      	subs	r4, r0, r3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	4180      	sbcs	r0, r0
 80025e8:	464b      	mov	r3, r9
 80025ea:	4240      	negs	r0, r0
 80025ec:	1aff      	subs	r7, r7, r3
 80025ee:	1a3b      	subs	r3, r7, r0
 80025f0:	469a      	mov	sl, r3
 80025f2:	465d      	mov	r5, fp
 80025f4:	2601      	movs	r6, #1
 80025f6:	e533      	b.n	8002060 <__aeabi_dsub+0xb4>
 80025f8:	003b      	movs	r3, r7
 80025fa:	4303      	orrs	r3, r0
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x654>
 80025fe:	e715      	b.n	800242c <__aeabi_dsub+0x480>
 8002600:	08c0      	lsrs	r0, r0, #3
 8002602:	077b      	lsls	r3, r7, #29
 8002604:	465d      	mov	r5, fp
 8002606:	4303      	orrs	r3, r0
 8002608:	08fa      	lsrs	r2, r7, #3
 800260a:	e666      	b.n	80022da <__aeabi_dsub+0x32e>
 800260c:	08c0      	lsrs	r0, r0, #3
 800260e:	077b      	lsls	r3, r7, #29
 8002610:	4303      	orrs	r3, r0
 8002612:	08fa      	lsrs	r2, r7, #3
 8002614:	e65e      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002616:	003a      	movs	r2, r7
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	4302      	orrs	r2, r0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x674>
 800261e:	e682      	b.n	8002326 <__aeabi_dsub+0x37a>
 8002620:	464a      	mov	r2, r9
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	2480      	movs	r4, #128	; 0x80
 8002626:	4313      	orrs	r3, r2
 8002628:	464a      	mov	r2, r9
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4222      	tst	r2, r4
 8002630:	d007      	beq.n	8002642 <__aeabi_dsub+0x696>
 8002632:	08fe      	lsrs	r6, r7, #3
 8002634:	4226      	tst	r6, r4
 8002636:	d104      	bne.n	8002642 <__aeabi_dsub+0x696>
 8002638:	465d      	mov	r5, fp
 800263a:	0032      	movs	r2, r6
 800263c:	08c3      	lsrs	r3, r0, #3
 800263e:	077f      	lsls	r7, r7, #29
 8002640:	433b      	orrs	r3, r7
 8002642:	0f59      	lsrs	r1, r3, #29
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	0749      	lsls	r1, r1, #29
 800264a:	430b      	orrs	r3, r1
 800264c:	e670      	b.n	8002330 <__aeabi_dsub+0x384>
 800264e:	08c0      	lsrs	r0, r0, #3
 8002650:	077b      	lsls	r3, r7, #29
 8002652:	4303      	orrs	r3, r0
 8002654:	08fa      	lsrs	r2, r7, #3
 8002656:	e640      	b.n	80022da <__aeabi_dsub+0x32e>
 8002658:	464c      	mov	r4, r9
 800265a:	3920      	subs	r1, #32
 800265c:	40cc      	lsrs	r4, r1
 800265e:	4661      	mov	r1, ip
 8002660:	2920      	cmp	r1, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x6c6>
 8002664:	4666      	mov	r6, ip
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	1b89      	subs	r1, r1, r6
 800266a:	464e      	mov	r6, r9
 800266c:	408e      	lsls	r6, r1
 800266e:	4333      	orrs	r3, r6
 8002670:	4698      	mov	r8, r3
 8002672:	4643      	mov	r3, r8
 8002674:	1e59      	subs	r1, r3, #1
 8002676:	418b      	sbcs	r3, r1
 8002678:	431c      	orrs	r4, r3
 800267a:	e5d8      	b.n	800222e <__aeabi_dsub+0x282>
 800267c:	181c      	adds	r4, r3, r0
 800267e:	4284      	cmp	r4, r0
 8002680:	4180      	sbcs	r0, r0
 8002682:	444f      	add	r7, r9
 8002684:	46ba      	mov	sl, r7
 8002686:	4240      	negs	r0, r0
 8002688:	4482      	add	sl, r0
 800268a:	e6d9      	b.n	8002440 <__aeabi_dsub+0x494>
 800268c:	4653      	mov	r3, sl
 800268e:	4323      	orrs	r3, r4
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x6e8>
 8002692:	e6cb      	b.n	800242c <__aeabi_dsub+0x480>
 8002694:	e614      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	000007ff 	.word	0x000007ff
 800269c:	ff7fffff 	.word	0xff7fffff
 80026a0:	000007fe 	.word	0x000007fe
 80026a4:	2300      	movs	r3, #0
 80026a6:	4a01      	ldr	r2, [pc, #4]	; (80026ac <__aeabi_dsub+0x700>)
 80026a8:	001c      	movs	r4, r3
 80026aa:	e529      	b.n	8002100 <__aeabi_dsub+0x154>
 80026ac:	000007ff 	.word	0x000007ff

080026b0 <__aeabi_dcmpun>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	0005      	movs	r5, r0
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026b6:	031c      	lsls	r4, r3, #12
 80026b8:	0016      	movs	r6, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	030a      	lsls	r2, r1, #12
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	0b12      	lsrs	r2, r2, #12
 80026c2:	0d49      	lsrs	r1, r1, #21
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	4281      	cmp	r1, r0
 80026ca:	d008      	beq.n	80026de <__aeabi_dcmpun+0x2e>
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026d4:	0020      	movs	r0, r4
 80026d6:	4330      	orrs	r0, r6
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	4198      	sbcs	r0, r3
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	2001      	movs	r0, #1
 80026e0:	432a      	orrs	r2, r5
 80026e2:	d1fb      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026e4:	e7f2      	b.n	80026cc <__aeabi_dcmpun+0x1c>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	000007ff 	.word	0x000007ff

080026ec <__aeabi_d2iz>:
 80026ec:	000a      	movs	r2, r1
 80026ee:	b530      	push	{r4, r5, lr}
 80026f0:	4c13      	ldr	r4, [pc, #76]	; (8002740 <__aeabi_d2iz+0x54>)
 80026f2:	0053      	lsls	r3, r2, #1
 80026f4:	0309      	lsls	r1, r1, #12
 80026f6:	0005      	movs	r5, r0
 80026f8:	0b09      	lsrs	r1, r1, #12
 80026fa:	2000      	movs	r0, #0
 80026fc:	0d5b      	lsrs	r3, r3, #21
 80026fe:	0fd2      	lsrs	r2, r2, #31
 8002700:	42a3      	cmp	r3, r4
 8002702:	dd04      	ble.n	800270e <__aeabi_d2iz+0x22>
 8002704:	480f      	ldr	r0, [pc, #60]	; (8002744 <__aeabi_d2iz+0x58>)
 8002706:	4283      	cmp	r3, r0
 8002708:	dd02      	ble.n	8002710 <__aeabi_d2iz+0x24>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <__aeabi_d2iz+0x5c>)
 800270c:	18d0      	adds	r0, r2, r3
 800270e:	bd30      	pop	{r4, r5, pc}
 8002710:	2080      	movs	r0, #128	; 0x80
 8002712:	0340      	lsls	r0, r0, #13
 8002714:	4301      	orrs	r1, r0
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <__aeabi_d2iz+0x60>)
 8002718:	1ac0      	subs	r0, r0, r3
 800271a:	281f      	cmp	r0, #31
 800271c:	dd08      	ble.n	8002730 <__aeabi_d2iz+0x44>
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <__aeabi_d2iz+0x64>)
 8002720:	1ac3      	subs	r3, r0, r3
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000b      	movs	r3, r1
 8002726:	4258      	negs	r0, r3
 8002728:	2a00      	cmp	r2, #0
 800272a:	d1f0      	bne.n	800270e <__aeabi_d2iz+0x22>
 800272c:	0018      	movs	r0, r3
 800272e:	e7ee      	b.n	800270e <__aeabi_d2iz+0x22>
 8002730:	4c08      	ldr	r4, [pc, #32]	; (8002754 <__aeabi_d2iz+0x68>)
 8002732:	40c5      	lsrs	r5, r0
 8002734:	46a4      	mov	ip, r4
 8002736:	4463      	add	r3, ip
 8002738:	4099      	lsls	r1, r3
 800273a:	000b      	movs	r3, r1
 800273c:	432b      	orrs	r3, r5
 800273e:	e7f2      	b.n	8002726 <__aeabi_d2iz+0x3a>
 8002740:	000003fe 	.word	0x000003fe
 8002744:	0000041d 	.word	0x0000041d
 8002748:	7fffffff 	.word	0x7fffffff
 800274c:	00000433 	.word	0x00000433
 8002750:	00000413 	.word	0x00000413
 8002754:	fffffbed 	.word	0xfffffbed

08002758 <__aeabi_i2d>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2800      	cmp	r0, #0
 800275c:	d016      	beq.n	800278c <__aeabi_i2d+0x34>
 800275e:	17c3      	asrs	r3, r0, #31
 8002760:	18c5      	adds	r5, r0, r3
 8002762:	405d      	eors	r5, r3
 8002764:	0fc4      	lsrs	r4, r0, #31
 8002766:	0028      	movs	r0, r5
 8002768:	f000 f84c 	bl	8002804 <__clzsi2>
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <__aeabi_i2d+0x5c>)
 800276e:	1a1b      	subs	r3, r3, r0
 8002770:	280a      	cmp	r0, #10
 8002772:	dc16      	bgt.n	80027a2 <__aeabi_i2d+0x4a>
 8002774:	0002      	movs	r2, r0
 8002776:	002e      	movs	r6, r5
 8002778:	3215      	adds	r2, #21
 800277a:	4096      	lsls	r6, r2
 800277c:	220b      	movs	r2, #11
 800277e:	1a12      	subs	r2, r2, r0
 8002780:	40d5      	lsrs	r5, r2
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	032d      	lsls	r5, r5, #12
 8002786:	0b2d      	lsrs	r5, r5, #12
 8002788:	0d5b      	lsrs	r3, r3, #21
 800278a:	e003      	b.n	8002794 <__aeabi_i2d+0x3c>
 800278c:	2400      	movs	r4, #0
 800278e:	2300      	movs	r3, #0
 8002790:	2500      	movs	r5, #0
 8002792:	2600      	movs	r6, #0
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	432b      	orrs	r3, r5
 8002798:	07e4      	lsls	r4, r4, #31
 800279a:	4323      	orrs	r3, r4
 800279c:	0030      	movs	r0, r6
 800279e:	0019      	movs	r1, r3
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	380b      	subs	r0, #11
 80027a4:	4085      	lsls	r5, r0
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	032d      	lsls	r5, r5, #12
 80027aa:	2600      	movs	r6, #0
 80027ac:	0b2d      	lsrs	r5, r5, #12
 80027ae:	0d5b      	lsrs	r3, r3, #21
 80027b0:	e7f0      	b.n	8002794 <__aeabi_i2d+0x3c>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_ui2d>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	1e04      	subs	r4, r0, #0
 80027bc:	d010      	beq.n	80027e0 <__aeabi_ui2d+0x28>
 80027be:	f000 f821 	bl	8002804 <__clzsi2>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <__aeabi_ui2d+0x48>)
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	280a      	cmp	r0, #10
 80027c8:	dc11      	bgt.n	80027ee <__aeabi_ui2d+0x36>
 80027ca:	220b      	movs	r2, #11
 80027cc:	0021      	movs	r1, r4
 80027ce:	1a12      	subs	r2, r2, r0
 80027d0:	40d1      	lsrs	r1, r2
 80027d2:	3015      	adds	r0, #21
 80027d4:	030a      	lsls	r2, r1, #12
 80027d6:	055b      	lsls	r3, r3, #21
 80027d8:	4084      	lsls	r4, r0
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	e001      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	4313      	orrs	r3, r2
 80027e8:	0020      	movs	r0, r4
 80027ea:	0019      	movs	r1, r3
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	0022      	movs	r2, r4
 80027f0:	380b      	subs	r0, #11
 80027f2:	4082      	lsls	r2, r0
 80027f4:	055b      	lsls	r3, r3, #21
 80027f6:	0312      	lsls	r2, r2, #12
 80027f8:	2400      	movs	r4, #0
 80027fa:	0b12      	lsrs	r2, r2, #12
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	e7f1      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 8002800:	0000041e 	.word	0x0000041e

08002804 <__clzsi2>:
 8002804:	211c      	movs	r1, #28
 8002806:	2301      	movs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	4298      	cmp	r0, r3
 800280c:	d301      	bcc.n	8002812 <__clzsi2+0xe>
 800280e:	0c00      	lsrs	r0, r0, #16
 8002810:	3910      	subs	r1, #16
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	4298      	cmp	r0, r3
 8002816:	d301      	bcc.n	800281c <__clzsi2+0x18>
 8002818:	0a00      	lsrs	r0, r0, #8
 800281a:	3908      	subs	r1, #8
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	4298      	cmp	r0, r3
 8002820:	d301      	bcc.n	8002826 <__clzsi2+0x22>
 8002822:	0900      	lsrs	r0, r0, #4
 8002824:	3904      	subs	r1, #4
 8002826:	a202      	add	r2, pc, #8	; (adr r2, 8002830 <__clzsi2+0x2c>)
 8002828:	5c10      	ldrb	r0, [r2, r0]
 800282a:	1840      	adds	r0, r0, r1
 800282c:	4770      	bx	lr
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	02020304 	.word	0x02020304
 8002834:	01010101 	.word	0x01010101
	...

08002840 <__clzdi2>:
 8002840:	b510      	push	{r4, lr}
 8002842:	2900      	cmp	r1, #0
 8002844:	d103      	bne.n	800284e <__clzdi2+0xe>
 8002846:	f7ff ffdd 	bl	8002804 <__clzsi2>
 800284a:	3020      	adds	r0, #32
 800284c:	e002      	b.n	8002854 <__clzdi2+0x14>
 800284e:	0008      	movs	r0, r1
 8002850:	f7ff ffd8 	bl	8002804 <__clzsi2>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	46c0      	nop			; (mov r8, r8)

08002858 <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7d1b      	ldrb	r3, [r3, #20]
 8002868:	b29b      	uxth	r3, r3
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f002 f9db 	bl	8004c28 <HAL_GPIO_ReadPin>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d010      	beq.n	8002898 <DistanceSensor_InputCaptureInterrupt+0x40>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	0018      	movs	r0, r3
 800287e:	f005 f8e9 	bl	8007a54 <HAL_TIM_ReadCapturedValue>
 8002882:	0003      	movs	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2104      	movs	r1, #4
 8002890:	0018      	movs	r0, r3
 8002892:	f004 fd33 	bl	80072fc <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002896:	e034      	b.n	8002902 <DistanceSensor_InputCaptureInterrupt+0xaa>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	0018      	movs	r0, r3
 80028a0:	f005 f8d8 	bl	8007a54 <HAL_TIM_ReadCapturedValue>
 80028a4:	0003      	movs	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	88da      	ldrh	r2, [r3, #6]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d909      	bls.n	80028cc <DistanceSensor_InputCaptureInterrupt+0x74>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	88db      	ldrh	r3, [r3, #6]
 80028bc:	001a      	movs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	001a      	movs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e00b      	b.n	80028e4 <DistanceSensor_InputCaptureInterrupt+0x8c>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	889b      	ldrh	r3, [r3, #4]
 80028d0:	001a      	movs	r2, r3
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	025b      	lsls	r3, r3, #9
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	88d2      	ldrh	r2, [r2, #6]
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	001a      	movs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2104      	movs	r1, #4
 80028ea:	0018      	movs	r0, r3
 80028ec:	f004 fc7a 	bl	80071e4 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <DistanceSensor_InputCaptureInterrupt+0xb4>)
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
			DistanceSensor_Handle(sensor);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f81d 	bl	800293c <DistanceSensor_Handle>
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	0000ffff 	.word	0x0000ffff

08002910 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0018      	movs	r0, r3
 800291e:	f7fe f8e1 	bl	8000ae4 <__aeabi_ui2f>
 8002922:	1c03      	adds	r3, r0, #0
 8002924:	4904      	ldr	r1, [pc, #16]	; (8002938 <DistanceSensor_GetDistance+0x28>)
 8002926:	1c18      	adds	r0, r3, #0
 8002928:	f7fd ff12 	bl	8000750 <__aeabi_fdiv>
 800292c:	1c03      	adds	r3, r0, #0
}
 800292e:	1c18      	adds	r0, r3, #0
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	42680000 	.word	0x42680000

0800293c <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff ffe2 	bl	8002910 <DistanceSensor_GetDistance>
 800294c:	1c03      	adds	r3, r0, #0
 800294e:	60fb      	str	r3, [r7, #12]
	if (sensor->countAtMaxDistance > 5)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7b1b      	ldrb	r3, [r3, #12]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d918      	bls.n	800298a <DistanceSensor_Handle+0x4e>
	{
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6998      	ldr	r0, [r3, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	b29b      	uxth	r3, r3
 8002962:	2201      	movs	r2, #1
 8002964:	0019      	movs	r1, r3
 8002966:	f002 f97c 	bl	8004c62 <HAL_GPIO_WritePin>

		if (!Speaker.hasFault) Speaker_Start(&Speaker, sensor->ID);
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <DistanceSensor_Handle+0xa0>)
 800296c:	7c1b      	ldrb	r3, [r3, #16]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2201      	movs	r2, #1
 8002972:	4053      	eors	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02c      	beq.n	80029d4 <DistanceSensor_Handle+0x98>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b5a      	ldrb	r2, [r3, #13]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <DistanceSensor_Handle+0xa0>)
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 f80f 	bl	80039a6 <Speaker_Start>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);

		if (Speaker.hasFault) Speaker_Stop(&Speaker, sensor->ID);

	}
}
 8002988:	e024      	b.n	80029d4 <DistanceSensor_Handle+0x98>
	else if (distance < MIN_DISTANCE)
 800298a:	4915      	ldr	r1, [pc, #84]	; (80029e0 <DistanceSensor_Handle+0xa4>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7fd fd9d 	bl	80004cc <__aeabi_fcmplt>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d006      	beq.n	80029a4 <DistanceSensor_Handle+0x68>
		sensor->countAtMaxDistance++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7b1b      	ldrb	r3, [r3, #12]
 800299a:	3301      	adds	r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	731a      	strb	r2, [r3, #12]
}
 80029a2:	e017      	b.n	80029d4 <DistanceSensor_Handle+0x98>
		sensor->countAtMaxDistance = 0;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6998      	ldr	r0, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7f1b      	ldrb	r3, [r3, #28]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	0019      	movs	r1, r3
 80029b8:	f002 f953 	bl	8004c62 <HAL_GPIO_WritePin>
		if (Speaker.hasFault) Speaker_Stop(&Speaker, sensor->ID);
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <DistanceSensor_Handle+0xa0>)
 80029be:	7c1b      	ldrb	r3, [r3, #16]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <DistanceSensor_Handle+0x98>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b5a      	ldrb	r2, [r3, #13]
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <DistanceSensor_Handle+0xa0>)
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 f81e 	bl	8003a10 <Speaker_Stop>
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000478 	.word	0x20000478
 80029e0:	41200000 	.word	0x41200000

080029e4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_TIM_IC_CaptureCallback+0x38>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d104      	bne.n	8002a00 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ff2d 	bl	8002858 <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM22) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 80029fe:	e008      	b.n	8002a12 <HAL_TIM_IC_CaptureCallback+0x2e>
	else if (htim->Instance == TIM22) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d103      	bne.n	8002a12 <HAL_TIM_IC_CaptureCallback+0x2e>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ff23 	bl	8002858 <DistanceSensor_InputCaptureInterrupt>
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	20000438 	.word	0x20000438
 8002a24:	40011400 	.word	0x40011400
 8002a28:	20000458 	.word	0x20000458

08002a2c <HAL_TIM_PeriodElapsedCallback>:
    }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2 && Speaker.beepLengthOn != 0)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	05db      	lsls	r3, r3, #23
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d108      	bne.n	8002a52 <HAL_TIM_PeriodElapsedCallback+0x26>
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Speaker_BeepInterrupt(&Speaker);
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 f87d 	bl	8003b4c <Speaker_BeepInterrupt>
	}

}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b002      	add	sp, #8
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20000478 	.word	0x20000478

08002a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a66:	f001 fc7d 	bl	8004364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a6a:	f000 f825 	bl	8002ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a6e:	f000 fb33 	bl	80030d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a72:	f000 fb13 	bl	800309c <MX_DMA_Init>
  MX_I2C1_Init();
 8002a76:	f000 f89b 	bl	8002bb0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a7a:	f000 f8d9 	bl	8002c30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a7e:	f000 fadd 	bl	800303c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f000 f90d 	bl	8002ca0 <MX_TIM2_Init>
  MX_TIM22_Init();
 8002a86:	f000 fa31 	bl	8002eec <MX_TIM22_Init>
  MX_TIM21_Init();
 8002a8a:	f000 f987 	bl	8002d9c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  Speaker_Init(&Speaker, &htim2);
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <main+0x4c>)
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <main+0x50>)
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 ff51 	bl	800393c <Speaker_Init>
  //DistanceSensor_Init(&Front, &htim21, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
  RFID_Init(&RFID_Module);
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <main+0x54>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fe27 	bl	80036f0 <RFID_Init>
  //DistanceSensor_Start(&Back);W

  uint8_t serialNum[5];
  while (1)
  {
	  RFID_SecurityLogic(&RFID_Module);
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <main+0x54>)
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fed7 	bl	8003858 <RFID_SecurityLogic>
 8002aaa:	e7fa      	b.n	8002aa2 <main+0x42>
 8002aac:	200002e4 	.word	0x200002e4
 8002ab0:	20000478 	.word	0x20000478
 8002ab4:	2000042c 	.word	0x2000042c

08002ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b09b      	sub	sp, #108	; 0x6c
 8002abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002abe:	2434      	movs	r4, #52	; 0x34
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	2334      	movs	r3, #52	; 0x34
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f006 fe2b 	bl	8009724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ace:	2320      	movs	r3, #32
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	2314      	movs	r3, #20
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f006 fe23 	bl	8009724 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	231c      	movs	r3, #28
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f006 fe1c 	bl	8009724 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <SystemClock_Config+0xf0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <SystemClock_Config+0xf4>)
 8002af2:	401a      	ands	r2, r3
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <SystemClock_Config+0xf0>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0109      	lsls	r1, r1, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002afe:	0021      	movs	r1, r4
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2201      	movs	r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2210      	movs	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	2202      	movs	r2, #2
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	02d2      	lsls	r2, r2, #11
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 ffdd 	bl	8005af0 <HAL_RCC_OscConfig>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002b3a:	f000 fb3f 	bl	80031bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3e:	2120      	movs	r1, #32
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	220f      	movs	r2, #15
 8002b44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2101      	movs	r1, #1
 8002b62:	0018      	movs	r0, r3
 8002b64:	f003 fb2e 	bl	80061c4 <HAL_RCC_ClockConfig>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d001      	beq.n	8002b70 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002b6c:	f000 fb26 	bl	80031bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2209      	movs	r2, #9
 8002b74:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	0018      	movs	r0, r3
 8002b86:	f003 fdc5 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002b8e:	f000 fb15 	bl	80031bc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	045b      	lsls	r3, r3, #17
 8002b96:	2200      	movs	r2, #0
 8002b98:	0019      	movs	r1, r3
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f003 fc5a 	bl	8006454 <HAL_RCC_MCOConfig>
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b01b      	add	sp, #108	; 0x6c
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	ffffe7ff 	.word	0xffffe7ff

08002bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <MX_I2C1_Init+0x7c>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bec:	0018      	movs	r0, r3
 8002bee:	f002 f855 	bl	8004c9c <HAL_I2C_Init>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 fae1 	bl	80031bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 fede 	bl	80059c0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c08:	f000 fad8 	bl	80031bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002c0e:	2100      	movs	r1, #0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f002 ff21 	bl	8005a58 <HAL_I2CEx_ConfigDigitalFilter>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c1a:	f000 facf 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200001f0 	.word	0x200001f0
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	00300f38 	.word	0x00300f38

08002c30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c36:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <MX_SPI1_Init+0x6c>)
 8002c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c3c:	2282      	movs	r2, #130	; 0x82
 8002c3e:	0052      	lsls	r2, r2, #1
 8002c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c64:	2238      	movs	r2, #56	; 0x38
 8002c66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c82:	0018      	movs	r0, r3
 8002c84:	f003 fe80 	bl	8006988 <HAL_SPI_Init>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c8c:	f000 fa96 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	2000028c 	.word	0x2000028c
 8002c9c:	40013000 	.word	0x40013000

08002ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	2318      	movs	r3, #24
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	0018      	movs	r0, r3
 8002cac:	2310      	movs	r3, #16
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f006 fd37 	bl	8009724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f006 fd2f 	bl	8009724 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc6:	003b      	movs	r3, r7
 8002cc8:	0018      	movs	r0, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f006 fd28 	bl	8009724 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	05d2      	lsls	r2, r2, #23
 8002cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cde:	221f      	movs	r2, #31
 8002ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cea:	22f4      	movs	r2, #244	; 0xf4
 8002cec:	0052      	lsls	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f004 f976 	bl	8006ff0 <HAL_TIM_Base_Init>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002d08:	f000 fa58 	bl	80031bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0c:	2118      	movs	r1, #24
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0152      	lsls	r2, r2, #5
 8002d14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d16:	187a      	adds	r2, r7, r1
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 fdc5 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002d26:	f000 fa49 	bl	80031bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f004 fa11 	bl	8007154 <HAL_TIM_PWM_Init>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d36:	f000 fa41 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d48:	187a      	adds	r2, r7, r1
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 fa00 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002d58:	f000 fa30 	bl	80031bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5c:	003b      	movs	r3, r7
 8002d5e:	2260      	movs	r2, #96	; 0x60
 8002d60:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 244;
 8002d62:	003b      	movs	r3, r7
 8002d64:	22f4      	movs	r2, #244	; 0xf4
 8002d66:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d68:	003b      	movs	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	003b      	movs	r3, r7
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d74:	0039      	movs	r1, r7
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 fcd0 	bl	8007720 <HAL_TIM_PWM_ConfigChannel>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002d84:	f000 fa1a 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 f8c6 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b00a      	add	sp, #40	; 0x28
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200002e4 	.word	0x200002e4

08002d9c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	; 0x38
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	2328      	movs	r3, #40	; 0x28
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	0018      	movs	r0, r3
 8002da8:	2310      	movs	r3, #16
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f006 fcb9 	bl	8009724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db2:	2320      	movs	r3, #32
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	0018      	movs	r0, r3
 8002db8:	2308      	movs	r3, #8
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f006 fcb1 	bl	8009724 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2310      	movs	r3, #16
 8002dca:	001a      	movs	r2, r3
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f006 fca9 	bl	8009724 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f006 fca2 	bl	8009724 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002de2:	4a40      	ldr	r2, [pc, #256]	; (8002ee4 <MX_TIM21_Init+0x148>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002de6:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002de8:	221f      	movs	r2, #31
 8002dea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <MX_TIM21_Init+0x14c>)
 8002df6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f004 f8f2 	bl	8006ff0 <HAL_TIM_Base_Init>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8002e10:	f000 f9d4 	bl	80031bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	2128      	movs	r1, #40	; 0x28
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	0152      	lsls	r2, r2, #5
 8002e1c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002e1e:	187a      	adds	r2, r7, r1
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f004 fd41 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8002e2e:	f000 f9c5 	bl	80031bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f004 fa9f 	bl	8007378 <HAL_TIM_IC_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8002e3e:	f000 f9bd 	bl	80031bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e44:	0018      	movs	r0, r3
 8002e46:	f004 f985 	bl	8007154 <HAL_TIM_PWM_Init>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM21_Init+0xb6>
  {
    Error_Handler();
 8002e4e:	f000 f9b5 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e52:	2120      	movs	r1, #32
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002e60:	187a      	adds	r2, r7, r1
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f005 f974 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM21_Init+0xd8>
  {
    Error_Handler();
 8002e70:	f000 f9a4 	bl	80031bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002e74:	2110      	movs	r1, #16
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	220a      	movs	r2, #10
 8002e7a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2201      	movs	r2, #1
 8002e80:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e8e:	1879      	adds	r1, r7, r1
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	0018      	movs	r0, r3
 8002e96:	f004 fb9f 	bl	80075d8 <HAL_TIM_IC_ConfigChannel>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM21_Init+0x106>
  {
    Error_Handler();
 8002e9e:	f000 f98d 	bl	80031bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	2260      	movs	r2, #96	; 0x60
 8002ea6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	220a      	movs	r2, #10
 8002eac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eae:	003b      	movs	r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb4:	003b      	movs	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eba:	0039      	movs	r1, r7
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f004 fc2d 	bl	8007720 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM21_Init+0x132>
  {
    Error_Handler();
 8002eca:	f000 f977 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f001 f823 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b00e      	add	sp, #56	; 0x38
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000324 	.word	0x20000324
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	0000ffff 	.word	0x0000ffff

08002eec <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	2328      	movs	r3, #40	; 0x28
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	2310      	movs	r3, #16
 8002efa:	001a      	movs	r2, r3
 8002efc:	2100      	movs	r1, #0
 8002efe:	f006 fc11 	bl	8009724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	2320      	movs	r3, #32
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	0018      	movs	r0, r3
 8002f08:	2308      	movs	r3, #8
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f006 fc09 	bl	8009724 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f12:	2310      	movs	r3, #16
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	0018      	movs	r0, r3
 8002f18:	2310      	movs	r3, #16
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f006 fc01 	bl	8009724 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f22:	003b      	movs	r3, r7
 8002f24:	0018      	movs	r0, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f006 fbfa 	bl	8009724 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <MX_TIM22_Init+0x148>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8002f36:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f38:	221f      	movs	r2, #31
 8002f3a:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f44:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <MX_TIM22_Init+0x14c>)
 8002f46:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f004 f84a 	bl	8006ff0 <HAL_TIM_Base_Init>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM22_Init+0x78>
  {
    Error_Handler();
 8002f60:	f000 f92c 	bl	80031bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f64:	2128      	movs	r1, #40	; 0x28
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	0152      	lsls	r2, r2, #5
 8002f6c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002f6e:	187a      	adds	r2, r7, r1
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f004 fc99 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8002f7e:	f000 f91d 	bl	80031bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim22) != HAL_OK)
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f84:	0018      	movs	r0, r3
 8002f86:	f004 f9f7 	bl	8007378 <HAL_TIM_IC_Init>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8002f8e:	f000 f915 	bl	80031bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f94:	0018      	movs	r0, r3
 8002f96:	f004 f8dd 	bl	8007154 <HAL_TIM_PWM_Init>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 8002f9e:	f000 f90d 	bl	80031bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002fb0:	187a      	adds	r2, r7, r1
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <MX_TIM22_Init+0x144>)
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 f8cc 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM22_Init+0xd8>
  {
    Error_Handler();
 8002fc0:	f000 f8fc 	bl	80031bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	220a      	movs	r2, #10
 8002fca:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2201      	movs	r2, #1
 8002fd0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim22, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fde:	1879      	adds	r1, r7, r1
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <MX_TIM22_Init+0x144>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f004 faf7 	bl	80075d8 <HAL_TIM_IC_ConfigChannel>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM22_Init+0x106>
  {
    Error_Handler();
 8002fee:	f000 f8e5 	bl	80031bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	003b      	movs	r3, r7
 8002ff4:	2260      	movs	r2, #96	; 0x60
 8002ff6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	220a      	movs	r2, #10
 8002ffc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffe:	003b      	movs	r3, r7
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003004:	003b      	movs	r3, r7
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800300a:	0039      	movs	r1, r7
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <MX_TIM22_Init+0x144>)
 800300e:	2204      	movs	r2, #4
 8003010:	0018      	movs	r0, r3
 8003012:	f004 fb85 	bl	8007720 <HAL_TIM_PWM_ConfigChannel>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_TIM22_Init+0x132>
  {
    Error_Handler();
 800301a:	f000 f8cf 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <MX_TIM22_Init+0x144>)
 8003020:	0018      	movs	r0, r3
 8003022:	f000 ff7b 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b00e      	add	sp, #56	; 0x38
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	20000364 	.word	0x20000364
 8003034:	40011400 	.word	0x40011400
 8003038:	0000ffff 	.word	0x0000ffff

0800303c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <MX_USART1_UART_Init+0x5c>)
 8003044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003048:	22e1      	movs	r2, #225	; 0xe1
 800304a:	0252      	lsls	r2, r2, #9
 800304c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003080:	0018      	movs	r0, r3
 8003082:	f005 f8bf 	bl	8008204 <HAL_UART_Init>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d001      	beq.n	800308e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800308a:	f000 f897 	bl	80031bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200003a4 	.word	0x200003a4
 8003098:	40013800 	.word	0x40013800

0800309c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a8:	2101      	movs	r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_DMA_Init+0x38>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	2201      	movs	r2, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	200a      	movs	r0, #10
 80030c0:	f001 fa90 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f001 faa2 	bl	800460e <HAL_NVIC_EnableIRQ>

}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000

080030d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	240c      	movs	r4, #12
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	0018      	movs	r0, r3
 80030e4:	2314      	movs	r3, #20
 80030e6:	001a      	movs	r2, r3
 80030e8:	2100      	movs	r1, #0
 80030ea:	f006 fb1b 	bl	8009724 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <MX_GPIO_Init+0xd8>)
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <MX_GPIO_Init+0xd8>)
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <MX_GPIO_Init+0xd8>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <MX_GPIO_Init+0xd8>)
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <MX_GPIO_Init+0xd8>)
 800310c:	2102      	movs	r1, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <MX_GPIO_Init+0xd8>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_RESET);
 800311e:	4925      	ldr	r1, [pc, #148]	; (80031b4 <MX_GPIO_Init+0xdc>)
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	2200      	movs	r2, #0
 8003126:	0018      	movs	r0, r3
 8003128:	f001 fd9b 	bl	8004c62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <MX_GPIO_Init+0xe0>)
 800312e:	2200      	movs	r2, #0
 8003130:	2109      	movs	r1, #9
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fd95 	bl	8004c62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin DISTANCE_SENSOR_FRONT_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin;
 8003138:	193b      	adds	r3, r7, r4
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <MX_GPIO_Init+0xdc>)
 800313c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313e:	193b      	adds	r3, r7, r4
 8003140:	2201      	movs	r2, #1
 8003142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	193b      	adds	r3, r7, r4
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	193b      	adds	r3, r7, r4
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	193a      	adds	r2, r7, r4
 8003152:	23a0      	movs	r3, #160	; 0xa0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f001 fbef 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 800315e:	193b      	adds	r3, r7, r4
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	193b      	adds	r3, r7, r4
 8003166:	2201      	movs	r2, #1
 8003168:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316a:	193b      	adds	r3, r7, r4
 800316c:	2201      	movs	r2, #1
 800316e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003176:	193b      	adds	r3, r7, r4
 8003178:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <MX_GPIO_Init+0xe0>)
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f001 fbdd 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_STATUS_Pin;
 8003182:	0021      	movs	r1, r4
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2208      	movs	r2, #8
 8003188:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2201      	movs	r2, #1
 800318e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISTANCE_SENSOR_BACK_STATUS_GPIO_Port, &GPIO_InitStruct);
 800319c:	187b      	adds	r3, r7, r1
 800319e:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <MX_GPIO_Init+0xe0>)
 80031a0:	0019      	movs	r1, r3
 80031a2:	0010      	movs	r0, r2
 80031a4:	f001 fbca 	bl	800493c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b009      	add	sp, #36	; 0x24
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	00008010 	.word	0x00008010
 80031b8:	50000400 	.word	0x50000400

080031bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
}
 80031c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <Error_Handler+0x8>
	...

080031c8 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80031d4:	240f      	movs	r4, #15
 80031d6:	193a      	adds	r2, r7, r4
 80031d8:	1df9      	adds	r1, r7, #7
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <RC522_SPI_Transfer+0x2c>)
 80031dc:	2364      	movs	r3, #100	; 0x64
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2301      	movs	r3, #1
 80031e2:	f003 fc65 	bl	8006ab0 <HAL_SPI_TransmitReceive>

	return rx_data;
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b005      	add	sp, #20
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	2000028c 	.word	0x2000028c

080031f8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	0002      	movs	r2, r0
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	1c0a      	adds	r2, r1, #0
 8003208:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800320a:	23a0      	movs	r3, #160	; 0xa0
 800320c:	05db      	lsls	r3, r3, #23
 800320e:	2200      	movs	r2, #0
 8003210:	2110      	movs	r1, #16
 8003212:	0018      	movs	r0, r3
 8003214:	f001 fd25 	bl	8004c62 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	227e      	movs	r2, #126	; 0x7e
 8003222:	4013      	ands	r3, r2
 8003224:	b2db      	uxtb	r3, r3
 8003226:	0018      	movs	r0, r3
 8003228:	f7ff ffce 	bl	80031c8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800322c:	1dbb      	adds	r3, r7, #6
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ffc9 	bl	80031c8 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003236:	23a0      	movs	r3, #160	; 0xa0
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	2201      	movs	r2, #1
 800323c:	2110      	movs	r1, #16
 800323e:	0018      	movs	r0, r3
 8003240:	f001 fd0f 	bl	8004c62 <HAL_GPIO_WritePin>
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	0002      	movs	r2, r0
 8003254:	1dfb      	adds	r3, r7, #7
 8003256:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	2200      	movs	r2, #0
 800325e:	2110      	movs	r1, #16
 8003260:	0018      	movs	r0, r3
 8003262:	f001 fcfe 	bl	8004c62 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	b25b      	sxtb	r3, r3
 800326e:	227e      	movs	r2, #126	; 0x7e
 8003270:	4013      	ands	r3, r2
 8003272:	b25b      	sxtb	r3, r3
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	4252      	negs	r2, r2
 8003278:	4313      	orrs	r3, r2
 800327a:	b25b      	sxtb	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff ffa2 	bl	80031c8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8003284:	250f      	movs	r5, #15
 8003286:	197c      	adds	r4, r7, r5
 8003288:	2000      	movs	r0, #0
 800328a:	f7ff ff9d 	bl	80031c8 <RC522_SPI_Transfer>
 800328e:	0003      	movs	r3, r0
 8003290:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003292:	23a0      	movs	r3, #160	; 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	2201      	movs	r2, #1
 8003298:	2110      	movs	r1, #16
 800329a:	0018      	movs	r0, r3
 800329c:	f001 fce1 	bl	8004c62 <HAL_GPIO_WritePin>

	return val;
 80032a0:	197b      	adds	r3, r7, r5
 80032a2:	781b      	ldrb	r3, [r3, #0]

}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b004      	add	sp, #16
 80032aa:	bdb0      	pop	{r4, r5, r7, pc}

080032ac <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	1dbb      	adds	r3, r7, #6
 80032ba:	1c0a      	adds	r2, r1, #0
 80032bc:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80032be:	250f      	movs	r5, #15
 80032c0:	197c      	adds	r4, r7, r5
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ffc0 	bl	800324c <Read_MFRC522>
 80032cc:	0003      	movs	r3, r0
 80032ce:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80032d0:	197a      	adds	r2, r7, r5
 80032d2:	1dbb      	adds	r3, r7, #6
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff ff88 	bl	80031f8 <Write_MFRC522>
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}

080032f0 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	0002      	movs	r2, r0
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	1c0a      	adds	r2, r1, #0
 8003300:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8003302:	250f      	movs	r5, #15
 8003304:	197c      	adds	r4, r7, r5
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff ff9e 	bl	800324c <Read_MFRC522>
 8003310:	0003      	movs	r3, r0
 8003312:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b25b      	sxtb	r3, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	b25b      	sxtb	r3, r3
 800331e:	197a      	adds	r2, r7, r5
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	b252      	sxtb	r2, r2
 8003324:	4013      	ands	r3, r2
 8003326:	b25b      	sxtb	r3, r3
 8003328:	b2da      	uxtb	r2, r3
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ff61 	bl	80031f8 <Write_MFRC522>
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bdb0      	pop	{r4, r5, r7, pc}

0800333e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8003342:	2014      	movs	r0, #20
 8003344:	f7ff ff82 	bl	800324c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8003348:	2103      	movs	r1, #3
 800334a:	2014      	movs	r0, #20
 800334c:	f7ff ffae 	bl	80032ac <SetBitMask>
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800335a:	210f      	movs	r1, #15
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff ff4b 	bl	80031f8 <Write_MFRC522>
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	2201      	movs	r2, #1
 8003372:	2110      	movs	r1, #16
 8003374:	0018      	movs	r0, r3
 8003376:	f001 fc74 	bl	8004c62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <MFRC522_Init+0x5c>)
 800337c:	2201      	movs	r2, #1
 800337e:	2101      	movs	r1, #1
 8003380:	0018      	movs	r0, r3
 8003382:	f001 fc6e 	bl	8004c62 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8003386:	f7ff ffe6 	bl	8003356 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800338a:	218d      	movs	r1, #141	; 0x8d
 800338c:	202a      	movs	r0, #42	; 0x2a
 800338e:	f7ff ff33 	bl	80031f8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8003392:	213e      	movs	r1, #62	; 0x3e
 8003394:	202b      	movs	r0, #43	; 0x2b
 8003396:	f7ff ff2f 	bl	80031f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800339a:	211e      	movs	r1, #30
 800339c:	202d      	movs	r0, #45	; 0x2d
 800339e:	f7ff ff2b 	bl	80031f8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80033a2:	2100      	movs	r1, #0
 80033a4:	202c      	movs	r0, #44	; 0x2c
 80033a6:	f7ff ff27 	bl	80031f8 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80033aa:	2140      	movs	r1, #64	; 0x40
 80033ac:	2015      	movs	r0, #21
 80033ae:	f7ff ff23 	bl	80031f8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80033b2:	213d      	movs	r1, #61	; 0x3d
 80033b4:	2011      	movs	r0, #17
 80033b6:	f7ff ff1f 	bl	80031f8 <Write_MFRC522>

	AntennaOn();
 80033ba:	f7ff ffc0 	bl	800333e <AntennaOn>
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	50000400 	.word	0x50000400

080033c8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	0011      	movs	r1, r2
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	240f      	movs	r4, #15
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	1c02      	adds	r2, r0, #0
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	230e      	movs	r3, #14
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	1c0a      	adds	r2, r1, #0
 80033e2:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 80033e4:	231f      	movs	r3, #31
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 80033ec:	211e      	movs	r1, #30
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 80033f4:	201d      	movs	r0, #29
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d008      	beq.n	8003416 <MFRC522_ToCard+0x4e>
 8003404:	2b0e      	cmp	r3, #14
 8003406:	d10f      	bne.n	8003428 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2212      	movs	r2, #18
 800340c:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 800340e:	183b      	adds	r3, r7, r0
 8003410:	2210      	movs	r2, #16
 8003412:	701a      	strb	r2, [r3, #0]
			break;
 8003414:	e009      	b.n	800342a <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8003416:	231e      	movs	r3, #30
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2277      	movs	r2, #119	; 0x77
 800341c:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 800341e:	231d      	movs	r3, #29
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2230      	movs	r2, #48	; 0x30
 8003424:	701a      	strb	r2, [r3, #0]
			break;
 8003426:	e000      	b.n	800342a <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8003428:	46c0      	nop			; (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800342a:	231e      	movs	r3, #30
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	4252      	negs	r2, r2
 8003434:	4313      	orrs	r3, r2
 8003436:	b2db      	uxtb	r3, r3
 8003438:	0019      	movs	r1, r3
 800343a:	2002      	movs	r0, #2
 800343c:	f7ff fedc 	bl	80031f8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	2004      	movs	r0, #4
 8003444:	f7ff ff54 	bl	80032f0 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	200a      	movs	r0, #10
 800344c:	f7ff ff2e 	bl	80032ac <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8003450:	2100      	movs	r1, #0
 8003452:	2001      	movs	r0, #1
 8003454:	f7ff fed0 	bl	80031f8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	e00a      	b.n	8003474 <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	18d3      	adds	r3, r2, r3
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0019      	movs	r1, r3
 8003468:	2009      	movs	r0, #9
 800346a:	f7ff fec5 	bl	80031f8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	230e      	movs	r3, #14
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	429a      	cmp	r2, r3
 800347e:	d3ee      	bcc.n	800345e <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8003480:	240f      	movs	r4, #15
 8003482:	193b      	adds	r3, r7, r4
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	0019      	movs	r1, r3
 8003488:	2001      	movs	r0, #1
 800348a:	f7ff feb5 	bl	80031f8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800348e:	193b      	adds	r3, r7, r4
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d103      	bne.n	800349e <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	200d      	movs	r0, #13
 800349a:	f7ff ff07 	bl	80032ac <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800349e:	23fa      	movs	r3, #250	; 0xfa
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80034a4:	251c      	movs	r5, #28
 80034a6:	197c      	adds	r4, r7, r5
 80034a8:	2004      	movs	r0, #4
 80034aa:	f7ff fecf 	bl	800324c <Read_MFRC522>
 80034ae:	0003      	movs	r3, r0
 80034b0:	7023      	strb	r3, [r4, #0]
        i--;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <MFRC522_ToCard+0x112>
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	4013      	ands	r3, r2
 80034c6:	d108      	bne.n	80034da <MFRC522_ToCard+0x112>
 80034c8:	197b      	adds	r3, r7, r5
 80034ca:	221d      	movs	r2, #29
 80034cc:	18ba      	adds	r2, r7, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0e4      	beq.n	80034a4 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	200d      	movs	r0, #13
 80034de:	f7ff ff07 	bl	80032f0 <ClearBitMask>

    if (i != 0)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d100      	bne.n	80034ea <MFRC522_ToCard+0x122>
 80034e8:	e070      	b.n	80035cc <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80034ea:	2006      	movs	r0, #6
 80034ec:	f7ff feae 	bl	800324c <Read_MFRC522>
 80034f0:	0003      	movs	r3, r0
 80034f2:	001a      	movs	r2, r3
 80034f4:	231b      	movs	r3, #27
 80034f6:	4013      	ands	r3, r2
 80034f8:	d164      	bne.n	80035c4 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 80034fa:	211f      	movs	r1, #31
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8003502:	231c      	movs	r3, #28
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	221e      	movs	r2, #30
 8003508:	18ba      	adds	r2, r7, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	4013      	ands	r3, r2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	001a      	movs	r2, r3
 8003514:	2301      	movs	r3, #1
 8003516:	4013      	ands	r3, r2
 8003518:	d002      	beq.n	8003520 <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d150      	bne.n	80035cc <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800352a:	251c      	movs	r5, #28
 800352c:	197c      	adds	r4, r7, r5
 800352e:	200a      	movs	r0, #10
 8003530:	f7ff fe8c 	bl	800324c <Read_MFRC522>
 8003534:	0003      	movs	r3, r0
 8003536:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8003538:	200c      	movs	r0, #12
 800353a:	f7ff fe87 	bl	800324c <Read_MFRC522>
 800353e:	0003      	movs	r3, r0
 8003540:	0019      	movs	r1, r3
 8003542:	2017      	movs	r0, #23
 8003544:	183b      	adds	r3, r7, r0
 8003546:	2207      	movs	r2, #7
 8003548:	400a      	ands	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 800354c:	0001      	movs	r1, r0
 800354e:	187b      	adds	r3, r7, r1
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 8003556:	197b      	adds	r3, r7, r5
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	00da      	lsls	r2, r3, #3
 800355e:	187b      	adds	r3, r7, r1
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	001a      	movs	r2, r3
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e006      	b.n	800357a <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 800356c:	231c      	movs	r3, #28
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	001a      	movs	r2, r3
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800357a:	221c      	movs	r2, #28
 800357c:	18bb      	adds	r3, r7, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 8003584:	18bb      	adds	r3, r7, r2
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 800358a:	221c      	movs	r2, #28
 800358c:	18bb      	adds	r3, r7, r2
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b10      	cmp	r3, #16
 8003592:	d902      	bls.n	800359a <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 8003594:	18bb      	adds	r3, r7, r2
 8003596:	2210      	movs	r2, #16
 8003598:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e00a      	b.n	80035b6 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	18d4      	adds	r4, r2, r3
 80035a6:	2009      	movs	r0, #9
 80035a8:	f7ff fe50 	bl	800324c <Read_MFRC522>
 80035ac:	0003      	movs	r3, r0
 80035ae:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	231c      	movs	r3, #28
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3ee      	bcc.n	80035a0 <MFRC522_ToCard+0x1d8>
 80035c2:	e003      	b.n	80035cc <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80035c4:	231f      	movs	r3, #31
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80035cc:	231f      	movs	r3, #31
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b008      	add	sp, #32
 80035d8:	bdb0      	pop	{r4, r5, r7, pc}

080035da <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80035da:	b5b0      	push	{r4, r5, r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af02      	add	r7, sp, #8
 80035e0:	0002      	movs	r2, r0
 80035e2:	6039      	str	r1, [r7, #0]
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80035e8:	2107      	movs	r1, #7
 80035ea:	200d      	movs	r0, #13
 80035ec:	f7ff fe04 	bl	80031f8 <Write_MFRC522>

	TagType[0] = reqMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1dfa      	adds	r2, r7, #7
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80035f8:	250f      	movs	r5, #15
 80035fa:	197c      	adds	r4, r7, r5
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	2308      	movs	r3, #8
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	0013      	movs	r3, r2
 8003608:	2201      	movs	r2, #1
 800360a:	200c      	movs	r0, #12
 800360c:	f7ff fedc 	bl	80033c8 <MFRC522_ToCard>
 8003610:	0003      	movs	r3, r0
 8003612:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8003614:	197b      	adds	r3, r7, r5
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <MFRC522_Request+0x48>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b10      	cmp	r3, #16
 8003620:	d003      	beq.n	800362a <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 8003622:	230f      	movs	r3, #15
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800362a:	230f      	movs	r3, #15
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bdb0      	pop	{r4, r5, r7, pc}

08003638 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8003640:	230d      	movs	r3, #13
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003648:	2100      	movs	r1, #0
 800364a:	200d      	movs	r0, #13
 800364c:	f7ff fdd4 	bl	80031f8 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2293      	movs	r2, #147	; 0x93
 8003654:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3301      	adds	r3, #1
 800365a:	2220      	movs	r2, #32
 800365c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800365e:	250f      	movs	r5, #15
 8003660:	197c      	adds	r4, r7, r5
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	2308      	movs	r3, #8
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	0013      	movs	r3, r2
 800366e:	2202      	movs	r2, #2
 8003670:	200c      	movs	r0, #12
 8003672:	f7ff fea9 	bl	80033c8 <MFRC522_ToCard>
 8003676:	0003      	movs	r3, r0
 8003678:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 800367a:	197b      	adds	r3, r7, r5
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d129      	bne.n	80036d6 <MFRC522_Anticoll+0x9e>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8003682:	230e      	movs	r3, #14
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e010      	b.n	80036ae <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 800368c:	200e      	movs	r0, #14
 800368e:	183b      	adds	r3, r7, r0
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	7819      	ldrb	r1, [r3, #0]
 8003698:	220d      	movs	r2, #13
 800369a:	18bb      	adds	r3, r7, r2
 800369c:	18ba      	adds	r2, r7, r2
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	404a      	eors	r2, r1
 80036a2:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	183b      	adds	r3, r7, r0
 80036aa:	3201      	adds	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	220e      	movs	r2, #14
 80036b0:	18bb      	adds	r3, r7, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d9e9      	bls.n	800368c <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80036b8:	18bb      	adds	r3, r7, r2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	18d3      	adds	r3, r2, r3
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	220d      	movs	r2, #13
 80036c4:	18ba      	adds	r2, r7, r2
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d00a      	beq.n	80036e2 <MFRC522_Anticoll+0xaa>
		{
			status = MI_ERR;
 80036cc:	230f      	movs	r3, #15
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e005      	b.n	80036e2 <MFRC522_Anticoll+0xaa>
		}
    }
    else
    {
    	memset(serNum, 0, 5);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2205      	movs	r2, #5
 80036da:	2100      	movs	r1, #0
 80036dc:	0018      	movs	r0, r3
 80036de:	f006 f821 	bl	8009724 <memset>
    }

    return status;
 80036e2:	230f      	movs	r3, #15
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	781b      	ldrb	r3, [r3, #0]
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bdb0      	pop	{r4, r5, r7, pc}

080036f0 <RFID_Init>:

extern speaker Speaker;
extern UART_HandleTypeDef huart1;
extern char Data;

void RFID_Init(rfid* sensor) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
    MFRC522_Init();
 80036f8:	f7ff fe36 	bl	8003368 <MFRC522_Init>
    memset(sensor->prevSerialNum, 0, 5);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2205      	movs	r2, #5
 8003700:	2100      	movs	r1, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f006 f80e 	bl	8009724 <memset>
    sensor->status = CARD_IDLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	715a      	strb	r2, [r3, #5]

    sensor->botEnabled = false;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	719a      	strb	r2, [r3, #6]
    sensor->initialSuccessfulCardTap = true;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	71da      	strb	r2, [r3, #7]
    sensor->initialFailedCardTap = true;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	721a      	strb	r2, [r3, #8]
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <RFID_ValidateCard>:

rfid_card_status RFID_ValidateCard(rfid* sensor)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	uint8_t serialNum[5];
	MFRC522_Request(PICC_REQIDL, serialNum);
 8003730:	2408      	movs	r4, #8
 8003732:	193b      	adds	r3, r7, r4
 8003734:	0019      	movs	r1, r3
 8003736:	2026      	movs	r0, #38	; 0x26
 8003738:	f7ff ff4f 	bl	80035da <MFRC522_Request>
	MFRC522_Anticoll(serialNum);
 800373c:	193b      	adds	r3, r7, r4
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff ff7a 	bl	8003638 <MFRC522_Anticoll>

	sensor->status = CARD_IDLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	715a      	strb	r2, [r3, #5]

	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 800374a:	0022      	movs	r2, r4
 800374c:	18bb      	adds	r3, r7, r2
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2baa      	cmp	r3, #170	; 0xaa
 8003752:	d10f      	bne.n	8003774 <RFID_ValidateCard+0x4c>
 8003754:	18bb      	adds	r3, r7, r2
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2bcd      	cmp	r3, #205	; 0xcd
 800375a:	d10b      	bne.n	8003774 <RFID_ValidateCard+0x4c>
 800375c:	18bb      	adds	r3, r7, r2
 800375e:	789b      	ldrb	r3, [r3, #2]
 8003760:	2b2f      	cmp	r3, #47	; 0x2f
 8003762:	d107      	bne.n	8003774 <RFID_ValidateCard+0x4c>
 8003764:	18bb      	adds	r3, r7, r2
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d103      	bne.n	8003774 <RFID_ValidateCard+0x4c>
 800376c:	18bb      	adds	r3, r7, r2
 800376e:	791b      	ldrb	r3, [r3, #4]
 8003770:	2b4b      	cmp	r3, #75	; 0x4b
 8003772:	d013      	beq.n	800379c <RFID_ValidateCard+0x74>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	781b      	ldrb	r3, [r3, #0]
	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 8003778:	2baa      	cmp	r3, #170	; 0xaa
 800377a:	d113      	bne.n	80037a4 <RFID_ValidateCard+0x7c>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	2bcd      	cmp	r3, #205	; 0xcd
 8003782:	d10f      	bne.n	80037a4 <RFID_ValidateCard+0x7c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	789b      	ldrb	r3, [r3, #2]
 8003788:	2b2f      	cmp	r3, #47	; 0x2f
 800378a:	d10b      	bne.n	80037a4 <RFID_ValidateCard+0x7c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78db      	ldrb	r3, [r3, #3]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d107      	bne.n	80037a4 <RFID_ValidateCard+0x7c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	791b      	ldrb	r3, [r3, #4]
 8003798:	2b4b      	cmp	r3, #75	; 0x4b
 800379a:	d103      	bne.n	80037a4 <RFID_ValidateCard+0x7c>
	{
		sensor->status = CARD_SUCCESS;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	715a      	strb	r2, [r3, #5]
 80037a2:	e039      	b.n	8003818 <RFID_ValidateCard+0xf0>

	}
	else if (!(serialNum[0] | (!(serialNum[1] == 32 || serialNum[1] == 0)) | serialNum[2] | serialNum[3] | serialNum[4]))
 80037a4:	2108      	movs	r1, #8
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	001a      	movs	r2, r3
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d005      	beq.n	80037c0 <RFID_ValidateCard+0x98>
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <RFID_ValidateCard+0x98>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <RFID_ValidateCard+0x9a>
 80037c0:	2300      	movs	r3, #0
 80037c2:	4313      	orrs	r3, r2
 80037c4:	2108      	movs	r1, #8
 80037c6:	187a      	adds	r2, r7, r1
 80037c8:	7892      	ldrb	r2, [r2, #2]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	187a      	adds	r2, r7, r1
 80037ce:	78d2      	ldrb	r2, [r2, #3]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	187a      	adds	r2, r7, r1
 80037d4:	7912      	ldrb	r2, [r2, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d11b      	bne.n	8003812 <RFID_ValidateCard+0xea>
	{
		if (!(sensor->prevSerialNum[0] | sensor->prevSerialNum[1] | sensor->prevSerialNum[2] | sensor->prevSerialNum[3] | sensor->prevSerialNum[4]))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	789b      	ldrb	r3, [r3, #2]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	78db      	ldrb	r3, [r3, #3]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <RFID_ValidateCard+0xe2>
			sensor->status = CARD_IDLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	715a      	strb	r2, [r3, #5]
 8003808:	e006      	b.n	8003818 <RFID_ValidateCard+0xf0>
		else
		{
			sensor->status = CARD_FAIL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	715a      	strb	r2, [r3, #5]
 8003810:	e002      	b.n	8003818 <RFID_ValidateCard+0xf0>
		}

	}
	else
	{
		sensor->status = CARD_FAIL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	715a      	strb	r2, [r3, #5]
	}


	for (uint8_t i = 0; i < 5; i++)
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e00e      	b.n	8003840 <RFID_ValidateCard+0x118>
	{
		sensor->prevSerialNum[i] = serialNum[i];
 8003822:	200f      	movs	r0, #15
 8003824:	183b      	adds	r3, r7, r0
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	183b      	adds	r3, r7, r0
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2108      	movs	r1, #8
 800382e:	1879      	adds	r1, r7, r1
 8003830:	5c89      	ldrb	r1, [r1, r2]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++)
 8003836:	183b      	adds	r3, r7, r0
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	183b      	adds	r3, r7, r0
 800383c:	3201      	adds	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	230f      	movs	r3, #15
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d9eb      	bls.n	8003822 <RFID_ValidateCard+0xfa>
	}

	return sensor->status;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	795b      	ldrb	r3, [r3, #5]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b005      	add	sp, #20
 8003854:	bd90      	pop	{r4, r7, pc}
	...

08003858 <RFID_SecurityLogic>:

void RFID_SecurityLogic(rfid* sensor)
{
 8003858:	b5b0      	push	{r4, r5, r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	rfid_card_status cardStatus = RFID_ValidateCard(sensor);
 8003860:	250f      	movs	r5, #15
 8003862:	197c      	adds	r4, r7, r5
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff ff5e 	bl	8003728 <RFID_ValidateCard>
 800386c:	0003      	movs	r3, r0
 800386e:	7023      	strb	r3, [r4, #0]

	switch (cardStatus) {
 8003870:	197b      	adds	r3, r7, r5
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d04d      	beq.n	8003914 <RFID_SecurityLogic+0xbc>
 8003878:	dc53      	bgt.n	8003922 <RFID_SecurityLogic+0xca>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <RFID_SecurityLogic+0x2c>
 800387e:	2b01      	cmp	r3, #1
 8003880:	d026      	beq.n	80038d0 <RFID_SecurityLogic+0x78>
	        break;

	    // Optional: Default case if no case matches
	    default:
	        // Code to execute if none of the above cases match
	        break;
 8003882:	e04e      	b.n	8003922 <RFID_SecurityLogic+0xca>
	    	if (sensor->initialSuccessfulCardTap)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	79db      	ldrb	r3, [r3, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d04c      	beq.n	8003926 <RFID_SecurityLogic+0xce>
	    		Speaker_SetAutoReload(&Speaker, 488);
 800388c:	23f4      	movs	r3, #244	; 0xf4
 800388e:	005a      	lsls	r2, r3, #1
 8003890:	4b29      	ldr	r3, [pc, #164]	; (8003938 <RFID_SecurityLogic+0xe0>)
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f9b5 	bl	8003c04 <Speaker_SetAutoReload>
	    		Speaker_Beep(&Speaker, 150, 0, 1);
 800389a:	4827      	ldr	r0, [pc, #156]	; (8003938 <RFID_SecurityLogic+0xe0>)
 800389c:	2301      	movs	r3, #1
 800389e:	2200      	movs	r2, #0
 80038a0:	2196      	movs	r1, #150	; 0x96
 80038a2:	f000 f8ef 	bl	8003a84 <Speaker_Beep>
	    		sensor->initialSuccessfulCardTap = false;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	71da      	strb	r2, [r3, #7]
	    		sensor->initialFailedCardTap = true;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	721a      	strb	r2, [r3, #8]
	    		sensor->botEnabled = !sensor->botEnabled;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	799b      	ldrb	r3, [r3, #6]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	4193      	sbcs	r3, r2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2201      	movs	r2, #1
 80038be:	4053      	eors	r3, r2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	1c1a      	adds	r2, r3, #0
 80038c4:	2301      	movs	r3, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	719a      	strb	r2, [r3, #6]
	        break;
 80038ce:	e02a      	b.n	8003926 <RFID_SecurityLogic+0xce>
	    	if (sensor->initialFailedCardTap)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7a1b      	ldrb	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d028      	beq.n	800392a <RFID_SecurityLogic+0xd2>
	    		HAL_Delay(200);
 80038d8:	20c8      	movs	r0, #200	; 0xc8
 80038da:	f000 fdb3 	bl	8004444 <HAL_Delay>
				if (RFID_ValidateCard(sensor) != CARD_FAIL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7ff ff21 	bl	8003728 <RFID_ValidateCard>
 80038e6:	0003      	movs	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d120      	bne.n	800392e <RFID_SecurityLogic+0xd6>
				Speaker_SetAutoReload(&Speaker, 488 * 4);
 80038ec:	23f4      	movs	r3, #244	; 0xf4
 80038ee:	00da      	lsls	r2, r3, #3
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <RFID_SecurityLogic+0xe0>)
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f985 	bl	8003c04 <Speaker_SetAutoReload>
				Speaker_Beep(&Speaker, 150, 50, 4);
 80038fa:	480f      	ldr	r0, [pc, #60]	; (8003938 <RFID_SecurityLogic+0xe0>)
 80038fc:	2304      	movs	r3, #4
 80038fe:	2232      	movs	r2, #50	; 0x32
 8003900:	2196      	movs	r1, #150	; 0x96
 8003902:	f000 f8bf 	bl	8003a84 <Speaker_Beep>
				sensor->initialSuccessfulCardTap = true;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	71da      	strb	r2, [r3, #7]
				sensor->initialFailedCardTap = false;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	721a      	strb	r2, [r3, #8]
	        break;
 8003912:	e00a      	b.n	800392a <RFID_SecurityLogic+0xd2>
	    	sensor->initialSuccessfulCardTap = true;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	71da      	strb	r2, [r3, #7]
	    	sensor->initialFailedCardTap = true;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	721a      	strb	r2, [r3, #8]
	        break;
 8003920:	e006      	b.n	8003930 <RFID_SecurityLogic+0xd8>
	        break;
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	e004      	b.n	8003930 <RFID_SecurityLogic+0xd8>
	        break;
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	e002      	b.n	8003930 <RFID_SecurityLogic+0xd8>
	        break;
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	e000      	b.n	8003930 <RFID_SecurityLogic+0xd8>
					break;
 800392e:	46c0      	nop			; (mov r8, r8)
	}

}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	20000478 	.word	0x20000478

0800393c <Speaker_Init>:

#define CLK_SPEED 32000000
#define DEFAULT_AUTORELOAD 488

void Speaker_Init(speaker* speaker, TIM_HandleTypeDef* timer)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	speaker->timer = timer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	601a      	str	r2, [r3, #0]
	speaker->hasFault = false;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	741a      	strb	r2, [r3, #16]
	speaker->beepLengthOn = 0;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	809a      	strh	r2, [r3, #4]
	speaker->beepLengthPeriod = 0;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	80da      	strh	r2, [r3, #6]
	speaker->wantedNumBeeps = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	721a      	strb	r2, [r3, #8]
	speaker->currentNumBeeps = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	725a      	strb	r2, [r3, #9]
	speaker->timerCounter = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	815a      	strh	r2, [r3, #10]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003970:	230f      	movs	r3, #15
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e00b      	b.n	8003992 <Speaker_Init+0x56>
	{
		speaker->featureFault[i] = false;
 800397a:	210f      	movs	r1, #15
 800397c:	187b      	adds	r3, r7, r1
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	18d3      	adds	r3, r2, r3
 8003984:	2200      	movs	r2, #0
 8003986:	731a      	strb	r2, [r3, #12]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003988:	187b      	adds	r3, r7, r1
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	187b      	adds	r3, r7, r1
 800398e:	3201      	adds	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	230f      	movs	r3, #15
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d9ee      	bls.n	800397a <Speaker_Init+0x3e>
	}


}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	000a      	movs	r2, r1
 80039b0:	1cfb      	adds	r3, r7, #3
 80039b2:	701a      	strb	r2, [r3, #0]

	speaker->featureFault[ID] = true;
 80039b4:	1cfb      	adds	r3, r7, #3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	18d3      	adds	r3, r2, r3
 80039bc:	2201      	movs	r2, #1
 80039be:	731a      	strb	r2, [r3, #12]
	if (speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2] || speaker->featureFault[3])
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7b1b      	ldrb	r3, [r3, #12]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10e      	bne.n	80039e8 <Speaker_Start+0x42>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7b5b      	ldrb	r3, [r3, #13]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <Speaker_Start+0x42>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7b9b      	ldrb	r3, [r3, #14]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <Speaker_Start+0x42>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7bdb      	ldrb	r3, [r3, #15]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00f      	beq.n	8003a08 <Speaker_Start+0x62>
	{
		speaker->hasFault = true;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	741a      	strb	r2, [r3, #16]
		Speaker_SetAutoReload(speaker, DEFAULT_AUTORELOAD);
 80039ee:	23f4      	movs	r3, #244	; 0xf4
 80039f0:	005a      	lsls	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0011      	movs	r1, r2
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f904 	bl	8003c04 <Speaker_SetAutoReload>
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2100      	movs	r1, #0
 8003a02:	0018      	movs	r0, r3
 8003a04:	f003 fbee 	bl	80071e4 <HAL_TIM_PWM_Start>
	}

}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	000a      	movs	r2, r1
 8003a1a:	1cfb      	adds	r3, r7, #3
 8003a1c:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 8003a1e:	1cfb      	adds	r3, r7, #3
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	731a      	strb	r2, [r3, #12]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2] || speaker->featureFault[3]))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7b1b      	ldrb	r3, [r3, #12]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2201      	movs	r2, #1
 8003a32:	4053      	eors	r3, r2
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d020      	beq.n	8003a7c <Speaker_Stop+0x6c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7b5b      	ldrb	r3, [r3, #13]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2201      	movs	r2, #1
 8003a42:	4053      	eors	r3, r2
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <Speaker_Stop+0x6c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7b9b      	ldrb	r3, [r3, #14]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2201      	movs	r2, #1
 8003a52:	4053      	eors	r3, r2
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d010      	beq.n	8003a7c <Speaker_Stop+0x6c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7bdb      	ldrb	r3, [r3, #15]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2201      	movs	r2, #1
 8003a62:	4053      	eors	r3, r2
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <Speaker_Stop+0x6c>
	{
		speaker->hasFault = false;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	741a      	strb	r2, [r3, #16]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	0018      	movs	r0, r3
 8003a78:	f003 fc40 	bl	80072fc <HAL_TIM_PWM_Stop>
	}
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <Speaker_Beep>:



bool Speaker_Beep(speaker* speaker, uint16_t length_on_ms, uint16_t length_off_ms, uint8_t numBeeps)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	000c      	movs	r4, r1
 8003a8e:	0010      	movs	r0, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	230a      	movs	r3, #10
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c22      	adds	r2, r4, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	1c02      	adds	r2, r0, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	1c0a      	adds	r2, r1, #0
 8003aa6:	701a      	strb	r2, [r3, #0]

	if (speaker->hasFault)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	7c1b      	ldrb	r3, [r3, #16]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <Speaker_Beep+0x32>
		return false;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e046      	b.n	8003b44 <Speaker_Beep+0xc0>


	speaker->timerCounter = 0;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	815a      	strh	r2, [r3, #10]
	speaker->currentNumBeeps = 0;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	725a      	strb	r2, [r3, #9]



	speaker->beepLengthOn = length_on_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	0013      	movs	r3, r2
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	189b      	adds	r3, r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	0019      	movs	r1, r3
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	f7fc fb2d 	bl	8000140 <__udivsi3>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	809a      	strh	r2, [r3, #4]
	speaker->beepLengthPeriod =speaker->beepLengthOn + length_off_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	889b      	ldrh	r3, [r3, #4]
 8003af2:	b29c      	uxth	r4, r3
 8003af4:	2308      	movs	r3, #8
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	0013      	movs	r3, r2
 8003afc:	015b      	lsls	r3, r3, #5
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	001a      	movs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	0019      	movs	r1, r3
 8003b12:	0010      	movs	r0, r2
 8003b14:	f7fc fb14 	bl	8000140 <__udivsi3>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	18e3      	adds	r3, r4, r3
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	80da      	strh	r2, [r3, #6]
	speaker->wantedNumBeeps = numBeeps;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1dfa      	adds	r2, r7, #7
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	721a      	strb	r2, [r3, #8]

	//speaker->beepLength = length_ms * CLK_SPEED / (speaker->timer->Instance->PSC);

	HAL_TIM_Base_Start_IT(speaker->timer);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f003 fa9d 	bl	8007070 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f003 fb51 	bl	80071e4 <HAL_TIM_PWM_Start>
	return true;
 8003b42:	2301      	movs	r3, #1
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b005      	add	sp, #20
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <Speaker_BeepInterrupt>:
	return ((HAL_TIM_Base_GetState(speaker->timer) == HAL_TIM_STATE_BUSY) ? true : false);
}
*/

void Speaker_BeepInterrupt(speaker* speaker)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7a5b      	ldrb	r3, [r3, #9]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7a1b      	ldrb	r3, [r3, #8]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d240      	bcs.n	8003be6 <Speaker_BeepInterrupt+0x9a>
    {

        if (speaker->timerCounter == speaker->beepLengthOn)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	895b      	ldrh	r3, [r3, #10]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	889b      	ldrh	r3, [r3, #4]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d110      	bne.n	8003b96 <Speaker_BeepInterrupt+0x4a>
        {
            HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f003 fbbe 	bl	80072fc <HAL_TIM_PWM_Stop>
            __HAL_TIM_ENABLE(speaker->timer);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2101      	movs	r1, #1
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e01f      	b.n	8003bd6 <Speaker_BeepInterrupt+0x8a>
        	//__NOP();
        }
        else if (speaker->timerCounter >= speaker->beepLengthPeriod)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	895b      	ldrh	r3, [r3, #10]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	88db      	ldrh	r3, [r3, #6]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d317      	bcc.n	8003bd6 <Speaker_BeepInterrupt+0x8a>
        {
        	speaker->currentNumBeeps++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7a5b      	ldrb	r3, [r3, #9]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	725a      	strb	r2, [r3, #9]
			speaker->timerCounter = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	815a      	strh	r2, [r3, #10]

            if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7a5b      	ldrb	r3, [r3, #9]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7a1b      	ldrb	r3, [r3, #8]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d205      	bcs.n	8003bd6 <Speaker_BeepInterrupt+0x8a>
            {
                HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2100      	movs	r1, #0
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f003 fb07 	bl	80071e4 <HAL_TIM_PWM_Start>

            	//__NOP();
            }

        }
        speaker->timerCounter++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	895b      	ldrh	r3, [r3, #10]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	815a      	strh	r2, [r3, #10]
    else
    {
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
        HAL_TIM_Base_Stop_IT(speaker->timer);
    }
}
 8003be4:	e00a      	b.n	8003bfc <Speaker_BeepInterrupt+0xb0>
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2100      	movs	r1, #0
 8003bec:	0018      	movs	r0, r3
 8003bee:	f003 fb85 	bl	80072fc <HAL_TIM_PWM_Stop>
        HAL_TIM_Base_Stop_IT(speaker->timer);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f003 fa86 	bl	8007108 <HAL_TIM_Base_Stop_IT>
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <Speaker_SetAutoReload>:

void Speaker_SetAutoReload(speaker* speaker, uint16_t value)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	000a      	movs	r2, r1
 8003c0e:	1cbb      	adds	r3, r7, #2
 8003c10:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(speaker->timer, value);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	1cba      	adds	r2, r7, #2
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1cba      	adds	r2, r7, #2
 8003c24:	8812      	ldrh	r2, [r2, #0]
 8003c26:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(speaker->timer, TIM_CHANNEL_1, value / 2);
 8003c28:	1cbb      	adds	r3, r7, #2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <HAL_MspInit+0x24>)
 8003c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_MspInit+0x24>)
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_MspInit+0x24>)
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_MspInit+0x24>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0549      	lsls	r1, r1, #21
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	240c      	movs	r4, #12
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	0018      	movs	r0, r3
 8003c76:	2314      	movs	r3, #20
 8003c78:	001a      	movs	r2, r3
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f005 fd52 	bl	8009724 <memset>
  if(hi2c->Instance==I2C1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_I2C_MspInit+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d15c      	bne.n	8003d44 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_I2C_MspInit+0xe8>)
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_I2C_MspInit+0xe8>)
 8003c90:	2102      	movs	r1, #2
 8003c92:	430a      	orrs	r2, r1
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_I2C_MspInit+0xe8>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ca2:	0021      	movs	r1, r4
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	22c0      	movs	r2, #192	; 0xc0
 8003ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2212      	movs	r2, #18
 8003cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_I2C_MspInit+0xec>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	0010      	movs	r0, r2
 8003cca:	f000 fe37 	bl	800493c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_I2C_MspInit+0xe8>)
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_I2C_MspInit+0xe8>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	0389      	lsls	r1, r1, #14
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_I2C_MspInit+0xf4>)
 8003ce0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	0052      	lsls	r2, r2, #1
 8003d00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	00d2      	lsls	r2, r2, #3
 8003d08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	0192      	lsls	r2, r2, #6
 8003d16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 fc94 	bl	8004648 <HAL_DMA_Init>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8003d24:	f7ff fa4a 	bl	80031bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_I2C_MspInit+0xf0>)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003d34:	2200      	movs	r2, #0
 8003d36:	2100      	movs	r1, #0
 8003d38:	2017      	movs	r0, #23
 8003d3a:	f000 fc53 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003d3e:	2017      	movs	r0, #23
 8003d40:	f000 fc65 	bl	800460e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b009      	add	sp, #36	; 0x24
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	40005400 	.word	0x40005400
 8003d50:	40021000 	.word	0x40021000
 8003d54:	50000400 	.word	0x50000400
 8003d58:	20000244 	.word	0x20000244
 8003d5c:	40020030 	.word	0x40020030

08003d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	240c      	movs	r4, #12
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	2314      	movs	r3, #20
 8003d70:	001a      	movs	r2, r3
 8003d72:	2100      	movs	r1, #0
 8003d74:	f005 fcd6 	bl	8009724 <memset>
  if(hspi->Instance==SPI1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_SPI_MspInit+0x80>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d129      	bne.n	8003dd6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_SPI_MspInit+0x84>)
 8003d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_SPI_MspInit+0x84>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0149      	lsls	r1, r1, #5
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_SPI_MspInit+0x84>)
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_SPI_MspInit+0x84>)
 8003d96:	2101      	movs	r1, #1
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_SPI_MspInit+0x84>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003da8:	0021      	movs	r1, r4
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	22e0      	movs	r2, #224	; 0xe0
 8003dae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2202      	movs	r2, #2
 8003db4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	187a      	adds	r2, r7, r1
 8003dca:	23a0      	movs	r3, #160	; 0xa0
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 fdb3 	bl	800493c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b009      	add	sp, #36	; 0x24
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40013000 	.word	0x40013000
 8003de4:	40021000 	.word	0x40021000

08003de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	2314      	movs	r3, #20
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	0018      	movs	r0, r3
 8003df6:	2314      	movs	r3, #20
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f005 fc92 	bl	8009724 <memset>
  if(htim_base->Instance==TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	05db      	lsls	r3, r3, #23
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10e      	bne.n	8003e2a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	430a      	orrs	r2, r1
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	200f      	movs	r0, #15
 8003e1e:	f000 fbe1 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 fbf3 	bl	800460e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003e28:	e06b      	b.n	8003f02 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM21)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <HAL_TIM_Base_MspInit+0x128>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d131      	bne.n	8003e98 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003e34:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e46:	2101      	movs	r1, #1
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8003e58:	2114      	movs	r1, #20
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2202      	movs	r2, #2
 8003e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003e78:	187a      	adds	r2, r7, r1
 8003e7a:	23a0      	movs	r3, #160	; 0xa0
 8003e7c:	05db      	lsls	r3, r3, #23
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fd5b 	bl	800493c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2014      	movs	r0, #20
 8003e8c:	f000 fbaa 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003e90:	2014      	movs	r0, #20
 8003e92:	f000 fbbc 	bl	800460e <HAL_NVIC_EnableIRQ>
}
 8003e96:	e034      	b.n	8003f02 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM22)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_TIM_Base_MspInit+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12f      	bne.n	8003f02 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_TIM_Base_MspInit+0x124>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003ec6:	2114      	movs	r1, #20
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2210      	movs	r2, #16
 8003ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	2200      	movs	r2, #0
 8003ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_TIM_Base_MspInit+0x130>)
 8003eea:	0019      	movs	r1, r3
 8003eec:	0010      	movs	r0, r2
 8003eee:	f000 fd25 	bl	800493c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	2016      	movs	r0, #22
 8003ef8:	f000 fb74 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003efc:	2016      	movs	r0, #22
 8003efe:	f000 fb86 	bl	800460e <HAL_NVIC_EnableIRQ>
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b00a      	add	sp, #40	; 0x28
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40010800 	.word	0x40010800
 8003f14:	40011400 	.word	0x40011400
 8003f18:	50000400 	.word	0x50000400

08003f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	2414      	movs	r4, #20
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	0018      	movs	r0, r3
 8003f2a:	2314      	movs	r3, #20
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f005 fbf8 	bl	8009724 <memset>
  if(htim->Instance==TIM2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d123      	bne.n	8003f88 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	2201      	movs	r2, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8003f58:	0021      	movs	r1, r4
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	2202      	movs	r2, #2
 8003f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	2202      	movs	r2, #2
 8003f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8003f78:	187a      	adds	r2, r7, r1
 8003f7a:	23a0      	movs	r3, #160	; 0xa0
 8003f7c:	05db      	lsls	r3, r3, #23
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fcdb 	bl	800493c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM21)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_TIM_MspPostInit+0x118>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d123      	bne.n	8003fda <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 8003faa:	2114      	movs	r1, #20
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2208      	movs	r2, #8
 8003fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fbe:	187b      	adds	r3, r7, r1
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003fca:	187a      	adds	r2, r7, r1
 8003fcc:	23a0      	movs	r3, #160	; 0xa0
 8003fce:	05db      	lsls	r3, r3, #23
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 fcb2 	bl	800493c <HAL_GPIO_Init>
}
 8003fd8:	e026      	b.n	8004028 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM22)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_TIM_MspPostInit+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d121      	bne.n	8004028 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003fea:	2102      	movs	r1, #2
 8003fec:	430a      	orrs	r2, r1
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_TIM_MspPostInit+0x114>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 8003ffc:	2114      	movs	r1, #20
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2220      	movs	r2, #32
 8004002:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2202      	movs	r2, #2
 8004008:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004010:	187b      	adds	r3, r7, r1
 8004012:	2201      	movs	r2, #1
 8004014:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8004016:	187b      	adds	r3, r7, r1
 8004018:	2204      	movs	r2, #4
 800401a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 800401c:	187b      	adds	r3, r7, r1
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_TIM_MspPostInit+0x120>)
 8004020:	0019      	movs	r1, r3
 8004022:	0010      	movs	r0, r2
 8004024:	f000 fc8a 	bl	800493c <HAL_GPIO_Init>
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b00b      	add	sp, #44	; 0x2c
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	40010800 	.word	0x40010800
 8004038:	40011400 	.word	0x40011400
 800403c:	50000400 	.word	0x50000400

08004040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	240c      	movs	r4, #12
 800404a:	193b      	adds	r3, r7, r4
 800404c:	0018      	movs	r0, r3
 800404e:	2314      	movs	r3, #20
 8004050:	001a      	movs	r2, r3
 8004052:	2100      	movs	r1, #0
 8004054:	f005 fb66 	bl	8009724 <memset>
  if(huart->Instance==USART1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_UART_MspInit+0x80>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d12a      	bne.n	80040b8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_UART_MspInit+0x84>)
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <HAL_UART_MspInit+0x84>)
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	01c9      	lsls	r1, r1, #7
 800406c:	430a      	orrs	r2, r1
 800406e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_UART_MspInit+0x84>)
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_UART_MspInit+0x84>)
 8004076:	2101      	movs	r1, #1
 8004078:	430a      	orrs	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_UART_MspInit+0x84>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004088:	193b      	adds	r3, r7, r4
 800408a:	22c0      	movs	r2, #192	; 0xc0
 800408c:	00d2      	lsls	r2, r2, #3
 800408e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	0021      	movs	r1, r4
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2202      	movs	r2, #2
 8004096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2203      	movs	r2, #3
 80040a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2204      	movs	r2, #4
 80040a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040aa:	187a      	adds	r2, r7, r1
 80040ac:	23a0      	movs	r3, #160	; 0xa0
 80040ae:	05db      	lsls	r3, r3, #23
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fc42 	bl	800493c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b009      	add	sp, #36	; 0x24
 80040be:	bd90      	pop	{r4, r7, pc}
 80040c0:	40013800 	.word	0x40013800
 80040c4:	40021000 	.word	0x40021000

080040c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040cc:	e7fe      	b.n	80040cc <NMI_Handler+0x4>

080040ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <HardFault_Handler+0x4>

080040d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ec:	f000 f98e 	bl	800440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <DMA1_Channel2_3_IRQHandler+0x14>)
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fb61 	bl	80047c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	20000244 	.word	0x20000244

08004110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <TIM2_IRQHandler+0x14>)
 8004116:	0018      	movs	r0, r3
 8004118:	f003 f976 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	200002e4 	.word	0x200002e4

08004128 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <TIM21_IRQHandler+0x14>)
 800412e:	0018      	movs	r0, r3
 8004130:	f003 f96a 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000324 	.word	0x20000324

08004140 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <TIM22_IRQHandler+0x14>)
 8004146:	0018      	movs	r0, r3
 8004148:	f003 f95e 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	20000364 	.word	0x20000364

08004158 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <I2C1_IRQHandler+0x2c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	23e0      	movs	r3, #224	; 0xe0
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4013      	ands	r3, r2
 8004168:	d004      	beq.n	8004174 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <I2C1_IRQHandler+0x2c>)
 800416c:	0018      	movs	r0, r3
 800416e:	f000 fe45 	bl	8004dfc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8004172:	e003      	b.n	800417c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <I2C1_IRQHandler+0x2c>)
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fe26 	bl	8004dc8 <HAL_I2C_EV_IRQHandler>
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	200001f0 	.word	0x200001f0

08004188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  return 1;
 800418c:	2301      	movs	r3, #1
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_kill>:

int _kill(int pid, int sig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800419e:	f005 fb1b 	bl	80097d8 <__errno>
 80041a2:	0003      	movs	r3, r0
 80041a4:	2216      	movs	r2, #22
 80041a6:	601a      	str	r2, [r3, #0]
  return -1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	425b      	negs	r3, r3
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_exit>:

void _exit (int status)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041bc:	2301      	movs	r3, #1
 80041be:	425a      	negs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7ff ffe5 	bl	8004194 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041ca:	e7fe      	b.n	80041ca <_exit+0x16>

080041cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041de:	e000      	b.n	80041e2 <_read+0x16>
 80041e0:	bf00      	nop
 80041e2:	0001      	movs	r1, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	60ba      	str	r2, [r7, #8]
 80041ea:	b2ca      	uxtb	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	dbf0      	blt.n	80041de <_read+0x12>
  }

  return len;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}

08004206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e009      	b.n	800422c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	60ba      	str	r2, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	0018      	movs	r0, r3
 8004222:	e000      	b.n	8004226 <_write+0x20>
 8004224:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	dbf1      	blt.n	8004218 <_write+0x12>
  }
  return len;
 8004234:	687b      	ldr	r3, [r7, #4]
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b006      	add	sp, #24
 800423c:	bd80      	pop	{r7, pc}

0800423e <_close>:

int _close(int file)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004246:	2301      	movs	r3, #1
 8004248:	425b      	negs	r3, r3
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}

08004252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	0192      	lsls	r2, r2, #6
 8004262:	605a      	str	r2, [r3, #4]
  return 0;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}

0800426e <_isatty>:

int _isatty(int file)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004276:	2301      	movs	r3, #1
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800428c:	2300      	movs	r3, #0
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <_sbrk+0x5c>)
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <_sbrk+0x60>)
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <_sbrk+0x64>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <_sbrk+0x64>)
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <_sbrk+0x68>)
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <_sbrk+0x64>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d207      	bcs.n	80042d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c8:	f005 fa86 	bl	80097d8 <__errno>
 80042cc:	0003      	movs	r3, r0
 80042ce:	220c      	movs	r2, #12
 80042d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	425b      	negs	r3, r3
 80042d6:	e009      	b.n	80042ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <_sbrk+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	18d2      	adds	r2, r2, r3
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <_sbrk+0x64>)
 80042e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b006      	add	sp, #24
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20002000 	.word	0x20002000
 80042f8:	00000400 	.word	0x00000400
 80042fc:	2000048c 	.word	0x2000048c
 8004300:	200005e0 	.word	0x200005e0

08004304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004312:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004314:	f7ff fff6 	bl	8004304 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004318:	480c      	ldr	r0, [pc, #48]	; (800434c <LoopForever+0x6>)
  ldr r1, =_edata
 800431a:	490d      	ldr	r1, [pc, #52]	; (8004350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <LoopForever+0xe>)
  movs r3, #0
 800431e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004320:	e002      	b.n	8004328 <LoopCopyDataInit>

08004322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004326:	3304      	adds	r3, #4

08004328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800432a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800432c:	d3f9      	bcc.n	8004322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004330:	4c0a      	ldr	r4, [pc, #40]	; (800435c <LoopForever+0x16>)
  movs r3, #0
 8004332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004334:	e001      	b.n	800433a <LoopFillZerobss>

08004336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004338:	3204      	adds	r2, #4

0800433a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800433a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800433c:	d3fb      	bcc.n	8004336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800433e:	f005 fa51 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004342:	f7fe fb8d 	bl	8002a60 <main>

08004346 <LoopForever>:

LoopForever:
    b LoopForever
 8004346:	e7fe      	b.n	8004346 <LoopForever>
   ldr   r0, =_estack
 8004348:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800434c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004350:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004354:	0800bbac 	.word	0x0800bbac
  ldr r2, =_sbss
 8004358:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800435c:	200005e0 	.word	0x200005e0

08004360 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004360:	e7fe      	b.n	8004360 <ADC1_COMP_IRQHandler>
	...

08004364 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800436a:	1dfb      	adds	r3, r7, #7
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_Init+0x3c>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_Init+0x3c>)
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800437c:	2003      	movs	r0, #3
 800437e:	f000 f811 	bl	80043a4 <HAL_InitTick>
 8004382:	1e03      	subs	r3, r0, #0
 8004384:	d003      	beq.n	800438e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004386:	1dfb      	adds	r3, r7, #7
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e001      	b.n	8004392 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800438e:	f7ff fc57 	bl	8003c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b002      	add	sp, #8
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40022000 	.word	0x40022000

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_InitTick+0x5c>)
 80043ae:	681c      	ldr	r4, [r3, #0]
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_InitTick+0x60>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	0019      	movs	r1, r3
 80043b6:	23fa      	movs	r3, #250	; 0xfa
 80043b8:	0098      	lsls	r0, r3, #2
 80043ba:	f7fb fec1 	bl	8000140 <__udivsi3>
 80043be:	0003      	movs	r3, r0
 80043c0:	0019      	movs	r1, r3
 80043c2:	0020      	movs	r0, r4
 80043c4:	f7fb febc 	bl	8000140 <__udivsi3>
 80043c8:	0003      	movs	r3, r0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 f92f 	bl	800462e <HAL_SYSTICK_Config>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e00f      	b.n	80043f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d80b      	bhi.n	80043f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	2301      	movs	r3, #1
 80043e2:	425b      	negs	r3, r3
 80043e4:	2200      	movs	r2, #0
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 f8fc 	bl	80045e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_InitTick+0x64>)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b003      	add	sp, #12
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	20000000 	.word	0x20000000
 8004404:	20000008 	.word	0x20000008
 8004408:	20000004 	.word	0x20000004

0800440c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_IncTick+0x1c>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	001a      	movs	r2, r3
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_IncTick+0x20>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	18d2      	adds	r2, r2, r3
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_IncTick+0x20>)
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20000008 	.word	0x20000008
 800442c:	20000490 	.word	0x20000490

08004430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  return uwTick;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <HAL_GetTick+0x10>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000490 	.word	0x20000490

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff fff0 	bl	8004430 <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	001a      	movs	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	189b      	adds	r3, r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	f7ff ffe0 	bl	8004430 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000008 	.word	0x20000008

0800448c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	0002      	movs	r2, r0
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b7f      	cmp	r3, #127	; 0x7f
 800449e:	d809      	bhi.n	80044b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	001a      	movs	r2, r3
 80044a6:	231f      	movs	r3, #31
 80044a8:	401a      	ands	r2, r3
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_EnableIRQ+0x30>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	4091      	lsls	r1, r2
 80044b0:	000a      	movs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
  }
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000e100 	.word	0xe000e100

080044c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	0002      	movs	r2, r0
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	1dfb      	adds	r3, r7, #7
 80044cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b7f      	cmp	r3, #127	; 0x7f
 80044d4:	d828      	bhi.n	8004528 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d6:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <__NVIC_SetPriority+0xd4>)
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	33c0      	adds	r3, #192	; 0xc0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	589b      	ldr	r3, [r3, r2]
 80044e6:	1dfa      	adds	r2, r7, #7
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	0011      	movs	r1, r2
 80044ec:	2203      	movs	r2, #3
 80044ee:	400a      	ands	r2, r1
 80044f0:	00d2      	lsls	r2, r2, #3
 80044f2:	21ff      	movs	r1, #255	; 0xff
 80044f4:	4091      	lsls	r1, r2
 80044f6:	000a      	movs	r2, r1
 80044f8:	43d2      	mvns	r2, r2
 80044fa:	401a      	ands	r2, r3
 80044fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	22ff      	movs	r2, #255	; 0xff
 8004504:	401a      	ands	r2, r3
 8004506:	1dfb      	adds	r3, r7, #7
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	0018      	movs	r0, r3
 800450c:	2303      	movs	r3, #3
 800450e:	4003      	ands	r3, r0
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004514:	481f      	ldr	r0, [pc, #124]	; (8004594 <__NVIC_SetPriority+0xd4>)
 8004516:	1dfb      	adds	r3, r7, #7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b25b      	sxtb	r3, r3
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	430a      	orrs	r2, r1
 8004520:	33c0      	adds	r3, #192	; 0xc0
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004526:	e031      	b.n	800458c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <__NVIC_SetPriority+0xd8>)
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0019      	movs	r1, r3
 8004530:	230f      	movs	r3, #15
 8004532:	400b      	ands	r3, r1
 8004534:	3b08      	subs	r3, #8
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	3306      	adds	r3, #6
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	3304      	adds	r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1dfa      	adds	r2, r7, #7
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	0011      	movs	r1, r2
 8004548:	2203      	movs	r2, #3
 800454a:	400a      	ands	r2, r1
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	21ff      	movs	r1, #255	; 0xff
 8004550:	4091      	lsls	r1, r2
 8004552:	000a      	movs	r2, r1
 8004554:	43d2      	mvns	r2, r2
 8004556:	401a      	ands	r2, r3
 8004558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	401a      	ands	r2, r3
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	0018      	movs	r0, r3
 8004568:	2303      	movs	r3, #3
 800456a:	4003      	ands	r3, r0
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004570:	4809      	ldr	r0, [pc, #36]	; (8004598 <__NVIC_SetPriority+0xd8>)
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	001c      	movs	r4, r3
 8004578:	230f      	movs	r3, #15
 800457a:	4023      	ands	r3, r4
 800457c:	3b08      	subs	r3, #8
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	430a      	orrs	r2, r1
 8004582:	3306      	adds	r3, #6
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	18c3      	adds	r3, r0, r3
 8004588:	3304      	adds	r3, #4
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b003      	add	sp, #12
 8004592:	bd90      	pop	{r4, r7, pc}
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	045b      	lsls	r3, r3, #17
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d301      	bcc.n	80045b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b0:	2301      	movs	r3, #1
 80045b2:	e010      	b.n	80045d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <SysTick_Config+0x44>)
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	3a01      	subs	r2, #1
 80045ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045bc:	2301      	movs	r3, #1
 80045be:	425b      	negs	r3, r3
 80045c0:	2103      	movs	r1, #3
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7ff ff7c 	bl	80044c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <SysTick_Config+0x44>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <SysTick_Config+0x44>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	e000e010 	.word	0xe000e010

080045e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	210f      	movs	r1, #15
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	1c02      	adds	r2, r0, #0
 80045f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff ff5d 	bl	80044c0 <__NVIC_SetPriority>
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b004      	add	sp, #16
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	0002      	movs	r2, r0
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff ff33 	bl	800448c <__NVIC_EnableIRQ>
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff ffaf 	bl	800459c <SysTick_Config>
 800463e:	0003      	movs	r3, r0
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e061      	b.n	800471e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a32      	ldr	r2, [pc, #200]	; (8004728 <HAL_DMA_Init+0xe0>)
 8004660:	4694      	mov	ip, r2
 8004662:	4463      	add	r3, ip
 8004664:	2114      	movs	r1, #20
 8004666:	0018      	movs	r0, r3
 8004668:	f7fb fd6a 	bl	8000140 <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2d      	ldr	r2, [pc, #180]	; (800472c <HAL_DMA_Init+0xe4>)
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2225      	movs	r2, #37	; 0x25
 800467e:	2102      	movs	r1, #2
 8004680:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a28      	ldr	r2, [pc, #160]	; (8004730 <HAL_DMA_Init+0xe8>)
 800468e:	4013      	ands	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800469a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_DMA_Init+0xec>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	211c      	movs	r1, #28
 80046de:	400b      	ands	r3, r1
 80046e0:	210f      	movs	r1, #15
 80046e2:	4099      	lsls	r1, r3
 80046e4:	000b      	movs	r3, r1
 80046e6:	43d9      	mvns	r1, r3
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_DMA_Init+0xec>)
 80046ea:	400a      	ands	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_DMA_Init+0xec>)
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	201c      	movs	r0, #28
 80046fc:	4003      	ands	r3, r0
 80046fe:	409a      	lsls	r2, r3
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_DMA_Init+0xec>)
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2225      	movs	r2, #37	; 0x25
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	bffdfff8 	.word	0xbffdfff8
 800472c:	40020000 	.word	0x40020000
 8004730:	ffff800f 	.word	0xffff800f
 8004734:	400200a8 	.word	0x400200a8

08004738 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004740:	210f      	movs	r1, #15
 8004742:	187b      	adds	r3, r7, r1
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2225      	movs	r2, #37	; 0x25
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d006      	beq.n	8004762 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2204      	movs	r2, #4
 8004758:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800475a:	187b      	adds	r3, r7, r1
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e02a      	b.n	80047b8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	210e      	movs	r1, #14
 800476e:	438a      	bics	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	221c      	movs	r2, #28
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2101      	movs	r1, #1
 8004790:	4091      	lsls	r1, r2
 8004792:	000a      	movs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2225      	movs	r2, #37	; 0x25
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	0010      	movs	r0, r2
 80047b6:	4798      	blx	r3
    }
  }
  return status;
 80047b8:	230f      	movs	r3, #15
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	781b      	ldrb	r3, [r3, #0]
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	221c      	movs	r2, #28
 80047e4:	4013      	ands	r3, r2
 80047e6:	2204      	movs	r2, #4
 80047e8:	409a      	lsls	r2, r3
 80047ea:	0013      	movs	r3, r2
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	d026      	beq.n	8004840 <HAL_DMA_IRQHandler+0x7a>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2204      	movs	r2, #4
 80047f6:	4013      	ands	r3, r2
 80047f8:	d022      	beq.n	8004840 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2220      	movs	r2, #32
 8004802:	4013      	ands	r3, r2
 8004804:	d107      	bne.n	8004816 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2104      	movs	r1, #4
 8004812:	438a      	bics	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	221c      	movs	r2, #28
 800481c:	401a      	ands	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2104      	movs	r1, #4
 8004824:	4091      	lsls	r1, r2
 8004826:	000a      	movs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	2b00      	cmp	r3, #0
 8004830:	d100      	bne.n	8004834 <HAL_DMA_IRQHandler+0x6e>
 8004832:	e071      	b.n	8004918 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	0010      	movs	r0, r2
 800483c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800483e:	e06b      	b.n	8004918 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	221c      	movs	r2, #28
 8004846:	4013      	ands	r3, r2
 8004848:	2202      	movs	r2, #2
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4013      	ands	r3, r2
 8004852:	d02d      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xea>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2202      	movs	r2, #2
 8004858:	4013      	ands	r3, r2
 800485a:	d029      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2220      	movs	r2, #32
 8004864:	4013      	ands	r3, r2
 8004866:	d10b      	bne.n	8004880 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	210a      	movs	r1, #10
 8004874:	438a      	bics	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2225      	movs	r2, #37	; 0x25
 800487c:	2101      	movs	r1, #1
 800487e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	221c      	movs	r2, #28
 8004886:	401a      	ands	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2102      	movs	r1, #2
 800488e:	4091      	lsls	r1, r2
 8004890:	000a      	movs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	; 0x24
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d039      	beq.n	8004918 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	0010      	movs	r0, r2
 80048ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048ae:	e033      	b.n	8004918 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	221c      	movs	r2, #28
 80048b6:	4013      	ands	r3, r2
 80048b8:	2208      	movs	r2, #8
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	d02a      	beq.n	800491a <HAL_DMA_IRQHandler+0x154>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2208      	movs	r2, #8
 80048c8:	4013      	ands	r3, r2
 80048ca:	d026      	beq.n	800491a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	210e      	movs	r1, #14
 80048d8:	438a      	bics	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	221c      	movs	r2, #28
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2101      	movs	r1, #1
 80048ea:	4091      	lsls	r1, r2
 80048ec:	000a      	movs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2225      	movs	r2, #37	; 0x25
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2224      	movs	r2, #36	; 0x24
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	0010      	movs	r0, r2
 8004916:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46c0      	nop			; (mov r8, r8)
}
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2225      	movs	r2, #37	; 0x25
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b2db      	uxtb	r3, r3
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004952:	e14f      	b.n	8004bf4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4091      	lsls	r1, r2
 800495e:	000a      	movs	r2, r1
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d100      	bne.n	800496c <HAL_GPIO_Init+0x30>
 800496a:	e140      	b.n	8004bee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	4013      	ands	r3, r2
 8004974:	2b01      	cmp	r3, #1
 8004976:	d005      	beq.n	8004984 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2203      	movs	r2, #3
 800497e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004980:	2b02      	cmp	r3, #2
 8004982:	d130      	bne.n	80049e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2203      	movs	r2, #3
 8004990:	409a      	lsls	r2, r3
 8004992:	0013      	movs	r3, r2
 8004994:	43da      	mvns	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	0013      	movs	r3, r2
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ba:	2201      	movs	r2, #1
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	409a      	lsls	r2, r3
 80049c0:	0013      	movs	r3, r2
 80049c2:	43da      	mvns	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	2201      	movs	r2, #1
 80049d2:	401a      	ands	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	409a      	lsls	r2, r3
 80049d8:	0013      	movs	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d017      	beq.n	8004a22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	409a      	lsls	r2, r3
 8004a00:	0013      	movs	r3, r2
 8004a02:	43da      	mvns	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	0013      	movs	r3, r2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d123      	bne.n	8004a76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	58d3      	ldr	r3, [r2, r3]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2207      	movs	r2, #7
 8004a40:	4013      	ands	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	220f      	movs	r2, #15
 8004a46:	409a      	lsls	r2, r3
 8004a48:	0013      	movs	r3, r2
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2107      	movs	r1, #7
 8004a5a:	400b      	ands	r3, r1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	0013      	movs	r3, r2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	409a      	lsls	r2, r3
 8004a84:	0013      	movs	r3, r2
 8004a86:	43da      	mvns	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2203      	movs	r2, #3
 8004a94:	401a      	ands	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <HAL_GPIO_Init+0x17c>
 8004ab6:	e09a      	b.n	8004bee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b54      	ldr	r3, [pc, #336]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac4:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_GPIO_Init+0x2d4>)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	3302      	adds	r3, #2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	589b      	ldr	r3, [r3, r2]
 8004ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	220f      	movs	r2, #15
 8004adc:	409a      	lsls	r2, r3
 8004ade:	0013      	movs	r3, r2
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	23a0      	movs	r3, #160	; 0xa0
 8004aec:	05db      	lsls	r3, r3, #23
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d019      	beq.n	8004b26 <HAL_GPIO_Init+0x1ea>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a47      	ldr	r2, [pc, #284]	; (8004c14 <HAL_GPIO_Init+0x2d8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_GPIO_Init+0x1e6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a46      	ldr	r2, [pc, #280]	; (8004c18 <HAL_GPIO_Init+0x2dc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00d      	beq.n	8004b1e <HAL_GPIO_Init+0x1e2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a45      	ldr	r2, [pc, #276]	; (8004c1c <HAL_GPIO_Init+0x2e0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <HAL_GPIO_Init+0x1de>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a44      	ldr	r2, [pc, #272]	; (8004c20 <HAL_GPIO_Init+0x2e4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <HAL_GPIO_Init+0x1da>
 8004b12:	2305      	movs	r3, #5
 8004b14:	e008      	b.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b16:	2306      	movs	r3, #6
 8004b18:	e006      	b.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e004      	b.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e002      	b.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b26:	2300      	movs	r3, #0
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	2103      	movs	r1, #3
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	4093      	lsls	r3, r2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b38:	4935      	ldr	r1, [pc, #212]	; (8004c10 <HAL_GPIO_Init+0x2d4>)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	3302      	adds	r3, #2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	035b      	lsls	r3, r3, #13
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b6a:	4b2e      	ldr	r3, [pc, #184]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43da      	mvns	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	039b      	lsls	r3, r3, #14
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b94:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004b9a:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	029b      	lsls	r3, r3, #10
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004bbe:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	025b      	lsls	r3, r3, #9
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_GPIO_Init+0x2e8>)
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	40da      	lsrs	r2, r3
 8004bfc:	1e13      	subs	r3, r2, #0
 8004bfe:	d000      	beq.n	8004c02 <HAL_GPIO_Init+0x2c6>
 8004c00:	e6a8      	b.n	8004954 <HAL_GPIO_Init+0x18>
  }
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b006      	add	sp, #24
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40010000 	.word	0x40010000
 8004c14:	50000400 	.word	0x50000400
 8004c18:	50000800 	.word	0x50000800
 8004c1c:	50000c00 	.word	0x50000c00
 8004c20:	50001c00 	.word	0x50001c00
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	000a      	movs	r2, r1
 8004c32:	1cbb      	adds	r3, r7, #2
 8004c34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	1cba      	adds	r2, r7, #2
 8004c3c:	8812      	ldrh	r2, [r2, #0]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c42:	230f      	movs	r3, #15
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e003      	b.n	8004c54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c4c:	230f      	movs	r3, #15
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c54:	230f      	movs	r3, #15
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	0008      	movs	r0, r1
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	1cbb      	adds	r3, r7, #2
 8004c70:	1c02      	adds	r2, r0, #0
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	1c7b      	adds	r3, r7, #1
 8004c76:	1c0a      	adds	r2, r1, #0
 8004c78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c7a:	1c7b      	adds	r3, r7, #1
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004c8a:	e003      	b.n	8004c94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004c8c:	1cbb      	adds	r3, r7, #2
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e082      	b.n	8004db4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2241      	movs	r2, #65	; 0x41
 8004cb2:	5c9b      	ldrb	r3, [r3, r2]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fe ffcf 	bl	8003c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2241      	movs	r2, #65	; 0x41
 8004cce:	2124      	movs	r1, #36	; 0x24
 8004cd0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	438a      	bics	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4934      	ldr	r1, [pc, #208]	; (8004dbc <HAL_I2C_Init+0x120>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4931      	ldr	r1, [pc, #196]	; (8004dc0 <HAL_I2C_Init+0x124>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d108      	bne.n	8004d1a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	0209      	lsls	r1, r1, #8
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	e007      	b.n	8004d2a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2184      	movs	r1, #132	; 0x84
 8004d24:	0209      	lsls	r1, r1, #8
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d104      	bne.n	8004d3c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2280      	movs	r2, #128	; 0x80
 8004d38:	0112      	lsls	r2, r2, #4
 8004d3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	491f      	ldr	r1, [pc, #124]	; (8004dc4 <HAL_I2C_Init+0x128>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	491a      	ldr	r1, [pc, #104]	; (8004dc0 <HAL_I2C_Init+0x124>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69d9      	ldr	r1, [r3, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2241      	movs	r2, #65	; 0x41
 8004da0:	2120      	movs	r1, #32
 8004da2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2242      	movs	r2, #66	; 0x42
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	f0ffffff 	.word	0xf0ffffff
 8004dc0:	ffff7fff 	.word	0xffff7fff
 8004dc4:	02008000 	.word	0x02008000

08004dc8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
  }
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b004      	add	sp, #16
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e24:	d00a      	beq.n	8004e3c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	0052      	lsls	r2, r2, #1
 8004e3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4013      	ands	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e4c:	d00a      	beq.n	8004e64 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	2208      	movs	r2, #8
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	00d2      	lsls	r2, r2, #3
 8004e62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e74:	d00a      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	220b      	movs	r2, #11
 8004e96:	4013      	ands	r3, r2
 8004e98:	d005      	beq.n	8004ea6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0011      	movs	r1, r2
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 fbbd 	bl	8005620 <I2C_ITError>
  }
}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b006      	add	sp, #24
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b002      	add	sp, #8
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	0008      	movs	r0, r1
 8004ed8:	0011      	movs	r1, r2
 8004eda:	1cfb      	adds	r3, r7, #3
 8004edc:	1c02      	adds	r2, r0, #0
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	003b      	movs	r3, r7
 8004ee2:	1c0a      	adds	r2, r1, #0
 8004ee4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b002      	add	sp, #8
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <I2C_Slave_ISR_IT+0x24>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0e6      	b.n	8005112 <I2C_Slave_ISR_IT+0x1f2>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2240      	movs	r2, #64	; 0x40
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4013      	ands	r3, r2
 8004f52:	d009      	beq.n	8004f68 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f5a:	d005      	beq.n	8004f68 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 f9e4 	bl	8005330 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d052      	beq.n	8005016 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2210      	movs	r2, #16
 8004f74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f76:	d04e      	beq.n	8005016 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12d      	bne.n	8004fde <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2241      	movs	r2, #65	; 0x41
 8004f86:	5c9b      	ldrb	r3, [r3, r2]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b28      	cmp	r3, #40	; 0x28
 8004f8c:	d10b      	bne.n	8004fa6 <I2C_Slave_ISR_IT+0x86>
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	049b      	lsls	r3, r3, #18
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d106      	bne.n	8004fa6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fae6 	bl	8005570 <I2C_ITListenCplt>
 8004fa4:	e036      	b.n	8005014 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2241      	movs	r2, #65	; 0x41
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b29      	cmp	r3, #41	; 0x29
 8004fb0:	d110      	bne.n	8004fd4 <I2C_Slave_ISR_IT+0xb4>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4a59      	ldr	r2, [pc, #356]	; (800511c <I2C_Slave_ISR_IT+0x1fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00c      	beq.n	8004fd4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fc56 	bl	8005876 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 f94b 	bl	8005268 <I2C_ITSlaveSeqCplt>
 8004fd2:	e01f      	b.n	8005014 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004fdc:	e091      	b.n	8005102 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	2204      	movs	r2, #4
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <I2C_Slave_ISR_IT+0xe4>
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	045b      	lsls	r3, r3, #17
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d000      	beq.n	8005004 <I2C_Slave_ISR_IT+0xe4>
 8005002:	e07e      	b.n	8005102 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	0011      	movs	r1, r2
 800500c:	0018      	movs	r0, r3
 800500e:	f000 fb07 	bl	8005620 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005012:	e076      	b.n	8005102 <I2C_Slave_ISR_IT+0x1e2>
 8005014:	e075      	b.n	8005102 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2204      	movs	r2, #4
 800501a:	4013      	ands	r3, r2
 800501c:	d02f      	beq.n	800507e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2204      	movs	r2, #4
 8005022:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005024:	d02b      	beq.n	800507e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d018      	beq.n	8005062 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d14c      	bne.n	8005106 <I2C_Slave_ISR_IT+0x1e6>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4a2b      	ldr	r2, [pc, #172]	; (800511c <I2C_Slave_ISR_IT+0x1fc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d048      	beq.n	8005106 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	0018      	movs	r0, r3
 8005078:	f000 f8f6 	bl	8005268 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800507c:	e043      	b.n	8005106 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2208      	movs	r2, #8
 8005082:	4013      	ands	r3, r2
 8005084:	d00a      	beq.n	800509c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2208      	movs	r2, #8
 800508a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800508c:	d006      	beq.n	800509c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	0011      	movs	r1, r2
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f843 	bl	8005120 <I2C_ITAddrCplt>
 800509a:	e035      	b.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2202      	movs	r2, #2
 80050a0:	4013      	ands	r3, r2
 80050a2:	d031      	beq.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050aa:	d02d      	beq.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80050e6:	e00f      	b.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	045b      	lsls	r3, r3, #17
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d002      	beq.n	80050f8 <I2C_Slave_ISR_IT+0x1d8>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 f8b4 	bl	8005268 <I2C_ITSlaveSeqCplt>
 8005100:	e002      	b.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	e000      	b.n	8005108 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8005106:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	2100      	movs	r1, #0
 800510e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b006      	add	sp, #24
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	ffff0000 	.word	0xffff0000

08005120 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2241      	movs	r2, #65	; 0x41
 800512e:	5c9b      	ldrb	r3, [r3, r2]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	001a      	movs	r2, r3
 8005134:	2328      	movs	r3, #40	; 0x28
 8005136:	4013      	ands	r3, r2
 8005138:	2b28      	cmp	r3, #40	; 0x28
 800513a:	d000      	beq.n	800513e <I2C_ITAddrCplt+0x1e>
 800513c:	e088      	b.n	8005250 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	b2da      	uxtb	r2, r3
 8005148:	250f      	movs	r5, #15
 800514a:	197b      	adds	r3, r7, r5
 800514c:	2101      	movs	r1, #1
 800514e:	400a      	ands	r2, r1
 8005150:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	b29a      	uxth	r2, r3
 800515c:	200c      	movs	r0, #12
 800515e:	183b      	adds	r3, r7, r0
 8005160:	21fe      	movs	r1, #254	; 0xfe
 8005162:	400a      	ands	r2, r1
 8005164:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	b29a      	uxth	r2, r3
 800516e:	240a      	movs	r4, #10
 8005170:	193b      	adds	r3, r7, r4
 8005172:	0592      	lsls	r2, r2, #22
 8005174:	0d92      	lsrs	r2, r2, #22
 8005176:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	b29a      	uxth	r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	21fe      	movs	r1, #254	; 0xfe
 8005186:	400a      	ands	r2, r1
 8005188:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d148      	bne.n	8005224 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005192:	0021      	movs	r1, r4
 8005194:	187b      	adds	r3, r7, r1
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	09db      	lsrs	r3, r3, #7
 800519a:	b29a      	uxth	r2, r3
 800519c:	183b      	adds	r3, r7, r0
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4053      	eors	r3, r2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	001a      	movs	r2, r3
 80051a6:	2306      	movs	r3, #6
 80051a8:	4013      	ands	r3, r2
 80051aa:	d120      	bne.n	80051ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	187a      	adds	r2, r7, r1
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d14c      	bne.n	8005260 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2208      	movs	r2, #8
 80051d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2240      	movs	r2, #64	; 0x40
 80051d8:	2100      	movs	r1, #0
 80051da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051dc:	183b      	adds	r3, r7, r0
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	197b      	adds	r3, r7, r5
 80051e2:	7819      	ldrb	r1, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7ff fe71 	bl	8004ece <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051ec:	e038      	b.n	8005260 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80051ee:	240c      	movs	r4, #12
 80051f0:	193b      	adds	r3, r7, r4
 80051f2:	2208      	movs	r2, #8
 80051f4:	18ba      	adds	r2, r7, r2
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0011      	movs	r1, r2
 8005202:	0018      	movs	r0, r3
 8005204:	f000 fb78 	bl	80058f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	2100      	movs	r1, #0
 800520e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005210:	193b      	adds	r3, r7, r4
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	230f      	movs	r3, #15
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	7819      	ldrb	r1, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	0018      	movs	r0, r3
 800521e:	f7ff fe56 	bl	8004ece <HAL_I2C_AddrCallback>
}
 8005222:	e01d      	b.n	8005260 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0011      	movs	r1, r2
 800522c:	0018      	movs	r0, r3
 800522e:	f000 fb63 	bl	80058f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800523a:	230c      	movs	r3, #12
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	230f      	movs	r3, #15
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	7819      	ldrb	r1, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	0018      	movs	r0, r3
 800524a:	f7ff fe40 	bl	8004ece <HAL_I2C_AddrCallback>
}
 800524e:	e007      	b.n	8005260 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	; 0x40
 800525c:	2100      	movs	r1, #0
 800525e:	5499      	strb	r1, [r3, r2]
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bdb0      	pop	{r4, r5, r7, pc}

08005268 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2242      	movs	r2, #66	; 0x42
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	01db      	lsls	r3, r3, #7
 8005286:	4013      	ands	r3, r2
 8005288:	d008      	beq.n	800529c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4924      	ldr	r1, [pc, #144]	; (8005328 <I2C_ITSlaveSeqCplt+0xc0>)
 8005296:	400a      	ands	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00c      	b.n	80052b6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	4013      	ands	r3, r2
 80052a4:	d007      	beq.n	80052b6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	491e      	ldr	r1, [pc, #120]	; (800532c <I2C_ITSlaveSeqCplt+0xc4>)
 80052b2:	400a      	ands	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2241      	movs	r2, #65	; 0x41
 80052ba:	5c9b      	ldrb	r3, [r3, r2]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b29      	cmp	r3, #41	; 0x29
 80052c0:	d114      	bne.n	80052ec <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2241      	movs	r2, #65	; 0x41
 80052c6:	2128      	movs	r1, #40	; 0x28
 80052c8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2221      	movs	r2, #33	; 0x21
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2101      	movs	r1, #1
 80052d4:	0018      	movs	r0, r3
 80052d6:	f000 fb0f 	bl	80058f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2240      	movs	r2, #64	; 0x40
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7ff fde2 	bl	8004eae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052ea:	e019      	b.n	8005320 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2241      	movs	r2, #65	; 0x41
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b2a      	cmp	r3, #42	; 0x2a
 80052f6:	d113      	bne.n	8005320 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2241      	movs	r2, #65	; 0x41
 80052fc:	2128      	movs	r1, #40	; 0x28
 80052fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2222      	movs	r2, #34	; 0x22
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2102      	movs	r1, #2
 800530a:	0018      	movs	r0, r3
 800530c:	f000 faf4 	bl	80058f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2240      	movs	r2, #64	; 0x40
 8005314:	2100      	movs	r1, #0
 8005316:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f7ff fdcf 	bl	8004ebe <HAL_I2C_SlaveRxCpltCallback>
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b004      	add	sp, #16
 8005326:	bd80      	pop	{r7, pc}
 8005328:	ffffbfff 	.word	0xffffbfff
 800532c:	ffff7fff 	.word	0xffff7fff

08005330 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005346:	200f      	movs	r0, #15
 8005348:	183b      	adds	r3, r7, r0
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	2141      	movs	r1, #65	; 0x41
 800534e:	5c52      	ldrb	r2, [r2, r1]
 8005350:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2220      	movs	r2, #32
 8005358:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800535a:	183b      	adds	r3, r7, r0
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b21      	cmp	r3, #33	; 0x21
 8005360:	d003      	beq.n	800536a <I2C_ITSlaveCplt+0x3a>
 8005362:	183b      	adds	r3, r7, r0
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b29      	cmp	r3, #41	; 0x29
 8005368:	d109      	bne.n	800537e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800536a:	4a7b      	ldr	r2, [pc, #492]	; (8005558 <I2C_ITSlaveCplt+0x228>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	0011      	movs	r1, r2
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fac1 	bl	80058f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2221      	movs	r2, #33	; 0x21
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
 800537c:	e011      	b.n	80053a2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800537e:	220f      	movs	r2, #15
 8005380:	18bb      	adds	r3, r7, r2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b22      	cmp	r3, #34	; 0x22
 8005386:	d003      	beq.n	8005390 <I2C_ITSlaveCplt+0x60>
 8005388:	18bb      	adds	r3, r7, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b2a      	cmp	r3, #42	; 0x2a
 800538e:	d108      	bne.n	80053a2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005390:	4a72      	ldr	r2, [pc, #456]	; (800555c <I2C_ITSlaveCplt+0x22c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0011      	movs	r1, r2
 8005396:	0018      	movs	r0, r3
 8005398:	f000 faae 	bl	80058f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2222      	movs	r2, #34	; 0x22
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	0209      	lsls	r1, r1, #8
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4968      	ldr	r1, [pc, #416]	; (8005560 <I2C_ITSlaveCplt+0x230>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 fa55 	bl	8005876 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	01db      	lsls	r3, r3, #7
 80053d2:	4013      	ands	r3, r2
 80053d4:	d013      	beq.n	80053fe <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4960      	ldr	r1, [pc, #384]	; (8005564 <I2C_ITSlaveCplt+0x234>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01f      	beq.n	800542e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053fc:	e017      	b.n	800542e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	4013      	ands	r3, r2
 8005406:	d012      	beq.n	800542e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4955      	ldr	r1, [pc, #340]	; (8005568 <I2C_ITSlaveCplt+0x238>)
 8005414:	400a      	ands	r2, r1
 8005416:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2204      	movs	r2, #4
 8005432:	4013      	ands	r3, r2
 8005434:	d020      	beq.n	8005478 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2204      	movs	r2, #4
 800543a:	4393      	bics	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	2204      	movs	r2, #4
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2242      	movs	r2, #66	; 0x42
 8005492:	2100      	movs	r1, #0
 8005494:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0011      	movs	r1, r2
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 f8b7 	bl	8005620 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2241      	movs	r2, #65	; 0x41
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b28      	cmp	r3, #40	; 0x28
 80054bc:	d147      	bne.n	800554e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f853 	bl	8005570 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054ca:	e040      	b.n	800554e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <I2C_ITSlaveCplt+0x23c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d016      	beq.n	8005504 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff fec5 	bl	8005268 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <I2C_ITSlaveCplt+0x23c>)
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2241      	movs	r2, #65	; 0x41
 80054e8:	2120      	movs	r1, #32
 80054ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff fcf6 	bl	8004eee <HAL_I2C_ListenCpltCallback>
}
 8005502:	e024      	b.n	800554e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2241      	movs	r2, #65	; 0x41
 8005508:	5c9b      	ldrb	r3, [r3, r2]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b22      	cmp	r3, #34	; 0x22
 800550e:	d10f      	bne.n	8005530 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2241      	movs	r2, #65	; 0x41
 8005514:	2120      	movs	r1, #32
 8005516:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2240      	movs	r2, #64	; 0x40
 8005522:	2100      	movs	r1, #0
 8005524:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fcc8 	bl	8004ebe <HAL_I2C_SlaveRxCpltCallback>
}
 800552e:	e00e      	b.n	800554e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2241      	movs	r2, #65	; 0x41
 8005534:	2120      	movs	r1, #32
 8005536:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2240      	movs	r2, #64	; 0x40
 8005542:	2100      	movs	r1, #0
 8005544:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff fcb0 	bl	8004eae <HAL_I2C_SlaveTxCpltCallback>
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b006      	add	sp, #24
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	00008001 	.word	0x00008001
 800555c:	00008002 	.word	0x00008002
 8005560:	fe00e800 	.word	0xfe00e800
 8005564:	ffffbfff 	.word	0xffffbfff
 8005568:	ffff7fff 	.word	0xffff7fff
 800556c:	ffff0000 	.word	0xffff0000

08005570 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a26      	ldr	r2, [pc, #152]	; (8005618 <I2C_ITListenCplt+0xa8>)
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2241      	movs	r2, #65	; 0x41
 800558a:	2120      	movs	r1, #32
 800558c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2242      	movs	r2, #66	; 0x42
 8005592:	2100      	movs	r1, #0
 8005594:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2204      	movs	r2, #4
 80055a0:	4013      	ands	r3, r2
 80055a2:	d022      	beq.n	80055ea <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d012      	beq.n	80055ea <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	2204      	movs	r2, #4
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <I2C_ITListenCplt+0xac>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0011      	movs	r1, r2
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 f981 	bl	80058f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2210      	movs	r2, #16
 80055fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	2100      	movs	r1, #0
 8005604:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f7ff fc70 	bl	8004eee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b002      	add	sp, #8
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	ffff0000 	.word	0xffff0000
 800561c:	00008003 	.word	0x00008003

08005620 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800562a:	200f      	movs	r0, #15
 800562c:	183b      	adds	r3, r7, r0
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	2141      	movs	r1, #65	; 0x41
 8005632:	5c52      	ldrb	r2, [r2, r1]
 8005634:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2242      	movs	r2, #66	; 0x42
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a72      	ldr	r2, [pc, #456]	; (800580c <I2C_ITError+0x1ec>)
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005656:	183b      	adds	r3, r7, r0
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b28      	cmp	r3, #40	; 0x28
 800565c:	d007      	beq.n	800566e <I2C_ITError+0x4e>
 800565e:	183b      	adds	r3, r7, r0
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b29      	cmp	r3, #41	; 0x29
 8005664:	d003      	beq.n	800566e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005666:	183b      	adds	r3, r7, r0
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b2a      	cmp	r3, #42	; 0x2a
 800566c:	d10c      	bne.n	8005688 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2103      	movs	r1, #3
 8005672:	0018      	movs	r0, r3
 8005674:	f000 f940 	bl	80058f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2241      	movs	r2, #65	; 0x41
 800567c:	2128      	movs	r1, #40	; 0x28
 800567e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a63      	ldr	r2, [pc, #396]	; (8005810 <I2C_ITError+0x1f0>)
 8005684:	635a      	str	r2, [r3, #52]	; 0x34
 8005686:	e032      	b.n	80056ee <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005688:	4a62      	ldr	r2, [pc, #392]	; (8005814 <I2C_ITError+0x1f4>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0011      	movs	r1, r2
 800568e:	0018      	movs	r0, r3
 8005690:	f000 f932 	bl	80058f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 f8ed 	bl	8005876 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	5c9b      	ldrb	r3, [r3, r2]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b60      	cmp	r3, #96	; 0x60
 80056a6:	d01f      	beq.n	80056e8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2241      	movs	r2, #65	; 0x41
 80056ac:	2120      	movs	r1, #32
 80056ae:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2220      	movs	r2, #32
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d114      	bne.n	80056e8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2210      	movs	r2, #16
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d109      	bne.n	80056e0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2210      	movs	r2, #16
 80056d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	2204      	movs	r2, #4
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2220      	movs	r2, #32
 80056e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d03b      	beq.n	8005774 <I2C_ITError+0x154>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b11      	cmp	r3, #17
 8005700:	d002      	beq.n	8005708 <I2C_ITError+0xe8>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b21      	cmp	r3, #33	; 0x21
 8005706:	d135      	bne.n	8005774 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	401a      	ands	r2, r3
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	01db      	lsls	r3, r3, #7
 8005718:	429a      	cmp	r2, r3
 800571a:	d107      	bne.n	800572c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	493c      	ldr	r1, [pc, #240]	; (8005818 <I2C_ITError+0x1f8>)
 8005728:	400a      	ands	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff f8f6 	bl	8004922 <HAL_DMA_GetState>
 8005736:	0003      	movs	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d016      	beq.n	800576a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	4a36      	ldr	r2, [pc, #216]	; (800581c <I2C_ITError+0x1fc>)
 8005742:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	2100      	movs	r1, #0
 800574a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	0018      	movs	r0, r3
 8005752:	f7fe fff1 	bl	8004738 <HAL_DMA_Abort_IT>
 8005756:	1e03      	subs	r3, r0, #0
 8005758:	d051      	beq.n	80057fe <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	0018      	movs	r0, r3
 8005766:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005768:	e049      	b.n	80057fe <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f859 	bl	8005824 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005772:	e044      	b.n	80057fe <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d03b      	beq.n	80057f4 <I2C_ITError+0x1d4>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b12      	cmp	r3, #18
 8005780:	d002      	beq.n	8005788 <I2C_ITError+0x168>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b22      	cmp	r3, #34	; 0x22
 8005786:	d135      	bne.n	80057f4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	401a      	ands	r2, r3
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	491e      	ldr	r1, [pc, #120]	; (8005820 <I2C_ITError+0x200>)
 80057a8:	400a      	ands	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff f8b6 	bl	8004922 <HAL_DMA_GetState>
 80057b6:	0003      	movs	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d016      	beq.n	80057ea <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	4a16      	ldr	r2, [pc, #88]	; (800581c <I2C_ITError+0x1fc>)
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	2100      	movs	r1, #0
 80057ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fe ffb1 	bl	8004738 <HAL_DMA_Abort_IT>
 80057d6:	1e03      	subs	r3, r0, #0
 80057d8:	d013      	beq.n	8005802 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	0018      	movs	r0, r3
 80057e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057e8:	e00b      	b.n	8005802 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 f819 	bl	8005824 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f2:	e006      	b.n	8005802 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 f814 	bl	8005824 <I2C_TreatErrorCallback>
  }
}
 80057fc:	e002      	b.n	8005804 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	e000      	b.n	8005804 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005802:	46c0      	nop			; (mov r8, r8)
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b004      	add	sp, #16
 800580a:	bd80      	pop	{r7, pc}
 800580c:	ffff0000 	.word	0xffff0000
 8005810:	08004f21 	.word	0x08004f21
 8005814:	00008003 	.word	0x00008003
 8005818:	ffffbfff 	.word	0xffffbfff
 800581c:	080058bb 	.word	0x080058bb
 8005820:	ffff7fff 	.word	0xffff7fff

08005824 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2241      	movs	r2, #65	; 0x41
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d10f      	bne.n	8005858 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2241      	movs	r2, #65	; 0x41
 800583c:	2120      	movs	r1, #32
 800583e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	2100      	movs	r1, #0
 800584c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff fb5c 	bl	8004f0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005856:	e00a      	b.n	800586e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2240      	movs	r2, #64	; 0x40
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f7ff fb48 	bl	8004efe <HAL_I2C_ErrorCallback>
}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	46bd      	mov	sp, r7
 8005872:	b002      	add	sp, #8
 8005874:	bd80      	pop	{r7, pc}

08005876 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2202      	movs	r2, #2
 8005886:	4013      	ands	r3, r2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d103      	bne.n	8005894 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2201      	movs	r2, #1
 800589c:	4013      	ands	r3, r2
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d007      	beq.n	80058b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2101      	movs	r1, #1
 80058ae:	430a      	orrs	r2, r1
 80058b0:	619a      	str	r2, [r3, #24]
  }
}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}

080058ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	2200      	movs	r2, #0
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	2200      	movs	r2, #0
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff ff9a 	bl	8005824 <I2C_TreatErrorCallback>
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b004      	add	sp, #16
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	000a      	movs	r2, r1
 8005902:	1cbb      	adds	r3, r7, #2
 8005904:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800590a:	1cbb      	adds	r3, r7, #2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	d010      	beq.n	8005936 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2242      	movs	r2, #66	; 0x42
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2241      	movs	r2, #65	; 0x41
 8005920:	5c9b      	ldrb	r3, [r3, r2]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	001a      	movs	r2, r3
 8005926:	2328      	movs	r3, #40	; 0x28
 8005928:	4013      	ands	r3, r2
 800592a:	2b28      	cmp	r3, #40	; 0x28
 800592c:	d003      	beq.n	8005936 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	22b0      	movs	r2, #176	; 0xb0
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005936:	1cbb      	adds	r3, r7, #2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	2202      	movs	r2, #2
 800593c:	4013      	ands	r3, r2
 800593e:	d010      	beq.n	8005962 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2244      	movs	r2, #68	; 0x44
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2241      	movs	r2, #65	; 0x41
 800594c:	5c9b      	ldrb	r3, [r3, r2]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	001a      	movs	r2, r3
 8005952:	2328      	movs	r3, #40	; 0x28
 8005954:	4013      	ands	r3, r2
 8005956:	2b28      	cmp	r3, #40	; 0x28
 8005958:	d003      	beq.n	8005962 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22b0      	movs	r2, #176	; 0xb0
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005962:	1cbb      	adds	r3, r7, #2
 8005964:	2200      	movs	r2, #0
 8005966:	5e9b      	ldrsh	r3, [r3, r2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	da03      	bge.n	8005974 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	22b8      	movs	r2, #184	; 0xb8
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005974:	1cbb      	adds	r3, r7, #2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b10      	cmp	r3, #16
 800597a:	d103      	bne.n	8005984 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2290      	movs	r2, #144	; 0x90
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005984:	1cbb      	adds	r3, r7, #2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	2b20      	cmp	r3, #32
 800598a:	d103      	bne.n	8005994 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005994:	1cbb      	adds	r3, r7, #2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d103      	bne.n	80059a4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2240      	movs	r2, #64	; 0x40
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	43d9      	mvns	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	400a      	ands	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2241      	movs	r2, #65	; 0x41
 80059ce:	5c9b      	ldrb	r3, [r3, r2]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d138      	bne.n	8005a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2240      	movs	r2, #64	; 0x40
 80059da:	5c9b      	ldrb	r3, [r3, r2]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e032      	b.n	8005a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2240      	movs	r2, #64	; 0x40
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2241      	movs	r2, #65	; 0x41
 80059f0:	2124      	movs	r1, #36	; 0x24
 80059f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2101      	movs	r1, #1
 8005a00:	438a      	bics	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4911      	ldr	r1, [pc, #68]	; (8005a54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2101      	movs	r1, #1
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2241      	movs	r2, #65	; 0x41
 8005a38:	2120      	movs	r1, #32
 8005a3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e000      	b.n	8005a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
  }
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b002      	add	sp, #8
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	ffffefff 	.word	0xffffefff

08005a58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2241      	movs	r2, #65	; 0x41
 8005a66:	5c9b      	ldrb	r3, [r3, r2]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d139      	bne.n	8005ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2240      	movs	r2, #64	; 0x40
 8005a72:	5c9b      	ldrb	r3, [r3, r2]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e033      	b.n	8005ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	2101      	movs	r1, #1
 8005a82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2241      	movs	r2, #65	; 0x41
 8005a88:	2124      	movs	r1, #36	; 0x24
 8005a8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2101      	movs	r1, #1
 8005a98:	438a      	bics	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a11      	ldr	r2, [pc, #68]	; (8005aec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2241      	movs	r2, #65	; 0x41
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2240      	movs	r2, #64	; 0x40
 8005ada:	2100      	movs	r1, #0
 8005adc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
  }
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffff0ff 	.word	0xfffff0ff

08005af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af0:	b5b0      	push	{r4, r5, r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f000 fb5a 	bl	80061b8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b04:	4bce      	ldr	r3, [pc, #824]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	220c      	movs	r2, #12
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0e:	4bcc      	ldr	r3, [pc, #816]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	025b      	lsls	r3, r3, #9
 8005b16:	4013      	ands	r3, r2
 8005b18:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4013      	ands	r3, r2
 8005b22:	d100      	bne.n	8005b26 <HAL_RCC_OscConfig+0x36>
 8005b24:	e07c      	b.n	8005c20 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d007      	beq.n	8005b3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d111      	bne.n	8005b56 <HAL_RCC_OscConfig+0x66>
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	025b      	lsls	r3, r3, #9
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d10c      	bne.n	8005b56 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	4bc0      	ldr	r3, [pc, #768]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	4013      	ands	r3, r2
 8005b46:	d100      	bne.n	8005b4a <HAL_RCC_OscConfig+0x5a>
 8005b48:	e069      	b.n	8005c1e <HAL_RCC_OscConfig+0x12e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d165      	bne.n	8005c1e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e330      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	025b      	lsls	r3, r3, #9
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d107      	bne.n	8005b72 <HAL_RCC_OscConfig+0x82>
 8005b62:	4bb7      	ldr	r3, [pc, #732]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4bb6      	ldr	r3, [pc, #728]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	0249      	lsls	r1, r1, #9
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e027      	b.n	8005bc2 <HAL_RCC_OscConfig+0xd2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	23a0      	movs	r3, #160	; 0xa0
 8005b78:	02db      	lsls	r3, r3, #11
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10e      	bne.n	8005b9c <HAL_RCC_OscConfig+0xac>
 8005b7e:	4bb0      	ldr	r3, [pc, #704]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4baf      	ldr	r3, [pc, #700]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	02c9      	lsls	r1, r1, #11
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	4bac      	ldr	r3, [pc, #688]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4bab      	ldr	r3, [pc, #684]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	0249      	lsls	r1, r1, #9
 8005b96:	430a      	orrs	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e012      	b.n	8005bc2 <HAL_RCC_OscConfig+0xd2>
 8005b9c:	4ba8      	ldr	r3, [pc, #672]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4ba7      	ldr	r3, [pc, #668]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005ba2:	49a8      	ldr	r1, [pc, #672]	; (8005e44 <HAL_RCC_OscConfig+0x354>)
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	4ba5      	ldr	r3, [pc, #660]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	025b      	lsls	r3, r3, #9
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4ba2      	ldr	r3, [pc, #648]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4ba1      	ldr	r3, [pc, #644]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005bbc:	49a2      	ldr	r1, [pc, #648]	; (8005e48 <HAL_RCC_OscConfig+0x358>)
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bca:	f7fe fc31 	bl	8004430 <HAL_GetTick>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fe fc2c 	bl	8004430 <HAL_GetTick>
 8005bd8:	0002      	movs	r2, r0
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e2e8      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be6:	4b96      	ldr	r3, [pc, #600]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0xe4>
 8005bf2:	e015      	b.n	8005c20 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fe fc1c 	bl	8004430 <HAL_GetTick>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bfe:	f7fe fc17 	bl	8004430 <HAL_GetTick>
 8005c02:	0002      	movs	r2, r0
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b64      	cmp	r3, #100	; 0x64
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e2d3      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c10:	4b8b      	ldr	r3, [pc, #556]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	029b      	lsls	r3, r3, #10
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCC_OscConfig+0x10e>
 8005c1c:	e000      	b.n	8005c20 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2202      	movs	r2, #2
 8005c26:	4013      	ands	r3, r2
 8005c28:	d100      	bne.n	8005c2c <HAL_RCC_OscConfig+0x13c>
 8005c2a:	e08b      	b.n	8005d44 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	d13e      	bne.n	8005cbc <HAL_RCC_OscConfig+0x1cc>
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d13b      	bne.n	8005cbc <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c44:	4b7e      	ldr	r3, [pc, #504]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_RCC_OscConfig+0x168>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e2af      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c58:	4b79      	ldr	r3, [pc, #484]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4a7b      	ldr	r2, [pc, #492]	; (8005e4c <HAL_RCC_OscConfig+0x35c>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	0019      	movs	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	021a      	lsls	r2, r3, #8
 8005c68:	4b75      	ldr	r3, [pc, #468]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c6e:	4b74      	ldr	r3, [pc, #464]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2209      	movs	r2, #9
 8005c74:	4393      	bics	r3, r2
 8005c76:	0019      	movs	r1, r3
 8005c78:	4b71      	ldr	r3, [pc, #452]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c80:	f000 fc6c 	bl	800655c <HAL_RCC_GetSysClockFreq>
 8005c84:	0001      	movs	r1, r0
 8005c86:	4b6e      	ldr	r3, [pc, #440]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	220f      	movs	r2, #15
 8005c8e:	4013      	ands	r3, r2
 8005c90:	4a6f      	ldr	r2, [pc, #444]	; (8005e50 <HAL_RCC_OscConfig+0x360>)
 8005c92:	5cd3      	ldrb	r3, [r2, r3]
 8005c94:	000a      	movs	r2, r1
 8005c96:	40da      	lsrs	r2, r3
 8005c98:	4b6e      	ldr	r3, [pc, #440]	; (8005e54 <HAL_RCC_OscConfig+0x364>)
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005c9c:	4b6e      	ldr	r3, [pc, #440]	; (8005e58 <HAL_RCC_OscConfig+0x368>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2513      	movs	r5, #19
 8005ca2:	197c      	adds	r4, r7, r5
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7fe fb7d 	bl	80043a4 <HAL_InitTick>
 8005caa:	0003      	movs	r3, r0
 8005cac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005cae:	197b      	adds	r3, r7, r5
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d046      	beq.n	8005d44 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005cb6:	197b      	adds	r3, r7, r5
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	e27d      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d027      	beq.n	8005d12 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cc2:	4b5f      	ldr	r3, [pc, #380]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2209      	movs	r2, #9
 8005cc8:	4393      	bics	r3, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fe fbac 	bl	8004430 <HAL_GetTick>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cde:	f7fe fba7 	bl	8004430 <HAL_GetTick>
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e263      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf0:	4b53      	ldr	r3, [pc, #332]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d0f1      	beq.n	8005cde <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfa:	4b51      	ldr	r3, [pc, #324]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4a53      	ldr	r2, [pc, #332]	; (8005e4c <HAL_RCC_OscConfig+0x35c>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
 8005d10:	e018      	b.n	8005d44 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d12:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d18:	2101      	movs	r1, #1
 8005d1a:	438a      	bics	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1e:	f7fe fb87 	bl	8004430 <HAL_GetTick>
 8005d22:	0003      	movs	r3, r0
 8005d24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d28:	f7fe fb82 	bl	8004430 <HAL_GetTick>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e23e      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d3a:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	4013      	ands	r3, r2
 8005d42:	d1f1      	bne.n	8005d28 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d100      	bne.n	8005d50 <HAL_RCC_OscConfig+0x260>
 8005d4e:	e0a1      	b.n	8005e94 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d140      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d56:	4b3a      	ldr	r3, [pc, #232]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d005      	beq.n	8005d6e <HAL_RCC_OscConfig+0x27e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e224      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d6e:	4b34      	ldr	r3, [pc, #208]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	; (8005e5c <HAL_RCC_OscConfig+0x36c>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	0019      	movs	r1, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1a      	ldr	r2, [r3, #32]
 8005d7c:	4b30      	ldr	r3, [pc, #192]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	0a19      	lsrs	r1, r3, #8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	061a      	lsls	r2, r3, #24
 8005d90:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	0b5b      	lsrs	r3, r3, #13
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	2280      	movs	r2, #128	; 0x80
 8005da0:	0212      	lsls	r2, r2, #8
 8005da2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005da4:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	210f      	movs	r1, #15
 8005dac:	400b      	ands	r3, r1
 8005dae:	4928      	ldr	r1, [pc, #160]	; (8005e50 <HAL_RCC_OscConfig+0x360>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005db4:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x364>)
 8005db6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <HAL_RCC_OscConfig+0x368>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2513      	movs	r5, #19
 8005dbe:	197c      	adds	r4, r7, r5
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f7fe faef 	bl	80043a4 <HAL_InitTick>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005dca:	197b      	adds	r3, r7, r5
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d060      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8005dd2:	197b      	adds	r3, r7, r5
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	e1ef      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d03f      	beq.n	8005e60 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005de0:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0049      	lsls	r1, r1, #1
 8005dea:	430a      	orrs	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fe fb1f 	bl	8004430 <HAL_GetTick>
 8005df2:	0003      	movs	r3, r0
 8005df4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005df8:	f7fe fb1a 	bl	8004430 <HAL_GetTick>
 8005dfc:	0002      	movs	r2, r0
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1d6      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4013      	ands	r3, r2
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <HAL_RCC_OscConfig+0x36c>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2a:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	0a19      	lsrs	r1, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	061a      	lsls	r2, r3, #24
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <HAL_RCC_OscConfig+0x350>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e029      	b.n	8005e94 <HAL_RCC_OscConfig+0x3a4>
 8005e40:	40021000 	.word	0x40021000
 8005e44:	fffeffff 	.word	0xfffeffff
 8005e48:	fffbffff 	.word	0xfffbffff
 8005e4c:	ffffe0ff 	.word	0xffffe0ff
 8005e50:	0800b7c0 	.word	0x0800b7c0
 8005e54:	20000000 	.word	0x20000000
 8005e58:	20000004 	.word	0x20000004
 8005e5c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e60:	4bbe      	ldr	r3, [pc, #760]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4bbd      	ldr	r3, [pc, #756]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005e66:	49be      	ldr	r1, [pc, #760]	; (8006160 <HAL_RCC_OscConfig+0x670>)
 8005e68:	400a      	ands	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fe fae0 	bl	8004430 <HAL_GetTick>
 8005e70:	0003      	movs	r3, r0
 8005e72:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e76:	f7fe fadb 	bl	8004430 <HAL_GetTick>
 8005e7a:	0002      	movs	r2, r0
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e197      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005e88:	4bb4      	ldr	r3, [pc, #720]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4013      	ands	r3, r2
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d036      	beq.n	8005f0c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d019      	beq.n	8005eda <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea6:	4bad      	ldr	r3, [pc, #692]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eaa:	4bac      	ldr	r3, [pc, #688]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005eac:	2101      	movs	r1, #1
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb2:	f7fe fabd 	bl	8004430 <HAL_GetTick>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebc:	f7fe fab8 	bl	8004430 <HAL_GetTick>
 8005ec0:	0002      	movs	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e174      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ece:	4ba3      	ldr	r3, [pc, #652]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d0f1      	beq.n	8005ebc <HAL_RCC_OscConfig+0x3cc>
 8005ed8:	e018      	b.n	8005f0c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eda:	4ba0      	ldr	r3, [pc, #640]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ede:	4b9f      	ldr	r3, [pc, #636]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	438a      	bics	r2, r1
 8005ee4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee6:	f7fe faa3 	bl	8004430 <HAL_GetTick>
 8005eea:	0003      	movs	r3, r0
 8005eec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fe fa9e 	bl	8004430 <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e15a      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f02:	4b96      	ldr	r3, [pc, #600]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	2202      	movs	r2, #2
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d1f1      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2204      	movs	r2, #4
 8005f12:	4013      	ands	r3, r2
 8005f14:	d100      	bne.n	8005f18 <HAL_RCC_OscConfig+0x428>
 8005f16:	e0ae      	b.n	8006076 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f18:	2027      	movs	r0, #39	; 0x27
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f20:	4b8e      	ldr	r3, [pc, #568]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	055b      	lsls	r3, r3, #21
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d109      	bne.n	8005f40 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2c:	4b8b      	ldr	r3, [pc, #556]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f30:	4b8a      	ldr	r3, [pc, #552]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	0549      	lsls	r1, r1, #21
 8005f36:	430a      	orrs	r2, r1
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f3a:	183b      	adds	r3, r7, r0
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b88      	ldr	r3, [pc, #544]	; (8006164 <HAL_RCC_OscConfig+0x674>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d11a      	bne.n	8005f82 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4c:	4b85      	ldr	r3, [pc, #532]	; (8006164 <HAL_RCC_OscConfig+0x674>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b84      	ldr	r3, [pc, #528]	; (8006164 <HAL_RCC_OscConfig+0x674>)
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0049      	lsls	r1, r1, #1
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f5a:	f7fe fa69 	bl	8004430 <HAL_GetTick>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f64:	f7fe fa64 	bl	8004430 <HAL_GetTick>
 8005f68:	0002      	movs	r2, r0
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e120      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f76:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <HAL_RCC_OscConfig+0x674>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCC_OscConfig+0x4ae>
 8005f8e:	4b73      	ldr	r3, [pc, #460]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f92:	4b72      	ldr	r3, [pc, #456]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	0049      	lsls	r1, r1, #1
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	651a      	str	r2, [r3, #80]	; 0x50
 8005f9c:	e031      	b.n	8006002 <HAL_RCC_OscConfig+0x512>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4d0>
 8005fa6:	4b6d      	ldr	r3, [pc, #436]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005faa:	4b6c      	ldr	r3, [pc, #432]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fac:	496c      	ldr	r1, [pc, #432]	; (8006160 <HAL_RCC_OscConfig+0x670>)
 8005fae:	400a      	ands	r2, r1
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb6:	4b69      	ldr	r3, [pc, #420]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fb8:	496b      	ldr	r1, [pc, #428]	; (8006168 <HAL_RCC_OscConfig+0x678>)
 8005fba:	400a      	ands	r2, r1
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8005fbe:	e020      	b.n	8006002 <HAL_RCC_OscConfig+0x512>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	23a0      	movs	r3, #160	; 0xa0
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d10e      	bne.n	8005fea <HAL_RCC_OscConfig+0x4fa>
 8005fcc:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fd0:	4b62      	ldr	r3, [pc, #392]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	00c9      	lsls	r1, r1, #3
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50
 8005fda:	4b60      	ldr	r3, [pc, #384]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fde:	4b5f      	ldr	r3, [pc, #380]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fe0:	2180      	movs	r1, #128	; 0x80
 8005fe2:	0049      	lsls	r1, r1, #1
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	651a      	str	r2, [r3, #80]	; 0x50
 8005fe8:	e00b      	b.n	8006002 <HAL_RCC_OscConfig+0x512>
 8005fea:	4b5c      	ldr	r3, [pc, #368]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fee:	4b5b      	ldr	r3, [pc, #364]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ff0:	495b      	ldr	r1, [pc, #364]	; (8006160 <HAL_RCC_OscConfig+0x670>)
 8005ff2:	400a      	ands	r2, r1
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8005ff6:	4b59      	ldr	r3, [pc, #356]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ffa:	4b58      	ldr	r3, [pc, #352]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8005ffc:	495a      	ldr	r1, [pc, #360]	; (8006168 <HAL_RCC_OscConfig+0x678>)
 8005ffe:	400a      	ands	r2, r1
 8006000:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600a:	f7fe fa11 	bl	8004430 <HAL_GetTick>
 800600e:	0003      	movs	r3, r0
 8006010:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006012:	e009      	b.n	8006028 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fe fa0c 	bl	8004430 <HAL_GetTick>
 8006018:	0002      	movs	r2, r0
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	4a53      	ldr	r2, [pc, #332]	; (800616c <HAL_RCC_OscConfig+0x67c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0c7      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006028:	4b4c      	ldr	r3, [pc, #304]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 800602a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4013      	ands	r3, r2
 8006032:	d0ef      	beq.n	8006014 <HAL_RCC_OscConfig+0x524>
 8006034:	e014      	b.n	8006060 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006036:	f7fe f9fb 	bl	8004430 <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800603e:	e009      	b.n	8006054 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fe f9f6 	bl	8004430 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4a48      	ldr	r2, [pc, #288]	; (800616c <HAL_RCC_OscConfig+0x67c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0b1      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4013      	ands	r3, r2
 800605e:	d1ef      	bne.n	8006040 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006060:	2327      	movs	r3, #39	; 0x27
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b3c      	ldr	r3, [pc, #240]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	4b3b      	ldr	r3, [pc, #236]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006070:	493f      	ldr	r1, [pc, #252]	; (8006170 <HAL_RCC_OscConfig+0x680>)
 8006072:	400a      	ands	r2, r1
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d100      	bne.n	8006080 <HAL_RCC_OscConfig+0x590>
 800607e:	e09a      	b.n	80061b6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d064      	beq.n	8006150 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b02      	cmp	r3, #2
 800608c:	d145      	bne.n	800611a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608e:	4b33      	ldr	r3, [pc, #204]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b32      	ldr	r3, [pc, #200]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006094:	4937      	ldr	r1, [pc, #220]	; (8006174 <HAL_RCC_OscConfig+0x684>)
 8006096:	400a      	ands	r2, r1
 8006098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609a:	f7fe f9c9 	bl	8004430 <HAL_GetTick>
 800609e:	0003      	movs	r3, r0
 80060a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fe f9c4 	bl	8004430 <HAL_GetTick>
 80060a8:	0002      	movs	r2, r0
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e080      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	049b      	lsls	r3, r3, #18
 80060be:	4013      	ands	r3, r2
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c2:	4b26      	ldr	r3, [pc, #152]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <HAL_RCC_OscConfig+0x688>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	0019      	movs	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	431a      	orrs	r2, r3
 80060dc:	4b1f      	ldr	r3, [pc, #124]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e2:	4b1e      	ldr	r3, [pc, #120]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	0449      	lsls	r1, r1, #17
 80060ec:	430a      	orrs	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fe f99e 	bl	8004430 <HAL_GetTick>
 80060f4:	0003      	movs	r3, r0
 80060f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fe f999 	bl	8004430 <HAL_GetTick>
 80060fe:	0002      	movs	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e055      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800610c:	4b13      	ldr	r3, [pc, #76]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	049b      	lsls	r3, r3, #18
 8006114:	4013      	ands	r3, r2
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x60a>
 8006118:	e04d      	b.n	80061b6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006120:	4914      	ldr	r1, [pc, #80]	; (8006174 <HAL_RCC_OscConfig+0x684>)
 8006122:	400a      	ands	r2, r1
 8006124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fe f983 	bl	8004430 <HAL_GetTick>
 800612a:	0003      	movs	r3, r0
 800612c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006130:	f7fe f97e 	bl	8004430 <HAL_GetTick>
 8006134:	0002      	movs	r2, r0
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e03a      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_RCC_OscConfig+0x66c>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	049b      	lsls	r3, r3, #18
 800614a:	4013      	ands	r3, r2
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x640>
 800614e:	e032      	b.n	80061b6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b01      	cmp	r3, #1
 8006156:	d111      	bne.n	800617c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e02d      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
 800615c:	40021000 	.word	0x40021000
 8006160:	fffffeff 	.word	0xfffffeff
 8006164:	40007000 	.word	0x40007000
 8006168:	fffffbff 	.word	0xfffffbff
 800616c:	00001388 	.word	0x00001388
 8006170:	efffffff 	.word	0xefffffff
 8006174:	feffffff 	.word	0xfeffffff
 8006178:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <HAL_RCC_OscConfig+0x6d0>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	025b      	lsls	r3, r3, #9
 8006188:	401a      	ands	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	429a      	cmp	r2, r3
 8006190:	d10f      	bne.n	80061b2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	23f0      	movs	r3, #240	; 0xf0
 8006196:	039b      	lsls	r3, r3, #14
 8006198:	401a      	ands	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619e:	429a      	cmp	r2, r3
 80061a0:	d107      	bne.n	80061b2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	23c0      	movs	r3, #192	; 0xc0
 80061a6:	041b      	lsls	r3, r3, #16
 80061a8:	401a      	ands	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d001      	beq.n	80061b6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b00a      	add	sp, #40	; 0x28
 80061be:	bdb0      	pop	{r4, r5, r7, pc}
 80061c0:	40021000 	.word	0x40021000

080061c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c4:	b5b0      	push	{r4, r5, r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e128      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061d8:	4b96      	ldr	r3, [pc, #600]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2201      	movs	r2, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d91e      	bls.n	8006224 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b93      	ldr	r3, [pc, #588]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2201      	movs	r2, #1
 80061ec:	4393      	bics	r3, r2
 80061ee:	0019      	movs	r1, r3
 80061f0:	4b90      	ldr	r3, [pc, #576]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061f8:	f7fe f91a 	bl	8004430 <HAL_GetTick>
 80061fc:	0003      	movs	r3, r0
 80061fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006200:	e009      	b.n	8006216 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006202:	f7fe f915 	bl	8004430 <HAL_GetTick>
 8006206:	0002      	movs	r2, r0
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	4a8a      	ldr	r2, [pc, #552]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e109      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006216:	4b87      	ldr	r3, [pc, #540]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	4013      	ands	r3, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d1ee      	bne.n	8006202 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2202      	movs	r2, #2
 800622a:	4013      	ands	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622e:	4b83      	ldr	r3, [pc, #524]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	22f0      	movs	r2, #240	; 0xf0
 8006234:	4393      	bics	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	4b7f      	ldr	r3, [pc, #508]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 800623e:	430a      	orrs	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d100      	bne.n	800624e <HAL_RCC_ClockConfig+0x8a>
 800624c:	e089      	b.n	8006362 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006256:	4b79      	ldr	r3, [pc, #484]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	4013      	ands	r3, r2
 8006260:	d120      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0e1      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800626e:	4b73      	ldr	r3, [pc, #460]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	049b      	lsls	r3, r3, #18
 8006276:	4013      	ands	r3, r2
 8006278:	d114      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0d5      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d106      	bne.n	8006294 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006286:	4b6d      	ldr	r3, [pc, #436]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2204      	movs	r2, #4
 800628c:	4013      	ands	r3, r2
 800628e:	d109      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0ca      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006294:	4b69      	ldr	r3, [pc, #420]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4013      	ands	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0c2      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a4:	4b65      	ldr	r3, [pc, #404]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2203      	movs	r2, #3
 80062aa:	4393      	bics	r3, r2
 80062ac:	0019      	movs	r1, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4b62      	ldr	r3, [pc, #392]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80062b4:	430a      	orrs	r2, r1
 80062b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b8:	f7fe f8ba 	bl	8004430 <HAL_GetTick>
 80062bc:	0003      	movs	r3, r0
 80062be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d111      	bne.n	80062ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062c8:	e009      	b.n	80062de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ca:	f7fe f8b1 	bl	8004430 <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	4a58      	ldr	r2, [pc, #352]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0a5      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062de:	4b57      	ldr	r3, [pc, #348]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	220c      	movs	r2, #12
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d1ef      	bne.n	80062ca <HAL_RCC_ClockConfig+0x106>
 80062ea:	e03a      	b.n	8006362 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d111      	bne.n	8006318 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062f4:	e009      	b.n	800630a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f6:	f7fe f89b 	bl	8004430 <HAL_GetTick>
 80062fa:	0002      	movs	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	4a4d      	ldr	r2, [pc, #308]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e08f      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800630a:	4b4c      	ldr	r3, [pc, #304]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	220c      	movs	r2, #12
 8006310:	4013      	ands	r3, r2
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d1ef      	bne.n	80062f6 <HAL_RCC_ClockConfig+0x132>
 8006316:	e024      	b.n	8006362 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d11b      	bne.n	8006358 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006320:	e009      	b.n	8006336 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006322:	f7fe f885 	bl	8004430 <HAL_GetTick>
 8006326:	0002      	movs	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	4a42      	ldr	r2, [pc, #264]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e079      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006336:	4b41      	ldr	r3, [pc, #260]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	220c      	movs	r2, #12
 800633c:	4013      	ands	r3, r2
 800633e:	2b04      	cmp	r3, #4
 8006340:	d1ef      	bne.n	8006322 <HAL_RCC_ClockConfig+0x15e>
 8006342:	e00e      	b.n	8006362 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006344:	f7fe f874 	bl	8004430 <HAL_GetTick>
 8006348:	0002      	movs	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e068      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	220c      	movs	r2, #12
 800635e:	4013      	ands	r3, r2
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006362:	4b34      	ldr	r3, [pc, #208]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2201      	movs	r2, #1
 8006368:	4013      	ands	r3, r2
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d21e      	bcs.n	80063ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	4393      	bics	r3, r2
 8006378:	0019      	movs	r1, r3
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006382:	f7fe f855 	bl	8004430 <HAL_GetTick>
 8006386:	0003      	movs	r3, r0
 8006388:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	e009      	b.n	80063a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638c:	f7fe f850 	bl	8004430 <HAL_GetTick>
 8006390:	0002      	movs	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a28      	ldr	r2, [pc, #160]	; (8006438 <HAL_RCC_ClockConfig+0x274>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e044      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <HAL_RCC_ClockConfig+0x270>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d1ee      	bne.n	800638c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2204      	movs	r2, #4
 80063b4:	4013      	ands	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b8:	4b20      	ldr	r3, [pc, #128]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <HAL_RCC_ClockConfig+0x27c>)
 80063be:	4013      	ands	r3, r2
 80063c0:	0019      	movs	r1, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80063c8:	430a      	orrs	r2, r1
 80063ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2208      	movs	r2, #8
 80063d2:	4013      	ands	r3, r2
 80063d4:	d00a      	beq.n	80063ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063d6:	4b19      	ldr	r3, [pc, #100]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <HAL_RCC_ClockConfig+0x280>)
 80063dc:	4013      	ands	r3, r2
 80063de:	0019      	movs	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	00da      	lsls	r2, r3, #3
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80063e8:	430a      	orrs	r2, r1
 80063ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ec:	f000 f8b6 	bl	800655c <HAL_RCC_GetSysClockFreq>
 80063f0:	0001      	movs	r1, r0
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x278>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	220f      	movs	r2, #15
 80063fa:	4013      	ands	r3, r2
 80063fc:	4a12      	ldr	r2, [pc, #72]	; (8006448 <HAL_RCC_ClockConfig+0x284>)
 80063fe:	5cd3      	ldrb	r3, [r2, r3]
 8006400:	000a      	movs	r2, r1
 8006402:	40da      	lsrs	r2, r3
 8006404:	4b11      	ldr	r3, [pc, #68]	; (800644c <HAL_RCC_ClockConfig+0x288>)
 8006406:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_RCC_ClockConfig+0x28c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	250b      	movs	r5, #11
 800640e:	197c      	adds	r4, r7, r5
 8006410:	0018      	movs	r0, r3
 8006412:	f7fd ffc7 	bl	80043a4 <HAL_InitTick>
 8006416:	0003      	movs	r3, r0
 8006418:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800641a:	197b      	adds	r3, r7, r5
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006422:	197b      	adds	r3, r7, r5
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	e000      	b.n	800642a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bdb0      	pop	{r4, r5, r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	40022000 	.word	0x40022000
 8006438:	00001388 	.word	0x00001388
 800643c:	40021000 	.word	0x40021000
 8006440:	fffff8ff 	.word	0xfffff8ff
 8006444:	ffffc7ff 	.word	0xffffc7ff
 8006448:	0800b7c0 	.word	0x0800b7c0
 800644c:	20000000 	.word	0x20000000
 8006450:	20000004 	.word	0x20000004

08006454 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b08d      	sub	sp, #52	; 0x34
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8006460:	241c      	movs	r4, #28
 8006462:	193b      	adds	r3, r7, r4
 8006464:	0018      	movs	r0, r3
 8006466:	2314      	movs	r3, #20
 8006468:	001a      	movs	r2, r3
 800646a:	2100      	movs	r1, #0
 800646c:	f003 f95a 	bl	8009724 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8006470:	0020      	movs	r0, r4
 8006472:	183b      	adds	r3, r7, r0
 8006474:	2202      	movs	r2, #2
 8006476:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006478:	183b      	adds	r3, r7, r0
 800647a:	2202      	movs	r2, #2
 800647c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800647e:	183b      	adds	r3, r7, r0
 8006480:	2200      	movs	r2, #0
 8006482:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11a      	bne.n	80064c0 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800648a:	183b      	adds	r3, r7, r0
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	0052      	lsls	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006492:	183b      	adds	r3, r7, r0
 8006494:	2200      	movs	r2, #0
 8006496:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006498:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b2c      	ldr	r3, [pc, #176]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 800649e:	2101      	movs	r1, #1
 80064a0:	430a      	orrs	r2, r1
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	2201      	movs	r2, #1
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80064b0:	183a      	adds	r2, r7, r0
 80064b2:	23a0      	movs	r3, #160	; 0xa0
 80064b4:	05db      	lsls	r3, r3, #23
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7fe fa3f 	bl	800493c <HAL_GPIO_Init>
 80064be:	e038      	b.n	8006532 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d11a      	bne.n	80064fc <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 80064c6:	201c      	movs	r0, #28
 80064c8:	183b      	adds	r3, r7, r0
 80064ca:	2280      	movs	r2, #128	; 0x80
 80064cc:	0192      	lsls	r2, r2, #6
 80064ce:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 80064d0:	183b      	adds	r3, r7, r0
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 80064dc:	2102      	movs	r1, #2
 80064de:	430a      	orrs	r2, r1
 80064e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	2202      	movs	r2, #2
 80064e8:	4013      	ands	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80064ee:	183b      	adds	r3, r7, r0
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_RCC_MCOConfig+0x100>)
 80064f2:	0019      	movs	r1, r3
 80064f4:	0010      	movs	r0, r2
 80064f6:	f7fe fa21 	bl	800493c <HAL_GPIO_Init>
 80064fa:	e01a      	b.n	8006532 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80064fc:	201c      	movs	r0, #28
 80064fe:	183b      	adds	r3, r7, r0
 8006500:	2280      	movs	r2, #128	; 0x80
 8006502:	0092      	lsls	r2, r2, #2
 8006504:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006506:	183b      	adds	r3, r7, r0
 8006508:	2200      	movs	r2, #0
 800650a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 8006512:	2101      	movs	r1, #1
 8006514:	430a      	orrs	r2, r1
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	2201      	movs	r2, #1
 800651e:	4013      	ands	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006524:	183a      	adds	r2, r7, r0
 8006526:	23a0      	movs	r3, #160	; 0xa0
 8006528:	05db      	lsls	r3, r3, #23
 800652a:	0011      	movs	r1, r2
 800652c:	0018      	movs	r0, r3
 800652e:	f7fe fa05 	bl	800493c <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <HAL_RCC_MCOConfig+0x104>)
 8006538:	4013      	ands	r3, r2
 800653a:	0019      	movs	r1, r3
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	431a      	orrs	r2, r3
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <HAL_RCC_MCOConfig+0xfc>)
 8006544:	430a      	orrs	r2, r1
 8006546:	60da      	str	r2, [r3, #12]
}
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	46bd      	mov	sp, r7
 800654c:	b00d      	add	sp, #52	; 0x34
 800654e:	bd90      	pop	{r4, r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	50000400 	.word	0x50000400
 8006558:	80ffffff 	.word	0x80ffffff

0800655c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800655c:	b5b0      	push	{r4, r5, r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006562:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HAL_RCC_GetSysClockFreq+0x138>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656a:	230c      	movs	r3, #12
 800656c:	4013      	ands	r3, r2
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d014      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x40>
 8006572:	d900      	bls.n	8006576 <HAL_RCC_GetSysClockFreq+0x1a>
 8006574:	e07b      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x112>
 8006576:	2b04      	cmp	r3, #4
 8006578:	d002      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0x24>
 800657a:	2b08      	cmp	r3, #8
 800657c:	d00b      	beq.n	8006596 <HAL_RCC_GetSysClockFreq+0x3a>
 800657e:	e076      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006580:	4b44      	ldr	r3, [pc, #272]	; (8006694 <HAL_RCC_GetSysClockFreq+0x138>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2210      	movs	r2, #16
 8006586:	4013      	ands	r3, r2
 8006588:	d002      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800658a:	4b43      	ldr	r3, [pc, #268]	; (8006698 <HAL_RCC_GetSysClockFreq+0x13c>)
 800658c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800658e:	e07c      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006590:	4b42      	ldr	r3, [pc, #264]	; (800669c <HAL_RCC_GetSysClockFreq+0x140>)
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006594:	e079      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006596:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800659a:	e076      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	0c9a      	lsrs	r2, r3, #18
 80065a0:	230f      	movs	r3, #15
 80065a2:	401a      	ands	r2, r3
 80065a4:	4b3f      	ldr	r3, [pc, #252]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80065a6:	5c9b      	ldrb	r3, [r3, r2]
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	0d9a      	lsrs	r2, r3, #22
 80065ae:	2303      	movs	r3, #3
 80065b0:	4013      	ands	r3, r2
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCC_GetSysClockFreq+0x138>)
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	025b      	lsls	r3, r3, #9
 80065be:	4013      	ands	r3, r2
 80065c0:	d01a      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	4a35      	ldr	r2, [pc, #212]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	69b8      	ldr	r0, [r7, #24]
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	f7f9 ffc3 	bl	800055c <__aeabi_lmul>
 80065d6:	0002      	movs	r2, r0
 80065d8:	000b      	movs	r3, r1
 80065da:	0010      	movs	r0, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f7f9 ff97 	bl	800051c <__aeabi_uldivmod>
 80065ee:	0002      	movs	r2, r0
 80065f0:	000b      	movs	r3, r1
 80065f2:	0013      	movs	r3, r2
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
 80065f6:	e037      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <HAL_RCC_GetSysClockFreq+0x138>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2210      	movs	r2, #16
 80065fe:	4013      	ands	r3, r2
 8006600:	d01a      	beq.n	8006638 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	4a23      	ldr	r2, [pc, #140]	; (8006698 <HAL_RCC_GetSysClockFreq+0x13c>)
 800660c:	2300      	movs	r3, #0
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	f7f9 ffa3 	bl	800055c <__aeabi_lmul>
 8006616:	0002      	movs	r2, r0
 8006618:	000b      	movs	r3, r1
 800661a:	0010      	movs	r0, r2
 800661c:	0019      	movs	r1, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f7f9 ff77 	bl	800051c <__aeabi_uldivmod>
 800662e:	0002      	movs	r2, r0
 8006630:	000b      	movs	r3, r1
 8006632:	0013      	movs	r3, r2
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	e017      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	0018      	movs	r0, r3
 800663c:	2300      	movs	r3, #0
 800663e:	0019      	movs	r1, r3
 8006640:	4a16      	ldr	r2, [pc, #88]	; (800669c <HAL_RCC_GetSysClockFreq+0x140>)
 8006642:	2300      	movs	r3, #0
 8006644:	f7f9 ff8a 	bl	800055c <__aeabi_lmul>
 8006648:	0002      	movs	r2, r0
 800664a:	000b      	movs	r3, r1
 800664c:	0010      	movs	r0, r2
 800664e:	0019      	movs	r1, r3
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	001c      	movs	r4, r3
 8006654:	2300      	movs	r3, #0
 8006656:	001d      	movs	r5, r3
 8006658:	0022      	movs	r2, r4
 800665a:	002b      	movs	r3, r5
 800665c:	f7f9 ff5e 	bl	800051c <__aeabi_uldivmod>
 8006660:	0002      	movs	r2, r0
 8006662:	000b      	movs	r3, r1
 8006664:	0013      	movs	r3, r2
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800666c:	e00d      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_GetSysClockFreq+0x138>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	0b5b      	lsrs	r3, r3, #13
 8006674:	2207      	movs	r2, #7
 8006676:	4013      	ands	r3, r2
 8006678:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	3301      	adds	r3, #1
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	0212      	lsls	r2, r2, #8
 8006682:	409a      	lsls	r2, r3
 8006684:	0013      	movs	r3, r2
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006688:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b00e      	add	sp, #56	; 0x38
 8006692:	bdb0      	pop	{r4, r5, r7, pc}
 8006694:	40021000 	.word	0x40021000
 8006698:	003d0900 	.word	0x003d0900
 800669c:	00f42400 	.word	0x00f42400
 80066a0:	007a1200 	.word	0x007a1200
 80066a4:	0800b7d8 	.word	0x0800b7d8

080066a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	20000000 	.word	0x20000000

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066c0:	f7ff fff2 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066c4:	0001      	movs	r1, r0
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	2207      	movs	r2, #7
 80066ce:	4013      	ands	r3, r2
 80066d0:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066d2:	5cd3      	ldrb	r3, [r2, r3]
 80066d4:	40d9      	lsrs	r1, r3
 80066d6:	000b      	movs	r3, r1
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	40021000 	.word	0x40021000
 80066e4:	0800b7d0 	.word	0x0800b7d0

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066ec:	f7ff ffdc 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066f0:	0001      	movs	r1, r0
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	0adb      	lsrs	r3, r3, #11
 80066f8:	2207      	movs	r2, #7
 80066fa:	4013      	ands	r3, r2
 80066fc:	4a04      	ldr	r2, [pc, #16]	; (8006710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066fe:	5cd3      	ldrb	r3, [r2, r3]
 8006700:	40d9      	lsrs	r1, r3
 8006702:	000b      	movs	r3, r1
}
 8006704:	0018      	movs	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	40021000 	.word	0x40021000
 8006710:	0800b7d0 	.word	0x0800b7d0

08006714 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800671c:	2017      	movs	r0, #23
 800671e:	183b      	adds	r3, r7, r0
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2220      	movs	r2, #32
 800672a:	4013      	ands	r3, r2
 800672c:	d100      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800672e:	e0c7      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006730:	4b8b      	ldr	r3, [pc, #556]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	055b      	lsls	r3, r3, #21
 8006738:	4013      	ands	r3, r2
 800673a:	d109      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673c:	4b88      	ldr	r3, [pc, #544]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800673e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006740:	4b87      	ldr	r3, [pc, #540]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006742:	2180      	movs	r1, #128	; 0x80
 8006744:	0549      	lsls	r1, r1, #21
 8006746:	430a      	orrs	r2, r1
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800674a:	183b      	adds	r3, r7, r0
 800674c:	2201      	movs	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006750:	4b84      	ldr	r3, [pc, #528]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4013      	ands	r3, r2
 800675a:	d11a      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800675c:	4b81      	ldr	r3, [pc, #516]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b80      	ldr	r3, [pc, #512]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	0049      	lsls	r1, r1, #1
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800676a:	f7fd fe61 	bl	8004430 <HAL_GetTick>
 800676e:	0003      	movs	r3, r0
 8006770:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006772:	e008      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006774:	f7fd fe5c 	bl	8004430 <HAL_GetTick>
 8006778:	0002      	movs	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e0e8      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006786:	4b77      	ldr	r3, [pc, #476]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4013      	ands	r3, r2
 8006790:	d0f0      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006792:	4b73      	ldr	r3, [pc, #460]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	23c0      	movs	r3, #192	; 0xc0
 8006798:	039b      	lsls	r3, r3, #14
 800679a:	4013      	ands	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	23c0      	movs	r3, #192	; 0xc0
 80067a4:	039b      	lsls	r3, r3, #14
 80067a6:	4013      	ands	r3, r2
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d013      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	23c0      	movs	r3, #192	; 0xc0
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	401a      	ands	r2, r3
 80067b8:	23c0      	movs	r3, #192	; 0xc0
 80067ba:	029b      	lsls	r3, r3, #10
 80067bc:	429a      	cmp	r2, r3
 80067be:	d10a      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067c0:	4b67      	ldr	r3, [pc, #412]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	401a      	ands	r2, r3
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d101      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e0c0      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80067d6:	4b62      	ldr	r3, [pc, #392]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80067d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067da:	23c0      	movs	r3, #192	; 0xc0
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	4013      	ands	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03b      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	23c0      	movs	r3, #192	; 0xc0
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	4013      	ands	r3, r2
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d033      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2220      	movs	r2, #32
 80067fe:	4013      	ands	r3, r2
 8006800:	d02e      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006802:	4b57      	ldr	r3, [pc, #348]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006806:	4a58      	ldr	r2, [pc, #352]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006808:	4013      	ands	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800680c:	4b54      	ldr	r3, [pc, #336]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800680e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006810:	4b53      	ldr	r3, [pc, #332]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	0309      	lsls	r1, r1, #12
 8006816:	430a      	orrs	r2, r1
 8006818:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800681a:	4b51      	ldr	r3, [pc, #324]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800681c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800681e:	4b50      	ldr	r3, [pc, #320]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006820:	4952      	ldr	r1, [pc, #328]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006822:	400a      	ands	r2, r1
 8006824:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006826:	4b4e      	ldr	r3, [pc, #312]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	2380      	movs	r3, #128	; 0x80
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	4013      	ands	r3, r2
 8006834:	d014      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006836:	f7fd fdfb 	bl	8004430 <HAL_GetTick>
 800683a:	0003      	movs	r3, r0
 800683c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800683e:	e009      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006840:	f7fd fdf6 	bl	8004430 <HAL_GetTick>
 8006844:	0002      	movs	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	4a49      	ldr	r2, [pc, #292]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e081      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006854:	4b42      	ldr	r3, [pc, #264]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4013      	ands	r3, r2
 800685e:	d0ef      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2220      	movs	r2, #32
 8006866:	4013      	ands	r3, r2
 8006868:	d01f      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	23c0      	movs	r3, #192	; 0xc0
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	401a      	ands	r2, r3
 8006874:	23c0      	movs	r3, #192	; 0xc0
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	429a      	cmp	r2, r3
 800687a:	d10c      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800687c:	4b38      	ldr	r3, [pc, #224]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a3c      	ldr	r2, [pc, #240]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006882:	4013      	ands	r3, r2
 8006884:	0019      	movs	r1, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	23c0      	movs	r3, #192	; 0xc0
 800688c:	039b      	lsls	r3, r3, #14
 800688e:	401a      	ands	r2, r3
 8006890:	4b33      	ldr	r3, [pc, #204]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006892:	430a      	orrs	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	4b32      	ldr	r3, [pc, #200]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006898:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	23c0      	movs	r3, #192	; 0xc0
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	401a      	ands	r2, r3
 80068a4:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068a6:	430a      	orrs	r2, r1
 80068a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068aa:	2317      	movs	r3, #23
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b4:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b8:	4b29      	ldr	r3, [pc, #164]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ba:	492f      	ldr	r1, [pc, #188]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068bc:	400a      	ands	r2, r1
 80068be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068ca:	4b25      	ldr	r3, [pc, #148]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	2203      	movs	r2, #3
 80068d0:	4393      	bics	r3, r2
 80068d2:	0019      	movs	r1, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	4b21      	ldr	r3, [pc, #132]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2202      	movs	r2, #2
 80068e4:	4013      	ands	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ec:	220c      	movs	r2, #12
 80068ee:	4393      	bics	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068f8:	430a      	orrs	r2, r1
 80068fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2204      	movs	r2, #4
 8006902:	4013      	ands	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006906:	4b16      	ldr	r3, [pc, #88]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690c:	4013      	ands	r3, r2
 800690e:	0019      	movs	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006916:	430a      	orrs	r2, r1
 8006918:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2208      	movs	r2, #8
 8006920:	4013      	ands	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006928:	4a15      	ldr	r2, [pc, #84]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800692a:	4013      	ands	r3, r2
 800692c:	0019      	movs	r1, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006934:	430a      	orrs	r2, r1
 8006936:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2280      	movs	r2, #128	; 0x80
 800693e:	4013      	ands	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006948:	4013      	ands	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	4b03      	ldr	r3, [pc, #12]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006952:	430a      	orrs	r2, r1
 8006954:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b006      	add	sp, #24
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000
 8006964:	40007000 	.word	0x40007000
 8006968:	fffcffff 	.word	0xfffcffff
 800696c:	fff7ffff 	.word	0xfff7ffff
 8006970:	00001388 	.word	0x00001388
 8006974:	ffcfffff 	.word	0xffcfffff
 8006978:	efffffff 	.word	0xefffffff
 800697c:	fffff3ff 	.word	0xfffff3ff
 8006980:	ffffcfff 	.word	0xffffcfff
 8006984:	fff3ffff 	.word	0xfff3ffff

08006988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e083      	b.n	8006aa2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	2382      	movs	r3, #130	; 0x82
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d009      	beq.n	80069c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	61da      	str	r2, [r3, #28]
 80069b4:	e005      	b.n	80069c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2251      	movs	r2, #81	; 0x51
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2250      	movs	r2, #80	; 0x50
 80069d8:	2100      	movs	r1, #0
 80069da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	0018      	movs	r0, r3
 80069e0:	f7fd f9be 	bl	8003d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2251      	movs	r2, #81	; 0x51
 80069e8:	2102      	movs	r1, #2
 80069ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2140      	movs	r1, #64	; 0x40
 80069f8:	438a      	bics	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	2382      	movs	r3, #130	; 0x82
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	401a      	ands	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6899      	ldr	r1, [r3, #8]
 8006a0a:	2384      	movs	r3, #132	; 0x84
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	400b      	ands	r3, r1
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68d9      	ldr	r1, [r3, #12]
 8006a16:	2380      	movs	r3, #128	; 0x80
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	400b      	ands	r3, r1
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2102      	movs	r1, #2
 8006a24:	400b      	ands	r3, r1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	400b      	ands	r3, r1
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6999      	ldr	r1, [r3, #24]
 8006a36:	2380      	movs	r3, #128	; 0x80
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	2138      	movs	r1, #56	; 0x38
 8006a44:	400b      	ands	r3, r1
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	400b      	ands	r3, r1
 8006a50:	431a      	orrs	r2, r3
 8006a52:	0011      	movs	r1, r2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	019b      	lsls	r3, r3, #6
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2210      	movs	r2, #16
 8006a78:	401a      	ands	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4907      	ldr	r1, [pc, #28]	; (8006aac <HAL_SPI_Init+0x124>)
 8006a8e:	400a      	ands	r2, r1
 8006a90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2251      	movs	r2, #81	; 0x51
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	fffff7ff 	.word	0xfffff7ff

08006ab0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	; 0x30
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	001a      	movs	r2, r3
 8006abe:	1cbb      	adds	r3, r7, #2
 8006ac0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ac6:	232b      	movs	r3, #43	; 0x2b
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2250      	movs	r2, #80	; 0x50
 8006ad2:	5c9b      	ldrb	r3, [r3, r2]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_SPI_TransmitReceive+0x2c>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e1b0      	b.n	8006e3e <HAL_SPI_TransmitReceive+0x38e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2250      	movs	r2, #80	; 0x50
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ae4:	f7fd fca4 	bl	8004430 <HAL_GetTick>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aec:	2023      	movs	r0, #35	; 0x23
 8006aee:	183b      	adds	r3, r7, r0
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	2151      	movs	r1, #81	; 0x51
 8006af4:	5c52      	ldrb	r2, [r2, r1]
 8006af6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006afe:	231a      	movs	r3, #26
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	1cba      	adds	r2, r7, #2
 8006b04:	8812      	ldrh	r2, [r2, #0]
 8006b06:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b08:	183b      	adds	r3, r7, r0
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d011      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x84>
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	2382      	movs	r3, #130	; 0x82
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d107      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x7a>
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d004      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b2a:	232b      	movs	r3, #43	; 0x2b
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	2202      	movs	r2, #2
 8006b30:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b32:	e17d      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x98>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x98>
 8006b40:	1cbb      	adds	r3, r7, #2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006b48:	232b      	movs	r3, #43	; 0x2b
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b50:	e16e      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2251      	movs	r2, #81	; 0x51
 8006b56:	5c9b      	ldrb	r3, [r3, r2]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d003      	beq.n	8006b66 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2251      	movs	r2, #81	; 0x51
 8006b62:	2105      	movs	r1, #5
 8006b64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1cba      	adds	r2, r7, #2
 8006b76:	8812      	ldrh	r2, [r2, #0]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1cba      	adds	r2, r7, #2
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1cba      	adds	r2, r7, #2
 8006b8c:	8812      	ldrh	r2, [r2, #0]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	1cba      	adds	r2, r7, #2
 8006b94:	8812      	ldrh	r2, [r2, #0]
 8006b96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	4013      	ands	r3, r2
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d007      	beq.n	8006bc2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2140      	movs	r1, #64	; 0x40
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	2380      	movs	r3, #128	; 0x80
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d000      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x120>
 8006bce:	e07f      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x134>
 8006bd8:	231a      	movs	r3, #26
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d000      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x134>
 8006be2:	e06a      	b.n	8006cba <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	881a      	ldrh	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	1c9a      	adds	r2, r3, #2
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c08:	e057      	b.n	8006cba <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2202      	movs	r2, #2
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d11b      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x1a0>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <HAL_SPI_TransmitReceive+0x1a0>
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d113      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2201      	movs	r2, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d119      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x1e2>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d014      	beq.n	8006c92 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	b292      	uxth	r2, r2
 8006c74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c92:	f7fd fbcd 	bl	8004430 <HAL_GetTick>
 8006c96:	0002      	movs	r2, r0
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d80b      	bhi.n	8006cba <HAL_SPI_TransmitReceive+0x20a>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	d008      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006ca8:	232b      	movs	r3, #43	; 0x2b
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	2203      	movs	r2, #3
 8006cae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2251      	movs	r2, #81	; 0x51
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	5499      	strb	r1, [r3, r2]
        goto error;
 8006cb8:	e0ba      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1a2      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x15a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d19d      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x15a>
 8006cce:	e083      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x234>
 8006cd8:	231a      	movs	r3, #26
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d000      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x234>
 8006ce2:	e06f      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d0a:	e05b      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2202      	movs	r2, #2
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d11c      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x2a4>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x2a4>
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d114      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d119      	bne.n	8006d96 <HAL_SPI_TransmitReceive+0x2e6>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d014      	beq.n	8006d96 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d92:	2301      	movs	r3, #1
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d96:	f7fd fb4b 	bl	8004430 <HAL_GetTick>
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d802      	bhi.n	8006dac <HAL_SPI_TransmitReceive+0x2fc>
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	3301      	adds	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x302>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006db2:	232b      	movs	r3, #43	; 0x2b
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2203      	movs	r2, #3
 8006db8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2251      	movs	r2, #81	; 0x51
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	5499      	strb	r1, [r3, r2]
        goto error;
 8006dc2:	e035      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d19e      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x25c>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d199      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f000 f8c0 	bl	8006f64 <SPI_EndRxTxTransaction>
 8006de4:	1e03      	subs	r3, r0, #0
 8006de6:	d007      	beq.n	8006df8 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006de8:	232b      	movs	r3, #43	; 0x2b
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006df6:	e01b      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8006e1e:	232b      	movs	r3, #43	; 0x2b
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	2201      	movs	r2, #1
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e003      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2251      	movs	r2, #81	; 0x51
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2250      	movs	r2, #80	; 0x50
 8006e34:	2100      	movs	r1, #0
 8006e36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e38:	232b      	movs	r3, #43	; 0x2b
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	781b      	ldrb	r3, [r3, #0]
}
 8006e3e:	0018      	movs	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	b00c      	add	sp, #48	; 0x30
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e58:	f7fd faea 	bl	8004430 <HAL_GetTick>
 8006e5c:	0002      	movs	r2, r0
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e68:	f7fd fae2 	bl	8004430 <HAL_GetTick>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e70:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	015b      	lsls	r3, r3, #5
 8006e76:	0d1b      	lsrs	r3, r3, #20
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	4353      	muls	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7e:	e058      	b.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	d055      	beq.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e86:	f7fd fad3 	bl	8004430 <HAL_GetTick>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d902      	bls.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d142      	bne.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	21e0      	movs	r1, #224	; 0xe0
 8006ea8:	438a      	bics	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	2382      	movs	r3, #130	; 0x82
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d113      	bne.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d005      	beq.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d107      	bne.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2140      	movs	r1, #64	; 0x40
 8006edc:	438a      	bics	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	019b      	lsls	r3, r3, #6
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d110      	bne.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	491a      	ldr	r1, [pc, #104]	; (8006f60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006ef8:	400a      	ands	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2180      	movs	r1, #128	; 0x80
 8006f08:	0189      	lsls	r1, r1, #6
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2251      	movs	r2, #81	; 0x51
 8006f12:	2101      	movs	r1, #1
 8006f14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2250      	movs	r2, #80	; 0x50
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e017      	b.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	425a      	negs	r2, r3
 8006f42:	4153      	adcs	r3, r2
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	001a      	movs	r2, r3
 8006f48:	1dfb      	adds	r3, r7, #7
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d197      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b008      	add	sp, #32
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20000000 	.word	0x20000000
 8006f60:	ffffdfff 	.word	0xffffdfff

08006f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f70:	4b1d      	ldr	r3, [pc, #116]	; (8006fe8 <SPI_EndRxTxTransaction+0x84>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	491d      	ldr	r1, [pc, #116]	; (8006fec <SPI_EndRxTxTransaction+0x88>)
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7f9 f8e2 	bl	8000140 <__udivsi3>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	001a      	movs	r2, r3
 8006f80:	0013      	movs	r3, r2
 8006f82:	015b      	lsls	r3, r3, #5
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	189b      	adds	r3, r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	2382      	movs	r3, #130	; 0x82
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d112      	bne.n	8006fc0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	0013      	movs	r3, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2180      	movs	r1, #128	; 0x80
 8006fa8:	f7ff ff4e 	bl	8006e48 <SPI_WaitFlagStateUntilTimeout>
 8006fac:	1e03      	subs	r3, r0, #0
 8006fae:	d016      	beq.n	8006fde <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e00f      	b.n	8006fe0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d0f2      	beq.n	8006fc0 <SPI_EndRxTxTransaction+0x5c>
 8006fda:	e000      	b.n	8006fde <SPI_EndRxTxTransaction+0x7a>
        break;
 8006fdc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b006      	add	sp, #24
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000000 	.word	0x20000000
 8006fec:	016e3600 	.word	0x016e3600

08006ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e032      	b.n	8007068 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2239      	movs	r2, #57	; 0x39
 8007006:	5c9b      	ldrb	r3, [r3, r2]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d107      	bne.n	800701e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2238      	movs	r2, #56	; 0x38
 8007012:	2100      	movs	r1, #0
 8007014:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f7fc fee5 	bl	8003de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2239      	movs	r2, #57	; 0x39
 8007022:	2102      	movs	r1, #2
 8007024:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	0019      	movs	r1, r3
 8007030:	0010      	movs	r0, r2
 8007032:	f000 fd5b 	bl	8007aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	223e      	movs	r2, #62	; 0x3e
 800703a:	2101      	movs	r1, #1
 800703c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	223a      	movs	r2, #58	; 0x3a
 8007042:	2101      	movs	r1, #1
 8007044:	5499      	strb	r1, [r3, r2]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	223b      	movs	r2, #59	; 0x3b
 800704a:	2101      	movs	r1, #1
 800704c:	5499      	strb	r1, [r3, r2]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	223c      	movs	r2, #60	; 0x3c
 8007052:	2101      	movs	r1, #1
 8007054:	5499      	strb	r1, [r3, r2]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	223d      	movs	r2, #61	; 0x3d
 800705a:	2101      	movs	r1, #1
 800705c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2239      	movs	r2, #57	; 0x39
 8007062:	2101      	movs	r1, #1
 8007064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b002      	add	sp, #8
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2239      	movs	r2, #57	; 0x39
 800707c:	5c9b      	ldrb	r3, [r3, r2]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d001      	beq.n	8007088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e036      	b.n	80070f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2239      	movs	r2, #57	; 0x39
 800708c:	2102      	movs	r1, #2
 800708e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2101      	movs	r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	2380      	movs	r3, #128	; 0x80
 80070a6:	05db      	lsls	r3, r3, #23
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d009      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x50>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <HAL_TIM_Base_Start_IT+0x90>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x50>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a12      	ldr	r2, [pc, #72]	; (8007104 <HAL_TIM_Base_Start_IT+0x94>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d111      	bne.n	80070e4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2207      	movs	r2, #7
 80070c8:	4013      	ands	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b06      	cmp	r3, #6
 80070d0:	d010      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2101      	movs	r1, #1
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e2:	e007      	b.n	80070f4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b004      	add	sp, #16
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	40010800 	.word	0x40010800
 8007104:	40011400 	.word	0x40011400

08007108 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2101      	movs	r1, #1
 800711c:	438a      	bics	r2, r1
 800711e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <HAL_TIM_Base_Stop_IT+0x48>)
 8007128:	4013      	ands	r3, r2
 800712a:	d107      	bne.n	800713c <HAL_TIM_Base_Stop_IT+0x34>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2101      	movs	r1, #1
 8007138:	438a      	bics	r2, r1
 800713a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2239      	movs	r2, #57	; 0x39
 8007140:	2101      	movs	r1, #1
 8007142:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	0018      	movs	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	b002      	add	sp, #8
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	00001111 	.word	0x00001111

08007154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e032      	b.n	80071cc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2239      	movs	r2, #57	; 0x39
 800716a:	5c9b      	ldrb	r3, [r3, r2]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2238      	movs	r2, #56	; 0x38
 8007176:	2100      	movs	r1, #0
 8007178:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0018      	movs	r0, r3
 800717e:	f000 f829 	bl	80071d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2239      	movs	r2, #57	; 0x39
 8007186:	2102      	movs	r1, #2
 8007188:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	0019      	movs	r1, r3
 8007194:	0010      	movs	r0, r2
 8007196:	f000 fca9 	bl	8007aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	223e      	movs	r2, #62	; 0x3e
 800719e:	2101      	movs	r1, #1
 80071a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	223a      	movs	r2, #58	; 0x3a
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	223b      	movs	r2, #59	; 0x3b
 80071ae:	2101      	movs	r1, #1
 80071b0:	5499      	strb	r1, [r3, r2]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	223c      	movs	r2, #60	; 0x3c
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	223d      	movs	r2, #61	; 0x3d
 80071be:	2101      	movs	r1, #1
 80071c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2239      	movs	r2, #57	; 0x39
 80071c6:	2101      	movs	r1, #1
 80071c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	0018      	movs	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b002      	add	sp, #8
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b002      	add	sp, #8
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d108      	bne.n	8007206 <HAL_TIM_PWM_Start+0x22>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	223a      	movs	r2, #58	; 0x3a
 80071f8:	5c9b      	ldrb	r3, [r3, r2]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	4193      	sbcs	r3, r2
 8007202:	b2db      	uxtb	r3, r3
 8007204:	e01f      	b.n	8007246 <HAL_TIM_PWM_Start+0x62>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d108      	bne.n	800721e <HAL_TIM_PWM_Start+0x3a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	223b      	movs	r2, #59	; 0x3b
 8007210:	5c9b      	ldrb	r3, [r3, r2]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	1e5a      	subs	r2, r3, #1
 8007218:	4193      	sbcs	r3, r2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	e013      	b.n	8007246 <HAL_TIM_PWM_Start+0x62>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d108      	bne.n	8007236 <HAL_TIM_PWM_Start+0x52>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	223c      	movs	r2, #60	; 0x3c
 8007228:	5c9b      	ldrb	r3, [r3, r2]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	4193      	sbcs	r3, r2
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e007      	b.n	8007246 <HAL_TIM_PWM_Start+0x62>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	223d      	movs	r2, #61	; 0x3d
 800723a:	5c9b      	ldrb	r3, [r3, r2]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	1e5a      	subs	r2, r3, #1
 8007242:	4193      	sbcs	r3, r2
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e04d      	b.n	80072ea <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <HAL_TIM_PWM_Start+0x7a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	223a      	movs	r2, #58	; 0x3a
 8007258:	2102      	movs	r1, #2
 800725a:	5499      	strb	r1, [r3, r2]
 800725c:	e013      	b.n	8007286 <HAL_TIM_PWM_Start+0xa2>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d104      	bne.n	800726e <HAL_TIM_PWM_Start+0x8a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	223b      	movs	r2, #59	; 0x3b
 8007268:	2102      	movs	r1, #2
 800726a:	5499      	strb	r1, [r3, r2]
 800726c:	e00b      	b.n	8007286 <HAL_TIM_PWM_Start+0xa2>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b08      	cmp	r3, #8
 8007272:	d104      	bne.n	800727e <HAL_TIM_PWM_Start+0x9a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	223c      	movs	r2, #60	; 0x3c
 8007278:	2102      	movs	r1, #2
 800727a:	5499      	strb	r1, [r3, r2]
 800727c:	e003      	b.n	8007286 <HAL_TIM_PWM_Start+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	223d      	movs	r2, #61	; 0x3d
 8007282:	2102      	movs	r1, #2
 8007284:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	0018      	movs	r0, r3
 8007290:	f000 ff3c 	bl	800810c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	05db      	lsls	r3, r3, #23
 800729c:	429a      	cmp	r2, r3
 800729e:	d009      	beq.n	80072b4 <HAL_TIM_PWM_Start+0xd0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <HAL_TIM_PWM_Start+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIM_PWM_Start+0xd0>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <HAL_TIM_PWM_Start+0x114>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d111      	bne.n	80072d8 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2207      	movs	r2, #7
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d010      	beq.n	80072e8 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2101      	movs	r1, #1
 80072d2:	430a      	orrs	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	e007      	b.n	80072e8 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2101      	movs	r1, #1
 80072e4:	430a      	orrs	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b004      	add	sp, #16
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	40010800 	.word	0x40010800
 80072f8:	40011400 	.word	0x40011400

080072fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	2200      	movs	r2, #0
 800730e:	0018      	movs	r0, r3
 8007310:	f000 fefc 	bl	800810c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	4a16      	ldr	r2, [pc, #88]	; (8007374 <HAL_TIM_PWM_Stop+0x78>)
 800731c:	4013      	ands	r3, r2
 800731e:	d107      	bne.n	8007330 <HAL_TIM_PWM_Stop+0x34>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2101      	movs	r1, #1
 800732c:	438a      	bics	r2, r1
 800732e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <HAL_TIM_PWM_Stop+0x44>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223a      	movs	r2, #58	; 0x3a
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
 800733e:	e013      	b.n	8007368 <HAL_TIM_PWM_Stop+0x6c>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d104      	bne.n	8007350 <HAL_TIM_PWM_Stop+0x54>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	223b      	movs	r2, #59	; 0x3b
 800734a:	2101      	movs	r1, #1
 800734c:	5499      	strb	r1, [r3, r2]
 800734e:	e00b      	b.n	8007368 <HAL_TIM_PWM_Stop+0x6c>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b08      	cmp	r3, #8
 8007354:	d104      	bne.n	8007360 <HAL_TIM_PWM_Stop+0x64>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	223c      	movs	r2, #60	; 0x3c
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]
 800735e:	e003      	b.n	8007368 <HAL_TIM_PWM_Stop+0x6c>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	223d      	movs	r2, #61	; 0x3d
 8007364:	2101      	movs	r1, #1
 8007366:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b002      	add	sp, #8
 8007370:	bd80      	pop	{r7, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	00001111 	.word	0x00001111

08007378 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e032      	b.n	80073f0 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2239      	movs	r2, #57	; 0x39
 800738e:	5c9b      	ldrb	r3, [r3, r2]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2238      	movs	r2, #56	; 0x38
 800739a:	2100      	movs	r1, #0
 800739c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 f829 	bl	80073f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2239      	movs	r2, #57	; 0x39
 80073aa:	2102      	movs	r1, #2
 80073ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3304      	adds	r3, #4
 80073b6:	0019      	movs	r1, r3
 80073b8:	0010      	movs	r0, r2
 80073ba:	f000 fb97 	bl	8007aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	223e      	movs	r2, #62	; 0x3e
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	223a      	movs	r2, #58	; 0x3a
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	223b      	movs	r2, #59	; 0x3b
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	223c      	movs	r2, #60	; 0x3c
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	223d      	movs	r2, #61	; 0x3d
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2239      	movs	r2, #57	; 0x39
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2202      	movs	r2, #2
 8007418:	4013      	ands	r3, r2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d124      	bne.n	8007468 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2202      	movs	r2, #2
 8007426:	4013      	ands	r3, r2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11d      	bne.n	8007468 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2203      	movs	r2, #3
 8007432:	4252      	negs	r2, r2
 8007434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	2203      	movs	r2, #3
 8007444:	4013      	ands	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f7fb faca 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8007450:	e007      	b.n	8007462 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	0018      	movs	r0, r3
 8007456:	f000 fb31 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0018      	movs	r0, r3
 800745e:	f000 fb35 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2204      	movs	r2, #4
 8007470:	4013      	ands	r3, r2
 8007472:	2b04      	cmp	r3, #4
 8007474:	d125      	bne.n	80074c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2204      	movs	r2, #4
 800747e:	4013      	ands	r3, r2
 8007480:	2b04      	cmp	r3, #4
 8007482:	d11e      	bne.n	80074c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2205      	movs	r2, #5
 800748a:	4252      	negs	r2, r2
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	23c0      	movs	r3, #192	; 0xc0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4013      	ands	r3, r2
 80074a0:	d004      	beq.n	80074ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fb fa9d 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 80074aa:	e007      	b.n	80074bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	0018      	movs	r0, r3
 80074b0:	f000 fb04 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	0018      	movs	r0, r3
 80074b8:	f000 fb08 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2208      	movs	r2, #8
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d124      	bne.n	800751a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2208      	movs	r2, #8
 80074d8:	4013      	ands	r3, r2
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d11d      	bne.n	800751a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2209      	movs	r2, #9
 80074e4:	4252      	negs	r2, r2
 80074e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2204      	movs	r2, #4
 80074ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	2203      	movs	r2, #3
 80074f6:	4013      	ands	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7fb fa71 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8007502:	e007      	b.n	8007514 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	0018      	movs	r0, r3
 8007508:	f000 fad8 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0018      	movs	r0, r3
 8007510:	f000 fadc 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2210      	movs	r2, #16
 8007522:	4013      	ands	r3, r2
 8007524:	2b10      	cmp	r3, #16
 8007526:	d125      	bne.n	8007574 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2210      	movs	r2, #16
 8007530:	4013      	ands	r3, r2
 8007532:	2b10      	cmp	r3, #16
 8007534:	d11e      	bne.n	8007574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2211      	movs	r2, #17
 800753c:	4252      	negs	r2, r2
 800753e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2208      	movs	r2, #8
 8007544:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	23c0      	movs	r3, #192	; 0xc0
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4013      	ands	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	0018      	movs	r0, r3
 8007558:	f7fb fa44 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 800755c:	e007      	b.n	800756e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	0018      	movs	r0, r3
 8007562:	f000 faab 	bl	8007abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 faaf 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2201      	movs	r2, #1
 800757c:	4013      	ands	r3, r2
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10f      	bne.n	80075a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	4013      	ands	r3, r2
 800758c:	2b01      	cmp	r3, #1
 800758e:	d108      	bne.n	80075a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2202      	movs	r2, #2
 8007596:	4252      	negs	r2, r2
 8007598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f7fb fa45 	bl	8002a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2240      	movs	r2, #64	; 0x40
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d10f      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	2240      	movs	r2, #64	; 0x40
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d108      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2241      	movs	r2, #65	; 0x41
 80075c4:	4252      	negs	r2, r2
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 fa86 	bl	8007adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b002      	add	sp, #8
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2317      	movs	r3, #23
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2238      	movs	r2, #56	; 0x38
 80075f0:	5c9b      	ldrb	r3, [r3, r2]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_IC_ConfigChannel+0x22>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e08c      	b.n	8007714 <HAL_TIM_IC_ConfigChannel+0x13c>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2238      	movs	r2, #56	; 0x38
 80075fe:	2101      	movs	r1, #1
 8007600:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11b      	bne.n	8007640 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007618:	f000 fbc0 	bl	8007d9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	210c      	movs	r1, #12
 8007628:	438a      	bics	r2, r1
 800762a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6999      	ldr	r1, [r3, #24]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	619a      	str	r2, [r3, #24]
 800763e:	e062      	b.n	8007706 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b04      	cmp	r3, #4
 8007644:	d11c      	bne.n	8007680 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007656:	f000 fc25 	bl	8007ea4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	492d      	ldr	r1, [pc, #180]	; (800771c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007666:	400a      	ands	r2, r1
 8007668:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6999      	ldr	r1, [r3, #24]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	021a      	lsls	r2, r3, #8
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	619a      	str	r2, [r3, #24]
 800767e:	e042      	b.n	8007706 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b08      	cmp	r3, #8
 8007684:	d11b      	bne.n	80076be <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007696:	f000 fc79 	bl	8007f8c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	210c      	movs	r1, #12
 80076a6:	438a      	bics	r2, r1
 80076a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69d9      	ldr	r1, [r3, #28]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	61da      	str	r2, [r3, #28]
 80076bc:	e023      	b.n	8007706 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	d11c      	bne.n	80076fe <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80076d4:	f000 fc9a 	bl	800800c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69da      	ldr	r2, [r3, #28]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	490e      	ldr	r1, [pc, #56]	; (800771c <HAL_TIM_IC_ConfigChannel+0x144>)
 80076e4:	400a      	ands	r2, r1
 80076e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69d9      	ldr	r1, [r3, #28]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	61da      	str	r2, [r3, #28]
 80076fc:	e003      	b.n	8007706 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80076fe:	2317      	movs	r3, #23
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	2201      	movs	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2238      	movs	r2, #56	; 0x38
 800770a:	2100      	movs	r1, #0
 800770c:	5499      	strb	r1, [r3, r2]

  return status;
 800770e:	2317      	movs	r3, #23
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	781b      	ldrb	r3, [r3, #0]
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b006      	add	sp, #24
 800771a:	bd80      	pop	{r7, pc}
 800771c:	fffff3ff 	.word	0xfffff3ff

08007720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800772c:	2317      	movs	r3, #23
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2238      	movs	r2, #56	; 0x38
 8007738:	5c9b      	ldrb	r3, [r3, r2]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x22>
 800773e:	2302      	movs	r3, #2
 8007740:	e0ad      	b.n	800789e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2238      	movs	r2, #56	; 0x38
 8007746:	2101      	movs	r1, #1
 8007748:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b0c      	cmp	r3, #12
 800774e:	d100      	bne.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007750:	e076      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b0c      	cmp	r3, #12
 8007756:	d900      	bls.n	800775a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007758:	e095      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x166>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b08      	cmp	r3, #8
 800775e:	d04e      	beq.n	80077fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b08      	cmp	r3, #8
 8007764:	d900      	bls.n	8007768 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007766:	e08e      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x56>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d021      	beq.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007774:	e087      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f000 fa08 	bl	8007b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2108      	movs	r1, #8
 8007790:	430a      	orrs	r2, r1
 8007792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2104      	movs	r1, #4
 80077a0:	438a      	bics	r2, r1
 80077a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6999      	ldr	r1, [r3, #24]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	619a      	str	r2, [r3, #24]
      break;
 80077b6:	e06b      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	0011      	movs	r1, r2
 80077c0:	0018      	movs	r0, r3
 80077c2:	f000 fa23 	bl	8007c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699a      	ldr	r2, [r3, #24]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2180      	movs	r1, #128	; 0x80
 80077d2:	0109      	lsls	r1, r1, #4
 80077d4:	430a      	orrs	r2, r1
 80077d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4931      	ldr	r1, [pc, #196]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80077e4:	400a      	ands	r2, r1
 80077e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	619a      	str	r2, [r3, #24]
      break;
 80077fc:	e048      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	0011      	movs	r1, r2
 8007806:	0018      	movs	r0, r3
 8007808:	f000 fa42 	bl	8007c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69da      	ldr	r2, [r3, #28]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2108      	movs	r1, #8
 8007818:	430a      	orrs	r2, r1
 800781a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69da      	ldr	r2, [r3, #28]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2104      	movs	r1, #4
 8007828:	438a      	bics	r2, r1
 800782a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69d9      	ldr	r1, [r3, #28]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
      break;
 800783e:	e027      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	0011      	movs	r1, r2
 8007848:	0018      	movs	r0, r3
 800784a:	f000 fa61 	bl	8007d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	0109      	lsls	r1, r1, #4
 800785c:	430a      	orrs	r2, r1
 800785e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	490f      	ldr	r1, [pc, #60]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800786c:	400a      	ands	r2, r1
 800786e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69d9      	ldr	r1, [r3, #28]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	021a      	lsls	r2, r3, #8
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	61da      	str	r2, [r3, #28]
      break;
 8007884:	e004      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007886:	2317      	movs	r3, #23
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2238      	movs	r2, #56	; 0x38
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]

  return status;
 8007898:	2317      	movs	r3, #23
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	781b      	ldrb	r3, [r3, #0]
}
 800789e:	0018      	movs	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b006      	add	sp, #24
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	fffffbff 	.word	0xfffffbff

080078ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078b6:	230f      	movs	r3, #15
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2238      	movs	r2, #56	; 0x38
 80078c2:	5c9b      	ldrb	r3, [r3, r2]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_ConfigClockSource+0x20>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e0bc      	b.n	8007a46 <HAL_TIM_ConfigClockSource+0x19a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2238      	movs	r2, #56	; 0x38
 80078d0:	2101      	movs	r1, #1
 80078d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2239      	movs	r2, #57	; 0x39
 80078d8:	2102      	movs	r1, #2
 80078da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2277      	movs	r2, #119	; 0x77
 80078e8:	4393      	bics	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a58      	ldr	r2, [pc, #352]	; (8007a50 <HAL_TIM_ConfigClockSource+0x1a4>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2280      	movs	r2, #128	; 0x80
 8007902:	0192      	lsls	r2, r2, #6
 8007904:	4293      	cmp	r3, r2
 8007906:	d040      	beq.n	800798a <HAL_TIM_ConfigClockSource+0xde>
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	0192      	lsls	r2, r2, #6
 800790c:	4293      	cmp	r3, r2
 800790e:	d900      	bls.n	8007912 <HAL_TIM_ConfigClockSource+0x66>
 8007910:	e088      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 8007912:	2280      	movs	r2, #128	; 0x80
 8007914:	0152      	lsls	r2, r2, #5
 8007916:	4293      	cmp	r3, r2
 8007918:	d100      	bne.n	800791c <HAL_TIM_ConfigClockSource+0x70>
 800791a:	e088      	b.n	8007a2e <HAL_TIM_ConfigClockSource+0x182>
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	0152      	lsls	r2, r2, #5
 8007920:	4293      	cmp	r3, r2
 8007922:	d900      	bls.n	8007926 <HAL_TIM_ConfigClockSource+0x7a>
 8007924:	e07e      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 8007926:	2b70      	cmp	r3, #112	; 0x70
 8007928:	d018      	beq.n	800795c <HAL_TIM_ConfigClockSource+0xb0>
 800792a:	d900      	bls.n	800792e <HAL_TIM_ConfigClockSource+0x82>
 800792c:	e07a      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 800792e:	2b60      	cmp	r3, #96	; 0x60
 8007930:	d04f      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x126>
 8007932:	d900      	bls.n	8007936 <HAL_TIM_ConfigClockSource+0x8a>
 8007934:	e076      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 8007936:	2b50      	cmp	r3, #80	; 0x50
 8007938:	d03b      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x106>
 800793a:	d900      	bls.n	800793e <HAL_TIM_ConfigClockSource+0x92>
 800793c:	e072      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d057      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x146>
 8007942:	d900      	bls.n	8007946 <HAL_TIM_ConfigClockSource+0x9a>
 8007944:	e06e      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 8007946:	2b30      	cmp	r3, #48	; 0x30
 8007948:	d063      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x166>
 800794a:	d86b      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 800794c:	2b20      	cmp	r3, #32
 800794e:	d060      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x166>
 8007950:	d868      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05d      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x166>
 8007956:	2b10      	cmp	r3, #16
 8007958:	d05b      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x166>
 800795a:	e063      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796c:	f000 fbae 	bl	80080cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2277      	movs	r2, #119	; 0x77
 800797c:	4313      	orrs	r3, r2
 800797e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	609a      	str	r2, [r3, #8]
      break;
 8007988:	e052      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	f000 fb97 	bl	80080cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	01c9      	lsls	r1, r1, #7
 80079ac:	430a      	orrs	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
      break;
 80079b0:	e03e      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	001a      	movs	r2, r3
 80079c0:	f000 fa42 	bl	8007e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2150      	movs	r1, #80	; 0x50
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fb64 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 80079d0:	e02e      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079de:	001a      	movs	r2, r3
 80079e0:	f000 faa2 	bl	8007f28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2160      	movs	r1, #96	; 0x60
 80079ea:	0018      	movs	r0, r3
 80079ec:	f000 fb54 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 80079f0:	e01e      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fe:	001a      	movs	r2, r3
 8007a00:	f000 fa22 	bl	8007e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2140      	movs	r1, #64	; 0x40
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f000 fb44 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 8007a10:	e00e      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	0019      	movs	r1, r3
 8007a1c:	0010      	movs	r0, r2
 8007a1e:	f000 fb3b 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 8007a22:	e005      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a24:	230f      	movs	r3, #15
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
      break;
 8007a2c:	e000      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a2e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2239      	movs	r2, #57	; 0x39
 8007a34:	2101      	movs	r1, #1
 8007a36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2238      	movs	r2, #56	; 0x38
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	5499      	strb	r1, [r3, r2]

  return status;
 8007a40:	230f      	movs	r3, #15
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	781b      	ldrb	r3, [r3, #0]
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b004      	add	sp, #16
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	ffff00ff 	.word	0xffff00ff

08007a54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d01e      	beq.n	8007aa6 <HAL_TIM_ReadCapturedValue+0x52>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b0c      	cmp	r3, #12
 8007a6c:	d820      	bhi.n	8007ab0 <HAL_TIM_ReadCapturedValue+0x5c>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d013      	beq.n	8007a9c <HAL_TIM_ReadCapturedValue+0x48>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d81a      	bhi.n	8007ab0 <HAL_TIM_ReadCapturedValue+0x5c>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_TIM_ReadCapturedValue+0x34>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d005      	beq.n	8007a92 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8007a86:	e013      	b.n	8007ab0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8e:	60fb      	str	r3, [r7, #12]
      break;
 8007a90:	e00f      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	60fb      	str	r3, [r7, #12]
      break;
 8007a9a:	e00a      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	60fb      	str	r3, [r7, #12]
      break;
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	60fb      	str	r3, [r7, #12]
      break;
 8007aae:	e000      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007ab0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b004      	add	sp, #16
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ad4:	46c0      	nop			; (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd80      	pop	{r7, pc}

08007aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	2380      	movs	r3, #128	; 0x80
 8007b00:	05db      	lsls	r3, r3, #23
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d007      	beq.n	8007b16 <TIM_Base_SetConfig+0x2a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <TIM_Base_SetConfig+0x9c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0x2a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <TIM_Base_SetConfig+0xa0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d108      	bne.n	8007b28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2270      	movs	r2, #112	; 0x70
 8007b1a:	4393      	bics	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	2380      	movs	r3, #128	; 0x80
 8007b2c:	05db      	lsls	r3, r3, #23
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d007      	beq.n	8007b42 <TIM_Base_SetConfig+0x56>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <TIM_Base_SetConfig+0x9c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d003      	beq.n	8007b42 <TIM_Base_SetConfig+0x56>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a13      	ldr	r2, [pc, #76]	; (8007b8c <TIM_Base_SetConfig+0xa0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d108      	bne.n	8007b54 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4a12      	ldr	r2, [pc, #72]	; (8007b90 <TIM_Base_SetConfig+0xa4>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	4393      	bics	r3, r2
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	615a      	str	r2, [r3, #20]
}
 8007b80:	46c0      	nop			; (mov r8, r8)
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b004      	add	sp, #16
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40010800 	.word	0x40010800
 8007b8c:	40011400 	.word	0x40011400
 8007b90:	fffffcff 	.word	0xfffffcff

08007b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4393      	bics	r3, r2
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2270      	movs	r2, #112	; 0x70
 8007bc2:	4393      	bics	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	4393      	bics	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4393      	bics	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	621a      	str	r2, [r3, #32]
}
 8007c04:	46c0      	nop			; (mov r8, r8)
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b006      	add	sp, #24
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	4393      	bics	r3, r2
 8007c1e:	001a      	movs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <TIM_OC2_SetConfig+0x7c>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4a12      	ldr	r2, [pc, #72]	; (8007c8c <TIM_OC2_SetConfig+0x80>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2220      	movs	r2, #32
 8007c56:	4393      	bics	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	46c0      	nop			; (mov r8, r8)
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b006      	add	sp, #24
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	ffff8fff 	.word	0xffff8fff
 8007c8c:	fffffcff 	.word	0xfffffcff

08007c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <TIM_OC3_SetConfig+0x78>)
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2270      	movs	r2, #112	; 0x70
 8007cbc:	4393      	bics	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	4393      	bics	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <TIM_OC3_SetConfig+0x7c>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	621a      	str	r2, [r3, #32]
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b006      	add	sp, #24
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	fffffeff 	.word	0xfffffeff
 8007d0c:	fffffdff 	.word	0xfffffdff

08007d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <TIM_OC4_SetConfig+0x7c>)
 8007d20:	401a      	ands	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <TIM_OC4_SetConfig+0x80>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a14      	ldr	r2, [pc, #80]	; (8007d94 <TIM_OC4_SetConfig+0x84>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4a10      	ldr	r2, [pc, #64]	; (8007d98 <TIM_OC4_SetConfig+0x88>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	031b      	lsls	r3, r3, #12
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b006      	add	sp, #24
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	ffffefff 	.word	0xffffefff
 8007d90:	ffff8fff 	.word	0xffff8fff
 8007d94:	fffffcff 	.word	0xfffffcff
 8007d98:	ffffdfff 	.word	0xffffdfff

08007d9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	2201      	movs	r2, #1
 8007db0:	4393      	bics	r3, r2
 8007db2:	001a      	movs	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	2380      	movs	r3, #128	; 0x80
 8007dc8:	05db      	lsls	r3, r3, #23
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d007      	beq.n	8007dde <TIM_TI1_SetConfig+0x42>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <TIM_TI1_SetConfig+0xa4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_TI1_SetConfig+0x42>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <TIM_TI1_SetConfig+0xa8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d101      	bne.n	8007de2 <TIM_TI1_SetConfig+0x46>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <TIM_TI1_SetConfig+0x48>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2203      	movs	r2, #3
 8007dec:	4393      	bics	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e003      	b.n	8007e02 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	22f0      	movs	r2, #240	; 0xf0
 8007e06:	4393      	bics	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	22ff      	movs	r2, #255	; 0xff
 8007e10:	4013      	ands	r3, r2
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	4393      	bics	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	220a      	movs	r2, #10
 8007e24:	4013      	ands	r3, r2
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b006      	add	sp, #24
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40010800 	.word	0x40010800
 8007e44:	40011400 	.word	0x40011400

08007e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4393      	bics	r3, r2
 8007e62:	001a      	movs	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	22f0      	movs	r2, #240	; 0xf0
 8007e72:	4393      	bics	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	220a      	movs	r2, #10
 8007e84:	4393      	bics	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	621a      	str	r2, [r3, #32]
}
 8007e9c:	46c0      	nop			; (mov r8, r8)
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b006      	add	sp, #24
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	4393      	bics	r3, r2
 8007eba:	001a      	movs	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <TIM_TI2_SetConfig+0x7c>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <TIM_TI2_SetConfig+0x80>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	031b      	lsls	r3, r3, #12
 8007eea:	041b      	lsls	r3, r3, #16
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	22a0      	movs	r2, #160	; 0xa0
 8007ef8:	4393      	bics	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	22a0      	movs	r2, #160	; 0xa0
 8007f02:	4013      	ands	r3, r2
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b006      	add	sp, #24
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	fffffcff 	.word	0xfffffcff
 8007f24:	ffff0fff 	.word	0xffff0fff

08007f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	4393      	bics	r3, r2
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <TIM_TI2_ConfigInputStage+0x60>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	22a0      	movs	r2, #160	; 0xa0
 8007f64:	4393      	bics	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b006      	add	sp, #24
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	ffff0fff 	.word	0xffff0fff

08007f8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <TIM_TI3_SetConfig+0x78>)
 8007fa0:	401a      	ands	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	4393      	bics	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	22f0      	movs	r2, #240	; 0xf0
 8007fc6:	4393      	bics	r3, r2
 8007fc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	22ff      	movs	r2, #255	; 0xff
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4a0b      	ldr	r2, [pc, #44]	; (8008008 <TIM_TI3_SetConfig+0x7c>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	021a      	lsls	r2, r3, #8
 8007fe4:	23a0      	movs	r3, #160	; 0xa0
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	4013      	ands	r3, r2
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	621a      	str	r2, [r3, #32]
}
 8007ffc:	46c0      	nop			; (mov r8, r8)
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b006      	add	sp, #24
 8008002:	bd80      	pop	{r7, pc}
 8008004:	fffffeff 	.word	0xfffffeff
 8008008:	fffff5ff 	.word	0xfffff5ff

0800800c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	4a1a      	ldr	r2, [pc, #104]	; (8008088 <TIM_TI4_SetConfig+0x7c>)
 8008020:	401a      	ands	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4a15      	ldr	r2, [pc, #84]	; (800808c <TIM_TI4_SetConfig+0x80>)
 8008036:	4013      	ands	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4a12      	ldr	r2, [pc, #72]	; (8008090 <TIM_TI4_SetConfig+0x84>)
 8008048:	4013      	ands	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	031b      	lsls	r3, r3, #12
 8008050:	041b      	lsls	r3, r3, #16
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4a0d      	ldr	r2, [pc, #52]	; (8008094 <TIM_TI4_SetConfig+0x88>)
 800805e:	4013      	ands	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	031a      	lsls	r2, r3, #12
 8008066:	23a0      	movs	r3, #160	; 0xa0
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	4013      	ands	r3, r2
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	46bd      	mov	sp, r7
 8008082:	b006      	add	sp, #24
 8008084:	bd80      	pop	{r7, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	ffffefff 	.word	0xffffefff
 800808c:	fffffcff 	.word	0xfffffcff
 8008090:	ffff0fff 	.word	0xffff0fff
 8008094:	ffff5fff 	.word	0xffff5fff

08008098 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2270      	movs	r2, #112	; 0x70
 80080ac:	4393      	bics	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	2207      	movs	r2, #7
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	609a      	str	r2, [r3, #8]
}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b004      	add	sp, #16
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	4a09      	ldr	r2, [pc, #36]	; (8008108 <TIM_ETR_SetConfig+0x3c>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	021a      	lsls	r2, r3, #8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	46c0      	nop			; (mov r8, r8)
 8008102:	46bd      	mov	sp, r7
 8008104:	b006      	add	sp, #24
 8008106:	bd80      	pop	{r7, pc}
 8008108:	ffff00ff 	.word	0xffff00ff

0800810c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	221f      	movs	r2, #31
 800811c:	4013      	ands	r3, r2
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	0013      	movs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	43d2      	mvns	r2, r2
 800812e:	401a      	ands	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	211f      	movs	r1, #31
 800813c:	400b      	ands	r3, r1
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4099      	lsls	r1, r3
 8008142:	000b      	movs	r3, r1
 8008144:	431a      	orrs	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b006      	add	sp, #24
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2238      	movs	r2, #56	; 0x38
 8008162:	5c9b      	ldrb	r3, [r3, r2]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008168:	2302      	movs	r3, #2
 800816a:	e042      	b.n	80081f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2238      	movs	r2, #56	; 0x38
 8008170:	2101      	movs	r1, #1
 8008172:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2239      	movs	r2, #57	; 0x39
 8008178:	2102      	movs	r1, #2
 800817a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2270      	movs	r2, #112	; 0x70
 8008190:	4393      	bics	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	2380      	movs	r3, #128	; 0x80
 80081ac:	05db      	lsls	r3, r3, #23
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d009      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a11      	ldr	r2, [pc, #68]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d10c      	bne.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2280      	movs	r2, #128	; 0x80
 80081ca:	4393      	bics	r3, r2
 80081cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2239      	movs	r2, #57	; 0x39
 80081e4:	2101      	movs	r1, #1
 80081e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2238      	movs	r2, #56	; 0x38
 80081ec:	2100      	movs	r1, #0
 80081ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	0018      	movs	r0, r3
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b004      	add	sp, #16
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	40010800 	.word	0x40010800
 8008200:	40011400 	.word	0x40011400

08008204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e044      	b.n	80082a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2278      	movs	r2, #120	; 0x78
 8008222:	2100      	movs	r1, #0
 8008224:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	0018      	movs	r0, r3
 800822a:	f7fb ff09 	bl	8004040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2224      	movs	r2, #36	; 0x24
 8008232:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2101      	movs	r1, #1
 8008240:	438a      	bics	r2, r1
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	0018      	movs	r0, r3
 8008248:	f000 f830 	bl	80082ac <UART_SetConfig>
 800824c:	0003      	movs	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e024      	b.n	80082a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0018      	movs	r0, r3
 8008262:	f000 faa7 	bl	80087b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	490d      	ldr	r1, [pc, #52]	; (80082a8 <HAL_UART_Init+0xa4>)
 8008272:	400a      	ands	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	212a      	movs	r1, #42	; 0x2a
 8008282:	438a      	bics	r2, r1
 8008284:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2101      	movs	r1, #1
 8008292:	430a      	orrs	r2, r1
 8008294:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	f000 fb3f 	bl	800891c <UART_CheckIdleState>
 800829e:	0003      	movs	r3, r0
}
 80082a0:	0018      	movs	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	b002      	add	sp, #8
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	ffffb7ff 	.word	0xffffb7ff

080082ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	b5b0      	push	{r4, r5, r7, lr}
 80082ae:	b08e      	sub	sp, #56	; 0x38
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b4:	231a      	movs	r3, #26
 80082b6:	2218      	movs	r2, #24
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	19db      	adds	r3, r3, r7
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4ac6      	ldr	r2, [pc, #792]	; (80085f8 <UART_SetConfig+0x34c>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	0019      	movs	r1, r3
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ea:	430a      	orrs	r2, r1
 80082ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	4ac1      	ldr	r2, [pc, #772]	; (80085fc <UART_SetConfig+0x350>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	0019      	movs	r1, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4abb      	ldr	r2, [pc, #748]	; (8008600 <UART_SetConfig+0x354>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d004      	beq.n	8008320 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831c:	4313      	orrs	r3, r2
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	4ab7      	ldr	r2, [pc, #732]	; (8008604 <UART_SetConfig+0x358>)
 8008328:	4013      	ands	r3, r2
 800832a:	0019      	movs	r1, r3
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4ab3      	ldr	r2, [pc, #716]	; (8008608 <UART_SetConfig+0x35c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d131      	bne.n	80083a4 <UART_SetConfig+0xf8>
 8008340:	4bb2      	ldr	r3, [pc, #712]	; (800860c <UART_SetConfig+0x360>)
 8008342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008344:	2203      	movs	r2, #3
 8008346:	4013      	ands	r3, r2
 8008348:	2b03      	cmp	r3, #3
 800834a:	d01d      	beq.n	8008388 <UART_SetConfig+0xdc>
 800834c:	d823      	bhi.n	8008396 <UART_SetConfig+0xea>
 800834e:	2b02      	cmp	r3, #2
 8008350:	d00c      	beq.n	800836c <UART_SetConfig+0xc0>
 8008352:	d820      	bhi.n	8008396 <UART_SetConfig+0xea>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <UART_SetConfig+0xb2>
 8008358:	2b01      	cmp	r3, #1
 800835a:	d00e      	beq.n	800837a <UART_SetConfig+0xce>
 800835c:	e01b      	b.n	8008396 <UART_SetConfig+0xea>
 800835e:	231b      	movs	r3, #27
 8008360:	2218      	movs	r2, #24
 8008362:	189b      	adds	r3, r3, r2
 8008364:	19db      	adds	r3, r3, r7
 8008366:	2201      	movs	r2, #1
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e09c      	b.n	80084a6 <UART_SetConfig+0x1fa>
 800836c:	231b      	movs	r3, #27
 800836e:	2218      	movs	r2, #24
 8008370:	189b      	adds	r3, r3, r2
 8008372:	19db      	adds	r3, r3, r7
 8008374:	2202      	movs	r2, #2
 8008376:	701a      	strb	r2, [r3, #0]
 8008378:	e095      	b.n	80084a6 <UART_SetConfig+0x1fa>
 800837a:	231b      	movs	r3, #27
 800837c:	2218      	movs	r2, #24
 800837e:	189b      	adds	r3, r3, r2
 8008380:	19db      	adds	r3, r3, r7
 8008382:	2204      	movs	r2, #4
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e08e      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008388:	231b      	movs	r3, #27
 800838a:	2218      	movs	r2, #24
 800838c:	189b      	adds	r3, r3, r2
 800838e:	19db      	adds	r3, r3, r7
 8008390:	2208      	movs	r2, #8
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e087      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008396:	231b      	movs	r3, #27
 8008398:	2218      	movs	r2, #24
 800839a:	189b      	adds	r3, r3, r2
 800839c:	19db      	adds	r3, r3, r7
 800839e:	2210      	movs	r2, #16
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e080      	b.n	80084a6 <UART_SetConfig+0x1fa>
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a99      	ldr	r2, [pc, #612]	; (8008610 <UART_SetConfig+0x364>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d131      	bne.n	8008412 <UART_SetConfig+0x166>
 80083ae:	4b97      	ldr	r3, [pc, #604]	; (800860c <UART_SetConfig+0x360>)
 80083b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b2:	220c      	movs	r2, #12
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b0c      	cmp	r3, #12
 80083b8:	d01d      	beq.n	80083f6 <UART_SetConfig+0x14a>
 80083ba:	d823      	bhi.n	8008404 <UART_SetConfig+0x158>
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d00c      	beq.n	80083da <UART_SetConfig+0x12e>
 80083c0:	d820      	bhi.n	8008404 <UART_SetConfig+0x158>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <UART_SetConfig+0x120>
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d00e      	beq.n	80083e8 <UART_SetConfig+0x13c>
 80083ca:	e01b      	b.n	8008404 <UART_SetConfig+0x158>
 80083cc:	231b      	movs	r3, #27
 80083ce:	2218      	movs	r2, #24
 80083d0:	189b      	adds	r3, r3, r2
 80083d2:	19db      	adds	r3, r3, r7
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e065      	b.n	80084a6 <UART_SetConfig+0x1fa>
 80083da:	231b      	movs	r3, #27
 80083dc:	2218      	movs	r2, #24
 80083de:	189b      	adds	r3, r3, r2
 80083e0:	19db      	adds	r3, r3, r7
 80083e2:	2202      	movs	r2, #2
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e05e      	b.n	80084a6 <UART_SetConfig+0x1fa>
 80083e8:	231b      	movs	r3, #27
 80083ea:	2218      	movs	r2, #24
 80083ec:	189b      	adds	r3, r3, r2
 80083ee:	19db      	adds	r3, r3, r7
 80083f0:	2204      	movs	r2, #4
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e057      	b.n	80084a6 <UART_SetConfig+0x1fa>
 80083f6:	231b      	movs	r3, #27
 80083f8:	2218      	movs	r2, #24
 80083fa:	189b      	adds	r3, r3, r2
 80083fc:	19db      	adds	r3, r3, r7
 80083fe:	2208      	movs	r2, #8
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e050      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008404:	231b      	movs	r3, #27
 8008406:	2218      	movs	r2, #24
 8008408:	189b      	adds	r3, r3, r2
 800840a:	19db      	adds	r3, r3, r7
 800840c:	2210      	movs	r2, #16
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e049      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a7a      	ldr	r2, [pc, #488]	; (8008600 <UART_SetConfig+0x354>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d13e      	bne.n	800849a <UART_SetConfig+0x1ee>
 800841c:	4b7b      	ldr	r3, [pc, #492]	; (800860c <UART_SetConfig+0x360>)
 800841e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008420:	23c0      	movs	r3, #192	; 0xc0
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	4013      	ands	r3, r2
 8008426:	22c0      	movs	r2, #192	; 0xc0
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	4293      	cmp	r3, r2
 800842c:	d027      	beq.n	800847e <UART_SetConfig+0x1d2>
 800842e:	22c0      	movs	r2, #192	; 0xc0
 8008430:	0112      	lsls	r2, r2, #4
 8008432:	4293      	cmp	r3, r2
 8008434:	d82a      	bhi.n	800848c <UART_SetConfig+0x1e0>
 8008436:	2280      	movs	r2, #128	; 0x80
 8008438:	0112      	lsls	r2, r2, #4
 800843a:	4293      	cmp	r3, r2
 800843c:	d011      	beq.n	8008462 <UART_SetConfig+0x1b6>
 800843e:	2280      	movs	r2, #128	; 0x80
 8008440:	0112      	lsls	r2, r2, #4
 8008442:	4293      	cmp	r3, r2
 8008444:	d822      	bhi.n	800848c <UART_SetConfig+0x1e0>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <UART_SetConfig+0x1a8>
 800844a:	2280      	movs	r2, #128	; 0x80
 800844c:	00d2      	lsls	r2, r2, #3
 800844e:	4293      	cmp	r3, r2
 8008450:	d00e      	beq.n	8008470 <UART_SetConfig+0x1c4>
 8008452:	e01b      	b.n	800848c <UART_SetConfig+0x1e0>
 8008454:	231b      	movs	r3, #27
 8008456:	2218      	movs	r2, #24
 8008458:	189b      	adds	r3, r3, r2
 800845a:	19db      	adds	r3, r3, r7
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e021      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008462:	231b      	movs	r3, #27
 8008464:	2218      	movs	r2, #24
 8008466:	189b      	adds	r3, r3, r2
 8008468:	19db      	adds	r3, r3, r7
 800846a:	2202      	movs	r2, #2
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e01a      	b.n	80084a6 <UART_SetConfig+0x1fa>
 8008470:	231b      	movs	r3, #27
 8008472:	2218      	movs	r2, #24
 8008474:	189b      	adds	r3, r3, r2
 8008476:	19db      	adds	r3, r3, r7
 8008478:	2204      	movs	r2, #4
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e013      	b.n	80084a6 <UART_SetConfig+0x1fa>
 800847e:	231b      	movs	r3, #27
 8008480:	2218      	movs	r2, #24
 8008482:	189b      	adds	r3, r3, r2
 8008484:	19db      	adds	r3, r3, r7
 8008486:	2208      	movs	r2, #8
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e00c      	b.n	80084a6 <UART_SetConfig+0x1fa>
 800848c:	231b      	movs	r3, #27
 800848e:	2218      	movs	r2, #24
 8008490:	189b      	adds	r3, r3, r2
 8008492:	19db      	adds	r3, r3, r7
 8008494:	2210      	movs	r2, #16
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e005      	b.n	80084a6 <UART_SetConfig+0x1fa>
 800849a:	231b      	movs	r3, #27
 800849c:	2218      	movs	r2, #24
 800849e:	189b      	adds	r3, r3, r2
 80084a0:	19db      	adds	r3, r3, r7
 80084a2:	2210      	movs	r2, #16
 80084a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a55      	ldr	r2, [pc, #340]	; (8008600 <UART_SetConfig+0x354>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d000      	beq.n	80084b2 <UART_SetConfig+0x206>
 80084b0:	e084      	b.n	80085bc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084b2:	231b      	movs	r3, #27
 80084b4:	2218      	movs	r2, #24
 80084b6:	189b      	adds	r3, r3, r2
 80084b8:	19db      	adds	r3, r3, r7
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d01d      	beq.n	80084fc <UART_SetConfig+0x250>
 80084c0:	dc20      	bgt.n	8008504 <UART_SetConfig+0x258>
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d015      	beq.n	80084f2 <UART_SetConfig+0x246>
 80084c6:	dc1d      	bgt.n	8008504 <UART_SetConfig+0x258>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <UART_SetConfig+0x226>
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d005      	beq.n	80084dc <UART_SetConfig+0x230>
 80084d0:	e018      	b.n	8008504 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d2:	f7fe f8f3 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 80084d6:	0003      	movs	r3, r0
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084da:	e01c      	b.n	8008516 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084dc:	4b4b      	ldr	r3, [pc, #300]	; (800860c <UART_SetConfig+0x360>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2210      	movs	r2, #16
 80084e2:	4013      	ands	r3, r2
 80084e4:	d002      	beq.n	80084ec <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80084e6:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <UART_SetConfig+0x368>)
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084ea:	e014      	b.n	8008516 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80084ec:	4b4a      	ldr	r3, [pc, #296]	; (8008618 <UART_SetConfig+0x36c>)
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084f0:	e011      	b.n	8008516 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084f2:	f7fe f833 	bl	800655c <HAL_RCC_GetSysClockFreq>
 80084f6:	0003      	movs	r3, r0
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084fa:	e00c      	b.n	8008516 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008502:	e008      	b.n	8008516 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008508:	231a      	movs	r3, #26
 800850a:	2218      	movs	r2, #24
 800850c:	189b      	adds	r3, r3, r2
 800850e:	19db      	adds	r3, r3, r7
 8008510:	2201      	movs	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
        break;
 8008514:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d100      	bne.n	800851e <UART_SetConfig+0x272>
 800851c:	e132      	b.n	8008784 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	0013      	movs	r3, r2
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	189b      	adds	r3, r3, r2
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	429a      	cmp	r2, r3
 800852c:	d305      	bcc.n	800853a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008536:	429a      	cmp	r2, r3
 8008538:	d906      	bls.n	8008548 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800853a:	231a      	movs	r3, #26
 800853c:	2218      	movs	r2, #24
 800853e:	189b      	adds	r3, r3, r2
 8008540:	19db      	adds	r3, r3, r7
 8008542:	2201      	movs	r2, #1
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e11d      	b.n	8008784 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	6939      	ldr	r1, [r7, #16]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	000b      	movs	r3, r1
 8008556:	0e1b      	lsrs	r3, r3, #24
 8008558:	0010      	movs	r0, r2
 800855a:	0205      	lsls	r5, r0, #8
 800855c:	431d      	orrs	r5, r3
 800855e:	000b      	movs	r3, r1
 8008560:	021c      	lsls	r4, r3, #8
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	68b8      	ldr	r0, [r7, #8]
 8008570:	68f9      	ldr	r1, [r7, #12]
 8008572:	1900      	adds	r0, r0, r4
 8008574:	4169      	adcs	r1, r5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	2300      	movs	r3, #0
 800857e:	607b      	str	r3, [r7, #4]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f7f7 ffca 	bl	800051c <__aeabi_uldivmod>
 8008588:	0002      	movs	r2, r0
 800858a:	000b      	movs	r3, r1
 800858c:	0013      	movs	r3, r2
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008592:	23c0      	movs	r3, #192	; 0xc0
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	429a      	cmp	r2, r3
 8008598:	d309      	bcc.n	80085ae <UART_SetConfig+0x302>
 800859a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	035b      	lsls	r3, r3, #13
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d204      	bcs.n	80085ae <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	60da      	str	r2, [r3, #12]
 80085ac:	e0ea      	b.n	8008784 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80085ae:	231a      	movs	r3, #26
 80085b0:	2218      	movs	r2, #24
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	19db      	adds	r3, r3, r7
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e0e3      	b.n	8008784 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	2380      	movs	r3, #128	; 0x80
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d000      	beq.n	80085ca <UART_SetConfig+0x31e>
 80085c8:	e085      	b.n	80086d6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80085ca:	231b      	movs	r3, #27
 80085cc:	2218      	movs	r2, #24
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	19db      	adds	r3, r3, r7
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d837      	bhi.n	8008648 <UART_SetConfig+0x39c>
 80085d8:	009a      	lsls	r2, r3, #2
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <UART_SetConfig+0x370>)
 80085dc:	18d3      	adds	r3, r2, r3
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e2:	f7fe f86b 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 80085e6:	0003      	movs	r3, r0
 80085e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085ea:	e036      	b.n	800865a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fe f87c 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 80085f0:	0003      	movs	r3, r0
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085f4:	e031      	b.n	800865a <UART_SetConfig+0x3ae>
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	efff69f3 	.word	0xefff69f3
 80085fc:	ffffcfff 	.word	0xffffcfff
 8008600:	40004800 	.word	0x40004800
 8008604:	fffff4ff 	.word	0xfffff4ff
 8008608:	40013800 	.word	0x40013800
 800860c:	40021000 	.word	0x40021000
 8008610:	40004400 	.word	0x40004400
 8008614:	003d0900 	.word	0x003d0900
 8008618:	00f42400 	.word	0x00f42400
 800861c:	0800b7e4 	.word	0x0800b7e4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008620:	4b60      	ldr	r3, [pc, #384]	; (80087a4 <UART_SetConfig+0x4f8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2210      	movs	r2, #16
 8008626:	4013      	ands	r3, r2
 8008628:	d002      	beq.n	8008630 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800862a:	4b5f      	ldr	r3, [pc, #380]	; (80087a8 <UART_SetConfig+0x4fc>)
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800862e:	e014      	b.n	800865a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8008630:	4b5e      	ldr	r3, [pc, #376]	; (80087ac <UART_SetConfig+0x500>)
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008634:	e011      	b.n	800865a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008636:	f7fd ff91 	bl	800655c <HAL_RCC_GetSysClockFreq>
 800863a:	0003      	movs	r3, r0
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800863e:	e00c      	b.n	800865a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008640:	2380      	movs	r3, #128	; 0x80
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008646:	e008      	b.n	800865a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800864c:	231a      	movs	r3, #26
 800864e:	2218      	movs	r2, #24
 8008650:	189b      	adds	r3, r3, r2
 8008652:	19db      	adds	r3, r3, r7
 8008654:	2201      	movs	r2, #1
 8008656:	701a      	strb	r2, [r3, #0]
        break;
 8008658:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d100      	bne.n	8008662 <UART_SetConfig+0x3b6>
 8008660:	e090      	b.n	8008784 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	005a      	lsls	r2, r3, #1
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	18d2      	adds	r2, r2, r3
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	0019      	movs	r1, r3
 8008674:	0010      	movs	r0, r2
 8008676:	f7f7 fd63 	bl	8000140 <__udivsi3>
 800867a:	0003      	movs	r3, r0
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	2b0f      	cmp	r3, #15
 8008682:	d921      	bls.n	80086c8 <UART_SetConfig+0x41c>
 8008684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	025b      	lsls	r3, r3, #9
 800868a:	429a      	cmp	r2, r3
 800868c:	d21c      	bcs.n	80086c8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	b29a      	uxth	r2, r3
 8008692:	200e      	movs	r0, #14
 8008694:	2418      	movs	r4, #24
 8008696:	1903      	adds	r3, r0, r4
 8008698:	19db      	adds	r3, r3, r7
 800869a:	210f      	movs	r1, #15
 800869c:	438a      	bics	r2, r1
 800869e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2207      	movs	r2, #7
 80086a8:	4013      	ands	r3, r2
 80086aa:	b299      	uxth	r1, r3
 80086ac:	1903      	adds	r3, r0, r4
 80086ae:	19db      	adds	r3, r3, r7
 80086b0:	1902      	adds	r2, r0, r4
 80086b2:	19d2      	adds	r2, r2, r7
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	1902      	adds	r2, r0, r4
 80086c0:	19d2      	adds	r2, r2, r7
 80086c2:	8812      	ldrh	r2, [r2, #0]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e05d      	b.n	8008784 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80086c8:	231a      	movs	r3, #26
 80086ca:	2218      	movs	r2, #24
 80086cc:	189b      	adds	r3, r3, r2
 80086ce:	19db      	adds	r3, r3, r7
 80086d0:	2201      	movs	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e056      	b.n	8008784 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d6:	231b      	movs	r3, #27
 80086d8:	2218      	movs	r2, #24
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	19db      	adds	r3, r3, r7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d822      	bhi.n	800872a <UART_SetConfig+0x47e>
 80086e4:	009a      	lsls	r2, r3, #2
 80086e6:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <UART_SetConfig+0x504>)
 80086e8:	18d3      	adds	r3, r2, r3
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ee:	f7fd ffe5 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 80086f2:	0003      	movs	r3, r0
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f6:	e021      	b.n	800873c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7fd fff6 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 80086fc:	0003      	movs	r3, r0
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008700:	e01c      	b.n	800873c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008702:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <UART_SetConfig+0x4f8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2210      	movs	r2, #16
 8008708:	4013      	ands	r3, r2
 800870a:	d002      	beq.n	8008712 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800870c:	4b26      	ldr	r3, [pc, #152]	; (80087a8 <UART_SetConfig+0x4fc>)
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008710:	e014      	b.n	800873c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8008712:	4b26      	ldr	r3, [pc, #152]	; (80087ac <UART_SetConfig+0x500>)
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008716:	e011      	b.n	800873c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008718:	f7fd ff20 	bl	800655c <HAL_RCC_GetSysClockFreq>
 800871c:	0003      	movs	r3, r0
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008720:	e00c      	b.n	800873c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008722:	2380      	movs	r3, #128	; 0x80
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008728:	e008      	b.n	800873c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800872e:	231a      	movs	r3, #26
 8008730:	2218      	movs	r2, #24
 8008732:	189b      	adds	r3, r3, r2
 8008734:	19db      	adds	r3, r3, r7
 8008736:	2201      	movs	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]
        break;
 800873a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d020      	beq.n	8008784 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	085a      	lsrs	r2, r3, #1
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	18d2      	adds	r2, r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	0019      	movs	r1, r3
 8008752:	0010      	movs	r0, r2
 8008754:	f7f7 fcf4 	bl	8000140 <__udivsi3>
 8008758:	0003      	movs	r3, r0
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	2b0f      	cmp	r3, #15
 8008760:	d90a      	bls.n	8008778 <UART_SetConfig+0x4cc>
 8008762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	025b      	lsls	r3, r3, #9
 8008768:	429a      	cmp	r2, r3
 800876a:	d205      	bcs.n	8008778 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	b29a      	uxth	r2, r3
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	e005      	b.n	8008784 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008778:	231a      	movs	r3, #26
 800877a:	2218      	movs	r2, #24
 800877c:	189b      	adds	r3, r3, r2
 800877e:	19db      	adds	r3, r3, r7
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2200      	movs	r2, #0
 8008788:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2200      	movs	r2, #0
 800878e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008790:	231a      	movs	r3, #26
 8008792:	2218      	movs	r2, #24
 8008794:	189b      	adds	r3, r3, r2
 8008796:	19db      	adds	r3, r3, r7
 8008798:	781b      	ldrb	r3, [r3, #0]
}
 800879a:	0018      	movs	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	b00e      	add	sp, #56	; 0x38
 80087a0:	bdb0      	pop	{r4, r5, r7, pc}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	40021000 	.word	0x40021000
 80087a8:	003d0900 	.word	0x003d0900
 80087ac:	00f42400 	.word	0x00f42400
 80087b0:	0800b808 	.word	0x0800b808

080087b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2201      	movs	r2, #1
 80087c2:	4013      	ands	r3, r2
 80087c4:	d00b      	beq.n	80087de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4a4a      	ldr	r2, [pc, #296]	; (80088f8 <UART_AdvFeatureConfig+0x144>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	0019      	movs	r1, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2202      	movs	r2, #2
 80087e4:	4013      	ands	r3, r2
 80087e6:	d00b      	beq.n	8008800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4a43      	ldr	r2, [pc, #268]	; (80088fc <UART_AdvFeatureConfig+0x148>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	0019      	movs	r1, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	2204      	movs	r2, #4
 8008806:	4013      	ands	r3, r2
 8008808:	d00b      	beq.n	8008822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	4a3b      	ldr	r2, [pc, #236]	; (8008900 <UART_AdvFeatureConfig+0x14c>)
 8008812:	4013      	ands	r3, r2
 8008814:	0019      	movs	r1, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2208      	movs	r2, #8
 8008828:	4013      	ands	r3, r2
 800882a:	d00b      	beq.n	8008844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4a34      	ldr	r2, [pc, #208]	; (8008904 <UART_AdvFeatureConfig+0x150>)
 8008834:	4013      	ands	r3, r2
 8008836:	0019      	movs	r1, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2210      	movs	r2, #16
 800884a:	4013      	ands	r3, r2
 800884c:	d00b      	beq.n	8008866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <UART_AdvFeatureConfig+0x154>)
 8008856:	4013      	ands	r3, r2
 8008858:	0019      	movs	r1, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	2220      	movs	r2, #32
 800886c:	4013      	ands	r3, r2
 800886e:	d00b      	beq.n	8008888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	4a25      	ldr	r2, [pc, #148]	; (800890c <UART_AdvFeatureConfig+0x158>)
 8008878:	4013      	ands	r3, r2
 800887a:	0019      	movs	r1, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2240      	movs	r2, #64	; 0x40
 800888e:	4013      	ands	r3, r2
 8008890:	d01d      	beq.n	80088ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <UART_AdvFeatureConfig+0x15c>)
 800889a:	4013      	ands	r3, r2
 800889c:	0019      	movs	r1, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ae:	2380      	movs	r3, #128	; 0x80
 80088b0:	035b      	lsls	r3, r3, #13
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d10b      	bne.n	80088ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <UART_AdvFeatureConfig+0x160>)
 80088be:	4013      	ands	r3, r2
 80088c0:	0019      	movs	r1, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2280      	movs	r2, #128	; 0x80
 80088d4:	4013      	ands	r3, r2
 80088d6:	d00b      	beq.n	80088f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	4a0e      	ldr	r2, [pc, #56]	; (8008918 <UART_AdvFeatureConfig+0x164>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	0019      	movs	r1, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	605a      	str	r2, [r3, #4]
  }
}
 80088f0:	46c0      	nop			; (mov r8, r8)
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b002      	add	sp, #8
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	fffdffff 	.word	0xfffdffff
 80088fc:	fffeffff 	.word	0xfffeffff
 8008900:	fffbffff 	.word	0xfffbffff
 8008904:	ffff7fff 	.word	0xffff7fff
 8008908:	ffffefff 	.word	0xffffefff
 800890c:	ffffdfff 	.word	0xffffdfff
 8008910:	ffefffff 	.word	0xffefffff
 8008914:	ff9fffff 	.word	0xff9fffff
 8008918:	fff7ffff 	.word	0xfff7ffff

0800891c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b092      	sub	sp, #72	; 0x48
 8008920:	af02      	add	r7, sp, #8
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2284      	movs	r2, #132	; 0x84
 8008928:	2100      	movs	r1, #0
 800892a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800892c:	f7fb fd80 	bl	8004430 <HAL_GetTick>
 8008930:	0003      	movs	r3, r0
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2208      	movs	r2, #8
 800893c:	4013      	ands	r3, r2
 800893e:	2b08      	cmp	r3, #8
 8008940:	d12c      	bne.n	800899c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	2280      	movs	r2, #128	; 0x80
 8008946:	0391      	lsls	r1, r2, #14
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4a46      	ldr	r2, [pc, #280]	; (8008a64 <UART_CheckIdleState+0x148>)
 800894c:	9200      	str	r2, [sp, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	f000 f88c 	bl	8008a6c <UART_WaitOnFlagUntilTimeout>
 8008954:	1e03      	subs	r3, r0, #0
 8008956:	d021      	beq.n	800899c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008958:	f3ef 8310 	mrs	r3, PRIMASK
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008960:	63bb      	str	r3, [r7, #56]	; 0x38
 8008962:	2301      	movs	r3, #1
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	46c0      	nop			; (mov r8, r8)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2180      	movs	r1, #128	; 0x80
 800897a:	438a      	bics	r2, r1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	f383 8810 	msr	PRIMASK, r3
}
 8008988:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2278      	movs	r2, #120	; 0x78
 8008994:	2100      	movs	r1, #0
 8008996:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e05f      	b.n	8008a5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2204      	movs	r2, #4
 80089a4:	4013      	ands	r3, r2
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d146      	bne.n	8008a38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ac:	2280      	movs	r2, #128	; 0x80
 80089ae:	03d1      	lsls	r1, r2, #15
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4a2c      	ldr	r2, [pc, #176]	; (8008a64 <UART_CheckIdleState+0x148>)
 80089b4:	9200      	str	r2, [sp, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f000 f858 	bl	8008a6c <UART_WaitOnFlagUntilTimeout>
 80089bc:	1e03      	subs	r3, r0, #0
 80089be:	d03b      	beq.n	8008a38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c0:	f3ef 8310 	mrs	r3, PRIMASK
 80089c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	2301      	movs	r3, #1
 80089cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f383 8810 	msr	PRIMASK, r3
}
 80089d4:	46c0      	nop			; (mov r8, r8)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4921      	ldr	r1, [pc, #132]	; (8008a68 <UART_CheckIdleState+0x14c>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089f2:	f3ef 8310 	mrs	r3, PRIMASK
 80089f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80089f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fa:	633b      	str	r3, [r7, #48]	; 0x30
 80089fc:	2301      	movs	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f383 8810 	msr	PRIMASK, r3
}
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2101      	movs	r1, #1
 8008a14:	438a      	bics	r2, r1
 8008a16:	609a      	str	r2, [r3, #8]
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	f383 8810 	msr	PRIMASK, r3
}
 8008a22:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	2120      	movs	r1, #32
 8008a2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2278      	movs	r2, #120	; 0x78
 8008a30:	2100      	movs	r1, #0
 8008a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e011      	b.n	8008a5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	2120      	movs	r1, #32
 8008a44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2278      	movs	r2, #120	; 0x78
 8008a56:	2100      	movs	r1, #0
 8008a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b010      	add	sp, #64	; 0x40
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	01ffffff 	.word	0x01ffffff
 8008a68:	fffffedf 	.word	0xfffffedf

08008a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	1dfb      	adds	r3, r7, #7
 8008a7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7c:	e04b      	b.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3301      	adds	r3, #1
 8008a82:	d048      	beq.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a84:	f7fb fcd4 	bl	8004430 <HAL_GetTick>
 8008a88:	0002      	movs	r2, r0
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e04b      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d035      	beq.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d111      	bne.n	8008adc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2208      	movs	r2, #8
 8008abe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 f83c 	bl	8008b40 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2284      	movs	r2, #132	; 0x84
 8008acc:	2108      	movs	r1, #8
 8008ace:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2278      	movs	r2, #120	; 0x78
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e02c      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69da      	ldr	r2, [r3, #28]
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	401a      	ands	r2, r3
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d112      	bne.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2280      	movs	r2, #128	; 0x80
 8008af6:	0112      	lsls	r2, r2, #4
 8008af8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	0018      	movs	r0, r3
 8008afe:	f000 f81f 	bl	8008b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2284      	movs	r2, #132	; 0x84
 8008b06:	2120      	movs	r1, #32
 8008b08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2278      	movs	r2, #120	; 0x78
 8008b0e:	2100      	movs	r1, #0
 8008b10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e00f      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	425a      	negs	r2, r3
 8008b26:	4153      	adcs	r3, r2
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	1dfb      	adds	r3, r7, #7
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d0a4      	beq.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	0018      	movs	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	b004      	add	sp, #16
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08e      	sub	sp, #56	; 0x38
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b48:	f3ef 8310 	mrs	r3, PRIMASK
 8008b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	2301      	movs	r3, #1
 8008b54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f383 8810 	msr	PRIMASK, r3
}
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4926      	ldr	r1, [pc, #152]	; (8008c04 <UART_EndRxTransfer+0xc4>)
 8008b6a:	400a      	ands	r2, r1
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	f383 8810 	msr	PRIMASK, r3
}
 8008b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b7e:	623b      	str	r3, [r7, #32]
  return(result);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	633b      	str	r3, [r7, #48]	; 0x30
 8008b84:	2301      	movs	r3, #1
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	f383 8810 	msr	PRIMASK, r3
}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	438a      	bics	r2, r1
 8008b9e:	609a      	str	r2, [r3, #8]
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	f383 8810 	msr	PRIMASK, r3
}
 8008baa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d118      	bne.n	8008be6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f383 8810 	msr	PRIMASK, r3
}
 8008bc8:	46c0      	nop			; (mov r8, r8)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2110      	movs	r1, #16
 8008bd6:	438a      	bics	r2, r1
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f383 8810 	msr	PRIMASK, r3
}
 8008be4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2280      	movs	r2, #128	; 0x80
 8008bea:	2120      	movs	r1, #32
 8008bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b00e      	add	sp, #56	; 0x38
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	fffffedf 	.word	0xfffffedf

08008c08 <__cvt>:
 8008c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0a:	001e      	movs	r6, r3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	0014      	movs	r4, r2
 8008c10:	b08b      	sub	sp, #44	; 0x2c
 8008c12:	429e      	cmp	r6, r3
 8008c14:	da04      	bge.n	8008c20 <__cvt+0x18>
 8008c16:	2180      	movs	r1, #128	; 0x80
 8008c18:	0609      	lsls	r1, r1, #24
 8008c1a:	1873      	adds	r3, r6, r1
 8008c1c:	001e      	movs	r6, r3
 8008c1e:	232d      	movs	r3, #45	; 0x2d
 8008c20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008c24:	7013      	strb	r3, [r2, #0]
 8008c26:	2320      	movs	r3, #32
 8008c28:	2203      	movs	r2, #3
 8008c2a:	439f      	bics	r7, r3
 8008c2c:	2f46      	cmp	r7, #70	; 0x46
 8008c2e:	d007      	beq.n	8008c40 <__cvt+0x38>
 8008c30:	003b      	movs	r3, r7
 8008c32:	3b45      	subs	r3, #69	; 0x45
 8008c34:	4259      	negs	r1, r3
 8008c36:	414b      	adcs	r3, r1
 8008c38:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c3a:	3a01      	subs	r2, #1
 8008c3c:	18cb      	adds	r3, r1, r3
 8008c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c40:	ab09      	add	r3, sp, #36	; 0x24
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	ab08      	add	r3, sp, #32
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c4a:	9200      	str	r2, [sp, #0]
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c50:	0022      	movs	r2, r4
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	0033      	movs	r3, r6
 8008c56:	f000 fe87 	bl	8009968 <_dtoa_r>
 8008c5a:	0005      	movs	r5, r0
 8008c5c:	2f47      	cmp	r7, #71	; 0x47
 8008c5e:	d102      	bne.n	8008c66 <__cvt+0x5e>
 8008c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c62:	07db      	lsls	r3, r3, #31
 8008c64:	d528      	bpl.n	8008cb8 <__cvt+0xb0>
 8008c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c68:	18eb      	adds	r3, r5, r3
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	2f46      	cmp	r7, #70	; 0x46
 8008c6e:	d114      	bne.n	8008c9a <__cvt+0x92>
 8008c70:	782b      	ldrb	r3, [r5, #0]
 8008c72:	2b30      	cmp	r3, #48	; 0x30
 8008c74:	d10c      	bne.n	8008c90 <__cvt+0x88>
 8008c76:	2200      	movs	r2, #0
 8008c78:	2300      	movs	r3, #0
 8008c7a:	0020      	movs	r0, r4
 8008c7c:	0031      	movs	r1, r6
 8008c7e:	f7f7 fbe5 	bl	800044c <__aeabi_dcmpeq>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d104      	bne.n	8008c90 <__cvt+0x88>
 8008c86:	2301      	movs	r3, #1
 8008c88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c92:	9a07      	ldr	r2, [sp, #28]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	18d3      	adds	r3, r2, r3
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	0020      	movs	r0, r4
 8008ca0:	0031      	movs	r1, r6
 8008ca2:	f7f7 fbd3 	bl	800044c <__aeabi_dcmpeq>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d001      	beq.n	8008cae <__cvt+0xa6>
 8008caa:	9b07      	ldr	r3, [sp, #28]
 8008cac:	9309      	str	r3, [sp, #36]	; 0x24
 8008cae:	2230      	movs	r2, #48	; 0x30
 8008cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb2:	9907      	ldr	r1, [sp, #28]
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	d306      	bcc.n	8008cc6 <__cvt+0xbe>
 8008cb8:	0028      	movs	r0, r5
 8008cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cbe:	1b5b      	subs	r3, r3, r5
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	b00b      	add	sp, #44	; 0x2c
 8008cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc6:	1c59      	adds	r1, r3, #1
 8008cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e7f0      	b.n	8008cb0 <__cvt+0xa8>

08008cce <__exponent>:
 8008cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd0:	1c83      	adds	r3, r0, #2
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	0005      	movs	r5, r0
 8008cd8:	000c      	movs	r4, r1
 8008cda:	232b      	movs	r3, #43	; 0x2b
 8008cdc:	7002      	strb	r2, [r0, #0]
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	da01      	bge.n	8008ce6 <__exponent+0x18>
 8008ce2:	424c      	negs	r4, r1
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	706b      	strb	r3, [r5, #1]
 8008ce8:	2c09      	cmp	r4, #9
 8008cea:	dd2f      	ble.n	8008d4c <__exponent+0x7e>
 8008cec:	270a      	movs	r7, #10
 8008cee:	ab04      	add	r3, sp, #16
 8008cf0:	1dde      	adds	r6, r3, #7
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	0039      	movs	r1, r7
 8008cf6:	9601      	str	r6, [sp, #4]
 8008cf8:	f7f7 fb92 	bl	8000420 <__aeabi_idivmod>
 8008cfc:	3e01      	subs	r6, #1
 8008cfe:	3130      	adds	r1, #48	; 0x30
 8008d00:	0020      	movs	r0, r4
 8008d02:	7031      	strb	r1, [r6, #0]
 8008d04:	0039      	movs	r1, r7
 8008d06:	9402      	str	r4, [sp, #8]
 8008d08:	f7f7 faa4 	bl	8000254 <__divsi3>
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	0004      	movs	r4, r0
 8008d10:	2b63      	cmp	r3, #99	; 0x63
 8008d12:	dcee      	bgt.n	8008cf2 <__exponent+0x24>
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	3430      	adds	r4, #48	; 0x30
 8008d18:	1e9a      	subs	r2, r3, #2
 8008d1a:	0013      	movs	r3, r2
 8008d1c:	9903      	ldr	r1, [sp, #12]
 8008d1e:	7014      	strb	r4, [r2, #0]
 8008d20:	a804      	add	r0, sp, #16
 8008d22:	3007      	adds	r0, #7
 8008d24:	4298      	cmp	r0, r3
 8008d26:	d80c      	bhi.n	8008d42 <__exponent+0x74>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4282      	cmp	r2, r0
 8008d2c:	d804      	bhi.n	8008d38 <__exponent+0x6a>
 8008d2e:	aa04      	add	r2, sp, #16
 8008d30:	3309      	adds	r3, #9
 8008d32:	189b      	adds	r3, r3, r2
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	9a03      	ldr	r2, [sp, #12]
 8008d3a:	18d3      	adds	r3, r2, r3
 8008d3c:	1b58      	subs	r0, r3, r5
 8008d3e:	b007      	add	sp, #28
 8008d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d42:	7818      	ldrb	r0, [r3, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	7008      	strb	r0, [r1, #0]
 8008d48:	3101      	adds	r1, #1
 8008d4a:	e7e9      	b.n	8008d20 <__exponent+0x52>
 8008d4c:	2330      	movs	r3, #48	; 0x30
 8008d4e:	3430      	adds	r4, #48	; 0x30
 8008d50:	70ab      	strb	r3, [r5, #2]
 8008d52:	70ec      	strb	r4, [r5, #3]
 8008d54:	1d2b      	adds	r3, r5, #4
 8008d56:	e7f1      	b.n	8008d3c <__exponent+0x6e>

08008d58 <_printf_float>:
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b095      	sub	sp, #84	; 0x54
 8008d5c:	000c      	movs	r4, r1
 8008d5e:	9208      	str	r2, [sp, #32]
 8008d60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	0007      	movs	r7, r0
 8008d66:	f000 fce5 	bl	8009734 <_localeconv_r>
 8008d6a:	6803      	ldr	r3, [r0, #0]
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d70:	f7f7 f9ca 	bl	8000108 <strlen>
 8008d74:	2300      	movs	r3, #0
 8008d76:	9312      	str	r3, [sp, #72]	; 0x48
 8008d78:	7e23      	ldrb	r3, [r4, #24]
 8008d7a:	2207      	movs	r2, #7
 8008d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	900d      	str	r0, [sp, #52]	; 0x34
 8008d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	05c9      	lsls	r1, r1, #23
 8008d8a:	d547      	bpl.n	8008e1c <_printf_float+0xc4>
 8008d8c:	189b      	adds	r3, r3, r2
 8008d8e:	4393      	bics	r3, r2
 8008d90:	001a      	movs	r2, r3
 8008d92:	3208      	adds	r2, #8
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	681e      	ldr	r6, [r3, #0]
 8008d98:	685d      	ldr	r5, [r3, #4]
 8008d9a:	0032      	movs	r2, r6
 8008d9c:	002b      	movs	r3, r5
 8008d9e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008da0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008da2:	2201      	movs	r2, #1
 8008da4:	006b      	lsls	r3, r5, #1
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	930e      	str	r3, [sp, #56]	; 0x38
 8008daa:	0030      	movs	r0, r6
 8008dac:	4bab      	ldr	r3, [pc, #684]	; (800905c <_printf_float+0x304>)
 8008dae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008db0:	4252      	negs	r2, r2
 8008db2:	f7f9 fc7d 	bl	80026b0 <__aeabi_dcmpun>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d132      	bne.n	8008e20 <_printf_float+0xc8>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	0030      	movs	r0, r6
 8008dbe:	4ba7      	ldr	r3, [pc, #668]	; (800905c <_printf_float+0x304>)
 8008dc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008dc2:	4252      	negs	r2, r2
 8008dc4:	f7f7 fb52 	bl	800046c <__aeabi_dcmple>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d129      	bne.n	8008e20 <_printf_float+0xc8>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	0030      	movs	r0, r6
 8008dd2:	0029      	movs	r1, r5
 8008dd4:	f7f7 fb40 	bl	8000458 <__aeabi_dcmplt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d003      	beq.n	8008de4 <_printf_float+0x8c>
 8008ddc:	0023      	movs	r3, r4
 8008dde:	222d      	movs	r2, #45	; 0x2d
 8008de0:	3343      	adds	r3, #67	; 0x43
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de6:	4d9e      	ldr	r5, [pc, #632]	; (8009060 <_printf_float+0x308>)
 8008de8:	2b47      	cmp	r3, #71	; 0x47
 8008dea:	d900      	bls.n	8008dee <_printf_float+0x96>
 8008dec:	4d9d      	ldr	r5, [pc, #628]	; (8009064 <_printf_float+0x30c>)
 8008dee:	2303      	movs	r3, #3
 8008df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	3301      	adds	r3, #1
 8008df6:	439a      	bics	r2, r3
 8008df8:	2300      	movs	r3, #0
 8008dfa:	6022      	str	r2, [r4, #0]
 8008dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	0021      	movs	r1, r4
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	0038      	movs	r0, r7
 8008e06:	9b08      	ldr	r3, [sp, #32]
 8008e08:	aa13      	add	r2, sp, #76	; 0x4c
 8008e0a:	f000 f9fb 	bl	8009204 <_printf_common>
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d000      	beq.n	8008e14 <_printf_float+0xbc>
 8008e12:	e0a3      	b.n	8008f5c <_printf_float+0x204>
 8008e14:	2001      	movs	r0, #1
 8008e16:	4240      	negs	r0, r0
 8008e18:	b015      	add	sp, #84	; 0x54
 8008e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	e7b6      	b.n	8008d8e <_printf_float+0x36>
 8008e20:	0032      	movs	r2, r6
 8008e22:	002b      	movs	r3, r5
 8008e24:	0030      	movs	r0, r6
 8008e26:	0029      	movs	r1, r5
 8008e28:	f7f9 fc42 	bl	80026b0 <__aeabi_dcmpun>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d00b      	beq.n	8008e48 <_printf_float+0xf0>
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	da03      	bge.n	8008e3c <_printf_float+0xe4>
 8008e34:	0023      	movs	r3, r4
 8008e36:	222d      	movs	r2, #45	; 0x2d
 8008e38:	3343      	adds	r3, #67	; 0x43
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	4d8a      	ldr	r5, [pc, #552]	; (8009068 <_printf_float+0x310>)
 8008e40:	2b47      	cmp	r3, #71	; 0x47
 8008e42:	d9d4      	bls.n	8008dee <_printf_float+0x96>
 8008e44:	4d89      	ldr	r5, [pc, #548]	; (800906c <_printf_float+0x314>)
 8008e46:	e7d2      	b.n	8008dee <_printf_float+0x96>
 8008e48:	2220      	movs	r2, #32
 8008e4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	4391      	bics	r1, r2
 8008e50:	910e      	str	r1, [sp, #56]	; 0x38
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	d14a      	bne.n	8008eec <_printf_float+0x194>
 8008e56:	3307      	adds	r3, #7
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	2380      	movs	r3, #128	; 0x80
 8008e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	4313      	orrs	r3, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	9206      	str	r2, [sp, #24]
 8008e66:	aa12      	add	r2, sp, #72	; 0x48
 8008e68:	9205      	str	r2, [sp, #20]
 8008e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	9204      	str	r2, [sp, #16]
 8008e70:	aa11      	add	r2, sp, #68	; 0x44
 8008e72:	9203      	str	r2, [sp, #12]
 8008e74:	2223      	movs	r2, #35	; 0x23
 8008e76:	a908      	add	r1, sp, #32
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	6863      	ldr	r3, [r4, #4]
 8008e7c:	1852      	adds	r2, r2, r1
 8008e7e:	9202      	str	r2, [sp, #8]
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	0032      	movs	r2, r6
 8008e84:	002b      	movs	r3, r5
 8008e86:	0038      	movs	r0, r7
 8008e88:	f7ff febe 	bl	8008c08 <__cvt>
 8008e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e8e:	0005      	movs	r5, r0
 8008e90:	2b47      	cmp	r3, #71	; 0x47
 8008e92:	d109      	bne.n	8008ea8 <_printf_float+0x150>
 8008e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e96:	1cda      	adds	r2, r3, #3
 8008e98:	db02      	blt.n	8008ea0 <_printf_float+0x148>
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	dd49      	ble.n	8008f34 <_printf_float+0x1dc>
 8008ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea2:	3b02      	subs	r3, #2
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008eac:	2b65      	cmp	r3, #101	; 0x65
 8008eae:	d824      	bhi.n	8008efa <_printf_float+0x1a2>
 8008eb0:	0020      	movs	r0, r4
 8008eb2:	001a      	movs	r2, r3
 8008eb4:	3901      	subs	r1, #1
 8008eb6:	3050      	adds	r0, #80	; 0x50
 8008eb8:	9111      	str	r1, [sp, #68]	; 0x44
 8008eba:	f7ff ff08 	bl	8008cce <__exponent>
 8008ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ec0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ec2:	1813      	adds	r3, r2, r0
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	2a01      	cmp	r2, #1
 8008ec8:	dc02      	bgt.n	8008ed0 <_printf_float+0x178>
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	07d2      	lsls	r2, r2, #31
 8008ece:	d501      	bpl.n	8008ed4 <_printf_float+0x17c>
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	2323      	movs	r3, #35	; 0x23
 8008ed6:	aa08      	add	r2, sp, #32
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d100      	bne.n	8008ee2 <_printf_float+0x18a>
 8008ee0:	e78d      	b.n	8008dfe <_printf_float+0xa6>
 8008ee2:	0023      	movs	r3, r4
 8008ee4:	222d      	movs	r2, #45	; 0x2d
 8008ee6:	3343      	adds	r3, #67	; 0x43
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e788      	b.n	8008dfe <_printf_float+0xa6>
 8008eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eee:	2a47      	cmp	r2, #71	; 0x47
 8008ef0:	d1b3      	bne.n	8008e5a <_printf_float+0x102>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1b1      	bne.n	8008e5a <_printf_float+0x102>
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	e7ae      	b.n	8008e58 <_printf_float+0x100>
 8008efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efc:	2b66      	cmp	r3, #102	; 0x66
 8008efe:	d11b      	bne.n	8008f38 <_printf_float+0x1e0>
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	2900      	cmp	r1, #0
 8008f04:	dd09      	ble.n	8008f1a <_printf_float+0x1c2>
 8008f06:	6121      	str	r1, [r4, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <_printf_float+0x1ba>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	07d2      	lsls	r2, r2, #31
 8008f10:	d50b      	bpl.n	8008f2a <_printf_float+0x1d2>
 8008f12:	3301      	adds	r3, #1
 8008f14:	185b      	adds	r3, r3, r1
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	e007      	b.n	8008f2a <_printf_float+0x1d2>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <_printf_float+0x1ce>
 8008f1e:	2201      	movs	r2, #1
 8008f20:	6821      	ldr	r1, [r4, #0]
 8008f22:	4211      	tst	r1, r2
 8008f24:	d000      	beq.n	8008f28 <_printf_float+0x1d0>
 8008f26:	1c9a      	adds	r2, r3, #2
 8008f28:	6122      	str	r2, [r4, #16]
 8008f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f2e:	2300      	movs	r3, #0
 8008f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f32:	e7cf      	b.n	8008ed4 <_printf_float+0x17c>
 8008f34:	2367      	movs	r3, #103	; 0x67
 8008f36:	930a      	str	r3, [sp, #40]	; 0x28
 8008f38:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f3c:	4299      	cmp	r1, r3
 8008f3e:	db06      	blt.n	8008f4e <_printf_float+0x1f6>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	6121      	str	r1, [r4, #16]
 8008f44:	07db      	lsls	r3, r3, #31
 8008f46:	d5f0      	bpl.n	8008f2a <_printf_float+0x1d2>
 8008f48:	3101      	adds	r1, #1
 8008f4a:	6121      	str	r1, [r4, #16]
 8008f4c:	e7ed      	b.n	8008f2a <_printf_float+0x1d2>
 8008f4e:	2201      	movs	r2, #1
 8008f50:	2900      	cmp	r1, #0
 8008f52:	dc01      	bgt.n	8008f58 <_printf_float+0x200>
 8008f54:	1892      	adds	r2, r2, r2
 8008f56:	1a52      	subs	r2, r2, r1
 8008f58:	189b      	adds	r3, r3, r2
 8008f5a:	e7dc      	b.n	8008f16 <_printf_float+0x1be>
 8008f5c:	6822      	ldr	r2, [r4, #0]
 8008f5e:	0553      	lsls	r3, r2, #21
 8008f60:	d408      	bmi.n	8008f74 <_printf_float+0x21c>
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	002a      	movs	r2, r5
 8008f66:	0038      	movs	r0, r7
 8008f68:	9908      	ldr	r1, [sp, #32]
 8008f6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f6c:	47a8      	blx	r5
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d12a      	bne.n	8008fc8 <_printf_float+0x270>
 8008f72:	e74f      	b.n	8008e14 <_printf_float+0xbc>
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	2b65      	cmp	r3, #101	; 0x65
 8008f78:	d800      	bhi.n	8008f7c <_printf_float+0x224>
 8008f7a:	e0ec      	b.n	8009156 <_printf_float+0x3fe>
 8008f7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	f7f7 fa62 	bl	800044c <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d034      	beq.n	8008ff6 <_printf_float+0x29e>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	0038      	movs	r0, r7
 8008f90:	4a37      	ldr	r2, [pc, #220]	; (8009070 <_printf_float+0x318>)
 8008f92:	9908      	ldr	r1, [sp, #32]
 8008f94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f96:	47a8      	blx	r5
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d100      	bne.n	8008f9e <_printf_float+0x246>
 8008f9c:	e73a      	b.n	8008e14 <_printf_float+0xbc>
 8008f9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	db02      	blt.n	8008fac <_printf_float+0x254>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	07db      	lsls	r3, r3, #31
 8008faa:	d50d      	bpl.n	8008fc8 <_printf_float+0x270>
 8008fac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fae:	0038      	movs	r0, r7
 8008fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fb4:	9908      	ldr	r1, [sp, #32]
 8008fb6:	47a8      	blx	r5
 8008fb8:	2500      	movs	r5, #0
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d100      	bne.n	8008fc0 <_printf_float+0x268>
 8008fbe:	e729      	b.n	8008e14 <_printf_float+0xbc>
 8008fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dc0a      	bgt.n	8008fde <_printf_float+0x286>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	079b      	lsls	r3, r3, #30
 8008fcc:	d500      	bpl.n	8008fd0 <_printf_float+0x278>
 8008fce:	e116      	b.n	80091fe <_printf_float+0x4a6>
 8008fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fd2:	68e0      	ldr	r0, [r4, #12]
 8008fd4:	4298      	cmp	r0, r3
 8008fd6:	db00      	blt.n	8008fda <_printf_float+0x282>
 8008fd8:	e71e      	b.n	8008e18 <_printf_float+0xc0>
 8008fda:	0018      	movs	r0, r3
 8008fdc:	e71c      	b.n	8008e18 <_printf_float+0xc0>
 8008fde:	0022      	movs	r2, r4
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	0038      	movs	r0, r7
 8008fe4:	9908      	ldr	r1, [sp, #32]
 8008fe6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fe8:	321a      	adds	r2, #26
 8008fea:	47b0      	blx	r6
 8008fec:	3001      	adds	r0, #1
 8008fee:	d100      	bne.n	8008ff2 <_printf_float+0x29a>
 8008ff0:	e710      	b.n	8008e14 <_printf_float+0xbc>
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	e7e4      	b.n	8008fc0 <_printf_float+0x268>
 8008ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc3b      	bgt.n	8009074 <_printf_float+0x31c>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	0038      	movs	r0, r7
 8009000:	4a1b      	ldr	r2, [pc, #108]	; (8009070 <_printf_float+0x318>)
 8009002:	9908      	ldr	r1, [sp, #32]
 8009004:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009006:	47b0      	blx	r6
 8009008:	3001      	adds	r0, #1
 800900a:	d100      	bne.n	800900e <_printf_float+0x2b6>
 800900c:	e702      	b.n	8008e14 <_printf_float+0xbc>
 800900e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009010:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009012:	4313      	orrs	r3, r2
 8009014:	d102      	bne.n	800901c <_printf_float+0x2c4>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	07db      	lsls	r3, r3, #31
 800901a:	d5d5      	bpl.n	8008fc8 <_printf_float+0x270>
 800901c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800901e:	0038      	movs	r0, r7
 8009020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009022:	9908      	ldr	r1, [sp, #32]
 8009024:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009026:	47b0      	blx	r6
 8009028:	2300      	movs	r3, #0
 800902a:	3001      	adds	r0, #1
 800902c:	d100      	bne.n	8009030 <_printf_float+0x2d8>
 800902e:	e6f1      	b.n	8008e14 <_printf_float+0xbc>
 8009030:	930a      	str	r3, [sp, #40]	; 0x28
 8009032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009036:	425b      	negs	r3, r3
 8009038:	4293      	cmp	r3, r2
 800903a:	dc01      	bgt.n	8009040 <_printf_float+0x2e8>
 800903c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800903e:	e791      	b.n	8008f64 <_printf_float+0x20c>
 8009040:	0022      	movs	r2, r4
 8009042:	2301      	movs	r3, #1
 8009044:	0038      	movs	r0, r7
 8009046:	9908      	ldr	r1, [sp, #32]
 8009048:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800904a:	321a      	adds	r2, #26
 800904c:	47b0      	blx	r6
 800904e:	3001      	adds	r0, #1
 8009050:	d100      	bne.n	8009054 <_printf_float+0x2fc>
 8009052:	e6df      	b.n	8008e14 <_printf_float+0xbc>
 8009054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009056:	3301      	adds	r3, #1
 8009058:	e7ea      	b.n	8009030 <_printf_float+0x2d8>
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	7fefffff 	.word	0x7fefffff
 8009060:	0800b82c 	.word	0x0800b82c
 8009064:	0800b830 	.word	0x0800b830
 8009068:	0800b834 	.word	0x0800b834
 800906c:	0800b838 	.word	0x0800b838
 8009070:	0800b83c 	.word	0x0800b83c
 8009074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009078:	920a      	str	r2, [sp, #40]	; 0x28
 800907a:	429a      	cmp	r2, r3
 800907c:	dd00      	ble.n	8009080 <_printf_float+0x328>
 800907e:	930a      	str	r3, [sp, #40]	; 0x28
 8009080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009082:	2b00      	cmp	r3, #0
 8009084:	dc3d      	bgt.n	8009102 <_printf_float+0x3aa>
 8009086:	2300      	movs	r3, #0
 8009088:	930e      	str	r3, [sp, #56]	; 0x38
 800908a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908c:	43db      	mvns	r3, r3
 800908e:	17db      	asrs	r3, r3, #31
 8009090:	930f      	str	r3, [sp, #60]	; 0x3c
 8009092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009096:	930b      	str	r3, [sp, #44]	; 0x2c
 8009098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800909a:	4013      	ands	r3, r2
 800909c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a2:	4293      	cmp	r3, r2
 80090a4:	dc36      	bgt.n	8009114 <_printf_float+0x3bc>
 80090a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090aa:	429a      	cmp	r2, r3
 80090ac:	db40      	blt.n	8009130 <_printf_float+0x3d8>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	07db      	lsls	r3, r3, #31
 80090b2:	d43d      	bmi.n	8009130 <_printf_float+0x3d8>
 80090b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80090b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ba:	1af3      	subs	r3, r6, r3
 80090bc:	1ab6      	subs	r6, r6, r2
 80090be:	429e      	cmp	r6, r3
 80090c0:	dd00      	ble.n	80090c4 <_printf_float+0x36c>
 80090c2:	001e      	movs	r6, r3
 80090c4:	2e00      	cmp	r6, #0
 80090c6:	dc3c      	bgt.n	8009142 <_printf_float+0x3ea>
 80090c8:	2300      	movs	r3, #0
 80090ca:	930a      	str	r3, [sp, #40]	; 0x28
 80090cc:	43f3      	mvns	r3, r6
 80090ce:	17db      	asrs	r3, r3, #31
 80090d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80090d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090da:	4032      	ands	r2, r6
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e0:	4293      	cmp	r3, r2
 80090e2:	dc00      	bgt.n	80090e6 <_printf_float+0x38e>
 80090e4:	e770      	b.n	8008fc8 <_printf_float+0x270>
 80090e6:	0022      	movs	r2, r4
 80090e8:	2301      	movs	r3, #1
 80090ea:	0038      	movs	r0, r7
 80090ec:	9908      	ldr	r1, [sp, #32]
 80090ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090f0:	321a      	adds	r2, #26
 80090f2:	47a8      	blx	r5
 80090f4:	3001      	adds	r0, #1
 80090f6:	d100      	bne.n	80090fa <_printf_float+0x3a2>
 80090f8:	e68c      	b.n	8008e14 <_printf_float+0xbc>
 80090fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fc:	3301      	adds	r3, #1
 80090fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009100:	e7e7      	b.n	80090d2 <_printf_float+0x37a>
 8009102:	002a      	movs	r2, r5
 8009104:	0038      	movs	r0, r7
 8009106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009108:	9908      	ldr	r1, [sp, #32]
 800910a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800910c:	47b0      	blx	r6
 800910e:	3001      	adds	r0, #1
 8009110:	d1b9      	bne.n	8009086 <_printf_float+0x32e>
 8009112:	e67f      	b.n	8008e14 <_printf_float+0xbc>
 8009114:	0022      	movs	r2, r4
 8009116:	2301      	movs	r3, #1
 8009118:	0038      	movs	r0, r7
 800911a:	9908      	ldr	r1, [sp, #32]
 800911c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800911e:	321a      	adds	r2, #26
 8009120:	47b0      	blx	r6
 8009122:	3001      	adds	r0, #1
 8009124:	d100      	bne.n	8009128 <_printf_float+0x3d0>
 8009126:	e675      	b.n	8008e14 <_printf_float+0xbc>
 8009128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800912a:	3301      	adds	r3, #1
 800912c:	930e      	str	r3, [sp, #56]	; 0x38
 800912e:	e7b0      	b.n	8009092 <_printf_float+0x33a>
 8009130:	0038      	movs	r0, r7
 8009132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009136:	9908      	ldr	r1, [sp, #32]
 8009138:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800913a:	47b0      	blx	r6
 800913c:	3001      	adds	r0, #1
 800913e:	d1b9      	bne.n	80090b4 <_printf_float+0x35c>
 8009140:	e668      	b.n	8008e14 <_printf_float+0xbc>
 8009142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009144:	0038      	movs	r0, r7
 8009146:	18ea      	adds	r2, r5, r3
 8009148:	9908      	ldr	r1, [sp, #32]
 800914a:	0033      	movs	r3, r6
 800914c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800914e:	47a8      	blx	r5
 8009150:	3001      	adds	r0, #1
 8009152:	d1b9      	bne.n	80090c8 <_printf_float+0x370>
 8009154:	e65e      	b.n	8008e14 <_printf_float+0xbc>
 8009156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009158:	2b01      	cmp	r3, #1
 800915a:	dc02      	bgt.n	8009162 <_printf_float+0x40a>
 800915c:	2301      	movs	r3, #1
 800915e:	421a      	tst	r2, r3
 8009160:	d03a      	beq.n	80091d8 <_printf_float+0x480>
 8009162:	2301      	movs	r3, #1
 8009164:	002a      	movs	r2, r5
 8009166:	0038      	movs	r0, r7
 8009168:	9908      	ldr	r1, [sp, #32]
 800916a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800916c:	47b0      	blx	r6
 800916e:	3001      	adds	r0, #1
 8009170:	d100      	bne.n	8009174 <_printf_float+0x41c>
 8009172:	e64f      	b.n	8008e14 <_printf_float+0xbc>
 8009174:	0038      	movs	r0, r7
 8009176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800917a:	9908      	ldr	r1, [sp, #32]
 800917c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800917e:	47b0      	blx	r6
 8009180:	3001      	adds	r0, #1
 8009182:	d100      	bne.n	8009186 <_printf_float+0x42e>
 8009184:	e646      	b.n	8008e14 <_printf_float+0xbc>
 8009186:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009188:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800918a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800918c:	2200      	movs	r2, #0
 800918e:	001e      	movs	r6, r3
 8009190:	2300      	movs	r3, #0
 8009192:	f7f7 f95b 	bl	800044c <__aeabi_dcmpeq>
 8009196:	2800      	cmp	r0, #0
 8009198:	d11c      	bne.n	80091d4 <_printf_float+0x47c>
 800919a:	0033      	movs	r3, r6
 800919c:	1c6a      	adds	r2, r5, #1
 800919e:	3b01      	subs	r3, #1
 80091a0:	0038      	movs	r0, r7
 80091a2:	9908      	ldr	r1, [sp, #32]
 80091a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091a6:	47a8      	blx	r5
 80091a8:	3001      	adds	r0, #1
 80091aa:	d10f      	bne.n	80091cc <_printf_float+0x474>
 80091ac:	e632      	b.n	8008e14 <_printf_float+0xbc>
 80091ae:	0022      	movs	r2, r4
 80091b0:	2301      	movs	r3, #1
 80091b2:	0038      	movs	r0, r7
 80091b4:	9908      	ldr	r1, [sp, #32]
 80091b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091b8:	321a      	adds	r2, #26
 80091ba:	47b0      	blx	r6
 80091bc:	3001      	adds	r0, #1
 80091be:	d100      	bne.n	80091c2 <_printf_float+0x46a>
 80091c0:	e628      	b.n	8008e14 <_printf_float+0xbc>
 80091c2:	3501      	adds	r5, #1
 80091c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091c6:	3b01      	subs	r3, #1
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dcf0      	bgt.n	80091ae <_printf_float+0x456>
 80091cc:	0022      	movs	r2, r4
 80091ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d0:	3250      	adds	r2, #80	; 0x50
 80091d2:	e6c8      	b.n	8008f66 <_printf_float+0x20e>
 80091d4:	2500      	movs	r5, #0
 80091d6:	e7f5      	b.n	80091c4 <_printf_float+0x46c>
 80091d8:	002a      	movs	r2, r5
 80091da:	e7e1      	b.n	80091a0 <_printf_float+0x448>
 80091dc:	0022      	movs	r2, r4
 80091de:	2301      	movs	r3, #1
 80091e0:	0038      	movs	r0, r7
 80091e2:	9908      	ldr	r1, [sp, #32]
 80091e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091e6:	3219      	adds	r2, #25
 80091e8:	47b0      	blx	r6
 80091ea:	3001      	adds	r0, #1
 80091ec:	d100      	bne.n	80091f0 <_printf_float+0x498>
 80091ee:	e611      	b.n	8008e14 <_printf_float+0xbc>
 80091f0:	3501      	adds	r5, #1
 80091f2:	68e3      	ldr	r3, [r4, #12]
 80091f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	dcef      	bgt.n	80091dc <_printf_float+0x484>
 80091fc:	e6e8      	b.n	8008fd0 <_printf_float+0x278>
 80091fe:	2500      	movs	r5, #0
 8009200:	e7f7      	b.n	80091f2 <_printf_float+0x49a>
 8009202:	46c0      	nop			; (mov r8, r8)

08009204 <_printf_common>:
 8009204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009206:	0016      	movs	r6, r2
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	688a      	ldr	r2, [r1, #8]
 800920c:	690b      	ldr	r3, [r1, #16]
 800920e:	000c      	movs	r4, r1
 8009210:	9000      	str	r0, [sp, #0]
 8009212:	4293      	cmp	r3, r2
 8009214:	da00      	bge.n	8009218 <_printf_common+0x14>
 8009216:	0013      	movs	r3, r2
 8009218:	0022      	movs	r2, r4
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	3243      	adds	r2, #67	; 0x43
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	2a00      	cmp	r2, #0
 8009222:	d001      	beq.n	8009228 <_printf_common+0x24>
 8009224:	3301      	adds	r3, #1
 8009226:	6033      	str	r3, [r6, #0]
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	069b      	lsls	r3, r3, #26
 800922c:	d502      	bpl.n	8009234 <_printf_common+0x30>
 800922e:	6833      	ldr	r3, [r6, #0]
 8009230:	3302      	adds	r3, #2
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	2306      	movs	r3, #6
 8009238:	0015      	movs	r5, r2
 800923a:	401d      	ands	r5, r3
 800923c:	421a      	tst	r2, r3
 800923e:	d027      	beq.n	8009290 <_printf_common+0x8c>
 8009240:	0023      	movs	r3, r4
 8009242:	3343      	adds	r3, #67	; 0x43
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	1e5a      	subs	r2, r3, #1
 8009248:	4193      	sbcs	r3, r2
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	0692      	lsls	r2, r2, #26
 800924e:	d430      	bmi.n	80092b2 <_printf_common+0xae>
 8009250:	0022      	movs	r2, r4
 8009252:	9901      	ldr	r1, [sp, #4]
 8009254:	9800      	ldr	r0, [sp, #0]
 8009256:	9d08      	ldr	r5, [sp, #32]
 8009258:	3243      	adds	r2, #67	; 0x43
 800925a:	47a8      	blx	r5
 800925c:	3001      	adds	r0, #1
 800925e:	d025      	beq.n	80092ac <_printf_common+0xa8>
 8009260:	2206      	movs	r2, #6
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	2500      	movs	r5, #0
 8009266:	4013      	ands	r3, r2
 8009268:	2b04      	cmp	r3, #4
 800926a:	d105      	bne.n	8009278 <_printf_common+0x74>
 800926c:	6833      	ldr	r3, [r6, #0]
 800926e:	68e5      	ldr	r5, [r4, #12]
 8009270:	1aed      	subs	r5, r5, r3
 8009272:	43eb      	mvns	r3, r5
 8009274:	17db      	asrs	r3, r3, #31
 8009276:	401d      	ands	r5, r3
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	6922      	ldr	r2, [r4, #16]
 800927c:	4293      	cmp	r3, r2
 800927e:	dd01      	ble.n	8009284 <_printf_common+0x80>
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	18ed      	adds	r5, r5, r3
 8009284:	2600      	movs	r6, #0
 8009286:	42b5      	cmp	r5, r6
 8009288:	d120      	bne.n	80092cc <_printf_common+0xc8>
 800928a:	2000      	movs	r0, #0
 800928c:	e010      	b.n	80092b0 <_printf_common+0xac>
 800928e:	3501      	adds	r5, #1
 8009290:	68e3      	ldr	r3, [r4, #12]
 8009292:	6832      	ldr	r2, [r6, #0]
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	42ab      	cmp	r3, r5
 8009298:	ddd2      	ble.n	8009240 <_printf_common+0x3c>
 800929a:	0022      	movs	r2, r4
 800929c:	2301      	movs	r3, #1
 800929e:	9901      	ldr	r1, [sp, #4]
 80092a0:	9800      	ldr	r0, [sp, #0]
 80092a2:	9f08      	ldr	r7, [sp, #32]
 80092a4:	3219      	adds	r2, #25
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d1f0      	bne.n	800928e <_printf_common+0x8a>
 80092ac:	2001      	movs	r0, #1
 80092ae:	4240      	negs	r0, r0
 80092b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092b2:	2030      	movs	r0, #48	; 0x30
 80092b4:	18e1      	adds	r1, r4, r3
 80092b6:	3143      	adds	r1, #67	; 0x43
 80092b8:	7008      	strb	r0, [r1, #0]
 80092ba:	0021      	movs	r1, r4
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	3145      	adds	r1, #69	; 0x45
 80092c0:	7809      	ldrb	r1, [r1, #0]
 80092c2:	18a2      	adds	r2, r4, r2
 80092c4:	3243      	adds	r2, #67	; 0x43
 80092c6:	3302      	adds	r3, #2
 80092c8:	7011      	strb	r1, [r2, #0]
 80092ca:	e7c1      	b.n	8009250 <_printf_common+0x4c>
 80092cc:	0022      	movs	r2, r4
 80092ce:	2301      	movs	r3, #1
 80092d0:	9901      	ldr	r1, [sp, #4]
 80092d2:	9800      	ldr	r0, [sp, #0]
 80092d4:	9f08      	ldr	r7, [sp, #32]
 80092d6:	321a      	adds	r2, #26
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	d0e6      	beq.n	80092ac <_printf_common+0xa8>
 80092de:	3601      	adds	r6, #1
 80092e0:	e7d1      	b.n	8009286 <_printf_common+0x82>
	...

080092e4 <_printf_i>:
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	b08b      	sub	sp, #44	; 0x2c
 80092e8:	9206      	str	r2, [sp, #24]
 80092ea:	000a      	movs	r2, r1
 80092ec:	3243      	adds	r2, #67	; 0x43
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	9005      	str	r0, [sp, #20]
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	7e0a      	ldrb	r2, [r1, #24]
 80092f6:	000c      	movs	r4, r1
 80092f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092fa:	2a78      	cmp	r2, #120	; 0x78
 80092fc:	d809      	bhi.n	8009312 <_printf_i+0x2e>
 80092fe:	2a62      	cmp	r2, #98	; 0x62
 8009300:	d80b      	bhi.n	800931a <_printf_i+0x36>
 8009302:	2a00      	cmp	r2, #0
 8009304:	d100      	bne.n	8009308 <_printf_i+0x24>
 8009306:	e0be      	b.n	8009486 <_printf_i+0x1a2>
 8009308:	497c      	ldr	r1, [pc, #496]	; (80094fc <_printf_i+0x218>)
 800930a:	9103      	str	r1, [sp, #12]
 800930c:	2a58      	cmp	r2, #88	; 0x58
 800930e:	d100      	bne.n	8009312 <_printf_i+0x2e>
 8009310:	e093      	b.n	800943a <_printf_i+0x156>
 8009312:	0026      	movs	r6, r4
 8009314:	3642      	adds	r6, #66	; 0x42
 8009316:	7032      	strb	r2, [r6, #0]
 8009318:	e022      	b.n	8009360 <_printf_i+0x7c>
 800931a:	0010      	movs	r0, r2
 800931c:	3863      	subs	r0, #99	; 0x63
 800931e:	2815      	cmp	r0, #21
 8009320:	d8f7      	bhi.n	8009312 <_printf_i+0x2e>
 8009322:	f7f6 ff03 	bl	800012c <__gnu_thumb1_case_shi>
 8009326:	0016      	.short	0x0016
 8009328:	fff6001f 	.word	0xfff6001f
 800932c:	fff6fff6 	.word	0xfff6fff6
 8009330:	001ffff6 	.word	0x001ffff6
 8009334:	fff6fff6 	.word	0xfff6fff6
 8009338:	fff6fff6 	.word	0xfff6fff6
 800933c:	003600a3 	.word	0x003600a3
 8009340:	fff60083 	.word	0xfff60083
 8009344:	00b4fff6 	.word	0x00b4fff6
 8009348:	0036fff6 	.word	0x0036fff6
 800934c:	fff6fff6 	.word	0xfff6fff6
 8009350:	0087      	.short	0x0087
 8009352:	0026      	movs	r6, r4
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	3642      	adds	r6, #66	; 0x42
 8009358:	1d11      	adds	r1, r2, #4
 800935a:	6019      	str	r1, [r3, #0]
 800935c:	6813      	ldr	r3, [r2, #0]
 800935e:	7033      	strb	r3, [r6, #0]
 8009360:	2301      	movs	r3, #1
 8009362:	e0a2      	b.n	80094aa <_printf_i+0x1c6>
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	6809      	ldr	r1, [r1, #0]
 8009368:	1d02      	adds	r2, r0, #4
 800936a:	060d      	lsls	r5, r1, #24
 800936c:	d50b      	bpl.n	8009386 <_printf_i+0xa2>
 800936e:	6805      	ldr	r5, [r0, #0]
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	2d00      	cmp	r5, #0
 8009374:	da03      	bge.n	800937e <_printf_i+0x9a>
 8009376:	232d      	movs	r3, #45	; 0x2d
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	426d      	negs	r5, r5
 800937c:	7013      	strb	r3, [r2, #0]
 800937e:	4b5f      	ldr	r3, [pc, #380]	; (80094fc <_printf_i+0x218>)
 8009380:	270a      	movs	r7, #10
 8009382:	9303      	str	r3, [sp, #12]
 8009384:	e01b      	b.n	80093be <_printf_i+0xda>
 8009386:	6805      	ldr	r5, [r0, #0]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	0649      	lsls	r1, r1, #25
 800938c:	d5f1      	bpl.n	8009372 <_printf_i+0x8e>
 800938e:	b22d      	sxth	r5, r5
 8009390:	e7ef      	b.n	8009372 <_printf_i+0x8e>
 8009392:	680d      	ldr	r5, [r1, #0]
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	1d08      	adds	r0, r1, #4
 8009398:	6018      	str	r0, [r3, #0]
 800939a:	062e      	lsls	r6, r5, #24
 800939c:	d501      	bpl.n	80093a2 <_printf_i+0xbe>
 800939e:	680d      	ldr	r5, [r1, #0]
 80093a0:	e003      	b.n	80093aa <_printf_i+0xc6>
 80093a2:	066d      	lsls	r5, r5, #25
 80093a4:	d5fb      	bpl.n	800939e <_printf_i+0xba>
 80093a6:	680d      	ldr	r5, [r1, #0]
 80093a8:	b2ad      	uxth	r5, r5
 80093aa:	4b54      	ldr	r3, [pc, #336]	; (80094fc <_printf_i+0x218>)
 80093ac:	2708      	movs	r7, #8
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	2a6f      	cmp	r2, #111	; 0x6f
 80093b2:	d000      	beq.n	80093b6 <_printf_i+0xd2>
 80093b4:	3702      	adds	r7, #2
 80093b6:	0023      	movs	r3, r4
 80093b8:	2200      	movs	r2, #0
 80093ba:	3343      	adds	r3, #67	; 0x43
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	6863      	ldr	r3, [r4, #4]
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	db03      	blt.n	80093ce <_printf_i+0xea>
 80093c6:	2104      	movs	r1, #4
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	438a      	bics	r2, r1
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	d102      	bne.n	80093d8 <_printf_i+0xf4>
 80093d2:	9e04      	ldr	r6, [sp, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00c      	beq.n	80093f2 <_printf_i+0x10e>
 80093d8:	9e04      	ldr	r6, [sp, #16]
 80093da:	0028      	movs	r0, r5
 80093dc:	0039      	movs	r1, r7
 80093de:	f7f6 ff35 	bl	800024c <__aeabi_uidivmod>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	3e01      	subs	r6, #1
 80093e6:	5c5b      	ldrb	r3, [r3, r1]
 80093e8:	7033      	strb	r3, [r6, #0]
 80093ea:	002b      	movs	r3, r5
 80093ec:	0005      	movs	r5, r0
 80093ee:	429f      	cmp	r7, r3
 80093f0:	d9f3      	bls.n	80093da <_printf_i+0xf6>
 80093f2:	2f08      	cmp	r7, #8
 80093f4:	d109      	bne.n	800940a <_printf_i+0x126>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	07db      	lsls	r3, r3, #31
 80093fa:	d506      	bpl.n	800940a <_printf_i+0x126>
 80093fc:	6862      	ldr	r2, [r4, #4]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	dc02      	bgt.n	800940a <_printf_i+0x126>
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	3e01      	subs	r6, #1
 8009408:	7033      	strb	r3, [r6, #0]
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	1b9b      	subs	r3, r3, r6
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	9b07      	ldr	r3, [sp, #28]
 8009412:	0021      	movs	r1, r4
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	9805      	ldr	r0, [sp, #20]
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	aa09      	add	r2, sp, #36	; 0x24
 800941c:	f7ff fef2 	bl	8009204 <_printf_common>
 8009420:	3001      	adds	r0, #1
 8009422:	d147      	bne.n	80094b4 <_printf_i+0x1d0>
 8009424:	2001      	movs	r0, #1
 8009426:	4240      	negs	r0, r0
 8009428:	b00b      	add	sp, #44	; 0x2c
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	2220      	movs	r2, #32
 800942e:	6809      	ldr	r1, [r1, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	2278      	movs	r2, #120	; 0x78
 8009436:	4932      	ldr	r1, [pc, #200]	; (8009500 <_printf_i+0x21c>)
 8009438:	9103      	str	r1, [sp, #12]
 800943a:	0021      	movs	r1, r4
 800943c:	3145      	adds	r1, #69	; 0x45
 800943e:	700a      	strb	r2, [r1, #0]
 8009440:	6819      	ldr	r1, [r3, #0]
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	c920      	ldmia	r1!, {r5}
 8009446:	0610      	lsls	r0, r2, #24
 8009448:	d402      	bmi.n	8009450 <_printf_i+0x16c>
 800944a:	0650      	lsls	r0, r2, #25
 800944c:	d500      	bpl.n	8009450 <_printf_i+0x16c>
 800944e:	b2ad      	uxth	r5, r5
 8009450:	6019      	str	r1, [r3, #0]
 8009452:	07d3      	lsls	r3, r2, #31
 8009454:	d502      	bpl.n	800945c <_printf_i+0x178>
 8009456:	2320      	movs	r3, #32
 8009458:	4313      	orrs	r3, r2
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	2710      	movs	r7, #16
 800945e:	2d00      	cmp	r5, #0
 8009460:	d1a9      	bne.n	80093b6 <_printf_i+0xd2>
 8009462:	2220      	movs	r2, #32
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	4393      	bics	r3, r2
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	e7a4      	b.n	80093b6 <_printf_i+0xd2>
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	680d      	ldr	r5, [r1, #0]
 8009470:	1d10      	adds	r0, r2, #4
 8009472:	6949      	ldr	r1, [r1, #20]
 8009474:	6018      	str	r0, [r3, #0]
 8009476:	6813      	ldr	r3, [r2, #0]
 8009478:	062e      	lsls	r6, r5, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0x19c>
 800947c:	6019      	str	r1, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0x1a2>
 8009480:	066d      	lsls	r5, r5, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0x198>
 8009484:	8019      	strh	r1, [r3, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	9e04      	ldr	r6, [sp, #16]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	e7c0      	b.n	8009410 <_printf_i+0x12c>
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	1d11      	adds	r1, r2, #4
 8009492:	6019      	str	r1, [r3, #0]
 8009494:	6816      	ldr	r6, [r2, #0]
 8009496:	2100      	movs	r1, #0
 8009498:	0030      	movs	r0, r6
 800949a:	6862      	ldr	r2, [r4, #4]
 800949c:	f000 f9c9 	bl	8009832 <memchr>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d001      	beq.n	80094a8 <_printf_i+0x1c4>
 80094a4:	1b80      	subs	r0, r0, r6
 80094a6:	6060      	str	r0, [r4, #4]
 80094a8:	6863      	ldr	r3, [r4, #4]
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	2300      	movs	r3, #0
 80094ae:	9a04      	ldr	r2, [sp, #16]
 80094b0:	7013      	strb	r3, [r2, #0]
 80094b2:	e7ad      	b.n	8009410 <_printf_i+0x12c>
 80094b4:	0032      	movs	r2, r6
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	9906      	ldr	r1, [sp, #24]
 80094ba:	9805      	ldr	r0, [sp, #20]
 80094bc:	9d07      	ldr	r5, [sp, #28]
 80094be:	47a8      	blx	r5
 80094c0:	3001      	adds	r0, #1
 80094c2:	d0af      	beq.n	8009424 <_printf_i+0x140>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	079b      	lsls	r3, r3, #30
 80094c8:	d415      	bmi.n	80094f6 <_printf_i+0x212>
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	68e0      	ldr	r0, [r4, #12]
 80094ce:	4298      	cmp	r0, r3
 80094d0:	daaa      	bge.n	8009428 <_printf_i+0x144>
 80094d2:	0018      	movs	r0, r3
 80094d4:	e7a8      	b.n	8009428 <_printf_i+0x144>
 80094d6:	0022      	movs	r2, r4
 80094d8:	2301      	movs	r3, #1
 80094da:	9906      	ldr	r1, [sp, #24]
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	9e07      	ldr	r6, [sp, #28]
 80094e0:	3219      	adds	r2, #25
 80094e2:	47b0      	blx	r6
 80094e4:	3001      	adds	r0, #1
 80094e6:	d09d      	beq.n	8009424 <_printf_i+0x140>
 80094e8:	3501      	adds	r5, #1
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dcf0      	bgt.n	80094d6 <_printf_i+0x1f2>
 80094f4:	e7e9      	b.n	80094ca <_printf_i+0x1e6>
 80094f6:	2500      	movs	r5, #0
 80094f8:	e7f7      	b.n	80094ea <_printf_i+0x206>
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	0800b83e 	.word	0x0800b83e
 8009500:	0800b84f 	.word	0x0800b84f

08009504 <std>:
 8009504:	2300      	movs	r3, #0
 8009506:	b510      	push	{r4, lr}
 8009508:	0004      	movs	r4, r0
 800950a:	6003      	str	r3, [r0, #0]
 800950c:	6043      	str	r3, [r0, #4]
 800950e:	6083      	str	r3, [r0, #8]
 8009510:	8181      	strh	r1, [r0, #12]
 8009512:	6643      	str	r3, [r0, #100]	; 0x64
 8009514:	81c2      	strh	r2, [r0, #14]
 8009516:	6103      	str	r3, [r0, #16]
 8009518:	6143      	str	r3, [r0, #20]
 800951a:	6183      	str	r3, [r0, #24]
 800951c:	0019      	movs	r1, r3
 800951e:	2208      	movs	r2, #8
 8009520:	305c      	adds	r0, #92	; 0x5c
 8009522:	f000 f8ff 	bl	8009724 <memset>
 8009526:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <std+0x50>)
 8009528:	6224      	str	r4, [r4, #32]
 800952a:	6263      	str	r3, [r4, #36]	; 0x24
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <std+0x54>)
 800952e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <std+0x58>)
 8009532:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <std+0x5c>)
 8009536:	6323      	str	r3, [r4, #48]	; 0x30
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <std+0x60>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d005      	beq.n	800954a <std+0x46>
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <std+0x64>)
 8009540:	429c      	cmp	r4, r3
 8009542:	d002      	beq.n	800954a <std+0x46>
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <std+0x68>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d103      	bne.n	8009552 <std+0x4e>
 800954a:	0020      	movs	r0, r4
 800954c:	3058      	adds	r0, #88	; 0x58
 800954e:	f000 f96d 	bl	800982c <__retarget_lock_init_recursive>
 8009552:	bd10      	pop	{r4, pc}
 8009554:	0800968d 	.word	0x0800968d
 8009558:	080096b5 	.word	0x080096b5
 800955c:	080096ed 	.word	0x080096ed
 8009560:	08009719 	.word	0x08009719
 8009564:	20000494 	.word	0x20000494
 8009568:	200004fc 	.word	0x200004fc
 800956c:	20000564 	.word	0x20000564

08009570 <stdio_exit_handler>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4a03      	ldr	r2, [pc, #12]	; (8009580 <stdio_exit_handler+0x10>)
 8009574:	4903      	ldr	r1, [pc, #12]	; (8009584 <stdio_exit_handler+0x14>)
 8009576:	4804      	ldr	r0, [pc, #16]	; (8009588 <stdio_exit_handler+0x18>)
 8009578:	f000 f86c 	bl	8009654 <_fwalk_sglue>
 800957c:	bd10      	pop	{r4, pc}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	2000000c 	.word	0x2000000c
 8009584:	0800afdd 	.word	0x0800afdd
 8009588:	20000018 	.word	0x20000018

0800958c <cleanup_stdio>:
 800958c:	6841      	ldr	r1, [r0, #4]
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <cleanup_stdio+0x30>)
 8009590:	b510      	push	{r4, lr}
 8009592:	0004      	movs	r4, r0
 8009594:	4299      	cmp	r1, r3
 8009596:	d001      	beq.n	800959c <cleanup_stdio+0x10>
 8009598:	f001 fd20 	bl	800afdc <_fflush_r>
 800959c:	68a1      	ldr	r1, [r4, #8]
 800959e:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <cleanup_stdio+0x34>)
 80095a0:	4299      	cmp	r1, r3
 80095a2:	d002      	beq.n	80095aa <cleanup_stdio+0x1e>
 80095a4:	0020      	movs	r0, r4
 80095a6:	f001 fd19 	bl	800afdc <_fflush_r>
 80095aa:	68e1      	ldr	r1, [r4, #12]
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <cleanup_stdio+0x38>)
 80095ae:	4299      	cmp	r1, r3
 80095b0:	d002      	beq.n	80095b8 <cleanup_stdio+0x2c>
 80095b2:	0020      	movs	r0, r4
 80095b4:	f001 fd12 	bl	800afdc <_fflush_r>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	20000494 	.word	0x20000494
 80095c0:	200004fc 	.word	0x200004fc
 80095c4:	20000564 	.word	0x20000564

080095c8 <global_stdio_init.part.0>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <global_stdio_init.part.0+0x28>)
 80095cc:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <global_stdio_init.part.0+0x2c>)
 80095ce:	2104      	movs	r1, #4
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	4809      	ldr	r0, [pc, #36]	; (80095f8 <global_stdio_init.part.0+0x30>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	f7ff ff95 	bl	8009504 <std>
 80095da:	2201      	movs	r2, #1
 80095dc:	2109      	movs	r1, #9
 80095de:	4807      	ldr	r0, [pc, #28]	; (80095fc <global_stdio_init.part.0+0x34>)
 80095e0:	f7ff ff90 	bl	8009504 <std>
 80095e4:	2202      	movs	r2, #2
 80095e6:	2112      	movs	r1, #18
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <global_stdio_init.part.0+0x38>)
 80095ea:	f7ff ff8b 	bl	8009504 <std>
 80095ee:	bd10      	pop	{r4, pc}
 80095f0:	200005cc 	.word	0x200005cc
 80095f4:	08009571 	.word	0x08009571
 80095f8:	20000494 	.word	0x20000494
 80095fc:	200004fc 	.word	0x200004fc
 8009600:	20000564 	.word	0x20000564

08009604 <__sfp_lock_acquire>:
 8009604:	b510      	push	{r4, lr}
 8009606:	4802      	ldr	r0, [pc, #8]	; (8009610 <__sfp_lock_acquire+0xc>)
 8009608:	f000 f911 	bl	800982e <__retarget_lock_acquire_recursive>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	200005d5 	.word	0x200005d5

08009614 <__sfp_lock_release>:
 8009614:	b510      	push	{r4, lr}
 8009616:	4802      	ldr	r0, [pc, #8]	; (8009620 <__sfp_lock_release+0xc>)
 8009618:	f000 f90a 	bl	8009830 <__retarget_lock_release_recursive>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	200005d5 	.word	0x200005d5

08009624 <__sinit>:
 8009624:	b510      	push	{r4, lr}
 8009626:	0004      	movs	r4, r0
 8009628:	f7ff ffec 	bl	8009604 <__sfp_lock_acquire>
 800962c:	6a23      	ldr	r3, [r4, #32]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <__sinit+0x14>
 8009632:	f7ff ffef 	bl	8009614 <__sfp_lock_release>
 8009636:	bd10      	pop	{r4, pc}
 8009638:	4b04      	ldr	r3, [pc, #16]	; (800964c <__sinit+0x28>)
 800963a:	6223      	str	r3, [r4, #32]
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <__sinit+0x2c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f6      	bne.n	8009632 <__sinit+0xe>
 8009644:	f7ff ffc0 	bl	80095c8 <global_stdio_init.part.0>
 8009648:	e7f3      	b.n	8009632 <__sinit+0xe>
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	0800958d 	.word	0x0800958d
 8009650:	200005cc 	.word	0x200005cc

08009654 <_fwalk_sglue>:
 8009654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009656:	0014      	movs	r4, r2
 8009658:	2600      	movs	r6, #0
 800965a:	9000      	str	r0, [sp, #0]
 800965c:	9101      	str	r1, [sp, #4]
 800965e:	68a5      	ldr	r5, [r4, #8]
 8009660:	6867      	ldr	r7, [r4, #4]
 8009662:	3f01      	subs	r7, #1
 8009664:	d504      	bpl.n	8009670 <_fwalk_sglue+0x1c>
 8009666:	6824      	ldr	r4, [r4, #0]
 8009668:	2c00      	cmp	r4, #0
 800966a:	d1f8      	bne.n	800965e <_fwalk_sglue+0xa>
 800966c:	0030      	movs	r0, r6
 800966e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009670:	89ab      	ldrh	r3, [r5, #12]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d908      	bls.n	8009688 <_fwalk_sglue+0x34>
 8009676:	220e      	movs	r2, #14
 8009678:	5eab      	ldrsh	r3, [r5, r2]
 800967a:	3301      	adds	r3, #1
 800967c:	d004      	beq.n	8009688 <_fwalk_sglue+0x34>
 800967e:	0029      	movs	r1, r5
 8009680:	9800      	ldr	r0, [sp, #0]
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	4798      	blx	r3
 8009686:	4306      	orrs	r6, r0
 8009688:	3568      	adds	r5, #104	; 0x68
 800968a:	e7ea      	b.n	8009662 <_fwalk_sglue+0xe>

0800968c <__sread>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	000c      	movs	r4, r1
 8009690:	250e      	movs	r5, #14
 8009692:	5f49      	ldrsh	r1, [r1, r5]
 8009694:	f000 f878 	bl	8009788 <_read_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	db03      	blt.n	80096a4 <__sread+0x18>
 800969c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800969e:	181b      	adds	r3, r3, r0
 80096a0:	6563      	str	r3, [r4, #84]	; 0x54
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	4a02      	ldr	r2, [pc, #8]	; (80096b0 <__sread+0x24>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	e7f9      	b.n	80096a2 <__sread+0x16>
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	ffffefff 	.word	0xffffefff

080096b4 <__swrite>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	001f      	movs	r7, r3
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	0005      	movs	r5, r0
 80096bc:	000c      	movs	r4, r1
 80096be:	0016      	movs	r6, r2
 80096c0:	05db      	lsls	r3, r3, #23
 80096c2:	d505      	bpl.n	80096d0 <__swrite+0x1c>
 80096c4:	230e      	movs	r3, #14
 80096c6:	5ec9      	ldrsh	r1, [r1, r3]
 80096c8:	2200      	movs	r2, #0
 80096ca:	2302      	movs	r3, #2
 80096cc:	f000 f848 	bl	8009760 <_lseek_r>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <__swrite+0x34>)
 80096d4:	0028      	movs	r0, r5
 80096d6:	4013      	ands	r3, r2
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	0032      	movs	r2, r6
 80096dc:	230e      	movs	r3, #14
 80096de:	5ee1      	ldrsh	r1, [r4, r3]
 80096e0:	003b      	movs	r3, r7
 80096e2:	f000 f865 	bl	80097b0 <_write_r>
 80096e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e8:	ffffefff 	.word	0xffffefff

080096ec <__sseek>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	000c      	movs	r4, r1
 80096f0:	250e      	movs	r5, #14
 80096f2:	5f49      	ldrsh	r1, [r1, r5]
 80096f4:	f000 f834 	bl	8009760 <_lseek_r>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	1c42      	adds	r2, r0, #1
 80096fc:	d103      	bne.n	8009706 <__sseek+0x1a>
 80096fe:	4a05      	ldr	r2, [pc, #20]	; (8009714 <__sseek+0x28>)
 8009700:	4013      	ands	r3, r2
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	bd70      	pop	{r4, r5, r6, pc}
 8009706:	2280      	movs	r2, #128	; 0x80
 8009708:	0152      	lsls	r2, r2, #5
 800970a:	4313      	orrs	r3, r2
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	6560      	str	r0, [r4, #84]	; 0x54
 8009710:	e7f8      	b.n	8009704 <__sseek+0x18>
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	ffffefff 	.word	0xffffefff

08009718 <__sclose>:
 8009718:	b510      	push	{r4, lr}
 800971a:	230e      	movs	r3, #14
 800971c:	5ec9      	ldrsh	r1, [r1, r3]
 800971e:	f000 f80d 	bl	800973c <_close_r>
 8009722:	bd10      	pop	{r4, pc}

08009724 <memset>:
 8009724:	0003      	movs	r3, r0
 8009726:	1882      	adds	r2, r0, r2
 8009728:	4293      	cmp	r3, r2
 800972a:	d100      	bne.n	800972e <memset+0xa>
 800972c:	4770      	bx	lr
 800972e:	7019      	strb	r1, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	e7f9      	b.n	8009728 <memset+0x4>

08009734 <_localeconv_r>:
 8009734:	4800      	ldr	r0, [pc, #0]	; (8009738 <_localeconv_r+0x4>)
 8009736:	4770      	bx	lr
 8009738:	20000158 	.word	0x20000158

0800973c <_close_r>:
 800973c:	2300      	movs	r3, #0
 800973e:	b570      	push	{r4, r5, r6, lr}
 8009740:	4d06      	ldr	r5, [pc, #24]	; (800975c <_close_r+0x20>)
 8009742:	0004      	movs	r4, r0
 8009744:	0008      	movs	r0, r1
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	f7fa fd79 	bl	800423e <_close>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d103      	bne.n	8009758 <_close_r+0x1c>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d000      	beq.n	8009758 <_close_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	200005d0 	.word	0x200005d0

08009760 <_lseek_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	0004      	movs	r4, r0
 8009764:	0008      	movs	r0, r1
 8009766:	0011      	movs	r1, r2
 8009768:	001a      	movs	r2, r3
 800976a:	2300      	movs	r3, #0
 800976c:	4d05      	ldr	r5, [pc, #20]	; (8009784 <_lseek_r+0x24>)
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7fa fd86 	bl	8004280 <_lseek>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d103      	bne.n	8009780 <_lseek_r+0x20>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d000      	beq.n	8009780 <_lseek_r+0x20>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	200005d0 	.word	0x200005d0

08009788 <_read_r>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	0004      	movs	r4, r0
 800978c:	0008      	movs	r0, r1
 800978e:	0011      	movs	r1, r2
 8009790:	001a      	movs	r2, r3
 8009792:	2300      	movs	r3, #0
 8009794:	4d05      	ldr	r5, [pc, #20]	; (80097ac <_read_r+0x24>)
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7fa fd18 	bl	80041cc <_read>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d103      	bne.n	80097a8 <_read_r+0x20>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d000      	beq.n	80097a8 <_read_r+0x20>
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	200005d0 	.word	0x200005d0

080097b0 <_write_r>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	0004      	movs	r4, r0
 80097b4:	0008      	movs	r0, r1
 80097b6:	0011      	movs	r1, r2
 80097b8:	001a      	movs	r2, r3
 80097ba:	2300      	movs	r3, #0
 80097bc:	4d05      	ldr	r5, [pc, #20]	; (80097d4 <_write_r+0x24>)
 80097be:	602b      	str	r3, [r5, #0]
 80097c0:	f7fa fd21 	bl	8004206 <_write>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d103      	bne.n	80097d0 <_write_r+0x20>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d000      	beq.n	80097d0 <_write_r+0x20>
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	bd70      	pop	{r4, r5, r6, pc}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	200005d0 	.word	0x200005d0

080097d8 <__errno>:
 80097d8:	4b01      	ldr	r3, [pc, #4]	; (80097e0 <__errno+0x8>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	4770      	bx	lr
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	20000064 	.word	0x20000064

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	2600      	movs	r6, #0
 80097e8:	4c0c      	ldr	r4, [pc, #48]	; (800981c <__libc_init_array+0x38>)
 80097ea:	4d0d      	ldr	r5, [pc, #52]	; (8009820 <__libc_init_array+0x3c>)
 80097ec:	1b64      	subs	r4, r4, r5
 80097ee:	10a4      	asrs	r4, r4, #2
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	2600      	movs	r6, #0
 80097f6:	f001 ff77 	bl	800b6e8 <_init>
 80097fa:	4c0a      	ldr	r4, [pc, #40]	; (8009824 <__libc_init_array+0x40>)
 80097fc:	4d0a      	ldr	r5, [pc, #40]	; (8009828 <__libc_init_array+0x44>)
 80097fe:	1b64      	subs	r4, r4, r5
 8009800:	10a4      	asrs	r4, r4, #2
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	00b3      	lsls	r3, r6, #2
 800980a:	58eb      	ldr	r3, [r5, r3]
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	00b3      	lsls	r3, r6, #2
 8009814:	58eb      	ldr	r3, [r5, r3]
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	0800bba4 	.word	0x0800bba4
 8009820:	0800bba4 	.word	0x0800bba4
 8009824:	0800bba8 	.word	0x0800bba8
 8009828:	0800bba4 	.word	0x0800bba4

0800982c <__retarget_lock_init_recursive>:
 800982c:	4770      	bx	lr

0800982e <__retarget_lock_acquire_recursive>:
 800982e:	4770      	bx	lr

08009830 <__retarget_lock_release_recursive>:
 8009830:	4770      	bx	lr

08009832 <memchr>:
 8009832:	b2c9      	uxtb	r1, r1
 8009834:	1882      	adds	r2, r0, r2
 8009836:	4290      	cmp	r0, r2
 8009838:	d101      	bne.n	800983e <memchr+0xc>
 800983a:	2000      	movs	r0, #0
 800983c:	4770      	bx	lr
 800983e:	7803      	ldrb	r3, [r0, #0]
 8009840:	428b      	cmp	r3, r1
 8009842:	d0fb      	beq.n	800983c <memchr+0xa>
 8009844:	3001      	adds	r0, #1
 8009846:	e7f6      	b.n	8009836 <memchr+0x4>

08009848 <quorem>:
 8009848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984a:	6902      	ldr	r2, [r0, #16]
 800984c:	690b      	ldr	r3, [r1, #16]
 800984e:	b089      	sub	sp, #36	; 0x24
 8009850:	0007      	movs	r7, r0
 8009852:	9104      	str	r1, [sp, #16]
 8009854:	2000      	movs	r0, #0
 8009856:	429a      	cmp	r2, r3
 8009858:	db69      	blt.n	800992e <quorem+0xe6>
 800985a:	3b01      	subs	r3, #1
 800985c:	009c      	lsls	r4, r3, #2
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	000b      	movs	r3, r1
 8009862:	3314      	adds	r3, #20
 8009864:	9306      	str	r3, [sp, #24]
 8009866:	191b      	adds	r3, r3, r4
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	003b      	movs	r3, r7
 800986c:	3314      	adds	r3, #20
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	191c      	adds	r4, r3, r4
 8009872:	9b05      	ldr	r3, [sp, #20]
 8009874:	6826      	ldr	r6, [r4, #0]
 8009876:	681d      	ldr	r5, [r3, #0]
 8009878:	0030      	movs	r0, r6
 800987a:	3501      	adds	r5, #1
 800987c:	0029      	movs	r1, r5
 800987e:	f7f6 fc5f 	bl	8000140 <__udivsi3>
 8009882:	9002      	str	r0, [sp, #8]
 8009884:	42ae      	cmp	r6, r5
 8009886:	d329      	bcc.n	80098dc <quorem+0x94>
 8009888:	9b06      	ldr	r3, [sp, #24]
 800988a:	2600      	movs	r6, #0
 800988c:	469c      	mov	ip, r3
 800988e:	9d03      	ldr	r5, [sp, #12]
 8009890:	9606      	str	r6, [sp, #24]
 8009892:	4662      	mov	r2, ip
 8009894:	ca08      	ldmia	r2!, {r3}
 8009896:	6828      	ldr	r0, [r5, #0]
 8009898:	4694      	mov	ip, r2
 800989a:	9a02      	ldr	r2, [sp, #8]
 800989c:	b299      	uxth	r1, r3
 800989e:	4351      	muls	r1, r2
 80098a0:	0c1b      	lsrs	r3, r3, #16
 80098a2:	4353      	muls	r3, r2
 80098a4:	1989      	adds	r1, r1, r6
 80098a6:	0c0a      	lsrs	r2, r1, #16
 80098a8:	189b      	adds	r3, r3, r2
 80098aa:	9307      	str	r3, [sp, #28]
 80098ac:	0c1e      	lsrs	r6, r3, #16
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	b282      	uxth	r2, r0
 80098b2:	18d2      	adds	r2, r2, r3
 80098b4:	466b      	mov	r3, sp
 80098b6:	b289      	uxth	r1, r1
 80098b8:	8b9b      	ldrh	r3, [r3, #28]
 80098ba:	1a52      	subs	r2, r2, r1
 80098bc:	0c01      	lsrs	r1, r0, #16
 80098be:	1ac9      	subs	r1, r1, r3
 80098c0:	1413      	asrs	r3, r2, #16
 80098c2:	18cb      	adds	r3, r1, r3
 80098c4:	1419      	asrs	r1, r3, #16
 80098c6:	b292      	uxth	r2, r2
 80098c8:	041b      	lsls	r3, r3, #16
 80098ca:	4313      	orrs	r3, r2
 80098cc:	c508      	stmia	r5!, {r3}
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	9106      	str	r1, [sp, #24]
 80098d2:	4563      	cmp	r3, ip
 80098d4:	d2dd      	bcs.n	8009892 <quorem+0x4a>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d030      	beq.n	800993e <quorem+0xf6>
 80098dc:	0038      	movs	r0, r7
 80098de:	9904      	ldr	r1, [sp, #16]
 80098e0:	f001 f9de 	bl	800aca0 <__mcmp>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	db21      	blt.n	800992c <quorem+0xe4>
 80098e8:	0038      	movs	r0, r7
 80098ea:	2600      	movs	r6, #0
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	9c04      	ldr	r4, [sp, #16]
 80098f0:	3301      	adds	r3, #1
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	3014      	adds	r0, #20
 80098f6:	3414      	adds	r4, #20
 80098f8:	6803      	ldr	r3, [r0, #0]
 80098fa:	cc02      	ldmia	r4!, {r1}
 80098fc:	b29d      	uxth	r5, r3
 80098fe:	19ad      	adds	r5, r5, r6
 8009900:	b28a      	uxth	r2, r1
 8009902:	1aaa      	subs	r2, r5, r2
 8009904:	0c09      	lsrs	r1, r1, #16
 8009906:	0c1b      	lsrs	r3, r3, #16
 8009908:	1a5b      	subs	r3, r3, r1
 800990a:	1411      	asrs	r1, r2, #16
 800990c:	185b      	adds	r3, r3, r1
 800990e:	141e      	asrs	r6, r3, #16
 8009910:	b292      	uxth	r2, r2
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	4313      	orrs	r3, r2
 8009916:	c008      	stmia	r0!, {r3}
 8009918:	9b05      	ldr	r3, [sp, #20]
 800991a:	42a3      	cmp	r3, r4
 800991c:	d2ec      	bcs.n	80098f8 <quorem+0xb0>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	9a03      	ldr	r2, [sp, #12]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	18d3      	adds	r3, r2, r3
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	2a00      	cmp	r2, #0
 800992a:	d015      	beq.n	8009958 <quorem+0x110>
 800992c:	9802      	ldr	r0, [sp, #8]
 800992e:	b009      	add	sp, #36	; 0x24
 8009930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <quorem+0xfe>
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	3b01      	subs	r3, #1
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	3c04      	subs	r4, #4
 8009942:	42a3      	cmp	r3, r4
 8009944:	d3f5      	bcc.n	8009932 <quorem+0xea>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	e7c7      	b.n	80098dc <quorem+0x94>
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	2a00      	cmp	r2, #0
 8009950:	d106      	bne.n	8009960 <quorem+0x118>
 8009952:	9a01      	ldr	r2, [sp, #4]
 8009954:	3a01      	subs	r2, #1
 8009956:	9201      	str	r2, [sp, #4]
 8009958:	9a03      	ldr	r2, [sp, #12]
 800995a:	3b04      	subs	r3, #4
 800995c:	429a      	cmp	r2, r3
 800995e:	d3f5      	bcc.n	800994c <quorem+0x104>
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e7e2      	b.n	800992c <quorem+0xe4>
	...

08009968 <_dtoa_r>:
 8009968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996a:	0014      	movs	r4, r2
 800996c:	001d      	movs	r5, r3
 800996e:	69c6      	ldr	r6, [r0, #28]
 8009970:	b09d      	sub	sp, #116	; 0x74
 8009972:	9408      	str	r4, [sp, #32]
 8009974:	9509      	str	r5, [sp, #36]	; 0x24
 8009976:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009978:	9004      	str	r0, [sp, #16]
 800997a:	2e00      	cmp	r6, #0
 800997c:	d10f      	bne.n	800999e <_dtoa_r+0x36>
 800997e:	2010      	movs	r0, #16
 8009980:	f000 fe4a 	bl	800a618 <malloc>
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	1e02      	subs	r2, r0, #0
 8009988:	61d8      	str	r0, [r3, #28]
 800998a:	d104      	bne.n	8009996 <_dtoa_r+0x2e>
 800998c:	21ef      	movs	r1, #239	; 0xef
 800998e:	4bc6      	ldr	r3, [pc, #792]	; (8009ca8 <_dtoa_r+0x340>)
 8009990:	48c6      	ldr	r0, [pc, #792]	; (8009cac <_dtoa_r+0x344>)
 8009992:	f001 fb6b 	bl	800b06c <__assert_func>
 8009996:	6046      	str	r6, [r0, #4]
 8009998:	6086      	str	r6, [r0, #8]
 800999a:	6006      	str	r6, [r0, #0]
 800999c:	60c6      	str	r6, [r0, #12]
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	2900      	cmp	r1, #0
 80099a6:	d00b      	beq.n	80099c0 <_dtoa_r+0x58>
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	2301      	movs	r3, #1
 80099ac:	4093      	lsls	r3, r2
 80099ae:	604a      	str	r2, [r1, #4]
 80099b0:	608b      	str	r3, [r1, #8]
 80099b2:	9804      	ldr	r0, [sp, #16]
 80099b4:	f000 ff32 	bl	800a81c <_Bfree>
 80099b8:	2200      	movs	r2, #0
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	da1e      	bge.n	8009a02 <_dtoa_r+0x9a>
 80099c4:	2301      	movs	r3, #1
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	006b      	lsls	r3, r5, #1
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099d0:	4bb7      	ldr	r3, [pc, #732]	; (8009cb0 <_dtoa_r+0x348>)
 80099d2:	4ab7      	ldr	r2, [pc, #732]	; (8009cb0 <_dtoa_r+0x348>)
 80099d4:	403b      	ands	r3, r7
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d116      	bne.n	8009a08 <_dtoa_r+0xa0>
 80099da:	4bb6      	ldr	r3, [pc, #728]	; (8009cb4 <_dtoa_r+0x34c>)
 80099dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	033b      	lsls	r3, r7, #12
 80099e2:	0b1b      	lsrs	r3, r3, #12
 80099e4:	4323      	orrs	r3, r4
 80099e6:	d101      	bne.n	80099ec <_dtoa_r+0x84>
 80099e8:	f000 fdb5 	bl	800a556 <_dtoa_r+0xbee>
 80099ec:	4bb2      	ldr	r3, [pc, #712]	; (8009cb8 <_dtoa_r+0x350>)
 80099ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099f0:	9306      	str	r3, [sp, #24]
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	d002      	beq.n	80099fc <_dtoa_r+0x94>
 80099f6:	4bb1      	ldr	r3, [pc, #708]	; (8009cbc <_dtoa_r+0x354>)
 80099f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	9806      	ldr	r0, [sp, #24]
 80099fe:	b01d      	add	sp, #116	; 0x74
 8009a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a02:	2300      	movs	r3, #0
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	e7e2      	b.n	80099ce <_dtoa_r+0x66>
 8009a08:	9a08      	ldr	r2, [sp, #32]
 8009a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0c:	9210      	str	r2, [sp, #64]	; 0x40
 8009a0e:	9311      	str	r3, [sp, #68]	; 0x44
 8009a10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	f7f6 fd18 	bl	800044c <__aeabi_dcmpeq>
 8009a1c:	1e06      	subs	r6, r0, #0
 8009a1e:	d009      	beq.n	8009a34 <_dtoa_r+0xcc>
 8009a20:	2301      	movs	r3, #1
 8009a22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	4ba6      	ldr	r3, [pc, #664]	; (8009cc0 <_dtoa_r+0x358>)
 8009a28:	9306      	str	r3, [sp, #24]
 8009a2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0e5      	beq.n	80099fc <_dtoa_r+0x94>
 8009a30:	4ba4      	ldr	r3, [pc, #656]	; (8009cc4 <_dtoa_r+0x35c>)
 8009a32:	e7e1      	b.n	80099f8 <_dtoa_r+0x90>
 8009a34:	ab1a      	add	r3, sp, #104	; 0x68
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	9804      	ldr	r0, [sp, #16]
 8009a3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a42:	f001 f9e1 	bl	800ae08 <__d2b>
 8009a46:	007a      	lsls	r2, r7, #1
 8009a48:	9005      	str	r0, [sp, #20]
 8009a4a:	0d52      	lsrs	r2, r2, #21
 8009a4c:	d100      	bne.n	8009a50 <_dtoa_r+0xe8>
 8009a4e:	e07b      	b.n	8009b48 <_dtoa_r+0x1e0>
 8009a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a52:	9617      	str	r6, [sp, #92]	; 0x5c
 8009a54:	0319      	lsls	r1, r3, #12
 8009a56:	4b9c      	ldr	r3, [pc, #624]	; (8009cc8 <_dtoa_r+0x360>)
 8009a58:	0b09      	lsrs	r1, r1, #12
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	499b      	ldr	r1, [pc, #620]	; (8009ccc <_dtoa_r+0x364>)
 8009a5e:	1857      	adds	r7, r2, r1
 8009a60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a64:	0019      	movs	r1, r3
 8009a66:	2200      	movs	r2, #0
 8009a68:	4b99      	ldr	r3, [pc, #612]	; (8009cd0 <_dtoa_r+0x368>)
 8009a6a:	f7f8 fa9f 	bl	8001fac <__aeabi_dsub>
 8009a6e:	4a99      	ldr	r2, [pc, #612]	; (8009cd4 <_dtoa_r+0x36c>)
 8009a70:	4b99      	ldr	r3, [pc, #612]	; (8009cd8 <_dtoa_r+0x370>)
 8009a72:	f7f7 ffd9 	bl	8001a28 <__aeabi_dmul>
 8009a76:	4a99      	ldr	r2, [pc, #612]	; (8009cdc <_dtoa_r+0x374>)
 8009a78:	4b99      	ldr	r3, [pc, #612]	; (8009ce0 <_dtoa_r+0x378>)
 8009a7a:	f7f7 f87b 	bl	8000b74 <__aeabi_dadd>
 8009a7e:	0004      	movs	r4, r0
 8009a80:	0038      	movs	r0, r7
 8009a82:	000d      	movs	r5, r1
 8009a84:	f7f8 fe68 	bl	8002758 <__aeabi_i2d>
 8009a88:	4a96      	ldr	r2, [pc, #600]	; (8009ce4 <_dtoa_r+0x37c>)
 8009a8a:	4b97      	ldr	r3, [pc, #604]	; (8009ce8 <_dtoa_r+0x380>)
 8009a8c:	f7f7 ffcc 	bl	8001a28 <__aeabi_dmul>
 8009a90:	0002      	movs	r2, r0
 8009a92:	000b      	movs	r3, r1
 8009a94:	0020      	movs	r0, r4
 8009a96:	0029      	movs	r1, r5
 8009a98:	f7f7 f86c 	bl	8000b74 <__aeabi_dadd>
 8009a9c:	0004      	movs	r4, r0
 8009a9e:	000d      	movs	r5, r1
 8009aa0:	f7f8 fe24 	bl	80026ec <__aeabi_d2iz>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	9003      	str	r0, [sp, #12]
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	0020      	movs	r0, r4
 8009aac:	0029      	movs	r1, r5
 8009aae:	f7f6 fcd3 	bl	8000458 <__aeabi_dcmplt>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d00b      	beq.n	8009ace <_dtoa_r+0x166>
 8009ab6:	9803      	ldr	r0, [sp, #12]
 8009ab8:	f7f8 fe4e 	bl	8002758 <__aeabi_i2d>
 8009abc:	002b      	movs	r3, r5
 8009abe:	0022      	movs	r2, r4
 8009ac0:	f7f6 fcc4 	bl	800044c <__aeabi_dcmpeq>
 8009ac4:	4243      	negs	r3, r0
 8009ac6:	4158      	adcs	r0, r3
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	1a1b      	subs	r3, r3, r0
 8009acc:	9303      	str	r3, [sp, #12]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	9316      	str	r3, [sp, #88]	; 0x58
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	2b16      	cmp	r3, #22
 8009ad6:	d810      	bhi.n	8009afa <_dtoa_r+0x192>
 8009ad8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ada:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009adc:	9a03      	ldr	r2, [sp, #12]
 8009ade:	4b83      	ldr	r3, [pc, #524]	; (8009cec <_dtoa_r+0x384>)
 8009ae0:	00d2      	lsls	r2, r2, #3
 8009ae2:	189b      	adds	r3, r3, r2
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f7f6 fcb6 	bl	8000458 <__aeabi_dcmplt>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d047      	beq.n	8009b80 <_dtoa_r+0x218>
 8009af0:	9b03      	ldr	r3, [sp, #12]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	9316      	str	r3, [sp, #88]	; 0x58
 8009afa:	2200      	movs	r2, #0
 8009afc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009afe:	920a      	str	r2, [sp, #40]	; 0x28
 8009b00:	1bdb      	subs	r3, r3, r7
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	d53e      	bpl.n	8009b84 <_dtoa_r+0x21c>
 8009b06:	2201      	movs	r2, #1
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	db38      	blt.n	8009b88 <_dtoa_r+0x220>
 8009b16:	9a03      	ldr	r2, [sp, #12]
 8009b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1a:	4694      	mov	ip, r2
 8009b1c:	4463      	add	r3, ip
 8009b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b20:	2300      	movs	r3, #0
 8009b22:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b24:	930d      	str	r3, [sp, #52]	; 0x34
 8009b26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b28:	2401      	movs	r4, #1
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d867      	bhi.n	8009bfe <_dtoa_r+0x296>
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	dd02      	ble.n	8009b38 <_dtoa_r+0x1d0>
 8009b32:	2400      	movs	r4, #0
 8009b34:	3b04      	subs	r3, #4
 8009b36:	9322      	str	r3, [sp, #136]	; 0x88
 8009b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b3a:	1e98      	subs	r0, r3, #2
 8009b3c:	2803      	cmp	r0, #3
 8009b3e:	d867      	bhi.n	8009c10 <_dtoa_r+0x2a8>
 8009b40:	f7f6 faea 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009b44:	5b383a2b 	.word	0x5b383a2b
 8009b48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b4a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009b4c:	18f6      	adds	r6, r6, r3
 8009b4e:	4b68      	ldr	r3, [pc, #416]	; (8009cf0 <_dtoa_r+0x388>)
 8009b50:	18f2      	adds	r2, r6, r3
 8009b52:	2a20      	cmp	r2, #32
 8009b54:	dd0f      	ble.n	8009b76 <_dtoa_r+0x20e>
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	409f      	lsls	r7, r3
 8009b5c:	4b65      	ldr	r3, [pc, #404]	; (8009cf4 <_dtoa_r+0x38c>)
 8009b5e:	0038      	movs	r0, r7
 8009b60:	18f3      	adds	r3, r6, r3
 8009b62:	40dc      	lsrs	r4, r3
 8009b64:	4320      	orrs	r0, r4
 8009b66:	f7f8 fe27 	bl	80027b8 <__aeabi_ui2d>
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4b62      	ldr	r3, [pc, #392]	; (8009cf8 <_dtoa_r+0x390>)
 8009b6e:	1e77      	subs	r7, r6, #1
 8009b70:	18cb      	adds	r3, r1, r3
 8009b72:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b74:	e776      	b.n	8009a64 <_dtoa_r+0xfc>
 8009b76:	2320      	movs	r3, #32
 8009b78:	0020      	movs	r0, r4
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	4098      	lsls	r0, r3
 8009b7e:	e7f2      	b.n	8009b66 <_dtoa_r+0x1fe>
 8009b80:	9016      	str	r0, [sp, #88]	; 0x58
 8009b82:	e7ba      	b.n	8009afa <_dtoa_r+0x192>
 8009b84:	920c      	str	r2, [sp, #48]	; 0x30
 8009b86:	e7c3      	b.n	8009b10 <_dtoa_r+0x1a8>
 8009b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8a:	9a03      	ldr	r2, [sp, #12]
 8009b8c:	1a9b      	subs	r3, r3, r2
 8009b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b90:	4253      	negs	r3, r2
 8009b92:	930d      	str	r3, [sp, #52]	; 0x34
 8009b94:	2300      	movs	r3, #0
 8009b96:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b98:	e7c5      	b.n	8009b26 <_dtoa_r+0x1be>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ba2:	9307      	str	r3, [sp, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dc13      	bgt.n	8009bd0 <_dtoa_r+0x268>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	001a      	movs	r2, r3
 8009bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009bb2:	e00d      	b.n	8009bd0 <_dtoa_r+0x268>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e7f1      	b.n	8009b9c <_dtoa_r+0x234>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bbe:	4694      	mov	ip, r2
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	4463      	add	r3, ip
 8009bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	9307      	str	r3, [sp, #28]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	dc00      	bgt.n	8009bd0 <_dtoa_r+0x268>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	9a04      	ldr	r2, [sp, #16]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	69d0      	ldr	r0, [r2, #28]
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	0015      	movs	r5, r2
 8009bda:	3514      	adds	r5, #20
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	d91b      	bls.n	8009c18 <_dtoa_r+0x2b0>
 8009be0:	6041      	str	r1, [r0, #4]
 8009be2:	9804      	ldr	r0, [sp, #16]
 8009be4:	f000 fdd6 	bl	800a794 <_Balloc>
 8009be8:	9006      	str	r0, [sp, #24]
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d117      	bne.n	8009c1e <_dtoa_r+0x2b6>
 8009bee:	21b0      	movs	r1, #176	; 0xb0
 8009bf0:	4b42      	ldr	r3, [pc, #264]	; (8009cfc <_dtoa_r+0x394>)
 8009bf2:	482e      	ldr	r0, [pc, #184]	; (8009cac <_dtoa_r+0x344>)
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	31ff      	adds	r1, #255	; 0xff
 8009bf8:	e6cb      	b.n	8009992 <_dtoa_r+0x2a>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e7dd      	b.n	8009bba <_dtoa_r+0x252>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	940f      	str	r4, [sp, #60]	; 0x3c
 8009c02:	9322      	str	r3, [sp, #136]	; 0x88
 8009c04:	3b01      	subs	r3, #1
 8009c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	3313      	adds	r3, #19
 8009c0e:	e7cf      	b.n	8009bb0 <_dtoa_r+0x248>
 8009c10:	2301      	movs	r3, #1
 8009c12:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c14:	3b02      	subs	r3, #2
 8009c16:	e7f6      	b.n	8009c06 <_dtoa_r+0x29e>
 8009c18:	3101      	adds	r1, #1
 8009c1a:	0052      	lsls	r2, r2, #1
 8009c1c:	e7dc      	b.n	8009bd8 <_dtoa_r+0x270>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	2b0e      	cmp	r3, #14
 8009c2a:	d900      	bls.n	8009c2e <_dtoa_r+0x2c6>
 8009c2c:	e0e5      	b.n	8009dfa <_dtoa_r+0x492>
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d100      	bne.n	8009c34 <_dtoa_r+0x2cc>
 8009c32:	e0e2      	b.n	8009dfa <_dtoa_r+0x492>
 8009c34:	9b03      	ldr	r3, [sp, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd64      	ble.n	8009d04 <_dtoa_r+0x39c>
 8009c3a:	210f      	movs	r1, #15
 8009c3c:	9a03      	ldr	r2, [sp, #12]
 8009c3e:	4b2b      	ldr	r3, [pc, #172]	; (8009cec <_dtoa_r+0x384>)
 8009c40:	400a      	ands	r2, r1
 8009c42:	00d2      	lsls	r2, r2, #3
 8009c44:	189b      	adds	r3, r3, r2
 8009c46:	681e      	ldr	r6, [r3, #0]
 8009c48:	685f      	ldr	r7, [r3, #4]
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	2402      	movs	r4, #2
 8009c4e:	111d      	asrs	r5, r3, #4
 8009c50:	05db      	lsls	r3, r3, #23
 8009c52:	d50a      	bpl.n	8009c6a <_dtoa_r+0x302>
 8009c54:	4b2a      	ldr	r3, [pc, #168]	; (8009d00 <_dtoa_r+0x398>)
 8009c56:	400d      	ands	r5, r1
 8009c58:	6a1a      	ldr	r2, [r3, #32]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c60:	f7f7 fae8 	bl	8001234 <__aeabi_ddiv>
 8009c64:	9008      	str	r0, [sp, #32]
 8009c66:	9109      	str	r1, [sp, #36]	; 0x24
 8009c68:	3401      	adds	r4, #1
 8009c6a:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <_dtoa_r+0x398>)
 8009c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	d108      	bne.n	8009c84 <_dtoa_r+0x31c>
 8009c72:	9808      	ldr	r0, [sp, #32]
 8009c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c76:	0032      	movs	r2, r6
 8009c78:	003b      	movs	r3, r7
 8009c7a:	f7f7 fadb 	bl	8001234 <__aeabi_ddiv>
 8009c7e:	9008      	str	r0, [sp, #32]
 8009c80:	9109      	str	r1, [sp, #36]	; 0x24
 8009c82:	e05a      	b.n	8009d3a <_dtoa_r+0x3d2>
 8009c84:	2301      	movs	r3, #1
 8009c86:	421d      	tst	r5, r3
 8009c88:	d009      	beq.n	8009c9e <_dtoa_r+0x336>
 8009c8a:	18e4      	adds	r4, r4, r3
 8009c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c8e:	0030      	movs	r0, r6
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	0039      	movs	r1, r7
 8009c96:	f7f7 fec7 	bl	8001a28 <__aeabi_dmul>
 8009c9a:	0006      	movs	r6, r0
 8009c9c:	000f      	movs	r7, r1
 8009c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ca0:	106d      	asrs	r5, r5, #1
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	e7e2      	b.n	8009c6c <_dtoa_r+0x304>
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	0800b86d 	.word	0x0800b86d
 8009cac:	0800b884 	.word	0x0800b884
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	0000270f 	.word	0x0000270f
 8009cb8:	0800b869 	.word	0x0800b869
 8009cbc:	0800b86c 	.word	0x0800b86c
 8009cc0:	0800b83c 	.word	0x0800b83c
 8009cc4:	0800b83d 	.word	0x0800b83d
 8009cc8:	3ff00000 	.word	0x3ff00000
 8009ccc:	fffffc01 	.word	0xfffffc01
 8009cd0:	3ff80000 	.word	0x3ff80000
 8009cd4:	636f4361 	.word	0x636f4361
 8009cd8:	3fd287a7 	.word	0x3fd287a7
 8009cdc:	8b60c8b3 	.word	0x8b60c8b3
 8009ce0:	3fc68a28 	.word	0x3fc68a28
 8009ce4:	509f79fb 	.word	0x509f79fb
 8009ce8:	3fd34413 	.word	0x3fd34413
 8009cec:	0800b970 	.word	0x0800b970
 8009cf0:	00000432 	.word	0x00000432
 8009cf4:	00000412 	.word	0x00000412
 8009cf8:	fe100000 	.word	0xfe100000
 8009cfc:	0800b8dc 	.word	0x0800b8dc
 8009d00:	0800b948 	.word	0x0800b948
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	2402      	movs	r4, #2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d016      	beq.n	8009d3a <_dtoa_r+0x3d2>
 8009d0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d10:	220f      	movs	r2, #15
 8009d12:	425d      	negs	r5, r3
 8009d14:	402a      	ands	r2, r5
 8009d16:	4bdd      	ldr	r3, [pc, #884]	; (800a08c <_dtoa_r+0x724>)
 8009d18:	00d2      	lsls	r2, r2, #3
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f7f7 fe82 	bl	8001a28 <__aeabi_dmul>
 8009d24:	2701      	movs	r7, #1
 8009d26:	2300      	movs	r3, #0
 8009d28:	9008      	str	r0, [sp, #32]
 8009d2a:	9109      	str	r1, [sp, #36]	; 0x24
 8009d2c:	4ed8      	ldr	r6, [pc, #864]	; (800a090 <_dtoa_r+0x728>)
 8009d2e:	112d      	asrs	r5, r5, #4
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	d000      	beq.n	8009d36 <_dtoa_r+0x3ce>
 8009d34:	e091      	b.n	8009e5a <_dtoa_r+0x4f2>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1a1      	bne.n	8009c7e <_dtoa_r+0x316>
 8009d3a:	9e08      	ldr	r6, [sp, #32]
 8009d3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d100      	bne.n	8009d46 <_dtoa_r+0x3de>
 8009d44:	e094      	b.n	8009e70 <_dtoa_r+0x508>
 8009d46:	2200      	movs	r2, #0
 8009d48:	0030      	movs	r0, r6
 8009d4a:	0039      	movs	r1, r7
 8009d4c:	4bd1      	ldr	r3, [pc, #836]	; (800a094 <_dtoa_r+0x72c>)
 8009d4e:	f7f6 fb83 	bl	8000458 <__aeabi_dcmplt>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d100      	bne.n	8009d58 <_dtoa_r+0x3f0>
 8009d56:	e08b      	b.n	8009e70 <_dtoa_r+0x508>
 8009d58:	9b07      	ldr	r3, [sp, #28]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d100      	bne.n	8009d60 <_dtoa_r+0x3f8>
 8009d5e:	e087      	b.n	8009e70 <_dtoa_r+0x508>
 8009d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	dd45      	ble.n	8009df2 <_dtoa_r+0x48a>
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d6e:	0030      	movs	r0, r6
 8009d70:	4bc9      	ldr	r3, [pc, #804]	; (800a098 <_dtoa_r+0x730>)
 8009d72:	0039      	movs	r1, r7
 8009d74:	f7f7 fe58 	bl	8001a28 <__aeabi_dmul>
 8009d78:	9008      	str	r0, [sp, #32]
 8009d7a:	9109      	str	r1, [sp, #36]	; 0x24
 8009d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d7e:	3401      	adds	r4, #1
 8009d80:	0020      	movs	r0, r4
 8009d82:	9e08      	ldr	r6, [sp, #32]
 8009d84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d86:	9312      	str	r3, [sp, #72]	; 0x48
 8009d88:	f7f8 fce6 	bl	8002758 <__aeabi_i2d>
 8009d8c:	0032      	movs	r2, r6
 8009d8e:	003b      	movs	r3, r7
 8009d90:	f7f7 fe4a 	bl	8001a28 <__aeabi_dmul>
 8009d94:	2200      	movs	r2, #0
 8009d96:	4bc1      	ldr	r3, [pc, #772]	; (800a09c <_dtoa_r+0x734>)
 8009d98:	f7f6 feec 	bl	8000b74 <__aeabi_dadd>
 8009d9c:	4ac0      	ldr	r2, [pc, #768]	; (800a0a0 <_dtoa_r+0x738>)
 8009d9e:	9014      	str	r0, [sp, #80]	; 0x50
 8009da0:	9115      	str	r1, [sp, #84]	; 0x54
 8009da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009da6:	4694      	mov	ip, r2
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9409      	str	r4, [sp, #36]	; 0x24
 8009dac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dae:	4463      	add	r3, ip
 8009db0:	9318      	str	r3, [sp, #96]	; 0x60
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d15e      	bne.n	8009e78 <_dtoa_r+0x510>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4bb9      	ldr	r3, [pc, #740]	; (800a0a4 <_dtoa_r+0x73c>)
 8009dbe:	0030      	movs	r0, r6
 8009dc0:	0039      	movs	r1, r7
 8009dc2:	f7f8 f8f3 	bl	8001fac <__aeabi_dsub>
 8009dc6:	9a08      	ldr	r2, [sp, #32]
 8009dc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009dca:	0004      	movs	r4, r0
 8009dcc:	000d      	movs	r5, r1
 8009dce:	f7f6 fb57 	bl	8000480 <__aeabi_dcmpgt>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d000      	beq.n	8009dd8 <_dtoa_r+0x470>
 8009dd6:	e2b3      	b.n	800a340 <_dtoa_r+0x9d8>
 8009dd8:	48b3      	ldr	r0, [pc, #716]	; (800a0a8 <_dtoa_r+0x740>)
 8009dda:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009ddc:	4684      	mov	ip, r0
 8009dde:	4461      	add	r1, ip
 8009de0:	000b      	movs	r3, r1
 8009de2:	0020      	movs	r0, r4
 8009de4:	0029      	movs	r1, r5
 8009de6:	9a08      	ldr	r2, [sp, #32]
 8009de8:	f7f6 fb36 	bl	8000458 <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d000      	beq.n	8009df2 <_dtoa_r+0x48a>
 8009df0:	e2a3      	b.n	800a33a <_dtoa_r+0x9d2>
 8009df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009df4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009df6:	9308      	str	r3, [sp, #32]
 8009df8:	9409      	str	r4, [sp, #36]	; 0x24
 8009dfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	da00      	bge.n	8009e02 <_dtoa_r+0x49a>
 8009e00:	e179      	b.n	800a0f6 <_dtoa_r+0x78e>
 8009e02:	9a03      	ldr	r2, [sp, #12]
 8009e04:	2a0e      	cmp	r2, #14
 8009e06:	dd00      	ble.n	8009e0a <_dtoa_r+0x4a2>
 8009e08:	e175      	b.n	800a0f6 <_dtoa_r+0x78e>
 8009e0a:	4ba0      	ldr	r3, [pc, #640]	; (800a08c <_dtoa_r+0x724>)
 8009e0c:	00d2      	lsls	r2, r2, #3
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	681e      	ldr	r6, [r3, #0]
 8009e12:	685f      	ldr	r7, [r3, #4]
 8009e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	db00      	blt.n	8009e1c <_dtoa_r+0x4b4>
 8009e1a:	e0e5      	b.n	8009fe8 <_dtoa_r+0x680>
 8009e1c:	9b07      	ldr	r3, [sp, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd00      	ble.n	8009e24 <_dtoa_r+0x4bc>
 8009e22:	e0e1      	b.n	8009fe8 <_dtoa_r+0x680>
 8009e24:	d000      	beq.n	8009e28 <_dtoa_r+0x4c0>
 8009e26:	e288      	b.n	800a33a <_dtoa_r+0x9d2>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	0030      	movs	r0, r6
 8009e2c:	0039      	movs	r1, r7
 8009e2e:	4b9d      	ldr	r3, [pc, #628]	; (800a0a4 <_dtoa_r+0x73c>)
 8009e30:	f7f7 fdfa 	bl	8001a28 <__aeabi_dmul>
 8009e34:	9a08      	ldr	r2, [sp, #32]
 8009e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e38:	f7f6 fb2c 	bl	8000494 <__aeabi_dcmpge>
 8009e3c:	9e07      	ldr	r6, [sp, #28]
 8009e3e:	0037      	movs	r7, r6
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d000      	beq.n	8009e46 <_dtoa_r+0x4de>
 8009e44:	e25f      	b.n	800a306 <_dtoa_r+0x99e>
 8009e46:	9b06      	ldr	r3, [sp, #24]
 8009e48:	9a06      	ldr	r2, [sp, #24]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9308      	str	r3, [sp, #32]
 8009e4e:	2331      	movs	r3, #49	; 0x31
 8009e50:	7013      	strb	r3, [r2, #0]
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	e25a      	b.n	800a310 <_dtoa_r+0x9a8>
 8009e5a:	423d      	tst	r5, r7
 8009e5c:	d005      	beq.n	8009e6a <_dtoa_r+0x502>
 8009e5e:	6832      	ldr	r2, [r6, #0]
 8009e60:	6873      	ldr	r3, [r6, #4]
 8009e62:	f7f7 fde1 	bl	8001a28 <__aeabi_dmul>
 8009e66:	003b      	movs	r3, r7
 8009e68:	3401      	adds	r4, #1
 8009e6a:	106d      	asrs	r5, r5, #1
 8009e6c:	3608      	adds	r6, #8
 8009e6e:	e75f      	b.n	8009d30 <_dtoa_r+0x3c8>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	930e      	str	r3, [sp, #56]	; 0x38
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	e783      	b.n	8009d80 <_dtoa_r+0x418>
 8009e78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e7a:	4b84      	ldr	r3, [pc, #528]	; (800a08c <_dtoa_r+0x724>)
 8009e7c:	3a01      	subs	r2, #1
 8009e7e:	00d2      	lsls	r2, r2, #3
 8009e80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	9c08      	ldr	r4, [sp, #32]
 8009e86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d051      	beq.n	8009f34 <_dtoa_r+0x5cc>
 8009e90:	2000      	movs	r0, #0
 8009e92:	4986      	ldr	r1, [pc, #536]	; (800a0ac <_dtoa_r+0x744>)
 8009e94:	f7f7 f9ce 	bl	8001234 <__aeabi_ddiv>
 8009e98:	0022      	movs	r2, r4
 8009e9a:	002b      	movs	r3, r5
 8009e9c:	f7f8 f886 	bl	8001fac <__aeabi_dsub>
 8009ea0:	9a06      	ldr	r2, [sp, #24]
 8009ea2:	0004      	movs	r4, r0
 8009ea4:	4694      	mov	ip, r2
 8009ea6:	000d      	movs	r5, r1
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	9314      	str	r3, [sp, #80]	; 0x50
 8009eac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eae:	4463      	add	r3, ip
 8009eb0:	9318      	str	r3, [sp, #96]	; 0x60
 8009eb2:	0039      	movs	r1, r7
 8009eb4:	0030      	movs	r0, r6
 8009eb6:	f7f8 fc19 	bl	80026ec <__aeabi_d2iz>
 8009eba:	9012      	str	r0, [sp, #72]	; 0x48
 8009ebc:	f7f8 fc4c 	bl	8002758 <__aeabi_i2d>
 8009ec0:	0002      	movs	r2, r0
 8009ec2:	000b      	movs	r3, r1
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	0039      	movs	r1, r7
 8009ec8:	f7f8 f870 	bl	8001fac <__aeabi_dsub>
 8009ecc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ece:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ed6:	0006      	movs	r6, r0
 8009ed8:	3330      	adds	r3, #48	; 0x30
 8009eda:	7013      	strb	r3, [r2, #0]
 8009edc:	0022      	movs	r2, r4
 8009ede:	002b      	movs	r3, r5
 8009ee0:	000f      	movs	r7, r1
 8009ee2:	f7f6 fab9 	bl	8000458 <__aeabi_dcmplt>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d174      	bne.n	8009fd4 <_dtoa_r+0x66c>
 8009eea:	0032      	movs	r2, r6
 8009eec:	003b      	movs	r3, r7
 8009eee:	2000      	movs	r0, #0
 8009ef0:	4968      	ldr	r1, [pc, #416]	; (800a094 <_dtoa_r+0x72c>)
 8009ef2:	f7f8 f85b 	bl	8001fac <__aeabi_dsub>
 8009ef6:	0022      	movs	r2, r4
 8009ef8:	002b      	movs	r3, r5
 8009efa:	f7f6 faad 	bl	8000458 <__aeabi_dcmplt>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d000      	beq.n	8009f04 <_dtoa_r+0x59c>
 8009f02:	e0d7      	b.n	800a0b4 <_dtoa_r+0x74c>
 8009f04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f06:	9a08      	ldr	r2, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d100      	bne.n	8009f0e <_dtoa_r+0x5a6>
 8009f0c:	e771      	b.n	8009df2 <_dtoa_r+0x48a>
 8009f0e:	2200      	movs	r2, #0
 8009f10:	0020      	movs	r0, r4
 8009f12:	0029      	movs	r1, r5
 8009f14:	4b60      	ldr	r3, [pc, #384]	; (800a098 <_dtoa_r+0x730>)
 8009f16:	f7f7 fd87 	bl	8001a28 <__aeabi_dmul>
 8009f1a:	4b5f      	ldr	r3, [pc, #380]	; (800a098 <_dtoa_r+0x730>)
 8009f1c:	0004      	movs	r4, r0
 8009f1e:	000d      	movs	r5, r1
 8009f20:	0030      	movs	r0, r6
 8009f22:	0039      	movs	r1, r7
 8009f24:	2200      	movs	r2, #0
 8009f26:	f7f7 fd7f 	bl	8001a28 <__aeabi_dmul>
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	0006      	movs	r6, r0
 8009f2e:	000f      	movs	r7, r1
 8009f30:	9314      	str	r3, [sp, #80]	; 0x50
 8009f32:	e7be      	b.n	8009eb2 <_dtoa_r+0x54a>
 8009f34:	0020      	movs	r0, r4
 8009f36:	0029      	movs	r1, r5
 8009f38:	f7f7 fd76 	bl	8001a28 <__aeabi_dmul>
 8009f3c:	9a06      	ldr	r2, [sp, #24]
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	4694      	mov	ip, r2
 8009f42:	9308      	str	r3, [sp, #32]
 8009f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f46:	9014      	str	r0, [sp, #80]	; 0x50
 8009f48:	9115      	str	r1, [sp, #84]	; 0x54
 8009f4a:	4463      	add	r3, ip
 8009f4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009f4e:	0030      	movs	r0, r6
 8009f50:	0039      	movs	r1, r7
 8009f52:	f7f8 fbcb 	bl	80026ec <__aeabi_d2iz>
 8009f56:	9018      	str	r0, [sp, #96]	; 0x60
 8009f58:	f7f8 fbfe 	bl	8002758 <__aeabi_i2d>
 8009f5c:	0002      	movs	r2, r0
 8009f5e:	000b      	movs	r3, r1
 8009f60:	0030      	movs	r0, r6
 8009f62:	0039      	movs	r1, r7
 8009f64:	f7f8 f822 	bl	8001fac <__aeabi_dsub>
 8009f68:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	3630      	adds	r6, #48	; 0x30
 8009f6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f70:	701e      	strb	r6, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	0004      	movs	r4, r0
 8009f76:	000d      	movs	r5, r1
 8009f78:	9308      	str	r3, [sp, #32]
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d12d      	bne.n	8009fda <_dtoa_r+0x672>
 8009f7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009f80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009f82:	9a06      	ldr	r2, [sp, #24]
 8009f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f86:	4694      	mov	ip, r2
 8009f88:	4463      	add	r3, ip
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	9308      	str	r3, [sp, #32]
 8009f8e:	4b47      	ldr	r3, [pc, #284]	; (800a0ac <_dtoa_r+0x744>)
 8009f90:	f7f6 fdf0 	bl	8000b74 <__aeabi_dadd>
 8009f94:	0002      	movs	r2, r0
 8009f96:	000b      	movs	r3, r1
 8009f98:	0020      	movs	r0, r4
 8009f9a:	0029      	movs	r1, r5
 8009f9c:	f7f6 fa70 	bl	8000480 <__aeabi_dcmpgt>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d000      	beq.n	8009fa6 <_dtoa_r+0x63e>
 8009fa4:	e086      	b.n	800a0b4 <_dtoa_r+0x74c>
 8009fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009faa:	2000      	movs	r0, #0
 8009fac:	493f      	ldr	r1, [pc, #252]	; (800a0ac <_dtoa_r+0x744>)
 8009fae:	f7f7 fffd 	bl	8001fac <__aeabi_dsub>
 8009fb2:	0002      	movs	r2, r0
 8009fb4:	000b      	movs	r3, r1
 8009fb6:	0020      	movs	r0, r4
 8009fb8:	0029      	movs	r1, r5
 8009fba:	f7f6 fa4d 	bl	8000458 <__aeabi_dcmplt>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d100      	bne.n	8009fc4 <_dtoa_r+0x65c>
 8009fc2:	e716      	b.n	8009df2 <_dtoa_r+0x48a>
 8009fc4:	9b08      	ldr	r3, [sp, #32]
 8009fc6:	001a      	movs	r2, r3
 8009fc8:	3a01      	subs	r2, #1
 8009fca:	9208      	str	r2, [sp, #32]
 8009fcc:	7812      	ldrb	r2, [r2, #0]
 8009fce:	2a30      	cmp	r2, #48	; 0x30
 8009fd0:	d0f8      	beq.n	8009fc4 <_dtoa_r+0x65c>
 8009fd2:	9308      	str	r3, [sp, #32]
 8009fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	e046      	b.n	800a068 <_dtoa_r+0x700>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4b2e      	ldr	r3, [pc, #184]	; (800a098 <_dtoa_r+0x730>)
 8009fde:	f7f7 fd23 	bl	8001a28 <__aeabi_dmul>
 8009fe2:	0006      	movs	r6, r0
 8009fe4:	000f      	movs	r7, r1
 8009fe6:	e7b2      	b.n	8009f4e <_dtoa_r+0x5e6>
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	9a06      	ldr	r2, [sp, #24]
 8009fec:	930a      	str	r3, [sp, #40]	; 0x28
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	9c08      	ldr	r4, [sp, #32]
 8009ff2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	189b      	adds	r3, r3, r2
 8009ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffa:	0032      	movs	r2, r6
 8009ffc:	003b      	movs	r3, r7
 8009ffe:	0020      	movs	r0, r4
 800a000:	0029      	movs	r1, r5
 800a002:	f7f7 f917 	bl	8001234 <__aeabi_ddiv>
 800a006:	f7f8 fb71 	bl	80026ec <__aeabi_d2iz>
 800a00a:	9007      	str	r0, [sp, #28]
 800a00c:	f7f8 fba4 	bl	8002758 <__aeabi_i2d>
 800a010:	0032      	movs	r2, r6
 800a012:	003b      	movs	r3, r7
 800a014:	f7f7 fd08 	bl	8001a28 <__aeabi_dmul>
 800a018:	0002      	movs	r2, r0
 800a01a:	000b      	movs	r3, r1
 800a01c:	0020      	movs	r0, r4
 800a01e:	0029      	movs	r1, r5
 800a020:	f7f7 ffc4 	bl	8001fac <__aeabi_dsub>
 800a024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a026:	001a      	movs	r2, r3
 800a028:	3201      	adds	r2, #1
 800a02a:	920a      	str	r2, [sp, #40]	; 0x28
 800a02c:	9208      	str	r2, [sp, #32]
 800a02e:	9a07      	ldr	r2, [sp, #28]
 800a030:	3230      	adds	r2, #48	; 0x30
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a036:	429a      	cmp	r2, r3
 800a038:	d14f      	bne.n	800a0da <_dtoa_r+0x772>
 800a03a:	0002      	movs	r2, r0
 800a03c:	000b      	movs	r3, r1
 800a03e:	f7f6 fd99 	bl	8000b74 <__aeabi_dadd>
 800a042:	0032      	movs	r2, r6
 800a044:	003b      	movs	r3, r7
 800a046:	0004      	movs	r4, r0
 800a048:	000d      	movs	r5, r1
 800a04a:	f7f6 fa19 	bl	8000480 <__aeabi_dcmpgt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d12e      	bne.n	800a0b0 <_dtoa_r+0x748>
 800a052:	0032      	movs	r2, r6
 800a054:	003b      	movs	r3, r7
 800a056:	0020      	movs	r0, r4
 800a058:	0029      	movs	r1, r5
 800a05a:	f7f6 f9f7 	bl	800044c <__aeabi_dcmpeq>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d002      	beq.n	800a068 <_dtoa_r+0x700>
 800a062:	9b07      	ldr	r3, [sp, #28]
 800a064:	07de      	lsls	r6, r3, #31
 800a066:	d423      	bmi.n	800a0b0 <_dtoa_r+0x748>
 800a068:	9905      	ldr	r1, [sp, #20]
 800a06a:	9804      	ldr	r0, [sp, #16]
 800a06c:	f000 fbd6 	bl	800a81c <_Bfree>
 800a070:	2300      	movs	r3, #0
 800a072:	9a08      	ldr	r2, [sp, #32]
 800a074:	7013      	strb	r3, [r2, #0]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a07a:	3301      	adds	r3, #1
 800a07c:	6013      	str	r3, [r2, #0]
 800a07e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a080:	2b00      	cmp	r3, #0
 800a082:	d100      	bne.n	800a086 <_dtoa_r+0x71e>
 800a084:	e4ba      	b.n	80099fc <_dtoa_r+0x94>
 800a086:	9a08      	ldr	r2, [sp, #32]
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	e4b7      	b.n	80099fc <_dtoa_r+0x94>
 800a08c:	0800b970 	.word	0x0800b970
 800a090:	0800b948 	.word	0x0800b948
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	40240000 	.word	0x40240000
 800a09c:	401c0000 	.word	0x401c0000
 800a0a0:	fcc00000 	.word	0xfcc00000
 800a0a4:	40140000 	.word	0x40140000
 800a0a8:	7cc00000 	.word	0x7cc00000
 800a0ac:	3fe00000 	.word	0x3fe00000
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a0b4:	9b08      	ldr	r3, [sp, #32]
 800a0b6:	9308      	str	r3, [sp, #32]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	2a39      	cmp	r2, #57	; 0x39
 800a0be:	d108      	bne.n	800a0d2 <_dtoa_r+0x76a>
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d1f7      	bne.n	800a0b6 <_dtoa_r+0x74e>
 800a0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c8:	9906      	ldr	r1, [sp, #24]
 800a0ca:	3201      	adds	r2, #1
 800a0cc:	920e      	str	r2, [sp, #56]	; 0x38
 800a0ce:	2230      	movs	r2, #48	; 0x30
 800a0d0:	700a      	strb	r2, [r1, #0]
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e77c      	b.n	8009fd4 <_dtoa_r+0x66c>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4ba9      	ldr	r3, [pc, #676]	; (800a384 <_dtoa_r+0xa1c>)
 800a0de:	f7f7 fca3 	bl	8001a28 <__aeabi_dmul>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	0004      	movs	r4, r0
 800a0e8:	000d      	movs	r5, r1
 800a0ea:	f7f6 f9af 	bl	800044c <__aeabi_dcmpeq>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d100      	bne.n	800a0f4 <_dtoa_r+0x78c>
 800a0f2:	e782      	b.n	8009ffa <_dtoa_r+0x692>
 800a0f4:	e7b8      	b.n	800a068 <_dtoa_r+0x700>
 800a0f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a0f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a0fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0fc:	2f00      	cmp	r7, #0
 800a0fe:	d012      	beq.n	800a126 <_dtoa_r+0x7be>
 800a100:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a102:	2a01      	cmp	r2, #1
 800a104:	dc6e      	bgt.n	800a1e4 <_dtoa_r+0x87c>
 800a106:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a108:	2a00      	cmp	r2, #0
 800a10a:	d065      	beq.n	800a1d8 <_dtoa_r+0x870>
 800a10c:	4a9e      	ldr	r2, [pc, #632]	; (800a388 <_dtoa_r+0xa20>)
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a112:	2101      	movs	r1, #1
 800a114:	18d2      	adds	r2, r2, r3
 800a116:	920a      	str	r2, [sp, #40]	; 0x28
 800a118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a11a:	9804      	ldr	r0, [sp, #16]
 800a11c:	18d3      	adds	r3, r2, r3
 800a11e:	930c      	str	r3, [sp, #48]	; 0x30
 800a120:	f000 fc2c 	bl	800a97c <__i2b>
 800a124:	0007      	movs	r7, r0
 800a126:	2c00      	cmp	r4, #0
 800a128:	d00e      	beq.n	800a148 <_dtoa_r+0x7e0>
 800a12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd0b      	ble.n	800a148 <_dtoa_r+0x7e0>
 800a130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a132:	0023      	movs	r3, r4
 800a134:	4294      	cmp	r4, r2
 800a136:	dd00      	ble.n	800a13a <_dtoa_r+0x7d2>
 800a138:	0013      	movs	r3, r2
 800a13a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a13c:	1ae4      	subs	r4, r4, r3
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	920a      	str	r2, [sp, #40]	; 0x28
 800a142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	930c      	str	r3, [sp, #48]	; 0x30
 800a148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01e      	beq.n	800a18c <_dtoa_r+0x824>
 800a14e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d05c      	beq.n	800a20e <_dtoa_r+0x8a6>
 800a154:	2d00      	cmp	r5, #0
 800a156:	dd10      	ble.n	800a17a <_dtoa_r+0x812>
 800a158:	0039      	movs	r1, r7
 800a15a:	002a      	movs	r2, r5
 800a15c:	9804      	ldr	r0, [sp, #16]
 800a15e:	f000 fcd5 	bl	800ab0c <__pow5mult>
 800a162:	9a05      	ldr	r2, [sp, #20]
 800a164:	0001      	movs	r1, r0
 800a166:	0007      	movs	r7, r0
 800a168:	9804      	ldr	r0, [sp, #16]
 800a16a:	f000 fc1f 	bl	800a9ac <__multiply>
 800a16e:	0006      	movs	r6, r0
 800a170:	9905      	ldr	r1, [sp, #20]
 800a172:	9804      	ldr	r0, [sp, #16]
 800a174:	f000 fb52 	bl	800a81c <_Bfree>
 800a178:	9605      	str	r6, [sp, #20]
 800a17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a17c:	1b5a      	subs	r2, r3, r5
 800a17e:	42ab      	cmp	r3, r5
 800a180:	d004      	beq.n	800a18c <_dtoa_r+0x824>
 800a182:	9905      	ldr	r1, [sp, #20]
 800a184:	9804      	ldr	r0, [sp, #16]
 800a186:	f000 fcc1 	bl	800ab0c <__pow5mult>
 800a18a:	9005      	str	r0, [sp, #20]
 800a18c:	2101      	movs	r1, #1
 800a18e:	9804      	ldr	r0, [sp, #16]
 800a190:	f000 fbf4 	bl	800a97c <__i2b>
 800a194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a196:	0006      	movs	r6, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dd3a      	ble.n	800a212 <_dtoa_r+0x8aa>
 800a19c:	001a      	movs	r2, r3
 800a19e:	0001      	movs	r1, r0
 800a1a0:	9804      	ldr	r0, [sp, #16]
 800a1a2:	f000 fcb3 	bl	800ab0c <__pow5mult>
 800a1a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1a8:	0006      	movs	r6, r0
 800a1aa:	2500      	movs	r5, #0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	dc38      	bgt.n	800a222 <_dtoa_r+0x8ba>
 800a1b0:	2500      	movs	r5, #0
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	d130      	bne.n	800a21a <_dtoa_r+0x8b2>
 800a1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ba:	031b      	lsls	r3, r3, #12
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	d12c      	bne.n	800a21a <_dtoa_r+0x8b2>
 800a1c0:	4b72      	ldr	r3, [pc, #456]	; (800a38c <_dtoa_r+0xa24>)
 800a1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c4:	4213      	tst	r3, r2
 800a1c6:	d028      	beq.n	800a21a <_dtoa_r+0x8b2>
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	3501      	adds	r5, #1
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a1d6:	e020      	b.n	800a21a <_dtoa_r+0x8b2>
 800a1d8:	2336      	movs	r3, #54	; 0x36
 800a1da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a1de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1e0:	1a9b      	subs	r3, r3, r2
 800a1e2:	e795      	b.n	800a110 <_dtoa_r+0x7a8>
 800a1e4:	9b07      	ldr	r3, [sp, #28]
 800a1e6:	1e5d      	subs	r5, r3, #1
 800a1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ea:	42ab      	cmp	r3, r5
 800a1ec:	db07      	blt.n	800a1fe <_dtoa_r+0x896>
 800a1ee:	1b5d      	subs	r5, r3, r5
 800a1f0:	9b07      	ldr	r3, [sp, #28]
 800a1f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	da8b      	bge.n	800a110 <_dtoa_r+0x7a8>
 800a1f8:	1ae4      	subs	r4, r4, r3
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e788      	b.n	800a110 <_dtoa_r+0x7a8>
 800a1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a202:	1aeb      	subs	r3, r5, r3
 800a204:	18d3      	adds	r3, r2, r3
 800a206:	950d      	str	r5, [sp, #52]	; 0x34
 800a208:	9313      	str	r3, [sp, #76]	; 0x4c
 800a20a:	2500      	movs	r5, #0
 800a20c:	e7f0      	b.n	800a1f0 <_dtoa_r+0x888>
 800a20e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a210:	e7b7      	b.n	800a182 <_dtoa_r+0x81a>
 800a212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a214:	2500      	movs	r5, #0
 800a216:	2b01      	cmp	r3, #1
 800a218:	ddca      	ble.n	800a1b0 <_dtoa_r+0x848>
 800a21a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a21c:	2001      	movs	r0, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d008      	beq.n	800a234 <_dtoa_r+0x8cc>
 800a222:	6933      	ldr	r3, [r6, #16]
 800a224:	3303      	adds	r3, #3
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	18f3      	adds	r3, r6, r3
 800a22a:	6858      	ldr	r0, [r3, #4]
 800a22c:	f000 fb5e 	bl	800a8ec <__hi0bits>
 800a230:	2320      	movs	r3, #32
 800a232:	1a18      	subs	r0, r3, r0
 800a234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a236:	1818      	adds	r0, r3, r0
 800a238:	0002      	movs	r2, r0
 800a23a:	231f      	movs	r3, #31
 800a23c:	401a      	ands	r2, r3
 800a23e:	4218      	tst	r0, r3
 800a240:	d047      	beq.n	800a2d2 <_dtoa_r+0x96a>
 800a242:	3301      	adds	r3, #1
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	2b04      	cmp	r3, #4
 800a248:	dd3f      	ble.n	800a2ca <_dtoa_r+0x962>
 800a24a:	231c      	movs	r3, #28
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a250:	18e4      	adds	r4, r4, r3
 800a252:	18d2      	adds	r2, r2, r3
 800a254:	920a      	str	r2, [sp, #40]	; 0x28
 800a256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a258:	18d3      	adds	r3, r2, r3
 800a25a:	930c      	str	r3, [sp, #48]	; 0x30
 800a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dd05      	ble.n	800a26e <_dtoa_r+0x906>
 800a262:	001a      	movs	r2, r3
 800a264:	9905      	ldr	r1, [sp, #20]
 800a266:	9804      	ldr	r0, [sp, #16]
 800a268:	f000 fcac 	bl	800abc4 <__lshift>
 800a26c:	9005      	str	r0, [sp, #20]
 800a26e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a270:	2b00      	cmp	r3, #0
 800a272:	dd05      	ble.n	800a280 <_dtoa_r+0x918>
 800a274:	0031      	movs	r1, r6
 800a276:	001a      	movs	r2, r3
 800a278:	9804      	ldr	r0, [sp, #16]
 800a27a:	f000 fca3 	bl	800abc4 <__lshift>
 800a27e:	0006      	movs	r6, r0
 800a280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a282:	2b00      	cmp	r3, #0
 800a284:	d027      	beq.n	800a2d6 <_dtoa_r+0x96e>
 800a286:	0031      	movs	r1, r6
 800a288:	9805      	ldr	r0, [sp, #20]
 800a28a:	f000 fd09 	bl	800aca0 <__mcmp>
 800a28e:	2800      	cmp	r0, #0
 800a290:	da21      	bge.n	800a2d6 <_dtoa_r+0x96e>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	220a      	movs	r2, #10
 800a296:	3b01      	subs	r3, #1
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	9905      	ldr	r1, [sp, #20]
 800a29c:	2300      	movs	r3, #0
 800a29e:	9804      	ldr	r0, [sp, #16]
 800a2a0:	f000 fae0 	bl	800a864 <__multadd>
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2a6:	9005      	str	r0, [sp, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d100      	bne.n	800a2ae <_dtoa_r+0x946>
 800a2ac:	e15d      	b.n	800a56a <_dtoa_r+0xc02>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	0039      	movs	r1, r7
 800a2b2:	220a      	movs	r2, #10
 800a2b4:	9804      	ldr	r0, [sp, #16]
 800a2b6:	f000 fad5 	bl	800a864 <__multadd>
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	0007      	movs	r7, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc49      	bgt.n	800a356 <_dtoa_r+0x9ee>
 800a2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	dc0e      	bgt.n	800a2e6 <_dtoa_r+0x97e>
 800a2c8:	e045      	b.n	800a356 <_dtoa_r+0x9ee>
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d0c6      	beq.n	800a25c <_dtoa_r+0x8f4>
 800a2ce:	331c      	adds	r3, #28
 800a2d0:	e7bd      	b.n	800a24e <_dtoa_r+0x8e6>
 800a2d2:	0013      	movs	r3, r2
 800a2d4:	e7fb      	b.n	800a2ce <_dtoa_r+0x966>
 800a2d6:	9b07      	ldr	r3, [sp, #28]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dc36      	bgt.n	800a34a <_dtoa_r+0x9e2>
 800a2dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	dd33      	ble.n	800a34a <_dtoa_r+0x9e2>
 800a2e2:	9b07      	ldr	r3, [sp, #28]
 800a2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10c      	bne.n	800a306 <_dtoa_r+0x99e>
 800a2ec:	0031      	movs	r1, r6
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	9804      	ldr	r0, [sp, #16]
 800a2f2:	f000 fab7 	bl	800a864 <__multadd>
 800a2f6:	0006      	movs	r6, r0
 800a2f8:	0001      	movs	r1, r0
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	f000 fcd0 	bl	800aca0 <__mcmp>
 800a300:	2800      	cmp	r0, #0
 800a302:	dd00      	ble.n	800a306 <_dtoa_r+0x99e>
 800a304:	e59f      	b.n	8009e46 <_dtoa_r+0x4de>
 800a306:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a308:	43db      	mvns	r3, r3
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	9b06      	ldr	r3, [sp, #24]
 800a30e:	9308      	str	r3, [sp, #32]
 800a310:	2500      	movs	r5, #0
 800a312:	0031      	movs	r1, r6
 800a314:	9804      	ldr	r0, [sp, #16]
 800a316:	f000 fa81 	bl	800a81c <_Bfree>
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	d100      	bne.n	800a320 <_dtoa_r+0x9b8>
 800a31e:	e6a3      	b.n	800a068 <_dtoa_r+0x700>
 800a320:	2d00      	cmp	r5, #0
 800a322:	d005      	beq.n	800a330 <_dtoa_r+0x9c8>
 800a324:	42bd      	cmp	r5, r7
 800a326:	d003      	beq.n	800a330 <_dtoa_r+0x9c8>
 800a328:	0029      	movs	r1, r5
 800a32a:	9804      	ldr	r0, [sp, #16]
 800a32c:	f000 fa76 	bl	800a81c <_Bfree>
 800a330:	0039      	movs	r1, r7
 800a332:	9804      	ldr	r0, [sp, #16]
 800a334:	f000 fa72 	bl	800a81c <_Bfree>
 800a338:	e696      	b.n	800a068 <_dtoa_r+0x700>
 800a33a:	2600      	movs	r6, #0
 800a33c:	0037      	movs	r7, r6
 800a33e:	e7e2      	b.n	800a306 <_dtoa_r+0x99e>
 800a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a342:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	0037      	movs	r7, r6
 800a348:	e57d      	b.n	8009e46 <_dtoa_r+0x4de>
 800a34a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d100      	bne.n	800a352 <_dtoa_r+0x9ea>
 800a350:	e0c3      	b.n	800a4da <_dtoa_r+0xb72>
 800a352:	9b07      	ldr	r3, [sp, #28]
 800a354:	930b      	str	r3, [sp, #44]	; 0x2c
 800a356:	2c00      	cmp	r4, #0
 800a358:	dd05      	ble.n	800a366 <_dtoa_r+0x9fe>
 800a35a:	0039      	movs	r1, r7
 800a35c:	0022      	movs	r2, r4
 800a35e:	9804      	ldr	r0, [sp, #16]
 800a360:	f000 fc30 	bl	800abc4 <__lshift>
 800a364:	0007      	movs	r7, r0
 800a366:	0038      	movs	r0, r7
 800a368:	2d00      	cmp	r5, #0
 800a36a:	d024      	beq.n	800a3b6 <_dtoa_r+0xa4e>
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	9804      	ldr	r0, [sp, #16]
 800a370:	f000 fa10 	bl	800a794 <_Balloc>
 800a374:	1e04      	subs	r4, r0, #0
 800a376:	d111      	bne.n	800a39c <_dtoa_r+0xa34>
 800a378:	0022      	movs	r2, r4
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <_dtoa_r+0xa28>)
 800a37c:	4805      	ldr	r0, [pc, #20]	; (800a394 <_dtoa_r+0xa2c>)
 800a37e:	4906      	ldr	r1, [pc, #24]	; (800a398 <_dtoa_r+0xa30>)
 800a380:	f7ff fb07 	bl	8009992 <_dtoa_r+0x2a>
 800a384:	40240000 	.word	0x40240000
 800a388:	00000433 	.word	0x00000433
 800a38c:	7ff00000 	.word	0x7ff00000
 800a390:	0800b8dc 	.word	0x0800b8dc
 800a394:	0800b884 	.word	0x0800b884
 800a398:	000002ef 	.word	0x000002ef
 800a39c:	0039      	movs	r1, r7
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	310c      	adds	r1, #12
 800a3a2:	3202      	adds	r2, #2
 800a3a4:	0092      	lsls	r2, r2, #2
 800a3a6:	300c      	adds	r0, #12
 800a3a8:	f000 fe56 	bl	800b058 <memcpy>
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	0021      	movs	r1, r4
 800a3b0:	9804      	ldr	r0, [sp, #16]
 800a3b2:	f000 fc07 	bl	800abc4 <__lshift>
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	189b      	adds	r3, r3, r2
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	003d      	movs	r5, r7
 800a3c4:	0007      	movs	r7, r0
 800a3c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c8:	9b08      	ldr	r3, [sp, #32]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ce:	0031      	movs	r1, r6
 800a3d0:	9805      	ldr	r0, [sp, #20]
 800a3d2:	f7ff fa39 	bl	8009848 <quorem>
 800a3d6:	0029      	movs	r1, r5
 800a3d8:	0004      	movs	r4, r0
 800a3da:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3dc:	9805      	ldr	r0, [sp, #20]
 800a3de:	f000 fc5f 	bl	800aca0 <__mcmp>
 800a3e2:	003a      	movs	r2, r7
 800a3e4:	900c      	str	r0, [sp, #48]	; 0x30
 800a3e6:	0031      	movs	r1, r6
 800a3e8:	9804      	ldr	r0, [sp, #16]
 800a3ea:	f000 fc75 	bl	800acd8 <__mdiff>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	68c3      	ldr	r3, [r0, #12]
 800a3f2:	3430      	adds	r4, #48	; 0x30
 800a3f4:	9008      	str	r0, [sp, #32]
 800a3f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <_dtoa_r+0xa9e>
 800a3fc:	0001      	movs	r1, r0
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	f000 fc4e 	bl	800aca0 <__mcmp>
 800a404:	900a      	str	r0, [sp, #40]	; 0x28
 800a406:	9908      	ldr	r1, [sp, #32]
 800a408:	9804      	ldr	r0, [sp, #16]
 800a40a:	f000 fa07 	bl	800a81c <_Bfree>
 800a40e:	9b07      	ldr	r3, [sp, #28]
 800a410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a412:	3301      	adds	r3, #1
 800a414:	9308      	str	r3, [sp, #32]
 800a416:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a418:	4313      	orrs	r3, r2
 800a41a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a41c:	4313      	orrs	r3, r2
 800a41e:	d109      	bne.n	800a434 <_dtoa_r+0xacc>
 800a420:	2c39      	cmp	r4, #57	; 0x39
 800a422:	d022      	beq.n	800a46a <_dtoa_r+0xb02>
 800a424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd01      	ble.n	800a42e <_dtoa_r+0xac6>
 800a42a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a42c:	3431      	adds	r4, #49	; 0x31
 800a42e:	9b07      	ldr	r3, [sp, #28]
 800a430:	701c      	strb	r4, [r3, #0]
 800a432:	e76e      	b.n	800a312 <_dtoa_r+0x9aa>
 800a434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a436:	2b00      	cmp	r3, #0
 800a438:	db04      	blt.n	800a444 <_dtoa_r+0xadc>
 800a43a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a43c:	4313      	orrs	r3, r2
 800a43e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a440:	4313      	orrs	r3, r2
 800a442:	d11e      	bne.n	800a482 <_dtoa_r+0xb1a>
 800a444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	ddf1      	ble.n	800a42e <_dtoa_r+0xac6>
 800a44a:	9905      	ldr	r1, [sp, #20]
 800a44c:	2201      	movs	r2, #1
 800a44e:	9804      	ldr	r0, [sp, #16]
 800a450:	f000 fbb8 	bl	800abc4 <__lshift>
 800a454:	0031      	movs	r1, r6
 800a456:	9005      	str	r0, [sp, #20]
 800a458:	f000 fc22 	bl	800aca0 <__mcmp>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dc02      	bgt.n	800a466 <_dtoa_r+0xafe>
 800a460:	d1e5      	bne.n	800a42e <_dtoa_r+0xac6>
 800a462:	07e3      	lsls	r3, r4, #31
 800a464:	d5e3      	bpl.n	800a42e <_dtoa_r+0xac6>
 800a466:	2c39      	cmp	r4, #57	; 0x39
 800a468:	d1df      	bne.n	800a42a <_dtoa_r+0xac2>
 800a46a:	2339      	movs	r3, #57	; 0x39
 800a46c:	9a07      	ldr	r2, [sp, #28]
 800a46e:	7013      	strb	r3, [r2, #0]
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	9308      	str	r3, [sp, #32]
 800a474:	3b01      	subs	r3, #1
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	2a39      	cmp	r2, #57	; 0x39
 800a47a:	d063      	beq.n	800a544 <_dtoa_r+0xbdc>
 800a47c:	3201      	adds	r2, #1
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	e747      	b.n	800a312 <_dtoa_r+0x9aa>
 800a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a484:	2b00      	cmp	r3, #0
 800a486:	dd03      	ble.n	800a490 <_dtoa_r+0xb28>
 800a488:	2c39      	cmp	r4, #57	; 0x39
 800a48a:	d0ee      	beq.n	800a46a <_dtoa_r+0xb02>
 800a48c:	3401      	adds	r4, #1
 800a48e:	e7ce      	b.n	800a42e <_dtoa_r+0xac6>
 800a490:	9b07      	ldr	r3, [sp, #28]
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	701c      	strb	r4, [r3, #0]
 800a496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a498:	4293      	cmp	r3, r2
 800a49a:	d03e      	beq.n	800a51a <_dtoa_r+0xbb2>
 800a49c:	2300      	movs	r3, #0
 800a49e:	220a      	movs	r2, #10
 800a4a0:	9905      	ldr	r1, [sp, #20]
 800a4a2:	9804      	ldr	r0, [sp, #16]
 800a4a4:	f000 f9de 	bl	800a864 <__multadd>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9005      	str	r0, [sp, #20]
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	0029      	movs	r1, r5
 800a4b0:	9804      	ldr	r0, [sp, #16]
 800a4b2:	42bd      	cmp	r5, r7
 800a4b4:	d106      	bne.n	800a4c4 <_dtoa_r+0xb5c>
 800a4b6:	f000 f9d5 	bl	800a864 <__multadd>
 800a4ba:	0005      	movs	r5, r0
 800a4bc:	0007      	movs	r7, r0
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	9307      	str	r3, [sp, #28]
 800a4c2:	e784      	b.n	800a3ce <_dtoa_r+0xa66>
 800a4c4:	f000 f9ce 	bl	800a864 <__multadd>
 800a4c8:	0039      	movs	r1, r7
 800a4ca:	0005      	movs	r5, r0
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	9804      	ldr	r0, [sp, #16]
 800a4d2:	f000 f9c7 	bl	800a864 <__multadd>
 800a4d6:	0007      	movs	r7, r0
 800a4d8:	e7f1      	b.n	800a4be <_dtoa_r+0xb56>
 800a4da:	9b07      	ldr	r3, [sp, #28]
 800a4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4de:	2500      	movs	r5, #0
 800a4e0:	0031      	movs	r1, r6
 800a4e2:	9805      	ldr	r0, [sp, #20]
 800a4e4:	f7ff f9b0 	bl	8009848 <quorem>
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	3030      	adds	r0, #48	; 0x30
 800a4ec:	5558      	strb	r0, [r3, r5]
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	0004      	movs	r4, r0
 800a4f4:	42ab      	cmp	r3, r5
 800a4f6:	dd07      	ble.n	800a508 <_dtoa_r+0xba0>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	220a      	movs	r2, #10
 800a4fc:	9905      	ldr	r1, [sp, #20]
 800a4fe:	9804      	ldr	r0, [sp, #16]
 800a500:	f000 f9b0 	bl	800a864 <__multadd>
 800a504:	9005      	str	r0, [sp, #20]
 800a506:	e7eb      	b.n	800a4e0 <_dtoa_r+0xb78>
 800a508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a50a:	2301      	movs	r3, #1
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	dd00      	ble.n	800a512 <_dtoa_r+0xbaa>
 800a510:	0013      	movs	r3, r2
 800a512:	2500      	movs	r5, #0
 800a514:	9a06      	ldr	r2, [sp, #24]
 800a516:	18d3      	adds	r3, r2, r3
 800a518:	9308      	str	r3, [sp, #32]
 800a51a:	9905      	ldr	r1, [sp, #20]
 800a51c:	2201      	movs	r2, #1
 800a51e:	9804      	ldr	r0, [sp, #16]
 800a520:	f000 fb50 	bl	800abc4 <__lshift>
 800a524:	0031      	movs	r1, r6
 800a526:	9005      	str	r0, [sp, #20]
 800a528:	f000 fbba 	bl	800aca0 <__mcmp>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	dc9f      	bgt.n	800a470 <_dtoa_r+0xb08>
 800a530:	d101      	bne.n	800a536 <_dtoa_r+0xbce>
 800a532:	07e4      	lsls	r4, r4, #31
 800a534:	d49c      	bmi.n	800a470 <_dtoa_r+0xb08>
 800a536:	9b08      	ldr	r3, [sp, #32]
 800a538:	9308      	str	r3, [sp, #32]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	781a      	ldrb	r2, [r3, #0]
 800a53e:	2a30      	cmp	r2, #48	; 0x30
 800a540:	d0fa      	beq.n	800a538 <_dtoa_r+0xbd0>
 800a542:	e6e6      	b.n	800a312 <_dtoa_r+0x9aa>
 800a544:	9a06      	ldr	r2, [sp, #24]
 800a546:	429a      	cmp	r2, r3
 800a548:	d193      	bne.n	800a472 <_dtoa_r+0xb0a>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	9303      	str	r3, [sp, #12]
 800a550:	2331      	movs	r3, #49	; 0x31
 800a552:	7013      	strb	r3, [r2, #0]
 800a554:	e6dd      	b.n	800a312 <_dtoa_r+0x9aa>
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <_dtoa_r+0xc14>)
 800a558:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a55a:	9306      	str	r3, [sp, #24]
 800a55c:	4b08      	ldr	r3, [pc, #32]	; (800a580 <_dtoa_r+0xc18>)
 800a55e:	2a00      	cmp	r2, #0
 800a560:	d001      	beq.n	800a566 <_dtoa_r+0xbfe>
 800a562:	f7ff fa49 	bl	80099f8 <_dtoa_r+0x90>
 800a566:	f7ff fa49 	bl	80099fc <_dtoa_r+0x94>
 800a56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dcb6      	bgt.n	800a4de <_dtoa_r+0xb76>
 800a570:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a572:	2b02      	cmp	r3, #2
 800a574:	dd00      	ble.n	800a578 <_dtoa_r+0xc10>
 800a576:	e6b6      	b.n	800a2e6 <_dtoa_r+0x97e>
 800a578:	e7b1      	b.n	800a4de <_dtoa_r+0xb76>
 800a57a:	46c0      	nop			; (mov r8, r8)
 800a57c:	0800b860 	.word	0x0800b860
 800a580:	0800b868 	.word	0x0800b868

0800a584 <_free_r>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	0005      	movs	r5, r0
 800a588:	2900      	cmp	r1, #0
 800a58a:	d010      	beq.n	800a5ae <_free_r+0x2a>
 800a58c:	1f0c      	subs	r4, r1, #4
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	da00      	bge.n	800a596 <_free_r+0x12>
 800a594:	18e4      	adds	r4, r4, r3
 800a596:	0028      	movs	r0, r5
 800a598:	f000 f8ec 	bl	800a774 <__malloc_lock>
 800a59c:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <_free_r+0x90>)
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d105      	bne.n	800a5b0 <_free_r+0x2c>
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	6014      	str	r4, [r2, #0]
 800a5a8:	0028      	movs	r0, r5
 800a5aa:	f000 f8eb 	bl	800a784 <__malloc_unlock>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d908      	bls.n	800a5c6 <_free_r+0x42>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	d1f3      	bne.n	800a5a4 <_free_r+0x20>
 800a5bc:	6819      	ldr	r1, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	1809      	adds	r1, r1, r0
 800a5c2:	6021      	str	r1, [r4, #0]
 800a5c4:	e7ee      	b.n	800a5a4 <_free_r+0x20>
 800a5c6:	001a      	movs	r2, r3
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <_free_r+0x4e>
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	d9f9      	bls.n	800a5c6 <_free_r+0x42>
 800a5d2:	6811      	ldr	r1, [r2, #0]
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	42a0      	cmp	r0, r4
 800a5d8:	d10b      	bne.n	800a5f2 <_free_r+0x6e>
 800a5da:	6820      	ldr	r0, [r4, #0]
 800a5dc:	1809      	adds	r1, r1, r0
 800a5de:	1850      	adds	r0, r2, r1
 800a5e0:	6011      	str	r1, [r2, #0]
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	d1e0      	bne.n	800a5a8 <_free_r+0x24>
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	1841      	adds	r1, r0, r1
 800a5ec:	6011      	str	r1, [r2, #0]
 800a5ee:	6053      	str	r3, [r2, #4]
 800a5f0:	e7da      	b.n	800a5a8 <_free_r+0x24>
 800a5f2:	42a0      	cmp	r0, r4
 800a5f4:	d902      	bls.n	800a5fc <_free_r+0x78>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	e7d5      	b.n	800a5a8 <_free_r+0x24>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	1821      	adds	r1, r4, r0
 800a600:	428b      	cmp	r3, r1
 800a602:	d103      	bne.n	800a60c <_free_r+0x88>
 800a604:	6819      	ldr	r1, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	1809      	adds	r1, r1, r0
 800a60a:	6021      	str	r1, [r4, #0]
 800a60c:	6063      	str	r3, [r4, #4]
 800a60e:	6054      	str	r4, [r2, #4]
 800a610:	e7ca      	b.n	800a5a8 <_free_r+0x24>
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	200005d8 	.word	0x200005d8

0800a618 <malloc>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	4b03      	ldr	r3, [pc, #12]	; (800a628 <malloc+0x10>)
 800a61c:	0001      	movs	r1, r0
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	f000 f826 	bl	800a670 <_malloc_r>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	20000064 	.word	0x20000064

0800a62c <sbrk_aligned>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4e0f      	ldr	r6, [pc, #60]	; (800a66c <sbrk_aligned+0x40>)
 800a630:	000d      	movs	r5, r1
 800a632:	6831      	ldr	r1, [r6, #0]
 800a634:	0004      	movs	r4, r0
 800a636:	2900      	cmp	r1, #0
 800a638:	d102      	bne.n	800a640 <sbrk_aligned+0x14>
 800a63a:	f000 fcfb 	bl	800b034 <_sbrk_r>
 800a63e:	6030      	str	r0, [r6, #0]
 800a640:	0029      	movs	r1, r5
 800a642:	0020      	movs	r0, r4
 800a644:	f000 fcf6 	bl	800b034 <_sbrk_r>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d00a      	beq.n	800a662 <sbrk_aligned+0x36>
 800a64c:	2303      	movs	r3, #3
 800a64e:	1cc5      	adds	r5, r0, #3
 800a650:	439d      	bics	r5, r3
 800a652:	42a8      	cmp	r0, r5
 800a654:	d007      	beq.n	800a666 <sbrk_aligned+0x3a>
 800a656:	1a29      	subs	r1, r5, r0
 800a658:	0020      	movs	r0, r4
 800a65a:	f000 fceb 	bl	800b034 <_sbrk_r>
 800a65e:	3001      	adds	r0, #1
 800a660:	d101      	bne.n	800a666 <sbrk_aligned+0x3a>
 800a662:	2501      	movs	r5, #1
 800a664:	426d      	negs	r5, r5
 800a666:	0028      	movs	r0, r5
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	46c0      	nop			; (mov r8, r8)
 800a66c:	200005dc 	.word	0x200005dc

0800a670 <_malloc_r>:
 800a670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a672:	2203      	movs	r2, #3
 800a674:	1ccb      	adds	r3, r1, #3
 800a676:	4393      	bics	r3, r2
 800a678:	3308      	adds	r3, #8
 800a67a:	0006      	movs	r6, r0
 800a67c:	001f      	movs	r7, r3
 800a67e:	2b0c      	cmp	r3, #12
 800a680:	d238      	bcs.n	800a6f4 <_malloc_r+0x84>
 800a682:	270c      	movs	r7, #12
 800a684:	42b9      	cmp	r1, r7
 800a686:	d837      	bhi.n	800a6f8 <_malloc_r+0x88>
 800a688:	0030      	movs	r0, r6
 800a68a:	f000 f873 	bl	800a774 <__malloc_lock>
 800a68e:	4b38      	ldr	r3, [pc, #224]	; (800a770 <_malloc_r+0x100>)
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	001c      	movs	r4, r3
 800a696:	2c00      	cmp	r4, #0
 800a698:	d133      	bne.n	800a702 <_malloc_r+0x92>
 800a69a:	0039      	movs	r1, r7
 800a69c:	0030      	movs	r0, r6
 800a69e:	f7ff ffc5 	bl	800a62c <sbrk_aligned>
 800a6a2:	0004      	movs	r4, r0
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d15e      	bne.n	800a766 <_malloc_r+0xf6>
 800a6a8:	9b00      	ldr	r3, [sp, #0]
 800a6aa:	681c      	ldr	r4, [r3, #0]
 800a6ac:	0025      	movs	r5, r4
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	d14e      	bne.n	800a750 <_malloc_r+0xe0>
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	d051      	beq.n	800a75a <_malloc_r+0xea>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	0029      	movs	r1, r5
 800a6ba:	18e3      	adds	r3, r4, r3
 800a6bc:	0030      	movs	r0, r6
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	f000 fcb8 	bl	800b034 <_sbrk_r>
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	4283      	cmp	r3, r0
 800a6c8:	d147      	bne.n	800a75a <_malloc_r+0xea>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	0030      	movs	r0, r6
 800a6ce:	1aff      	subs	r7, r7, r3
 800a6d0:	0039      	movs	r1, r7
 800a6d2:	f7ff ffab 	bl	800a62c <sbrk_aligned>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d03f      	beq.n	800a75a <_malloc_r+0xea>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	19db      	adds	r3, r3, r7
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	9b00      	ldr	r3, [sp, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d040      	beq.n	800a76a <_malloc_r+0xfa>
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	42a2      	cmp	r2, r4
 800a6ec:	d133      	bne.n	800a756 <_malloc_r+0xe6>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	e014      	b.n	800a71e <_malloc_r+0xae>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dac5      	bge.n	800a684 <_malloc_r+0x14>
 800a6f8:	230c      	movs	r3, #12
 800a6fa:	2500      	movs	r5, #0
 800a6fc:	6033      	str	r3, [r6, #0]
 800a6fe:	0028      	movs	r0, r5
 800a700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a702:	6821      	ldr	r1, [r4, #0]
 800a704:	1bc9      	subs	r1, r1, r7
 800a706:	d420      	bmi.n	800a74a <_malloc_r+0xda>
 800a708:	290b      	cmp	r1, #11
 800a70a:	d918      	bls.n	800a73e <_malloc_r+0xce>
 800a70c:	19e2      	adds	r2, r4, r7
 800a70e:	6027      	str	r7, [r4, #0]
 800a710:	42a3      	cmp	r3, r4
 800a712:	d112      	bne.n	800a73a <_malloc_r+0xca>
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	6863      	ldr	r3, [r4, #4]
 800a71a:	6011      	str	r1, [r2, #0]
 800a71c:	6053      	str	r3, [r2, #4]
 800a71e:	0030      	movs	r0, r6
 800a720:	0025      	movs	r5, r4
 800a722:	f000 f82f 	bl	800a784 <__malloc_unlock>
 800a726:	2207      	movs	r2, #7
 800a728:	350b      	adds	r5, #11
 800a72a:	1d23      	adds	r3, r4, #4
 800a72c:	4395      	bics	r5, r2
 800a72e:	1aea      	subs	r2, r5, r3
 800a730:	429d      	cmp	r5, r3
 800a732:	d0e4      	beq.n	800a6fe <_malloc_r+0x8e>
 800a734:	1b5b      	subs	r3, r3, r5
 800a736:	50a3      	str	r3, [r4, r2]
 800a738:	e7e1      	b.n	800a6fe <_malloc_r+0x8e>
 800a73a:	605a      	str	r2, [r3, #4]
 800a73c:	e7ec      	b.n	800a718 <_malloc_r+0xa8>
 800a73e:	6862      	ldr	r2, [r4, #4]
 800a740:	42a3      	cmp	r3, r4
 800a742:	d1d5      	bne.n	800a6f0 <_malloc_r+0x80>
 800a744:	9b00      	ldr	r3, [sp, #0]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e7e9      	b.n	800a71e <_malloc_r+0xae>
 800a74a:	0023      	movs	r3, r4
 800a74c:	6864      	ldr	r4, [r4, #4]
 800a74e:	e7a2      	b.n	800a696 <_malloc_r+0x26>
 800a750:	002c      	movs	r4, r5
 800a752:	686d      	ldr	r5, [r5, #4]
 800a754:	e7ab      	b.n	800a6ae <_malloc_r+0x3e>
 800a756:	0013      	movs	r3, r2
 800a758:	e7c4      	b.n	800a6e4 <_malloc_r+0x74>
 800a75a:	230c      	movs	r3, #12
 800a75c:	0030      	movs	r0, r6
 800a75e:	6033      	str	r3, [r6, #0]
 800a760:	f000 f810 	bl	800a784 <__malloc_unlock>
 800a764:	e7cb      	b.n	800a6fe <_malloc_r+0x8e>
 800a766:	6027      	str	r7, [r4, #0]
 800a768:	e7d9      	b.n	800a71e <_malloc_r+0xae>
 800a76a:	605b      	str	r3, [r3, #4]
 800a76c:	deff      	udf	#255	; 0xff
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	200005d8 	.word	0x200005d8

0800a774 <__malloc_lock>:
 800a774:	b510      	push	{r4, lr}
 800a776:	4802      	ldr	r0, [pc, #8]	; (800a780 <__malloc_lock+0xc>)
 800a778:	f7ff f859 	bl	800982e <__retarget_lock_acquire_recursive>
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	200005d4 	.word	0x200005d4

0800a784 <__malloc_unlock>:
 800a784:	b510      	push	{r4, lr}
 800a786:	4802      	ldr	r0, [pc, #8]	; (800a790 <__malloc_unlock+0xc>)
 800a788:	f7ff f852 	bl	8009830 <__retarget_lock_release_recursive>
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	200005d4 	.word	0x200005d4

0800a794 <_Balloc>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	69c5      	ldr	r5, [r0, #28]
 800a798:	0006      	movs	r6, r0
 800a79a:	000c      	movs	r4, r1
 800a79c:	2d00      	cmp	r5, #0
 800a79e:	d10e      	bne.n	800a7be <_Balloc+0x2a>
 800a7a0:	2010      	movs	r0, #16
 800a7a2:	f7ff ff39 	bl	800a618 <malloc>
 800a7a6:	1e02      	subs	r2, r0, #0
 800a7a8:	61f0      	str	r0, [r6, #28]
 800a7aa:	d104      	bne.n	800a7b6 <_Balloc+0x22>
 800a7ac:	216b      	movs	r1, #107	; 0x6b
 800a7ae:	4b19      	ldr	r3, [pc, #100]	; (800a814 <_Balloc+0x80>)
 800a7b0:	4819      	ldr	r0, [pc, #100]	; (800a818 <_Balloc+0x84>)
 800a7b2:	f000 fc5b 	bl	800b06c <__assert_func>
 800a7b6:	6045      	str	r5, [r0, #4]
 800a7b8:	6085      	str	r5, [r0, #8]
 800a7ba:	6005      	str	r5, [r0, #0]
 800a7bc:	60c5      	str	r5, [r0, #12]
 800a7be:	69f5      	ldr	r5, [r6, #28]
 800a7c0:	68eb      	ldr	r3, [r5, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d013      	beq.n	800a7ee <_Balloc+0x5a>
 800a7c6:	69f3      	ldr	r3, [r6, #28]
 800a7c8:	00a2      	lsls	r2, r4, #2
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	189b      	adds	r3, r3, r2
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d118      	bne.n	800a806 <_Balloc+0x72>
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	000d      	movs	r5, r1
 800a7d8:	40a5      	lsls	r5, r4
 800a7da:	1d6a      	adds	r2, r5, #5
 800a7dc:	0030      	movs	r0, r6
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	f000 fc62 	bl	800b0a8 <_calloc_r>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d00c      	beq.n	800a802 <_Balloc+0x6e>
 800a7e8:	6044      	str	r4, [r0, #4]
 800a7ea:	6085      	str	r5, [r0, #8]
 800a7ec:	e00d      	b.n	800a80a <_Balloc+0x76>
 800a7ee:	2221      	movs	r2, #33	; 0x21
 800a7f0:	2104      	movs	r1, #4
 800a7f2:	0030      	movs	r0, r6
 800a7f4:	f000 fc58 	bl	800b0a8 <_calloc_r>
 800a7f8:	69f3      	ldr	r3, [r6, #28]
 800a7fa:	60e8      	str	r0, [r5, #12]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e1      	bne.n	800a7c6 <_Balloc+0x32>
 800a802:	2000      	movs	r0, #0
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	6802      	ldr	r2, [r0, #0]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6103      	str	r3, [r0, #16]
 800a80e:	60c3      	str	r3, [r0, #12]
 800a810:	e7f8      	b.n	800a804 <_Balloc+0x70>
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	0800b86d 	.word	0x0800b86d
 800a818:	0800b8ed 	.word	0x0800b8ed

0800a81c <_Bfree>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	69c6      	ldr	r6, [r0, #28]
 800a820:	0005      	movs	r5, r0
 800a822:	000c      	movs	r4, r1
 800a824:	2e00      	cmp	r6, #0
 800a826:	d10e      	bne.n	800a846 <_Bfree+0x2a>
 800a828:	2010      	movs	r0, #16
 800a82a:	f7ff fef5 	bl	800a618 <malloc>
 800a82e:	1e02      	subs	r2, r0, #0
 800a830:	61e8      	str	r0, [r5, #28]
 800a832:	d104      	bne.n	800a83e <_Bfree+0x22>
 800a834:	218f      	movs	r1, #143	; 0x8f
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <_Bfree+0x40>)
 800a838:	4809      	ldr	r0, [pc, #36]	; (800a860 <_Bfree+0x44>)
 800a83a:	f000 fc17 	bl	800b06c <__assert_func>
 800a83e:	6046      	str	r6, [r0, #4]
 800a840:	6086      	str	r6, [r0, #8]
 800a842:	6006      	str	r6, [r0, #0]
 800a844:	60c6      	str	r6, [r0, #12]
 800a846:	2c00      	cmp	r4, #0
 800a848:	d007      	beq.n	800a85a <_Bfree+0x3e>
 800a84a:	69eb      	ldr	r3, [r5, #28]
 800a84c:	6862      	ldr	r2, [r4, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	0092      	lsls	r2, r2, #2
 800a852:	189b      	adds	r3, r3, r2
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	601c      	str	r4, [r3, #0]
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	0800b86d 	.word	0x0800b86d
 800a860:	0800b8ed 	.word	0x0800b8ed

0800a864 <__multadd>:
 800a864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a866:	000e      	movs	r6, r1
 800a868:	9001      	str	r0, [sp, #4]
 800a86a:	000c      	movs	r4, r1
 800a86c:	001d      	movs	r5, r3
 800a86e:	2000      	movs	r0, #0
 800a870:	690f      	ldr	r7, [r1, #16]
 800a872:	3614      	adds	r6, #20
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	3001      	adds	r0, #1
 800a878:	b299      	uxth	r1, r3
 800a87a:	4351      	muls	r1, r2
 800a87c:	0c1b      	lsrs	r3, r3, #16
 800a87e:	4353      	muls	r3, r2
 800a880:	1949      	adds	r1, r1, r5
 800a882:	0c0d      	lsrs	r5, r1, #16
 800a884:	195b      	adds	r3, r3, r5
 800a886:	0c1d      	lsrs	r5, r3, #16
 800a888:	b289      	uxth	r1, r1
 800a88a:	041b      	lsls	r3, r3, #16
 800a88c:	185b      	adds	r3, r3, r1
 800a88e:	c608      	stmia	r6!, {r3}
 800a890:	4287      	cmp	r7, r0
 800a892:	dcef      	bgt.n	800a874 <__multadd+0x10>
 800a894:	2d00      	cmp	r5, #0
 800a896:	d022      	beq.n	800a8de <__multadd+0x7a>
 800a898:	68a3      	ldr	r3, [r4, #8]
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	dc19      	bgt.n	800a8d2 <__multadd+0x6e>
 800a89e:	6861      	ldr	r1, [r4, #4]
 800a8a0:	9801      	ldr	r0, [sp, #4]
 800a8a2:	3101      	adds	r1, #1
 800a8a4:	f7ff ff76 	bl	800a794 <_Balloc>
 800a8a8:	1e06      	subs	r6, r0, #0
 800a8aa:	d105      	bne.n	800a8b8 <__multadd+0x54>
 800a8ac:	0032      	movs	r2, r6
 800a8ae:	21ba      	movs	r1, #186	; 0xba
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <__multadd+0x80>)
 800a8b2:	480d      	ldr	r0, [pc, #52]	; (800a8e8 <__multadd+0x84>)
 800a8b4:	f000 fbda 	bl	800b06c <__assert_func>
 800a8b8:	0021      	movs	r1, r4
 800a8ba:	6922      	ldr	r2, [r4, #16]
 800a8bc:	310c      	adds	r1, #12
 800a8be:	3202      	adds	r2, #2
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	300c      	adds	r0, #12
 800a8c4:	f000 fbc8 	bl	800b058 <memcpy>
 800a8c8:	0021      	movs	r1, r4
 800a8ca:	9801      	ldr	r0, [sp, #4]
 800a8cc:	f7ff ffa6 	bl	800a81c <_Bfree>
 800a8d0:	0034      	movs	r4, r6
 800a8d2:	1d3b      	adds	r3, r7, #4
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	18e3      	adds	r3, r4, r3
 800a8d8:	605d      	str	r5, [r3, #4]
 800a8da:	1c7b      	adds	r3, r7, #1
 800a8dc:	6123      	str	r3, [r4, #16]
 800a8de:	0020      	movs	r0, r4
 800a8e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	0800b8dc 	.word	0x0800b8dc
 800a8e8:	0800b8ed 	.word	0x0800b8ed

0800a8ec <__hi0bits>:
 800a8ec:	0003      	movs	r3, r0
 800a8ee:	0c02      	lsrs	r2, r0, #16
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	4282      	cmp	r2, r0
 800a8f4:	d101      	bne.n	800a8fa <__hi0bits+0xe>
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	3010      	adds	r0, #16
 800a8fa:	0e1a      	lsrs	r2, r3, #24
 800a8fc:	d101      	bne.n	800a902 <__hi0bits+0x16>
 800a8fe:	3008      	adds	r0, #8
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	0f1a      	lsrs	r2, r3, #28
 800a904:	d101      	bne.n	800a90a <__hi0bits+0x1e>
 800a906:	3004      	adds	r0, #4
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	0f9a      	lsrs	r2, r3, #30
 800a90c:	d101      	bne.n	800a912 <__hi0bits+0x26>
 800a90e:	3002      	adds	r0, #2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	db03      	blt.n	800a91e <__hi0bits+0x32>
 800a916:	3001      	adds	r0, #1
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	d400      	bmi.n	800a91e <__hi0bits+0x32>
 800a91c:	2020      	movs	r0, #32
 800a91e:	4770      	bx	lr

0800a920 <__lo0bits>:
 800a920:	6803      	ldr	r3, [r0, #0]
 800a922:	0001      	movs	r1, r0
 800a924:	2207      	movs	r2, #7
 800a926:	0018      	movs	r0, r3
 800a928:	4010      	ands	r0, r2
 800a92a:	4213      	tst	r3, r2
 800a92c:	d00d      	beq.n	800a94a <__lo0bits+0x2a>
 800a92e:	3a06      	subs	r2, #6
 800a930:	2000      	movs	r0, #0
 800a932:	4213      	tst	r3, r2
 800a934:	d105      	bne.n	800a942 <__lo0bits+0x22>
 800a936:	3002      	adds	r0, #2
 800a938:	4203      	tst	r3, r0
 800a93a:	d003      	beq.n	800a944 <__lo0bits+0x24>
 800a93c:	40d3      	lsrs	r3, r2
 800a93e:	0010      	movs	r0, r2
 800a940:	600b      	str	r3, [r1, #0]
 800a942:	4770      	bx	lr
 800a944:	089b      	lsrs	r3, r3, #2
 800a946:	600b      	str	r3, [r1, #0]
 800a948:	e7fb      	b.n	800a942 <__lo0bits+0x22>
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	2a00      	cmp	r2, #0
 800a94e:	d101      	bne.n	800a954 <__lo0bits+0x34>
 800a950:	2010      	movs	r0, #16
 800a952:	0c1b      	lsrs	r3, r3, #16
 800a954:	b2da      	uxtb	r2, r3
 800a956:	2a00      	cmp	r2, #0
 800a958:	d101      	bne.n	800a95e <__lo0bits+0x3e>
 800a95a:	3008      	adds	r0, #8
 800a95c:	0a1b      	lsrs	r3, r3, #8
 800a95e:	071a      	lsls	r2, r3, #28
 800a960:	d101      	bne.n	800a966 <__lo0bits+0x46>
 800a962:	3004      	adds	r0, #4
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	079a      	lsls	r2, r3, #30
 800a968:	d101      	bne.n	800a96e <__lo0bits+0x4e>
 800a96a:	3002      	adds	r0, #2
 800a96c:	089b      	lsrs	r3, r3, #2
 800a96e:	07da      	lsls	r2, r3, #31
 800a970:	d4e9      	bmi.n	800a946 <__lo0bits+0x26>
 800a972:	3001      	adds	r0, #1
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	d1e6      	bne.n	800a946 <__lo0bits+0x26>
 800a978:	2020      	movs	r0, #32
 800a97a:	e7e2      	b.n	800a942 <__lo0bits+0x22>

0800a97c <__i2b>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	000c      	movs	r4, r1
 800a980:	2101      	movs	r1, #1
 800a982:	f7ff ff07 	bl	800a794 <_Balloc>
 800a986:	2800      	cmp	r0, #0
 800a988:	d107      	bne.n	800a99a <__i2b+0x1e>
 800a98a:	2146      	movs	r1, #70	; 0x46
 800a98c:	4c05      	ldr	r4, [pc, #20]	; (800a9a4 <__i2b+0x28>)
 800a98e:	0002      	movs	r2, r0
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <__i2b+0x2c>)
 800a992:	0020      	movs	r0, r4
 800a994:	31ff      	adds	r1, #255	; 0xff
 800a996:	f000 fb69 	bl	800b06c <__assert_func>
 800a99a:	2301      	movs	r3, #1
 800a99c:	6144      	str	r4, [r0, #20]
 800a99e:	6103      	str	r3, [r0, #16]
 800a9a0:	bd10      	pop	{r4, pc}
 800a9a2:	46c0      	nop			; (mov r8, r8)
 800a9a4:	0800b8ed 	.word	0x0800b8ed
 800a9a8:	0800b8dc 	.word	0x0800b8dc

0800a9ac <__multiply>:
 800a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ae:	0015      	movs	r5, r2
 800a9b0:	690a      	ldr	r2, [r1, #16]
 800a9b2:	692b      	ldr	r3, [r5, #16]
 800a9b4:	000c      	movs	r4, r1
 800a9b6:	b08b      	sub	sp, #44	; 0x2c
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	da01      	bge.n	800a9c0 <__multiply+0x14>
 800a9bc:	002c      	movs	r4, r5
 800a9be:	000d      	movs	r5, r1
 800a9c0:	6927      	ldr	r7, [r4, #16]
 800a9c2:	692e      	ldr	r6, [r5, #16]
 800a9c4:	6861      	ldr	r1, [r4, #4]
 800a9c6:	19bb      	adds	r3, r7, r6
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	19ba      	adds	r2, r7, r6
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	da00      	bge.n	800a9d4 <__multiply+0x28>
 800a9d2:	3101      	adds	r1, #1
 800a9d4:	f7ff fede 	bl	800a794 <_Balloc>
 800a9d8:	9002      	str	r0, [sp, #8]
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d106      	bne.n	800a9ec <__multiply+0x40>
 800a9de:	21b1      	movs	r1, #177	; 0xb1
 800a9e0:	4b48      	ldr	r3, [pc, #288]	; (800ab04 <__multiply+0x158>)
 800a9e2:	4849      	ldr	r0, [pc, #292]	; (800ab08 <__multiply+0x15c>)
 800a9e4:	9a02      	ldr	r2, [sp, #8]
 800a9e6:	0049      	lsls	r1, r1, #1
 800a9e8:	f000 fb40 	bl	800b06c <__assert_func>
 800a9ec:	9b02      	ldr	r3, [sp, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	3314      	adds	r3, #20
 800a9f2:	469c      	mov	ip, r3
 800a9f4:	19bb      	adds	r3, r7, r6
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4463      	add	r3, ip
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	4663      	mov	r3, ip
 800a9fe:	9904      	ldr	r1, [sp, #16]
 800aa00:	428b      	cmp	r3, r1
 800aa02:	d32a      	bcc.n	800aa5a <__multiply+0xae>
 800aa04:	0023      	movs	r3, r4
 800aa06:	00bf      	lsls	r7, r7, #2
 800aa08:	3314      	adds	r3, #20
 800aa0a:	3514      	adds	r5, #20
 800aa0c:	9308      	str	r3, [sp, #32]
 800aa0e:	00b6      	lsls	r6, r6, #2
 800aa10:	19db      	adds	r3, r3, r7
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	19ab      	adds	r3, r5, r6
 800aa16:	9309      	str	r3, [sp, #36]	; 0x24
 800aa18:	2304      	movs	r3, #4
 800aa1a:	9306      	str	r3, [sp, #24]
 800aa1c:	0023      	movs	r3, r4
 800aa1e:	9a05      	ldr	r2, [sp, #20]
 800aa20:	3315      	adds	r3, #21
 800aa22:	9501      	str	r5, [sp, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d305      	bcc.n	800aa34 <__multiply+0x88>
 800aa28:	1b13      	subs	r3, r2, r4
 800aa2a:	3b15      	subs	r3, #21
 800aa2c:	089b      	lsrs	r3, r3, #2
 800aa2e:	3301      	adds	r3, #1
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	9306      	str	r3, [sp, #24]
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d310      	bcc.n	800aa5e <__multiply+0xb2>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dd05      	ble.n	800aa4e <__multiply+0xa2>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	3b04      	subs	r3, #4
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d056      	beq.n	800aafc <__multiply+0x150>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	9a03      	ldr	r2, [sp, #12]
 800aa52:	0018      	movs	r0, r3
 800aa54:	611a      	str	r2, [r3, #16]
 800aa56:	b00b      	add	sp, #44	; 0x2c
 800aa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5a:	c304      	stmia	r3!, {r2}
 800aa5c:	e7cf      	b.n	800a9fe <__multiply+0x52>
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	b280      	uxth	r0, r0
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d01e      	beq.n	800aaa6 <__multiply+0xfa>
 800aa68:	4667      	mov	r7, ip
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	9e08      	ldr	r6, [sp, #32]
 800aa6e:	ce02      	ldmia	r6!, {r1}
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	b28b      	uxth	r3, r1
 800aa76:	4343      	muls	r3, r0
 800aa78:	001a      	movs	r2, r3
 800aa7a:	466b      	mov	r3, sp
 800aa7c:	8b9b      	ldrh	r3, [r3, #28]
 800aa7e:	18d3      	adds	r3, r2, r3
 800aa80:	195b      	adds	r3, r3, r5
 800aa82:	0c0d      	lsrs	r5, r1, #16
 800aa84:	4345      	muls	r5, r0
 800aa86:	9a07      	ldr	r2, [sp, #28]
 800aa88:	0c11      	lsrs	r1, r2, #16
 800aa8a:	1869      	adds	r1, r5, r1
 800aa8c:	0c1a      	lsrs	r2, r3, #16
 800aa8e:	188a      	adds	r2, r1, r2
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	0c15      	lsrs	r5, r2, #16
 800aa94:	0412      	lsls	r2, r2, #16
 800aa96:	431a      	orrs	r2, r3
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	c704      	stmia	r7!, {r2}
 800aa9c:	42b3      	cmp	r3, r6
 800aa9e:	d8e6      	bhi.n	800aa6e <__multiply+0xc2>
 800aaa0:	4663      	mov	r3, ip
 800aaa2:	9a06      	ldr	r2, [sp, #24]
 800aaa4:	509d      	str	r5, [r3, r2]
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	0c00      	lsrs	r0, r0, #16
 800aaac:	d020      	beq.n	800aaf0 <__multiply+0x144>
 800aaae:	4663      	mov	r3, ip
 800aab0:	0025      	movs	r5, r4
 800aab2:	4661      	mov	r1, ip
 800aab4:	2700      	movs	r7, #0
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3514      	adds	r5, #20
 800aaba:	682a      	ldr	r2, [r5, #0]
 800aabc:	680e      	ldr	r6, [r1, #0]
 800aabe:	b292      	uxth	r2, r2
 800aac0:	4342      	muls	r2, r0
 800aac2:	0c36      	lsrs	r6, r6, #16
 800aac4:	1992      	adds	r2, r2, r6
 800aac6:	19d2      	adds	r2, r2, r7
 800aac8:	0416      	lsls	r6, r2, #16
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	431e      	orrs	r6, r3
 800aace:	600e      	str	r6, [r1, #0]
 800aad0:	cd40      	ldmia	r5!, {r6}
 800aad2:	684b      	ldr	r3, [r1, #4]
 800aad4:	0c36      	lsrs	r6, r6, #16
 800aad6:	4346      	muls	r6, r0
 800aad8:	b29b      	uxth	r3, r3
 800aada:	0c12      	lsrs	r2, r2, #16
 800aadc:	18f3      	adds	r3, r6, r3
 800aade:	189b      	adds	r3, r3, r2
 800aae0:	9a05      	ldr	r2, [sp, #20]
 800aae2:	0c1f      	lsrs	r7, r3, #16
 800aae4:	3104      	adds	r1, #4
 800aae6:	42aa      	cmp	r2, r5
 800aae8:	d8e7      	bhi.n	800aaba <__multiply+0x10e>
 800aaea:	4662      	mov	r2, ip
 800aaec:	9906      	ldr	r1, [sp, #24]
 800aaee:	5053      	str	r3, [r2, r1]
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	2304      	movs	r3, #4
 800aaf8:	449c      	add	ip, r3
 800aafa:	e79b      	b.n	800aa34 <__multiply+0x88>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	e79b      	b.n	800aa3c <__multiply+0x90>
 800ab04:	0800b8dc 	.word	0x0800b8dc
 800ab08:	0800b8ed 	.word	0x0800b8ed

0800ab0c <__pow5mult>:
 800ab0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0e:	2303      	movs	r3, #3
 800ab10:	0015      	movs	r5, r2
 800ab12:	0007      	movs	r7, r0
 800ab14:	000e      	movs	r6, r1
 800ab16:	401a      	ands	r2, r3
 800ab18:	421d      	tst	r5, r3
 800ab1a:	d008      	beq.n	800ab2e <__pow5mult+0x22>
 800ab1c:	4925      	ldr	r1, [pc, #148]	; (800abb4 <__pow5mult+0xa8>)
 800ab1e:	3a01      	subs	r2, #1
 800ab20:	0092      	lsls	r2, r2, #2
 800ab22:	5852      	ldr	r2, [r2, r1]
 800ab24:	2300      	movs	r3, #0
 800ab26:	0031      	movs	r1, r6
 800ab28:	f7ff fe9c 	bl	800a864 <__multadd>
 800ab2c:	0006      	movs	r6, r0
 800ab2e:	10ad      	asrs	r5, r5, #2
 800ab30:	d03d      	beq.n	800abae <__pow5mult+0xa2>
 800ab32:	69fc      	ldr	r4, [r7, #28]
 800ab34:	2c00      	cmp	r4, #0
 800ab36:	d10f      	bne.n	800ab58 <__pow5mult+0x4c>
 800ab38:	2010      	movs	r0, #16
 800ab3a:	f7ff fd6d 	bl	800a618 <malloc>
 800ab3e:	1e02      	subs	r2, r0, #0
 800ab40:	61f8      	str	r0, [r7, #28]
 800ab42:	d105      	bne.n	800ab50 <__pow5mult+0x44>
 800ab44:	21b4      	movs	r1, #180	; 0xb4
 800ab46:	4b1c      	ldr	r3, [pc, #112]	; (800abb8 <__pow5mult+0xac>)
 800ab48:	481c      	ldr	r0, [pc, #112]	; (800abbc <__pow5mult+0xb0>)
 800ab4a:	31ff      	adds	r1, #255	; 0xff
 800ab4c:	f000 fa8e 	bl	800b06c <__assert_func>
 800ab50:	6044      	str	r4, [r0, #4]
 800ab52:	6084      	str	r4, [r0, #8]
 800ab54:	6004      	str	r4, [r0, #0]
 800ab56:	60c4      	str	r4, [r0, #12]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	689c      	ldr	r4, [r3, #8]
 800ab5c:	9301      	str	r3, [sp, #4]
 800ab5e:	2c00      	cmp	r4, #0
 800ab60:	d108      	bne.n	800ab74 <__pow5mult+0x68>
 800ab62:	0038      	movs	r0, r7
 800ab64:	4916      	ldr	r1, [pc, #88]	; (800abc0 <__pow5mult+0xb4>)
 800ab66:	f7ff ff09 	bl	800a97c <__i2b>
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	0004      	movs	r4, r0
 800ab6e:	6098      	str	r0, [r3, #8]
 800ab70:	2300      	movs	r3, #0
 800ab72:	6003      	str	r3, [r0, #0]
 800ab74:	2301      	movs	r3, #1
 800ab76:	421d      	tst	r5, r3
 800ab78:	d00a      	beq.n	800ab90 <__pow5mult+0x84>
 800ab7a:	0031      	movs	r1, r6
 800ab7c:	0022      	movs	r2, r4
 800ab7e:	0038      	movs	r0, r7
 800ab80:	f7ff ff14 	bl	800a9ac <__multiply>
 800ab84:	0031      	movs	r1, r6
 800ab86:	9001      	str	r0, [sp, #4]
 800ab88:	0038      	movs	r0, r7
 800ab8a:	f7ff fe47 	bl	800a81c <_Bfree>
 800ab8e:	9e01      	ldr	r6, [sp, #4]
 800ab90:	106d      	asrs	r5, r5, #1
 800ab92:	d00c      	beq.n	800abae <__pow5mult+0xa2>
 800ab94:	6820      	ldr	r0, [r4, #0]
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d107      	bne.n	800abaa <__pow5mult+0x9e>
 800ab9a:	0022      	movs	r2, r4
 800ab9c:	0021      	movs	r1, r4
 800ab9e:	0038      	movs	r0, r7
 800aba0:	f7ff ff04 	bl	800a9ac <__multiply>
 800aba4:	2300      	movs	r3, #0
 800aba6:	6020      	str	r0, [r4, #0]
 800aba8:	6003      	str	r3, [r0, #0]
 800abaa:	0004      	movs	r4, r0
 800abac:	e7e2      	b.n	800ab74 <__pow5mult+0x68>
 800abae:	0030      	movs	r0, r6
 800abb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	0800ba38 	.word	0x0800ba38
 800abb8:	0800b86d 	.word	0x0800b86d
 800abbc:	0800b8ed 	.word	0x0800b8ed
 800abc0:	00000271 	.word	0x00000271

0800abc4 <__lshift>:
 800abc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc6:	000c      	movs	r4, r1
 800abc8:	0017      	movs	r7, r2
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	1155      	asrs	r5, r2, #5
 800abce:	b087      	sub	sp, #28
 800abd0:	18eb      	adds	r3, r5, r3
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	3301      	adds	r3, #1
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	6849      	ldr	r1, [r1, #4]
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	9004      	str	r0, [sp, #16]
 800abde:	9a01      	ldr	r2, [sp, #4]
 800abe0:	4293      	cmp	r3, r2
 800abe2:	db10      	blt.n	800ac06 <__lshift+0x42>
 800abe4:	9804      	ldr	r0, [sp, #16]
 800abe6:	f7ff fdd5 	bl	800a794 <_Balloc>
 800abea:	2300      	movs	r3, #0
 800abec:	0002      	movs	r2, r0
 800abee:	0006      	movs	r6, r0
 800abf0:	0019      	movs	r1, r3
 800abf2:	3214      	adds	r2, #20
 800abf4:	4298      	cmp	r0, r3
 800abf6:	d10c      	bne.n	800ac12 <__lshift+0x4e>
 800abf8:	31df      	adds	r1, #223	; 0xdf
 800abfa:	0032      	movs	r2, r6
 800abfc:	4b26      	ldr	r3, [pc, #152]	; (800ac98 <__lshift+0xd4>)
 800abfe:	4827      	ldr	r0, [pc, #156]	; (800ac9c <__lshift+0xd8>)
 800ac00:	31ff      	adds	r1, #255	; 0xff
 800ac02:	f000 fa33 	bl	800b06c <__assert_func>
 800ac06:	3101      	adds	r1, #1
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	e7e8      	b.n	800abde <__lshift+0x1a>
 800ac0c:	0098      	lsls	r0, r3, #2
 800ac0e:	5011      	str	r1, [r2, r0]
 800ac10:	3301      	adds	r3, #1
 800ac12:	42ab      	cmp	r3, r5
 800ac14:	dbfa      	blt.n	800ac0c <__lshift+0x48>
 800ac16:	43eb      	mvns	r3, r5
 800ac18:	17db      	asrs	r3, r3, #31
 800ac1a:	401d      	ands	r5, r3
 800ac1c:	211f      	movs	r1, #31
 800ac1e:	0023      	movs	r3, r4
 800ac20:	0038      	movs	r0, r7
 800ac22:	00ad      	lsls	r5, r5, #2
 800ac24:	1955      	adds	r5, r2, r5
 800ac26:	6922      	ldr	r2, [r4, #16]
 800ac28:	3314      	adds	r3, #20
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	4008      	ands	r0, r1
 800ac2e:	4684      	mov	ip, r0
 800ac30:	189a      	adds	r2, r3, r2
 800ac32:	420f      	tst	r7, r1
 800ac34:	d02a      	beq.n	800ac8c <__lshift+0xc8>
 800ac36:	3101      	adds	r1, #1
 800ac38:	1a09      	subs	r1, r1, r0
 800ac3a:	9105      	str	r1, [sp, #20]
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	9503      	str	r5, [sp, #12]
 800ac40:	4667      	mov	r7, ip
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	40b8      	lsls	r0, r7
 800ac46:	4308      	orrs	r0, r1
 800ac48:	9903      	ldr	r1, [sp, #12]
 800ac4a:	c101      	stmia	r1!, {r0}
 800ac4c:	9103      	str	r1, [sp, #12]
 800ac4e:	9805      	ldr	r0, [sp, #20]
 800ac50:	cb02      	ldmia	r3!, {r1}
 800ac52:	40c1      	lsrs	r1, r0
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d8f3      	bhi.n	800ac40 <__lshift+0x7c>
 800ac58:	0020      	movs	r0, r4
 800ac5a:	3015      	adds	r0, #21
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	4282      	cmp	r2, r0
 800ac60:	d304      	bcc.n	800ac6c <__lshift+0xa8>
 800ac62:	1b13      	subs	r3, r2, r4
 800ac64:	3b15      	subs	r3, #21
 800ac66:	089b      	lsrs	r3, r3, #2
 800ac68:	3301      	adds	r3, #1
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	50e9      	str	r1, [r5, r3]
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	d002      	beq.n	800ac78 <__lshift+0xb4>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	3302      	adds	r3, #2
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	9804      	ldr	r0, [sp, #16]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	0021      	movs	r1, r4
 800ac80:	6133      	str	r3, [r6, #16]
 800ac82:	f7ff fdcb 	bl	800a81c <_Bfree>
 800ac86:	0030      	movs	r0, r6
 800ac88:	b007      	add	sp, #28
 800ac8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac8c:	cb02      	ldmia	r3!, {r1}
 800ac8e:	c502      	stmia	r5!, {r1}
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d8fb      	bhi.n	800ac8c <__lshift+0xc8>
 800ac94:	e7f0      	b.n	800ac78 <__lshift+0xb4>
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	0800b8dc 	.word	0x0800b8dc
 800ac9c:	0800b8ed 	.word	0x0800b8ed

0800aca0 <__mcmp>:
 800aca0:	b530      	push	{r4, r5, lr}
 800aca2:	690b      	ldr	r3, [r1, #16]
 800aca4:	6904      	ldr	r4, [r0, #16]
 800aca6:	0002      	movs	r2, r0
 800aca8:	1ae0      	subs	r0, r4, r3
 800acaa:	429c      	cmp	r4, r3
 800acac:	d10e      	bne.n	800accc <__mcmp+0x2c>
 800acae:	3214      	adds	r2, #20
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	3114      	adds	r1, #20
 800acb4:	0014      	movs	r4, r2
 800acb6:	18c9      	adds	r1, r1, r3
 800acb8:	18d2      	adds	r2, r2, r3
 800acba:	3a04      	subs	r2, #4
 800acbc:	3904      	subs	r1, #4
 800acbe:	6815      	ldr	r5, [r2, #0]
 800acc0:	680b      	ldr	r3, [r1, #0]
 800acc2:	429d      	cmp	r5, r3
 800acc4:	d003      	beq.n	800acce <__mcmp+0x2e>
 800acc6:	2001      	movs	r0, #1
 800acc8:	429d      	cmp	r5, r3
 800acca:	d303      	bcc.n	800acd4 <__mcmp+0x34>
 800accc:	bd30      	pop	{r4, r5, pc}
 800acce:	4294      	cmp	r4, r2
 800acd0:	d3f3      	bcc.n	800acba <__mcmp+0x1a>
 800acd2:	e7fb      	b.n	800accc <__mcmp+0x2c>
 800acd4:	4240      	negs	r0, r0
 800acd6:	e7f9      	b.n	800accc <__mcmp+0x2c>

0800acd8 <__mdiff>:
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	000e      	movs	r6, r1
 800acdc:	0007      	movs	r7, r0
 800acde:	0011      	movs	r1, r2
 800ace0:	0030      	movs	r0, r6
 800ace2:	b087      	sub	sp, #28
 800ace4:	0014      	movs	r4, r2
 800ace6:	f7ff ffdb 	bl	800aca0 <__mcmp>
 800acea:	1e05      	subs	r5, r0, #0
 800acec:	d110      	bne.n	800ad10 <__mdiff+0x38>
 800acee:	0001      	movs	r1, r0
 800acf0:	0038      	movs	r0, r7
 800acf2:	f7ff fd4f 	bl	800a794 <_Balloc>
 800acf6:	1e02      	subs	r2, r0, #0
 800acf8:	d104      	bne.n	800ad04 <__mdiff+0x2c>
 800acfa:	4b3f      	ldr	r3, [pc, #252]	; (800adf8 <__mdiff+0x120>)
 800acfc:	483f      	ldr	r0, [pc, #252]	; (800adfc <__mdiff+0x124>)
 800acfe:	4940      	ldr	r1, [pc, #256]	; (800ae00 <__mdiff+0x128>)
 800ad00:	f000 f9b4 	bl	800b06c <__assert_func>
 800ad04:	2301      	movs	r3, #1
 800ad06:	6145      	str	r5, [r0, #20]
 800ad08:	6103      	str	r3, [r0, #16]
 800ad0a:	0010      	movs	r0, r2
 800ad0c:	b007      	add	sp, #28
 800ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad10:	2301      	movs	r3, #1
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	2800      	cmp	r0, #0
 800ad16:	db04      	blt.n	800ad22 <__mdiff+0x4a>
 800ad18:	0023      	movs	r3, r4
 800ad1a:	0034      	movs	r4, r6
 800ad1c:	001e      	movs	r6, r3
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	0038      	movs	r0, r7
 800ad24:	6861      	ldr	r1, [r4, #4]
 800ad26:	f7ff fd35 	bl	800a794 <_Balloc>
 800ad2a:	1e02      	subs	r2, r0, #0
 800ad2c:	d103      	bne.n	800ad36 <__mdiff+0x5e>
 800ad2e:	4b32      	ldr	r3, [pc, #200]	; (800adf8 <__mdiff+0x120>)
 800ad30:	4832      	ldr	r0, [pc, #200]	; (800adfc <__mdiff+0x124>)
 800ad32:	4934      	ldr	r1, [pc, #208]	; (800ae04 <__mdiff+0x12c>)
 800ad34:	e7e4      	b.n	800ad00 <__mdiff+0x28>
 800ad36:	9b01      	ldr	r3, [sp, #4]
 800ad38:	2700      	movs	r7, #0
 800ad3a:	60c3      	str	r3, [r0, #12]
 800ad3c:	6920      	ldr	r0, [r4, #16]
 800ad3e:	3414      	adds	r4, #20
 800ad40:	0083      	lsls	r3, r0, #2
 800ad42:	18e3      	adds	r3, r4, r3
 800ad44:	0021      	movs	r1, r4
 800ad46:	9401      	str	r4, [sp, #4]
 800ad48:	0034      	movs	r4, r6
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	6933      	ldr	r3, [r6, #16]
 800ad4e:	3414      	adds	r4, #20
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	18e3      	adds	r3, r4, r3
 800ad54:	9303      	str	r3, [sp, #12]
 800ad56:	0013      	movs	r3, r2
 800ad58:	3314      	adds	r3, #20
 800ad5a:	469c      	mov	ip, r3
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	9104      	str	r1, [sp, #16]
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	cc02      	ldmia	r4!, {r1}
 800ad64:	cb20      	ldmia	r3!, {r5}
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	b2ab      	uxth	r3, r5
 800ad6a:	19df      	adds	r7, r3, r7
 800ad6c:	b28b      	uxth	r3, r1
 800ad6e:	1afb      	subs	r3, r7, r3
 800ad70:	0c09      	lsrs	r1, r1, #16
 800ad72:	0c2d      	lsrs	r5, r5, #16
 800ad74:	1a6d      	subs	r5, r5, r1
 800ad76:	1419      	asrs	r1, r3, #16
 800ad78:	1869      	adds	r1, r5, r1
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	140f      	asrs	r7, r1, #16
 800ad7e:	0409      	lsls	r1, r1, #16
 800ad80:	4319      	orrs	r1, r3
 800ad82:	4663      	mov	r3, ip
 800ad84:	c302      	stmia	r3!, {r1}
 800ad86:	469c      	mov	ip, r3
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	d8e8      	bhi.n	800ad60 <__mdiff+0x88>
 800ad8e:	0031      	movs	r1, r6
 800ad90:	9c03      	ldr	r4, [sp, #12]
 800ad92:	3115      	adds	r1, #21
 800ad94:	2304      	movs	r3, #4
 800ad96:	428c      	cmp	r4, r1
 800ad98:	d304      	bcc.n	800ada4 <__mdiff+0xcc>
 800ad9a:	1ba3      	subs	r3, r4, r6
 800ad9c:	3b15      	subs	r3, #21
 800ad9e:	089b      	lsrs	r3, r3, #2
 800ada0:	3301      	adds	r3, #1
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	9901      	ldr	r1, [sp, #4]
 800ada6:	18cd      	adds	r5, r1, r3
 800ada8:	9905      	ldr	r1, [sp, #20]
 800adaa:	002e      	movs	r6, r5
 800adac:	18cb      	adds	r3, r1, r3
 800adae:	469c      	mov	ip, r3
 800adb0:	9902      	ldr	r1, [sp, #8]
 800adb2:	428e      	cmp	r6, r1
 800adb4:	d310      	bcc.n	800add8 <__mdiff+0x100>
 800adb6:	9e02      	ldr	r6, [sp, #8]
 800adb8:	1ee9      	subs	r1, r5, #3
 800adba:	2400      	movs	r4, #0
 800adbc:	428e      	cmp	r6, r1
 800adbe:	d304      	bcc.n	800adca <__mdiff+0xf2>
 800adc0:	0031      	movs	r1, r6
 800adc2:	3103      	adds	r1, #3
 800adc4:	1b49      	subs	r1, r1, r5
 800adc6:	0889      	lsrs	r1, r1, #2
 800adc8:	008c      	lsls	r4, r1, #2
 800adca:	191b      	adds	r3, r3, r4
 800adcc:	3b04      	subs	r3, #4
 800adce:	6819      	ldr	r1, [r3, #0]
 800add0:	2900      	cmp	r1, #0
 800add2:	d00f      	beq.n	800adf4 <__mdiff+0x11c>
 800add4:	6110      	str	r0, [r2, #16]
 800add6:	e798      	b.n	800ad0a <__mdiff+0x32>
 800add8:	ce02      	ldmia	r6!, {r1}
 800adda:	b28c      	uxth	r4, r1
 800addc:	19e4      	adds	r4, r4, r7
 800adde:	0c0f      	lsrs	r7, r1, #16
 800ade0:	1421      	asrs	r1, r4, #16
 800ade2:	1879      	adds	r1, r7, r1
 800ade4:	b2a4      	uxth	r4, r4
 800ade6:	140f      	asrs	r7, r1, #16
 800ade8:	0409      	lsls	r1, r1, #16
 800adea:	4321      	orrs	r1, r4
 800adec:	4664      	mov	r4, ip
 800adee:	c402      	stmia	r4!, {r1}
 800adf0:	46a4      	mov	ip, r4
 800adf2:	e7dd      	b.n	800adb0 <__mdiff+0xd8>
 800adf4:	3801      	subs	r0, #1
 800adf6:	e7e9      	b.n	800adcc <__mdiff+0xf4>
 800adf8:	0800b8dc 	.word	0x0800b8dc
 800adfc:	0800b8ed 	.word	0x0800b8ed
 800ae00:	00000237 	.word	0x00000237
 800ae04:	00000245 	.word	0x00000245

0800ae08 <__d2b>:
 800ae08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	0014      	movs	r4, r2
 800ae0e:	001d      	movs	r5, r3
 800ae10:	9f08      	ldr	r7, [sp, #32]
 800ae12:	f7ff fcbf 	bl	800a794 <_Balloc>
 800ae16:	1e06      	subs	r6, r0, #0
 800ae18:	d105      	bne.n	800ae26 <__d2b+0x1e>
 800ae1a:	0032      	movs	r2, r6
 800ae1c:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <__d2b+0xa8>)
 800ae1e:	4825      	ldr	r0, [pc, #148]	; (800aeb4 <__d2b+0xac>)
 800ae20:	4925      	ldr	r1, [pc, #148]	; (800aeb8 <__d2b+0xb0>)
 800ae22:	f000 f923 	bl	800b06c <__assert_func>
 800ae26:	032b      	lsls	r3, r5, #12
 800ae28:	006d      	lsls	r5, r5, #1
 800ae2a:	0b1b      	lsrs	r3, r3, #12
 800ae2c:	0d6d      	lsrs	r5, r5, #21
 800ae2e:	d125      	bne.n	800ae7c <__d2b+0x74>
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d028      	beq.n	800ae88 <__d2b+0x80>
 800ae36:	4668      	mov	r0, sp
 800ae38:	9400      	str	r4, [sp, #0]
 800ae3a:	f7ff fd71 	bl	800a920 <__lo0bits>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	9900      	ldr	r1, [sp, #0]
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d01e      	beq.n	800ae84 <__d2b+0x7c>
 800ae46:	2220      	movs	r2, #32
 800ae48:	001c      	movs	r4, r3
 800ae4a:	1a12      	subs	r2, r2, r0
 800ae4c:	4094      	lsls	r4, r2
 800ae4e:	0022      	movs	r2, r4
 800ae50:	40c3      	lsrs	r3, r0
 800ae52:	430a      	orrs	r2, r1
 800ae54:	6172      	str	r2, [r6, #20]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	9c01      	ldr	r4, [sp, #4]
 800ae5a:	61b4      	str	r4, [r6, #24]
 800ae5c:	1e63      	subs	r3, r4, #1
 800ae5e:	419c      	sbcs	r4, r3
 800ae60:	3401      	adds	r4, #1
 800ae62:	6134      	str	r4, [r6, #16]
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	d017      	beq.n	800ae98 <__d2b+0x90>
 800ae68:	2435      	movs	r4, #53	; 0x35
 800ae6a:	4b14      	ldr	r3, [pc, #80]	; (800aebc <__d2b+0xb4>)
 800ae6c:	18ed      	adds	r5, r5, r3
 800ae6e:	182d      	adds	r5, r5, r0
 800ae70:	603d      	str	r5, [r7, #0]
 800ae72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae74:	1a24      	subs	r4, r4, r0
 800ae76:	601c      	str	r4, [r3, #0]
 800ae78:	0030      	movs	r0, r6
 800ae7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae7c:	2280      	movs	r2, #128	; 0x80
 800ae7e:	0352      	lsls	r2, r2, #13
 800ae80:	4313      	orrs	r3, r2
 800ae82:	e7d5      	b.n	800ae30 <__d2b+0x28>
 800ae84:	6171      	str	r1, [r6, #20]
 800ae86:	e7e7      	b.n	800ae58 <__d2b+0x50>
 800ae88:	a801      	add	r0, sp, #4
 800ae8a:	f7ff fd49 	bl	800a920 <__lo0bits>
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	2401      	movs	r4, #1
 800ae92:	6173      	str	r3, [r6, #20]
 800ae94:	3020      	adds	r0, #32
 800ae96:	e7e4      	b.n	800ae62 <__d2b+0x5a>
 800ae98:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <__d2b+0xb8>)
 800ae9a:	18c0      	adds	r0, r0, r3
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <__d2b+0xbc>)
 800ae9e:	6038      	str	r0, [r7, #0]
 800aea0:	18e3      	adds	r3, r4, r3
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	18f3      	adds	r3, r6, r3
 800aea6:	6958      	ldr	r0, [r3, #20]
 800aea8:	f7ff fd20 	bl	800a8ec <__hi0bits>
 800aeac:	0164      	lsls	r4, r4, #5
 800aeae:	e7e0      	b.n	800ae72 <__d2b+0x6a>
 800aeb0:	0800b8dc 	.word	0x0800b8dc
 800aeb4:	0800b8ed 	.word	0x0800b8ed
 800aeb8:	0000030f 	.word	0x0000030f
 800aebc:	fffffbcd 	.word	0xfffffbcd
 800aec0:	fffffbce 	.word	0xfffffbce
 800aec4:	3fffffff 	.word	0x3fffffff

0800aec8 <__sflush_r>:
 800aec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeca:	898b      	ldrh	r3, [r1, #12]
 800aecc:	0005      	movs	r5, r0
 800aece:	000c      	movs	r4, r1
 800aed0:	071a      	lsls	r2, r3, #28
 800aed2:	d45c      	bmi.n	800af8e <__sflush_r+0xc6>
 800aed4:	684a      	ldr	r2, [r1, #4]
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	dc04      	bgt.n	800aee4 <__sflush_r+0x1c>
 800aeda:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800aedc:	2a00      	cmp	r2, #0
 800aede:	dc01      	bgt.n	800aee4 <__sflush_r+0x1c>
 800aee0:	2000      	movs	r0, #0
 800aee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aee4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800aee6:	2f00      	cmp	r7, #0
 800aee8:	d0fa      	beq.n	800aee0 <__sflush_r+0x18>
 800aeea:	2200      	movs	r2, #0
 800aeec:	2080      	movs	r0, #128	; 0x80
 800aeee:	682e      	ldr	r6, [r5, #0]
 800aef0:	602a      	str	r2, [r5, #0]
 800aef2:	001a      	movs	r2, r3
 800aef4:	0140      	lsls	r0, r0, #5
 800aef6:	6a21      	ldr	r1, [r4, #32]
 800aef8:	4002      	ands	r2, r0
 800aefa:	4203      	tst	r3, r0
 800aefc:	d034      	beq.n	800af68 <__sflush_r+0xa0>
 800aefe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	075b      	lsls	r3, r3, #29
 800af04:	d506      	bpl.n	800af14 <__sflush_r+0x4c>
 800af06:	6863      	ldr	r3, [r4, #4]
 800af08:	1ac0      	subs	r0, r0, r3
 800af0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <__sflush_r+0x4c>
 800af10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af12:	1ac0      	subs	r0, r0, r3
 800af14:	0002      	movs	r2, r0
 800af16:	2300      	movs	r3, #0
 800af18:	0028      	movs	r0, r5
 800af1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af1c:	6a21      	ldr	r1, [r4, #32]
 800af1e:	47b8      	blx	r7
 800af20:	89a2      	ldrh	r2, [r4, #12]
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d106      	bne.n	800af34 <__sflush_r+0x6c>
 800af26:	6829      	ldr	r1, [r5, #0]
 800af28:	291d      	cmp	r1, #29
 800af2a:	d82c      	bhi.n	800af86 <__sflush_r+0xbe>
 800af2c:	4b2a      	ldr	r3, [pc, #168]	; (800afd8 <__sflush_r+0x110>)
 800af2e:	410b      	asrs	r3, r1
 800af30:	07db      	lsls	r3, r3, #31
 800af32:	d428      	bmi.n	800af86 <__sflush_r+0xbe>
 800af34:	2300      	movs	r3, #0
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	04d2      	lsls	r2, r2, #19
 800af3e:	d505      	bpl.n	800af4c <__sflush_r+0x84>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <__sflush_r+0x82>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d100      	bne.n	800af4c <__sflush_r+0x84>
 800af4a:	6560      	str	r0, [r4, #84]	; 0x54
 800af4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af4e:	602e      	str	r6, [r5, #0]
 800af50:	2900      	cmp	r1, #0
 800af52:	d0c5      	beq.n	800aee0 <__sflush_r+0x18>
 800af54:	0023      	movs	r3, r4
 800af56:	3344      	adds	r3, #68	; 0x44
 800af58:	4299      	cmp	r1, r3
 800af5a:	d002      	beq.n	800af62 <__sflush_r+0x9a>
 800af5c:	0028      	movs	r0, r5
 800af5e:	f7ff fb11 	bl	800a584 <_free_r>
 800af62:	2000      	movs	r0, #0
 800af64:	6360      	str	r0, [r4, #52]	; 0x34
 800af66:	e7bc      	b.n	800aee2 <__sflush_r+0x1a>
 800af68:	2301      	movs	r3, #1
 800af6a:	0028      	movs	r0, r5
 800af6c:	47b8      	blx	r7
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	d1c6      	bne.n	800af00 <__sflush_r+0x38>
 800af72:	682b      	ldr	r3, [r5, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0c3      	beq.n	800af00 <__sflush_r+0x38>
 800af78:	2b1d      	cmp	r3, #29
 800af7a:	d001      	beq.n	800af80 <__sflush_r+0xb8>
 800af7c:	2b16      	cmp	r3, #22
 800af7e:	d101      	bne.n	800af84 <__sflush_r+0xbc>
 800af80:	602e      	str	r6, [r5, #0]
 800af82:	e7ad      	b.n	800aee0 <__sflush_r+0x18>
 800af84:	89a2      	ldrh	r2, [r4, #12]
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	4313      	orrs	r3, r2
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	e7a9      	b.n	800aee2 <__sflush_r+0x1a>
 800af8e:	690e      	ldr	r6, [r1, #16]
 800af90:	2e00      	cmp	r6, #0
 800af92:	d0a5      	beq.n	800aee0 <__sflush_r+0x18>
 800af94:	680f      	ldr	r7, [r1, #0]
 800af96:	600e      	str	r6, [r1, #0]
 800af98:	1bba      	subs	r2, r7, r6
 800af9a:	9201      	str	r2, [sp, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	079b      	lsls	r3, r3, #30
 800afa0:	d100      	bne.n	800afa4 <__sflush_r+0xdc>
 800afa2:	694a      	ldr	r2, [r1, #20]
 800afa4:	60a2      	str	r2, [r4, #8]
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dd99      	ble.n	800aee0 <__sflush_r+0x18>
 800afac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afae:	0032      	movs	r2, r6
 800afb0:	001f      	movs	r7, r3
 800afb2:	0028      	movs	r0, r5
 800afb4:	9b01      	ldr	r3, [sp, #4]
 800afb6:	6a21      	ldr	r1, [r4, #32]
 800afb8:	47b8      	blx	r7
 800afba:	2800      	cmp	r0, #0
 800afbc:	dc06      	bgt.n	800afcc <__sflush_r+0x104>
 800afbe:	2340      	movs	r3, #64	; 0x40
 800afc0:	2001      	movs	r0, #1
 800afc2:	89a2      	ldrh	r2, [r4, #12]
 800afc4:	4240      	negs	r0, r0
 800afc6:	4313      	orrs	r3, r2
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e78a      	b.n	800aee2 <__sflush_r+0x1a>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	1836      	adds	r6, r6, r0
 800afd0:	1a1b      	subs	r3, r3, r0
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	e7e7      	b.n	800afa6 <__sflush_r+0xde>
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	dfbffffe 	.word	0xdfbffffe

0800afdc <_fflush_r>:
 800afdc:	690b      	ldr	r3, [r1, #16]
 800afde:	b570      	push	{r4, r5, r6, lr}
 800afe0:	0005      	movs	r5, r0
 800afe2:	000c      	movs	r4, r1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <_fflush_r+0x12>
 800afe8:	2500      	movs	r5, #0
 800afea:	0028      	movs	r0, r5
 800afec:	bd70      	pop	{r4, r5, r6, pc}
 800afee:	2800      	cmp	r0, #0
 800aff0:	d004      	beq.n	800affc <_fflush_r+0x20>
 800aff2:	6a03      	ldr	r3, [r0, #32]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <_fflush_r+0x20>
 800aff8:	f7fe fb14 	bl	8009624 <__sinit>
 800affc:	220c      	movs	r2, #12
 800affe:	5ea3      	ldrsh	r3, [r4, r2]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f1      	beq.n	800afe8 <_fflush_r+0xc>
 800b004:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b006:	07d2      	lsls	r2, r2, #31
 800b008:	d404      	bmi.n	800b014 <_fflush_r+0x38>
 800b00a:	059b      	lsls	r3, r3, #22
 800b00c:	d402      	bmi.n	800b014 <_fflush_r+0x38>
 800b00e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b010:	f7fe fc0d 	bl	800982e <__retarget_lock_acquire_recursive>
 800b014:	0028      	movs	r0, r5
 800b016:	0021      	movs	r1, r4
 800b018:	f7ff ff56 	bl	800aec8 <__sflush_r>
 800b01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b01e:	0005      	movs	r5, r0
 800b020:	07db      	lsls	r3, r3, #31
 800b022:	d4e2      	bmi.n	800afea <_fflush_r+0xe>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	059b      	lsls	r3, r3, #22
 800b028:	d4df      	bmi.n	800afea <_fflush_r+0xe>
 800b02a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b02c:	f7fe fc00 	bl	8009830 <__retarget_lock_release_recursive>
 800b030:	e7db      	b.n	800afea <_fflush_r+0xe>
	...

0800b034 <_sbrk_r>:
 800b034:	2300      	movs	r3, #0
 800b036:	b570      	push	{r4, r5, r6, lr}
 800b038:	4d06      	ldr	r5, [pc, #24]	; (800b054 <_sbrk_r+0x20>)
 800b03a:	0004      	movs	r4, r0
 800b03c:	0008      	movs	r0, r1
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	f7f9 f92a 	bl	8004298 <_sbrk>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d103      	bne.n	800b050 <_sbrk_r+0x1c>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d000      	beq.n	800b050 <_sbrk_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	200005d0 	.word	0x200005d0

0800b058 <memcpy>:
 800b058:	2300      	movs	r3, #0
 800b05a:	b510      	push	{r4, lr}
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d100      	bne.n	800b062 <memcpy+0xa>
 800b060:	bd10      	pop	{r4, pc}
 800b062:	5ccc      	ldrb	r4, [r1, r3]
 800b064:	54c4      	strb	r4, [r0, r3]
 800b066:	3301      	adds	r3, #1
 800b068:	e7f8      	b.n	800b05c <memcpy+0x4>
	...

0800b06c <__assert_func>:
 800b06c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b06e:	0014      	movs	r4, r2
 800b070:	001a      	movs	r2, r3
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <__assert_func+0x2c>)
 800b074:	0005      	movs	r5, r0
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	000e      	movs	r6, r1
 800b07a:	68d8      	ldr	r0, [r3, #12]
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <__assert_func+0x30>)
 800b07e:	2c00      	cmp	r4, #0
 800b080:	d101      	bne.n	800b086 <__assert_func+0x1a>
 800b082:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <__assert_func+0x34>)
 800b084:	001c      	movs	r4, r3
 800b086:	4907      	ldr	r1, [pc, #28]	; (800b0a4 <__assert_func+0x38>)
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	9402      	str	r4, [sp, #8]
 800b08c:	002b      	movs	r3, r5
 800b08e:	9600      	str	r6, [sp, #0]
 800b090:	f000 f856 	bl	800b140 <fiprintf>
 800b094:	f000 f864 	bl	800b160 <abort>
 800b098:	20000064 	.word	0x20000064
 800b09c:	0800ba4e 	.word	0x0800ba4e
 800b0a0:	0800ba89 	.word	0x0800ba89
 800b0a4:	0800ba5b 	.word	0x0800ba5b

0800b0a8 <_calloc_r>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	0c0b      	lsrs	r3, r1, #16
 800b0ac:	0c15      	lsrs	r5, r2, #16
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11e      	bne.n	800b0f0 <_calloc_r+0x48>
 800b0b2:	2d00      	cmp	r5, #0
 800b0b4:	d10c      	bne.n	800b0d0 <_calloc_r+0x28>
 800b0b6:	b289      	uxth	r1, r1
 800b0b8:	b294      	uxth	r4, r2
 800b0ba:	434c      	muls	r4, r1
 800b0bc:	0021      	movs	r1, r4
 800b0be:	f7ff fad7 	bl	800a670 <_malloc_r>
 800b0c2:	1e05      	subs	r5, r0, #0
 800b0c4:	d01b      	beq.n	800b0fe <_calloc_r+0x56>
 800b0c6:	0022      	movs	r2, r4
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	f7fe fb2b 	bl	8009724 <memset>
 800b0ce:	e016      	b.n	800b0fe <_calloc_r+0x56>
 800b0d0:	1c2b      	adds	r3, r5, #0
 800b0d2:	1c0c      	adds	r4, r1, #0
 800b0d4:	b289      	uxth	r1, r1
 800b0d6:	b292      	uxth	r2, r2
 800b0d8:	434a      	muls	r2, r1
 800b0da:	b2a1      	uxth	r1, r4
 800b0dc:	b29c      	uxth	r4, r3
 800b0de:	434c      	muls	r4, r1
 800b0e0:	0c13      	lsrs	r3, r2, #16
 800b0e2:	18e4      	adds	r4, r4, r3
 800b0e4:	0c23      	lsrs	r3, r4, #16
 800b0e6:	d107      	bne.n	800b0f8 <_calloc_r+0x50>
 800b0e8:	0424      	lsls	r4, r4, #16
 800b0ea:	b292      	uxth	r2, r2
 800b0ec:	4314      	orrs	r4, r2
 800b0ee:	e7e5      	b.n	800b0bc <_calloc_r+0x14>
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	d101      	bne.n	800b0f8 <_calloc_r+0x50>
 800b0f4:	1c14      	adds	r4, r2, #0
 800b0f6:	e7ed      	b.n	800b0d4 <_calloc_r+0x2c>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	0028      	movs	r0, r5
 800b100:	bd70      	pop	{r4, r5, r6, pc}

0800b102 <__ascii_mbtowc>:
 800b102:	b082      	sub	sp, #8
 800b104:	2900      	cmp	r1, #0
 800b106:	d100      	bne.n	800b10a <__ascii_mbtowc+0x8>
 800b108:	a901      	add	r1, sp, #4
 800b10a:	1e10      	subs	r0, r2, #0
 800b10c:	d006      	beq.n	800b11c <__ascii_mbtowc+0x1a>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d006      	beq.n	800b120 <__ascii_mbtowc+0x1e>
 800b112:	7813      	ldrb	r3, [r2, #0]
 800b114:	600b      	str	r3, [r1, #0]
 800b116:	7810      	ldrb	r0, [r2, #0]
 800b118:	1e43      	subs	r3, r0, #1
 800b11a:	4198      	sbcs	r0, r3
 800b11c:	b002      	add	sp, #8
 800b11e:	4770      	bx	lr
 800b120:	2002      	movs	r0, #2
 800b122:	4240      	negs	r0, r0
 800b124:	e7fa      	b.n	800b11c <__ascii_mbtowc+0x1a>

0800b126 <__ascii_wctomb>:
 800b126:	0003      	movs	r3, r0
 800b128:	1e08      	subs	r0, r1, #0
 800b12a:	d005      	beq.n	800b138 <__ascii_wctomb+0x12>
 800b12c:	2aff      	cmp	r2, #255	; 0xff
 800b12e:	d904      	bls.n	800b13a <__ascii_wctomb+0x14>
 800b130:	228a      	movs	r2, #138	; 0x8a
 800b132:	2001      	movs	r0, #1
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	4240      	negs	r0, r0
 800b138:	4770      	bx	lr
 800b13a:	2001      	movs	r0, #1
 800b13c:	700a      	strb	r2, [r1, #0]
 800b13e:	e7fb      	b.n	800b138 <__ascii_wctomb+0x12>

0800b140 <fiprintf>:
 800b140:	b40e      	push	{r1, r2, r3}
 800b142:	b517      	push	{r0, r1, r2, r4, lr}
 800b144:	4c05      	ldr	r4, [pc, #20]	; (800b15c <fiprintf+0x1c>)
 800b146:	ab05      	add	r3, sp, #20
 800b148:	cb04      	ldmia	r3!, {r2}
 800b14a:	0001      	movs	r1, r0
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	f000 f834 	bl	800b1bc <_vfiprintf_r>
 800b154:	bc1e      	pop	{r1, r2, r3, r4}
 800b156:	bc08      	pop	{r3}
 800b158:	b003      	add	sp, #12
 800b15a:	4718      	bx	r3
 800b15c:	20000064 	.word	0x20000064

0800b160 <abort>:
 800b160:	2006      	movs	r0, #6
 800b162:	b510      	push	{r4, lr}
 800b164:	f000 fa16 	bl	800b594 <raise>
 800b168:	2001      	movs	r0, #1
 800b16a:	f7f9 f823 	bl	80041b4 <_exit>

0800b16e <__sfputc_r>:
 800b16e:	6893      	ldr	r3, [r2, #8]
 800b170:	b510      	push	{r4, lr}
 800b172:	3b01      	subs	r3, #1
 800b174:	6093      	str	r3, [r2, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	da04      	bge.n	800b184 <__sfputc_r+0x16>
 800b17a:	6994      	ldr	r4, [r2, #24]
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	db07      	blt.n	800b190 <__sfputc_r+0x22>
 800b180:	290a      	cmp	r1, #10
 800b182:	d005      	beq.n	800b190 <__sfputc_r+0x22>
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	1c58      	adds	r0, r3, #1
 800b188:	6010      	str	r0, [r2, #0]
 800b18a:	7019      	strb	r1, [r3, #0]
 800b18c:	0008      	movs	r0, r1
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	f000 f930 	bl	800b3f4 <__swbuf_r>
 800b194:	0001      	movs	r1, r0
 800b196:	e7f9      	b.n	800b18c <__sfputc_r+0x1e>

0800b198 <__sfputs_r>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	0006      	movs	r6, r0
 800b19c:	000f      	movs	r7, r1
 800b19e:	0014      	movs	r4, r2
 800b1a0:	18d5      	adds	r5, r2, r3
 800b1a2:	42ac      	cmp	r4, r5
 800b1a4:	d101      	bne.n	800b1aa <__sfputs_r+0x12>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	e007      	b.n	800b1ba <__sfputs_r+0x22>
 800b1aa:	7821      	ldrb	r1, [r4, #0]
 800b1ac:	003a      	movs	r2, r7
 800b1ae:	0030      	movs	r0, r6
 800b1b0:	f7ff ffdd 	bl	800b16e <__sfputc_r>
 800b1b4:	3401      	adds	r4, #1
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d1f3      	bne.n	800b1a2 <__sfputs_r+0xa>
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1bc <_vfiprintf_r>:
 800b1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1be:	b0a1      	sub	sp, #132	; 0x84
 800b1c0:	000f      	movs	r7, r1
 800b1c2:	0015      	movs	r5, r2
 800b1c4:	001e      	movs	r6, r3
 800b1c6:	9003      	str	r0, [sp, #12]
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d004      	beq.n	800b1d6 <_vfiprintf_r+0x1a>
 800b1cc:	6a03      	ldr	r3, [r0, #32]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <_vfiprintf_r+0x1a>
 800b1d2:	f7fe fa27 	bl	8009624 <__sinit>
 800b1d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1d8:	07db      	lsls	r3, r3, #31
 800b1da:	d405      	bmi.n	800b1e8 <_vfiprintf_r+0x2c>
 800b1dc:	89bb      	ldrh	r3, [r7, #12]
 800b1de:	059b      	lsls	r3, r3, #22
 800b1e0:	d402      	bmi.n	800b1e8 <_vfiprintf_r+0x2c>
 800b1e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b1e4:	f7fe fb23 	bl	800982e <__retarget_lock_acquire_recursive>
 800b1e8:	89bb      	ldrh	r3, [r7, #12]
 800b1ea:	071b      	lsls	r3, r3, #28
 800b1ec:	d502      	bpl.n	800b1f4 <_vfiprintf_r+0x38>
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d113      	bne.n	800b21c <_vfiprintf_r+0x60>
 800b1f4:	0039      	movs	r1, r7
 800b1f6:	9803      	ldr	r0, [sp, #12]
 800b1f8:	f000 f93e 	bl	800b478 <__swsetup_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d00d      	beq.n	800b21c <_vfiprintf_r+0x60>
 800b200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b202:	07db      	lsls	r3, r3, #31
 800b204:	d503      	bpl.n	800b20e <_vfiprintf_r+0x52>
 800b206:	2001      	movs	r0, #1
 800b208:	4240      	negs	r0, r0
 800b20a:	b021      	add	sp, #132	; 0x84
 800b20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20e:	89bb      	ldrh	r3, [r7, #12]
 800b210:	059b      	lsls	r3, r3, #22
 800b212:	d4f8      	bmi.n	800b206 <_vfiprintf_r+0x4a>
 800b214:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b216:	f7fe fb0b 	bl	8009830 <__retarget_lock_release_recursive>
 800b21a:	e7f4      	b.n	800b206 <_vfiprintf_r+0x4a>
 800b21c:	2300      	movs	r3, #0
 800b21e:	ac08      	add	r4, sp, #32
 800b220:	6163      	str	r3, [r4, #20]
 800b222:	3320      	adds	r3, #32
 800b224:	7663      	strb	r3, [r4, #25]
 800b226:	3310      	adds	r3, #16
 800b228:	76a3      	strb	r3, [r4, #26]
 800b22a:	9607      	str	r6, [sp, #28]
 800b22c:	002e      	movs	r6, r5
 800b22e:	7833      	ldrb	r3, [r6, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <_vfiprintf_r+0x7c>
 800b234:	2b25      	cmp	r3, #37	; 0x25
 800b236:	d148      	bne.n	800b2ca <_vfiprintf_r+0x10e>
 800b238:	1b73      	subs	r3, r6, r5
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	42ae      	cmp	r6, r5
 800b23e:	d00b      	beq.n	800b258 <_vfiprintf_r+0x9c>
 800b240:	002a      	movs	r2, r5
 800b242:	0039      	movs	r1, r7
 800b244:	9803      	ldr	r0, [sp, #12]
 800b246:	f7ff ffa7 	bl	800b198 <__sfputs_r>
 800b24a:	3001      	adds	r0, #1
 800b24c:	d100      	bne.n	800b250 <_vfiprintf_r+0x94>
 800b24e:	e0af      	b.n	800b3b0 <_vfiprintf_r+0x1f4>
 800b250:	6963      	ldr	r3, [r4, #20]
 800b252:	9a05      	ldr	r2, [sp, #20]
 800b254:	189b      	adds	r3, r3, r2
 800b256:	6163      	str	r3, [r4, #20]
 800b258:	7833      	ldrb	r3, [r6, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d100      	bne.n	800b260 <_vfiprintf_r+0xa4>
 800b25e:	e0a7      	b.n	800b3b0 <_vfiprintf_r+0x1f4>
 800b260:	2201      	movs	r2, #1
 800b262:	2300      	movs	r3, #0
 800b264:	4252      	negs	r2, r2
 800b266:	6062      	str	r2, [r4, #4]
 800b268:	a904      	add	r1, sp, #16
 800b26a:	3254      	adds	r2, #84	; 0x54
 800b26c:	1852      	adds	r2, r2, r1
 800b26e:	1c75      	adds	r5, r6, #1
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	60e3      	str	r3, [r4, #12]
 800b274:	60a3      	str	r3, [r4, #8]
 800b276:	7013      	strb	r3, [r2, #0]
 800b278:	65a3      	str	r3, [r4, #88]	; 0x58
 800b27a:	4b59      	ldr	r3, [pc, #356]	; (800b3e0 <_vfiprintf_r+0x224>)
 800b27c:	2205      	movs	r2, #5
 800b27e:	0018      	movs	r0, r3
 800b280:	7829      	ldrb	r1, [r5, #0]
 800b282:	9305      	str	r3, [sp, #20]
 800b284:	f7fe fad5 	bl	8009832 <memchr>
 800b288:	1c6e      	adds	r6, r5, #1
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d11f      	bne.n	800b2ce <_vfiprintf_r+0x112>
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	06d3      	lsls	r3, r2, #27
 800b292:	d504      	bpl.n	800b29e <_vfiprintf_r+0xe2>
 800b294:	2353      	movs	r3, #83	; 0x53
 800b296:	a904      	add	r1, sp, #16
 800b298:	185b      	adds	r3, r3, r1
 800b29a:	2120      	movs	r1, #32
 800b29c:	7019      	strb	r1, [r3, #0]
 800b29e:	0713      	lsls	r3, r2, #28
 800b2a0:	d504      	bpl.n	800b2ac <_vfiprintf_r+0xf0>
 800b2a2:	2353      	movs	r3, #83	; 0x53
 800b2a4:	a904      	add	r1, sp, #16
 800b2a6:	185b      	adds	r3, r3, r1
 800b2a8:	212b      	movs	r1, #43	; 0x2b
 800b2aa:	7019      	strb	r1, [r3, #0]
 800b2ac:	782b      	ldrb	r3, [r5, #0]
 800b2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b0:	d016      	beq.n	800b2e0 <_vfiprintf_r+0x124>
 800b2b2:	002e      	movs	r6, r5
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	200a      	movs	r0, #10
 800b2b8:	68e3      	ldr	r3, [r4, #12]
 800b2ba:	7832      	ldrb	r2, [r6, #0]
 800b2bc:	1c75      	adds	r5, r6, #1
 800b2be:	3a30      	subs	r2, #48	; 0x30
 800b2c0:	2a09      	cmp	r2, #9
 800b2c2:	d94e      	bls.n	800b362 <_vfiprintf_r+0x1a6>
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	d111      	bne.n	800b2ec <_vfiprintf_r+0x130>
 800b2c8:	e017      	b.n	800b2fa <_vfiprintf_r+0x13e>
 800b2ca:	3601      	adds	r6, #1
 800b2cc:	e7af      	b.n	800b22e <_vfiprintf_r+0x72>
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	6822      	ldr	r2, [r4, #0]
 800b2d2:	1ac0      	subs	r0, r0, r3
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4083      	lsls	r3, r0
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	0035      	movs	r5, r6
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	e7cc      	b.n	800b27a <_vfiprintf_r+0xbe>
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	1d19      	adds	r1, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	9107      	str	r1, [sp, #28]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	db01      	blt.n	800b2f0 <_vfiprintf_r+0x134>
 800b2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ee:	e004      	b.n	800b2fa <_vfiprintf_r+0x13e>
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	60e3      	str	r3, [r4, #12]
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	7833      	ldrb	r3, [r6, #0]
 800b2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2fe:	d10a      	bne.n	800b316 <_vfiprintf_r+0x15a>
 800b300:	7873      	ldrb	r3, [r6, #1]
 800b302:	2b2a      	cmp	r3, #42	; 0x2a
 800b304:	d135      	bne.n	800b372 <_vfiprintf_r+0x1b6>
 800b306:	9b07      	ldr	r3, [sp, #28]
 800b308:	3602      	adds	r6, #2
 800b30a:	1d1a      	adds	r2, r3, #4
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	9207      	str	r2, [sp, #28]
 800b310:	2b00      	cmp	r3, #0
 800b312:	db2b      	blt.n	800b36c <_vfiprintf_r+0x1b0>
 800b314:	9309      	str	r3, [sp, #36]	; 0x24
 800b316:	4d33      	ldr	r5, [pc, #204]	; (800b3e4 <_vfiprintf_r+0x228>)
 800b318:	2203      	movs	r2, #3
 800b31a:	0028      	movs	r0, r5
 800b31c:	7831      	ldrb	r1, [r6, #0]
 800b31e:	f7fe fa88 	bl	8009832 <memchr>
 800b322:	2800      	cmp	r0, #0
 800b324:	d006      	beq.n	800b334 <_vfiprintf_r+0x178>
 800b326:	2340      	movs	r3, #64	; 0x40
 800b328:	1b40      	subs	r0, r0, r5
 800b32a:	4083      	lsls	r3, r0
 800b32c:	6822      	ldr	r2, [r4, #0]
 800b32e:	3601      	adds	r6, #1
 800b330:	4313      	orrs	r3, r2
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	7831      	ldrb	r1, [r6, #0]
 800b336:	2206      	movs	r2, #6
 800b338:	482b      	ldr	r0, [pc, #172]	; (800b3e8 <_vfiprintf_r+0x22c>)
 800b33a:	1c75      	adds	r5, r6, #1
 800b33c:	7621      	strb	r1, [r4, #24]
 800b33e:	f7fe fa78 	bl	8009832 <memchr>
 800b342:	2800      	cmp	r0, #0
 800b344:	d043      	beq.n	800b3ce <_vfiprintf_r+0x212>
 800b346:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <_vfiprintf_r+0x230>)
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d125      	bne.n	800b398 <_vfiprintf_r+0x1dc>
 800b34c:	2207      	movs	r2, #7
 800b34e:	9b07      	ldr	r3, [sp, #28]
 800b350:	3307      	adds	r3, #7
 800b352:	4393      	bics	r3, r2
 800b354:	3308      	adds	r3, #8
 800b356:	9307      	str	r3, [sp, #28]
 800b358:	6963      	ldr	r3, [r4, #20]
 800b35a:	9a04      	ldr	r2, [sp, #16]
 800b35c:	189b      	adds	r3, r3, r2
 800b35e:	6163      	str	r3, [r4, #20]
 800b360:	e764      	b.n	800b22c <_vfiprintf_r+0x70>
 800b362:	4343      	muls	r3, r0
 800b364:	002e      	movs	r6, r5
 800b366:	2101      	movs	r1, #1
 800b368:	189b      	adds	r3, r3, r2
 800b36a:	e7a6      	b.n	800b2ba <_vfiprintf_r+0xfe>
 800b36c:	2301      	movs	r3, #1
 800b36e:	425b      	negs	r3, r3
 800b370:	e7d0      	b.n	800b314 <_vfiprintf_r+0x158>
 800b372:	2300      	movs	r3, #0
 800b374:	200a      	movs	r0, #10
 800b376:	001a      	movs	r2, r3
 800b378:	3601      	adds	r6, #1
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	7831      	ldrb	r1, [r6, #0]
 800b37e:	1c75      	adds	r5, r6, #1
 800b380:	3930      	subs	r1, #48	; 0x30
 800b382:	2909      	cmp	r1, #9
 800b384:	d903      	bls.n	800b38e <_vfiprintf_r+0x1d2>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0c5      	beq.n	800b316 <_vfiprintf_r+0x15a>
 800b38a:	9209      	str	r2, [sp, #36]	; 0x24
 800b38c:	e7c3      	b.n	800b316 <_vfiprintf_r+0x15a>
 800b38e:	4342      	muls	r2, r0
 800b390:	002e      	movs	r6, r5
 800b392:	2301      	movs	r3, #1
 800b394:	1852      	adds	r2, r2, r1
 800b396:	e7f1      	b.n	800b37c <_vfiprintf_r+0x1c0>
 800b398:	aa07      	add	r2, sp, #28
 800b39a:	9200      	str	r2, [sp, #0]
 800b39c:	0021      	movs	r1, r4
 800b39e:	003a      	movs	r2, r7
 800b3a0:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <_vfiprintf_r+0x234>)
 800b3a2:	9803      	ldr	r0, [sp, #12]
 800b3a4:	f7fd fcd8 	bl	8008d58 <_printf_float>
 800b3a8:	9004      	str	r0, [sp, #16]
 800b3aa:	9b04      	ldr	r3, [sp, #16]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	d1d3      	bne.n	800b358 <_vfiprintf_r+0x19c>
 800b3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3b2:	07db      	lsls	r3, r3, #31
 800b3b4:	d405      	bmi.n	800b3c2 <_vfiprintf_r+0x206>
 800b3b6:	89bb      	ldrh	r3, [r7, #12]
 800b3b8:	059b      	lsls	r3, r3, #22
 800b3ba:	d402      	bmi.n	800b3c2 <_vfiprintf_r+0x206>
 800b3bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3be:	f7fe fa37 	bl	8009830 <__retarget_lock_release_recursive>
 800b3c2:	89bb      	ldrh	r3, [r7, #12]
 800b3c4:	065b      	lsls	r3, r3, #25
 800b3c6:	d500      	bpl.n	800b3ca <_vfiprintf_r+0x20e>
 800b3c8:	e71d      	b.n	800b206 <_vfiprintf_r+0x4a>
 800b3ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3cc:	e71d      	b.n	800b20a <_vfiprintf_r+0x4e>
 800b3ce:	aa07      	add	r2, sp, #28
 800b3d0:	9200      	str	r2, [sp, #0]
 800b3d2:	0021      	movs	r1, r4
 800b3d4:	003a      	movs	r2, r7
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <_vfiprintf_r+0x234>)
 800b3d8:	9803      	ldr	r0, [sp, #12]
 800b3da:	f7fd ff83 	bl	80092e4 <_printf_i>
 800b3de:	e7e3      	b.n	800b3a8 <_vfiprintf_r+0x1ec>
 800b3e0:	0800bb8b 	.word	0x0800bb8b
 800b3e4:	0800bb91 	.word	0x0800bb91
 800b3e8:	0800bb95 	.word	0x0800bb95
 800b3ec:	08008d59 	.word	0x08008d59
 800b3f0:	0800b199 	.word	0x0800b199

0800b3f4 <__swbuf_r>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	0006      	movs	r6, r0
 800b3f8:	000d      	movs	r5, r1
 800b3fa:	0014      	movs	r4, r2
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x16>
 800b400:	6a03      	ldr	r3, [r0, #32]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <__swbuf_r+0x16>
 800b406:	f7fe f90d 	bl	8009624 <__sinit>
 800b40a:	69a3      	ldr	r3, [r4, #24]
 800b40c:	60a3      	str	r3, [r4, #8]
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	071b      	lsls	r3, r3, #28
 800b412:	d528      	bpl.n	800b466 <__swbuf_r+0x72>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d025      	beq.n	800b466 <__swbuf_r+0x72>
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	b2ef      	uxtb	r7, r5
 800b420:	1ac0      	subs	r0, r0, r3
 800b422:	6963      	ldr	r3, [r4, #20]
 800b424:	b2ed      	uxtb	r5, r5
 800b426:	4283      	cmp	r3, r0
 800b428:	dc05      	bgt.n	800b436 <__swbuf_r+0x42>
 800b42a:	0021      	movs	r1, r4
 800b42c:	0030      	movs	r0, r6
 800b42e:	f7ff fdd5 	bl	800afdc <_fflush_r>
 800b432:	2800      	cmp	r0, #0
 800b434:	d11d      	bne.n	800b472 <__swbuf_r+0x7e>
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	3001      	adds	r0, #1
 800b43a:	3b01      	subs	r3, #1
 800b43c:	60a3      	str	r3, [r4, #8]
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	6022      	str	r2, [r4, #0]
 800b444:	701f      	strb	r7, [r3, #0]
 800b446:	6963      	ldr	r3, [r4, #20]
 800b448:	4283      	cmp	r3, r0
 800b44a:	d004      	beq.n	800b456 <__swbuf_r+0x62>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	07db      	lsls	r3, r3, #31
 800b450:	d507      	bpl.n	800b462 <__swbuf_r+0x6e>
 800b452:	2d0a      	cmp	r5, #10
 800b454:	d105      	bne.n	800b462 <__swbuf_r+0x6e>
 800b456:	0021      	movs	r1, r4
 800b458:	0030      	movs	r0, r6
 800b45a:	f7ff fdbf 	bl	800afdc <_fflush_r>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d107      	bne.n	800b472 <__swbuf_r+0x7e>
 800b462:	0028      	movs	r0, r5
 800b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b466:	0021      	movs	r1, r4
 800b468:	0030      	movs	r0, r6
 800b46a:	f000 f805 	bl	800b478 <__swsetup_r>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d0d3      	beq.n	800b41a <__swbuf_r+0x26>
 800b472:	2501      	movs	r5, #1
 800b474:	426d      	negs	r5, r5
 800b476:	e7f4      	b.n	800b462 <__swbuf_r+0x6e>

0800b478 <__swsetup_r>:
 800b478:	4b30      	ldr	r3, [pc, #192]	; (800b53c <__swsetup_r+0xc4>)
 800b47a:	b570      	push	{r4, r5, r6, lr}
 800b47c:	0005      	movs	r5, r0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	000c      	movs	r4, r1
 800b482:	2800      	cmp	r0, #0
 800b484:	d004      	beq.n	800b490 <__swsetup_r+0x18>
 800b486:	6a03      	ldr	r3, [r0, #32]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <__swsetup_r+0x18>
 800b48c:	f7fe f8ca 	bl	8009624 <__sinit>
 800b490:	230c      	movs	r3, #12
 800b492:	5ee2      	ldrsh	r2, [r4, r3]
 800b494:	b293      	uxth	r3, r2
 800b496:	0711      	lsls	r1, r2, #28
 800b498:	d423      	bmi.n	800b4e2 <__swsetup_r+0x6a>
 800b49a:	06d9      	lsls	r1, r3, #27
 800b49c:	d407      	bmi.n	800b4ae <__swsetup_r+0x36>
 800b49e:	2309      	movs	r3, #9
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	3337      	adds	r3, #55	; 0x37
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	4240      	negs	r0, r0
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
 800b4ae:	075b      	lsls	r3, r3, #29
 800b4b0:	d513      	bpl.n	800b4da <__swsetup_r+0x62>
 800b4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b4:	2900      	cmp	r1, #0
 800b4b6:	d008      	beq.n	800b4ca <__swsetup_r+0x52>
 800b4b8:	0023      	movs	r3, r4
 800b4ba:	3344      	adds	r3, #68	; 0x44
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d002      	beq.n	800b4c6 <__swsetup_r+0x4e>
 800b4c0:	0028      	movs	r0, r5
 800b4c2:	f7ff f85f 	bl	800a584 <_free_r>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4ca:	2224      	movs	r2, #36	; 0x24
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	4393      	bics	r3, r2
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	2308      	movs	r3, #8
 800b4dc:	89a2      	ldrh	r2, [r4, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10b      	bne.n	800b500 <__swsetup_r+0x88>
 800b4e8:	21a0      	movs	r1, #160	; 0xa0
 800b4ea:	2280      	movs	r2, #128	; 0x80
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	0089      	lsls	r1, r1, #2
 800b4f0:	0092      	lsls	r2, r2, #2
 800b4f2:	400b      	ands	r3, r1
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d003      	beq.n	800b500 <__swsetup_r+0x88>
 800b4f8:	0021      	movs	r1, r4
 800b4fa:	0028      	movs	r0, r5
 800b4fc:	f000 f892 	bl	800b624 <__smakebuf_r>
 800b500:	220c      	movs	r2, #12
 800b502:	5ea3      	ldrsh	r3, [r4, r2]
 800b504:	2001      	movs	r0, #1
 800b506:	001a      	movs	r2, r3
 800b508:	b299      	uxth	r1, r3
 800b50a:	4002      	ands	r2, r0
 800b50c:	4203      	tst	r3, r0
 800b50e:	d00f      	beq.n	800b530 <__swsetup_r+0xb8>
 800b510:	2200      	movs	r2, #0
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6962      	ldr	r2, [r4, #20]
 800b516:	4252      	negs	r2, r2
 800b518:	61a2      	str	r2, [r4, #24]
 800b51a:	2000      	movs	r0, #0
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	4282      	cmp	r2, r0
 800b520:	d1c4      	bne.n	800b4ac <__swsetup_r+0x34>
 800b522:	0609      	lsls	r1, r1, #24
 800b524:	d5c2      	bpl.n	800b4ac <__swsetup_r+0x34>
 800b526:	2240      	movs	r2, #64	; 0x40
 800b528:	4313      	orrs	r3, r2
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	3801      	subs	r0, #1
 800b52e:	e7bd      	b.n	800b4ac <__swsetup_r+0x34>
 800b530:	0788      	lsls	r0, r1, #30
 800b532:	d400      	bmi.n	800b536 <__swsetup_r+0xbe>
 800b534:	6962      	ldr	r2, [r4, #20]
 800b536:	60a2      	str	r2, [r4, #8]
 800b538:	e7ef      	b.n	800b51a <__swsetup_r+0xa2>
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	20000064 	.word	0x20000064

0800b540 <_raise_r>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	0004      	movs	r4, r0
 800b544:	000d      	movs	r5, r1
 800b546:	291f      	cmp	r1, #31
 800b548:	d904      	bls.n	800b554 <_raise_r+0x14>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	2001      	movs	r0, #1
 800b550:	4240      	negs	r0, r0
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <_raise_r+0x24>
 800b55a:	008a      	lsls	r2, r1, #2
 800b55c:	189b      	adds	r3, r3, r2
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	2a00      	cmp	r2, #0
 800b562:	d108      	bne.n	800b576 <_raise_r+0x36>
 800b564:	0020      	movs	r0, r4
 800b566:	f000 f831 	bl	800b5cc <_getpid_r>
 800b56a:	002a      	movs	r2, r5
 800b56c:	0001      	movs	r1, r0
 800b56e:	0020      	movs	r0, r4
 800b570:	f000 f81a 	bl	800b5a8 <_kill_r>
 800b574:	e7ed      	b.n	800b552 <_raise_r+0x12>
 800b576:	2000      	movs	r0, #0
 800b578:	2a01      	cmp	r2, #1
 800b57a:	d0ea      	beq.n	800b552 <_raise_r+0x12>
 800b57c:	1c51      	adds	r1, r2, #1
 800b57e:	d103      	bne.n	800b588 <_raise_r+0x48>
 800b580:	2316      	movs	r3, #22
 800b582:	3001      	adds	r0, #1
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	e7e4      	b.n	800b552 <_raise_r+0x12>
 800b588:	2400      	movs	r4, #0
 800b58a:	0028      	movs	r0, r5
 800b58c:	601c      	str	r4, [r3, #0]
 800b58e:	4790      	blx	r2
 800b590:	0020      	movs	r0, r4
 800b592:	e7de      	b.n	800b552 <_raise_r+0x12>

0800b594 <raise>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <raise+0x10>)
 800b598:	0001      	movs	r1, r0
 800b59a:	6818      	ldr	r0, [r3, #0]
 800b59c:	f7ff ffd0 	bl	800b540 <_raise_r>
 800b5a0:	bd10      	pop	{r4, pc}
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	20000064 	.word	0x20000064

0800b5a8 <_kill_r>:
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	b570      	push	{r4, r5, r6, lr}
 800b5ac:	4d06      	ldr	r5, [pc, #24]	; (800b5c8 <_kill_r+0x20>)
 800b5ae:	0004      	movs	r4, r0
 800b5b0:	0008      	movs	r0, r1
 800b5b2:	0011      	movs	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f8 fded 	bl	8004194 <_kill>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d103      	bne.n	800b5c6 <_kill_r+0x1e>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d000      	beq.n	800b5c6 <_kill_r+0x1e>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	200005d0 	.word	0x200005d0

0800b5cc <_getpid_r>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	f7f8 fddb 	bl	8004188 <_getpid>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <__swhatbuf_r>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	000e      	movs	r6, r1
 800b5d8:	001d      	movs	r5, r3
 800b5da:	230e      	movs	r3, #14
 800b5dc:	5ec9      	ldrsh	r1, [r1, r3]
 800b5de:	0014      	movs	r4, r2
 800b5e0:	b096      	sub	sp, #88	; 0x58
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	da0c      	bge.n	800b600 <__swhatbuf_r+0x2c>
 800b5e6:	89b2      	ldrh	r2, [r6, #12]
 800b5e8:	2380      	movs	r3, #128	; 0x80
 800b5ea:	0011      	movs	r1, r2
 800b5ec:	4019      	ands	r1, r3
 800b5ee:	421a      	tst	r2, r3
 800b5f0:	d013      	beq.n	800b61a <__swhatbuf_r+0x46>
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	3b40      	subs	r3, #64	; 0x40
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	6029      	str	r1, [r5, #0]
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	b016      	add	sp, #88	; 0x58
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	466a      	mov	r2, sp
 800b602:	f000 f84d 	bl	800b6a0 <_fstat_r>
 800b606:	2800      	cmp	r0, #0
 800b608:	dbed      	blt.n	800b5e6 <__swhatbuf_r+0x12>
 800b60a:	23f0      	movs	r3, #240	; 0xf0
 800b60c:	9901      	ldr	r1, [sp, #4]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	4019      	ands	r1, r3
 800b612:	4b03      	ldr	r3, [pc, #12]	; (800b620 <__swhatbuf_r+0x4c>)
 800b614:	18c9      	adds	r1, r1, r3
 800b616:	424b      	negs	r3, r1
 800b618:	4159      	adcs	r1, r3
 800b61a:	2380      	movs	r3, #128	; 0x80
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	e7ea      	b.n	800b5f6 <__swhatbuf_r+0x22>
 800b620:	ffffe000 	.word	0xffffe000

0800b624 <__smakebuf_r>:
 800b624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b626:	2602      	movs	r6, #2
 800b628:	898b      	ldrh	r3, [r1, #12]
 800b62a:	0005      	movs	r5, r0
 800b62c:	000c      	movs	r4, r1
 800b62e:	4233      	tst	r3, r6
 800b630:	d006      	beq.n	800b640 <__smakebuf_r+0x1c>
 800b632:	0023      	movs	r3, r4
 800b634:	3347      	adds	r3, #71	; 0x47
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	6123      	str	r3, [r4, #16]
 800b63a:	2301      	movs	r3, #1
 800b63c:	6163      	str	r3, [r4, #20]
 800b63e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b640:	466a      	mov	r2, sp
 800b642:	ab01      	add	r3, sp, #4
 800b644:	f7ff ffc6 	bl	800b5d4 <__swhatbuf_r>
 800b648:	9900      	ldr	r1, [sp, #0]
 800b64a:	0007      	movs	r7, r0
 800b64c:	0028      	movs	r0, r5
 800b64e:	f7ff f80f 	bl	800a670 <_malloc_r>
 800b652:	2800      	cmp	r0, #0
 800b654:	d108      	bne.n	800b668 <__smakebuf_r+0x44>
 800b656:	220c      	movs	r2, #12
 800b658:	5ea3      	ldrsh	r3, [r4, r2]
 800b65a:	059a      	lsls	r2, r3, #22
 800b65c:	d4ef      	bmi.n	800b63e <__smakebuf_r+0x1a>
 800b65e:	2203      	movs	r2, #3
 800b660:	4393      	bics	r3, r2
 800b662:	431e      	orrs	r6, r3
 800b664:	81a6      	strh	r6, [r4, #12]
 800b666:	e7e4      	b.n	800b632 <__smakebuf_r+0xe>
 800b668:	2380      	movs	r3, #128	; 0x80
 800b66a:	89a2      	ldrh	r2, [r4, #12]
 800b66c:	6020      	str	r0, [r4, #0]
 800b66e:	4313      	orrs	r3, r2
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	9b00      	ldr	r3, [sp, #0]
 800b674:	6120      	str	r0, [r4, #16]
 800b676:	6163      	str	r3, [r4, #20]
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00c      	beq.n	800b698 <__smakebuf_r+0x74>
 800b67e:	0028      	movs	r0, r5
 800b680:	230e      	movs	r3, #14
 800b682:	5ee1      	ldrsh	r1, [r4, r3]
 800b684:	f000 f81e 	bl	800b6c4 <_isatty_r>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d005      	beq.n	800b698 <__smakebuf_r+0x74>
 800b68c:	2303      	movs	r3, #3
 800b68e:	89a2      	ldrh	r2, [r4, #12]
 800b690:	439a      	bics	r2, r3
 800b692:	3b02      	subs	r3, #2
 800b694:	4313      	orrs	r3, r2
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	433b      	orrs	r3, r7
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	e7ce      	b.n	800b63e <__smakebuf_r+0x1a>

0800b6a0 <_fstat_r>:
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	4d06      	ldr	r5, [pc, #24]	; (800b6c0 <_fstat_r+0x20>)
 800b6a6:	0004      	movs	r4, r0
 800b6a8:	0008      	movs	r0, r1
 800b6aa:	0011      	movs	r1, r2
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	f7f8 fdd0 	bl	8004252 <_fstat>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	d103      	bne.n	800b6be <_fstat_r+0x1e>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d000      	beq.n	800b6be <_fstat_r+0x1e>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
 800b6c0:	200005d0 	.word	0x200005d0

0800b6c4 <_isatty_r>:
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	b570      	push	{r4, r5, r6, lr}
 800b6c8:	4d06      	ldr	r5, [pc, #24]	; (800b6e4 <_isatty_r+0x20>)
 800b6ca:	0004      	movs	r4, r0
 800b6cc:	0008      	movs	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7f8 fdcd 	bl	800426e <_isatty>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d103      	bne.n	800b6e0 <_isatty_r+0x1c>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d000      	beq.n	800b6e0 <_isatty_r+0x1c>
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	bd70      	pop	{r4, r5, r6, pc}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	200005d0 	.word	0x200005d0

0800b6e8 <_init>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ee:	bc08      	pop	{r3}
 800b6f0:	469e      	mov	lr, r3
 800b6f2:	4770      	bx	lr

0800b6f4 <_fini>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fa:	bc08      	pop	{r3}
 800b6fc:	469e      	mov	lr, r3
 800b6fe:	4770      	bx	lr
