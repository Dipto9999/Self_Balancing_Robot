
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bffc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800c0c0  0800c0c0  0001c0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c574  0800c574  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c574  0800c574  0001c574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c57c  0800c57c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001d4  0800c758  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800c758  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154da  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309a  00000000  00000000  00035719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  000387b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6f  00000000  00000000  00039a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fbf  00000000  00000000  0003a8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001862e  00000000  00000000  0004f86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078ad3  00000000  00000000  00067e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054d8  00000000  00000000  000e0970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e5e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c0a4 	.word	0x0800c0a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800c0a4 	.word	0x0800c0a4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa8f 	bl	8001960 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9df 	bl	8001810 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa81 	bl	8001960 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa77 	bl	8001960 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa07 	bl	8001894 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9fd 	bl	8001894 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5f 	bl	8000984 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa6b 	bl	80009d0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa61 	bl	80009d0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 f932 	bl	8002840 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 f92d 	bl	8002840 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	464f      	mov	r7, r9
 8000754:	4646      	mov	r6, r8
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0047      	lsls	r7, r0, #1
 800075e:	1c0c      	adds	r4, r1, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	0e3f      	lsrs	r7, r7, #24
 8000764:	0fc6      	lsrs	r6, r0, #31
 8000766:	2f00      	cmp	r7, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0x1c>
 800076a:	e06f      	b.n	800084c <__aeabi_fdiv+0xfc>
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x22>
 8000770:	e074      	b.n	800085c <__aeabi_fdiv+0x10c>
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	00ed      	lsls	r5, r5, #3
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4315      	orrs	r5, r2
 8000780:	3f7f      	subs	r7, #127	; 0x7f
 8000782:	0263      	lsls	r3, r4, #9
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4698      	mov	r8, r3
 8000788:	0063      	lsls	r3, r4, #1
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0fe4      	lsrs	r4, r4, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d04d      	beq.n	800082e <__aeabi_fdiv+0xde>
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d045      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 8000796:	4642      	mov	r2, r8
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	4311      	orrs	r1, r2
 80007a0:	4688      	mov	r8, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	3b7f      	subs	r3, #127	; 0x7f
 80007a6:	0031      	movs	r1, r6
 80007a8:	1aff      	subs	r7, r7, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d900      	bls.n	80007b6 <__aeabi_fdiv+0x66>
 80007b4:	e0b8      	b.n	8000928 <__aeabi_fdiv+0x1d8>
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <__aeabi_fdiv+0x228>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4698      	mov	r8, r3
 80007c2:	0026      	movs	r6, r4
 80007c4:	4645      	mov	r5, r8
 80007c6:	4692      	mov	sl, r2
 80007c8:	4653      	mov	r3, sl
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fdiv+0x80>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fdiv+0x19c>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fdiv+0x86>
 80007d4:	e0a1      	b.n	800091a <__aeabi_fdiv+0x1ca>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d018      	beq.n	800080c <__aeabi_fdiv+0xbc>
 80007da:	003b      	movs	r3, r7
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd6d      	ble.n	80008be <__aeabi_fdiv+0x16e>
 80007e2:	076a      	lsls	r2, r5, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007e6:	220f      	movs	r2, #15
 80007e8:	402a      	ands	r2, r5
 80007ea:	2a04      	cmp	r2, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	3504      	adds	r5, #4
 80007f0:	012a      	lsls	r2, r5, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0xac>
 80007f4:	4b61      	ldr	r3, [pc, #388]	; (800097c <__aeabi_fdiv+0x22c>)
 80007f6:	401d      	ands	r5, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3380      	adds	r3, #128	; 0x80
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	dd00      	ble.n	8000802 <__aeabi_fdiv+0xb2>
 8000800:	e074      	b.n	80008ec <__aeabi_fdiv+0x19c>
 8000802:	01aa      	lsls	r2, r5, #6
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e002      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800080a:	000e      	movs	r6, r1
 800080c:	2000      	movs	r0, #0
 800080e:	2200      	movs	r2, #0
 8000810:	05c0      	lsls	r0, r0, #23
 8000812:	07f6      	lsls	r6, r6, #31
 8000814:	4310      	orrs	r0, r2
 8000816:	4330      	orrs	r0, r6
 8000818:	bce0      	pop	{r5, r6, r7}
 800081a:	46ba      	mov	sl, r7
 800081c:	46b1      	mov	r9, r6
 800081e:	46a8      	mov	r8, r5
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0x158>
 8000828:	2202      	movs	r2, #2
 800082a:	3fff      	subs	r7, #255	; 0xff
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0xe6>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0x140>
 8000834:	2201      	movs	r2, #1
 8000836:	0031      	movs	r1, r6
 8000838:	464b      	mov	r3, r9
 800083a:	4061      	eors	r1, r4
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0x166>
 8000844:	484e      	ldr	r0, [pc, #312]	; (8000980 <__aeabi_fdiv+0x230>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2d00      	cmp	r5, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0x128>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0x32>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0x11c>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e78a      	b.n	8000782 <__aeabi_fdiv+0x32>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	; 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e784      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000878:	0028      	movs	r0, r5
 800087a:	f001 ffc3 	bl	8002804 <__clzsi2>
 800087e:	2776      	movs	r7, #118	; 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409d      	lsls	r5, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e778      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000890:	4640      	mov	r0, r8
 8000892:	f001 ffb7 	bl	8002804 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	; 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	4690      	mov	r8, r2
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	e77e      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	33fc      	adds	r3, #252	; 0xfc
 80008b2:	2203      	movs	r2, #3
 80008b4:	e777      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008b6:	000e      	movs	r6, r1
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	e7a8      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008be:	2201      	movs	r2, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b1b      	cmp	r3, #27
 80008c4:	dca2      	bgt.n	800080c <__aeabi_fdiv+0xbc>
 80008c6:	379e      	adds	r7, #158	; 0x9e
 80008c8:	002a      	movs	r2, r5
 80008ca:	40bd      	lsls	r5, r7
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	1e6b      	subs	r3, r5, #1
 80008d0:	419d      	sbcs	r5, r3
 80008d2:	4315      	orrs	r5, r2
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008d8:	220f      	movs	r2, #15
 80008da:	402a      	ands	r2, r5
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008e0:	3504      	adds	r5, #4
 80008e2:	016a      	lsls	r2, r5, #5
 80008e4:	d544      	bpl.n	8000970 <__aeabi_fdiv+0x220>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	e791      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	e78e      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	2600      	movs	r6, #0
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	e789      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	4215      	tst	r5, r2
 8000906:	d008      	beq.n	800091a <__aeabi_fdiv+0x1ca>
 8000908:	4643      	mov	r3, r8
 800090a:	4213      	tst	r3, r2
 800090c:	d105      	bne.n	800091a <__aeabi_fdiv+0x1ca>
 800090e:	431a      	orrs	r2, r3
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0026      	movs	r6, r4
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e77a      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	432a      	orrs	r2, r5
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e773      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000928:	4642      	mov	r2, r8
 800092a:	016b      	lsls	r3, r5, #5
 800092c:	0155      	lsls	r5, r2, #5
 800092e:	42ab      	cmp	r3, r5
 8000930:	d21a      	bcs.n	8000968 <__aeabi_fdiv+0x218>
 8000932:	201b      	movs	r0, #27
 8000934:	2200      	movs	r2, #0
 8000936:	3f01      	subs	r7, #1
 8000938:	2601      	movs	r6, #1
 800093a:	001c      	movs	r4, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2c00      	cmp	r4, #0
 8000942:	db01      	blt.n	8000948 <__aeabi_fdiv+0x1f8>
 8000944:	429d      	cmp	r5, r3
 8000946:	d801      	bhi.n	800094c <__aeabi_fdiv+0x1fc>
 8000948:	1b5b      	subs	r3, r3, r5
 800094a:	4332      	orrs	r2, r6
 800094c:	3801      	subs	r0, #1
 800094e:	2800      	cmp	r0, #0
 8000950:	d1f3      	bne.n	800093a <__aeabi_fdiv+0x1ea>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	4183      	sbcs	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	001d      	movs	r5, r3
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	000e      	movs	r6, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd00      	ble.n	8000966 <__aeabi_fdiv+0x216>
 8000964:	e73d      	b.n	80007e2 <__aeabi_fdiv+0x92>
 8000966:	e7aa      	b.n	80008be <__aeabi_fdiv+0x16e>
 8000968:	201a      	movs	r0, #26
 800096a:	2201      	movs	r2, #1
 800096c:	1b5b      	subs	r3, r3, r5
 800096e:	e7e3      	b.n	8000938 <__aeabi_fdiv+0x1e8>
 8000970:	01aa      	lsls	r2, r5, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a52      	lsrs	r2, r2, #9
 8000976:	e74b      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000978:	0800c0d4 	.word	0x0800c0d4
 800097c:	f7ffffff 	.word	0xf7ffffff
 8000980:	0800c114 	.word	0x0800c114

08000984 <__eqsf2>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0245      	lsls	r5, r0, #9
 800098a:	024e      	lsls	r6, r1, #9
 800098c:	004c      	lsls	r4, r1, #1
 800098e:	0fc3      	lsrs	r3, r0, #31
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	2001      	movs	r0, #1
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0a76      	lsrs	r6, r6, #9
 8000998:	0e24      	lsrs	r4, r4, #24
 800099a:	0fc9      	lsrs	r1, r1, #31
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d006      	beq.n	80009ae <__eqsf2+0x2a>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d003      	beq.n	80009ac <__eqsf2+0x28>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d101      	bne.n	80009ac <__eqsf2+0x28>
 80009a8:	42b5      	cmp	r5, r6
 80009aa:	d006      	beq.n	80009ba <__eqsf2+0x36>
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1fc      	bne.n	80009ac <__eqsf2+0x28>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d1fa      	bne.n	80009ac <__eqsf2+0x28>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1f8      	bne.n	80009ac <__eqsf2+0x28>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d006      	beq.n	80009cc <__eqsf2+0x48>
 80009be:	2001      	movs	r0, #1
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d1f3      	bne.n	80009ac <__eqsf2+0x28>
 80009c4:	0028      	movs	r0, r5
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	e7ef      	b.n	80009ac <__eqsf2+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ed      	b.n	80009ac <__eqsf2+0x28>

080009d0 <__gesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d01b      	beq.n	8000a22 <__gesf2+0x52>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00e      	beq.n	8000a0c <__gesf2+0x3c>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11b      	bne.n	8000a2a <__gesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d101      	bne.n	80009fa <__gesf2+0x2a>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x64>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d00c      	beq.n	8000a18 <__gesf2+0x48>
 80009fe:	4283      	cmp	r3, r0
 8000a00:	d01c      	beq.n	8000a3c <__gesf2+0x6c>
 8000a02:	2102      	movs	r1, #2
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4008      	ands	r0, r1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d122      	bne.n	8000a56 <__gesf2+0x86>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1f4      	bne.n	80009fe <__gesf2+0x2e>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d1f2      	bne.n	80009fe <__gesf2+0x2e>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f6      	bne.n	8000a0a <__gesf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	4240      	negs	r0, r0
 8000a20:	e7f3      	b.n	8000a0a <__gesf2+0x3a>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d117      	bne.n	8000a56 <__gesf2+0x86>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d0f0      	beq.n	8000a0c <__gesf2+0x3c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1e7      	bne.n	80009fe <__gesf2+0x2e>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1e5      	bne.n	80009fe <__gesf2+0x2e>
 8000a32:	e7e6      	b.n	8000a02 <__gesf2+0x32>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0e7      	beq.n	8000a0a <__gesf2+0x3a>
 8000a3a:	e7e2      	b.n	8000a02 <__gesf2+0x32>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__gesf2+0x7c>
 8000a40:	dbea      	blt.n	8000a18 <__gesf2+0x48>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__gesf2+0x7c>
 8000a46:	d3e7      	bcc.n	8000a18 <__gesf2+0x48>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7de      	b.n	8000a0a <__gesf2+0x3a>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7d9      	b.n	8000a0a <__gesf2+0x3a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	4240      	negs	r0, r0
 8000a5a:	e7d6      	b.n	8000a0a <__gesf2+0x3a>

08000a5c <__lesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d00b      	beq.n	8000a8e <__lesf2+0x32>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00d      	beq.n	8000a96 <__lesf2+0x3a>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11f      	bne.n	8000abe <__lesf2+0x62>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d116      	bne.n	8000ab0 <__lesf2+0x54>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d114      	bne.n	8000ab0 <__lesf2+0x54>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d010      	beq.n	8000aae <__lesf2+0x52>
 8000a8c:	e009      	b.n	8000aa2 <__lesf2+0x46>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d10c      	bne.n	8000aac <__lesf2+0x50>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d113      	bne.n	8000abe <__lesf2+0x62>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d108      	bne.n	8000aac <__lesf2+0x50>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d008      	beq.n	8000ab0 <__lesf2+0x54>
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d012      	beq.n	8000ac8 <__lesf2+0x6c>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	1e58      	subs	r0, r3, #1
 8000aa6:	4008      	ands	r0, r1
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e000      	b.n	8000aae <__lesf2+0x52>
 8000aac:	2002      	movs	r0, #2
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d1f4      	bne.n	8000a9e <__lesf2+0x42>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1fa      	bne.n	8000aae <__lesf2+0x52>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4240      	negs	r0, r0
 8000abc:	e7f7      	b.n	8000aae <__lesf2+0x52>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1ed      	bne.n	8000a9e <__lesf2+0x42>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1eb      	bne.n	8000a9e <__lesf2+0x42>
 8000ac6:	e7ec      	b.n	8000aa2 <__lesf2+0x46>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__lesf2+0x7c>
 8000acc:	dbf2      	blt.n	8000ab4 <__lesf2+0x58>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__lesf2+0x7c>
 8000ad2:	d3ef      	bcc.n	8000ab4 <__lesf2+0x58>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ea      	b.n	8000aae <__lesf2+0x52>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e5      	b.n	8000aae <__lesf2+0x52>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__aeabi_ui2f>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	1e04      	subs	r4, r0, #0
 8000ae8:	d00e      	beq.n	8000b08 <__aeabi_ui2f+0x24>
 8000aea:	f001 fe8b 	bl	8002804 <__clzsi2>
 8000aee:	239e      	movs	r3, #158	; 0x9e
 8000af0:	0001      	movs	r1, r0
 8000af2:	1a1b      	subs	r3, r3, r0
 8000af4:	2b96      	cmp	r3, #150	; 0x96
 8000af6:	dc0c      	bgt.n	8000b12 <__aeabi_ui2f+0x2e>
 8000af8:	2808      	cmp	r0, #8
 8000afa:	d02c      	beq.n	8000b56 <__aeabi_ui2f+0x72>
 8000afc:	3908      	subs	r1, #8
 8000afe:	408c      	lsls	r4, r1
 8000b00:	0264      	lsls	r4, r4, #9
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	e001      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	05c0      	lsls	r0, r0, #23
 8000b0e:	4320      	orrs	r0, r4
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b99      	cmp	r3, #153	; 0x99
 8000b14:	dd0a      	ble.n	8000b2c <__aeabi_ui2f+0x48>
 8000b16:	0002      	movs	r2, r0
 8000b18:	0020      	movs	r0, r4
 8000b1a:	321b      	adds	r2, #27
 8000b1c:	4090      	lsls	r0, r2
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1e50      	subs	r0, r2, #1
 8000b22:	4182      	sbcs	r2, r0
 8000b24:	2005      	movs	r0, #5
 8000b26:	1a40      	subs	r0, r0, r1
 8000b28:	40c4      	lsrs	r4, r0
 8000b2a:	4314      	orrs	r4, r2
 8000b2c:	2905      	cmp	r1, #5
 8000b2e:	dc16      	bgt.n	8000b5e <__aeabi_ui2f+0x7a>
 8000b30:	0022      	movs	r2, r4
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b34:	4002      	ands	r2, r0
 8000b36:	0765      	lsls	r5, r4, #29
 8000b38:	d009      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	402c      	ands	r4, r5
 8000b3e:	2c04      	cmp	r4, #4
 8000b40:	d005      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0154      	lsls	r4, r2, #5
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b48:	239f      	movs	r3, #159	; 0x9f
 8000b4a:	4002      	ands	r2, r0
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	0a54      	lsrs	r4, r2, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e7da      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	2096      	movs	r0, #150	; 0x96
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	e7d6      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b5e:	1f4a      	subs	r2, r1, #5
 8000b60:	4094      	lsls	r4, r2
 8000b62:	0022      	movs	r2, r4
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b66:	4002      	ands	r2, r0
 8000b68:	0765      	lsls	r5, r4, #29
 8000b6a:	d0f0      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b6c:	e7e5      	b.n	8000b3a <__aeabi_ui2f+0x56>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fbffffff 	.word	0xfbffffff

08000b74 <__aeabi_dadd>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0004      	movs	r4, r0
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	001f      	movs	r7, r3
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0010      	movs	r0, r2
 8000b86:	004e      	lsls	r6, r1, #1
 8000b88:	0a5b      	lsrs	r3, r3, #9
 8000b8a:	0fcd      	lsrs	r5, r1, #31
 8000b8c:	0f61      	lsrs	r1, r4, #29
 8000b8e:	007a      	lsls	r2, r7, #1
 8000b90:	4319      	orrs	r1, r3
 8000b92:	00e3      	lsls	r3, r4, #3
 8000b94:	033c      	lsls	r4, r7, #12
 8000b96:	0fff      	lsrs	r7, r7, #31
 8000b98:	46bc      	mov	ip, r7
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	0f47      	lsrs	r7, r0, #29
 8000b9e:	4327      	orrs	r7, r4
 8000ba0:	0d76      	lsrs	r6, r6, #21
 8000ba2:	0d52      	lsrs	r2, r2, #21
 8000ba4:	00c0      	lsls	r0, r0, #3
 8000ba6:	46b9      	mov	r9, r7
 8000ba8:	4680      	mov	r8, r0
 8000baa:	1ab7      	subs	r7, r6, r2
 8000bac:	4565      	cmp	r5, ip
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x3e>
 8000bb0:	e09b      	b.n	8000cea <__aeabi_dadd+0x176>
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_dadd+0x44>
 8000bb6:	e084      	b.n	8000cc2 <__aeabi_dadd+0x14e>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x4a>
 8000bbc:	e0be      	b.n	8000d3c <__aeabi_dadd+0x1c8>
 8000bbe:	4ac8      	ldr	r2, [pc, #800]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000bc0:	4296      	cmp	r6, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x52>
 8000bc4:	e124      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0412      	lsls	r2, r2, #16
 8000bcc:	4314      	orrs	r4, r2
 8000bce:	46a1      	mov	r9, r4
 8000bd0:	2f38      	cmp	r7, #56	; 0x38
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x62>
 8000bd4:	e167      	b.n	8000ea6 <__aeabi_dadd+0x332>
 8000bd6:	2f1f      	cmp	r7, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x68>
 8000bda:	e1d6      	b.n	8000f8a <__aeabi_dadd+0x416>
 8000bdc:	2220      	movs	r2, #32
 8000bde:	464c      	mov	r4, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4094      	lsls	r4, r2
 8000be4:	46a2      	mov	sl, r4
 8000be6:	4644      	mov	r4, r8
 8000be8:	40fc      	lsrs	r4, r7
 8000bea:	0020      	movs	r0, r4
 8000bec:	4654      	mov	r4, sl
 8000bee:	4304      	orrs	r4, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4090      	lsls	r0, r2
 8000bf4:	1e42      	subs	r2, r0, #1
 8000bf6:	4190      	sbcs	r0, r2
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	40fa      	lsrs	r2, r7
 8000bfc:	4304      	orrs	r4, r0
 8000bfe:	1a89      	subs	r1, r1, r2
 8000c00:	1b1c      	subs	r4, r3, r4
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	4192      	sbcs	r2, r2
 8000c06:	4252      	negs	r2, r2
 8000c08:	1a8b      	subs	r3, r1, r2
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_dadd+0xa0>
 8000c12:	e0d4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000c14:	4653      	mov	r3, sl
 8000c16:	025a      	lsls	r2, r3, #9
 8000c18:	0a53      	lsrs	r3, r2, #9
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0xb0>
 8000c22:	e104      	b.n	8000e2e <__aeabi_dadd+0x2ba>
 8000c24:	4650      	mov	r0, sl
 8000c26:	f001 fded 	bl	8002804 <__clzsi2>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0020      	movs	r0, r4
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	4651      	mov	r1, sl
 8000c36:	40d0      	lsrs	r0, r2
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	da00      	bge.n	8000c46 <__aeabi_dadd+0xd2>
 8000c44:	e102      	b.n	8000e4c <__aeabi_dadd+0x2d8>
 8000c46:	1b9b      	subs	r3, r3, r6
 8000c48:	1c59      	adds	r1, r3, #1
 8000c4a:	291f      	cmp	r1, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0xdc>
 8000c4e:	e0a7      	b.n	8000da0 <__aeabi_dadd+0x22c>
 8000c50:	2320      	movs	r3, #32
 8000c52:	0010      	movs	r0, r2
 8000c54:	0026      	movs	r6, r4
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	4098      	lsls	r0, r3
 8000c5c:	40ce      	lsrs	r6, r1
 8000c5e:	40ca      	lsrs	r2, r1
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	4692      	mov	sl, r2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4304      	orrs	r4, r0
 8000c6c:	0763      	lsls	r3, r4, #29
 8000c6e:	d009      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d005      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c78:	1d23      	adds	r3, r4, #4
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	41a4      	sbcs	r4, r4
 8000c7e:	4264      	negs	r4, r4
 8000c80:	44a2      	add	sl, r4
 8000c82:	001c      	movs	r4, r3
 8000c84:	4653      	mov	r3, sl
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_dadd+0x118>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_dadd+0x250>
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000c8e:	3601      	adds	r6, #1
 8000c90:	429e      	cmp	r6, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x122>
 8000c94:	e0b8      	b.n	8000e08 <__aeabi_dadd+0x294>
 8000c96:	4653      	mov	r3, sl
 8000c98:	4992      	ldr	r1, [pc, #584]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000c9a:	08e4      	lsrs	r4, r4, #3
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	0572      	lsls	r2, r6, #21
 8000ca6:	024c      	lsls	r4, r1, #9
 8000ca8:	0b24      	lsrs	r4, r4, #12
 8000caa:	0d52      	lsrs	r2, r2, #21
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	07ed      	lsls	r5, r5, #31
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	432a      	orrs	r2, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	bce0      	pop	{r5, r6, r7}
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	46a8      	mov	r8, r5
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d048      	beq.n	8000d58 <__aeabi_dadd+0x1e4>
 8000cc6:	1b97      	subs	r7, r2, r6
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x15a>
 8000ccc:	e10e      	b.n	8000eec <__aeabi_dadd+0x378>
 8000cce:	000c      	movs	r4, r1
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x162>
 8000cd4:	e1b7      	b.n	8001046 <__aeabi_dadd+0x4d2>
 8000cd6:	1e7c      	subs	r4, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16a>
 8000cdc:	e226      	b.n	800112c <__aeabi_dadd+0x5b8>
 8000cde:	4d80      	ldr	r5, [pc, #512]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000ce0:	42af      	cmp	r7, r5
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x172>
 8000ce4:	e1d5      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ce6:	0027      	movs	r7, r4
 8000ce8:	e107      	b.n	8000efa <__aeabi_dadd+0x386>
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_dadd+0x17c>
 8000cee:	e0b2      	b.n	8000e56 <__aeabi_dadd+0x2e2>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d047      	beq.n	8000d84 <__aeabi_dadd+0x210>
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000cf6:	4296      	cmp	r6, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x188>
 8000cfa:	e089      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	464c      	mov	r4, r9
 8000d00:	0412      	lsls	r2, r2, #16
 8000d02:	4314      	orrs	r4, r2
 8000d04:	46a1      	mov	r9, r4
 8000d06:	2f38      	cmp	r7, #56	; 0x38
 8000d08:	dc6b      	bgt.n	8000de2 <__aeabi_dadd+0x26e>
 8000d0a:	2f1f      	cmp	r7, #31
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dadd+0x19c>
 8000d0e:	e16e      	b.n	8000fee <__aeabi_dadd+0x47a>
 8000d10:	003a      	movs	r2, r7
 8000d12:	4648      	mov	r0, r9
 8000d14:	3a20      	subs	r2, #32
 8000d16:	40d0      	lsrs	r0, r2
 8000d18:	4684      	mov	ip, r0
 8000d1a:	2f20      	cmp	r7, #32
 8000d1c:	d007      	beq.n	8000d2e <__aeabi_dadd+0x1ba>
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	4648      	mov	r0, r9
 8000d22:	1bd2      	subs	r2, r2, r7
 8000d24:	4090      	lsls	r0, r2
 8000d26:	0002      	movs	r2, r0
 8000d28:	4640      	mov	r0, r8
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4640      	mov	r0, r8
 8000d30:	1e42      	subs	r2, r0, #1
 8000d32:	4190      	sbcs	r0, r2
 8000d34:	4662      	mov	r2, ip
 8000d36:	0004      	movs	r4, r0
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	e057      	b.n	8000dec <__aeabi_dadd+0x278>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x1d0>
 8000d42:	e103      	b.n	8000f4c <__aeabi_dadd+0x3d8>
 8000d44:	1e7a      	subs	r2, r7, #1
 8000d46:	2f01      	cmp	r7, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x1d8>
 8000d4a:	e193      	b.n	8001074 <__aeabi_dadd+0x500>
 8000d4c:	4c64      	ldr	r4, [pc, #400]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d4e:	42a7      	cmp	r7, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x1e0>
 8000d52:	e18a      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d54:	0017      	movs	r7, r2
 8000d56:	e73b      	b.n	8000bd0 <__aeabi_dadd+0x5c>
 8000d58:	4c63      	ldr	r4, [pc, #396]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000d5a:	1c72      	adds	r2, r6, #1
 8000d5c:	4222      	tst	r2, r4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dadd+0x1ee>
 8000d60:	e0e0      	b.n	8000f24 <__aeabi_dadd+0x3b0>
 8000d62:	000a      	movs	r2, r1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dadd+0x1f8>
 8000d6a:	e174      	b.n	8001056 <__aeabi_dadd+0x4e2>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x1fe>
 8000d70:	e1d0      	b.n	8001114 <__aeabi_dadd+0x5a0>
 8000d72:	464a      	mov	r2, r9
 8000d74:	4302      	orrs	r2, r0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x206>
 8000d78:	e1e3      	b.n	8001142 <__aeabi_dadd+0x5ce>
 8000d7a:	074a      	lsls	r2, r1, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	e029      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000d84:	464a      	mov	r2, r9
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x218>
 8000d8a:	e17d      	b.n	8001088 <__aeabi_dadd+0x514>
 8000d8c:	1e7a      	subs	r2, r7, #1
 8000d8e:	2f01      	cmp	r7, #1
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x220>
 8000d92:	e0e0      	b.n	8000f56 <__aeabi_dadd+0x3e2>
 8000d94:	4c52      	ldr	r4, [pc, #328]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d96:	42a7      	cmp	r7, r4
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x228>
 8000d9a:	e166      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d9c:	0017      	movs	r7, r2
 8000d9e:	e7b2      	b.n	8000d06 <__aeabi_dadd+0x192>
 8000da0:	0010      	movs	r0, r2
 8000da2:	3b1f      	subs	r3, #31
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	2920      	cmp	r1, #32
 8000da8:	d003      	beq.n	8000db2 <__aeabi_dadd+0x23e>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	0763      	lsls	r3, r4, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x250>
 8000dc2:	e755      	b.n	8000c70 <__aeabi_dadd+0xfc>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	08e3      	lsrs	r3, r4, #3
 8000dc8:	0752      	lsls	r2, r2, #29
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	4652      	mov	r2, sl
 8000dce:	0037      	movs	r7, r6
 8000dd0:	08d1      	lsrs	r1, r2, #3
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000dd4:	4297      	cmp	r7, r2
 8000dd6:	d01f      	beq.n	8000e18 <__aeabi_dadd+0x2a4>
 8000dd8:	0309      	lsls	r1, r1, #12
 8000dda:	057a      	lsls	r2, r7, #21
 8000ddc:	0b0c      	lsrs	r4, r1, #12
 8000dde:	0d52      	lsrs	r2, r2, #21
 8000de0:	e764      	b.n	8000cac <__aeabi_dadd+0x138>
 8000de2:	4642      	mov	r2, r8
 8000de4:	464c      	mov	r4, r9
 8000de6:	4314      	orrs	r4, r2
 8000de8:	1e62      	subs	r2, r4, #1
 8000dea:	4194      	sbcs	r4, r2
 8000dec:	18e4      	adds	r4, r4, r3
 8000dee:	429c      	cmp	r4, r3
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4252      	negs	r2, r2
 8000df4:	4692      	mov	sl, r2
 8000df6:	448a      	add	sl, r1
 8000df8:	4653      	mov	r3, sl
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	d5df      	bpl.n	8000dbe <__aeabi_dadd+0x24a>
 8000dfe:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e00:	3601      	adds	r6, #1
 8000e02:	429e      	cmp	r6, r3
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dadd+0x294>
 8000e06:	e0b3      	b.n	8000f70 <__aeabi_dadd+0x3fc>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e74d      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e10:	074a      	lsls	r2, r1, #29
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	08c9      	lsrs	r1, r1, #3
 8000e18:	001a      	movs	r2, r3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x2ac>
 8000e1e:	e200      	b.n	8001222 <__aeabi_dadd+0x6ae>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	0324      	lsls	r4, r4, #12
 8000e24:	430c      	orrs	r4, r1
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e2a:	0b24      	lsrs	r4, r4, #12
 8000e2c:	e73e      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f001 fce8 	bl	8002804 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3318      	adds	r3, #24
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_dadd+0x2ca>
 8000e3c:	e6f7      	b.n	8000c2e <__aeabi_dadd+0xba>
 8000e3e:	0022      	movs	r2, r4
 8000e40:	3808      	subs	r0, #8
 8000e42:	4082      	lsls	r2, r0
 8000e44:	2400      	movs	r4, #0
 8000e46:	42b3      	cmp	r3, r6
 8000e48:	db00      	blt.n	8000e4c <__aeabi_dadd+0x2d8>
 8000e4a:	e6fc      	b.n	8000c46 <__aeabi_dadd+0xd2>
 8000e4c:	1af6      	subs	r6, r6, r3
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	4692      	mov	sl, r2
 8000e54:	e70a      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d02b      	beq.n	8000eb2 <__aeabi_dadd+0x33e>
 8000e5a:	1b97      	subs	r7, r2, r6
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x2ee>
 8000e60:	e0b8      	b.n	8000fd4 <__aeabi_dadd+0x460>
 8000e62:	4c1f      	ldr	r4, [pc, #124]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e64:	42a2      	cmp	r2, r4
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x2f6>
 8000e68:	e11c      	b.n	80010a4 <__aeabi_dadd+0x530>
 8000e6a:	2480      	movs	r4, #128	; 0x80
 8000e6c:	0424      	lsls	r4, r4, #16
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	2f38      	cmp	r7, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x302>
 8000e74:	e11e      	b.n	80010b4 <__aeabi_dadd+0x540>
 8000e76:	2f1f      	cmp	r7, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x308>
 8000e7a:	e19e      	b.n	80011ba <__aeabi_dadd+0x646>
 8000e7c:	2620      	movs	r6, #32
 8000e7e:	000c      	movs	r4, r1
 8000e80:	1bf6      	subs	r6, r6, r7
 8000e82:	0018      	movs	r0, r3
 8000e84:	40b3      	lsls	r3, r6
 8000e86:	40b4      	lsls	r4, r6
 8000e88:	40f8      	lsrs	r0, r7
 8000e8a:	1e5e      	subs	r6, r3, #1
 8000e8c:	41b3      	sbcs	r3, r6
 8000e8e:	40f9      	lsrs	r1, r7
 8000e90:	4304      	orrs	r4, r0
 8000e92:	431c      	orrs	r4, r3
 8000e94:	4489      	add	r9, r1
 8000e96:	4444      	add	r4, r8
 8000e98:	4544      	cmp	r4, r8
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	444b      	add	r3, r9
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	0016      	movs	r6, r2
 8000ea4:	e7a8      	b.n	8000df8 <__aeabi_dadd+0x284>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	464c      	mov	r4, r9
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	1e62      	subs	r2, r4, #1
 8000eae:	4194      	sbcs	r4, r2
 8000eb0:	e6a6      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000eb4:	1c72      	adds	r2, r6, #1
 8000eb6:	4222      	tst	r2, r4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x348>
 8000eba:	e0a8      	b.n	800100e <__aeabi_dadd+0x49a>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x352>
 8000ec4:	e10a      	b.n	80010dc <__aeabi_dadd+0x568>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x358>
 8000eca:	e15e      	b.n	800118a <__aeabi_dadd+0x616>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dadd+0x360>
 8000ed2:	e161      	b.n	8001198 <__aeabi_dadd+0x624>
 8000ed4:	074a      	lsls	r2, r1, #29
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	e77c      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	ff7fffff 	.word	0xff7fffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	4ccf      	ldr	r4, [pc, #828]	; (800122c <__aeabi_dadd+0x6b8>)
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x380>
 8000ef2:	e0ce      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ef4:	2480      	movs	r4, #128	; 0x80
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	4321      	orrs	r1, r4
 8000efa:	2f38      	cmp	r7, #56	; 0x38
 8000efc:	dc5b      	bgt.n	8000fb6 <__aeabi_dadd+0x442>
 8000efe:	2f1f      	cmp	r7, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dadd+0x390>
 8000f02:	e0dc      	b.n	80010be <__aeabi_dadd+0x54a>
 8000f04:	2520      	movs	r5, #32
 8000f06:	000c      	movs	r4, r1
 8000f08:	1bed      	subs	r5, r5, r7
 8000f0a:	001e      	movs	r6, r3
 8000f0c:	40ab      	lsls	r3, r5
 8000f0e:	40ac      	lsls	r4, r5
 8000f10:	40fe      	lsrs	r6, r7
 8000f12:	1e5d      	subs	r5, r3, #1
 8000f14:	41ab      	sbcs	r3, r5
 8000f16:	4334      	orrs	r4, r6
 8000f18:	40f9      	lsrs	r1, r7
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	1a5b      	subs	r3, r3, r1
 8000f20:	4699      	mov	r9, r3
 8000f22:	e04c      	b.n	8000fbe <__aeabi_dadd+0x44a>
 8000f24:	464a      	mov	r2, r9
 8000f26:	1a1c      	subs	r4, r3, r0
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	4192      	sbcs	r2, r2
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4692      	mov	sl, r2
 8000f32:	0002      	movs	r2, r0
 8000f34:	4650      	mov	r0, sl
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	4692      	mov	sl, r2
 8000f3a:	0212      	lsls	r2, r2, #8
 8000f3c:	d478      	bmi.n	8001030 <__aeabi_dadd+0x4bc>
 8000f3e:	4653      	mov	r3, sl
 8000f40:	4323      	orrs	r3, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x3d2>
 8000f44:	e66a      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8000f46:	2100      	movs	r1, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e745      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000f4c:	074a      	lsls	r2, r1, #29
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	08c9      	lsrs	r1, r1, #3
 8000f54:	e73d      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8000f56:	181c      	adds	r4, r3, r0
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	419b      	sbcs	r3, r3
 8000f5c:	4449      	add	r1, r9
 8000f5e:	468a      	mov	sl, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	449a      	add	sl, r3
 8000f64:	4653      	mov	r3, sl
 8000f66:	2601      	movs	r6, #1
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_dadd+0x3fa>
 8000f6c:	e727      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000f6e:	2602      	movs	r6, #2
 8000f70:	4652      	mov	r2, sl
 8000f72:	4baf      	ldr	r3, [pc, #700]	; (8001230 <__aeabi_dadd+0x6bc>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	4021      	ands	r1, r4
 8000f7c:	0862      	lsrs	r2, r4, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	07dc      	lsls	r4, r3, #31
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	469a      	mov	sl, r3
 8000f86:	4314      	orrs	r4, r2
 8000f88:	e670      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	3a20      	subs	r2, #32
 8000f90:	40d4      	lsrs	r4, r2
 8000f92:	46a4      	mov	ip, r4
 8000f94:	2f20      	cmp	r7, #32
 8000f96:	d007      	beq.n	8000fa8 <__aeabi_dadd+0x434>
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	1bd2      	subs	r2, r2, r7
 8000f9e:	4090      	lsls	r0, r2
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4640      	mov	r0, r8
 8000faa:	1e42      	subs	r2, r0, #1
 8000fac:	4190      	sbcs	r0, r2
 8000fae:	4662      	mov	r2, ip
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	e624      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	000c      	movs	r4, r1
 8000fba:	1e63      	subs	r3, r4, #1
 8000fbc:	419c      	sbcs	r4, r3
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	1b1c      	subs	r4, r3, r4
 8000fc2:	45a0      	cmp	r8, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	469a      	mov	sl, r3
 8000fce:	4665      	mov	r5, ip
 8000fd0:	0016      	movs	r6, r2
 8000fd2:	e61b      	b.n	8000c0c <__aeabi_dadd+0x98>
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x468>
 8000fda:	e0c7      	b.n	800116c <__aeabi_dadd+0x5f8>
 8000fdc:	1e7c      	subs	r4, r7, #1
 8000fde:	2f01      	cmp	r7, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x470>
 8000fe2:	e0f9      	b.n	80011d8 <__aeabi_dadd+0x664>
 8000fe4:	4e91      	ldr	r6, [pc, #580]	; (800122c <__aeabi_dadd+0x6b8>)
 8000fe6:	42b7      	cmp	r7, r6
 8000fe8:	d05c      	beq.n	80010a4 <__aeabi_dadd+0x530>
 8000fea:	0027      	movs	r7, r4
 8000fec:	e740      	b.n	8000e70 <__aeabi_dadd+0x2fc>
 8000fee:	2220      	movs	r2, #32
 8000ff0:	464c      	mov	r4, r9
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	1bd2      	subs	r2, r2, r7
 8000ff6:	4094      	lsls	r4, r2
 8000ff8:	40f8      	lsrs	r0, r7
 8000ffa:	4304      	orrs	r4, r0
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	4090      	lsls	r0, r2
 8001000:	1e42      	subs	r2, r0, #1
 8001002:	4190      	sbcs	r0, r2
 8001004:	464a      	mov	r2, r9
 8001006:	40fa      	lsrs	r2, r7
 8001008:	4304      	orrs	r4, r0
 800100a:	1889      	adds	r1, r1, r2
 800100c:	e6ee      	b.n	8000dec <__aeabi_dadd+0x278>
 800100e:	4c87      	ldr	r4, [pc, #540]	; (800122c <__aeabi_dadd+0x6b8>)
 8001010:	42a2      	cmp	r2, r4
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x4a2>
 8001014:	e6f9      	b.n	8000e0a <__aeabi_dadd+0x296>
 8001016:	1818      	adds	r0, r3, r0
 8001018:	4298      	cmp	r0, r3
 800101a:	419b      	sbcs	r3, r3
 800101c:	4449      	add	r1, r9
 800101e:	425b      	negs	r3, r3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	07dc      	lsls	r4, r3, #31
 8001024:	0840      	lsrs	r0, r0, #1
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	469a      	mov	sl, r3
 800102a:	0016      	movs	r6, r2
 800102c:	4304      	orrs	r4, r0
 800102e:	e6c6      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8001030:	4642      	mov	r2, r8
 8001032:	1ad4      	subs	r4, r2, r3
 8001034:	45a0      	cmp	r8, r4
 8001036:	4180      	sbcs	r0, r0
 8001038:	464b      	mov	r3, r9
 800103a:	4240      	negs	r0, r0
 800103c:	1a59      	subs	r1, r3, r1
 800103e:	1a0b      	subs	r3, r1, r0
 8001040:	469a      	mov	sl, r3
 8001042:	4665      	mov	r5, ip
 8001044:	e5ea      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8001046:	464b      	mov	r3, r9
 8001048:	464a      	mov	r2, r9
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	075b      	lsls	r3, r3, #29
 800104e:	4665      	mov	r5, ip
 8001050:	4303      	orrs	r3, r0
 8001052:	08d1      	lsrs	r1, r2, #3
 8001054:	e6bd      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001056:	2a00      	cmp	r2, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x4e8>
 800105a:	e08e      	b.n	800117a <__aeabi_dadd+0x606>
 800105c:	464b      	mov	r3, r9
 800105e:	4303      	orrs	r3, r0
 8001060:	d117      	bne.n	8001092 <__aeabi_dadd+0x51e>
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	2500      	movs	r5, #0
 8001066:	0309      	lsls	r1, r1, #12
 8001068:	e6da      	b.n	8000e20 <__aeabi_dadd+0x2ac>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	08c9      	lsrs	r1, r1, #3
 8001072:	e6d1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001074:	1a1c      	subs	r4, r3, r0
 8001076:	464a      	mov	r2, r9
 8001078:	42a3      	cmp	r3, r4
 800107a:	419b      	sbcs	r3, r3
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	425b      	negs	r3, r3
 8001080:	1acb      	subs	r3, r1, r3
 8001082:	469a      	mov	sl, r3
 8001084:	2601      	movs	r6, #1
 8001086:	e5c1      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001088:	074a      	lsls	r2, r1, #29
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	4313      	orrs	r3, r2
 800108e:	08c9      	lsrs	r1, r1, #3
 8001090:	e69f      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001092:	4643      	mov	r3, r8
 8001094:	08d8      	lsrs	r0, r3, #3
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	4665      	mov	r5, ip
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e6b9      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010a4:	4643      	mov	r3, r8
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	464b      	mov	r3, r9
 80010aa:	464a      	mov	r2, r9
 80010ac:	075b      	lsls	r3, r3, #29
 80010ae:	4303      	orrs	r3, r0
 80010b0:	08d1      	lsrs	r1, r2, #3
 80010b2:	e6b1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010b4:	4319      	orrs	r1, r3
 80010b6:	000c      	movs	r4, r1
 80010b8:	1e63      	subs	r3, r4, #1
 80010ba:	419c      	sbcs	r4, r3
 80010bc:	e6eb      	b.n	8000e96 <__aeabi_dadd+0x322>
 80010be:	003c      	movs	r4, r7
 80010c0:	000d      	movs	r5, r1
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e5      	lsrs	r5, r4
 80010c6:	2f20      	cmp	r7, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x55e>
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	1be4      	subs	r4, r4, r7
 80010ce:	40a1      	lsls	r1, r4
 80010d0:	430b      	orrs	r3, r1
 80010d2:	001c      	movs	r4, r3
 80010d4:	1e63      	subs	r3, r4, #1
 80010d6:	419c      	sbcs	r4, r3
 80010d8:	432c      	orrs	r4, r5
 80010da:	e770      	b.n	8000fbe <__aeabi_dadd+0x44a>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d0e1      	beq.n	80010a4 <__aeabi_dadd+0x530>
 80010e0:	464a      	mov	r2, r9
 80010e2:	4302      	orrs	r2, r0
 80010e4:	d0c1      	beq.n	800106a <__aeabi_dadd+0x4f6>
 80010e6:	074a      	lsls	r2, r1, #29
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	08c9      	lsrs	r1, r1, #3
 80010f0:	0312      	lsls	r2, r2, #12
 80010f2:	4211      	tst	r1, r2
 80010f4:	d008      	beq.n	8001108 <__aeabi_dadd+0x594>
 80010f6:	4648      	mov	r0, r9
 80010f8:	08c4      	lsrs	r4, r0, #3
 80010fa:	4214      	tst	r4, r2
 80010fc:	d104      	bne.n	8001108 <__aeabi_dadd+0x594>
 80010fe:	4643      	mov	r3, r8
 8001100:	0021      	movs	r1, r4
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	0742      	lsls	r2, r0, #29
 8001106:	4313      	orrs	r3, r2
 8001108:	0f5a      	lsrs	r2, r3, #29
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	0752      	lsls	r2, r2, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	e681      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001114:	464b      	mov	r3, r9
 8001116:	4303      	orrs	r3, r0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x5a8>
 800111a:	e714      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 800111c:	464b      	mov	r3, r9
 800111e:	464a      	mov	r2, r9
 8001120:	08c0      	lsrs	r0, r0, #3
 8001122:	075b      	lsls	r3, r3, #29
 8001124:	4665      	mov	r5, ip
 8001126:	4303      	orrs	r3, r0
 8001128:	08d1      	lsrs	r1, r2, #3
 800112a:	e655      	b.n	8000dd8 <__aeabi_dadd+0x264>
 800112c:	1ac4      	subs	r4, r0, r3
 800112e:	45a0      	cmp	r8, r4
 8001130:	4180      	sbcs	r0, r0
 8001132:	464b      	mov	r3, r9
 8001134:	4240      	negs	r0, r0
 8001136:	1a59      	subs	r1, r3, r1
 8001138:	1a0b      	subs	r3, r1, r0
 800113a:	469a      	mov	sl, r3
 800113c:	4665      	mov	r5, ip
 800113e:	2601      	movs	r6, #1
 8001140:	e564      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001142:	1a1c      	subs	r4, r3, r0
 8001144:	464a      	mov	r2, r9
 8001146:	42a3      	cmp	r3, r4
 8001148:	4180      	sbcs	r0, r0
 800114a:	1a8a      	subs	r2, r1, r2
 800114c:	4240      	negs	r0, r0
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	4692      	mov	sl, r2
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	d549      	bpl.n	80011ea <__aeabi_dadd+0x676>
 8001156:	4642      	mov	r2, r8
 8001158:	1ad4      	subs	r4, r2, r3
 800115a:	45a0      	cmp	r8, r4
 800115c:	4180      	sbcs	r0, r0
 800115e:	464b      	mov	r3, r9
 8001160:	4240      	negs	r0, r0
 8001162:	1a59      	subs	r1, r3, r1
 8001164:	1a0b      	subs	r3, r1, r0
 8001166:	469a      	mov	sl, r3
 8001168:	4665      	mov	r5, ip
 800116a:	e57f      	b.n	8000c6c <__aeabi_dadd+0xf8>
 800116c:	464b      	mov	r3, r9
 800116e:	464a      	mov	r2, r9
 8001170:	08c0      	lsrs	r0, r0, #3
 8001172:	075b      	lsls	r3, r3, #29
 8001174:	4303      	orrs	r3, r0
 8001176:	08d1      	lsrs	r1, r2, #3
 8001178:	e62b      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 800117a:	464a      	mov	r2, r9
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	4302      	orrs	r2, r0
 8001180:	d138      	bne.n	80011f4 <__aeabi_dadd+0x680>
 8001182:	074a      	lsls	r2, r1, #29
 8001184:	4313      	orrs	r3, r2
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	e646      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 800118a:	464b      	mov	r3, r9
 800118c:	464a      	mov	r2, r9
 800118e:	08c0      	lsrs	r0, r0, #3
 8001190:	075b      	lsls	r3, r3, #29
 8001192:	4303      	orrs	r3, r0
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	e61f      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8001198:	181c      	adds	r4, r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4449      	add	r1, r9
 80011a0:	468a      	mov	sl, r1
 80011a2:	425b      	negs	r3, r3
 80011a4:	449a      	add	sl, r3
 80011a6:	4653      	mov	r3, sl
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dadd+0x63a>
 80011ac:	e607      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ae:	4652      	mov	r2, sl
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <__aeabi_dadd+0x6bc>)
 80011b2:	2601      	movs	r6, #1
 80011b4:	401a      	ands	r2, r3
 80011b6:	4692      	mov	sl, r2
 80011b8:	e601      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ba:	003c      	movs	r4, r7
 80011bc:	000e      	movs	r6, r1
 80011be:	3c20      	subs	r4, #32
 80011c0:	40e6      	lsrs	r6, r4
 80011c2:	2f20      	cmp	r7, #32
 80011c4:	d003      	beq.n	80011ce <__aeabi_dadd+0x65a>
 80011c6:	2440      	movs	r4, #64	; 0x40
 80011c8:	1be4      	subs	r4, r4, r7
 80011ca:	40a1      	lsls	r1, r4
 80011cc:	430b      	orrs	r3, r1
 80011ce:	001c      	movs	r4, r3
 80011d0:	1e63      	subs	r3, r4, #1
 80011d2:	419c      	sbcs	r4, r3
 80011d4:	4334      	orrs	r4, r6
 80011d6:	e65e      	b.n	8000e96 <__aeabi_dadd+0x322>
 80011d8:	4443      	add	r3, r8
 80011da:	4283      	cmp	r3, r0
 80011dc:	4180      	sbcs	r0, r0
 80011de:	4449      	add	r1, r9
 80011e0:	468a      	mov	sl, r1
 80011e2:	4240      	negs	r0, r0
 80011e4:	001c      	movs	r4, r3
 80011e6:	4482      	add	sl, r0
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_dadd+0x3f0>
 80011ea:	4653      	mov	r3, sl
 80011ec:	4323      	orrs	r3, r4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x67e>
 80011f0:	e6a9      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 80011f2:	e5e4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011f4:	074a      	lsls	r2, r1, #29
 80011f6:	4313      	orrs	r3, r2
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	0312      	lsls	r2, r2, #12
 80011fe:	4211      	tst	r1, r2
 8001200:	d009      	beq.n	8001216 <__aeabi_dadd+0x6a2>
 8001202:	4648      	mov	r0, r9
 8001204:	08c4      	lsrs	r4, r0, #3
 8001206:	4214      	tst	r4, r2
 8001208:	d105      	bne.n	8001216 <__aeabi_dadd+0x6a2>
 800120a:	4643      	mov	r3, r8
 800120c:	4665      	mov	r5, ip
 800120e:	0021      	movs	r1, r4
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	0742      	lsls	r2, r0, #29
 8001214:	4313      	orrs	r3, r2
 8001216:	0f5a      	lsrs	r2, r3, #29
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	0752      	lsls	r2, r2, #29
 800121e:	4313      	orrs	r3, r2
 8001220:	e5fa      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001222:	2300      	movs	r3, #0
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dadd+0x6b8>)
 8001226:	001c      	movs	r4, r3
 8001228:	e540      	b.n	8000cac <__aeabi_dadd+0x138>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	ff7fffff 	.word	0xff7fffff

08001234 <__aeabi_ddiv>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4657      	mov	r7, sl
 8001238:	464e      	mov	r6, r9
 800123a:	4645      	mov	r5, r8
 800123c:	46de      	mov	lr, fp
 800123e:	b5e0      	push	{r5, r6, r7, lr}
 8001240:	030c      	lsls	r4, r1, #12
 8001242:	001f      	movs	r7, r3
 8001244:	004b      	lsls	r3, r1, #1
 8001246:	4681      	mov	r9, r0
 8001248:	4692      	mov	sl, r2
 800124a:	0005      	movs	r5, r0
 800124c:	b085      	sub	sp, #20
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d5b      	lsrs	r3, r3, #21
 8001252:	0fce      	lsrs	r6, r1, #31
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x26>
 8001258:	e152      	b.n	8001500 <__aeabi_ddiv+0x2cc>
 800125a:	4ad2      	ldr	r2, [pc, #840]	; (80015a4 <__aeabi_ddiv+0x370>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2e>
 8001260:	e16e      	b.n	8001540 <__aeabi_ddiv+0x30c>
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00e4      	lsls	r4, r4, #3
 8001266:	4314      	orrs	r4, r2
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	4322      	orrs	r2, r4
 800126e:	4690      	mov	r8, r2
 8001270:	4acd      	ldr	r2, [pc, #820]	; (80015a8 <__aeabi_ddiv+0x374>)
 8001272:	00c5      	lsls	r5, r0, #3
 8001274:	4693      	mov	fp, r2
 8001276:	449b      	add	fp, r3
 8001278:	2300      	movs	r3, #0
 800127a:	4699      	mov	r9, r3
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	033c      	lsls	r4, r7, #12
 8001280:	007b      	lsls	r3, r7, #1
 8001282:	4650      	mov	r0, sl
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fff      	lsrs	r7, r7, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x5c>
 800128e:	e11a      	b.n	80014c6 <__aeabi_ddiv+0x292>
 8001290:	4ac4      	ldr	r2, [pc, #784]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x64>
 8001296:	e15e      	b.n	8001556 <__aeabi_ddiv+0x322>
 8001298:	0f42      	lsrs	r2, r0, #29
 800129a:	00e4      	lsls	r4, r4, #3
 800129c:	4322      	orrs	r2, r4
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	4314      	orrs	r4, r2
 80012a4:	4ac0      	ldr	r2, [pc, #768]	; (80015a8 <__aeabi_ddiv+0x374>)
 80012a6:	00c1      	lsls	r1, r0, #3
 80012a8:	4694      	mov	ip, r2
 80012aa:	465a      	mov	r2, fp
 80012ac:	4463      	add	r3, ip
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	469b      	mov	fp, r3
 80012b2:	2000      	movs	r0, #0
 80012b4:	0033      	movs	r3, r6
 80012b6:	407b      	eors	r3, r7
 80012b8:	469a      	mov	sl, r3
 80012ba:	464b      	mov	r3, r9
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d827      	bhi.n	8001310 <__aeabi_ddiv+0xdc>
 80012c0:	4aba      	ldr	r2, [pc, #744]	; (80015ac <__aeabi_ddiv+0x378>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	469f      	mov	pc, r3
 80012c8:	46b2      	mov	sl, r6
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d016      	beq.n	80012fe <__aeabi_ddiv+0xca>
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0xa2>
 80012d4:	e287      	b.n	80017e6 <__aeabi_ddiv+0x5b2>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa8>
 80012da:	e0d5      	b.n	8001488 <__aeabi_ddiv+0x254>
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	2500      	movs	r5, #0
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	4313      	orrs	r3, r2
 80012e6:	4652      	mov	r2, sl
 80012e8:	07d2      	lsls	r2, r2, #31
 80012ea:	4313      	orrs	r3, r2
 80012ec:	0028      	movs	r0, r5
 80012ee:	0019      	movs	r1, r3
 80012f0:	b005      	add	sp, #20
 80012f2:	bcf0      	pop	{r4, r5, r6, r7}
 80012f4:	46bb      	mov	fp, r7
 80012f6:	46b2      	mov	sl, r6
 80012f8:	46a9      	mov	r9, r5
 80012fa:	46a0      	mov	r8, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	2200      	movs	r2, #0
 8001300:	2500      	movs	r5, #0
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0xae>
 8001306:	46ba      	mov	sl, r7
 8001308:	46a0      	mov	r8, r4
 800130a:	000d      	movs	r5, r1
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	e7dc      	b.n	80012ca <__aeabi_ddiv+0x96>
 8001310:	4544      	cmp	r4, r8
 8001312:	d200      	bcs.n	8001316 <__aeabi_ddiv+0xe2>
 8001314:	e1c4      	b.n	80016a0 <__aeabi_ddiv+0x46c>
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0xe6>
 8001318:	e1bf      	b.n	800169a <__aeabi_ddiv+0x466>
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	469c      	mov	ip, r3
 8001320:	002e      	movs	r6, r5
 8001322:	4640      	mov	r0, r8
 8001324:	2500      	movs	r5, #0
 8001326:	44e3      	add	fp, ip
 8001328:	0223      	lsls	r3, r4, #8
 800132a:	0e0c      	lsrs	r4, r1, #24
 800132c:	431c      	orrs	r4, r3
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	4699      	mov	r9, r3
 8001332:	0423      	lsls	r3, r4, #16
 8001334:	020a      	lsls	r2, r1, #8
 8001336:	0c1f      	lsrs	r7, r3, #16
 8001338:	4649      	mov	r1, r9
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	9701      	str	r7, [sp, #4]
 800133e:	f7fe ff85 	bl	800024c <__aeabi_uidivmod>
 8001342:	0002      	movs	r2, r0
 8001344:	437a      	muls	r2, r7
 8001346:	040b      	lsls	r3, r1, #16
 8001348:	0c31      	lsrs	r1, r6, #16
 800134a:	4680      	mov	r8, r0
 800134c:	4319      	orrs	r1, r3
 800134e:	428a      	cmp	r2, r1
 8001350:	d907      	bls.n	8001362 <__aeabi_ddiv+0x12e>
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	469c      	mov	ip, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	44e0      	add	r8, ip
 800135c:	428c      	cmp	r4, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x12e>
 8001360:	e201      	b.n	8001766 <__aeabi_ddiv+0x532>
 8001362:	1a88      	subs	r0, r1, r2
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff71 	bl	800024c <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	0436      	lsls	r6, r6, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	0c36      	lsrs	r6, r6, #16
 8001374:	0003      	movs	r3, r0
 8001376:	430e      	orrs	r6, r1
 8001378:	42b2      	cmp	r2, r6
 800137a:	d904      	bls.n	8001386 <__aeabi_ddiv+0x152>
 800137c:	1936      	adds	r6, r6, r4
 800137e:	3b01      	subs	r3, #1
 8001380:	42b4      	cmp	r4, r6
 8001382:	d800      	bhi.n	8001386 <__aeabi_ddiv+0x152>
 8001384:	e1e9      	b.n	800175a <__aeabi_ddiv+0x526>
 8001386:	1ab0      	subs	r0, r6, r2
 8001388:	4642      	mov	r2, r8
 800138a:	9e00      	ldr	r6, [sp, #0]
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	0c33      	lsrs	r3, r6, #16
 8001392:	001f      	movs	r7, r3
 8001394:	0c11      	lsrs	r1, r2, #16
 8001396:	4690      	mov	r8, r2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	0413      	lsls	r3, r2, #16
 800139c:	0432      	lsls	r2, r6, #16
 800139e:	0c16      	lsrs	r6, r2, #16
 80013a0:	0032      	movs	r2, r6
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	435a      	muls	r2, r3
 80013a6:	9603      	str	r6, [sp, #12]
 80013a8:	437b      	muls	r3, r7
 80013aa:	434e      	muls	r6, r1
 80013ac:	4379      	muls	r1, r7
 80013ae:	0c17      	lsrs	r7, r2, #16
 80013b0:	46bc      	mov	ip, r7
 80013b2:	199b      	adds	r3, r3, r6
 80013b4:	4463      	add	r3, ip
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d903      	bls.n	80013c2 <__aeabi_ddiv+0x18e>
 80013ba:	2680      	movs	r6, #128	; 0x80
 80013bc:	0276      	lsls	r6, r6, #9
 80013be:	46b4      	mov	ip, r6
 80013c0:	4461      	add	r1, ip
 80013c2:	0c1e      	lsrs	r6, r3, #16
 80013c4:	1871      	adds	r1, r6, r1
 80013c6:	0416      	lsls	r6, r2, #16
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	0c36      	lsrs	r6, r6, #16
 80013cc:	199e      	adds	r6, r3, r6
 80013ce:	4288      	cmp	r0, r1
 80013d0:	d302      	bcc.n	80013d8 <__aeabi_ddiv+0x1a4>
 80013d2:	d112      	bne.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d4:	42b5      	cmp	r5, r6
 80013d6:	d210      	bcs.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d8:	4643      	mov	r3, r8
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	9b00      	ldr	r3, [sp, #0]
 80013de:	469c      	mov	ip, r3
 80013e0:	4465      	add	r5, ip
 80013e2:	001f      	movs	r7, r3
 80013e4:	429d      	cmp	r5, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	425b      	negs	r3, r3
 80013ea:	191b      	adds	r3, r3, r4
 80013ec:	18c0      	adds	r0, r0, r3
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x1c0>
 80013f2:	e19e      	b.n	8001732 <__aeabi_ddiv+0x4fe>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x1c4>
 80013f6:	e199      	b.n	800172c <__aeabi_ddiv+0x4f8>
 80013f8:	4690      	mov	r8, r2
 80013fa:	1bae      	subs	r6, r5, r6
 80013fc:	42b5      	cmp	r5, r6
 80013fe:	41ad      	sbcs	r5, r5
 8001400:	1a40      	subs	r0, r0, r1
 8001402:	426d      	negs	r5, r5
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	4284      	cmp	r4, r0
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x1d8>
 800140a:	e1d2      	b.n	80017b2 <__aeabi_ddiv+0x57e>
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff1d 	bl	800024c <__aeabi_uidivmod>
 8001412:	9a01      	ldr	r2, [sp, #4]
 8001414:	040b      	lsls	r3, r1, #16
 8001416:	4342      	muls	r2, r0
 8001418:	0c31      	lsrs	r1, r6, #16
 800141a:	0005      	movs	r5, r0
 800141c:	4319      	orrs	r1, r3
 800141e:	428a      	cmp	r2, r1
 8001420:	d900      	bls.n	8001424 <__aeabi_ddiv+0x1f0>
 8001422:	e16c      	b.n	80016fe <__aeabi_ddiv+0x4ca>
 8001424:	1a88      	subs	r0, r1, r2
 8001426:	4649      	mov	r1, r9
 8001428:	f7fe ff10 	bl	800024c <__aeabi_uidivmod>
 800142c:	9a01      	ldr	r2, [sp, #4]
 800142e:	0436      	lsls	r6, r6, #16
 8001430:	4342      	muls	r2, r0
 8001432:	0409      	lsls	r1, r1, #16
 8001434:	0c36      	lsrs	r6, r6, #16
 8001436:	0003      	movs	r3, r0
 8001438:	430e      	orrs	r6, r1
 800143a:	42b2      	cmp	r2, r6
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x20c>
 800143e:	e153      	b.n	80016e8 <__aeabi_ddiv+0x4b4>
 8001440:	9803      	ldr	r0, [sp, #12]
 8001442:	1ab6      	subs	r6, r6, r2
 8001444:	0002      	movs	r2, r0
 8001446:	042d      	lsls	r5, r5, #16
 8001448:	431d      	orrs	r5, r3
 800144a:	9f02      	ldr	r7, [sp, #8]
 800144c:	042b      	lsls	r3, r5, #16
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435a      	muls	r2, r3
 8001452:	437b      	muls	r3, r7
 8001454:	469c      	mov	ip, r3
 8001456:	0c29      	lsrs	r1, r5, #16
 8001458:	4348      	muls	r0, r1
 800145a:	0c13      	lsrs	r3, r2, #16
 800145c:	4484      	add	ip, r0
 800145e:	4463      	add	r3, ip
 8001460:	4379      	muls	r1, r7
 8001462:	4298      	cmp	r0, r3
 8001464:	d903      	bls.n	800146e <__aeabi_ddiv+0x23a>
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	0240      	lsls	r0, r0, #9
 800146a:	4684      	mov	ip, r0
 800146c:	4461      	add	r1, ip
 800146e:	0c18      	lsrs	r0, r3, #16
 8001470:	0412      	lsls	r2, r2, #16
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	0c12      	lsrs	r2, r2, #16
 8001476:	1840      	adds	r0, r0, r1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	4286      	cmp	r6, r0
 800147c:	d200      	bcs.n	8001480 <__aeabi_ddiv+0x24c>
 800147e:	e100      	b.n	8001682 <__aeabi_ddiv+0x44e>
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x250>
 8001482:	e0fb      	b.n	800167c <__aeabi_ddiv+0x448>
 8001484:	2301      	movs	r3, #1
 8001486:	431d      	orrs	r5, r3
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <__aeabi_ddiv+0x37c>)
 800148a:	445b      	add	r3, fp
 800148c:	2b00      	cmp	r3, #0
 800148e:	dc00      	bgt.n	8001492 <__aeabi_ddiv+0x25e>
 8001490:	e0aa      	b.n	80015e8 <__aeabi_ddiv+0x3b4>
 8001492:	076a      	lsls	r2, r5, #29
 8001494:	d000      	beq.n	8001498 <__aeabi_ddiv+0x264>
 8001496:	e13d      	b.n	8001714 <__aeabi_ddiv+0x4e0>
 8001498:	08e9      	lsrs	r1, r5, #3
 800149a:	4642      	mov	r2, r8
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d506      	bpl.n	80014ae <__aeabi_ddiv+0x27a>
 80014a0:	4642      	mov	r2, r8
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <__aeabi_ddiv+0x380>)
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	4690      	mov	r8, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	445b      	add	r3, fp
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <__aeabi_ddiv+0x384>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_ddiv+0x282>
 80014b4:	e723      	b.n	80012fe <__aeabi_ddiv+0xca>
 80014b6:	4642      	mov	r2, r8
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	0755      	lsls	r5, r2, #29
 80014bc:	0252      	lsls	r2, r2, #9
 80014be:	430d      	orrs	r5, r1
 80014c0:	0b12      	lsrs	r2, r2, #12
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	e70d      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80014c6:	4651      	mov	r1, sl
 80014c8:	4321      	orrs	r1, r4
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x29a>
 80014cc:	e07c      	b.n	80015c8 <__aeabi_ddiv+0x394>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x2a0>
 80014d2:	e0fb      	b.n	80016cc <__aeabi_ddiv+0x498>
 80014d4:	0020      	movs	r0, r4
 80014d6:	f001 f995 	bl	8002804 <__clzsi2>
 80014da:	0002      	movs	r2, r0
 80014dc:	3a0b      	subs	r2, #11
 80014de:	231d      	movs	r3, #29
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4652      	mov	r2, sl
 80014e4:	0001      	movs	r1, r0
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4653      	mov	r3, sl
 80014ea:	3908      	subs	r1, #8
 80014ec:	408b      	lsls	r3, r1
 80014ee:	408c      	lsls	r4, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	4314      	orrs	r4, r2
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <__aeabi_ddiv+0x388>)
 80014f6:	4458      	add	r0, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	4483      	add	fp, r0
 80014fc:	2000      	movs	r0, #0
 80014fe:	e6d9      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001500:	0003      	movs	r3, r0
 8001502:	4323      	orrs	r3, r4
 8001504:	4698      	mov	r8, r3
 8001506:	d044      	beq.n	8001592 <__aeabi_ddiv+0x35e>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2da>
 800150c:	e0cf      	b.n	80016ae <__aeabi_ddiv+0x47a>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 f978 	bl	8002804 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	0002      	movs	r2, r0
 8001518:	390b      	subs	r1, #11
 800151a:	231d      	movs	r3, #29
 800151c:	1a5b      	subs	r3, r3, r1
 800151e:	4649      	mov	r1, r9
 8001520:	0010      	movs	r0, r2
 8001522:	40d9      	lsrs	r1, r3
 8001524:	3808      	subs	r0, #8
 8001526:	4084      	lsls	r4, r0
 8001528:	000b      	movs	r3, r1
 800152a:	464d      	mov	r5, r9
 800152c:	4323      	orrs	r3, r4
 800152e:	4698      	mov	r8, r3
 8001530:	4085      	lsls	r5, r0
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <__aeabi_ddiv+0x38c>)
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	469b      	mov	fp, r3
 8001538:	2300      	movs	r3, #0
 800153a:	4699      	mov	r9, r3
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	e69e      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001540:	0002      	movs	r2, r0
 8001542:	4322      	orrs	r2, r4
 8001544:	4690      	mov	r8, r2
 8001546:	d11d      	bne.n	8001584 <__aeabi_ddiv+0x350>
 8001548:	2208      	movs	r2, #8
 800154a:	469b      	mov	fp, r3
 800154c:	2302      	movs	r3, #2
 800154e:	2500      	movs	r5, #0
 8001550:	4691      	mov	r9, r2
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	e693      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001556:	4651      	mov	r1, sl
 8001558:	4321      	orrs	r1, r4
 800155a:	d109      	bne.n	8001570 <__aeabi_ddiv+0x33c>
 800155c:	2302      	movs	r3, #2
 800155e:	464a      	mov	r2, r9
 8001560:	431a      	orrs	r2, r3
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001564:	4691      	mov	r9, r2
 8001566:	469c      	mov	ip, r3
 8001568:	2400      	movs	r4, #0
 800156a:	2002      	movs	r0, #2
 800156c:	44e3      	add	fp, ip
 800156e:	e6a1      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001570:	2303      	movs	r3, #3
 8001572:	464a      	mov	r2, r9
 8001574:	431a      	orrs	r2, r3
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001578:	4691      	mov	r9, r2
 800157a:	469c      	mov	ip, r3
 800157c:	4651      	mov	r1, sl
 800157e:	2003      	movs	r0, #3
 8001580:	44e3      	add	fp, ip
 8001582:	e697      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001584:	220c      	movs	r2, #12
 8001586:	469b      	mov	fp, r3
 8001588:	2303      	movs	r3, #3
 800158a:	46a0      	mov	r8, r4
 800158c:	4691      	mov	r9, r2
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	e675      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001592:	2304      	movs	r3, #4
 8001594:	4699      	mov	r9, r3
 8001596:	2300      	movs	r3, #0
 8001598:	469b      	mov	fp, r3
 800159a:	3301      	adds	r3, #1
 800159c:	2500      	movs	r5, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	e66d      	b.n	800127e <__aeabi_ddiv+0x4a>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff
 80015a8:	fffffc01 	.word	0xfffffc01
 80015ac:	0800c154 	.word	0x0800c154
 80015b0:	000003ff 	.word	0x000003ff
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	000007fe 	.word	0x000007fe
 80015bc:	000003f3 	.word	0x000003f3
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	fffff801 	.word	0xfffff801
 80015c8:	464a      	mov	r2, r9
 80015ca:	2301      	movs	r3, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	4691      	mov	r9, r2
 80015d0:	2400      	movs	r4, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	e66e      	b.n	80012b4 <__aeabi_ddiv+0x80>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	469a      	mov	sl, r3
 80015dc:	2500      	movs	r5, #0
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	e67e      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80015e4:	2501      	movs	r5, #1
 80015e6:	426d      	negs	r5, r5
 80015e8:	2201      	movs	r2, #1
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	2a38      	cmp	r2, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0x3be>
 80015f0:	e674      	b.n	80012dc <__aeabi_ddiv+0xa8>
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x3c4>
 80015f6:	e0bd      	b.n	8001774 <__aeabi_ddiv+0x540>
 80015f8:	211f      	movs	r1, #31
 80015fa:	4249      	negs	r1, r1
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	4641      	mov	r1, r8
 8001600:	40d9      	lsrs	r1, r3
 8001602:	000b      	movs	r3, r1
 8001604:	2a20      	cmp	r2, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_ddiv+0x3de>
 8001608:	4641      	mov	r1, r8
 800160a:	4a7e      	ldr	r2, [pc, #504]	; (8001804 <__aeabi_ddiv+0x5d0>)
 800160c:	445a      	add	r2, fp
 800160e:	4091      	lsls	r1, r2
 8001610:	430d      	orrs	r5, r1
 8001612:	0029      	movs	r1, r5
 8001614:	1e4a      	subs	r2, r1, #1
 8001616:	4191      	sbcs	r1, r2
 8001618:	4319      	orrs	r1, r3
 800161a:	2307      	movs	r3, #7
 800161c:	001d      	movs	r5, r3
 800161e:	2200      	movs	r2, #0
 8001620:	400d      	ands	r5, r1
 8001622:	420b      	tst	r3, r1
 8001624:	d100      	bne.n	8001628 <__aeabi_ddiv+0x3f4>
 8001626:	e0d0      	b.n	80017ca <__aeabi_ddiv+0x596>
 8001628:	220f      	movs	r2, #15
 800162a:	2300      	movs	r3, #0
 800162c:	400a      	ands	r2, r1
 800162e:	2a04      	cmp	r2, #4
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x400>
 8001632:	e0c7      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001634:	1d0a      	adds	r2, r1, #4
 8001636:	428a      	cmp	r2, r1
 8001638:	4189      	sbcs	r1, r1
 800163a:	4249      	negs	r1, r1
 800163c:	185b      	adds	r3, r3, r1
 800163e:	0011      	movs	r1, r2
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_ddiv+0x412>
 8001644:	e0be      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e649      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	4643      	mov	r3, r8
 8001652:	0312      	lsls	r2, r2, #12
 8001654:	4213      	tst	r3, r2
 8001656:	d008      	beq.n	800166a <__aeabi_ddiv+0x436>
 8001658:	4214      	tst	r4, r2
 800165a:	d106      	bne.n	800166a <__aeabi_ddiv+0x436>
 800165c:	4322      	orrs	r2, r4
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	46ba      	mov	sl, r7
 8001662:	000d      	movs	r5, r1
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001666:	0b12      	lsrs	r2, r2, #12
 8001668:	e63b      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4643      	mov	r3, r8
 800166e:	0312      	lsls	r2, r2, #12
 8001670:	431a      	orrs	r2, r3
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	46b2      	mov	sl, r6
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	e632      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x44e>
 8001680:	e702      	b.n	8001488 <__aeabi_ddiv+0x254>
 8001682:	19a6      	adds	r6, r4, r6
 8001684:	1e6a      	subs	r2, r5, #1
 8001686:	42a6      	cmp	r6, r4
 8001688:	d200      	bcs.n	800168c <__aeabi_ddiv+0x458>
 800168a:	e089      	b.n	80017a0 <__aeabi_ddiv+0x56c>
 800168c:	4286      	cmp	r6, r0
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0x45e>
 8001690:	e09f      	b.n	80017d2 <__aeabi_ddiv+0x59e>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x462>
 8001694:	e0af      	b.n	80017f6 <__aeabi_ddiv+0x5c2>
 8001696:	0015      	movs	r5, r2
 8001698:	e6f4      	b.n	8001484 <__aeabi_ddiv+0x250>
 800169a:	42a9      	cmp	r1, r5
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x46c>
 800169e:	e63c      	b.n	800131a <__aeabi_ddiv+0xe6>
 80016a0:	4643      	mov	r3, r8
 80016a2:	07de      	lsls	r6, r3, #31
 80016a4:	0858      	lsrs	r0, r3, #1
 80016a6:	086b      	lsrs	r3, r5, #1
 80016a8:	431e      	orrs	r6, r3
 80016aa:	07ed      	lsls	r5, r5, #31
 80016ac:	e63c      	b.n	8001328 <__aeabi_ddiv+0xf4>
 80016ae:	f001 f8a9 	bl	8002804 <__clzsi2>
 80016b2:	0001      	movs	r1, r0
 80016b4:	0002      	movs	r2, r0
 80016b6:	3115      	adds	r1, #21
 80016b8:	3220      	adds	r2, #32
 80016ba:	291c      	cmp	r1, #28
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_ddiv+0x48c>
 80016be:	e72c      	b.n	800151a <__aeabi_ddiv+0x2e6>
 80016c0:	464b      	mov	r3, r9
 80016c2:	3808      	subs	r0, #8
 80016c4:	4083      	lsls	r3, r0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4698      	mov	r8, r3
 80016ca:	e732      	b.n	8001532 <__aeabi_ddiv+0x2fe>
 80016cc:	f001 f89a 	bl	8002804 <__clzsi2>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	3215      	adds	r2, #21
 80016d6:	3020      	adds	r0, #32
 80016d8:	2a1c      	cmp	r2, #28
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x4aa>
 80016dc:	e6ff      	b.n	80014de <__aeabi_ddiv+0x2aa>
 80016de:	4654      	mov	r4, sl
 80016e0:	3b08      	subs	r3, #8
 80016e2:	2100      	movs	r1, #0
 80016e4:	409c      	lsls	r4, r3
 80016e6:	e705      	b.n	80014f4 <__aeabi_ddiv+0x2c0>
 80016e8:	1936      	adds	r6, r6, r4
 80016ea:	3b01      	subs	r3, #1
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x4be>
 80016f0:	e6a6      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f2:	42b2      	cmp	r2, r6
 80016f4:	d800      	bhi.n	80016f8 <__aeabi_ddiv+0x4c4>
 80016f6:	e6a3      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f8:	1e83      	subs	r3, r0, #2
 80016fa:	1936      	adds	r6, r6, r4
 80016fc:	e6a0      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3d01      	subs	r5, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d900      	bls.n	8001708 <__aeabi_ddiv+0x4d4>
 8001706:	e68d      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001708:	428a      	cmp	r2, r1
 800170a:	d800      	bhi.n	800170e <__aeabi_ddiv+0x4da>
 800170c:	e68a      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 800170e:	1e85      	subs	r5, r0, #2
 8001710:	1909      	adds	r1, r1, r4
 8001712:	e687      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001714:	220f      	movs	r2, #15
 8001716:	402a      	ands	r2, r5
 8001718:	2a04      	cmp	r2, #4
 800171a:	d100      	bne.n	800171e <__aeabi_ddiv+0x4ea>
 800171c:	e6bc      	b.n	8001498 <__aeabi_ddiv+0x264>
 800171e:	1d29      	adds	r1, r5, #4
 8001720:	42a9      	cmp	r1, r5
 8001722:	41ad      	sbcs	r5, r5
 8001724:	426d      	negs	r5, r5
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	44a8      	add	r8, r5
 800172a:	e6b6      	b.n	800149a <__aeabi_ddiv+0x266>
 800172c:	42af      	cmp	r7, r5
 800172e:	d900      	bls.n	8001732 <__aeabi_ddiv+0x4fe>
 8001730:	e662      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001732:	4281      	cmp	r1, r0
 8001734:	d804      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 8001736:	d000      	beq.n	800173a <__aeabi_ddiv+0x506>
 8001738:	e65e      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 800173a:	42ae      	cmp	r6, r5
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 800173e:	e65b      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001740:	2302      	movs	r3, #2
 8001742:	425b      	negs	r3, r3
 8001744:	469c      	mov	ip, r3
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	44e0      	add	r8, ip
 800174a:	469c      	mov	ip, r3
 800174c:	4465      	add	r5, ip
 800174e:	429d      	cmp	r5, r3
 8001750:	419b      	sbcs	r3, r3
 8001752:	425b      	negs	r3, r3
 8001754:	191b      	adds	r3, r3, r4
 8001756:	18c0      	adds	r0, r0, r3
 8001758:	e64f      	b.n	80013fa <__aeabi_ddiv+0x1c6>
 800175a:	42b2      	cmp	r2, r6
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x52c>
 800175e:	e612      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001760:	1e83      	subs	r3, r0, #2
 8001762:	1936      	adds	r6, r6, r4
 8001764:	e60f      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001766:	428a      	cmp	r2, r1
 8001768:	d800      	bhi.n	800176c <__aeabi_ddiv+0x538>
 800176a:	e5fa      	b.n	8001362 <__aeabi_ddiv+0x12e>
 800176c:	1e83      	subs	r3, r0, #2
 800176e:	4698      	mov	r8, r3
 8001770:	1909      	adds	r1, r1, r4
 8001772:	e5f6      	b.n	8001362 <__aeabi_ddiv+0x12e>
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <__aeabi_ddiv+0x5d4>)
 8001776:	0028      	movs	r0, r5
 8001778:	445b      	add	r3, fp
 800177a:	4641      	mov	r1, r8
 800177c:	409d      	lsls	r5, r3
 800177e:	4099      	lsls	r1, r3
 8001780:	40d0      	lsrs	r0, r2
 8001782:	1e6b      	subs	r3, r5, #1
 8001784:	419d      	sbcs	r5, r3
 8001786:	4643      	mov	r3, r8
 8001788:	4301      	orrs	r1, r0
 800178a:	4329      	orrs	r1, r5
 800178c:	40d3      	lsrs	r3, r2
 800178e:	074a      	lsls	r2, r1, #29
 8001790:	d100      	bne.n	8001794 <__aeabi_ddiv+0x560>
 8001792:	e755      	b.n	8001640 <__aeabi_ddiv+0x40c>
 8001794:	220f      	movs	r2, #15
 8001796:	400a      	ands	r2, r1
 8001798:	2a04      	cmp	r2, #4
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x56a>
 800179c:	e74a      	b.n	8001634 <__aeabi_ddiv+0x400>
 800179e:	e74f      	b.n	8001640 <__aeabi_ddiv+0x40c>
 80017a0:	0015      	movs	r5, r2
 80017a2:	4286      	cmp	r6, r0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_ddiv+0x574>
 80017a6:	e66d      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017a8:	9a00      	ldr	r2, [sp, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0x57c>
 80017ae:	e669      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017b0:	e66a      	b.n	8001488 <__aeabi_ddiv+0x254>
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <__aeabi_ddiv+0x5d8>)
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_ddiv+0x588>
 80017ba:	e713      	b.n	80015e4 <__aeabi_ddiv+0x3b0>
 80017bc:	2501      	movs	r5, #1
 80017be:	2100      	movs	r1, #0
 80017c0:	44a8      	add	r8, r5
 80017c2:	e66a      	b.n	800149a <__aeabi_ddiv+0x266>
 80017c4:	075d      	lsls	r5, r3, #29
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	0b1a      	lsrs	r2, r3, #12
 80017ca:	08c9      	lsrs	r1, r1, #3
 80017cc:	2300      	movs	r3, #0
 80017ce:	430d      	orrs	r5, r1
 80017d0:	e587      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017d2:	9900      	ldr	r1, [sp, #0]
 80017d4:	3d02      	subs	r5, #2
 80017d6:	004a      	lsls	r2, r1, #1
 80017d8:	428a      	cmp	r2, r1
 80017da:	41bf      	sbcs	r7, r7
 80017dc:	427f      	negs	r7, r7
 80017de:	193f      	adds	r7, r7, r4
 80017e0:	19f6      	adds	r6, r6, r7
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	e7dd      	b.n	80017a2 <__aeabi_ddiv+0x56e>
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4643      	mov	r3, r8
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	431a      	orrs	r2, r3
 80017ee:	0312      	lsls	r2, r2, #12
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	e575      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017f6:	9900      	ldr	r1, [sp, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d3ea      	bcc.n	80017d2 <__aeabi_ddiv+0x59e>
 80017fc:	0015      	movs	r5, r2
 80017fe:	e7d3      	b.n	80017a8 <__aeabi_ddiv+0x574>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4645      	mov	r5, r8
 8001a2c:	46de      	mov	lr, fp
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	001f      	movs	r7, r3
 8001a36:	030b      	lsls	r3, r1, #12
 8001a38:	0b1b      	lsrs	r3, r3, #12
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	004d      	lsls	r5, r1, #1
 8001a3e:	0fcb      	lsrs	r3, r1, #31
 8001a40:	0004      	movs	r4, r0
 8001a42:	4691      	mov	r9, r2
 8001a44:	4698      	mov	r8, r3
 8001a46:	b087      	sub	sp, #28
 8001a48:	0d6d      	lsrs	r5, r5, #21
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x26>
 8001a4c:	e1cd      	b.n	8001dea <__aeabi_dmul+0x3c2>
 8001a4e:	4bce      	ldr	r3, [pc, #824]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a50:	429d      	cmp	r5, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2e>
 8001a54:	e1e9      	b.n	8001e2a <__aeabi_dmul+0x402>
 8001a56:	465a      	mov	r2, fp
 8001a58:	0f43      	lsrs	r3, r0, #29
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	00c3      	lsls	r3, r0, #3
 8001a66:	469a      	mov	sl, r3
 8001a68:	4bc8      	ldr	r3, [pc, #800]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2600      	movs	r6, #0
 8001a72:	4465      	add	r5, ip
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x60>
 8001a86:	e189      	b.n	8001d9c <__aeabi_dmul+0x374>
 8001a88:	4abf      	ldr	r2, [pc, #764]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <__aeabi_dmul+0x9a>
 8001a8e:	0f42      	lsrs	r2, r0, #29
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4322      	orrs	r2, r4
 8001a94:	2480      	movs	r4, #128	; 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4abc      	ldr	r2, [pc, #752]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	4463      	add	r3, ip
 8001aa4:	195b      	adds	r3, r3, r5
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	407a      	eors	r2, r7
 8001aac:	3301      	adds	r3, #1
 8001aae:	00c0      	lsls	r0, r0, #3
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2e0a      	cmp	r6, #10
 8001ab6:	dd1c      	ble.n	8001af2 <__aeabi_dmul+0xca>
 8001ab8:	003a      	movs	r2, r7
 8001aba:	2e0b      	cmp	r6, #11
 8001abc:	d05e      	beq.n	8001b7c <__aeabi_dmul+0x154>
 8001abe:	4647      	mov	r7, r8
 8001ac0:	e056      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	4bb0      	ldr	r3, [pc, #704]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ac6:	4321      	orrs	r1, r4
 8001ac8:	18eb      	adds	r3, r5, r3
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d12a      	bne.n	8001b26 <__aeabi_dmul+0xfe>
 8001ad0:	2080      	movs	r0, #128	; 0x80
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	0100      	lsls	r0, r0, #4
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	4684      	mov	ip, r0
 8001ada:	4316      	orrs	r6, r2
 8001adc:	4642      	mov	r2, r8
 8001ade:	4463      	add	r3, ip
 8001ae0:	407a      	eors	r2, r7
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2e0a      	cmp	r6, #10
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dmul+0xc4>
 8001aea:	e231      	b.n	8001f50 <__aeabi_dmul+0x528>
 8001aec:	2000      	movs	r0, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2102      	movs	r1, #2
 8001af2:	2e02      	cmp	r6, #2
 8001af4:	dc26      	bgt.n	8001b44 <__aeabi_dmul+0x11c>
 8001af6:	3e01      	subs	r6, #1
 8001af8:	2e01      	cmp	r6, #1
 8001afa:	d852      	bhi.n	8001ba2 <__aeabi_dmul+0x17a>
 8001afc:	2902      	cmp	r1, #2
 8001afe:	d04c      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b00:	2901      	cmp	r1, #1
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001b04:	e118      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	07d2      	lsls	r2, r2, #31
 8001b12:	4313      	orrs	r3, r2
 8001b14:	0028      	movs	r0, r5
 8001b16:	0019      	movs	r1, r3
 8001b18:	b007      	add	sp, #28
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	2203      	movs	r2, #3
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	002b      	movs	r3, r5
 8001b2e:	468c      	mov	ip, r1
 8001b30:	4316      	orrs	r6, r2
 8001b32:	4642      	mov	r2, r8
 8001b34:	4463      	add	r3, ip
 8001b36:	407a      	eors	r2, r7
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2e0a      	cmp	r6, #10
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dmul+0x11a>
 8001b40:	e228      	b.n	8001f94 <__aeabi_dmul+0x56c>
 8001b42:	2103      	movs	r1, #3
 8001b44:	2501      	movs	r5, #1
 8001b46:	40b5      	lsls	r5, r6
 8001b48:	46ac      	mov	ip, r5
 8001b4a:	26a6      	movs	r6, #166	; 0xa6
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	00f6      	lsls	r6, r6, #3
 8001b50:	4035      	ands	r5, r6
 8001b52:	4233      	tst	r3, r6
 8001b54:	d10b      	bne.n	8001b6e <__aeabi_dmul+0x146>
 8001b56:	2690      	movs	r6, #144	; 0x90
 8001b58:	00b6      	lsls	r6, r6, #2
 8001b5a:	4233      	tst	r3, r6
 8001b5c:	d118      	bne.n	8001b90 <__aeabi_dmul+0x168>
 8001b5e:	3eb9      	subs	r6, #185	; 0xb9
 8001b60:	3eff      	subs	r6, #255	; 0xff
 8001b62:	421e      	tst	r6, r3
 8001b64:	d01d      	beq.n	8001ba2 <__aeabi_dmul+0x17a>
 8001b66:	46a3      	mov	fp, r4
 8001b68:	4682      	mov	sl, r0
 8001b6a:	9100      	str	r1, [sp, #0]
 8001b6c:	e000      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001b6e:	0017      	movs	r7, r2
 8001b70:	9900      	ldr	r1, [sp, #0]
 8001b72:	003a      	movs	r2, r7
 8001b74:	2902      	cmp	r1, #2
 8001b76:	d010      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	2903      	cmp	r1, #3
 8001b7e:	d1bf      	bne.n	8001b00 <__aeabi_dmul+0xd8>
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	031b      	lsls	r3, r3, #12
 8001b84:	431c      	orrs	r4, r3
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b8c:	0b24      	lsrs	r4, r4, #12
 8001b8e:	e7bd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2200      	movs	r2, #0
 8001b94:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b96:	0324      	lsls	r4, r4, #12
 8001b98:	e7b8      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ba0:	e7b4      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ba2:	4653      	mov	r3, sl
 8001ba4:	041e      	lsls	r6, r3, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	0c1f      	lsrs	r7, r3, #16
 8001baa:	0033      	movs	r3, r6
 8001bac:	0c01      	lsrs	r1, r0, #16
 8001bae:	0400      	lsls	r0, r0, #16
 8001bb0:	0c00      	lsrs	r0, r0, #16
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	437b      	muls	r3, r7
 8001bba:	4699      	mov	r9, r3
 8001bbc:	0033      	movs	r3, r6
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	000d      	movs	r5, r1
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	469a      	mov	sl, r3
 8001bca:	437d      	muls	r5, r7
 8001bcc:	44cc      	add	ip, r9
 8001bce:	44d4      	add	ip, sl
 8001bd0:	9500      	str	r5, [sp, #0]
 8001bd2:	45e1      	cmp	r9, ip
 8001bd4:	d904      	bls.n	8001be0 <__aeabi_dmul+0x1b8>
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	4699      	mov	r9, r3
 8001bdc:	444d      	add	r5, r9
 8001bde:	9500      	str	r5, [sp, #0]
 8001be0:	4663      	mov	r3, ip
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	001d      	movs	r5, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	469c      	mov	ip, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	4663      	mov	r3, ip
 8001bf6:	4443      	add	r3, r8
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	0c23      	lsrs	r3, r4, #16
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	0033      	movs	r3, r6
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	4363      	muls	r3, r4
 8001c06:	469c      	mov	ip, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	437b      	muls	r3, r7
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4643      	mov	r3, r8
 8001c10:	435e      	muls	r6, r3
 8001c12:	435f      	muls	r7, r3
 8001c14:	444e      	add	r6, r9
 8001c16:	4663      	mov	r3, ip
 8001c18:	46b2      	mov	sl, r6
 8001c1a:	0c1e      	lsrs	r6, r3, #16
 8001c1c:	4456      	add	r6, sl
 8001c1e:	45b1      	cmp	r9, r6
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x202>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4699      	mov	r9, r3
 8001c28:	444f      	add	r7, r9
 8001c2a:	0c33      	lsrs	r3, r6, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	003b      	movs	r3, r7
 8001c30:	444b      	add	r3, r9
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	4663      	mov	r3, ip
 8001c36:	46ac      	mov	ip, r5
 8001c38:	041f      	lsls	r7, r3, #16
 8001c3a:	0c3f      	lsrs	r7, r7, #16
 8001c3c:	0436      	lsls	r6, r6, #16
 8001c3e:	19f6      	adds	r6, r6, r7
 8001c40:	44b4      	add	ip, r6
 8001c42:	4663      	mov	r3, ip
 8001c44:	9304      	str	r3, [sp, #16]
 8001c46:	465b      	mov	r3, fp
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	041f      	lsls	r7, r3, #16
 8001c50:	0c3f      	lsrs	r7, r7, #16
 8001c52:	003b      	movs	r3, r7
 8001c54:	4343      	muls	r3, r0
 8001c56:	4699      	mov	r9, r3
 8001c58:	4663      	mov	r3, ip
 8001c5a:	4343      	muls	r3, r0
 8001c5c:	469a      	mov	sl, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	4660      	mov	r0, ip
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	469b      	mov	fp, r3
 8001c66:	4348      	muls	r0, r1
 8001c68:	4379      	muls	r1, r7
 8001c6a:	4451      	add	r1, sl
 8001c6c:	4459      	add	r1, fp
 8001c6e:	458a      	cmp	sl, r1
 8001c70:	d903      	bls.n	8001c7a <__aeabi_dmul+0x252>
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	469a      	mov	sl, r3
 8001c78:	4450      	add	r0, sl
 8001c7a:	0c0b      	lsrs	r3, r1, #16
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	464b      	mov	r3, r9
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	4699      	mov	r9, r3
 8001c86:	003b      	movs	r3, r7
 8001c88:	4363      	muls	r3, r4
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4645      	mov	r5, r8
 8001c8e:	4449      	add	r1, r9
 8001c90:	4699      	mov	r9, r3
 8001c92:	4663      	mov	r3, ip
 8001c94:	435c      	muls	r4, r3
 8001c96:	436b      	muls	r3, r5
 8001c98:	469c      	mov	ip, r3
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	436f      	muls	r7, r5
 8001ca2:	193f      	adds	r7, r7, r4
 8001ca4:	4447      	add	r7, r8
 8001ca6:	4450      	add	r0, sl
 8001ca8:	42bc      	cmp	r4, r7
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_dmul+0x28c>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	44c4      	add	ip, r8
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	9d00      	ldr	r5, [sp, #0]
 8001cb8:	4698      	mov	r8, r3
 8001cba:	4445      	add	r5, r8
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	41b6      	sbcs	r6, r6
 8001cc0:	4273      	negs	r3, r6
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	041e      	lsls	r6, r3, #16
 8001cc8:	9b05      	ldr	r3, [sp, #20]
 8001cca:	043c      	lsls	r4, r7, #16
 8001ccc:	4699      	mov	r9, r3
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	19a4      	adds	r4, r4, r6
 8001cd2:	444c      	add	r4, r9
 8001cd4:	46a1      	mov	r9, r4
 8001cd6:	4683      	mov	fp, r0
 8001cd8:	186e      	adds	r6, r5, r1
 8001cda:	44c1      	add	r9, r8
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	4189      	sbcs	r1, r1
 8001ce0:	44cb      	add	fp, r9
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	186d      	adds	r5, r5, r1
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	41a4      	sbcs	r4, r4
 8001cec:	45c1      	cmp	r9, r8
 8001cee:	419b      	sbcs	r3, r3
 8001cf0:	4583      	cmp	fp, r0
 8001cf2:	4180      	sbcs	r0, r0
 8001cf4:	428d      	cmp	r5, r1
 8001cf6:	4189      	sbcs	r1, r1
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	4264      	negs	r4, r4
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4240      	negs	r0, r0
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	4249      	negs	r1, r1
 8001d04:	4301      	orrs	r1, r0
 8001d06:	0270      	lsls	r0, r6, #9
 8001d08:	0c3f      	lsrs	r7, r7, #16
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	19e4      	adds	r4, r4, r7
 8001d0e:	1e47      	subs	r7, r0, #1
 8001d10:	41b8      	sbcs	r0, r7
 8001d12:	1864      	adds	r4, r4, r1
 8001d14:	4464      	add	r4, ip
 8001d16:	0df6      	lsrs	r6, r6, #23
 8001d18:	0261      	lsls	r1, r4, #9
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	0dec      	lsrs	r4, r5, #23
 8001d1e:	026e      	lsls	r6, r5, #9
 8001d20:	430c      	orrs	r4, r1
 8001d22:	4330      	orrs	r0, r6
 8001d24:	01c9      	lsls	r1, r1, #7
 8001d26:	d400      	bmi.n	8001d2a <__aeabi_dmul+0x302>
 8001d28:	e0f1      	b.n	8001f0e <__aeabi_dmul+0x4e6>
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	0843      	lsrs	r3, r0, #1
 8001d2e:	4001      	ands	r1, r0
 8001d30:	430b      	orrs	r3, r1
 8001d32:	07e0      	lsls	r0, r4, #31
 8001d34:	4318      	orrs	r0, r3
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <__aeabi_dmul+0x368>)
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dmul+0x31e>
 8001d44:	e097      	b.n	8001e76 <__aeabi_dmul+0x44e>
 8001d46:	0741      	lsls	r1, r0, #29
 8001d48:	d009      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	4001      	ands	r1, r0
 8001d4e:	2904      	cmp	r1, #4
 8001d50:	d005      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d52:	1d01      	adds	r1, r0, #4
 8001d54:	4281      	cmp	r1, r0
 8001d56:	4180      	sbcs	r0, r0
 8001d58:	4240      	negs	r0, r0
 8001d5a:	1824      	adds	r4, r4, r0
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	01e1      	lsls	r1, r4, #7
 8001d60:	d506      	bpl.n	8001d70 <__aeabi_dmul+0x348>
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	00c9      	lsls	r1, r1, #3
 8001d66:	468c      	mov	ip, r1
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <__aeabi_dmul+0x36c>)
 8001d6a:	401c      	ands	r4, r3
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	4463      	add	r3, ip
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <__aeabi_dmul+0x370>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dmul+0x350>
 8001d76:	e710      	b.n	8001b9a <__aeabi_dmul+0x172>
 8001d78:	0761      	lsls	r1, r4, #29
 8001d7a:	08c5      	lsrs	r5, r0, #3
 8001d7c:	0264      	lsls	r4, r4, #9
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	430d      	orrs	r5, r1
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	0d5b      	lsrs	r3, r3, #21
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	000003ff 	.word	0x000003ff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	000007fe 	.word	0x000007fe
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	d059      	beq.n	8001e56 <__aeabi_dmul+0x42e>
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dmul+0x380>
 8001da6:	e0a3      	b.n	8001ef0 <__aeabi_dmul+0x4c8>
 8001da8:	0020      	movs	r0, r4
 8001daa:	f000 fd2b 	bl	8002804 <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	390b      	subs	r1, #11
 8001db4:	221d      	movs	r2, #29
 8001db6:	1a52      	subs	r2, r2, r1
 8001db8:	4649      	mov	r1, r9
 8001dba:	0018      	movs	r0, r3
 8001dbc:	40d1      	lsrs	r1, r2
 8001dbe:	464a      	mov	r2, r9
 8001dc0:	3808      	subs	r0, #8
 8001dc2:	4082      	lsls	r2, r0
 8001dc4:	4084      	lsls	r4, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	430c      	orrs	r4, r1
 8001dca:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <__aeabi_dmul+0x574>)
 8001dcc:	1aeb      	subs	r3, r5, r3
 8001dce:	4694      	mov	ip, r2
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	4463      	add	r3, ip
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	407a      	eors	r2, r7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dmul+0x3c0>
 8001de6:	e667      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001de8:	e683      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001dea:	465b      	mov	r3, fp
 8001dec:	4303      	orrs	r3, r0
 8001dee:	469a      	mov	sl, r3
 8001df0:	d02a      	beq.n	8001e48 <__aeabi_dmul+0x420>
 8001df2:	465b      	mov	r3, fp
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06d      	beq.n	8001ed4 <__aeabi_dmul+0x4ac>
 8001df8:	4658      	mov	r0, fp
 8001dfa:	f000 fd03 	bl	8002804 <__clzsi2>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	0003      	movs	r3, r0
 8001e02:	390b      	subs	r1, #11
 8001e04:	221d      	movs	r2, #29
 8001e06:	1a52      	subs	r2, r2, r1
 8001e08:	0021      	movs	r1, r4
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	465d      	mov	r5, fp
 8001e0e:	40d1      	lsrs	r1, r2
 8001e10:	3808      	subs	r0, #8
 8001e12:	4085      	lsls	r5, r0
 8001e14:	000a      	movs	r2, r1
 8001e16:	4084      	lsls	r4, r0
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	4d5f      	ldr	r5, [pc, #380]	; (8001f9c <__aeabi_dmul+0x574>)
 8001e20:	2600      	movs	r6, #0
 8001e22:	1aed      	subs	r5, r5, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	e625      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	d105      	bne.n	8001e3e <__aeabi_dmul+0x416>
 8001e32:	2300      	movs	r3, #0
 8001e34:	469b      	mov	fp, r3
 8001e36:	3302      	adds	r3, #2
 8001e38:	2608      	movs	r6, #8
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e61b      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4682      	mov	sl, r0
 8001e42:	260c      	movs	r6, #12
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	e616      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	469b      	mov	fp, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2500      	movs	r5, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	e60f      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	3301      	adds	r3, #1
 8001e5a:	9501      	str	r5, [sp, #4]
 8001e5c:	431e      	orrs	r6, r3
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	407a      	eors	r2, r7
 8001e62:	3301      	adds	r3, #1
 8001e64:	2400      	movs	r4, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	2101      	movs	r1, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2e0a      	cmp	r6, #10
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dmul+0x44c>
 8001e72:	e621      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001e74:	e63d      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001e76:	2101      	movs	r1, #1
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	2938      	cmp	r1, #56	; 0x38
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x458>
 8001e7e:	e642      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dd47      	ble.n	8001f14 <__aeabi_dmul+0x4ec>
 8001e84:	261f      	movs	r6, #31
 8001e86:	0025      	movs	r5, r4
 8001e88:	4276      	negs	r6, r6
 8001e8a:	1af3      	subs	r3, r6, r3
 8001e8c:	40dd      	lsrs	r5, r3
 8001e8e:	002b      	movs	r3, r5
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_dmul+0x478>
 8001e94:	4942      	ldr	r1, [pc, #264]	; (8001fa0 <__aeabi_dmul+0x578>)
 8001e96:	9d02      	ldr	r5, [sp, #8]
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4465      	add	r5, ip
 8001e9c:	40ac      	lsls	r4, r5
 8001e9e:	4320      	orrs	r0, r4
 8001ea0:	1e41      	subs	r1, r0, #1
 8001ea2:	4188      	sbcs	r0, r1
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	001d      	movs	r5, r3
 8001eaa:	2400      	movs	r4, #0
 8001eac:	4005      	ands	r5, r0
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d04a      	beq.n	8001f48 <__aeabi_dmul+0x520>
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d042      	beq.n	8001f42 <__aeabi_dmul+0x51a>
 8001ebc:	1d03      	adds	r3, r0, #4
 8001ebe:	4283      	cmp	r3, r0
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	0223      	lsls	r3, r4, #8
 8001eca:	d53a      	bpl.n	8001f42 <__aeabi_dmul+0x51a>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e61b      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ed4:	f000 fc96 	bl	8002804 <__clzsi2>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	3115      	adds	r1, #21
 8001ede:	3320      	adds	r3, #32
 8001ee0:	291c      	cmp	r1, #28
 8001ee2:	dd8f      	ble.n	8001e04 <__aeabi_dmul+0x3dc>
 8001ee4:	3808      	subs	r0, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4084      	lsls	r4, r0
 8001eea:	4692      	mov	sl, r2
 8001eec:	46a3      	mov	fp, r4
 8001eee:	e796      	b.n	8001e1e <__aeabi_dmul+0x3f6>
 8001ef0:	f000 fc88 	bl	8002804 <__clzsi2>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	3115      	adds	r1, #21
 8001efa:	3320      	adds	r3, #32
 8001efc:	291c      	cmp	r1, #28
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dmul+0x4da>
 8001f00:	e758      	b.n	8001db4 <__aeabi_dmul+0x38c>
 8001f02:	0002      	movs	r2, r0
 8001f04:	464c      	mov	r4, r9
 8001f06:	3a08      	subs	r2, #8
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4094      	lsls	r4, r2
 8001f0c:	e75d      	b.n	8001dca <__aeabi_dmul+0x3a2>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	e711      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <__aeabi_dmul+0x57c>)
 8001f16:	0026      	movs	r6, r4
 8001f18:	469c      	mov	ip, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	9d02      	ldr	r5, [sp, #8]
 8001f1e:	40cb      	lsrs	r3, r1
 8001f20:	4465      	add	r5, ip
 8001f22:	40ae      	lsls	r6, r5
 8001f24:	431e      	orrs	r6, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	40ab      	lsls	r3, r5
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	4183      	sbcs	r3, r0
 8001f2e:	0030      	movs	r0, r6
 8001f30:	4318      	orrs	r0, r3
 8001f32:	40cc      	lsrs	r4, r1
 8001f34:	0743      	lsls	r3, r0, #29
 8001f36:	d0c7      	beq.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d1bd      	bne.n	8001ebc <__aeabi_dmul+0x494>
 8001f40:	e7c2      	b.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f42:	0765      	lsls	r5, r4, #29
 8001f44:	0264      	lsls	r4, r4, #9
 8001f46:	0b24      	lsrs	r4, r4, #12
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4305      	orrs	r5, r0
 8001f4e:	e5dd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f50:	2500      	movs	r5, #0
 8001f52:	2302      	movs	r3, #2
 8001f54:	2e0f      	cmp	r6, #15
 8001f56:	d10c      	bne.n	8001f72 <__aeabi_dmul+0x54a>
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	4223      	tst	r3, r4
 8001f60:	d00e      	beq.n	8001f80 <__aeabi_dmul+0x558>
 8001f62:	4221      	tst	r1, r4
 8001f64:	d10c      	bne.n	8001f80 <__aeabi_dmul+0x558>
 8001f66:	430c      	orrs	r4, r1
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	003a      	movs	r2, r7
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	e5cc      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f72:	2e0b      	cmp	r6, #11
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dmul+0x550>
 8001f76:	e5a2      	b.n	8001abe <__aeabi_dmul+0x96>
 8001f78:	468b      	mov	fp, r1
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	e5f7      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	465b      	mov	r3, fp
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	431c      	orrs	r4, r3
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4655      	mov	r5, sl
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	e5bb      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f94:	464d      	mov	r5, r9
 8001f96:	0021      	movs	r1, r4
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e7db      	b.n	8001f54 <__aeabi_dmul+0x52c>
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	0000043e 	.word	0x0000043e
 8001fa4:	0000041e 	.word	0x0000041e
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__aeabi_dsub>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	000d      	movs	r5, r1
 8001fba:	0004      	movs	r4, r0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	032b      	lsls	r3, r5, #12
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	0f62      	lsrs	r2, r4, #29
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	00e3      	lsls	r3, r4, #3
 8001fca:	030c      	lsls	r4, r1, #12
 8001fcc:	0a64      	lsrs	r4, r4, #9
 8001fce:	0f47      	lsrs	r7, r0, #29
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	4cd0      	ldr	r4, [pc, #832]	; (8002314 <__aeabi_dsub+0x368>)
 8001fd4:	006e      	lsls	r6, r5, #1
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	b083      	sub	sp, #12
 8001fda:	004a      	lsls	r2, r1, #1
 8001fdc:	00c0      	lsls	r0, r0, #3
 8001fde:	4698      	mov	r8, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	0d76      	lsrs	r6, r6, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	0d52      	lsrs	r2, r2, #21
 8001fe8:	0fc9      	lsrs	r1, r1, #31
 8001fea:	9001      	str	r0, [sp, #4]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x46>
 8001ff0:	e0b9      	b.n	8002166 <__aeabi_dsub+0x1ba>
 8001ff2:	2401      	movs	r4, #1
 8001ff4:	4061      	eors	r1, r4
 8001ff6:	468b      	mov	fp, r1
 8001ff8:	428d      	cmp	r5, r1
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x52>
 8001ffc:	e08d      	b.n	800211a <__aeabi_dsub+0x16e>
 8001ffe:	1ab4      	subs	r4, r6, r2
 8002000:	46a4      	mov	ip, r4
 8002002:	2c00      	cmp	r4, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x5c>
 8002006:	e0b7      	b.n	8002178 <__aeabi_dsub+0x1cc>
 8002008:	2a00      	cmp	r2, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x62>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_dsub+0x1fa>
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <__aeabi_dsub+0x368>)
 8002010:	4296      	cmp	r6, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x6a>
 8002014:	e186      	b.n	8002324 <__aeabi_dsub+0x378>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	4317      	orrs	r7, r2
 800201c:	4662      	mov	r2, ip
 800201e:	2a38      	cmp	r2, #56	; 0x38
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0x78>
 8002022:	e1a4      	b.n	800236e <__aeabi_dsub+0x3c2>
 8002024:	2a1f      	cmp	r2, #31
 8002026:	dd00      	ble.n	800202a <__aeabi_dsub+0x7e>
 8002028:	e21d      	b.n	8002466 <__aeabi_dsub+0x4ba>
 800202a:	4661      	mov	r1, ip
 800202c:	2220      	movs	r2, #32
 800202e:	003c      	movs	r4, r7
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	0001      	movs	r1, r0
 8002034:	4090      	lsls	r0, r2
 8002036:	4094      	lsls	r4, r2
 8002038:	1e42      	subs	r2, r0, #1
 800203a:	4190      	sbcs	r0, r2
 800203c:	4662      	mov	r2, ip
 800203e:	46a0      	mov	r8, r4
 8002040:	4664      	mov	r4, ip
 8002042:	40d7      	lsrs	r7, r2
 8002044:	464a      	mov	r2, r9
 8002046:	40e1      	lsrs	r1, r4
 8002048:	4644      	mov	r4, r8
 800204a:	1bd2      	subs	r2, r2, r7
 800204c:	4691      	mov	r9, r2
 800204e:	430c      	orrs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	1b1c      	subs	r4, r3, r4
 8002054:	42a3      	cmp	r3, r4
 8002056:	4192      	sbcs	r2, r2
 8002058:	464b      	mov	r3, r9
 800205a:	4252      	negs	r2, r2
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	469a      	mov	sl, r3
 8002060:	4653      	mov	r3, sl
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d400      	bmi.n	8002068 <__aeabi_dsub+0xbc>
 8002066:	e12b      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002068:	4653      	mov	r3, sl
 800206a:	025a      	lsls	r2, r3, #9
 800206c:	0a53      	lsrs	r3, r2, #9
 800206e:	469a      	mov	sl, r3
 8002070:	4653      	mov	r3, sl
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0xcc>
 8002076:	e166      	b.n	8002346 <__aeabi_dsub+0x39a>
 8002078:	4650      	mov	r0, sl
 800207a:	f000 fbc3 	bl	8002804 <__clzsi2>
 800207e:	0003      	movs	r3, r0
 8002080:	3b08      	subs	r3, #8
 8002082:	2220      	movs	r2, #32
 8002084:	0020      	movs	r0, r4
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	4651      	mov	r1, sl
 800208a:	40d0      	lsrs	r0, r2
 800208c:	4099      	lsls	r1, r3
 800208e:	0002      	movs	r2, r0
 8002090:	409c      	lsls	r4, r3
 8002092:	430a      	orrs	r2, r1
 8002094:	429e      	cmp	r6, r3
 8002096:	dd00      	ble.n	800209a <__aeabi_dsub+0xee>
 8002098:	e164      	b.n	8002364 <__aeabi_dsub+0x3b8>
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	291f      	cmp	r1, #31
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dsub+0xf8>
 80020a2:	e0fe      	b.n	80022a2 <__aeabi_dsub+0x2f6>
 80020a4:	2320      	movs	r3, #32
 80020a6:	0010      	movs	r0, r2
 80020a8:	0026      	movs	r6, r4
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	409c      	lsls	r4, r3
 80020ae:	4098      	lsls	r0, r3
 80020b0:	40ce      	lsrs	r6, r1
 80020b2:	40ca      	lsrs	r2, r1
 80020b4:	1e63      	subs	r3, r4, #1
 80020b6:	419c      	sbcs	r4, r3
 80020b8:	4330      	orrs	r0, r6
 80020ba:	4692      	mov	sl, r2
 80020bc:	2600      	movs	r6, #0
 80020be:	4304      	orrs	r4, r0
 80020c0:	0763      	lsls	r3, r4, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020c4:	230f      	movs	r3, #15
 80020c6:	4023      	ands	r3, r4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020cc:	1d23      	adds	r3, r4, #4
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	41a4      	sbcs	r4, r4
 80020d2:	4264      	negs	r4, r4
 80020d4:	44a2      	add	sl, r4
 80020d6:	001c      	movs	r4, r3
 80020d8:	4653      	mov	r3, sl
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x134>
 80020de:	e0f2      	b.n	80022c6 <__aeabi_dsub+0x31a>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <__aeabi_dsub+0x368>)
 80020e2:	3601      	adds	r6, #1
 80020e4:	429e      	cmp	r6, r3
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x13e>
 80020e8:	e10f      	b.n	800230a <__aeabi_dsub+0x35e>
 80020ea:	4653      	mov	r3, sl
 80020ec:	498a      	ldr	r1, [pc, #552]	; (8002318 <__aeabi_dsub+0x36c>)
 80020ee:	08e4      	lsrs	r4, r4, #3
 80020f0:	400b      	ands	r3, r1
 80020f2:	0019      	movs	r1, r3
 80020f4:	075b      	lsls	r3, r3, #29
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0572      	lsls	r2, r6, #21
 80020fa:	024c      	lsls	r4, r1, #9
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d52      	lsrs	r2, r2, #21
 8002100:	0512      	lsls	r2, r2, #20
 8002102:	4322      	orrs	r2, r4
 8002104:	07ed      	lsls	r5, r5, #31
 8002106:	432a      	orrs	r2, r5
 8002108:	0018      	movs	r0, r3
 800210a:	0011      	movs	r1, r2
 800210c:	b003      	add	sp, #12
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	46bb      	mov	fp, r7
 8002112:	46b2      	mov	sl, r6
 8002114:	46a9      	mov	r9, r5
 8002116:	46a0      	mov	r8, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	1ab4      	subs	r4, r6, r2
 800211c:	46a4      	mov	ip, r4
 800211e:	2c00      	cmp	r4, #0
 8002120:	dd59      	ble.n	80021d6 <__aeabi_dsub+0x22a>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x17c>
 8002126:	e0b0      	b.n	800228a <__aeabi_dsub+0x2de>
 8002128:	4556      	cmp	r6, sl
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x182>
 800212c:	e0fa      	b.n	8002324 <__aeabi_dsub+0x378>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0412      	lsls	r2, r2, #16
 8002132:	4317      	orrs	r7, r2
 8002134:	4662      	mov	r2, ip
 8002136:	2a38      	cmp	r2, #56	; 0x38
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x190>
 800213a:	e0d4      	b.n	80022e6 <__aeabi_dsub+0x33a>
 800213c:	2a1f      	cmp	r2, #31
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dsub+0x196>
 8002140:	e1c0      	b.n	80024c4 <__aeabi_dsub+0x518>
 8002142:	0039      	movs	r1, r7
 8002144:	3a20      	subs	r2, #32
 8002146:	40d1      	lsrs	r1, r2
 8002148:	4662      	mov	r2, ip
 800214a:	2a20      	cmp	r2, #32
 800214c:	d006      	beq.n	800215c <__aeabi_dsub+0x1b0>
 800214e:	4664      	mov	r4, ip
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	1b12      	subs	r2, r2, r4
 8002154:	003c      	movs	r4, r7
 8002156:	4094      	lsls	r4, r2
 8002158:	4304      	orrs	r4, r0
 800215a:	9401      	str	r4, [sp, #4]
 800215c:	9c01      	ldr	r4, [sp, #4]
 800215e:	1e62      	subs	r2, r4, #1
 8002160:	4194      	sbcs	r4, r2
 8002162:	430c      	orrs	r4, r1
 8002164:	e0c3      	b.n	80022ee <__aeabi_dsub+0x342>
 8002166:	003c      	movs	r4, r7
 8002168:	4304      	orrs	r4, r0
 800216a:	d02b      	beq.n	80021c4 <__aeabi_dsub+0x218>
 800216c:	468b      	mov	fp, r1
 800216e:	428d      	cmp	r5, r1
 8002170:	d02e      	beq.n	80021d0 <__aeabi_dsub+0x224>
 8002172:	4c6a      	ldr	r4, [pc, #424]	; (800231c <__aeabi_dsub+0x370>)
 8002174:	46a4      	mov	ip, r4
 8002176:	44b4      	add	ip, r6
 8002178:	4664      	mov	r4, ip
 800217a:	2c00      	cmp	r4, #0
 800217c:	d05f      	beq.n	800223e <__aeabi_dsub+0x292>
 800217e:	1b94      	subs	r4, r2, r6
 8002180:	46a4      	mov	ip, r4
 8002182:	2e00      	cmp	r6, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x1dc>
 8002186:	e120      	b.n	80023ca <__aeabi_dsub+0x41e>
 8002188:	464c      	mov	r4, r9
 800218a:	431c      	orrs	r4, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x1e4>
 800218e:	e1c7      	b.n	8002520 <__aeabi_dsub+0x574>
 8002190:	4661      	mov	r1, ip
 8002192:	1e4c      	subs	r4, r1, #1
 8002194:	2901      	cmp	r1, #1
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x1ee>
 8002198:	e223      	b.n	80025e2 <__aeabi_dsub+0x636>
 800219a:	4d5e      	ldr	r5, [pc, #376]	; (8002314 <__aeabi_dsub+0x368>)
 800219c:	45ac      	cmp	ip, r5
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x1f6>
 80021a0:	e1d8      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80021a2:	46a4      	mov	ip, r4
 80021a4:	e11a      	b.n	80023dc <__aeabi_dsub+0x430>
 80021a6:	003a      	movs	r2, r7
 80021a8:	4302      	orrs	r2, r0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x202>
 80021ac:	e0e4      	b.n	8002378 <__aeabi_dsub+0x3cc>
 80021ae:	0022      	movs	r2, r4
 80021b0:	3a01      	subs	r2, #1
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x20c>
 80021b6:	e1c3      	b.n	8002540 <__aeabi_dsub+0x594>
 80021b8:	4956      	ldr	r1, [pc, #344]	; (8002314 <__aeabi_dsub+0x368>)
 80021ba:	428c      	cmp	r4, r1
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x214>
 80021be:	e0b1      	b.n	8002324 <__aeabi_dsub+0x378>
 80021c0:	4694      	mov	ip, r2
 80021c2:	e72b      	b.n	800201c <__aeabi_dsub+0x70>
 80021c4:	2401      	movs	r4, #1
 80021c6:	4061      	eors	r1, r4
 80021c8:	468b      	mov	fp, r1
 80021ca:	428d      	cmp	r5, r1
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x224>
 80021ce:	e716      	b.n	8001ffe <__aeabi_dsub+0x52>
 80021d0:	4952      	ldr	r1, [pc, #328]	; (800231c <__aeabi_dsub+0x370>)
 80021d2:	468c      	mov	ip, r1
 80021d4:	44b4      	add	ip, r6
 80021d6:	4664      	mov	r4, ip
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x232>
 80021dc:	e0d3      	b.n	8002386 <__aeabi_dsub+0x3da>
 80021de:	1b91      	subs	r1, r2, r6
 80021e0:	468c      	mov	ip, r1
 80021e2:	2e00      	cmp	r6, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x23c>
 80021e6:	e15e      	b.n	80024a6 <__aeabi_dsub+0x4fa>
 80021e8:	494a      	ldr	r1, [pc, #296]	; (8002314 <__aeabi_dsub+0x368>)
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x244>
 80021ee:	e1be      	b.n	800256e <__aeabi_dsub+0x5c2>
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	464c      	mov	r4, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	430c      	orrs	r4, r1
 80021f8:	46a1      	mov	r9, r4
 80021fa:	4661      	mov	r1, ip
 80021fc:	2938      	cmp	r1, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0x256>
 8002200:	e1ba      	b.n	8002578 <__aeabi_dsub+0x5cc>
 8002202:	291f      	cmp	r1, #31
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x25c>
 8002206:	e227      	b.n	8002658 <__aeabi_dsub+0x6ac>
 8002208:	2420      	movs	r4, #32
 800220a:	1a64      	subs	r4, r4, r1
 800220c:	4649      	mov	r1, r9
 800220e:	40a1      	lsls	r1, r4
 8002210:	001e      	movs	r6, r3
 8002212:	4688      	mov	r8, r1
 8002214:	4661      	mov	r1, ip
 8002216:	40a3      	lsls	r3, r4
 8002218:	40ce      	lsrs	r6, r1
 800221a:	4641      	mov	r1, r8
 800221c:	1e5c      	subs	r4, r3, #1
 800221e:	41a3      	sbcs	r3, r4
 8002220:	4331      	orrs	r1, r6
 8002222:	4319      	orrs	r1, r3
 8002224:	000c      	movs	r4, r1
 8002226:	4663      	mov	r3, ip
 8002228:	4649      	mov	r1, r9
 800222a:	40d9      	lsrs	r1, r3
 800222c:	187f      	adds	r7, r7, r1
 800222e:	1824      	adds	r4, r4, r0
 8002230:	4284      	cmp	r4, r0
 8002232:	419b      	sbcs	r3, r3
 8002234:	425b      	negs	r3, r3
 8002236:	469a      	mov	sl, r3
 8002238:	0016      	movs	r6, r2
 800223a:	44ba      	add	sl, r7
 800223c:	e05d      	b.n	80022fa <__aeabi_dsub+0x34e>
 800223e:	4c38      	ldr	r4, [pc, #224]	; (8002320 <__aeabi_dsub+0x374>)
 8002240:	1c72      	adds	r2, r6, #1
 8002242:	4222      	tst	r2, r4
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x29c>
 8002246:	e0df      	b.n	8002408 <__aeabi_dsub+0x45c>
 8002248:	464a      	mov	r2, r9
 800224a:	431a      	orrs	r2, r3
 800224c:	2e00      	cmp	r6, #0
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x2a6>
 8002250:	e15c      	b.n	800250c <__aeabi_dsub+0x560>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x2ac>
 8002256:	e1cf      	b.n	80025f8 <__aeabi_dsub+0x64c>
 8002258:	003a      	movs	r2, r7
 800225a:	4302      	orrs	r2, r0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x2b4>
 800225e:	e17f      	b.n	8002560 <__aeabi_dsub+0x5b4>
 8002260:	1a1c      	subs	r4, r3, r0
 8002262:	464a      	mov	r2, r9
 8002264:	42a3      	cmp	r3, r4
 8002266:	4189      	sbcs	r1, r1
 8002268:	1bd2      	subs	r2, r2, r7
 800226a:	4249      	negs	r1, r1
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	4692      	mov	sl, r2
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	d400      	bmi.n	8002276 <__aeabi_dsub+0x2ca>
 8002274:	e20a      	b.n	800268c <__aeabi_dsub+0x6e0>
 8002276:	1ac4      	subs	r4, r0, r3
 8002278:	42a0      	cmp	r0, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	464b      	mov	r3, r9
 800227e:	4240      	negs	r0, r0
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	1a3b      	subs	r3, r7, r0
 8002284:	469a      	mov	sl, r3
 8002286:	465d      	mov	r5, fp
 8002288:	e71a      	b.n	80020c0 <__aeabi_dsub+0x114>
 800228a:	003a      	movs	r2, r7
 800228c:	4302      	orrs	r2, r0
 800228e:	d073      	beq.n	8002378 <__aeabi_dsub+0x3cc>
 8002290:	0022      	movs	r2, r4
 8002292:	3a01      	subs	r2, #1
 8002294:	2c01      	cmp	r4, #1
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x2ee>
 8002298:	e0cb      	b.n	8002432 <__aeabi_dsub+0x486>
 800229a:	4554      	cmp	r4, sl
 800229c:	d042      	beq.n	8002324 <__aeabi_dsub+0x378>
 800229e:	4694      	mov	ip, r2
 80022a0:	e748      	b.n	8002134 <__aeabi_dsub+0x188>
 80022a2:	0010      	movs	r0, r2
 80022a4:	3b1f      	subs	r3, #31
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d003      	beq.n	80022b4 <__aeabi_dsub+0x308>
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4314      	orrs	r4, r2
 80022b4:	1e63      	subs	r3, r4, #1
 80022b6:	419c      	sbcs	r4, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	2600      	movs	r6, #0
 80022bc:	469a      	mov	sl, r3
 80022be:	4304      	orrs	r4, r0
 80022c0:	0763      	lsls	r3, r4, #29
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x31a>
 80022c4:	e6fe      	b.n	80020c4 <__aeabi_dsub+0x118>
 80022c6:	4652      	mov	r2, sl
 80022c8:	08e3      	lsrs	r3, r4, #3
 80022ca:	0752      	lsls	r2, r2, #29
 80022cc:	4313      	orrs	r3, r2
 80022ce:	4652      	mov	r2, sl
 80022d0:	46b4      	mov	ip, r6
 80022d2:	08d2      	lsrs	r2, r2, #3
 80022d4:	490f      	ldr	r1, [pc, #60]	; (8002314 <__aeabi_dsub+0x368>)
 80022d6:	458c      	cmp	ip, r1
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dsub+0x384>
 80022da:	0312      	lsls	r2, r2, #12
 80022dc:	0b14      	lsrs	r4, r2, #12
 80022de:	4662      	mov	r2, ip
 80022e0:	0552      	lsls	r2, r2, #21
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	e70c      	b.n	8002100 <__aeabi_dsub+0x154>
 80022e6:	003c      	movs	r4, r7
 80022e8:	4304      	orrs	r4, r0
 80022ea:	1e62      	subs	r2, r4, #1
 80022ec:	4194      	sbcs	r4, r2
 80022ee:	18e4      	adds	r4, r4, r3
 80022f0:	429c      	cmp	r4, r3
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	4252      	negs	r2, r2
 80022f6:	444a      	add	r2, r9
 80022f8:	4692      	mov	sl, r2
 80022fa:	4653      	mov	r3, sl
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	d5df      	bpl.n	80022c0 <__aeabi_dsub+0x314>
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__aeabi_dsub+0x368>)
 8002302:	3601      	adds	r6, #1
 8002304:	429e      	cmp	r6, r3
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x35e>
 8002308:	e0a0      	b.n	800244c <__aeabi_dsub+0x4a0>
 800230a:	0032      	movs	r2, r6
 800230c:	2400      	movs	r4, #0
 800230e:	2300      	movs	r3, #0
 8002310:	e6f6      	b.n	8002100 <__aeabi_dsub+0x154>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	fffff801 	.word	0xfffff801
 8002320:	000007fe 	.word	0x000007fe
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	464a      	mov	r2, r9
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	4313      	orrs	r3, r2
 800232c:	464a      	mov	r2, r9
 800232e:	08d2      	lsrs	r2, r2, #3
 8002330:	0019      	movs	r1, r3
 8002332:	4311      	orrs	r1, r2
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x38c>
 8002336:	e1b5      	b.n	80026a4 <__aeabi_dsub+0x6f8>
 8002338:	2480      	movs	r4, #128	; 0x80
 800233a:	0324      	lsls	r4, r4, #12
 800233c:	4314      	orrs	r4, r2
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	4ad5      	ldr	r2, [pc, #852]	; (8002698 <__aeabi_dsub+0x6ec>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e6dc      	b.n	8002100 <__aeabi_dsub+0x154>
 8002346:	0020      	movs	r0, r4
 8002348:	f000 fa5c 	bl	8002804 <__clzsi2>
 800234c:	0003      	movs	r3, r0
 800234e:	3318      	adds	r3, #24
 8002350:	2b1f      	cmp	r3, #31
 8002352:	dc00      	bgt.n	8002356 <__aeabi_dsub+0x3aa>
 8002354:	e695      	b.n	8002082 <__aeabi_dsub+0xd6>
 8002356:	0022      	movs	r2, r4
 8002358:	3808      	subs	r0, #8
 800235a:	4082      	lsls	r2, r0
 800235c:	2400      	movs	r4, #0
 800235e:	429e      	cmp	r6, r3
 8002360:	dc00      	bgt.n	8002364 <__aeabi_dsub+0x3b8>
 8002362:	e69a      	b.n	800209a <__aeabi_dsub+0xee>
 8002364:	1af6      	subs	r6, r6, r3
 8002366:	4bcd      	ldr	r3, [pc, #820]	; (800269c <__aeabi_dsub+0x6f0>)
 8002368:	401a      	ands	r2, r3
 800236a:	4692      	mov	sl, r2
 800236c:	e6a8      	b.n	80020c0 <__aeabi_dsub+0x114>
 800236e:	003c      	movs	r4, r7
 8002370:	4304      	orrs	r4, r0
 8002372:	1e62      	subs	r2, r4, #1
 8002374:	4194      	sbcs	r4, r2
 8002376:	e66c      	b.n	8002052 <__aeabi_dsub+0xa6>
 8002378:	464a      	mov	r2, r9
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0752      	lsls	r2, r2, #29
 800237e:	4313      	orrs	r3, r2
 8002380:	464a      	mov	r2, r9
 8002382:	08d2      	lsrs	r2, r2, #3
 8002384:	e7a6      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002386:	4cc6      	ldr	r4, [pc, #792]	; (80026a0 <__aeabi_dsub+0x6f4>)
 8002388:	1c72      	adds	r2, r6, #1
 800238a:	4222      	tst	r2, r4
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x3e4>
 800238e:	e0ac      	b.n	80024ea <__aeabi_dsub+0x53e>
 8002390:	464a      	mov	r2, r9
 8002392:	431a      	orrs	r2, r3
 8002394:	2e00      	cmp	r6, #0
 8002396:	d000      	beq.n	800239a <__aeabi_dsub+0x3ee>
 8002398:	e105      	b.n	80025a6 <__aeabi_dsub+0x5fa>
 800239a:	2a00      	cmp	r2, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x3f4>
 800239e:	e156      	b.n	800264e <__aeabi_dsub+0x6a2>
 80023a0:	003a      	movs	r2, r7
 80023a2:	4302      	orrs	r2, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x3fc>
 80023a6:	e0db      	b.n	8002560 <__aeabi_dsub+0x5b4>
 80023a8:	181c      	adds	r4, r3, r0
 80023aa:	429c      	cmp	r4, r3
 80023ac:	419b      	sbcs	r3, r3
 80023ae:	444f      	add	r7, r9
 80023b0:	46ba      	mov	sl, r7
 80023b2:	425b      	negs	r3, r3
 80023b4:	449a      	add	sl, r3
 80023b6:	4653      	mov	r3, sl
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	d400      	bmi.n	80023be <__aeabi_dsub+0x412>
 80023bc:	e780      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023be:	4652      	mov	r2, sl
 80023c0:	4bb6      	ldr	r3, [pc, #728]	; (800269c <__aeabi_dsub+0x6f0>)
 80023c2:	2601      	movs	r6, #1
 80023c4:	401a      	ands	r2, r3
 80023c6:	4692      	mov	sl, r2
 80023c8:	e77a      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023ca:	4cb3      	ldr	r4, [pc, #716]	; (8002698 <__aeabi_dsub+0x6ec>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x426>
 80023d0:	e0c0      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80023d2:	2480      	movs	r4, #128	; 0x80
 80023d4:	464d      	mov	r5, r9
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	4325      	orrs	r5, r4
 80023da:	46a9      	mov	r9, r5
 80023dc:	4664      	mov	r4, ip
 80023de:	2c38      	cmp	r4, #56	; 0x38
 80023e0:	dc53      	bgt.n	800248a <__aeabi_dsub+0x4de>
 80023e2:	4661      	mov	r1, ip
 80023e4:	2c1f      	cmp	r4, #31
 80023e6:	dd00      	ble.n	80023ea <__aeabi_dsub+0x43e>
 80023e8:	e0cd      	b.n	8002586 <__aeabi_dsub+0x5da>
 80023ea:	2520      	movs	r5, #32
 80023ec:	001e      	movs	r6, r3
 80023ee:	1b2d      	subs	r5, r5, r4
 80023f0:	464c      	mov	r4, r9
 80023f2:	40ab      	lsls	r3, r5
 80023f4:	40ac      	lsls	r4, r5
 80023f6:	40ce      	lsrs	r6, r1
 80023f8:	1e5d      	subs	r5, r3, #1
 80023fa:	41ab      	sbcs	r3, r5
 80023fc:	4334      	orrs	r4, r6
 80023fe:	4323      	orrs	r3, r4
 8002400:	464c      	mov	r4, r9
 8002402:	40cc      	lsrs	r4, r1
 8002404:	1b3f      	subs	r7, r7, r4
 8002406:	e045      	b.n	8002494 <__aeabi_dsub+0x4e8>
 8002408:	464a      	mov	r2, r9
 800240a:	1a1c      	subs	r4, r3, r0
 800240c:	1bd1      	subs	r1, r2, r7
 800240e:	42a3      	cmp	r3, r4
 8002410:	4192      	sbcs	r2, r2
 8002412:	4252      	negs	r2, r2
 8002414:	4692      	mov	sl, r2
 8002416:	000a      	movs	r2, r1
 8002418:	4651      	mov	r1, sl
 800241a:	1a52      	subs	r2, r2, r1
 800241c:	4692      	mov	sl, r2
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	d500      	bpl.n	8002424 <__aeabi_dsub+0x478>
 8002422:	e083      	b.n	800252c <__aeabi_dsub+0x580>
 8002424:	4653      	mov	r3, sl
 8002426:	4323      	orrs	r3, r4
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x480>
 800242a:	e621      	b.n	8002070 <__aeabi_dsub+0xc4>
 800242c:	2200      	movs	r2, #0
 800242e:	2500      	movs	r5, #0
 8002430:	e753      	b.n	80022da <__aeabi_dsub+0x32e>
 8002432:	181c      	adds	r4, r3, r0
 8002434:	429c      	cmp	r4, r3
 8002436:	419b      	sbcs	r3, r3
 8002438:	444f      	add	r7, r9
 800243a:	46ba      	mov	sl, r7
 800243c:	425b      	negs	r3, r3
 800243e:	449a      	add	sl, r3
 8002440:	4653      	mov	r3, sl
 8002442:	2601      	movs	r6, #1
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	d400      	bmi.n	800244a <__aeabi_dsub+0x49e>
 8002448:	e73a      	b.n	80022c0 <__aeabi_dsub+0x314>
 800244a:	2602      	movs	r6, #2
 800244c:	4652      	mov	r2, sl
 800244e:	4b93      	ldr	r3, [pc, #588]	; (800269c <__aeabi_dsub+0x6f0>)
 8002450:	2101      	movs	r1, #1
 8002452:	401a      	ands	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	4021      	ands	r1, r4
 8002458:	0862      	lsrs	r2, r4, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	07dc      	lsls	r4, r3, #31
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	469a      	mov	sl, r3
 8002462:	4314      	orrs	r4, r2
 8002464:	e62c      	b.n	80020c0 <__aeabi_dsub+0x114>
 8002466:	0039      	movs	r1, r7
 8002468:	3a20      	subs	r2, #32
 800246a:	40d1      	lsrs	r1, r2
 800246c:	4662      	mov	r2, ip
 800246e:	2a20      	cmp	r2, #32
 8002470:	d006      	beq.n	8002480 <__aeabi_dsub+0x4d4>
 8002472:	4664      	mov	r4, ip
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	1b12      	subs	r2, r2, r4
 8002478:	003c      	movs	r4, r7
 800247a:	4094      	lsls	r4, r2
 800247c:	4304      	orrs	r4, r0
 800247e:	9401      	str	r4, [sp, #4]
 8002480:	9c01      	ldr	r4, [sp, #4]
 8002482:	1e62      	subs	r2, r4, #1
 8002484:	4194      	sbcs	r4, r2
 8002486:	430c      	orrs	r4, r1
 8002488:	e5e3      	b.n	8002052 <__aeabi_dsub+0xa6>
 800248a:	4649      	mov	r1, r9
 800248c:	4319      	orrs	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	1e5c      	subs	r4, r3, #1
 8002492:	41a3      	sbcs	r3, r4
 8002494:	1ac4      	subs	r4, r0, r3
 8002496:	42a0      	cmp	r0, r4
 8002498:	419b      	sbcs	r3, r3
 800249a:	425b      	negs	r3, r3
 800249c:	1afb      	subs	r3, r7, r3
 800249e:	469a      	mov	sl, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	0016      	movs	r6, r2
 80024a4:	e5dc      	b.n	8002060 <__aeabi_dsub+0xb4>
 80024a6:	4649      	mov	r1, r9
 80024a8:	4319      	orrs	r1, r3
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x502>
 80024ac:	e0ae      	b.n	800260c <__aeabi_dsub+0x660>
 80024ae:	4661      	mov	r1, ip
 80024b0:	4664      	mov	r4, ip
 80024b2:	3901      	subs	r1, #1
 80024b4:	2c01      	cmp	r4, #1
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x50e>
 80024b8:	e0e0      	b.n	800267c <__aeabi_dsub+0x6d0>
 80024ba:	4c77      	ldr	r4, [pc, #476]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024bc:	45a4      	cmp	ip, r4
 80024be:	d056      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80024c0:	468c      	mov	ip, r1
 80024c2:	e69a      	b.n	80021fa <__aeabi_dsub+0x24e>
 80024c4:	4661      	mov	r1, ip
 80024c6:	2220      	movs	r2, #32
 80024c8:	003c      	movs	r4, r7
 80024ca:	1a52      	subs	r2, r2, r1
 80024cc:	4094      	lsls	r4, r2
 80024ce:	0001      	movs	r1, r0
 80024d0:	4090      	lsls	r0, r2
 80024d2:	46a0      	mov	r8, r4
 80024d4:	4664      	mov	r4, ip
 80024d6:	1e42      	subs	r2, r0, #1
 80024d8:	4190      	sbcs	r0, r2
 80024da:	4662      	mov	r2, ip
 80024dc:	40e1      	lsrs	r1, r4
 80024de:	4644      	mov	r4, r8
 80024e0:	40d7      	lsrs	r7, r2
 80024e2:	430c      	orrs	r4, r1
 80024e4:	4304      	orrs	r4, r0
 80024e6:	44b9      	add	r9, r7
 80024e8:	e701      	b.n	80022ee <__aeabi_dsub+0x342>
 80024ea:	496b      	ldr	r1, [pc, #428]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024ec:	428a      	cmp	r2, r1
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x546>
 80024f0:	e70c      	b.n	800230c <__aeabi_dsub+0x360>
 80024f2:	1818      	adds	r0, r3, r0
 80024f4:	4298      	cmp	r0, r3
 80024f6:	419b      	sbcs	r3, r3
 80024f8:	444f      	add	r7, r9
 80024fa:	425b      	negs	r3, r3
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	07dc      	lsls	r4, r3, #31
 8002500:	0840      	lsrs	r0, r0, #1
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	469a      	mov	sl, r3
 8002506:	0016      	movs	r6, r2
 8002508:	4304      	orrs	r4, r0
 800250a:	e6d9      	b.n	80022c0 <__aeabi_dsub+0x314>
 800250c:	2a00      	cmp	r2, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x566>
 8002510:	e081      	b.n	8002616 <__aeabi_dsub+0x66a>
 8002512:	003b      	movs	r3, r7
 8002514:	4303      	orrs	r3, r0
 8002516:	d11d      	bne.n	8002554 <__aeabi_dsub+0x5a8>
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	0312      	lsls	r2, r2, #12
 800251e:	e70b      	b.n	8002338 <__aeabi_dsub+0x38c>
 8002520:	08c0      	lsrs	r0, r0, #3
 8002522:	077b      	lsls	r3, r7, #29
 8002524:	465d      	mov	r5, fp
 8002526:	4303      	orrs	r3, r0
 8002528:	08fa      	lsrs	r2, r7, #3
 800252a:	e6d3      	b.n	80022d4 <__aeabi_dsub+0x328>
 800252c:	1ac4      	subs	r4, r0, r3
 800252e:	42a0      	cmp	r0, r4
 8002530:	4180      	sbcs	r0, r0
 8002532:	464b      	mov	r3, r9
 8002534:	4240      	negs	r0, r0
 8002536:	1aff      	subs	r7, r7, r3
 8002538:	1a3b      	subs	r3, r7, r0
 800253a:	469a      	mov	sl, r3
 800253c:	465d      	mov	r5, fp
 800253e:	e597      	b.n	8002070 <__aeabi_dsub+0xc4>
 8002540:	1a1c      	subs	r4, r3, r0
 8002542:	464a      	mov	r2, r9
 8002544:	42a3      	cmp	r3, r4
 8002546:	419b      	sbcs	r3, r3
 8002548:	1bd7      	subs	r7, r2, r7
 800254a:	425b      	negs	r3, r3
 800254c:	1afb      	subs	r3, r7, r3
 800254e:	469a      	mov	sl, r3
 8002550:	2601      	movs	r6, #1
 8002552:	e585      	b.n	8002060 <__aeabi_dsub+0xb4>
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	077b      	lsls	r3, r7, #29
 8002558:	465d      	mov	r5, fp
 800255a:	4303      	orrs	r3, r0
 800255c:	08fa      	lsrs	r2, r7, #3
 800255e:	e6e7      	b.n	8002330 <__aeabi_dsub+0x384>
 8002560:	464a      	mov	r2, r9
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	0752      	lsls	r2, r2, #29
 8002566:	4313      	orrs	r3, r2
 8002568:	464a      	mov	r2, r9
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	e6b5      	b.n	80022da <__aeabi_dsub+0x32e>
 800256e:	08c0      	lsrs	r0, r0, #3
 8002570:	077b      	lsls	r3, r7, #29
 8002572:	4303      	orrs	r3, r0
 8002574:	08fa      	lsrs	r2, r7, #3
 8002576:	e6db      	b.n	8002330 <__aeabi_dsub+0x384>
 8002578:	4649      	mov	r1, r9
 800257a:	4319      	orrs	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	418b      	sbcs	r3, r1
 8002582:	001c      	movs	r4, r3
 8002584:	e653      	b.n	800222e <__aeabi_dsub+0x282>
 8002586:	464d      	mov	r5, r9
 8002588:	3c20      	subs	r4, #32
 800258a:	40e5      	lsrs	r5, r4
 800258c:	2920      	cmp	r1, #32
 800258e:	d005      	beq.n	800259c <__aeabi_dsub+0x5f0>
 8002590:	2440      	movs	r4, #64	; 0x40
 8002592:	1a64      	subs	r4, r4, r1
 8002594:	4649      	mov	r1, r9
 8002596:	40a1      	lsls	r1, r4
 8002598:	430b      	orrs	r3, r1
 800259a:	4698      	mov	r8, r3
 800259c:	4643      	mov	r3, r8
 800259e:	1e5c      	subs	r4, r3, #1
 80025a0:	41a3      	sbcs	r3, r4
 80025a2:	432b      	orrs	r3, r5
 80025a4:	e776      	b.n	8002494 <__aeabi_dsub+0x4e8>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d0e1      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80025aa:	003a      	movs	r2, r7
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	4302      	orrs	r2, r0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x608>
 80025b2:	e6b8      	b.n	8002326 <__aeabi_dsub+0x37a>
 80025b4:	464a      	mov	r2, r9
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	2480      	movs	r4, #128	; 0x80
 80025ba:	4313      	orrs	r3, r2
 80025bc:	464a      	mov	r2, r9
 80025be:	0324      	lsls	r4, r4, #12
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	4222      	tst	r2, r4
 80025c4:	d007      	beq.n	80025d6 <__aeabi_dsub+0x62a>
 80025c6:	08fe      	lsrs	r6, r7, #3
 80025c8:	4226      	tst	r6, r4
 80025ca:	d104      	bne.n	80025d6 <__aeabi_dsub+0x62a>
 80025cc:	465d      	mov	r5, fp
 80025ce:	0032      	movs	r2, r6
 80025d0:	08c3      	lsrs	r3, r0, #3
 80025d2:	077f      	lsls	r7, r7, #29
 80025d4:	433b      	orrs	r3, r7
 80025d6:	0f59      	lsrs	r1, r3, #29
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	430b      	orrs	r3, r1
 80025e0:	e6a6      	b.n	8002330 <__aeabi_dsub+0x384>
 80025e2:	1ac4      	subs	r4, r0, r3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	4180      	sbcs	r0, r0
 80025e8:	464b      	mov	r3, r9
 80025ea:	4240      	negs	r0, r0
 80025ec:	1aff      	subs	r7, r7, r3
 80025ee:	1a3b      	subs	r3, r7, r0
 80025f0:	469a      	mov	sl, r3
 80025f2:	465d      	mov	r5, fp
 80025f4:	2601      	movs	r6, #1
 80025f6:	e533      	b.n	8002060 <__aeabi_dsub+0xb4>
 80025f8:	003b      	movs	r3, r7
 80025fa:	4303      	orrs	r3, r0
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x654>
 80025fe:	e715      	b.n	800242c <__aeabi_dsub+0x480>
 8002600:	08c0      	lsrs	r0, r0, #3
 8002602:	077b      	lsls	r3, r7, #29
 8002604:	465d      	mov	r5, fp
 8002606:	4303      	orrs	r3, r0
 8002608:	08fa      	lsrs	r2, r7, #3
 800260a:	e666      	b.n	80022da <__aeabi_dsub+0x32e>
 800260c:	08c0      	lsrs	r0, r0, #3
 800260e:	077b      	lsls	r3, r7, #29
 8002610:	4303      	orrs	r3, r0
 8002612:	08fa      	lsrs	r2, r7, #3
 8002614:	e65e      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002616:	003a      	movs	r2, r7
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	4302      	orrs	r2, r0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x674>
 800261e:	e682      	b.n	8002326 <__aeabi_dsub+0x37a>
 8002620:	464a      	mov	r2, r9
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	2480      	movs	r4, #128	; 0x80
 8002626:	4313      	orrs	r3, r2
 8002628:	464a      	mov	r2, r9
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4222      	tst	r2, r4
 8002630:	d007      	beq.n	8002642 <__aeabi_dsub+0x696>
 8002632:	08fe      	lsrs	r6, r7, #3
 8002634:	4226      	tst	r6, r4
 8002636:	d104      	bne.n	8002642 <__aeabi_dsub+0x696>
 8002638:	465d      	mov	r5, fp
 800263a:	0032      	movs	r2, r6
 800263c:	08c3      	lsrs	r3, r0, #3
 800263e:	077f      	lsls	r7, r7, #29
 8002640:	433b      	orrs	r3, r7
 8002642:	0f59      	lsrs	r1, r3, #29
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	0749      	lsls	r1, r1, #29
 800264a:	430b      	orrs	r3, r1
 800264c:	e670      	b.n	8002330 <__aeabi_dsub+0x384>
 800264e:	08c0      	lsrs	r0, r0, #3
 8002650:	077b      	lsls	r3, r7, #29
 8002652:	4303      	orrs	r3, r0
 8002654:	08fa      	lsrs	r2, r7, #3
 8002656:	e640      	b.n	80022da <__aeabi_dsub+0x32e>
 8002658:	464c      	mov	r4, r9
 800265a:	3920      	subs	r1, #32
 800265c:	40cc      	lsrs	r4, r1
 800265e:	4661      	mov	r1, ip
 8002660:	2920      	cmp	r1, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x6c6>
 8002664:	4666      	mov	r6, ip
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	1b89      	subs	r1, r1, r6
 800266a:	464e      	mov	r6, r9
 800266c:	408e      	lsls	r6, r1
 800266e:	4333      	orrs	r3, r6
 8002670:	4698      	mov	r8, r3
 8002672:	4643      	mov	r3, r8
 8002674:	1e59      	subs	r1, r3, #1
 8002676:	418b      	sbcs	r3, r1
 8002678:	431c      	orrs	r4, r3
 800267a:	e5d8      	b.n	800222e <__aeabi_dsub+0x282>
 800267c:	181c      	adds	r4, r3, r0
 800267e:	4284      	cmp	r4, r0
 8002680:	4180      	sbcs	r0, r0
 8002682:	444f      	add	r7, r9
 8002684:	46ba      	mov	sl, r7
 8002686:	4240      	negs	r0, r0
 8002688:	4482      	add	sl, r0
 800268a:	e6d9      	b.n	8002440 <__aeabi_dsub+0x494>
 800268c:	4653      	mov	r3, sl
 800268e:	4323      	orrs	r3, r4
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x6e8>
 8002692:	e6cb      	b.n	800242c <__aeabi_dsub+0x480>
 8002694:	e614      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	000007ff 	.word	0x000007ff
 800269c:	ff7fffff 	.word	0xff7fffff
 80026a0:	000007fe 	.word	0x000007fe
 80026a4:	2300      	movs	r3, #0
 80026a6:	4a01      	ldr	r2, [pc, #4]	; (80026ac <__aeabi_dsub+0x700>)
 80026a8:	001c      	movs	r4, r3
 80026aa:	e529      	b.n	8002100 <__aeabi_dsub+0x154>
 80026ac:	000007ff 	.word	0x000007ff

080026b0 <__aeabi_dcmpun>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	0005      	movs	r5, r0
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026b6:	031c      	lsls	r4, r3, #12
 80026b8:	0016      	movs	r6, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	030a      	lsls	r2, r1, #12
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	0b12      	lsrs	r2, r2, #12
 80026c2:	0d49      	lsrs	r1, r1, #21
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	4281      	cmp	r1, r0
 80026ca:	d008      	beq.n	80026de <__aeabi_dcmpun+0x2e>
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026d4:	0020      	movs	r0, r4
 80026d6:	4330      	orrs	r0, r6
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	4198      	sbcs	r0, r3
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	2001      	movs	r0, #1
 80026e0:	432a      	orrs	r2, r5
 80026e2:	d1fb      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026e4:	e7f2      	b.n	80026cc <__aeabi_dcmpun+0x1c>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	000007ff 	.word	0x000007ff

080026ec <__aeabi_d2iz>:
 80026ec:	000a      	movs	r2, r1
 80026ee:	b530      	push	{r4, r5, lr}
 80026f0:	4c13      	ldr	r4, [pc, #76]	; (8002740 <__aeabi_d2iz+0x54>)
 80026f2:	0053      	lsls	r3, r2, #1
 80026f4:	0309      	lsls	r1, r1, #12
 80026f6:	0005      	movs	r5, r0
 80026f8:	0b09      	lsrs	r1, r1, #12
 80026fa:	2000      	movs	r0, #0
 80026fc:	0d5b      	lsrs	r3, r3, #21
 80026fe:	0fd2      	lsrs	r2, r2, #31
 8002700:	42a3      	cmp	r3, r4
 8002702:	dd04      	ble.n	800270e <__aeabi_d2iz+0x22>
 8002704:	480f      	ldr	r0, [pc, #60]	; (8002744 <__aeabi_d2iz+0x58>)
 8002706:	4283      	cmp	r3, r0
 8002708:	dd02      	ble.n	8002710 <__aeabi_d2iz+0x24>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <__aeabi_d2iz+0x5c>)
 800270c:	18d0      	adds	r0, r2, r3
 800270e:	bd30      	pop	{r4, r5, pc}
 8002710:	2080      	movs	r0, #128	; 0x80
 8002712:	0340      	lsls	r0, r0, #13
 8002714:	4301      	orrs	r1, r0
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <__aeabi_d2iz+0x60>)
 8002718:	1ac0      	subs	r0, r0, r3
 800271a:	281f      	cmp	r0, #31
 800271c:	dd08      	ble.n	8002730 <__aeabi_d2iz+0x44>
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <__aeabi_d2iz+0x64>)
 8002720:	1ac3      	subs	r3, r0, r3
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000b      	movs	r3, r1
 8002726:	4258      	negs	r0, r3
 8002728:	2a00      	cmp	r2, #0
 800272a:	d1f0      	bne.n	800270e <__aeabi_d2iz+0x22>
 800272c:	0018      	movs	r0, r3
 800272e:	e7ee      	b.n	800270e <__aeabi_d2iz+0x22>
 8002730:	4c08      	ldr	r4, [pc, #32]	; (8002754 <__aeabi_d2iz+0x68>)
 8002732:	40c5      	lsrs	r5, r0
 8002734:	46a4      	mov	ip, r4
 8002736:	4463      	add	r3, ip
 8002738:	4099      	lsls	r1, r3
 800273a:	000b      	movs	r3, r1
 800273c:	432b      	orrs	r3, r5
 800273e:	e7f2      	b.n	8002726 <__aeabi_d2iz+0x3a>
 8002740:	000003fe 	.word	0x000003fe
 8002744:	0000041d 	.word	0x0000041d
 8002748:	7fffffff 	.word	0x7fffffff
 800274c:	00000433 	.word	0x00000433
 8002750:	00000413 	.word	0x00000413
 8002754:	fffffbed 	.word	0xfffffbed

08002758 <__aeabi_i2d>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2800      	cmp	r0, #0
 800275c:	d016      	beq.n	800278c <__aeabi_i2d+0x34>
 800275e:	17c3      	asrs	r3, r0, #31
 8002760:	18c5      	adds	r5, r0, r3
 8002762:	405d      	eors	r5, r3
 8002764:	0fc4      	lsrs	r4, r0, #31
 8002766:	0028      	movs	r0, r5
 8002768:	f000 f84c 	bl	8002804 <__clzsi2>
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <__aeabi_i2d+0x5c>)
 800276e:	1a1b      	subs	r3, r3, r0
 8002770:	280a      	cmp	r0, #10
 8002772:	dc16      	bgt.n	80027a2 <__aeabi_i2d+0x4a>
 8002774:	0002      	movs	r2, r0
 8002776:	002e      	movs	r6, r5
 8002778:	3215      	adds	r2, #21
 800277a:	4096      	lsls	r6, r2
 800277c:	220b      	movs	r2, #11
 800277e:	1a12      	subs	r2, r2, r0
 8002780:	40d5      	lsrs	r5, r2
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	032d      	lsls	r5, r5, #12
 8002786:	0b2d      	lsrs	r5, r5, #12
 8002788:	0d5b      	lsrs	r3, r3, #21
 800278a:	e003      	b.n	8002794 <__aeabi_i2d+0x3c>
 800278c:	2400      	movs	r4, #0
 800278e:	2300      	movs	r3, #0
 8002790:	2500      	movs	r5, #0
 8002792:	2600      	movs	r6, #0
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	432b      	orrs	r3, r5
 8002798:	07e4      	lsls	r4, r4, #31
 800279a:	4323      	orrs	r3, r4
 800279c:	0030      	movs	r0, r6
 800279e:	0019      	movs	r1, r3
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	380b      	subs	r0, #11
 80027a4:	4085      	lsls	r5, r0
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	032d      	lsls	r5, r5, #12
 80027aa:	2600      	movs	r6, #0
 80027ac:	0b2d      	lsrs	r5, r5, #12
 80027ae:	0d5b      	lsrs	r3, r3, #21
 80027b0:	e7f0      	b.n	8002794 <__aeabi_i2d+0x3c>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_ui2d>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	1e04      	subs	r4, r0, #0
 80027bc:	d010      	beq.n	80027e0 <__aeabi_ui2d+0x28>
 80027be:	f000 f821 	bl	8002804 <__clzsi2>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <__aeabi_ui2d+0x48>)
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	280a      	cmp	r0, #10
 80027c8:	dc11      	bgt.n	80027ee <__aeabi_ui2d+0x36>
 80027ca:	220b      	movs	r2, #11
 80027cc:	0021      	movs	r1, r4
 80027ce:	1a12      	subs	r2, r2, r0
 80027d0:	40d1      	lsrs	r1, r2
 80027d2:	3015      	adds	r0, #21
 80027d4:	030a      	lsls	r2, r1, #12
 80027d6:	055b      	lsls	r3, r3, #21
 80027d8:	4084      	lsls	r4, r0
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	e001      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	4313      	orrs	r3, r2
 80027e8:	0020      	movs	r0, r4
 80027ea:	0019      	movs	r1, r3
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	0022      	movs	r2, r4
 80027f0:	380b      	subs	r0, #11
 80027f2:	4082      	lsls	r2, r0
 80027f4:	055b      	lsls	r3, r3, #21
 80027f6:	0312      	lsls	r2, r2, #12
 80027f8:	2400      	movs	r4, #0
 80027fa:	0b12      	lsrs	r2, r2, #12
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	e7f1      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 8002800:	0000041e 	.word	0x0000041e

08002804 <__clzsi2>:
 8002804:	211c      	movs	r1, #28
 8002806:	2301      	movs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	4298      	cmp	r0, r3
 800280c:	d301      	bcc.n	8002812 <__clzsi2+0xe>
 800280e:	0c00      	lsrs	r0, r0, #16
 8002810:	3910      	subs	r1, #16
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	4298      	cmp	r0, r3
 8002816:	d301      	bcc.n	800281c <__clzsi2+0x18>
 8002818:	0a00      	lsrs	r0, r0, #8
 800281a:	3908      	subs	r1, #8
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	4298      	cmp	r0, r3
 8002820:	d301      	bcc.n	8002826 <__clzsi2+0x22>
 8002822:	0900      	lsrs	r0, r0, #4
 8002824:	3904      	subs	r1, #4
 8002826:	a202      	add	r2, pc, #8	; (adr r2, 8002830 <__clzsi2+0x2c>)
 8002828:	5c10      	ldrb	r0, [r2, r0]
 800282a:	1840      	adds	r0, r0, r1
 800282c:	4770      	bx	lr
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	02020304 	.word	0x02020304
 8002834:	01010101 	.word	0x01010101
	...

08002840 <__clzdi2>:
 8002840:	b510      	push	{r4, lr}
 8002842:	2900      	cmp	r1, #0
 8002844:	d103      	bne.n	800284e <__clzdi2+0xe>
 8002846:	f7ff ffdd 	bl	8002804 <__clzsi2>
 800284a:	3020      	adds	r0, #32
 800284c:	e002      	b.n	8002854 <__clzdi2+0x14>
 800284e:	0008      	movs	r0, r1
 8002850:	f7ff ffd8 	bl	8002804 <__clzsi2>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	46c0      	nop			; (mov r8, r8)

08002858 <ColorSensor_Init>:
#include "colorsensor.h"

extern speaker Speaker;

void ColorSensor_Init(colorsensor* sensor, I2C_HandleTypeDef* i2c_handle, uint8_t slave_addr) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	701a      	strb	r2, [r3, #0]
    sensor->i2c = i2c_handle;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	601a      	str	r2, [r3, #0]
    sensor->slave_address = slave_addr;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1dfa      	adds	r2, r7, #7
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	711a      	strb	r2, [r3, #4]

    // Manually initialize arrays since they cannot be initialized in the struct
    sensor->i2c_commands[0] = 0x05;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2205      	movs	r2, #5
 8002878:	731a      	strb	r2, [r3, #12]
    sensor->i2c_commands[1] = 0x06;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2206      	movs	r2, #6
 800287e:	735a      	strb	r2, [r3, #13]
    sensor->i2c_commands[2] = 0x07;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2207      	movs	r2, #7
 8002884:	739a      	strb	r2, [r3, #14]

    for (uint8_t i = 0; i < sizeof(sensor->rgb_data) / sizeof(sensor->rgb_data[0]); i++)
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e00d      	b.n	80028ac <ColorSensor_Init+0x54>
    	sensor->rgb_data[i] = 0x00;
 8002890:	2117      	movs	r1, #23
 8002892:	187b      	adds	r3, r7, r1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	3306      	adds	r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < sizeof(sensor->rgb_data) / sizeof(sensor->rgb_data[0]); i++)
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	3201      	adds	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	2317      	movs	r3, #23
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d9ec      	bls.n	8002890 <ColorSensor_Init+0x38>

    sensor->current_channel = 0;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	73da      	strb	r2, [r3, #15]
    sensor->enabled = false;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	741a      	strb	r2, [r3, #16]
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b006      	add	sp, #24
 80028c8:	bd80      	pop	{r7, pc}

080028ca <ColorSensor_EnableStatus>:

void ColorSensor_EnableStatus(colorsensor* sensor, bool enable)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	000a      	movs	r2, r1
 80028d4:	1cfb      	adds	r3, r7, #3
 80028d6:	701a      	strb	r2, [r3, #0]
	sensor->enabled = enable;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1cfa      	adds	r2, r7, #3
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	741a      	strb	r2, [r3, #16]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <DistanceSensor_Init>:
#define MIN_DISTANCE 10

extern speaker Speaker;

void DistanceSensor_Init(distancesensor* sensor, TIM_HandleTypeDef* timer, feature_id ID, GPIO_TypeDef* icGPIOPort, uint16_t icGPIOPin, GPIO_TypeDef* statusGPIOPort, uint16_t statusGPIOPin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	701a      	strb	r2, [r3, #0]
	sensor->timer = timer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	601a      	str	r2, [r3, #0]

	sensor->timeDifference = 0;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
	sensor->countAtMaxDistance = 0;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	731a      	strb	r2, [r3, #12]

	sensor->ID = ID;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1dfa      	adds	r2, r7, #7
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	735a      	strb	r2, [r3, #13]

	sensor->icGPIOPort = icGPIOPort;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	611a      	str	r2, [r3, #16]
	sensor->icGPIOPin = icGPIOPin;
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	2318      	movs	r3, #24
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	8293      	strh	r3, [r2, #20]

	sensor->statusGPIOPort = statusGPIOPort;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	619a      	str	r2, [r3, #24]
	sensor->statusGPIOPin = statusGPIOPin;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	18ba      	adds	r2, r7, r2
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	839a      	strh	r2, [r3, #28]

	HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6998      	ldr	r0, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8b9b      	ldrh	r3, [r3, #28]
 800293a:	2201      	movs	r2, #1
 800293c:	0019      	movs	r1, r3
 800293e:	f001 ff92 	bl	8004866 <HAL_GPIO_WritePin>


}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8a9b      	ldrh	r3, [r3, #20]
 800295c:	0019      	movs	r1, r3
 800295e:	0010      	movs	r0, r2
 8002960:	f001 ff64 	bl	800482c <HAL_GPIO_ReadPin>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d010      	beq.n	800298a <DistanceSensor_InputCaptureInterrupt+0x3e>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f005 fae2 	bl	8007f38 <HAL_TIM_ReadCapturedValue>
 8002974:	0003      	movs	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2104      	movs	r1, #4
 8002982:	0018      	movs	r0, r3
 8002984:	f004 ff2c 	bl	80077e0 <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002988:	e034      	b.n	80029f4 <DistanceSensor_InputCaptureInterrupt+0xa8>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	0018      	movs	r0, r3
 8002992:	f005 fad1 	bl	8007f38 <HAL_TIM_ReadCapturedValue>
 8002996:	0003      	movs	r3, r0
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	88da      	ldrh	r2, [r3, #6]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	889b      	ldrh	r3, [r3, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d909      	bls.n	80029be <DistanceSensor_InputCaptureInterrupt+0x72>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	88db      	ldrh	r3, [r3, #6]
 80029ae:	001a      	movs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	889b      	ldrh	r3, [r3, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	001a      	movs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e00b      	b.n	80029d6 <DistanceSensor_InputCaptureInterrupt+0x8a>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	889b      	ldrh	r3, [r3, #4]
 80029c2:	001a      	movs	r2, r3
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	88d2      	ldrh	r2, [r2, #6]
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	001a      	movs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2104      	movs	r1, #4
 80029dc:	0018      	movs	r0, r3
 80029de:	f004 fe73 	bl	80076c8 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <DistanceSensor_InputCaptureInterrupt+0xb0>)
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
			DistanceSensor_Handle(sensor);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f81c 	bl	8002a2c <DistanceSensor_Handle>
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	0000ffff 	.word	0x0000ffff

08002a00 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fe f869 	bl	8000ae4 <__aeabi_ui2f>
 8002a12:	1c03      	adds	r3, r0, #0
 8002a14:	4904      	ldr	r1, [pc, #16]	; (8002a28 <DistanceSensor_GetDistance+0x28>)
 8002a16:	1c18      	adds	r0, r3, #0
 8002a18:	f7fd fe9a 	bl	8000750 <__aeabi_fdiv>
 8002a1c:	1c03      	adds	r3, r0, #0
}
 8002a1e:	1c18      	adds	r0, r3, #0
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	42680000 	.word	0x42680000

08002a2c <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff ffe2 	bl	8002a00 <DistanceSensor_GetDistance>
 8002a3c:	1c03      	adds	r3, r0, #0
 8002a3e:	60fb      	str	r3, [r7, #12]

	if (distance > MIN_DISTANCE)
 8002a40:	4921      	ldr	r1, [pc, #132]	; (8002ac8 <DistanceSensor_Handle+0x9c>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7fd fd56 	bl	80004f4 <__aeabi_fcmpgt>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d017      	beq.n	8002a7c <DistanceSensor_Handle+0x50>
	{
		sensor->countAtMaxDistance = 0;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6998      	ldr	r0, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8b9b      	ldrh	r3, [r3, #28]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	f001 ff02 	bl	8004866 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_SET);

		if (Speaker.hasFault)
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002a64:	7d1b      	ldrb	r3, [r3, #20]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d029      	beq.n	8002ac0 <DistanceSensor_Handle+0x94>
			Speaker_Stop(&Speaker, sensor->ID);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7b5a      	ldrb	r2, [r3, #13]
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 fe2f 	bl	80036d8 <Speaker_Stop>
	else
	{
		sensor->countAtMaxDistance++;
	}

}
 8002a7a:	e021      	b.n	8002ac0 <DistanceSensor_Handle+0x94>
	else if (sensor->countAtMaxDistance > 5)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7b1b      	ldrb	r3, [r3, #12]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d917      	bls.n	8002ab4 <DistanceSensor_Handle+0x88>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6998      	ldr	r0, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8b9b      	ldrh	r3, [r3, #28]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	0019      	movs	r1, r3
 8002a90:	f001 fee9 	bl	8004866 <HAL_GPIO_WritePin>
		if (!Speaker.hasFault)
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002a96:	7d1b      	ldrb	r3, [r3, #20]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4053      	eors	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <DistanceSensor_Handle+0x94>
			Speaker_Start(&Speaker, sensor->ID);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7b5a      	ldrb	r2, [r3, #13]
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 fdde 	bl	800366e <Speaker_Start>
}
 8002ab2:	e005      	b.n	8002ac0 <DistanceSensor_Handle+0x94>
		sensor->countAtMaxDistance++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7b1b      	ldrb	r3, [r3, #12]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	731a      	strb	r2, [r3, #12]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	41200000 	.word	0x41200000
 8002acc:	20000478 	.word	0x20000478

08002ad0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d104      	bne.n	8002aec <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff ff31 	bl	800294c <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM22) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 8002aea:	e008      	b.n	8002afe <HAL_TIM_IC_CaptureCallback+0x2e>
	else if (htim->Instance == TIM22) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d103      	bne.n	8002afe <HAL_TIM_IC_CaptureCallback+0x2e>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff27 	bl	800294c <DistanceSensor_InputCaptureInterrupt>
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	40010800 	.word	0x40010800
 8002b0c:	20000438 	.word	0x20000438
 8002b10:	40011400 	.word	0x40011400
 8002b14:	20000458 	.word	0x20000458

08002b18 <HAL_TIM_PeriodElapsedCallback>:
    }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2 && Speaker.beepLengthOn != 0)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	05db      	lsls	r3, r3, #23
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d108      	bne.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x26>
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b2e:	891b      	ldrh	r3, [r3, #8]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Speaker_BeepInterrupt(&Speaker);
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fdff 	bl	800373c <Speaker_BeepInterrupt>
	}

}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	20000478 	.word	0x20000478

08002b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b52:	f001 fa09 	bl	8003f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b56:	f000 f8c1 	bl	8002cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5a:	f000 fbcf 	bl	80032fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b5e:	f000 fbaf 	bl	80032c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b62:	f000 f937 	bl	8002dd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002b66:	f000 f975 	bl	8002e54 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b6a:	f000 fb79 	bl	8003260 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002b6e:	f000 f9a9 	bl	8002ec4 <MX_TIM2_Init>
  MX_TIM22_Init();
 8002b72:	f000 facd 	bl	8003110 <MX_TIM22_Init>
  MX_TIM21_Init();
 8002b76:	f000 fa23 	bl	8002fc0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  DistanceSensor_Init(&Front, &htim21, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
 8002b7a:	23a0      	movs	r3, #160	; 0xa0
 8002b7c:	05da      	lsls	r2, r3, #23
 8002b7e:	4949      	ldr	r1, [pc, #292]	; (8002ca4 <main+0x158>)
 8002b80:	4849      	ldr	r0, [pc, #292]	; (8002ca8 <main+0x15c>)
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	23a0      	movs	r3, #160	; 0xa0
 8002b8a:	05db      	lsls	r3, r3, #23
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2304      	movs	r3, #4
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	0013      	movs	r3, r2
 8002b94:	2200      	movs	r2, #0
 8002b96:	f7ff fea7 	bl	80028e8 <DistanceSensor_Init>
  DistanceSensor_Init(&Back, &htim22, DISTANCE_SENSOR_BACK_ID, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_BACK_STATUS_GPIO_Port, DISTANCE_SENSOR_BACK_STATUS_Pin);
 8002b9a:	4a44      	ldr	r2, [pc, #272]	; (8002cac <main+0x160>)
 8002b9c:	4944      	ldr	r1, [pc, #272]	; (8002cb0 <main+0x164>)
 8002b9e:	4845      	ldr	r0, [pc, #276]	; (8002cb4 <main+0x168>)
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	4b41      	ldr	r3, [pc, #260]	; (8002cac <main+0x160>)
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	2310      	movs	r3, #16
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	0013      	movs	r3, r2
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f7ff fe9a 	bl	80028e8 <DistanceSensor_Init>
  RFID_Init(&RFID_Module);
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <main+0x16c>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fcfc 	bl	80035b4 <RFID_Init>
  Speaker_Init(&Speaker, &RFID_Module, &htim2);
 8002bbc:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <main+0x170>)
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <main+0x16c>)
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <main+0x174>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fd1a 	bl	80035fc <Speaker_Init>
  ColorSensor_Init(&Color, &hi2c1, COLORSENSOR_SLAVE_ADDRESS);
 8002bc8:	493e      	ldr	r1, [pc, #248]	; (8002cc4 <main+0x178>)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <main+0x17c>)
 8002bcc:	2220      	movs	r2, #32
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff fe42 	bl	8002858 <ColorSensor_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //DistanceSensor_Start(&Front);
  //DistanceSensor_Start(&Back);
  ColorSensor_EnableStatus(&Color, true);
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <main+0x17c>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fe76 	bl	80028ca <ColorSensor_EnableStatus>
  RFID_Module.botEnabled = true;
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <main+0x16c>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	719a      	strb	r2, [r3, #6]

  uint8_t buffer[12];
  uint8_t registers[] = {0x00, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0c};
 8002be4:	003b      	movs	r3, r7
 8002be6:	4a39      	ldr	r2, [pc, #228]	; (8002ccc <main+0x180>)
 8002be8:	6811      	ldr	r1, [r2, #0]
 8002bea:	6019      	str	r1, [r3, #0]
 8002bec:	8891      	ldrh	r1, [r2, #4]
 8002bee:	8099      	strh	r1, [r3, #4]
 8002bf0:	7992      	ldrb	r2, [r2, #6]
 8002bf2:	719a      	strb	r2, [r3, #6]
  uint8_t i = 0;
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]



  while (1)
  {
	  buffer[0] = registers[i];
 8002bfc:	2317      	movs	r3, #23
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	003a      	movs	r2, r7
 8002c04:	5cd2      	ldrb	r2, [r2, r3]
 8002c06:	2108      	movs	r1, #8
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	701a      	strb	r2, [r3, #0]
	  //ColorSensor_ReceiveTransmit(&Color, sendData, receiveData);
	  //RFID_SecurityLogic(&RFID_Module);
	  if (HAL_I2C_Master_Transmit(&hi2c1, 0x10 << 1, buffer, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002c0c:	187a      	adds	r2, r7, r1
 8002c0e:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <main+0x178>)
 8002c10:	2301      	movs	r3, #1
 8002c12:	425b      	negs	r3, r3
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2301      	movs	r3, #1
 8002c18:	2120      	movs	r1, #32
 8002c1a:	f001 fed7 	bl	80049cc <HAL_I2C_Master_Transmit>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d001      	beq.n	8002c26 <main+0xda>
		  Error_Handler();
 8002c22:	f000 fbe7 	bl	80033f4 <Error_Handler>
	  }

	  if (HAL_I2C_Master_Receive(&hi2c1, 0x10 << 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002c26:	2308      	movs	r3, #8
 8002c28:	18fa      	adds	r2, r7, r3
 8002c2a:	4826      	ldr	r0, [pc, #152]	; (8002cc4 <main+0x178>)
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	425b      	negs	r3, r3
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2302      	movs	r3, #2
 8002c34:	2120      	movs	r1, #32
 8002c36:	f001 ffd1 	bl	8004bdc <HAL_I2C_Master_Receive>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <main+0xf6>
	  		  Error_Handler();
 8002c3e:	f000 fbd9 	bl	80033f4 <Error_Handler>
	  }


	  sprintf(Data, "%u %u %u\r\n", registers[i], buffer[0], buffer[1]);
 8002c42:	2517      	movs	r5, #23
 8002c44:	197b      	adds	r3, r7, r5
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	003a      	movs	r2, r7
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2108      	movs	r1, #8
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	001c      	movs	r4, r3
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	491d      	ldr	r1, [pc, #116]	; (8002cd0 <main+0x184>)
 8002c5c:	481d      	ldr	r0, [pc, #116]	; (8002cd4 <main+0x188>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	0023      	movs	r3, r4
 8002c62:	f007 f825 	bl	8009cb0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <main+0x188>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fd fa4d 	bl	8000108 <strlen>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	425b      	negs	r3, r3
 8002c76:	4917      	ldr	r1, [pc, #92]	; (8002cd4 <main+0x188>)
 8002c78:	4817      	ldr	r0, [pc, #92]	; (8002cd8 <main+0x18c>)
 8002c7a:	f005 fd89 	bl	8008790 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8002c7e:	20fa      	movs	r0, #250	; 0xfa
 8002c80:	f001 f9e2 	bl	8004048 <HAL_Delay>
	  i++;
 8002c84:	197b      	adds	r3, r7, r5
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
	  i %= 7;
 8002c8e:	197c      	adds	r4, r7, r5
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2107      	movs	r1, #7
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fad8 	bl	800024c <__aeabi_uidivmod>
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	7023      	strb	r3, [r4, #0]
	  buffer[0] = registers[i];
 8002ca0:	e7ac      	b.n	8002bfc <main+0xb0>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	20000324 	.word	0x20000324
 8002ca8:	20000438 	.word	0x20000438
 8002cac:	50000400 	.word	0x50000400
 8002cb0:	20000364 	.word	0x20000364
 8002cb4:	20000458 	.word	0x20000458
 8002cb8:	2000042c 	.word	0x2000042c
 8002cbc:	200002e4 	.word	0x200002e4
 8002cc0:	20000478 	.word	0x20000478
 8002cc4:	200001f0 	.word	0x200001f0
 8002cc8:	20000490 	.word	0x20000490
 8002ccc:	0800c0cc 	.word	0x0800c0cc
 8002cd0:	0800c0c0 	.word	0x0800c0c0
 8002cd4:	200004a4 	.word	0x200004a4
 8002cd8:	200003a4 	.word	0x200003a4

08002cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b09b      	sub	sp, #108	; 0x6c
 8002ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce2:	2434      	movs	r4, #52	; 0x34
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	2334      	movs	r3, #52	; 0x34
 8002cea:	001a      	movs	r2, r3
 8002cec:	2100      	movs	r1, #0
 8002cee:	f007 f84b 	bl	8009d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	2314      	movs	r3, #20
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f007 f843 	bl	8009d88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	0018      	movs	r0, r3
 8002d06:	231c      	movs	r3, #28
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	f007 f83c 	bl	8009d88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <SystemClock_Config+0xf0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <SystemClock_Config+0xf4>)
 8002d16:	401a      	ands	r2, r3
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <SystemClock_Config+0xf0>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0109      	lsls	r1, r1, #4
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d22:	0021      	movs	r1, r4
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2202      	movs	r2, #2
 8002d28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2210      	movs	r2, #16
 8002d34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2202      	movs	r2, #2
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	02d2      	lsls	r2, r2, #11
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	03d2      	lsls	r2, r2, #15
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	0018      	movs	r0, r3
 8002d56:	f003 f989 	bl	800606c <HAL_RCC_OscConfig>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002d5e:	f000 fb49 	bl	80033f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	2120      	movs	r1, #32
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	220f      	movs	r2, #15
 8002d68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2101      	movs	r1, #1
 8002d86:	0018      	movs	r0, r3
 8002d88:	f003 fcda 	bl	8006740 <HAL_RCC_ClockConfig>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d001      	beq.n	8002d94 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002d90:	f000 fb30 	bl	80033f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	2209      	movs	r2, #9
 8002d98:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	0018      	movs	r0, r3
 8002daa:	f003 ff71 	bl	8006c90 <HAL_RCCEx_PeriphCLKConfig>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002db2:	f000 fb1f 	bl	80033f4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	045b      	lsls	r3, r3, #17
 8002dba:	2200      	movs	r2, #0
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f003 fe06 	bl	80069d0 <HAL_RCC_MCOConfig>
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b01b      	add	sp, #108	; 0x6c
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	ffffe7ff 	.word	0xffffe7ff

08002dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <MX_I2C1_Init+0x78>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00807CBB;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <MX_I2C1_Init+0x7c>)
 8002de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002de6:	2220      	movs	r2, #32
 8002de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 fd45 	bl	80048a0 <HAL_I2C_Init>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e1a:	f000 faeb 	bl	80033f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e20:	2100      	movs	r1, #0
 8002e22:	0018      	movs	r0, r3
 8002e24:	f003 f872 	bl	8005f0c <HAL_I2CEx_ConfigAnalogFilter>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e2c:	f000 fae2 	bl	80033f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	0018      	movs	r0, r3
 8002e36:	f003 f8b5 	bl	8005fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e3e:	f000 fad9 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200001f0 	.word	0x200001f0
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	00807cbb 	.word	0x00807cbb

08002e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e5a:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <MX_SPI1_Init+0x6c>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e60:	2282      	movs	r2, #130	; 0x82
 8002e62:	0052      	lsls	r2, r2, #1
 8002e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e88:	2238      	movs	r2, #56	; 0x38
 8002e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f004 f82c 	bl	8006f04 <HAL_SPI_Init>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002eb0:	f000 faa0 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	2000028c 	.word	0x2000028c
 8002ec0:	40013000 	.word	0x40013000

08002ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	2318      	movs	r3, #24
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f006 ff57 	bl	8009d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	2310      	movs	r3, #16
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f006 ff4f 	bl	8009d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	003b      	movs	r3, r7
 8002eec:	0018      	movs	r0, r3
 8002eee:	2310      	movs	r3, #16
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f006 ff48 	bl	8009d88 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	05d2      	lsls	r2, r2, #23
 8002efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f02:	221f      	movs	r2, #31
 8002f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f0e:	22f4      	movs	r2, #244	; 0xf4
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f004 fb22 	bl	800756c <HAL_TIM_Base_Init>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002f2c:	f000 fa62 	bl	80033f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	2118      	movs	r1, #24
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0152      	lsls	r2, r2, #5
 8002f38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f3a:	187a      	adds	r2, r7, r1
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f3e:	0011      	movs	r1, r2
 8002f40:	0018      	movs	r0, r3
 8002f42:	f004 ff25 	bl	8007d90 <HAL_TIM_ConfigClockSource>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f4a:	f000 fa53 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f50:	0018      	movs	r0, r3
 8002f52:	f004 fb71 	bl	8007638 <HAL_TIM_PWM_Init>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f5a:	f000 fa4b 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5e:	2110      	movs	r1, #16
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f6c:	187a      	adds	r2, r7, r1
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f005 fb60 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002f7c:	f000 fa3a 	bl	80033f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f80:	003b      	movs	r3, r7
 8002f82:	2260      	movs	r2, #96	; 0x60
 8002f84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 244;
 8002f86:	003b      	movs	r3, r7
 8002f88:	22f4      	movs	r2, #244	; 0xf4
 8002f8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8c:	003b      	movs	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f92:	003b      	movs	r3, r7
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f98:	0039      	movs	r1, r7
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f004 fe30 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002fa8:	f000 fa24 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <MX_TIM2_Init+0xf8>)
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fdb6 	bl	8003b20 <HAL_TIM_MspPostInit>

}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b00a      	add	sp, #40	; 0x28
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200002e4 	.word	0x200002e4

08002fc0 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	2328      	movs	r3, #40	; 0x28
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	0018      	movs	r0, r3
 8002fcc:	2310      	movs	r3, #16
 8002fce:	001a      	movs	r2, r3
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f006 fed9 	bl	8009d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	0018      	movs	r0, r3
 8002fdc:	2308      	movs	r3, #8
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f006 fed1 	bl	8009d88 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	0018      	movs	r0, r3
 8002fec:	2310      	movs	r3, #16
 8002fee:	001a      	movs	r2, r3
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f006 fec9 	bl	8009d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ff6:	003b      	movs	r3, r7
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f006 fec2 	bl	8009d88 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <MX_TIM21_Init+0x144>)
 8003006:	4a40      	ldr	r2, [pc, #256]	; (8003108 <MX_TIM21_Init+0x148>)
 8003008:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 800300a:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <MX_TIM21_Init+0x144>)
 800300c:	221f      	movs	r2, #31
 800300e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <MX_TIM21_Init+0x144>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <MX_TIM21_Init+0x144>)
 8003018:	4a3c      	ldr	r2, [pc, #240]	; (800310c <MX_TIM21_Init+0x14c>)
 800301a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <MX_TIM21_Init+0x144>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <MX_TIM21_Init+0x144>)
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <MX_TIM21_Init+0x144>)
 800302a:	0018      	movs	r0, r3
 800302c:	f004 fa9e 	bl	800756c <HAL_TIM_Base_Init>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8003034:	f000 f9de 	bl	80033f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003038:	2128      	movs	r1, #40	; 0x28
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	0152      	lsls	r2, r2, #5
 8003040:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003042:	187a      	adds	r2, r7, r1
 8003044:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <MX_TIM21_Init+0x144>)
 8003046:	0011      	movs	r1, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f004 fea1 	bl	8007d90 <HAL_TIM_ConfigClockSource>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8003052:	f000 f9cf 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <MX_TIM21_Init+0x144>)
 8003058:	0018      	movs	r0, r3
 800305a:	f004 fbff 	bl	800785c <HAL_TIM_IC_Init>
 800305e:	1e03      	subs	r3, r0, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8003062:	f000 f9c7 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <MX_TIM21_Init+0x144>)
 8003068:	0018      	movs	r0, r3
 800306a:	f004 fae5 	bl	8007638 <HAL_TIM_PWM_Init>
 800306e:	1e03      	subs	r3, r0, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM21_Init+0xb6>
  {
    Error_Handler();
 8003072:	f000 f9bf 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003076:	2120      	movs	r1, #32
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003084:	187a      	adds	r2, r7, r1
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <MX_TIM21_Init+0x144>)
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f005 fad4 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM21_Init+0xd8>
  {
    Error_Handler();
 8003094:	f000 f9ae 	bl	80033f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003098:	2110      	movs	r1, #16
 800309a:	187b      	adds	r3, r7, r1
 800309c:	220a      	movs	r2, #10
 800309e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	2201      	movs	r2, #1
 80030a4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030b2:	1879      	adds	r1, r7, r1
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <MX_TIM21_Init+0x144>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	0018      	movs	r0, r3
 80030ba:	f004 fcff 	bl	8007abc <HAL_TIM_IC_ConfigChannel>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM21_Init+0x106>
  {
    Error_Handler();
 80030c2:	f000 f997 	bl	80033f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c6:	003b      	movs	r3, r7
 80030c8:	2260      	movs	r2, #96	; 0x60
 80030ca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80030cc:	003b      	movs	r3, r7
 80030ce:	220a      	movs	r2, #10
 80030d0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d2:	003b      	movs	r3, r7
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d8:	003b      	movs	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030de:	0039      	movs	r1, r7
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <MX_TIM21_Init+0x144>)
 80030e2:	2204      	movs	r2, #4
 80030e4:	0018      	movs	r0, r3
 80030e6:	f004 fd8d 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM21_Init+0x132>
  {
    Error_Handler();
 80030ee:	f000 f981 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <MX_TIM21_Init+0x144>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 fd13 	bl	8003b20 <HAL_TIM_MspPostInit>

}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b00e      	add	sp, #56	; 0x38
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	20000324 	.word	0x20000324
 8003108:	40010800 	.word	0x40010800
 800310c:	0000ffff 	.word	0x0000ffff

08003110 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	; 0x38
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003116:	2328      	movs	r3, #40	; 0x28
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	0018      	movs	r0, r3
 800311c:	2310      	movs	r3, #16
 800311e:	001a      	movs	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f006 fe31 	bl	8009d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003126:	2320      	movs	r3, #32
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	0018      	movs	r0, r3
 800312c:	2308      	movs	r3, #8
 800312e:	001a      	movs	r2, r3
 8003130:	2100      	movs	r1, #0
 8003132:	f006 fe29 	bl	8009d88 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003136:	2310      	movs	r3, #16
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	0018      	movs	r0, r3
 800313c:	2310      	movs	r3, #16
 800313e:	001a      	movs	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	f006 fe21 	bl	8009d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003146:	003b      	movs	r3, r7
 8003148:	0018      	movs	r0, r3
 800314a:	2310      	movs	r3, #16
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f006 fe1a 	bl	8009d88 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <MX_TIM22_Init+0x144>)
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <MX_TIM22_Init+0x148>)
 8003158:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <MX_TIM22_Init+0x144>)
 800315c:	221f      	movs	r2, #31
 800315e:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003160:	4b3c      	ldr	r3, [pc, #240]	; (8003254 <MX_TIM22_Init+0x144>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <MX_TIM22_Init+0x144>)
 8003168:	4a3c      	ldr	r2, [pc, #240]	; (800325c <MX_TIM22_Init+0x14c>)
 800316a:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316c:	4b39      	ldr	r3, [pc, #228]	; (8003254 <MX_TIM22_Init+0x144>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <MX_TIM22_Init+0x144>)
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <MX_TIM22_Init+0x144>)
 800317a:	0018      	movs	r0, r3
 800317c:	f004 f9f6 	bl	800756c <HAL_TIM_Base_Init>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM22_Init+0x78>
  {
    Error_Handler();
 8003184:	f000 f936 	bl	80033f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003188:	2128      	movs	r1, #40	; 0x28
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	0152      	lsls	r2, r2, #5
 8003190:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003192:	187a      	adds	r2, r7, r1
 8003194:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <MX_TIM22_Init+0x144>)
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f004 fdf9 	bl	8007d90 <HAL_TIM_ConfigClockSource>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80031a2:	f000 f927 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim22) != HAL_OK)
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <MX_TIM22_Init+0x144>)
 80031a8:	0018      	movs	r0, r3
 80031aa:	f004 fb57 	bl	800785c <HAL_TIM_IC_Init>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 80031b2:	f000 f91f 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <MX_TIM22_Init+0x144>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f004 fa3d 	bl	8007638 <HAL_TIM_PWM_Init>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 80031c2:	f000 f917 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c6:	2120      	movs	r1, #32
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80031d4:	187a      	adds	r2, r7, r1
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <MX_TIM22_Init+0x144>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f005 fa2c 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM22_Init+0xd8>
  {
    Error_Handler();
 80031e4:	f000 f906 	bl	80033f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80031e8:	2110      	movs	r1, #16
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	220a      	movs	r2, #10
 80031ee:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2201      	movs	r2, #1
 80031f4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim22, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003202:	1879      	adds	r1, r7, r1
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MX_TIM22_Init+0x144>)
 8003206:	2200      	movs	r2, #0
 8003208:	0018      	movs	r0, r3
 800320a:	f004 fc57 	bl	8007abc <HAL_TIM_IC_ConfigChannel>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM22_Init+0x106>
  {
    Error_Handler();
 8003212:	f000 f8ef 	bl	80033f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003216:	003b      	movs	r3, r7
 8003218:	2260      	movs	r2, #96	; 0x60
 800321a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 800321c:	003b      	movs	r3, r7
 800321e:	220a      	movs	r2, #10
 8003220:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003222:	003b      	movs	r3, r7
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003228:	003b      	movs	r3, r7
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800322e:	0039      	movs	r1, r7
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <MX_TIM22_Init+0x144>)
 8003232:	2204      	movs	r2, #4
 8003234:	0018      	movs	r0, r3
 8003236:	f004 fce5 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM22_Init+0x132>
  {
    Error_Handler();
 800323e:	f000 f8d9 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <MX_TIM22_Init+0x144>)
 8003244:	0018      	movs	r0, r3
 8003246:	f000 fc6b 	bl	8003b20 <HAL_TIM_MspPostInit>

}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b00e      	add	sp, #56	; 0x38
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000364 	.word	0x20000364
 8003258:	40011400 	.word	0x40011400
 800325c:	0000ffff 	.word	0x0000ffff

08003260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <MX_USART1_UART_Init+0x5c>)
 8003268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 800326c:	22e1      	movs	r2, #225	; 0xe1
 800326e:	0252      	lsls	r2, r2, #9
 8003270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003286:	220c      	movs	r2, #12
 8003288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <MX_USART1_UART_Init+0x58>)
 80032a4:	0018      	movs	r0, r3
 80032a6:	f005 fa1f 	bl	80086e8 <HAL_UART_Init>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d001      	beq.n	80032b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80032ae:	f000 f8a1 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200003a4 	.word	0x200003a4
 80032bc:	40013800 	.word	0x40013800

080032c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_DMA_Init+0x38>)
 80032c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MX_DMA_Init+0x38>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_DMA_Init+0x38>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	200a      	movs	r0, #10
 80032e4:	f000 ff80 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032e8:	200a      	movs	r0, #10
 80032ea:	f000 ff92 	bl	8004212 <HAL_NVIC_EnableIRQ>

}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b002      	add	sp, #8
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40021000 	.word	0x40021000

080032fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	240c      	movs	r4, #12
 8003304:	193b      	adds	r3, r7, r4
 8003306:	0018      	movs	r0, r3
 8003308:	2314      	movs	r3, #20
 800330a:	001a      	movs	r2, r3
 800330c:	2100      	movs	r1, #0
 800330e:	f006 fd3b 	bl	8009d88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <MX_GPIO_Init+0xec>)
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <MX_GPIO_Init+0xec>)
 8003318:	2101      	movs	r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
 800331e:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <MX_GPIO_Init+0xec>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <MX_GPIO_Init+0xec>)
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <MX_GPIO_Init+0xec>)
 8003330:	2102      	movs	r1, #2
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <MX_GPIO_Init+0xec>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_RESET);
 8003342:	492a      	ldr	r1, [pc, #168]	; (80033ec <MX_GPIO_Init+0xf0>)
 8003344:	23a0      	movs	r3, #160	; 0xa0
 8003346:	05db      	lsls	r3, r3, #23
 8003348:	2200      	movs	r2, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f001 fa8b 	bl	8004866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <MX_GPIO_Init+0xf4>)
 8003352:	2200      	movs	r2, #0
 8003354:	2109      	movs	r1, #9
 8003356:	0018      	movs	r0, r3
 8003358:	f001 fa85 	bl	8004866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	0159      	lsls	r1, r3, #5
 8003360:	23a0      	movs	r3, #160	; 0xa0
 8003362:	05db      	lsls	r3, r3, #23
 8003364:	2201      	movs	r2, #1
 8003366:	0018      	movs	r0, r3
 8003368:	f001 fa7d 	bl	8004866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2210      	movs	r2, #16
 8003370:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	193b      	adds	r3, r7, r4
 8003374:	2201      	movs	r2, #1
 8003376:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	193b      	adds	r3, r7, r4
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003384:	193a      	adds	r2, r7, r4
 8003386:	23a0      	movs	r3, #160	; 0xa0
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	0011      	movs	r1, r2
 800338c:	0018      	movs	r0, r3
 800338e:	f001 f8d7 	bl	8004540 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 8003392:	193b      	adds	r3, r7, r4
 8003394:	2209      	movs	r2, #9
 8003396:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	193b      	adds	r3, r7, r4
 800339a:	2201      	movs	r2, #1
 800339c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	2201      	movs	r2, #1
 80033a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <MX_GPIO_Init+0xf4>)
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f001 f8c5 	bl	8004540 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_STATUS_Pin DISTANCE_SENSOR_FRONT_STATUS_Pin */
  GPIO_InitStruct.Pin = RFID_STATUS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin;
 80033b6:	0021      	movs	r1, r4
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	2290      	movs	r2, #144	; 0x90
 80033bc:	0212      	lsls	r2, r2, #8
 80033be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2201      	movs	r2, #1
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	187a      	adds	r2, r7, r1
 80033d4:	23a0      	movs	r3, #160	; 0xa0
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f001 f8b0 	bl	8004540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b009      	add	sp, #36	; 0x24
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	00008010 	.word	0x00008010
 80033f0:	50000400 	.word	0x50000400

080033f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f8:	b672      	cpsid	i
}
 80033fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033fc:	e7fe      	b.n	80033fc <Error_Handler+0x8>
	...

08003400 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b087      	sub	sp, #28
 8003404:	af02      	add	r7, sp, #8
 8003406:	0002      	movs	r2, r0
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800340c:	240f      	movs	r4, #15
 800340e:	193a      	adds	r2, r7, r4
 8003410:	1df9      	adds	r1, r7, #7
 8003412:	4806      	ldr	r0, [pc, #24]	; (800342c <RC522_SPI_Transfer+0x2c>)
 8003414:	2364      	movs	r3, #100	; 0x64
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2301      	movs	r3, #1
 800341a:	f003 fe07 	bl	800702c <HAL_SPI_TransmitReceive>

	return rx_data;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	781b      	ldrb	r3, [r3, #0]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b005      	add	sp, #20
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	2000028c 	.word	0x2000028c

08003430 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	0002      	movs	r2, r0
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	1c0a      	adds	r2, r1, #0
 8003440:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	2200      	movs	r2, #0
 8003448:	2110      	movs	r1, #16
 800344a:	0018      	movs	r0, r3
 800344c:	f001 fa0b 	bl	8004866 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	227e      	movs	r2, #126	; 0x7e
 800345a:	4013      	ands	r3, r2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff ffce 	bl	8003400 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8003464:	1dbb      	adds	r3, r7, #6
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff ffc9 	bl	8003400 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800346e:	23a0      	movs	r3, #160	; 0xa0
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	2201      	movs	r2, #1
 8003474:	2110      	movs	r1, #16
 8003476:	0018      	movs	r0, r3
 8003478:	f001 f9f5 	bl	8004866 <HAL_GPIO_WritePin>
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8003484:	b5b0      	push	{r4, r5, r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	0002      	movs	r2, r0
 800348c:	1dfb      	adds	r3, r7, #7
 800348e:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003490:	23a0      	movs	r3, #160	; 0xa0
 8003492:	05db      	lsls	r3, r3, #23
 8003494:	2200      	movs	r2, #0
 8003496:	2110      	movs	r1, #16
 8003498:	0018      	movs	r0, r3
 800349a:	f001 f9e4 	bl	8004866 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	227e      	movs	r2, #126	; 0x7e
 80034a8:	4013      	ands	r3, r2
 80034aa:	b25b      	sxtb	r3, r3
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	4252      	negs	r2, r2
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff ffa2 	bl	8003400 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80034bc:	250f      	movs	r5, #15
 80034be:	197c      	adds	r4, r7, r5
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7ff ff9d 	bl	8003400 <RC522_SPI_Transfer>
 80034c6:	0003      	movs	r3, r0
 80034c8:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80034ca:	23a0      	movs	r3, #160	; 0xa0
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	2201      	movs	r2, #1
 80034d0:	2110      	movs	r1, #16
 80034d2:	0018      	movs	r0, r3
 80034d4:	f001 f9c7 	bl	8004866 <HAL_GPIO_WritePin>

	return val;
 80034d8:	197b      	adds	r3, r7, r5
 80034da:	781b      	ldrb	r3, [r3, #0]

}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}

080034e4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80034e4:	b5b0      	push	{r4, r5, r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	0002      	movs	r2, r0
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	1dbb      	adds	r3, r7, #6
 80034f2:	1c0a      	adds	r2, r1, #0
 80034f4:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80034f6:	250f      	movs	r5, #15
 80034f8:	197c      	adds	r4, r7, r5
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff ffc0 	bl	8003484 <Read_MFRC522>
 8003504:	0003      	movs	r3, r0
 8003506:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003508:	197a      	adds	r2, r7, r5
 800350a:	1dbb      	adds	r3, r7, #6
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	b2da      	uxtb	r2, r3
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff ff88 	bl	8003430 <Write_MFRC522>
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bdb0      	pop	{r4, r5, r7, pc}

08003528 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800352c:	2014      	movs	r0, #20
 800352e:	f7ff ffa9 	bl	8003484 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8003532:	2103      	movs	r1, #3
 8003534:	2014      	movs	r0, #20
 8003536:	f7ff ffd5 	bl	80034e4 <SetBitMask>
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8003544:	210f      	movs	r1, #15
 8003546:	2001      	movs	r0, #1
 8003548:	f7ff ff72 	bl	8003430 <Write_MFRC522>
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003558:	23a0      	movs	r3, #160	; 0xa0
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	2201      	movs	r2, #1
 800355e:	2110      	movs	r1, #16
 8003560:	0018      	movs	r0, r3
 8003562:	f001 f980 	bl	8004866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <MFRC522_Init+0x5c>)
 8003568:	2201      	movs	r2, #1
 800356a:	2101      	movs	r1, #1
 800356c:	0018      	movs	r0, r3
 800356e:	f001 f97a 	bl	8004866 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8003572:	f7ff ffe5 	bl	8003540 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8003576:	218d      	movs	r1, #141	; 0x8d
 8003578:	202a      	movs	r0, #42	; 0x2a
 800357a:	f7ff ff59 	bl	8003430 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800357e:	213e      	movs	r1, #62	; 0x3e
 8003580:	202b      	movs	r0, #43	; 0x2b
 8003582:	f7ff ff55 	bl	8003430 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8003586:	211e      	movs	r1, #30
 8003588:	202d      	movs	r0, #45	; 0x2d
 800358a:	f7ff ff51 	bl	8003430 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800358e:	2100      	movs	r1, #0
 8003590:	202c      	movs	r0, #44	; 0x2c
 8003592:	f7ff ff4d 	bl	8003430 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8003596:	2140      	movs	r1, #64	; 0x40
 8003598:	2015      	movs	r0, #21
 800359a:	f7ff ff49 	bl	8003430 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 800359e:	213d      	movs	r1, #61	; 0x3d
 80035a0:	2011      	movs	r0, #17
 80035a2:	f7ff ff45 	bl	8003430 <Write_MFRC522>

	AntennaOn();
 80035a6:	f7ff ffbf 	bl	8003528 <AntennaOn>
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	50000400 	.word	0x50000400

080035b4 <RFID_Init>:

extern speaker Speaker;
extern UART_HandleTypeDef huart1;
extern char Data;

void RFID_Init(rfid* sensor) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    MFRC522_Init();
 80035bc:	f7ff ffca 	bl	8003554 <MFRC522_Init>
    memset(sensor->prevSerialNum, 0, 5);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2205      	movs	r2, #5
 80035c4:	2100      	movs	r1, #0
 80035c6:	0018      	movs	r0, r3
 80035c8:	f006 fbde 	bl	8009d88 <memset>
    sensor->status = CARD_IDLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	715a      	strb	r2, [r3, #5]

    sensor->botEnabled = false;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	719a      	strb	r2, [r3, #6]
    sensor->initialSuccessfulCardTap = true;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	71da      	strb	r2, [r3, #7]
    sensor->initialFailedCardTap = true;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	721a      	strb	r2, [r3, #8]

    HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	2201      	movs	r2, #1
 80035ee:	0018      	movs	r0, r3
 80035f0:	f001 f939 	bl	8004866 <HAL_GPIO_WritePin>
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <Speaker_Init>:

#define CLK_SPEED 32000000
#define DEFAULT_AUTORELOAD 488

void Speaker_Init(speaker* speaker, rfid* rfid_struct, TIM_HandleTypeDef* timer)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	speaker->rfid_sensor = rfid_struct;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	601a      	str	r2, [r3, #0]
	speaker->timer = timer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]

	speaker->hasFault = false;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	751a      	strb	r2, [r3, #20]
	speaker->beepLengthOn = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	811a      	strh	r2, [r3, #8]
	speaker->beepLengthPeriod = 0;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	815a      	strh	r2, [r3, #10]
	speaker->wantedNumBeeps = 0;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	731a      	strb	r2, [r3, #12]
	speaker->currentNumBeeps = 0;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	735a      	strb	r2, [r3, #13]
	speaker->timerCounter = 0;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	81da      	strh	r2, [r3, #14]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003638:	2317      	movs	r3, #23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e00b      	b.n	800365a <Speaker_Init+0x5e>
	{
		speaker->featureFault[i] = false;
 8003642:	2117      	movs	r1, #23
 8003644:	187b      	adds	r3, r7, r1
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	18d3      	adds	r3, r2, r3
 800364c:	2200      	movs	r2, #0
 800364e:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003650:	187b      	adds	r3, r7, r1
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	187b      	adds	r3, r7, r1
 8003656:	3201      	adds	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	2317      	movs	r3, #23
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d9ee      	bls.n	8003642 <Speaker_Init+0x46>
	}


}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b006      	add	sp, #24
 800366c:	bd80      	pop	{r7, pc}

0800366e <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	000a      	movs	r2, r1
 8003678:	1cfb      	adds	r3, r7, #3
 800367a:	701a      	strb	r2, [r3, #0]

	speaker->featureFault[ID] = true;
 800367c:	1cfb      	adds	r3, r7, #3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	18d3      	adds	r3, r2, r3
 8003684:	2201      	movs	r2, #1
 8003686:	741a      	strb	r2, [r3, #16]
	if ((speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]) && speaker->rfid_sensor->botEnabled)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7c1b      	ldrb	r3, [r3, #16]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <Speaker_Start+0x38>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7c5b      	ldrb	r3, [r3, #17]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <Speaker_Start+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7c9b      	ldrb	r3, [r3, #18]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <Speaker_Start+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	799b      	ldrb	r3, [r3, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00f      	beq.n	80036d0 <Speaker_Start+0x62>
	{
		speaker->hasFault = true;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	751a      	strb	r2, [r3, #20]
		Speaker_SetAutoReload(speaker, DEFAULT_AUTORELOAD);
 80036b6:	23f4      	movs	r3, #244	; 0xf4
 80036b8:	005a      	lsls	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0011      	movs	r1, r2
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f898 	bl	80037f4 <Speaker_SetAutoReload>
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2100      	movs	r1, #0
 80036ca:	0018      	movs	r0, r3
 80036cc:	f003 fffc 	bl	80076c8 <HAL_TIM_PWM_Start>
	}

}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	000a      	movs	r2, r1
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 80036e6:	1cfb      	adds	r3, r7, #3
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	2200      	movs	r2, #0
 80036f0:	741a      	strb	r2, [r3, #16]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7c1b      	ldrb	r3, [r3, #16]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	4053      	eors	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <Speaker_Stop+0x5c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c5b      	ldrb	r3, [r3, #17]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2201      	movs	r2, #1
 800370a:	4053      	eors	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <Speaker_Stop+0x5c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7c9b      	ldrb	r3, [r3, #18]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2201      	movs	r2, #1
 800371a:	4053      	eors	r3, r2
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <Speaker_Stop+0x5c>
	{
		speaker->hasFault = false;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	751a      	strb	r2, [r3, #20]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2100      	movs	r1, #0
 800372e:	0018      	movs	r0, r3
 8003730:	f004 f856 	bl	80077e0 <HAL_TIM_PWM_Stop>
	}
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}

0800373c <Speaker_BeepInterrupt>:
	return ((HAL_TIM_Base_GetState(speaker->timer) == HAL_TIM_STATE_BUSY) ? true : false);
}
*/

void Speaker_BeepInterrupt(speaker* speaker)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7b5b      	ldrb	r3, [r3, #13]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7b1b      	ldrb	r3, [r3, #12]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	429a      	cmp	r2, r3
 8003752:	d240      	bcs.n	80037d6 <Speaker_BeepInterrupt+0x9a>
    {

        if (speaker->timerCounter == speaker->beepLengthOn)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	89db      	ldrh	r3, [r3, #14]
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	891b      	ldrh	r3, [r3, #8]
 800375e:	b29b      	uxth	r3, r3
 8003760:	429a      	cmp	r2, r3
 8003762:	d110      	bne.n	8003786 <Speaker_BeepInterrupt+0x4a>
        {
            HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2100      	movs	r1, #0
 800376a:	0018      	movs	r0, r3
 800376c:	f004 f838 	bl	80077e0 <HAL_TIM_PWM_Stop>
            __HAL_TIM_ENABLE(speaker->timer);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e01f      	b.n	80037c6 <Speaker_BeepInterrupt+0x8a>
        	//__NOP();
        }
        else if (speaker->timerCounter >= speaker->beepLengthPeriod)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	89db      	ldrh	r3, [r3, #14]
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	895b      	ldrh	r3, [r3, #10]
 8003790:	b29b      	uxth	r3, r3
 8003792:	429a      	cmp	r2, r3
 8003794:	d317      	bcc.n	80037c6 <Speaker_BeepInterrupt+0x8a>
        {
        	speaker->currentNumBeeps++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7b5b      	ldrb	r3, [r3, #13]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	735a      	strb	r2, [r3, #13]
			speaker->timerCounter = 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	81da      	strh	r2, [r3, #14]

            if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7b5b      	ldrb	r3, [r3, #13]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7b1b      	ldrb	r3, [r3, #12]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d205      	bcs.n	80037c6 <Speaker_BeepInterrupt+0x8a>
            {
                HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2100      	movs	r1, #0
 80037c0:	0018      	movs	r0, r3
 80037c2:	f003 ff81 	bl	80076c8 <HAL_TIM_PWM_Start>

            	//__NOP();
            }

        }
        speaker->timerCounter++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	89db      	ldrh	r3, [r3, #14]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	81da      	strh	r2, [r3, #14]
    else
    {
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
        HAL_TIM_Base_Stop_IT(speaker->timer);
    }
}
 80037d4:	e00a      	b.n	80037ec <Speaker_BeepInterrupt+0xb0>
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2100      	movs	r1, #0
 80037dc:	0018      	movs	r0, r3
 80037de:	f003 ffff 	bl	80077e0 <HAL_TIM_PWM_Stop>
        HAL_TIM_Base_Stop_IT(speaker->timer);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f003 ff00 	bl	80075ec <HAL_TIM_Base_Stop_IT>
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <Speaker_SetAutoReload>:

void Speaker_SetAutoReload(speaker* speaker, uint16_t value)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	000a      	movs	r2, r1
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(speaker->timer, value);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1cba      	adds	r2, r7, #2
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	1cba      	adds	r2, r7, #2
 8003814:	8812      	ldrh	r2, [r2, #0]
 8003816:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(speaker->timer, TIM_CHANNEL_1, value / 2);
 8003818:	1cbb      	adds	r3, r7, #2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_MspInit+0x24>)
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_MspInit+0x24>)
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_MspInit+0x24>)
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_MspInit+0x24>)
 8003846:	2180      	movs	r1, #128	; 0x80
 8003848:	0549      	lsls	r1, r1, #21
 800384a:	430a      	orrs	r2, r1
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	240c      	movs	r4, #12
 8003862:	193b      	adds	r3, r7, r4
 8003864:	0018      	movs	r0, r3
 8003866:	2314      	movs	r3, #20
 8003868:	001a      	movs	r2, r3
 800386a:	2100      	movs	r1, #0
 800386c:	f006 fa8c 	bl	8009d88 <memset>
  if(hi2c->Instance==I2C1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_I2C_MspInit+0xf8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d166      	bne.n	8003948 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_I2C_MspInit+0xfc>)
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4b35      	ldr	r3, [pc, #212]	; (8003954 <HAL_I2C_MspInit+0xfc>)
 8003880:	2102      	movs	r1, #2
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_I2C_MspInit+0xfc>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003892:	0021      	movs	r1, r4
 8003894:	187b      	adds	r3, r7, r1
 8003896:	22c0      	movs	r2, #192	; 0xc0
 8003898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800389a:	187b      	adds	r3, r7, r1
 800389c:	2212      	movs	r2, #18
 800389e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	2203      	movs	r2, #3
 80038aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	2201      	movs	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <HAL_I2C_MspInit+0x100>)
 80038b6:	0019      	movs	r1, r3
 80038b8:	0010      	movs	r0, r2
 80038ba:	f000 fe41 	bl	8004540 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	0018      	movs	r0, r3
 80038c4:	f002 fbba 	bl	800603c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f002 fbb5 	bl	800603c <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_I2C_MspInit+0xfc>)
 80038d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_I2C_MspInit+0xfc>)
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0389      	lsls	r1, r1, #14
 80038dc:	430a      	orrs	r2, r1
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_I2C_MspInit+0x104>)
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_I2C_MspInit+0x108>)
 80038e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_I2C_MspInit+0x104>)
 80038e8:	2206      	movs	r2, #6
 80038ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_I2C_MspInit+0x104>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_I2C_MspInit+0x104>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_I2C_MspInit+0x104>)
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0052      	lsls	r2, r2, #1
 8003904:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	00d2      	lsls	r2, r2, #3
 800390c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	0192      	lsls	r2, r2, #6
 800391a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_I2C_MspInit+0x104>)
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fc94 	bl	800424c <HAL_DMA_Init>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_MspInit+0xd4>
    {
      Error_Handler();
 8003928:	f7ff fd64 	bl	80033f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_I2C_MspInit+0x104>)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	2017      	movs	r0, #23
 800393e:	f000 fc53 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003942:	2017      	movs	r0, #23
 8003944:	f000 fc65 	bl	8004212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b009      	add	sp, #36	; 0x24
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	40005400 	.word	0x40005400
 8003954:	40021000 	.word	0x40021000
 8003958:	50000400 	.word	0x50000400
 800395c:	20000244 	.word	0x20000244
 8003960:	40020030 	.word	0x40020030

08003964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	240c      	movs	r4, #12
 800396e:	193b      	adds	r3, r7, r4
 8003970:	0018      	movs	r0, r3
 8003972:	2314      	movs	r3, #20
 8003974:	001a      	movs	r2, r3
 8003976:	2100      	movs	r1, #0
 8003978:	f006 fa06 	bl	8009d88 <memset>
  if(hspi->Instance==SPI1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_SPI_MspInit+0x80>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d129      	bne.n	80039da <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_SPI_MspInit+0x84>)
 8003988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <HAL_SPI_MspInit+0x84>)
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	0149      	lsls	r1, r1, #5
 8003990:	430a      	orrs	r2, r1
 8003992:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_SPI_MspInit+0x84>)
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_SPI_MspInit+0x84>)
 800399a:	2101      	movs	r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_SPI_MspInit+0x84>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2201      	movs	r2, #1
 80039a6:	4013      	ands	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039ac:	0021      	movs	r1, r4
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	22e0      	movs	r2, #224	; 0xe0
 80039b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	2202      	movs	r2, #2
 80039b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	2203      	movs	r2, #3
 80039c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	187a      	adds	r2, r7, r1
 80039ce:	23a0      	movs	r3, #160	; 0xa0
 80039d0:	05db      	lsls	r3, r3, #23
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fdb3 	bl	8004540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b009      	add	sp, #36	; 0x24
 80039e0:	bd90      	pop	{r4, r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	40013000 	.word	0x40013000
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	2314      	movs	r3, #20
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	0018      	movs	r0, r3
 80039fa:	2314      	movs	r3, #20
 80039fc:	001a      	movs	r2, r3
 80039fe:	2100      	movs	r1, #0
 8003a00:	f006 f9c2 	bl	8009d88 <memset>
  if(htim_base->Instance==TIM2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	05db      	lsls	r3, r3, #23
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d10e      	bne.n	8003a2e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a14:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2100      	movs	r1, #0
 8003a20:	200f      	movs	r0, #15
 8003a22:	f000 fbe1 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a26:	200f      	movs	r0, #15
 8003a28:	f000 fbf3 	bl	8004212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003a2c:	e06b      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM21)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <HAL_TIM_Base_MspInit+0x128>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d131      	bne.n	8003a9c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3c:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a3e:	2104      	movs	r1, #4
 8003a40:	430a      	orrs	r2, r1
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8003a5c:	2114      	movs	r1, #20
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2204      	movs	r2, #4
 8003a62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2202      	movs	r2, #2
 8003a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003a7c:	187a      	adds	r2, r7, r1
 8003a7e:	23a0      	movs	r3, #160	; 0xa0
 8003a80:	05db      	lsls	r3, r3, #23
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 fd5b 	bl	8004540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2014      	movs	r0, #20
 8003a90:	f000 fbaa 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003a94:	2014      	movs	r0, #20
 8003a96:	f000 fbbc 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 8003a9a:	e034      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM22)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_TIM_Base_MspInit+0x12c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12f      	bne.n	8003b06 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003aac:	2120      	movs	r1, #32
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003ab8:	2102      	movs	r1, #2
 8003aba:	430a      	orrs	r2, r1
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_TIM_Base_MspInit+0x124>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003aca:	2114      	movs	r1, #20
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2210      	movs	r2, #16
 8003ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_TIM_Base_MspInit+0x130>)
 8003aee:	0019      	movs	r1, r3
 8003af0:	0010      	movs	r0, r2
 8003af2:	f000 fd25 	bl	8004540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	2016      	movs	r0, #22
 8003afc:	f000 fb74 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003b00:	2016      	movs	r0, #22
 8003b02:	f000 fb86 	bl	8004212 <HAL_NVIC_EnableIRQ>
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b00a      	add	sp, #40	; 0x28
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40010800 	.word	0x40010800
 8003b18:	40011400 	.word	0x40011400
 8003b1c:	50000400 	.word	0x50000400

08003b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b08b      	sub	sp, #44	; 0x2c
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	2414      	movs	r4, #20
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	2314      	movs	r3, #20
 8003b30:	001a      	movs	r2, r3
 8003b32:	2100      	movs	r1, #0
 8003b34:	f006 f928 	bl	8009d88 <memset>
  if(htim->Instance==TIM2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	05db      	lsls	r3, r3, #23
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d123      	bne.n	8003b8c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b44:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b50:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	2201      	movs	r2, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8003b5c:	0021      	movs	r1, r4
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	2202      	movs	r2, #2
 8003b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2202      	movs	r2, #2
 8003b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8003b7c:	187a      	adds	r2, r7, r1
 8003b7e:	23a0      	movs	r3, #160	; 0xa0
 8003b80:	05db      	lsls	r3, r3, #23
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 fcdb 	bl	8004540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8003b8a:	e04f      	b.n	8003c2c <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM21)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_TIM_MspPostInit+0x118>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d123      	bne.n	8003bde <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 8003bae:	2114      	movs	r1, #20
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2202      	movs	r2, #2
 8003bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003bce:	187a      	adds	r2, r7, r1
 8003bd0:	23a0      	movs	r3, #160	; 0xa0
 8003bd2:	05db      	lsls	r3, r3, #23
 8003bd4:	0011      	movs	r1, r2
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 fcb2 	bl	8004540 <HAL_GPIO_Init>
}
 8003bdc:	e026      	b.n	8003c2c <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM22)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_TIM_MspPostInit+0x11c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d121      	bne.n	8003c2c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003bee:	2102      	movs	r1, #2
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_TIM_MspPostInit+0x114>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 8003c00:	2114      	movs	r1, #20
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2220      	movs	r2, #32
 8003c06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2201      	movs	r2, #1
 8003c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <HAL_TIM_MspPostInit+0x120>)
 8003c24:	0019      	movs	r1, r3
 8003c26:	0010      	movs	r0, r2
 8003c28:	f000 fc8a 	bl	8004540 <HAL_GPIO_Init>
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b00b      	add	sp, #44	; 0x2c
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010800 	.word	0x40010800
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	50000400 	.word	0x50000400

08003c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	240c      	movs	r4, #12
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	0018      	movs	r0, r3
 8003c52:	2314      	movs	r3, #20
 8003c54:	001a      	movs	r2, r3
 8003c56:	2100      	movs	r1, #0
 8003c58:	f006 f896 	bl	8009d88 <memset>
  if(huart->Instance==USART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_UART_MspInit+0x80>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d12a      	bne.n	8003cbc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	01c9      	lsls	r1, r1, #7
 8003c70:	430a      	orrs	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_UART_MspInit+0x84>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	22c0      	movs	r2, #192	; 0xc0
 8003c90:	00d2      	lsls	r2, r2, #3
 8003c92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	0021      	movs	r1, r4
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2202      	movs	r2, #2
 8003c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2204      	movs	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	187a      	adds	r2, r7, r1
 8003cb0:	23a0      	movs	r3, #160	; 0xa0
 8003cb2:	05db      	lsls	r3, r3, #23
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fc42 	bl	8004540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b009      	add	sp, #36	; 0x24
 8003cc2:	bd90      	pop	{r4, r7, pc}
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	40021000 	.word	0x40021000

08003ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <NMI_Handler+0x4>

08003cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cd6:	e7fe      	b.n	8003cd6 <HardFault_Handler+0x4>

08003cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cf0:	f000 f98e 	bl	8004010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fb61 	bl	80043ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	20000244 	.word	0x20000244

08003d14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <TIM2_IRQHandler+0x14>)
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f003 fde6 	bl	80078ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	200002e4 	.word	0x200002e4

08003d2c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <TIM21_IRQHandler+0x14>)
 8003d32:	0018      	movs	r0, r3
 8003d34:	f003 fdda 	bl	80078ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	20000324 	.word	0x20000324

08003d44 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <TIM22_IRQHandler+0x14>)
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f003 fdce 	bl	80078ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	20000364 	.word	0x20000364

08003d5c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <I2C1_IRQHandler+0x2c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	23e0      	movs	r3, #224	; 0xe0
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <I2C1_IRQHandler+0x2c>)
 8003d70:	0018      	movs	r0, r3
 8003d72:	f001 f855 	bl	8004e20 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003d76:	e003      	b.n	8003d80 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <I2C1_IRQHandler+0x2c>)
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f001 f836 	bl	8004dec <HAL_I2C_EV_IRQHandler>
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	200001f0 	.word	0x200001f0

08003d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  return 1;
 8003d90:	2301      	movs	r3, #1
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_kill>:

int _kill(int pid, int sig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003da2:	f006 f84b 	bl	8009e3c <__errno>
 8003da6:	0003      	movs	r3, r0
 8003da8:	2216      	movs	r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
  return -1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	425b      	negs	r3, r3
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_exit>:

void _exit (int status)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	425a      	negs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ffe5 	bl	8003d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dce:	e7fe      	b.n	8003dce <_exit+0x16>

08003dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00a      	b.n	8003df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003de2:	e000      	b.n	8003de6 <_read+0x16>
 8003de4:	bf00      	nop
 8003de6:	0001      	movs	r1, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	b2ca      	uxtb	r2, r1
 8003df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dbf0      	blt.n	8003de2 <_read+0x12>
  }

  return len;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b006      	add	sp, #24
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e009      	b.n	8003e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	0018      	movs	r0, r3
 8003e26:	e000      	b.n	8003e2a <_write+0x20>
 8003e28:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf1      	blt.n	8003e1c <_write+0x12>
  }
  return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_close>:

int _close(int file)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	425b      	negs	r3, r3
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0192      	lsls	r2, r2, #6
 8003e66:	605a      	str	r2, [r3, #4]
  return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_isatty>:

int _isatty(int file)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f005 ffb6 	bl	8009e3c <__errno>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	425b      	negs	r3, r3
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	18d2      	adds	r2, r2, r3
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_sbrk+0x64>)
 8003eec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b006      	add	sp, #24
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20002000 	.word	0x20002000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	200004e4 	.word	0x200004e4
 8003f04:	20000638 	.word	0x20000638

08003f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003f16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f18:	f7ff fff6 	bl	8003f08 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f1e:	490d      	ldr	r1, [pc, #52]	; (8003f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f20:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <LoopForever+0xe>)
  movs r3, #0
 8003f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f24:	e002      	b.n	8003f2c <LoopCopyDataInit>

08003f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f2a:	3304      	adds	r3, #4

08003f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f30:	d3f9      	bcc.n	8003f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f32:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <LoopForever+0x16>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f38:	e001      	b.n	8003f3e <LoopFillZerobss>

08003f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f3c:	3204      	adds	r2, #4

08003f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f40:	d3fb      	bcc.n	8003f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f42:	f005 ff81 	bl	8009e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f46:	f7fe fe01 	bl	8002b4c <main>

08003f4a <LoopForever>:

LoopForever:
    b LoopForever
 8003f4a:	e7fe      	b.n	8003f4a <LoopForever>
   ldr   r0, =_estack
 8003f4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f54:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003f58:	0800c584 	.word	0x0800c584
  ldr r2, =_sbss
 8003f5c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003f60:	20000638 	.word	0x20000638

08003f64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f64:	e7fe      	b.n	8003f64 <ADC1_COMP_IRQHandler>
	...

08003f68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f6e:	1dfb      	adds	r3, r7, #7
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_Init+0x3c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_Init+0x3c>)
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f80:	2003      	movs	r0, #3
 8003f82:	f000 f811 	bl	8003fa8 <HAL_InitTick>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e001      	b.n	8003f96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f92:	f7ff fc4d 	bl	8003830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <HAL_InitTick+0x5c>)
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_InitTick+0x60>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	0019      	movs	r1, r3
 8003fba:	23fa      	movs	r3, #250	; 0xfa
 8003fbc:	0098      	lsls	r0, r3, #2
 8003fbe:	f7fc f8bf 	bl	8000140 <__udivsi3>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	0020      	movs	r0, r4
 8003fc8:	f7fc f8ba 	bl	8000140 <__udivsi3>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 f92f 	bl	8004232 <HAL_SYSTICK_Config>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e00f      	b.n	8003ffc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d80b      	bhi.n	8003ffa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	425b      	negs	r3, r3
 8003fe8:	2200      	movs	r2, #0
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f8fc 	bl	80041e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_InitTick+0x64>)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b003      	add	sp, #12
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	20000000 	.word	0x20000000
 8004008:	20000008 	.word	0x20000008
 800400c:	20000004 	.word	0x20000004

08004010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_IncTick+0x1c>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	001a      	movs	r2, r3
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_IncTick+0x20>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	18d2      	adds	r2, r2, r3
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_IncTick+0x20>)
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	20000008 	.word	0x20000008
 8004030:	200004e8 	.word	0x200004e8

08004034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  return uwTick;
 8004038:	4b02      	ldr	r3, [pc, #8]	; (8004044 <HAL_GetTick+0x10>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200004e8 	.word	0x200004e8

08004048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff fff0 	bl	8004034 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	d005      	beq.n	800406e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_Delay+0x44>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	001a      	movs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	189b      	adds	r3, r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	f7ff ffe0 	bl	8004034 <HAL_GetTick>
 8004074:	0002      	movs	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d8f7      	bhi.n	8004070 <HAL_Delay+0x28>
  {
  }
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	20000008 	.word	0x20000008

08004090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	0002      	movs	r2, r0
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800409c:	1dfb      	adds	r3, r7, #7
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b7f      	cmp	r3, #127	; 0x7f
 80040a2:	d809      	bhi.n	80040b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	001a      	movs	r2, r3
 80040aa:	231f      	movs	r3, #31
 80040ac:	401a      	ands	r2, r3
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__NVIC_EnableIRQ+0x30>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	4091      	lsls	r1, r2
 80040b4:	000a      	movs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]
  }
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	0002      	movs	r2, r0
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b7f      	cmp	r3, #127	; 0x7f
 80040d8:	d828      	bhi.n	800412c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <__NVIC_SetPriority+0xd4>)
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	33c0      	adds	r3, #192	; 0xc0
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	589b      	ldr	r3, [r3, r2]
 80040ea:	1dfa      	adds	r2, r7, #7
 80040ec:	7812      	ldrb	r2, [r2, #0]
 80040ee:	0011      	movs	r1, r2
 80040f0:	2203      	movs	r2, #3
 80040f2:	400a      	ands	r2, r1
 80040f4:	00d2      	lsls	r2, r2, #3
 80040f6:	21ff      	movs	r1, #255	; 0xff
 80040f8:	4091      	lsls	r1, r2
 80040fa:	000a      	movs	r2, r1
 80040fc:	43d2      	mvns	r2, r2
 80040fe:	401a      	ands	r2, r3
 8004100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	22ff      	movs	r2, #255	; 0xff
 8004108:	401a      	ands	r2, r3
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	0018      	movs	r0, r3
 8004110:	2303      	movs	r3, #3
 8004112:	4003      	ands	r3, r0
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004118:	481f      	ldr	r0, [pc, #124]	; (8004198 <__NVIC_SetPriority+0xd4>)
 800411a:	1dfb      	adds	r3, r7, #7
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b25b      	sxtb	r3, r3
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	430a      	orrs	r2, r1
 8004124:	33c0      	adds	r3, #192	; 0xc0
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800412a:	e031      	b.n	8004190 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <__NVIC_SetPriority+0xd8>)
 800412e:	1dfb      	adds	r3, r7, #7
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	0019      	movs	r1, r3
 8004134:	230f      	movs	r3, #15
 8004136:	400b      	ands	r3, r1
 8004138:	3b08      	subs	r3, #8
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3306      	adds	r3, #6
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	3304      	adds	r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1dfa      	adds	r2, r7, #7
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	0011      	movs	r1, r2
 800414c:	2203      	movs	r2, #3
 800414e:	400a      	ands	r2, r1
 8004150:	00d2      	lsls	r2, r2, #3
 8004152:	21ff      	movs	r1, #255	; 0xff
 8004154:	4091      	lsls	r1, r2
 8004156:	000a      	movs	r2, r1
 8004158:	43d2      	mvns	r2, r2
 800415a:	401a      	ands	r2, r3
 800415c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	401a      	ands	r2, r3
 8004166:	1dfb      	adds	r3, r7, #7
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	0018      	movs	r0, r3
 800416c:	2303      	movs	r3, #3
 800416e:	4003      	ands	r3, r0
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <__NVIC_SetPriority+0xd8>)
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	001c      	movs	r4, r3
 800417c:	230f      	movs	r3, #15
 800417e:	4023      	ands	r3, r4
 8004180:	3b08      	subs	r3, #8
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	430a      	orrs	r2, r1
 8004186:	3306      	adds	r3, #6
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	18c3      	adds	r3, r0, r3
 800418c:	3304      	adds	r3, #4
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b003      	add	sp, #12
 8004196:	bd90      	pop	{r4, r7, pc}
 8004198:	e000e100 	.word	0xe000e100
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1e5a      	subs	r2, r3, #1
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	045b      	lsls	r3, r3, #17
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d301      	bcc.n	80041b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b4:	2301      	movs	r3, #1
 80041b6:	e010      	b.n	80041da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <SysTick_Config+0x44>)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	3a01      	subs	r2, #1
 80041be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c0:	2301      	movs	r3, #1
 80041c2:	425b      	negs	r3, r3
 80041c4:	2103      	movs	r1, #3
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7ff ff7c 	bl	80040c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <SysTick_Config+0x44>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041d2:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <SysTick_Config+0x44>)
 80041d4:	2207      	movs	r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	210f      	movs	r1, #15
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	1c02      	adds	r2, r0, #0
 80041f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b25b      	sxtb	r3, r3
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff ff5d 	bl	80040c4 <__NVIC_SetPriority>
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	0002      	movs	r2, r0
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800421e:	1dfb      	adds	r3, r7, #7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b25b      	sxtb	r3, r3
 8004224:	0018      	movs	r0, r3
 8004226:	f7ff ff33 	bl	8004090 <__NVIC_EnableIRQ>
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff ffaf 	bl	80041a0 <SysTick_Config>
 8004242:	0003      	movs	r3, r0
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e061      	b.n	8004322 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_DMA_Init+0xe0>)
 8004264:	4694      	mov	ip, r2
 8004266:	4463      	add	r3, ip
 8004268:	2114      	movs	r1, #20
 800426a:	0018      	movs	r0, r3
 800426c:	f7fb ff68 	bl	8000140 <__udivsi3>
 8004270:	0003      	movs	r3, r0
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_DMA_Init+0xe4>)
 800427c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2225      	movs	r2, #37	; 0x25
 8004282:	2102      	movs	r1, #2
 8004284:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <HAL_DMA_Init+0xe8>)
 8004292:	4013      	ands	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800429e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d018      	beq.n	800430a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_DMA_Init+0xec>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	211c      	movs	r1, #28
 80042e2:	400b      	ands	r3, r1
 80042e4:	210f      	movs	r1, #15
 80042e6:	4099      	lsls	r1, r3
 80042e8:	000b      	movs	r3, r1
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_DMA_Init+0xec>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_DMA_Init+0xec>)
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	201c      	movs	r0, #28
 8004300:	4003      	ands	r3, r0
 8004302:	409a      	lsls	r2, r3
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_DMA_Init+0xec>)
 8004306:	430a      	orrs	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2225      	movs	r2, #37	; 0x25
 8004314:	2101      	movs	r1, #1
 8004316:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	bffdfff8 	.word	0xbffdfff8
 8004330:	40020000 	.word	0x40020000
 8004334:	ffff800f 	.word	0xffff800f
 8004338:	400200a8 	.word	0x400200a8

0800433c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	210f      	movs	r1, #15
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2225      	movs	r2, #37	; 0x25
 8004350:	5c9b      	ldrb	r3, [r3, r2]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d006      	beq.n	8004366 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800435e:	187b      	adds	r3, r7, r1
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e02a      	b.n	80043bc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	210e      	movs	r1, #14
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	438a      	bics	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	221c      	movs	r2, #28
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2101      	movs	r1, #1
 8004394:	4091      	lsls	r1, r2
 8004396:	000a      	movs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2225      	movs	r2, #37	; 0x25
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2224      	movs	r2, #36	; 0x24
 80043a6:	2100      	movs	r1, #0
 80043a8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	0010      	movs	r0, r2
 80043ba:	4798      	blx	r3
    }
  }
  return status;
 80043bc:	230f      	movs	r3, #15
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	781b      	ldrb	r3, [r3, #0]
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	221c      	movs	r2, #28
 80043e8:	4013      	ands	r3, r2
 80043ea:	2204      	movs	r2, #4
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	d026      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d022      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2220      	movs	r2, #32
 8004406:	4013      	ands	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2104      	movs	r1, #4
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	221c      	movs	r2, #28
 8004420:	401a      	ands	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2104      	movs	r1, #4
 8004428:	4091      	lsls	r1, r2
 800442a:	000a      	movs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	2b00      	cmp	r3, #0
 8004434:	d100      	bne.n	8004438 <HAL_DMA_IRQHandler+0x6e>
 8004436:	e071      	b.n	800451c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	0010      	movs	r0, r2
 8004440:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004442:	e06b      	b.n	800451c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	221c      	movs	r2, #28
 800444a:	4013      	ands	r3, r2
 800444c:	2202      	movs	r2, #2
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	d02d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0xea>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2202      	movs	r2, #2
 800445c:	4013      	ands	r3, r2
 800445e:	d029      	beq.n	80044b4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2220      	movs	r2, #32
 8004468:	4013      	ands	r3, r2
 800446a:	d10b      	bne.n	8004484 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	210a      	movs	r1, #10
 8004478:	438a      	bics	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2225      	movs	r2, #37	; 0x25
 8004480:	2101      	movs	r1, #1
 8004482:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	221c      	movs	r2, #28
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2102      	movs	r1, #2
 8004492:	4091      	lsls	r1, r2
 8004494:	000a      	movs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d039      	beq.n	800451c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	0010      	movs	r0, r2
 80044b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044b2:	e033      	b.n	800451c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	221c      	movs	r2, #28
 80044ba:	4013      	ands	r3, r2
 80044bc:	2208      	movs	r2, #8
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	d02a      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2208      	movs	r2, #8
 80044cc:	4013      	ands	r3, r2
 80044ce:	d026      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	210e      	movs	r1, #14
 80044dc:	438a      	bics	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	221c      	movs	r2, #28
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2101      	movs	r1, #1
 80044ee:	4091      	lsls	r1, r2
 80044f0:	000a      	movs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2225      	movs	r2, #37	; 0x25
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2224      	movs	r2, #36	; 0x24
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	0010      	movs	r0, r2
 800451a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	46c0      	nop			; (mov r8, r8)
}
 8004520:	46bd      	mov	sp, r7
 8004522:	b004      	add	sp, #16
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2225      	movs	r2, #37	; 0x25
 8004532:	5c9b      	ldrb	r3, [r3, r2]
 8004534:	b2db      	uxtb	r3, r3
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004556:	e14f      	b.n	80047f8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4091      	lsls	r1, r2
 8004562:	000a      	movs	r2, r1
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d100      	bne.n	8004570 <HAL_GPIO_Init+0x30>
 800456e:	e140      	b.n	80047f2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2203      	movs	r2, #3
 8004576:	4013      	ands	r3, r2
 8004578:	2b01      	cmp	r3, #1
 800457a:	d005      	beq.n	8004588 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2203      	movs	r2, #3
 8004582:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004584:	2b02      	cmp	r3, #2
 8004586:	d130      	bne.n	80045ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	409a      	lsls	r2, r3
 8004596:	0013      	movs	r3, r2
 8004598:	43da      	mvns	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	0013      	movs	r3, r2
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045be:	2201      	movs	r2, #1
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
 80045c4:	0013      	movs	r3, r2
 80045c6:	43da      	mvns	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	2201      	movs	r2, #1
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
 80045dc:	0013      	movs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2203      	movs	r2, #3
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d017      	beq.n	8004626 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	409a      	lsls	r2, r3
 8004604:	0013      	movs	r3, r2
 8004606:	43da      	mvns	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	0013      	movs	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2203      	movs	r2, #3
 800462c:	4013      	ands	r3, r2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d123      	bne.n	800467a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	08da      	lsrs	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3208      	adds	r2, #8
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	58d3      	ldr	r3, [r2, r3]
 800463e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2207      	movs	r2, #7
 8004644:	4013      	ands	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	220f      	movs	r2, #15
 800464a:	409a      	lsls	r2, r3
 800464c:	0013      	movs	r3, r2
 800464e:	43da      	mvns	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2107      	movs	r1, #7
 800465e:	400b      	ands	r3, r1
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	409a      	lsls	r2, r3
 8004664:	0013      	movs	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	08da      	lsrs	r2, r3, #3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3208      	adds	r2, #8
 8004674:	0092      	lsls	r2, r2, #2
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2203      	movs	r2, #3
 8004686:	409a      	lsls	r2, r3
 8004688:	0013      	movs	r3, r2
 800468a:	43da      	mvns	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	401a      	ands	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	409a      	lsls	r2, r3
 80046a0:	0013      	movs	r3, r2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	4013      	ands	r3, r2
 80046b8:	d100      	bne.n	80046bc <HAL_GPIO_Init+0x17c>
 80046ba:	e09a      	b.n	80047f2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046bc:	4b54      	ldr	r3, [pc, #336]	; (8004810 <HAL_GPIO_Init+0x2d0>)
 80046be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_GPIO_Init+0x2d0>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c8:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_GPIO_Init+0x2d4>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	589b      	ldr	r3, [r3, r2]
 80046d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2203      	movs	r2, #3
 80046da:	4013      	ands	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	409a      	lsls	r2, r3
 80046e2:	0013      	movs	r3, r2
 80046e4:	43da      	mvns	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	23a0      	movs	r3, #160	; 0xa0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_Init+0x1ea>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a47      	ldr	r2, [pc, #284]	; (8004818 <HAL_GPIO_Init+0x2d8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x1e6>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a46      	ldr	r2, [pc, #280]	; (800481c <HAL_GPIO_Init+0x2dc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_Init+0x1e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a45      	ldr	r2, [pc, #276]	; (8004820 <HAL_GPIO_Init+0x2e0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_Init+0x1de>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a44      	ldr	r2, [pc, #272]	; (8004824 <HAL_GPIO_Init+0x2e4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_Init+0x1da>
 8004716:	2305      	movs	r3, #5
 8004718:	e008      	b.n	800472c <HAL_GPIO_Init+0x1ec>
 800471a:	2306      	movs	r3, #6
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x1ec>
 800471e:	2303      	movs	r3, #3
 8004720:	e004      	b.n	800472c <HAL_GPIO_Init+0x1ec>
 8004722:	2302      	movs	r3, #2
 8004724:	e002      	b.n	800472c <HAL_GPIO_Init+0x1ec>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_GPIO_Init+0x1ec>
 800472a:	2300      	movs	r3, #0
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	2103      	movs	r1, #3
 8004730:	400a      	ands	r2, r1
 8004732:	0092      	lsls	r2, r2, #2
 8004734:	4093      	lsls	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473c:	4935      	ldr	r1, [pc, #212]	; (8004814 <HAL_GPIO_Init+0x2d4>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800474a:	4b37      	ldr	r3, [pc, #220]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	43da      	mvns	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	035b      	lsls	r3, r3, #13
 8004762:	4013      	ands	r3, r2
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800476e:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43da      	mvns	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	039b      	lsls	r3, r3, #14
 800478c:	4013      	ands	r3, r2
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	4013      	ands	r3, r2
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4013      	ands	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	025b      	lsls	r3, r3, #9
 80047e0:	4013      	ands	r3, r2
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	40da      	lsrs	r2, r3
 8004800:	1e13      	subs	r3, r2, #0
 8004802:	d000      	beq.n	8004806 <HAL_GPIO_Init+0x2c6>
 8004804:	e6a8      	b.n	8004558 <HAL_GPIO_Init+0x18>
  }
}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b006      	add	sp, #24
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	40010000 	.word	0x40010000
 8004818:	50000400 	.word	0x50000400
 800481c:	50000800 	.word	0x50000800
 8004820:	50000c00 	.word	0x50000c00
 8004824:	50001c00 	.word	0x50001c00
 8004828:	40010400 	.word	0x40010400

0800482c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	000a      	movs	r2, r1
 8004836:	1cbb      	adds	r3, r7, #2
 8004838:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	1cba      	adds	r2, r7, #2
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	4013      	ands	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004846:	230f      	movs	r3, #15
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e003      	b.n	8004858 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004858:	230f      	movs	r3, #15
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	781b      	ldrb	r3, [r3, #0]
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	0008      	movs	r0, r1
 8004870:	0011      	movs	r1, r2
 8004872:	1cbb      	adds	r3, r7, #2
 8004874:	1c02      	adds	r2, r0, #0
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	1c7b      	adds	r3, r7, #1
 800487a:	1c0a      	adds	r2, r1, #0
 800487c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800487e:	1c7b      	adds	r3, r7, #1
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004886:	1cbb      	adds	r3, r7, #2
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800488e:	e003      	b.n	8004898 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004890:	1cbb      	adds	r3, r7, #2
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e082      	b.n	80049b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2241      	movs	r2, #65	; 0x41
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fe ffc5 	bl	8003858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2241      	movs	r2, #65	; 0x41
 80048d2:	2124      	movs	r1, #36	; 0x24
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2101      	movs	r1, #1
 80048e2:	438a      	bics	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4934      	ldr	r1, [pc, #208]	; (80049c0 <HAL_I2C_Init+0x120>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4931      	ldr	r1, [pc, #196]	; (80049c4 <HAL_I2C_Init+0x124>)
 8004900:	400a      	ands	r2, r1
 8004902:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d108      	bne.n	800491e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	0209      	lsls	r1, r1, #8
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	e007      	b.n	800492e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2184      	movs	r1, #132	; 0x84
 8004928:	0209      	lsls	r1, r1, #8
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d104      	bne.n	8004940 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	491f      	ldr	r1, [pc, #124]	; (80049c8 <HAL_I2C_Init+0x128>)
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	491a      	ldr	r1, [pc, #104]	; (80049c4 <HAL_I2C_Init+0x124>)
 800495c:	400a      	ands	r2, r1
 800495e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	431a      	orrs	r2, r3
 800496a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69d9      	ldr	r1, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2241      	movs	r2, #65	; 0x41
 80049a4:	2120      	movs	r1, #32
 80049a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2242      	movs	r2, #66	; 0x42
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	f0ffffff 	.word	0xf0ffffff
 80049c4:	ffff7fff 	.word	0xffff7fff
 80049c8:	02008000 	.word	0x02008000

080049cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	0008      	movs	r0, r1
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	0019      	movs	r1, r3
 80049da:	230a      	movs	r3, #10
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	1c02      	adds	r2, r0, #0
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	2308      	movs	r3, #8
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	1c0a      	adds	r2, r1, #0
 80049e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2241      	movs	r2, #65	; 0x41
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d000      	beq.n	80049f8 <HAL_I2C_Master_Transmit+0x2c>
 80049f6:	e0e7      	b.n	8004bc8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	5c9b      	ldrb	r3, [r3, r2]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Master_Transmit+0x3a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0e1      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2240      	movs	r2, #64	; 0x40
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a0e:	f7ff fb11 	bl	8004034 <HAL_GetTick>
 8004a12:	0003      	movs	r3, r0
 8004a14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	0219      	lsls	r1, r3, #8
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2319      	movs	r3, #25
 8004a22:	2201      	movs	r2, #1
 8004a24:	f000 ff7a 	bl	800591c <I2C_WaitOnFlagUntilTimeout>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0cc      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2241      	movs	r2, #65	; 0x41
 8004a34:	2121      	movs	r1, #33	; 0x21
 8004a36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2242      	movs	r2, #66	; 0x42
 8004a3c:	2110      	movs	r1, #16
 8004a3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	18ba      	adds	r2, r7, r2
 8004a52:	8812      	ldrh	r2, [r2, #0]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2bff      	cmp	r3, #255	; 0xff
 8004a64:	d911      	bls.n	8004a8a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	045c      	lsls	r4, r3, #17
 8004a76:	230a      	movs	r3, #10
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	8819      	ldrh	r1, [r3, #0]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <HAL_I2C_Master_Transmit+0x208>)
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	0023      	movs	r3, r4
 8004a84:	f001 f9a4 	bl	8005dd0 <I2C_TransferConfig>
 8004a88:	e075      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	049c      	lsls	r4, r3, #18
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	8819      	ldrh	r1, [r3, #0]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_I2C_Master_Transmit+0x208>)
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	0023      	movs	r3, r4
 8004aac:	f001 f990 	bl	8005dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ab0:	e061      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 ff7d 	bl	80059b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004abe:	1e03      	subs	r3, r0, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e081      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d03a      	beq.n	8004b76 <HAL_I2C_Master_Transmit+0x1aa>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d136      	bne.n	8004b76 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	0013      	movs	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	f000 ff01 	bl	800591c <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e053      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2bff      	cmp	r3, #255	; 0xff
 8004b2a:	d911      	bls.n	8004b50 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	22ff      	movs	r2, #255	; 0xff
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	045c      	lsls	r4, r3, #17
 8004b3c:	230a      	movs	r3, #10
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	8819      	ldrh	r1, [r3, #0]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	2300      	movs	r3, #0
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	0023      	movs	r3, r4
 8004b4a:	f001 f941 	bl	8005dd0 <I2C_TransferConfig>
 8004b4e:	e012      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	049c      	lsls	r4, r3, #18
 8004b64:	230a      	movs	r3, #10
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	8819      	ldrh	r1, [r3, #0]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	0023      	movs	r3, r4
 8004b72:	f001 f92d 	bl	8005dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d198      	bne.n	8004ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 ff5c 	bl	8005a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e01a      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <HAL_I2C_Master_Transmit+0x20c>)
 8004ba8:	400a      	ands	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2241      	movs	r2, #65	; 0x41
 8004bb0:	2120      	movs	r1, #32
 8004bb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2242      	movs	r2, #66	; 0x42
 8004bb8:	2100      	movs	r1, #0
 8004bba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b007      	add	sp, #28
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	80002000 	.word	0x80002000
 8004bd8:	fe00e800 	.word	0xfe00e800

08004bdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	0008      	movs	r0, r1
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	0019      	movs	r1, r3
 8004bea:	230a      	movs	r3, #10
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	1c02      	adds	r2, r0, #0
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	1c0a      	adds	r2, r1, #0
 8004bf8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2241      	movs	r2, #65	; 0x41
 8004bfe:	5c9b      	ldrb	r3, [r3, r2]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d000      	beq.n	8004c08 <HAL_I2C_Master_Receive+0x2c>
 8004c06:	e0e8      	b.n	8004dda <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2240      	movs	r2, #64	; 0x40
 8004c0c:	5c9b      	ldrb	r3, [r3, r2]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_I2C_Master_Receive+0x3a>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0e2      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c1e:	f7ff fa09 	bl	8004034 <HAL_GetTick>
 8004c22:	0003      	movs	r3, r0
 8004c24:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	0219      	lsls	r1, r3, #8
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2319      	movs	r3, #25
 8004c32:	2201      	movs	r2, #1
 8004c34:	f000 fe72 	bl	800591c <I2C_WaitOnFlagUntilTimeout>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cd      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2241      	movs	r2, #65	; 0x41
 8004c44:	2122      	movs	r1, #34	; 0x22
 8004c46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2242      	movs	r2, #66	; 0x42
 8004c4c:	2110      	movs	r1, #16
 8004c4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	18ba      	adds	r2, r7, r2
 8004c62:	8812      	ldrh	r2, [r2, #0]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2bff      	cmp	r3, #255	; 0xff
 8004c74:	d911      	bls.n	8004c9a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	045c      	lsls	r4, r3, #17
 8004c86:	230a      	movs	r3, #10
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	8819      	ldrh	r1, [r3, #0]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	4b55      	ldr	r3, [pc, #340]	; (8004de4 <HAL_I2C_Master_Receive+0x208>)
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	0023      	movs	r3, r4
 8004c94:	f001 f89c 	bl	8005dd0 <I2C_TransferConfig>
 8004c98:	e076      	b.n	8004d88 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	049c      	lsls	r4, r3, #18
 8004cae:	230a      	movs	r3, #10
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	8819      	ldrh	r1, [r3, #0]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_I2C_Master_Receive+0x208>)
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	0023      	movs	r3, r4
 8004cbc:	f001 f888 	bl	8005dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004cc0:	e062      	b.n	8004d88 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 feff 	bl	8005acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cce:	1e03      	subs	r3, r0, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e082      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03a      	beq.n	8004d88 <HAL_I2C_Master_Receive+0x1ac>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d136      	bne.n	8004d88 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	0013      	movs	r3, r2
 8004d24:	2200      	movs	r2, #0
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	f000 fdf8 	bl	800591c <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e053      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2bff      	cmp	r3, #255	; 0xff
 8004d3c:	d911      	bls.n	8004d62 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	045c      	lsls	r4, r3, #17
 8004d4e:	230a      	movs	r3, #10
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	8819      	ldrh	r1, [r3, #0]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	0023      	movs	r3, r4
 8004d5c:	f001 f838 	bl	8005dd0 <I2C_TransferConfig>
 8004d60:	e012      	b.n	8004d88 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	049c      	lsls	r4, r3, #18
 8004d76:	230a      	movs	r3, #10
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	8819      	ldrh	r1, [r3, #0]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	0023      	movs	r3, r4
 8004d84:	f001 f824 	bl	8005dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d197      	bne.n	8004cc2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fe53 	bl	8005a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e01a      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2220      	movs	r2, #32
 8004dac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	490b      	ldr	r1, [pc, #44]	; (8004de8 <HAL_I2C_Master_Receive+0x20c>)
 8004dba:	400a      	ands	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2241      	movs	r2, #65	; 0x41
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2242      	movs	r2, #66	; 0x42
 8004dca:	2100      	movs	r1, #0
 8004dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2240      	movs	r2, #64	; 0x40
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b007      	add	sp, #28
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	80002400 	.word	0x80002400
 8004de8:	fe00e800 	.word	0xfe00e800

08004dec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
  }
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b004      	add	sp, #16
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e48:	d00a      	beq.n	8004e60 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	2201      	movs	r2, #1
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	0052      	lsls	r2, r2, #1
 8004e5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e70:	d00a      	beq.n	8004e88 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	2208      	movs	r2, #8
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	00d2      	lsls	r2, r2, #3
 8004e86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e98:	d00a      	beq.n	8004eb0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	0092      	lsls	r2, r2, #2
 8004eae:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	220b      	movs	r2, #11
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d005      	beq.n	8004eca <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0011      	movs	r1, r2
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 fbbd 	bl	8005644 <I2C_ITError>
  }
}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b006      	add	sp, #24
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	0008      	movs	r0, r1
 8004efc:	0011      	movs	r1, r2
 8004efe:	1cfb      	adds	r3, r7, #3
 8004f00:	1c02      	adds	r2, r0, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	003b      	movs	r3, r7
 8004f06:	1c0a      	adds	r2, r1, #0
 8004f08:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b002      	add	sp, #8
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2240      	movs	r2, #64	; 0x40
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <I2C_Slave_ISR_IT+0x24>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0e6      	b.n	8005136 <I2C_Slave_ISR_IT+0x1f2>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2220      	movs	r2, #32
 8004f74:	4013      	ands	r3, r2
 8004f76:	d009      	beq.n	8004f8c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f7e:	d005      	beq.n	8004f8c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	0011      	movs	r1, r2
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f9e4 	bl	8005354 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	4013      	ands	r3, r2
 8004f92:	d052      	beq.n	800503a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2210      	movs	r2, #16
 8004f98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f9a:	d04e      	beq.n	800503a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d12d      	bne.n	8005002 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2241      	movs	r2, #65	; 0x41
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b28      	cmp	r3, #40	; 0x28
 8004fb0:	d10b      	bne.n	8004fca <I2C_Slave_ISR_IT+0x86>
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	049b      	lsls	r3, r3, #18
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d106      	bne.n	8004fca <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	0011      	movs	r1, r2
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 fae6 	bl	8005594 <I2C_ITListenCplt>
 8004fc8:	e036      	b.n	8005038 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2241      	movs	r2, #65	; 0x41
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b29      	cmp	r3, #41	; 0x29
 8004fd4:	d110      	bne.n	8004ff8 <I2C_Slave_ISR_IT+0xb4>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4a59      	ldr	r2, [pc, #356]	; (8005140 <I2C_Slave_ISR_IT+0x1fc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00c      	beq.n	8004ff8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fc56 	bl	800589a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f000 f94b 	bl	800528c <I2C_ITSlaveSeqCplt>
 8004ff6:	e01f      	b.n	8005038 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005000:	e091      	b.n	8005126 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2210      	movs	r2, #16
 8005008:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	2204      	movs	r2, #4
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <I2C_Slave_ISR_IT+0xe4>
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	045b      	lsls	r3, r3, #17
 8005022:	429a      	cmp	r2, r3
 8005024:	d000      	beq.n	8005028 <I2C_Slave_ISR_IT+0xe4>
 8005026:	e07e      	b.n	8005126 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	0011      	movs	r1, r2
 8005030:	0018      	movs	r0, r3
 8005032:	f000 fb07 	bl	8005644 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005036:	e076      	b.n	8005126 <I2C_Slave_ISR_IT+0x1e2>
 8005038:	e075      	b.n	8005126 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2204      	movs	r2, #4
 800503e:	4013      	ands	r3, r2
 8005040:	d02f      	beq.n	80050a2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005048:	d02b      	beq.n	80050a2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d018      	beq.n	8005086 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d14c      	bne.n	800512a <I2C_Slave_ISR_IT+0x1e6>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <I2C_Slave_ISR_IT+0x1fc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d048      	beq.n	800512a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0018      	movs	r0, r3
 800509c:	f000 f8f6 	bl	800528c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050a0:	e043      	b.n	800512a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2208      	movs	r2, #8
 80050a6:	4013      	ands	r3, r2
 80050a8:	d00a      	beq.n	80050c0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2208      	movs	r2, #8
 80050ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050b0:	d006      	beq.n	80050c0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	0011      	movs	r1, r2
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f843 	bl	8005144 <I2C_ITAddrCplt>
 80050be:	e035      	b.n	800512c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d031      	beq.n	800512c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050ce:	d02d      	beq.n	800512c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
 800510a:	e00f      	b.n	800512c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	045b      	lsls	r3, r3, #17
 8005112:	429a      	cmp	r2, r3
 8005114:	d002      	beq.n	800511c <I2C_Slave_ISR_IT+0x1d8>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	0018      	movs	r0, r3
 8005120:	f000 f8b4 	bl	800528c <I2C_ITSlaveSeqCplt>
 8005124:	e002      	b.n	800512c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	e000      	b.n	800512c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800512a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	2100      	movs	r1, #0
 8005132:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b006      	add	sp, #24
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	ffff0000 	.word	0xffff0000

08005144 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005144:	b5b0      	push	{r4, r5, r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2241      	movs	r2, #65	; 0x41
 8005152:	5c9b      	ldrb	r3, [r3, r2]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	001a      	movs	r2, r3
 8005158:	2328      	movs	r3, #40	; 0x28
 800515a:	4013      	ands	r3, r2
 800515c:	2b28      	cmp	r3, #40	; 0x28
 800515e:	d000      	beq.n	8005162 <I2C_ITAddrCplt+0x1e>
 8005160:	e088      	b.n	8005274 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	b2da      	uxtb	r2, r3
 800516c:	250f      	movs	r5, #15
 800516e:	197b      	adds	r3, r7, r5
 8005170:	2101      	movs	r1, #1
 8005172:	400a      	ands	r2, r1
 8005174:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b29a      	uxth	r2, r3
 8005180:	200c      	movs	r0, #12
 8005182:	183b      	adds	r3, r7, r0
 8005184:	21fe      	movs	r1, #254	; 0xfe
 8005186:	400a      	ands	r2, r1
 8005188:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	b29a      	uxth	r2, r3
 8005192:	240a      	movs	r4, #10
 8005194:	193b      	adds	r3, r7, r4
 8005196:	0592      	lsls	r2, r2, #22
 8005198:	0d92      	lsrs	r2, r2, #22
 800519a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	2308      	movs	r3, #8
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	21fe      	movs	r1, #254	; 0xfe
 80051aa:	400a      	ands	r2, r1
 80051ac:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d148      	bne.n	8005248 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80051b6:	0021      	movs	r1, r4
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	b29a      	uxth	r2, r3
 80051c0:	183b      	adds	r3, r7, r0
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	4053      	eors	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	001a      	movs	r2, r3
 80051ca:	2306      	movs	r3, #6
 80051cc:	4013      	ands	r3, r2
 80051ce:	d120      	bne.n	8005212 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80051d0:	183b      	adds	r3, r7, r0
 80051d2:	187a      	adds	r2, r7, r1
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d14c      	bne.n	8005284 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2208      	movs	r2, #8
 80051f6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2240      	movs	r2, #64	; 0x40
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005200:	183b      	adds	r3, r7, r0
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	197b      	adds	r3, r7, r5
 8005206:	7819      	ldrb	r1, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0018      	movs	r0, r3
 800520c:	f7ff fe71 	bl	8004ef2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005210:	e038      	b.n	8005284 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005212:	240c      	movs	r4, #12
 8005214:	193b      	adds	r3, r7, r4
 8005216:	2208      	movs	r2, #8
 8005218:	18ba      	adds	r2, r7, r2
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	021a      	lsls	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0011      	movs	r1, r2
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fe0c 	bl	8005e44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	2100      	movs	r1, #0
 8005232:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005234:	193b      	adds	r3, r7, r4
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	230f      	movs	r3, #15
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	7819      	ldrb	r1, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0018      	movs	r0, r3
 8005242:	f7ff fe56 	bl	8004ef2 <HAL_I2C_AddrCallback>
}
 8005246:	e01d      	b.n	8005284 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0011      	movs	r1, r2
 8005250:	0018      	movs	r0, r3
 8005252:	f000 fdf7 	bl	8005e44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2240      	movs	r2, #64	; 0x40
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800525e:	230c      	movs	r3, #12
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	230f      	movs	r3, #15
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	7819      	ldrb	r1, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0018      	movs	r0, r3
 800526e:	f7ff fe40 	bl	8004ef2 <HAL_I2C_AddrCallback>
}
 8005272:	e007      	b.n	8005284 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b004      	add	sp, #16
 800528a:	bdb0      	pop	{r4, r5, r7, pc}

0800528c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2242      	movs	r2, #66	; 0x42
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	01db      	lsls	r3, r3, #7
 80052aa:	4013      	ands	r3, r2
 80052ac:	d008      	beq.n	80052c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4924      	ldr	r1, [pc, #144]	; (800534c <I2C_ITSlaveSeqCplt+0xc0>)
 80052ba:	400a      	ands	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e00c      	b.n	80052da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	4013      	ands	r3, r2
 80052c8:	d007      	beq.n	80052da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	491e      	ldr	r1, [pc, #120]	; (8005350 <I2C_ITSlaveSeqCplt+0xc4>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2241      	movs	r2, #65	; 0x41
 80052de:	5c9b      	ldrb	r3, [r3, r2]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b29      	cmp	r3, #41	; 0x29
 80052e4:	d114      	bne.n	8005310 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2241      	movs	r2, #65	; 0x41
 80052ea:	2128      	movs	r1, #40	; 0x28
 80052ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2101      	movs	r1, #1
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 fda3 	bl	8005e44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2240      	movs	r2, #64	; 0x40
 8005302:	2100      	movs	r1, #0
 8005304:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff fde2 	bl	8004ed2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800530e:	e019      	b.n	8005344 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2241      	movs	r2, #65	; 0x41
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b2a      	cmp	r3, #42	; 0x2a
 800531a:	d113      	bne.n	8005344 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2241      	movs	r2, #65	; 0x41
 8005320:	2128      	movs	r1, #40	; 0x28
 8005322:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2222      	movs	r2, #34	; 0x22
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2102      	movs	r1, #2
 800532e:	0018      	movs	r0, r3
 8005330:	f000 fd88 	bl	8005e44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	2100      	movs	r1, #0
 800533a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff fdcf 	bl	8004ee2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	ffffbfff 	.word	0xffffbfff
 8005350:	ffff7fff 	.word	0xffff7fff

08005354 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800536a:	200f      	movs	r0, #15
 800536c:	183b      	adds	r3, r7, r0
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	2141      	movs	r1, #65	; 0x41
 8005372:	5c52      	ldrb	r2, [r2, r1]
 8005374:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2220      	movs	r2, #32
 800537c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800537e:	183b      	adds	r3, r7, r0
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b21      	cmp	r3, #33	; 0x21
 8005384:	d003      	beq.n	800538e <I2C_ITSlaveCplt+0x3a>
 8005386:	183b      	adds	r3, r7, r0
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b29      	cmp	r3, #41	; 0x29
 800538c:	d109      	bne.n	80053a2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800538e:	4a7b      	ldr	r2, [pc, #492]	; (800557c <I2C_ITSlaveCplt+0x228>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f000 fd55 	bl	8005e44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2221      	movs	r2, #33	; 0x21
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
 80053a0:	e011      	b.n	80053c6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053a2:	220f      	movs	r2, #15
 80053a4:	18bb      	adds	r3, r7, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b22      	cmp	r3, #34	; 0x22
 80053aa:	d003      	beq.n	80053b4 <I2C_ITSlaveCplt+0x60>
 80053ac:	18bb      	adds	r3, r7, r2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b2a      	cmp	r3, #42	; 0x2a
 80053b2:	d108      	bne.n	80053c6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80053b4:	4a72      	ldr	r2, [pc, #456]	; (8005580 <I2C_ITSlaveCplt+0x22c>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0011      	movs	r1, r2
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fd42 	bl	8005e44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2222      	movs	r2, #34	; 0x22
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	0209      	lsls	r1, r1, #8
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4968      	ldr	r1, [pc, #416]	; (8005584 <I2C_ITSlaveCplt+0x230>)
 80053e4:	400a      	ands	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 fa55 	bl	800589a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	01db      	lsls	r3, r3, #7
 80053f6:	4013      	ands	r3, r2
 80053f8:	d013      	beq.n	8005422 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4960      	ldr	r1, [pc, #384]	; (8005588 <I2C_ITSlaveCplt+0x234>)
 8005406:	400a      	ands	r2, r1
 8005408:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01f      	beq.n	8005452 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b29a      	uxth	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005420:	e017      	b.n	8005452 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	4013      	ands	r3, r2
 800542a:	d012      	beq.n	8005452 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4955      	ldr	r1, [pc, #340]	; (800558c <I2C_ITSlaveCplt+0x238>)
 8005438:	400a      	ands	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2204      	movs	r2, #4
 8005456:	4013      	ands	r3, r2
 8005458:	d020      	beq.n	800549c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2204      	movs	r2, #4
 800545e:	4393      	bics	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	2204      	movs	r2, #4
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2242      	movs	r2, #66	; 0x42
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0011      	movs	r1, r2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f8b7 	bl	8005644 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2241      	movs	r2, #65	; 0x41
 80054da:	5c9b      	ldrb	r3, [r3, r2]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b28      	cmp	r3, #40	; 0x28
 80054e0:	d147      	bne.n	8005572 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 f853 	bl	8005594 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054ee:	e040      	b.n	8005572 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <I2C_ITSlaveCplt+0x23c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d016      	beq.n	8005528 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff fec5 	bl	800528c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a22      	ldr	r2, [pc, #136]	; (8005590 <I2C_ITSlaveCplt+0x23c>)
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2241      	movs	r2, #65	; 0x41
 800550c:	2120      	movs	r1, #32
 800550e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2240      	movs	r2, #64	; 0x40
 800551a:	2100      	movs	r1, #0
 800551c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff fcf6 	bl	8004f12 <HAL_I2C_ListenCpltCallback>
}
 8005526:	e024      	b.n	8005572 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2241      	movs	r2, #65	; 0x41
 800552c:	5c9b      	ldrb	r3, [r3, r2]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b22      	cmp	r3, #34	; 0x22
 8005532:	d10f      	bne.n	8005554 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2241      	movs	r2, #65	; 0x41
 8005538:	2120      	movs	r1, #32
 800553a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2240      	movs	r2, #64	; 0x40
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f7ff fcc8 	bl	8004ee2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005552:	e00e      	b.n	8005572 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2241      	movs	r2, #65	; 0x41
 8005558:	2120      	movs	r1, #32
 800555a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fcb0 	bl	8004ed2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b006      	add	sp, #24
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	00008001 	.word	0x00008001
 8005580:	00008002 	.word	0x00008002
 8005584:	fe00e800 	.word	0xfe00e800
 8005588:	ffffbfff 	.word	0xffffbfff
 800558c:	ffff7fff 	.word	0xffff7fff
 8005590:	ffff0000 	.word	0xffff0000

08005594 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <I2C_ITListenCplt+0xa8>)
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2241      	movs	r2, #65	; 0x41
 80055ae:	2120      	movs	r1, #32
 80055b0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2242      	movs	r2, #66	; 0x42
 80055b6:	2100      	movs	r1, #0
 80055b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	d022      	beq.n	800560e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	2204      	movs	r2, #4
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800560e:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <I2C_ITListenCplt+0xac>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	0011      	movs	r1, r2
 8005614:	0018      	movs	r0, r3
 8005616:	f000 fc15 	bl	8005e44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2210      	movs	r2, #16
 8005620:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2240      	movs	r2, #64	; 0x40
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff fc70 	bl	8004f12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b002      	add	sp, #8
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	ffff0000 	.word	0xffff0000
 8005640:	00008003 	.word	0x00008003

08005644 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800564e:	200f      	movs	r0, #15
 8005650:	183b      	adds	r3, r7, r0
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	2141      	movs	r1, #65	; 0x41
 8005656:	5c52      	ldrb	r2, [r2, r1]
 8005658:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2242      	movs	r2, #66	; 0x42
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a72      	ldr	r2, [pc, #456]	; (8005830 <I2C_ITError+0x1ec>)
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800567a:	183b      	adds	r3, r7, r0
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b28      	cmp	r3, #40	; 0x28
 8005680:	d007      	beq.n	8005692 <I2C_ITError+0x4e>
 8005682:	183b      	adds	r3, r7, r0
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b29      	cmp	r3, #41	; 0x29
 8005688:	d003      	beq.n	8005692 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800568a:	183b      	adds	r3, r7, r0
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b2a      	cmp	r3, #42	; 0x2a
 8005690:	d10c      	bne.n	80056ac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2103      	movs	r1, #3
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fbd4 	bl	8005e44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	2128      	movs	r1, #40	; 0x28
 80056a2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a63      	ldr	r2, [pc, #396]	; (8005834 <I2C_ITError+0x1f0>)
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
 80056aa:	e032      	b.n	8005712 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056ac:	4a62      	ldr	r2, [pc, #392]	; (8005838 <I2C_ITError+0x1f4>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 fbc6 	bl	8005e44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f8ed 	bl	800589a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2241      	movs	r2, #65	; 0x41
 80056c4:	5c9b      	ldrb	r3, [r3, r2]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d01f      	beq.n	800570c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2241      	movs	r2, #65	; 0x41
 80056d0:	2120      	movs	r1, #32
 80056d2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2220      	movs	r2, #32
 80056dc:	4013      	ands	r3, r2
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d114      	bne.n	800570c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2210      	movs	r2, #16
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d109      	bne.n	8005704 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2210      	movs	r2, #16
 80056f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	2204      	movs	r2, #4
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2220      	movs	r2, #32
 800570a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d03b      	beq.n	8005798 <I2C_ITError+0x154>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b11      	cmp	r3, #17
 8005724:	d002      	beq.n	800572c <I2C_ITError+0xe8>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b21      	cmp	r3, #33	; 0x21
 800572a:	d135      	bne.n	8005798 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	01db      	lsls	r3, r3, #7
 8005736:	401a      	ands	r2, r3
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	429a      	cmp	r2, r3
 800573e:	d107      	bne.n	8005750 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	493c      	ldr	r1, [pc, #240]	; (800583c <I2C_ITError+0x1f8>)
 800574c:	400a      	ands	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	0018      	movs	r0, r3
 8005756:	f7fe fee6 	bl	8004526 <HAL_DMA_GetState>
 800575a:	0003      	movs	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	d016      	beq.n	800578e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	4a36      	ldr	r2, [pc, #216]	; (8005840 <I2C_ITError+0x1fc>)
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	0018      	movs	r0, r3
 8005776:	f7fe fde1 	bl	800433c <HAL_DMA_Abort_IT>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d051      	beq.n	8005822 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	0018      	movs	r0, r3
 800578a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800578c:	e049      	b.n	8005822 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f859 	bl	8005848 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005796:	e044      	b.n	8005822 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d03b      	beq.n	8005818 <I2C_ITError+0x1d4>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b12      	cmp	r3, #18
 80057a4:	d002      	beq.n	80057ac <I2C_ITError+0x168>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b22      	cmp	r3, #34	; 0x22
 80057aa:	d135      	bne.n	8005818 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	401a      	ands	r2, r3
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	429a      	cmp	r2, r3
 80057be:	d107      	bne.n	80057d0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	491e      	ldr	r1, [pc, #120]	; (8005844 <I2C_ITError+0x200>)
 80057cc:	400a      	ands	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	0018      	movs	r0, r3
 80057d6:	f7fe fea6 	bl	8004526 <HAL_DMA_GetState>
 80057da:	0003      	movs	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d016      	beq.n	800580e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	4a16      	ldr	r2, [pc, #88]	; (8005840 <I2C_ITError+0x1fc>)
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	2100      	movs	r1, #0
 80057ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7fe fda1 	bl	800433c <HAL_DMA_Abort_IT>
 80057fa:	1e03      	subs	r3, r0, #0
 80057fc:	d013      	beq.n	8005826 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	0018      	movs	r0, r3
 800580a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800580c:	e00b      	b.n	8005826 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f819 	bl	8005848 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005816:	e006      	b.n	8005826 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 f814 	bl	8005848 <I2C_TreatErrorCallback>
  }
}
 8005820:	e002      	b.n	8005828 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	e000      	b.n	8005828 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005826:	46c0      	nop			; (mov r8, r8)
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	46bd      	mov	sp, r7
 800582c:	b004      	add	sp, #16
 800582e:	bd80      	pop	{r7, pc}
 8005830:	ffff0000 	.word	0xffff0000
 8005834:	08004f45 	.word	0x08004f45
 8005838:	00008003 	.word	0x00008003
 800583c:	ffffbfff 	.word	0xffffbfff
 8005840:	080058df 	.word	0x080058df
 8005844:	ffff7fff 	.word	0xffff7fff

08005848 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2241      	movs	r2, #65	; 0x41
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d10f      	bne.n	800587c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2241      	movs	r2, #65	; 0x41
 8005860:	2120      	movs	r1, #32
 8005862:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2240      	movs	r2, #64	; 0x40
 800586e:	2100      	movs	r1, #0
 8005870:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff fb5c 	bl	8004f32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800587a:	e00a      	b.n	8005892 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	2100      	movs	r1, #0
 8005888:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff fb48 	bl	8004f22 <HAL_I2C_ErrorCallback>
}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b002      	add	sp, #8
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2202      	movs	r2, #2
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d103      	bne.n	80058b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2201      	movs	r2, #1
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d007      	beq.n	80058d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	619a      	str	r2, [r3, #24]
  }
}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	46bd      	mov	sp, r7
 80058da:	b002      	add	sp, #8
 80058dc:	bd80      	pop	{r7, pc}

080058de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	2200      	movs	r2, #0
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	2200      	movs	r2, #0
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f7ff ff9a 	bl	8005848 <I2C_TreatErrorCallback>
}
 8005914:	46c0      	nop			; (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b004      	add	sp, #16
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800592c:	e030      	b.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	d02d      	beq.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005934:	f7fe fb7e 	bl	8004034 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d122      	bne.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	425a      	negs	r2, r3
 800595a:	4153      	adcs	r3, r2
 800595c:	b2db      	uxtb	r3, r3
 800595e:	001a      	movs	r2, r3
 8005960:	1dfb      	adds	r3, r7, #7
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d113      	bne.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	2220      	movs	r2, #32
 800596e:	431a      	orrs	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2241      	movs	r2, #65	; 0x41
 8005978:	2120      	movs	r1, #32
 800597a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2242      	movs	r2, #66	; 0x42
 8005980:	2100      	movs	r1, #0
 8005982:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2240      	movs	r2, #64	; 0x40
 8005988:	2100      	movs	r1, #0
 800598a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e00f      	b.n	80059b0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	425a      	negs	r2, r3
 80059a0:	4153      	adcs	r3, r2
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	001a      	movs	r2, r3
 80059a6:	1dfb      	adds	r3, r7, #7
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d0bf      	beq.n	800592e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b004      	add	sp, #16
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059c4:	e032      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 f8ff 	bl	8005bd0 <I2C_IsErrorOccurred>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d001      	beq.n	80059da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e030      	b.n	8005a3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	3301      	adds	r3, #1
 80059de:	d025      	beq.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e0:	f7fe fb28 	bl	8004034 <HAL_GetTick>
 80059e4:	0002      	movs	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11a      	bne.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d013      	beq.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a08:	2220      	movs	r2, #32
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2241      	movs	r2, #65	; 0x41
 8005a14:	2120      	movs	r1, #32
 8005a16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2242      	movs	r2, #66	; 0x42
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	2100      	movs	r1, #0
 8005a26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e007      	b.n	8005a3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2202      	movs	r2, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d1c5      	bne.n	80059c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b004      	add	sp, #16
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a50:	e02f      	b.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 f8b9 	bl	8005bd0 <I2C_IsErrorOccurred>
 8005a5e:	1e03      	subs	r3, r0, #0
 8005a60:	d001      	beq.n	8005a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e02d      	b.n	8005ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fe fae5 	bl	8004034 <HAL_GetTick>
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11a      	bne.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2220      	movs	r2, #32
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d013      	beq.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	2220      	movs	r2, #32
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2241      	movs	r2, #65	; 0x41
 8005a9a:	2120      	movs	r1, #32
 8005a9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2242      	movs	r2, #66	; 0x42
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2240      	movs	r2, #64	; 0x40
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e007      	b.n	8005ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d1c8      	bne.n	8005a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ad8:	e06b      	b.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 f875 	bl	8005bd0 <I2C_IsErrorOccurred>
 8005ae6:	1e03      	subs	r3, r0, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e069      	b.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2220      	movs	r2, #32
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d138      	bne.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2204      	movs	r2, #4
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d105      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e055      	b.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2210      	movs	r2, #16
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d107      	bne.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2210      	movs	r2, #16
 8005b2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
 8005b32:	e002      	b.n	8005b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	491f      	ldr	r1, [pc, #124]	; (8005bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2241      	movs	r2, #65	; 0x41
 8005b56:	2120      	movs	r1, #32
 8005b58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2242      	movs	r2, #66	; 0x42
 8005b5e:	2100      	movs	r1, #0
 8005b60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2240      	movs	r2, #64	; 0x40
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e029      	b.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fe fa61 	bl	8004034 <HAL_GetTick>
 8005b72:	0002      	movs	r2, r0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d00f      	beq.n	8005bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	2220      	movs	r2, #32
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2241      	movs	r2, #65	; 0x41
 8005ba2:	2120      	movs	r1, #32
 8005ba4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2240      	movs	r2, #64	; 0x40
 8005baa:	2100      	movs	r1, #0
 8005bac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e007      	b.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d18c      	bne.n	8005ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b004      	add	sp, #16
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	fe00e800 	.word	0xfe00e800

08005bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b08b      	sub	sp, #44	; 0x2c
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bdc:	2327      	movs	r3, #39	; 0x27
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <I2C_IsErrorOccurred+0x2e>
 8005bfc:	e082      	b.n	8005d04 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2210      	movs	r2, #16
 8005c04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c06:	e060      	b.n	8005cca <I2C_IsErrorOccurred+0xfa>
 8005c08:	2427      	movs	r4, #39	; 0x27
 8005c0a:	193b      	adds	r3, r7, r4
 8005c0c:	193a      	adds	r2, r7, r4
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3301      	adds	r3, #1
 8005c16:	d058      	beq.n	8005cca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7fe fa0c 	bl	8004034 <HAL_GetTick>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d306      	bcc.n	8005c36 <I2C_IsErrorOccurred+0x66>
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	193a      	adds	r2, r7, r4
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d149      	bne.n	8005cca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	4013      	ands	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c44:	2013      	movs	r0, #19
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	2142      	movs	r1, #66	; 0x42
 8005c4c:	5c52      	ldrb	r2, [r2, r1]
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d126      	bne.n	8005cb2 <I2C_IsErrorOccurred+0xe2>
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	01db      	lsls	r3, r3, #7
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d021      	beq.n	8005cb2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d01d      	beq.n	8005cb2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	01c9      	lsls	r1, r1, #7
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c88:	f7fe f9d4 	bl	8004034 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c90:	e00f      	b.n	8005cb2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c92:	f7fe f9cf 	bl	8004034 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b19      	cmp	r3, #25
 8005c9e:	d908      	bls.n	8005cb2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ca8:	2327      	movs	r3, #39	; 0x27
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]

              break;
 8005cb0:	e00b      	b.n	8005cca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2127      	movs	r1, #39	; 0x27
 8005cbe:	187a      	adds	r2, r7, r1
 8005cc0:	1879      	adds	r1, r7, r1
 8005cc2:	7809      	ldrb	r1, [r1, #0]
 8005cc4:	7011      	strb	r1, [r2, #0]
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d1e3      	bne.n	8005c92 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d004      	beq.n	8005ce2 <I2C_IsErrorOccurred+0x112>
 8005cd8:	2327      	movs	r3, #39	; 0x27
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d092      	beq.n	8005c08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ce2:	2327      	movs	r3, #39	; 0x27
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d103      	bne.n	8005cf4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cfc:	2327      	movs	r3, #39	; 0x27
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00c      	beq.n	8005d30 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	0052      	lsls	r2, r2, #1
 8005d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d28:	2327      	movs	r3, #39	; 0x27
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4013      	ands	r3, r2
 8005d38:	d00c      	beq.n	8005d54 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	00d2      	lsls	r2, r2, #3
 8005d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d4c:	2327      	movs	r3, #39	; 0x27
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d00c      	beq.n	8005d78 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	2202      	movs	r2, #2
 8005d62:	4313      	orrs	r3, r2
 8005d64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	0092      	lsls	r2, r2, #2
 8005d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d70:	2327      	movs	r3, #39	; 0x27
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005d78:	2327      	movs	r3, #39	; 0x27
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01d      	beq.n	8005dbe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff fd88 	bl	800589a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	490d      	ldr	r1, [pc, #52]	; (8005dcc <I2C_IsErrorOccurred+0x1fc>)
 8005d96:	400a      	ands	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2241      	movs	r2, #65	; 0x41
 8005daa:	2120      	movs	r1, #32
 8005dac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2242      	movs	r2, #66	; 0x42
 8005db2:	2100      	movs	r1, #0
 8005db4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2240      	movs	r2, #64	; 0x40
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005dbe:	2327      	movs	r3, #39	; 0x27
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	781b      	ldrb	r3, [r3, #0]
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b00b      	add	sp, #44	; 0x2c
 8005dca:	bd90      	pop	{r4, r7, pc}
 8005dcc:	fe00e800 	.word	0xfe00e800

08005dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	0008      	movs	r0, r1
 8005dda:	0011      	movs	r1, r2
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	240a      	movs	r4, #10
 8005de0:	193b      	adds	r3, r7, r4
 8005de2:	1c02      	adds	r2, r0, #0
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	2009      	movs	r0, #9
 8005de8:	183b      	adds	r3, r7, r0
 8005dea:	1c0a      	adds	r2, r1, #0
 8005dec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dee:	193b      	adds	r3, r7, r4
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	059b      	lsls	r3, r3, #22
 8005df4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	0419      	lsls	r1, r3, #16
 8005dfc:	23ff      	movs	r3, #255	; 0xff
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1a:	0d51      	lsrs	r1, r2, #21
 8005e1c:	2280      	movs	r2, #128	; 0x80
 8005e1e:	00d2      	lsls	r2, r2, #3
 8005e20:	400a      	ands	r2, r1
 8005e22:	4907      	ldr	r1, [pc, #28]	; (8005e40 <I2C_TransferConfig+0x70>)
 8005e24:	430a      	orrs	r2, r1
 8005e26:	43d2      	mvns	r2, r2
 8005e28:	401a      	ands	r2, r3
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b007      	add	sp, #28
 8005e3c:	bd90      	pop	{r4, r7, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	03ff63ff 	.word	0x03ff63ff

08005e44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	000a      	movs	r2, r1
 8005e4e:	1cbb      	adds	r3, r7, #2
 8005e50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e56:	1cbb      	adds	r3, r7, #2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d010      	beq.n	8005e82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2242      	movs	r2, #66	; 0x42
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2241      	movs	r2, #65	; 0x41
 8005e6c:	5c9b      	ldrb	r3, [r3, r2]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	001a      	movs	r2, r3
 8005e72:	2328      	movs	r3, #40	; 0x28
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b28      	cmp	r3, #40	; 0x28
 8005e78:	d003      	beq.n	8005e82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	22b0      	movs	r2, #176	; 0xb0
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e82:	1cbb      	adds	r3, r7, #2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	2202      	movs	r2, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d010      	beq.n	8005eae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2244      	movs	r2, #68	; 0x44
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2241      	movs	r2, #65	; 0x41
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	001a      	movs	r2, r3
 8005e9e:	2328      	movs	r3, #40	; 0x28
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b28      	cmp	r3, #40	; 0x28
 8005ea4:	d003      	beq.n	8005eae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22b0      	movs	r2, #176	; 0xb0
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005eae:	1cbb      	adds	r3, r7, #2
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	5e9b      	ldrsh	r3, [r3, r2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da03      	bge.n	8005ec0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22b8      	movs	r2, #184	; 0xb8
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ec0:	1cbb      	adds	r3, r7, #2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d103      	bne.n	8005ed0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2290      	movs	r2, #144	; 0x90
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ed0:	1cbb      	adds	r3, r7, #2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d103      	bne.n	8005ee0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ee0:	1cbb      	adds	r3, r7, #2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d103      	bne.n	8005ef0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	43d9      	mvns	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	400a      	ands	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2241      	movs	r2, #65	; 0x41
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d138      	bne.n	8005f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2240      	movs	r2, #64	; 0x40
 8005f26:	5c9b      	ldrb	r3, [r3, r2]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e032      	b.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	2101      	movs	r1, #1
 8005f36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2241      	movs	r2, #65	; 0x41
 8005f3c:	2124      	movs	r1, #36	; 0x24
 8005f3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4911      	ldr	r1, [pc, #68]	; (8005fa0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005f5c:	400a      	ands	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2241      	movs	r2, #65	; 0x41
 8005f84:	2120      	movs	r1, #32
 8005f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b002      	add	sp, #8
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	ffffefff 	.word	0xffffefff

08005fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2241      	movs	r2, #65	; 0x41
 8005fb2:	5c9b      	ldrb	r3, [r3, r2]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d139      	bne.n	800602e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2240      	movs	r2, #64	; 0x40
 8005fbe:	5c9b      	ldrb	r3, [r3, r2]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e033      	b.n	8006030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2240      	movs	r2, #64	; 0x40
 8005fcc:	2101      	movs	r1, #1
 8005fce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2241      	movs	r2, #65	; 0x41
 8005fd4:	2124      	movs	r1, #36	; 0x24
 8005fd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	438a      	bics	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2101      	movs	r1, #1
 8006016:	430a      	orrs	r2, r1
 8006018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2241      	movs	r2, #65	; 0x41
 800601e:	2120      	movs	r1, #32
 8006020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	2100      	movs	r1, #0
 8006028:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	b004      	add	sp, #16
 8006036:	bd80      	pop	{r7, pc}
 8006038:	fffff0ff 	.word	0xfffff0ff

0800603c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8006046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_I2CEx_EnableFastModePlus+0x28>)
 800604a:	2101      	movs	r1, #1
 800604c:	430a      	orrs	r2, r1
 800604e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40021000 	.word	0x40021000
 8006068:	40010000 	.word	0x40010000

0800606c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800606c:	b5b0      	push	{r4, r5, r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f000 fb5a 	bl	8006734 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006080:	4bce      	ldr	r3, [pc, #824]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	220c      	movs	r2, #12
 8006086:	4013      	ands	r3, r2
 8006088:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800608a:	4bcc      	ldr	r3, [pc, #816]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	025b      	lsls	r3, r3, #9
 8006092:	4013      	ands	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2201      	movs	r2, #1
 800609c:	4013      	ands	r3, r2
 800609e:	d100      	bne.n	80060a2 <HAL_RCC_OscConfig+0x36>
 80060a0:	e07c      	b.n	800619c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d007      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d111      	bne.n	80060d2 <HAL_RCC_OscConfig+0x66>
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	025b      	lsls	r3, r3, #9
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	4bc0      	ldr	r3, [pc, #768]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	029b      	lsls	r3, r3, #10
 80060c0:	4013      	ands	r3, r2
 80060c2:	d100      	bne.n	80060c6 <HAL_RCC_OscConfig+0x5a>
 80060c4:	e069      	b.n	800619a <HAL_RCC_OscConfig+0x12e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d165      	bne.n	800619a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e330      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	025b      	lsls	r3, r3, #9
 80060da:	429a      	cmp	r2, r3
 80060dc:	d107      	bne.n	80060ee <HAL_RCC_OscConfig+0x82>
 80060de:	4bb7      	ldr	r3, [pc, #732]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4bb6      	ldr	r3, [pc, #728]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80060e4:	2180      	movs	r1, #128	; 0x80
 80060e6:	0249      	lsls	r1, r1, #9
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	e027      	b.n	800613e <HAL_RCC_OscConfig+0xd2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	23a0      	movs	r3, #160	; 0xa0
 80060f4:	02db      	lsls	r3, r3, #11
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d10e      	bne.n	8006118 <HAL_RCC_OscConfig+0xac>
 80060fa:	4bb0      	ldr	r3, [pc, #704]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4baf      	ldr	r3, [pc, #700]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006100:	2180      	movs	r1, #128	; 0x80
 8006102:	02c9      	lsls	r1, r1, #11
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	4bac      	ldr	r3, [pc, #688]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4bab      	ldr	r3, [pc, #684]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	0249      	lsls	r1, r1, #9
 8006112:	430a      	orrs	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e012      	b.n	800613e <HAL_RCC_OscConfig+0xd2>
 8006118:	4ba8      	ldr	r3, [pc, #672]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4ba7      	ldr	r3, [pc, #668]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800611e:	49a8      	ldr	r1, [pc, #672]	; (80063c0 <HAL_RCC_OscConfig+0x354>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	4ba5      	ldr	r3, [pc, #660]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	025b      	lsls	r3, r3, #9
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4ba2      	ldr	r3, [pc, #648]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4ba1      	ldr	r3, [pc, #644]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006138:	49a2      	ldr	r1, [pc, #648]	; (80063c4 <HAL_RCC_OscConfig+0x358>)
 800613a:	400a      	ands	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d014      	beq.n	8006170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006146:	f7fd ff75 	bl	8004034 <HAL_GetTick>
 800614a:	0003      	movs	r3, r0
 800614c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006150:	f7fd ff70 	bl	8004034 <HAL_GetTick>
 8006154:	0002      	movs	r2, r0
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e2e8      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006162:	4b96      	ldr	r3, [pc, #600]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	4013      	ands	r3, r2
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0xe4>
 800616e:	e015      	b.n	800619c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fd ff60 	bl	8004034 <HAL_GetTick>
 8006174:	0003      	movs	r3, r0
 8006176:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800617a:	f7fd ff5b 	bl	8004034 <HAL_GetTick>
 800617e:	0002      	movs	r2, r0
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e2d3      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800618c:	4b8b      	ldr	r3, [pc, #556]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	4013      	ands	r3, r2
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x10e>
 8006198:	e000      	b.n	800619c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2202      	movs	r2, #2
 80061a2:	4013      	ands	r3, r2
 80061a4:	d100      	bne.n	80061a8 <HAL_RCC_OscConfig+0x13c>
 80061a6:	e08b      	b.n	80062c0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d005      	beq.n	80061c0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b0c      	cmp	r3, #12
 80061b8:	d13e      	bne.n	8006238 <HAL_RCC_OscConfig+0x1cc>
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d13b      	bne.n	8006238 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80061c0:	4b7e      	ldr	r3, [pc, #504]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2204      	movs	r2, #4
 80061c6:	4013      	ands	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_RCC_OscConfig+0x168>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e2af      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d4:	4b79      	ldr	r3, [pc, #484]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a7b      	ldr	r2, [pc, #492]	; (80063c8 <HAL_RCC_OscConfig+0x35c>)
 80061da:	4013      	ands	r3, r2
 80061dc:	0019      	movs	r1, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	4b75      	ldr	r3, [pc, #468]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80061ea:	4b74      	ldr	r3, [pc, #464]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2209      	movs	r2, #9
 80061f0:	4393      	bics	r3, r2
 80061f2:	0019      	movs	r1, r3
 80061f4:	4b71      	ldr	r3, [pc, #452]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061fc:	f000 fc6c 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 8006200:	0001      	movs	r1, r0
 8006202:	4b6e      	ldr	r3, [pc, #440]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	091b      	lsrs	r3, r3, #4
 8006208:	220f      	movs	r2, #15
 800620a:	4013      	ands	r3, r2
 800620c:	4a6f      	ldr	r2, [pc, #444]	; (80063cc <HAL_RCC_OscConfig+0x360>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	000a      	movs	r2, r1
 8006212:	40da      	lsrs	r2, r3
 8006214:	4b6e      	ldr	r3, [pc, #440]	; (80063d0 <HAL_RCC_OscConfig+0x364>)
 8006216:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006218:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <HAL_RCC_OscConfig+0x368>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2513      	movs	r5, #19
 800621e:	197c      	adds	r4, r7, r5
 8006220:	0018      	movs	r0, r3
 8006222:	f7fd fec1 	bl	8003fa8 <HAL_InitTick>
 8006226:	0003      	movs	r3, r0
 8006228:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800622a:	197b      	adds	r3, r7, r5
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d046      	beq.n	80062c0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8006232:	197b      	adds	r3, r7, r5
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	e27d      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d027      	beq.n	800628e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800623e:	4b5f      	ldr	r3, [pc, #380]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2209      	movs	r2, #9
 8006244:	4393      	bics	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	4b5c      	ldr	r3, [pc, #368]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	430a      	orrs	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006250:	f7fd fef0 	bl	8004034 <HAL_GetTick>
 8006254:	0003      	movs	r3, r0
 8006256:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800625a:	f7fd feeb 	bl	8004034 <HAL_GetTick>
 800625e:	0002      	movs	r2, r0
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e263      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800626c:	4b53      	ldr	r3, [pc, #332]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2204      	movs	r2, #4
 8006272:	4013      	ands	r3, r2
 8006274:	d0f1      	beq.n	800625a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006276:	4b51      	ldr	r3, [pc, #324]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_RCC_OscConfig+0x35c>)
 800627c:	4013      	ands	r3, r2
 800627e:	0019      	movs	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	021a      	lsls	r2, r3, #8
 8006286:	4b4d      	ldr	r3, [pc, #308]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006288:	430a      	orrs	r2, r1
 800628a:	605a      	str	r2, [r3, #4]
 800628c:	e018      	b.n	80062c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628e:	4b4b      	ldr	r3, [pc, #300]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b4a      	ldr	r3, [pc, #296]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006294:	2101      	movs	r1, #1
 8006296:	438a      	bics	r2, r1
 8006298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629a:	f7fd fecb 	bl	8004034 <HAL_GetTick>
 800629e:	0003      	movs	r3, r0
 80062a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fd fec6 	bl	8004034 <HAL_GetTick>
 80062a8:	0002      	movs	r2, r0
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e23e      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062b6:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2204      	movs	r2, #4
 80062bc:	4013      	ands	r3, r2
 80062be:	d1f1      	bne.n	80062a4 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2210      	movs	r2, #16
 80062c6:	4013      	ands	r3, r2
 80062c8:	d100      	bne.n	80062cc <HAL_RCC_OscConfig+0x260>
 80062ca:	e0a1      	b.n	8006410 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d140      	bne.n	8006354 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062d2:	4b3a      	ldr	r3, [pc, #232]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4013      	ands	r3, r2
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x27e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e224      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ea:	4b34      	ldr	r3, [pc, #208]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4a3a      	ldr	r2, [pc, #232]	; (80063d8 <HAL_RCC_OscConfig+0x36c>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	0019      	movs	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	4b30      	ldr	r3, [pc, #192]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062fe:	4b2f      	ldr	r3, [pc, #188]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	0a19      	lsrs	r1, r3, #8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	061a      	lsls	r2, r3, #24
 800630c:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	0b5b      	lsrs	r3, r3, #13
 8006318:	3301      	adds	r3, #1
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	0212      	lsls	r2, r2, #8
 800631e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006320:	4b26      	ldr	r3, [pc, #152]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	210f      	movs	r1, #15
 8006328:	400b      	ands	r3, r1
 800632a:	4928      	ldr	r1, [pc, #160]	; (80063cc <HAL_RCC_OscConfig+0x360>)
 800632c:	5ccb      	ldrb	r3, [r1, r3]
 800632e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006330:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <HAL_RCC_OscConfig+0x364>)
 8006332:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <HAL_RCC_OscConfig+0x368>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2513      	movs	r5, #19
 800633a:	197c      	adds	r4, r7, r5
 800633c:	0018      	movs	r0, r3
 800633e:	f7fd fe33 	bl	8003fa8 <HAL_InitTick>
 8006342:	0003      	movs	r3, r0
 8006344:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006346:	197b      	adds	r3, r7, r5
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d060      	beq.n	8006410 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800634e:	197b      	adds	r3, r7, r5
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	e1ef      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d03f      	beq.n	80063dc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0049      	lsls	r1, r1, #1
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fd fe63 	bl	8004034 <HAL_GetTick>
 800636e:	0003      	movs	r3, r0
 8006370:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006374:	f7fd fe5e 	bl	8004034 <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1d6      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4013      	ands	r3, r2
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <HAL_RCC_OscConfig+0x36c>)
 8006398:	4013      	ands	r3, r2
 800639a:	0019      	movs	r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	0a19      	lsrs	r1, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	061a      	lsls	r2, r3, #24
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <HAL_RCC_OscConfig+0x350>)
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	e029      	b.n	8006410 <HAL_RCC_OscConfig+0x3a4>
 80063bc:	40021000 	.word	0x40021000
 80063c0:	fffeffff 	.word	0xfffeffff
 80063c4:	fffbffff 	.word	0xfffbffff
 80063c8:	ffffe0ff 	.word	0xffffe0ff
 80063cc:	0800c194 	.word	0x0800c194
 80063d0:	20000000 	.word	0x20000000
 80063d4:	20000004 	.word	0x20000004
 80063d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063dc:	4bbe      	ldr	r3, [pc, #760]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4bbd      	ldr	r3, [pc, #756]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80063e2:	49be      	ldr	r1, [pc, #760]	; (80066dc <HAL_RCC_OscConfig+0x670>)
 80063e4:	400a      	ands	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd fe24 	bl	8004034 <HAL_GetTick>
 80063ec:	0003      	movs	r3, r0
 80063ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063f2:	f7fd fe1f 	bl	8004034 <HAL_GetTick>
 80063f6:	0002      	movs	r2, r0
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e197      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006404:	4bb4      	ldr	r3, [pc, #720]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4013      	ands	r3, r2
 800640e:	d1f0      	bne.n	80063f2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2208      	movs	r2, #8
 8006416:	4013      	ands	r3, r2
 8006418:	d036      	beq.n	8006488 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006422:	4bad      	ldr	r3, [pc, #692]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006426:	4bac      	ldr	r3, [pc, #688]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006428:	2101      	movs	r1, #1
 800642a:	430a      	orrs	r2, r1
 800642c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fd fe01 	bl	8004034 <HAL_GetTick>
 8006432:	0003      	movs	r3, r0
 8006434:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006438:	f7fd fdfc 	bl	8004034 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e174      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800644a:	4ba3      	ldr	r3, [pc, #652]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800644c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644e:	2202      	movs	r2, #2
 8006450:	4013      	ands	r3, r2
 8006452:	d0f1      	beq.n	8006438 <HAL_RCC_OscConfig+0x3cc>
 8006454:	e018      	b.n	8006488 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006456:	4ba0      	ldr	r3, [pc, #640]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800645a:	4b9f      	ldr	r3, [pc, #636]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800645c:	2101      	movs	r1, #1
 800645e:	438a      	bics	r2, r1
 8006460:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006462:	f7fd fde7 	bl	8004034 <HAL_GetTick>
 8006466:	0003      	movs	r3, r0
 8006468:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800646c:	f7fd fde2 	bl	8004034 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e15a      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800647e:	4b96      	ldr	r3, [pc, #600]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	d1f1      	bne.n	800646c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2204      	movs	r2, #4
 800648e:	4013      	ands	r3, r2
 8006490:	d100      	bne.n	8006494 <HAL_RCC_OscConfig+0x428>
 8006492:	e0ae      	b.n	80065f2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006494:	2027      	movs	r0, #39	; 0x27
 8006496:	183b      	adds	r3, r7, r0
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800649c:	4b8e      	ldr	r3, [pc, #568]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800649e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	055b      	lsls	r3, r3, #21
 80064a4:	4013      	ands	r3, r2
 80064a6:	d109      	bne.n	80064bc <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064a8:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80064aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ac:	4b8a      	ldr	r3, [pc, #552]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	0549      	lsls	r1, r1, #21
 80064b2:	430a      	orrs	r2, r1
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80064b6:	183b      	adds	r3, r7, r0
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	4b88      	ldr	r3, [pc, #544]	; (80066e0 <HAL_RCC_OscConfig+0x674>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4013      	ands	r3, r2
 80064c6:	d11a      	bne.n	80064fe <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c8:	4b85      	ldr	r3, [pc, #532]	; (80066e0 <HAL_RCC_OscConfig+0x674>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <HAL_RCC_OscConfig+0x674>)
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	0049      	lsls	r1, r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d6:	f7fd fdad 	bl	8004034 <HAL_GetTick>
 80064da:	0003      	movs	r3, r0
 80064dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e0:	f7fd fda8 	bl	8004034 <HAL_GetTick>
 80064e4:	0002      	movs	r2, r0
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e120      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f2:	4b7b      	ldr	r3, [pc, #492]	; (80066e0 <HAL_RCC_OscConfig+0x674>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4013      	ands	r3, r2
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	429a      	cmp	r2, r3
 8006508:	d107      	bne.n	800651a <HAL_RCC_OscConfig+0x4ae>
 800650a:	4b73      	ldr	r3, [pc, #460]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800650c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800650e:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006510:	2180      	movs	r1, #128	; 0x80
 8006512:	0049      	lsls	r1, r1, #1
 8006514:	430a      	orrs	r2, r1
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
 8006518:	e031      	b.n	800657e <HAL_RCC_OscConfig+0x512>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0x4d0>
 8006522:	4b6d      	ldr	r3, [pc, #436]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006526:	4b6c      	ldr	r3, [pc, #432]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006528:	496c      	ldr	r1, [pc, #432]	; (80066dc <HAL_RCC_OscConfig+0x670>)
 800652a:	400a      	ands	r2, r1
 800652c:	651a      	str	r2, [r3, #80]	; 0x50
 800652e:	4b6a      	ldr	r3, [pc, #424]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006532:	4b69      	ldr	r3, [pc, #420]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006534:	496b      	ldr	r1, [pc, #428]	; (80066e4 <HAL_RCC_OscConfig+0x678>)
 8006536:	400a      	ands	r2, r1
 8006538:	651a      	str	r2, [r3, #80]	; 0x50
 800653a:	e020      	b.n	800657e <HAL_RCC_OscConfig+0x512>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	23a0      	movs	r3, #160	; 0xa0
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	429a      	cmp	r2, r3
 8006546:	d10e      	bne.n	8006566 <HAL_RCC_OscConfig+0x4fa>
 8006548:	4b63      	ldr	r3, [pc, #396]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800654a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800654c:	4b62      	ldr	r3, [pc, #392]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	00c9      	lsls	r1, r1, #3
 8006552:	430a      	orrs	r2, r1
 8006554:	651a      	str	r2, [r3, #80]	; 0x50
 8006556:	4b60      	ldr	r3, [pc, #384]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800655a:	4b5f      	ldr	r3, [pc, #380]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	0049      	lsls	r1, r1, #1
 8006560:	430a      	orrs	r2, r1
 8006562:	651a      	str	r2, [r3, #80]	; 0x50
 8006564:	e00b      	b.n	800657e <HAL_RCC_OscConfig+0x512>
 8006566:	4b5c      	ldr	r3, [pc, #368]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800656a:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800656c:	495b      	ldr	r1, [pc, #364]	; (80066dc <HAL_RCC_OscConfig+0x670>)
 800656e:	400a      	ands	r2, r1
 8006570:	651a      	str	r2, [r3, #80]	; 0x50
 8006572:	4b59      	ldr	r3, [pc, #356]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006576:	4b58      	ldr	r3, [pc, #352]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006578:	495a      	ldr	r1, [pc, #360]	; (80066e4 <HAL_RCC_OscConfig+0x678>)
 800657a:	400a      	ands	r2, r1
 800657c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d015      	beq.n	80065b2 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006586:	f7fd fd55 	bl	8004034 <HAL_GetTick>
 800658a:	0003      	movs	r3, r0
 800658c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800658e:	e009      	b.n	80065a4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fd fd50 	bl	8004034 <HAL_GetTick>
 8006594:	0002      	movs	r2, r0
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	4a53      	ldr	r2, [pc, #332]	; (80066e8 <HAL_RCC_OscConfig+0x67c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e0c7      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a4:	4b4c      	ldr	r3, [pc, #304]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80065a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4013      	ands	r3, r2
 80065ae:	d0ef      	beq.n	8006590 <HAL_RCC_OscConfig+0x524>
 80065b0:	e014      	b.n	80065dc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b2:	f7fd fd3f 	bl	8004034 <HAL_GetTick>
 80065b6:	0003      	movs	r3, r0
 80065b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065ba:	e009      	b.n	80065d0 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065bc:	f7fd fd3a 	bl	8004034 <HAL_GetTick>
 80065c0:	0002      	movs	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	4a48      	ldr	r2, [pc, #288]	; (80066e8 <HAL_RCC_OscConfig+0x67c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e0b1      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d0:	4b41      	ldr	r3, [pc, #260]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80065d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4013      	ands	r3, r2
 80065da:	d1ef      	bne.n	80065bc <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065dc:	2327      	movs	r3, #39	; 0x27
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d105      	bne.n	80065f2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e6:	4b3c      	ldr	r3, [pc, #240]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80065e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ea:	4b3b      	ldr	r3, [pc, #236]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80065ec:	493f      	ldr	r1, [pc, #252]	; (80066ec <HAL_RCC_OscConfig+0x680>)
 80065ee:	400a      	ands	r2, r1
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d100      	bne.n	80065fc <HAL_RCC_OscConfig+0x590>
 80065fa:	e09a      	b.n	8006732 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d064      	beq.n	80066cc <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b02      	cmp	r3, #2
 8006608:	d145      	bne.n	8006696 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660a:	4b33      	ldr	r3, [pc, #204]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b32      	ldr	r3, [pc, #200]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006610:	4937      	ldr	r1, [pc, #220]	; (80066f0 <HAL_RCC_OscConfig+0x684>)
 8006612:	400a      	ands	r2, r1
 8006614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fd fd0d 	bl	8004034 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006620:	f7fd fd08 	bl	8004034 <HAL_GetTick>
 8006624:	0002      	movs	r2, r0
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e080      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	049b      	lsls	r3, r3, #18
 800663a:	4013      	ands	r3, r2
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <HAL_RCC_OscConfig+0x688>)
 8006644:	4013      	ands	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	431a      	orrs	r2, r3
 8006658:	4b1f      	ldr	r3, [pc, #124]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800665a:	430a      	orrs	r2, r1
 800665c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800665e:	4b1e      	ldr	r3, [pc, #120]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	0449      	lsls	r1, r1, #17
 8006668:	430a      	orrs	r2, r1
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fd fce2 	bl	8004034 <HAL_GetTick>
 8006670:	0003      	movs	r3, r0
 8006672:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006676:	f7fd fcdd 	bl	8004034 <HAL_GetTick>
 800667a:	0002      	movs	r2, r0
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e055      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	049b      	lsls	r3, r3, #18
 8006690:	4013      	ands	r3, r2
 8006692:	d0f0      	beq.n	8006676 <HAL_RCC_OscConfig+0x60a>
 8006694:	e04d      	b.n	8006732 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006696:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 800669c:	4914      	ldr	r1, [pc, #80]	; (80066f0 <HAL_RCC_OscConfig+0x684>)
 800669e:	400a      	ands	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fd fcc7 	bl	8004034 <HAL_GetTick>
 80066a6:	0003      	movs	r3, r0
 80066a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fd fcc2 	bl	8004034 <HAL_GetTick>
 80066b0:	0002      	movs	r2, r0
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e03a      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_RCC_OscConfig+0x66c>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	049b      	lsls	r3, r3, #18
 80066c6:	4013      	ands	r3, r2
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x640>
 80066ca:	e032      	b.n	8006732 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e02d      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
 80066d8:	40021000 	.word	0x40021000
 80066dc:	fffffeff 	.word	0xfffffeff
 80066e0:	40007000 	.word	0x40007000
 80066e4:	fffffbff 	.word	0xfffffbff
 80066e8:	00001388 	.word	0x00001388
 80066ec:	efffffff 	.word	0xefffffff
 80066f0:	feffffff 	.word	0xfeffffff
 80066f4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066f8:	4b10      	ldr	r3, [pc, #64]	; (800673c <HAL_RCC_OscConfig+0x6d0>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	025b      	lsls	r3, r3, #9
 8006704:	401a      	ands	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	429a      	cmp	r2, r3
 800670c:	d10f      	bne.n	800672e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	23f0      	movs	r3, #240	; 0xf0
 8006712:	039b      	lsls	r3, r3, #14
 8006714:	401a      	ands	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d107      	bne.n	800672e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	23c0      	movs	r3, #192	; 0xc0
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	401a      	ands	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d001      	beq.n	8006732 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b00a      	add	sp, #40	; 0x28
 800673a:	bdb0      	pop	{r4, r5, r7, pc}
 800673c:	40021000 	.word	0x40021000

08006740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e128      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006754:	4b96      	ldr	r3, [pc, #600]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	4013      	ands	r3, r2
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d91e      	bls.n	80067a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b93      	ldr	r3, [pc, #588]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	4393      	bics	r3, r2
 800676a:	0019      	movs	r1, r3
 800676c:	4b90      	ldr	r3, [pc, #576]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006774:	f7fd fc5e 	bl	8004034 <HAL_GetTick>
 8006778:	0003      	movs	r3, r0
 800677a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677c:	e009      	b.n	8006792 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800677e:	f7fd fc59 	bl	8004034 <HAL_GetTick>
 8006782:	0002      	movs	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	4a8a      	ldr	r2, [pc, #552]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e109      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b87      	ldr	r3, [pc, #540]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	4013      	ands	r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d1ee      	bne.n	800677e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	4013      	ands	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067aa:	4b83      	ldr	r3, [pc, #524]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	22f0      	movs	r2, #240	; 0xf0
 80067b0:	4393      	bics	r3, r2
 80067b2:	0019      	movs	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ba:	430a      	orrs	r2, r1
 80067bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	d100      	bne.n	80067ca <HAL_RCC_ClockConfig+0x8a>
 80067c8:	e089      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067d2:	4b79      	ldr	r3, [pc, #484]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	4013      	ands	r3, r2
 80067dc:	d120      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0e1      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067ea:	4b73      	ldr	r3, [pc, #460]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	049b      	lsls	r3, r3, #18
 80067f2:	4013      	ands	r3, r2
 80067f4:	d114      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e0d5      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006802:	4b6d      	ldr	r3, [pc, #436]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2204      	movs	r2, #4
 8006808:	4013      	ands	r3, r2
 800680a:	d109      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0ca      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006810:	4b69      	ldr	r3, [pc, #420]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4013      	ands	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0c2      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006820:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	4393      	bics	r3, r2
 8006828:	0019      	movs	r1, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4b62      	ldr	r3, [pc, #392]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006830:	430a      	orrs	r2, r1
 8006832:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006834:	f7fd fbfe 	bl	8004034 <HAL_GetTick>
 8006838:	0003      	movs	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d111      	bne.n	8006868 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006844:	e009      	b.n	800685a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006846:	f7fd fbf5 	bl	8004034 <HAL_GetTick>
 800684a:	0002      	movs	r2, r0
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	4a58      	ldr	r2, [pc, #352]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0a5      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800685a:	4b57      	ldr	r3, [pc, #348]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	220c      	movs	r2, #12
 8006860:	4013      	ands	r3, r2
 8006862:	2b08      	cmp	r3, #8
 8006864:	d1ef      	bne.n	8006846 <HAL_RCC_ClockConfig+0x106>
 8006866:	e03a      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d111      	bne.n	8006894 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006870:	e009      	b.n	8006886 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006872:	f7fd fbdf 	bl	8004034 <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	4a4d      	ldr	r2, [pc, #308]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e08f      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006886:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	220c      	movs	r2, #12
 800688c:	4013      	ands	r3, r2
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d1ef      	bne.n	8006872 <HAL_RCC_ClockConfig+0x132>
 8006892:	e024      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d11b      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800689c:	e009      	b.n	80068b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689e:	f7fd fbc9 	bl	8004034 <HAL_GetTick>
 80068a2:	0002      	movs	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e079      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b2:	4b41      	ldr	r3, [pc, #260]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	220c      	movs	r2, #12
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d1ef      	bne.n	800689e <HAL_RCC_ClockConfig+0x15e>
 80068be:	e00e      	b.n	80068de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c0:	f7fd fbb8 	bl	8004034 <HAL_GetTick>
 80068c4:	0002      	movs	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e068      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80068d4:	4b38      	ldr	r3, [pc, #224]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	220c      	movs	r2, #12
 80068da:	4013      	ands	r3, r2
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068de:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	4013      	ands	r3, r2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d21e      	bcs.n	800692a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ec:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	4393      	bics	r3, r2
 80068f4:	0019      	movs	r1, r3
 80068f6:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068fe:	f7fd fb99 	bl	8004034 <HAL_GetTick>
 8006902:	0003      	movs	r3, r0
 8006904:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	e009      	b.n	800691c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fd fb94 	bl	8004034 <HAL_GetTick>
 800690c:	0002      	movs	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <HAL_RCC_ClockConfig+0x274>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e044      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCC_ClockConfig+0x270>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2201      	movs	r2, #1
 8006922:	4013      	ands	r3, r2
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d1ee      	bne.n	8006908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2204      	movs	r2, #4
 8006930:	4013      	ands	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a20      	ldr	r2, [pc, #128]	; (80069bc <HAL_RCC_ClockConfig+0x27c>)
 800693a:	4013      	ands	r3, r2
 800693c:	0019      	movs	r1, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006944:	430a      	orrs	r2, r1
 8006946:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2208      	movs	r2, #8
 800694e:	4013      	ands	r3, r2
 8006950:	d00a      	beq.n	8006968 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <HAL_RCC_ClockConfig+0x280>)
 8006958:	4013      	ands	r3, r2
 800695a:	0019      	movs	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	00da      	lsls	r2, r3, #3
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006964:	430a      	orrs	r2, r1
 8006966:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006968:	f000 f8b6 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 800696c:	0001      	movs	r1, r0
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <HAL_RCC_ClockConfig+0x278>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	220f      	movs	r2, #15
 8006976:	4013      	ands	r3, r2
 8006978:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_RCC_ClockConfig+0x284>)
 800697a:	5cd3      	ldrb	r3, [r2, r3]
 800697c:	000a      	movs	r2, r1
 800697e:	40da      	lsrs	r2, r3
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_RCC_ClockConfig+0x288>)
 8006982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <HAL_RCC_ClockConfig+0x28c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	250b      	movs	r5, #11
 800698a:	197c      	adds	r4, r7, r5
 800698c:	0018      	movs	r0, r3
 800698e:	f7fd fb0b 	bl	8003fa8 <HAL_InitTick>
 8006992:	0003      	movs	r3, r0
 8006994:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006996:	197b      	adds	r3, r7, r5
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800699e:	197b      	adds	r3, r7, r5
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40022000 	.word	0x40022000
 80069b4:	00001388 	.word	0x00001388
 80069b8:	40021000 	.word	0x40021000
 80069bc:	fffff8ff 	.word	0xfffff8ff
 80069c0:	ffffc7ff 	.word	0xffffc7ff
 80069c4:	0800c194 	.word	0x0800c194
 80069c8:	20000000 	.word	0x20000000
 80069cc:	20000004 	.word	0x20000004

080069d0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b08d      	sub	sp, #52	; 0x34
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80069dc:	241c      	movs	r4, #28
 80069de:	193b      	adds	r3, r7, r4
 80069e0:	0018      	movs	r0, r3
 80069e2:	2314      	movs	r3, #20
 80069e4:	001a      	movs	r2, r3
 80069e6:	2100      	movs	r1, #0
 80069e8:	f003 f9ce 	bl	8009d88 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80069ec:	0020      	movs	r0, r4
 80069ee:	183b      	adds	r3, r7, r0
 80069f0:	2202      	movs	r2, #2
 80069f2:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80069f4:	183b      	adds	r3, r7, r0
 80069f6:	2202      	movs	r2, #2
 80069f8:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80069fa:	183b      	adds	r3, r7, r0
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11a      	bne.n	8006a3c <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	2280      	movs	r2, #128	; 0x80
 8006a0a:	0052      	lsls	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006a0e:	183b      	adds	r3, r7, r0
 8006a10:	2200      	movs	r2, #0
 8006a12:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006a14:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a20:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	2201      	movs	r2, #1
 8006a26:	4013      	ands	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8006a2c:	183a      	adds	r2, r7, r0
 8006a2e:	23a0      	movs	r3, #160	; 0xa0
 8006a30:	05db      	lsls	r3, r3, #23
 8006a32:	0011      	movs	r1, r2
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fd fd83 	bl	8004540 <HAL_GPIO_Init>
 8006a3a:	e038      	b.n	8006aae <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d11a      	bne.n	8006a78 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8006a42:	201c      	movs	r0, #28
 8006a44:	183b      	adds	r3, r7, r0
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	0192      	lsls	r2, r2, #6
 8006a4a:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8006a4c:	183b      	adds	r3, r7, r0
 8006a4e:	2200      	movs	r2, #0
 8006a50:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8006a52:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a58:	2102      	movs	r1, #2
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a5e:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	2202      	movs	r2, #2
 8006a64:	4013      	ands	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8006a6a:	183b      	adds	r3, r7, r0
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_RCC_MCOConfig+0x100>)
 8006a6e:	0019      	movs	r1, r3
 8006a70:	0010      	movs	r0, r2
 8006a72:	f7fd fd65 	bl	8004540 <HAL_GPIO_Init>
 8006a76:	e01a      	b.n	8006aae <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8006a78:	201c      	movs	r0, #28
 8006a7a:	183b      	adds	r3, r7, r0
 8006a7c:	2280      	movs	r2, #128	; 0x80
 8006a7e:	0092      	lsls	r2, r2, #2
 8006a80:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006a82:	183b      	adds	r3, r7, r0
 8006a84:	2200      	movs	r2, #0
 8006a86:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a8e:	2101      	movs	r1, #1
 8006a90:	430a      	orrs	r2, r1
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006aa0:	183a      	adds	r2, r7, r0
 8006aa2:	23a0      	movs	r3, #160	; 0xa0
 8006aa4:	05db      	lsls	r3, r3, #23
 8006aa6:	0011      	movs	r1, r2
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7fd fd49 	bl	8004540 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006aae:	4b07      	ldr	r3, [pc, #28]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <HAL_RCC_MCOConfig+0x104>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	4b03      	ldr	r3, [pc, #12]	; (8006acc <HAL_RCC_MCOConfig+0xfc>)
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	60da      	str	r2, [r3, #12]
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b00d      	add	sp, #52	; 0x34
 8006aca:	bd90      	pop	{r4, r7, pc}
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	50000400 	.word	0x50000400
 8006ad4:	80ffffff 	.word	0x80ffffff

08006ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad8:	b5b0      	push	{r4, r5, r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006ade:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b0c      	cmp	r3, #12
 8006aec:	d014      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x40>
 8006aee:	d900      	bls.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1a>
 8006af0:	e07b      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x112>
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_GetSysClockFreq+0x24>
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d00b      	beq.n	8006b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006afa:	e076      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006afc:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2210      	movs	r2, #16
 8006b02:	4013      	ands	r3, r2
 8006b04:	d002      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006b06:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006b0a:	e07c      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006b0c:	4b42      	ldr	r3, [pc, #264]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x140>)
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b10:	e079      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b12:	4b42      	ldr	r3, [pc, #264]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x144>)
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b16:	e076      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	0c9a      	lsrs	r2, r3, #18
 8006b1c:	230f      	movs	r3, #15
 8006b1e:	401a      	ands	r2, r3
 8006b20:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x148>)
 8006b22:	5c9b      	ldrb	r3, [r3, r2]
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	0d9a      	lsrs	r2, r3, #22
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	3301      	adds	r3, #1
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	025b      	lsls	r3, r3, #9
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d01a      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	4a35      	ldr	r2, [pc, #212]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x144>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	69b8      	ldr	r0, [r7, #24]
 8006b4c:	69f9      	ldr	r1, [r7, #28]
 8006b4e:	f7f9 fd05 	bl	800055c <__aeabi_lmul>
 8006b52:	0002      	movs	r2, r0
 8006b54:	000b      	movs	r3, r1
 8006b56:	0010      	movs	r0, r2
 8006b58:	0019      	movs	r1, r3
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f7f9 fcd9 	bl	800051c <__aeabi_uldivmod>
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	000b      	movs	r3, r1
 8006b6e:	0013      	movs	r3, r2
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	e037      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006b74:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2210      	movs	r2, #16
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d01a      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	4a23      	ldr	r2, [pc, #140]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	68b8      	ldr	r0, [r7, #8]
 8006b8c:	68f9      	ldr	r1, [r7, #12]
 8006b8e:	f7f9 fce5 	bl	800055c <__aeabi_lmul>
 8006b92:	0002      	movs	r2, r0
 8006b94:	000b      	movs	r3, r1
 8006b96:	0010      	movs	r0, r2
 8006b98:	0019      	movs	r1, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f7f9 fcb9 	bl	800051c <__aeabi_uldivmod>
 8006baa:	0002      	movs	r2, r0
 8006bac:	000b      	movs	r3, r1
 8006bae:	0013      	movs	r3, r2
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	e017      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	2300      	movs	r3, #0
 8006bba:	0019      	movs	r1, r3
 8006bbc:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x140>)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f7f9 fccc 	bl	800055c <__aeabi_lmul>
 8006bc4:	0002      	movs	r2, r0
 8006bc6:	000b      	movs	r3, r1
 8006bc8:	0010      	movs	r0, r2
 8006bca:	0019      	movs	r1, r3
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	001c      	movs	r4, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	001d      	movs	r5, r3
 8006bd4:	0022      	movs	r2, r4
 8006bd6:	002b      	movs	r3, r5
 8006bd8:	f7f9 fca0 	bl	800051c <__aeabi_uldivmod>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	000b      	movs	r3, r1
 8006be0:	0013      	movs	r3, r2
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006be8:	e00d      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x138>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	0b5b      	lsrs	r3, r3, #13
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	2280      	movs	r2, #128	; 0x80
 8006bfc:	0212      	lsls	r2, r2, #8
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	0013      	movs	r3, r2
 8006c02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c04:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b00e      	add	sp, #56	; 0x38
 8006c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c10:	40021000 	.word	0x40021000
 8006c14:	003d0900 	.word	0x003d0900
 8006c18:	00f42400 	.word	0x00f42400
 8006c1c:	007a1200 	.word	0x007a1200
 8006c20:	0800c1ac 	.word	0x0800c1ac

08006c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	20000000 	.word	0x20000000

08006c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c3c:	f7ff fff2 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8006c40:	0001      	movs	r1, r0
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	2207      	movs	r2, #7
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c4e:	5cd3      	ldrb	r3, [r2, r3]
 8006c50:	40d9      	lsrs	r1, r3
 8006c52:	000b      	movs	r3, r1
}
 8006c54:	0018      	movs	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	0800c1a4 	.word	0x0800c1a4

08006c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c68:	f7ff ffdc 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8006c6c:	0001      	movs	r1, r0
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	0adb      	lsrs	r3, r3, #11
 8006c74:	2207      	movs	r2, #7
 8006c76:	4013      	ands	r3, r2
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	40d9      	lsrs	r1, r3
 8006c7e:	000b      	movs	r3, r1
}
 8006c80:	0018      	movs	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	0800c1a4 	.word	0x0800c1a4

08006c90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006c98:	2017      	movs	r0, #23
 8006c9a:	183b      	adds	r3, r7, r0
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d100      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006caa:	e0c7      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cac:	4b8b      	ldr	r3, [pc, #556]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	055b      	lsls	r3, r3, #21
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d109      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb8:	4b88      	ldr	r3, [pc, #544]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	4b87      	ldr	r3, [pc, #540]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006cbe:	2180      	movs	r1, #128	; 0x80
 8006cc0:	0549      	lsls	r1, r1, #21
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006cc6:	183b      	adds	r3, r7, r0
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ccc:	4b84      	ldr	r3, [pc, #528]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d11a      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd8:	4b81      	ldr	r3, [pc, #516]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b80      	ldr	r3, [pc, #512]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	0049      	lsls	r1, r1, #1
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce6:	f7fd f9a5 	bl	8004034 <HAL_GetTick>
 8006cea:	0003      	movs	r3, r0
 8006cec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cee:	e008      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf0:	f7fd f9a0 	bl	8004034 <HAL_GetTick>
 8006cf4:	0002      	movs	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e0e8      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d02:	4b77      	ldr	r3, [pc, #476]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	2380      	movs	r3, #128	; 0x80
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006d0e:	4b73      	ldr	r3, [pc, #460]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	23c0      	movs	r3, #192	; 0xc0
 8006d14:	039b      	lsls	r3, r3, #14
 8006d16:	4013      	ands	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	23c0      	movs	r3, #192	; 0xc0
 8006d20:	039b      	lsls	r3, r3, #14
 8006d22:	4013      	ands	r3, r2
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d013      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	23c0      	movs	r3, #192	; 0xc0
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	401a      	ands	r2, r3
 8006d34:	23c0      	movs	r3, #192	; 0xc0
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d10a      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d3c:	4b67      	ldr	r3, [pc, #412]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	2380      	movs	r3, #128	; 0x80
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	401a      	ands	r2, r3
 8006d46:	2380      	movs	r3, #128	; 0x80
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e0c0      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006d52:	4b62      	ldr	r3, [pc, #392]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d56:	23c0      	movs	r3, #192	; 0xc0
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d03b      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	23c0      	movs	r3, #192	; 0xc0
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d033      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d02e      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006d7e:	4b57      	ldr	r3, [pc, #348]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d82:	4a58      	ldr	r2, [pc, #352]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d88:	4b54      	ldr	r3, [pc, #336]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8c:	4b53      	ldr	r3, [pc, #332]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	0309      	lsls	r1, r1, #12
 8006d92:	430a      	orrs	r2, r1
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d96:	4b51      	ldr	r3, [pc, #324]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d9a:	4b50      	ldr	r3, [pc, #320]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006d9c:	4952      	ldr	r1, [pc, #328]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d9e:	400a      	ands	r2, r1
 8006da0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006da2:	4b4e      	ldr	r3, [pc, #312]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4013      	ands	r3, r2
 8006db0:	d014      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fd f93f 	bl	8004034 <HAL_GetTick>
 8006db6:	0003      	movs	r3, r0
 8006db8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dba:	e009      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7fd f93a 	bl	8004034 <HAL_GetTick>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a49      	ldr	r2, [pc, #292]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e081      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd0:	4b42      	ldr	r3, [pc, #264]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d0ef      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2220      	movs	r2, #32
 8006de2:	4013      	ands	r3, r2
 8006de4:	d01f      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	23c0      	movs	r3, #192	; 0xc0
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	401a      	ands	r2, r3
 8006df0:	23c0      	movs	r3, #192	; 0xc0
 8006df2:	029b      	lsls	r3, r3, #10
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d10c      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006df8:	4b38      	ldr	r3, [pc, #224]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	0019      	movs	r1, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	23c0      	movs	r3, #192	; 0xc0
 8006e08:	039b      	lsls	r3, r3, #14
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	4b33      	ldr	r3, [pc, #204]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	4b32      	ldr	r3, [pc, #200]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	23c0      	movs	r3, #192	; 0xc0
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	401a      	ands	r2, r3
 8006e20:	4b2e      	ldr	r3, [pc, #184]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e26:	2317      	movs	r3, #23
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e34:	4b29      	ldr	r3, [pc, #164]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e36:	492f      	ldr	r1, [pc, #188]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2201      	movs	r2, #1
 8006e42:	4013      	ands	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e46:	4b25      	ldr	r3, [pc, #148]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4393      	bics	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	4b21      	ldr	r3, [pc, #132]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e56:	430a      	orrs	r2, r1
 8006e58:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	4013      	ands	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e64:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	220c      	movs	r2, #12
 8006e6a:	4393      	bics	r3, r2
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	4b1a      	ldr	r3, [pc, #104]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e74:	430a      	orrs	r2, r1
 8006e76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e86:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	0019      	movs	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e92:	430a      	orrs	r2, r1
 8006e94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d009      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea4:	4a15      	ldr	r2, [pc, #84]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	0019      	movs	r1, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	4013      	ands	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b006      	add	sp, #24
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40007000 	.word	0x40007000
 8006ee4:	fffcffff 	.word	0xfffcffff
 8006ee8:	fff7ffff 	.word	0xfff7ffff
 8006eec:	00001388 	.word	0x00001388
 8006ef0:	ffcfffff 	.word	0xffcfffff
 8006ef4:	efffffff 	.word	0xefffffff
 8006ef8:	fffff3ff 	.word	0xfffff3ff
 8006efc:	ffffcfff 	.word	0xffffcfff
 8006f00:	fff3ffff 	.word	0xfff3ffff

08006f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e083      	b.n	800701e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	2382      	movs	r3, #130	; 0x82
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d009      	beq.n	8006f3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	61da      	str	r2, [r3, #28]
 8006f30:	e005      	b.n	8006f3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2251      	movs	r2, #81	; 0x51
 8006f48:	5c9b      	ldrb	r3, [r3, r2]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2250      	movs	r2, #80	; 0x50
 8006f54:	2100      	movs	r1, #0
 8006f56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7fc fd02 	bl	8003964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2251      	movs	r2, #81	; 0x51
 8006f64:	2102      	movs	r1, #2
 8006f66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2140      	movs	r1, #64	; 0x40
 8006f74:	438a      	bics	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	2382      	movs	r3, #130	; 0x82
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	401a      	ands	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6899      	ldr	r1, [r3, #8]
 8006f86:	2384      	movs	r3, #132	; 0x84
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68d9      	ldr	r1, [r3, #12]
 8006f92:	2380      	movs	r3, #128	; 0x80
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	400b      	ands	r3, r1
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2102      	movs	r1, #2
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	2101      	movs	r1, #1
 8006faa:	400b      	ands	r3, r1
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6999      	ldr	r1, [r3, #24]
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	400b      	ands	r3, r1
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2138      	movs	r1, #56	; 0x38
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	400b      	ands	r3, r1
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	0011      	movs	r1, r2
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	019b      	lsls	r3, r3, #6
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	2204      	movs	r2, #4
 8006fea:	4013      	ands	r3, r2
 8006fec:	0019      	movs	r1, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	401a      	ands	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4907      	ldr	r1, [pc, #28]	; (8007028 <HAL_SPI_Init+0x124>)
 800700a:	400a      	ands	r2, r1
 800700c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2251      	movs	r2, #81	; 0x51
 8007018:	2101      	movs	r1, #1
 800701a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b002      	add	sp, #8
 8007024:	bd80      	pop	{r7, pc}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	fffff7ff 	.word	0xfffff7ff

0800702c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	; 0x30
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	001a      	movs	r2, r3
 800703a:	1cbb      	adds	r3, r7, #2
 800703c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800703e:	2301      	movs	r3, #1
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007042:	232b      	movs	r3, #43	; 0x2b
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2250      	movs	r2, #80	; 0x50
 800704e:	5c9b      	ldrb	r3, [r3, r2]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_SPI_TransmitReceive+0x2c>
 8007054:	2302      	movs	r3, #2
 8007056:	e1b0      	b.n	80073ba <HAL_SPI_TransmitReceive+0x38e>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2250      	movs	r2, #80	; 0x50
 800705c:	2101      	movs	r1, #1
 800705e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007060:	f7fc ffe8 	bl	8004034 <HAL_GetTick>
 8007064:	0003      	movs	r3, r0
 8007066:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007068:	2023      	movs	r0, #35	; 0x23
 800706a:	183b      	adds	r3, r7, r0
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	2151      	movs	r1, #81	; 0x51
 8007070:	5c52      	ldrb	r2, [r2, r1]
 8007072:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800707a:	231a      	movs	r3, #26
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	1cba      	adds	r2, r7, #2
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007084:	183b      	adds	r3, r7, r0
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d011      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x84>
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	2382      	movs	r3, #130	; 0x82
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	429a      	cmp	r2, r3
 8007094:	d107      	bne.n	80070a6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <HAL_SPI_TransmitReceive+0x7a>
 800709e:	183b      	adds	r3, r7, r0
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d004      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80070a6:	232b      	movs	r3, #43	; 0x2b
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80070ae:	e17d      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d006      	beq.n	80070c4 <HAL_SPI_TransmitReceive+0x98>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_SPI_TransmitReceive+0x98>
 80070bc:	1cbb      	adds	r3, r7, #2
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80070c4:	232b      	movs	r3, #43	; 0x2b
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80070cc:	e16e      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2251      	movs	r2, #81	; 0x51
 80070d2:	5c9b      	ldrb	r3, [r3, r2]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d003      	beq.n	80070e2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2251      	movs	r2, #81	; 0x51
 80070de:	2105      	movs	r1, #5
 80070e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1cba      	adds	r2, r7, #2
 80070f2:	8812      	ldrh	r2, [r2, #0]
 80070f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1cba      	adds	r2, r7, #2
 80070fa:	8812      	ldrh	r2, [r2, #0]
 80070fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1cba      	adds	r2, r7, #2
 8007108:	8812      	ldrh	r2, [r2, #0]
 800710a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	1cba      	adds	r2, r7, #2
 8007110:	8812      	ldrh	r2, [r2, #0]
 8007112:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2240      	movs	r2, #64	; 0x40
 8007128:	4013      	ands	r3, r2
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d007      	beq.n	800713e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2140      	movs	r1, #64	; 0x40
 800713a:	430a      	orrs	r2, r1
 800713c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	2380      	movs	r3, #128	; 0x80
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	429a      	cmp	r2, r3
 8007148:	d000      	beq.n	800714c <HAL_SPI_TransmitReceive+0x120>
 800714a:	e07f      	b.n	800724c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_SPI_TransmitReceive+0x134>
 8007154:	231a      	movs	r3, #26
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d000      	beq.n	8007160 <HAL_SPI_TransmitReceive+0x134>
 800715e:	e06a      	b.n	8007236 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	881a      	ldrh	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007184:	e057      	b.n	8007236 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2202      	movs	r2, #2
 800718e:	4013      	ands	r3, r2
 8007190:	2b02      	cmp	r3, #2
 8007192:	d11b      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x1a0>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <HAL_SPI_TransmitReceive+0x1a0>
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d113      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d119      	bne.n	800720e <HAL_SPI_TransmitReceive+0x1e2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d014      	beq.n	800720e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	b292      	uxth	r2, r2
 80071f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800720a:	2301      	movs	r3, #1
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800720e:	f7fc ff11 	bl	8004034 <HAL_GetTick>
 8007212:	0002      	movs	r2, r0
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800721a:	429a      	cmp	r2, r3
 800721c:	d80b      	bhi.n	8007236 <HAL_SPI_TransmitReceive+0x20a>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	3301      	adds	r3, #1
 8007222:	d008      	beq.n	8007236 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8007224:	232b      	movs	r3, #43	; 0x2b
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	2203      	movs	r2, #3
 800722a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2251      	movs	r2, #81	; 0x51
 8007230:	2101      	movs	r1, #1
 8007232:	5499      	strb	r1, [r3, r2]
        goto error;
 8007234:	e0ba      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1a2      	bne.n	8007186 <HAL_SPI_TransmitReceive+0x15a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d19d      	bne.n	8007186 <HAL_SPI_TransmitReceive+0x15a>
 800724a:	e083      	b.n	8007354 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x234>
 8007254:	231a      	movs	r3, #26
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d000      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x234>
 800725e:	e06f      	b.n	8007340 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007286:	e05b      	b.n	8007340 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2202      	movs	r2, #2
 8007290:	4013      	ands	r3, r2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d11c      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x2a4>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d017      	beq.n	80072d0 <HAL_SPI_TransmitReceive+0x2a4>
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d114      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2201      	movs	r2, #1
 80072d8:	4013      	ands	r3, r2
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d119      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x2e6>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800730e:	2301      	movs	r3, #1
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007312:	f7fc fe8f 	bl	8004034 <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731e:	429a      	cmp	r2, r3
 8007320:	d802      	bhi.n	8007328 <HAL_SPI_TransmitReceive+0x2fc>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	3301      	adds	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_SPI_TransmitReceive+0x302>
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800732e:	232b      	movs	r3, #43	; 0x2b
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	2203      	movs	r2, #3
 8007334:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2251      	movs	r2, #81	; 0x51
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
        goto error;
 800733e:	e035      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d19e      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x25c>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d199      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	0018      	movs	r0, r3
 800735c:	f000 f8c0 	bl	80074e0 <SPI_EndRxTxTransaction>
 8007360:	1e03      	subs	r3, r0, #0
 8007362:	d007      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8007364:	232b      	movs	r3, #43	; 0x2b
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	2201      	movs	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2220      	movs	r2, #32
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007372:	e01b      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	2b00      	cmp	r3, #0
 8007398:	d004      	beq.n	80073a4 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800739a:	232b      	movs	r3, #43	; 0x2b
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e003      	b.n	80073ac <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2251      	movs	r2, #81	; 0x51
 80073a8:	2101      	movs	r1, #1
 80073aa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2250      	movs	r2, #80	; 0x50
 80073b0:	2100      	movs	r1, #0
 80073b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073b4:	232b      	movs	r3, #43	; 0x2b
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	781b      	ldrb	r3, [r3, #0]
}
 80073ba:	0018      	movs	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	b00c      	add	sp, #48	; 0x30
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	1dfb      	adds	r3, r7, #7
 80073d2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073d4:	f7fc fe2e 	bl	8004034 <HAL_GetTick>
 80073d8:	0002      	movs	r2, r0
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	18d3      	adds	r3, r2, r3
 80073e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073e4:	f7fc fe26 	bl	8004034 <HAL_GetTick>
 80073e8:	0003      	movs	r3, r0
 80073ea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ec:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	015b      	lsls	r3, r3, #5
 80073f2:	0d1b      	lsrs	r3, r3, #20
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	4353      	muls	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fa:	e058      	b.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	d055      	beq.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007402:	f7fc fe17 	bl	8004034 <HAL_GetTick>
 8007406:	0002      	movs	r2, r0
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	429a      	cmp	r2, r3
 8007410:	d902      	bls.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d142      	bne.n	800749e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	21e0      	movs	r1, #224	; 0xe0
 8007424:	438a      	bics	r2, r1
 8007426:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	2382      	movs	r3, #130	; 0x82
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	429a      	cmp	r2, r3
 8007432:	d113      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x98>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	2380      	movs	r3, #128	; 0x80
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	429a      	cmp	r2, r3
 800743e:	d005      	beq.n	800744c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	2380      	movs	r3, #128	; 0x80
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	429a      	cmp	r2, r3
 800744a:	d107      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2140      	movs	r1, #64	; 0x40
 8007458:	438a      	bics	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	019b      	lsls	r3, r3, #6
 8007464:	429a      	cmp	r2, r3
 8007466:	d110      	bne.n	800748a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	491a      	ldr	r1, [pc, #104]	; (80074dc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007474:	400a      	ands	r2, r1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2180      	movs	r1, #128	; 0x80
 8007484:	0189      	lsls	r1, r1, #6
 8007486:	430a      	orrs	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2251      	movs	r2, #81	; 0x51
 800748e:	2101      	movs	r1, #1
 8007490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2250      	movs	r2, #80	; 0x50
 8007496:	2100      	movs	r1, #0
 8007498:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e017      	b.n	80074ce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	425a      	negs	r2, r3
 80074be:	4153      	adcs	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	001a      	movs	r2, r3
 80074c4:	1dfb      	adds	r3, r7, #7
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d197      	bne.n	80073fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	0018      	movs	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b008      	add	sp, #32
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	20000000 	.word	0x20000000
 80074dc:	ffffdfff 	.word	0xffffdfff

080074e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <SPI_EndRxTxTransaction+0x84>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	491d      	ldr	r1, [pc, #116]	; (8007568 <SPI_EndRxTxTransaction+0x88>)
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7f8 fe24 	bl	8000140 <__udivsi3>
 80074f8:	0003      	movs	r3, r0
 80074fa:	001a      	movs	r2, r3
 80074fc:	0013      	movs	r3, r2
 80074fe:	015b      	lsls	r3, r3, #5
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	189b      	adds	r3, r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	2382      	movs	r3, #130	; 0x82
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	429a      	cmp	r2, r3
 8007514:	d112      	bne.n	800753c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	0013      	movs	r3, r2
 8007520:	2200      	movs	r2, #0
 8007522:	2180      	movs	r1, #128	; 0x80
 8007524:	f7ff ff4e 	bl	80073c4 <SPI_WaitFlagStateUntilTimeout>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d016      	beq.n	800755a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	2220      	movs	r2, #32
 8007532:	431a      	orrs	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e00f      	b.n	800755c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	3b01      	subs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	4013      	ands	r3, r2
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d0f2      	beq.n	800753c <SPI_EndRxTxTransaction+0x5c>
 8007556:	e000      	b.n	800755a <SPI_EndRxTxTransaction+0x7a>
        break;
 8007558:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b006      	add	sp, #24
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000000 	.word	0x20000000
 8007568:	016e3600 	.word	0x016e3600

0800756c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e032      	b.n	80075e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2239      	movs	r2, #57	; 0x39
 8007582:	5c9b      	ldrb	r3, [r3, r2]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d107      	bne.n	800759a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2238      	movs	r2, #56	; 0x38
 800758e:	2100      	movs	r1, #0
 8007590:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	0018      	movs	r0, r3
 8007596:	f7fc fa29 	bl	80039ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2239      	movs	r2, #57	; 0x39
 800759e:	2102      	movs	r1, #2
 80075a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3304      	adds	r3, #4
 80075aa:	0019      	movs	r1, r3
 80075ac:	0010      	movs	r0, r2
 80075ae:	f000 fd0f 	bl	8007fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	223e      	movs	r2, #62	; 0x3e
 80075b6:	2101      	movs	r1, #1
 80075b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	223a      	movs	r2, #58	; 0x3a
 80075be:	2101      	movs	r1, #1
 80075c0:	5499      	strb	r1, [r3, r2]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	223b      	movs	r2, #59	; 0x3b
 80075c6:	2101      	movs	r1, #1
 80075c8:	5499      	strb	r1, [r3, r2]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	223c      	movs	r2, #60	; 0x3c
 80075ce:	2101      	movs	r1, #1
 80075d0:	5499      	strb	r1, [r3, r2]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	223d      	movs	r2, #61	; 0x3d
 80075d6:	2101      	movs	r1, #1
 80075d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2239      	movs	r2, #57	; 0x39
 80075de:	2101      	movs	r1, #1
 80075e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	0018      	movs	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2101      	movs	r1, #1
 8007600:	438a      	bics	r2, r1
 8007602:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <HAL_TIM_Base_Stop_IT+0x48>)
 800760c:	4013      	ands	r3, r2
 800760e:	d107      	bne.n	8007620 <HAL_TIM_Base_Stop_IT+0x34>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2101      	movs	r1, #1
 800761c:	438a      	bics	r2, r1
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2239      	movs	r2, #57	; 0x39
 8007624:	2101      	movs	r1, #1
 8007626:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b002      	add	sp, #8
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	00001111 	.word	0x00001111

08007638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e032      	b.n	80076b0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2239      	movs	r2, #57	; 0x39
 800764e:	5c9b      	ldrb	r3, [r3, r2]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2238      	movs	r2, #56	; 0x38
 800765a:	2100      	movs	r1, #0
 800765c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	0018      	movs	r0, r3
 8007662:	f000 f829 	bl	80076b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2239      	movs	r2, #57	; 0x39
 800766a:	2102      	movs	r1, #2
 800766c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3304      	adds	r3, #4
 8007676:	0019      	movs	r1, r3
 8007678:	0010      	movs	r0, r2
 800767a:	f000 fca9 	bl	8007fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	223e      	movs	r2, #62	; 0x3e
 8007682:	2101      	movs	r1, #1
 8007684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	223a      	movs	r2, #58	; 0x3a
 800768a:	2101      	movs	r1, #1
 800768c:	5499      	strb	r1, [r3, r2]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	223b      	movs	r2, #59	; 0x3b
 8007692:	2101      	movs	r1, #1
 8007694:	5499      	strb	r1, [r3, r2]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	223c      	movs	r2, #60	; 0x3c
 800769a:	2101      	movs	r1, #1
 800769c:	5499      	strb	r1, [r3, r2]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	223d      	movs	r2, #61	; 0x3d
 80076a2:	2101      	movs	r1, #1
 80076a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2239      	movs	r2, #57	; 0x39
 80076aa:	2101      	movs	r1, #1
 80076ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b002      	add	sp, #8
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076c0:	46c0      	nop			; (mov r8, r8)
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b002      	add	sp, #8
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d108      	bne.n	80076ea <HAL_TIM_PWM_Start+0x22>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	223a      	movs	r2, #58	; 0x3a
 80076dc:	5c9b      	ldrb	r3, [r3, r2]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	4193      	sbcs	r3, r2
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	e01f      	b.n	800772a <HAL_TIM_PWM_Start+0x62>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d108      	bne.n	8007702 <HAL_TIM_PWM_Start+0x3a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	223b      	movs	r2, #59	; 0x3b
 80076f4:	5c9b      	ldrb	r3, [r3, r2]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	1e5a      	subs	r2, r3, #1
 80076fc:	4193      	sbcs	r3, r2
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	e013      	b.n	800772a <HAL_TIM_PWM_Start+0x62>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d108      	bne.n	800771a <HAL_TIM_PWM_Start+0x52>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	223c      	movs	r2, #60	; 0x3c
 800770c:	5c9b      	ldrb	r3, [r3, r2]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	4193      	sbcs	r3, r2
 8007716:	b2db      	uxtb	r3, r3
 8007718:	e007      	b.n	800772a <HAL_TIM_PWM_Start+0x62>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	223d      	movs	r2, #61	; 0x3d
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	1e5a      	subs	r2, r3, #1
 8007726:	4193      	sbcs	r3, r2
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e04d      	b.n	80077ce <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <HAL_TIM_PWM_Start+0x7a>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	223a      	movs	r2, #58	; 0x3a
 800773c:	2102      	movs	r1, #2
 800773e:	5499      	strb	r1, [r3, r2]
 8007740:	e013      	b.n	800776a <HAL_TIM_PWM_Start+0xa2>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d104      	bne.n	8007752 <HAL_TIM_PWM_Start+0x8a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	223b      	movs	r2, #59	; 0x3b
 800774c:	2102      	movs	r1, #2
 800774e:	5499      	strb	r1, [r3, r2]
 8007750:	e00b      	b.n	800776a <HAL_TIM_PWM_Start+0xa2>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d104      	bne.n	8007762 <HAL_TIM_PWM_Start+0x9a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	223c      	movs	r2, #60	; 0x3c
 800775c:	2102      	movs	r1, #2
 800775e:	5499      	strb	r1, [r3, r2]
 8007760:	e003      	b.n	800776a <HAL_TIM_PWM_Start+0xa2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	223d      	movs	r2, #61	; 0x3d
 8007766:	2102      	movs	r1, #2
 8007768:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	2201      	movs	r2, #1
 8007772:	0018      	movs	r0, r3
 8007774:	f000 ff3c 	bl	80085f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	05db      	lsls	r3, r3, #23
 8007780:	429a      	cmp	r2, r3
 8007782:	d009      	beq.n	8007798 <HAL_TIM_PWM_Start+0xd0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <HAL_TIM_PWM_Start+0x110>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_TIM_PWM_Start+0xd0>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a12      	ldr	r2, [pc, #72]	; (80077dc <HAL_TIM_PWM_Start+0x114>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d111      	bne.n	80077bc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2207      	movs	r2, #7
 80077a0:	4013      	ands	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d010      	beq.n	80077cc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	e007      	b.n	80077cc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2101      	movs	r1, #1
 80077c8:	430a      	orrs	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	0018      	movs	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b004      	add	sp, #16
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	40010800 	.word	0x40010800
 80077dc:	40011400 	.word	0x40011400

080077e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	0018      	movs	r0, r3
 80077f4:	f000 fefc 	bl	80085f0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	4a16      	ldr	r2, [pc, #88]	; (8007858 <HAL_TIM_PWM_Stop+0x78>)
 8007800:	4013      	ands	r3, r2
 8007802:	d107      	bne.n	8007814 <HAL_TIM_PWM_Stop+0x34>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2101      	movs	r1, #1
 8007810:	438a      	bics	r2, r1
 8007812:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <HAL_TIM_PWM_Stop+0x44>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	223a      	movs	r2, #58	; 0x3a
 800781e:	2101      	movs	r1, #1
 8007820:	5499      	strb	r1, [r3, r2]
 8007822:	e013      	b.n	800784c <HAL_TIM_PWM_Stop+0x6c>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d104      	bne.n	8007834 <HAL_TIM_PWM_Stop+0x54>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	223b      	movs	r2, #59	; 0x3b
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]
 8007832:	e00b      	b.n	800784c <HAL_TIM_PWM_Stop+0x6c>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b08      	cmp	r3, #8
 8007838:	d104      	bne.n	8007844 <HAL_TIM_PWM_Stop+0x64>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	223c      	movs	r2, #60	; 0x3c
 800783e:	2101      	movs	r1, #1
 8007840:	5499      	strb	r1, [r3, r2]
 8007842:	e003      	b.n	800784c <HAL_TIM_PWM_Stop+0x6c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	223d      	movs	r2, #61	; 0x3d
 8007848:	2101      	movs	r1, #1
 800784a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	b002      	add	sp, #8
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	00001111 	.word	0x00001111

0800785c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e032      	b.n	80078d4 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2239      	movs	r2, #57	; 0x39
 8007872:	5c9b      	ldrb	r3, [r3, r2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d107      	bne.n	800788a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2238      	movs	r2, #56	; 0x38
 800787e:	2100      	movs	r1, #0
 8007880:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0018      	movs	r0, r3
 8007886:	f000 f829 	bl	80078dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2239      	movs	r2, #57	; 0x39
 800788e:	2102      	movs	r1, #2
 8007890:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3304      	adds	r3, #4
 800789a:	0019      	movs	r1, r3
 800789c:	0010      	movs	r0, r2
 800789e:	f000 fb97 	bl	8007fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	223e      	movs	r2, #62	; 0x3e
 80078a6:	2101      	movs	r1, #1
 80078a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	223a      	movs	r2, #58	; 0x3a
 80078ae:	2101      	movs	r1, #1
 80078b0:	5499      	strb	r1, [r3, r2]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	223b      	movs	r2, #59	; 0x3b
 80078b6:	2101      	movs	r1, #1
 80078b8:	5499      	strb	r1, [r3, r2]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	223c      	movs	r2, #60	; 0x3c
 80078be:	2101      	movs	r1, #1
 80078c0:	5499      	strb	r1, [r3, r2]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	223d      	movs	r2, #61	; 0x3d
 80078c6:	2101      	movs	r1, #1
 80078c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2239      	movs	r2, #57	; 0x39
 80078ce:	2101      	movs	r1, #1
 80078d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	0018      	movs	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b002      	add	sp, #8
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b002      	add	sp, #8
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d124      	bne.n	800794c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	2202      	movs	r2, #2
 800790a:	4013      	ands	r3, r2
 800790c:	2b02      	cmp	r3, #2
 800790e:	d11d      	bne.n	800794c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2203      	movs	r2, #3
 8007916:	4252      	negs	r2, r2
 8007918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2203      	movs	r2, #3
 8007928:	4013      	ands	r3, r2
 800792a:	d004      	beq.n	8007936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	0018      	movs	r0, r3
 8007930:	f7fb f8ce 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 8007934:	e007      	b.n	8007946 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0018      	movs	r0, r3
 800793a:	f000 fb31 	bl	8007fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0018      	movs	r0, r3
 8007942:	f000 fb35 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2204      	movs	r2, #4
 8007954:	4013      	ands	r3, r2
 8007956:	2b04      	cmp	r3, #4
 8007958:	d125      	bne.n	80079a6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2204      	movs	r2, #4
 8007962:	4013      	ands	r3, r2
 8007964:	2b04      	cmp	r3, #4
 8007966:	d11e      	bne.n	80079a6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2205      	movs	r2, #5
 800796e:	4252      	negs	r2, r2
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	23c0      	movs	r3, #192	; 0xc0
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4013      	ands	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	0018      	movs	r0, r3
 800798a:	f7fb f8a1 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 800798e:	e007      	b.n	80079a0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	0018      	movs	r0, r3
 8007994:	f000 fb04 	bl	8007fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0018      	movs	r0, r3
 800799c:	f000 fb08 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d124      	bne.n	80079fe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2208      	movs	r2, #8
 80079bc:	4013      	ands	r3, r2
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d11d      	bne.n	80079fe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2209      	movs	r2, #9
 80079c8:	4252      	negs	r2, r2
 80079ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2203      	movs	r2, #3
 80079da:	4013      	ands	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7fb f875 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 80079e6:	e007      	b.n	80079f8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	0018      	movs	r0, r3
 80079ec:	f000 fad8 	bl	8007fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	0018      	movs	r0, r3
 80079f4:	f000 fadc 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2210      	movs	r2, #16
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d125      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2210      	movs	r2, #16
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b10      	cmp	r3, #16
 8007a18:	d11e      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2211      	movs	r2, #17
 8007a20:	4252      	negs	r2, r2
 8007a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2208      	movs	r2, #8
 8007a28:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	23c0      	movs	r3, #192	; 0xc0
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4013      	ands	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7fb f848 	bl	8002ad0 <HAL_TIM_IC_CaptureCallback>
 8007a40:	e007      	b.n	8007a52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 faab 	bl	8007fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 faaf 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d10f      	bne.n	8007a86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d108      	bne.n	8007a86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	4252      	negs	r2, r2
 8007a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0018      	movs	r0, r3
 8007a82:	f7fb f849 	bl	8002b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2240      	movs	r2, #64	; 0x40
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d10f      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2240      	movs	r2, #64	; 0x40
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d108      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2241      	movs	r2, #65	; 0x41
 8007aa8:	4252      	negs	r2, r2
 8007aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 fa86 	bl	8007fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac8:	2317      	movs	r3, #23
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2238      	movs	r2, #56	; 0x38
 8007ad4:	5c9b      	ldrb	r3, [r3, r2]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_TIM_IC_ConfigChannel+0x22>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e08c      	b.n	8007bf8 <HAL_TIM_IC_ConfigChannel+0x13c>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2238      	movs	r2, #56	; 0x38
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11b      	bne.n	8007b24 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007afc:	f000 fbc0 	bl	8008280 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	210c      	movs	r1, #12
 8007b0c:	438a      	bics	r2, r1
 8007b0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6999      	ldr	r1, [r3, #24]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	619a      	str	r2, [r3, #24]
 8007b22:	e062      	b.n	8007bea <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d11c      	bne.n	8007b64 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007b3a:	f000 fc25 	bl	8008388 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	492d      	ldr	r1, [pc, #180]	; (8007c00 <HAL_TIM_IC_ConfigChannel+0x144>)
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6999      	ldr	r1, [r3, #24]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	021a      	lsls	r2, r3, #8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	619a      	str	r2, [r3, #24]
 8007b62:	e042      	b.n	8007bea <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d11b      	bne.n	8007ba2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007b7a:	f000 fc79 	bl	8008470 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	210c      	movs	r1, #12
 8007b8a:	438a      	bics	r2, r1
 8007b8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69d9      	ldr	r1, [r3, #28]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	61da      	str	r2, [r3, #28]
 8007ba0:	e023      	b.n	8007bea <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	d11c      	bne.n	8007be2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007bb8:	f000 fc9a 	bl	80084f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69da      	ldr	r2, [r3, #28]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	490e      	ldr	r1, [pc, #56]	; (8007c00 <HAL_TIM_IC_ConfigChannel+0x144>)
 8007bc8:	400a      	ands	r2, r1
 8007bca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69d9      	ldr	r1, [r3, #28]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	021a      	lsls	r2, r3, #8
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	61da      	str	r2, [r3, #28]
 8007be0:	e003      	b.n	8007bea <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8007be2:	2317      	movs	r3, #23
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2238      	movs	r2, #56	; 0x38
 8007bee:	2100      	movs	r1, #0
 8007bf0:	5499      	strb	r1, [r3, r2]

  return status;
 8007bf2:	2317      	movs	r3, #23
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	781b      	ldrb	r3, [r3, #0]
}
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b006      	add	sp, #24
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	fffff3ff 	.word	0xfffff3ff

08007c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c10:	2317      	movs	r3, #23
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2238      	movs	r2, #56	; 0x38
 8007c1c:	5c9b      	ldrb	r3, [r3, r2]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e0ad      	b.n	8007d82 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2238      	movs	r2, #56	; 0x38
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b0c      	cmp	r3, #12
 8007c32:	d100      	bne.n	8007c36 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007c34:	e076      	b.n	8007d24 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b0c      	cmp	r3, #12
 8007c3a:	d900      	bls.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007c3c:	e095      	b.n	8007d6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d04e      	beq.n	8007ce2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d900      	bls.n	8007c4c <HAL_TIM_PWM_ConfigChannel+0x48>
 8007c4a:	e08e      	b.n	8007d6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_PWM_ConfigChannel+0x56>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d021      	beq.n	8007c9c <HAL_TIM_PWM_ConfigChannel+0x98>
 8007c58:	e087      	b.n	8007d6a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	0011      	movs	r1, r2
 8007c62:	0018      	movs	r0, r3
 8007c64:	f000 fa08 	bl	8008078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2108      	movs	r1, #8
 8007c74:	430a      	orrs	r2, r1
 8007c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2104      	movs	r1, #4
 8007c84:	438a      	bics	r2, r1
 8007c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6999      	ldr	r1, [r3, #24]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	619a      	str	r2, [r3, #24]
      break;
 8007c9a:	e06b      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	0011      	movs	r1, r2
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f000 fa23 	bl	80080f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2180      	movs	r1, #128	; 0x80
 8007cb6:	0109      	lsls	r1, r1, #4
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4931      	ldr	r1, [pc, #196]	; (8007d8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007cc8:	400a      	ands	r2, r1
 8007cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6999      	ldr	r1, [r3, #24]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	021a      	lsls	r2, r3, #8
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	619a      	str	r2, [r3, #24]
      break;
 8007ce0:	e048      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	0011      	movs	r1, r2
 8007cea:	0018      	movs	r0, r3
 8007cec:	f000 fa42 	bl	8008174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69da      	ldr	r2, [r3, #28]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2108      	movs	r1, #8
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69da      	ldr	r2, [r3, #28]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	438a      	bics	r2, r1
 8007d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69d9      	ldr	r1, [r3, #28]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	61da      	str	r2, [r3, #28]
      break;
 8007d22:	e027      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	0011      	movs	r1, r2
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f000 fa61 	bl	80081f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	0109      	lsls	r1, r1, #4
 8007d40:	430a      	orrs	r2, r1
 8007d42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69da      	ldr	r2, [r3, #28]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	490f      	ldr	r1, [pc, #60]	; (8007d8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007d50:	400a      	ands	r2, r1
 8007d52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	69d9      	ldr	r1, [r3, #28]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	021a      	lsls	r2, r3, #8
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	61da      	str	r2, [r3, #28]
      break;
 8007d68:	e004      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007d6a:	2317      	movs	r3, #23
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	2201      	movs	r2, #1
 8007d70:	701a      	strb	r2, [r3, #0]
      break;
 8007d72:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2238      	movs	r2, #56	; 0x38
 8007d78:	2100      	movs	r1, #0
 8007d7a:	5499      	strb	r1, [r3, r2]

  return status;
 8007d7c:	2317      	movs	r3, #23
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	781b      	ldrb	r3, [r3, #0]
}
 8007d82:	0018      	movs	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b006      	add	sp, #24
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	fffffbff 	.word	0xfffffbff

08007d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d9a:	230f      	movs	r3, #15
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2238      	movs	r2, #56	; 0x38
 8007da6:	5c9b      	ldrb	r3, [r3, r2]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_ConfigClockSource+0x20>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e0bc      	b.n	8007f2a <HAL_TIM_ConfigClockSource+0x19a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2238      	movs	r2, #56	; 0x38
 8007db4:	2101      	movs	r1, #1
 8007db6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2239      	movs	r2, #57	; 0x39
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2277      	movs	r2, #119	; 0x77
 8007dcc:	4393      	bics	r3, r2
 8007dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4a58      	ldr	r2, [pc, #352]	; (8007f34 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2280      	movs	r2, #128	; 0x80
 8007de6:	0192      	lsls	r2, r2, #6
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d040      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0xde>
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	0192      	lsls	r2, r2, #6
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d900      	bls.n	8007df6 <HAL_TIM_ConfigClockSource+0x66>
 8007df4:	e088      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007df6:	2280      	movs	r2, #128	; 0x80
 8007df8:	0152      	lsls	r2, r2, #5
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d100      	bne.n	8007e00 <HAL_TIM_ConfigClockSource+0x70>
 8007dfe:	e088      	b.n	8007f12 <HAL_TIM_ConfigClockSource+0x182>
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	0152      	lsls	r2, r2, #5
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d900      	bls.n	8007e0a <HAL_TIM_ConfigClockSource+0x7a>
 8007e08:	e07e      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e0a:	2b70      	cmp	r3, #112	; 0x70
 8007e0c:	d018      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0xb0>
 8007e0e:	d900      	bls.n	8007e12 <HAL_TIM_ConfigClockSource+0x82>
 8007e10:	e07a      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e12:	2b60      	cmp	r3, #96	; 0x60
 8007e14:	d04f      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x126>
 8007e16:	d900      	bls.n	8007e1a <HAL_TIM_ConfigClockSource+0x8a>
 8007e18:	e076      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e1a:	2b50      	cmp	r3, #80	; 0x50
 8007e1c:	d03b      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x106>
 8007e1e:	d900      	bls.n	8007e22 <HAL_TIM_ConfigClockSource+0x92>
 8007e20:	e072      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d057      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x146>
 8007e26:	d900      	bls.n	8007e2a <HAL_TIM_ConfigClockSource+0x9a>
 8007e28:	e06e      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e2a:	2b30      	cmp	r3, #48	; 0x30
 8007e2c:	d063      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x166>
 8007e2e:	d86b      	bhi.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d060      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x166>
 8007e34:	d868      	bhi.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d05d      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x166>
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d05b      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x166>
 8007e3e:	e063      	b.n	8007f08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e50:	f000 fbae 	bl	80085b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2277      	movs	r2, #119	; 0x77
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
      break;
 8007e6c:	e052      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e7e:	f000 fb97 	bl	80085b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	01c9      	lsls	r1, r1, #7
 8007e90:	430a      	orrs	r2, r1
 8007e92:	609a      	str	r2, [r3, #8]
      break;
 8007e94:	e03e      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea2:	001a      	movs	r2, r3
 8007ea4:	f000 fa42 	bl	800832c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2150      	movs	r1, #80	; 0x50
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f000 fb64 	bl	800857c <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e02e      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	f000 faa2 	bl	800840c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2160      	movs	r1, #96	; 0x60
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f000 fb54 	bl	800857c <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e01e      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	f000 fa22 	bl	800832c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2140      	movs	r1, #64	; 0x40
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f000 fb44 	bl	800857c <TIM_ITRx_SetConfig>
      break;
 8007ef4:	e00e      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	0019      	movs	r1, r3
 8007f00:	0010      	movs	r0, r2
 8007f02:	f000 fb3b 	bl	800857c <TIM_ITRx_SetConfig>
      break;
 8007f06:	e005      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007f08:	230f      	movs	r3, #15
 8007f0a:	18fb      	adds	r3, r7, r3
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
      break;
 8007f10:	e000      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007f12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2239      	movs	r2, #57	; 0x39
 8007f18:	2101      	movs	r1, #1
 8007f1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2238      	movs	r2, #56	; 0x38
 8007f20:	2100      	movs	r1, #0
 8007f22:	5499      	strb	r1, [r3, r2]

  return status;
 8007f24:	230f      	movs	r3, #15
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	781b      	ldrb	r3, [r3, #0]
}
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b004      	add	sp, #16
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			; (mov r8, r8)
 8007f34:	ffff00ff 	.word	0xffff00ff

08007f38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b0c      	cmp	r3, #12
 8007f4a:	d01e      	beq.n	8007f8a <HAL_TIM_ReadCapturedValue+0x52>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b0c      	cmp	r3, #12
 8007f50:	d820      	bhi.n	8007f94 <HAL_TIM_ReadCapturedValue+0x5c>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d013      	beq.n	8007f80 <HAL_TIM_ReadCapturedValue+0x48>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d81a      	bhi.n	8007f94 <HAL_TIM_ReadCapturedValue+0x5c>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_TIM_ReadCapturedValue+0x34>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d005      	beq.n	8007f76 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8007f6a:	e013      	b.n	8007f94 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	60fb      	str	r3, [r7, #12]
      break;
 8007f74:	e00f      	b.n	8007f96 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	60fb      	str	r3, [r7, #12]
      break;
 8007f7e:	e00a      	b.n	8007f96 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	60fb      	str	r3, [r7, #12]
      break;
 8007f88:	e005      	b.n	8007f96 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	60fb      	str	r3, [r7, #12]
      break;
 8007f92:	e000      	b.n	8007f96 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007f94:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8007f96:	68fb      	ldr	r3, [r7, #12]
}
 8007f98:	0018      	movs	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b004      	add	sp, #16
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b002      	add	sp, #8
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b002      	add	sp, #8
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	2380      	movs	r3, #128	; 0x80
 8007fe4:	05db      	lsls	r3, r3, #23
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d007      	beq.n	8007ffa <TIM_Base_SetConfig+0x2a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a1f      	ldr	r2, [pc, #124]	; (800806c <TIM_Base_SetConfig+0x9c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d003      	beq.n	8007ffa <TIM_Base_SetConfig+0x2a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <TIM_Base_SetConfig+0xa0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d108      	bne.n	800800c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2270      	movs	r2, #112	; 0x70
 8007ffe:	4393      	bics	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	2380      	movs	r3, #128	; 0x80
 8008010:	05db      	lsls	r3, r3, #23
 8008012:	429a      	cmp	r2, r3
 8008014:	d007      	beq.n	8008026 <TIM_Base_SetConfig+0x56>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a14      	ldr	r2, [pc, #80]	; (800806c <TIM_Base_SetConfig+0x9c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_Base_SetConfig+0x56>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <TIM_Base_SetConfig+0xa0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d108      	bne.n	8008038 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4a12      	ldr	r2, [pc, #72]	; (8008074 <TIM_Base_SetConfig+0xa4>)
 800802a:	4013      	ands	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2280      	movs	r2, #128	; 0x80
 800803c:	4393      	bics	r3, r2
 800803e:	001a      	movs	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	615a      	str	r2, [r3, #20]
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b004      	add	sp, #16
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40010800 	.word	0x40010800
 8008070:	40011400 	.word	0x40011400
 8008074:	fffffcff 	.word	0xfffffcff

08008078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2201      	movs	r2, #1
 8008088:	4393      	bics	r3, r2
 800808a:	001a      	movs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2270      	movs	r2, #112	; 0x70
 80080a6:	4393      	bics	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2203      	movs	r2, #3
 80080ae:	4393      	bics	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2202      	movs	r2, #2
 80080c0:	4393      	bics	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	621a      	str	r2, [r3, #32]
}
 80080e8:	46c0      	nop			; (mov r8, r8)
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b006      	add	sp, #24
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	2210      	movs	r2, #16
 8008100:	4393      	bics	r3, r2
 8008102:	001a      	movs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <TIM_OC2_SetConfig+0x7c>)
 800811e:	4013      	ands	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4a12      	ldr	r2, [pc, #72]	; (8008170 <TIM_OC2_SetConfig+0x80>)
 8008126:	4013      	ands	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2220      	movs	r2, #32
 800813a:	4393      	bics	r3, r2
 800813c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b006      	add	sp, #24
 800816a:	bd80      	pop	{r7, pc}
 800816c:	ffff8fff 	.word	0xffff8fff
 8008170:	fffffcff 	.word	0xfffffcff

08008174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	4a1a      	ldr	r2, [pc, #104]	; (80081ec <TIM_OC3_SetConfig+0x78>)
 8008184:	401a      	ands	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2270      	movs	r2, #112	; 0x70
 80081a0:	4393      	bics	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2203      	movs	r2, #3
 80081a8:	4393      	bics	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <TIM_OC3_SetConfig+0x7c>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	46c0      	nop			; (mov r8, r8)
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b006      	add	sp, #24
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	fffffeff 	.word	0xfffffeff
 80081f0:	fffffdff 	.word	0xfffffdff

080081f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <TIM_OC4_SetConfig+0x7c>)
 8008204:	401a      	ands	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a15      	ldr	r2, [pc, #84]	; (8008274 <TIM_OC4_SetConfig+0x80>)
 8008220:	4013      	ands	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a14      	ldr	r2, [pc, #80]	; (8008278 <TIM_OC4_SetConfig+0x84>)
 8008228:	4013      	ands	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4a10      	ldr	r2, [pc, #64]	; (800827c <TIM_OC4_SetConfig+0x88>)
 800823c:	4013      	ands	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	031b      	lsls	r3, r3, #12
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	621a      	str	r2, [r3, #32]
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	46bd      	mov	sp, r7
 800826a:	b006      	add	sp, #24
 800826c:	bd80      	pop	{r7, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	ffffefff 	.word	0xffffefff
 8008274:	ffff8fff 	.word	0xffff8fff
 8008278:	fffffcff 	.word	0xfffffcff
 800827c:	ffffdfff 	.word	0xffffdfff

08008280 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2201      	movs	r2, #1
 8008294:	4393      	bics	r3, r2
 8008296:	001a      	movs	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	2380      	movs	r3, #128	; 0x80
 80082ac:	05db      	lsls	r3, r3, #23
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d007      	beq.n	80082c2 <TIM_TI1_SetConfig+0x42>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a1b      	ldr	r2, [pc, #108]	; (8008324 <TIM_TI1_SetConfig+0xa4>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d003      	beq.n	80082c2 <TIM_TI1_SetConfig+0x42>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a1a      	ldr	r2, [pc, #104]	; (8008328 <TIM_TI1_SetConfig+0xa8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d101      	bne.n	80082c6 <TIM_TI1_SetConfig+0x46>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <TIM_TI1_SetConfig+0x48>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2203      	movs	r2, #3
 80082d0:	4393      	bics	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e003      	b.n	80082e6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2201      	movs	r2, #1
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	22f0      	movs	r2, #240	; 0xf0
 80082ea:	4393      	bics	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	22ff      	movs	r2, #255	; 0xff
 80082f4:	4013      	ands	r3, r2
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	220a      	movs	r2, #10
 8008300:	4393      	bics	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	220a      	movs	r2, #10
 8008308:	4013      	ands	r3, r2
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	621a      	str	r2, [r3, #32]
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b006      	add	sp, #24
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40010800 	.word	0x40010800
 8008328:	40011400 	.word	0x40011400

0800832c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	2201      	movs	r2, #1
 8008344:	4393      	bics	r3, r2
 8008346:	001a      	movs	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	22f0      	movs	r2, #240	; 0xf0
 8008356:	4393      	bics	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	220a      	movs	r2, #10
 8008368:	4393      	bics	r3, r2
 800836a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	46c0      	nop			; (mov r8, r8)
 8008382:	46bd      	mov	sp, r7
 8008384:	b006      	add	sp, #24
 8008386:	bd80      	pop	{r7, pc}

08008388 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	2210      	movs	r2, #16
 800839c:	4393      	bics	r3, r2
 800839e:	001a      	movs	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	4a14      	ldr	r2, [pc, #80]	; (8008404 <TIM_TI2_SetConfig+0x7c>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	4a10      	ldr	r2, [pc, #64]	; (8008408 <TIM_TI2_SetConfig+0x80>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	031b      	lsls	r3, r3, #12
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	0c1b      	lsrs	r3, r3, #16
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	22a0      	movs	r2, #160	; 0xa0
 80083dc:	4393      	bics	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	22a0      	movs	r2, #160	; 0xa0
 80083e6:	4013      	ands	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	621a      	str	r2, [r3, #32]
}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b006      	add	sp, #24
 8008400:	bd80      	pop	{r7, pc}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	fffffcff 	.word	0xfffffcff
 8008408:	ffff0fff 	.word	0xffff0fff

0800840c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	2210      	movs	r2, #16
 800841e:	4393      	bics	r3, r2
 8008420:	001a      	movs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4a0d      	ldr	r2, [pc, #52]	; (800846c <TIM_TI2_ConfigInputStage+0x60>)
 8008436:	4013      	ands	r3, r2
 8008438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	031b      	lsls	r3, r3, #12
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	22a0      	movs	r2, #160	; 0xa0
 8008448:	4393      	bics	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b006      	add	sp, #24
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	ffff0fff 	.word	0xffff0fff

08008470 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4a19      	ldr	r2, [pc, #100]	; (80084e8 <TIM_TI3_SetConfig+0x78>)
 8008484:	401a      	ands	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2203      	movs	r2, #3
 800849a:	4393      	bics	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	22f0      	movs	r2, #240	; 0xf0
 80084aa:	4393      	bics	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	4013      	ands	r3, r2
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <TIM_TI3_SetConfig+0x7c>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	23a0      	movs	r3, #160	; 0xa0
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	4013      	ands	r3, r2
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	46bd      	mov	sp, r7
 80084e4:	b006      	add	sp, #24
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	fffffeff 	.word	0xfffffeff
 80084ec:	fffff5ff 	.word	0xfffff5ff

080084f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <TIM_TI4_SetConfig+0x7c>)
 8008504:	401a      	ands	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	4a15      	ldr	r2, [pc, #84]	; (8008570 <TIM_TI4_SetConfig+0x80>)
 800851a:	4013      	ands	r3, r2
 800851c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4a12      	ldr	r2, [pc, #72]	; (8008574 <TIM_TI4_SetConfig+0x84>)
 800852c:	4013      	ands	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	031b      	lsls	r3, r3, #12
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	4a0d      	ldr	r2, [pc, #52]	; (8008578 <TIM_TI4_SetConfig+0x88>)
 8008542:	4013      	ands	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	031a      	lsls	r2, r3, #12
 800854a:	23a0      	movs	r3, #160	; 0xa0
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	4013      	ands	r3, r2
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b006      	add	sp, #24
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	ffffefff 	.word	0xffffefff
 8008570:	fffffcff 	.word	0xfffffcff
 8008574:	ffff0fff 	.word	0xffff0fff
 8008578:	ffff5fff 	.word	0xffff5fff

0800857c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2270      	movs	r2, #112	; 0x70
 8008590:	4393      	bics	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	2207      	movs	r2, #7
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	609a      	str	r2, [r3, #8]
}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	46bd      	mov	sp, r7
 80085aa:	b004      	add	sp, #16
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	4a09      	ldr	r2, [pc, #36]	; (80085ec <TIM_ETR_SetConfig+0x3c>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	021a      	lsls	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	609a      	str	r2, [r3, #8]
}
 80085e4:	46c0      	nop			; (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b006      	add	sp, #24
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	ffff00ff 	.word	0xffff00ff

080085f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	221f      	movs	r2, #31
 8008600:	4013      	ands	r3, r2
 8008602:	2201      	movs	r2, #1
 8008604:	409a      	lsls	r2, r3
 8008606:	0013      	movs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	43d2      	mvns	r2, r2
 8008612:	401a      	ands	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1a      	ldr	r2, [r3, #32]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	211f      	movs	r1, #31
 8008620:	400b      	ands	r3, r1
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4099      	lsls	r1, r3
 8008626:	000b      	movs	r3, r1
 8008628:	431a      	orrs	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	46bd      	mov	sp, r7
 8008632:	b006      	add	sp, #24
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2238      	movs	r2, #56	; 0x38
 8008646:	5c9b      	ldrb	r3, [r3, r2]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e042      	b.n	80086d6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2238      	movs	r2, #56	; 0x38
 8008654:	2101      	movs	r1, #1
 8008656:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2239      	movs	r2, #57	; 0x39
 800865c:	2102      	movs	r1, #2
 800865e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2270      	movs	r2, #112	; 0x70
 8008674:	4393      	bics	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	05db      	lsls	r3, r3, #23
 8008692:	429a      	cmp	r2, r3
 8008694:	d009      	beq.n	80086aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a11      	ldr	r2, [pc, #68]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a0f      	ldr	r2, [pc, #60]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d10c      	bne.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2280      	movs	r2, #128	; 0x80
 80086ae:	4393      	bics	r3, r2
 80086b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2239      	movs	r2, #57	; 0x39
 80086c8:	2101      	movs	r1, #1
 80086ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2238      	movs	r2, #56	; 0x38
 80086d0:	2100      	movs	r1, #0
 80086d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	0018      	movs	r0, r3
 80086d8:	46bd      	mov	sp, r7
 80086da:	b004      	add	sp, #16
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	40010800 	.word	0x40010800
 80086e4:	40011400 	.word	0x40011400

080086e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e044      	b.n	8008784 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d107      	bne.n	8008712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2278      	movs	r2, #120	; 0x78
 8008706:	2100      	movs	r1, #0
 8008708:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0018      	movs	r0, r3
 800870e:	f7fb fa99 	bl	8003c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2224      	movs	r2, #36	; 0x24
 8008716:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2101      	movs	r1, #1
 8008724:	438a      	bics	r2, r1
 8008726:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	0018      	movs	r0, r3
 800872c:	f000 f8d0 	bl	80088d0 <UART_SetConfig>
 8008730:	0003      	movs	r3, r0
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e024      	b.n	8008784 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	0018      	movs	r0, r3
 8008746:	f000 fb47 	bl	8008dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	490d      	ldr	r1, [pc, #52]	; (800878c <HAL_UART_Init+0xa4>)
 8008756:	400a      	ands	r2, r1
 8008758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	212a      	movs	r1, #42	; 0x2a
 8008766:	438a      	bics	r2, r1
 8008768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2101      	movs	r1, #1
 8008776:	430a      	orrs	r2, r1
 8008778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0018      	movs	r0, r3
 800877e:	f000 fbdf 	bl	8008f40 <UART_CheckIdleState>
 8008782:	0003      	movs	r3, r0
}
 8008784:	0018      	movs	r0, r3
 8008786:	46bd      	mov	sp, r7
 8008788:	b002      	add	sp, #8
 800878a:	bd80      	pop	{r7, pc}
 800878c:	ffffb7ff 	.word	0xffffb7ff

08008790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	1dbb      	adds	r3, r7, #6
 800879e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d000      	beq.n	80087aa <HAL_UART_Transmit+0x1a>
 80087a8:	e08c      	b.n	80088c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_UART_Transmit+0x28>
 80087b0:	1dbb      	adds	r3, r7, #6
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e084      	b.n	80088c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	015b      	lsls	r3, r3, #5
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d109      	bne.n	80087dc <HAL_UART_Transmit+0x4c>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d105      	bne.n	80087dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2201      	movs	r2, #1
 80087d4:	4013      	ands	r3, r2
 80087d6:	d001      	beq.n	80087dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e074      	b.n	80088c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2284      	movs	r2, #132	; 0x84
 80087e0:	2100      	movs	r1, #0
 80087e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2221      	movs	r2, #33	; 0x21
 80087e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ea:	f7fb fc23 	bl	8004034 <HAL_GetTick>
 80087ee:	0003      	movs	r3, r0
 80087f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1dba      	adds	r2, r7, #6
 80087f6:	2150      	movs	r1, #80	; 0x50
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	1dba      	adds	r2, r7, #6
 8008800:	2152      	movs	r1, #82	; 0x52
 8008802:	8812      	ldrh	r2, [r2, #0]
 8008804:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	015b      	lsls	r3, r3, #5
 800880e:	429a      	cmp	r2, r3
 8008810:	d108      	bne.n	8008824 <HAL_UART_Transmit+0x94>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d104      	bne.n	8008824 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	e003      	b.n	800882c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800882c:	e02f      	b.n	800888e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	0013      	movs	r3, r2
 8008838:	2200      	movs	r2, #0
 800883a:	2180      	movs	r1, #128	; 0x80
 800883c:	f000 fc28 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 8008840:	1e03      	subs	r3, r0, #0
 8008842:	d004      	beq.n	800884e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e03b      	b.n	80088c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	001a      	movs	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	05d2      	lsls	r2, r2, #23
 8008860:	0dd2      	lsrs	r2, r2, #23
 8008862:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	3302      	adds	r3, #2
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e007      	b.n	800887c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	3301      	adds	r3, #1
 800887a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2252      	movs	r2, #82	; 0x52
 8008880:	5a9b      	ldrh	r3, [r3, r2]
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b299      	uxth	r1, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2252      	movs	r2, #82	; 0x52
 800888c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2252      	movs	r2, #82	; 0x52
 8008892:	5a9b      	ldrh	r3, [r3, r2]
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1c9      	bne.n	800882e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	0013      	movs	r3, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	2140      	movs	r1, #64	; 0x40
 80088a8:	f000 fbf2 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 80088ac:	1e03      	subs	r3, r0, #0
 80088ae:	d004      	beq.n	80088ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e005      	b.n	80088c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e000      	b.n	80088c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	0018      	movs	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b008      	add	sp, #32
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	b08e      	sub	sp, #56	; 0x38
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088d8:	231a      	movs	r3, #26
 80088da:	2218      	movs	r2, #24
 80088dc:	189b      	adds	r3, r3, r2
 80088de:	19db      	adds	r3, r3, r7
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4ac6      	ldr	r2, [pc, #792]	; (8008c1c <UART_SetConfig+0x34c>)
 8008904:	4013      	ands	r3, r2
 8008906:	0019      	movs	r1, r3
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800890e:	430a      	orrs	r2, r1
 8008910:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	4ac1      	ldr	r2, [pc, #772]	; (8008c20 <UART_SetConfig+0x350>)
 800891a:	4013      	ands	r3, r2
 800891c:	0019      	movs	r1, r3
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4abb      	ldr	r2, [pc, #748]	; (8008c24 <UART_SetConfig+0x354>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d004      	beq.n	8008944 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008940:	4313      	orrs	r3, r2
 8008942:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	4ab7      	ldr	r2, [pc, #732]	; (8008c28 <UART_SetConfig+0x358>)
 800894c:	4013      	ands	r3, r2
 800894e:	0019      	movs	r1, r3
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4ab3      	ldr	r2, [pc, #716]	; (8008c2c <UART_SetConfig+0x35c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d131      	bne.n	80089c8 <UART_SetConfig+0xf8>
 8008964:	4bb2      	ldr	r3, [pc, #712]	; (8008c30 <UART_SetConfig+0x360>)
 8008966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008968:	2203      	movs	r2, #3
 800896a:	4013      	ands	r3, r2
 800896c:	2b03      	cmp	r3, #3
 800896e:	d01d      	beq.n	80089ac <UART_SetConfig+0xdc>
 8008970:	d823      	bhi.n	80089ba <UART_SetConfig+0xea>
 8008972:	2b02      	cmp	r3, #2
 8008974:	d00c      	beq.n	8008990 <UART_SetConfig+0xc0>
 8008976:	d820      	bhi.n	80089ba <UART_SetConfig+0xea>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <UART_SetConfig+0xb2>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d00e      	beq.n	800899e <UART_SetConfig+0xce>
 8008980:	e01b      	b.n	80089ba <UART_SetConfig+0xea>
 8008982:	231b      	movs	r3, #27
 8008984:	2218      	movs	r2, #24
 8008986:	189b      	adds	r3, r3, r2
 8008988:	19db      	adds	r3, r3, r7
 800898a:	2201      	movs	r2, #1
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e09c      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008990:	231b      	movs	r3, #27
 8008992:	2218      	movs	r2, #24
 8008994:	189b      	adds	r3, r3, r2
 8008996:	19db      	adds	r3, r3, r7
 8008998:	2202      	movs	r2, #2
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	e095      	b.n	8008aca <UART_SetConfig+0x1fa>
 800899e:	231b      	movs	r3, #27
 80089a0:	2218      	movs	r2, #24
 80089a2:	189b      	adds	r3, r3, r2
 80089a4:	19db      	adds	r3, r3, r7
 80089a6:	2204      	movs	r2, #4
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e08e      	b.n	8008aca <UART_SetConfig+0x1fa>
 80089ac:	231b      	movs	r3, #27
 80089ae:	2218      	movs	r2, #24
 80089b0:	189b      	adds	r3, r3, r2
 80089b2:	19db      	adds	r3, r3, r7
 80089b4:	2208      	movs	r2, #8
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e087      	b.n	8008aca <UART_SetConfig+0x1fa>
 80089ba:	231b      	movs	r3, #27
 80089bc:	2218      	movs	r2, #24
 80089be:	189b      	adds	r3, r3, r2
 80089c0:	19db      	adds	r3, r3, r7
 80089c2:	2210      	movs	r2, #16
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e080      	b.n	8008aca <UART_SetConfig+0x1fa>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a99      	ldr	r2, [pc, #612]	; (8008c34 <UART_SetConfig+0x364>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d131      	bne.n	8008a36 <UART_SetConfig+0x166>
 80089d2:	4b97      	ldr	r3, [pc, #604]	; (8008c30 <UART_SetConfig+0x360>)
 80089d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d6:	220c      	movs	r2, #12
 80089d8:	4013      	ands	r3, r2
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d01d      	beq.n	8008a1a <UART_SetConfig+0x14a>
 80089de:	d823      	bhi.n	8008a28 <UART_SetConfig+0x158>
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d00c      	beq.n	80089fe <UART_SetConfig+0x12e>
 80089e4:	d820      	bhi.n	8008a28 <UART_SetConfig+0x158>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <UART_SetConfig+0x120>
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d00e      	beq.n	8008a0c <UART_SetConfig+0x13c>
 80089ee:	e01b      	b.n	8008a28 <UART_SetConfig+0x158>
 80089f0:	231b      	movs	r3, #27
 80089f2:	2218      	movs	r2, #24
 80089f4:	189b      	adds	r3, r3, r2
 80089f6:	19db      	adds	r3, r3, r7
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	e065      	b.n	8008aca <UART_SetConfig+0x1fa>
 80089fe:	231b      	movs	r3, #27
 8008a00:	2218      	movs	r2, #24
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	19db      	adds	r3, r3, r7
 8008a06:	2202      	movs	r2, #2
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e05e      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a0c:	231b      	movs	r3, #27
 8008a0e:	2218      	movs	r2, #24
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	19db      	adds	r3, r3, r7
 8008a14:	2204      	movs	r2, #4
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e057      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a1a:	231b      	movs	r3, #27
 8008a1c:	2218      	movs	r2, #24
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	19db      	adds	r3, r3, r7
 8008a22:	2208      	movs	r2, #8
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e050      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a28:	231b      	movs	r3, #27
 8008a2a:	2218      	movs	r2, #24
 8008a2c:	189b      	adds	r3, r3, r2
 8008a2e:	19db      	adds	r3, r3, r7
 8008a30:	2210      	movs	r2, #16
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e049      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a7a      	ldr	r2, [pc, #488]	; (8008c24 <UART_SetConfig+0x354>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d13e      	bne.n	8008abe <UART_SetConfig+0x1ee>
 8008a40:	4b7b      	ldr	r3, [pc, #492]	; (8008c30 <UART_SetConfig+0x360>)
 8008a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a44:	23c0      	movs	r3, #192	; 0xc0
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	4013      	ands	r3, r2
 8008a4a:	22c0      	movs	r2, #192	; 0xc0
 8008a4c:	0112      	lsls	r2, r2, #4
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d027      	beq.n	8008aa2 <UART_SetConfig+0x1d2>
 8008a52:	22c0      	movs	r2, #192	; 0xc0
 8008a54:	0112      	lsls	r2, r2, #4
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d82a      	bhi.n	8008ab0 <UART_SetConfig+0x1e0>
 8008a5a:	2280      	movs	r2, #128	; 0x80
 8008a5c:	0112      	lsls	r2, r2, #4
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d011      	beq.n	8008a86 <UART_SetConfig+0x1b6>
 8008a62:	2280      	movs	r2, #128	; 0x80
 8008a64:	0112      	lsls	r2, r2, #4
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d822      	bhi.n	8008ab0 <UART_SetConfig+0x1e0>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <UART_SetConfig+0x1a8>
 8008a6e:	2280      	movs	r2, #128	; 0x80
 8008a70:	00d2      	lsls	r2, r2, #3
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00e      	beq.n	8008a94 <UART_SetConfig+0x1c4>
 8008a76:	e01b      	b.n	8008ab0 <UART_SetConfig+0x1e0>
 8008a78:	231b      	movs	r3, #27
 8008a7a:	2218      	movs	r2, #24
 8008a7c:	189b      	adds	r3, r3, r2
 8008a7e:	19db      	adds	r3, r3, r7
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e021      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a86:	231b      	movs	r3, #27
 8008a88:	2218      	movs	r2, #24
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	19db      	adds	r3, r3, r7
 8008a8e:	2202      	movs	r2, #2
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	e01a      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008a94:	231b      	movs	r3, #27
 8008a96:	2218      	movs	r2, #24
 8008a98:	189b      	adds	r3, r3, r2
 8008a9a:	19db      	adds	r3, r3, r7
 8008a9c:	2204      	movs	r2, #4
 8008a9e:	701a      	strb	r2, [r3, #0]
 8008aa0:	e013      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008aa2:	231b      	movs	r3, #27
 8008aa4:	2218      	movs	r2, #24
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	19db      	adds	r3, r3, r7
 8008aaa:	2208      	movs	r2, #8
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e00c      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008ab0:	231b      	movs	r3, #27
 8008ab2:	2218      	movs	r2, #24
 8008ab4:	189b      	adds	r3, r3, r2
 8008ab6:	19db      	adds	r3, r3, r7
 8008ab8:	2210      	movs	r2, #16
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e005      	b.n	8008aca <UART_SetConfig+0x1fa>
 8008abe:	231b      	movs	r3, #27
 8008ac0:	2218      	movs	r2, #24
 8008ac2:	189b      	adds	r3, r3, r2
 8008ac4:	19db      	adds	r3, r3, r7
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a55      	ldr	r2, [pc, #340]	; (8008c24 <UART_SetConfig+0x354>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d000      	beq.n	8008ad6 <UART_SetConfig+0x206>
 8008ad4:	e084      	b.n	8008be0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ad6:	231b      	movs	r3, #27
 8008ad8:	2218      	movs	r2, #24
 8008ada:	189b      	adds	r3, r3, r2
 8008adc:	19db      	adds	r3, r3, r7
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d01d      	beq.n	8008b20 <UART_SetConfig+0x250>
 8008ae4:	dc20      	bgt.n	8008b28 <UART_SetConfig+0x258>
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d015      	beq.n	8008b16 <UART_SetConfig+0x246>
 8008aea:	dc1d      	bgt.n	8008b28 <UART_SetConfig+0x258>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <UART_SetConfig+0x226>
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d005      	beq.n	8008b00 <UART_SetConfig+0x230>
 8008af4:	e018      	b.n	8008b28 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af6:	f7fe f89f 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8008afa:	0003      	movs	r3, r0
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008afe:	e01c      	b.n	8008b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b00:	4b4b      	ldr	r3, [pc, #300]	; (8008c30 <UART_SetConfig+0x360>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2210      	movs	r2, #16
 8008b06:	4013      	ands	r3, r2
 8008b08:	d002      	beq.n	8008b10 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008b0a:	4b4b      	ldr	r3, [pc, #300]	; (8008c38 <UART_SetConfig+0x368>)
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b0e:	e014      	b.n	8008b3a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8008b10:	4b4a      	ldr	r3, [pc, #296]	; (8008c3c <UART_SetConfig+0x36c>)
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b14:	e011      	b.n	8008b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b16:	f7fd ffdf 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 8008b1a:	0003      	movs	r3, r0
 8008b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b1e:	e00c      	b.n	8008b3a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b20:	2380      	movs	r3, #128	; 0x80
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b26:	e008      	b.n	8008b3a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b2c:	231a      	movs	r3, #26
 8008b2e:	2218      	movs	r2, #24
 8008b30:	189b      	adds	r3, r3, r2
 8008b32:	19db      	adds	r3, r3, r7
 8008b34:	2201      	movs	r2, #1
 8008b36:	701a      	strb	r2, [r3, #0]
        break;
 8008b38:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d100      	bne.n	8008b42 <UART_SetConfig+0x272>
 8008b40:	e132      	b.n	8008da8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	0013      	movs	r3, r2
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d305      	bcc.n	8008b5e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d906      	bls.n	8008b6c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8008b5e:	231a      	movs	r3, #26
 8008b60:	2218      	movs	r2, #24
 8008b62:	189b      	adds	r3, r3, r2
 8008b64:	19db      	adds	r3, r3, r7
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e11d      	b.n	8008da8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	6939      	ldr	r1, [r7, #16]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	000b      	movs	r3, r1
 8008b7a:	0e1b      	lsrs	r3, r3, #24
 8008b7c:	0010      	movs	r0, r2
 8008b7e:	0205      	lsls	r5, r0, #8
 8008b80:	431d      	orrs	r5, r3
 8008b82:	000b      	movs	r3, r1
 8008b84:	021c      	lsls	r4, r3, #8
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	68b8      	ldr	r0, [r7, #8]
 8008b94:	68f9      	ldr	r1, [r7, #12]
 8008b96:	1900      	adds	r0, r0, r4
 8008b98:	4169      	adcs	r1, r5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f7f7 fcb8 	bl	800051c <__aeabi_uldivmod>
 8008bac:	0002      	movs	r2, r0
 8008bae:	000b      	movs	r3, r1
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb6:	23c0      	movs	r3, #192	; 0xc0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d309      	bcc.n	8008bd2 <UART_SetConfig+0x302>
 8008bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	035b      	lsls	r3, r3, #13
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d204      	bcs.n	8008bd2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bce:	60da      	str	r2, [r3, #12]
 8008bd0:	e0ea      	b.n	8008da8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8008bd2:	231a      	movs	r3, #26
 8008bd4:	2218      	movs	r2, #24
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	19db      	adds	r3, r3, r7
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e0e3      	b.n	8008da8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	69da      	ldr	r2, [r3, #28]
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d000      	beq.n	8008bee <UART_SetConfig+0x31e>
 8008bec:	e085      	b.n	8008cfa <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8008bee:	231b      	movs	r3, #27
 8008bf0:	2218      	movs	r2, #24
 8008bf2:	189b      	adds	r3, r3, r2
 8008bf4:	19db      	adds	r3, r3, r7
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d837      	bhi.n	8008c6c <UART_SetConfig+0x39c>
 8008bfc:	009a      	lsls	r2, r3, #2
 8008bfe:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <UART_SetConfig+0x370>)
 8008c00:	18d3      	adds	r3, r2, r3
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fe f817 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8008c0a:	0003      	movs	r3, r0
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c0e:	e036      	b.n	8008c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c10:	f7fe f828 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
 8008c14:	0003      	movs	r3, r0
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c18:	e031      	b.n	8008c7e <UART_SetConfig+0x3ae>
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	efff69f3 	.word	0xefff69f3
 8008c20:	ffffcfff 	.word	0xffffcfff
 8008c24:	40004800 	.word	0x40004800
 8008c28:	fffff4ff 	.word	0xfffff4ff
 8008c2c:	40013800 	.word	0x40013800
 8008c30:	40021000 	.word	0x40021000
 8008c34:	40004400 	.word	0x40004400
 8008c38:	003d0900 	.word	0x003d0900
 8008c3c:	00f42400 	.word	0x00f42400
 8008c40:	0800c1b8 	.word	0x0800c1b8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c44:	4b60      	ldr	r3, [pc, #384]	; (8008dc8 <UART_SetConfig+0x4f8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2210      	movs	r2, #16
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d002      	beq.n	8008c54 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008c4e:	4b5f      	ldr	r3, [pc, #380]	; (8008dcc <UART_SetConfig+0x4fc>)
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c52:	e014      	b.n	8008c7e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8008c54:	4b5e      	ldr	r3, [pc, #376]	; (8008dd0 <UART_SetConfig+0x500>)
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c58:	e011      	b.n	8008c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c5a:	f7fd ff3d 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c62:	e00c      	b.n	8008c7e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c64:	2380      	movs	r3, #128	; 0x80
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c6a:	e008      	b.n	8008c7e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c70:	231a      	movs	r3, #26
 8008c72:	2218      	movs	r2, #24
 8008c74:	189b      	adds	r3, r3, r2
 8008c76:	19db      	adds	r3, r3, r7
 8008c78:	2201      	movs	r2, #1
 8008c7a:	701a      	strb	r2, [r3, #0]
        break;
 8008c7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d100      	bne.n	8008c86 <UART_SetConfig+0x3b6>
 8008c84:	e090      	b.n	8008da8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	005a      	lsls	r2, r3, #1
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	18d2      	adds	r2, r2, r3
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	0019      	movs	r1, r3
 8008c98:	0010      	movs	r0, r2
 8008c9a:	f7f7 fa51 	bl	8000140 <__udivsi3>
 8008c9e:	0003      	movs	r3, r0
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2b0f      	cmp	r3, #15
 8008ca6:	d921      	bls.n	8008cec <UART_SetConfig+0x41c>
 8008ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d21c      	bcs.n	8008cec <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	200e      	movs	r0, #14
 8008cb8:	2418      	movs	r4, #24
 8008cba:	1903      	adds	r3, r0, r4
 8008cbc:	19db      	adds	r3, r3, r7
 8008cbe:	210f      	movs	r1, #15
 8008cc0:	438a      	bics	r2, r1
 8008cc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2207      	movs	r2, #7
 8008ccc:	4013      	ands	r3, r2
 8008cce:	b299      	uxth	r1, r3
 8008cd0:	1903      	adds	r3, r0, r4
 8008cd2:	19db      	adds	r3, r3, r7
 8008cd4:	1902      	adds	r2, r0, r4
 8008cd6:	19d2      	adds	r2, r2, r7
 8008cd8:	8812      	ldrh	r2, [r2, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	1902      	adds	r2, r0, r4
 8008ce4:	19d2      	adds	r2, r2, r7
 8008ce6:	8812      	ldrh	r2, [r2, #0]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	e05d      	b.n	8008da8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008cec:	231a      	movs	r3, #26
 8008cee:	2218      	movs	r2, #24
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	19db      	adds	r3, r3, r7
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e056      	b.n	8008da8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cfa:	231b      	movs	r3, #27
 8008cfc:	2218      	movs	r2, #24
 8008cfe:	189b      	adds	r3, r3, r2
 8008d00:	19db      	adds	r3, r3, r7
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d822      	bhi.n	8008d4e <UART_SetConfig+0x47e>
 8008d08:	009a      	lsls	r2, r3, #2
 8008d0a:	4b32      	ldr	r3, [pc, #200]	; (8008dd4 <UART_SetConfig+0x504>)
 8008d0c:	18d3      	adds	r3, r2, r3
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d12:	f7fd ff91 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8008d16:	0003      	movs	r3, r0
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d1a:	e021      	b.n	8008d60 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d1c:	f7fd ffa2 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
 8008d20:	0003      	movs	r3, r0
 8008d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d24:	e01c      	b.n	8008d60 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d26:	4b28      	ldr	r3, [pc, #160]	; (8008dc8 <UART_SetConfig+0x4f8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d002      	beq.n	8008d36 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008d30:	4b26      	ldr	r3, [pc, #152]	; (8008dcc <UART_SetConfig+0x4fc>)
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d34:	e014      	b.n	8008d60 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <UART_SetConfig+0x500>)
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d3a:	e011      	b.n	8008d60 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d3c:	f7fd fecc 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 8008d40:	0003      	movs	r3, r0
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d44:	e00c      	b.n	8008d60 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d46:	2380      	movs	r3, #128	; 0x80
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d4c:	e008      	b.n	8008d60 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d52:	231a      	movs	r3, #26
 8008d54:	2218      	movs	r2, #24
 8008d56:	189b      	adds	r3, r3, r2
 8008d58:	19db      	adds	r3, r3, r7
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
        break;
 8008d5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d020      	beq.n	8008da8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	085a      	lsrs	r2, r3, #1
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	18d2      	adds	r2, r2, r3
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	0019      	movs	r1, r3
 8008d76:	0010      	movs	r0, r2
 8008d78:	f7f7 f9e2 	bl	8000140 <__udivsi3>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	d90a      	bls.n	8008d9c <UART_SetConfig+0x4cc>
 8008d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	025b      	lsls	r3, r3, #9
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d205      	bcs.n	8008d9c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60da      	str	r2, [r3, #12]
 8008d9a:	e005      	b.n	8008da8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d9c:	231a      	movs	r3, #26
 8008d9e:	2218      	movs	r2, #24
 8008da0:	189b      	adds	r3, r3, r2
 8008da2:	19db      	adds	r3, r3, r7
 8008da4:	2201      	movs	r2, #1
 8008da6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2200      	movs	r2, #0
 8008dac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	2200      	movs	r2, #0
 8008db2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008db4:	231a      	movs	r3, #26
 8008db6:	2218      	movs	r2, #24
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	19db      	adds	r3, r3, r7
 8008dbc:	781b      	ldrb	r3, [r3, #0]
}
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	b00e      	add	sp, #56	; 0x38
 8008dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	003d0900 	.word	0x003d0900
 8008dd0:	00f42400 	.word	0x00f42400
 8008dd4:	0800c1dc 	.word	0x0800c1dc

08008dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2201      	movs	r2, #1
 8008de6:	4013      	ands	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a4a      	ldr	r2, [pc, #296]	; (8008f1c <UART_AdvFeatureConfig+0x144>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2202      	movs	r2, #2
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d00b      	beq.n	8008e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	4a43      	ldr	r2, [pc, #268]	; (8008f20 <UART_AdvFeatureConfig+0x148>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2204      	movs	r2, #4
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	d00b      	beq.n	8008e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4a3b      	ldr	r2, [pc, #236]	; (8008f24 <UART_AdvFeatureConfig+0x14c>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	0019      	movs	r1, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	d00b      	beq.n	8008e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	4a34      	ldr	r2, [pc, #208]	; (8008f28 <UART_AdvFeatureConfig+0x150>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	0019      	movs	r1, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2210      	movs	r2, #16
 8008e6e:	4013      	ands	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <UART_AdvFeatureConfig+0x154>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2220      	movs	r2, #32
 8008e90:	4013      	ands	r3, r2
 8008e92:	d00b      	beq.n	8008eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	4a25      	ldr	r2, [pc, #148]	; (8008f30 <UART_AdvFeatureConfig+0x158>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	0019      	movs	r1, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2240      	movs	r2, #64	; 0x40
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	d01d      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <UART_AdvFeatureConfig+0x15c>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	0019      	movs	r1, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ed2:	2380      	movs	r3, #128	; 0x80
 8008ed4:	035b      	lsls	r3, r3, #13
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d10b      	bne.n	8008ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <UART_AdvFeatureConfig+0x160>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2280      	movs	r2, #128	; 0x80
 8008ef8:	4013      	ands	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4a0e      	ldr	r2, [pc, #56]	; (8008f3c <UART_AdvFeatureConfig+0x164>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	0019      	movs	r1, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }
}
 8008f14:	46c0      	nop			; (mov r8, r8)
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	fffdffff 	.word	0xfffdffff
 8008f20:	fffeffff 	.word	0xfffeffff
 8008f24:	fffbffff 	.word	0xfffbffff
 8008f28:	ffff7fff 	.word	0xffff7fff
 8008f2c:	ffffefff 	.word	0xffffefff
 8008f30:	ffffdfff 	.word	0xffffdfff
 8008f34:	ffefffff 	.word	0xffefffff
 8008f38:	ff9fffff 	.word	0xff9fffff
 8008f3c:	fff7ffff 	.word	0xfff7ffff

08008f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b092      	sub	sp, #72	; 0x48
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2284      	movs	r2, #132	; 0x84
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f50:	f7fb f870 	bl	8004034 <HAL_GetTick>
 8008f54:	0003      	movs	r3, r0
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2208      	movs	r2, #8
 8008f60:	4013      	ands	r3, r2
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d12c      	bne.n	8008fc0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	2280      	movs	r2, #128	; 0x80
 8008f6a:	0391      	lsls	r1, r2, #14
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4a46      	ldr	r2, [pc, #280]	; (8009088 <UART_CheckIdleState+0x148>)
 8008f70:	9200      	str	r2, [sp, #0]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f000 f88c 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 8008f78:	1e03      	subs	r3, r0, #0
 8008f7a:	d021      	beq.n	8008fc0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f86:	2301      	movs	r3, #1
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	f383 8810 	msr	PRIMASK, r3
}
 8008f90:	46c0      	nop			; (mov r8, r8)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2180      	movs	r1, #128	; 0x80
 8008f9e:	438a      	bics	r2, r1
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	f383 8810 	msr	PRIMASK, r3
}
 8008fac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2278      	movs	r2, #120	; 0x78
 8008fb8:	2100      	movs	r1, #0
 8008fba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e05f      	b.n	8009080 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d146      	bne.n	800905c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	2280      	movs	r2, #128	; 0x80
 8008fd2:	03d1      	lsls	r1, r2, #15
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4a2c      	ldr	r2, [pc, #176]	; (8009088 <UART_CheckIdleState+0x148>)
 8008fd8:	9200      	str	r2, [sp, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f858 	bl	8009090 <UART_WaitOnFlagUntilTimeout>
 8008fe0:	1e03      	subs	r3, r0, #0
 8008fe2:	d03b      	beq.n	800905c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
 8008fee:	2301      	movs	r3, #1
 8008ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f383 8810 	msr	PRIMASK, r3
}
 8008ff8:	46c0      	nop			; (mov r8, r8)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4921      	ldr	r1, [pc, #132]	; (800908c <UART_CheckIdleState+0x14c>)
 8009006:	400a      	ands	r2, r1
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f383 8810 	msr	PRIMASK, r3
}
 8009014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009016:	f3ef 8310 	mrs	r3, PRIMASK
 800901a:	61bb      	str	r3, [r7, #24]
  return(result);
 800901c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
 8009020:	2301      	movs	r3, #1
 8009022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f383 8810 	msr	PRIMASK, r3
}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2101      	movs	r1, #1
 8009038:	438a      	bics	r2, r1
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f383 8810 	msr	PRIMASK, r3
}
 8009046:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2280      	movs	r2, #128	; 0x80
 800904c:	2120      	movs	r1, #32
 800904e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2278      	movs	r2, #120	; 0x78
 8009054:	2100      	movs	r1, #0
 8009056:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e011      	b.n	8009080 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2280      	movs	r2, #128	; 0x80
 8009066:	2120      	movs	r1, #32
 8009068:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2278      	movs	r2, #120	; 0x78
 800907a:	2100      	movs	r1, #0
 800907c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b010      	add	sp, #64	; 0x40
 8009086:	bd80      	pop	{r7, pc}
 8009088:	01ffffff 	.word	0x01ffffff
 800908c:	fffffedf 	.word	0xfffffedf

08009090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a0:	e04b      	b.n	800913a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	3301      	adds	r3, #1
 80090a6:	d048      	beq.n	800913a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a8:	f7fa ffc4 	bl	8004034 <HAL_GetTick>
 80090ac:	0002      	movs	r2, r0
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d302      	bcc.n	80090be <UART_WaitOnFlagUntilTimeout+0x2e>
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e04b      	b.n	800915a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2204      	movs	r2, #4
 80090ca:	4013      	ands	r3, r2
 80090cc:	d035      	beq.n	800913a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	2208      	movs	r2, #8
 80090d6:	4013      	ands	r3, r2
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d111      	bne.n	8009100 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2208      	movs	r2, #8
 80090e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	0018      	movs	r0, r3
 80090e8:	f000 f83c 	bl	8009164 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2284      	movs	r2, #132	; 0x84
 80090f0:	2108      	movs	r1, #8
 80090f2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2278      	movs	r2, #120	; 0x78
 80090f8:	2100      	movs	r1, #0
 80090fa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e02c      	b.n	800915a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69da      	ldr	r2, [r3, #28]
 8009106:	2380      	movs	r3, #128	; 0x80
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	401a      	ands	r2, r3
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	429a      	cmp	r2, r3
 8009112:	d112      	bne.n	800913a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2280      	movs	r2, #128	; 0x80
 800911a:	0112      	lsls	r2, r2, #4
 800911c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	0018      	movs	r0, r3
 8009122:	f000 f81f 	bl	8009164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2284      	movs	r2, #132	; 0x84
 800912a:	2120      	movs	r1, #32
 800912c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2278      	movs	r2, #120	; 0x78
 8009132:	2100      	movs	r1, #0
 8009134:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e00f      	b.n	800915a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	4013      	ands	r3, r2
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	425a      	negs	r2, r3
 800914a:	4153      	adcs	r3, r2
 800914c:	b2db      	uxtb	r3, r3
 800914e:	001a      	movs	r2, r3
 8009150:	1dfb      	adds	r3, r7, #7
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d0a4      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	0018      	movs	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	; 0x38
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916c:	f3ef 8310 	mrs	r3, PRIMASK
 8009170:	617b      	str	r3, [r7, #20]
  return(result);
 8009172:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
 8009176:	2301      	movs	r3, #1
 8009178:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4926      	ldr	r1, [pc, #152]	; (8009228 <UART_EndRxTransfer+0xc4>)
 800918e:	400a      	ands	r2, r1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009194:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f383 8810 	msr	PRIMASK, r3
}
 800919c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800919e:	f3ef 8310 	mrs	r3, PRIMASK
 80091a2:	623b      	str	r3, [r7, #32]
  return(result);
 80091a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
 80091a8:	2301      	movs	r3, #1
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	f383 8810 	msr	PRIMASK, r3
}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2101      	movs	r1, #1
 80091c0:	438a      	bics	r2, r1
 80091c2:	609a      	str	r2, [r3, #8]
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	f383 8810 	msr	PRIMASK, r3
}
 80091ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d118      	bne.n	800920a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091d8:	f3ef 8310 	mrs	r3, PRIMASK
 80091dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80091de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e2:	2301      	movs	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f383 8810 	msr	PRIMASK, r3
}
 80091ec:	46c0      	nop			; (mov r8, r8)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2110      	movs	r1, #16
 80091fa:	438a      	bics	r2, r1
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f383 8810 	msr	PRIMASK, r3
}
 8009208:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2280      	movs	r2, #128	; 0x80
 800920e:	2120      	movs	r1, #32
 8009210:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	46bd      	mov	sp, r7
 8009222:	b00e      	add	sp, #56	; 0x38
 8009224:	bd80      	pop	{r7, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	fffffedf 	.word	0xfffffedf

0800922c <__cvt>:
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	001e      	movs	r6, r3
 8009230:	2300      	movs	r3, #0
 8009232:	0014      	movs	r4, r2
 8009234:	b08b      	sub	sp, #44	; 0x2c
 8009236:	429e      	cmp	r6, r3
 8009238:	da04      	bge.n	8009244 <__cvt+0x18>
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	0609      	lsls	r1, r1, #24
 800923e:	1873      	adds	r3, r6, r1
 8009240:	001e      	movs	r6, r3
 8009242:	232d      	movs	r3, #45	; 0x2d
 8009244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009246:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009248:	7013      	strb	r3, [r2, #0]
 800924a:	2320      	movs	r3, #32
 800924c:	2203      	movs	r2, #3
 800924e:	439f      	bics	r7, r3
 8009250:	2f46      	cmp	r7, #70	; 0x46
 8009252:	d007      	beq.n	8009264 <__cvt+0x38>
 8009254:	003b      	movs	r3, r7
 8009256:	3b45      	subs	r3, #69	; 0x45
 8009258:	4259      	negs	r1, r3
 800925a:	414b      	adcs	r3, r1
 800925c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800925e:	3a01      	subs	r2, #1
 8009260:	18cb      	adds	r3, r1, r3
 8009262:	9310      	str	r3, [sp, #64]	; 0x40
 8009264:	ab09      	add	r3, sp, #36	; 0x24
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	ab08      	add	r3, sp, #32
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800926e:	9200      	str	r2, [sp, #0]
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009274:	0022      	movs	r2, r4
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	0033      	movs	r3, r6
 800927a:	f000 fea7 	bl	8009fcc <_dtoa_r>
 800927e:	0005      	movs	r5, r0
 8009280:	2f47      	cmp	r7, #71	; 0x47
 8009282:	d102      	bne.n	800928a <__cvt+0x5e>
 8009284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009286:	07db      	lsls	r3, r3, #31
 8009288:	d528      	bpl.n	80092dc <__cvt+0xb0>
 800928a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800928c:	18eb      	adds	r3, r5, r3
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	2f46      	cmp	r7, #70	; 0x46
 8009292:	d114      	bne.n	80092be <__cvt+0x92>
 8009294:	782b      	ldrb	r3, [r5, #0]
 8009296:	2b30      	cmp	r3, #48	; 0x30
 8009298:	d10c      	bne.n	80092b4 <__cvt+0x88>
 800929a:	2200      	movs	r2, #0
 800929c:	2300      	movs	r3, #0
 800929e:	0020      	movs	r0, r4
 80092a0:	0031      	movs	r1, r6
 80092a2:	f7f7 f8d3 	bl	800044c <__aeabi_dcmpeq>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d104      	bne.n	80092b4 <__cvt+0x88>
 80092aa:	2301      	movs	r3, #1
 80092ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092ae:	1a9b      	subs	r3, r3, r2
 80092b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092b6:	9a07      	ldr	r2, [sp, #28]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	18d3      	adds	r3, r2, r3
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	0020      	movs	r0, r4
 80092c4:	0031      	movs	r1, r6
 80092c6:	f7f7 f8c1 	bl	800044c <__aeabi_dcmpeq>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d001      	beq.n	80092d2 <__cvt+0xa6>
 80092ce:	9b07      	ldr	r3, [sp, #28]
 80092d0:	9309      	str	r3, [sp, #36]	; 0x24
 80092d2:	2230      	movs	r2, #48	; 0x30
 80092d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d6:	9907      	ldr	r1, [sp, #28]
 80092d8:	428b      	cmp	r3, r1
 80092da:	d306      	bcc.n	80092ea <__cvt+0xbe>
 80092dc:	0028      	movs	r0, r5
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092e2:	1b5b      	subs	r3, r3, r5
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	b00b      	add	sp, #44	; 0x2c
 80092e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ea:	1c59      	adds	r1, r3, #1
 80092ec:	9109      	str	r1, [sp, #36]	; 0x24
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e7f0      	b.n	80092d4 <__cvt+0xa8>

080092f2 <__exponent>:
 80092f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f4:	1c83      	adds	r3, r0, #2
 80092f6:	b087      	sub	sp, #28
 80092f8:	9303      	str	r3, [sp, #12]
 80092fa:	0005      	movs	r5, r0
 80092fc:	000c      	movs	r4, r1
 80092fe:	232b      	movs	r3, #43	; 0x2b
 8009300:	7002      	strb	r2, [r0, #0]
 8009302:	2900      	cmp	r1, #0
 8009304:	da01      	bge.n	800930a <__exponent+0x18>
 8009306:	424c      	negs	r4, r1
 8009308:	3302      	adds	r3, #2
 800930a:	706b      	strb	r3, [r5, #1]
 800930c:	2c09      	cmp	r4, #9
 800930e:	dd2f      	ble.n	8009370 <__exponent+0x7e>
 8009310:	270a      	movs	r7, #10
 8009312:	ab04      	add	r3, sp, #16
 8009314:	1dde      	adds	r6, r3, #7
 8009316:	0020      	movs	r0, r4
 8009318:	0039      	movs	r1, r7
 800931a:	9601      	str	r6, [sp, #4]
 800931c:	f7f7 f880 	bl	8000420 <__aeabi_idivmod>
 8009320:	3e01      	subs	r6, #1
 8009322:	3130      	adds	r1, #48	; 0x30
 8009324:	0020      	movs	r0, r4
 8009326:	7031      	strb	r1, [r6, #0]
 8009328:	0039      	movs	r1, r7
 800932a:	9402      	str	r4, [sp, #8]
 800932c:	f7f6 ff92 	bl	8000254 <__divsi3>
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	0004      	movs	r4, r0
 8009334:	2b63      	cmp	r3, #99	; 0x63
 8009336:	dcee      	bgt.n	8009316 <__exponent+0x24>
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	3430      	adds	r4, #48	; 0x30
 800933c:	1e9a      	subs	r2, r3, #2
 800933e:	0013      	movs	r3, r2
 8009340:	9903      	ldr	r1, [sp, #12]
 8009342:	7014      	strb	r4, [r2, #0]
 8009344:	a804      	add	r0, sp, #16
 8009346:	3007      	adds	r0, #7
 8009348:	4298      	cmp	r0, r3
 800934a:	d80c      	bhi.n	8009366 <__exponent+0x74>
 800934c:	2300      	movs	r3, #0
 800934e:	4282      	cmp	r2, r0
 8009350:	d804      	bhi.n	800935c <__exponent+0x6a>
 8009352:	aa04      	add	r2, sp, #16
 8009354:	3309      	adds	r3, #9
 8009356:	189b      	adds	r3, r3, r2
 8009358:	9a01      	ldr	r2, [sp, #4]
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	9a03      	ldr	r2, [sp, #12]
 800935e:	18d3      	adds	r3, r2, r3
 8009360:	1b58      	subs	r0, r3, r5
 8009362:	b007      	add	sp, #28
 8009364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009366:	7818      	ldrb	r0, [r3, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	7008      	strb	r0, [r1, #0]
 800936c:	3101      	adds	r1, #1
 800936e:	e7e9      	b.n	8009344 <__exponent+0x52>
 8009370:	2330      	movs	r3, #48	; 0x30
 8009372:	3430      	adds	r4, #48	; 0x30
 8009374:	70ab      	strb	r3, [r5, #2]
 8009376:	70ec      	strb	r4, [r5, #3]
 8009378:	1d2b      	adds	r3, r5, #4
 800937a:	e7f1      	b.n	8009360 <__exponent+0x6e>

0800937c <_printf_float>:
 800937c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800937e:	b095      	sub	sp, #84	; 0x54
 8009380:	000c      	movs	r4, r1
 8009382:	9208      	str	r2, [sp, #32]
 8009384:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	0007      	movs	r7, r0
 800938a:	f000 fd05 	bl	8009d98 <_localeconv_r>
 800938e:	6803      	ldr	r3, [r0, #0]
 8009390:	0018      	movs	r0, r3
 8009392:	930c      	str	r3, [sp, #48]	; 0x30
 8009394:	f7f6 feb8 	bl	8000108 <strlen>
 8009398:	2300      	movs	r3, #0
 800939a:	9312      	str	r3, [sp, #72]	; 0x48
 800939c:	7e23      	ldrb	r3, [r4, #24]
 800939e:	2207      	movs	r2, #7
 80093a0:	930a      	str	r3, [sp, #40]	; 0x28
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	900d      	str	r0, [sp, #52]	; 0x34
 80093a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	05c9      	lsls	r1, r1, #23
 80093ae:	d547      	bpl.n	8009440 <_printf_float+0xc4>
 80093b0:	189b      	adds	r3, r3, r2
 80093b2:	4393      	bics	r3, r2
 80093b4:	001a      	movs	r2, r3
 80093b6:	3208      	adds	r2, #8
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	681e      	ldr	r6, [r3, #0]
 80093bc:	685d      	ldr	r5, [r3, #4]
 80093be:	0032      	movs	r2, r6
 80093c0:	002b      	movs	r3, r5
 80093c2:	64a2      	str	r2, [r4, #72]	; 0x48
 80093c4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80093c6:	2201      	movs	r2, #1
 80093c8:	006b      	lsls	r3, r5, #1
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	930e      	str	r3, [sp, #56]	; 0x38
 80093ce:	0030      	movs	r0, r6
 80093d0:	4bab      	ldr	r3, [pc, #684]	; (8009680 <_printf_float+0x304>)
 80093d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093d4:	4252      	negs	r2, r2
 80093d6:	f7f9 f96b 	bl	80026b0 <__aeabi_dcmpun>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d132      	bne.n	8009444 <_printf_float+0xc8>
 80093de:	2201      	movs	r2, #1
 80093e0:	0030      	movs	r0, r6
 80093e2:	4ba7      	ldr	r3, [pc, #668]	; (8009680 <_printf_float+0x304>)
 80093e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093e6:	4252      	negs	r2, r2
 80093e8:	f7f7 f840 	bl	800046c <__aeabi_dcmple>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d129      	bne.n	8009444 <_printf_float+0xc8>
 80093f0:	2200      	movs	r2, #0
 80093f2:	2300      	movs	r3, #0
 80093f4:	0030      	movs	r0, r6
 80093f6:	0029      	movs	r1, r5
 80093f8:	f7f7 f82e 	bl	8000458 <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d003      	beq.n	8009408 <_printf_float+0x8c>
 8009400:	0023      	movs	r3, r4
 8009402:	222d      	movs	r2, #45	; 0x2d
 8009404:	3343      	adds	r3, #67	; 0x43
 8009406:	701a      	strb	r2, [r3, #0]
 8009408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940a:	4d9e      	ldr	r5, [pc, #632]	; (8009684 <_printf_float+0x308>)
 800940c:	2b47      	cmp	r3, #71	; 0x47
 800940e:	d900      	bls.n	8009412 <_printf_float+0x96>
 8009410:	4d9d      	ldr	r5, [pc, #628]	; (8009688 <_printf_float+0x30c>)
 8009412:	2303      	movs	r3, #3
 8009414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	439a      	bics	r2, r3
 800941c:	2300      	movs	r3, #0
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	930b      	str	r3, [sp, #44]	; 0x2c
 8009422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009424:	0021      	movs	r1, r4
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	0038      	movs	r0, r7
 800942a:	9b08      	ldr	r3, [sp, #32]
 800942c:	aa13      	add	r2, sp, #76	; 0x4c
 800942e:	f000 f9fb 	bl	8009828 <_printf_common>
 8009432:	3001      	adds	r0, #1
 8009434:	d000      	beq.n	8009438 <_printf_float+0xbc>
 8009436:	e0a3      	b.n	8009580 <_printf_float+0x204>
 8009438:	2001      	movs	r0, #1
 800943a:	4240      	negs	r0, r0
 800943c:	b015      	add	sp, #84	; 0x54
 800943e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009440:	3307      	adds	r3, #7
 8009442:	e7b6      	b.n	80093b2 <_printf_float+0x36>
 8009444:	0032      	movs	r2, r6
 8009446:	002b      	movs	r3, r5
 8009448:	0030      	movs	r0, r6
 800944a:	0029      	movs	r1, r5
 800944c:	f7f9 f930 	bl	80026b0 <__aeabi_dcmpun>
 8009450:	2800      	cmp	r0, #0
 8009452:	d00b      	beq.n	800946c <_printf_float+0xf0>
 8009454:	2d00      	cmp	r5, #0
 8009456:	da03      	bge.n	8009460 <_printf_float+0xe4>
 8009458:	0023      	movs	r3, r4
 800945a:	222d      	movs	r2, #45	; 0x2d
 800945c:	3343      	adds	r3, #67	; 0x43
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009462:	4d8a      	ldr	r5, [pc, #552]	; (800968c <_printf_float+0x310>)
 8009464:	2b47      	cmp	r3, #71	; 0x47
 8009466:	d9d4      	bls.n	8009412 <_printf_float+0x96>
 8009468:	4d89      	ldr	r5, [pc, #548]	; (8009690 <_printf_float+0x314>)
 800946a:	e7d2      	b.n	8009412 <_printf_float+0x96>
 800946c:	2220      	movs	r2, #32
 800946e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009470:	6863      	ldr	r3, [r4, #4]
 8009472:	4391      	bics	r1, r2
 8009474:	910e      	str	r1, [sp, #56]	; 0x38
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	d14a      	bne.n	8009510 <_printf_float+0x194>
 800947a:	3307      	adds	r3, #7
 800947c:	6063      	str	r3, [r4, #4]
 800947e:	2380      	movs	r3, #128	; 0x80
 8009480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4313      	orrs	r3, r2
 8009486:	2200      	movs	r2, #0
 8009488:	9206      	str	r2, [sp, #24]
 800948a:	aa12      	add	r2, sp, #72	; 0x48
 800948c:	9205      	str	r2, [sp, #20]
 800948e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	9204      	str	r2, [sp, #16]
 8009494:	aa11      	add	r2, sp, #68	; 0x44
 8009496:	9203      	str	r2, [sp, #12]
 8009498:	2223      	movs	r2, #35	; 0x23
 800949a:	a908      	add	r1, sp, #32
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	1852      	adds	r2, r2, r1
 80094a2:	9202      	str	r2, [sp, #8]
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	0032      	movs	r2, r6
 80094a8:	002b      	movs	r3, r5
 80094aa:	0038      	movs	r0, r7
 80094ac:	f7ff febe 	bl	800922c <__cvt>
 80094b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b2:	0005      	movs	r5, r0
 80094b4:	2b47      	cmp	r3, #71	; 0x47
 80094b6:	d109      	bne.n	80094cc <_printf_float+0x150>
 80094b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094ba:	1cda      	adds	r2, r3, #3
 80094bc:	db02      	blt.n	80094c4 <_printf_float+0x148>
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	4293      	cmp	r3, r2
 80094c2:	dd49      	ble.n	8009558 <_printf_float+0x1dc>
 80094c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c6:	3b02      	subs	r3, #2
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	930a      	str	r3, [sp, #40]	; 0x28
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094d0:	2b65      	cmp	r3, #101	; 0x65
 80094d2:	d824      	bhi.n	800951e <_printf_float+0x1a2>
 80094d4:	0020      	movs	r0, r4
 80094d6:	001a      	movs	r2, r3
 80094d8:	3901      	subs	r1, #1
 80094da:	3050      	adds	r0, #80	; 0x50
 80094dc:	9111      	str	r1, [sp, #68]	; 0x44
 80094de:	f7ff ff08 	bl	80092f2 <__exponent>
 80094e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80094e6:	1813      	adds	r3, r2, r0
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	2a01      	cmp	r2, #1
 80094ec:	dc02      	bgt.n	80094f4 <_printf_float+0x178>
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	07d2      	lsls	r2, r2, #31
 80094f2:	d501      	bpl.n	80094f8 <_printf_float+0x17c>
 80094f4:	3301      	adds	r3, #1
 80094f6:	6123      	str	r3, [r4, #16]
 80094f8:	2323      	movs	r3, #35	; 0x23
 80094fa:	aa08      	add	r2, sp, #32
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d100      	bne.n	8009506 <_printf_float+0x18a>
 8009504:	e78d      	b.n	8009422 <_printf_float+0xa6>
 8009506:	0023      	movs	r3, r4
 8009508:	222d      	movs	r2, #45	; 0x2d
 800950a:	3343      	adds	r3, #67	; 0x43
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e788      	b.n	8009422 <_printf_float+0xa6>
 8009510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009512:	2a47      	cmp	r2, #71	; 0x47
 8009514:	d1b3      	bne.n	800947e <_printf_float+0x102>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1b1      	bne.n	800947e <_printf_float+0x102>
 800951a:	3301      	adds	r3, #1
 800951c:	e7ae      	b.n	800947c <_printf_float+0x100>
 800951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009520:	2b66      	cmp	r3, #102	; 0x66
 8009522:	d11b      	bne.n	800955c <_printf_float+0x1e0>
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	2900      	cmp	r1, #0
 8009528:	dd09      	ble.n	800953e <_printf_float+0x1c2>
 800952a:	6121      	str	r1, [r4, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <_printf_float+0x1ba>
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	07d2      	lsls	r2, r2, #31
 8009534:	d50b      	bpl.n	800954e <_printf_float+0x1d2>
 8009536:	3301      	adds	r3, #1
 8009538:	185b      	adds	r3, r3, r1
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	e007      	b.n	800954e <_printf_float+0x1d2>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <_printf_float+0x1ce>
 8009542:	2201      	movs	r2, #1
 8009544:	6821      	ldr	r1, [r4, #0]
 8009546:	4211      	tst	r1, r2
 8009548:	d000      	beq.n	800954c <_printf_float+0x1d0>
 800954a:	1c9a      	adds	r2, r3, #2
 800954c:	6122      	str	r2, [r4, #16]
 800954e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009550:	65a3      	str	r3, [r4, #88]	; 0x58
 8009552:	2300      	movs	r3, #0
 8009554:	930b      	str	r3, [sp, #44]	; 0x2c
 8009556:	e7cf      	b.n	80094f8 <_printf_float+0x17c>
 8009558:	2367      	movs	r3, #103	; 0x67
 800955a:	930a      	str	r3, [sp, #40]	; 0x28
 800955c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800955e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009560:	4299      	cmp	r1, r3
 8009562:	db06      	blt.n	8009572 <_printf_float+0x1f6>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	6121      	str	r1, [r4, #16]
 8009568:	07db      	lsls	r3, r3, #31
 800956a:	d5f0      	bpl.n	800954e <_printf_float+0x1d2>
 800956c:	3101      	adds	r1, #1
 800956e:	6121      	str	r1, [r4, #16]
 8009570:	e7ed      	b.n	800954e <_printf_float+0x1d2>
 8009572:	2201      	movs	r2, #1
 8009574:	2900      	cmp	r1, #0
 8009576:	dc01      	bgt.n	800957c <_printf_float+0x200>
 8009578:	1892      	adds	r2, r2, r2
 800957a:	1a52      	subs	r2, r2, r1
 800957c:	189b      	adds	r3, r3, r2
 800957e:	e7dc      	b.n	800953a <_printf_float+0x1be>
 8009580:	6822      	ldr	r2, [r4, #0]
 8009582:	0553      	lsls	r3, r2, #21
 8009584:	d408      	bmi.n	8009598 <_printf_float+0x21c>
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	002a      	movs	r2, r5
 800958a:	0038      	movs	r0, r7
 800958c:	9908      	ldr	r1, [sp, #32]
 800958e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009590:	47a8      	blx	r5
 8009592:	3001      	adds	r0, #1
 8009594:	d12a      	bne.n	80095ec <_printf_float+0x270>
 8009596:	e74f      	b.n	8009438 <_printf_float+0xbc>
 8009598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959a:	2b65      	cmp	r3, #101	; 0x65
 800959c:	d800      	bhi.n	80095a0 <_printf_float+0x224>
 800959e:	e0ec      	b.n	800977a <_printf_float+0x3fe>
 80095a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80095a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	f7f6 ff50 	bl	800044c <__aeabi_dcmpeq>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d034      	beq.n	800961a <_printf_float+0x29e>
 80095b0:	2301      	movs	r3, #1
 80095b2:	0038      	movs	r0, r7
 80095b4:	4a37      	ldr	r2, [pc, #220]	; (8009694 <_printf_float+0x318>)
 80095b6:	9908      	ldr	r1, [sp, #32]
 80095b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095ba:	47a8      	blx	r5
 80095bc:	3001      	adds	r0, #1
 80095be:	d100      	bne.n	80095c2 <_printf_float+0x246>
 80095c0:	e73a      	b.n	8009438 <_printf_float+0xbc>
 80095c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095c6:	429a      	cmp	r2, r3
 80095c8:	db02      	blt.n	80095d0 <_printf_float+0x254>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d50d      	bpl.n	80095ec <_printf_float+0x270>
 80095d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095d2:	0038      	movs	r0, r7
 80095d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095d8:	9908      	ldr	r1, [sp, #32]
 80095da:	47a8      	blx	r5
 80095dc:	2500      	movs	r5, #0
 80095de:	3001      	adds	r0, #1
 80095e0:	d100      	bne.n	80095e4 <_printf_float+0x268>
 80095e2:	e729      	b.n	8009438 <_printf_float+0xbc>
 80095e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095e6:	3b01      	subs	r3, #1
 80095e8:	42ab      	cmp	r3, r5
 80095ea:	dc0a      	bgt.n	8009602 <_printf_float+0x286>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	079b      	lsls	r3, r3, #30
 80095f0:	d500      	bpl.n	80095f4 <_printf_float+0x278>
 80095f2:	e116      	b.n	8009822 <_printf_float+0x4a6>
 80095f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095f6:	68e0      	ldr	r0, [r4, #12]
 80095f8:	4298      	cmp	r0, r3
 80095fa:	db00      	blt.n	80095fe <_printf_float+0x282>
 80095fc:	e71e      	b.n	800943c <_printf_float+0xc0>
 80095fe:	0018      	movs	r0, r3
 8009600:	e71c      	b.n	800943c <_printf_float+0xc0>
 8009602:	0022      	movs	r2, r4
 8009604:	2301      	movs	r3, #1
 8009606:	0038      	movs	r0, r7
 8009608:	9908      	ldr	r1, [sp, #32]
 800960a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800960c:	321a      	adds	r2, #26
 800960e:	47b0      	blx	r6
 8009610:	3001      	adds	r0, #1
 8009612:	d100      	bne.n	8009616 <_printf_float+0x29a>
 8009614:	e710      	b.n	8009438 <_printf_float+0xbc>
 8009616:	3501      	adds	r5, #1
 8009618:	e7e4      	b.n	80095e4 <_printf_float+0x268>
 800961a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc3b      	bgt.n	8009698 <_printf_float+0x31c>
 8009620:	2301      	movs	r3, #1
 8009622:	0038      	movs	r0, r7
 8009624:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <_printf_float+0x318>)
 8009626:	9908      	ldr	r1, [sp, #32]
 8009628:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800962a:	47b0      	blx	r6
 800962c:	3001      	adds	r0, #1
 800962e:	d100      	bne.n	8009632 <_printf_float+0x2b6>
 8009630:	e702      	b.n	8009438 <_printf_float+0xbc>
 8009632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009636:	4313      	orrs	r3, r2
 8009638:	d102      	bne.n	8009640 <_printf_float+0x2c4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d5d5      	bpl.n	80095ec <_printf_float+0x270>
 8009640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009642:	0038      	movs	r0, r7
 8009644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009646:	9908      	ldr	r1, [sp, #32]
 8009648:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800964a:	47b0      	blx	r6
 800964c:	2300      	movs	r3, #0
 800964e:	3001      	adds	r0, #1
 8009650:	d100      	bne.n	8009654 <_printf_float+0x2d8>
 8009652:	e6f1      	b.n	8009438 <_printf_float+0xbc>
 8009654:	930a      	str	r3, [sp, #40]	; 0x28
 8009656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965a:	425b      	negs	r3, r3
 800965c:	4293      	cmp	r3, r2
 800965e:	dc01      	bgt.n	8009664 <_printf_float+0x2e8>
 8009660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009662:	e791      	b.n	8009588 <_printf_float+0x20c>
 8009664:	0022      	movs	r2, r4
 8009666:	2301      	movs	r3, #1
 8009668:	0038      	movs	r0, r7
 800966a:	9908      	ldr	r1, [sp, #32]
 800966c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800966e:	321a      	adds	r2, #26
 8009670:	47b0      	blx	r6
 8009672:	3001      	adds	r0, #1
 8009674:	d100      	bne.n	8009678 <_printf_float+0x2fc>
 8009676:	e6df      	b.n	8009438 <_printf_float+0xbc>
 8009678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967a:	3301      	adds	r3, #1
 800967c:	e7ea      	b.n	8009654 <_printf_float+0x2d8>
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	7fefffff 	.word	0x7fefffff
 8009684:	0800c200 	.word	0x0800c200
 8009688:	0800c204 	.word	0x0800c204
 800968c:	0800c208 	.word	0x0800c208
 8009690:	0800c20c 	.word	0x0800c20c
 8009694:	0800c210 	.word	0x0800c210
 8009698:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800969a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800969c:	920a      	str	r2, [sp, #40]	; 0x28
 800969e:	429a      	cmp	r2, r3
 80096a0:	dd00      	ble.n	80096a4 <_printf_float+0x328>
 80096a2:	930a      	str	r3, [sp, #40]	; 0x28
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc3d      	bgt.n	8009726 <_printf_float+0x3aa>
 80096aa:	2300      	movs	r3, #0
 80096ac:	930e      	str	r3, [sp, #56]	; 0x38
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	43db      	mvns	r3, r3
 80096b2:	17db      	asrs	r3, r3, #31
 80096b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80096b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80096bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096be:	4013      	ands	r3, r2
 80096c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096c6:	4293      	cmp	r3, r2
 80096c8:	dc36      	bgt.n	8009738 <_printf_float+0x3bc>
 80096ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ce:	429a      	cmp	r2, r3
 80096d0:	db40      	blt.n	8009754 <_printf_float+0x3d8>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	07db      	lsls	r3, r3, #31
 80096d6:	d43d      	bmi.n	8009754 <_printf_float+0x3d8>
 80096d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80096da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096de:	1af3      	subs	r3, r6, r3
 80096e0:	1ab6      	subs	r6, r6, r2
 80096e2:	429e      	cmp	r6, r3
 80096e4:	dd00      	ble.n	80096e8 <_printf_float+0x36c>
 80096e6:	001e      	movs	r6, r3
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	dc3c      	bgt.n	8009766 <_printf_float+0x3ea>
 80096ec:	2300      	movs	r3, #0
 80096ee:	930a      	str	r3, [sp, #40]	; 0x28
 80096f0:	43f3      	mvns	r3, r6
 80096f2:	17db      	asrs	r3, r3, #31
 80096f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80096f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096fe:	4032      	ands	r2, r6
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009704:	4293      	cmp	r3, r2
 8009706:	dc00      	bgt.n	800970a <_printf_float+0x38e>
 8009708:	e770      	b.n	80095ec <_printf_float+0x270>
 800970a:	0022      	movs	r2, r4
 800970c:	2301      	movs	r3, #1
 800970e:	0038      	movs	r0, r7
 8009710:	9908      	ldr	r1, [sp, #32]
 8009712:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009714:	321a      	adds	r2, #26
 8009716:	47a8      	blx	r5
 8009718:	3001      	adds	r0, #1
 800971a:	d100      	bne.n	800971e <_printf_float+0x3a2>
 800971c:	e68c      	b.n	8009438 <_printf_float+0xbc>
 800971e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009720:	3301      	adds	r3, #1
 8009722:	930a      	str	r3, [sp, #40]	; 0x28
 8009724:	e7e7      	b.n	80096f6 <_printf_float+0x37a>
 8009726:	002a      	movs	r2, r5
 8009728:	0038      	movs	r0, r7
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972c:	9908      	ldr	r1, [sp, #32]
 800972e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009730:	47b0      	blx	r6
 8009732:	3001      	adds	r0, #1
 8009734:	d1b9      	bne.n	80096aa <_printf_float+0x32e>
 8009736:	e67f      	b.n	8009438 <_printf_float+0xbc>
 8009738:	0022      	movs	r2, r4
 800973a:	2301      	movs	r3, #1
 800973c:	0038      	movs	r0, r7
 800973e:	9908      	ldr	r1, [sp, #32]
 8009740:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009742:	321a      	adds	r2, #26
 8009744:	47b0      	blx	r6
 8009746:	3001      	adds	r0, #1
 8009748:	d100      	bne.n	800974c <_printf_float+0x3d0>
 800974a:	e675      	b.n	8009438 <_printf_float+0xbc>
 800974c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800974e:	3301      	adds	r3, #1
 8009750:	930e      	str	r3, [sp, #56]	; 0x38
 8009752:	e7b0      	b.n	80096b6 <_printf_float+0x33a>
 8009754:	0038      	movs	r0, r7
 8009756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975a:	9908      	ldr	r1, [sp, #32]
 800975c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800975e:	47b0      	blx	r6
 8009760:	3001      	adds	r0, #1
 8009762:	d1b9      	bne.n	80096d8 <_printf_float+0x35c>
 8009764:	e668      	b.n	8009438 <_printf_float+0xbc>
 8009766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009768:	0038      	movs	r0, r7
 800976a:	18ea      	adds	r2, r5, r3
 800976c:	9908      	ldr	r1, [sp, #32]
 800976e:	0033      	movs	r3, r6
 8009770:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009772:	47a8      	blx	r5
 8009774:	3001      	adds	r0, #1
 8009776:	d1b9      	bne.n	80096ec <_printf_float+0x370>
 8009778:	e65e      	b.n	8009438 <_printf_float+0xbc>
 800977a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800977c:	2b01      	cmp	r3, #1
 800977e:	dc02      	bgt.n	8009786 <_printf_float+0x40a>
 8009780:	2301      	movs	r3, #1
 8009782:	421a      	tst	r2, r3
 8009784:	d03a      	beq.n	80097fc <_printf_float+0x480>
 8009786:	2301      	movs	r3, #1
 8009788:	002a      	movs	r2, r5
 800978a:	0038      	movs	r0, r7
 800978c:	9908      	ldr	r1, [sp, #32]
 800978e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009790:	47b0      	blx	r6
 8009792:	3001      	adds	r0, #1
 8009794:	d100      	bne.n	8009798 <_printf_float+0x41c>
 8009796:	e64f      	b.n	8009438 <_printf_float+0xbc>
 8009798:	0038      	movs	r0, r7
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979e:	9908      	ldr	r1, [sp, #32]
 80097a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097a2:	47b0      	blx	r6
 80097a4:	3001      	adds	r0, #1
 80097a6:	d100      	bne.n	80097aa <_printf_float+0x42e>
 80097a8:	e646      	b.n	8009438 <_printf_float+0xbc>
 80097aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80097ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80097ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097b0:	2200      	movs	r2, #0
 80097b2:	001e      	movs	r6, r3
 80097b4:	2300      	movs	r3, #0
 80097b6:	f7f6 fe49 	bl	800044c <__aeabi_dcmpeq>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d11c      	bne.n	80097f8 <_printf_float+0x47c>
 80097be:	0033      	movs	r3, r6
 80097c0:	1c6a      	adds	r2, r5, #1
 80097c2:	3b01      	subs	r3, #1
 80097c4:	0038      	movs	r0, r7
 80097c6:	9908      	ldr	r1, [sp, #32]
 80097c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097ca:	47a8      	blx	r5
 80097cc:	3001      	adds	r0, #1
 80097ce:	d10f      	bne.n	80097f0 <_printf_float+0x474>
 80097d0:	e632      	b.n	8009438 <_printf_float+0xbc>
 80097d2:	0022      	movs	r2, r4
 80097d4:	2301      	movs	r3, #1
 80097d6:	0038      	movs	r0, r7
 80097d8:	9908      	ldr	r1, [sp, #32]
 80097da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097dc:	321a      	adds	r2, #26
 80097de:	47b0      	blx	r6
 80097e0:	3001      	adds	r0, #1
 80097e2:	d100      	bne.n	80097e6 <_printf_float+0x46a>
 80097e4:	e628      	b.n	8009438 <_printf_float+0xbc>
 80097e6:	3501      	adds	r5, #1
 80097e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097ea:	3b01      	subs	r3, #1
 80097ec:	42ab      	cmp	r3, r5
 80097ee:	dcf0      	bgt.n	80097d2 <_printf_float+0x456>
 80097f0:	0022      	movs	r2, r4
 80097f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f4:	3250      	adds	r2, #80	; 0x50
 80097f6:	e6c8      	b.n	800958a <_printf_float+0x20e>
 80097f8:	2500      	movs	r5, #0
 80097fa:	e7f5      	b.n	80097e8 <_printf_float+0x46c>
 80097fc:	002a      	movs	r2, r5
 80097fe:	e7e1      	b.n	80097c4 <_printf_float+0x448>
 8009800:	0022      	movs	r2, r4
 8009802:	2301      	movs	r3, #1
 8009804:	0038      	movs	r0, r7
 8009806:	9908      	ldr	r1, [sp, #32]
 8009808:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800980a:	3219      	adds	r2, #25
 800980c:	47b0      	blx	r6
 800980e:	3001      	adds	r0, #1
 8009810:	d100      	bne.n	8009814 <_printf_float+0x498>
 8009812:	e611      	b.n	8009438 <_printf_float+0xbc>
 8009814:	3501      	adds	r5, #1
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	42ab      	cmp	r3, r5
 800981e:	dcef      	bgt.n	8009800 <_printf_float+0x484>
 8009820:	e6e8      	b.n	80095f4 <_printf_float+0x278>
 8009822:	2500      	movs	r5, #0
 8009824:	e7f7      	b.n	8009816 <_printf_float+0x49a>
 8009826:	46c0      	nop			; (mov r8, r8)

08009828 <_printf_common>:
 8009828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982a:	0016      	movs	r6, r2
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	688a      	ldr	r2, [r1, #8]
 8009830:	690b      	ldr	r3, [r1, #16]
 8009832:	000c      	movs	r4, r1
 8009834:	9000      	str	r0, [sp, #0]
 8009836:	4293      	cmp	r3, r2
 8009838:	da00      	bge.n	800983c <_printf_common+0x14>
 800983a:	0013      	movs	r3, r2
 800983c:	0022      	movs	r2, r4
 800983e:	6033      	str	r3, [r6, #0]
 8009840:	3243      	adds	r2, #67	; 0x43
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	2a00      	cmp	r2, #0
 8009846:	d001      	beq.n	800984c <_printf_common+0x24>
 8009848:	3301      	adds	r3, #1
 800984a:	6033      	str	r3, [r6, #0]
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	069b      	lsls	r3, r3, #26
 8009850:	d502      	bpl.n	8009858 <_printf_common+0x30>
 8009852:	6833      	ldr	r3, [r6, #0]
 8009854:	3302      	adds	r3, #2
 8009856:	6033      	str	r3, [r6, #0]
 8009858:	6822      	ldr	r2, [r4, #0]
 800985a:	2306      	movs	r3, #6
 800985c:	0015      	movs	r5, r2
 800985e:	401d      	ands	r5, r3
 8009860:	421a      	tst	r2, r3
 8009862:	d027      	beq.n	80098b4 <_printf_common+0x8c>
 8009864:	0023      	movs	r3, r4
 8009866:	3343      	adds	r3, #67	; 0x43
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	1e5a      	subs	r2, r3, #1
 800986c:	4193      	sbcs	r3, r2
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	0692      	lsls	r2, r2, #26
 8009872:	d430      	bmi.n	80098d6 <_printf_common+0xae>
 8009874:	0022      	movs	r2, r4
 8009876:	9901      	ldr	r1, [sp, #4]
 8009878:	9800      	ldr	r0, [sp, #0]
 800987a:	9d08      	ldr	r5, [sp, #32]
 800987c:	3243      	adds	r2, #67	; 0x43
 800987e:	47a8      	blx	r5
 8009880:	3001      	adds	r0, #1
 8009882:	d025      	beq.n	80098d0 <_printf_common+0xa8>
 8009884:	2206      	movs	r2, #6
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	2500      	movs	r5, #0
 800988a:	4013      	ands	r3, r2
 800988c:	2b04      	cmp	r3, #4
 800988e:	d105      	bne.n	800989c <_printf_common+0x74>
 8009890:	6833      	ldr	r3, [r6, #0]
 8009892:	68e5      	ldr	r5, [r4, #12]
 8009894:	1aed      	subs	r5, r5, r3
 8009896:	43eb      	mvns	r3, r5
 8009898:	17db      	asrs	r3, r3, #31
 800989a:	401d      	ands	r5, r3
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	6922      	ldr	r2, [r4, #16]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	dd01      	ble.n	80098a8 <_printf_common+0x80>
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	18ed      	adds	r5, r5, r3
 80098a8:	2600      	movs	r6, #0
 80098aa:	42b5      	cmp	r5, r6
 80098ac:	d120      	bne.n	80098f0 <_printf_common+0xc8>
 80098ae:	2000      	movs	r0, #0
 80098b0:	e010      	b.n	80098d4 <_printf_common+0xac>
 80098b2:	3501      	adds	r5, #1
 80098b4:	68e3      	ldr	r3, [r4, #12]
 80098b6:	6832      	ldr	r2, [r6, #0]
 80098b8:	1a9b      	subs	r3, r3, r2
 80098ba:	42ab      	cmp	r3, r5
 80098bc:	ddd2      	ble.n	8009864 <_printf_common+0x3c>
 80098be:	0022      	movs	r2, r4
 80098c0:	2301      	movs	r3, #1
 80098c2:	9901      	ldr	r1, [sp, #4]
 80098c4:	9800      	ldr	r0, [sp, #0]
 80098c6:	9f08      	ldr	r7, [sp, #32]
 80098c8:	3219      	adds	r2, #25
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	d1f0      	bne.n	80098b2 <_printf_common+0x8a>
 80098d0:	2001      	movs	r0, #1
 80098d2:	4240      	negs	r0, r0
 80098d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098d6:	2030      	movs	r0, #48	; 0x30
 80098d8:	18e1      	adds	r1, r4, r3
 80098da:	3143      	adds	r1, #67	; 0x43
 80098dc:	7008      	strb	r0, [r1, #0]
 80098de:	0021      	movs	r1, r4
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	3145      	adds	r1, #69	; 0x45
 80098e4:	7809      	ldrb	r1, [r1, #0]
 80098e6:	18a2      	adds	r2, r4, r2
 80098e8:	3243      	adds	r2, #67	; 0x43
 80098ea:	3302      	adds	r3, #2
 80098ec:	7011      	strb	r1, [r2, #0]
 80098ee:	e7c1      	b.n	8009874 <_printf_common+0x4c>
 80098f0:	0022      	movs	r2, r4
 80098f2:	2301      	movs	r3, #1
 80098f4:	9901      	ldr	r1, [sp, #4]
 80098f6:	9800      	ldr	r0, [sp, #0]
 80098f8:	9f08      	ldr	r7, [sp, #32]
 80098fa:	321a      	adds	r2, #26
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d0e6      	beq.n	80098d0 <_printf_common+0xa8>
 8009902:	3601      	adds	r6, #1
 8009904:	e7d1      	b.n	80098aa <_printf_common+0x82>
	...

08009908 <_printf_i>:
 8009908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990a:	b08b      	sub	sp, #44	; 0x2c
 800990c:	9206      	str	r2, [sp, #24]
 800990e:	000a      	movs	r2, r1
 8009910:	3243      	adds	r2, #67	; 0x43
 8009912:	9307      	str	r3, [sp, #28]
 8009914:	9005      	str	r0, [sp, #20]
 8009916:	9204      	str	r2, [sp, #16]
 8009918:	7e0a      	ldrb	r2, [r1, #24]
 800991a:	000c      	movs	r4, r1
 800991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991e:	2a78      	cmp	r2, #120	; 0x78
 8009920:	d809      	bhi.n	8009936 <_printf_i+0x2e>
 8009922:	2a62      	cmp	r2, #98	; 0x62
 8009924:	d80b      	bhi.n	800993e <_printf_i+0x36>
 8009926:	2a00      	cmp	r2, #0
 8009928:	d100      	bne.n	800992c <_printf_i+0x24>
 800992a:	e0be      	b.n	8009aaa <_printf_i+0x1a2>
 800992c:	497c      	ldr	r1, [pc, #496]	; (8009b20 <_printf_i+0x218>)
 800992e:	9103      	str	r1, [sp, #12]
 8009930:	2a58      	cmp	r2, #88	; 0x58
 8009932:	d100      	bne.n	8009936 <_printf_i+0x2e>
 8009934:	e093      	b.n	8009a5e <_printf_i+0x156>
 8009936:	0026      	movs	r6, r4
 8009938:	3642      	adds	r6, #66	; 0x42
 800993a:	7032      	strb	r2, [r6, #0]
 800993c:	e022      	b.n	8009984 <_printf_i+0x7c>
 800993e:	0010      	movs	r0, r2
 8009940:	3863      	subs	r0, #99	; 0x63
 8009942:	2815      	cmp	r0, #21
 8009944:	d8f7      	bhi.n	8009936 <_printf_i+0x2e>
 8009946:	f7f6 fbf1 	bl	800012c <__gnu_thumb1_case_shi>
 800994a:	0016      	.short	0x0016
 800994c:	fff6001f 	.word	0xfff6001f
 8009950:	fff6fff6 	.word	0xfff6fff6
 8009954:	001ffff6 	.word	0x001ffff6
 8009958:	fff6fff6 	.word	0xfff6fff6
 800995c:	fff6fff6 	.word	0xfff6fff6
 8009960:	003600a3 	.word	0x003600a3
 8009964:	fff60083 	.word	0xfff60083
 8009968:	00b4fff6 	.word	0x00b4fff6
 800996c:	0036fff6 	.word	0x0036fff6
 8009970:	fff6fff6 	.word	0xfff6fff6
 8009974:	0087      	.short	0x0087
 8009976:	0026      	movs	r6, r4
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	3642      	adds	r6, #66	; 0x42
 800997c:	1d11      	adds	r1, r2, #4
 800997e:	6019      	str	r1, [r3, #0]
 8009980:	6813      	ldr	r3, [r2, #0]
 8009982:	7033      	strb	r3, [r6, #0]
 8009984:	2301      	movs	r3, #1
 8009986:	e0a2      	b.n	8009ace <_printf_i+0x1c6>
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	6809      	ldr	r1, [r1, #0]
 800998c:	1d02      	adds	r2, r0, #4
 800998e:	060d      	lsls	r5, r1, #24
 8009990:	d50b      	bpl.n	80099aa <_printf_i+0xa2>
 8009992:	6805      	ldr	r5, [r0, #0]
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	2d00      	cmp	r5, #0
 8009998:	da03      	bge.n	80099a2 <_printf_i+0x9a>
 800999a:	232d      	movs	r3, #45	; 0x2d
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	426d      	negs	r5, r5
 80099a0:	7013      	strb	r3, [r2, #0]
 80099a2:	4b5f      	ldr	r3, [pc, #380]	; (8009b20 <_printf_i+0x218>)
 80099a4:	270a      	movs	r7, #10
 80099a6:	9303      	str	r3, [sp, #12]
 80099a8:	e01b      	b.n	80099e2 <_printf_i+0xda>
 80099aa:	6805      	ldr	r5, [r0, #0]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	0649      	lsls	r1, r1, #25
 80099b0:	d5f1      	bpl.n	8009996 <_printf_i+0x8e>
 80099b2:	b22d      	sxth	r5, r5
 80099b4:	e7ef      	b.n	8009996 <_printf_i+0x8e>
 80099b6:	680d      	ldr	r5, [r1, #0]
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	1d08      	adds	r0, r1, #4
 80099bc:	6018      	str	r0, [r3, #0]
 80099be:	062e      	lsls	r6, r5, #24
 80099c0:	d501      	bpl.n	80099c6 <_printf_i+0xbe>
 80099c2:	680d      	ldr	r5, [r1, #0]
 80099c4:	e003      	b.n	80099ce <_printf_i+0xc6>
 80099c6:	066d      	lsls	r5, r5, #25
 80099c8:	d5fb      	bpl.n	80099c2 <_printf_i+0xba>
 80099ca:	680d      	ldr	r5, [r1, #0]
 80099cc:	b2ad      	uxth	r5, r5
 80099ce:	4b54      	ldr	r3, [pc, #336]	; (8009b20 <_printf_i+0x218>)
 80099d0:	2708      	movs	r7, #8
 80099d2:	9303      	str	r3, [sp, #12]
 80099d4:	2a6f      	cmp	r2, #111	; 0x6f
 80099d6:	d000      	beq.n	80099da <_printf_i+0xd2>
 80099d8:	3702      	adds	r7, #2
 80099da:	0023      	movs	r3, r4
 80099dc:	2200      	movs	r2, #0
 80099de:	3343      	adds	r3, #67	; 0x43
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	6863      	ldr	r3, [r4, #4]
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	db03      	blt.n	80099f2 <_printf_i+0xea>
 80099ea:	2104      	movs	r1, #4
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	438a      	bics	r2, r1
 80099f0:	6022      	str	r2, [r4, #0]
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	d102      	bne.n	80099fc <_printf_i+0xf4>
 80099f6:	9e04      	ldr	r6, [sp, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00c      	beq.n	8009a16 <_printf_i+0x10e>
 80099fc:	9e04      	ldr	r6, [sp, #16]
 80099fe:	0028      	movs	r0, r5
 8009a00:	0039      	movs	r1, r7
 8009a02:	f7f6 fc23 	bl	800024c <__aeabi_uidivmod>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	3e01      	subs	r6, #1
 8009a0a:	5c5b      	ldrb	r3, [r3, r1]
 8009a0c:	7033      	strb	r3, [r6, #0]
 8009a0e:	002b      	movs	r3, r5
 8009a10:	0005      	movs	r5, r0
 8009a12:	429f      	cmp	r7, r3
 8009a14:	d9f3      	bls.n	80099fe <_printf_i+0xf6>
 8009a16:	2f08      	cmp	r7, #8
 8009a18:	d109      	bne.n	8009a2e <_printf_i+0x126>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d506      	bpl.n	8009a2e <_printf_i+0x126>
 8009a20:	6862      	ldr	r2, [r4, #4]
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	dc02      	bgt.n	8009a2e <_printf_i+0x126>
 8009a28:	2330      	movs	r3, #48	; 0x30
 8009a2a:	3e01      	subs	r6, #1
 8009a2c:	7033      	strb	r3, [r6, #0]
 8009a2e:	9b04      	ldr	r3, [sp, #16]
 8009a30:	1b9b      	subs	r3, r3, r6
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	9b07      	ldr	r3, [sp, #28]
 8009a36:	0021      	movs	r1, r4
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	9805      	ldr	r0, [sp, #20]
 8009a3c:	9b06      	ldr	r3, [sp, #24]
 8009a3e:	aa09      	add	r2, sp, #36	; 0x24
 8009a40:	f7ff fef2 	bl	8009828 <_printf_common>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d147      	bne.n	8009ad8 <_printf_i+0x1d0>
 8009a48:	2001      	movs	r0, #1
 8009a4a:	4240      	negs	r0, r0
 8009a4c:	b00b      	add	sp, #44	; 0x2c
 8009a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a50:	2220      	movs	r2, #32
 8009a52:	6809      	ldr	r1, [r1, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	2278      	movs	r2, #120	; 0x78
 8009a5a:	4932      	ldr	r1, [pc, #200]	; (8009b24 <_printf_i+0x21c>)
 8009a5c:	9103      	str	r1, [sp, #12]
 8009a5e:	0021      	movs	r1, r4
 8009a60:	3145      	adds	r1, #69	; 0x45
 8009a62:	700a      	strb	r2, [r1, #0]
 8009a64:	6819      	ldr	r1, [r3, #0]
 8009a66:	6822      	ldr	r2, [r4, #0]
 8009a68:	c920      	ldmia	r1!, {r5}
 8009a6a:	0610      	lsls	r0, r2, #24
 8009a6c:	d402      	bmi.n	8009a74 <_printf_i+0x16c>
 8009a6e:	0650      	lsls	r0, r2, #25
 8009a70:	d500      	bpl.n	8009a74 <_printf_i+0x16c>
 8009a72:	b2ad      	uxth	r5, r5
 8009a74:	6019      	str	r1, [r3, #0]
 8009a76:	07d3      	lsls	r3, r2, #31
 8009a78:	d502      	bpl.n	8009a80 <_printf_i+0x178>
 8009a7a:	2320      	movs	r3, #32
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	2710      	movs	r7, #16
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	d1a9      	bne.n	80099da <_printf_i+0xd2>
 8009a86:	2220      	movs	r2, #32
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	4393      	bics	r3, r2
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	e7a4      	b.n	80099da <_printf_i+0xd2>
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	680d      	ldr	r5, [r1, #0]
 8009a94:	1d10      	adds	r0, r2, #4
 8009a96:	6949      	ldr	r1, [r1, #20]
 8009a98:	6018      	str	r0, [r3, #0]
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	062e      	lsls	r6, r5, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0x19c>
 8009aa0:	6019      	str	r1, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <_printf_i+0x1a2>
 8009aa4:	066d      	lsls	r5, r5, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0x198>
 8009aa8:	8019      	strh	r1, [r3, #0]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9e04      	ldr	r6, [sp, #16]
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	e7c0      	b.n	8009a34 <_printf_i+0x12c>
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	1d11      	adds	r1, r2, #4
 8009ab6:	6019      	str	r1, [r3, #0]
 8009ab8:	6816      	ldr	r6, [r2, #0]
 8009aba:	2100      	movs	r1, #0
 8009abc:	0030      	movs	r0, r6
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	f000 f9e9 	bl	8009e96 <memchr>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d001      	beq.n	8009acc <_printf_i+0x1c4>
 8009ac8:	1b80      	subs	r0, r0, r6
 8009aca:	6060      	str	r0, [r4, #4]
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	7013      	strb	r3, [r2, #0]
 8009ad6:	e7ad      	b.n	8009a34 <_printf_i+0x12c>
 8009ad8:	0032      	movs	r2, r6
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	9906      	ldr	r1, [sp, #24]
 8009ade:	9805      	ldr	r0, [sp, #20]
 8009ae0:	9d07      	ldr	r5, [sp, #28]
 8009ae2:	47a8      	blx	r5
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d0af      	beq.n	8009a48 <_printf_i+0x140>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	079b      	lsls	r3, r3, #30
 8009aec:	d415      	bmi.n	8009b1a <_printf_i+0x212>
 8009aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af0:	68e0      	ldr	r0, [r4, #12]
 8009af2:	4298      	cmp	r0, r3
 8009af4:	daaa      	bge.n	8009a4c <_printf_i+0x144>
 8009af6:	0018      	movs	r0, r3
 8009af8:	e7a8      	b.n	8009a4c <_printf_i+0x144>
 8009afa:	0022      	movs	r2, r4
 8009afc:	2301      	movs	r3, #1
 8009afe:	9906      	ldr	r1, [sp, #24]
 8009b00:	9805      	ldr	r0, [sp, #20]
 8009b02:	9e07      	ldr	r6, [sp, #28]
 8009b04:	3219      	adds	r2, #25
 8009b06:	47b0      	blx	r6
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d09d      	beq.n	8009a48 <_printf_i+0x140>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	dcf0      	bgt.n	8009afa <_printf_i+0x1f2>
 8009b18:	e7e9      	b.n	8009aee <_printf_i+0x1e6>
 8009b1a:	2500      	movs	r5, #0
 8009b1c:	e7f7      	b.n	8009b0e <_printf_i+0x206>
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	0800c212 	.word	0x0800c212
 8009b24:	0800c223 	.word	0x0800c223

08009b28 <std>:
 8009b28:	2300      	movs	r3, #0
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	0004      	movs	r4, r0
 8009b2e:	6003      	str	r3, [r0, #0]
 8009b30:	6043      	str	r3, [r0, #4]
 8009b32:	6083      	str	r3, [r0, #8]
 8009b34:	8181      	strh	r1, [r0, #12]
 8009b36:	6643      	str	r3, [r0, #100]	; 0x64
 8009b38:	81c2      	strh	r2, [r0, #14]
 8009b3a:	6103      	str	r3, [r0, #16]
 8009b3c:	6143      	str	r3, [r0, #20]
 8009b3e:	6183      	str	r3, [r0, #24]
 8009b40:	0019      	movs	r1, r3
 8009b42:	2208      	movs	r2, #8
 8009b44:	305c      	adds	r0, #92	; 0x5c
 8009b46:	f000 f91f 	bl	8009d88 <memset>
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <std+0x50>)
 8009b4c:	6224      	str	r4, [r4, #32]
 8009b4e:	6263      	str	r3, [r4, #36]	; 0x24
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <std+0x54>)
 8009b52:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b54:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <std+0x58>)
 8009b56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b58:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <std+0x5c>)
 8009b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <std+0x60>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d005      	beq.n	8009b6e <std+0x46>
 8009b62:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <std+0x64>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d002      	beq.n	8009b6e <std+0x46>
 8009b68:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <std+0x68>)
 8009b6a:	429c      	cmp	r4, r3
 8009b6c:	d103      	bne.n	8009b76 <std+0x4e>
 8009b6e:	0020      	movs	r0, r4
 8009b70:	3058      	adds	r0, #88	; 0x58
 8009b72:	f000 f98d 	bl	8009e90 <__retarget_lock_init_recursive>
 8009b76:	bd10      	pop	{r4, pc}
 8009b78:	08009cf1 	.word	0x08009cf1
 8009b7c:	08009d19 	.word	0x08009d19
 8009b80:	08009d51 	.word	0x08009d51
 8009b84:	08009d7d 	.word	0x08009d7d
 8009b88:	200004ec 	.word	0x200004ec
 8009b8c:	20000554 	.word	0x20000554
 8009b90:	200005bc 	.word	0x200005bc

08009b94 <stdio_exit_handler>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	4a03      	ldr	r2, [pc, #12]	; (8009ba4 <stdio_exit_handler+0x10>)
 8009b98:	4903      	ldr	r1, [pc, #12]	; (8009ba8 <stdio_exit_handler+0x14>)
 8009b9a:	4804      	ldr	r0, [pc, #16]	; (8009bac <stdio_exit_handler+0x18>)
 8009b9c:	f000 f86c 	bl	8009c78 <_fwalk_sglue>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	2000000c 	.word	0x2000000c
 8009ba8:	0800b905 	.word	0x0800b905
 8009bac:	20000018 	.word	0x20000018

08009bb0 <cleanup_stdio>:
 8009bb0:	6841      	ldr	r1, [r0, #4]
 8009bb2:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <cleanup_stdio+0x30>)
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	0004      	movs	r4, r0
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	d001      	beq.n	8009bc0 <cleanup_stdio+0x10>
 8009bbc:	f001 fea2 	bl	800b904 <_fflush_r>
 8009bc0:	68a1      	ldr	r1, [r4, #8]
 8009bc2:	4b08      	ldr	r3, [pc, #32]	; (8009be4 <cleanup_stdio+0x34>)
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <cleanup_stdio+0x1e>
 8009bc8:	0020      	movs	r0, r4
 8009bca:	f001 fe9b 	bl	800b904 <_fflush_r>
 8009bce:	68e1      	ldr	r1, [r4, #12]
 8009bd0:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <cleanup_stdio+0x38>)
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	d002      	beq.n	8009bdc <cleanup_stdio+0x2c>
 8009bd6:	0020      	movs	r0, r4
 8009bd8:	f001 fe94 	bl	800b904 <_fflush_r>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	200004ec 	.word	0x200004ec
 8009be4:	20000554 	.word	0x20000554
 8009be8:	200005bc 	.word	0x200005bc

08009bec <global_stdio_init.part.0>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <global_stdio_init.part.0+0x28>)
 8009bf0:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <global_stdio_init.part.0+0x2c>)
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4809      	ldr	r0, [pc, #36]	; (8009c1c <global_stdio_init.part.0+0x30>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f7ff ff95 	bl	8009b28 <std>
 8009bfe:	2201      	movs	r2, #1
 8009c00:	2109      	movs	r1, #9
 8009c02:	4807      	ldr	r0, [pc, #28]	; (8009c20 <global_stdio_init.part.0+0x34>)
 8009c04:	f7ff ff90 	bl	8009b28 <std>
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2112      	movs	r1, #18
 8009c0c:	4805      	ldr	r0, [pc, #20]	; (8009c24 <global_stdio_init.part.0+0x38>)
 8009c0e:	f7ff ff8b 	bl	8009b28 <std>
 8009c12:	bd10      	pop	{r4, pc}
 8009c14:	20000624 	.word	0x20000624
 8009c18:	08009b95 	.word	0x08009b95
 8009c1c:	200004ec 	.word	0x200004ec
 8009c20:	20000554 	.word	0x20000554
 8009c24:	200005bc 	.word	0x200005bc

08009c28 <__sfp_lock_acquire>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4802      	ldr	r0, [pc, #8]	; (8009c34 <__sfp_lock_acquire+0xc>)
 8009c2c:	f000 f931 	bl	8009e92 <__retarget_lock_acquire_recursive>
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	2000062d 	.word	0x2000062d

08009c38 <__sfp_lock_release>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	4802      	ldr	r0, [pc, #8]	; (8009c44 <__sfp_lock_release+0xc>)
 8009c3c:	f000 f92a 	bl	8009e94 <__retarget_lock_release_recursive>
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	2000062d 	.word	0x2000062d

08009c48 <__sinit>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	0004      	movs	r4, r0
 8009c4c:	f7ff ffec 	bl	8009c28 <__sfp_lock_acquire>
 8009c50:	6a23      	ldr	r3, [r4, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <__sinit+0x14>
 8009c56:	f7ff ffef 	bl	8009c38 <__sfp_lock_release>
 8009c5a:	bd10      	pop	{r4, pc}
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <__sinit+0x28>)
 8009c5e:	6223      	str	r3, [r4, #32]
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <__sinit+0x2c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f6      	bne.n	8009c56 <__sinit+0xe>
 8009c68:	f7ff ffc0 	bl	8009bec <global_stdio_init.part.0>
 8009c6c:	e7f3      	b.n	8009c56 <__sinit+0xe>
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	08009bb1 	.word	0x08009bb1
 8009c74:	20000624 	.word	0x20000624

08009c78 <_fwalk_sglue>:
 8009c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c7a:	0014      	movs	r4, r2
 8009c7c:	2600      	movs	r6, #0
 8009c7e:	9000      	str	r0, [sp, #0]
 8009c80:	9101      	str	r1, [sp, #4]
 8009c82:	68a5      	ldr	r5, [r4, #8]
 8009c84:	6867      	ldr	r7, [r4, #4]
 8009c86:	3f01      	subs	r7, #1
 8009c88:	d504      	bpl.n	8009c94 <_fwalk_sglue+0x1c>
 8009c8a:	6824      	ldr	r4, [r4, #0]
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	d1f8      	bne.n	8009c82 <_fwalk_sglue+0xa>
 8009c90:	0030      	movs	r0, r6
 8009c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c94:	89ab      	ldrh	r3, [r5, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d908      	bls.n	8009cac <_fwalk_sglue+0x34>
 8009c9a:	220e      	movs	r2, #14
 8009c9c:	5eab      	ldrsh	r3, [r5, r2]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	d004      	beq.n	8009cac <_fwalk_sglue+0x34>
 8009ca2:	0029      	movs	r1, r5
 8009ca4:	9800      	ldr	r0, [sp, #0]
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4306      	orrs	r6, r0
 8009cac:	3568      	adds	r5, #104	; 0x68
 8009cae:	e7ea      	b.n	8009c86 <_fwalk_sglue+0xe>

08009cb0 <siprintf>:
 8009cb0:	b40e      	push	{r1, r2, r3}
 8009cb2:	b500      	push	{lr}
 8009cb4:	490b      	ldr	r1, [pc, #44]	; (8009ce4 <siprintf+0x34>)
 8009cb6:	b09c      	sub	sp, #112	; 0x70
 8009cb8:	ab1d      	add	r3, sp, #116	; 0x74
 8009cba:	9002      	str	r0, [sp, #8]
 8009cbc:	9006      	str	r0, [sp, #24]
 8009cbe:	9107      	str	r1, [sp, #28]
 8009cc0:	9104      	str	r1, [sp, #16]
 8009cc2:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <siprintf+0x38>)
 8009cc4:	4909      	ldr	r1, [pc, #36]	; (8009cec <siprintf+0x3c>)
 8009cc6:	cb04      	ldmia	r3!, {r2}
 8009cc8:	9105      	str	r1, [sp, #20]
 8009cca:	6800      	ldr	r0, [r0, #0]
 8009ccc:	a902      	add	r1, sp, #8
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	f001 fc8e 	bl	800b5f0 <_svfiprintf_r>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	9b02      	ldr	r3, [sp, #8]
 8009cd8:	701a      	strb	r2, [r3, #0]
 8009cda:	b01c      	add	sp, #112	; 0x70
 8009cdc:	bc08      	pop	{r3}
 8009cde:	b003      	add	sp, #12
 8009ce0:	4718      	bx	r3
 8009ce2:	46c0      	nop			; (mov r8, r8)
 8009ce4:	7fffffff 	.word	0x7fffffff
 8009ce8:	20000064 	.word	0x20000064
 8009cec:	ffff0208 	.word	0xffff0208

08009cf0 <__sread>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	000c      	movs	r4, r1
 8009cf4:	250e      	movs	r5, #14
 8009cf6:	5f49      	ldrsh	r1, [r1, r5]
 8009cf8:	f000 f878 	bl	8009dec <_read_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	db03      	blt.n	8009d08 <__sread+0x18>
 8009d00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d02:	181b      	adds	r3, r3, r0
 8009d04:	6563      	str	r3, [r4, #84]	; 0x54
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	4a02      	ldr	r2, [pc, #8]	; (8009d14 <__sread+0x24>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	e7f9      	b.n	8009d06 <__sread+0x16>
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	ffffefff 	.word	0xffffefff

08009d18 <__swrite>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	001f      	movs	r7, r3
 8009d1c:	898b      	ldrh	r3, [r1, #12]
 8009d1e:	0005      	movs	r5, r0
 8009d20:	000c      	movs	r4, r1
 8009d22:	0016      	movs	r6, r2
 8009d24:	05db      	lsls	r3, r3, #23
 8009d26:	d505      	bpl.n	8009d34 <__swrite+0x1c>
 8009d28:	230e      	movs	r3, #14
 8009d2a:	5ec9      	ldrsh	r1, [r1, r3]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2302      	movs	r3, #2
 8009d30:	f000 f848 	bl	8009dc4 <_lseek_r>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	4a05      	ldr	r2, [pc, #20]	; (8009d4c <__swrite+0x34>)
 8009d38:	0028      	movs	r0, r5
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	0032      	movs	r2, r6
 8009d40:	230e      	movs	r3, #14
 8009d42:	5ee1      	ldrsh	r1, [r4, r3]
 8009d44:	003b      	movs	r3, r7
 8009d46:	f000 f865 	bl	8009e14 <_write_r>
 8009d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4c:	ffffefff 	.word	0xffffefff

08009d50 <__sseek>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	000c      	movs	r4, r1
 8009d54:	250e      	movs	r5, #14
 8009d56:	5f49      	ldrsh	r1, [r1, r5]
 8009d58:	f000 f834 	bl	8009dc4 <_lseek_r>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	1c42      	adds	r2, r0, #1
 8009d60:	d103      	bne.n	8009d6a <__sseek+0x1a>
 8009d62:	4a05      	ldr	r2, [pc, #20]	; (8009d78 <__sseek+0x28>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	bd70      	pop	{r4, r5, r6, pc}
 8009d6a:	2280      	movs	r2, #128	; 0x80
 8009d6c:	0152      	lsls	r2, r2, #5
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	6560      	str	r0, [r4, #84]	; 0x54
 8009d74:	e7f8      	b.n	8009d68 <__sseek+0x18>
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	ffffefff 	.word	0xffffefff

08009d7c <__sclose>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	230e      	movs	r3, #14
 8009d80:	5ec9      	ldrsh	r1, [r1, r3]
 8009d82:	f000 f80d 	bl	8009da0 <_close_r>
 8009d86:	bd10      	pop	{r4, pc}

08009d88 <memset>:
 8009d88:	0003      	movs	r3, r0
 8009d8a:	1882      	adds	r2, r0, r2
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d100      	bne.n	8009d92 <memset+0xa>
 8009d90:	4770      	bx	lr
 8009d92:	7019      	strb	r1, [r3, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	e7f9      	b.n	8009d8c <memset+0x4>

08009d98 <_localeconv_r>:
 8009d98:	4800      	ldr	r0, [pc, #0]	; (8009d9c <_localeconv_r+0x4>)
 8009d9a:	4770      	bx	lr
 8009d9c:	20000158 	.word	0x20000158

08009da0 <_close_r>:
 8009da0:	2300      	movs	r3, #0
 8009da2:	b570      	push	{r4, r5, r6, lr}
 8009da4:	4d06      	ldr	r5, [pc, #24]	; (8009dc0 <_close_r+0x20>)
 8009da6:	0004      	movs	r4, r0
 8009da8:	0008      	movs	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7fa f849 	bl	8003e42 <_close>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d103      	bne.n	8009dbc <_close_r+0x1c>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d000      	beq.n	8009dbc <_close_r+0x1c>
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	20000628 	.word	0x20000628

08009dc4 <_lseek_r>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	0004      	movs	r4, r0
 8009dc8:	0008      	movs	r0, r1
 8009dca:	0011      	movs	r1, r2
 8009dcc:	001a      	movs	r2, r3
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4d05      	ldr	r5, [pc, #20]	; (8009de8 <_lseek_r+0x24>)
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f7fa f856 	bl	8003e84 <_lseek>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d103      	bne.n	8009de4 <_lseek_r+0x20>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d000      	beq.n	8009de4 <_lseek_r+0x20>
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	20000628 	.word	0x20000628

08009dec <_read_r>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	0004      	movs	r4, r0
 8009df0:	0008      	movs	r0, r1
 8009df2:	0011      	movs	r1, r2
 8009df4:	001a      	movs	r2, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	4d05      	ldr	r5, [pc, #20]	; (8009e10 <_read_r+0x24>)
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f9 ffe8 	bl	8003dd0 <_read>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d103      	bne.n	8009e0c <_read_r+0x20>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d000      	beq.n	8009e0c <_read_r+0x20>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd70      	pop	{r4, r5, r6, pc}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	20000628 	.word	0x20000628

08009e14 <_write_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	0004      	movs	r4, r0
 8009e18:	0008      	movs	r0, r1
 8009e1a:	0011      	movs	r1, r2
 8009e1c:	001a      	movs	r2, r3
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4d05      	ldr	r5, [pc, #20]	; (8009e38 <_write_r+0x24>)
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	f7f9 fff1 	bl	8003e0a <_write>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d103      	bne.n	8009e34 <_write_r+0x20>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d000      	beq.n	8009e34 <_write_r+0x20>
 8009e32:	6023      	str	r3, [r4, #0]
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	20000628 	.word	0x20000628

08009e3c <__errno>:
 8009e3c:	4b01      	ldr	r3, [pc, #4]	; (8009e44 <__errno+0x8>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	4770      	bx	lr
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	20000064 	.word	0x20000064

08009e48 <__libc_init_array>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	2600      	movs	r6, #0
 8009e4c:	4c0c      	ldr	r4, [pc, #48]	; (8009e80 <__libc_init_array+0x38>)
 8009e4e:	4d0d      	ldr	r5, [pc, #52]	; (8009e84 <__libc_init_array+0x3c>)
 8009e50:	1b64      	subs	r4, r4, r5
 8009e52:	10a4      	asrs	r4, r4, #2
 8009e54:	42a6      	cmp	r6, r4
 8009e56:	d109      	bne.n	8009e6c <__libc_init_array+0x24>
 8009e58:	2600      	movs	r6, #0
 8009e5a:	f002 f923 	bl	800c0a4 <_init>
 8009e5e:	4c0a      	ldr	r4, [pc, #40]	; (8009e88 <__libc_init_array+0x40>)
 8009e60:	4d0a      	ldr	r5, [pc, #40]	; (8009e8c <__libc_init_array+0x44>)
 8009e62:	1b64      	subs	r4, r4, r5
 8009e64:	10a4      	asrs	r4, r4, #2
 8009e66:	42a6      	cmp	r6, r4
 8009e68:	d105      	bne.n	8009e76 <__libc_init_array+0x2e>
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	00b3      	lsls	r3, r6, #2
 8009e6e:	58eb      	ldr	r3, [r5, r3]
 8009e70:	4798      	blx	r3
 8009e72:	3601      	adds	r6, #1
 8009e74:	e7ee      	b.n	8009e54 <__libc_init_array+0xc>
 8009e76:	00b3      	lsls	r3, r6, #2
 8009e78:	58eb      	ldr	r3, [r5, r3]
 8009e7a:	4798      	blx	r3
 8009e7c:	3601      	adds	r6, #1
 8009e7e:	e7f2      	b.n	8009e66 <__libc_init_array+0x1e>
 8009e80:	0800c57c 	.word	0x0800c57c
 8009e84:	0800c57c 	.word	0x0800c57c
 8009e88:	0800c580 	.word	0x0800c580
 8009e8c:	0800c57c 	.word	0x0800c57c

08009e90 <__retarget_lock_init_recursive>:
 8009e90:	4770      	bx	lr

08009e92 <__retarget_lock_acquire_recursive>:
 8009e92:	4770      	bx	lr

08009e94 <__retarget_lock_release_recursive>:
 8009e94:	4770      	bx	lr

08009e96 <memchr>:
 8009e96:	b2c9      	uxtb	r1, r1
 8009e98:	1882      	adds	r2, r0, r2
 8009e9a:	4290      	cmp	r0, r2
 8009e9c:	d101      	bne.n	8009ea2 <memchr+0xc>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	4770      	bx	lr
 8009ea2:	7803      	ldrb	r3, [r0, #0]
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	d0fb      	beq.n	8009ea0 <memchr+0xa>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	e7f6      	b.n	8009e9a <memchr+0x4>

08009eac <quorem>:
 8009eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eae:	6902      	ldr	r2, [r0, #16]
 8009eb0:	690b      	ldr	r3, [r1, #16]
 8009eb2:	b089      	sub	sp, #36	; 0x24
 8009eb4:	0007      	movs	r7, r0
 8009eb6:	9104      	str	r1, [sp, #16]
 8009eb8:	2000      	movs	r0, #0
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	db69      	blt.n	8009f92 <quorem+0xe6>
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	009c      	lsls	r4, r3, #2
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	000b      	movs	r3, r1
 8009ec6:	3314      	adds	r3, #20
 8009ec8:	9306      	str	r3, [sp, #24]
 8009eca:	191b      	adds	r3, r3, r4
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	003b      	movs	r3, r7
 8009ed0:	3314      	adds	r3, #20
 8009ed2:	9303      	str	r3, [sp, #12]
 8009ed4:	191c      	adds	r4, r3, r4
 8009ed6:	9b05      	ldr	r3, [sp, #20]
 8009ed8:	6826      	ldr	r6, [r4, #0]
 8009eda:	681d      	ldr	r5, [r3, #0]
 8009edc:	0030      	movs	r0, r6
 8009ede:	3501      	adds	r5, #1
 8009ee0:	0029      	movs	r1, r5
 8009ee2:	f7f6 f92d 	bl	8000140 <__udivsi3>
 8009ee6:	9002      	str	r0, [sp, #8]
 8009ee8:	42ae      	cmp	r6, r5
 8009eea:	d329      	bcc.n	8009f40 <quorem+0x94>
 8009eec:	9b06      	ldr	r3, [sp, #24]
 8009eee:	2600      	movs	r6, #0
 8009ef0:	469c      	mov	ip, r3
 8009ef2:	9d03      	ldr	r5, [sp, #12]
 8009ef4:	9606      	str	r6, [sp, #24]
 8009ef6:	4662      	mov	r2, ip
 8009ef8:	ca08      	ldmia	r2!, {r3}
 8009efa:	6828      	ldr	r0, [r5, #0]
 8009efc:	4694      	mov	ip, r2
 8009efe:	9a02      	ldr	r2, [sp, #8]
 8009f00:	b299      	uxth	r1, r3
 8009f02:	4351      	muls	r1, r2
 8009f04:	0c1b      	lsrs	r3, r3, #16
 8009f06:	4353      	muls	r3, r2
 8009f08:	1989      	adds	r1, r1, r6
 8009f0a:	0c0a      	lsrs	r2, r1, #16
 8009f0c:	189b      	adds	r3, r3, r2
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	0c1e      	lsrs	r6, r3, #16
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	b282      	uxth	r2, r0
 8009f16:	18d2      	adds	r2, r2, r3
 8009f18:	466b      	mov	r3, sp
 8009f1a:	b289      	uxth	r1, r1
 8009f1c:	8b9b      	ldrh	r3, [r3, #28]
 8009f1e:	1a52      	subs	r2, r2, r1
 8009f20:	0c01      	lsrs	r1, r0, #16
 8009f22:	1ac9      	subs	r1, r1, r3
 8009f24:	1413      	asrs	r3, r2, #16
 8009f26:	18cb      	adds	r3, r1, r3
 8009f28:	1419      	asrs	r1, r3, #16
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	041b      	lsls	r3, r3, #16
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	c508      	stmia	r5!, {r3}
 8009f32:	9b05      	ldr	r3, [sp, #20]
 8009f34:	9106      	str	r1, [sp, #24]
 8009f36:	4563      	cmp	r3, ip
 8009f38:	d2dd      	bcs.n	8009ef6 <quorem+0x4a>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d030      	beq.n	8009fa2 <quorem+0xf6>
 8009f40:	0038      	movs	r0, r7
 8009f42:	9904      	ldr	r1, [sp, #16]
 8009f44:	f001 f9de 	bl	800b304 <__mcmp>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	db21      	blt.n	8009f90 <quorem+0xe4>
 8009f4c:	0038      	movs	r0, r7
 8009f4e:	2600      	movs	r6, #0
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	9c04      	ldr	r4, [sp, #16]
 8009f54:	3301      	adds	r3, #1
 8009f56:	9302      	str	r3, [sp, #8]
 8009f58:	3014      	adds	r0, #20
 8009f5a:	3414      	adds	r4, #20
 8009f5c:	6803      	ldr	r3, [r0, #0]
 8009f5e:	cc02      	ldmia	r4!, {r1}
 8009f60:	b29d      	uxth	r5, r3
 8009f62:	19ad      	adds	r5, r5, r6
 8009f64:	b28a      	uxth	r2, r1
 8009f66:	1aaa      	subs	r2, r5, r2
 8009f68:	0c09      	lsrs	r1, r1, #16
 8009f6a:	0c1b      	lsrs	r3, r3, #16
 8009f6c:	1a5b      	subs	r3, r3, r1
 8009f6e:	1411      	asrs	r1, r2, #16
 8009f70:	185b      	adds	r3, r3, r1
 8009f72:	141e      	asrs	r6, r3, #16
 8009f74:	b292      	uxth	r2, r2
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	c008      	stmia	r0!, {r3}
 8009f7c:	9b05      	ldr	r3, [sp, #20]
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	d2ec      	bcs.n	8009f5c <quorem+0xb0>
 8009f82:	9b01      	ldr	r3, [sp, #4]
 8009f84:	9a03      	ldr	r2, [sp, #12]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	18d3      	adds	r3, r2, r3
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	d015      	beq.n	8009fbc <quorem+0x110>
 8009f90:	9802      	ldr	r0, [sp, #8]
 8009f92:	b009      	add	sp, #36	; 0x24
 8009f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d106      	bne.n	8009faa <quorem+0xfe>
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	3c04      	subs	r4, #4
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	d3f5      	bcc.n	8009f96 <quorem+0xea>
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	e7c7      	b.n	8009f40 <quorem+0x94>
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d106      	bne.n	8009fc4 <quorem+0x118>
 8009fb6:	9a01      	ldr	r2, [sp, #4]
 8009fb8:	3a01      	subs	r2, #1
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9a03      	ldr	r2, [sp, #12]
 8009fbe:	3b04      	subs	r3, #4
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d3f5      	bcc.n	8009fb0 <quorem+0x104>
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	e7e2      	b.n	8009f90 <quorem+0xe4>
	...

08009fcc <_dtoa_r>:
 8009fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fce:	0014      	movs	r4, r2
 8009fd0:	001d      	movs	r5, r3
 8009fd2:	69c6      	ldr	r6, [r0, #28]
 8009fd4:	b09d      	sub	sp, #116	; 0x74
 8009fd6:	9408      	str	r4, [sp, #32]
 8009fd8:	9509      	str	r5, [sp, #36]	; 0x24
 8009fda:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009fdc:	9004      	str	r0, [sp, #16]
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	d10f      	bne.n	800a002 <_dtoa_r+0x36>
 8009fe2:	2010      	movs	r0, #16
 8009fe4:	f000 fe4a 	bl	800ac7c <malloc>
 8009fe8:	9b04      	ldr	r3, [sp, #16]
 8009fea:	1e02      	subs	r2, r0, #0
 8009fec:	61d8      	str	r0, [r3, #28]
 8009fee:	d104      	bne.n	8009ffa <_dtoa_r+0x2e>
 8009ff0:	21ef      	movs	r1, #239	; 0xef
 8009ff2:	4bc6      	ldr	r3, [pc, #792]	; (800a30c <_dtoa_r+0x340>)
 8009ff4:	48c6      	ldr	r0, [pc, #792]	; (800a310 <_dtoa_r+0x344>)
 8009ff6:	f001 fcdf 	bl	800b9b8 <__assert_func>
 8009ffa:	6046      	str	r6, [r0, #4]
 8009ffc:	6086      	str	r6, [r0, #8]
 8009ffe:	6006      	str	r6, [r0, #0]
 800a000:	60c6      	str	r6, [r0, #12]
 800a002:	9b04      	ldr	r3, [sp, #16]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	6819      	ldr	r1, [r3, #0]
 800a008:	2900      	cmp	r1, #0
 800a00a:	d00b      	beq.n	800a024 <_dtoa_r+0x58>
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	2301      	movs	r3, #1
 800a010:	4093      	lsls	r3, r2
 800a012:	604a      	str	r2, [r1, #4]
 800a014:	608b      	str	r3, [r1, #8]
 800a016:	9804      	ldr	r0, [sp, #16]
 800a018:	f000 ff32 	bl	800ae80 <_Bfree>
 800a01c:	2200      	movs	r2, #0
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2d00      	cmp	r5, #0
 800a026:	da1e      	bge.n	800a066 <_dtoa_r+0x9a>
 800a028:	2301      	movs	r3, #1
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	006b      	lsls	r3, r5, #1
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	9309      	str	r3, [sp, #36]	; 0x24
 800a032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a034:	4bb7      	ldr	r3, [pc, #732]	; (800a314 <_dtoa_r+0x348>)
 800a036:	4ab7      	ldr	r2, [pc, #732]	; (800a314 <_dtoa_r+0x348>)
 800a038:	403b      	ands	r3, r7
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d116      	bne.n	800a06c <_dtoa_r+0xa0>
 800a03e:	4bb6      	ldr	r3, [pc, #728]	; (800a318 <_dtoa_r+0x34c>)
 800a040:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	033b      	lsls	r3, r7, #12
 800a046:	0b1b      	lsrs	r3, r3, #12
 800a048:	4323      	orrs	r3, r4
 800a04a:	d101      	bne.n	800a050 <_dtoa_r+0x84>
 800a04c:	f000 fdb5 	bl	800abba <_dtoa_r+0xbee>
 800a050:	4bb2      	ldr	r3, [pc, #712]	; (800a31c <_dtoa_r+0x350>)
 800a052:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	2a00      	cmp	r2, #0
 800a058:	d002      	beq.n	800a060 <_dtoa_r+0x94>
 800a05a:	4bb1      	ldr	r3, [pc, #708]	; (800a320 <_dtoa_r+0x354>)
 800a05c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	9806      	ldr	r0, [sp, #24]
 800a062:	b01d      	add	sp, #116	; 0x74
 800a064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a066:	2300      	movs	r3, #0
 800a068:	603b      	str	r3, [r7, #0]
 800a06a:	e7e2      	b.n	800a032 <_dtoa_r+0x66>
 800a06c:	9a08      	ldr	r2, [sp, #32]
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	9210      	str	r2, [sp, #64]	; 0x40
 800a072:	9311      	str	r3, [sp, #68]	; 0x44
 800a074:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a076:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a078:	2200      	movs	r2, #0
 800a07a:	2300      	movs	r3, #0
 800a07c:	f7f6 f9e6 	bl	800044c <__aeabi_dcmpeq>
 800a080:	1e06      	subs	r6, r0, #0
 800a082:	d009      	beq.n	800a098 <_dtoa_r+0xcc>
 800a084:	2301      	movs	r3, #1
 800a086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	4ba6      	ldr	r3, [pc, #664]	; (800a324 <_dtoa_r+0x358>)
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0e5      	beq.n	800a060 <_dtoa_r+0x94>
 800a094:	4ba4      	ldr	r3, [pc, #656]	; (800a328 <_dtoa_r+0x35c>)
 800a096:	e7e1      	b.n	800a05c <_dtoa_r+0x90>
 800a098:	ab1a      	add	r3, sp, #104	; 0x68
 800a09a:	9301      	str	r3, [sp, #4]
 800a09c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	9804      	ldr	r0, [sp, #16]
 800a0a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0a6:	f001 f9e1 	bl	800b46c <__d2b>
 800a0aa:	007a      	lsls	r2, r7, #1
 800a0ac:	9005      	str	r0, [sp, #20]
 800a0ae:	0d52      	lsrs	r2, r2, #21
 800a0b0:	d100      	bne.n	800a0b4 <_dtoa_r+0xe8>
 800a0b2:	e07b      	b.n	800a1ac <_dtoa_r+0x1e0>
 800a0b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b6:	9617      	str	r6, [sp, #92]	; 0x5c
 800a0b8:	0319      	lsls	r1, r3, #12
 800a0ba:	4b9c      	ldr	r3, [pc, #624]	; (800a32c <_dtoa_r+0x360>)
 800a0bc:	0b09      	lsrs	r1, r1, #12
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	499b      	ldr	r1, [pc, #620]	; (800a330 <_dtoa_r+0x364>)
 800a0c2:	1857      	adds	r7, r2, r1
 800a0c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a0c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0c8:	0019      	movs	r1, r3
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4b99      	ldr	r3, [pc, #612]	; (800a334 <_dtoa_r+0x368>)
 800a0ce:	f7f7 ff6d 	bl	8001fac <__aeabi_dsub>
 800a0d2:	4a99      	ldr	r2, [pc, #612]	; (800a338 <_dtoa_r+0x36c>)
 800a0d4:	4b99      	ldr	r3, [pc, #612]	; (800a33c <_dtoa_r+0x370>)
 800a0d6:	f7f7 fca7 	bl	8001a28 <__aeabi_dmul>
 800a0da:	4a99      	ldr	r2, [pc, #612]	; (800a340 <_dtoa_r+0x374>)
 800a0dc:	4b99      	ldr	r3, [pc, #612]	; (800a344 <_dtoa_r+0x378>)
 800a0de:	f7f6 fd49 	bl	8000b74 <__aeabi_dadd>
 800a0e2:	0004      	movs	r4, r0
 800a0e4:	0038      	movs	r0, r7
 800a0e6:	000d      	movs	r5, r1
 800a0e8:	f7f8 fb36 	bl	8002758 <__aeabi_i2d>
 800a0ec:	4a96      	ldr	r2, [pc, #600]	; (800a348 <_dtoa_r+0x37c>)
 800a0ee:	4b97      	ldr	r3, [pc, #604]	; (800a34c <_dtoa_r+0x380>)
 800a0f0:	f7f7 fc9a 	bl	8001a28 <__aeabi_dmul>
 800a0f4:	0002      	movs	r2, r0
 800a0f6:	000b      	movs	r3, r1
 800a0f8:	0020      	movs	r0, r4
 800a0fa:	0029      	movs	r1, r5
 800a0fc:	f7f6 fd3a 	bl	8000b74 <__aeabi_dadd>
 800a100:	0004      	movs	r4, r0
 800a102:	000d      	movs	r5, r1
 800a104:	f7f8 faf2 	bl	80026ec <__aeabi_d2iz>
 800a108:	2200      	movs	r2, #0
 800a10a:	9003      	str	r0, [sp, #12]
 800a10c:	2300      	movs	r3, #0
 800a10e:	0020      	movs	r0, r4
 800a110:	0029      	movs	r1, r5
 800a112:	f7f6 f9a1 	bl	8000458 <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	d00b      	beq.n	800a132 <_dtoa_r+0x166>
 800a11a:	9803      	ldr	r0, [sp, #12]
 800a11c:	f7f8 fb1c 	bl	8002758 <__aeabi_i2d>
 800a120:	002b      	movs	r3, r5
 800a122:	0022      	movs	r2, r4
 800a124:	f7f6 f992 	bl	800044c <__aeabi_dcmpeq>
 800a128:	4243      	negs	r3, r0
 800a12a:	4158      	adcs	r0, r3
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	1a1b      	subs	r3, r3, r0
 800a130:	9303      	str	r3, [sp, #12]
 800a132:	2301      	movs	r3, #1
 800a134:	9316      	str	r3, [sp, #88]	; 0x58
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	2b16      	cmp	r3, #22
 800a13a:	d810      	bhi.n	800a15e <_dtoa_r+0x192>
 800a13c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a13e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a140:	9a03      	ldr	r2, [sp, #12]
 800a142:	4b83      	ldr	r3, [pc, #524]	; (800a350 <_dtoa_r+0x384>)
 800a144:	00d2      	lsls	r2, r2, #3
 800a146:	189b      	adds	r3, r3, r2
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f7f6 f984 	bl	8000458 <__aeabi_dcmplt>
 800a150:	2800      	cmp	r0, #0
 800a152:	d047      	beq.n	800a1e4 <_dtoa_r+0x218>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	3b01      	subs	r3, #1
 800a158:	9303      	str	r3, [sp, #12]
 800a15a:	2300      	movs	r3, #0
 800a15c:	9316      	str	r3, [sp, #88]	; 0x58
 800a15e:	2200      	movs	r2, #0
 800a160:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a162:	920a      	str	r2, [sp, #40]	; 0x28
 800a164:	1bdb      	subs	r3, r3, r7
 800a166:	1e5a      	subs	r2, r3, #1
 800a168:	d53e      	bpl.n	800a1e8 <_dtoa_r+0x21c>
 800a16a:	2201      	movs	r2, #1
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	930a      	str	r3, [sp, #40]	; 0x28
 800a170:	2300      	movs	r3, #0
 800a172:	930c      	str	r3, [sp, #48]	; 0x30
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	db38      	blt.n	800a1ec <_dtoa_r+0x220>
 800a17a:	9a03      	ldr	r2, [sp, #12]
 800a17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a17e:	4694      	mov	ip, r2
 800a180:	4463      	add	r3, ip
 800a182:	930c      	str	r3, [sp, #48]	; 0x30
 800a184:	2300      	movs	r3, #0
 800a186:	9213      	str	r2, [sp, #76]	; 0x4c
 800a188:	930d      	str	r3, [sp, #52]	; 0x34
 800a18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a18c:	2401      	movs	r4, #1
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d867      	bhi.n	800a262 <_dtoa_r+0x296>
 800a192:	2b05      	cmp	r3, #5
 800a194:	dd02      	ble.n	800a19c <_dtoa_r+0x1d0>
 800a196:	2400      	movs	r4, #0
 800a198:	3b04      	subs	r3, #4
 800a19a:	9322      	str	r3, [sp, #136]	; 0x88
 800a19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a19e:	1e98      	subs	r0, r3, #2
 800a1a0:	2803      	cmp	r0, #3
 800a1a2:	d867      	bhi.n	800a274 <_dtoa_r+0x2a8>
 800a1a4:	f7f5 ffb8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a1a8:	5b383a2b 	.word	0x5b383a2b
 800a1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a1b0:	18f6      	adds	r6, r6, r3
 800a1b2:	4b68      	ldr	r3, [pc, #416]	; (800a354 <_dtoa_r+0x388>)
 800a1b4:	18f2      	adds	r2, r6, r3
 800a1b6:	2a20      	cmp	r2, #32
 800a1b8:	dd0f      	ble.n	800a1da <_dtoa_r+0x20e>
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	1a9b      	subs	r3, r3, r2
 800a1be:	409f      	lsls	r7, r3
 800a1c0:	4b65      	ldr	r3, [pc, #404]	; (800a358 <_dtoa_r+0x38c>)
 800a1c2:	0038      	movs	r0, r7
 800a1c4:	18f3      	adds	r3, r6, r3
 800a1c6:	40dc      	lsrs	r4, r3
 800a1c8:	4320      	orrs	r0, r4
 800a1ca:	f7f8 faf5 	bl	80027b8 <__aeabi_ui2d>
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4b62      	ldr	r3, [pc, #392]	; (800a35c <_dtoa_r+0x390>)
 800a1d2:	1e77      	subs	r7, r6, #1
 800a1d4:	18cb      	adds	r3, r1, r3
 800a1d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1d8:	e776      	b.n	800a0c8 <_dtoa_r+0xfc>
 800a1da:	2320      	movs	r3, #32
 800a1dc:	0020      	movs	r0, r4
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	4098      	lsls	r0, r3
 800a1e2:	e7f2      	b.n	800a1ca <_dtoa_r+0x1fe>
 800a1e4:	9016      	str	r0, [sp, #88]	; 0x58
 800a1e6:	e7ba      	b.n	800a15e <_dtoa_r+0x192>
 800a1e8:	920c      	str	r2, [sp, #48]	; 0x30
 800a1ea:	e7c3      	b.n	800a174 <_dtoa_r+0x1a8>
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ee:	9a03      	ldr	r2, [sp, #12]
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f4:	4253      	negs	r3, r2
 800a1f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1fc:	e7c5      	b.n	800a18a <_dtoa_r+0x1be>
 800a1fe:	2300      	movs	r3, #0
 800a200:	930f      	str	r3, [sp, #60]	; 0x3c
 800a202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a204:	930b      	str	r3, [sp, #44]	; 0x2c
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dc13      	bgt.n	800a234 <_dtoa_r+0x268>
 800a20c:	2301      	movs	r3, #1
 800a20e:	001a      	movs	r2, r3
 800a210:	930b      	str	r3, [sp, #44]	; 0x2c
 800a212:	9307      	str	r3, [sp, #28]
 800a214:	9223      	str	r2, [sp, #140]	; 0x8c
 800a216:	e00d      	b.n	800a234 <_dtoa_r+0x268>
 800a218:	2301      	movs	r3, #1
 800a21a:	e7f1      	b.n	800a200 <_dtoa_r+0x234>
 800a21c:	2300      	movs	r3, #0
 800a21e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a220:	930f      	str	r3, [sp, #60]	; 0x3c
 800a222:	4694      	mov	ip, r2
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	4463      	add	r3, ip
 800a228:	930b      	str	r3, [sp, #44]	; 0x2c
 800a22a:	3301      	adds	r3, #1
 800a22c:	9307      	str	r3, [sp, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc00      	bgt.n	800a234 <_dtoa_r+0x268>
 800a232:	2301      	movs	r3, #1
 800a234:	9a04      	ldr	r2, [sp, #16]
 800a236:	2100      	movs	r1, #0
 800a238:	69d0      	ldr	r0, [r2, #28]
 800a23a:	2204      	movs	r2, #4
 800a23c:	0015      	movs	r5, r2
 800a23e:	3514      	adds	r5, #20
 800a240:	429d      	cmp	r5, r3
 800a242:	d91b      	bls.n	800a27c <_dtoa_r+0x2b0>
 800a244:	6041      	str	r1, [r0, #4]
 800a246:	9804      	ldr	r0, [sp, #16]
 800a248:	f000 fdd6 	bl	800adf8 <_Balloc>
 800a24c:	9006      	str	r0, [sp, #24]
 800a24e:	2800      	cmp	r0, #0
 800a250:	d117      	bne.n	800a282 <_dtoa_r+0x2b6>
 800a252:	21b0      	movs	r1, #176	; 0xb0
 800a254:	4b42      	ldr	r3, [pc, #264]	; (800a360 <_dtoa_r+0x394>)
 800a256:	482e      	ldr	r0, [pc, #184]	; (800a310 <_dtoa_r+0x344>)
 800a258:	9a06      	ldr	r2, [sp, #24]
 800a25a:	31ff      	adds	r1, #255	; 0xff
 800a25c:	e6cb      	b.n	8009ff6 <_dtoa_r+0x2a>
 800a25e:	2301      	movs	r3, #1
 800a260:	e7dd      	b.n	800a21e <_dtoa_r+0x252>
 800a262:	2300      	movs	r3, #0
 800a264:	940f      	str	r4, [sp, #60]	; 0x3c
 800a266:	9322      	str	r3, [sp, #136]	; 0x88
 800a268:	3b01      	subs	r3, #1
 800a26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a26c:	9307      	str	r3, [sp, #28]
 800a26e:	2200      	movs	r2, #0
 800a270:	3313      	adds	r3, #19
 800a272:	e7cf      	b.n	800a214 <_dtoa_r+0x248>
 800a274:	2301      	movs	r3, #1
 800a276:	930f      	str	r3, [sp, #60]	; 0x3c
 800a278:	3b02      	subs	r3, #2
 800a27a:	e7f6      	b.n	800a26a <_dtoa_r+0x29e>
 800a27c:	3101      	adds	r1, #1
 800a27e:	0052      	lsls	r2, r2, #1
 800a280:	e7dc      	b.n	800a23c <_dtoa_r+0x270>
 800a282:	9b04      	ldr	r3, [sp, #16]
 800a284:	9a06      	ldr	r2, [sp, #24]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	9b07      	ldr	r3, [sp, #28]
 800a28c:	2b0e      	cmp	r3, #14
 800a28e:	d900      	bls.n	800a292 <_dtoa_r+0x2c6>
 800a290:	e0e5      	b.n	800a45e <_dtoa_r+0x492>
 800a292:	2c00      	cmp	r4, #0
 800a294:	d100      	bne.n	800a298 <_dtoa_r+0x2cc>
 800a296:	e0e2      	b.n	800a45e <_dtoa_r+0x492>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dd64      	ble.n	800a368 <_dtoa_r+0x39c>
 800a29e:	210f      	movs	r1, #15
 800a2a0:	9a03      	ldr	r2, [sp, #12]
 800a2a2:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <_dtoa_r+0x384>)
 800a2a4:	400a      	ands	r2, r1
 800a2a6:	00d2      	lsls	r2, r2, #3
 800a2a8:	189b      	adds	r3, r3, r2
 800a2aa:	681e      	ldr	r6, [r3, #0]
 800a2ac:	685f      	ldr	r7, [r3, #4]
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	2402      	movs	r4, #2
 800a2b2:	111d      	asrs	r5, r3, #4
 800a2b4:	05db      	lsls	r3, r3, #23
 800a2b6:	d50a      	bpl.n	800a2ce <_dtoa_r+0x302>
 800a2b8:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <_dtoa_r+0x398>)
 800a2ba:	400d      	ands	r5, r1
 800a2bc:	6a1a      	ldr	r2, [r3, #32]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2c4:	f7f6 ffb6 	bl	8001234 <__aeabi_ddiv>
 800a2c8:	9008      	str	r0, [sp, #32]
 800a2ca:	9109      	str	r1, [sp, #36]	; 0x24
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	4b25      	ldr	r3, [pc, #148]	; (800a364 <_dtoa_r+0x398>)
 800a2d0:	930e      	str	r3, [sp, #56]	; 0x38
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	d108      	bne.n	800a2e8 <_dtoa_r+0x31c>
 800a2d6:	9808      	ldr	r0, [sp, #32]
 800a2d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2da:	0032      	movs	r2, r6
 800a2dc:	003b      	movs	r3, r7
 800a2de:	f7f6 ffa9 	bl	8001234 <__aeabi_ddiv>
 800a2e2:	9008      	str	r0, [sp, #32]
 800a2e4:	9109      	str	r1, [sp, #36]	; 0x24
 800a2e6:	e05a      	b.n	800a39e <_dtoa_r+0x3d2>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	421d      	tst	r5, r3
 800a2ec:	d009      	beq.n	800a302 <_dtoa_r+0x336>
 800a2ee:	18e4      	adds	r4, r4, r3
 800a2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f2:	0030      	movs	r0, r6
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	0039      	movs	r1, r7
 800a2fa:	f7f7 fb95 	bl	8001a28 <__aeabi_dmul>
 800a2fe:	0006      	movs	r6, r0
 800a300:	000f      	movs	r7, r1
 800a302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a304:	106d      	asrs	r5, r5, #1
 800a306:	3308      	adds	r3, #8
 800a308:	e7e2      	b.n	800a2d0 <_dtoa_r+0x304>
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	0800c241 	.word	0x0800c241
 800a310:	0800c258 	.word	0x0800c258
 800a314:	7ff00000 	.word	0x7ff00000
 800a318:	0000270f 	.word	0x0000270f
 800a31c:	0800c23d 	.word	0x0800c23d
 800a320:	0800c240 	.word	0x0800c240
 800a324:	0800c210 	.word	0x0800c210
 800a328:	0800c211 	.word	0x0800c211
 800a32c:	3ff00000 	.word	0x3ff00000
 800a330:	fffffc01 	.word	0xfffffc01
 800a334:	3ff80000 	.word	0x3ff80000
 800a338:	636f4361 	.word	0x636f4361
 800a33c:	3fd287a7 	.word	0x3fd287a7
 800a340:	8b60c8b3 	.word	0x8b60c8b3
 800a344:	3fc68a28 	.word	0x3fc68a28
 800a348:	509f79fb 	.word	0x509f79fb
 800a34c:	3fd34413 	.word	0x3fd34413
 800a350:	0800c348 	.word	0x0800c348
 800a354:	00000432 	.word	0x00000432
 800a358:	00000412 	.word	0x00000412
 800a35c:	fe100000 	.word	0xfe100000
 800a360:	0800c2b0 	.word	0x0800c2b0
 800a364:	0800c320 	.word	0x0800c320
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	2402      	movs	r4, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d016      	beq.n	800a39e <_dtoa_r+0x3d2>
 800a370:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a372:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a374:	220f      	movs	r2, #15
 800a376:	425d      	negs	r5, r3
 800a378:	402a      	ands	r2, r5
 800a37a:	4bdd      	ldr	r3, [pc, #884]	; (800a6f0 <_dtoa_r+0x724>)
 800a37c:	00d2      	lsls	r2, r2, #3
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f7f7 fb50 	bl	8001a28 <__aeabi_dmul>
 800a388:	2701      	movs	r7, #1
 800a38a:	2300      	movs	r3, #0
 800a38c:	9008      	str	r0, [sp, #32]
 800a38e:	9109      	str	r1, [sp, #36]	; 0x24
 800a390:	4ed8      	ldr	r6, [pc, #864]	; (800a6f4 <_dtoa_r+0x728>)
 800a392:	112d      	asrs	r5, r5, #4
 800a394:	2d00      	cmp	r5, #0
 800a396:	d000      	beq.n	800a39a <_dtoa_r+0x3ce>
 800a398:	e091      	b.n	800a4be <_dtoa_r+0x4f2>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1a1      	bne.n	800a2e2 <_dtoa_r+0x316>
 800a39e:	9e08      	ldr	r6, [sp, #32]
 800a3a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d100      	bne.n	800a3aa <_dtoa_r+0x3de>
 800a3a8:	e094      	b.n	800a4d4 <_dtoa_r+0x508>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	0030      	movs	r0, r6
 800a3ae:	0039      	movs	r1, r7
 800a3b0:	4bd1      	ldr	r3, [pc, #836]	; (800a6f8 <_dtoa_r+0x72c>)
 800a3b2:	f7f6 f851 	bl	8000458 <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d100      	bne.n	800a3bc <_dtoa_r+0x3f0>
 800a3ba:	e08b      	b.n	800a4d4 <_dtoa_r+0x508>
 800a3bc:	9b07      	ldr	r3, [sp, #28]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d100      	bne.n	800a3c4 <_dtoa_r+0x3f8>
 800a3c2:	e087      	b.n	800a4d4 <_dtoa_r+0x508>
 800a3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dd45      	ble.n	800a456 <_dtoa_r+0x48a>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3d2:	0030      	movs	r0, r6
 800a3d4:	4bc9      	ldr	r3, [pc, #804]	; (800a6fc <_dtoa_r+0x730>)
 800a3d6:	0039      	movs	r1, r7
 800a3d8:	f7f7 fb26 	bl	8001a28 <__aeabi_dmul>
 800a3dc:	9008      	str	r0, [sp, #32]
 800a3de:	9109      	str	r1, [sp, #36]	; 0x24
 800a3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	0020      	movs	r0, r4
 800a3e6:	9e08      	ldr	r6, [sp, #32]
 800a3e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3ea:	9312      	str	r3, [sp, #72]	; 0x48
 800a3ec:	f7f8 f9b4 	bl	8002758 <__aeabi_i2d>
 800a3f0:	0032      	movs	r2, r6
 800a3f2:	003b      	movs	r3, r7
 800a3f4:	f7f7 fb18 	bl	8001a28 <__aeabi_dmul>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4bc1      	ldr	r3, [pc, #772]	; (800a700 <_dtoa_r+0x734>)
 800a3fc:	f7f6 fbba 	bl	8000b74 <__aeabi_dadd>
 800a400:	4ac0      	ldr	r2, [pc, #768]	; (800a704 <_dtoa_r+0x738>)
 800a402:	9014      	str	r0, [sp, #80]	; 0x50
 800a404:	9115      	str	r1, [sp, #84]	; 0x54
 800a406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a408:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a40a:	4694      	mov	ip, r2
 800a40c:	9308      	str	r3, [sp, #32]
 800a40e:	9409      	str	r4, [sp, #36]	; 0x24
 800a410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a412:	4463      	add	r3, ip
 800a414:	9318      	str	r3, [sp, #96]	; 0x60
 800a416:	9309      	str	r3, [sp, #36]	; 0x24
 800a418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d15e      	bne.n	800a4dc <_dtoa_r+0x510>
 800a41e:	2200      	movs	r2, #0
 800a420:	4bb9      	ldr	r3, [pc, #740]	; (800a708 <_dtoa_r+0x73c>)
 800a422:	0030      	movs	r0, r6
 800a424:	0039      	movs	r1, r7
 800a426:	f7f7 fdc1 	bl	8001fac <__aeabi_dsub>
 800a42a:	9a08      	ldr	r2, [sp, #32]
 800a42c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a42e:	0004      	movs	r4, r0
 800a430:	000d      	movs	r5, r1
 800a432:	f7f6 f825 	bl	8000480 <__aeabi_dcmpgt>
 800a436:	2800      	cmp	r0, #0
 800a438:	d000      	beq.n	800a43c <_dtoa_r+0x470>
 800a43a:	e2b3      	b.n	800a9a4 <_dtoa_r+0x9d8>
 800a43c:	48b3      	ldr	r0, [pc, #716]	; (800a70c <_dtoa_r+0x740>)
 800a43e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a440:	4684      	mov	ip, r0
 800a442:	4461      	add	r1, ip
 800a444:	000b      	movs	r3, r1
 800a446:	0020      	movs	r0, r4
 800a448:	0029      	movs	r1, r5
 800a44a:	9a08      	ldr	r2, [sp, #32]
 800a44c:	f7f6 f804 	bl	8000458 <__aeabi_dcmplt>
 800a450:	2800      	cmp	r0, #0
 800a452:	d000      	beq.n	800a456 <_dtoa_r+0x48a>
 800a454:	e2a3      	b.n	800a99e <_dtoa_r+0x9d2>
 800a456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a458:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a45a:	9308      	str	r3, [sp, #32]
 800a45c:	9409      	str	r4, [sp, #36]	; 0x24
 800a45e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a460:	2b00      	cmp	r3, #0
 800a462:	da00      	bge.n	800a466 <_dtoa_r+0x49a>
 800a464:	e179      	b.n	800a75a <_dtoa_r+0x78e>
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	2a0e      	cmp	r2, #14
 800a46a:	dd00      	ble.n	800a46e <_dtoa_r+0x4a2>
 800a46c:	e175      	b.n	800a75a <_dtoa_r+0x78e>
 800a46e:	4ba0      	ldr	r3, [pc, #640]	; (800a6f0 <_dtoa_r+0x724>)
 800a470:	00d2      	lsls	r2, r2, #3
 800a472:	189b      	adds	r3, r3, r2
 800a474:	681e      	ldr	r6, [r3, #0]
 800a476:	685f      	ldr	r7, [r3, #4]
 800a478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	db00      	blt.n	800a480 <_dtoa_r+0x4b4>
 800a47e:	e0e5      	b.n	800a64c <_dtoa_r+0x680>
 800a480:	9b07      	ldr	r3, [sp, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dd00      	ble.n	800a488 <_dtoa_r+0x4bc>
 800a486:	e0e1      	b.n	800a64c <_dtoa_r+0x680>
 800a488:	d000      	beq.n	800a48c <_dtoa_r+0x4c0>
 800a48a:	e288      	b.n	800a99e <_dtoa_r+0x9d2>
 800a48c:	2200      	movs	r2, #0
 800a48e:	0030      	movs	r0, r6
 800a490:	0039      	movs	r1, r7
 800a492:	4b9d      	ldr	r3, [pc, #628]	; (800a708 <_dtoa_r+0x73c>)
 800a494:	f7f7 fac8 	bl	8001a28 <__aeabi_dmul>
 800a498:	9a08      	ldr	r2, [sp, #32]
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	f7f5 fffa 	bl	8000494 <__aeabi_dcmpge>
 800a4a0:	9e07      	ldr	r6, [sp, #28]
 800a4a2:	0037      	movs	r7, r6
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d000      	beq.n	800a4aa <_dtoa_r+0x4de>
 800a4a8:	e25f      	b.n	800a96a <_dtoa_r+0x99e>
 800a4aa:	9b06      	ldr	r3, [sp, #24]
 800a4ac:	9a06      	ldr	r2, [sp, #24]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	2331      	movs	r3, #49	; 0x31
 800a4b4:	7013      	strb	r3, [r2, #0]
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	9303      	str	r3, [sp, #12]
 800a4bc:	e25a      	b.n	800a974 <_dtoa_r+0x9a8>
 800a4be:	423d      	tst	r5, r7
 800a4c0:	d005      	beq.n	800a4ce <_dtoa_r+0x502>
 800a4c2:	6832      	ldr	r2, [r6, #0]
 800a4c4:	6873      	ldr	r3, [r6, #4]
 800a4c6:	f7f7 faaf 	bl	8001a28 <__aeabi_dmul>
 800a4ca:	003b      	movs	r3, r7
 800a4cc:	3401      	adds	r4, #1
 800a4ce:	106d      	asrs	r5, r5, #1
 800a4d0:	3608      	adds	r6, #8
 800a4d2:	e75f      	b.n	800a394 <_dtoa_r+0x3c8>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d8:	9b07      	ldr	r3, [sp, #28]
 800a4da:	e783      	b.n	800a3e4 <_dtoa_r+0x418>
 800a4dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4de:	4b84      	ldr	r3, [pc, #528]	; (800a6f0 <_dtoa_r+0x724>)
 800a4e0:	3a01      	subs	r2, #1
 800a4e2:	00d2      	lsls	r2, r2, #3
 800a4e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a4e6:	189b      	adds	r3, r3, r2
 800a4e8:	9c08      	ldr	r4, [sp, #32]
 800a4ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	d051      	beq.n	800a598 <_dtoa_r+0x5cc>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	4986      	ldr	r1, [pc, #536]	; (800a710 <_dtoa_r+0x744>)
 800a4f8:	f7f6 fe9c 	bl	8001234 <__aeabi_ddiv>
 800a4fc:	0022      	movs	r2, r4
 800a4fe:	002b      	movs	r3, r5
 800a500:	f7f7 fd54 	bl	8001fac <__aeabi_dsub>
 800a504:	9a06      	ldr	r2, [sp, #24]
 800a506:	0004      	movs	r4, r0
 800a508:	4694      	mov	ip, r2
 800a50a:	000d      	movs	r5, r1
 800a50c:	9b06      	ldr	r3, [sp, #24]
 800a50e:	9314      	str	r3, [sp, #80]	; 0x50
 800a510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a512:	4463      	add	r3, ip
 800a514:	9318      	str	r3, [sp, #96]	; 0x60
 800a516:	0039      	movs	r1, r7
 800a518:	0030      	movs	r0, r6
 800a51a:	f7f8 f8e7 	bl	80026ec <__aeabi_d2iz>
 800a51e:	9012      	str	r0, [sp, #72]	; 0x48
 800a520:	f7f8 f91a 	bl	8002758 <__aeabi_i2d>
 800a524:	0002      	movs	r2, r0
 800a526:	000b      	movs	r3, r1
 800a528:	0030      	movs	r0, r6
 800a52a:	0039      	movs	r1, r7
 800a52c:	f7f7 fd3e 	bl	8001fac <__aeabi_dsub>
 800a530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a532:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a534:	3301      	adds	r3, #1
 800a536:	9308      	str	r3, [sp, #32]
 800a538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a53a:	0006      	movs	r6, r0
 800a53c:	3330      	adds	r3, #48	; 0x30
 800a53e:	7013      	strb	r3, [r2, #0]
 800a540:	0022      	movs	r2, r4
 800a542:	002b      	movs	r3, r5
 800a544:	000f      	movs	r7, r1
 800a546:	f7f5 ff87 	bl	8000458 <__aeabi_dcmplt>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d174      	bne.n	800a638 <_dtoa_r+0x66c>
 800a54e:	0032      	movs	r2, r6
 800a550:	003b      	movs	r3, r7
 800a552:	2000      	movs	r0, #0
 800a554:	4968      	ldr	r1, [pc, #416]	; (800a6f8 <_dtoa_r+0x72c>)
 800a556:	f7f7 fd29 	bl	8001fac <__aeabi_dsub>
 800a55a:	0022      	movs	r2, r4
 800a55c:	002b      	movs	r3, r5
 800a55e:	f7f5 ff7b 	bl	8000458 <__aeabi_dcmplt>
 800a562:	2800      	cmp	r0, #0
 800a564:	d000      	beq.n	800a568 <_dtoa_r+0x59c>
 800a566:	e0d7      	b.n	800a718 <_dtoa_r+0x74c>
 800a568:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a56a:	9a08      	ldr	r2, [sp, #32]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d100      	bne.n	800a572 <_dtoa_r+0x5a6>
 800a570:	e771      	b.n	800a456 <_dtoa_r+0x48a>
 800a572:	2200      	movs	r2, #0
 800a574:	0020      	movs	r0, r4
 800a576:	0029      	movs	r1, r5
 800a578:	4b60      	ldr	r3, [pc, #384]	; (800a6fc <_dtoa_r+0x730>)
 800a57a:	f7f7 fa55 	bl	8001a28 <__aeabi_dmul>
 800a57e:	4b5f      	ldr	r3, [pc, #380]	; (800a6fc <_dtoa_r+0x730>)
 800a580:	0004      	movs	r4, r0
 800a582:	000d      	movs	r5, r1
 800a584:	0030      	movs	r0, r6
 800a586:	0039      	movs	r1, r7
 800a588:	2200      	movs	r2, #0
 800a58a:	f7f7 fa4d 	bl	8001a28 <__aeabi_dmul>
 800a58e:	9b08      	ldr	r3, [sp, #32]
 800a590:	0006      	movs	r6, r0
 800a592:	000f      	movs	r7, r1
 800a594:	9314      	str	r3, [sp, #80]	; 0x50
 800a596:	e7be      	b.n	800a516 <_dtoa_r+0x54a>
 800a598:	0020      	movs	r0, r4
 800a59a:	0029      	movs	r1, r5
 800a59c:	f7f7 fa44 	bl	8001a28 <__aeabi_dmul>
 800a5a0:	9a06      	ldr	r2, [sp, #24]
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	4694      	mov	ip, r2
 800a5a6:	9308      	str	r3, [sp, #32]
 800a5a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5aa:	9014      	str	r0, [sp, #80]	; 0x50
 800a5ac:	9115      	str	r1, [sp, #84]	; 0x54
 800a5ae:	4463      	add	r3, ip
 800a5b0:	9319      	str	r3, [sp, #100]	; 0x64
 800a5b2:	0030      	movs	r0, r6
 800a5b4:	0039      	movs	r1, r7
 800a5b6:	f7f8 f899 	bl	80026ec <__aeabi_d2iz>
 800a5ba:	9018      	str	r0, [sp, #96]	; 0x60
 800a5bc:	f7f8 f8cc 	bl	8002758 <__aeabi_i2d>
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	000b      	movs	r3, r1
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	0039      	movs	r1, r7
 800a5c8:	f7f7 fcf0 	bl	8001fac <__aeabi_dsub>
 800a5cc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a5ce:	9b08      	ldr	r3, [sp, #32]
 800a5d0:	3630      	adds	r6, #48	; 0x30
 800a5d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5d4:	701e      	strb	r6, [r3, #0]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	0004      	movs	r4, r0
 800a5da:	000d      	movs	r5, r1
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d12d      	bne.n	800a63e <_dtoa_r+0x672>
 800a5e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a5e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a5e6:	9a06      	ldr	r2, [sp, #24]
 800a5e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ea:	4694      	mov	ip, r2
 800a5ec:	4463      	add	r3, ip
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	9308      	str	r3, [sp, #32]
 800a5f2:	4b47      	ldr	r3, [pc, #284]	; (800a710 <_dtoa_r+0x744>)
 800a5f4:	f7f6 fabe 	bl	8000b74 <__aeabi_dadd>
 800a5f8:	0002      	movs	r2, r0
 800a5fa:	000b      	movs	r3, r1
 800a5fc:	0020      	movs	r0, r4
 800a5fe:	0029      	movs	r1, r5
 800a600:	f7f5 ff3e 	bl	8000480 <__aeabi_dcmpgt>
 800a604:	2800      	cmp	r0, #0
 800a606:	d000      	beq.n	800a60a <_dtoa_r+0x63e>
 800a608:	e086      	b.n	800a718 <_dtoa_r+0x74c>
 800a60a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a60c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a60e:	2000      	movs	r0, #0
 800a610:	493f      	ldr	r1, [pc, #252]	; (800a710 <_dtoa_r+0x744>)
 800a612:	f7f7 fccb 	bl	8001fac <__aeabi_dsub>
 800a616:	0002      	movs	r2, r0
 800a618:	000b      	movs	r3, r1
 800a61a:	0020      	movs	r0, r4
 800a61c:	0029      	movs	r1, r5
 800a61e:	f7f5 ff1b 	bl	8000458 <__aeabi_dcmplt>
 800a622:	2800      	cmp	r0, #0
 800a624:	d100      	bne.n	800a628 <_dtoa_r+0x65c>
 800a626:	e716      	b.n	800a456 <_dtoa_r+0x48a>
 800a628:	9b08      	ldr	r3, [sp, #32]
 800a62a:	001a      	movs	r2, r3
 800a62c:	3a01      	subs	r2, #1
 800a62e:	9208      	str	r2, [sp, #32]
 800a630:	7812      	ldrb	r2, [r2, #0]
 800a632:	2a30      	cmp	r2, #48	; 0x30
 800a634:	d0f8      	beq.n	800a628 <_dtoa_r+0x65c>
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63a:	9303      	str	r3, [sp, #12]
 800a63c:	e046      	b.n	800a6cc <_dtoa_r+0x700>
 800a63e:	2200      	movs	r2, #0
 800a640:	4b2e      	ldr	r3, [pc, #184]	; (800a6fc <_dtoa_r+0x730>)
 800a642:	f7f7 f9f1 	bl	8001a28 <__aeabi_dmul>
 800a646:	0006      	movs	r6, r0
 800a648:	000f      	movs	r7, r1
 800a64a:	e7b2      	b.n	800a5b2 <_dtoa_r+0x5e6>
 800a64c:	9b06      	ldr	r3, [sp, #24]
 800a64e:	9a06      	ldr	r2, [sp, #24]
 800a650:	930a      	str	r3, [sp, #40]	; 0x28
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	9c08      	ldr	r4, [sp, #32]
 800a656:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a658:	3b01      	subs	r3, #1
 800a65a:	189b      	adds	r3, r3, r2
 800a65c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a65e:	0032      	movs	r2, r6
 800a660:	003b      	movs	r3, r7
 800a662:	0020      	movs	r0, r4
 800a664:	0029      	movs	r1, r5
 800a666:	f7f6 fde5 	bl	8001234 <__aeabi_ddiv>
 800a66a:	f7f8 f83f 	bl	80026ec <__aeabi_d2iz>
 800a66e:	9007      	str	r0, [sp, #28]
 800a670:	f7f8 f872 	bl	8002758 <__aeabi_i2d>
 800a674:	0032      	movs	r2, r6
 800a676:	003b      	movs	r3, r7
 800a678:	f7f7 f9d6 	bl	8001a28 <__aeabi_dmul>
 800a67c:	0002      	movs	r2, r0
 800a67e:	000b      	movs	r3, r1
 800a680:	0020      	movs	r0, r4
 800a682:	0029      	movs	r1, r5
 800a684:	f7f7 fc92 	bl	8001fac <__aeabi_dsub>
 800a688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68a:	001a      	movs	r2, r3
 800a68c:	3201      	adds	r2, #1
 800a68e:	920a      	str	r2, [sp, #40]	; 0x28
 800a690:	9208      	str	r2, [sp, #32]
 800a692:	9a07      	ldr	r2, [sp, #28]
 800a694:	3230      	adds	r2, #48	; 0x30
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d14f      	bne.n	800a73e <_dtoa_r+0x772>
 800a69e:	0002      	movs	r2, r0
 800a6a0:	000b      	movs	r3, r1
 800a6a2:	f7f6 fa67 	bl	8000b74 <__aeabi_dadd>
 800a6a6:	0032      	movs	r2, r6
 800a6a8:	003b      	movs	r3, r7
 800a6aa:	0004      	movs	r4, r0
 800a6ac:	000d      	movs	r5, r1
 800a6ae:	f7f5 fee7 	bl	8000480 <__aeabi_dcmpgt>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d12e      	bne.n	800a714 <_dtoa_r+0x748>
 800a6b6:	0032      	movs	r2, r6
 800a6b8:	003b      	movs	r3, r7
 800a6ba:	0020      	movs	r0, r4
 800a6bc:	0029      	movs	r1, r5
 800a6be:	f7f5 fec5 	bl	800044c <__aeabi_dcmpeq>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d002      	beq.n	800a6cc <_dtoa_r+0x700>
 800a6c6:	9b07      	ldr	r3, [sp, #28]
 800a6c8:	07de      	lsls	r6, r3, #31
 800a6ca:	d423      	bmi.n	800a714 <_dtoa_r+0x748>
 800a6cc:	9905      	ldr	r1, [sp, #20]
 800a6ce:	9804      	ldr	r0, [sp, #16]
 800a6d0:	f000 fbd6 	bl	800ae80 <_Bfree>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9a08      	ldr	r2, [sp, #32]
 800a6d8:	7013      	strb	r3, [r2, #0]
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d100      	bne.n	800a6ea <_dtoa_r+0x71e>
 800a6e8:	e4ba      	b.n	800a060 <_dtoa_r+0x94>
 800a6ea:	9a08      	ldr	r2, [sp, #32]
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	e4b7      	b.n	800a060 <_dtoa_r+0x94>
 800a6f0:	0800c348 	.word	0x0800c348
 800a6f4:	0800c320 	.word	0x0800c320
 800a6f8:	3ff00000 	.word	0x3ff00000
 800a6fc:	40240000 	.word	0x40240000
 800a700:	401c0000 	.word	0x401c0000
 800a704:	fcc00000 	.word	0xfcc00000
 800a708:	40140000 	.word	0x40140000
 800a70c:	7cc00000 	.word	0x7cc00000
 800a710:	3fe00000 	.word	0x3fe00000
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	930e      	str	r3, [sp, #56]	; 0x38
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	2a39      	cmp	r2, #57	; 0x39
 800a722:	d108      	bne.n	800a736 <_dtoa_r+0x76a>
 800a724:	9a06      	ldr	r2, [sp, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	d1f7      	bne.n	800a71a <_dtoa_r+0x74e>
 800a72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a72c:	9906      	ldr	r1, [sp, #24]
 800a72e:	3201      	adds	r2, #1
 800a730:	920e      	str	r2, [sp, #56]	; 0x38
 800a732:	2230      	movs	r2, #48	; 0x30
 800a734:	700a      	strb	r2, [r1, #0]
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	3201      	adds	r2, #1
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	e77c      	b.n	800a638 <_dtoa_r+0x66c>
 800a73e:	2200      	movs	r2, #0
 800a740:	4ba9      	ldr	r3, [pc, #676]	; (800a9e8 <_dtoa_r+0xa1c>)
 800a742:	f7f7 f971 	bl	8001a28 <__aeabi_dmul>
 800a746:	2200      	movs	r2, #0
 800a748:	2300      	movs	r3, #0
 800a74a:	0004      	movs	r4, r0
 800a74c:	000d      	movs	r5, r1
 800a74e:	f7f5 fe7d 	bl	800044c <__aeabi_dcmpeq>
 800a752:	2800      	cmp	r0, #0
 800a754:	d100      	bne.n	800a758 <_dtoa_r+0x78c>
 800a756:	e782      	b.n	800a65e <_dtoa_r+0x692>
 800a758:	e7b8      	b.n	800a6cc <_dtoa_r+0x700>
 800a75a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a75c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a75e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a760:	2f00      	cmp	r7, #0
 800a762:	d012      	beq.n	800a78a <_dtoa_r+0x7be>
 800a764:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a766:	2a01      	cmp	r2, #1
 800a768:	dc6e      	bgt.n	800a848 <_dtoa_r+0x87c>
 800a76a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	d065      	beq.n	800a83c <_dtoa_r+0x870>
 800a770:	4a9e      	ldr	r2, [pc, #632]	; (800a9ec <_dtoa_r+0xa20>)
 800a772:	189b      	adds	r3, r3, r2
 800a774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a776:	2101      	movs	r1, #1
 800a778:	18d2      	adds	r2, r2, r3
 800a77a:	920a      	str	r2, [sp, #40]	; 0x28
 800a77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a77e:	9804      	ldr	r0, [sp, #16]
 800a780:	18d3      	adds	r3, r2, r3
 800a782:	930c      	str	r3, [sp, #48]	; 0x30
 800a784:	f000 fc2c 	bl	800afe0 <__i2b>
 800a788:	0007      	movs	r7, r0
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	d00e      	beq.n	800a7ac <_dtoa_r+0x7e0>
 800a78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a790:	2b00      	cmp	r3, #0
 800a792:	dd0b      	ble.n	800a7ac <_dtoa_r+0x7e0>
 800a794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a796:	0023      	movs	r3, r4
 800a798:	4294      	cmp	r4, r2
 800a79a:	dd00      	ble.n	800a79e <_dtoa_r+0x7d2>
 800a79c:	0013      	movs	r3, r2
 800a79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7a0:	1ae4      	subs	r4, r4, r3
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a7a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a7ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d01e      	beq.n	800a7f0 <_dtoa_r+0x824>
 800a7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05c      	beq.n	800a872 <_dtoa_r+0x8a6>
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	dd10      	ble.n	800a7de <_dtoa_r+0x812>
 800a7bc:	0039      	movs	r1, r7
 800a7be:	002a      	movs	r2, r5
 800a7c0:	9804      	ldr	r0, [sp, #16]
 800a7c2:	f000 fcd5 	bl	800b170 <__pow5mult>
 800a7c6:	9a05      	ldr	r2, [sp, #20]
 800a7c8:	0001      	movs	r1, r0
 800a7ca:	0007      	movs	r7, r0
 800a7cc:	9804      	ldr	r0, [sp, #16]
 800a7ce:	f000 fc1f 	bl	800b010 <__multiply>
 800a7d2:	0006      	movs	r6, r0
 800a7d4:	9905      	ldr	r1, [sp, #20]
 800a7d6:	9804      	ldr	r0, [sp, #16]
 800a7d8:	f000 fb52 	bl	800ae80 <_Bfree>
 800a7dc:	9605      	str	r6, [sp, #20]
 800a7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e0:	1b5a      	subs	r2, r3, r5
 800a7e2:	42ab      	cmp	r3, r5
 800a7e4:	d004      	beq.n	800a7f0 <_dtoa_r+0x824>
 800a7e6:	9905      	ldr	r1, [sp, #20]
 800a7e8:	9804      	ldr	r0, [sp, #16]
 800a7ea:	f000 fcc1 	bl	800b170 <__pow5mult>
 800a7ee:	9005      	str	r0, [sp, #20]
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	9804      	ldr	r0, [sp, #16]
 800a7f4:	f000 fbf4 	bl	800afe0 <__i2b>
 800a7f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7fa:	0006      	movs	r6, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	dd3a      	ble.n	800a876 <_dtoa_r+0x8aa>
 800a800:	001a      	movs	r2, r3
 800a802:	0001      	movs	r1, r0
 800a804:	9804      	ldr	r0, [sp, #16]
 800a806:	f000 fcb3 	bl	800b170 <__pow5mult>
 800a80a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a80c:	0006      	movs	r6, r0
 800a80e:	2500      	movs	r5, #0
 800a810:	2b01      	cmp	r3, #1
 800a812:	dc38      	bgt.n	800a886 <_dtoa_r+0x8ba>
 800a814:	2500      	movs	r5, #0
 800a816:	9b08      	ldr	r3, [sp, #32]
 800a818:	42ab      	cmp	r3, r5
 800a81a:	d130      	bne.n	800a87e <_dtoa_r+0x8b2>
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	031b      	lsls	r3, r3, #12
 800a820:	42ab      	cmp	r3, r5
 800a822:	d12c      	bne.n	800a87e <_dtoa_r+0x8b2>
 800a824:	4b72      	ldr	r3, [pc, #456]	; (800a9f0 <_dtoa_r+0xa24>)
 800a826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a828:	4213      	tst	r3, r2
 800a82a:	d028      	beq.n	800a87e <_dtoa_r+0x8b2>
 800a82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a82e:	3501      	adds	r5, #1
 800a830:	3301      	adds	r3, #1
 800a832:	930a      	str	r3, [sp, #40]	; 0x28
 800a834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a836:	3301      	adds	r3, #1
 800a838:	930c      	str	r3, [sp, #48]	; 0x30
 800a83a:	e020      	b.n	800a87e <_dtoa_r+0x8b2>
 800a83c:	2336      	movs	r3, #54	; 0x36
 800a83e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a840:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a842:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	e795      	b.n	800a774 <_dtoa_r+0x7a8>
 800a848:	9b07      	ldr	r3, [sp, #28]
 800a84a:	1e5d      	subs	r5, r3, #1
 800a84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a84e:	42ab      	cmp	r3, r5
 800a850:	db07      	blt.n	800a862 <_dtoa_r+0x896>
 800a852:	1b5d      	subs	r5, r3, r5
 800a854:	9b07      	ldr	r3, [sp, #28]
 800a856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	da8b      	bge.n	800a774 <_dtoa_r+0x7a8>
 800a85c:	1ae4      	subs	r4, r4, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	e788      	b.n	800a774 <_dtoa_r+0x7a8>
 800a862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a866:	1aeb      	subs	r3, r5, r3
 800a868:	18d3      	adds	r3, r2, r3
 800a86a:	950d      	str	r5, [sp, #52]	; 0x34
 800a86c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a86e:	2500      	movs	r5, #0
 800a870:	e7f0      	b.n	800a854 <_dtoa_r+0x888>
 800a872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a874:	e7b7      	b.n	800a7e6 <_dtoa_r+0x81a>
 800a876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a878:	2500      	movs	r5, #0
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	ddca      	ble.n	800a814 <_dtoa_r+0x848>
 800a87e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a880:	2001      	movs	r0, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <_dtoa_r+0x8cc>
 800a886:	6933      	ldr	r3, [r6, #16]
 800a888:	3303      	adds	r3, #3
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	18f3      	adds	r3, r6, r3
 800a88e:	6858      	ldr	r0, [r3, #4]
 800a890:	f000 fb5e 	bl	800af50 <__hi0bits>
 800a894:	2320      	movs	r3, #32
 800a896:	1a18      	subs	r0, r3, r0
 800a898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a89a:	1818      	adds	r0, r3, r0
 800a89c:	0002      	movs	r2, r0
 800a89e:	231f      	movs	r3, #31
 800a8a0:	401a      	ands	r2, r3
 800a8a2:	4218      	tst	r0, r3
 800a8a4:	d047      	beq.n	800a936 <_dtoa_r+0x96a>
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	1a9b      	subs	r3, r3, r2
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	dd3f      	ble.n	800a92e <_dtoa_r+0x962>
 800a8ae:	231c      	movs	r3, #28
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b4:	18e4      	adds	r4, r4, r3
 800a8b6:	18d2      	adds	r2, r2, r3
 800a8b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8bc:	18d3      	adds	r3, r2, r3
 800a8be:	930c      	str	r3, [sp, #48]	; 0x30
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dd05      	ble.n	800a8d2 <_dtoa_r+0x906>
 800a8c6:	001a      	movs	r2, r3
 800a8c8:	9905      	ldr	r1, [sp, #20]
 800a8ca:	9804      	ldr	r0, [sp, #16]
 800a8cc:	f000 fcac 	bl	800b228 <__lshift>
 800a8d0:	9005      	str	r0, [sp, #20]
 800a8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dd05      	ble.n	800a8e4 <_dtoa_r+0x918>
 800a8d8:	0031      	movs	r1, r6
 800a8da:	001a      	movs	r2, r3
 800a8dc:	9804      	ldr	r0, [sp, #16]
 800a8de:	f000 fca3 	bl	800b228 <__lshift>
 800a8e2:	0006      	movs	r6, r0
 800a8e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d027      	beq.n	800a93a <_dtoa_r+0x96e>
 800a8ea:	0031      	movs	r1, r6
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	f000 fd09 	bl	800b304 <__mcmp>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	da21      	bge.n	800a93a <_dtoa_r+0x96e>
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	9905      	ldr	r1, [sp, #20]
 800a900:	2300      	movs	r3, #0
 800a902:	9804      	ldr	r0, [sp, #16]
 800a904:	f000 fae0 	bl	800aec8 <__multadd>
 800a908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a90a:	9005      	str	r0, [sp, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d100      	bne.n	800a912 <_dtoa_r+0x946>
 800a910:	e15d      	b.n	800abce <_dtoa_r+0xc02>
 800a912:	2300      	movs	r3, #0
 800a914:	0039      	movs	r1, r7
 800a916:	220a      	movs	r2, #10
 800a918:	9804      	ldr	r0, [sp, #16]
 800a91a:	f000 fad5 	bl	800aec8 <__multadd>
 800a91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a920:	0007      	movs	r7, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	dc49      	bgt.n	800a9ba <_dtoa_r+0x9ee>
 800a926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a928:	2b02      	cmp	r3, #2
 800a92a:	dc0e      	bgt.n	800a94a <_dtoa_r+0x97e>
 800a92c:	e045      	b.n	800a9ba <_dtoa_r+0x9ee>
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d0c6      	beq.n	800a8c0 <_dtoa_r+0x8f4>
 800a932:	331c      	adds	r3, #28
 800a934:	e7bd      	b.n	800a8b2 <_dtoa_r+0x8e6>
 800a936:	0013      	movs	r3, r2
 800a938:	e7fb      	b.n	800a932 <_dtoa_r+0x966>
 800a93a:	9b07      	ldr	r3, [sp, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dc36      	bgt.n	800a9ae <_dtoa_r+0x9e2>
 800a940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a942:	2b02      	cmp	r3, #2
 800a944:	dd33      	ble.n	800a9ae <_dtoa_r+0x9e2>
 800a946:	9b07      	ldr	r3, [sp, #28]
 800a948:	930b      	str	r3, [sp, #44]	; 0x2c
 800a94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10c      	bne.n	800a96a <_dtoa_r+0x99e>
 800a950:	0031      	movs	r1, r6
 800a952:	2205      	movs	r2, #5
 800a954:	9804      	ldr	r0, [sp, #16]
 800a956:	f000 fab7 	bl	800aec8 <__multadd>
 800a95a:	0006      	movs	r6, r0
 800a95c:	0001      	movs	r1, r0
 800a95e:	9805      	ldr	r0, [sp, #20]
 800a960:	f000 fcd0 	bl	800b304 <__mcmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	dd00      	ble.n	800a96a <_dtoa_r+0x99e>
 800a968:	e59f      	b.n	800a4aa <_dtoa_r+0x4de>
 800a96a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a96c:	43db      	mvns	r3, r3
 800a96e:	9303      	str	r3, [sp, #12]
 800a970:	9b06      	ldr	r3, [sp, #24]
 800a972:	9308      	str	r3, [sp, #32]
 800a974:	2500      	movs	r5, #0
 800a976:	0031      	movs	r1, r6
 800a978:	9804      	ldr	r0, [sp, #16]
 800a97a:	f000 fa81 	bl	800ae80 <_Bfree>
 800a97e:	2f00      	cmp	r7, #0
 800a980:	d100      	bne.n	800a984 <_dtoa_r+0x9b8>
 800a982:	e6a3      	b.n	800a6cc <_dtoa_r+0x700>
 800a984:	2d00      	cmp	r5, #0
 800a986:	d005      	beq.n	800a994 <_dtoa_r+0x9c8>
 800a988:	42bd      	cmp	r5, r7
 800a98a:	d003      	beq.n	800a994 <_dtoa_r+0x9c8>
 800a98c:	0029      	movs	r1, r5
 800a98e:	9804      	ldr	r0, [sp, #16]
 800a990:	f000 fa76 	bl	800ae80 <_Bfree>
 800a994:	0039      	movs	r1, r7
 800a996:	9804      	ldr	r0, [sp, #16]
 800a998:	f000 fa72 	bl	800ae80 <_Bfree>
 800a99c:	e696      	b.n	800a6cc <_dtoa_r+0x700>
 800a99e:	2600      	movs	r6, #0
 800a9a0:	0037      	movs	r7, r6
 800a9a2:	e7e2      	b.n	800a96a <_dtoa_r+0x99e>
 800a9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	0037      	movs	r7, r6
 800a9ac:	e57d      	b.n	800a4aa <_dtoa_r+0x4de>
 800a9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d100      	bne.n	800a9b6 <_dtoa_r+0x9ea>
 800a9b4:	e0c3      	b.n	800ab3e <_dtoa_r+0xb72>
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	dd05      	ble.n	800a9ca <_dtoa_r+0x9fe>
 800a9be:	0039      	movs	r1, r7
 800a9c0:	0022      	movs	r2, r4
 800a9c2:	9804      	ldr	r0, [sp, #16]
 800a9c4:	f000 fc30 	bl	800b228 <__lshift>
 800a9c8:	0007      	movs	r7, r0
 800a9ca:	0038      	movs	r0, r7
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	d024      	beq.n	800aa1a <_dtoa_r+0xa4e>
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	9804      	ldr	r0, [sp, #16]
 800a9d4:	f000 fa10 	bl	800adf8 <_Balloc>
 800a9d8:	1e04      	subs	r4, r0, #0
 800a9da:	d111      	bne.n	800aa00 <_dtoa_r+0xa34>
 800a9dc:	0022      	movs	r2, r4
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <_dtoa_r+0xa28>)
 800a9e0:	4805      	ldr	r0, [pc, #20]	; (800a9f8 <_dtoa_r+0xa2c>)
 800a9e2:	4906      	ldr	r1, [pc, #24]	; (800a9fc <_dtoa_r+0xa30>)
 800a9e4:	f7ff fb07 	bl	8009ff6 <_dtoa_r+0x2a>
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	00000433 	.word	0x00000433
 800a9f0:	7ff00000 	.word	0x7ff00000
 800a9f4:	0800c2b0 	.word	0x0800c2b0
 800a9f8:	0800c258 	.word	0x0800c258
 800a9fc:	000002ef 	.word	0x000002ef
 800aa00:	0039      	movs	r1, r7
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	310c      	adds	r1, #12
 800aa06:	3202      	adds	r2, #2
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	300c      	adds	r0, #12
 800aa0c:	f000 ffca 	bl	800b9a4 <memcpy>
 800aa10:	2201      	movs	r2, #1
 800aa12:	0021      	movs	r1, r4
 800aa14:	9804      	ldr	r0, [sp, #16]
 800aa16:	f000 fc07 	bl	800b228 <__lshift>
 800aa1a:	9b06      	ldr	r3, [sp, #24]
 800aa1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa1e:	9307      	str	r3, [sp, #28]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	2201      	movs	r2, #1
 800aa26:	003d      	movs	r5, r7
 800aa28:	0007      	movs	r7, r0
 800aa2a:	930e      	str	r3, [sp, #56]	; 0x38
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	930d      	str	r3, [sp, #52]	; 0x34
 800aa32:	0031      	movs	r1, r6
 800aa34:	9805      	ldr	r0, [sp, #20]
 800aa36:	f7ff fa39 	bl	8009eac <quorem>
 800aa3a:	0029      	movs	r1, r5
 800aa3c:	0004      	movs	r4, r0
 800aa3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa40:	9805      	ldr	r0, [sp, #20]
 800aa42:	f000 fc5f 	bl	800b304 <__mcmp>
 800aa46:	003a      	movs	r2, r7
 800aa48:	900c      	str	r0, [sp, #48]	; 0x30
 800aa4a:	0031      	movs	r1, r6
 800aa4c:	9804      	ldr	r0, [sp, #16]
 800aa4e:	f000 fc75 	bl	800b33c <__mdiff>
 800aa52:	2201      	movs	r2, #1
 800aa54:	68c3      	ldr	r3, [r0, #12]
 800aa56:	3430      	adds	r4, #48	; 0x30
 800aa58:	9008      	str	r0, [sp, #32]
 800aa5a:	920a      	str	r2, [sp, #40]	; 0x28
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d104      	bne.n	800aa6a <_dtoa_r+0xa9e>
 800aa60:	0001      	movs	r1, r0
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	f000 fc4e 	bl	800b304 <__mcmp>
 800aa68:	900a      	str	r0, [sp, #40]	; 0x28
 800aa6a:	9908      	ldr	r1, [sp, #32]
 800aa6c:	9804      	ldr	r0, [sp, #16]
 800aa6e:	f000 fa07 	bl	800ae80 <_Bfree>
 800aa72:	9b07      	ldr	r3, [sp, #28]
 800aa74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa76:	3301      	adds	r3, #1
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa80:	4313      	orrs	r3, r2
 800aa82:	d109      	bne.n	800aa98 <_dtoa_r+0xacc>
 800aa84:	2c39      	cmp	r4, #57	; 0x39
 800aa86:	d022      	beq.n	800aace <_dtoa_r+0xb02>
 800aa88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd01      	ble.n	800aa92 <_dtoa_r+0xac6>
 800aa8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aa90:	3431      	adds	r4, #49	; 0x31
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	701c      	strb	r4, [r3, #0]
 800aa96:	e76e      	b.n	800a976 <_dtoa_r+0x9aa>
 800aa98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	db04      	blt.n	800aaa8 <_dtoa_r+0xadc>
 800aa9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	d11e      	bne.n	800aae6 <_dtoa_r+0xb1a>
 800aaa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	ddf1      	ble.n	800aa92 <_dtoa_r+0xac6>
 800aaae:	9905      	ldr	r1, [sp, #20]
 800aab0:	2201      	movs	r2, #1
 800aab2:	9804      	ldr	r0, [sp, #16]
 800aab4:	f000 fbb8 	bl	800b228 <__lshift>
 800aab8:	0031      	movs	r1, r6
 800aaba:	9005      	str	r0, [sp, #20]
 800aabc:	f000 fc22 	bl	800b304 <__mcmp>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	dc02      	bgt.n	800aaca <_dtoa_r+0xafe>
 800aac4:	d1e5      	bne.n	800aa92 <_dtoa_r+0xac6>
 800aac6:	07e3      	lsls	r3, r4, #31
 800aac8:	d5e3      	bpl.n	800aa92 <_dtoa_r+0xac6>
 800aaca:	2c39      	cmp	r4, #57	; 0x39
 800aacc:	d1df      	bne.n	800aa8e <_dtoa_r+0xac2>
 800aace:	2339      	movs	r3, #57	; 0x39
 800aad0:	9a07      	ldr	r2, [sp, #28]
 800aad2:	7013      	strb	r3, [r2, #0]
 800aad4:	9b08      	ldr	r3, [sp, #32]
 800aad6:	9308      	str	r3, [sp, #32]
 800aad8:	3b01      	subs	r3, #1
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	2a39      	cmp	r2, #57	; 0x39
 800aade:	d063      	beq.n	800aba8 <_dtoa_r+0xbdc>
 800aae0:	3201      	adds	r2, #1
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	e747      	b.n	800a976 <_dtoa_r+0x9aa>
 800aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	dd03      	ble.n	800aaf4 <_dtoa_r+0xb28>
 800aaec:	2c39      	cmp	r4, #57	; 0x39
 800aaee:	d0ee      	beq.n	800aace <_dtoa_r+0xb02>
 800aaf0:	3401      	adds	r4, #1
 800aaf2:	e7ce      	b.n	800aa92 <_dtoa_r+0xac6>
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	9a07      	ldr	r2, [sp, #28]
 800aaf8:	701c      	strb	r4, [r3, #0]
 800aafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d03e      	beq.n	800ab7e <_dtoa_r+0xbb2>
 800ab00:	2300      	movs	r3, #0
 800ab02:	220a      	movs	r2, #10
 800ab04:	9905      	ldr	r1, [sp, #20]
 800ab06:	9804      	ldr	r0, [sp, #16]
 800ab08:	f000 f9de 	bl	800aec8 <__multadd>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9005      	str	r0, [sp, #20]
 800ab10:	220a      	movs	r2, #10
 800ab12:	0029      	movs	r1, r5
 800ab14:	9804      	ldr	r0, [sp, #16]
 800ab16:	42bd      	cmp	r5, r7
 800ab18:	d106      	bne.n	800ab28 <_dtoa_r+0xb5c>
 800ab1a:	f000 f9d5 	bl	800aec8 <__multadd>
 800ab1e:	0005      	movs	r5, r0
 800ab20:	0007      	movs	r7, r0
 800ab22:	9b08      	ldr	r3, [sp, #32]
 800ab24:	9307      	str	r3, [sp, #28]
 800ab26:	e784      	b.n	800aa32 <_dtoa_r+0xa66>
 800ab28:	f000 f9ce 	bl	800aec8 <__multadd>
 800ab2c:	0039      	movs	r1, r7
 800ab2e:	0005      	movs	r5, r0
 800ab30:	2300      	movs	r3, #0
 800ab32:	220a      	movs	r2, #10
 800ab34:	9804      	ldr	r0, [sp, #16]
 800ab36:	f000 f9c7 	bl	800aec8 <__multadd>
 800ab3a:	0007      	movs	r7, r0
 800ab3c:	e7f1      	b.n	800ab22 <_dtoa_r+0xb56>
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab42:	2500      	movs	r5, #0
 800ab44:	0031      	movs	r1, r6
 800ab46:	9805      	ldr	r0, [sp, #20]
 800ab48:	f7ff f9b0 	bl	8009eac <quorem>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	3030      	adds	r0, #48	; 0x30
 800ab50:	5558      	strb	r0, [r3, r5]
 800ab52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab54:	3501      	adds	r5, #1
 800ab56:	0004      	movs	r4, r0
 800ab58:	42ab      	cmp	r3, r5
 800ab5a:	dd07      	ble.n	800ab6c <_dtoa_r+0xba0>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	220a      	movs	r2, #10
 800ab60:	9905      	ldr	r1, [sp, #20]
 800ab62:	9804      	ldr	r0, [sp, #16]
 800ab64:	f000 f9b0 	bl	800aec8 <__multadd>
 800ab68:	9005      	str	r0, [sp, #20]
 800ab6a:	e7eb      	b.n	800ab44 <_dtoa_r+0xb78>
 800ab6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab6e:	2301      	movs	r3, #1
 800ab70:	2a00      	cmp	r2, #0
 800ab72:	dd00      	ble.n	800ab76 <_dtoa_r+0xbaa>
 800ab74:	0013      	movs	r3, r2
 800ab76:	2500      	movs	r5, #0
 800ab78:	9a06      	ldr	r2, [sp, #24]
 800ab7a:	18d3      	adds	r3, r2, r3
 800ab7c:	9308      	str	r3, [sp, #32]
 800ab7e:	9905      	ldr	r1, [sp, #20]
 800ab80:	2201      	movs	r2, #1
 800ab82:	9804      	ldr	r0, [sp, #16]
 800ab84:	f000 fb50 	bl	800b228 <__lshift>
 800ab88:	0031      	movs	r1, r6
 800ab8a:	9005      	str	r0, [sp, #20]
 800ab8c:	f000 fbba 	bl	800b304 <__mcmp>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	dc9f      	bgt.n	800aad4 <_dtoa_r+0xb08>
 800ab94:	d101      	bne.n	800ab9a <_dtoa_r+0xbce>
 800ab96:	07e4      	lsls	r4, r4, #31
 800ab98:	d49c      	bmi.n	800aad4 <_dtoa_r+0xb08>
 800ab9a:	9b08      	ldr	r3, [sp, #32]
 800ab9c:	9308      	str	r3, [sp, #32]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	2a30      	cmp	r2, #48	; 0x30
 800aba4:	d0fa      	beq.n	800ab9c <_dtoa_r+0xbd0>
 800aba6:	e6e6      	b.n	800a976 <_dtoa_r+0x9aa>
 800aba8:	9a06      	ldr	r2, [sp, #24]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d193      	bne.n	800aad6 <_dtoa_r+0xb0a>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	9303      	str	r3, [sp, #12]
 800abb4:	2331      	movs	r3, #49	; 0x31
 800abb6:	7013      	strb	r3, [r2, #0]
 800abb8:	e6dd      	b.n	800a976 <_dtoa_r+0x9aa>
 800abba:	4b09      	ldr	r3, [pc, #36]	; (800abe0 <_dtoa_r+0xc14>)
 800abbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abbe:	9306      	str	r3, [sp, #24]
 800abc0:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <_dtoa_r+0xc18>)
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d001      	beq.n	800abca <_dtoa_r+0xbfe>
 800abc6:	f7ff fa49 	bl	800a05c <_dtoa_r+0x90>
 800abca:	f7ff fa49 	bl	800a060 <_dtoa_r+0x94>
 800abce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dcb6      	bgt.n	800ab42 <_dtoa_r+0xb76>
 800abd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	dd00      	ble.n	800abdc <_dtoa_r+0xc10>
 800abda:	e6b6      	b.n	800a94a <_dtoa_r+0x97e>
 800abdc:	e7b1      	b.n	800ab42 <_dtoa_r+0xb76>
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	0800c234 	.word	0x0800c234
 800abe4:	0800c23c 	.word	0x0800c23c

0800abe8 <_free_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	0005      	movs	r5, r0
 800abec:	2900      	cmp	r1, #0
 800abee:	d010      	beq.n	800ac12 <_free_r+0x2a>
 800abf0:	1f0c      	subs	r4, r1, #4
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da00      	bge.n	800abfa <_free_r+0x12>
 800abf8:	18e4      	adds	r4, r4, r3
 800abfa:	0028      	movs	r0, r5
 800abfc:	f000 f8ec 	bl	800add8 <__malloc_lock>
 800ac00:	4a1d      	ldr	r2, [pc, #116]	; (800ac78 <_free_r+0x90>)
 800ac02:	6813      	ldr	r3, [r2, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <_free_r+0x2c>
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	6014      	str	r4, [r2, #0]
 800ac0c:	0028      	movs	r0, r5
 800ac0e:	f000 f8eb 	bl	800ade8 <__malloc_unlock>
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	d908      	bls.n	800ac2a <_free_r+0x42>
 800ac18:	6820      	ldr	r0, [r4, #0]
 800ac1a:	1821      	adds	r1, r4, r0
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	d1f3      	bne.n	800ac08 <_free_r+0x20>
 800ac20:	6819      	ldr	r1, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	1809      	adds	r1, r1, r0
 800ac26:	6021      	str	r1, [r4, #0]
 800ac28:	e7ee      	b.n	800ac08 <_free_r+0x20>
 800ac2a:	001a      	movs	r2, r3
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <_free_r+0x4e>
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	d9f9      	bls.n	800ac2a <_free_r+0x42>
 800ac36:	6811      	ldr	r1, [r2, #0]
 800ac38:	1850      	adds	r0, r2, r1
 800ac3a:	42a0      	cmp	r0, r4
 800ac3c:	d10b      	bne.n	800ac56 <_free_r+0x6e>
 800ac3e:	6820      	ldr	r0, [r4, #0]
 800ac40:	1809      	adds	r1, r1, r0
 800ac42:	1850      	adds	r0, r2, r1
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	4283      	cmp	r3, r0
 800ac48:	d1e0      	bne.n	800ac0c <_free_r+0x24>
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	1841      	adds	r1, r0, r1
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	6053      	str	r3, [r2, #4]
 800ac54:	e7da      	b.n	800ac0c <_free_r+0x24>
 800ac56:	42a0      	cmp	r0, r4
 800ac58:	d902      	bls.n	800ac60 <_free_r+0x78>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	602b      	str	r3, [r5, #0]
 800ac5e:	e7d5      	b.n	800ac0c <_free_r+0x24>
 800ac60:	6820      	ldr	r0, [r4, #0]
 800ac62:	1821      	adds	r1, r4, r0
 800ac64:	428b      	cmp	r3, r1
 800ac66:	d103      	bne.n	800ac70 <_free_r+0x88>
 800ac68:	6819      	ldr	r1, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	1809      	adds	r1, r1, r0
 800ac6e:	6021      	str	r1, [r4, #0]
 800ac70:	6063      	str	r3, [r4, #4]
 800ac72:	6054      	str	r4, [r2, #4]
 800ac74:	e7ca      	b.n	800ac0c <_free_r+0x24>
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	20000630 	.word	0x20000630

0800ac7c <malloc>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <malloc+0x10>)
 800ac80:	0001      	movs	r1, r0
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	f000 f826 	bl	800acd4 <_malloc_r>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	20000064 	.word	0x20000064

0800ac90 <sbrk_aligned>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4e0f      	ldr	r6, [pc, #60]	; (800acd0 <sbrk_aligned+0x40>)
 800ac94:	000d      	movs	r5, r1
 800ac96:	6831      	ldr	r1, [r6, #0]
 800ac98:	0004      	movs	r4, r0
 800ac9a:	2900      	cmp	r1, #0
 800ac9c:	d102      	bne.n	800aca4 <sbrk_aligned+0x14>
 800ac9e:	f000 fe6f 	bl	800b980 <_sbrk_r>
 800aca2:	6030      	str	r0, [r6, #0]
 800aca4:	0029      	movs	r1, r5
 800aca6:	0020      	movs	r0, r4
 800aca8:	f000 fe6a 	bl	800b980 <_sbrk_r>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d00a      	beq.n	800acc6 <sbrk_aligned+0x36>
 800acb0:	2303      	movs	r3, #3
 800acb2:	1cc5      	adds	r5, r0, #3
 800acb4:	439d      	bics	r5, r3
 800acb6:	42a8      	cmp	r0, r5
 800acb8:	d007      	beq.n	800acca <sbrk_aligned+0x3a>
 800acba:	1a29      	subs	r1, r5, r0
 800acbc:	0020      	movs	r0, r4
 800acbe:	f000 fe5f 	bl	800b980 <_sbrk_r>
 800acc2:	3001      	adds	r0, #1
 800acc4:	d101      	bne.n	800acca <sbrk_aligned+0x3a>
 800acc6:	2501      	movs	r5, #1
 800acc8:	426d      	negs	r5, r5
 800acca:	0028      	movs	r0, r5
 800accc:	bd70      	pop	{r4, r5, r6, pc}
 800acce:	46c0      	nop			; (mov r8, r8)
 800acd0:	20000634 	.word	0x20000634

0800acd4 <_malloc_r>:
 800acd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acd6:	2203      	movs	r2, #3
 800acd8:	1ccb      	adds	r3, r1, #3
 800acda:	4393      	bics	r3, r2
 800acdc:	3308      	adds	r3, #8
 800acde:	0006      	movs	r6, r0
 800ace0:	001f      	movs	r7, r3
 800ace2:	2b0c      	cmp	r3, #12
 800ace4:	d238      	bcs.n	800ad58 <_malloc_r+0x84>
 800ace6:	270c      	movs	r7, #12
 800ace8:	42b9      	cmp	r1, r7
 800acea:	d837      	bhi.n	800ad5c <_malloc_r+0x88>
 800acec:	0030      	movs	r0, r6
 800acee:	f000 f873 	bl	800add8 <__malloc_lock>
 800acf2:	4b38      	ldr	r3, [pc, #224]	; (800add4 <_malloc_r+0x100>)
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	001c      	movs	r4, r3
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d133      	bne.n	800ad66 <_malloc_r+0x92>
 800acfe:	0039      	movs	r1, r7
 800ad00:	0030      	movs	r0, r6
 800ad02:	f7ff ffc5 	bl	800ac90 <sbrk_aligned>
 800ad06:	0004      	movs	r4, r0
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d15e      	bne.n	800adca <_malloc_r+0xf6>
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	681c      	ldr	r4, [r3, #0]
 800ad10:	0025      	movs	r5, r4
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	d14e      	bne.n	800adb4 <_malloc_r+0xe0>
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	d051      	beq.n	800adbe <_malloc_r+0xea>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	0029      	movs	r1, r5
 800ad1e:	18e3      	adds	r3, r4, r3
 800ad20:	0030      	movs	r0, r6
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	f000 fe2c 	bl	800b980 <_sbrk_r>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	4283      	cmp	r3, r0
 800ad2c:	d147      	bne.n	800adbe <_malloc_r+0xea>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	0030      	movs	r0, r6
 800ad32:	1aff      	subs	r7, r7, r3
 800ad34:	0039      	movs	r1, r7
 800ad36:	f7ff ffab 	bl	800ac90 <sbrk_aligned>
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d03f      	beq.n	800adbe <_malloc_r+0xea>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	19db      	adds	r3, r3, r7
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	9b00      	ldr	r3, [sp, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d040      	beq.n	800adce <_malloc_r+0xfa>
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	42a2      	cmp	r2, r4
 800ad50:	d133      	bne.n	800adba <_malloc_r+0xe6>
 800ad52:	2200      	movs	r2, #0
 800ad54:	605a      	str	r2, [r3, #4]
 800ad56:	e014      	b.n	800ad82 <_malloc_r+0xae>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dac5      	bge.n	800ace8 <_malloc_r+0x14>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	2500      	movs	r5, #0
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	0028      	movs	r0, r5
 800ad64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad66:	6821      	ldr	r1, [r4, #0]
 800ad68:	1bc9      	subs	r1, r1, r7
 800ad6a:	d420      	bmi.n	800adae <_malloc_r+0xda>
 800ad6c:	290b      	cmp	r1, #11
 800ad6e:	d918      	bls.n	800ada2 <_malloc_r+0xce>
 800ad70:	19e2      	adds	r2, r4, r7
 800ad72:	6027      	str	r7, [r4, #0]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	d112      	bne.n	800ad9e <_malloc_r+0xca>
 800ad78:	9b00      	ldr	r3, [sp, #0]
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	6011      	str	r1, [r2, #0]
 800ad80:	6053      	str	r3, [r2, #4]
 800ad82:	0030      	movs	r0, r6
 800ad84:	0025      	movs	r5, r4
 800ad86:	f000 f82f 	bl	800ade8 <__malloc_unlock>
 800ad8a:	2207      	movs	r2, #7
 800ad8c:	350b      	adds	r5, #11
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	4395      	bics	r5, r2
 800ad92:	1aea      	subs	r2, r5, r3
 800ad94:	429d      	cmp	r5, r3
 800ad96:	d0e4      	beq.n	800ad62 <_malloc_r+0x8e>
 800ad98:	1b5b      	subs	r3, r3, r5
 800ad9a:	50a3      	str	r3, [r4, r2]
 800ad9c:	e7e1      	b.n	800ad62 <_malloc_r+0x8e>
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	e7ec      	b.n	800ad7c <_malloc_r+0xa8>
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	d1d5      	bne.n	800ad54 <_malloc_r+0x80>
 800ada8:	9b00      	ldr	r3, [sp, #0]
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	e7e9      	b.n	800ad82 <_malloc_r+0xae>
 800adae:	0023      	movs	r3, r4
 800adb0:	6864      	ldr	r4, [r4, #4]
 800adb2:	e7a2      	b.n	800acfa <_malloc_r+0x26>
 800adb4:	002c      	movs	r4, r5
 800adb6:	686d      	ldr	r5, [r5, #4]
 800adb8:	e7ab      	b.n	800ad12 <_malloc_r+0x3e>
 800adba:	0013      	movs	r3, r2
 800adbc:	e7c4      	b.n	800ad48 <_malloc_r+0x74>
 800adbe:	230c      	movs	r3, #12
 800adc0:	0030      	movs	r0, r6
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	f000 f810 	bl	800ade8 <__malloc_unlock>
 800adc8:	e7cb      	b.n	800ad62 <_malloc_r+0x8e>
 800adca:	6027      	str	r7, [r4, #0]
 800adcc:	e7d9      	b.n	800ad82 <_malloc_r+0xae>
 800adce:	605b      	str	r3, [r3, #4]
 800add0:	deff      	udf	#255	; 0xff
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	20000630 	.word	0x20000630

0800add8 <__malloc_lock>:
 800add8:	b510      	push	{r4, lr}
 800adda:	4802      	ldr	r0, [pc, #8]	; (800ade4 <__malloc_lock+0xc>)
 800addc:	f7ff f859 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	2000062c 	.word	0x2000062c

0800ade8 <__malloc_unlock>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4802      	ldr	r0, [pc, #8]	; (800adf4 <__malloc_unlock+0xc>)
 800adec:	f7ff f852 	bl	8009e94 <__retarget_lock_release_recursive>
 800adf0:	bd10      	pop	{r4, pc}
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	2000062c 	.word	0x2000062c

0800adf8 <_Balloc>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	69c5      	ldr	r5, [r0, #28]
 800adfc:	0006      	movs	r6, r0
 800adfe:	000c      	movs	r4, r1
 800ae00:	2d00      	cmp	r5, #0
 800ae02:	d10e      	bne.n	800ae22 <_Balloc+0x2a>
 800ae04:	2010      	movs	r0, #16
 800ae06:	f7ff ff39 	bl	800ac7c <malloc>
 800ae0a:	1e02      	subs	r2, r0, #0
 800ae0c:	61f0      	str	r0, [r6, #28]
 800ae0e:	d104      	bne.n	800ae1a <_Balloc+0x22>
 800ae10:	216b      	movs	r1, #107	; 0x6b
 800ae12:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <_Balloc+0x80>)
 800ae14:	4819      	ldr	r0, [pc, #100]	; (800ae7c <_Balloc+0x84>)
 800ae16:	f000 fdcf 	bl	800b9b8 <__assert_func>
 800ae1a:	6045      	str	r5, [r0, #4]
 800ae1c:	6085      	str	r5, [r0, #8]
 800ae1e:	6005      	str	r5, [r0, #0]
 800ae20:	60c5      	str	r5, [r0, #12]
 800ae22:	69f5      	ldr	r5, [r6, #28]
 800ae24:	68eb      	ldr	r3, [r5, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d013      	beq.n	800ae52 <_Balloc+0x5a>
 800ae2a:	69f3      	ldr	r3, [r6, #28]
 800ae2c:	00a2      	lsls	r2, r4, #2
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	6818      	ldr	r0, [r3, #0]
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d118      	bne.n	800ae6a <_Balloc+0x72>
 800ae38:	2101      	movs	r1, #1
 800ae3a:	000d      	movs	r5, r1
 800ae3c:	40a5      	lsls	r5, r4
 800ae3e:	1d6a      	adds	r2, r5, #5
 800ae40:	0030      	movs	r0, r6
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	f000 fdd6 	bl	800b9f4 <_calloc_r>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d00c      	beq.n	800ae66 <_Balloc+0x6e>
 800ae4c:	6044      	str	r4, [r0, #4]
 800ae4e:	6085      	str	r5, [r0, #8]
 800ae50:	e00d      	b.n	800ae6e <_Balloc+0x76>
 800ae52:	2221      	movs	r2, #33	; 0x21
 800ae54:	2104      	movs	r1, #4
 800ae56:	0030      	movs	r0, r6
 800ae58:	f000 fdcc 	bl	800b9f4 <_calloc_r>
 800ae5c:	69f3      	ldr	r3, [r6, #28]
 800ae5e:	60e8      	str	r0, [r5, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1e1      	bne.n	800ae2a <_Balloc+0x32>
 800ae66:	2000      	movs	r0, #0
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	6802      	ldr	r2, [r0, #0]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6103      	str	r3, [r0, #16]
 800ae72:	60c3      	str	r3, [r0, #12]
 800ae74:	e7f8      	b.n	800ae68 <_Balloc+0x70>
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	0800c241 	.word	0x0800c241
 800ae7c:	0800c2c1 	.word	0x0800c2c1

0800ae80 <_Bfree>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	69c6      	ldr	r6, [r0, #28]
 800ae84:	0005      	movs	r5, r0
 800ae86:	000c      	movs	r4, r1
 800ae88:	2e00      	cmp	r6, #0
 800ae8a:	d10e      	bne.n	800aeaa <_Bfree+0x2a>
 800ae8c:	2010      	movs	r0, #16
 800ae8e:	f7ff fef5 	bl	800ac7c <malloc>
 800ae92:	1e02      	subs	r2, r0, #0
 800ae94:	61e8      	str	r0, [r5, #28]
 800ae96:	d104      	bne.n	800aea2 <_Bfree+0x22>
 800ae98:	218f      	movs	r1, #143	; 0x8f
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <_Bfree+0x40>)
 800ae9c:	4809      	ldr	r0, [pc, #36]	; (800aec4 <_Bfree+0x44>)
 800ae9e:	f000 fd8b 	bl	800b9b8 <__assert_func>
 800aea2:	6046      	str	r6, [r0, #4]
 800aea4:	6086      	str	r6, [r0, #8]
 800aea6:	6006      	str	r6, [r0, #0]
 800aea8:	60c6      	str	r6, [r0, #12]
 800aeaa:	2c00      	cmp	r4, #0
 800aeac:	d007      	beq.n	800aebe <_Bfree+0x3e>
 800aeae:	69eb      	ldr	r3, [r5, #28]
 800aeb0:	6862      	ldr	r2, [r4, #4]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	0092      	lsls	r2, r2, #2
 800aeb6:	189b      	adds	r3, r3, r2
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	601c      	str	r4, [r3, #0]
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	0800c241 	.word	0x0800c241
 800aec4:	0800c2c1 	.word	0x0800c2c1

0800aec8 <__multadd>:
 800aec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeca:	000e      	movs	r6, r1
 800aecc:	9001      	str	r0, [sp, #4]
 800aece:	000c      	movs	r4, r1
 800aed0:	001d      	movs	r5, r3
 800aed2:	2000      	movs	r0, #0
 800aed4:	690f      	ldr	r7, [r1, #16]
 800aed6:	3614      	adds	r6, #20
 800aed8:	6833      	ldr	r3, [r6, #0]
 800aeda:	3001      	adds	r0, #1
 800aedc:	b299      	uxth	r1, r3
 800aede:	4351      	muls	r1, r2
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	4353      	muls	r3, r2
 800aee4:	1949      	adds	r1, r1, r5
 800aee6:	0c0d      	lsrs	r5, r1, #16
 800aee8:	195b      	adds	r3, r3, r5
 800aeea:	0c1d      	lsrs	r5, r3, #16
 800aeec:	b289      	uxth	r1, r1
 800aeee:	041b      	lsls	r3, r3, #16
 800aef0:	185b      	adds	r3, r3, r1
 800aef2:	c608      	stmia	r6!, {r3}
 800aef4:	4287      	cmp	r7, r0
 800aef6:	dcef      	bgt.n	800aed8 <__multadd+0x10>
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	d022      	beq.n	800af42 <__multadd+0x7a>
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	42bb      	cmp	r3, r7
 800af00:	dc19      	bgt.n	800af36 <__multadd+0x6e>
 800af02:	6861      	ldr	r1, [r4, #4]
 800af04:	9801      	ldr	r0, [sp, #4]
 800af06:	3101      	adds	r1, #1
 800af08:	f7ff ff76 	bl	800adf8 <_Balloc>
 800af0c:	1e06      	subs	r6, r0, #0
 800af0e:	d105      	bne.n	800af1c <__multadd+0x54>
 800af10:	0032      	movs	r2, r6
 800af12:	21ba      	movs	r1, #186	; 0xba
 800af14:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <__multadd+0x80>)
 800af16:	480d      	ldr	r0, [pc, #52]	; (800af4c <__multadd+0x84>)
 800af18:	f000 fd4e 	bl	800b9b8 <__assert_func>
 800af1c:	0021      	movs	r1, r4
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	310c      	adds	r1, #12
 800af22:	3202      	adds	r2, #2
 800af24:	0092      	lsls	r2, r2, #2
 800af26:	300c      	adds	r0, #12
 800af28:	f000 fd3c 	bl	800b9a4 <memcpy>
 800af2c:	0021      	movs	r1, r4
 800af2e:	9801      	ldr	r0, [sp, #4]
 800af30:	f7ff ffa6 	bl	800ae80 <_Bfree>
 800af34:	0034      	movs	r4, r6
 800af36:	1d3b      	adds	r3, r7, #4
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	18e3      	adds	r3, r4, r3
 800af3c:	605d      	str	r5, [r3, #4]
 800af3e:	1c7b      	adds	r3, r7, #1
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	0020      	movs	r0, r4
 800af44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	0800c2b0 	.word	0x0800c2b0
 800af4c:	0800c2c1 	.word	0x0800c2c1

0800af50 <__hi0bits>:
 800af50:	0003      	movs	r3, r0
 800af52:	0c02      	lsrs	r2, r0, #16
 800af54:	2000      	movs	r0, #0
 800af56:	4282      	cmp	r2, r0
 800af58:	d101      	bne.n	800af5e <__hi0bits+0xe>
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	3010      	adds	r0, #16
 800af5e:	0e1a      	lsrs	r2, r3, #24
 800af60:	d101      	bne.n	800af66 <__hi0bits+0x16>
 800af62:	3008      	adds	r0, #8
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	0f1a      	lsrs	r2, r3, #28
 800af68:	d101      	bne.n	800af6e <__hi0bits+0x1e>
 800af6a:	3004      	adds	r0, #4
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	0f9a      	lsrs	r2, r3, #30
 800af70:	d101      	bne.n	800af76 <__hi0bits+0x26>
 800af72:	3002      	adds	r0, #2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	db03      	blt.n	800af82 <__hi0bits+0x32>
 800af7a:	3001      	adds	r0, #1
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	d400      	bmi.n	800af82 <__hi0bits+0x32>
 800af80:	2020      	movs	r0, #32
 800af82:	4770      	bx	lr

0800af84 <__lo0bits>:
 800af84:	6803      	ldr	r3, [r0, #0]
 800af86:	0001      	movs	r1, r0
 800af88:	2207      	movs	r2, #7
 800af8a:	0018      	movs	r0, r3
 800af8c:	4010      	ands	r0, r2
 800af8e:	4213      	tst	r3, r2
 800af90:	d00d      	beq.n	800afae <__lo0bits+0x2a>
 800af92:	3a06      	subs	r2, #6
 800af94:	2000      	movs	r0, #0
 800af96:	4213      	tst	r3, r2
 800af98:	d105      	bne.n	800afa6 <__lo0bits+0x22>
 800af9a:	3002      	adds	r0, #2
 800af9c:	4203      	tst	r3, r0
 800af9e:	d003      	beq.n	800afa8 <__lo0bits+0x24>
 800afa0:	40d3      	lsrs	r3, r2
 800afa2:	0010      	movs	r0, r2
 800afa4:	600b      	str	r3, [r1, #0]
 800afa6:	4770      	bx	lr
 800afa8:	089b      	lsrs	r3, r3, #2
 800afaa:	600b      	str	r3, [r1, #0]
 800afac:	e7fb      	b.n	800afa6 <__lo0bits+0x22>
 800afae:	b29a      	uxth	r2, r3
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	d101      	bne.n	800afb8 <__lo0bits+0x34>
 800afb4:	2010      	movs	r0, #16
 800afb6:	0c1b      	lsrs	r3, r3, #16
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	2a00      	cmp	r2, #0
 800afbc:	d101      	bne.n	800afc2 <__lo0bits+0x3e>
 800afbe:	3008      	adds	r0, #8
 800afc0:	0a1b      	lsrs	r3, r3, #8
 800afc2:	071a      	lsls	r2, r3, #28
 800afc4:	d101      	bne.n	800afca <__lo0bits+0x46>
 800afc6:	3004      	adds	r0, #4
 800afc8:	091b      	lsrs	r3, r3, #4
 800afca:	079a      	lsls	r2, r3, #30
 800afcc:	d101      	bne.n	800afd2 <__lo0bits+0x4e>
 800afce:	3002      	adds	r0, #2
 800afd0:	089b      	lsrs	r3, r3, #2
 800afd2:	07da      	lsls	r2, r3, #31
 800afd4:	d4e9      	bmi.n	800afaa <__lo0bits+0x26>
 800afd6:	3001      	adds	r0, #1
 800afd8:	085b      	lsrs	r3, r3, #1
 800afda:	d1e6      	bne.n	800afaa <__lo0bits+0x26>
 800afdc:	2020      	movs	r0, #32
 800afde:	e7e2      	b.n	800afa6 <__lo0bits+0x22>

0800afe0 <__i2b>:
 800afe0:	b510      	push	{r4, lr}
 800afe2:	000c      	movs	r4, r1
 800afe4:	2101      	movs	r1, #1
 800afe6:	f7ff ff07 	bl	800adf8 <_Balloc>
 800afea:	2800      	cmp	r0, #0
 800afec:	d107      	bne.n	800affe <__i2b+0x1e>
 800afee:	2146      	movs	r1, #70	; 0x46
 800aff0:	4c05      	ldr	r4, [pc, #20]	; (800b008 <__i2b+0x28>)
 800aff2:	0002      	movs	r2, r0
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <__i2b+0x2c>)
 800aff6:	0020      	movs	r0, r4
 800aff8:	31ff      	adds	r1, #255	; 0xff
 800affa:	f000 fcdd 	bl	800b9b8 <__assert_func>
 800affe:	2301      	movs	r3, #1
 800b000:	6144      	str	r4, [r0, #20]
 800b002:	6103      	str	r3, [r0, #16]
 800b004:	bd10      	pop	{r4, pc}
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	0800c2c1 	.word	0x0800c2c1
 800b00c:	0800c2b0 	.word	0x0800c2b0

0800b010 <__multiply>:
 800b010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b012:	0015      	movs	r5, r2
 800b014:	690a      	ldr	r2, [r1, #16]
 800b016:	692b      	ldr	r3, [r5, #16]
 800b018:	000c      	movs	r4, r1
 800b01a:	b08b      	sub	sp, #44	; 0x2c
 800b01c:	429a      	cmp	r2, r3
 800b01e:	da01      	bge.n	800b024 <__multiply+0x14>
 800b020:	002c      	movs	r4, r5
 800b022:	000d      	movs	r5, r1
 800b024:	6927      	ldr	r7, [r4, #16]
 800b026:	692e      	ldr	r6, [r5, #16]
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	19bb      	adds	r3, r7, r6
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	19ba      	adds	r2, r7, r6
 800b032:	4293      	cmp	r3, r2
 800b034:	da00      	bge.n	800b038 <__multiply+0x28>
 800b036:	3101      	adds	r1, #1
 800b038:	f7ff fede 	bl	800adf8 <_Balloc>
 800b03c:	9002      	str	r0, [sp, #8]
 800b03e:	2800      	cmp	r0, #0
 800b040:	d106      	bne.n	800b050 <__multiply+0x40>
 800b042:	21b1      	movs	r1, #177	; 0xb1
 800b044:	4b48      	ldr	r3, [pc, #288]	; (800b168 <__multiply+0x158>)
 800b046:	4849      	ldr	r0, [pc, #292]	; (800b16c <__multiply+0x15c>)
 800b048:	9a02      	ldr	r2, [sp, #8]
 800b04a:	0049      	lsls	r1, r1, #1
 800b04c:	f000 fcb4 	bl	800b9b8 <__assert_func>
 800b050:	9b02      	ldr	r3, [sp, #8]
 800b052:	2200      	movs	r2, #0
 800b054:	3314      	adds	r3, #20
 800b056:	469c      	mov	ip, r3
 800b058:	19bb      	adds	r3, r7, r6
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4463      	add	r3, ip
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	4663      	mov	r3, ip
 800b062:	9904      	ldr	r1, [sp, #16]
 800b064:	428b      	cmp	r3, r1
 800b066:	d32a      	bcc.n	800b0be <__multiply+0xae>
 800b068:	0023      	movs	r3, r4
 800b06a:	00bf      	lsls	r7, r7, #2
 800b06c:	3314      	adds	r3, #20
 800b06e:	3514      	adds	r5, #20
 800b070:	9308      	str	r3, [sp, #32]
 800b072:	00b6      	lsls	r6, r6, #2
 800b074:	19db      	adds	r3, r3, r7
 800b076:	9305      	str	r3, [sp, #20]
 800b078:	19ab      	adds	r3, r5, r6
 800b07a:	9309      	str	r3, [sp, #36]	; 0x24
 800b07c:	2304      	movs	r3, #4
 800b07e:	9306      	str	r3, [sp, #24]
 800b080:	0023      	movs	r3, r4
 800b082:	9a05      	ldr	r2, [sp, #20]
 800b084:	3315      	adds	r3, #21
 800b086:	9501      	str	r5, [sp, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d305      	bcc.n	800b098 <__multiply+0x88>
 800b08c:	1b13      	subs	r3, r2, r4
 800b08e:	3b15      	subs	r3, #21
 800b090:	089b      	lsrs	r3, r3, #2
 800b092:	3301      	adds	r3, #1
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	9306      	str	r3, [sp, #24]
 800b098:	9b01      	ldr	r3, [sp, #4]
 800b09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d310      	bcc.n	800b0c2 <__multiply+0xb2>
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd05      	ble.n	800b0b2 <__multiply+0xa2>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	3b04      	subs	r3, #4
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d056      	beq.n	800b160 <__multiply+0x150>
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	9a03      	ldr	r2, [sp, #12]
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	611a      	str	r2, [r3, #16]
 800b0ba:	b00b      	add	sp, #44	; 0x2c
 800b0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0be:	c304      	stmia	r3!, {r2}
 800b0c0:	e7cf      	b.n	800b062 <__multiply+0x52>
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	b280      	uxth	r0, r0
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d01e      	beq.n	800b10a <__multiply+0xfa>
 800b0cc:	4667      	mov	r7, ip
 800b0ce:	2500      	movs	r5, #0
 800b0d0:	9e08      	ldr	r6, [sp, #32]
 800b0d2:	ce02      	ldmia	r6!, {r1}
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	b28b      	uxth	r3, r1
 800b0da:	4343      	muls	r3, r0
 800b0dc:	001a      	movs	r2, r3
 800b0de:	466b      	mov	r3, sp
 800b0e0:	8b9b      	ldrh	r3, [r3, #28]
 800b0e2:	18d3      	adds	r3, r2, r3
 800b0e4:	195b      	adds	r3, r3, r5
 800b0e6:	0c0d      	lsrs	r5, r1, #16
 800b0e8:	4345      	muls	r5, r0
 800b0ea:	9a07      	ldr	r2, [sp, #28]
 800b0ec:	0c11      	lsrs	r1, r2, #16
 800b0ee:	1869      	adds	r1, r5, r1
 800b0f0:	0c1a      	lsrs	r2, r3, #16
 800b0f2:	188a      	adds	r2, r1, r2
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	0c15      	lsrs	r5, r2, #16
 800b0f8:	0412      	lsls	r2, r2, #16
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	9b05      	ldr	r3, [sp, #20]
 800b0fe:	c704      	stmia	r7!, {r2}
 800b100:	42b3      	cmp	r3, r6
 800b102:	d8e6      	bhi.n	800b0d2 <__multiply+0xc2>
 800b104:	4663      	mov	r3, ip
 800b106:	9a06      	ldr	r2, [sp, #24]
 800b108:	509d      	str	r5, [r3, r2]
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	6818      	ldr	r0, [r3, #0]
 800b10e:	0c00      	lsrs	r0, r0, #16
 800b110:	d020      	beq.n	800b154 <__multiply+0x144>
 800b112:	4663      	mov	r3, ip
 800b114:	0025      	movs	r5, r4
 800b116:	4661      	mov	r1, ip
 800b118:	2700      	movs	r7, #0
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3514      	adds	r5, #20
 800b11e:	682a      	ldr	r2, [r5, #0]
 800b120:	680e      	ldr	r6, [r1, #0]
 800b122:	b292      	uxth	r2, r2
 800b124:	4342      	muls	r2, r0
 800b126:	0c36      	lsrs	r6, r6, #16
 800b128:	1992      	adds	r2, r2, r6
 800b12a:	19d2      	adds	r2, r2, r7
 800b12c:	0416      	lsls	r6, r2, #16
 800b12e:	b29b      	uxth	r3, r3
 800b130:	431e      	orrs	r6, r3
 800b132:	600e      	str	r6, [r1, #0]
 800b134:	cd40      	ldmia	r5!, {r6}
 800b136:	684b      	ldr	r3, [r1, #4]
 800b138:	0c36      	lsrs	r6, r6, #16
 800b13a:	4346      	muls	r6, r0
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	0c12      	lsrs	r2, r2, #16
 800b140:	18f3      	adds	r3, r6, r3
 800b142:	189b      	adds	r3, r3, r2
 800b144:	9a05      	ldr	r2, [sp, #20]
 800b146:	0c1f      	lsrs	r7, r3, #16
 800b148:	3104      	adds	r1, #4
 800b14a:	42aa      	cmp	r2, r5
 800b14c:	d8e7      	bhi.n	800b11e <__multiply+0x10e>
 800b14e:	4662      	mov	r2, ip
 800b150:	9906      	ldr	r1, [sp, #24]
 800b152:	5053      	str	r3, [r2, r1]
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	3304      	adds	r3, #4
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	2304      	movs	r3, #4
 800b15c:	449c      	add	ip, r3
 800b15e:	e79b      	b.n	800b098 <__multiply+0x88>
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	3b01      	subs	r3, #1
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	e79b      	b.n	800b0a0 <__multiply+0x90>
 800b168:	0800c2b0 	.word	0x0800c2b0
 800b16c:	0800c2c1 	.word	0x0800c2c1

0800b170 <__pow5mult>:
 800b170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b172:	2303      	movs	r3, #3
 800b174:	0015      	movs	r5, r2
 800b176:	0007      	movs	r7, r0
 800b178:	000e      	movs	r6, r1
 800b17a:	401a      	ands	r2, r3
 800b17c:	421d      	tst	r5, r3
 800b17e:	d008      	beq.n	800b192 <__pow5mult+0x22>
 800b180:	4925      	ldr	r1, [pc, #148]	; (800b218 <__pow5mult+0xa8>)
 800b182:	3a01      	subs	r2, #1
 800b184:	0092      	lsls	r2, r2, #2
 800b186:	5852      	ldr	r2, [r2, r1]
 800b188:	2300      	movs	r3, #0
 800b18a:	0031      	movs	r1, r6
 800b18c:	f7ff fe9c 	bl	800aec8 <__multadd>
 800b190:	0006      	movs	r6, r0
 800b192:	10ad      	asrs	r5, r5, #2
 800b194:	d03d      	beq.n	800b212 <__pow5mult+0xa2>
 800b196:	69fc      	ldr	r4, [r7, #28]
 800b198:	2c00      	cmp	r4, #0
 800b19a:	d10f      	bne.n	800b1bc <__pow5mult+0x4c>
 800b19c:	2010      	movs	r0, #16
 800b19e:	f7ff fd6d 	bl	800ac7c <malloc>
 800b1a2:	1e02      	subs	r2, r0, #0
 800b1a4:	61f8      	str	r0, [r7, #28]
 800b1a6:	d105      	bne.n	800b1b4 <__pow5mult+0x44>
 800b1a8:	21b4      	movs	r1, #180	; 0xb4
 800b1aa:	4b1c      	ldr	r3, [pc, #112]	; (800b21c <__pow5mult+0xac>)
 800b1ac:	481c      	ldr	r0, [pc, #112]	; (800b220 <__pow5mult+0xb0>)
 800b1ae:	31ff      	adds	r1, #255	; 0xff
 800b1b0:	f000 fc02 	bl	800b9b8 <__assert_func>
 800b1b4:	6044      	str	r4, [r0, #4]
 800b1b6:	6084      	str	r4, [r0, #8]
 800b1b8:	6004      	str	r4, [r0, #0]
 800b1ba:	60c4      	str	r4, [r0, #12]
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	689c      	ldr	r4, [r3, #8]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	d108      	bne.n	800b1d8 <__pow5mult+0x68>
 800b1c6:	0038      	movs	r0, r7
 800b1c8:	4916      	ldr	r1, [pc, #88]	; (800b224 <__pow5mult+0xb4>)
 800b1ca:	f7ff ff09 	bl	800afe0 <__i2b>
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	0004      	movs	r4, r0
 800b1d2:	6098      	str	r0, [r3, #8]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6003      	str	r3, [r0, #0]
 800b1d8:	2301      	movs	r3, #1
 800b1da:	421d      	tst	r5, r3
 800b1dc:	d00a      	beq.n	800b1f4 <__pow5mult+0x84>
 800b1de:	0031      	movs	r1, r6
 800b1e0:	0022      	movs	r2, r4
 800b1e2:	0038      	movs	r0, r7
 800b1e4:	f7ff ff14 	bl	800b010 <__multiply>
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	9001      	str	r0, [sp, #4]
 800b1ec:	0038      	movs	r0, r7
 800b1ee:	f7ff fe47 	bl	800ae80 <_Bfree>
 800b1f2:	9e01      	ldr	r6, [sp, #4]
 800b1f4:	106d      	asrs	r5, r5, #1
 800b1f6:	d00c      	beq.n	800b212 <__pow5mult+0xa2>
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d107      	bne.n	800b20e <__pow5mult+0x9e>
 800b1fe:	0022      	movs	r2, r4
 800b200:	0021      	movs	r1, r4
 800b202:	0038      	movs	r0, r7
 800b204:	f7ff ff04 	bl	800b010 <__multiply>
 800b208:	2300      	movs	r3, #0
 800b20a:	6020      	str	r0, [r4, #0]
 800b20c:	6003      	str	r3, [r0, #0]
 800b20e:	0004      	movs	r4, r0
 800b210:	e7e2      	b.n	800b1d8 <__pow5mult+0x68>
 800b212:	0030      	movs	r0, r6
 800b214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	0800c410 	.word	0x0800c410
 800b21c:	0800c241 	.word	0x0800c241
 800b220:	0800c2c1 	.word	0x0800c2c1
 800b224:	00000271 	.word	0x00000271

0800b228 <__lshift>:
 800b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22a:	000c      	movs	r4, r1
 800b22c:	0017      	movs	r7, r2
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	1155      	asrs	r5, r2, #5
 800b232:	b087      	sub	sp, #28
 800b234:	18eb      	adds	r3, r5, r3
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	3301      	adds	r3, #1
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	6849      	ldr	r1, [r1, #4]
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	9004      	str	r0, [sp, #16]
 800b242:	9a01      	ldr	r2, [sp, #4]
 800b244:	4293      	cmp	r3, r2
 800b246:	db10      	blt.n	800b26a <__lshift+0x42>
 800b248:	9804      	ldr	r0, [sp, #16]
 800b24a:	f7ff fdd5 	bl	800adf8 <_Balloc>
 800b24e:	2300      	movs	r3, #0
 800b250:	0002      	movs	r2, r0
 800b252:	0006      	movs	r6, r0
 800b254:	0019      	movs	r1, r3
 800b256:	3214      	adds	r2, #20
 800b258:	4298      	cmp	r0, r3
 800b25a:	d10c      	bne.n	800b276 <__lshift+0x4e>
 800b25c:	31df      	adds	r1, #223	; 0xdf
 800b25e:	0032      	movs	r2, r6
 800b260:	4b26      	ldr	r3, [pc, #152]	; (800b2fc <__lshift+0xd4>)
 800b262:	4827      	ldr	r0, [pc, #156]	; (800b300 <__lshift+0xd8>)
 800b264:	31ff      	adds	r1, #255	; 0xff
 800b266:	f000 fba7 	bl	800b9b8 <__assert_func>
 800b26a:	3101      	adds	r1, #1
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	e7e8      	b.n	800b242 <__lshift+0x1a>
 800b270:	0098      	lsls	r0, r3, #2
 800b272:	5011      	str	r1, [r2, r0]
 800b274:	3301      	adds	r3, #1
 800b276:	42ab      	cmp	r3, r5
 800b278:	dbfa      	blt.n	800b270 <__lshift+0x48>
 800b27a:	43eb      	mvns	r3, r5
 800b27c:	17db      	asrs	r3, r3, #31
 800b27e:	401d      	ands	r5, r3
 800b280:	211f      	movs	r1, #31
 800b282:	0023      	movs	r3, r4
 800b284:	0038      	movs	r0, r7
 800b286:	00ad      	lsls	r5, r5, #2
 800b288:	1955      	adds	r5, r2, r5
 800b28a:	6922      	ldr	r2, [r4, #16]
 800b28c:	3314      	adds	r3, #20
 800b28e:	0092      	lsls	r2, r2, #2
 800b290:	4008      	ands	r0, r1
 800b292:	4684      	mov	ip, r0
 800b294:	189a      	adds	r2, r3, r2
 800b296:	420f      	tst	r7, r1
 800b298:	d02a      	beq.n	800b2f0 <__lshift+0xc8>
 800b29a:	3101      	adds	r1, #1
 800b29c:	1a09      	subs	r1, r1, r0
 800b29e:	9105      	str	r1, [sp, #20]
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	9503      	str	r5, [sp, #12]
 800b2a4:	4667      	mov	r7, ip
 800b2a6:	6818      	ldr	r0, [r3, #0]
 800b2a8:	40b8      	lsls	r0, r7
 800b2aa:	4308      	orrs	r0, r1
 800b2ac:	9903      	ldr	r1, [sp, #12]
 800b2ae:	c101      	stmia	r1!, {r0}
 800b2b0:	9103      	str	r1, [sp, #12]
 800b2b2:	9805      	ldr	r0, [sp, #20]
 800b2b4:	cb02      	ldmia	r3!, {r1}
 800b2b6:	40c1      	lsrs	r1, r0
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d8f3      	bhi.n	800b2a4 <__lshift+0x7c>
 800b2bc:	0020      	movs	r0, r4
 800b2be:	3015      	adds	r0, #21
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	4282      	cmp	r2, r0
 800b2c4:	d304      	bcc.n	800b2d0 <__lshift+0xa8>
 800b2c6:	1b13      	subs	r3, r2, r4
 800b2c8:	3b15      	subs	r3, #21
 800b2ca:	089b      	lsrs	r3, r3, #2
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	50e9      	str	r1, [r5, r3]
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	d002      	beq.n	800b2dc <__lshift+0xb4>
 800b2d6:	9b02      	ldr	r3, [sp, #8]
 800b2d8:	3302      	adds	r3, #2
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	9804      	ldr	r0, [sp, #16]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	0021      	movs	r1, r4
 800b2e4:	6133      	str	r3, [r6, #16]
 800b2e6:	f7ff fdcb 	bl	800ae80 <_Bfree>
 800b2ea:	0030      	movs	r0, r6
 800b2ec:	b007      	add	sp, #28
 800b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f0:	cb02      	ldmia	r3!, {r1}
 800b2f2:	c502      	stmia	r5!, {r1}
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d8fb      	bhi.n	800b2f0 <__lshift+0xc8>
 800b2f8:	e7f0      	b.n	800b2dc <__lshift+0xb4>
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	0800c2b0 	.word	0x0800c2b0
 800b300:	0800c2c1 	.word	0x0800c2c1

0800b304 <__mcmp>:
 800b304:	b530      	push	{r4, r5, lr}
 800b306:	690b      	ldr	r3, [r1, #16]
 800b308:	6904      	ldr	r4, [r0, #16]
 800b30a:	0002      	movs	r2, r0
 800b30c:	1ae0      	subs	r0, r4, r3
 800b30e:	429c      	cmp	r4, r3
 800b310:	d10e      	bne.n	800b330 <__mcmp+0x2c>
 800b312:	3214      	adds	r2, #20
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	3114      	adds	r1, #20
 800b318:	0014      	movs	r4, r2
 800b31a:	18c9      	adds	r1, r1, r3
 800b31c:	18d2      	adds	r2, r2, r3
 800b31e:	3a04      	subs	r2, #4
 800b320:	3904      	subs	r1, #4
 800b322:	6815      	ldr	r5, [r2, #0]
 800b324:	680b      	ldr	r3, [r1, #0]
 800b326:	429d      	cmp	r5, r3
 800b328:	d003      	beq.n	800b332 <__mcmp+0x2e>
 800b32a:	2001      	movs	r0, #1
 800b32c:	429d      	cmp	r5, r3
 800b32e:	d303      	bcc.n	800b338 <__mcmp+0x34>
 800b330:	bd30      	pop	{r4, r5, pc}
 800b332:	4294      	cmp	r4, r2
 800b334:	d3f3      	bcc.n	800b31e <__mcmp+0x1a>
 800b336:	e7fb      	b.n	800b330 <__mcmp+0x2c>
 800b338:	4240      	negs	r0, r0
 800b33a:	e7f9      	b.n	800b330 <__mcmp+0x2c>

0800b33c <__mdiff>:
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	000e      	movs	r6, r1
 800b340:	0007      	movs	r7, r0
 800b342:	0011      	movs	r1, r2
 800b344:	0030      	movs	r0, r6
 800b346:	b087      	sub	sp, #28
 800b348:	0014      	movs	r4, r2
 800b34a:	f7ff ffdb 	bl	800b304 <__mcmp>
 800b34e:	1e05      	subs	r5, r0, #0
 800b350:	d110      	bne.n	800b374 <__mdiff+0x38>
 800b352:	0001      	movs	r1, r0
 800b354:	0038      	movs	r0, r7
 800b356:	f7ff fd4f 	bl	800adf8 <_Balloc>
 800b35a:	1e02      	subs	r2, r0, #0
 800b35c:	d104      	bne.n	800b368 <__mdiff+0x2c>
 800b35e:	4b3f      	ldr	r3, [pc, #252]	; (800b45c <__mdiff+0x120>)
 800b360:	483f      	ldr	r0, [pc, #252]	; (800b460 <__mdiff+0x124>)
 800b362:	4940      	ldr	r1, [pc, #256]	; (800b464 <__mdiff+0x128>)
 800b364:	f000 fb28 	bl	800b9b8 <__assert_func>
 800b368:	2301      	movs	r3, #1
 800b36a:	6145      	str	r5, [r0, #20]
 800b36c:	6103      	str	r3, [r0, #16]
 800b36e:	0010      	movs	r0, r2
 800b370:	b007      	add	sp, #28
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	2301      	movs	r3, #1
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	2800      	cmp	r0, #0
 800b37a:	db04      	blt.n	800b386 <__mdiff+0x4a>
 800b37c:	0023      	movs	r3, r4
 800b37e:	0034      	movs	r4, r6
 800b380:	001e      	movs	r6, r3
 800b382:	2300      	movs	r3, #0
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	0038      	movs	r0, r7
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	f7ff fd35 	bl	800adf8 <_Balloc>
 800b38e:	1e02      	subs	r2, r0, #0
 800b390:	d103      	bne.n	800b39a <__mdiff+0x5e>
 800b392:	4b32      	ldr	r3, [pc, #200]	; (800b45c <__mdiff+0x120>)
 800b394:	4832      	ldr	r0, [pc, #200]	; (800b460 <__mdiff+0x124>)
 800b396:	4934      	ldr	r1, [pc, #208]	; (800b468 <__mdiff+0x12c>)
 800b398:	e7e4      	b.n	800b364 <__mdiff+0x28>
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	2700      	movs	r7, #0
 800b39e:	60c3      	str	r3, [r0, #12]
 800b3a0:	6920      	ldr	r0, [r4, #16]
 800b3a2:	3414      	adds	r4, #20
 800b3a4:	0083      	lsls	r3, r0, #2
 800b3a6:	18e3      	adds	r3, r4, r3
 800b3a8:	0021      	movs	r1, r4
 800b3aa:	9401      	str	r4, [sp, #4]
 800b3ac:	0034      	movs	r4, r6
 800b3ae:	9302      	str	r3, [sp, #8]
 800b3b0:	6933      	ldr	r3, [r6, #16]
 800b3b2:	3414      	adds	r4, #20
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	18e3      	adds	r3, r4, r3
 800b3b8:	9303      	str	r3, [sp, #12]
 800b3ba:	0013      	movs	r3, r2
 800b3bc:	3314      	adds	r3, #20
 800b3be:	469c      	mov	ip, r3
 800b3c0:	9305      	str	r3, [sp, #20]
 800b3c2:	9104      	str	r1, [sp, #16]
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	cc02      	ldmia	r4!, {r1}
 800b3c8:	cb20      	ldmia	r3!, {r5}
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	b2ab      	uxth	r3, r5
 800b3ce:	19df      	adds	r7, r3, r7
 800b3d0:	b28b      	uxth	r3, r1
 800b3d2:	1afb      	subs	r3, r7, r3
 800b3d4:	0c09      	lsrs	r1, r1, #16
 800b3d6:	0c2d      	lsrs	r5, r5, #16
 800b3d8:	1a6d      	subs	r5, r5, r1
 800b3da:	1419      	asrs	r1, r3, #16
 800b3dc:	1869      	adds	r1, r5, r1
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	140f      	asrs	r7, r1, #16
 800b3e2:	0409      	lsls	r1, r1, #16
 800b3e4:	4319      	orrs	r1, r3
 800b3e6:	4663      	mov	r3, ip
 800b3e8:	c302      	stmia	r3!, {r1}
 800b3ea:	469c      	mov	ip, r3
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	d8e8      	bhi.n	800b3c4 <__mdiff+0x88>
 800b3f2:	0031      	movs	r1, r6
 800b3f4:	9c03      	ldr	r4, [sp, #12]
 800b3f6:	3115      	adds	r1, #21
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	428c      	cmp	r4, r1
 800b3fc:	d304      	bcc.n	800b408 <__mdiff+0xcc>
 800b3fe:	1ba3      	subs	r3, r4, r6
 800b400:	3b15      	subs	r3, #21
 800b402:	089b      	lsrs	r3, r3, #2
 800b404:	3301      	adds	r3, #1
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	9901      	ldr	r1, [sp, #4]
 800b40a:	18cd      	adds	r5, r1, r3
 800b40c:	9905      	ldr	r1, [sp, #20]
 800b40e:	002e      	movs	r6, r5
 800b410:	18cb      	adds	r3, r1, r3
 800b412:	469c      	mov	ip, r3
 800b414:	9902      	ldr	r1, [sp, #8]
 800b416:	428e      	cmp	r6, r1
 800b418:	d310      	bcc.n	800b43c <__mdiff+0x100>
 800b41a:	9e02      	ldr	r6, [sp, #8]
 800b41c:	1ee9      	subs	r1, r5, #3
 800b41e:	2400      	movs	r4, #0
 800b420:	428e      	cmp	r6, r1
 800b422:	d304      	bcc.n	800b42e <__mdiff+0xf2>
 800b424:	0031      	movs	r1, r6
 800b426:	3103      	adds	r1, #3
 800b428:	1b49      	subs	r1, r1, r5
 800b42a:	0889      	lsrs	r1, r1, #2
 800b42c:	008c      	lsls	r4, r1, #2
 800b42e:	191b      	adds	r3, r3, r4
 800b430:	3b04      	subs	r3, #4
 800b432:	6819      	ldr	r1, [r3, #0]
 800b434:	2900      	cmp	r1, #0
 800b436:	d00f      	beq.n	800b458 <__mdiff+0x11c>
 800b438:	6110      	str	r0, [r2, #16]
 800b43a:	e798      	b.n	800b36e <__mdiff+0x32>
 800b43c:	ce02      	ldmia	r6!, {r1}
 800b43e:	b28c      	uxth	r4, r1
 800b440:	19e4      	adds	r4, r4, r7
 800b442:	0c0f      	lsrs	r7, r1, #16
 800b444:	1421      	asrs	r1, r4, #16
 800b446:	1879      	adds	r1, r7, r1
 800b448:	b2a4      	uxth	r4, r4
 800b44a:	140f      	asrs	r7, r1, #16
 800b44c:	0409      	lsls	r1, r1, #16
 800b44e:	4321      	orrs	r1, r4
 800b450:	4664      	mov	r4, ip
 800b452:	c402      	stmia	r4!, {r1}
 800b454:	46a4      	mov	ip, r4
 800b456:	e7dd      	b.n	800b414 <__mdiff+0xd8>
 800b458:	3801      	subs	r0, #1
 800b45a:	e7e9      	b.n	800b430 <__mdiff+0xf4>
 800b45c:	0800c2b0 	.word	0x0800c2b0
 800b460:	0800c2c1 	.word	0x0800c2c1
 800b464:	00000237 	.word	0x00000237
 800b468:	00000245 	.word	0x00000245

0800b46c <__d2b>:
 800b46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b46e:	2101      	movs	r1, #1
 800b470:	0014      	movs	r4, r2
 800b472:	001d      	movs	r5, r3
 800b474:	9f08      	ldr	r7, [sp, #32]
 800b476:	f7ff fcbf 	bl	800adf8 <_Balloc>
 800b47a:	1e06      	subs	r6, r0, #0
 800b47c:	d105      	bne.n	800b48a <__d2b+0x1e>
 800b47e:	0032      	movs	r2, r6
 800b480:	4b24      	ldr	r3, [pc, #144]	; (800b514 <__d2b+0xa8>)
 800b482:	4825      	ldr	r0, [pc, #148]	; (800b518 <__d2b+0xac>)
 800b484:	4925      	ldr	r1, [pc, #148]	; (800b51c <__d2b+0xb0>)
 800b486:	f000 fa97 	bl	800b9b8 <__assert_func>
 800b48a:	032b      	lsls	r3, r5, #12
 800b48c:	006d      	lsls	r5, r5, #1
 800b48e:	0b1b      	lsrs	r3, r3, #12
 800b490:	0d6d      	lsrs	r5, r5, #21
 800b492:	d125      	bne.n	800b4e0 <__d2b+0x74>
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	2c00      	cmp	r4, #0
 800b498:	d028      	beq.n	800b4ec <__d2b+0x80>
 800b49a:	4668      	mov	r0, sp
 800b49c:	9400      	str	r4, [sp, #0]
 800b49e:	f7ff fd71 	bl	800af84 <__lo0bits>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	9900      	ldr	r1, [sp, #0]
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d01e      	beq.n	800b4e8 <__d2b+0x7c>
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	001c      	movs	r4, r3
 800b4ae:	1a12      	subs	r2, r2, r0
 800b4b0:	4094      	lsls	r4, r2
 800b4b2:	0022      	movs	r2, r4
 800b4b4:	40c3      	lsrs	r3, r0
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	6172      	str	r2, [r6, #20]
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	9c01      	ldr	r4, [sp, #4]
 800b4be:	61b4      	str	r4, [r6, #24]
 800b4c0:	1e63      	subs	r3, r4, #1
 800b4c2:	419c      	sbcs	r4, r3
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	6134      	str	r4, [r6, #16]
 800b4c8:	2d00      	cmp	r5, #0
 800b4ca:	d017      	beq.n	800b4fc <__d2b+0x90>
 800b4cc:	2435      	movs	r4, #53	; 0x35
 800b4ce:	4b14      	ldr	r3, [pc, #80]	; (800b520 <__d2b+0xb4>)
 800b4d0:	18ed      	adds	r5, r5, r3
 800b4d2:	182d      	adds	r5, r5, r0
 800b4d4:	603d      	str	r5, [r7, #0]
 800b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d8:	1a24      	subs	r4, r4, r0
 800b4da:	601c      	str	r4, [r3, #0]
 800b4dc:	0030      	movs	r0, r6
 800b4de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4e0:	2280      	movs	r2, #128	; 0x80
 800b4e2:	0352      	lsls	r2, r2, #13
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	e7d5      	b.n	800b494 <__d2b+0x28>
 800b4e8:	6171      	str	r1, [r6, #20]
 800b4ea:	e7e7      	b.n	800b4bc <__d2b+0x50>
 800b4ec:	a801      	add	r0, sp, #4
 800b4ee:	f7ff fd49 	bl	800af84 <__lo0bits>
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	2401      	movs	r4, #1
 800b4f6:	6173      	str	r3, [r6, #20]
 800b4f8:	3020      	adds	r0, #32
 800b4fa:	e7e4      	b.n	800b4c6 <__d2b+0x5a>
 800b4fc:	4b09      	ldr	r3, [pc, #36]	; (800b524 <__d2b+0xb8>)
 800b4fe:	18c0      	adds	r0, r0, r3
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <__d2b+0xbc>)
 800b502:	6038      	str	r0, [r7, #0]
 800b504:	18e3      	adds	r3, r4, r3
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	18f3      	adds	r3, r6, r3
 800b50a:	6958      	ldr	r0, [r3, #20]
 800b50c:	f7ff fd20 	bl	800af50 <__hi0bits>
 800b510:	0164      	lsls	r4, r4, #5
 800b512:	e7e0      	b.n	800b4d6 <__d2b+0x6a>
 800b514:	0800c2b0 	.word	0x0800c2b0
 800b518:	0800c2c1 	.word	0x0800c2c1
 800b51c:	0000030f 	.word	0x0000030f
 800b520:	fffffbcd 	.word	0xfffffbcd
 800b524:	fffffbce 	.word	0xfffffbce
 800b528:	3fffffff 	.word	0x3fffffff

0800b52c <__ssputs_r>:
 800b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52e:	b085      	sub	sp, #20
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	9203      	str	r2, [sp, #12]
 800b534:	688e      	ldr	r6, [r1, #8]
 800b536:	9a01      	ldr	r2, [sp, #4]
 800b538:	0007      	movs	r7, r0
 800b53a:	000c      	movs	r4, r1
 800b53c:	680b      	ldr	r3, [r1, #0]
 800b53e:	4296      	cmp	r6, r2
 800b540:	d831      	bhi.n	800b5a6 <__ssputs_r+0x7a>
 800b542:	898a      	ldrh	r2, [r1, #12]
 800b544:	2190      	movs	r1, #144	; 0x90
 800b546:	00c9      	lsls	r1, r1, #3
 800b548:	420a      	tst	r2, r1
 800b54a:	d029      	beq.n	800b5a0 <__ssputs_r+0x74>
 800b54c:	2003      	movs	r0, #3
 800b54e:	6921      	ldr	r1, [r4, #16]
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	6963      	ldr	r3, [r4, #20]
 800b556:	4343      	muls	r3, r0
 800b558:	0fdd      	lsrs	r5, r3, #31
 800b55a:	18ed      	adds	r5, r5, r3
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	9802      	ldr	r0, [sp, #8]
 800b560:	3301      	adds	r3, #1
 800b562:	181b      	adds	r3, r3, r0
 800b564:	106d      	asrs	r5, r5, #1
 800b566:	42ab      	cmp	r3, r5
 800b568:	d900      	bls.n	800b56c <__ssputs_r+0x40>
 800b56a:	001d      	movs	r5, r3
 800b56c:	0552      	lsls	r2, r2, #21
 800b56e:	d529      	bpl.n	800b5c4 <__ssputs_r+0x98>
 800b570:	0029      	movs	r1, r5
 800b572:	0038      	movs	r0, r7
 800b574:	f7ff fbae 	bl	800acd4 <_malloc_r>
 800b578:	1e06      	subs	r6, r0, #0
 800b57a:	d02d      	beq.n	800b5d8 <__ssputs_r+0xac>
 800b57c:	9a02      	ldr	r2, [sp, #8]
 800b57e:	6921      	ldr	r1, [r4, #16]
 800b580:	f000 fa10 	bl	800b9a4 <memcpy>
 800b584:	89a2      	ldrh	r2, [r4, #12]
 800b586:	4b19      	ldr	r3, [pc, #100]	; (800b5ec <__ssputs_r+0xc0>)
 800b588:	401a      	ands	r2, r3
 800b58a:	2380      	movs	r3, #128	; 0x80
 800b58c:	4313      	orrs	r3, r2
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	9b02      	ldr	r3, [sp, #8]
 800b592:	6126      	str	r6, [r4, #16]
 800b594:	18f6      	adds	r6, r6, r3
 800b596:	6026      	str	r6, [r4, #0]
 800b598:	6165      	str	r5, [r4, #20]
 800b59a:	9e01      	ldr	r6, [sp, #4]
 800b59c:	1aed      	subs	r5, r5, r3
 800b59e:	60a5      	str	r5, [r4, #8]
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	429e      	cmp	r6, r3
 800b5a4:	d900      	bls.n	800b5a8 <__ssputs_r+0x7c>
 800b5a6:	9e01      	ldr	r6, [sp, #4]
 800b5a8:	0032      	movs	r2, r6
 800b5aa:	9903      	ldr	r1, [sp, #12]
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	f000 f9d4 	bl	800b95a <memmove>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	68a3      	ldr	r3, [r4, #8]
 800b5b6:	1b9b      	subs	r3, r3, r6
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	199b      	adds	r3, r3, r6
 800b5be:	6023      	str	r3, [r4, #0]
 800b5c0:	b005      	add	sp, #20
 800b5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c4:	002a      	movs	r2, r5
 800b5c6:	0038      	movs	r0, r7
 800b5c8:	f000 fa53 	bl	800ba72 <_realloc_r>
 800b5cc:	1e06      	subs	r6, r0, #0
 800b5ce:	d1df      	bne.n	800b590 <__ssputs_r+0x64>
 800b5d0:	0038      	movs	r0, r7
 800b5d2:	6921      	ldr	r1, [r4, #16]
 800b5d4:	f7ff fb08 	bl	800abe8 <_free_r>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	2001      	movs	r0, #1
 800b5dc:	603b      	str	r3, [r7, #0]
 800b5de:	89a2      	ldrh	r2, [r4, #12]
 800b5e0:	3334      	adds	r3, #52	; 0x34
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	4240      	negs	r0, r0
 800b5e8:	e7ea      	b.n	800b5c0 <__ssputs_r+0x94>
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	fffffb7f 	.word	0xfffffb7f

0800b5f0 <_svfiprintf_r>:
 800b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f2:	b0a1      	sub	sp, #132	; 0x84
 800b5f4:	9003      	str	r0, [sp, #12]
 800b5f6:	001d      	movs	r5, r3
 800b5f8:	898b      	ldrh	r3, [r1, #12]
 800b5fa:	000f      	movs	r7, r1
 800b5fc:	0016      	movs	r6, r2
 800b5fe:	061b      	lsls	r3, r3, #24
 800b600:	d511      	bpl.n	800b626 <_svfiprintf_r+0x36>
 800b602:	690b      	ldr	r3, [r1, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10e      	bne.n	800b626 <_svfiprintf_r+0x36>
 800b608:	2140      	movs	r1, #64	; 0x40
 800b60a:	f7ff fb63 	bl	800acd4 <_malloc_r>
 800b60e:	6038      	str	r0, [r7, #0]
 800b610:	6138      	str	r0, [r7, #16]
 800b612:	2800      	cmp	r0, #0
 800b614:	d105      	bne.n	800b622 <_svfiprintf_r+0x32>
 800b616:	230c      	movs	r3, #12
 800b618:	9a03      	ldr	r2, [sp, #12]
 800b61a:	3801      	subs	r0, #1
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	b021      	add	sp, #132	; 0x84
 800b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	617b      	str	r3, [r7, #20]
 800b626:	2300      	movs	r3, #0
 800b628:	ac08      	add	r4, sp, #32
 800b62a:	6163      	str	r3, [r4, #20]
 800b62c:	3320      	adds	r3, #32
 800b62e:	7663      	strb	r3, [r4, #25]
 800b630:	3310      	adds	r3, #16
 800b632:	76a3      	strb	r3, [r4, #26]
 800b634:	9507      	str	r5, [sp, #28]
 800b636:	0035      	movs	r5, r6
 800b638:	782b      	ldrb	r3, [r5, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <_svfiprintf_r+0x52>
 800b63e:	2b25      	cmp	r3, #37	; 0x25
 800b640:	d148      	bne.n	800b6d4 <_svfiprintf_r+0xe4>
 800b642:	1bab      	subs	r3, r5, r6
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	42b5      	cmp	r5, r6
 800b648:	d00b      	beq.n	800b662 <_svfiprintf_r+0x72>
 800b64a:	0032      	movs	r2, r6
 800b64c:	0039      	movs	r1, r7
 800b64e:	9803      	ldr	r0, [sp, #12]
 800b650:	f7ff ff6c 	bl	800b52c <__ssputs_r>
 800b654:	3001      	adds	r0, #1
 800b656:	d100      	bne.n	800b65a <_svfiprintf_r+0x6a>
 800b658:	e0af      	b.n	800b7ba <_svfiprintf_r+0x1ca>
 800b65a:	6963      	ldr	r3, [r4, #20]
 800b65c:	9a05      	ldr	r2, [sp, #20]
 800b65e:	189b      	adds	r3, r3, r2
 800b660:	6163      	str	r3, [r4, #20]
 800b662:	782b      	ldrb	r3, [r5, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <_svfiprintf_r+0x7a>
 800b668:	e0a7      	b.n	800b7ba <_svfiprintf_r+0x1ca>
 800b66a:	2201      	movs	r2, #1
 800b66c:	2300      	movs	r3, #0
 800b66e:	4252      	negs	r2, r2
 800b670:	6062      	str	r2, [r4, #4]
 800b672:	a904      	add	r1, sp, #16
 800b674:	3254      	adds	r2, #84	; 0x54
 800b676:	1852      	adds	r2, r2, r1
 800b678:	1c6e      	adds	r6, r5, #1
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	60e3      	str	r3, [r4, #12]
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	7013      	strb	r3, [r2, #0]
 800b682:	65a3      	str	r3, [r4, #88]	; 0x58
 800b684:	4b55      	ldr	r3, [pc, #340]	; (800b7dc <_svfiprintf_r+0x1ec>)
 800b686:	2205      	movs	r2, #5
 800b688:	0018      	movs	r0, r3
 800b68a:	7831      	ldrb	r1, [r6, #0]
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	f7fe fc02 	bl	8009e96 <memchr>
 800b692:	1c75      	adds	r5, r6, #1
 800b694:	2800      	cmp	r0, #0
 800b696:	d11f      	bne.n	800b6d8 <_svfiprintf_r+0xe8>
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	06d3      	lsls	r3, r2, #27
 800b69c:	d504      	bpl.n	800b6a8 <_svfiprintf_r+0xb8>
 800b69e:	2353      	movs	r3, #83	; 0x53
 800b6a0:	a904      	add	r1, sp, #16
 800b6a2:	185b      	adds	r3, r3, r1
 800b6a4:	2120      	movs	r1, #32
 800b6a6:	7019      	strb	r1, [r3, #0]
 800b6a8:	0713      	lsls	r3, r2, #28
 800b6aa:	d504      	bpl.n	800b6b6 <_svfiprintf_r+0xc6>
 800b6ac:	2353      	movs	r3, #83	; 0x53
 800b6ae:	a904      	add	r1, sp, #16
 800b6b0:	185b      	adds	r3, r3, r1
 800b6b2:	212b      	movs	r1, #43	; 0x2b
 800b6b4:	7019      	strb	r1, [r3, #0]
 800b6b6:	7833      	ldrb	r3, [r6, #0]
 800b6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ba:	d016      	beq.n	800b6ea <_svfiprintf_r+0xfa>
 800b6bc:	0035      	movs	r5, r6
 800b6be:	2100      	movs	r1, #0
 800b6c0:	200a      	movs	r0, #10
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	782a      	ldrb	r2, [r5, #0]
 800b6c6:	1c6e      	adds	r6, r5, #1
 800b6c8:	3a30      	subs	r2, #48	; 0x30
 800b6ca:	2a09      	cmp	r2, #9
 800b6cc:	d94e      	bls.n	800b76c <_svfiprintf_r+0x17c>
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d111      	bne.n	800b6f6 <_svfiprintf_r+0x106>
 800b6d2:	e017      	b.n	800b704 <_svfiprintf_r+0x114>
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	e7af      	b.n	800b638 <_svfiprintf_r+0x48>
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	1ac0      	subs	r0, r0, r3
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4083      	lsls	r3, r0
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	002e      	movs	r6, r5
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	e7cc      	b.n	800b684 <_svfiprintf_r+0x94>
 800b6ea:	9b07      	ldr	r3, [sp, #28]
 800b6ec:	1d19      	adds	r1, r3, #4
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	9107      	str	r1, [sp, #28]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	db01      	blt.n	800b6fa <_svfiprintf_r+0x10a>
 800b6f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6f8:	e004      	b.n	800b704 <_svfiprintf_r+0x114>
 800b6fa:	425b      	negs	r3, r3
 800b6fc:	60e3      	str	r3, [r4, #12]
 800b6fe:	2302      	movs	r3, #2
 800b700:	4313      	orrs	r3, r2
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	782b      	ldrb	r3, [r5, #0]
 800b706:	2b2e      	cmp	r3, #46	; 0x2e
 800b708:	d10a      	bne.n	800b720 <_svfiprintf_r+0x130>
 800b70a:	786b      	ldrb	r3, [r5, #1]
 800b70c:	2b2a      	cmp	r3, #42	; 0x2a
 800b70e:	d135      	bne.n	800b77c <_svfiprintf_r+0x18c>
 800b710:	9b07      	ldr	r3, [sp, #28]
 800b712:	3502      	adds	r5, #2
 800b714:	1d1a      	adds	r2, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9207      	str	r2, [sp, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	db2b      	blt.n	800b776 <_svfiprintf_r+0x186>
 800b71e:	9309      	str	r3, [sp, #36]	; 0x24
 800b720:	4e2f      	ldr	r6, [pc, #188]	; (800b7e0 <_svfiprintf_r+0x1f0>)
 800b722:	2203      	movs	r2, #3
 800b724:	0030      	movs	r0, r6
 800b726:	7829      	ldrb	r1, [r5, #0]
 800b728:	f7fe fbb5 	bl	8009e96 <memchr>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d006      	beq.n	800b73e <_svfiprintf_r+0x14e>
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	1b80      	subs	r0, r0, r6
 800b734:	4083      	lsls	r3, r0
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	3501      	adds	r5, #1
 800b73a:	4313      	orrs	r3, r2
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	7829      	ldrb	r1, [r5, #0]
 800b740:	2206      	movs	r2, #6
 800b742:	4828      	ldr	r0, [pc, #160]	; (800b7e4 <_svfiprintf_r+0x1f4>)
 800b744:	1c6e      	adds	r6, r5, #1
 800b746:	7621      	strb	r1, [r4, #24]
 800b748:	f7fe fba5 	bl	8009e96 <memchr>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d03c      	beq.n	800b7ca <_svfiprintf_r+0x1da>
 800b750:	4b25      	ldr	r3, [pc, #148]	; (800b7e8 <_svfiprintf_r+0x1f8>)
 800b752:	2b00      	cmp	r3, #0
 800b754:	d125      	bne.n	800b7a2 <_svfiprintf_r+0x1b2>
 800b756:	2207      	movs	r2, #7
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	3307      	adds	r3, #7
 800b75c:	4393      	bics	r3, r2
 800b75e:	3308      	adds	r3, #8
 800b760:	9307      	str	r3, [sp, #28]
 800b762:	6963      	ldr	r3, [r4, #20]
 800b764:	9a04      	ldr	r2, [sp, #16]
 800b766:	189b      	adds	r3, r3, r2
 800b768:	6163      	str	r3, [r4, #20]
 800b76a:	e764      	b.n	800b636 <_svfiprintf_r+0x46>
 800b76c:	4343      	muls	r3, r0
 800b76e:	0035      	movs	r5, r6
 800b770:	2101      	movs	r1, #1
 800b772:	189b      	adds	r3, r3, r2
 800b774:	e7a6      	b.n	800b6c4 <_svfiprintf_r+0xd4>
 800b776:	2301      	movs	r3, #1
 800b778:	425b      	negs	r3, r3
 800b77a:	e7d0      	b.n	800b71e <_svfiprintf_r+0x12e>
 800b77c:	2300      	movs	r3, #0
 800b77e:	200a      	movs	r0, #10
 800b780:	001a      	movs	r2, r3
 800b782:	3501      	adds	r5, #1
 800b784:	6063      	str	r3, [r4, #4]
 800b786:	7829      	ldrb	r1, [r5, #0]
 800b788:	1c6e      	adds	r6, r5, #1
 800b78a:	3930      	subs	r1, #48	; 0x30
 800b78c:	2909      	cmp	r1, #9
 800b78e:	d903      	bls.n	800b798 <_svfiprintf_r+0x1a8>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d0c5      	beq.n	800b720 <_svfiprintf_r+0x130>
 800b794:	9209      	str	r2, [sp, #36]	; 0x24
 800b796:	e7c3      	b.n	800b720 <_svfiprintf_r+0x130>
 800b798:	4342      	muls	r2, r0
 800b79a:	0035      	movs	r5, r6
 800b79c:	2301      	movs	r3, #1
 800b79e:	1852      	adds	r2, r2, r1
 800b7a0:	e7f1      	b.n	800b786 <_svfiprintf_r+0x196>
 800b7a2:	aa07      	add	r2, sp, #28
 800b7a4:	9200      	str	r2, [sp, #0]
 800b7a6:	0021      	movs	r1, r4
 800b7a8:	003a      	movs	r2, r7
 800b7aa:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <_svfiprintf_r+0x1fc>)
 800b7ac:	9803      	ldr	r0, [sp, #12]
 800b7ae:	f7fd fde5 	bl	800937c <_printf_float>
 800b7b2:	9004      	str	r0, [sp, #16]
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	d1d3      	bne.n	800b762 <_svfiprintf_r+0x172>
 800b7ba:	89bb      	ldrh	r3, [r7, #12]
 800b7bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b7be:	065b      	lsls	r3, r3, #25
 800b7c0:	d400      	bmi.n	800b7c4 <_svfiprintf_r+0x1d4>
 800b7c2:	e72c      	b.n	800b61e <_svfiprintf_r+0x2e>
 800b7c4:	2001      	movs	r0, #1
 800b7c6:	4240      	negs	r0, r0
 800b7c8:	e729      	b.n	800b61e <_svfiprintf_r+0x2e>
 800b7ca:	aa07      	add	r2, sp, #28
 800b7cc:	9200      	str	r2, [sp, #0]
 800b7ce:	0021      	movs	r1, r4
 800b7d0:	003a      	movs	r2, r7
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <_svfiprintf_r+0x1fc>)
 800b7d4:	9803      	ldr	r0, [sp, #12]
 800b7d6:	f7fe f897 	bl	8009908 <_printf_i>
 800b7da:	e7ea      	b.n	800b7b2 <_svfiprintf_r+0x1c2>
 800b7dc:	0800c41c 	.word	0x0800c41c
 800b7e0:	0800c422 	.word	0x0800c422
 800b7e4:	0800c426 	.word	0x0800c426
 800b7e8:	0800937d 	.word	0x0800937d
 800b7ec:	0800b52d 	.word	0x0800b52d

0800b7f0 <__sflush_r>:
 800b7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f2:	898b      	ldrh	r3, [r1, #12]
 800b7f4:	0005      	movs	r5, r0
 800b7f6:	000c      	movs	r4, r1
 800b7f8:	071a      	lsls	r2, r3, #28
 800b7fa:	d45c      	bmi.n	800b8b6 <__sflush_r+0xc6>
 800b7fc:	684a      	ldr	r2, [r1, #4]
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	dc04      	bgt.n	800b80c <__sflush_r+0x1c>
 800b802:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b804:	2a00      	cmp	r2, #0
 800b806:	dc01      	bgt.n	800b80c <__sflush_r+0x1c>
 800b808:	2000      	movs	r0, #0
 800b80a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b80c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b80e:	2f00      	cmp	r7, #0
 800b810:	d0fa      	beq.n	800b808 <__sflush_r+0x18>
 800b812:	2200      	movs	r2, #0
 800b814:	2080      	movs	r0, #128	; 0x80
 800b816:	682e      	ldr	r6, [r5, #0]
 800b818:	602a      	str	r2, [r5, #0]
 800b81a:	001a      	movs	r2, r3
 800b81c:	0140      	lsls	r0, r0, #5
 800b81e:	6a21      	ldr	r1, [r4, #32]
 800b820:	4002      	ands	r2, r0
 800b822:	4203      	tst	r3, r0
 800b824:	d034      	beq.n	800b890 <__sflush_r+0xa0>
 800b826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	075b      	lsls	r3, r3, #29
 800b82c:	d506      	bpl.n	800b83c <__sflush_r+0x4c>
 800b82e:	6863      	ldr	r3, [r4, #4]
 800b830:	1ac0      	subs	r0, r0, r3
 800b832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <__sflush_r+0x4c>
 800b838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b83a:	1ac0      	subs	r0, r0, r3
 800b83c:	0002      	movs	r2, r0
 800b83e:	2300      	movs	r3, #0
 800b840:	0028      	movs	r0, r5
 800b842:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b844:	6a21      	ldr	r1, [r4, #32]
 800b846:	47b8      	blx	r7
 800b848:	89a2      	ldrh	r2, [r4, #12]
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d106      	bne.n	800b85c <__sflush_r+0x6c>
 800b84e:	6829      	ldr	r1, [r5, #0]
 800b850:	291d      	cmp	r1, #29
 800b852:	d82c      	bhi.n	800b8ae <__sflush_r+0xbe>
 800b854:	4b2a      	ldr	r3, [pc, #168]	; (800b900 <__sflush_r+0x110>)
 800b856:	410b      	asrs	r3, r1
 800b858:	07db      	lsls	r3, r3, #31
 800b85a:	d428      	bmi.n	800b8ae <__sflush_r+0xbe>
 800b85c:	2300      	movs	r3, #0
 800b85e:	6063      	str	r3, [r4, #4]
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	6023      	str	r3, [r4, #0]
 800b864:	04d2      	lsls	r2, r2, #19
 800b866:	d505      	bpl.n	800b874 <__sflush_r+0x84>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <__sflush_r+0x82>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d100      	bne.n	800b874 <__sflush_r+0x84>
 800b872:	6560      	str	r0, [r4, #84]	; 0x54
 800b874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b876:	602e      	str	r6, [r5, #0]
 800b878:	2900      	cmp	r1, #0
 800b87a:	d0c5      	beq.n	800b808 <__sflush_r+0x18>
 800b87c:	0023      	movs	r3, r4
 800b87e:	3344      	adds	r3, #68	; 0x44
 800b880:	4299      	cmp	r1, r3
 800b882:	d002      	beq.n	800b88a <__sflush_r+0x9a>
 800b884:	0028      	movs	r0, r5
 800b886:	f7ff f9af 	bl	800abe8 <_free_r>
 800b88a:	2000      	movs	r0, #0
 800b88c:	6360      	str	r0, [r4, #52]	; 0x34
 800b88e:	e7bc      	b.n	800b80a <__sflush_r+0x1a>
 800b890:	2301      	movs	r3, #1
 800b892:	0028      	movs	r0, r5
 800b894:	47b8      	blx	r7
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	d1c6      	bne.n	800b828 <__sflush_r+0x38>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0c3      	beq.n	800b828 <__sflush_r+0x38>
 800b8a0:	2b1d      	cmp	r3, #29
 800b8a2:	d001      	beq.n	800b8a8 <__sflush_r+0xb8>
 800b8a4:	2b16      	cmp	r3, #22
 800b8a6:	d101      	bne.n	800b8ac <__sflush_r+0xbc>
 800b8a8:	602e      	str	r6, [r5, #0]
 800b8aa:	e7ad      	b.n	800b808 <__sflush_r+0x18>
 800b8ac:	89a2      	ldrh	r2, [r4, #12]
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	e7a9      	b.n	800b80a <__sflush_r+0x1a>
 800b8b6:	690e      	ldr	r6, [r1, #16]
 800b8b8:	2e00      	cmp	r6, #0
 800b8ba:	d0a5      	beq.n	800b808 <__sflush_r+0x18>
 800b8bc:	680f      	ldr	r7, [r1, #0]
 800b8be:	600e      	str	r6, [r1, #0]
 800b8c0:	1bba      	subs	r2, r7, r6
 800b8c2:	9201      	str	r2, [sp, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	079b      	lsls	r3, r3, #30
 800b8c8:	d100      	bne.n	800b8cc <__sflush_r+0xdc>
 800b8ca:	694a      	ldr	r2, [r1, #20]
 800b8cc:	60a2      	str	r2, [r4, #8]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	dd99      	ble.n	800b808 <__sflush_r+0x18>
 800b8d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8d6:	0032      	movs	r2, r6
 800b8d8:	001f      	movs	r7, r3
 800b8da:	0028      	movs	r0, r5
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	6a21      	ldr	r1, [r4, #32]
 800b8e0:	47b8      	blx	r7
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	dc06      	bgt.n	800b8f4 <__sflush_r+0x104>
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	89a2      	ldrh	r2, [r4, #12]
 800b8ec:	4240      	negs	r0, r0
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	e78a      	b.n	800b80a <__sflush_r+0x1a>
 800b8f4:	9b01      	ldr	r3, [sp, #4]
 800b8f6:	1836      	adds	r6, r6, r0
 800b8f8:	1a1b      	subs	r3, r3, r0
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	e7e7      	b.n	800b8ce <__sflush_r+0xde>
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	dfbffffe 	.word	0xdfbffffe

0800b904 <_fflush_r>:
 800b904:	690b      	ldr	r3, [r1, #16]
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	0005      	movs	r5, r0
 800b90a:	000c      	movs	r4, r1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <_fflush_r+0x12>
 800b910:	2500      	movs	r5, #0
 800b912:	0028      	movs	r0, r5
 800b914:	bd70      	pop	{r4, r5, r6, pc}
 800b916:	2800      	cmp	r0, #0
 800b918:	d004      	beq.n	800b924 <_fflush_r+0x20>
 800b91a:	6a03      	ldr	r3, [r0, #32]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <_fflush_r+0x20>
 800b920:	f7fe f992 	bl	8009c48 <__sinit>
 800b924:	220c      	movs	r2, #12
 800b926:	5ea3      	ldrsh	r3, [r4, r2]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0f1      	beq.n	800b910 <_fflush_r+0xc>
 800b92c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b92e:	07d2      	lsls	r2, r2, #31
 800b930:	d404      	bmi.n	800b93c <_fflush_r+0x38>
 800b932:	059b      	lsls	r3, r3, #22
 800b934:	d402      	bmi.n	800b93c <_fflush_r+0x38>
 800b936:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b938:	f7fe faab 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800b93c:	0028      	movs	r0, r5
 800b93e:	0021      	movs	r1, r4
 800b940:	f7ff ff56 	bl	800b7f0 <__sflush_r>
 800b944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b946:	0005      	movs	r5, r0
 800b948:	07db      	lsls	r3, r3, #31
 800b94a:	d4e2      	bmi.n	800b912 <_fflush_r+0xe>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	059b      	lsls	r3, r3, #22
 800b950:	d4df      	bmi.n	800b912 <_fflush_r+0xe>
 800b952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b954:	f7fe fa9e 	bl	8009e94 <__retarget_lock_release_recursive>
 800b958:	e7db      	b.n	800b912 <_fflush_r+0xe>

0800b95a <memmove>:
 800b95a:	b510      	push	{r4, lr}
 800b95c:	4288      	cmp	r0, r1
 800b95e:	d902      	bls.n	800b966 <memmove+0xc>
 800b960:	188b      	adds	r3, r1, r2
 800b962:	4298      	cmp	r0, r3
 800b964:	d303      	bcc.n	800b96e <memmove+0x14>
 800b966:	2300      	movs	r3, #0
 800b968:	e007      	b.n	800b97a <memmove+0x20>
 800b96a:	5c8b      	ldrb	r3, [r1, r2]
 800b96c:	5483      	strb	r3, [r0, r2]
 800b96e:	3a01      	subs	r2, #1
 800b970:	d2fb      	bcs.n	800b96a <memmove+0x10>
 800b972:	bd10      	pop	{r4, pc}
 800b974:	5ccc      	ldrb	r4, [r1, r3]
 800b976:	54c4      	strb	r4, [r0, r3]
 800b978:	3301      	adds	r3, #1
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d1fa      	bne.n	800b974 <memmove+0x1a>
 800b97e:	e7f8      	b.n	800b972 <memmove+0x18>

0800b980 <_sbrk_r>:
 800b980:	2300      	movs	r3, #0
 800b982:	b570      	push	{r4, r5, r6, lr}
 800b984:	4d06      	ldr	r5, [pc, #24]	; (800b9a0 <_sbrk_r+0x20>)
 800b986:	0004      	movs	r4, r0
 800b988:	0008      	movs	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f8 fa86 	bl	8003e9c <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d103      	bne.n	800b99c <_sbrk_r+0x1c>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d000      	beq.n	800b99c <_sbrk_r+0x1c>
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	bd70      	pop	{r4, r5, r6, pc}
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	20000628 	.word	0x20000628

0800b9a4 <memcpy>:
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d100      	bne.n	800b9ae <memcpy+0xa>
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	5ccc      	ldrb	r4, [r1, r3]
 800b9b0:	54c4      	strb	r4, [r0, r3]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	e7f8      	b.n	800b9a8 <memcpy+0x4>
	...

0800b9b8 <__assert_func>:
 800b9b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b9ba:	0014      	movs	r4, r2
 800b9bc:	001a      	movs	r2, r3
 800b9be:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <__assert_func+0x2c>)
 800b9c0:	0005      	movs	r5, r0
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	000e      	movs	r6, r1
 800b9c6:	68d8      	ldr	r0, [r3, #12]
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <__assert_func+0x30>)
 800b9ca:	2c00      	cmp	r4, #0
 800b9cc:	d101      	bne.n	800b9d2 <__assert_func+0x1a>
 800b9ce:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <__assert_func+0x34>)
 800b9d0:	001c      	movs	r4, r3
 800b9d2:	4907      	ldr	r1, [pc, #28]	; (800b9f0 <__assert_func+0x38>)
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	9402      	str	r4, [sp, #8]
 800b9d8:	002b      	movs	r3, r5
 800b9da:	9600      	str	r6, [sp, #0]
 800b9dc:	f000 f886 	bl	800baec <fiprintf>
 800b9e0:	f000 f894 	bl	800bb0c <abort>
 800b9e4:	20000064 	.word	0x20000064
 800b9e8:	0800c437 	.word	0x0800c437
 800b9ec:	0800c472 	.word	0x0800c472
 800b9f0:	0800c444 	.word	0x0800c444

0800b9f4 <_calloc_r>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	0c0b      	lsrs	r3, r1, #16
 800b9f8:	0c15      	lsrs	r5, r2, #16
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d11e      	bne.n	800ba3c <_calloc_r+0x48>
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	d10c      	bne.n	800ba1c <_calloc_r+0x28>
 800ba02:	b289      	uxth	r1, r1
 800ba04:	b294      	uxth	r4, r2
 800ba06:	434c      	muls	r4, r1
 800ba08:	0021      	movs	r1, r4
 800ba0a:	f7ff f963 	bl	800acd4 <_malloc_r>
 800ba0e:	1e05      	subs	r5, r0, #0
 800ba10:	d01b      	beq.n	800ba4a <_calloc_r+0x56>
 800ba12:	0022      	movs	r2, r4
 800ba14:	2100      	movs	r1, #0
 800ba16:	f7fe f9b7 	bl	8009d88 <memset>
 800ba1a:	e016      	b.n	800ba4a <_calloc_r+0x56>
 800ba1c:	1c2b      	adds	r3, r5, #0
 800ba1e:	1c0c      	adds	r4, r1, #0
 800ba20:	b289      	uxth	r1, r1
 800ba22:	b292      	uxth	r2, r2
 800ba24:	434a      	muls	r2, r1
 800ba26:	b2a1      	uxth	r1, r4
 800ba28:	b29c      	uxth	r4, r3
 800ba2a:	434c      	muls	r4, r1
 800ba2c:	0c13      	lsrs	r3, r2, #16
 800ba2e:	18e4      	adds	r4, r4, r3
 800ba30:	0c23      	lsrs	r3, r4, #16
 800ba32:	d107      	bne.n	800ba44 <_calloc_r+0x50>
 800ba34:	0424      	lsls	r4, r4, #16
 800ba36:	b292      	uxth	r2, r2
 800ba38:	4314      	orrs	r4, r2
 800ba3a:	e7e5      	b.n	800ba08 <_calloc_r+0x14>
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	d101      	bne.n	800ba44 <_calloc_r+0x50>
 800ba40:	1c14      	adds	r4, r2, #0
 800ba42:	e7ed      	b.n	800ba20 <_calloc_r+0x2c>
 800ba44:	230c      	movs	r3, #12
 800ba46:	2500      	movs	r5, #0
 800ba48:	6003      	str	r3, [r0, #0]
 800ba4a:	0028      	movs	r0, r5
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}

0800ba4e <__ascii_mbtowc>:
 800ba4e:	b082      	sub	sp, #8
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d100      	bne.n	800ba56 <__ascii_mbtowc+0x8>
 800ba54:	a901      	add	r1, sp, #4
 800ba56:	1e10      	subs	r0, r2, #0
 800ba58:	d006      	beq.n	800ba68 <__ascii_mbtowc+0x1a>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d006      	beq.n	800ba6c <__ascii_mbtowc+0x1e>
 800ba5e:	7813      	ldrb	r3, [r2, #0]
 800ba60:	600b      	str	r3, [r1, #0]
 800ba62:	7810      	ldrb	r0, [r2, #0]
 800ba64:	1e43      	subs	r3, r0, #1
 800ba66:	4198      	sbcs	r0, r3
 800ba68:	b002      	add	sp, #8
 800ba6a:	4770      	bx	lr
 800ba6c:	2002      	movs	r0, #2
 800ba6e:	4240      	negs	r0, r0
 800ba70:	e7fa      	b.n	800ba68 <__ascii_mbtowc+0x1a>

0800ba72 <_realloc_r>:
 800ba72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba74:	0007      	movs	r7, r0
 800ba76:	000e      	movs	r6, r1
 800ba78:	0014      	movs	r4, r2
 800ba7a:	2900      	cmp	r1, #0
 800ba7c:	d105      	bne.n	800ba8a <_realloc_r+0x18>
 800ba7e:	0011      	movs	r1, r2
 800ba80:	f7ff f928 	bl	800acd4 <_malloc_r>
 800ba84:	0005      	movs	r5, r0
 800ba86:	0028      	movs	r0, r5
 800ba88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	d103      	bne.n	800ba96 <_realloc_r+0x24>
 800ba8e:	f7ff f8ab 	bl	800abe8 <_free_r>
 800ba92:	0025      	movs	r5, r4
 800ba94:	e7f7      	b.n	800ba86 <_realloc_r+0x14>
 800ba96:	f000 f840 	bl	800bb1a <_malloc_usable_size_r>
 800ba9a:	9001      	str	r0, [sp, #4]
 800ba9c:	4284      	cmp	r4, r0
 800ba9e:	d803      	bhi.n	800baa8 <_realloc_r+0x36>
 800baa0:	0035      	movs	r5, r6
 800baa2:	0843      	lsrs	r3, r0, #1
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d3ee      	bcc.n	800ba86 <_realloc_r+0x14>
 800baa8:	0021      	movs	r1, r4
 800baaa:	0038      	movs	r0, r7
 800baac:	f7ff f912 	bl	800acd4 <_malloc_r>
 800bab0:	1e05      	subs	r5, r0, #0
 800bab2:	d0e8      	beq.n	800ba86 <_realloc_r+0x14>
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	0022      	movs	r2, r4
 800bab8:	429c      	cmp	r4, r3
 800baba:	d900      	bls.n	800babe <_realloc_r+0x4c>
 800babc:	001a      	movs	r2, r3
 800babe:	0031      	movs	r1, r6
 800bac0:	0028      	movs	r0, r5
 800bac2:	f7ff ff6f 	bl	800b9a4 <memcpy>
 800bac6:	0031      	movs	r1, r6
 800bac8:	0038      	movs	r0, r7
 800baca:	f7ff f88d 	bl	800abe8 <_free_r>
 800bace:	e7da      	b.n	800ba86 <_realloc_r+0x14>

0800bad0 <__ascii_wctomb>:
 800bad0:	0003      	movs	r3, r0
 800bad2:	1e08      	subs	r0, r1, #0
 800bad4:	d005      	beq.n	800bae2 <__ascii_wctomb+0x12>
 800bad6:	2aff      	cmp	r2, #255	; 0xff
 800bad8:	d904      	bls.n	800bae4 <__ascii_wctomb+0x14>
 800bada:	228a      	movs	r2, #138	; 0x8a
 800badc:	2001      	movs	r0, #1
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	4240      	negs	r0, r0
 800bae2:	4770      	bx	lr
 800bae4:	2001      	movs	r0, #1
 800bae6:	700a      	strb	r2, [r1, #0]
 800bae8:	e7fb      	b.n	800bae2 <__ascii_wctomb+0x12>
	...

0800baec <fiprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b517      	push	{r0, r1, r2, r4, lr}
 800baf0:	4c05      	ldr	r4, [pc, #20]	; (800bb08 <fiprintf+0x1c>)
 800baf2:	ab05      	add	r3, sp, #20
 800baf4:	cb04      	ldmia	r3!, {r2}
 800baf6:	0001      	movs	r1, r0
 800baf8:	6820      	ldr	r0, [r4, #0]
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	f000 f83c 	bl	800bb78 <_vfiprintf_r>
 800bb00:	bc1e      	pop	{r1, r2, r3, r4}
 800bb02:	bc08      	pop	{r3}
 800bb04:	b003      	add	sp, #12
 800bb06:	4718      	bx	r3
 800bb08:	20000064 	.word	0x20000064

0800bb0c <abort>:
 800bb0c:	2006      	movs	r0, #6
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	f000 fa1e 	bl	800bf50 <raise>
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f8 f94f 	bl	8003db8 <_exit>

0800bb1a <_malloc_usable_size_r>:
 800bb1a:	1f0b      	subs	r3, r1, #4
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	1f18      	subs	r0, r3, #4
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da01      	bge.n	800bb28 <_malloc_usable_size_r+0xe>
 800bb24:	580b      	ldr	r3, [r1, r0]
 800bb26:	18c0      	adds	r0, r0, r3
 800bb28:	4770      	bx	lr

0800bb2a <__sfputc_r>:
 800bb2a:	6893      	ldr	r3, [r2, #8]
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	6093      	str	r3, [r2, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	da04      	bge.n	800bb40 <__sfputc_r+0x16>
 800bb36:	6994      	ldr	r4, [r2, #24]
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	db07      	blt.n	800bb4c <__sfputc_r+0x22>
 800bb3c:	290a      	cmp	r1, #10
 800bb3e:	d005      	beq.n	800bb4c <__sfputc_r+0x22>
 800bb40:	6813      	ldr	r3, [r2, #0]
 800bb42:	1c58      	adds	r0, r3, #1
 800bb44:	6010      	str	r0, [r2, #0]
 800bb46:	7019      	strb	r1, [r3, #0]
 800bb48:	0008      	movs	r0, r1
 800bb4a:	bd10      	pop	{r4, pc}
 800bb4c:	f000 f930 	bl	800bdb0 <__swbuf_r>
 800bb50:	0001      	movs	r1, r0
 800bb52:	e7f9      	b.n	800bb48 <__sfputc_r+0x1e>

0800bb54 <__sfputs_r>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	0006      	movs	r6, r0
 800bb58:	000f      	movs	r7, r1
 800bb5a:	0014      	movs	r4, r2
 800bb5c:	18d5      	adds	r5, r2, r3
 800bb5e:	42ac      	cmp	r4, r5
 800bb60:	d101      	bne.n	800bb66 <__sfputs_r+0x12>
 800bb62:	2000      	movs	r0, #0
 800bb64:	e007      	b.n	800bb76 <__sfputs_r+0x22>
 800bb66:	7821      	ldrb	r1, [r4, #0]
 800bb68:	003a      	movs	r2, r7
 800bb6a:	0030      	movs	r0, r6
 800bb6c:	f7ff ffdd 	bl	800bb2a <__sfputc_r>
 800bb70:	3401      	adds	r4, #1
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d1f3      	bne.n	800bb5e <__sfputs_r+0xa>
 800bb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb78 <_vfiprintf_r>:
 800bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7a:	b0a1      	sub	sp, #132	; 0x84
 800bb7c:	000f      	movs	r7, r1
 800bb7e:	0015      	movs	r5, r2
 800bb80:	001e      	movs	r6, r3
 800bb82:	9003      	str	r0, [sp, #12]
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d004      	beq.n	800bb92 <_vfiprintf_r+0x1a>
 800bb88:	6a03      	ldr	r3, [r0, #32]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <_vfiprintf_r+0x1a>
 800bb8e:	f7fe f85b 	bl	8009c48 <__sinit>
 800bb92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb94:	07db      	lsls	r3, r3, #31
 800bb96:	d405      	bmi.n	800bba4 <_vfiprintf_r+0x2c>
 800bb98:	89bb      	ldrh	r3, [r7, #12]
 800bb9a:	059b      	lsls	r3, r3, #22
 800bb9c:	d402      	bmi.n	800bba4 <_vfiprintf_r+0x2c>
 800bb9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bba0:	f7fe f977 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800bba4:	89bb      	ldrh	r3, [r7, #12]
 800bba6:	071b      	lsls	r3, r3, #28
 800bba8:	d502      	bpl.n	800bbb0 <_vfiprintf_r+0x38>
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d113      	bne.n	800bbd8 <_vfiprintf_r+0x60>
 800bbb0:	0039      	movs	r1, r7
 800bbb2:	9803      	ldr	r0, [sp, #12]
 800bbb4:	f000 f93e 	bl	800be34 <__swsetup_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d00d      	beq.n	800bbd8 <_vfiprintf_r+0x60>
 800bbbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbbe:	07db      	lsls	r3, r3, #31
 800bbc0:	d503      	bpl.n	800bbca <_vfiprintf_r+0x52>
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	4240      	negs	r0, r0
 800bbc6:	b021      	add	sp, #132	; 0x84
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbca:	89bb      	ldrh	r3, [r7, #12]
 800bbcc:	059b      	lsls	r3, r3, #22
 800bbce:	d4f8      	bmi.n	800bbc2 <_vfiprintf_r+0x4a>
 800bbd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bbd2:	f7fe f95f 	bl	8009e94 <__retarget_lock_release_recursive>
 800bbd6:	e7f4      	b.n	800bbc2 <_vfiprintf_r+0x4a>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	ac08      	add	r4, sp, #32
 800bbdc:	6163      	str	r3, [r4, #20]
 800bbde:	3320      	adds	r3, #32
 800bbe0:	7663      	strb	r3, [r4, #25]
 800bbe2:	3310      	adds	r3, #16
 800bbe4:	76a3      	strb	r3, [r4, #26]
 800bbe6:	9607      	str	r6, [sp, #28]
 800bbe8:	002e      	movs	r6, r5
 800bbea:	7833      	ldrb	r3, [r6, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <_vfiprintf_r+0x7c>
 800bbf0:	2b25      	cmp	r3, #37	; 0x25
 800bbf2:	d148      	bne.n	800bc86 <_vfiprintf_r+0x10e>
 800bbf4:	1b73      	subs	r3, r6, r5
 800bbf6:	9305      	str	r3, [sp, #20]
 800bbf8:	42ae      	cmp	r6, r5
 800bbfa:	d00b      	beq.n	800bc14 <_vfiprintf_r+0x9c>
 800bbfc:	002a      	movs	r2, r5
 800bbfe:	0039      	movs	r1, r7
 800bc00:	9803      	ldr	r0, [sp, #12]
 800bc02:	f7ff ffa7 	bl	800bb54 <__sfputs_r>
 800bc06:	3001      	adds	r0, #1
 800bc08:	d100      	bne.n	800bc0c <_vfiprintf_r+0x94>
 800bc0a:	e0af      	b.n	800bd6c <_vfiprintf_r+0x1f4>
 800bc0c:	6963      	ldr	r3, [r4, #20]
 800bc0e:	9a05      	ldr	r2, [sp, #20]
 800bc10:	189b      	adds	r3, r3, r2
 800bc12:	6163      	str	r3, [r4, #20]
 800bc14:	7833      	ldrb	r3, [r6, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d100      	bne.n	800bc1c <_vfiprintf_r+0xa4>
 800bc1a:	e0a7      	b.n	800bd6c <_vfiprintf_r+0x1f4>
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	4252      	negs	r2, r2
 800bc22:	6062      	str	r2, [r4, #4]
 800bc24:	a904      	add	r1, sp, #16
 800bc26:	3254      	adds	r2, #84	; 0x54
 800bc28:	1852      	adds	r2, r2, r1
 800bc2a:	1c75      	adds	r5, r6, #1
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	60e3      	str	r3, [r4, #12]
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	7013      	strb	r3, [r2, #0]
 800bc34:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc36:	4b59      	ldr	r3, [pc, #356]	; (800bd9c <_vfiprintf_r+0x224>)
 800bc38:	2205      	movs	r2, #5
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	7829      	ldrb	r1, [r5, #0]
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	f7fe f929 	bl	8009e96 <memchr>
 800bc44:	1c6e      	adds	r6, r5, #1
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d11f      	bne.n	800bc8a <_vfiprintf_r+0x112>
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	06d3      	lsls	r3, r2, #27
 800bc4e:	d504      	bpl.n	800bc5a <_vfiprintf_r+0xe2>
 800bc50:	2353      	movs	r3, #83	; 0x53
 800bc52:	a904      	add	r1, sp, #16
 800bc54:	185b      	adds	r3, r3, r1
 800bc56:	2120      	movs	r1, #32
 800bc58:	7019      	strb	r1, [r3, #0]
 800bc5a:	0713      	lsls	r3, r2, #28
 800bc5c:	d504      	bpl.n	800bc68 <_vfiprintf_r+0xf0>
 800bc5e:	2353      	movs	r3, #83	; 0x53
 800bc60:	a904      	add	r1, sp, #16
 800bc62:	185b      	adds	r3, r3, r1
 800bc64:	212b      	movs	r1, #43	; 0x2b
 800bc66:	7019      	strb	r1, [r3, #0]
 800bc68:	782b      	ldrb	r3, [r5, #0]
 800bc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc6c:	d016      	beq.n	800bc9c <_vfiprintf_r+0x124>
 800bc6e:	002e      	movs	r6, r5
 800bc70:	2100      	movs	r1, #0
 800bc72:	200a      	movs	r0, #10
 800bc74:	68e3      	ldr	r3, [r4, #12]
 800bc76:	7832      	ldrb	r2, [r6, #0]
 800bc78:	1c75      	adds	r5, r6, #1
 800bc7a:	3a30      	subs	r2, #48	; 0x30
 800bc7c:	2a09      	cmp	r2, #9
 800bc7e:	d94e      	bls.n	800bd1e <_vfiprintf_r+0x1a6>
 800bc80:	2900      	cmp	r1, #0
 800bc82:	d111      	bne.n	800bca8 <_vfiprintf_r+0x130>
 800bc84:	e017      	b.n	800bcb6 <_vfiprintf_r+0x13e>
 800bc86:	3601      	adds	r6, #1
 800bc88:	e7af      	b.n	800bbea <_vfiprintf_r+0x72>
 800bc8a:	9b05      	ldr	r3, [sp, #20]
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	1ac0      	subs	r0, r0, r3
 800bc90:	2301      	movs	r3, #1
 800bc92:	4083      	lsls	r3, r0
 800bc94:	4313      	orrs	r3, r2
 800bc96:	0035      	movs	r5, r6
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	e7cc      	b.n	800bc36 <_vfiprintf_r+0xbe>
 800bc9c:	9b07      	ldr	r3, [sp, #28]
 800bc9e:	1d19      	adds	r1, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	9107      	str	r1, [sp, #28]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	db01      	blt.n	800bcac <_vfiprintf_r+0x134>
 800bca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcaa:	e004      	b.n	800bcb6 <_vfiprintf_r+0x13e>
 800bcac:	425b      	negs	r3, r3
 800bcae:	60e3      	str	r3, [r4, #12]
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	7833      	ldrb	r3, [r6, #0]
 800bcb8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcba:	d10a      	bne.n	800bcd2 <_vfiprintf_r+0x15a>
 800bcbc:	7873      	ldrb	r3, [r6, #1]
 800bcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc0:	d135      	bne.n	800bd2e <_vfiprintf_r+0x1b6>
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	3602      	adds	r6, #2
 800bcc6:	1d1a      	adds	r2, r3, #4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	9207      	str	r2, [sp, #28]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	db2b      	blt.n	800bd28 <_vfiprintf_r+0x1b0>
 800bcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd2:	4d33      	ldr	r5, [pc, #204]	; (800bda0 <_vfiprintf_r+0x228>)
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	0028      	movs	r0, r5
 800bcd8:	7831      	ldrb	r1, [r6, #0]
 800bcda:	f7fe f8dc 	bl	8009e96 <memchr>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d006      	beq.n	800bcf0 <_vfiprintf_r+0x178>
 800bce2:	2340      	movs	r3, #64	; 0x40
 800bce4:	1b40      	subs	r0, r0, r5
 800bce6:	4083      	lsls	r3, r0
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	3601      	adds	r6, #1
 800bcec:	4313      	orrs	r3, r2
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	7831      	ldrb	r1, [r6, #0]
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	482b      	ldr	r0, [pc, #172]	; (800bda4 <_vfiprintf_r+0x22c>)
 800bcf6:	1c75      	adds	r5, r6, #1
 800bcf8:	7621      	strb	r1, [r4, #24]
 800bcfa:	f7fe f8cc 	bl	8009e96 <memchr>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d043      	beq.n	800bd8a <_vfiprintf_r+0x212>
 800bd02:	4b29      	ldr	r3, [pc, #164]	; (800bda8 <_vfiprintf_r+0x230>)
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d125      	bne.n	800bd54 <_vfiprintf_r+0x1dc>
 800bd08:	2207      	movs	r2, #7
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	4393      	bics	r3, r2
 800bd10:	3308      	adds	r3, #8
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	6963      	ldr	r3, [r4, #20]
 800bd16:	9a04      	ldr	r2, [sp, #16]
 800bd18:	189b      	adds	r3, r3, r2
 800bd1a:	6163      	str	r3, [r4, #20]
 800bd1c:	e764      	b.n	800bbe8 <_vfiprintf_r+0x70>
 800bd1e:	4343      	muls	r3, r0
 800bd20:	002e      	movs	r6, r5
 800bd22:	2101      	movs	r1, #1
 800bd24:	189b      	adds	r3, r3, r2
 800bd26:	e7a6      	b.n	800bc76 <_vfiprintf_r+0xfe>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	425b      	negs	r3, r3
 800bd2c:	e7d0      	b.n	800bcd0 <_vfiprintf_r+0x158>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	200a      	movs	r0, #10
 800bd32:	001a      	movs	r2, r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	6063      	str	r3, [r4, #4]
 800bd38:	7831      	ldrb	r1, [r6, #0]
 800bd3a:	1c75      	adds	r5, r6, #1
 800bd3c:	3930      	subs	r1, #48	; 0x30
 800bd3e:	2909      	cmp	r1, #9
 800bd40:	d903      	bls.n	800bd4a <_vfiprintf_r+0x1d2>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0c5      	beq.n	800bcd2 <_vfiprintf_r+0x15a>
 800bd46:	9209      	str	r2, [sp, #36]	; 0x24
 800bd48:	e7c3      	b.n	800bcd2 <_vfiprintf_r+0x15a>
 800bd4a:	4342      	muls	r2, r0
 800bd4c:	002e      	movs	r6, r5
 800bd4e:	2301      	movs	r3, #1
 800bd50:	1852      	adds	r2, r2, r1
 800bd52:	e7f1      	b.n	800bd38 <_vfiprintf_r+0x1c0>
 800bd54:	aa07      	add	r2, sp, #28
 800bd56:	9200      	str	r2, [sp, #0]
 800bd58:	0021      	movs	r1, r4
 800bd5a:	003a      	movs	r2, r7
 800bd5c:	4b13      	ldr	r3, [pc, #76]	; (800bdac <_vfiprintf_r+0x234>)
 800bd5e:	9803      	ldr	r0, [sp, #12]
 800bd60:	f7fd fb0c 	bl	800937c <_printf_float>
 800bd64:	9004      	str	r0, [sp, #16]
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	d1d3      	bne.n	800bd14 <_vfiprintf_r+0x19c>
 800bd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd6e:	07db      	lsls	r3, r3, #31
 800bd70:	d405      	bmi.n	800bd7e <_vfiprintf_r+0x206>
 800bd72:	89bb      	ldrh	r3, [r7, #12]
 800bd74:	059b      	lsls	r3, r3, #22
 800bd76:	d402      	bmi.n	800bd7e <_vfiprintf_r+0x206>
 800bd78:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bd7a:	f7fe f88b 	bl	8009e94 <__retarget_lock_release_recursive>
 800bd7e:	89bb      	ldrh	r3, [r7, #12]
 800bd80:	065b      	lsls	r3, r3, #25
 800bd82:	d500      	bpl.n	800bd86 <_vfiprintf_r+0x20e>
 800bd84:	e71d      	b.n	800bbc2 <_vfiprintf_r+0x4a>
 800bd86:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd88:	e71d      	b.n	800bbc6 <_vfiprintf_r+0x4e>
 800bd8a:	aa07      	add	r2, sp, #28
 800bd8c:	9200      	str	r2, [sp, #0]
 800bd8e:	0021      	movs	r1, r4
 800bd90:	003a      	movs	r2, r7
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <_vfiprintf_r+0x234>)
 800bd94:	9803      	ldr	r0, [sp, #12]
 800bd96:	f7fd fdb7 	bl	8009908 <_printf_i>
 800bd9a:	e7e3      	b.n	800bd64 <_vfiprintf_r+0x1ec>
 800bd9c:	0800c41c 	.word	0x0800c41c
 800bda0:	0800c422 	.word	0x0800c422
 800bda4:	0800c426 	.word	0x0800c426
 800bda8:	0800937d 	.word	0x0800937d
 800bdac:	0800bb55 	.word	0x0800bb55

0800bdb0 <__swbuf_r>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	0006      	movs	r6, r0
 800bdb4:	000d      	movs	r5, r1
 800bdb6:	0014      	movs	r4, r2
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d004      	beq.n	800bdc6 <__swbuf_r+0x16>
 800bdbc:	6a03      	ldr	r3, [r0, #32]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <__swbuf_r+0x16>
 800bdc2:	f7fd ff41 	bl	8009c48 <__sinit>
 800bdc6:	69a3      	ldr	r3, [r4, #24]
 800bdc8:	60a3      	str	r3, [r4, #8]
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	071b      	lsls	r3, r3, #28
 800bdce:	d528      	bpl.n	800be22 <__swbuf_r+0x72>
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d025      	beq.n	800be22 <__swbuf_r+0x72>
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	b2ef      	uxtb	r7, r5
 800bddc:	1ac0      	subs	r0, r0, r3
 800bdde:	6963      	ldr	r3, [r4, #20]
 800bde0:	b2ed      	uxtb	r5, r5
 800bde2:	4283      	cmp	r3, r0
 800bde4:	dc05      	bgt.n	800bdf2 <__swbuf_r+0x42>
 800bde6:	0021      	movs	r1, r4
 800bde8:	0030      	movs	r0, r6
 800bdea:	f7ff fd8b 	bl	800b904 <_fflush_r>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d11d      	bne.n	800be2e <__swbuf_r+0x7e>
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	60a3      	str	r3, [r4, #8]
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	701f      	strb	r7, [r3, #0]
 800be02:	6963      	ldr	r3, [r4, #20]
 800be04:	4283      	cmp	r3, r0
 800be06:	d004      	beq.n	800be12 <__swbuf_r+0x62>
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	07db      	lsls	r3, r3, #31
 800be0c:	d507      	bpl.n	800be1e <__swbuf_r+0x6e>
 800be0e:	2d0a      	cmp	r5, #10
 800be10:	d105      	bne.n	800be1e <__swbuf_r+0x6e>
 800be12:	0021      	movs	r1, r4
 800be14:	0030      	movs	r0, r6
 800be16:	f7ff fd75 	bl	800b904 <_fflush_r>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d107      	bne.n	800be2e <__swbuf_r+0x7e>
 800be1e:	0028      	movs	r0, r5
 800be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be22:	0021      	movs	r1, r4
 800be24:	0030      	movs	r0, r6
 800be26:	f000 f805 	bl	800be34 <__swsetup_r>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d0d3      	beq.n	800bdd6 <__swbuf_r+0x26>
 800be2e:	2501      	movs	r5, #1
 800be30:	426d      	negs	r5, r5
 800be32:	e7f4      	b.n	800be1e <__swbuf_r+0x6e>

0800be34 <__swsetup_r>:
 800be34:	4b30      	ldr	r3, [pc, #192]	; (800bef8 <__swsetup_r+0xc4>)
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	0005      	movs	r5, r0
 800be3a:	6818      	ldr	r0, [r3, #0]
 800be3c:	000c      	movs	r4, r1
 800be3e:	2800      	cmp	r0, #0
 800be40:	d004      	beq.n	800be4c <__swsetup_r+0x18>
 800be42:	6a03      	ldr	r3, [r0, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <__swsetup_r+0x18>
 800be48:	f7fd fefe 	bl	8009c48 <__sinit>
 800be4c:	230c      	movs	r3, #12
 800be4e:	5ee2      	ldrsh	r2, [r4, r3]
 800be50:	b293      	uxth	r3, r2
 800be52:	0711      	lsls	r1, r2, #28
 800be54:	d423      	bmi.n	800be9e <__swsetup_r+0x6a>
 800be56:	06d9      	lsls	r1, r3, #27
 800be58:	d407      	bmi.n	800be6a <__swsetup_r+0x36>
 800be5a:	2309      	movs	r3, #9
 800be5c:	2001      	movs	r0, #1
 800be5e:	602b      	str	r3, [r5, #0]
 800be60:	3337      	adds	r3, #55	; 0x37
 800be62:	4313      	orrs	r3, r2
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	4240      	negs	r0, r0
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	075b      	lsls	r3, r3, #29
 800be6c:	d513      	bpl.n	800be96 <__swsetup_r+0x62>
 800be6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be70:	2900      	cmp	r1, #0
 800be72:	d008      	beq.n	800be86 <__swsetup_r+0x52>
 800be74:	0023      	movs	r3, r4
 800be76:	3344      	adds	r3, #68	; 0x44
 800be78:	4299      	cmp	r1, r3
 800be7a:	d002      	beq.n	800be82 <__swsetup_r+0x4e>
 800be7c:	0028      	movs	r0, r5
 800be7e:	f7fe feb3 	bl	800abe8 <_free_r>
 800be82:	2300      	movs	r3, #0
 800be84:	6363      	str	r3, [r4, #52]	; 0x34
 800be86:	2224      	movs	r2, #36	; 0x24
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	4393      	bics	r3, r2
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	2300      	movs	r3, #0
 800be90:	6063      	str	r3, [r4, #4]
 800be92:	6923      	ldr	r3, [r4, #16]
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	2308      	movs	r3, #8
 800be98:	89a2      	ldrh	r2, [r4, #12]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10b      	bne.n	800bebc <__swsetup_r+0x88>
 800bea4:	21a0      	movs	r1, #160	; 0xa0
 800bea6:	2280      	movs	r2, #128	; 0x80
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	0089      	lsls	r1, r1, #2
 800beac:	0092      	lsls	r2, r2, #2
 800beae:	400b      	ands	r3, r1
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d003      	beq.n	800bebc <__swsetup_r+0x88>
 800beb4:	0021      	movs	r1, r4
 800beb6:	0028      	movs	r0, r5
 800beb8:	f000 f892 	bl	800bfe0 <__smakebuf_r>
 800bebc:	220c      	movs	r2, #12
 800bebe:	5ea3      	ldrsh	r3, [r4, r2]
 800bec0:	2001      	movs	r0, #1
 800bec2:	001a      	movs	r2, r3
 800bec4:	b299      	uxth	r1, r3
 800bec6:	4002      	ands	r2, r0
 800bec8:	4203      	tst	r3, r0
 800beca:	d00f      	beq.n	800beec <__swsetup_r+0xb8>
 800becc:	2200      	movs	r2, #0
 800bece:	60a2      	str	r2, [r4, #8]
 800bed0:	6962      	ldr	r2, [r4, #20]
 800bed2:	4252      	negs	r2, r2
 800bed4:	61a2      	str	r2, [r4, #24]
 800bed6:	2000      	movs	r0, #0
 800bed8:	6922      	ldr	r2, [r4, #16]
 800beda:	4282      	cmp	r2, r0
 800bedc:	d1c4      	bne.n	800be68 <__swsetup_r+0x34>
 800bede:	0609      	lsls	r1, r1, #24
 800bee0:	d5c2      	bpl.n	800be68 <__swsetup_r+0x34>
 800bee2:	2240      	movs	r2, #64	; 0x40
 800bee4:	4313      	orrs	r3, r2
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	3801      	subs	r0, #1
 800beea:	e7bd      	b.n	800be68 <__swsetup_r+0x34>
 800beec:	0788      	lsls	r0, r1, #30
 800beee:	d400      	bmi.n	800bef2 <__swsetup_r+0xbe>
 800bef0:	6962      	ldr	r2, [r4, #20]
 800bef2:	60a2      	str	r2, [r4, #8]
 800bef4:	e7ef      	b.n	800bed6 <__swsetup_r+0xa2>
 800bef6:	46c0      	nop			; (mov r8, r8)
 800bef8:	20000064 	.word	0x20000064

0800befc <_raise_r>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	0004      	movs	r4, r0
 800bf00:	000d      	movs	r5, r1
 800bf02:	291f      	cmp	r1, #31
 800bf04:	d904      	bls.n	800bf10 <_raise_r+0x14>
 800bf06:	2316      	movs	r3, #22
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	4240      	negs	r0, r0
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}
 800bf10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d004      	beq.n	800bf20 <_raise_r+0x24>
 800bf16:	008a      	lsls	r2, r1, #2
 800bf18:	189b      	adds	r3, r3, r2
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	d108      	bne.n	800bf32 <_raise_r+0x36>
 800bf20:	0020      	movs	r0, r4
 800bf22:	f000 f831 	bl	800bf88 <_getpid_r>
 800bf26:	002a      	movs	r2, r5
 800bf28:	0001      	movs	r1, r0
 800bf2a:	0020      	movs	r0, r4
 800bf2c:	f000 f81a 	bl	800bf64 <_kill_r>
 800bf30:	e7ed      	b.n	800bf0e <_raise_r+0x12>
 800bf32:	2000      	movs	r0, #0
 800bf34:	2a01      	cmp	r2, #1
 800bf36:	d0ea      	beq.n	800bf0e <_raise_r+0x12>
 800bf38:	1c51      	adds	r1, r2, #1
 800bf3a:	d103      	bne.n	800bf44 <_raise_r+0x48>
 800bf3c:	2316      	movs	r3, #22
 800bf3e:	3001      	adds	r0, #1
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	e7e4      	b.n	800bf0e <_raise_r+0x12>
 800bf44:	2400      	movs	r4, #0
 800bf46:	0028      	movs	r0, r5
 800bf48:	601c      	str	r4, [r3, #0]
 800bf4a:	4790      	blx	r2
 800bf4c:	0020      	movs	r0, r4
 800bf4e:	e7de      	b.n	800bf0e <_raise_r+0x12>

0800bf50 <raise>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	4b03      	ldr	r3, [pc, #12]	; (800bf60 <raise+0x10>)
 800bf54:	0001      	movs	r1, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	f7ff ffd0 	bl	800befc <_raise_r>
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	20000064 	.word	0x20000064

0800bf64 <_kill_r>:
 800bf64:	2300      	movs	r3, #0
 800bf66:	b570      	push	{r4, r5, r6, lr}
 800bf68:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <_kill_r+0x20>)
 800bf6a:	0004      	movs	r4, r0
 800bf6c:	0008      	movs	r0, r1
 800bf6e:	0011      	movs	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f7 ff11 	bl	8003d98 <_kill>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d103      	bne.n	800bf82 <_kill_r+0x1e>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d000      	beq.n	800bf82 <_kill_r+0x1e>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	20000628 	.word	0x20000628

0800bf88 <_getpid_r>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	f7f7 feff 	bl	8003d8c <_getpid>
 800bf8e:	bd10      	pop	{r4, pc}

0800bf90 <__swhatbuf_r>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	000e      	movs	r6, r1
 800bf94:	001d      	movs	r5, r3
 800bf96:	230e      	movs	r3, #14
 800bf98:	5ec9      	ldrsh	r1, [r1, r3]
 800bf9a:	0014      	movs	r4, r2
 800bf9c:	b096      	sub	sp, #88	; 0x58
 800bf9e:	2900      	cmp	r1, #0
 800bfa0:	da0c      	bge.n	800bfbc <__swhatbuf_r+0x2c>
 800bfa2:	89b2      	ldrh	r2, [r6, #12]
 800bfa4:	2380      	movs	r3, #128	; 0x80
 800bfa6:	0011      	movs	r1, r2
 800bfa8:	4019      	ands	r1, r3
 800bfaa:	421a      	tst	r2, r3
 800bfac:	d013      	beq.n	800bfd6 <__swhatbuf_r+0x46>
 800bfae:	2100      	movs	r1, #0
 800bfb0:	3b40      	subs	r3, #64	; 0x40
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	6029      	str	r1, [r5, #0]
 800bfb6:	6023      	str	r3, [r4, #0]
 800bfb8:	b016      	add	sp, #88	; 0x58
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	466a      	mov	r2, sp
 800bfbe:	f000 f84d 	bl	800c05c <_fstat_r>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	dbed      	blt.n	800bfa2 <__swhatbuf_r+0x12>
 800bfc6:	23f0      	movs	r3, #240	; 0xf0
 800bfc8:	9901      	ldr	r1, [sp, #4]
 800bfca:	021b      	lsls	r3, r3, #8
 800bfcc:	4019      	ands	r1, r3
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <__swhatbuf_r+0x4c>)
 800bfd0:	18c9      	adds	r1, r1, r3
 800bfd2:	424b      	negs	r3, r1
 800bfd4:	4159      	adcs	r1, r3
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	e7ea      	b.n	800bfb2 <__swhatbuf_r+0x22>
 800bfdc:	ffffe000 	.word	0xffffe000

0800bfe0 <__smakebuf_r>:
 800bfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfe2:	2602      	movs	r6, #2
 800bfe4:	898b      	ldrh	r3, [r1, #12]
 800bfe6:	0005      	movs	r5, r0
 800bfe8:	000c      	movs	r4, r1
 800bfea:	4233      	tst	r3, r6
 800bfec:	d006      	beq.n	800bffc <__smakebuf_r+0x1c>
 800bfee:	0023      	movs	r3, r4
 800bff0:	3347      	adds	r3, #71	; 0x47
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	2301      	movs	r3, #1
 800bff8:	6163      	str	r3, [r4, #20]
 800bffa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bffc:	466a      	mov	r2, sp
 800bffe:	ab01      	add	r3, sp, #4
 800c000:	f7ff ffc6 	bl	800bf90 <__swhatbuf_r>
 800c004:	9900      	ldr	r1, [sp, #0]
 800c006:	0007      	movs	r7, r0
 800c008:	0028      	movs	r0, r5
 800c00a:	f7fe fe63 	bl	800acd4 <_malloc_r>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d108      	bne.n	800c024 <__smakebuf_r+0x44>
 800c012:	220c      	movs	r2, #12
 800c014:	5ea3      	ldrsh	r3, [r4, r2]
 800c016:	059a      	lsls	r2, r3, #22
 800c018:	d4ef      	bmi.n	800bffa <__smakebuf_r+0x1a>
 800c01a:	2203      	movs	r2, #3
 800c01c:	4393      	bics	r3, r2
 800c01e:	431e      	orrs	r6, r3
 800c020:	81a6      	strh	r6, [r4, #12]
 800c022:	e7e4      	b.n	800bfee <__smakebuf_r+0xe>
 800c024:	2380      	movs	r3, #128	; 0x80
 800c026:	89a2      	ldrh	r2, [r4, #12]
 800c028:	6020      	str	r0, [r4, #0]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	6120      	str	r0, [r4, #16]
 800c032:	6163      	str	r3, [r4, #20]
 800c034:	9b01      	ldr	r3, [sp, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00c      	beq.n	800c054 <__smakebuf_r+0x74>
 800c03a:	0028      	movs	r0, r5
 800c03c:	230e      	movs	r3, #14
 800c03e:	5ee1      	ldrsh	r1, [r4, r3]
 800c040:	f000 f81e 	bl	800c080 <_isatty_r>
 800c044:	2800      	cmp	r0, #0
 800c046:	d005      	beq.n	800c054 <__smakebuf_r+0x74>
 800c048:	2303      	movs	r3, #3
 800c04a:	89a2      	ldrh	r2, [r4, #12]
 800c04c:	439a      	bics	r2, r3
 800c04e:	3b02      	subs	r3, #2
 800c050:	4313      	orrs	r3, r2
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	433b      	orrs	r3, r7
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	e7ce      	b.n	800bffa <__smakebuf_r+0x1a>

0800c05c <_fstat_r>:
 800c05c:	2300      	movs	r3, #0
 800c05e:	b570      	push	{r4, r5, r6, lr}
 800c060:	4d06      	ldr	r5, [pc, #24]	; (800c07c <_fstat_r+0x20>)
 800c062:	0004      	movs	r4, r0
 800c064:	0008      	movs	r0, r1
 800c066:	0011      	movs	r1, r2
 800c068:	602b      	str	r3, [r5, #0]
 800c06a:	f7f7 fef4 	bl	8003e56 <_fstat>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d103      	bne.n	800c07a <_fstat_r+0x1e>
 800c072:	682b      	ldr	r3, [r5, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d000      	beq.n	800c07a <_fstat_r+0x1e>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	20000628 	.word	0x20000628

0800c080 <_isatty_r>:
 800c080:	2300      	movs	r3, #0
 800c082:	b570      	push	{r4, r5, r6, lr}
 800c084:	4d06      	ldr	r5, [pc, #24]	; (800c0a0 <_isatty_r+0x20>)
 800c086:	0004      	movs	r4, r0
 800c088:	0008      	movs	r0, r1
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	f7f7 fef1 	bl	8003e72 <_isatty>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d103      	bne.n	800c09c <_isatty_r+0x1c>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d000      	beq.n	800c09c <_isatty_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	20000628 	.word	0x20000628

0800c0a4 <_init>:
 800c0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0aa:	bc08      	pop	{r3}
 800c0ac:	469e      	mov	lr, r3
 800c0ae:	4770      	bx	lr

0800c0b0 <_fini>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b6:	bc08      	pop	{r3}
 800c0b8:	469e      	mov	lr, r3
 800c0ba:	4770      	bx	lr
