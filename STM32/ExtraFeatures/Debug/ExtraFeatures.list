
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800b8b0  0800b8b0  0001b8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  200001d4  0800bf48  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800bf48  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146b4  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6f  00000000  00000000  000348f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3e  00000000  00000000  000389a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c95  00000000  00000000  000397e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ada  00000000  00000000  0003d47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078980  00000000  00000000  00054f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005438  00000000  00000000  000cd8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d2d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b898 	.word	0x0800b898

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800b898 	.word	0x0800b898

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa8f 	bl	8001960 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9df 	bl	8001810 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa81 	bl	8001960 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa77 	bl	8001960 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa07 	bl	8001894 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9fd 	bl	8001894 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5f 	bl	8000984 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa6b 	bl	80009d0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa61 	bl	80009d0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 f97a 	bl	80028d0 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 f975 	bl	80028d0 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	464f      	mov	r7, r9
 8000754:	4646      	mov	r6, r8
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0047      	lsls	r7, r0, #1
 800075e:	1c0c      	adds	r4, r1, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	0e3f      	lsrs	r7, r7, #24
 8000764:	0fc6      	lsrs	r6, r0, #31
 8000766:	2f00      	cmp	r7, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0x1c>
 800076a:	e06f      	b.n	800084c <__aeabi_fdiv+0xfc>
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x22>
 8000770:	e074      	b.n	800085c <__aeabi_fdiv+0x10c>
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	00ed      	lsls	r5, r5, #3
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4315      	orrs	r5, r2
 8000780:	3f7f      	subs	r7, #127	; 0x7f
 8000782:	0263      	lsls	r3, r4, #9
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4698      	mov	r8, r3
 8000788:	0063      	lsls	r3, r4, #1
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0fe4      	lsrs	r4, r4, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d04d      	beq.n	800082e <__aeabi_fdiv+0xde>
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d045      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 8000796:	4642      	mov	r2, r8
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	4311      	orrs	r1, r2
 80007a0:	4688      	mov	r8, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	3b7f      	subs	r3, #127	; 0x7f
 80007a6:	0031      	movs	r1, r6
 80007a8:	1aff      	subs	r7, r7, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d900      	bls.n	80007b6 <__aeabi_fdiv+0x66>
 80007b4:	e0b8      	b.n	8000928 <__aeabi_fdiv+0x1d8>
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <__aeabi_fdiv+0x228>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4698      	mov	r8, r3
 80007c2:	0026      	movs	r6, r4
 80007c4:	4645      	mov	r5, r8
 80007c6:	4692      	mov	sl, r2
 80007c8:	4653      	mov	r3, sl
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fdiv+0x80>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fdiv+0x19c>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fdiv+0x86>
 80007d4:	e0a1      	b.n	800091a <__aeabi_fdiv+0x1ca>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d018      	beq.n	800080c <__aeabi_fdiv+0xbc>
 80007da:	003b      	movs	r3, r7
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd6d      	ble.n	80008be <__aeabi_fdiv+0x16e>
 80007e2:	076a      	lsls	r2, r5, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007e6:	220f      	movs	r2, #15
 80007e8:	402a      	ands	r2, r5
 80007ea:	2a04      	cmp	r2, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	3504      	adds	r5, #4
 80007f0:	012a      	lsls	r2, r5, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0xac>
 80007f4:	4b61      	ldr	r3, [pc, #388]	; (800097c <__aeabi_fdiv+0x22c>)
 80007f6:	401d      	ands	r5, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3380      	adds	r3, #128	; 0x80
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	dd00      	ble.n	8000802 <__aeabi_fdiv+0xb2>
 8000800:	e074      	b.n	80008ec <__aeabi_fdiv+0x19c>
 8000802:	01aa      	lsls	r2, r5, #6
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e002      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800080a:	000e      	movs	r6, r1
 800080c:	2000      	movs	r0, #0
 800080e:	2200      	movs	r2, #0
 8000810:	05c0      	lsls	r0, r0, #23
 8000812:	07f6      	lsls	r6, r6, #31
 8000814:	4310      	orrs	r0, r2
 8000816:	4330      	orrs	r0, r6
 8000818:	bce0      	pop	{r5, r6, r7}
 800081a:	46ba      	mov	sl, r7
 800081c:	46b1      	mov	r9, r6
 800081e:	46a8      	mov	r8, r5
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0x158>
 8000828:	2202      	movs	r2, #2
 800082a:	3fff      	subs	r7, #255	; 0xff
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0xe6>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0x140>
 8000834:	2201      	movs	r2, #1
 8000836:	0031      	movs	r1, r6
 8000838:	464b      	mov	r3, r9
 800083a:	4061      	eors	r1, r4
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0x166>
 8000844:	484e      	ldr	r0, [pc, #312]	; (8000980 <__aeabi_fdiv+0x230>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2d00      	cmp	r5, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0x128>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0x32>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0x11c>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e78a      	b.n	8000782 <__aeabi_fdiv+0x32>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	; 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e784      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000878:	0028      	movs	r0, r5
 800087a:	f002 f80b 	bl	8002894 <__clzsi2>
 800087e:	2776      	movs	r7, #118	; 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409d      	lsls	r5, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e778      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000890:	4640      	mov	r0, r8
 8000892:	f001 ffff 	bl	8002894 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	; 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	4690      	mov	r8, r2
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	e77e      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	33fc      	adds	r3, #252	; 0xfc
 80008b2:	2203      	movs	r2, #3
 80008b4:	e777      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008b6:	000e      	movs	r6, r1
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	e7a8      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008be:	2201      	movs	r2, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b1b      	cmp	r3, #27
 80008c4:	dca2      	bgt.n	800080c <__aeabi_fdiv+0xbc>
 80008c6:	379e      	adds	r7, #158	; 0x9e
 80008c8:	002a      	movs	r2, r5
 80008ca:	40bd      	lsls	r5, r7
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	1e6b      	subs	r3, r5, #1
 80008d0:	419d      	sbcs	r5, r3
 80008d2:	4315      	orrs	r5, r2
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008d8:	220f      	movs	r2, #15
 80008da:	402a      	ands	r2, r5
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008e0:	3504      	adds	r5, #4
 80008e2:	016a      	lsls	r2, r5, #5
 80008e4:	d544      	bpl.n	8000970 <__aeabi_fdiv+0x220>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	e791      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	e78e      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	2600      	movs	r6, #0
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	e789      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	4215      	tst	r5, r2
 8000906:	d008      	beq.n	800091a <__aeabi_fdiv+0x1ca>
 8000908:	4643      	mov	r3, r8
 800090a:	4213      	tst	r3, r2
 800090c:	d105      	bne.n	800091a <__aeabi_fdiv+0x1ca>
 800090e:	431a      	orrs	r2, r3
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0026      	movs	r6, r4
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e77a      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	432a      	orrs	r2, r5
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e773      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000928:	4642      	mov	r2, r8
 800092a:	016b      	lsls	r3, r5, #5
 800092c:	0155      	lsls	r5, r2, #5
 800092e:	42ab      	cmp	r3, r5
 8000930:	d21a      	bcs.n	8000968 <__aeabi_fdiv+0x218>
 8000932:	201b      	movs	r0, #27
 8000934:	2200      	movs	r2, #0
 8000936:	3f01      	subs	r7, #1
 8000938:	2601      	movs	r6, #1
 800093a:	001c      	movs	r4, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2c00      	cmp	r4, #0
 8000942:	db01      	blt.n	8000948 <__aeabi_fdiv+0x1f8>
 8000944:	429d      	cmp	r5, r3
 8000946:	d801      	bhi.n	800094c <__aeabi_fdiv+0x1fc>
 8000948:	1b5b      	subs	r3, r3, r5
 800094a:	4332      	orrs	r2, r6
 800094c:	3801      	subs	r0, #1
 800094e:	2800      	cmp	r0, #0
 8000950:	d1f3      	bne.n	800093a <__aeabi_fdiv+0x1ea>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	4183      	sbcs	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	001d      	movs	r5, r3
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	000e      	movs	r6, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd00      	ble.n	8000966 <__aeabi_fdiv+0x216>
 8000964:	e73d      	b.n	80007e2 <__aeabi_fdiv+0x92>
 8000966:	e7aa      	b.n	80008be <__aeabi_fdiv+0x16e>
 8000968:	201a      	movs	r0, #26
 800096a:	2201      	movs	r2, #1
 800096c:	1b5b      	subs	r3, r3, r5
 800096e:	e7e3      	b.n	8000938 <__aeabi_fdiv+0x1e8>
 8000970:	01aa      	lsls	r2, r5, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a52      	lsrs	r2, r2, #9
 8000976:	e74b      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000978:	0800b8c4 	.word	0x0800b8c4
 800097c:	f7ffffff 	.word	0xf7ffffff
 8000980:	0800b904 	.word	0x0800b904

08000984 <__eqsf2>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0245      	lsls	r5, r0, #9
 800098a:	024e      	lsls	r6, r1, #9
 800098c:	004c      	lsls	r4, r1, #1
 800098e:	0fc3      	lsrs	r3, r0, #31
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	2001      	movs	r0, #1
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0a76      	lsrs	r6, r6, #9
 8000998:	0e24      	lsrs	r4, r4, #24
 800099a:	0fc9      	lsrs	r1, r1, #31
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d006      	beq.n	80009ae <__eqsf2+0x2a>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d003      	beq.n	80009ac <__eqsf2+0x28>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d101      	bne.n	80009ac <__eqsf2+0x28>
 80009a8:	42b5      	cmp	r5, r6
 80009aa:	d006      	beq.n	80009ba <__eqsf2+0x36>
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1fc      	bne.n	80009ac <__eqsf2+0x28>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d1fa      	bne.n	80009ac <__eqsf2+0x28>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1f8      	bne.n	80009ac <__eqsf2+0x28>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d006      	beq.n	80009cc <__eqsf2+0x48>
 80009be:	2001      	movs	r0, #1
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d1f3      	bne.n	80009ac <__eqsf2+0x28>
 80009c4:	0028      	movs	r0, r5
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	e7ef      	b.n	80009ac <__eqsf2+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ed      	b.n	80009ac <__eqsf2+0x28>

080009d0 <__gesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d01b      	beq.n	8000a22 <__gesf2+0x52>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00e      	beq.n	8000a0c <__gesf2+0x3c>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11b      	bne.n	8000a2a <__gesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d101      	bne.n	80009fa <__gesf2+0x2a>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x64>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d00c      	beq.n	8000a18 <__gesf2+0x48>
 80009fe:	4283      	cmp	r3, r0
 8000a00:	d01c      	beq.n	8000a3c <__gesf2+0x6c>
 8000a02:	2102      	movs	r1, #2
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4008      	ands	r0, r1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d122      	bne.n	8000a56 <__gesf2+0x86>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1f4      	bne.n	80009fe <__gesf2+0x2e>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d1f2      	bne.n	80009fe <__gesf2+0x2e>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f6      	bne.n	8000a0a <__gesf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	4240      	negs	r0, r0
 8000a20:	e7f3      	b.n	8000a0a <__gesf2+0x3a>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d117      	bne.n	8000a56 <__gesf2+0x86>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d0f0      	beq.n	8000a0c <__gesf2+0x3c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1e7      	bne.n	80009fe <__gesf2+0x2e>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1e5      	bne.n	80009fe <__gesf2+0x2e>
 8000a32:	e7e6      	b.n	8000a02 <__gesf2+0x32>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0e7      	beq.n	8000a0a <__gesf2+0x3a>
 8000a3a:	e7e2      	b.n	8000a02 <__gesf2+0x32>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__gesf2+0x7c>
 8000a40:	dbea      	blt.n	8000a18 <__gesf2+0x48>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__gesf2+0x7c>
 8000a46:	d3e7      	bcc.n	8000a18 <__gesf2+0x48>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7de      	b.n	8000a0a <__gesf2+0x3a>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7d9      	b.n	8000a0a <__gesf2+0x3a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	4240      	negs	r0, r0
 8000a5a:	e7d6      	b.n	8000a0a <__gesf2+0x3a>

08000a5c <__lesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d00b      	beq.n	8000a8e <__lesf2+0x32>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00d      	beq.n	8000a96 <__lesf2+0x3a>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11f      	bne.n	8000abe <__lesf2+0x62>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d116      	bne.n	8000ab0 <__lesf2+0x54>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d114      	bne.n	8000ab0 <__lesf2+0x54>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d010      	beq.n	8000aae <__lesf2+0x52>
 8000a8c:	e009      	b.n	8000aa2 <__lesf2+0x46>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d10c      	bne.n	8000aac <__lesf2+0x50>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d113      	bne.n	8000abe <__lesf2+0x62>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d108      	bne.n	8000aac <__lesf2+0x50>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d008      	beq.n	8000ab0 <__lesf2+0x54>
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d012      	beq.n	8000ac8 <__lesf2+0x6c>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	1e58      	subs	r0, r3, #1
 8000aa6:	4008      	ands	r0, r1
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e000      	b.n	8000aae <__lesf2+0x52>
 8000aac:	2002      	movs	r0, #2
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d1f4      	bne.n	8000a9e <__lesf2+0x42>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1fa      	bne.n	8000aae <__lesf2+0x52>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4240      	negs	r0, r0
 8000abc:	e7f7      	b.n	8000aae <__lesf2+0x52>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1ed      	bne.n	8000a9e <__lesf2+0x42>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1eb      	bne.n	8000a9e <__lesf2+0x42>
 8000ac6:	e7ec      	b.n	8000aa2 <__lesf2+0x46>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__lesf2+0x7c>
 8000acc:	dbf2      	blt.n	8000ab4 <__lesf2+0x58>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__lesf2+0x7c>
 8000ad2:	d3ef      	bcc.n	8000ab4 <__lesf2+0x58>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ea      	b.n	8000aae <__lesf2+0x52>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e5      	b.n	8000aae <__lesf2+0x52>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__aeabi_ui2f>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	1e04      	subs	r4, r0, #0
 8000ae8:	d00e      	beq.n	8000b08 <__aeabi_ui2f+0x24>
 8000aea:	f001 fed3 	bl	8002894 <__clzsi2>
 8000aee:	239e      	movs	r3, #158	; 0x9e
 8000af0:	0001      	movs	r1, r0
 8000af2:	1a1b      	subs	r3, r3, r0
 8000af4:	2b96      	cmp	r3, #150	; 0x96
 8000af6:	dc0c      	bgt.n	8000b12 <__aeabi_ui2f+0x2e>
 8000af8:	2808      	cmp	r0, #8
 8000afa:	d02c      	beq.n	8000b56 <__aeabi_ui2f+0x72>
 8000afc:	3908      	subs	r1, #8
 8000afe:	408c      	lsls	r4, r1
 8000b00:	0264      	lsls	r4, r4, #9
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	e001      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	05c0      	lsls	r0, r0, #23
 8000b0e:	4320      	orrs	r0, r4
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b99      	cmp	r3, #153	; 0x99
 8000b14:	dd0a      	ble.n	8000b2c <__aeabi_ui2f+0x48>
 8000b16:	0002      	movs	r2, r0
 8000b18:	0020      	movs	r0, r4
 8000b1a:	321b      	adds	r2, #27
 8000b1c:	4090      	lsls	r0, r2
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1e50      	subs	r0, r2, #1
 8000b22:	4182      	sbcs	r2, r0
 8000b24:	2005      	movs	r0, #5
 8000b26:	1a40      	subs	r0, r0, r1
 8000b28:	40c4      	lsrs	r4, r0
 8000b2a:	4314      	orrs	r4, r2
 8000b2c:	2905      	cmp	r1, #5
 8000b2e:	dc16      	bgt.n	8000b5e <__aeabi_ui2f+0x7a>
 8000b30:	0022      	movs	r2, r4
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b34:	4002      	ands	r2, r0
 8000b36:	0765      	lsls	r5, r4, #29
 8000b38:	d009      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	402c      	ands	r4, r5
 8000b3e:	2c04      	cmp	r4, #4
 8000b40:	d005      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0154      	lsls	r4, r2, #5
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b48:	239f      	movs	r3, #159	; 0x9f
 8000b4a:	4002      	ands	r2, r0
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	0a54      	lsrs	r4, r2, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e7da      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	2096      	movs	r0, #150	; 0x96
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	e7d6      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b5e:	1f4a      	subs	r2, r1, #5
 8000b60:	4094      	lsls	r4, r2
 8000b62:	0022      	movs	r2, r4
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b66:	4002      	ands	r2, r0
 8000b68:	0765      	lsls	r5, r4, #29
 8000b6a:	d0f0      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b6c:	e7e5      	b.n	8000b3a <__aeabi_ui2f+0x56>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fbffffff 	.word	0xfbffffff

08000b74 <__aeabi_dadd>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0004      	movs	r4, r0
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	001f      	movs	r7, r3
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0010      	movs	r0, r2
 8000b86:	004e      	lsls	r6, r1, #1
 8000b88:	0a5b      	lsrs	r3, r3, #9
 8000b8a:	0fcd      	lsrs	r5, r1, #31
 8000b8c:	0f61      	lsrs	r1, r4, #29
 8000b8e:	007a      	lsls	r2, r7, #1
 8000b90:	4319      	orrs	r1, r3
 8000b92:	00e3      	lsls	r3, r4, #3
 8000b94:	033c      	lsls	r4, r7, #12
 8000b96:	0fff      	lsrs	r7, r7, #31
 8000b98:	46bc      	mov	ip, r7
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	0f47      	lsrs	r7, r0, #29
 8000b9e:	4327      	orrs	r7, r4
 8000ba0:	0d76      	lsrs	r6, r6, #21
 8000ba2:	0d52      	lsrs	r2, r2, #21
 8000ba4:	00c0      	lsls	r0, r0, #3
 8000ba6:	46b9      	mov	r9, r7
 8000ba8:	4680      	mov	r8, r0
 8000baa:	1ab7      	subs	r7, r6, r2
 8000bac:	4565      	cmp	r5, ip
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x3e>
 8000bb0:	e09b      	b.n	8000cea <__aeabi_dadd+0x176>
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_dadd+0x44>
 8000bb6:	e084      	b.n	8000cc2 <__aeabi_dadd+0x14e>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x4a>
 8000bbc:	e0be      	b.n	8000d3c <__aeabi_dadd+0x1c8>
 8000bbe:	4ac8      	ldr	r2, [pc, #800]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000bc0:	4296      	cmp	r6, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x52>
 8000bc4:	e124      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0412      	lsls	r2, r2, #16
 8000bcc:	4314      	orrs	r4, r2
 8000bce:	46a1      	mov	r9, r4
 8000bd0:	2f38      	cmp	r7, #56	; 0x38
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x62>
 8000bd4:	e167      	b.n	8000ea6 <__aeabi_dadd+0x332>
 8000bd6:	2f1f      	cmp	r7, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x68>
 8000bda:	e1d6      	b.n	8000f8a <__aeabi_dadd+0x416>
 8000bdc:	2220      	movs	r2, #32
 8000bde:	464c      	mov	r4, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4094      	lsls	r4, r2
 8000be4:	46a2      	mov	sl, r4
 8000be6:	4644      	mov	r4, r8
 8000be8:	40fc      	lsrs	r4, r7
 8000bea:	0020      	movs	r0, r4
 8000bec:	4654      	mov	r4, sl
 8000bee:	4304      	orrs	r4, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4090      	lsls	r0, r2
 8000bf4:	1e42      	subs	r2, r0, #1
 8000bf6:	4190      	sbcs	r0, r2
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	40fa      	lsrs	r2, r7
 8000bfc:	4304      	orrs	r4, r0
 8000bfe:	1a89      	subs	r1, r1, r2
 8000c00:	1b1c      	subs	r4, r3, r4
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	4192      	sbcs	r2, r2
 8000c06:	4252      	negs	r2, r2
 8000c08:	1a8b      	subs	r3, r1, r2
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_dadd+0xa0>
 8000c12:	e0d4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000c14:	4653      	mov	r3, sl
 8000c16:	025a      	lsls	r2, r3, #9
 8000c18:	0a53      	lsrs	r3, r2, #9
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0xb0>
 8000c22:	e104      	b.n	8000e2e <__aeabi_dadd+0x2ba>
 8000c24:	4650      	mov	r0, sl
 8000c26:	f001 fe35 	bl	8002894 <__clzsi2>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0020      	movs	r0, r4
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	4651      	mov	r1, sl
 8000c36:	40d0      	lsrs	r0, r2
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	da00      	bge.n	8000c46 <__aeabi_dadd+0xd2>
 8000c44:	e102      	b.n	8000e4c <__aeabi_dadd+0x2d8>
 8000c46:	1b9b      	subs	r3, r3, r6
 8000c48:	1c59      	adds	r1, r3, #1
 8000c4a:	291f      	cmp	r1, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0xdc>
 8000c4e:	e0a7      	b.n	8000da0 <__aeabi_dadd+0x22c>
 8000c50:	2320      	movs	r3, #32
 8000c52:	0010      	movs	r0, r2
 8000c54:	0026      	movs	r6, r4
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	4098      	lsls	r0, r3
 8000c5c:	40ce      	lsrs	r6, r1
 8000c5e:	40ca      	lsrs	r2, r1
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	4692      	mov	sl, r2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4304      	orrs	r4, r0
 8000c6c:	0763      	lsls	r3, r4, #29
 8000c6e:	d009      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d005      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c78:	1d23      	adds	r3, r4, #4
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	41a4      	sbcs	r4, r4
 8000c7e:	4264      	negs	r4, r4
 8000c80:	44a2      	add	sl, r4
 8000c82:	001c      	movs	r4, r3
 8000c84:	4653      	mov	r3, sl
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_dadd+0x118>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_dadd+0x250>
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000c8e:	3601      	adds	r6, #1
 8000c90:	429e      	cmp	r6, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x122>
 8000c94:	e0b8      	b.n	8000e08 <__aeabi_dadd+0x294>
 8000c96:	4653      	mov	r3, sl
 8000c98:	4992      	ldr	r1, [pc, #584]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000c9a:	08e4      	lsrs	r4, r4, #3
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	0572      	lsls	r2, r6, #21
 8000ca6:	024c      	lsls	r4, r1, #9
 8000ca8:	0b24      	lsrs	r4, r4, #12
 8000caa:	0d52      	lsrs	r2, r2, #21
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	07ed      	lsls	r5, r5, #31
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	432a      	orrs	r2, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	bce0      	pop	{r5, r6, r7}
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	46a8      	mov	r8, r5
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d048      	beq.n	8000d58 <__aeabi_dadd+0x1e4>
 8000cc6:	1b97      	subs	r7, r2, r6
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x15a>
 8000ccc:	e10e      	b.n	8000eec <__aeabi_dadd+0x378>
 8000cce:	000c      	movs	r4, r1
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x162>
 8000cd4:	e1b7      	b.n	8001046 <__aeabi_dadd+0x4d2>
 8000cd6:	1e7c      	subs	r4, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16a>
 8000cdc:	e226      	b.n	800112c <__aeabi_dadd+0x5b8>
 8000cde:	4d80      	ldr	r5, [pc, #512]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000ce0:	42af      	cmp	r7, r5
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x172>
 8000ce4:	e1d5      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ce6:	0027      	movs	r7, r4
 8000ce8:	e107      	b.n	8000efa <__aeabi_dadd+0x386>
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_dadd+0x17c>
 8000cee:	e0b2      	b.n	8000e56 <__aeabi_dadd+0x2e2>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d047      	beq.n	8000d84 <__aeabi_dadd+0x210>
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000cf6:	4296      	cmp	r6, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x188>
 8000cfa:	e089      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	464c      	mov	r4, r9
 8000d00:	0412      	lsls	r2, r2, #16
 8000d02:	4314      	orrs	r4, r2
 8000d04:	46a1      	mov	r9, r4
 8000d06:	2f38      	cmp	r7, #56	; 0x38
 8000d08:	dc6b      	bgt.n	8000de2 <__aeabi_dadd+0x26e>
 8000d0a:	2f1f      	cmp	r7, #31
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dadd+0x19c>
 8000d0e:	e16e      	b.n	8000fee <__aeabi_dadd+0x47a>
 8000d10:	003a      	movs	r2, r7
 8000d12:	4648      	mov	r0, r9
 8000d14:	3a20      	subs	r2, #32
 8000d16:	40d0      	lsrs	r0, r2
 8000d18:	4684      	mov	ip, r0
 8000d1a:	2f20      	cmp	r7, #32
 8000d1c:	d007      	beq.n	8000d2e <__aeabi_dadd+0x1ba>
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	4648      	mov	r0, r9
 8000d22:	1bd2      	subs	r2, r2, r7
 8000d24:	4090      	lsls	r0, r2
 8000d26:	0002      	movs	r2, r0
 8000d28:	4640      	mov	r0, r8
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4640      	mov	r0, r8
 8000d30:	1e42      	subs	r2, r0, #1
 8000d32:	4190      	sbcs	r0, r2
 8000d34:	4662      	mov	r2, ip
 8000d36:	0004      	movs	r4, r0
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	e057      	b.n	8000dec <__aeabi_dadd+0x278>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x1d0>
 8000d42:	e103      	b.n	8000f4c <__aeabi_dadd+0x3d8>
 8000d44:	1e7a      	subs	r2, r7, #1
 8000d46:	2f01      	cmp	r7, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x1d8>
 8000d4a:	e193      	b.n	8001074 <__aeabi_dadd+0x500>
 8000d4c:	4c64      	ldr	r4, [pc, #400]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d4e:	42a7      	cmp	r7, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x1e0>
 8000d52:	e18a      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d54:	0017      	movs	r7, r2
 8000d56:	e73b      	b.n	8000bd0 <__aeabi_dadd+0x5c>
 8000d58:	4c63      	ldr	r4, [pc, #396]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000d5a:	1c72      	adds	r2, r6, #1
 8000d5c:	4222      	tst	r2, r4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dadd+0x1ee>
 8000d60:	e0e0      	b.n	8000f24 <__aeabi_dadd+0x3b0>
 8000d62:	000a      	movs	r2, r1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dadd+0x1f8>
 8000d6a:	e174      	b.n	8001056 <__aeabi_dadd+0x4e2>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x1fe>
 8000d70:	e1d0      	b.n	8001114 <__aeabi_dadd+0x5a0>
 8000d72:	464a      	mov	r2, r9
 8000d74:	4302      	orrs	r2, r0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x206>
 8000d78:	e1e3      	b.n	8001142 <__aeabi_dadd+0x5ce>
 8000d7a:	074a      	lsls	r2, r1, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	e029      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000d84:	464a      	mov	r2, r9
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x218>
 8000d8a:	e17d      	b.n	8001088 <__aeabi_dadd+0x514>
 8000d8c:	1e7a      	subs	r2, r7, #1
 8000d8e:	2f01      	cmp	r7, #1
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x220>
 8000d92:	e0e0      	b.n	8000f56 <__aeabi_dadd+0x3e2>
 8000d94:	4c52      	ldr	r4, [pc, #328]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d96:	42a7      	cmp	r7, r4
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x228>
 8000d9a:	e166      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d9c:	0017      	movs	r7, r2
 8000d9e:	e7b2      	b.n	8000d06 <__aeabi_dadd+0x192>
 8000da0:	0010      	movs	r0, r2
 8000da2:	3b1f      	subs	r3, #31
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	2920      	cmp	r1, #32
 8000da8:	d003      	beq.n	8000db2 <__aeabi_dadd+0x23e>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	0763      	lsls	r3, r4, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x250>
 8000dc2:	e755      	b.n	8000c70 <__aeabi_dadd+0xfc>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	08e3      	lsrs	r3, r4, #3
 8000dc8:	0752      	lsls	r2, r2, #29
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	4652      	mov	r2, sl
 8000dce:	0037      	movs	r7, r6
 8000dd0:	08d1      	lsrs	r1, r2, #3
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000dd4:	4297      	cmp	r7, r2
 8000dd6:	d01f      	beq.n	8000e18 <__aeabi_dadd+0x2a4>
 8000dd8:	0309      	lsls	r1, r1, #12
 8000dda:	057a      	lsls	r2, r7, #21
 8000ddc:	0b0c      	lsrs	r4, r1, #12
 8000dde:	0d52      	lsrs	r2, r2, #21
 8000de0:	e764      	b.n	8000cac <__aeabi_dadd+0x138>
 8000de2:	4642      	mov	r2, r8
 8000de4:	464c      	mov	r4, r9
 8000de6:	4314      	orrs	r4, r2
 8000de8:	1e62      	subs	r2, r4, #1
 8000dea:	4194      	sbcs	r4, r2
 8000dec:	18e4      	adds	r4, r4, r3
 8000dee:	429c      	cmp	r4, r3
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4252      	negs	r2, r2
 8000df4:	4692      	mov	sl, r2
 8000df6:	448a      	add	sl, r1
 8000df8:	4653      	mov	r3, sl
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	d5df      	bpl.n	8000dbe <__aeabi_dadd+0x24a>
 8000dfe:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e00:	3601      	adds	r6, #1
 8000e02:	429e      	cmp	r6, r3
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dadd+0x294>
 8000e06:	e0b3      	b.n	8000f70 <__aeabi_dadd+0x3fc>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e74d      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e10:	074a      	lsls	r2, r1, #29
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	08c9      	lsrs	r1, r1, #3
 8000e18:	001a      	movs	r2, r3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x2ac>
 8000e1e:	e200      	b.n	8001222 <__aeabi_dadd+0x6ae>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	0324      	lsls	r4, r4, #12
 8000e24:	430c      	orrs	r4, r1
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e2a:	0b24      	lsrs	r4, r4, #12
 8000e2c:	e73e      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f001 fd30 	bl	8002894 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3318      	adds	r3, #24
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_dadd+0x2ca>
 8000e3c:	e6f7      	b.n	8000c2e <__aeabi_dadd+0xba>
 8000e3e:	0022      	movs	r2, r4
 8000e40:	3808      	subs	r0, #8
 8000e42:	4082      	lsls	r2, r0
 8000e44:	2400      	movs	r4, #0
 8000e46:	42b3      	cmp	r3, r6
 8000e48:	db00      	blt.n	8000e4c <__aeabi_dadd+0x2d8>
 8000e4a:	e6fc      	b.n	8000c46 <__aeabi_dadd+0xd2>
 8000e4c:	1af6      	subs	r6, r6, r3
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	4692      	mov	sl, r2
 8000e54:	e70a      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d02b      	beq.n	8000eb2 <__aeabi_dadd+0x33e>
 8000e5a:	1b97      	subs	r7, r2, r6
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x2ee>
 8000e60:	e0b8      	b.n	8000fd4 <__aeabi_dadd+0x460>
 8000e62:	4c1f      	ldr	r4, [pc, #124]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e64:	42a2      	cmp	r2, r4
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x2f6>
 8000e68:	e11c      	b.n	80010a4 <__aeabi_dadd+0x530>
 8000e6a:	2480      	movs	r4, #128	; 0x80
 8000e6c:	0424      	lsls	r4, r4, #16
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	2f38      	cmp	r7, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x302>
 8000e74:	e11e      	b.n	80010b4 <__aeabi_dadd+0x540>
 8000e76:	2f1f      	cmp	r7, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x308>
 8000e7a:	e19e      	b.n	80011ba <__aeabi_dadd+0x646>
 8000e7c:	2620      	movs	r6, #32
 8000e7e:	000c      	movs	r4, r1
 8000e80:	1bf6      	subs	r6, r6, r7
 8000e82:	0018      	movs	r0, r3
 8000e84:	40b3      	lsls	r3, r6
 8000e86:	40b4      	lsls	r4, r6
 8000e88:	40f8      	lsrs	r0, r7
 8000e8a:	1e5e      	subs	r6, r3, #1
 8000e8c:	41b3      	sbcs	r3, r6
 8000e8e:	40f9      	lsrs	r1, r7
 8000e90:	4304      	orrs	r4, r0
 8000e92:	431c      	orrs	r4, r3
 8000e94:	4489      	add	r9, r1
 8000e96:	4444      	add	r4, r8
 8000e98:	4544      	cmp	r4, r8
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	444b      	add	r3, r9
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	0016      	movs	r6, r2
 8000ea4:	e7a8      	b.n	8000df8 <__aeabi_dadd+0x284>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	464c      	mov	r4, r9
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	1e62      	subs	r2, r4, #1
 8000eae:	4194      	sbcs	r4, r2
 8000eb0:	e6a6      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000eb4:	1c72      	adds	r2, r6, #1
 8000eb6:	4222      	tst	r2, r4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x348>
 8000eba:	e0a8      	b.n	800100e <__aeabi_dadd+0x49a>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x352>
 8000ec4:	e10a      	b.n	80010dc <__aeabi_dadd+0x568>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x358>
 8000eca:	e15e      	b.n	800118a <__aeabi_dadd+0x616>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dadd+0x360>
 8000ed2:	e161      	b.n	8001198 <__aeabi_dadd+0x624>
 8000ed4:	074a      	lsls	r2, r1, #29
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	e77c      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	ff7fffff 	.word	0xff7fffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	4ccf      	ldr	r4, [pc, #828]	; (800122c <__aeabi_dadd+0x6b8>)
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x380>
 8000ef2:	e0ce      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ef4:	2480      	movs	r4, #128	; 0x80
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	4321      	orrs	r1, r4
 8000efa:	2f38      	cmp	r7, #56	; 0x38
 8000efc:	dc5b      	bgt.n	8000fb6 <__aeabi_dadd+0x442>
 8000efe:	2f1f      	cmp	r7, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dadd+0x390>
 8000f02:	e0dc      	b.n	80010be <__aeabi_dadd+0x54a>
 8000f04:	2520      	movs	r5, #32
 8000f06:	000c      	movs	r4, r1
 8000f08:	1bed      	subs	r5, r5, r7
 8000f0a:	001e      	movs	r6, r3
 8000f0c:	40ab      	lsls	r3, r5
 8000f0e:	40ac      	lsls	r4, r5
 8000f10:	40fe      	lsrs	r6, r7
 8000f12:	1e5d      	subs	r5, r3, #1
 8000f14:	41ab      	sbcs	r3, r5
 8000f16:	4334      	orrs	r4, r6
 8000f18:	40f9      	lsrs	r1, r7
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	1a5b      	subs	r3, r3, r1
 8000f20:	4699      	mov	r9, r3
 8000f22:	e04c      	b.n	8000fbe <__aeabi_dadd+0x44a>
 8000f24:	464a      	mov	r2, r9
 8000f26:	1a1c      	subs	r4, r3, r0
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	4192      	sbcs	r2, r2
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4692      	mov	sl, r2
 8000f32:	0002      	movs	r2, r0
 8000f34:	4650      	mov	r0, sl
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	4692      	mov	sl, r2
 8000f3a:	0212      	lsls	r2, r2, #8
 8000f3c:	d478      	bmi.n	8001030 <__aeabi_dadd+0x4bc>
 8000f3e:	4653      	mov	r3, sl
 8000f40:	4323      	orrs	r3, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x3d2>
 8000f44:	e66a      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8000f46:	2100      	movs	r1, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e745      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000f4c:	074a      	lsls	r2, r1, #29
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	08c9      	lsrs	r1, r1, #3
 8000f54:	e73d      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8000f56:	181c      	adds	r4, r3, r0
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	419b      	sbcs	r3, r3
 8000f5c:	4449      	add	r1, r9
 8000f5e:	468a      	mov	sl, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	449a      	add	sl, r3
 8000f64:	4653      	mov	r3, sl
 8000f66:	2601      	movs	r6, #1
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_dadd+0x3fa>
 8000f6c:	e727      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000f6e:	2602      	movs	r6, #2
 8000f70:	4652      	mov	r2, sl
 8000f72:	4baf      	ldr	r3, [pc, #700]	; (8001230 <__aeabi_dadd+0x6bc>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	4021      	ands	r1, r4
 8000f7c:	0862      	lsrs	r2, r4, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	07dc      	lsls	r4, r3, #31
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	469a      	mov	sl, r3
 8000f86:	4314      	orrs	r4, r2
 8000f88:	e670      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	3a20      	subs	r2, #32
 8000f90:	40d4      	lsrs	r4, r2
 8000f92:	46a4      	mov	ip, r4
 8000f94:	2f20      	cmp	r7, #32
 8000f96:	d007      	beq.n	8000fa8 <__aeabi_dadd+0x434>
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	1bd2      	subs	r2, r2, r7
 8000f9e:	4090      	lsls	r0, r2
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4640      	mov	r0, r8
 8000faa:	1e42      	subs	r2, r0, #1
 8000fac:	4190      	sbcs	r0, r2
 8000fae:	4662      	mov	r2, ip
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	e624      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	000c      	movs	r4, r1
 8000fba:	1e63      	subs	r3, r4, #1
 8000fbc:	419c      	sbcs	r4, r3
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	1b1c      	subs	r4, r3, r4
 8000fc2:	45a0      	cmp	r8, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	469a      	mov	sl, r3
 8000fce:	4665      	mov	r5, ip
 8000fd0:	0016      	movs	r6, r2
 8000fd2:	e61b      	b.n	8000c0c <__aeabi_dadd+0x98>
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x468>
 8000fda:	e0c7      	b.n	800116c <__aeabi_dadd+0x5f8>
 8000fdc:	1e7c      	subs	r4, r7, #1
 8000fde:	2f01      	cmp	r7, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x470>
 8000fe2:	e0f9      	b.n	80011d8 <__aeabi_dadd+0x664>
 8000fe4:	4e91      	ldr	r6, [pc, #580]	; (800122c <__aeabi_dadd+0x6b8>)
 8000fe6:	42b7      	cmp	r7, r6
 8000fe8:	d05c      	beq.n	80010a4 <__aeabi_dadd+0x530>
 8000fea:	0027      	movs	r7, r4
 8000fec:	e740      	b.n	8000e70 <__aeabi_dadd+0x2fc>
 8000fee:	2220      	movs	r2, #32
 8000ff0:	464c      	mov	r4, r9
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	1bd2      	subs	r2, r2, r7
 8000ff6:	4094      	lsls	r4, r2
 8000ff8:	40f8      	lsrs	r0, r7
 8000ffa:	4304      	orrs	r4, r0
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	4090      	lsls	r0, r2
 8001000:	1e42      	subs	r2, r0, #1
 8001002:	4190      	sbcs	r0, r2
 8001004:	464a      	mov	r2, r9
 8001006:	40fa      	lsrs	r2, r7
 8001008:	4304      	orrs	r4, r0
 800100a:	1889      	adds	r1, r1, r2
 800100c:	e6ee      	b.n	8000dec <__aeabi_dadd+0x278>
 800100e:	4c87      	ldr	r4, [pc, #540]	; (800122c <__aeabi_dadd+0x6b8>)
 8001010:	42a2      	cmp	r2, r4
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x4a2>
 8001014:	e6f9      	b.n	8000e0a <__aeabi_dadd+0x296>
 8001016:	1818      	adds	r0, r3, r0
 8001018:	4298      	cmp	r0, r3
 800101a:	419b      	sbcs	r3, r3
 800101c:	4449      	add	r1, r9
 800101e:	425b      	negs	r3, r3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	07dc      	lsls	r4, r3, #31
 8001024:	0840      	lsrs	r0, r0, #1
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	469a      	mov	sl, r3
 800102a:	0016      	movs	r6, r2
 800102c:	4304      	orrs	r4, r0
 800102e:	e6c6      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8001030:	4642      	mov	r2, r8
 8001032:	1ad4      	subs	r4, r2, r3
 8001034:	45a0      	cmp	r8, r4
 8001036:	4180      	sbcs	r0, r0
 8001038:	464b      	mov	r3, r9
 800103a:	4240      	negs	r0, r0
 800103c:	1a59      	subs	r1, r3, r1
 800103e:	1a0b      	subs	r3, r1, r0
 8001040:	469a      	mov	sl, r3
 8001042:	4665      	mov	r5, ip
 8001044:	e5ea      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8001046:	464b      	mov	r3, r9
 8001048:	464a      	mov	r2, r9
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	075b      	lsls	r3, r3, #29
 800104e:	4665      	mov	r5, ip
 8001050:	4303      	orrs	r3, r0
 8001052:	08d1      	lsrs	r1, r2, #3
 8001054:	e6bd      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001056:	2a00      	cmp	r2, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x4e8>
 800105a:	e08e      	b.n	800117a <__aeabi_dadd+0x606>
 800105c:	464b      	mov	r3, r9
 800105e:	4303      	orrs	r3, r0
 8001060:	d117      	bne.n	8001092 <__aeabi_dadd+0x51e>
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	2500      	movs	r5, #0
 8001066:	0309      	lsls	r1, r1, #12
 8001068:	e6da      	b.n	8000e20 <__aeabi_dadd+0x2ac>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	08c9      	lsrs	r1, r1, #3
 8001072:	e6d1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001074:	1a1c      	subs	r4, r3, r0
 8001076:	464a      	mov	r2, r9
 8001078:	42a3      	cmp	r3, r4
 800107a:	419b      	sbcs	r3, r3
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	425b      	negs	r3, r3
 8001080:	1acb      	subs	r3, r1, r3
 8001082:	469a      	mov	sl, r3
 8001084:	2601      	movs	r6, #1
 8001086:	e5c1      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001088:	074a      	lsls	r2, r1, #29
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	4313      	orrs	r3, r2
 800108e:	08c9      	lsrs	r1, r1, #3
 8001090:	e69f      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001092:	4643      	mov	r3, r8
 8001094:	08d8      	lsrs	r0, r3, #3
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	4665      	mov	r5, ip
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e6b9      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010a4:	4643      	mov	r3, r8
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	464b      	mov	r3, r9
 80010aa:	464a      	mov	r2, r9
 80010ac:	075b      	lsls	r3, r3, #29
 80010ae:	4303      	orrs	r3, r0
 80010b0:	08d1      	lsrs	r1, r2, #3
 80010b2:	e6b1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010b4:	4319      	orrs	r1, r3
 80010b6:	000c      	movs	r4, r1
 80010b8:	1e63      	subs	r3, r4, #1
 80010ba:	419c      	sbcs	r4, r3
 80010bc:	e6eb      	b.n	8000e96 <__aeabi_dadd+0x322>
 80010be:	003c      	movs	r4, r7
 80010c0:	000d      	movs	r5, r1
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e5      	lsrs	r5, r4
 80010c6:	2f20      	cmp	r7, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x55e>
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	1be4      	subs	r4, r4, r7
 80010ce:	40a1      	lsls	r1, r4
 80010d0:	430b      	orrs	r3, r1
 80010d2:	001c      	movs	r4, r3
 80010d4:	1e63      	subs	r3, r4, #1
 80010d6:	419c      	sbcs	r4, r3
 80010d8:	432c      	orrs	r4, r5
 80010da:	e770      	b.n	8000fbe <__aeabi_dadd+0x44a>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d0e1      	beq.n	80010a4 <__aeabi_dadd+0x530>
 80010e0:	464a      	mov	r2, r9
 80010e2:	4302      	orrs	r2, r0
 80010e4:	d0c1      	beq.n	800106a <__aeabi_dadd+0x4f6>
 80010e6:	074a      	lsls	r2, r1, #29
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	08c9      	lsrs	r1, r1, #3
 80010f0:	0312      	lsls	r2, r2, #12
 80010f2:	4211      	tst	r1, r2
 80010f4:	d008      	beq.n	8001108 <__aeabi_dadd+0x594>
 80010f6:	4648      	mov	r0, r9
 80010f8:	08c4      	lsrs	r4, r0, #3
 80010fa:	4214      	tst	r4, r2
 80010fc:	d104      	bne.n	8001108 <__aeabi_dadd+0x594>
 80010fe:	4643      	mov	r3, r8
 8001100:	0021      	movs	r1, r4
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	0742      	lsls	r2, r0, #29
 8001106:	4313      	orrs	r3, r2
 8001108:	0f5a      	lsrs	r2, r3, #29
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	0752      	lsls	r2, r2, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	e681      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001114:	464b      	mov	r3, r9
 8001116:	4303      	orrs	r3, r0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x5a8>
 800111a:	e714      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 800111c:	464b      	mov	r3, r9
 800111e:	464a      	mov	r2, r9
 8001120:	08c0      	lsrs	r0, r0, #3
 8001122:	075b      	lsls	r3, r3, #29
 8001124:	4665      	mov	r5, ip
 8001126:	4303      	orrs	r3, r0
 8001128:	08d1      	lsrs	r1, r2, #3
 800112a:	e655      	b.n	8000dd8 <__aeabi_dadd+0x264>
 800112c:	1ac4      	subs	r4, r0, r3
 800112e:	45a0      	cmp	r8, r4
 8001130:	4180      	sbcs	r0, r0
 8001132:	464b      	mov	r3, r9
 8001134:	4240      	negs	r0, r0
 8001136:	1a59      	subs	r1, r3, r1
 8001138:	1a0b      	subs	r3, r1, r0
 800113a:	469a      	mov	sl, r3
 800113c:	4665      	mov	r5, ip
 800113e:	2601      	movs	r6, #1
 8001140:	e564      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001142:	1a1c      	subs	r4, r3, r0
 8001144:	464a      	mov	r2, r9
 8001146:	42a3      	cmp	r3, r4
 8001148:	4180      	sbcs	r0, r0
 800114a:	1a8a      	subs	r2, r1, r2
 800114c:	4240      	negs	r0, r0
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	4692      	mov	sl, r2
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	d549      	bpl.n	80011ea <__aeabi_dadd+0x676>
 8001156:	4642      	mov	r2, r8
 8001158:	1ad4      	subs	r4, r2, r3
 800115a:	45a0      	cmp	r8, r4
 800115c:	4180      	sbcs	r0, r0
 800115e:	464b      	mov	r3, r9
 8001160:	4240      	negs	r0, r0
 8001162:	1a59      	subs	r1, r3, r1
 8001164:	1a0b      	subs	r3, r1, r0
 8001166:	469a      	mov	sl, r3
 8001168:	4665      	mov	r5, ip
 800116a:	e57f      	b.n	8000c6c <__aeabi_dadd+0xf8>
 800116c:	464b      	mov	r3, r9
 800116e:	464a      	mov	r2, r9
 8001170:	08c0      	lsrs	r0, r0, #3
 8001172:	075b      	lsls	r3, r3, #29
 8001174:	4303      	orrs	r3, r0
 8001176:	08d1      	lsrs	r1, r2, #3
 8001178:	e62b      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 800117a:	464a      	mov	r2, r9
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	4302      	orrs	r2, r0
 8001180:	d138      	bne.n	80011f4 <__aeabi_dadd+0x680>
 8001182:	074a      	lsls	r2, r1, #29
 8001184:	4313      	orrs	r3, r2
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	e646      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 800118a:	464b      	mov	r3, r9
 800118c:	464a      	mov	r2, r9
 800118e:	08c0      	lsrs	r0, r0, #3
 8001190:	075b      	lsls	r3, r3, #29
 8001192:	4303      	orrs	r3, r0
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	e61f      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8001198:	181c      	adds	r4, r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4449      	add	r1, r9
 80011a0:	468a      	mov	sl, r1
 80011a2:	425b      	negs	r3, r3
 80011a4:	449a      	add	sl, r3
 80011a6:	4653      	mov	r3, sl
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dadd+0x63a>
 80011ac:	e607      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ae:	4652      	mov	r2, sl
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <__aeabi_dadd+0x6bc>)
 80011b2:	2601      	movs	r6, #1
 80011b4:	401a      	ands	r2, r3
 80011b6:	4692      	mov	sl, r2
 80011b8:	e601      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ba:	003c      	movs	r4, r7
 80011bc:	000e      	movs	r6, r1
 80011be:	3c20      	subs	r4, #32
 80011c0:	40e6      	lsrs	r6, r4
 80011c2:	2f20      	cmp	r7, #32
 80011c4:	d003      	beq.n	80011ce <__aeabi_dadd+0x65a>
 80011c6:	2440      	movs	r4, #64	; 0x40
 80011c8:	1be4      	subs	r4, r4, r7
 80011ca:	40a1      	lsls	r1, r4
 80011cc:	430b      	orrs	r3, r1
 80011ce:	001c      	movs	r4, r3
 80011d0:	1e63      	subs	r3, r4, #1
 80011d2:	419c      	sbcs	r4, r3
 80011d4:	4334      	orrs	r4, r6
 80011d6:	e65e      	b.n	8000e96 <__aeabi_dadd+0x322>
 80011d8:	4443      	add	r3, r8
 80011da:	4283      	cmp	r3, r0
 80011dc:	4180      	sbcs	r0, r0
 80011de:	4449      	add	r1, r9
 80011e0:	468a      	mov	sl, r1
 80011e2:	4240      	negs	r0, r0
 80011e4:	001c      	movs	r4, r3
 80011e6:	4482      	add	sl, r0
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_dadd+0x3f0>
 80011ea:	4653      	mov	r3, sl
 80011ec:	4323      	orrs	r3, r4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x67e>
 80011f0:	e6a9      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 80011f2:	e5e4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011f4:	074a      	lsls	r2, r1, #29
 80011f6:	4313      	orrs	r3, r2
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	0312      	lsls	r2, r2, #12
 80011fe:	4211      	tst	r1, r2
 8001200:	d009      	beq.n	8001216 <__aeabi_dadd+0x6a2>
 8001202:	4648      	mov	r0, r9
 8001204:	08c4      	lsrs	r4, r0, #3
 8001206:	4214      	tst	r4, r2
 8001208:	d105      	bne.n	8001216 <__aeabi_dadd+0x6a2>
 800120a:	4643      	mov	r3, r8
 800120c:	4665      	mov	r5, ip
 800120e:	0021      	movs	r1, r4
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	0742      	lsls	r2, r0, #29
 8001214:	4313      	orrs	r3, r2
 8001216:	0f5a      	lsrs	r2, r3, #29
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	0752      	lsls	r2, r2, #29
 800121e:	4313      	orrs	r3, r2
 8001220:	e5fa      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001222:	2300      	movs	r3, #0
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dadd+0x6b8>)
 8001226:	001c      	movs	r4, r3
 8001228:	e540      	b.n	8000cac <__aeabi_dadd+0x138>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	ff7fffff 	.word	0xff7fffff

08001234 <__aeabi_ddiv>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4657      	mov	r7, sl
 8001238:	464e      	mov	r6, r9
 800123a:	4645      	mov	r5, r8
 800123c:	46de      	mov	lr, fp
 800123e:	b5e0      	push	{r5, r6, r7, lr}
 8001240:	030c      	lsls	r4, r1, #12
 8001242:	001f      	movs	r7, r3
 8001244:	004b      	lsls	r3, r1, #1
 8001246:	4681      	mov	r9, r0
 8001248:	4692      	mov	sl, r2
 800124a:	0005      	movs	r5, r0
 800124c:	b085      	sub	sp, #20
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d5b      	lsrs	r3, r3, #21
 8001252:	0fce      	lsrs	r6, r1, #31
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x26>
 8001258:	e152      	b.n	8001500 <__aeabi_ddiv+0x2cc>
 800125a:	4ad2      	ldr	r2, [pc, #840]	; (80015a4 <__aeabi_ddiv+0x370>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2e>
 8001260:	e16e      	b.n	8001540 <__aeabi_ddiv+0x30c>
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00e4      	lsls	r4, r4, #3
 8001266:	4314      	orrs	r4, r2
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	4322      	orrs	r2, r4
 800126e:	4690      	mov	r8, r2
 8001270:	4acd      	ldr	r2, [pc, #820]	; (80015a8 <__aeabi_ddiv+0x374>)
 8001272:	00c5      	lsls	r5, r0, #3
 8001274:	4693      	mov	fp, r2
 8001276:	449b      	add	fp, r3
 8001278:	2300      	movs	r3, #0
 800127a:	4699      	mov	r9, r3
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	033c      	lsls	r4, r7, #12
 8001280:	007b      	lsls	r3, r7, #1
 8001282:	4650      	mov	r0, sl
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fff      	lsrs	r7, r7, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x5c>
 800128e:	e11a      	b.n	80014c6 <__aeabi_ddiv+0x292>
 8001290:	4ac4      	ldr	r2, [pc, #784]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x64>
 8001296:	e15e      	b.n	8001556 <__aeabi_ddiv+0x322>
 8001298:	0f42      	lsrs	r2, r0, #29
 800129a:	00e4      	lsls	r4, r4, #3
 800129c:	4322      	orrs	r2, r4
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	4314      	orrs	r4, r2
 80012a4:	4ac0      	ldr	r2, [pc, #768]	; (80015a8 <__aeabi_ddiv+0x374>)
 80012a6:	00c1      	lsls	r1, r0, #3
 80012a8:	4694      	mov	ip, r2
 80012aa:	465a      	mov	r2, fp
 80012ac:	4463      	add	r3, ip
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	469b      	mov	fp, r3
 80012b2:	2000      	movs	r0, #0
 80012b4:	0033      	movs	r3, r6
 80012b6:	407b      	eors	r3, r7
 80012b8:	469a      	mov	sl, r3
 80012ba:	464b      	mov	r3, r9
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d827      	bhi.n	8001310 <__aeabi_ddiv+0xdc>
 80012c0:	4aba      	ldr	r2, [pc, #744]	; (80015ac <__aeabi_ddiv+0x378>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	469f      	mov	pc, r3
 80012c8:	46b2      	mov	sl, r6
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d016      	beq.n	80012fe <__aeabi_ddiv+0xca>
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0xa2>
 80012d4:	e287      	b.n	80017e6 <__aeabi_ddiv+0x5b2>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa8>
 80012da:	e0d5      	b.n	8001488 <__aeabi_ddiv+0x254>
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	2500      	movs	r5, #0
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	4313      	orrs	r3, r2
 80012e6:	4652      	mov	r2, sl
 80012e8:	07d2      	lsls	r2, r2, #31
 80012ea:	4313      	orrs	r3, r2
 80012ec:	0028      	movs	r0, r5
 80012ee:	0019      	movs	r1, r3
 80012f0:	b005      	add	sp, #20
 80012f2:	bcf0      	pop	{r4, r5, r6, r7}
 80012f4:	46bb      	mov	fp, r7
 80012f6:	46b2      	mov	sl, r6
 80012f8:	46a9      	mov	r9, r5
 80012fa:	46a0      	mov	r8, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	2200      	movs	r2, #0
 8001300:	2500      	movs	r5, #0
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0xae>
 8001306:	46ba      	mov	sl, r7
 8001308:	46a0      	mov	r8, r4
 800130a:	000d      	movs	r5, r1
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	e7dc      	b.n	80012ca <__aeabi_ddiv+0x96>
 8001310:	4544      	cmp	r4, r8
 8001312:	d200      	bcs.n	8001316 <__aeabi_ddiv+0xe2>
 8001314:	e1c4      	b.n	80016a0 <__aeabi_ddiv+0x46c>
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0xe6>
 8001318:	e1bf      	b.n	800169a <__aeabi_ddiv+0x466>
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	469c      	mov	ip, r3
 8001320:	002e      	movs	r6, r5
 8001322:	4640      	mov	r0, r8
 8001324:	2500      	movs	r5, #0
 8001326:	44e3      	add	fp, ip
 8001328:	0223      	lsls	r3, r4, #8
 800132a:	0e0c      	lsrs	r4, r1, #24
 800132c:	431c      	orrs	r4, r3
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	4699      	mov	r9, r3
 8001332:	0423      	lsls	r3, r4, #16
 8001334:	020a      	lsls	r2, r1, #8
 8001336:	0c1f      	lsrs	r7, r3, #16
 8001338:	4649      	mov	r1, r9
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	9701      	str	r7, [sp, #4]
 800133e:	f7fe ff85 	bl	800024c <__aeabi_uidivmod>
 8001342:	0002      	movs	r2, r0
 8001344:	437a      	muls	r2, r7
 8001346:	040b      	lsls	r3, r1, #16
 8001348:	0c31      	lsrs	r1, r6, #16
 800134a:	4680      	mov	r8, r0
 800134c:	4319      	orrs	r1, r3
 800134e:	428a      	cmp	r2, r1
 8001350:	d907      	bls.n	8001362 <__aeabi_ddiv+0x12e>
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	469c      	mov	ip, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	44e0      	add	r8, ip
 800135c:	428c      	cmp	r4, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x12e>
 8001360:	e201      	b.n	8001766 <__aeabi_ddiv+0x532>
 8001362:	1a88      	subs	r0, r1, r2
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff71 	bl	800024c <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	0436      	lsls	r6, r6, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	0c36      	lsrs	r6, r6, #16
 8001374:	0003      	movs	r3, r0
 8001376:	430e      	orrs	r6, r1
 8001378:	42b2      	cmp	r2, r6
 800137a:	d904      	bls.n	8001386 <__aeabi_ddiv+0x152>
 800137c:	1936      	adds	r6, r6, r4
 800137e:	3b01      	subs	r3, #1
 8001380:	42b4      	cmp	r4, r6
 8001382:	d800      	bhi.n	8001386 <__aeabi_ddiv+0x152>
 8001384:	e1e9      	b.n	800175a <__aeabi_ddiv+0x526>
 8001386:	1ab0      	subs	r0, r6, r2
 8001388:	4642      	mov	r2, r8
 800138a:	9e00      	ldr	r6, [sp, #0]
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	0c33      	lsrs	r3, r6, #16
 8001392:	001f      	movs	r7, r3
 8001394:	0c11      	lsrs	r1, r2, #16
 8001396:	4690      	mov	r8, r2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	0413      	lsls	r3, r2, #16
 800139c:	0432      	lsls	r2, r6, #16
 800139e:	0c16      	lsrs	r6, r2, #16
 80013a0:	0032      	movs	r2, r6
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	435a      	muls	r2, r3
 80013a6:	9603      	str	r6, [sp, #12]
 80013a8:	437b      	muls	r3, r7
 80013aa:	434e      	muls	r6, r1
 80013ac:	4379      	muls	r1, r7
 80013ae:	0c17      	lsrs	r7, r2, #16
 80013b0:	46bc      	mov	ip, r7
 80013b2:	199b      	adds	r3, r3, r6
 80013b4:	4463      	add	r3, ip
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d903      	bls.n	80013c2 <__aeabi_ddiv+0x18e>
 80013ba:	2680      	movs	r6, #128	; 0x80
 80013bc:	0276      	lsls	r6, r6, #9
 80013be:	46b4      	mov	ip, r6
 80013c0:	4461      	add	r1, ip
 80013c2:	0c1e      	lsrs	r6, r3, #16
 80013c4:	1871      	adds	r1, r6, r1
 80013c6:	0416      	lsls	r6, r2, #16
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	0c36      	lsrs	r6, r6, #16
 80013cc:	199e      	adds	r6, r3, r6
 80013ce:	4288      	cmp	r0, r1
 80013d0:	d302      	bcc.n	80013d8 <__aeabi_ddiv+0x1a4>
 80013d2:	d112      	bne.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d4:	42b5      	cmp	r5, r6
 80013d6:	d210      	bcs.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d8:	4643      	mov	r3, r8
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	9b00      	ldr	r3, [sp, #0]
 80013de:	469c      	mov	ip, r3
 80013e0:	4465      	add	r5, ip
 80013e2:	001f      	movs	r7, r3
 80013e4:	429d      	cmp	r5, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	425b      	negs	r3, r3
 80013ea:	191b      	adds	r3, r3, r4
 80013ec:	18c0      	adds	r0, r0, r3
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x1c0>
 80013f2:	e19e      	b.n	8001732 <__aeabi_ddiv+0x4fe>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x1c4>
 80013f6:	e199      	b.n	800172c <__aeabi_ddiv+0x4f8>
 80013f8:	4690      	mov	r8, r2
 80013fa:	1bae      	subs	r6, r5, r6
 80013fc:	42b5      	cmp	r5, r6
 80013fe:	41ad      	sbcs	r5, r5
 8001400:	1a40      	subs	r0, r0, r1
 8001402:	426d      	negs	r5, r5
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	4284      	cmp	r4, r0
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x1d8>
 800140a:	e1d2      	b.n	80017b2 <__aeabi_ddiv+0x57e>
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff1d 	bl	800024c <__aeabi_uidivmod>
 8001412:	9a01      	ldr	r2, [sp, #4]
 8001414:	040b      	lsls	r3, r1, #16
 8001416:	4342      	muls	r2, r0
 8001418:	0c31      	lsrs	r1, r6, #16
 800141a:	0005      	movs	r5, r0
 800141c:	4319      	orrs	r1, r3
 800141e:	428a      	cmp	r2, r1
 8001420:	d900      	bls.n	8001424 <__aeabi_ddiv+0x1f0>
 8001422:	e16c      	b.n	80016fe <__aeabi_ddiv+0x4ca>
 8001424:	1a88      	subs	r0, r1, r2
 8001426:	4649      	mov	r1, r9
 8001428:	f7fe ff10 	bl	800024c <__aeabi_uidivmod>
 800142c:	9a01      	ldr	r2, [sp, #4]
 800142e:	0436      	lsls	r6, r6, #16
 8001430:	4342      	muls	r2, r0
 8001432:	0409      	lsls	r1, r1, #16
 8001434:	0c36      	lsrs	r6, r6, #16
 8001436:	0003      	movs	r3, r0
 8001438:	430e      	orrs	r6, r1
 800143a:	42b2      	cmp	r2, r6
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x20c>
 800143e:	e153      	b.n	80016e8 <__aeabi_ddiv+0x4b4>
 8001440:	9803      	ldr	r0, [sp, #12]
 8001442:	1ab6      	subs	r6, r6, r2
 8001444:	0002      	movs	r2, r0
 8001446:	042d      	lsls	r5, r5, #16
 8001448:	431d      	orrs	r5, r3
 800144a:	9f02      	ldr	r7, [sp, #8]
 800144c:	042b      	lsls	r3, r5, #16
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435a      	muls	r2, r3
 8001452:	437b      	muls	r3, r7
 8001454:	469c      	mov	ip, r3
 8001456:	0c29      	lsrs	r1, r5, #16
 8001458:	4348      	muls	r0, r1
 800145a:	0c13      	lsrs	r3, r2, #16
 800145c:	4484      	add	ip, r0
 800145e:	4463      	add	r3, ip
 8001460:	4379      	muls	r1, r7
 8001462:	4298      	cmp	r0, r3
 8001464:	d903      	bls.n	800146e <__aeabi_ddiv+0x23a>
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	0240      	lsls	r0, r0, #9
 800146a:	4684      	mov	ip, r0
 800146c:	4461      	add	r1, ip
 800146e:	0c18      	lsrs	r0, r3, #16
 8001470:	0412      	lsls	r2, r2, #16
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	0c12      	lsrs	r2, r2, #16
 8001476:	1840      	adds	r0, r0, r1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	4286      	cmp	r6, r0
 800147c:	d200      	bcs.n	8001480 <__aeabi_ddiv+0x24c>
 800147e:	e100      	b.n	8001682 <__aeabi_ddiv+0x44e>
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x250>
 8001482:	e0fb      	b.n	800167c <__aeabi_ddiv+0x448>
 8001484:	2301      	movs	r3, #1
 8001486:	431d      	orrs	r5, r3
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <__aeabi_ddiv+0x37c>)
 800148a:	445b      	add	r3, fp
 800148c:	2b00      	cmp	r3, #0
 800148e:	dc00      	bgt.n	8001492 <__aeabi_ddiv+0x25e>
 8001490:	e0aa      	b.n	80015e8 <__aeabi_ddiv+0x3b4>
 8001492:	076a      	lsls	r2, r5, #29
 8001494:	d000      	beq.n	8001498 <__aeabi_ddiv+0x264>
 8001496:	e13d      	b.n	8001714 <__aeabi_ddiv+0x4e0>
 8001498:	08e9      	lsrs	r1, r5, #3
 800149a:	4642      	mov	r2, r8
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d506      	bpl.n	80014ae <__aeabi_ddiv+0x27a>
 80014a0:	4642      	mov	r2, r8
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <__aeabi_ddiv+0x380>)
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	4690      	mov	r8, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	445b      	add	r3, fp
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <__aeabi_ddiv+0x384>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_ddiv+0x282>
 80014b4:	e723      	b.n	80012fe <__aeabi_ddiv+0xca>
 80014b6:	4642      	mov	r2, r8
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	0755      	lsls	r5, r2, #29
 80014bc:	0252      	lsls	r2, r2, #9
 80014be:	430d      	orrs	r5, r1
 80014c0:	0b12      	lsrs	r2, r2, #12
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	e70d      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80014c6:	4651      	mov	r1, sl
 80014c8:	4321      	orrs	r1, r4
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x29a>
 80014cc:	e07c      	b.n	80015c8 <__aeabi_ddiv+0x394>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x2a0>
 80014d2:	e0fb      	b.n	80016cc <__aeabi_ddiv+0x498>
 80014d4:	0020      	movs	r0, r4
 80014d6:	f001 f9dd 	bl	8002894 <__clzsi2>
 80014da:	0002      	movs	r2, r0
 80014dc:	3a0b      	subs	r2, #11
 80014de:	231d      	movs	r3, #29
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4652      	mov	r2, sl
 80014e4:	0001      	movs	r1, r0
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4653      	mov	r3, sl
 80014ea:	3908      	subs	r1, #8
 80014ec:	408b      	lsls	r3, r1
 80014ee:	408c      	lsls	r4, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	4314      	orrs	r4, r2
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <__aeabi_ddiv+0x388>)
 80014f6:	4458      	add	r0, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	4483      	add	fp, r0
 80014fc:	2000      	movs	r0, #0
 80014fe:	e6d9      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001500:	0003      	movs	r3, r0
 8001502:	4323      	orrs	r3, r4
 8001504:	4698      	mov	r8, r3
 8001506:	d044      	beq.n	8001592 <__aeabi_ddiv+0x35e>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2da>
 800150c:	e0cf      	b.n	80016ae <__aeabi_ddiv+0x47a>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 f9c0 	bl	8002894 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	0002      	movs	r2, r0
 8001518:	390b      	subs	r1, #11
 800151a:	231d      	movs	r3, #29
 800151c:	1a5b      	subs	r3, r3, r1
 800151e:	4649      	mov	r1, r9
 8001520:	0010      	movs	r0, r2
 8001522:	40d9      	lsrs	r1, r3
 8001524:	3808      	subs	r0, #8
 8001526:	4084      	lsls	r4, r0
 8001528:	000b      	movs	r3, r1
 800152a:	464d      	mov	r5, r9
 800152c:	4323      	orrs	r3, r4
 800152e:	4698      	mov	r8, r3
 8001530:	4085      	lsls	r5, r0
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <__aeabi_ddiv+0x38c>)
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	469b      	mov	fp, r3
 8001538:	2300      	movs	r3, #0
 800153a:	4699      	mov	r9, r3
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	e69e      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001540:	0002      	movs	r2, r0
 8001542:	4322      	orrs	r2, r4
 8001544:	4690      	mov	r8, r2
 8001546:	d11d      	bne.n	8001584 <__aeabi_ddiv+0x350>
 8001548:	2208      	movs	r2, #8
 800154a:	469b      	mov	fp, r3
 800154c:	2302      	movs	r3, #2
 800154e:	2500      	movs	r5, #0
 8001550:	4691      	mov	r9, r2
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	e693      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001556:	4651      	mov	r1, sl
 8001558:	4321      	orrs	r1, r4
 800155a:	d109      	bne.n	8001570 <__aeabi_ddiv+0x33c>
 800155c:	2302      	movs	r3, #2
 800155e:	464a      	mov	r2, r9
 8001560:	431a      	orrs	r2, r3
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001564:	4691      	mov	r9, r2
 8001566:	469c      	mov	ip, r3
 8001568:	2400      	movs	r4, #0
 800156a:	2002      	movs	r0, #2
 800156c:	44e3      	add	fp, ip
 800156e:	e6a1      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001570:	2303      	movs	r3, #3
 8001572:	464a      	mov	r2, r9
 8001574:	431a      	orrs	r2, r3
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001578:	4691      	mov	r9, r2
 800157a:	469c      	mov	ip, r3
 800157c:	4651      	mov	r1, sl
 800157e:	2003      	movs	r0, #3
 8001580:	44e3      	add	fp, ip
 8001582:	e697      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001584:	220c      	movs	r2, #12
 8001586:	469b      	mov	fp, r3
 8001588:	2303      	movs	r3, #3
 800158a:	46a0      	mov	r8, r4
 800158c:	4691      	mov	r9, r2
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	e675      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001592:	2304      	movs	r3, #4
 8001594:	4699      	mov	r9, r3
 8001596:	2300      	movs	r3, #0
 8001598:	469b      	mov	fp, r3
 800159a:	3301      	adds	r3, #1
 800159c:	2500      	movs	r5, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	e66d      	b.n	800127e <__aeabi_ddiv+0x4a>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff
 80015a8:	fffffc01 	.word	0xfffffc01
 80015ac:	0800b944 	.word	0x0800b944
 80015b0:	000003ff 	.word	0x000003ff
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	000007fe 	.word	0x000007fe
 80015bc:	000003f3 	.word	0x000003f3
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	fffff801 	.word	0xfffff801
 80015c8:	464a      	mov	r2, r9
 80015ca:	2301      	movs	r3, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	4691      	mov	r9, r2
 80015d0:	2400      	movs	r4, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	e66e      	b.n	80012b4 <__aeabi_ddiv+0x80>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	469a      	mov	sl, r3
 80015dc:	2500      	movs	r5, #0
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	e67e      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80015e4:	2501      	movs	r5, #1
 80015e6:	426d      	negs	r5, r5
 80015e8:	2201      	movs	r2, #1
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	2a38      	cmp	r2, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0x3be>
 80015f0:	e674      	b.n	80012dc <__aeabi_ddiv+0xa8>
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x3c4>
 80015f6:	e0bd      	b.n	8001774 <__aeabi_ddiv+0x540>
 80015f8:	211f      	movs	r1, #31
 80015fa:	4249      	negs	r1, r1
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	4641      	mov	r1, r8
 8001600:	40d9      	lsrs	r1, r3
 8001602:	000b      	movs	r3, r1
 8001604:	2a20      	cmp	r2, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_ddiv+0x3de>
 8001608:	4641      	mov	r1, r8
 800160a:	4a7e      	ldr	r2, [pc, #504]	; (8001804 <__aeabi_ddiv+0x5d0>)
 800160c:	445a      	add	r2, fp
 800160e:	4091      	lsls	r1, r2
 8001610:	430d      	orrs	r5, r1
 8001612:	0029      	movs	r1, r5
 8001614:	1e4a      	subs	r2, r1, #1
 8001616:	4191      	sbcs	r1, r2
 8001618:	4319      	orrs	r1, r3
 800161a:	2307      	movs	r3, #7
 800161c:	001d      	movs	r5, r3
 800161e:	2200      	movs	r2, #0
 8001620:	400d      	ands	r5, r1
 8001622:	420b      	tst	r3, r1
 8001624:	d100      	bne.n	8001628 <__aeabi_ddiv+0x3f4>
 8001626:	e0d0      	b.n	80017ca <__aeabi_ddiv+0x596>
 8001628:	220f      	movs	r2, #15
 800162a:	2300      	movs	r3, #0
 800162c:	400a      	ands	r2, r1
 800162e:	2a04      	cmp	r2, #4
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x400>
 8001632:	e0c7      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001634:	1d0a      	adds	r2, r1, #4
 8001636:	428a      	cmp	r2, r1
 8001638:	4189      	sbcs	r1, r1
 800163a:	4249      	negs	r1, r1
 800163c:	185b      	adds	r3, r3, r1
 800163e:	0011      	movs	r1, r2
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_ddiv+0x412>
 8001644:	e0be      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e649      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	4643      	mov	r3, r8
 8001652:	0312      	lsls	r2, r2, #12
 8001654:	4213      	tst	r3, r2
 8001656:	d008      	beq.n	800166a <__aeabi_ddiv+0x436>
 8001658:	4214      	tst	r4, r2
 800165a:	d106      	bne.n	800166a <__aeabi_ddiv+0x436>
 800165c:	4322      	orrs	r2, r4
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	46ba      	mov	sl, r7
 8001662:	000d      	movs	r5, r1
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001666:	0b12      	lsrs	r2, r2, #12
 8001668:	e63b      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4643      	mov	r3, r8
 800166e:	0312      	lsls	r2, r2, #12
 8001670:	431a      	orrs	r2, r3
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	46b2      	mov	sl, r6
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	e632      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x44e>
 8001680:	e702      	b.n	8001488 <__aeabi_ddiv+0x254>
 8001682:	19a6      	adds	r6, r4, r6
 8001684:	1e6a      	subs	r2, r5, #1
 8001686:	42a6      	cmp	r6, r4
 8001688:	d200      	bcs.n	800168c <__aeabi_ddiv+0x458>
 800168a:	e089      	b.n	80017a0 <__aeabi_ddiv+0x56c>
 800168c:	4286      	cmp	r6, r0
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0x45e>
 8001690:	e09f      	b.n	80017d2 <__aeabi_ddiv+0x59e>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x462>
 8001694:	e0af      	b.n	80017f6 <__aeabi_ddiv+0x5c2>
 8001696:	0015      	movs	r5, r2
 8001698:	e6f4      	b.n	8001484 <__aeabi_ddiv+0x250>
 800169a:	42a9      	cmp	r1, r5
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x46c>
 800169e:	e63c      	b.n	800131a <__aeabi_ddiv+0xe6>
 80016a0:	4643      	mov	r3, r8
 80016a2:	07de      	lsls	r6, r3, #31
 80016a4:	0858      	lsrs	r0, r3, #1
 80016a6:	086b      	lsrs	r3, r5, #1
 80016a8:	431e      	orrs	r6, r3
 80016aa:	07ed      	lsls	r5, r5, #31
 80016ac:	e63c      	b.n	8001328 <__aeabi_ddiv+0xf4>
 80016ae:	f001 f8f1 	bl	8002894 <__clzsi2>
 80016b2:	0001      	movs	r1, r0
 80016b4:	0002      	movs	r2, r0
 80016b6:	3115      	adds	r1, #21
 80016b8:	3220      	adds	r2, #32
 80016ba:	291c      	cmp	r1, #28
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_ddiv+0x48c>
 80016be:	e72c      	b.n	800151a <__aeabi_ddiv+0x2e6>
 80016c0:	464b      	mov	r3, r9
 80016c2:	3808      	subs	r0, #8
 80016c4:	4083      	lsls	r3, r0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4698      	mov	r8, r3
 80016ca:	e732      	b.n	8001532 <__aeabi_ddiv+0x2fe>
 80016cc:	f001 f8e2 	bl	8002894 <__clzsi2>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	3215      	adds	r2, #21
 80016d6:	3020      	adds	r0, #32
 80016d8:	2a1c      	cmp	r2, #28
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x4aa>
 80016dc:	e6ff      	b.n	80014de <__aeabi_ddiv+0x2aa>
 80016de:	4654      	mov	r4, sl
 80016e0:	3b08      	subs	r3, #8
 80016e2:	2100      	movs	r1, #0
 80016e4:	409c      	lsls	r4, r3
 80016e6:	e705      	b.n	80014f4 <__aeabi_ddiv+0x2c0>
 80016e8:	1936      	adds	r6, r6, r4
 80016ea:	3b01      	subs	r3, #1
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x4be>
 80016f0:	e6a6      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f2:	42b2      	cmp	r2, r6
 80016f4:	d800      	bhi.n	80016f8 <__aeabi_ddiv+0x4c4>
 80016f6:	e6a3      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f8:	1e83      	subs	r3, r0, #2
 80016fa:	1936      	adds	r6, r6, r4
 80016fc:	e6a0      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3d01      	subs	r5, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d900      	bls.n	8001708 <__aeabi_ddiv+0x4d4>
 8001706:	e68d      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001708:	428a      	cmp	r2, r1
 800170a:	d800      	bhi.n	800170e <__aeabi_ddiv+0x4da>
 800170c:	e68a      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 800170e:	1e85      	subs	r5, r0, #2
 8001710:	1909      	adds	r1, r1, r4
 8001712:	e687      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001714:	220f      	movs	r2, #15
 8001716:	402a      	ands	r2, r5
 8001718:	2a04      	cmp	r2, #4
 800171a:	d100      	bne.n	800171e <__aeabi_ddiv+0x4ea>
 800171c:	e6bc      	b.n	8001498 <__aeabi_ddiv+0x264>
 800171e:	1d29      	adds	r1, r5, #4
 8001720:	42a9      	cmp	r1, r5
 8001722:	41ad      	sbcs	r5, r5
 8001724:	426d      	negs	r5, r5
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	44a8      	add	r8, r5
 800172a:	e6b6      	b.n	800149a <__aeabi_ddiv+0x266>
 800172c:	42af      	cmp	r7, r5
 800172e:	d900      	bls.n	8001732 <__aeabi_ddiv+0x4fe>
 8001730:	e662      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001732:	4281      	cmp	r1, r0
 8001734:	d804      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 8001736:	d000      	beq.n	800173a <__aeabi_ddiv+0x506>
 8001738:	e65e      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 800173a:	42ae      	cmp	r6, r5
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 800173e:	e65b      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001740:	2302      	movs	r3, #2
 8001742:	425b      	negs	r3, r3
 8001744:	469c      	mov	ip, r3
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	44e0      	add	r8, ip
 800174a:	469c      	mov	ip, r3
 800174c:	4465      	add	r5, ip
 800174e:	429d      	cmp	r5, r3
 8001750:	419b      	sbcs	r3, r3
 8001752:	425b      	negs	r3, r3
 8001754:	191b      	adds	r3, r3, r4
 8001756:	18c0      	adds	r0, r0, r3
 8001758:	e64f      	b.n	80013fa <__aeabi_ddiv+0x1c6>
 800175a:	42b2      	cmp	r2, r6
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x52c>
 800175e:	e612      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001760:	1e83      	subs	r3, r0, #2
 8001762:	1936      	adds	r6, r6, r4
 8001764:	e60f      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001766:	428a      	cmp	r2, r1
 8001768:	d800      	bhi.n	800176c <__aeabi_ddiv+0x538>
 800176a:	e5fa      	b.n	8001362 <__aeabi_ddiv+0x12e>
 800176c:	1e83      	subs	r3, r0, #2
 800176e:	4698      	mov	r8, r3
 8001770:	1909      	adds	r1, r1, r4
 8001772:	e5f6      	b.n	8001362 <__aeabi_ddiv+0x12e>
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <__aeabi_ddiv+0x5d4>)
 8001776:	0028      	movs	r0, r5
 8001778:	445b      	add	r3, fp
 800177a:	4641      	mov	r1, r8
 800177c:	409d      	lsls	r5, r3
 800177e:	4099      	lsls	r1, r3
 8001780:	40d0      	lsrs	r0, r2
 8001782:	1e6b      	subs	r3, r5, #1
 8001784:	419d      	sbcs	r5, r3
 8001786:	4643      	mov	r3, r8
 8001788:	4301      	orrs	r1, r0
 800178a:	4329      	orrs	r1, r5
 800178c:	40d3      	lsrs	r3, r2
 800178e:	074a      	lsls	r2, r1, #29
 8001790:	d100      	bne.n	8001794 <__aeabi_ddiv+0x560>
 8001792:	e755      	b.n	8001640 <__aeabi_ddiv+0x40c>
 8001794:	220f      	movs	r2, #15
 8001796:	400a      	ands	r2, r1
 8001798:	2a04      	cmp	r2, #4
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x56a>
 800179c:	e74a      	b.n	8001634 <__aeabi_ddiv+0x400>
 800179e:	e74f      	b.n	8001640 <__aeabi_ddiv+0x40c>
 80017a0:	0015      	movs	r5, r2
 80017a2:	4286      	cmp	r6, r0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_ddiv+0x574>
 80017a6:	e66d      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017a8:	9a00      	ldr	r2, [sp, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0x57c>
 80017ae:	e669      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017b0:	e66a      	b.n	8001488 <__aeabi_ddiv+0x254>
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <__aeabi_ddiv+0x5d8>)
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_ddiv+0x588>
 80017ba:	e713      	b.n	80015e4 <__aeabi_ddiv+0x3b0>
 80017bc:	2501      	movs	r5, #1
 80017be:	2100      	movs	r1, #0
 80017c0:	44a8      	add	r8, r5
 80017c2:	e66a      	b.n	800149a <__aeabi_ddiv+0x266>
 80017c4:	075d      	lsls	r5, r3, #29
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	0b1a      	lsrs	r2, r3, #12
 80017ca:	08c9      	lsrs	r1, r1, #3
 80017cc:	2300      	movs	r3, #0
 80017ce:	430d      	orrs	r5, r1
 80017d0:	e587      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017d2:	9900      	ldr	r1, [sp, #0]
 80017d4:	3d02      	subs	r5, #2
 80017d6:	004a      	lsls	r2, r1, #1
 80017d8:	428a      	cmp	r2, r1
 80017da:	41bf      	sbcs	r7, r7
 80017dc:	427f      	negs	r7, r7
 80017de:	193f      	adds	r7, r7, r4
 80017e0:	19f6      	adds	r6, r6, r7
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	e7dd      	b.n	80017a2 <__aeabi_ddiv+0x56e>
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4643      	mov	r3, r8
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	431a      	orrs	r2, r3
 80017ee:	0312      	lsls	r2, r2, #12
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	e575      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017f6:	9900      	ldr	r1, [sp, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d3ea      	bcc.n	80017d2 <__aeabi_ddiv+0x59e>
 80017fc:	0015      	movs	r5, r2
 80017fe:	e7d3      	b.n	80017a8 <__aeabi_ddiv+0x574>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4645      	mov	r5, r8
 8001a2c:	46de      	mov	lr, fp
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	001f      	movs	r7, r3
 8001a36:	030b      	lsls	r3, r1, #12
 8001a38:	0b1b      	lsrs	r3, r3, #12
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	004d      	lsls	r5, r1, #1
 8001a3e:	0fcb      	lsrs	r3, r1, #31
 8001a40:	0004      	movs	r4, r0
 8001a42:	4691      	mov	r9, r2
 8001a44:	4698      	mov	r8, r3
 8001a46:	b087      	sub	sp, #28
 8001a48:	0d6d      	lsrs	r5, r5, #21
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x26>
 8001a4c:	e1cd      	b.n	8001dea <__aeabi_dmul+0x3c2>
 8001a4e:	4bce      	ldr	r3, [pc, #824]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a50:	429d      	cmp	r5, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2e>
 8001a54:	e1e9      	b.n	8001e2a <__aeabi_dmul+0x402>
 8001a56:	465a      	mov	r2, fp
 8001a58:	0f43      	lsrs	r3, r0, #29
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	00c3      	lsls	r3, r0, #3
 8001a66:	469a      	mov	sl, r3
 8001a68:	4bc8      	ldr	r3, [pc, #800]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2600      	movs	r6, #0
 8001a72:	4465      	add	r5, ip
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x60>
 8001a86:	e189      	b.n	8001d9c <__aeabi_dmul+0x374>
 8001a88:	4abf      	ldr	r2, [pc, #764]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <__aeabi_dmul+0x9a>
 8001a8e:	0f42      	lsrs	r2, r0, #29
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4322      	orrs	r2, r4
 8001a94:	2480      	movs	r4, #128	; 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4abc      	ldr	r2, [pc, #752]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	4463      	add	r3, ip
 8001aa4:	195b      	adds	r3, r3, r5
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	407a      	eors	r2, r7
 8001aac:	3301      	adds	r3, #1
 8001aae:	00c0      	lsls	r0, r0, #3
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2e0a      	cmp	r6, #10
 8001ab6:	dd1c      	ble.n	8001af2 <__aeabi_dmul+0xca>
 8001ab8:	003a      	movs	r2, r7
 8001aba:	2e0b      	cmp	r6, #11
 8001abc:	d05e      	beq.n	8001b7c <__aeabi_dmul+0x154>
 8001abe:	4647      	mov	r7, r8
 8001ac0:	e056      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	4bb0      	ldr	r3, [pc, #704]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ac6:	4321      	orrs	r1, r4
 8001ac8:	18eb      	adds	r3, r5, r3
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d12a      	bne.n	8001b26 <__aeabi_dmul+0xfe>
 8001ad0:	2080      	movs	r0, #128	; 0x80
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	0100      	lsls	r0, r0, #4
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	4684      	mov	ip, r0
 8001ada:	4316      	orrs	r6, r2
 8001adc:	4642      	mov	r2, r8
 8001ade:	4463      	add	r3, ip
 8001ae0:	407a      	eors	r2, r7
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2e0a      	cmp	r6, #10
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dmul+0xc4>
 8001aea:	e231      	b.n	8001f50 <__aeabi_dmul+0x528>
 8001aec:	2000      	movs	r0, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2102      	movs	r1, #2
 8001af2:	2e02      	cmp	r6, #2
 8001af4:	dc26      	bgt.n	8001b44 <__aeabi_dmul+0x11c>
 8001af6:	3e01      	subs	r6, #1
 8001af8:	2e01      	cmp	r6, #1
 8001afa:	d852      	bhi.n	8001ba2 <__aeabi_dmul+0x17a>
 8001afc:	2902      	cmp	r1, #2
 8001afe:	d04c      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b00:	2901      	cmp	r1, #1
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001b04:	e118      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	07d2      	lsls	r2, r2, #31
 8001b12:	4313      	orrs	r3, r2
 8001b14:	0028      	movs	r0, r5
 8001b16:	0019      	movs	r1, r3
 8001b18:	b007      	add	sp, #28
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	2203      	movs	r2, #3
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	002b      	movs	r3, r5
 8001b2e:	468c      	mov	ip, r1
 8001b30:	4316      	orrs	r6, r2
 8001b32:	4642      	mov	r2, r8
 8001b34:	4463      	add	r3, ip
 8001b36:	407a      	eors	r2, r7
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2e0a      	cmp	r6, #10
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dmul+0x11a>
 8001b40:	e228      	b.n	8001f94 <__aeabi_dmul+0x56c>
 8001b42:	2103      	movs	r1, #3
 8001b44:	2501      	movs	r5, #1
 8001b46:	40b5      	lsls	r5, r6
 8001b48:	46ac      	mov	ip, r5
 8001b4a:	26a6      	movs	r6, #166	; 0xa6
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	00f6      	lsls	r6, r6, #3
 8001b50:	4035      	ands	r5, r6
 8001b52:	4233      	tst	r3, r6
 8001b54:	d10b      	bne.n	8001b6e <__aeabi_dmul+0x146>
 8001b56:	2690      	movs	r6, #144	; 0x90
 8001b58:	00b6      	lsls	r6, r6, #2
 8001b5a:	4233      	tst	r3, r6
 8001b5c:	d118      	bne.n	8001b90 <__aeabi_dmul+0x168>
 8001b5e:	3eb9      	subs	r6, #185	; 0xb9
 8001b60:	3eff      	subs	r6, #255	; 0xff
 8001b62:	421e      	tst	r6, r3
 8001b64:	d01d      	beq.n	8001ba2 <__aeabi_dmul+0x17a>
 8001b66:	46a3      	mov	fp, r4
 8001b68:	4682      	mov	sl, r0
 8001b6a:	9100      	str	r1, [sp, #0]
 8001b6c:	e000      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001b6e:	0017      	movs	r7, r2
 8001b70:	9900      	ldr	r1, [sp, #0]
 8001b72:	003a      	movs	r2, r7
 8001b74:	2902      	cmp	r1, #2
 8001b76:	d010      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	2903      	cmp	r1, #3
 8001b7e:	d1bf      	bne.n	8001b00 <__aeabi_dmul+0xd8>
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	031b      	lsls	r3, r3, #12
 8001b84:	431c      	orrs	r4, r3
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b8c:	0b24      	lsrs	r4, r4, #12
 8001b8e:	e7bd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2200      	movs	r2, #0
 8001b94:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b96:	0324      	lsls	r4, r4, #12
 8001b98:	e7b8      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ba0:	e7b4      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ba2:	4653      	mov	r3, sl
 8001ba4:	041e      	lsls	r6, r3, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	0c1f      	lsrs	r7, r3, #16
 8001baa:	0033      	movs	r3, r6
 8001bac:	0c01      	lsrs	r1, r0, #16
 8001bae:	0400      	lsls	r0, r0, #16
 8001bb0:	0c00      	lsrs	r0, r0, #16
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	437b      	muls	r3, r7
 8001bba:	4699      	mov	r9, r3
 8001bbc:	0033      	movs	r3, r6
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	000d      	movs	r5, r1
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	469a      	mov	sl, r3
 8001bca:	437d      	muls	r5, r7
 8001bcc:	44cc      	add	ip, r9
 8001bce:	44d4      	add	ip, sl
 8001bd0:	9500      	str	r5, [sp, #0]
 8001bd2:	45e1      	cmp	r9, ip
 8001bd4:	d904      	bls.n	8001be0 <__aeabi_dmul+0x1b8>
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	4699      	mov	r9, r3
 8001bdc:	444d      	add	r5, r9
 8001bde:	9500      	str	r5, [sp, #0]
 8001be0:	4663      	mov	r3, ip
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	001d      	movs	r5, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	469c      	mov	ip, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	4663      	mov	r3, ip
 8001bf6:	4443      	add	r3, r8
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	0c23      	lsrs	r3, r4, #16
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	0033      	movs	r3, r6
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	4363      	muls	r3, r4
 8001c06:	469c      	mov	ip, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	437b      	muls	r3, r7
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4643      	mov	r3, r8
 8001c10:	435e      	muls	r6, r3
 8001c12:	435f      	muls	r7, r3
 8001c14:	444e      	add	r6, r9
 8001c16:	4663      	mov	r3, ip
 8001c18:	46b2      	mov	sl, r6
 8001c1a:	0c1e      	lsrs	r6, r3, #16
 8001c1c:	4456      	add	r6, sl
 8001c1e:	45b1      	cmp	r9, r6
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x202>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4699      	mov	r9, r3
 8001c28:	444f      	add	r7, r9
 8001c2a:	0c33      	lsrs	r3, r6, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	003b      	movs	r3, r7
 8001c30:	444b      	add	r3, r9
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	4663      	mov	r3, ip
 8001c36:	46ac      	mov	ip, r5
 8001c38:	041f      	lsls	r7, r3, #16
 8001c3a:	0c3f      	lsrs	r7, r7, #16
 8001c3c:	0436      	lsls	r6, r6, #16
 8001c3e:	19f6      	adds	r6, r6, r7
 8001c40:	44b4      	add	ip, r6
 8001c42:	4663      	mov	r3, ip
 8001c44:	9304      	str	r3, [sp, #16]
 8001c46:	465b      	mov	r3, fp
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	041f      	lsls	r7, r3, #16
 8001c50:	0c3f      	lsrs	r7, r7, #16
 8001c52:	003b      	movs	r3, r7
 8001c54:	4343      	muls	r3, r0
 8001c56:	4699      	mov	r9, r3
 8001c58:	4663      	mov	r3, ip
 8001c5a:	4343      	muls	r3, r0
 8001c5c:	469a      	mov	sl, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	4660      	mov	r0, ip
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	469b      	mov	fp, r3
 8001c66:	4348      	muls	r0, r1
 8001c68:	4379      	muls	r1, r7
 8001c6a:	4451      	add	r1, sl
 8001c6c:	4459      	add	r1, fp
 8001c6e:	458a      	cmp	sl, r1
 8001c70:	d903      	bls.n	8001c7a <__aeabi_dmul+0x252>
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	469a      	mov	sl, r3
 8001c78:	4450      	add	r0, sl
 8001c7a:	0c0b      	lsrs	r3, r1, #16
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	464b      	mov	r3, r9
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	4699      	mov	r9, r3
 8001c86:	003b      	movs	r3, r7
 8001c88:	4363      	muls	r3, r4
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4645      	mov	r5, r8
 8001c8e:	4449      	add	r1, r9
 8001c90:	4699      	mov	r9, r3
 8001c92:	4663      	mov	r3, ip
 8001c94:	435c      	muls	r4, r3
 8001c96:	436b      	muls	r3, r5
 8001c98:	469c      	mov	ip, r3
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	436f      	muls	r7, r5
 8001ca2:	193f      	adds	r7, r7, r4
 8001ca4:	4447      	add	r7, r8
 8001ca6:	4450      	add	r0, sl
 8001ca8:	42bc      	cmp	r4, r7
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_dmul+0x28c>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	44c4      	add	ip, r8
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	9d00      	ldr	r5, [sp, #0]
 8001cb8:	4698      	mov	r8, r3
 8001cba:	4445      	add	r5, r8
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	41b6      	sbcs	r6, r6
 8001cc0:	4273      	negs	r3, r6
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	041e      	lsls	r6, r3, #16
 8001cc8:	9b05      	ldr	r3, [sp, #20]
 8001cca:	043c      	lsls	r4, r7, #16
 8001ccc:	4699      	mov	r9, r3
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	19a4      	adds	r4, r4, r6
 8001cd2:	444c      	add	r4, r9
 8001cd4:	46a1      	mov	r9, r4
 8001cd6:	4683      	mov	fp, r0
 8001cd8:	186e      	adds	r6, r5, r1
 8001cda:	44c1      	add	r9, r8
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	4189      	sbcs	r1, r1
 8001ce0:	44cb      	add	fp, r9
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	186d      	adds	r5, r5, r1
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	41a4      	sbcs	r4, r4
 8001cec:	45c1      	cmp	r9, r8
 8001cee:	419b      	sbcs	r3, r3
 8001cf0:	4583      	cmp	fp, r0
 8001cf2:	4180      	sbcs	r0, r0
 8001cf4:	428d      	cmp	r5, r1
 8001cf6:	4189      	sbcs	r1, r1
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	4264      	negs	r4, r4
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4240      	negs	r0, r0
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	4249      	negs	r1, r1
 8001d04:	4301      	orrs	r1, r0
 8001d06:	0270      	lsls	r0, r6, #9
 8001d08:	0c3f      	lsrs	r7, r7, #16
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	19e4      	adds	r4, r4, r7
 8001d0e:	1e47      	subs	r7, r0, #1
 8001d10:	41b8      	sbcs	r0, r7
 8001d12:	1864      	adds	r4, r4, r1
 8001d14:	4464      	add	r4, ip
 8001d16:	0df6      	lsrs	r6, r6, #23
 8001d18:	0261      	lsls	r1, r4, #9
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	0dec      	lsrs	r4, r5, #23
 8001d1e:	026e      	lsls	r6, r5, #9
 8001d20:	430c      	orrs	r4, r1
 8001d22:	4330      	orrs	r0, r6
 8001d24:	01c9      	lsls	r1, r1, #7
 8001d26:	d400      	bmi.n	8001d2a <__aeabi_dmul+0x302>
 8001d28:	e0f1      	b.n	8001f0e <__aeabi_dmul+0x4e6>
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	0843      	lsrs	r3, r0, #1
 8001d2e:	4001      	ands	r1, r0
 8001d30:	430b      	orrs	r3, r1
 8001d32:	07e0      	lsls	r0, r4, #31
 8001d34:	4318      	orrs	r0, r3
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <__aeabi_dmul+0x368>)
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dmul+0x31e>
 8001d44:	e097      	b.n	8001e76 <__aeabi_dmul+0x44e>
 8001d46:	0741      	lsls	r1, r0, #29
 8001d48:	d009      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	4001      	ands	r1, r0
 8001d4e:	2904      	cmp	r1, #4
 8001d50:	d005      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d52:	1d01      	adds	r1, r0, #4
 8001d54:	4281      	cmp	r1, r0
 8001d56:	4180      	sbcs	r0, r0
 8001d58:	4240      	negs	r0, r0
 8001d5a:	1824      	adds	r4, r4, r0
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	01e1      	lsls	r1, r4, #7
 8001d60:	d506      	bpl.n	8001d70 <__aeabi_dmul+0x348>
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	00c9      	lsls	r1, r1, #3
 8001d66:	468c      	mov	ip, r1
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <__aeabi_dmul+0x36c>)
 8001d6a:	401c      	ands	r4, r3
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	4463      	add	r3, ip
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <__aeabi_dmul+0x370>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dmul+0x350>
 8001d76:	e710      	b.n	8001b9a <__aeabi_dmul+0x172>
 8001d78:	0761      	lsls	r1, r4, #29
 8001d7a:	08c5      	lsrs	r5, r0, #3
 8001d7c:	0264      	lsls	r4, r4, #9
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	430d      	orrs	r5, r1
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	0d5b      	lsrs	r3, r3, #21
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	000003ff 	.word	0x000003ff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	000007fe 	.word	0x000007fe
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	d059      	beq.n	8001e56 <__aeabi_dmul+0x42e>
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dmul+0x380>
 8001da6:	e0a3      	b.n	8001ef0 <__aeabi_dmul+0x4c8>
 8001da8:	0020      	movs	r0, r4
 8001daa:	f000 fd73 	bl	8002894 <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	390b      	subs	r1, #11
 8001db4:	221d      	movs	r2, #29
 8001db6:	1a52      	subs	r2, r2, r1
 8001db8:	4649      	mov	r1, r9
 8001dba:	0018      	movs	r0, r3
 8001dbc:	40d1      	lsrs	r1, r2
 8001dbe:	464a      	mov	r2, r9
 8001dc0:	3808      	subs	r0, #8
 8001dc2:	4082      	lsls	r2, r0
 8001dc4:	4084      	lsls	r4, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	430c      	orrs	r4, r1
 8001dca:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <__aeabi_dmul+0x574>)
 8001dcc:	1aeb      	subs	r3, r5, r3
 8001dce:	4694      	mov	ip, r2
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	4463      	add	r3, ip
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	407a      	eors	r2, r7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dmul+0x3c0>
 8001de6:	e667      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001de8:	e683      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001dea:	465b      	mov	r3, fp
 8001dec:	4303      	orrs	r3, r0
 8001dee:	469a      	mov	sl, r3
 8001df0:	d02a      	beq.n	8001e48 <__aeabi_dmul+0x420>
 8001df2:	465b      	mov	r3, fp
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06d      	beq.n	8001ed4 <__aeabi_dmul+0x4ac>
 8001df8:	4658      	mov	r0, fp
 8001dfa:	f000 fd4b 	bl	8002894 <__clzsi2>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	0003      	movs	r3, r0
 8001e02:	390b      	subs	r1, #11
 8001e04:	221d      	movs	r2, #29
 8001e06:	1a52      	subs	r2, r2, r1
 8001e08:	0021      	movs	r1, r4
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	465d      	mov	r5, fp
 8001e0e:	40d1      	lsrs	r1, r2
 8001e10:	3808      	subs	r0, #8
 8001e12:	4085      	lsls	r5, r0
 8001e14:	000a      	movs	r2, r1
 8001e16:	4084      	lsls	r4, r0
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	4d5f      	ldr	r5, [pc, #380]	; (8001f9c <__aeabi_dmul+0x574>)
 8001e20:	2600      	movs	r6, #0
 8001e22:	1aed      	subs	r5, r5, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	e625      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	d105      	bne.n	8001e3e <__aeabi_dmul+0x416>
 8001e32:	2300      	movs	r3, #0
 8001e34:	469b      	mov	fp, r3
 8001e36:	3302      	adds	r3, #2
 8001e38:	2608      	movs	r6, #8
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e61b      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4682      	mov	sl, r0
 8001e42:	260c      	movs	r6, #12
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	e616      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	469b      	mov	fp, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2500      	movs	r5, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	e60f      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	3301      	adds	r3, #1
 8001e5a:	9501      	str	r5, [sp, #4]
 8001e5c:	431e      	orrs	r6, r3
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	407a      	eors	r2, r7
 8001e62:	3301      	adds	r3, #1
 8001e64:	2400      	movs	r4, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	2101      	movs	r1, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2e0a      	cmp	r6, #10
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dmul+0x44c>
 8001e72:	e621      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001e74:	e63d      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001e76:	2101      	movs	r1, #1
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	2938      	cmp	r1, #56	; 0x38
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x458>
 8001e7e:	e642      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dd47      	ble.n	8001f14 <__aeabi_dmul+0x4ec>
 8001e84:	261f      	movs	r6, #31
 8001e86:	0025      	movs	r5, r4
 8001e88:	4276      	negs	r6, r6
 8001e8a:	1af3      	subs	r3, r6, r3
 8001e8c:	40dd      	lsrs	r5, r3
 8001e8e:	002b      	movs	r3, r5
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_dmul+0x478>
 8001e94:	4942      	ldr	r1, [pc, #264]	; (8001fa0 <__aeabi_dmul+0x578>)
 8001e96:	9d02      	ldr	r5, [sp, #8]
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4465      	add	r5, ip
 8001e9c:	40ac      	lsls	r4, r5
 8001e9e:	4320      	orrs	r0, r4
 8001ea0:	1e41      	subs	r1, r0, #1
 8001ea2:	4188      	sbcs	r0, r1
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	001d      	movs	r5, r3
 8001eaa:	2400      	movs	r4, #0
 8001eac:	4005      	ands	r5, r0
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d04a      	beq.n	8001f48 <__aeabi_dmul+0x520>
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d042      	beq.n	8001f42 <__aeabi_dmul+0x51a>
 8001ebc:	1d03      	adds	r3, r0, #4
 8001ebe:	4283      	cmp	r3, r0
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	0223      	lsls	r3, r4, #8
 8001eca:	d53a      	bpl.n	8001f42 <__aeabi_dmul+0x51a>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e61b      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ed4:	f000 fcde 	bl	8002894 <__clzsi2>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	3115      	adds	r1, #21
 8001ede:	3320      	adds	r3, #32
 8001ee0:	291c      	cmp	r1, #28
 8001ee2:	dd8f      	ble.n	8001e04 <__aeabi_dmul+0x3dc>
 8001ee4:	3808      	subs	r0, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4084      	lsls	r4, r0
 8001eea:	4692      	mov	sl, r2
 8001eec:	46a3      	mov	fp, r4
 8001eee:	e796      	b.n	8001e1e <__aeabi_dmul+0x3f6>
 8001ef0:	f000 fcd0 	bl	8002894 <__clzsi2>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	3115      	adds	r1, #21
 8001efa:	3320      	adds	r3, #32
 8001efc:	291c      	cmp	r1, #28
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dmul+0x4da>
 8001f00:	e758      	b.n	8001db4 <__aeabi_dmul+0x38c>
 8001f02:	0002      	movs	r2, r0
 8001f04:	464c      	mov	r4, r9
 8001f06:	3a08      	subs	r2, #8
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4094      	lsls	r4, r2
 8001f0c:	e75d      	b.n	8001dca <__aeabi_dmul+0x3a2>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	e711      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <__aeabi_dmul+0x57c>)
 8001f16:	0026      	movs	r6, r4
 8001f18:	469c      	mov	ip, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	9d02      	ldr	r5, [sp, #8]
 8001f1e:	40cb      	lsrs	r3, r1
 8001f20:	4465      	add	r5, ip
 8001f22:	40ae      	lsls	r6, r5
 8001f24:	431e      	orrs	r6, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	40ab      	lsls	r3, r5
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	4183      	sbcs	r3, r0
 8001f2e:	0030      	movs	r0, r6
 8001f30:	4318      	orrs	r0, r3
 8001f32:	40cc      	lsrs	r4, r1
 8001f34:	0743      	lsls	r3, r0, #29
 8001f36:	d0c7      	beq.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d1bd      	bne.n	8001ebc <__aeabi_dmul+0x494>
 8001f40:	e7c2      	b.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f42:	0765      	lsls	r5, r4, #29
 8001f44:	0264      	lsls	r4, r4, #9
 8001f46:	0b24      	lsrs	r4, r4, #12
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4305      	orrs	r5, r0
 8001f4e:	e5dd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f50:	2500      	movs	r5, #0
 8001f52:	2302      	movs	r3, #2
 8001f54:	2e0f      	cmp	r6, #15
 8001f56:	d10c      	bne.n	8001f72 <__aeabi_dmul+0x54a>
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	4223      	tst	r3, r4
 8001f60:	d00e      	beq.n	8001f80 <__aeabi_dmul+0x558>
 8001f62:	4221      	tst	r1, r4
 8001f64:	d10c      	bne.n	8001f80 <__aeabi_dmul+0x558>
 8001f66:	430c      	orrs	r4, r1
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	003a      	movs	r2, r7
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	e5cc      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f72:	2e0b      	cmp	r6, #11
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dmul+0x550>
 8001f76:	e5a2      	b.n	8001abe <__aeabi_dmul+0x96>
 8001f78:	468b      	mov	fp, r1
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	e5f7      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	465b      	mov	r3, fp
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	431c      	orrs	r4, r3
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4655      	mov	r5, sl
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	e5bb      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f94:	464d      	mov	r5, r9
 8001f96:	0021      	movs	r1, r4
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e7db      	b.n	8001f54 <__aeabi_dmul+0x52c>
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	0000043e 	.word	0x0000043e
 8001fa4:	0000041e 	.word	0x0000041e
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__aeabi_dsub>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	000d      	movs	r5, r1
 8001fba:	0004      	movs	r4, r0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	032b      	lsls	r3, r5, #12
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	0f62      	lsrs	r2, r4, #29
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	00e3      	lsls	r3, r4, #3
 8001fca:	030c      	lsls	r4, r1, #12
 8001fcc:	0a64      	lsrs	r4, r4, #9
 8001fce:	0f47      	lsrs	r7, r0, #29
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	4cd0      	ldr	r4, [pc, #832]	; (8002314 <__aeabi_dsub+0x368>)
 8001fd4:	006e      	lsls	r6, r5, #1
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	b083      	sub	sp, #12
 8001fda:	004a      	lsls	r2, r1, #1
 8001fdc:	00c0      	lsls	r0, r0, #3
 8001fde:	4698      	mov	r8, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	0d76      	lsrs	r6, r6, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	0d52      	lsrs	r2, r2, #21
 8001fe8:	0fc9      	lsrs	r1, r1, #31
 8001fea:	9001      	str	r0, [sp, #4]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x46>
 8001ff0:	e0b9      	b.n	8002166 <__aeabi_dsub+0x1ba>
 8001ff2:	2401      	movs	r4, #1
 8001ff4:	4061      	eors	r1, r4
 8001ff6:	468b      	mov	fp, r1
 8001ff8:	428d      	cmp	r5, r1
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x52>
 8001ffc:	e08d      	b.n	800211a <__aeabi_dsub+0x16e>
 8001ffe:	1ab4      	subs	r4, r6, r2
 8002000:	46a4      	mov	ip, r4
 8002002:	2c00      	cmp	r4, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x5c>
 8002006:	e0b7      	b.n	8002178 <__aeabi_dsub+0x1cc>
 8002008:	2a00      	cmp	r2, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x62>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_dsub+0x1fa>
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <__aeabi_dsub+0x368>)
 8002010:	4296      	cmp	r6, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x6a>
 8002014:	e186      	b.n	8002324 <__aeabi_dsub+0x378>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	4317      	orrs	r7, r2
 800201c:	4662      	mov	r2, ip
 800201e:	2a38      	cmp	r2, #56	; 0x38
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0x78>
 8002022:	e1a4      	b.n	800236e <__aeabi_dsub+0x3c2>
 8002024:	2a1f      	cmp	r2, #31
 8002026:	dd00      	ble.n	800202a <__aeabi_dsub+0x7e>
 8002028:	e21d      	b.n	8002466 <__aeabi_dsub+0x4ba>
 800202a:	4661      	mov	r1, ip
 800202c:	2220      	movs	r2, #32
 800202e:	003c      	movs	r4, r7
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	0001      	movs	r1, r0
 8002034:	4090      	lsls	r0, r2
 8002036:	4094      	lsls	r4, r2
 8002038:	1e42      	subs	r2, r0, #1
 800203a:	4190      	sbcs	r0, r2
 800203c:	4662      	mov	r2, ip
 800203e:	46a0      	mov	r8, r4
 8002040:	4664      	mov	r4, ip
 8002042:	40d7      	lsrs	r7, r2
 8002044:	464a      	mov	r2, r9
 8002046:	40e1      	lsrs	r1, r4
 8002048:	4644      	mov	r4, r8
 800204a:	1bd2      	subs	r2, r2, r7
 800204c:	4691      	mov	r9, r2
 800204e:	430c      	orrs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	1b1c      	subs	r4, r3, r4
 8002054:	42a3      	cmp	r3, r4
 8002056:	4192      	sbcs	r2, r2
 8002058:	464b      	mov	r3, r9
 800205a:	4252      	negs	r2, r2
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	469a      	mov	sl, r3
 8002060:	4653      	mov	r3, sl
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d400      	bmi.n	8002068 <__aeabi_dsub+0xbc>
 8002066:	e12b      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002068:	4653      	mov	r3, sl
 800206a:	025a      	lsls	r2, r3, #9
 800206c:	0a53      	lsrs	r3, r2, #9
 800206e:	469a      	mov	sl, r3
 8002070:	4653      	mov	r3, sl
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0xcc>
 8002076:	e166      	b.n	8002346 <__aeabi_dsub+0x39a>
 8002078:	4650      	mov	r0, sl
 800207a:	f000 fc0b 	bl	8002894 <__clzsi2>
 800207e:	0003      	movs	r3, r0
 8002080:	3b08      	subs	r3, #8
 8002082:	2220      	movs	r2, #32
 8002084:	0020      	movs	r0, r4
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	4651      	mov	r1, sl
 800208a:	40d0      	lsrs	r0, r2
 800208c:	4099      	lsls	r1, r3
 800208e:	0002      	movs	r2, r0
 8002090:	409c      	lsls	r4, r3
 8002092:	430a      	orrs	r2, r1
 8002094:	429e      	cmp	r6, r3
 8002096:	dd00      	ble.n	800209a <__aeabi_dsub+0xee>
 8002098:	e164      	b.n	8002364 <__aeabi_dsub+0x3b8>
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	291f      	cmp	r1, #31
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dsub+0xf8>
 80020a2:	e0fe      	b.n	80022a2 <__aeabi_dsub+0x2f6>
 80020a4:	2320      	movs	r3, #32
 80020a6:	0010      	movs	r0, r2
 80020a8:	0026      	movs	r6, r4
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	409c      	lsls	r4, r3
 80020ae:	4098      	lsls	r0, r3
 80020b0:	40ce      	lsrs	r6, r1
 80020b2:	40ca      	lsrs	r2, r1
 80020b4:	1e63      	subs	r3, r4, #1
 80020b6:	419c      	sbcs	r4, r3
 80020b8:	4330      	orrs	r0, r6
 80020ba:	4692      	mov	sl, r2
 80020bc:	2600      	movs	r6, #0
 80020be:	4304      	orrs	r4, r0
 80020c0:	0763      	lsls	r3, r4, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020c4:	230f      	movs	r3, #15
 80020c6:	4023      	ands	r3, r4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020cc:	1d23      	adds	r3, r4, #4
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	41a4      	sbcs	r4, r4
 80020d2:	4264      	negs	r4, r4
 80020d4:	44a2      	add	sl, r4
 80020d6:	001c      	movs	r4, r3
 80020d8:	4653      	mov	r3, sl
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x134>
 80020de:	e0f2      	b.n	80022c6 <__aeabi_dsub+0x31a>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <__aeabi_dsub+0x368>)
 80020e2:	3601      	adds	r6, #1
 80020e4:	429e      	cmp	r6, r3
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x13e>
 80020e8:	e10f      	b.n	800230a <__aeabi_dsub+0x35e>
 80020ea:	4653      	mov	r3, sl
 80020ec:	498a      	ldr	r1, [pc, #552]	; (8002318 <__aeabi_dsub+0x36c>)
 80020ee:	08e4      	lsrs	r4, r4, #3
 80020f0:	400b      	ands	r3, r1
 80020f2:	0019      	movs	r1, r3
 80020f4:	075b      	lsls	r3, r3, #29
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0572      	lsls	r2, r6, #21
 80020fa:	024c      	lsls	r4, r1, #9
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d52      	lsrs	r2, r2, #21
 8002100:	0512      	lsls	r2, r2, #20
 8002102:	4322      	orrs	r2, r4
 8002104:	07ed      	lsls	r5, r5, #31
 8002106:	432a      	orrs	r2, r5
 8002108:	0018      	movs	r0, r3
 800210a:	0011      	movs	r1, r2
 800210c:	b003      	add	sp, #12
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	46bb      	mov	fp, r7
 8002112:	46b2      	mov	sl, r6
 8002114:	46a9      	mov	r9, r5
 8002116:	46a0      	mov	r8, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	1ab4      	subs	r4, r6, r2
 800211c:	46a4      	mov	ip, r4
 800211e:	2c00      	cmp	r4, #0
 8002120:	dd59      	ble.n	80021d6 <__aeabi_dsub+0x22a>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x17c>
 8002126:	e0b0      	b.n	800228a <__aeabi_dsub+0x2de>
 8002128:	4556      	cmp	r6, sl
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x182>
 800212c:	e0fa      	b.n	8002324 <__aeabi_dsub+0x378>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0412      	lsls	r2, r2, #16
 8002132:	4317      	orrs	r7, r2
 8002134:	4662      	mov	r2, ip
 8002136:	2a38      	cmp	r2, #56	; 0x38
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x190>
 800213a:	e0d4      	b.n	80022e6 <__aeabi_dsub+0x33a>
 800213c:	2a1f      	cmp	r2, #31
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dsub+0x196>
 8002140:	e1c0      	b.n	80024c4 <__aeabi_dsub+0x518>
 8002142:	0039      	movs	r1, r7
 8002144:	3a20      	subs	r2, #32
 8002146:	40d1      	lsrs	r1, r2
 8002148:	4662      	mov	r2, ip
 800214a:	2a20      	cmp	r2, #32
 800214c:	d006      	beq.n	800215c <__aeabi_dsub+0x1b0>
 800214e:	4664      	mov	r4, ip
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	1b12      	subs	r2, r2, r4
 8002154:	003c      	movs	r4, r7
 8002156:	4094      	lsls	r4, r2
 8002158:	4304      	orrs	r4, r0
 800215a:	9401      	str	r4, [sp, #4]
 800215c:	9c01      	ldr	r4, [sp, #4]
 800215e:	1e62      	subs	r2, r4, #1
 8002160:	4194      	sbcs	r4, r2
 8002162:	430c      	orrs	r4, r1
 8002164:	e0c3      	b.n	80022ee <__aeabi_dsub+0x342>
 8002166:	003c      	movs	r4, r7
 8002168:	4304      	orrs	r4, r0
 800216a:	d02b      	beq.n	80021c4 <__aeabi_dsub+0x218>
 800216c:	468b      	mov	fp, r1
 800216e:	428d      	cmp	r5, r1
 8002170:	d02e      	beq.n	80021d0 <__aeabi_dsub+0x224>
 8002172:	4c6a      	ldr	r4, [pc, #424]	; (800231c <__aeabi_dsub+0x370>)
 8002174:	46a4      	mov	ip, r4
 8002176:	44b4      	add	ip, r6
 8002178:	4664      	mov	r4, ip
 800217a:	2c00      	cmp	r4, #0
 800217c:	d05f      	beq.n	800223e <__aeabi_dsub+0x292>
 800217e:	1b94      	subs	r4, r2, r6
 8002180:	46a4      	mov	ip, r4
 8002182:	2e00      	cmp	r6, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x1dc>
 8002186:	e120      	b.n	80023ca <__aeabi_dsub+0x41e>
 8002188:	464c      	mov	r4, r9
 800218a:	431c      	orrs	r4, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x1e4>
 800218e:	e1c7      	b.n	8002520 <__aeabi_dsub+0x574>
 8002190:	4661      	mov	r1, ip
 8002192:	1e4c      	subs	r4, r1, #1
 8002194:	2901      	cmp	r1, #1
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x1ee>
 8002198:	e223      	b.n	80025e2 <__aeabi_dsub+0x636>
 800219a:	4d5e      	ldr	r5, [pc, #376]	; (8002314 <__aeabi_dsub+0x368>)
 800219c:	45ac      	cmp	ip, r5
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x1f6>
 80021a0:	e1d8      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80021a2:	46a4      	mov	ip, r4
 80021a4:	e11a      	b.n	80023dc <__aeabi_dsub+0x430>
 80021a6:	003a      	movs	r2, r7
 80021a8:	4302      	orrs	r2, r0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x202>
 80021ac:	e0e4      	b.n	8002378 <__aeabi_dsub+0x3cc>
 80021ae:	0022      	movs	r2, r4
 80021b0:	3a01      	subs	r2, #1
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x20c>
 80021b6:	e1c3      	b.n	8002540 <__aeabi_dsub+0x594>
 80021b8:	4956      	ldr	r1, [pc, #344]	; (8002314 <__aeabi_dsub+0x368>)
 80021ba:	428c      	cmp	r4, r1
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x214>
 80021be:	e0b1      	b.n	8002324 <__aeabi_dsub+0x378>
 80021c0:	4694      	mov	ip, r2
 80021c2:	e72b      	b.n	800201c <__aeabi_dsub+0x70>
 80021c4:	2401      	movs	r4, #1
 80021c6:	4061      	eors	r1, r4
 80021c8:	468b      	mov	fp, r1
 80021ca:	428d      	cmp	r5, r1
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x224>
 80021ce:	e716      	b.n	8001ffe <__aeabi_dsub+0x52>
 80021d0:	4952      	ldr	r1, [pc, #328]	; (800231c <__aeabi_dsub+0x370>)
 80021d2:	468c      	mov	ip, r1
 80021d4:	44b4      	add	ip, r6
 80021d6:	4664      	mov	r4, ip
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x232>
 80021dc:	e0d3      	b.n	8002386 <__aeabi_dsub+0x3da>
 80021de:	1b91      	subs	r1, r2, r6
 80021e0:	468c      	mov	ip, r1
 80021e2:	2e00      	cmp	r6, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x23c>
 80021e6:	e15e      	b.n	80024a6 <__aeabi_dsub+0x4fa>
 80021e8:	494a      	ldr	r1, [pc, #296]	; (8002314 <__aeabi_dsub+0x368>)
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x244>
 80021ee:	e1be      	b.n	800256e <__aeabi_dsub+0x5c2>
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	464c      	mov	r4, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	430c      	orrs	r4, r1
 80021f8:	46a1      	mov	r9, r4
 80021fa:	4661      	mov	r1, ip
 80021fc:	2938      	cmp	r1, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0x256>
 8002200:	e1ba      	b.n	8002578 <__aeabi_dsub+0x5cc>
 8002202:	291f      	cmp	r1, #31
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x25c>
 8002206:	e227      	b.n	8002658 <__aeabi_dsub+0x6ac>
 8002208:	2420      	movs	r4, #32
 800220a:	1a64      	subs	r4, r4, r1
 800220c:	4649      	mov	r1, r9
 800220e:	40a1      	lsls	r1, r4
 8002210:	001e      	movs	r6, r3
 8002212:	4688      	mov	r8, r1
 8002214:	4661      	mov	r1, ip
 8002216:	40a3      	lsls	r3, r4
 8002218:	40ce      	lsrs	r6, r1
 800221a:	4641      	mov	r1, r8
 800221c:	1e5c      	subs	r4, r3, #1
 800221e:	41a3      	sbcs	r3, r4
 8002220:	4331      	orrs	r1, r6
 8002222:	4319      	orrs	r1, r3
 8002224:	000c      	movs	r4, r1
 8002226:	4663      	mov	r3, ip
 8002228:	4649      	mov	r1, r9
 800222a:	40d9      	lsrs	r1, r3
 800222c:	187f      	adds	r7, r7, r1
 800222e:	1824      	adds	r4, r4, r0
 8002230:	4284      	cmp	r4, r0
 8002232:	419b      	sbcs	r3, r3
 8002234:	425b      	negs	r3, r3
 8002236:	469a      	mov	sl, r3
 8002238:	0016      	movs	r6, r2
 800223a:	44ba      	add	sl, r7
 800223c:	e05d      	b.n	80022fa <__aeabi_dsub+0x34e>
 800223e:	4c38      	ldr	r4, [pc, #224]	; (8002320 <__aeabi_dsub+0x374>)
 8002240:	1c72      	adds	r2, r6, #1
 8002242:	4222      	tst	r2, r4
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x29c>
 8002246:	e0df      	b.n	8002408 <__aeabi_dsub+0x45c>
 8002248:	464a      	mov	r2, r9
 800224a:	431a      	orrs	r2, r3
 800224c:	2e00      	cmp	r6, #0
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x2a6>
 8002250:	e15c      	b.n	800250c <__aeabi_dsub+0x560>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x2ac>
 8002256:	e1cf      	b.n	80025f8 <__aeabi_dsub+0x64c>
 8002258:	003a      	movs	r2, r7
 800225a:	4302      	orrs	r2, r0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x2b4>
 800225e:	e17f      	b.n	8002560 <__aeabi_dsub+0x5b4>
 8002260:	1a1c      	subs	r4, r3, r0
 8002262:	464a      	mov	r2, r9
 8002264:	42a3      	cmp	r3, r4
 8002266:	4189      	sbcs	r1, r1
 8002268:	1bd2      	subs	r2, r2, r7
 800226a:	4249      	negs	r1, r1
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	4692      	mov	sl, r2
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	d400      	bmi.n	8002276 <__aeabi_dsub+0x2ca>
 8002274:	e20a      	b.n	800268c <__aeabi_dsub+0x6e0>
 8002276:	1ac4      	subs	r4, r0, r3
 8002278:	42a0      	cmp	r0, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	464b      	mov	r3, r9
 800227e:	4240      	negs	r0, r0
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	1a3b      	subs	r3, r7, r0
 8002284:	469a      	mov	sl, r3
 8002286:	465d      	mov	r5, fp
 8002288:	e71a      	b.n	80020c0 <__aeabi_dsub+0x114>
 800228a:	003a      	movs	r2, r7
 800228c:	4302      	orrs	r2, r0
 800228e:	d073      	beq.n	8002378 <__aeabi_dsub+0x3cc>
 8002290:	0022      	movs	r2, r4
 8002292:	3a01      	subs	r2, #1
 8002294:	2c01      	cmp	r4, #1
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x2ee>
 8002298:	e0cb      	b.n	8002432 <__aeabi_dsub+0x486>
 800229a:	4554      	cmp	r4, sl
 800229c:	d042      	beq.n	8002324 <__aeabi_dsub+0x378>
 800229e:	4694      	mov	ip, r2
 80022a0:	e748      	b.n	8002134 <__aeabi_dsub+0x188>
 80022a2:	0010      	movs	r0, r2
 80022a4:	3b1f      	subs	r3, #31
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d003      	beq.n	80022b4 <__aeabi_dsub+0x308>
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4314      	orrs	r4, r2
 80022b4:	1e63      	subs	r3, r4, #1
 80022b6:	419c      	sbcs	r4, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	2600      	movs	r6, #0
 80022bc:	469a      	mov	sl, r3
 80022be:	4304      	orrs	r4, r0
 80022c0:	0763      	lsls	r3, r4, #29
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x31a>
 80022c4:	e6fe      	b.n	80020c4 <__aeabi_dsub+0x118>
 80022c6:	4652      	mov	r2, sl
 80022c8:	08e3      	lsrs	r3, r4, #3
 80022ca:	0752      	lsls	r2, r2, #29
 80022cc:	4313      	orrs	r3, r2
 80022ce:	4652      	mov	r2, sl
 80022d0:	46b4      	mov	ip, r6
 80022d2:	08d2      	lsrs	r2, r2, #3
 80022d4:	490f      	ldr	r1, [pc, #60]	; (8002314 <__aeabi_dsub+0x368>)
 80022d6:	458c      	cmp	ip, r1
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dsub+0x384>
 80022da:	0312      	lsls	r2, r2, #12
 80022dc:	0b14      	lsrs	r4, r2, #12
 80022de:	4662      	mov	r2, ip
 80022e0:	0552      	lsls	r2, r2, #21
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	e70c      	b.n	8002100 <__aeabi_dsub+0x154>
 80022e6:	003c      	movs	r4, r7
 80022e8:	4304      	orrs	r4, r0
 80022ea:	1e62      	subs	r2, r4, #1
 80022ec:	4194      	sbcs	r4, r2
 80022ee:	18e4      	adds	r4, r4, r3
 80022f0:	429c      	cmp	r4, r3
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	4252      	negs	r2, r2
 80022f6:	444a      	add	r2, r9
 80022f8:	4692      	mov	sl, r2
 80022fa:	4653      	mov	r3, sl
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	d5df      	bpl.n	80022c0 <__aeabi_dsub+0x314>
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__aeabi_dsub+0x368>)
 8002302:	3601      	adds	r6, #1
 8002304:	429e      	cmp	r6, r3
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x35e>
 8002308:	e0a0      	b.n	800244c <__aeabi_dsub+0x4a0>
 800230a:	0032      	movs	r2, r6
 800230c:	2400      	movs	r4, #0
 800230e:	2300      	movs	r3, #0
 8002310:	e6f6      	b.n	8002100 <__aeabi_dsub+0x154>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	fffff801 	.word	0xfffff801
 8002320:	000007fe 	.word	0x000007fe
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	464a      	mov	r2, r9
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	4313      	orrs	r3, r2
 800232c:	464a      	mov	r2, r9
 800232e:	08d2      	lsrs	r2, r2, #3
 8002330:	0019      	movs	r1, r3
 8002332:	4311      	orrs	r1, r2
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x38c>
 8002336:	e1b5      	b.n	80026a4 <__aeabi_dsub+0x6f8>
 8002338:	2480      	movs	r4, #128	; 0x80
 800233a:	0324      	lsls	r4, r4, #12
 800233c:	4314      	orrs	r4, r2
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	4ad5      	ldr	r2, [pc, #852]	; (8002698 <__aeabi_dsub+0x6ec>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e6dc      	b.n	8002100 <__aeabi_dsub+0x154>
 8002346:	0020      	movs	r0, r4
 8002348:	f000 faa4 	bl	8002894 <__clzsi2>
 800234c:	0003      	movs	r3, r0
 800234e:	3318      	adds	r3, #24
 8002350:	2b1f      	cmp	r3, #31
 8002352:	dc00      	bgt.n	8002356 <__aeabi_dsub+0x3aa>
 8002354:	e695      	b.n	8002082 <__aeabi_dsub+0xd6>
 8002356:	0022      	movs	r2, r4
 8002358:	3808      	subs	r0, #8
 800235a:	4082      	lsls	r2, r0
 800235c:	2400      	movs	r4, #0
 800235e:	429e      	cmp	r6, r3
 8002360:	dc00      	bgt.n	8002364 <__aeabi_dsub+0x3b8>
 8002362:	e69a      	b.n	800209a <__aeabi_dsub+0xee>
 8002364:	1af6      	subs	r6, r6, r3
 8002366:	4bcd      	ldr	r3, [pc, #820]	; (800269c <__aeabi_dsub+0x6f0>)
 8002368:	401a      	ands	r2, r3
 800236a:	4692      	mov	sl, r2
 800236c:	e6a8      	b.n	80020c0 <__aeabi_dsub+0x114>
 800236e:	003c      	movs	r4, r7
 8002370:	4304      	orrs	r4, r0
 8002372:	1e62      	subs	r2, r4, #1
 8002374:	4194      	sbcs	r4, r2
 8002376:	e66c      	b.n	8002052 <__aeabi_dsub+0xa6>
 8002378:	464a      	mov	r2, r9
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0752      	lsls	r2, r2, #29
 800237e:	4313      	orrs	r3, r2
 8002380:	464a      	mov	r2, r9
 8002382:	08d2      	lsrs	r2, r2, #3
 8002384:	e7a6      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002386:	4cc6      	ldr	r4, [pc, #792]	; (80026a0 <__aeabi_dsub+0x6f4>)
 8002388:	1c72      	adds	r2, r6, #1
 800238a:	4222      	tst	r2, r4
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x3e4>
 800238e:	e0ac      	b.n	80024ea <__aeabi_dsub+0x53e>
 8002390:	464a      	mov	r2, r9
 8002392:	431a      	orrs	r2, r3
 8002394:	2e00      	cmp	r6, #0
 8002396:	d000      	beq.n	800239a <__aeabi_dsub+0x3ee>
 8002398:	e105      	b.n	80025a6 <__aeabi_dsub+0x5fa>
 800239a:	2a00      	cmp	r2, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x3f4>
 800239e:	e156      	b.n	800264e <__aeabi_dsub+0x6a2>
 80023a0:	003a      	movs	r2, r7
 80023a2:	4302      	orrs	r2, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x3fc>
 80023a6:	e0db      	b.n	8002560 <__aeabi_dsub+0x5b4>
 80023a8:	181c      	adds	r4, r3, r0
 80023aa:	429c      	cmp	r4, r3
 80023ac:	419b      	sbcs	r3, r3
 80023ae:	444f      	add	r7, r9
 80023b0:	46ba      	mov	sl, r7
 80023b2:	425b      	negs	r3, r3
 80023b4:	449a      	add	sl, r3
 80023b6:	4653      	mov	r3, sl
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	d400      	bmi.n	80023be <__aeabi_dsub+0x412>
 80023bc:	e780      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023be:	4652      	mov	r2, sl
 80023c0:	4bb6      	ldr	r3, [pc, #728]	; (800269c <__aeabi_dsub+0x6f0>)
 80023c2:	2601      	movs	r6, #1
 80023c4:	401a      	ands	r2, r3
 80023c6:	4692      	mov	sl, r2
 80023c8:	e77a      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023ca:	4cb3      	ldr	r4, [pc, #716]	; (8002698 <__aeabi_dsub+0x6ec>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x426>
 80023d0:	e0c0      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80023d2:	2480      	movs	r4, #128	; 0x80
 80023d4:	464d      	mov	r5, r9
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	4325      	orrs	r5, r4
 80023da:	46a9      	mov	r9, r5
 80023dc:	4664      	mov	r4, ip
 80023de:	2c38      	cmp	r4, #56	; 0x38
 80023e0:	dc53      	bgt.n	800248a <__aeabi_dsub+0x4de>
 80023e2:	4661      	mov	r1, ip
 80023e4:	2c1f      	cmp	r4, #31
 80023e6:	dd00      	ble.n	80023ea <__aeabi_dsub+0x43e>
 80023e8:	e0cd      	b.n	8002586 <__aeabi_dsub+0x5da>
 80023ea:	2520      	movs	r5, #32
 80023ec:	001e      	movs	r6, r3
 80023ee:	1b2d      	subs	r5, r5, r4
 80023f0:	464c      	mov	r4, r9
 80023f2:	40ab      	lsls	r3, r5
 80023f4:	40ac      	lsls	r4, r5
 80023f6:	40ce      	lsrs	r6, r1
 80023f8:	1e5d      	subs	r5, r3, #1
 80023fa:	41ab      	sbcs	r3, r5
 80023fc:	4334      	orrs	r4, r6
 80023fe:	4323      	orrs	r3, r4
 8002400:	464c      	mov	r4, r9
 8002402:	40cc      	lsrs	r4, r1
 8002404:	1b3f      	subs	r7, r7, r4
 8002406:	e045      	b.n	8002494 <__aeabi_dsub+0x4e8>
 8002408:	464a      	mov	r2, r9
 800240a:	1a1c      	subs	r4, r3, r0
 800240c:	1bd1      	subs	r1, r2, r7
 800240e:	42a3      	cmp	r3, r4
 8002410:	4192      	sbcs	r2, r2
 8002412:	4252      	negs	r2, r2
 8002414:	4692      	mov	sl, r2
 8002416:	000a      	movs	r2, r1
 8002418:	4651      	mov	r1, sl
 800241a:	1a52      	subs	r2, r2, r1
 800241c:	4692      	mov	sl, r2
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	d500      	bpl.n	8002424 <__aeabi_dsub+0x478>
 8002422:	e083      	b.n	800252c <__aeabi_dsub+0x580>
 8002424:	4653      	mov	r3, sl
 8002426:	4323      	orrs	r3, r4
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x480>
 800242a:	e621      	b.n	8002070 <__aeabi_dsub+0xc4>
 800242c:	2200      	movs	r2, #0
 800242e:	2500      	movs	r5, #0
 8002430:	e753      	b.n	80022da <__aeabi_dsub+0x32e>
 8002432:	181c      	adds	r4, r3, r0
 8002434:	429c      	cmp	r4, r3
 8002436:	419b      	sbcs	r3, r3
 8002438:	444f      	add	r7, r9
 800243a:	46ba      	mov	sl, r7
 800243c:	425b      	negs	r3, r3
 800243e:	449a      	add	sl, r3
 8002440:	4653      	mov	r3, sl
 8002442:	2601      	movs	r6, #1
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	d400      	bmi.n	800244a <__aeabi_dsub+0x49e>
 8002448:	e73a      	b.n	80022c0 <__aeabi_dsub+0x314>
 800244a:	2602      	movs	r6, #2
 800244c:	4652      	mov	r2, sl
 800244e:	4b93      	ldr	r3, [pc, #588]	; (800269c <__aeabi_dsub+0x6f0>)
 8002450:	2101      	movs	r1, #1
 8002452:	401a      	ands	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	4021      	ands	r1, r4
 8002458:	0862      	lsrs	r2, r4, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	07dc      	lsls	r4, r3, #31
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	469a      	mov	sl, r3
 8002462:	4314      	orrs	r4, r2
 8002464:	e62c      	b.n	80020c0 <__aeabi_dsub+0x114>
 8002466:	0039      	movs	r1, r7
 8002468:	3a20      	subs	r2, #32
 800246a:	40d1      	lsrs	r1, r2
 800246c:	4662      	mov	r2, ip
 800246e:	2a20      	cmp	r2, #32
 8002470:	d006      	beq.n	8002480 <__aeabi_dsub+0x4d4>
 8002472:	4664      	mov	r4, ip
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	1b12      	subs	r2, r2, r4
 8002478:	003c      	movs	r4, r7
 800247a:	4094      	lsls	r4, r2
 800247c:	4304      	orrs	r4, r0
 800247e:	9401      	str	r4, [sp, #4]
 8002480:	9c01      	ldr	r4, [sp, #4]
 8002482:	1e62      	subs	r2, r4, #1
 8002484:	4194      	sbcs	r4, r2
 8002486:	430c      	orrs	r4, r1
 8002488:	e5e3      	b.n	8002052 <__aeabi_dsub+0xa6>
 800248a:	4649      	mov	r1, r9
 800248c:	4319      	orrs	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	1e5c      	subs	r4, r3, #1
 8002492:	41a3      	sbcs	r3, r4
 8002494:	1ac4      	subs	r4, r0, r3
 8002496:	42a0      	cmp	r0, r4
 8002498:	419b      	sbcs	r3, r3
 800249a:	425b      	negs	r3, r3
 800249c:	1afb      	subs	r3, r7, r3
 800249e:	469a      	mov	sl, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	0016      	movs	r6, r2
 80024a4:	e5dc      	b.n	8002060 <__aeabi_dsub+0xb4>
 80024a6:	4649      	mov	r1, r9
 80024a8:	4319      	orrs	r1, r3
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x502>
 80024ac:	e0ae      	b.n	800260c <__aeabi_dsub+0x660>
 80024ae:	4661      	mov	r1, ip
 80024b0:	4664      	mov	r4, ip
 80024b2:	3901      	subs	r1, #1
 80024b4:	2c01      	cmp	r4, #1
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x50e>
 80024b8:	e0e0      	b.n	800267c <__aeabi_dsub+0x6d0>
 80024ba:	4c77      	ldr	r4, [pc, #476]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024bc:	45a4      	cmp	ip, r4
 80024be:	d056      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80024c0:	468c      	mov	ip, r1
 80024c2:	e69a      	b.n	80021fa <__aeabi_dsub+0x24e>
 80024c4:	4661      	mov	r1, ip
 80024c6:	2220      	movs	r2, #32
 80024c8:	003c      	movs	r4, r7
 80024ca:	1a52      	subs	r2, r2, r1
 80024cc:	4094      	lsls	r4, r2
 80024ce:	0001      	movs	r1, r0
 80024d0:	4090      	lsls	r0, r2
 80024d2:	46a0      	mov	r8, r4
 80024d4:	4664      	mov	r4, ip
 80024d6:	1e42      	subs	r2, r0, #1
 80024d8:	4190      	sbcs	r0, r2
 80024da:	4662      	mov	r2, ip
 80024dc:	40e1      	lsrs	r1, r4
 80024de:	4644      	mov	r4, r8
 80024e0:	40d7      	lsrs	r7, r2
 80024e2:	430c      	orrs	r4, r1
 80024e4:	4304      	orrs	r4, r0
 80024e6:	44b9      	add	r9, r7
 80024e8:	e701      	b.n	80022ee <__aeabi_dsub+0x342>
 80024ea:	496b      	ldr	r1, [pc, #428]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024ec:	428a      	cmp	r2, r1
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x546>
 80024f0:	e70c      	b.n	800230c <__aeabi_dsub+0x360>
 80024f2:	1818      	adds	r0, r3, r0
 80024f4:	4298      	cmp	r0, r3
 80024f6:	419b      	sbcs	r3, r3
 80024f8:	444f      	add	r7, r9
 80024fa:	425b      	negs	r3, r3
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	07dc      	lsls	r4, r3, #31
 8002500:	0840      	lsrs	r0, r0, #1
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	469a      	mov	sl, r3
 8002506:	0016      	movs	r6, r2
 8002508:	4304      	orrs	r4, r0
 800250a:	e6d9      	b.n	80022c0 <__aeabi_dsub+0x314>
 800250c:	2a00      	cmp	r2, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x566>
 8002510:	e081      	b.n	8002616 <__aeabi_dsub+0x66a>
 8002512:	003b      	movs	r3, r7
 8002514:	4303      	orrs	r3, r0
 8002516:	d11d      	bne.n	8002554 <__aeabi_dsub+0x5a8>
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	0312      	lsls	r2, r2, #12
 800251e:	e70b      	b.n	8002338 <__aeabi_dsub+0x38c>
 8002520:	08c0      	lsrs	r0, r0, #3
 8002522:	077b      	lsls	r3, r7, #29
 8002524:	465d      	mov	r5, fp
 8002526:	4303      	orrs	r3, r0
 8002528:	08fa      	lsrs	r2, r7, #3
 800252a:	e6d3      	b.n	80022d4 <__aeabi_dsub+0x328>
 800252c:	1ac4      	subs	r4, r0, r3
 800252e:	42a0      	cmp	r0, r4
 8002530:	4180      	sbcs	r0, r0
 8002532:	464b      	mov	r3, r9
 8002534:	4240      	negs	r0, r0
 8002536:	1aff      	subs	r7, r7, r3
 8002538:	1a3b      	subs	r3, r7, r0
 800253a:	469a      	mov	sl, r3
 800253c:	465d      	mov	r5, fp
 800253e:	e597      	b.n	8002070 <__aeabi_dsub+0xc4>
 8002540:	1a1c      	subs	r4, r3, r0
 8002542:	464a      	mov	r2, r9
 8002544:	42a3      	cmp	r3, r4
 8002546:	419b      	sbcs	r3, r3
 8002548:	1bd7      	subs	r7, r2, r7
 800254a:	425b      	negs	r3, r3
 800254c:	1afb      	subs	r3, r7, r3
 800254e:	469a      	mov	sl, r3
 8002550:	2601      	movs	r6, #1
 8002552:	e585      	b.n	8002060 <__aeabi_dsub+0xb4>
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	077b      	lsls	r3, r7, #29
 8002558:	465d      	mov	r5, fp
 800255a:	4303      	orrs	r3, r0
 800255c:	08fa      	lsrs	r2, r7, #3
 800255e:	e6e7      	b.n	8002330 <__aeabi_dsub+0x384>
 8002560:	464a      	mov	r2, r9
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	0752      	lsls	r2, r2, #29
 8002566:	4313      	orrs	r3, r2
 8002568:	464a      	mov	r2, r9
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	e6b5      	b.n	80022da <__aeabi_dsub+0x32e>
 800256e:	08c0      	lsrs	r0, r0, #3
 8002570:	077b      	lsls	r3, r7, #29
 8002572:	4303      	orrs	r3, r0
 8002574:	08fa      	lsrs	r2, r7, #3
 8002576:	e6db      	b.n	8002330 <__aeabi_dsub+0x384>
 8002578:	4649      	mov	r1, r9
 800257a:	4319      	orrs	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	418b      	sbcs	r3, r1
 8002582:	001c      	movs	r4, r3
 8002584:	e653      	b.n	800222e <__aeabi_dsub+0x282>
 8002586:	464d      	mov	r5, r9
 8002588:	3c20      	subs	r4, #32
 800258a:	40e5      	lsrs	r5, r4
 800258c:	2920      	cmp	r1, #32
 800258e:	d005      	beq.n	800259c <__aeabi_dsub+0x5f0>
 8002590:	2440      	movs	r4, #64	; 0x40
 8002592:	1a64      	subs	r4, r4, r1
 8002594:	4649      	mov	r1, r9
 8002596:	40a1      	lsls	r1, r4
 8002598:	430b      	orrs	r3, r1
 800259a:	4698      	mov	r8, r3
 800259c:	4643      	mov	r3, r8
 800259e:	1e5c      	subs	r4, r3, #1
 80025a0:	41a3      	sbcs	r3, r4
 80025a2:	432b      	orrs	r3, r5
 80025a4:	e776      	b.n	8002494 <__aeabi_dsub+0x4e8>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d0e1      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80025aa:	003a      	movs	r2, r7
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	4302      	orrs	r2, r0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x608>
 80025b2:	e6b8      	b.n	8002326 <__aeabi_dsub+0x37a>
 80025b4:	464a      	mov	r2, r9
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	2480      	movs	r4, #128	; 0x80
 80025ba:	4313      	orrs	r3, r2
 80025bc:	464a      	mov	r2, r9
 80025be:	0324      	lsls	r4, r4, #12
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	4222      	tst	r2, r4
 80025c4:	d007      	beq.n	80025d6 <__aeabi_dsub+0x62a>
 80025c6:	08fe      	lsrs	r6, r7, #3
 80025c8:	4226      	tst	r6, r4
 80025ca:	d104      	bne.n	80025d6 <__aeabi_dsub+0x62a>
 80025cc:	465d      	mov	r5, fp
 80025ce:	0032      	movs	r2, r6
 80025d0:	08c3      	lsrs	r3, r0, #3
 80025d2:	077f      	lsls	r7, r7, #29
 80025d4:	433b      	orrs	r3, r7
 80025d6:	0f59      	lsrs	r1, r3, #29
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	430b      	orrs	r3, r1
 80025e0:	e6a6      	b.n	8002330 <__aeabi_dsub+0x384>
 80025e2:	1ac4      	subs	r4, r0, r3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	4180      	sbcs	r0, r0
 80025e8:	464b      	mov	r3, r9
 80025ea:	4240      	negs	r0, r0
 80025ec:	1aff      	subs	r7, r7, r3
 80025ee:	1a3b      	subs	r3, r7, r0
 80025f0:	469a      	mov	sl, r3
 80025f2:	465d      	mov	r5, fp
 80025f4:	2601      	movs	r6, #1
 80025f6:	e533      	b.n	8002060 <__aeabi_dsub+0xb4>
 80025f8:	003b      	movs	r3, r7
 80025fa:	4303      	orrs	r3, r0
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x654>
 80025fe:	e715      	b.n	800242c <__aeabi_dsub+0x480>
 8002600:	08c0      	lsrs	r0, r0, #3
 8002602:	077b      	lsls	r3, r7, #29
 8002604:	465d      	mov	r5, fp
 8002606:	4303      	orrs	r3, r0
 8002608:	08fa      	lsrs	r2, r7, #3
 800260a:	e666      	b.n	80022da <__aeabi_dsub+0x32e>
 800260c:	08c0      	lsrs	r0, r0, #3
 800260e:	077b      	lsls	r3, r7, #29
 8002610:	4303      	orrs	r3, r0
 8002612:	08fa      	lsrs	r2, r7, #3
 8002614:	e65e      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002616:	003a      	movs	r2, r7
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	4302      	orrs	r2, r0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x674>
 800261e:	e682      	b.n	8002326 <__aeabi_dsub+0x37a>
 8002620:	464a      	mov	r2, r9
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	2480      	movs	r4, #128	; 0x80
 8002626:	4313      	orrs	r3, r2
 8002628:	464a      	mov	r2, r9
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4222      	tst	r2, r4
 8002630:	d007      	beq.n	8002642 <__aeabi_dsub+0x696>
 8002632:	08fe      	lsrs	r6, r7, #3
 8002634:	4226      	tst	r6, r4
 8002636:	d104      	bne.n	8002642 <__aeabi_dsub+0x696>
 8002638:	465d      	mov	r5, fp
 800263a:	0032      	movs	r2, r6
 800263c:	08c3      	lsrs	r3, r0, #3
 800263e:	077f      	lsls	r7, r7, #29
 8002640:	433b      	orrs	r3, r7
 8002642:	0f59      	lsrs	r1, r3, #29
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	0749      	lsls	r1, r1, #29
 800264a:	430b      	orrs	r3, r1
 800264c:	e670      	b.n	8002330 <__aeabi_dsub+0x384>
 800264e:	08c0      	lsrs	r0, r0, #3
 8002650:	077b      	lsls	r3, r7, #29
 8002652:	4303      	orrs	r3, r0
 8002654:	08fa      	lsrs	r2, r7, #3
 8002656:	e640      	b.n	80022da <__aeabi_dsub+0x32e>
 8002658:	464c      	mov	r4, r9
 800265a:	3920      	subs	r1, #32
 800265c:	40cc      	lsrs	r4, r1
 800265e:	4661      	mov	r1, ip
 8002660:	2920      	cmp	r1, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x6c6>
 8002664:	4666      	mov	r6, ip
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	1b89      	subs	r1, r1, r6
 800266a:	464e      	mov	r6, r9
 800266c:	408e      	lsls	r6, r1
 800266e:	4333      	orrs	r3, r6
 8002670:	4698      	mov	r8, r3
 8002672:	4643      	mov	r3, r8
 8002674:	1e59      	subs	r1, r3, #1
 8002676:	418b      	sbcs	r3, r1
 8002678:	431c      	orrs	r4, r3
 800267a:	e5d8      	b.n	800222e <__aeabi_dsub+0x282>
 800267c:	181c      	adds	r4, r3, r0
 800267e:	4284      	cmp	r4, r0
 8002680:	4180      	sbcs	r0, r0
 8002682:	444f      	add	r7, r9
 8002684:	46ba      	mov	sl, r7
 8002686:	4240      	negs	r0, r0
 8002688:	4482      	add	sl, r0
 800268a:	e6d9      	b.n	8002440 <__aeabi_dsub+0x494>
 800268c:	4653      	mov	r3, sl
 800268e:	4323      	orrs	r3, r4
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x6e8>
 8002692:	e6cb      	b.n	800242c <__aeabi_dsub+0x480>
 8002694:	e614      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	000007ff 	.word	0x000007ff
 800269c:	ff7fffff 	.word	0xff7fffff
 80026a0:	000007fe 	.word	0x000007fe
 80026a4:	2300      	movs	r3, #0
 80026a6:	4a01      	ldr	r2, [pc, #4]	; (80026ac <__aeabi_dsub+0x700>)
 80026a8:	001c      	movs	r4, r3
 80026aa:	e529      	b.n	8002100 <__aeabi_dsub+0x154>
 80026ac:	000007ff 	.word	0x000007ff

080026b0 <__aeabi_dcmpun>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	0005      	movs	r5, r0
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026b6:	031c      	lsls	r4, r3, #12
 80026b8:	0016      	movs	r6, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	030a      	lsls	r2, r1, #12
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	0b12      	lsrs	r2, r2, #12
 80026c2:	0d49      	lsrs	r1, r1, #21
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	4281      	cmp	r1, r0
 80026ca:	d008      	beq.n	80026de <__aeabi_dcmpun+0x2e>
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026d4:	0020      	movs	r0, r4
 80026d6:	4330      	orrs	r0, r6
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	4198      	sbcs	r0, r3
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	2001      	movs	r0, #1
 80026e0:	432a      	orrs	r2, r5
 80026e2:	d1fb      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026e4:	e7f2      	b.n	80026cc <__aeabi_dcmpun+0x1c>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	000007ff 	.word	0x000007ff

080026ec <__aeabi_d2iz>:
 80026ec:	000a      	movs	r2, r1
 80026ee:	b530      	push	{r4, r5, lr}
 80026f0:	4c13      	ldr	r4, [pc, #76]	; (8002740 <__aeabi_d2iz+0x54>)
 80026f2:	0053      	lsls	r3, r2, #1
 80026f4:	0309      	lsls	r1, r1, #12
 80026f6:	0005      	movs	r5, r0
 80026f8:	0b09      	lsrs	r1, r1, #12
 80026fa:	2000      	movs	r0, #0
 80026fc:	0d5b      	lsrs	r3, r3, #21
 80026fe:	0fd2      	lsrs	r2, r2, #31
 8002700:	42a3      	cmp	r3, r4
 8002702:	dd04      	ble.n	800270e <__aeabi_d2iz+0x22>
 8002704:	480f      	ldr	r0, [pc, #60]	; (8002744 <__aeabi_d2iz+0x58>)
 8002706:	4283      	cmp	r3, r0
 8002708:	dd02      	ble.n	8002710 <__aeabi_d2iz+0x24>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <__aeabi_d2iz+0x5c>)
 800270c:	18d0      	adds	r0, r2, r3
 800270e:	bd30      	pop	{r4, r5, pc}
 8002710:	2080      	movs	r0, #128	; 0x80
 8002712:	0340      	lsls	r0, r0, #13
 8002714:	4301      	orrs	r1, r0
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <__aeabi_d2iz+0x60>)
 8002718:	1ac0      	subs	r0, r0, r3
 800271a:	281f      	cmp	r0, #31
 800271c:	dd08      	ble.n	8002730 <__aeabi_d2iz+0x44>
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <__aeabi_d2iz+0x64>)
 8002720:	1ac3      	subs	r3, r0, r3
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000b      	movs	r3, r1
 8002726:	4258      	negs	r0, r3
 8002728:	2a00      	cmp	r2, #0
 800272a:	d1f0      	bne.n	800270e <__aeabi_d2iz+0x22>
 800272c:	0018      	movs	r0, r3
 800272e:	e7ee      	b.n	800270e <__aeabi_d2iz+0x22>
 8002730:	4c08      	ldr	r4, [pc, #32]	; (8002754 <__aeabi_d2iz+0x68>)
 8002732:	40c5      	lsrs	r5, r0
 8002734:	46a4      	mov	ip, r4
 8002736:	4463      	add	r3, ip
 8002738:	4099      	lsls	r1, r3
 800273a:	000b      	movs	r3, r1
 800273c:	432b      	orrs	r3, r5
 800273e:	e7f2      	b.n	8002726 <__aeabi_d2iz+0x3a>
 8002740:	000003fe 	.word	0x000003fe
 8002744:	0000041d 	.word	0x0000041d
 8002748:	7fffffff 	.word	0x7fffffff
 800274c:	00000433 	.word	0x00000433
 8002750:	00000413 	.word	0x00000413
 8002754:	fffffbed 	.word	0xfffffbed

08002758 <__aeabi_i2d>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2800      	cmp	r0, #0
 800275c:	d016      	beq.n	800278c <__aeabi_i2d+0x34>
 800275e:	17c3      	asrs	r3, r0, #31
 8002760:	18c5      	adds	r5, r0, r3
 8002762:	405d      	eors	r5, r3
 8002764:	0fc4      	lsrs	r4, r0, #31
 8002766:	0028      	movs	r0, r5
 8002768:	f000 f894 	bl	8002894 <__clzsi2>
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <__aeabi_i2d+0x5c>)
 800276e:	1a1b      	subs	r3, r3, r0
 8002770:	280a      	cmp	r0, #10
 8002772:	dc16      	bgt.n	80027a2 <__aeabi_i2d+0x4a>
 8002774:	0002      	movs	r2, r0
 8002776:	002e      	movs	r6, r5
 8002778:	3215      	adds	r2, #21
 800277a:	4096      	lsls	r6, r2
 800277c:	220b      	movs	r2, #11
 800277e:	1a12      	subs	r2, r2, r0
 8002780:	40d5      	lsrs	r5, r2
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	032d      	lsls	r5, r5, #12
 8002786:	0b2d      	lsrs	r5, r5, #12
 8002788:	0d5b      	lsrs	r3, r3, #21
 800278a:	e003      	b.n	8002794 <__aeabi_i2d+0x3c>
 800278c:	2400      	movs	r4, #0
 800278e:	2300      	movs	r3, #0
 8002790:	2500      	movs	r5, #0
 8002792:	2600      	movs	r6, #0
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	432b      	orrs	r3, r5
 8002798:	07e4      	lsls	r4, r4, #31
 800279a:	4323      	orrs	r3, r4
 800279c:	0030      	movs	r0, r6
 800279e:	0019      	movs	r1, r3
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	380b      	subs	r0, #11
 80027a4:	4085      	lsls	r5, r0
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	032d      	lsls	r5, r5, #12
 80027aa:	2600      	movs	r6, #0
 80027ac:	0b2d      	lsrs	r5, r5, #12
 80027ae:	0d5b      	lsrs	r3, r3, #21
 80027b0:	e7f0      	b.n	8002794 <__aeabi_i2d+0x3c>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_ui2d>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	1e04      	subs	r4, r0, #0
 80027bc:	d010      	beq.n	80027e0 <__aeabi_ui2d+0x28>
 80027be:	f000 f869 	bl	8002894 <__clzsi2>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <__aeabi_ui2d+0x48>)
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	280a      	cmp	r0, #10
 80027c8:	dc11      	bgt.n	80027ee <__aeabi_ui2d+0x36>
 80027ca:	220b      	movs	r2, #11
 80027cc:	0021      	movs	r1, r4
 80027ce:	1a12      	subs	r2, r2, r0
 80027d0:	40d1      	lsrs	r1, r2
 80027d2:	3015      	adds	r0, #21
 80027d4:	030a      	lsls	r2, r1, #12
 80027d6:	055b      	lsls	r3, r3, #21
 80027d8:	4084      	lsls	r4, r0
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	e001      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	4313      	orrs	r3, r2
 80027e8:	0020      	movs	r0, r4
 80027ea:	0019      	movs	r1, r3
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	0022      	movs	r2, r4
 80027f0:	380b      	subs	r0, #11
 80027f2:	4082      	lsls	r2, r0
 80027f4:	055b      	lsls	r3, r3, #21
 80027f6:	0312      	lsls	r2, r2, #12
 80027f8:	2400      	movs	r4, #0
 80027fa:	0b12      	lsrs	r2, r2, #12
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	e7f1      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 8002800:	0000041e 	.word	0x0000041e

08002804 <__aeabi_f2d>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	0242      	lsls	r2, r0, #9
 8002808:	0043      	lsls	r3, r0, #1
 800280a:	0fc4      	lsrs	r4, r0, #31
 800280c:	20fe      	movs	r0, #254	; 0xfe
 800280e:	0e1b      	lsrs	r3, r3, #24
 8002810:	1c59      	adds	r1, r3, #1
 8002812:	0a55      	lsrs	r5, r2, #9
 8002814:	4208      	tst	r0, r1
 8002816:	d00c      	beq.n	8002832 <__aeabi_f2d+0x2e>
 8002818:	21e0      	movs	r1, #224	; 0xe0
 800281a:	0089      	lsls	r1, r1, #2
 800281c:	468c      	mov	ip, r1
 800281e:	076d      	lsls	r5, r5, #29
 8002820:	0b12      	lsrs	r2, r2, #12
 8002822:	4463      	add	r3, ip
 8002824:	051b      	lsls	r3, r3, #20
 8002826:	4313      	orrs	r3, r2
 8002828:	07e4      	lsls	r4, r4, #31
 800282a:	4323      	orrs	r3, r4
 800282c:	0028      	movs	r0, r5
 800282e:	0019      	movs	r1, r3
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <__aeabi_f2d+0x5c>
 8002836:	2d00      	cmp	r5, #0
 8002838:	d01b      	beq.n	8002872 <__aeabi_f2d+0x6e>
 800283a:	0028      	movs	r0, r5
 800283c:	f000 f82a 	bl	8002894 <__clzsi2>
 8002840:	280a      	cmp	r0, #10
 8002842:	dc1c      	bgt.n	800287e <__aeabi_f2d+0x7a>
 8002844:	230b      	movs	r3, #11
 8002846:	002a      	movs	r2, r5
 8002848:	1a1b      	subs	r3, r3, r0
 800284a:	40da      	lsrs	r2, r3
 800284c:	0003      	movs	r3, r0
 800284e:	3315      	adds	r3, #21
 8002850:	409d      	lsls	r5, r3
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <__aeabi_f2d+0x88>)
 8002854:	0312      	lsls	r2, r2, #12
 8002856:	1a1b      	subs	r3, r3, r0
 8002858:	055b      	lsls	r3, r3, #21
 800285a:	0b12      	lsrs	r2, r2, #12
 800285c:	0d5b      	lsrs	r3, r3, #21
 800285e:	e7e1      	b.n	8002824 <__aeabi_f2d+0x20>
 8002860:	2d00      	cmp	r5, #0
 8002862:	d009      	beq.n	8002878 <__aeabi_f2d+0x74>
 8002864:	0b13      	lsrs	r3, r2, #12
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	0312      	lsls	r2, r2, #12
 800286a:	431a      	orrs	r2, r3
 800286c:	076d      	lsls	r5, r5, #29
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <__aeabi_f2d+0x8c>)
 8002870:	e7d8      	b.n	8002824 <__aeabi_f2d+0x20>
 8002872:	2300      	movs	r3, #0
 8002874:	2200      	movs	r2, #0
 8002876:	e7d5      	b.n	8002824 <__aeabi_f2d+0x20>
 8002878:	2200      	movs	r2, #0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <__aeabi_f2d+0x8c>)
 800287c:	e7d2      	b.n	8002824 <__aeabi_f2d+0x20>
 800287e:	0003      	movs	r3, r0
 8002880:	002a      	movs	r2, r5
 8002882:	3b0b      	subs	r3, #11
 8002884:	409a      	lsls	r2, r3
 8002886:	2500      	movs	r5, #0
 8002888:	e7e3      	b.n	8002852 <__aeabi_f2d+0x4e>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	00000389 	.word	0x00000389
 8002890:	000007ff 	.word	0x000007ff

08002894 <__clzsi2>:
 8002894:	211c      	movs	r1, #28
 8002896:	2301      	movs	r3, #1
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	4298      	cmp	r0, r3
 800289c:	d301      	bcc.n	80028a2 <__clzsi2+0xe>
 800289e:	0c00      	lsrs	r0, r0, #16
 80028a0:	3910      	subs	r1, #16
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	4298      	cmp	r0, r3
 80028a6:	d301      	bcc.n	80028ac <__clzsi2+0x18>
 80028a8:	0a00      	lsrs	r0, r0, #8
 80028aa:	3908      	subs	r1, #8
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	4298      	cmp	r0, r3
 80028b0:	d301      	bcc.n	80028b6 <__clzsi2+0x22>
 80028b2:	0900      	lsrs	r0, r0, #4
 80028b4:	3904      	subs	r1, #4
 80028b6:	a202      	add	r2, pc, #8	; (adr r2, 80028c0 <__clzsi2+0x2c>)
 80028b8:	5c10      	ldrb	r0, [r2, r0]
 80028ba:	1840      	adds	r0, r0, r1
 80028bc:	4770      	bx	lr
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	02020304 	.word	0x02020304
 80028c4:	01010101 	.word	0x01010101
	...

080028d0 <__clzdi2>:
 80028d0:	b510      	push	{r4, lr}
 80028d2:	2900      	cmp	r1, #0
 80028d4:	d103      	bne.n	80028de <__clzdi2+0xe>
 80028d6:	f7ff ffdd 	bl	8002894 <__clzsi2>
 80028da:	3020      	adds	r0, #32
 80028dc:	e002      	b.n	80028e4 <__clzdi2+0x14>
 80028de:	0008      	movs	r0, r1
 80028e0:	f7ff ffd8 	bl	8002894 <__clzsi2>
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)

080028e8 <DistanceSensor_Init>:
#define MIN_DISTANCE 10

extern speaker Speaker;

void DistanceSensor_Init(distancesensor* sensor, TIM_HandleTypeDef* timer, feature_id ID, GPIO_TypeDef* icGPIOPort, uint16_t icGPIOPin, GPIO_TypeDef* statusGPIOPort, uint16_t statusGPIOPin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	701a      	strb	r2, [r3, #0]
	sensor->timer = timer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	601a      	str	r2, [r3, #0]

	sensor->timeDifference = 0;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
	sensor->countAtMaxDistance = 0;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	731a      	strb	r2, [r3, #12]

	sensor->ID = ID;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1dfa      	adds	r2, r7, #7
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	735a      	strb	r2, [r3, #13]

	sensor->icGPIOPort = icGPIOPort;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	611a      	str	r2, [r3, #16]
	sensor->icGPIOPin = icGPIOPin;
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	2318      	movs	r3, #24
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	8293      	strh	r3, [r2, #20]

	sensor->statusGPIOPort = statusGPIOPort;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	619a      	str	r2, [r3, #24]
	sensor->statusGPIOPin = statusGPIOPin;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	18ba      	adds	r2, r7, r2
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	839a      	strh	r2, [r3, #28]

	HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6998      	ldr	r0, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8b9b      	ldrh	r3, [r3, #28]
 800293a:	2201      	movs	r2, #1
 800293c:	0019      	movs	r1, r3
 800293e:	f001 ff80 	bl	8004842 <HAL_GPIO_WritePin>


}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}

0800294a <DistanceSensor_Start>:

void DistanceSensor_Start(distancesensor* sensor)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2104      	movs	r1, #4
 8002958:	0018      	movs	r0, r3
 800295a:	f004 f9e7 	bl	8006d2c <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(sensor->timer, TIM_CHANNEL_1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2100      	movs	r1, #0
 8002964:	0018      	movs	r0, r3
 8002966:	f004 faf3 	bl	8006f50 <HAL_TIM_IC_Start_IT>
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8a9b      	ldrh	r3, [r3, #20]
 8002984:	0019      	movs	r1, r3
 8002986:	0010      	movs	r0, r2
 8002988:	f001 ff3e 	bl	8004808 <HAL_GPIO_ReadPin>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d010      	beq.n	80029b2 <DistanceSensor_InputCaptureInterrupt+0x3e>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	0018      	movs	r0, r3
 8002998:	f004 fec8 	bl	800772c <HAL_TIM_ReadCapturedValue>
 800299c:	0003      	movs	r3, r0
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2104      	movs	r1, #4
 80029aa:	0018      	movs	r0, r3
 80029ac:	f004 fa4a 	bl	8006e44 <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 80029b0:	e034      	b.n	8002a1c <DistanceSensor_InputCaptureInterrupt+0xa8>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2100      	movs	r1, #0
 80029b8:	0018      	movs	r0, r3
 80029ba:	f004 feb7 	bl	800772c <HAL_TIM_ReadCapturedValue>
 80029be:	0003      	movs	r3, r0
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	88da      	ldrh	r2, [r3, #6]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	889b      	ldrh	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d909      	bls.n	80029e6 <DistanceSensor_InputCaptureInterrupt+0x72>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	88db      	ldrh	r3, [r3, #6]
 80029d6:	001a      	movs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	889b      	ldrh	r3, [r3, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	001a      	movs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	e00b      	b.n	80029fe <DistanceSensor_InputCaptureInterrupt+0x8a>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	889b      	ldrh	r3, [r3, #4]
 80029ea:	001a      	movs	r2, r3
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	88d2      	ldrh	r2, [r2, #6]
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	001a      	movs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2104      	movs	r1, #4
 8002a04:	0018      	movs	r0, r3
 8002a06:	f004 f991 	bl	8006d2c <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <DistanceSensor_InputCaptureInterrupt+0xb0>)
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
			DistanceSensor_Handle(sensor);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f81c 	bl	8002a54 <DistanceSensor_Handle>
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	0000ffff 	.word	0x0000ffff

08002a28 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fe f855 	bl	8000ae4 <__aeabi_ui2f>
 8002a3a:	1c03      	adds	r3, r0, #0
 8002a3c:	4904      	ldr	r1, [pc, #16]	; (8002a50 <DistanceSensor_GetDistance+0x28>)
 8002a3e:	1c18      	adds	r0, r3, #0
 8002a40:	f7fd fe86 	bl	8000750 <__aeabi_fdiv>
 8002a44:	1c03      	adds	r3, r0, #0
}
 8002a46:	1c18      	adds	r0, r3, #0
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	42680000 	.word	0x42680000

08002a54 <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ffe2 	bl	8002a28 <DistanceSensor_GetDistance>
 8002a64:	1c03      	adds	r3, r0, #0
 8002a66:	60fb      	str	r3, [r7, #12]

	if (distance > MIN_DISTANCE)
 8002a68:	4921      	ldr	r1, [pc, #132]	; (8002af0 <DistanceSensor_Handle+0x9c>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7fd fd42 	bl	80004f4 <__aeabi_fcmpgt>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d017      	beq.n	8002aa4 <DistanceSensor_Handle+0x50>
	{
		sensor->countAtMaxDistance = 0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6998      	ldr	r0, [r3, #24]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8b9b      	ldrh	r3, [r3, #28]
 8002a82:	2201      	movs	r2, #1
 8002a84:	0019      	movs	r1, r3
 8002a86:	f001 fedc 	bl	8004842 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_SET);

		if (Speaker.hasFault)
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <DistanceSensor_Handle+0xa0>)
 8002a8c:	7d1b      	ldrb	r3, [r3, #20]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d029      	beq.n	8002ae8 <DistanceSensor_Handle+0x94>
			Speaker_Stop(&Speaker, sensor->ID);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7b5a      	ldrb	r2, [r3, #13]
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <DistanceSensor_Handle+0xa0>)
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fe13 	bl	80036c8 <Speaker_Stop>
	else
	{
		sensor->countAtMaxDistance++;
	}

}
 8002aa2:	e021      	b.n	8002ae8 <DistanceSensor_Handle+0x94>
	else if (sensor->countAtMaxDistance > 5)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7b1b      	ldrb	r3, [r3, #12]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d917      	bls.n	8002adc <DistanceSensor_Handle+0x88>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6998      	ldr	r0, [r3, #24]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8b9b      	ldrh	r3, [r3, #28]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	f001 fec3 	bl	8004842 <HAL_GPIO_WritePin>
		if (!Speaker.hasFault)
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <DistanceSensor_Handle+0xa0>)
 8002abe:	7d1b      	ldrb	r3, [r3, #20]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4053      	eors	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <DistanceSensor_Handle+0x94>
			Speaker_Start(&Speaker, sensor->ID);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7b5a      	ldrb	r2, [r3, #13]
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <DistanceSensor_Handle+0xa0>)
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fdc2 	bl	800365e <Speaker_Start>
}
 8002ada:	e005      	b.n	8002ae8 <DistanceSensor_Handle+0x94>
		sensor->countAtMaxDistance++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7b1b      	ldrb	r3, [r3, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	731a      	strb	r2, [r3, #12]
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	41200000 	.word	0x41200000
 8002af4:	20000478 	.word	0x20000478

08002af8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d104      	bne.n	8002b14 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ff31 	bl	8002974 <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM22) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 8002b12:	e008      	b.n	8002b26 <HAL_TIM_IC_CaptureCallback+0x2e>
	else if (htim->Instance == TIM22) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d103      	bne.n	8002b26 <HAL_TIM_IC_CaptureCallback+0x2e>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x44>)
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff ff27 	bl	8002974 <DistanceSensor_InputCaptureInterrupt>
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b002      	add	sp, #8
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	40010800 	.word	0x40010800
 8002b34:	20000438 	.word	0x20000438
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	20000458 	.word	0x20000458

08002b40 <HAL_TIM_PeriodElapsedCallback>:
    }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2 && Speaker.beepLengthOn != 0)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <HAL_TIM_PeriodElapsedCallback+0x26>
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b56:	891b      	ldrh	r3, [r3, #8]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Speaker_BeepInterrupt(&Speaker);
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fde3 	bl	800372c <Speaker_BeepInterrupt>
	}

}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000478 	.word	0x20000478

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	46c6      	mov	lr, r8
 8002b78:	b500      	push	{lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b7e:	f001 f9e1 	bl	8003f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b82:	f000 f895 	bl	8002cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b86:	f000 fba3 	bl	80032d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b8a:	f000 fb83 	bl	8003294 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b8e:	f000 f90b 	bl	8002da8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002b92:	f000 f949 	bl	8002e28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b96:	f000 fb4d 	bl	8003234 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002b9a:	f000 f97d 	bl	8002e98 <MX_TIM2_Init>
  MX_TIM22_Init();
 8002b9e:	f000 faa1 	bl	80030e4 <MX_TIM22_Init>
  MX_TIM21_Init();
 8002ba2:	f000 f9f7 	bl	8002f94 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  DistanceSensor_Init(&Front, &htim21, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
 8002ba6:	23a0      	movs	r3, #160	; 0xa0
 8002ba8:	05da      	lsls	r2, r3, #23
 8002baa:	4936      	ldr	r1, [pc, #216]	; (8002c84 <main+0x110>)
 8002bac:	4836      	ldr	r0, [pc, #216]	; (8002c88 <main+0x114>)
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	23a0      	movs	r3, #160	; 0xa0
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2304      	movs	r3, #4
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f7ff fe91 	bl	80028e8 <DistanceSensor_Init>
  DistanceSensor_Init(&Back, &htim22, DISTANCE_SENSOR_BACK_ID, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_BACK_STATUS_GPIO_Port, DISTANCE_SENSOR_BACK_STATUS_Pin);
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <main+0x118>)
 8002bc8:	4931      	ldr	r1, [pc, #196]	; (8002c90 <main+0x11c>)
 8002bca:	4832      	ldr	r0, [pc, #200]	; (8002c94 <main+0x120>)
 8002bcc:	2308      	movs	r3, #8
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <main+0x118>)
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0013      	movs	r3, r2
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f7ff fe84 	bl	80028e8 <DistanceSensor_Init>
  RFID_Init(&RFID_Module);
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <main+0x124>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fcdc 	bl	80035a0 <RFID_Init>
  Speaker_Init(&Speaker, &RFID_Module, &htim2);
 8002be8:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <main+0x128>)
 8002bea:	492b      	ldr	r1, [pc, #172]	; (8002c98 <main+0x124>)
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <main+0x12c>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fcfc 	bl	80035ec <Speaker_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //DistanceSensor_Start(&Front);
  DistanceSensor_Start(&Front);
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <main+0x114>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fea7 	bl	800294a <DistanceSensor_Start>
  //DistanceSensor_Start(&Back);
  RFID_Module.botEnabled = true;
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <main+0x124>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	719a      	strb	r2, [r3, #6]
	  HAL_Delay(50);
	  */
	  //sprintf(Data, "%s\r\n", str);
	  //HAL_UART_Transmit(&huart1, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
	  //HAL_Delay(100);
	  float frontd = DistanceSensor_GetDistance(&Front);
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <main+0x114>)
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ff0f 	bl	8002a28 <DistanceSensor_GetDistance>
 8002c0a:	1c03      	adds	r3, r0, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
	  float backd = DistanceSensor_GetDistance(&Back);
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <main+0x120>)
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff09 	bl	8002a28 <DistanceSensor_GetDistance>
 8002c16:	1c03      	adds	r3, r0, #0
 8002c18:	60bb      	str	r3, [r7, #8]

	  sprintf(Data, "%f %f %u %u %u\r\n", frontd, backd, Speaker.featureFault[0], Speaker.featureFault[1], Speaker.featureFault[2]);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fdf2 	bl	8002804 <__aeabi_f2d>
 8002c20:	0004      	movs	r4, r0
 8002c22:	000d      	movs	r5, r1
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	f7ff fded 	bl	8002804 <__aeabi_f2d>
 8002c2a:	6038      	str	r0, [r7, #0]
 8002c2c:	6079      	str	r1, [r7, #4]
 8002c2e:	491c      	ldr	r1, [pc, #112]	; (8002ca0 <main+0x12c>)
 8002c30:	7c09      	ldrb	r1, [r1, #16]
 8002c32:	b2c9      	uxtb	r1, r1
 8002c34:	000e      	movs	r6, r1
 8002c36:	491a      	ldr	r1, [pc, #104]	; (8002ca0 <main+0x12c>)
 8002c38:	7c49      	ldrb	r1, [r1, #17]
 8002c3a:	b2c9      	uxtb	r1, r1
 8002c3c:	468c      	mov	ip, r1
 8002c3e:	4918      	ldr	r1, [pc, #96]	; (8002ca0 <main+0x12c>)
 8002c40:	7c89      	ldrb	r1, [r1, #18]
 8002c42:	b2c9      	uxtb	r1, r1
 8002c44:	4688      	mov	r8, r1
 8002c46:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <main+0x130>)
 8002c48:	4817      	ldr	r0, [pc, #92]	; (8002ca8 <main+0x134>)
 8002c4a:	4643      	mov	r3, r8
 8002c4c:	9304      	str	r3, [sp, #16]
 8002c4e:	4663      	mov	r3, ip
 8002c50:	9303      	str	r3, [sp, #12]
 8002c52:	9602      	str	r6, [sp, #8]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	9200      	str	r2, [sp, #0]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	0022      	movs	r2, r4
 8002c5e:	002b      	movs	r3, r5
 8002c60:	f006 fc20 	bl	80094a4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <main+0x134>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fd fa4e 	bl	8000108 <strlen>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	425b      	negs	r3, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <main+0x134>)
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <main+0x138>)
 8002c78:	f005 f984 	bl	8007f84 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	f001 f9d1 	bl	8004024 <HAL_Delay>
  {
 8002c82:	e7be      	b.n	8002c02 <main+0x8e>
 8002c84:	20000324 	.word	0x20000324
 8002c88:	20000438 	.word	0x20000438
 8002c8c:	50000400 	.word	0x50000400
 8002c90:	20000364 	.word	0x20000364
 8002c94:	20000458 	.word	0x20000458
 8002c98:	2000042c 	.word	0x2000042c
 8002c9c:	200002e4 	.word	0x200002e4
 8002ca0:	20000478 	.word	0x20000478
 8002ca4:	0800b8b0 	.word	0x0800b8b0
 8002ca8:	20000490 	.word	0x20000490
 8002cac:	200003a4 	.word	0x200003a4

08002cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b09b      	sub	sp, #108	; 0x6c
 8002cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb6:	2434      	movs	r4, #52	; 0x34
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	0018      	movs	r0, r3
 8002cbc:	2334      	movs	r3, #52	; 0x34
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f006 fc5b 	bl	800957c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	0018      	movs	r0, r3
 8002ccc:	2314      	movs	r3, #20
 8002cce:	001a      	movs	r2, r3
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f006 fc53 	bl	800957c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	0018      	movs	r0, r3
 8002cda:	231c      	movs	r3, #28
 8002cdc:	001a      	movs	r2, r3
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f006 fc4c 	bl	800957c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <SystemClock_Config+0xf0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <SystemClock_Config+0xf4>)
 8002cea:	401a      	ands	r2, r3
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <SystemClock_Config+0xf0>)
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	0109      	lsls	r1, r1, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf6:	0021      	movs	r1, r4
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2201      	movs	r2, #1
 8002d02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2210      	movs	r2, #16
 8002d08:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2200      	movs	r2, #0
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	02d2      	lsls	r2, r2, #11
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	03d2      	lsls	r2, r2, #15
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f002 fcd1 	bl	80056d0 <HAL_RCC_OscConfig>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d001      	beq.n	8002d36 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002d32:	f000 fb55 	bl	80033e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d36:	2120      	movs	r1, #32
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2203      	movs	r2, #3
 8002d42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2101      	movs	r1, #1
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f003 f822 	bl	8005da4 <HAL_RCC_ClockConfig>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002d64:	f000 fb3c 	bl	80033e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2209      	movs	r2, #9
 8002d6c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2200      	movs	r2, #0
 8002d78:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f003 fab9 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002d86:	f000 fb2b 	bl	80033e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	045b      	lsls	r3, r3, #17
 8002d8e:	2200      	movs	r2, #0
 8002d90:	0019      	movs	r1, r3
 8002d92:	2000      	movs	r0, #0
 8002d94:	f003 f94e 	bl	8006034 <HAL_RCC_MCOConfig>
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b01b      	add	sp, #108	; 0x6c
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	40007000 	.word	0x40007000
 8002da4:	ffffe7ff 	.word	0xffffe7ff

08002da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <MX_I2C1_Init+0x78>)
 8002db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002db4:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <MX_I2C1_Init+0x7c>)
 8002db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dba:	2220      	movs	r2, #32
 8002dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002de4:	0018      	movs	r0, r3
 8002de6:	f001 fd49 	bl	800487c <HAL_I2C_Init>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dee:	f000 faf7 	bl	80033e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	0018      	movs	r0, r3
 8002df8:	f002 fbd2 	bl	80055a0 <HAL_I2CEx_ConfigAnalogFilter>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e00:	f000 faee 	bl	80033e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <MX_I2C1_Init+0x74>)
 8002e06:	2100      	movs	r1, #0
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f002 fc15 	bl	8005638 <HAL_I2CEx_ConfigDigitalFilter>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e12:	f000 fae5 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200001f0 	.word	0x200001f0
 8002e20:	40005400 	.word	0x40005400
 8002e24:	00300f38 	.word	0x00300f38

08002e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <MX_SPI1_Init+0x6c>)
 8002e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e34:	2282      	movs	r2, #130	; 0x82
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e5c:	2238      	movs	r2, #56	; 0x38
 8002e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f003 fb74 	bl	8006568 <HAL_SPI_Init>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e84:	f000 faac 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	2000028c 	.word	0x2000028c
 8002e94:	40013000 	.word	0x40013000

08002e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	2318      	movs	r3, #24
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f006 fb67 	bl	800957c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eae:	2310      	movs	r3, #16
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f006 fb5f 	bl	800957c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ebe:	003b      	movs	r3, r7
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f006 fb58 	bl	800957c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	05d2      	lsls	r2, r2, #23
 8002ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002ed6:	221f      	movs	r2, #31
 8002ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002ee2:	22f4      	movs	r2, #244	; 0xf4
 8002ee4:	0052      	lsls	r2, r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f003 fe6a 	bl	8006bd0 <HAL_TIM_Base_Init>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002f00:	f000 fa6e 	bl	80033e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f04:	2118      	movs	r1, #24
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0152      	lsls	r2, r2, #5
 8002f0c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f0e:	187a      	adds	r2, r7, r1
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f004 fb35 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f1e:	f000 fa5f 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002f24:	0018      	movs	r0, r3
 8002f26:	f003 feb9 	bl	8006c9c <HAL_TIM_PWM_Init>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f2e:	f000 fa57 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2110      	movs	r1, #16
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f40:	187a      	adds	r2, r7, r1
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f004 ff70 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002f50:	f000 fa46 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f54:	003b      	movs	r3, r7
 8002f56:	2260      	movs	r2, #96	; 0x60
 8002f58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 244;
 8002f5a:	003b      	movs	r3, r7
 8002f5c:	22f4      	movs	r2, #244	; 0xf4
 8002f5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f60:	003b      	movs	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f66:	003b      	movs	r3, r7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6c:	0039      	movs	r1, r7
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f004 fa40 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002f7c:	f000 fa30 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <MX_TIM2_Init+0xf8>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fdba 	bl	8003afc <HAL_TIM_MspPostInit>

}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b00a      	add	sp, #40	; 0x28
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200002e4 	.word	0x200002e4

08002f94 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08e      	sub	sp, #56	; 0x38
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9a:	2328      	movs	r3, #40	; 0x28
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f006 fae9 	bl	800957c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002faa:	2320      	movs	r3, #32
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f006 fae1 	bl	800957c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fba:	2310      	movs	r3, #16
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	f006 fad9 	bl	800957c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fca:	003b      	movs	r3, r7
 8002fcc:	0018      	movs	r0, r3
 8002fce:	2310      	movs	r3, #16
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f006 fad2 	bl	800957c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <MX_TIM21_Init+0x148>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <MX_TIM21_Init+0x14c>)
 8002fee:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff0:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002ffc:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <MX_TIM21_Init+0x144>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f003 fde6 	bl	8006bd0 <HAL_TIM_Base_Init>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8003008:	f000 f9ea 	bl	80033e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300c:	2128      	movs	r1, #40	; 0x28
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	0152      	lsls	r2, r2, #5
 8003014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003016:	187a      	adds	r2, r7, r1
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <MX_TIM21_Init+0x144>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f004 fab1 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8003026:	f000 f9db 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <MX_TIM21_Init+0x144>)
 800302c:	0018      	movs	r0, r3
 800302e:	f003 ff47 	bl	8006ec0 <HAL_TIM_IC_Init>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d001      	beq.n	800303a <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8003036:	f000 f9d3 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <MX_TIM21_Init+0x144>)
 800303c:	0018      	movs	r0, r3
 800303e:	f003 fe2d 	bl	8006c9c <HAL_TIM_PWM_Init>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <MX_TIM21_Init+0xb6>
  {
    Error_Handler();
 8003046:	f000 f9cb 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2120      	movs	r1, #32
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003058:	187a      	adds	r2, r7, r1
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <MX_TIM21_Init+0x144>)
 800305c:	0011      	movs	r1, r2
 800305e:	0018      	movs	r0, r3
 8003060:	f004 fee4 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <MX_TIM21_Init+0xd8>
  {
    Error_Handler();
 8003068:	f000 f9ba 	bl	80033e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800306c:	2110      	movs	r1, #16
 800306e:	187b      	adds	r3, r7, r1
 8003070:	220a      	movs	r2, #10
 8003072:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2201      	movs	r2, #1
 8003078:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800307a:	187b      	adds	r3, r7, r1
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003080:	187b      	adds	r3, r7, r1
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003086:	1879      	adds	r1, r7, r1
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <MX_TIM21_Init+0x144>)
 800308a:	2200      	movs	r2, #0
 800308c:	0018      	movs	r0, r3
 800308e:	f004 f90f 	bl	80072b0 <HAL_TIM_IC_ConfigChannel>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <MX_TIM21_Init+0x106>
  {
    Error_Handler();
 8003096:	f000 f9a3 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800309a:	003b      	movs	r3, r7
 800309c:	2260      	movs	r2, #96	; 0x60
 800309e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80030a0:	003b      	movs	r3, r7
 80030a2:	220a      	movs	r2, #10
 80030a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a6:	003b      	movs	r3, r7
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ac:	003b      	movs	r3, r7
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b2:	0039      	movs	r1, r7
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <MX_TIM21_Init+0x144>)
 80030b6:	2204      	movs	r2, #4
 80030b8:	0018      	movs	r0, r3
 80030ba:	f004 f99d 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM21_Init+0x132>
  {
    Error_Handler();
 80030c2:	f000 f98d 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <MX_TIM21_Init+0x144>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 fd17 	bl	8003afc <HAL_TIM_MspPostInit>

}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b00e      	add	sp, #56	; 0x38
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	20000324 	.word	0x20000324
 80030dc:	40010800 	.word	0x40010800
 80030e0:	0000ffff 	.word	0x0000ffff

080030e4 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	2328      	movs	r3, #40	; 0x28
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	0018      	movs	r0, r3
 80030f0:	2310      	movs	r3, #16
 80030f2:	001a      	movs	r2, r3
 80030f4:	2100      	movs	r1, #0
 80030f6:	f006 fa41 	bl	800957c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fa:	2320      	movs	r3, #32
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	0018      	movs	r0, r3
 8003100:	2308      	movs	r3, #8
 8003102:	001a      	movs	r2, r3
 8003104:	2100      	movs	r1, #0
 8003106:	f006 fa39 	bl	800957c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800310a:	2310      	movs	r3, #16
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	0018      	movs	r0, r3
 8003110:	2310      	movs	r3, #16
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	f006 fa31 	bl	800957c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800311a:	003b      	movs	r3, r7
 800311c:	0018      	movs	r0, r3
 800311e:	2310      	movs	r3, #16
 8003120:	001a      	movs	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f006 fa2a 	bl	800957c <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003128:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <MX_TIM22_Init+0x144>)
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <MX_TIM22_Init+0x148>)
 800312c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <MX_TIM22_Init+0x144>)
 8003130:	221f      	movs	r2, #31
 8003132:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003134:	4b3c      	ldr	r3, [pc, #240]	; (8003228 <MX_TIM22_Init+0x144>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <MX_TIM22_Init+0x144>)
 800313c:	4a3c      	ldr	r2, [pc, #240]	; (8003230 <MX_TIM22_Init+0x14c>)
 800313e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003140:	4b39      	ldr	r3, [pc, #228]	; (8003228 <MX_TIM22_Init+0x144>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003146:	4b38      	ldr	r3, [pc, #224]	; (8003228 <MX_TIM22_Init+0x144>)
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <MX_TIM22_Init+0x144>)
 800314e:	0018      	movs	r0, r3
 8003150:	f003 fd3e 	bl	8006bd0 <HAL_TIM_Base_Init>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d001      	beq.n	800315c <MX_TIM22_Init+0x78>
  {
    Error_Handler();
 8003158:	f000 f942 	bl	80033e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800315c:	2128      	movs	r1, #40	; 0x28
 800315e:	187b      	adds	r3, r7, r1
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	0152      	lsls	r2, r2, #5
 8003164:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003166:	187a      	adds	r2, r7, r1
 8003168:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <MX_TIM22_Init+0x144>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f004 fa09 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d001      	beq.n	800317a <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8003176:	f000 f933 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim22) != HAL_OK)
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <MX_TIM22_Init+0x144>)
 800317c:	0018      	movs	r0, r3
 800317e:	f003 fe9f 	bl	8006ec0 <HAL_TIM_IC_Init>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d001      	beq.n	800318a <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8003186:	f000 f92b 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <MX_TIM22_Init+0x144>)
 800318c:	0018      	movs	r0, r3
 800318e:	f003 fd85 	bl	8006c9c <HAL_TIM_PWM_Init>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 8003196:	f000 f923 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319a:	2120      	movs	r1, #32
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80031a8:	187a      	adds	r2, r7, r1
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <MX_TIM22_Init+0x144>)
 80031ac:	0011      	movs	r1, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f004 fe3c 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM22_Init+0xd8>
  {
    Error_Handler();
 80031b8:	f000 f912 	bl	80033e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80031bc:	2110      	movs	r1, #16
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	220a      	movs	r2, #10
 80031c2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2201      	movs	r2, #1
 80031c8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim22, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031d6:	1879      	adds	r1, r7, r1
 80031d8:	4b13      	ldr	r3, [pc, #76]	; (8003228 <MX_TIM22_Init+0x144>)
 80031da:	2200      	movs	r2, #0
 80031dc:	0018      	movs	r0, r3
 80031de:	f004 f867 	bl	80072b0 <HAL_TIM_IC_ConfigChannel>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM22_Init+0x106>
  {
    Error_Handler();
 80031e6:	f000 f8fb 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ea:	003b      	movs	r3, r7
 80031ec:	2260      	movs	r2, #96	; 0x60
 80031ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80031f0:	003b      	movs	r3, r7
 80031f2:	220a      	movs	r2, #10
 80031f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	003b      	movs	r3, r7
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fc:	003b      	movs	r3, r7
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003202:	0039      	movs	r1, r7
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <MX_TIM22_Init+0x144>)
 8003206:	2204      	movs	r2, #4
 8003208:	0018      	movs	r0, r3
 800320a:	f004 f8f5 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM22_Init+0x132>
  {
    Error_Handler();
 8003212:	f000 f8e5 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <MX_TIM22_Init+0x144>)
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fc6f 	bl	8003afc <HAL_TIM_MspPostInit>

}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b00e      	add	sp, #56	; 0x38
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000364 	.word	0x20000364
 800322c:	40011400 	.word	0x40011400
 8003230:	0000ffff 	.word	0x0000ffff

08003234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <MX_USART1_UART_Init+0x58>)
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <MX_USART1_UART_Init+0x5c>)
 800323c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003240:	22e1      	movs	r2, #225	; 0xe1
 8003242:	0252      	lsls	r2, r2, #9
 8003244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <MX_USART1_UART_Init+0x58>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <MX_USART1_UART_Init+0x58>)
 800325a:	220c      	movs	r2, #12
 800325c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <MX_USART1_UART_Init+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003272:	2200      	movs	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <MX_USART1_UART_Init+0x58>)
 8003278:	0018      	movs	r0, r3
 800327a:	f004 fe2f 	bl	8007edc <HAL_UART_Init>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003282:	f000 f8ad 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200003a4 	.word	0x200003a4
 8003290:	40013800 	.word	0x40013800

08003294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_DMA_Init+0x38>)
 800329c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_DMA_Init+0x38>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_DMA_Init+0x38>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	200a      	movs	r0, #10
 80032b8:	f000 ff84 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032bc:	200a      	movs	r0, #10
 80032be:	f000 ff96 	bl	80041ee <HAL_NVIC_EnableIRQ>

}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	40021000 	.word	0x40021000

080032d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d6:	240c      	movs	r4, #12
 80032d8:	193b      	adds	r3, r7, r4
 80032da:	0018      	movs	r0, r3
 80032dc:	2314      	movs	r3, #20
 80032de:	001a      	movs	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f006 f94b 	bl	800957c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <MX_GPIO_Init+0x100>)
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <MX_GPIO_Init+0x100>)
 80032ec:	2104      	movs	r1, #4
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <MX_GPIO_Init+0x100>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	2204      	movs	r2, #4
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <MX_GPIO_Init+0x100>)
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <MX_GPIO_Init+0x100>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <MX_GPIO_Init+0x100>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <MX_GPIO_Init+0x100>)
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <MX_GPIO_Init+0x100>)
 800331c:	2102      	movs	r1, #2
 800331e:	430a      	orrs	r2, r1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
 8003322:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <MX_GPIO_Init+0x100>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	01db      	lsls	r3, r3, #7
 8003332:	4828      	ldr	r0, [pc, #160]	; (80033d4 <MX_GPIO_Init+0x104>)
 8003334:	2201      	movs	r2, #1
 8003336:	0019      	movs	r1, r3
 8003338:	f001 fa83 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_RESET);
 800333c:	4926      	ldr	r1, [pc, #152]	; (80033d8 <MX_GPIO_Init+0x108>)
 800333e:	23a0      	movs	r3, #160	; 0xa0
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	2200      	movs	r2, #0
 8003344:	0018      	movs	r0, r3
 8003346:	f001 fa7c 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <MX_GPIO_Init+0x10c>)
 800334c:	2200      	movs	r2, #0
 800334e:	2109      	movs	r1, #9
 8003350:	0018      	movs	r0, r3
 8003352:	f001 fa76 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RFID_STATUS_Pin */
  GPIO_InitStruct.Pin = RFID_STATUS_Pin;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	01d2      	lsls	r2, r2, #7
 800335c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2201      	movs	r2, #1
 8003362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	193b      	adds	r3, r7, r4
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RFID_STATUS_GPIO_Port, &GPIO_InitStruct);
 8003370:	193b      	adds	r3, r7, r4
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <MX_GPIO_Init+0x104>)
 8003374:	0019      	movs	r1, r3
 8003376:	0010      	movs	r0, r2
 8003378:	f001 f8d0 	bl	800451c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin DISTANCE_SENSOR_FRONT_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin;
 800337c:	193b      	adds	r3, r7, r4
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <MX_GPIO_Init+0x108>)
 8003380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003382:	193b      	adds	r3, r7, r4
 8003384:	2201      	movs	r2, #1
 8003386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	193b      	adds	r3, r7, r4
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2200      	movs	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	193a      	adds	r2, r7, r4
 8003396:	23a0      	movs	r3, #160	; 0xa0
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f001 f8bd 	bl	800451c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 80033a2:	0021      	movs	r1, r4
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2209      	movs	r2, #9
 80033a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	2201      	movs	r2, #1
 80033ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	2201      	movs	r2, #1
 80033b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	4a07      	ldr	r2, [pc, #28]	; (80033dc <MX_GPIO_Init+0x10c>)
 80033c0:	0019      	movs	r1, r3
 80033c2:	0010      	movs	r0, r2
 80033c4:	f001 f8aa 	bl	800451c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b009      	add	sp, #36	; 0x24
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	50000800 	.word	0x50000800
 80033d8:	00008010 	.word	0x00008010
 80033dc:	50000400 	.word	0x50000400

080033e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e4:	b672      	cpsid	i
}
 80033e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <Error_Handler+0x8>
	...

080033ec <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	0002      	movs	r2, r0
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80033f8:	240f      	movs	r4, #15
 80033fa:	193a      	adds	r2, r7, r4
 80033fc:	1df9      	adds	r1, r7, #7
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <RC522_SPI_Transfer+0x2c>)
 8003400:	2364      	movs	r3, #100	; 0x64
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2301      	movs	r3, #1
 8003406:	f003 f943 	bl	8006690 <HAL_SPI_TransmitReceive>

	return rx_data;
 800340a:	193b      	adds	r3, r7, r4
 800340c:	781b      	ldrb	r3, [r3, #0]
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b005      	add	sp, #20
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	2000028c 	.word	0x2000028c

0800341c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	0002      	movs	r2, r0
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	1c0a      	adds	r2, r1, #0
 800342c:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800342e:	23a0      	movs	r3, #160	; 0xa0
 8003430:	05db      	lsls	r3, r3, #23
 8003432:	2200      	movs	r2, #0
 8003434:	2110      	movs	r1, #16
 8003436:	0018      	movs	r0, r3
 8003438:	f001 fa03 	bl	8004842 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	227e      	movs	r2, #126	; 0x7e
 8003446:	4013      	ands	r3, r2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff ffce 	bl	80033ec <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8003450:	1dbb      	adds	r3, r7, #6
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff ffc9 	bl	80033ec <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800345a:	23a0      	movs	r3, #160	; 0xa0
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	2201      	movs	r2, #1
 8003460:	2110      	movs	r1, #16
 8003462:	0018      	movs	r0, r3
 8003464:	f001 f9ed 	bl	8004842 <HAL_GPIO_WritePin>
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	0002      	movs	r2, r0
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800347c:	23a0      	movs	r3, #160	; 0xa0
 800347e:	05db      	lsls	r3, r3, #23
 8003480:	2200      	movs	r2, #0
 8003482:	2110      	movs	r1, #16
 8003484:	0018      	movs	r0, r3
 8003486:	f001 f9dc 	bl	8004842 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	b25b      	sxtb	r3, r3
 8003492:	227e      	movs	r2, #126	; 0x7e
 8003494:	4013      	ands	r3, r2
 8003496:	b25b      	sxtb	r3, r3
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4252      	negs	r2, r2
 800349c:	4313      	orrs	r3, r2
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff ffa2 	bl	80033ec <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80034a8:	250f      	movs	r5, #15
 80034aa:	197c      	adds	r4, r7, r5
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7ff ff9d 	bl	80033ec <RC522_SPI_Transfer>
 80034b2:	0003      	movs	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80034b6:	23a0      	movs	r3, #160	; 0xa0
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	2201      	movs	r2, #1
 80034bc:	2110      	movs	r1, #16
 80034be:	0018      	movs	r0, r3
 80034c0:	f001 f9bf 	bl	8004842 <HAL_GPIO_WritePin>

	return val;
 80034c4:	197b      	adds	r3, r7, r5
 80034c6:	781b      	ldrb	r3, [r3, #0]

}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	0002      	movs	r2, r0
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	1dbb      	adds	r3, r7, #6
 80034de:	1c0a      	adds	r2, r1, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80034e2:	250f      	movs	r5, #15
 80034e4:	197c      	adds	r4, r7, r5
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7ff ffc0 	bl	8003470 <Read_MFRC522>
 80034f0:	0003      	movs	r3, r0
 80034f2:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80034f4:	197a      	adds	r2, r7, r5
 80034f6:	1dbb      	adds	r3, r7, #6
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	0011      	movs	r1, r2
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff ff88 	bl	800341c <Write_MFRC522>
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b004      	add	sp, #16
 8003512:	bdb0      	pop	{r4, r5, r7, pc}

08003514 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8003518:	2014      	movs	r0, #20
 800351a:	f7ff ffa9 	bl	8003470 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800351e:	2103      	movs	r1, #3
 8003520:	2014      	movs	r0, #20
 8003522:	f7ff ffd5 	bl	80034d0 <SetBitMask>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8003530:	210f      	movs	r1, #15
 8003532:	2001      	movs	r0, #1
 8003534:	f7ff ff72 	bl	800341c <Write_MFRC522>
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003544:	23a0      	movs	r3, #160	; 0xa0
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	2201      	movs	r2, #1
 800354a:	2110      	movs	r1, #16
 800354c:	0018      	movs	r0, r3
 800354e:	f001 f978 	bl	8004842 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <MFRC522_Init+0x5c>)
 8003554:	2201      	movs	r2, #1
 8003556:	2101      	movs	r1, #1
 8003558:	0018      	movs	r0, r3
 800355a:	f001 f972 	bl	8004842 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800355e:	f7ff ffe5 	bl	800352c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8003562:	218d      	movs	r1, #141	; 0x8d
 8003564:	202a      	movs	r0, #42	; 0x2a
 8003566:	f7ff ff59 	bl	800341c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800356a:	213e      	movs	r1, #62	; 0x3e
 800356c:	202b      	movs	r0, #43	; 0x2b
 800356e:	f7ff ff55 	bl	800341c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8003572:	211e      	movs	r1, #30
 8003574:	202d      	movs	r0, #45	; 0x2d
 8003576:	f7ff ff51 	bl	800341c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800357a:	2100      	movs	r1, #0
 800357c:	202c      	movs	r0, #44	; 0x2c
 800357e:	f7ff ff4d 	bl	800341c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	2015      	movs	r0, #21
 8003586:	f7ff ff49 	bl	800341c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 800358a:	213d      	movs	r1, #61	; 0x3d
 800358c:	2011      	movs	r0, #17
 800358e:	f7ff ff45 	bl	800341c <Write_MFRC522>

	AntennaOn();
 8003592:	f7ff ffbf 	bl	8003514 <AntennaOn>
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	50000400 	.word	0x50000400

080035a0 <RFID_Init>:

extern speaker Speaker;
extern UART_HandleTypeDef huart1;
extern char Data;

void RFID_Init(rfid* sensor) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    MFRC522_Init();
 80035a8:	f7ff ffca 	bl	8003540 <MFRC522_Init>
    memset(sensor->prevSerialNum, 0, 5);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2205      	movs	r2, #5
 80035b0:	2100      	movs	r1, #0
 80035b2:	0018      	movs	r0, r3
 80035b4:	f005 ffe2 	bl	800957c <memset>
    sensor->status = CARD_IDLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	715a      	strb	r2, [r3, #5]

    sensor->botEnabled = false;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	719a      	strb	r2, [r3, #6]
    sensor->initialSuccessfulCardTap = true;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	71da      	strb	r2, [r3, #7]
    sensor->initialFailedCardTap = true;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	721a      	strb	r2, [r3, #8]

    HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	01db      	lsls	r3, r3, #7
 80035d4:	4804      	ldr	r0, [pc, #16]	; (80035e8 <RFID_Init+0x48>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	0019      	movs	r1, r3
 80035da:	f001 f932 	bl	8004842 <HAL_GPIO_WritePin>
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	50000800 	.word	0x50000800

080035ec <Speaker_Init>:

#define CLK_SPEED 32000000
#define DEFAULT_AUTORELOAD 488

void Speaker_Init(speaker* speaker, rfid* rfid_struct, TIM_HandleTypeDef* timer)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
	speaker->rfid_sensor = rfid_struct;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	601a      	str	r2, [r3, #0]
	speaker->timer = timer;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]

	speaker->hasFault = false;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	751a      	strb	r2, [r3, #20]
	speaker->beepLengthOn = 0;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	811a      	strh	r2, [r3, #8]
	speaker->beepLengthPeriod = 0;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	815a      	strh	r2, [r3, #10]
	speaker->wantedNumBeeps = 0;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	731a      	strb	r2, [r3, #12]
	speaker->currentNumBeeps = 0;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	735a      	strb	r2, [r3, #13]
	speaker->timerCounter = 0;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	81da      	strh	r2, [r3, #14]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003628:	2317      	movs	r3, #23
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e00b      	b.n	800364a <Speaker_Init+0x5e>
	{
		speaker->featureFault[i] = false;
 8003632:	2117      	movs	r1, #23
 8003634:	187b      	adds	r3, r7, r1
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	18d3      	adds	r3, r2, r3
 800363c:	2200      	movs	r2, #0
 800363e:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003640:	187b      	adds	r3, r7, r1
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	187b      	adds	r3, r7, r1
 8003646:	3201      	adds	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	2317      	movs	r3, #23
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d9ee      	bls.n	8003632 <Speaker_Init+0x46>
	}


}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b006      	add	sp, #24
 800365c:	bd80      	pop	{r7, pc}

0800365e <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	000a      	movs	r2, r1
 8003668:	1cfb      	adds	r3, r7, #3
 800366a:	701a      	strb	r2, [r3, #0]

	speaker->featureFault[ID] = true;
 800366c:	1cfb      	adds	r3, r7, #3
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	2201      	movs	r2, #1
 8003676:	741a      	strb	r2, [r3, #16]
	if ((speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]) && speaker->rfid_sensor->botEnabled)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7c1b      	ldrb	r3, [r3, #16]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <Speaker_Start+0x38>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7c5b      	ldrb	r3, [r3, #17]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <Speaker_Start+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7c9b      	ldrb	r3, [r3, #18]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d014      	beq.n	80036c0 <Speaker_Start+0x62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	799b      	ldrb	r3, [r3, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00f      	beq.n	80036c0 <Speaker_Start+0x62>
	{
		speaker->hasFault = true;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	751a      	strb	r2, [r3, #20]
		Speaker_SetAutoReload(speaker, DEFAULT_AUTORELOAD);
 80036a6:	23f4      	movs	r3, #244	; 0xf4
 80036a8:	005a      	lsls	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f898 	bl	80037e4 <Speaker_SetAutoReload>
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2100      	movs	r1, #0
 80036ba:	0018      	movs	r0, r3
 80036bc:	f003 fb36 	bl	8006d2c <HAL_TIM_PWM_Start>
	}

}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	000a      	movs	r2, r1
 80036d2:	1cfb      	adds	r3, r7, #3
 80036d4:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 80036d6:	1cfb      	adds	r3, r7, #3
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	2200      	movs	r2, #0
 80036e0:	741a      	strb	r2, [r3, #16]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7c1b      	ldrb	r3, [r3, #16]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2201      	movs	r2, #1
 80036ea:	4053      	eors	r3, r2
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <Speaker_Stop+0x5c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7c5b      	ldrb	r3, [r3, #17]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	4053      	eors	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d010      	beq.n	8003724 <Speaker_Stop+0x5c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c9b      	ldrb	r3, [r3, #18]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2201      	movs	r2, #1
 800370a:	4053      	eors	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <Speaker_Stop+0x5c>
	{
		speaker->hasFault = false;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	751a      	strb	r2, [r3, #20]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2100      	movs	r1, #0
 800371e:	0018      	movs	r0, r3
 8003720:	f003 fb90 	bl	8006e44 <HAL_TIM_PWM_Stop>
	}
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}

0800372c <Speaker_BeepInterrupt>:
	return ((HAL_TIM_Base_GetState(speaker->timer) == HAL_TIM_STATE_BUSY) ? true : false);
}
*/

void Speaker_BeepInterrupt(speaker* speaker)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
    if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7b5b      	ldrb	r3, [r3, #13]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7b1b      	ldrb	r3, [r3, #12]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	429a      	cmp	r2, r3
 8003742:	d240      	bcs.n	80037c6 <Speaker_BeepInterrupt+0x9a>
    {

        if (speaker->timerCounter == speaker->beepLengthOn)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	89db      	ldrh	r3, [r3, #14]
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	891b      	ldrh	r3, [r3, #8]
 800374e:	b29b      	uxth	r3, r3
 8003750:	429a      	cmp	r2, r3
 8003752:	d110      	bne.n	8003776 <Speaker_BeepInterrupt+0x4a>
        {
            HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2100      	movs	r1, #0
 800375a:	0018      	movs	r0, r3
 800375c:	f003 fb72 	bl	8006e44 <HAL_TIM_PWM_Stop>
            __HAL_TIM_ENABLE(speaker->timer);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e01f      	b.n	80037b6 <Speaker_BeepInterrupt+0x8a>
        	//__NOP();
        }
        else if (speaker->timerCounter >= speaker->beepLengthPeriod)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	89db      	ldrh	r3, [r3, #14]
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	895b      	ldrh	r3, [r3, #10]
 8003780:	b29b      	uxth	r3, r3
 8003782:	429a      	cmp	r2, r3
 8003784:	d317      	bcc.n	80037b6 <Speaker_BeepInterrupt+0x8a>
        {
        	speaker->currentNumBeeps++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7b5b      	ldrb	r3, [r3, #13]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	735a      	strb	r2, [r3, #13]
			speaker->timerCounter = 0;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	81da      	strh	r2, [r3, #14]

            if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7b5b      	ldrb	r3, [r3, #13]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7b1b      	ldrb	r3, [r3, #12]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d205      	bcs.n	80037b6 <Speaker_BeepInterrupt+0x8a>
            {
                HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2100      	movs	r1, #0
 80037b0:	0018      	movs	r0, r3
 80037b2:	f003 fabb 	bl	8006d2c <HAL_TIM_PWM_Start>

            	//__NOP();
            }

        }
        speaker->timerCounter++;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	89db      	ldrh	r3, [r3, #14]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	81da      	strh	r2, [r3, #14]
    else
    {
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
        HAL_TIM_Base_Stop_IT(speaker->timer);
    }
}
 80037c4:	e00a      	b.n	80037dc <Speaker_BeepInterrupt+0xb0>
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2100      	movs	r1, #0
 80037cc:	0018      	movs	r0, r3
 80037ce:	f003 fb39 	bl	8006e44 <HAL_TIM_PWM_Stop>
        HAL_TIM_Base_Stop_IT(speaker->timer);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f003 fa3a 	bl	8006c50 <HAL_TIM_Base_Stop_IT>
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <Speaker_SetAutoReload>:

void Speaker_SetAutoReload(speaker* speaker, uint16_t value)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	000a      	movs	r2, r1
 80037ee:	1cbb      	adds	r3, r7, #2
 80037f0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(speaker->timer, value);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	1cba      	adds	r2, r7, #2
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	1cba      	adds	r2, r7, #2
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(speaker->timer, TIM_CHANNEL_1, value / 2);
 8003808:	1cbb      	adds	r3, r7, #2
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_MspInit+0x24>)
 8003826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_MspInit+0x24>)
 800382a:	2101      	movs	r1, #1
 800382c:	430a      	orrs	r2, r1
 800382e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_MspInit+0x24>)
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_MspInit+0x24>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0549      	lsls	r1, r1, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	240c      	movs	r4, #12
 8003852:	193b      	adds	r3, r7, r4
 8003854:	0018      	movs	r0, r3
 8003856:	2314      	movs	r3, #20
 8003858:	001a      	movs	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	f005 fe8e 	bl	800957c <memset>
  if(hi2c->Instance==I2C1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <HAL_I2C_MspInit+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d15c      	bne.n	8003924 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_I2C_MspInit+0xe8>)
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_I2C_MspInit+0xe8>)
 8003870:	2102      	movs	r1, #2
 8003872:	430a      	orrs	r2, r1
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_I2C_MspInit+0xe8>)
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	2202      	movs	r2, #2
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003882:	0021      	movs	r1, r4
 8003884:	187b      	adds	r3, r7, r1
 8003886:	22c0      	movs	r2, #192	; 0xc0
 8003888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2212      	movs	r2, #18
 800388e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	187b      	adds	r3, r7, r1
 8003898:	2203      	movs	r2, #3
 800389a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800389c:	187b      	adds	r3, r7, r1
 800389e:	2201      	movs	r2, #1
 80038a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	4a23      	ldr	r2, [pc, #140]	; (8003934 <HAL_I2C_MspInit+0xec>)
 80038a6:	0019      	movs	r1, r3
 80038a8:	0010      	movs	r0, r2
 80038aa:	f000 fe37 	bl	800451c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_I2C_MspInit+0xe8>)
 80038b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_I2C_MspInit+0xe8>)
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	0389      	lsls	r1, r1, #14
 80038b8:	430a      	orrs	r2, r1
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_I2C_MspInit+0xf4>)
 80038c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038c4:	2206      	movs	r2, #6
 80038c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	0052      	lsls	r2, r2, #1
 80038e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	00d2      	lsls	r2, r2, #3
 80038e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0192      	lsls	r2, r2, #6
 80038f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fc94 	bl	8004228 <HAL_DMA_Init>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8003904:	f7ff fd6c 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_I2C_MspInit+0xf0>)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2017      	movs	r0, #23
 800391a:	f000 fc53 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800391e:	2017      	movs	r0, #23
 8003920:	f000 fc65 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b009      	add	sp, #36	; 0x24
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	40005400 	.word	0x40005400
 8003930:	40021000 	.word	0x40021000
 8003934:	50000400 	.word	0x50000400
 8003938:	20000244 	.word	0x20000244
 800393c:	40020030 	.word	0x40020030

08003940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	240c      	movs	r4, #12
 800394a:	193b      	adds	r3, r7, r4
 800394c:	0018      	movs	r0, r3
 800394e:	2314      	movs	r3, #20
 8003950:	001a      	movs	r2, r3
 8003952:	2100      	movs	r1, #0
 8003954:	f005 fe12 	bl	800957c <memset>
  if(hspi->Instance==SPI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_SPI_MspInit+0x80>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d129      	bne.n	80039b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <HAL_SPI_MspInit+0x84>)
 8003964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_SPI_MspInit+0x84>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0149      	lsls	r1, r1, #5
 800396c:	430a      	orrs	r2, r1
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <HAL_SPI_MspInit+0x84>)
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_SPI_MspInit+0x84>)
 8003976:	2101      	movs	r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_SPI_MspInit+0x84>)
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003988:	0021      	movs	r1, r4
 800398a:	187b      	adds	r3, r7, r1
 800398c:	22e0      	movs	r2, #224	; 0xe0
 800398e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2202      	movs	r2, #2
 8003994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2203      	movs	r2, #3
 80039a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	187a      	adds	r2, r7, r1
 80039aa:	23a0      	movs	r3, #160	; 0xa0
 80039ac:	05db      	lsls	r3, r3, #23
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 fdb3 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b009      	add	sp, #36	; 0x24
 80039bc:	bd90      	pop	{r4, r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40013000 	.word	0x40013000
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	2314      	movs	r3, #20
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	0018      	movs	r0, r3
 80039d6:	2314      	movs	r3, #20
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f005 fdce 	bl	800957c <memset>
  if(htim_base->Instance==TIM2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 80039ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 80039f2:	2101      	movs	r1, #1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2100      	movs	r1, #0
 80039fc:	200f      	movs	r0, #15
 80039fe:	f000 fbe1 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a02:	200f      	movs	r0, #15
 8003a04:	f000 fbf3 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003a08:	e06b      	b.n	8003ae2 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM21)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <HAL_TIM_Base_MspInit+0x128>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d131      	bne.n	8003a78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2201      	movs	r2, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8003a38:	2114      	movs	r1, #20
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	2202      	movs	r2, #2
 8003a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003a58:	187a      	adds	r2, r7, r1
 8003a5a:	23a0      	movs	r3, #160	; 0xa0
 8003a5c:	05db      	lsls	r3, r3, #23
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fd5b 	bl	800451c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2014      	movs	r0, #20
 8003a6c:	f000 fbaa 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003a70:	2014      	movs	r0, #20
 8003a72:	f000 fbbc 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 8003a76:	e034      	b.n	8003ae2 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM22)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_TIM_Base_MspInit+0x12c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12f      	bne.n	8003ae2 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a88:	2120      	movs	r1, #32
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a94:	2102      	movs	r1, #2
 8003a96:	430a      	orrs	r2, r1
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_TIM_Base_MspInit+0x124>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2210      	movs	r2, #16
 8003aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_TIM_Base_MspInit+0x130>)
 8003aca:	0019      	movs	r1, r3
 8003acc:	0010      	movs	r0, r2
 8003ace:	f000 fd25 	bl	800451c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2016      	movs	r0, #22
 8003ad8:	f000 fb74 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003adc:	2016      	movs	r0, #22
 8003ade:	f000 fb86 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b00a      	add	sp, #40	; 0x28
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40010800 	.word	0x40010800
 8003af4:	40011400 	.word	0x40011400
 8003af8:	50000400 	.word	0x50000400

08003afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b08b      	sub	sp, #44	; 0x2c
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	2414      	movs	r4, #20
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	0018      	movs	r0, r3
 8003b0a:	2314      	movs	r3, #20
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f005 fd34 	bl	800957c <memset>
  if(htim->Instance==TIM2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d123      	bne.n	8003b68 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2201      	movs	r2, #1
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8003b38:	0021      	movs	r1, r4
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2202      	movs	r2, #2
 8003b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2200      	movs	r2, #0
 8003b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2202      	movs	r2, #2
 8003b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8003b58:	187a      	adds	r2, r7, r1
 8003b5a:	23a0      	movs	r3, #160	; 0xa0
 8003b5c:	05db      	lsls	r3, r3, #23
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fcdb 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8003b66:	e04f      	b.n	8003c08 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM21)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_TIM_MspPostInit+0x118>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d123      	bne.n	8003bba <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b78:	2101      	movs	r1, #1
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 8003b8a:	2114      	movs	r1, #20
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2208      	movs	r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2202      	movs	r2, #2
 8003b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003baa:	187a      	adds	r2, r7, r1
 8003bac:	23a0      	movs	r3, #160	; 0xa0
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fcb2 	bl	800451c <HAL_GPIO_Init>
}
 8003bb8:	e026      	b.n	8003c08 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM22)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_TIM_MspPostInit+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d121      	bne.n	8003c08 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003bca:	2102      	movs	r1, #2
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_TIM_MspPostInit+0x114>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 8003bdc:	2114      	movs	r1, #20
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2220      	movs	r2, #32
 8003be2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2202      	movs	r2, #2
 8003be8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <HAL_TIM_MspPostInit+0x120>)
 8003c00:	0019      	movs	r1, r3
 8003c02:	0010      	movs	r0, r2
 8003c04:	f000 fc8a 	bl	800451c <HAL_GPIO_Init>
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b00b      	add	sp, #44	; 0x2c
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40010800 	.word	0x40010800
 8003c18:	40011400 	.word	0x40011400
 8003c1c:	50000400 	.word	0x50000400

08003c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	240c      	movs	r4, #12
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2314      	movs	r3, #20
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f005 fca2 	bl	800957c <memset>
  if(huart->Instance==USART1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <HAL_UART_MspInit+0x80>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12a      	bne.n	8003c98 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	01c9      	lsls	r1, r1, #7
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	2201      	movs	r2, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	22c0      	movs	r2, #192	; 0xc0
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	0021      	movs	r1, r4
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2202      	movs	r2, #2
 8003c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	2203      	movs	r2, #3
 8003c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2204      	movs	r2, #4
 8003c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8a:	187a      	adds	r2, r7, r1
 8003c8c:	23a0      	movs	r3, #160	; 0xa0
 8003c8e:	05db      	lsls	r3, r3, #23
 8003c90:	0011      	movs	r1, r2
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fc42 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b009      	add	sp, #36	; 0x24
 8003c9e:	bd90      	pop	{r4, r7, pc}
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cac:	e7fe      	b.n	8003cac <NMI_Handler+0x4>

08003cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <HardFault_Handler+0x4>

08003cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ccc:	f000 f98e 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <DMA1_Channel2_3_IRQHandler+0x14>)
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fb61 	bl	80043a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	20000244 	.word	0x20000244

08003cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <TIM2_IRQHandler+0x14>)
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f003 f9f2 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	200002e4 	.word	0x200002e4

08003d08 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <TIM21_IRQHandler+0x14>)
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f003 f9e6 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	20000324 	.word	0x20000324

08003d20 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <TIM22_IRQHandler+0x14>)
 8003d26:	0018      	movs	r0, r3
 8003d28:	f003 f9da 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000364 	.word	0x20000364

08003d38 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <I2C1_IRQHandler+0x2c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	23e0      	movs	r3, #224	; 0xe0
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4013      	ands	r3, r2
 8003d48:	d004      	beq.n	8003d54 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <I2C1_IRQHandler+0x2c>)
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fe45 	bl	80049dc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003d52:	e003      	b.n	8003d5c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <I2C1_IRQHandler+0x2c>)
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fe26 	bl	80049a8 <HAL_I2C_EV_IRQHandler>
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	200001f0 	.word	0x200001f0

08003d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  return 1;
 8003d6c:	2301      	movs	r3, #1
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_kill>:

int _kill(int pid, int sig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d7e:	f005 fc57 	bl	8009630 <__errno>
 8003d82:	0003      	movs	r3, r0
 8003d84:	2216      	movs	r2, #22
 8003d86:	601a      	str	r2, [r3, #0]
  return -1;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	425b      	negs	r3, r3
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_exit>:

void _exit (int status)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	425a      	negs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0011      	movs	r1, r2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff ffe5 	bl	8003d74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003daa:	e7fe      	b.n	8003daa <_exit+0x16>

08003dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e00a      	b.n	8003dd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dbe:	e000      	b.n	8003dc2 <_read+0x16>
 8003dc0:	bf00      	nop
 8003dc2:	0001      	movs	r1, r0
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	60ba      	str	r2, [r7, #8]
 8003dca:	b2ca      	uxtb	r2, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbf0      	blt.n	8003dbe <_read+0x12>
  }

  return len;
 8003ddc:	687b      	ldr	r3, [r7, #4]
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b006      	add	sp, #24
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e009      	b.n	8003e0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	60ba      	str	r2, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	0018      	movs	r0, r3
 8003e02:	e000      	b.n	8003e06 <_write+0x20>
 8003e04:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dbf1      	blt.n	8003df8 <_write+0x12>
  }
  return len;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b006      	add	sp, #24
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_close>:

int _close(int file)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	425b      	negs	r3, r3
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b002      	add	sp, #8
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0192      	lsls	r2, r2, #6
 8003e42:	605a      	str	r2, [r3, #4]
  return 0;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_isatty>:

int _isatty(int file)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <_sbrk+0x5c>)
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <_sbrk+0x60>)
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <_sbrk+0x64>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <_sbrk+0x64>)
 8003e96:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <_sbrk+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <_sbrk+0x64>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea8:	f005 fbc2 	bl	8009630 <__errno>
 8003eac:	0003      	movs	r3, r0
 8003eae:	220c      	movs	r2, #12
 8003eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	e009      	b.n	8003ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <_sbrk+0x64>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	18d2      	adds	r2, r2, r3
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <_sbrk+0x64>)
 8003ec8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b006      	add	sp, #24
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20002000 	.word	0x20002000
 8003ed8:	00000400 	.word	0x00000400
 8003edc:	200004d0 	.word	0x200004d0
 8003ee0:	20000628 	.word	0x20000628

08003ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ef2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ef4:	f7ff fff6 	bl	8003ee4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <LoopForever+0xe>)
  movs r3, #0
 8003efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f00:	e002      	b.n	8003f08 <LoopCopyDataInit>

08003f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f06:	3304      	adds	r3, #4

08003f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f0c:	d3f9      	bcc.n	8003f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <LoopForever+0x16>)
  movs r3, #0
 8003f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f14:	e001      	b.n	8003f1a <LoopFillZerobss>

08003f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f18:	3204      	adds	r2, #4

08003f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f1c:	d3fb      	bcc.n	8003f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f1e:	f005 fb8d 	bl	800963c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f22:	f7fe fe27 	bl	8002b74 <main>

08003f26 <LoopForever>:

LoopForever:
    b LoopForever
 8003f26:	e7fe      	b.n	8003f26 <LoopForever>
   ldr   r0, =_estack
 8003f28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003f34:	0800bd74 	.word	0x0800bd74
  ldr r2, =_sbss
 8003f38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003f3c:	20000624 	.word	0x20000624

08003f40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC1_COMP_IRQHandler>
	...

08003f44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_Init+0x3c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_Init+0x3c>)
 8003f56:	2140      	movs	r1, #64	; 0x40
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f000 f811 	bl	8003f84 <HAL_InitTick>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e001      	b.n	8003f72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f6e:	f7ff fc57 	bl	8003820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781b      	ldrb	r3, [r3, #0]
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	40022000 	.word	0x40022000

08003f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_InitTick+0x5c>)
 8003f8e:	681c      	ldr	r4, [r3, #0]
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_InitTick+0x60>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	0019      	movs	r1, r3
 8003f96:	23fa      	movs	r3, #250	; 0xfa
 8003f98:	0098      	lsls	r0, r3, #2
 8003f9a:	f7fc f8d1 	bl	8000140 <__udivsi3>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f7fc f8cc 	bl	8000140 <__udivsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 f92f 	bl	800420e <HAL_SYSTICK_Config>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e00f      	b.n	8003fd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d80b      	bhi.n	8003fd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 f8fc 	bl	80041c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_InitTick+0x64>)
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b003      	add	sp, #12
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	20000004 	.word	0x20000004

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_IncTick+0x1c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	001a      	movs	r2, r3
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_IncTick+0x20>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	18d2      	adds	r2, r2, r3
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_IncTick+0x20>)
 8003ffe:	601a      	str	r2, [r3, #0]
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	20000008 	.word	0x20000008
 800400c:	200004d4 	.word	0x200004d4

08004010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  return uwTick;
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <HAL_GetTick+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	200004d4 	.word	0x200004d4

08004024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fff0 	bl	8004010 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_Delay+0x44>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	001a      	movs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	189b      	adds	r3, r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	f7ff ffe0 	bl	8004010 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d8f7      	bhi.n	800404c <HAL_Delay+0x28>
  {
  }
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	20000008 	.word	0x20000008

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	0002      	movs	r2, r0
 8004074:	1dfb      	adds	r3, r7, #7
 8004076:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004078:	1dfb      	adds	r3, r7, #7
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b7f      	cmp	r3, #127	; 0x7f
 800407e:	d809      	bhi.n	8004094 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	001a      	movs	r2, r3
 8004086:	231f      	movs	r3, #31
 8004088:	401a      	ands	r2, r3
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <__NVIC_EnableIRQ+0x30>)
 800408c:	2101      	movs	r1, #1
 800408e:	4091      	lsls	r1, r2
 8004090:	000a      	movs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
  }
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	0002      	movs	r2, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	1dfb      	adds	r3, r7, #7
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b7f      	cmp	r3, #127	; 0x7f
 80040b4:	d828      	bhi.n	8004108 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <__NVIC_SetPriority+0xd4>)
 80040b8:	1dfb      	adds	r3, r7, #7
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	33c0      	adds	r3, #192	; 0xc0
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	589b      	ldr	r3, [r3, r2]
 80040c6:	1dfa      	adds	r2, r7, #7
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	0011      	movs	r1, r2
 80040cc:	2203      	movs	r2, #3
 80040ce:	400a      	ands	r2, r1
 80040d0:	00d2      	lsls	r2, r2, #3
 80040d2:	21ff      	movs	r1, #255	; 0xff
 80040d4:	4091      	lsls	r1, r2
 80040d6:	000a      	movs	r2, r1
 80040d8:	43d2      	mvns	r2, r2
 80040da:	401a      	ands	r2, r3
 80040dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	22ff      	movs	r2, #255	; 0xff
 80040e4:	401a      	ands	r2, r3
 80040e6:	1dfb      	adds	r3, r7, #7
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	0018      	movs	r0, r3
 80040ec:	2303      	movs	r3, #3
 80040ee:	4003      	ands	r3, r0
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f4:	481f      	ldr	r0, [pc, #124]	; (8004174 <__NVIC_SetPriority+0xd4>)
 80040f6:	1dfb      	adds	r3, r7, #7
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	430a      	orrs	r2, r1
 8004100:	33c0      	adds	r3, #192	; 0xc0
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004106:	e031      	b.n	800416c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <__NVIC_SetPriority+0xd8>)
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	0019      	movs	r1, r3
 8004110:	230f      	movs	r3, #15
 8004112:	400b      	ands	r3, r1
 8004114:	3b08      	subs	r3, #8
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	3306      	adds	r3, #6
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	3304      	adds	r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1dfa      	adds	r2, r7, #7
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	0011      	movs	r1, r2
 8004128:	2203      	movs	r2, #3
 800412a:	400a      	ands	r2, r1
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	21ff      	movs	r1, #255	; 0xff
 8004130:	4091      	lsls	r1, r2
 8004132:	000a      	movs	r2, r1
 8004134:	43d2      	mvns	r2, r2
 8004136:	401a      	ands	r2, r3
 8004138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	22ff      	movs	r2, #255	; 0xff
 8004140:	401a      	ands	r2, r3
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	0018      	movs	r0, r3
 8004148:	2303      	movs	r3, #3
 800414a:	4003      	ands	r3, r0
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004150:	4809      	ldr	r0, [pc, #36]	; (8004178 <__NVIC_SetPriority+0xd8>)
 8004152:	1dfb      	adds	r3, r7, #7
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	001c      	movs	r4, r3
 8004158:	230f      	movs	r3, #15
 800415a:	4023      	ands	r3, r4
 800415c:	3b08      	subs	r3, #8
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	430a      	orrs	r2, r1
 8004162:	3306      	adds	r3, #6
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	18c3      	adds	r3, r0, r3
 8004168:	3304      	adds	r3, #4
 800416a:	601a      	str	r2, [r3, #0]
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b003      	add	sp, #12
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	e000e100 	.word	0xe000e100
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	045b      	lsls	r3, r3, #17
 800418c:	429a      	cmp	r2, r3
 800418e:	d301      	bcc.n	8004194 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004190:	2301      	movs	r3, #1
 8004192:	e010      	b.n	80041b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <SysTick_Config+0x44>)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	3a01      	subs	r2, #1
 800419a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800419c:	2301      	movs	r3, #1
 800419e:	425b      	negs	r3, r3
 80041a0:	2103      	movs	r1, #3
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff ff7c 	bl	80040a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <SysTick_Config+0x44>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <SysTick_Config+0x44>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b002      	add	sp, #8
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	e000e010 	.word	0xe000e010

080041c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	210f      	movs	r1, #15
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	1c02      	adds	r2, r0, #0
 80041d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7ff ff5d 	bl	80040a0 <__NVIC_SetPriority>
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b004      	add	sp, #16
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	0002      	movs	r2, r0
 80041f6:	1dfb      	adds	r3, r7, #7
 80041f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff ff33 	bl	800406c <__NVIC_EnableIRQ>
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff ffaf 	bl	800417c <SysTick_Config>
 800421e:	0003      	movs	r3, r0
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e061      	b.n	80042fe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_DMA_Init+0xe0>)
 8004240:	4694      	mov	ip, r2
 8004242:	4463      	add	r3, ip
 8004244:	2114      	movs	r1, #20
 8004246:	0018      	movs	r0, r3
 8004248:	f7fb ff7a 	bl	8000140 <__udivsi3>
 800424c:	0003      	movs	r3, r0
 800424e:	009a      	lsls	r2, r3, #2
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2d      	ldr	r2, [pc, #180]	; (800430c <HAL_DMA_Init+0xe4>)
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2225      	movs	r2, #37	; 0x25
 800425e:	2102      	movs	r1, #2
 8004260:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <HAL_DMA_Init+0xe8>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800427a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	01db      	lsls	r3, r3, #7
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d018      	beq.n	80042e6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_DMA_Init+0xec>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	211c      	movs	r1, #28
 80042be:	400b      	ands	r3, r1
 80042c0:	210f      	movs	r1, #15
 80042c2:	4099      	lsls	r1, r3
 80042c4:	000b      	movs	r3, r1
 80042c6:	43d9      	mvns	r1, r3
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <HAL_DMA_Init+0xec>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <HAL_DMA_Init+0xec>)
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	201c      	movs	r0, #28
 80042dc:	4003      	ands	r3, r0
 80042de:	409a      	lsls	r2, r3
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_DMA_Init+0xec>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2225      	movs	r2, #37	; 0x25
 80042f0:	2101      	movs	r1, #1
 80042f2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	; 0x24
 80042f8:	2100      	movs	r1, #0
 80042fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	bffdfff8 	.word	0xbffdfff8
 800430c:	40020000 	.word	0x40020000
 8004310:	ffff800f 	.word	0xffff800f
 8004314:	400200a8 	.word	0x400200a8

08004318 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	210f      	movs	r1, #15
 8004322:	187b      	adds	r3, r7, r1
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2225      	movs	r2, #37	; 0x25
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d006      	beq.n	8004342 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e02a      	b.n	8004398 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	210e      	movs	r1, #14
 800434e:	438a      	bics	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	438a      	bics	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	221c      	movs	r2, #28
 8004368:	401a      	ands	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2101      	movs	r1, #1
 8004370:	4091      	lsls	r1, r2
 8004372:	000a      	movs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2225      	movs	r2, #37	; 0x25
 800437a:	2101      	movs	r1, #1
 800437c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	0010      	movs	r0, r2
 8004396:	4798      	blx	r3
    }
  }
  return status;
 8004398:	230f      	movs	r3, #15
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	781b      	ldrb	r3, [r3, #0]
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	221c      	movs	r2, #28
 80043c4:	4013      	ands	r3, r2
 80043c6:	2204      	movs	r2, #4
 80043c8:	409a      	lsls	r2, r3
 80043ca:	0013      	movs	r3, r2
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	d026      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7a>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2204      	movs	r2, #4
 80043d6:	4013      	ands	r3, r2
 80043d8:	d022      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2220      	movs	r2, #32
 80043e2:	4013      	ands	r3, r2
 80043e4:	d107      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2104      	movs	r1, #4
 80043f2:	438a      	bics	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	221c      	movs	r2, #28
 80043fc:	401a      	ands	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2104      	movs	r1, #4
 8004404:	4091      	lsls	r1, r2
 8004406:	000a      	movs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	2b00      	cmp	r3, #0
 8004410:	d100      	bne.n	8004414 <HAL_DMA_IRQHandler+0x6e>
 8004412:	e071      	b.n	80044f8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	0010      	movs	r0, r2
 800441c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800441e:	e06b      	b.n	80044f8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	221c      	movs	r2, #28
 8004426:	4013      	ands	r3, r2
 8004428:	2202      	movs	r2, #2
 800442a:	409a      	lsls	r2, r3
 800442c:	0013      	movs	r3, r2
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	d02d      	beq.n	8004490 <HAL_DMA_IRQHandler+0xea>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	d029      	beq.n	8004490 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2220      	movs	r2, #32
 8004444:	4013      	ands	r3, r2
 8004446:	d10b      	bne.n	8004460 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	210a      	movs	r1, #10
 8004454:	438a      	bics	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2225      	movs	r2, #37	; 0x25
 800445c:	2101      	movs	r1, #1
 800445e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	221c      	movs	r2, #28
 8004466:	401a      	ands	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2102      	movs	r1, #2
 800446e:	4091      	lsls	r1, r2
 8004470:	000a      	movs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	2100      	movs	r1, #0
 800447a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d039      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	0010      	movs	r0, r2
 800448c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800448e:	e033      	b.n	80044f8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	221c      	movs	r2, #28
 8004496:	4013      	ands	r3, r2
 8004498:	2208      	movs	r2, #8
 800449a:	409a      	lsls	r2, r3
 800449c:	0013      	movs	r3, r2
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	d02a      	beq.n	80044fa <HAL_DMA_IRQHandler+0x154>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2208      	movs	r2, #8
 80044a8:	4013      	ands	r3, r2
 80044aa:	d026      	beq.n	80044fa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	210e      	movs	r1, #14
 80044b8:	438a      	bics	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	221c      	movs	r2, #28
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	2101      	movs	r1, #1
 80044ca:	4091      	lsls	r1, r2
 80044cc:	000a      	movs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2225      	movs	r2, #37	; 0x25
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2224      	movs	r2, #36	; 0x24
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	0010      	movs	r0, r2
 80044f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46c0      	nop			; (mov r8, r8)
}
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2225      	movs	r2, #37	; 0x25
 800450e:	5c9b      	ldrb	r3, [r3, r2]
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b002      	add	sp, #8
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004532:	e14f      	b.n	80047d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4091      	lsls	r1, r2
 800453e:	000a      	movs	r2, r1
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d100      	bne.n	800454c <HAL_GPIO_Init+0x30>
 800454a:	e140      	b.n	80047ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	4013      	ands	r3, r2
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	409a      	lsls	r2, r3
 8004572:	0013      	movs	r3, r2
 8004574:	43da      	mvns	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	0013      	movs	r3, r2
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	409a      	lsls	r2, r3
 80045a0:	0013      	movs	r3, r2
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	2201      	movs	r2, #1
 80045b2:	401a      	ands	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	409a      	lsls	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2203      	movs	r2, #3
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	409a      	lsls	r2, r3
 80045e0:	0013      	movs	r3, r2
 80045e2:	43da      	mvns	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	409a      	lsls	r2, r3
 80045f4:	0013      	movs	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2203      	movs	r2, #3
 8004608:	4013      	ands	r3, r2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	0092      	lsls	r2, r2, #2
 8004618:	58d3      	ldr	r3, [r2, r3]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	409a      	lsls	r2, r3
 8004628:	0013      	movs	r3, r2
 800462a:	43da      	mvns	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2107      	movs	r1, #7
 800463a:	400b      	ands	r3, r1
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	409a      	lsls	r2, r3
 8004640:	0013      	movs	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	409a      	lsls	r2, r3
 8004664:	0013      	movs	r3, r2
 8004666:	43da      	mvns	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2203      	movs	r2, #3
 8004674:	401a      	ands	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	409a      	lsls	r2, r3
 800467c:	0013      	movs	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	23c0      	movs	r3, #192	; 0xc0
 8004690:	029b      	lsls	r3, r3, #10
 8004692:	4013      	ands	r3, r2
 8004694:	d100      	bne.n	8004698 <HAL_GPIO_Init+0x17c>
 8004696:	e09a      	b.n	80047ce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b54      	ldr	r3, [pc, #336]	; (80047ec <HAL_GPIO_Init+0x2d0>)
 800469a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_GPIO_Init+0x2d0>)
 800469e:	2101      	movs	r1, #1
 80046a0:	430a      	orrs	r2, r1
 80046a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a4:	4a52      	ldr	r2, [pc, #328]	; (80047f0 <HAL_GPIO_Init+0x2d4>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	589b      	ldr	r3, [r3, r2]
 80046b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2203      	movs	r2, #3
 80046b6:	4013      	ands	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	409a      	lsls	r2, r3
 80046be:	0013      	movs	r3, r2
 80046c0:	43da      	mvns	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	23a0      	movs	r3, #160	; 0xa0
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d019      	beq.n	8004706 <HAL_GPIO_Init+0x1ea>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a47      	ldr	r2, [pc, #284]	; (80047f4 <HAL_GPIO_Init+0x2d8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_GPIO_Init+0x1e6>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a46      	ldr	r2, [pc, #280]	; (80047f8 <HAL_GPIO_Init+0x2dc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00d      	beq.n	80046fe <HAL_GPIO_Init+0x1e2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a45      	ldr	r2, [pc, #276]	; (80047fc <HAL_GPIO_Init+0x2e0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <HAL_GPIO_Init+0x1de>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a44      	ldr	r2, [pc, #272]	; (8004800 <HAL_GPIO_Init+0x2e4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_GPIO_Init+0x1da>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x1ec>
 80046f6:	2306      	movs	r3, #6
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x1ec>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x1ec>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x1ec>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x1ec>
 8004706:	2300      	movs	r3, #0
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	2103      	movs	r1, #3
 800470c:	400a      	ands	r2, r1
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004718:	4935      	ldr	r1, [pc, #212]	; (80047f0 <HAL_GPIO_Init+0x2d4>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43da      	mvns	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	035b      	lsls	r3, r3, #13
 800473e:	4013      	ands	r3, r2
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43da      	mvns	r2, r3
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	039b      	lsls	r3, r3, #14
 8004768:	4013      	ands	r3, r2
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43da      	mvns	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	4013      	ands	r3, r2
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43da      	mvns	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	4013      	ands	r3, r2
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	40da      	lsrs	r2, r3
 80047dc:	1e13      	subs	r3, r2, #0
 80047de:	d000      	beq.n	80047e2 <HAL_GPIO_Init+0x2c6>
 80047e0:	e6a8      	b.n	8004534 <HAL_GPIO_Init+0x18>
  }
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b006      	add	sp, #24
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40010000 	.word	0x40010000
 80047f4:	50000400 	.word	0x50000400
 80047f8:	50000800 	.word	0x50000800
 80047fc:	50000c00 	.word	0x50000c00
 8004800:	50001c00 	.word	0x50001c00
 8004804:	40010400 	.word	0x40010400

08004808 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	000a      	movs	r2, r1
 8004812:	1cbb      	adds	r3, r7, #2
 8004814:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	1cba      	adds	r2, r7, #2
 800481c:	8812      	ldrh	r2, [r2, #0]
 800481e:	4013      	ands	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004822:	230f      	movs	r3, #15
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e003      	b.n	8004834 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800482c:	230f      	movs	r3, #15
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004834:	230f      	movs	r3, #15
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	781b      	ldrb	r3, [r3, #0]
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	0008      	movs	r0, r1
 800484c:	0011      	movs	r1, r2
 800484e:	1cbb      	adds	r3, r7, #2
 8004850:	1c02      	adds	r2, r0, #0
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	1c7b      	adds	r3, r7, #1
 8004856:	1c0a      	adds	r2, r1, #0
 8004858:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800485a:	1c7b      	adds	r3, r7, #1
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004862:	1cbb      	adds	r3, r7, #2
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800486a:	e003      	b.n	8004874 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800486c:	1cbb      	adds	r3, r7, #2
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e082      	b.n	8004994 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2241      	movs	r2, #65	; 0x41
 8004892:	5c9b      	ldrb	r3, [r3, r2]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2240      	movs	r2, #64	; 0x40
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7fe ffcf 	bl	8003848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2241      	movs	r2, #65	; 0x41
 80048ae:	2124      	movs	r1, #36	; 0x24
 80048b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	438a      	bics	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4934      	ldr	r1, [pc, #208]	; (800499c <HAL_I2C_Init+0x120>)
 80048cc:	400a      	ands	r2, r1
 80048ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4931      	ldr	r1, [pc, #196]	; (80049a0 <HAL_I2C_Init+0x124>)
 80048dc:	400a      	ands	r2, r1
 80048de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	0209      	lsls	r1, r1, #8
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e007      	b.n	800490a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2184      	movs	r1, #132	; 0x84
 8004904:	0209      	lsls	r1, r1, #8
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d104      	bne.n	800491c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	491f      	ldr	r1, [pc, #124]	; (80049a4 <HAL_I2C_Init+0x128>)
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	491a      	ldr	r1, [pc, #104]	; (80049a0 <HAL_I2C_Init+0x124>)
 8004938:	400a      	ands	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	431a      	orrs	r2, r3
 8004946:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69d9      	ldr	r1, [r3, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2241      	movs	r2, #65	; 0x41
 8004980:	2120      	movs	r1, #32
 8004982:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2242      	movs	r2, #66	; 0x42
 800498e:	2100      	movs	r1, #0
 8004990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}
 800499c:	f0ffffff 	.word	0xf0ffffff
 80049a0:	ffff7fff 	.word	0xffff7fff
 80049a4:	02008000 	.word	0x02008000

080049a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
  }
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b004      	add	sp, #16
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004a04:	d00a      	beq.n	8004a1c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2280      	movs	r2, #128	; 0x80
 8004a18:	0052      	lsls	r2, r2, #1
 8004a1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4013      	ands	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004a2c:	d00a      	beq.n	8004a44 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	2208      	movs	r2, #8
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	00d2      	lsls	r2, r2, #3
 8004a42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004a54:	d00a      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	0092      	lsls	r2, r2, #2
 8004a6a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	220b      	movs	r2, #11
 8004a76:	4013      	ands	r3, r2
 8004a78:	d005      	beq.n	8004a86 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 fbbd 	bl	8005200 <I2C_ITError>
  }
}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b006      	add	sp, #24
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	0008      	movs	r0, r1
 8004ab8:	0011      	movs	r1, r2
 8004aba:	1cfb      	adds	r3, r7, #3
 8004abc:	1c02      	adds	r2, r0, #0
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	003b      	movs	r3, r7
 8004ac2:	1c0a      	adds	r2, r1, #0
 8004ac4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b002      	add	sp, #8
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	5c9b      	ldrb	r3, [r3, r2]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <I2C_Slave_ISR_IT+0x24>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0e6      	b.n	8004cf2 <I2C_Slave_ISR_IT+0x1f2>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	2101      	movs	r1, #1
 8004b2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	d009      	beq.n	8004b48 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b3a:	d005      	beq.n	8004b48 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0011      	movs	r1, r2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 f9e4 	bl	8004f10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d052      	beq.n	8004bf6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2210      	movs	r2, #16
 8004b54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b56:	d04e      	beq.n	8004bf6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d12d      	bne.n	8004bbe <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2241      	movs	r2, #65	; 0x41
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b28      	cmp	r3, #40	; 0x28
 8004b6c:	d10b      	bne.n	8004b86 <I2C_Slave_ISR_IT+0x86>
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	049b      	lsls	r3, r3, #18
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d106      	bne.n	8004b86 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 fae6 	bl	8005150 <I2C_ITListenCplt>
 8004b84:	e036      	b.n	8004bf4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2241      	movs	r2, #65	; 0x41
 8004b8a:	5c9b      	ldrb	r3, [r3, r2]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b29      	cmp	r3, #41	; 0x29
 8004b90:	d110      	bne.n	8004bb4 <I2C_Slave_ISR_IT+0xb4>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4a59      	ldr	r2, [pc, #356]	; (8004cfc <I2C_Slave_ISR_IT+0x1fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00c      	beq.n	8004bb4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 fc56 	bl	8005456 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f94b 	bl	8004e48 <I2C_ITSlaveSeqCplt>
 8004bb2:	e01f      	b.n	8004bf4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004bbc:	e091      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	2204      	movs	r2, #4
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xe4>
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	045b      	lsls	r3, r3, #17
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d000      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xe4>
 8004be2:	e07e      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0011      	movs	r1, r2
 8004bec:	0018      	movs	r0, r3
 8004bee:	f000 fb07 	bl	8005200 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004bf2:	e076      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1e2>
 8004bf4:	e075      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d02f      	beq.n	8004c5e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2204      	movs	r2, #4
 8004c02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004c04:	d02b      	beq.n	8004c5e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d018      	beq.n	8004c42 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d14c      	bne.n	8004ce6 <I2C_Slave_ISR_IT+0x1e6>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <I2C_Slave_ISR_IT+0x1fc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d048      	beq.n	8004ce6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 f8f6 	bl	8004e48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c5c:	e043      	b.n	8004ce6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4013      	ands	r3, r2
 8004c64:	d00a      	beq.n	8004c7c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c6c:	d006      	beq.n	8004c7c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0011      	movs	r1, r2
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f843 	bl	8004d00 <I2C_ITAddrCplt>
 8004c7a:	e035      	b.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d031      	beq.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c8a:	d02d      	beq.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004cc6:	e00f      	b.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	045b      	lsls	r3, r3, #17
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d002      	beq.n	8004cd8 <I2C_Slave_ISR_IT+0x1d8>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f8b4 	bl	8004e48 <I2C_ITSlaveSeqCplt>
 8004ce0:	e002      	b.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	e000      	b.n	8004ce8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8004ce6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	2100      	movs	r1, #0
 8004cee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b006      	add	sp, #24
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	ffff0000 	.word	0xffff0000

08004d00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2241      	movs	r2, #65	; 0x41
 8004d0e:	5c9b      	ldrb	r3, [r3, r2]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	001a      	movs	r2, r3
 8004d14:	2328      	movs	r3, #40	; 0x28
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b28      	cmp	r3, #40	; 0x28
 8004d1a:	d000      	beq.n	8004d1e <I2C_ITAddrCplt+0x1e>
 8004d1c:	e088      	b.n	8004e30 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	250f      	movs	r5, #15
 8004d2a:	197b      	adds	r3, r7, r5
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	400a      	ands	r2, r1
 8004d30:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	200c      	movs	r0, #12
 8004d3e:	183b      	adds	r3, r7, r0
 8004d40:	21fe      	movs	r1, #254	; 0xfe
 8004d42:	400a      	ands	r2, r1
 8004d44:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	240a      	movs	r4, #10
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	0592      	lsls	r2, r2, #22
 8004d54:	0d92      	lsrs	r2, r2, #22
 8004d56:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	2308      	movs	r3, #8
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	21fe      	movs	r1, #254	; 0xfe
 8004d66:	400a      	ands	r2, r1
 8004d68:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d148      	bne.n	8004e04 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004d72:	0021      	movs	r1, r4
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	09db      	lsrs	r3, r3, #7
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	4053      	eors	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	001a      	movs	r2, r3
 8004d86:	2306      	movs	r3, #6
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d120      	bne.n	8004dce <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	187a      	adds	r2, r7, r1
 8004d90:	8812      	ldrh	r2, [r2, #0]
 8004d92:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d14c      	bne.n	8004e40 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2208      	movs	r2, #8
 8004db2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2100      	movs	r1, #0
 8004dba:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004dbc:	183b      	adds	r3, r7, r0
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	197b      	adds	r3, r7, r5
 8004dc2:	7819      	ldrb	r1, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7ff fe71 	bl	8004aae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004dcc:	e038      	b.n	8004e40 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004dce:	240c      	movs	r4, #12
 8004dd0:	193b      	adds	r3, r7, r4
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	18ba      	adds	r2, r7, r2
 8004dd6:	8812      	ldrh	r2, [r2, #0]
 8004dd8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	021a      	lsls	r2, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0011      	movs	r1, r2
 8004de2:	0018      	movs	r0, r3
 8004de4:	f000 fb78 	bl	80054d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2240      	movs	r2, #64	; 0x40
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	230f      	movs	r3, #15
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	7819      	ldrb	r1, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff fe56 	bl	8004aae <HAL_I2C_AddrCallback>
}
 8004e02:	e01d      	b.n	8004e40 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0011      	movs	r1, r2
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fb63 	bl	80054d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	230f      	movs	r3, #15
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	7819      	ldrb	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff fe40 	bl	8004aae <HAL_I2C_AddrCallback>
}
 8004e2e:	e007      	b.n	8004e40 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2240      	movs	r2, #64	; 0x40
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	5499      	strb	r1, [r3, r2]
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b004      	add	sp, #16
 8004e46:	bdb0      	pop	{r4, r5, r7, pc}

08004e48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2242      	movs	r2, #66	; 0x42
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	01db      	lsls	r3, r3, #7
 8004e66:	4013      	ands	r3, r2
 8004e68:	d008      	beq.n	8004e7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4924      	ldr	r1, [pc, #144]	; (8004f08 <I2C_ITSlaveSeqCplt+0xc0>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e00c      	b.n	8004e96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	4013      	ands	r3, r2
 8004e84:	d007      	beq.n	8004e96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	491e      	ldr	r1, [pc, #120]	; (8004f0c <I2C_ITSlaveSeqCplt+0xc4>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2241      	movs	r2, #65	; 0x41
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b29      	cmp	r3, #41	; 0x29
 8004ea0:	d114      	bne.n	8004ecc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2241      	movs	r2, #65	; 0x41
 8004ea6:	2128      	movs	r1, #40	; 0x28
 8004ea8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fb0f 	bl	80054d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff fde2 	bl	8004a8e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004eca:	e019      	b.n	8004f00 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2241      	movs	r2, #65	; 0x41
 8004ed0:	5c9b      	ldrb	r3, [r3, r2]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed6:	d113      	bne.n	8004f00 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2241      	movs	r2, #65	; 0x41
 8004edc:	2128      	movs	r1, #40	; 0x28
 8004ede:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2222      	movs	r2, #34	; 0x22
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2102      	movs	r1, #2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 faf4 	bl	80054d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2240      	movs	r2, #64	; 0x40
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7ff fdcf 	bl	8004a9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	ffffbfff 	.word	0xffffbfff
 8004f0c:	ffff7fff 	.word	0xffff7fff

08004f10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f26:	200f      	movs	r0, #15
 8004f28:	183b      	adds	r3, r7, r0
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	2141      	movs	r1, #65	; 0x41
 8004f2e:	5c52      	ldrb	r2, [r2, r1]
 8004f30:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2220      	movs	r2, #32
 8004f38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b21      	cmp	r3, #33	; 0x21
 8004f40:	d003      	beq.n	8004f4a <I2C_ITSlaveCplt+0x3a>
 8004f42:	183b      	adds	r3, r7, r0
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b29      	cmp	r3, #41	; 0x29
 8004f48:	d109      	bne.n	8004f5e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004f4a:	4a7b      	ldr	r2, [pc, #492]	; (8005138 <I2C_ITSlaveCplt+0x228>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0011      	movs	r1, r2
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 fac1 	bl	80054d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2221      	movs	r2, #33	; 0x21
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5c:	e011      	b.n	8004f82 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f5e:	220f      	movs	r2, #15
 8004f60:	18bb      	adds	r3, r7, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b22      	cmp	r3, #34	; 0x22
 8004f66:	d003      	beq.n	8004f70 <I2C_ITSlaveCplt+0x60>
 8004f68:	18bb      	adds	r3, r7, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6e:	d108      	bne.n	8004f82 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004f70:	4a72      	ldr	r2, [pc, #456]	; (800513c <I2C_ITSlaveCplt+0x22c>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0011      	movs	r1, r2
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 faae 	bl	80054d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2222      	movs	r2, #34	; 0x22
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	0209      	lsls	r1, r1, #8
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4968      	ldr	r1, [pc, #416]	; (8005140 <I2C_ITSlaveCplt+0x230>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fa55 	bl	8005456 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	01db      	lsls	r3, r3, #7
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d013      	beq.n	8004fde <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4960      	ldr	r1, [pc, #384]	; (8005144 <I2C_ITSlaveCplt+0x234>)
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01f      	beq.n	800500e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fdc:	e017      	b.n	800500e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d012      	beq.n	800500e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4955      	ldr	r1, [pc, #340]	; (8005148 <I2C_ITSlaveCplt+0x238>)
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d020      	beq.n	8005058 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2204      	movs	r2, #4
 800501a:	4393      	bics	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	2204      	movs	r2, #4
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2242      	movs	r2, #66	; 0x42
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	0011      	movs	r1, r2
 800508c:	0018      	movs	r0, r3
 800508e:	f000 f8b7 	bl	8005200 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2241      	movs	r2, #65	; 0x41
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b28      	cmp	r3, #40	; 0x28
 800509c:	d147      	bne.n	800512e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 f853 	bl	8005150 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050aa:	e040      	b.n	800512e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <I2C_ITSlaveCplt+0x23c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d016      	beq.n	80050e4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7ff fec5 	bl	8004e48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <I2C_ITSlaveCplt+0x23c>)
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2241      	movs	r2, #65	; 0x41
 80050c8:	2120      	movs	r1, #32
 80050ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2240      	movs	r2, #64	; 0x40
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f7ff fcf6 	bl	8004ace <HAL_I2C_ListenCpltCallback>
}
 80050e2:	e024      	b.n	800512e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2241      	movs	r2, #65	; 0x41
 80050e8:	5c9b      	ldrb	r3, [r3, r2]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b22      	cmp	r3, #34	; 0x22
 80050ee:	d10f      	bne.n	8005110 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2241      	movs	r2, #65	; 0x41
 80050f4:	2120      	movs	r1, #32
 80050f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2240      	movs	r2, #64	; 0x40
 8005102:	2100      	movs	r1, #0
 8005104:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff fcc8 	bl	8004a9e <HAL_I2C_SlaveRxCpltCallback>
}
 800510e:	e00e      	b.n	800512e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2241      	movs	r2, #65	; 0x41
 8005114:	2120      	movs	r1, #32
 8005116:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	2100      	movs	r1, #0
 8005124:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff fcb0 	bl	8004a8e <HAL_I2C_SlaveTxCpltCallback>
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b006      	add	sp, #24
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	00008001 	.word	0x00008001
 800513c:	00008002 	.word	0x00008002
 8005140:	fe00e800 	.word	0xfe00e800
 8005144:	ffffbfff 	.word	0xffffbfff
 8005148:	ffff7fff 	.word	0xffff7fff
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <I2C_ITListenCplt+0xa8>)
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2241      	movs	r2, #65	; 0x41
 800516a:	2120      	movs	r1, #32
 800516c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2242      	movs	r2, #66	; 0x42
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2204      	movs	r2, #4
 8005180:	4013      	ands	r3, r2
 8005182:	d022      	beq.n	80051ca <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	2204      	movs	r2, #4
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051ca:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <I2C_ITListenCplt+0xac>)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 f981 	bl	80054d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2210      	movs	r2, #16
 80051dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7ff fc70 	bl	8004ace <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b002      	add	sp, #8
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	ffff0000 	.word	0xffff0000
 80051fc:	00008003 	.word	0x00008003

08005200 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800520a:	200f      	movs	r0, #15
 800520c:	183b      	adds	r3, r7, r0
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	2141      	movs	r1, #65	; 0x41
 8005212:	5c52      	ldrb	r2, [r2, r1]
 8005214:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2242      	movs	r2, #66	; 0x42
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a72      	ldr	r2, [pc, #456]	; (80053ec <I2C_ITError+0x1ec>)
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005236:	183b      	adds	r3, r7, r0
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b28      	cmp	r3, #40	; 0x28
 800523c:	d007      	beq.n	800524e <I2C_ITError+0x4e>
 800523e:	183b      	adds	r3, r7, r0
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b29      	cmp	r3, #41	; 0x29
 8005244:	d003      	beq.n	800524e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005246:	183b      	adds	r3, r7, r0
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d10c      	bne.n	8005268 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2103      	movs	r1, #3
 8005252:	0018      	movs	r0, r3
 8005254:	f000 f940 	bl	80054d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	2128      	movs	r1, #40	; 0x28
 800525e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a63      	ldr	r2, [pc, #396]	; (80053f0 <I2C_ITError+0x1f0>)
 8005264:	635a      	str	r2, [r3, #52]	; 0x34
 8005266:	e032      	b.n	80052ce <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005268:	4a62      	ldr	r2, [pc, #392]	; (80053f4 <I2C_ITError+0x1f4>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0011      	movs	r1, r2
 800526e:	0018      	movs	r0, r3
 8005270:	f000 f932 	bl	80054d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 f8ed 	bl	8005456 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2241      	movs	r2, #65	; 0x41
 8005280:	5c9b      	ldrb	r3, [r3, r2]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b60      	cmp	r3, #96	; 0x60
 8005286:	d01f      	beq.n	80052c8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2241      	movs	r2, #65	; 0x41
 800528c:	2120      	movs	r1, #32
 800528e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2220      	movs	r2, #32
 8005298:	4013      	ands	r3, r2
 800529a:	2b20      	cmp	r3, #32
 800529c:	d114      	bne.n	80052c8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2210      	movs	r2, #16
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d109      	bne.n	80052c0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2210      	movs	r2, #16
 80052b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	2204      	movs	r2, #4
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2220      	movs	r2, #32
 80052c6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d03b      	beq.n	8005354 <I2C_ITError+0x154>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b11      	cmp	r3, #17
 80052e0:	d002      	beq.n	80052e8 <I2C_ITError+0xe8>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d135      	bne.n	8005354 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	401a      	ands	r2, r3
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	01db      	lsls	r3, r3, #7
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d107      	bne.n	800530c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	493c      	ldr	r1, [pc, #240]	; (80053f8 <I2C_ITError+0x1f8>)
 8005308:	400a      	ands	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	0018      	movs	r0, r3
 8005312:	f7ff f8f6 	bl	8004502 <HAL_DMA_GetState>
 8005316:	0003      	movs	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d016      	beq.n	800534a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	4a36      	ldr	r2, [pc, #216]	; (80053fc <I2C_ITError+0x1fc>)
 8005322:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	2100      	movs	r1, #0
 800532a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	0018      	movs	r0, r3
 8005332:	f7fe fff1 	bl	8004318 <HAL_DMA_Abort_IT>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d051      	beq.n	80053de <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	0018      	movs	r0, r3
 8005346:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005348:	e049      	b.n	80053de <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 f859 	bl	8005404 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005352:	e044      	b.n	80053de <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03b      	beq.n	80053d4 <I2C_ITError+0x1d4>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b12      	cmp	r3, #18
 8005360:	d002      	beq.n	8005368 <I2C_ITError+0x168>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b22      	cmp	r3, #34	; 0x22
 8005366:	d135      	bne.n	80053d4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	401a      	ands	r2, r3
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	429a      	cmp	r2, r3
 800537a:	d107      	bne.n	800538c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	491e      	ldr	r1, [pc, #120]	; (8005400 <I2C_ITError+0x200>)
 8005388:	400a      	ands	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	0018      	movs	r0, r3
 8005392:	f7ff f8b6 	bl	8004502 <HAL_DMA_GetState>
 8005396:	0003      	movs	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d016      	beq.n	80053ca <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <I2C_ITError+0x1fc>)
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2240      	movs	r2, #64	; 0x40
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7fe ffb1 	bl	8004318 <HAL_DMA_Abort_IT>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d013      	beq.n	80053e2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	0018      	movs	r0, r3
 80053c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053c8:	e00b      	b.n	80053e2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 f819 	bl	8005404 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053d2:	e006      	b.n	80053e2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 f814 	bl	8005404 <I2C_TreatErrorCallback>
  }
}
 80053dc:	e002      	b.n	80053e4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	e000      	b.n	80053e4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053e2:	46c0      	nop			; (mov r8, r8)
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	ffff0000 	.word	0xffff0000
 80053f0:	08004b01 	.word	0x08004b01
 80053f4:	00008003 	.word	0x00008003
 80053f8:	ffffbfff 	.word	0xffffbfff
 80053fc:	0800549b 	.word	0x0800549b
 8005400:	ffff7fff 	.word	0xffff7fff

08005404 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2241      	movs	r2, #65	; 0x41
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b60      	cmp	r3, #96	; 0x60
 8005416:	d10f      	bne.n	8005438 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2241      	movs	r2, #65	; 0x41
 800541c:	2120      	movs	r1, #32
 800541e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f7ff fb5c 	bl	8004aee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005436:	e00a      	b.n	800544e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2240      	movs	r2, #64	; 0x40
 8005442:	2100      	movs	r1, #0
 8005444:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff fb48 	bl	8004ade <HAL_I2C_ErrorCallback>
}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	46bd      	mov	sp, r7
 8005452:	b002      	add	sp, #8
 8005454:	bd80      	pop	{r7, pc}

08005456 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2202      	movs	r2, #2
 8005466:	4013      	ands	r3, r2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d103      	bne.n	8005474 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	2b01      	cmp	r3, #1
 8005480:	d007      	beq.n	8005492 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
  }
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}

0800549a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2200      	movs	r2, #0
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	2200      	movs	r2, #0
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7ff ff9a 	bl	8005404 <I2C_TreatErrorCallback>
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b004      	add	sp, #16
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	000a      	movs	r2, r1
 80054e2:	1cbb      	adds	r3, r7, #2
 80054e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054ea:	1cbb      	adds	r3, r7, #2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	d010      	beq.n	8005516 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2242      	movs	r2, #66	; 0x42
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2241      	movs	r2, #65	; 0x41
 8005500:	5c9b      	ldrb	r3, [r3, r2]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	001a      	movs	r2, r3
 8005506:	2328      	movs	r3, #40	; 0x28
 8005508:	4013      	ands	r3, r2
 800550a:	2b28      	cmp	r3, #40	; 0x28
 800550c:	d003      	beq.n	8005516 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	22b0      	movs	r2, #176	; 0xb0
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005516:	1cbb      	adds	r3, r7, #2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d010      	beq.n	8005542 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2244      	movs	r2, #68	; 0x44
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2241      	movs	r2, #65	; 0x41
 800552c:	5c9b      	ldrb	r3, [r3, r2]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	001a      	movs	r2, r3
 8005532:	2328      	movs	r3, #40	; 0x28
 8005534:	4013      	ands	r3, r2
 8005536:	2b28      	cmp	r3, #40	; 0x28
 8005538:	d003      	beq.n	8005542 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22b0      	movs	r2, #176	; 0xb0
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005542:	1cbb      	adds	r3, r7, #2
 8005544:	2200      	movs	r2, #0
 8005546:	5e9b      	ldrsh	r3, [r3, r2]
 8005548:	2b00      	cmp	r3, #0
 800554a:	da03      	bge.n	8005554 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	22b8      	movs	r2, #184	; 0xb8
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005554:	1cbb      	adds	r3, r7, #2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d103      	bne.n	8005564 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2290      	movs	r2, #144	; 0x90
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005564:	1cbb      	adds	r3, r7, #2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	2b20      	cmp	r3, #32
 800556a:	d103      	bne.n	8005574 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005574:	1cbb      	adds	r3, r7, #2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d103      	bne.n	8005584 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2240      	movs	r2, #64	; 0x40
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	43d9      	mvns	r1, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	400a      	ands	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b004      	add	sp, #16
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2241      	movs	r2, #65	; 0x41
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d138      	bne.n	8005628 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2240      	movs	r2, #64	; 0x40
 80055ba:	5c9b      	ldrb	r3, [r3, r2]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e032      	b.n	800562a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	2101      	movs	r1, #1
 80055ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2241      	movs	r2, #65	; 0x41
 80055d0:	2124      	movs	r1, #36	; 0x24
 80055d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4911      	ldr	r1, [pc, #68]	; (8005634 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2101      	movs	r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2241      	movs	r2, #65	; 0x41
 8005618:	2120      	movs	r1, #32
 800561a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	2100      	movs	r1, #0
 8005622:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b002      	add	sp, #8
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	ffffefff 	.word	0xffffefff

08005638 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2241      	movs	r2, #65	; 0x41
 8005646:	5c9b      	ldrb	r3, [r3, r2]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b20      	cmp	r3, #32
 800564c:	d139      	bne.n	80056c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	5c9b      	ldrb	r3, [r3, r2]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e033      	b.n	80056c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2240      	movs	r2, #64	; 0x40
 8005660:	2101      	movs	r1, #1
 8005662:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2241      	movs	r2, #65	; 0x41
 8005668:	2124      	movs	r1, #36	; 0x24
 800566a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2101      	movs	r1, #1
 8005678:	438a      	bics	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a11      	ldr	r2, [pc, #68]	; (80056cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2101      	movs	r1, #1
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2241      	movs	r2, #65	; 0x41
 80056b2:	2120      	movs	r1, #32
 80056b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	2100      	movs	r1, #0
 80056bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b004      	add	sp, #16
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	fffff0ff 	.word	0xfffff0ff

080056d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f000 fb5a 	bl	8005d98 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e4:	4bce      	ldr	r3, [pc, #824]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	220c      	movs	r2, #12
 80056ea:	4013      	ands	r3, r2
 80056ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ee:	4bcc      	ldr	r3, [pc, #816]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	4013      	ands	r3, r2
 80056f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	4013      	ands	r3, r2
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0x36>
 8005704:	e07c      	b.n	8005800 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d007      	beq.n	800571c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d111      	bne.n	8005736 <HAL_RCC_OscConfig+0x66>
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	025b      	lsls	r3, r3, #9
 8005718:	429a      	cmp	r2, r3
 800571a:	d10c      	bne.n	8005736 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	4bc0      	ldr	r3, [pc, #768]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	029b      	lsls	r3, r3, #10
 8005724:	4013      	ands	r3, r2
 8005726:	d100      	bne.n	800572a <HAL_RCC_OscConfig+0x5a>
 8005728:	e069      	b.n	80057fe <HAL_RCC_OscConfig+0x12e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d165      	bne.n	80057fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e330      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	429a      	cmp	r2, r3
 8005740:	d107      	bne.n	8005752 <HAL_RCC_OscConfig+0x82>
 8005742:	4bb7      	ldr	r3, [pc, #732]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4bb6      	ldr	r3, [pc, #728]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	0249      	lsls	r1, r1, #9
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e027      	b.n	80057a2 <HAL_RCC_OscConfig+0xd2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	23a0      	movs	r3, #160	; 0xa0
 8005758:	02db      	lsls	r3, r3, #11
 800575a:	429a      	cmp	r2, r3
 800575c:	d10e      	bne.n	800577c <HAL_RCC_OscConfig+0xac>
 800575e:	4bb0      	ldr	r3, [pc, #704]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4baf      	ldr	r3, [pc, #700]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	02c9      	lsls	r1, r1, #11
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	4bac      	ldr	r3, [pc, #688]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4bab      	ldr	r3, [pc, #684]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	0249      	lsls	r1, r1, #9
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e012      	b.n	80057a2 <HAL_RCC_OscConfig+0xd2>
 800577c:	4ba8      	ldr	r3, [pc, #672]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4ba7      	ldr	r3, [pc, #668]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005782:	49a8      	ldr	r1, [pc, #672]	; (8005a24 <HAL_RCC_OscConfig+0x354>)
 8005784:	400a      	ands	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	4ba5      	ldr	r3, [pc, #660]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	025b      	lsls	r3, r3, #9
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4ba2      	ldr	r3, [pc, #648]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4ba1      	ldr	r3, [pc, #644]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800579c:	49a2      	ldr	r1, [pc, #648]	; (8005a28 <HAL_RCC_OscConfig+0x358>)
 800579e:	400a      	ands	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d014      	beq.n	80057d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fe fc31 	bl	8004010 <HAL_GetTick>
 80057ae:	0003      	movs	r3, r0
 80057b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fe fc2c 	bl	8004010 <HAL_GetTick>
 80057b8:	0002      	movs	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e2e8      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057c6:	4b96      	ldr	r3, [pc, #600]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	4013      	ands	r3, r2
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0xe4>
 80057d2:	e015      	b.n	8005800 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fe fc1c 	bl	8004010 <HAL_GetTick>
 80057d8:	0003      	movs	r3, r0
 80057da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057de:	f7fe fc17 	bl	8004010 <HAL_GetTick>
 80057e2:	0002      	movs	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	; 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e2d3      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057f0:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	4013      	ands	r3, r2
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x10e>
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2202      	movs	r2, #2
 8005806:	4013      	ands	r3, r2
 8005808:	d100      	bne.n	800580c <HAL_RCC_OscConfig+0x13c>
 800580a:	e08b      	b.n	8005924 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d005      	beq.n	8005824 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d13e      	bne.n	800589c <HAL_RCC_OscConfig+0x1cc>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d13b      	bne.n	800589c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005824:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2204      	movs	r2, #4
 800582a:	4013      	ands	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_RCC_OscConfig+0x168>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e2af      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b79      	ldr	r3, [pc, #484]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a7b      	ldr	r2, [pc, #492]	; (8005a2c <HAL_RCC_OscConfig+0x35c>)
 800583e:	4013      	ands	r3, r2
 8005840:	0019      	movs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	4b75      	ldr	r3, [pc, #468]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800584e:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2209      	movs	r2, #9
 8005854:	4393      	bics	r3, r2
 8005856:	0019      	movs	r1, r3
 8005858:	4b71      	ldr	r3, [pc, #452]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005860:	f000 fc6c 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8005864:	0001      	movs	r1, r0
 8005866:	4b6e      	ldr	r3, [pc, #440]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	220f      	movs	r2, #15
 800586e:	4013      	ands	r3, r2
 8005870:	4a6f      	ldr	r2, [pc, #444]	; (8005a30 <HAL_RCC_OscConfig+0x360>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	000a      	movs	r2, r1
 8005876:	40da      	lsrs	r2, r3
 8005878:	4b6e      	ldr	r3, [pc, #440]	; (8005a34 <HAL_RCC_OscConfig+0x364>)
 800587a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800587c:	4b6e      	ldr	r3, [pc, #440]	; (8005a38 <HAL_RCC_OscConfig+0x368>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2513      	movs	r5, #19
 8005882:	197c      	adds	r4, r7, r5
 8005884:	0018      	movs	r0, r3
 8005886:	f7fe fb7d 	bl	8003f84 <HAL_InitTick>
 800588a:	0003      	movs	r3, r0
 800588c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800588e:	197b      	adds	r3, r7, r5
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d046      	beq.n	8005924 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005896:	197b      	adds	r3, r7, r5
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	e27d      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d027      	beq.n	80058f2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80058a2:	4b5f      	ldr	r3, [pc, #380]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2209      	movs	r2, #9
 80058a8:	4393      	bics	r3, r2
 80058aa:	0019      	movs	r1, r3
 80058ac:	4b5c      	ldr	r3, [pc, #368]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fe fbac 	bl	8004010 <HAL_GetTick>
 80058b8:	0003      	movs	r3, r0
 80058ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058be:	f7fe fba7 	bl	8004010 <HAL_GetTick>
 80058c2:	0002      	movs	r2, r0
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e263      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2204      	movs	r2, #4
 80058d6:	4013      	ands	r3, r2
 80058d8:	d0f1      	beq.n	80058be <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058da:	4b51      	ldr	r3, [pc, #324]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4a53      	ldr	r2, [pc, #332]	; (8005a2c <HAL_RCC_OscConfig+0x35c>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	0019      	movs	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	021a      	lsls	r2, r3, #8
 80058ea:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	e018      	b.n	8005924 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f2:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80058f8:	2101      	movs	r1, #1
 80058fa:	438a      	bics	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fe fb87 	bl	8004010 <HAL_GetTick>
 8005902:	0003      	movs	r3, r0
 8005904:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005908:	f7fe fb82 	bl	8004010 <HAL_GetTick>
 800590c:	0002      	movs	r2, r0
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e23e      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	4013      	ands	r3, r2
 8005922:	d1f1      	bne.n	8005908 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2210      	movs	r2, #16
 800592a:	4013      	ands	r3, r2
 800592c:	d100      	bne.n	8005930 <HAL_RCC_OscConfig+0x260>
 800592e:	e0a1      	b.n	8005a74 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d140      	bne.n	80059b8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005936:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4013      	ands	r3, r2
 8005940:	d005      	beq.n	800594e <HAL_RCC_OscConfig+0x27e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e224      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800594e:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4a3a      	ldr	r2, [pc, #232]	; (8005a3c <HAL_RCC_OscConfig+0x36c>)
 8005954:	4013      	ands	r3, r2
 8005956:	0019      	movs	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005962:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	0a19      	lsrs	r1, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	061a      	lsls	r2, r3, #24
 8005970:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	0b5b      	lsrs	r3, r3, #13
 800597c:	3301      	adds	r3, #1
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	0212      	lsls	r2, r2, #8
 8005982:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	210f      	movs	r1, #15
 800598c:	400b      	ands	r3, r1
 800598e:	4928      	ldr	r1, [pc, #160]	; (8005a30 <HAL_RCC_OscConfig+0x360>)
 8005990:	5ccb      	ldrb	r3, [r1, r3]
 8005992:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005994:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_RCC_OscConfig+0x364>)
 8005996:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <HAL_RCC_OscConfig+0x368>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2513      	movs	r5, #19
 800599e:	197c      	adds	r4, r7, r5
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fe faef 	bl	8003f84 <HAL_InitTick>
 80059a6:	0003      	movs	r3, r0
 80059a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80059aa:	197b      	adds	r3, r7, r5
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d060      	beq.n	8005a74 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80059b2:	197b      	adds	r3, r7, r5
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	e1ef      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03f      	beq.n	8005a40 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0049      	lsls	r1, r1, #1
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fe fb1f 	bl	8004010 <HAL_GetTick>
 80059d2:	0003      	movs	r3, r0
 80059d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d8:	f7fe fb1a 	bl	8004010 <HAL_GetTick>
 80059dc:	0002      	movs	r2, r0
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e1d6      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4013      	ands	r3, r2
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0x36c>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	0a19      	lsrs	r1, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	061a      	lsls	r2, r3, #24
 8005a18:	4b01      	ldr	r3, [pc, #4]	; (8005a20 <HAL_RCC_OscConfig+0x350>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	e029      	b.n	8005a74 <HAL_RCC_OscConfig+0x3a4>
 8005a20:	40021000 	.word	0x40021000
 8005a24:	fffeffff 	.word	0xfffeffff
 8005a28:	fffbffff 	.word	0xfffbffff
 8005a2c:	ffffe0ff 	.word	0xffffe0ff
 8005a30:	0800b984 	.word	0x0800b984
 8005a34:	20000000 	.word	0x20000000
 8005a38:	20000004 	.word	0x20000004
 8005a3c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a40:	4bbe      	ldr	r3, [pc, #760]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4bbd      	ldr	r3, [pc, #756]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005a46:	49be      	ldr	r1, [pc, #760]	; (8005d40 <HAL_RCC_OscConfig+0x670>)
 8005a48:	400a      	ands	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fe fae0 	bl	8004010 <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a56:	f7fe fadb 	bl	8004010 <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e197      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005a68:	4bb4      	ldr	r3, [pc, #720]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4013      	ands	r3, r2
 8005a72:	d1f0      	bne.n	8005a56 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d036      	beq.n	8005aec <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d019      	beq.n	8005aba <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	4bad      	ldr	r3, [pc, #692]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a8a:	4bac      	ldr	r3, [pc, #688]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fe fabd 	bl	8004010 <HAL_GetTick>
 8005a96:	0003      	movs	r3, r0
 8005a98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9c:	f7fe fab8 	bl	8004010 <HAL_GetTick>
 8005aa0:	0002      	movs	r2, r0
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e174      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005aae:	4ba3      	ldr	r3, [pc, #652]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d0f1      	beq.n	8005a9c <HAL_RCC_OscConfig+0x3cc>
 8005ab8:	e018      	b.n	8005aec <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aba:	4ba0      	ldr	r3, [pc, #640]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005abe:	4b9f      	ldr	r3, [pc, #636]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fe faa3 	bl	8004010 <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad0:	f7fe fa9e 	bl	8004010 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e15a      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ae2:	4b96      	ldr	r3, [pc, #600]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d1f1      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	4013      	ands	r3, r2
 8005af4:	d100      	bne.n	8005af8 <HAL_RCC_OscConfig+0x428>
 8005af6:	e0ae      	b.n	8005c56 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af8:	2027      	movs	r0, #39	; 0x27
 8005afa:	183b      	adds	r3, r7, r0
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b00:	4b8e      	ldr	r3, [pc, #568]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	055b      	lsls	r3, r3, #21
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b0c:	4b8b      	ldr	r3, [pc, #556]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0549      	lsls	r1, r1, #21
 8005b16:	430a      	orrs	r2, r1
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005b1a:	183b      	adds	r3, r7, r0
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	4b88      	ldr	r3, [pc, #544]	; (8005d44 <HAL_RCC_OscConfig+0x674>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d11a      	bne.n	8005b62 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b2c:	4b85      	ldr	r3, [pc, #532]	; (8005d44 <HAL_RCC_OscConfig+0x674>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b84      	ldr	r3, [pc, #528]	; (8005d44 <HAL_RCC_OscConfig+0x674>)
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	0049      	lsls	r1, r1, #1
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b3a:	f7fe fa69 	bl	8004010 <HAL_GetTick>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b44:	f7fe fa64 	bl	8004010 <HAL_GetTick>
 8005b48:	0002      	movs	r2, r0
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e120      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <HAL_RCC_OscConfig+0x674>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_OscConfig+0x4ae>
 8005b6e:	4b73      	ldr	r3, [pc, #460]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b72:	4b72      	ldr	r3, [pc, #456]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	0049      	lsls	r1, r1, #1
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	651a      	str	r2, [r3, #80]	; 0x50
 8005b7c:	e031      	b.n	8005be2 <HAL_RCC_OscConfig+0x512>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x4d0>
 8005b86:	4b6d      	ldr	r3, [pc, #436]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b8a:	4b6c      	ldr	r3, [pc, #432]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b8c:	496c      	ldr	r1, [pc, #432]	; (8005d40 <HAL_RCC_OscConfig+0x670>)
 8005b8e:	400a      	ands	r2, r1
 8005b90:	651a      	str	r2, [r3, #80]	; 0x50
 8005b92:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b96:	4b69      	ldr	r3, [pc, #420]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005b98:	496b      	ldr	r1, [pc, #428]	; (8005d48 <HAL_RCC_OscConfig+0x678>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
 8005b9e:	e020      	b.n	8005be2 <HAL_RCC_OscConfig+0x512>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	23a0      	movs	r3, #160	; 0xa0
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d10e      	bne.n	8005bca <HAL_RCC_OscConfig+0x4fa>
 8005bac:	4b63      	ldr	r3, [pc, #396]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb0:	4b62      	ldr	r3, [pc, #392]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	00c9      	lsls	r1, r1, #3
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bbe:	4b5f      	ldr	r3, [pc, #380]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	0049      	lsls	r1, r1, #1
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005bc8:	e00b      	b.n	8005be2 <HAL_RCC_OscConfig+0x512>
 8005bca:	4b5c      	ldr	r3, [pc, #368]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bce:	4b5b      	ldr	r3, [pc, #364]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bd0:	495b      	ldr	r1, [pc, #364]	; (8005d40 <HAL_RCC_OscConfig+0x670>)
 8005bd2:	400a      	ands	r2, r1
 8005bd4:	651a      	str	r2, [r3, #80]	; 0x50
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bda:	4b58      	ldr	r3, [pc, #352]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005bdc:	495a      	ldr	r1, [pc, #360]	; (8005d48 <HAL_RCC_OscConfig+0x678>)
 8005bde:	400a      	ands	r2, r1
 8005be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d015      	beq.n	8005c16 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bea:	f7fe fa11 	bl	8004010 <HAL_GetTick>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bf2:	e009      	b.n	8005c08 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fe fa0c 	bl	8004010 <HAL_GetTick>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	4a53      	ldr	r2, [pc, #332]	; (8005d4c <HAL_RCC_OscConfig+0x67c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e0c7      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c08:	4b4c      	ldr	r3, [pc, #304]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4013      	ands	r3, r2
 8005c12:	d0ef      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x524>
 8005c14:	e014      	b.n	8005c40 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c16:	f7fe f9fb 	bl	8004010 <HAL_GetTick>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c1e:	e009      	b.n	8005c34 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fe f9f6 	bl	8004010 <HAL_GetTick>
 8005c24:	0002      	movs	r2, r0
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	4a48      	ldr	r2, [pc, #288]	; (8005d4c <HAL_RCC_OscConfig+0x67c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e0b1      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d1ef      	bne.n	8005c20 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c40:	2327      	movs	r3, #39	; 0x27
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d105      	bne.n	8005c56 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4a:	4b3c      	ldr	r3, [pc, #240]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c50:	493f      	ldr	r1, [pc, #252]	; (8005d50 <HAL_RCC_OscConfig+0x680>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d100      	bne.n	8005c60 <HAL_RCC_OscConfig+0x590>
 8005c5e:	e09a      	b.n	8005d96 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d064      	beq.n	8005d30 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d145      	bne.n	8005cfa <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b33      	ldr	r3, [pc, #204]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b32      	ldr	r3, [pc, #200]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c74:	4937      	ldr	r1, [pc, #220]	; (8005d54 <HAL_RCC_OscConfig+0x684>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fe f9c9 	bl	8004010 <HAL_GetTick>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fe f9c4 	bl	8004010 <HAL_GetTick>
 8005c88:	0002      	movs	r2, r0
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e080      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c96:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	049b      	lsls	r3, r3, #18
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ca2:	4b26      	ldr	r3, [pc, #152]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <HAL_RCC_OscConfig+0x688>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	0449      	lsls	r1, r1, #17
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fe f99e 	bl	8004010 <HAL_GetTick>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fe f999 	bl	8004010 <HAL_GetTick>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e055      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	049b      	lsls	r3, r3, #18
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x60a>
 8005cf8:	e04d      	b.n	8005d96 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005d00:	4914      	ldr	r1, [pc, #80]	; (8005d54 <HAL_RCC_OscConfig+0x684>)
 8005d02:	400a      	ands	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d06:	f7fe f983 	bl	8004010 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fe f97e 	bl	8004010 <HAL_GetTick>
 8005d14:	0002      	movs	r2, r0
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e03a      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_OscConfig+0x66c>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	049b      	lsls	r3, r3, #18
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0x640>
 8005d2e:	e032      	b.n	8005d96 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d111      	bne.n	8005d5c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e02d      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	fffffeff 	.word	0xfffffeff
 8005d44:	40007000 	.word	0x40007000
 8005d48:	fffffbff 	.word	0xfffffbff
 8005d4c:	00001388 	.word	0x00001388
 8005d50:	efffffff 	.word	0xefffffff
 8005d54:	feffffff 	.word	0xfeffffff
 8005d58:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCC_OscConfig+0x6d0>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	025b      	lsls	r3, r3, #9
 8005d68:	401a      	ands	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d10f      	bne.n	8005d92 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	23f0      	movs	r3, #240	; 0xf0
 8005d76:	039b      	lsls	r3, r3, #14
 8005d78:	401a      	ands	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	23c0      	movs	r3, #192	; 0xc0
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	401a      	ands	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d001      	beq.n	8005d96 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b00a      	add	sp, #40	; 0x28
 8005d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005da0:	40021000 	.word	0x40021000

08005da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da4:	b5b0      	push	{r4, r5, r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e128      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db8:	4b96      	ldr	r3, [pc, #600]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d91e      	bls.n	8005e04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc6:	4b93      	ldr	r3, [pc, #588]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4393      	bics	r3, r2
 8005dce:	0019      	movs	r1, r3
 8005dd0:	4b90      	ldr	r3, [pc, #576]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dd8:	f7fe f91a 	bl	8004010 <HAL_GetTick>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de0:	e009      	b.n	8005df6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de2:	f7fe f915 	bl	8004010 <HAL_GetTick>
 8005de6:	0002      	movs	r2, r0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	4a8a      	ldr	r2, [pc, #552]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e109      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b87      	ldr	r3, [pc, #540]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1ee      	bne.n	8005de2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d009      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e0e:	4b83      	ldr	r3, [pc, #524]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	22f0      	movs	r2, #240	; 0xf0
 8005e14:	4393      	bics	r3, r2
 8005e16:	0019      	movs	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	4b7f      	ldr	r3, [pc, #508]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2201      	movs	r2, #1
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x8a>
 8005e2c:	e089      	b.n	8005f42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e36:	4b79      	ldr	r3, [pc, #484]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d120      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0e1      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e4e:	4b73      	ldr	r3, [pc, #460]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	049b      	lsls	r3, r3, #18
 8005e56:	4013      	ands	r3, r2
 8005e58:	d114      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0d5      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d106      	bne.n	8005e74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0ca      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e74:	4b69      	ldr	r3, [pc, #420]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0c2      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e84:	4b65      	ldr	r3, [pc, #404]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	4b62      	ldr	r3, [pc, #392]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005e94:	430a      	orrs	r2, r1
 8005e96:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e98:	f7fe f8ba 	bl	8004010 <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d111      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea8:	e009      	b.n	8005ebe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eaa:	f7fe f8b1 	bl	8004010 <HAL_GetTick>
 8005eae:	0002      	movs	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	4a58      	ldr	r2, [pc, #352]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0a5      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ebe:	4b57      	ldr	r3, [pc, #348]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	220c      	movs	r2, #12
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d1ef      	bne.n	8005eaa <HAL_RCC_ClockConfig+0x106>
 8005eca:	e03a      	b.n	8005f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d111      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed4:	e009      	b.n	8005eea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed6:	f7fe f89b 	bl	8004010 <HAL_GetTick>
 8005eda:	0002      	movs	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	4a4d      	ldr	r2, [pc, #308]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e08f      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eea:	4b4c      	ldr	r3, [pc, #304]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	220c      	movs	r2, #12
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d1ef      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0x132>
 8005ef6:	e024      	b.n	8005f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d11b      	bne.n	8005f38 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f00:	e009      	b.n	8005f16 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f02:	f7fe f885 	bl	8004010 <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	4a42      	ldr	r2, [pc, #264]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e079      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f16:	4b41      	ldr	r3, [pc, #260]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	220c      	movs	r2, #12
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d1ef      	bne.n	8005f02 <HAL_RCC_ClockConfig+0x15e>
 8005f22:	e00e      	b.n	8005f42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f24:	f7fe f874 	bl	8004010 <HAL_GetTick>
 8005f28:	0002      	movs	r2, r0
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e068      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f38:	4b38      	ldr	r3, [pc, #224]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	220c      	movs	r2, #12
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f42:	4b34      	ldr	r3, [pc, #208]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d21e      	bcs.n	8005f8e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f50:	4b30      	ldr	r3, [pc, #192]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4393      	bics	r3, r2
 8005f58:	0019      	movs	r1, r3
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f62:	f7fe f855 	bl	8004010 <HAL_GetTick>
 8005f66:	0003      	movs	r3, r0
 8005f68:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	e009      	b.n	8005f80 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f6c:	f7fe f850 	bl	8004010 <HAL_GetTick>
 8005f70:	0002      	movs	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	4a28      	ldr	r2, [pc, #160]	; (8006018 <HAL_RCC_ClockConfig+0x274>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e044      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_ClockConfig+0x270>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	4013      	ands	r3, r2
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d1ee      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2204      	movs	r2, #4
 8005f94:	4013      	ands	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_RCC_ClockConfig+0x27c>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <HAL_RCC_ClockConfig+0x280>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	00da      	lsls	r2, r3, #3
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fcc:	f000 f8b6 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8005fd0:	0001      	movs	r1, r0
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <HAL_RCC_ClockConfig+0x278>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	220f      	movs	r2, #15
 8005fda:	4013      	ands	r3, r2
 8005fdc:	4a12      	ldr	r2, [pc, #72]	; (8006028 <HAL_RCC_ClockConfig+0x284>)
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	000a      	movs	r2, r1
 8005fe2:	40da      	lsrs	r2, r3
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <HAL_RCC_ClockConfig+0x288>)
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fe8:	4b11      	ldr	r3, [pc, #68]	; (8006030 <HAL_RCC_ClockConfig+0x28c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	250b      	movs	r5, #11
 8005fee:	197c      	adds	r4, r7, r5
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fd ffc7 	bl	8003f84 <HAL_InitTick>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005ffa:	197b      	adds	r3, r7, r5
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006002:	197b      	adds	r3, r7, r5
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	e000      	b.n	800600a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bdb0      	pop	{r4, r5, r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	40022000 	.word	0x40022000
 8006018:	00001388 	.word	0x00001388
 800601c:	40021000 	.word	0x40021000
 8006020:	fffff8ff 	.word	0xfffff8ff
 8006024:	ffffc7ff 	.word	0xffffc7ff
 8006028:	0800b984 	.word	0x0800b984
 800602c:	20000000 	.word	0x20000000
 8006030:	20000004 	.word	0x20000004

08006034 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b08d      	sub	sp, #52	; 0x34
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8006040:	241c      	movs	r4, #28
 8006042:	193b      	adds	r3, r7, r4
 8006044:	0018      	movs	r0, r3
 8006046:	2314      	movs	r3, #20
 8006048:	001a      	movs	r2, r3
 800604a:	2100      	movs	r1, #0
 800604c:	f003 fa96 	bl	800957c <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8006050:	0020      	movs	r0, r4
 8006052:	183b      	adds	r3, r7, r0
 8006054:	2202      	movs	r2, #2
 8006056:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006058:	183b      	adds	r3, r7, r0
 800605a:	2202      	movs	r2, #2
 800605c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800605e:	183b      	adds	r3, r7, r0
 8006060:	2200      	movs	r2, #0
 8006062:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11a      	bne.n	80060a0 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800606a:	183b      	adds	r3, r7, r0
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	0052      	lsls	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006072:	183b      	adds	r3, r7, r0
 8006074:	2200      	movs	r2, #0
 8006076:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 800607e:	2101      	movs	r1, #1
 8006080:	430a      	orrs	r2, r1
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
 8006084:	4b2a      	ldr	r3, [pc, #168]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8006090:	183a      	adds	r2, r7, r0
 8006092:	23a0      	movs	r3, #160	; 0xa0
 8006094:	05db      	lsls	r3, r3, #23
 8006096:	0011      	movs	r1, r2
 8006098:	0018      	movs	r0, r3
 800609a:	f7fe fa3f 	bl	800451c <HAL_GPIO_Init>
 800609e:	e038      	b.n	8006112 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d11a      	bne.n	80060dc <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 80060a6:	201c      	movs	r0, #28
 80060a8:	183b      	adds	r3, r7, r0
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	0192      	lsls	r2, r2, #6
 80060ae:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 80060b0:	183b      	adds	r3, r7, r0
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 80060b6:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060bc:	2102      	movs	r1, #2
 80060be:	430a      	orrs	r2, r1
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80060c2:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	2202      	movs	r2, #2
 80060c8:	4013      	ands	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80060ce:	183b      	adds	r3, r7, r0
 80060d0:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_RCC_MCOConfig+0x100>)
 80060d2:	0019      	movs	r1, r3
 80060d4:	0010      	movs	r0, r2
 80060d6:	f7fe fa21 	bl	800451c <HAL_GPIO_Init>
 80060da:	e01a      	b.n	8006112 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80060dc:	201c      	movs	r0, #28
 80060de:	183b      	adds	r3, r7, r0
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80060e6:	183b      	adds	r3, r7, r0
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060f2:	2101      	movs	r1, #1
 80060f4:	430a      	orrs	r2, r1
 80060f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80060f8:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	4013      	ands	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006104:	183a      	adds	r2, r7, r0
 8006106:	23a0      	movs	r3, #160	; 0xa0
 8006108:	05db      	lsls	r3, r3, #23
 800610a:	0011      	movs	r1, r2
 800610c:	0018      	movs	r0, r3
 800610e:	f7fe fa05 	bl	800451c <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4a08      	ldr	r2, [pc, #32]	; (8006138 <HAL_RCC_MCOConfig+0x104>)
 8006118:	4013      	ands	r3, r2
 800611a:	0019      	movs	r1, r3
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	431a      	orrs	r2, r3
 8006122:	4b03      	ldr	r3, [pc, #12]	; (8006130 <HAL_RCC_MCOConfig+0xfc>)
 8006124:	430a      	orrs	r2, r1
 8006126:	60da      	str	r2, [r3, #12]
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b00d      	add	sp, #52	; 0x34
 800612e:	bd90      	pop	{r4, r7, pc}
 8006130:	40021000 	.word	0x40021000
 8006134:	50000400 	.word	0x50000400
 8006138:	80ffffff 	.word	0x80ffffff

0800613c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800613c:	b5b0      	push	{r4, r5, r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006142:	4b4c      	ldr	r3, [pc, #304]	; (8006274 <HAL_RCC_GetSysClockFreq+0x138>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614a:	230c      	movs	r3, #12
 800614c:	4013      	ands	r3, r2
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d014      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x40>
 8006152:	d900      	bls.n	8006156 <HAL_RCC_GetSysClockFreq+0x1a>
 8006154:	e07b      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x112>
 8006156:	2b04      	cmp	r3, #4
 8006158:	d002      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x24>
 800615a:	2b08      	cmp	r3, #8
 800615c:	d00b      	beq.n	8006176 <HAL_RCC_GetSysClockFreq+0x3a>
 800615e:	e076      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006160:	4b44      	ldr	r3, [pc, #272]	; (8006274 <HAL_RCC_GetSysClockFreq+0x138>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2210      	movs	r2, #16
 8006166:	4013      	ands	r3, r2
 8006168:	d002      	beq.n	8006170 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800616a:	4b43      	ldr	r3, [pc, #268]	; (8006278 <HAL_RCC_GetSysClockFreq+0x13c>)
 800616c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800616e:	e07c      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006170:	4b42      	ldr	r3, [pc, #264]	; (800627c <HAL_RCC_GetSysClockFreq+0x140>)
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006174:	e079      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006176:	4b42      	ldr	r3, [pc, #264]	; (8006280 <HAL_RCC_GetSysClockFreq+0x144>)
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800617a:	e076      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	0c9a      	lsrs	r2, r3, #18
 8006180:	230f      	movs	r3, #15
 8006182:	401a      	ands	r2, r3
 8006184:	4b3f      	ldr	r3, [pc, #252]	; (8006284 <HAL_RCC_GetSysClockFreq+0x148>)
 8006186:	5c9b      	ldrb	r3, [r3, r2]
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	0d9a      	lsrs	r2, r3, #22
 800618e:	2303      	movs	r3, #3
 8006190:	4013      	ands	r3, r2
 8006192:	3301      	adds	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_GetSysClockFreq+0x138>)
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	4013      	ands	r3, r2
 80061a0:	d01a      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	4a35      	ldr	r2, [pc, #212]	; (8006280 <HAL_RCC_GetSysClockFreq+0x144>)
 80061ac:	2300      	movs	r3, #0
 80061ae:	69b8      	ldr	r0, [r7, #24]
 80061b0:	69f9      	ldr	r1, [r7, #28]
 80061b2:	f7fa f9d3 	bl	800055c <__aeabi_lmul>
 80061b6:	0002      	movs	r2, r0
 80061b8:	000b      	movs	r3, r1
 80061ba:	0010      	movs	r0, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f7fa f9a7 	bl	800051c <__aeabi_uldivmod>
 80061ce:	0002      	movs	r2, r0
 80061d0:	000b      	movs	r3, r1
 80061d2:	0013      	movs	r3, r2
 80061d4:	637b      	str	r3, [r7, #52]	; 0x34
 80061d6:	e037      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80061d8:	4b26      	ldr	r3, [pc, #152]	; (8006274 <HAL_RCC_GetSysClockFreq+0x138>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2210      	movs	r2, #16
 80061de:	4013      	ands	r3, r2
 80061e0:	d01a      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	4a23      	ldr	r2, [pc, #140]	; (8006278 <HAL_RCC_GetSysClockFreq+0x13c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	f7fa f9b3 	bl	800055c <__aeabi_lmul>
 80061f6:	0002      	movs	r2, r0
 80061f8:	000b      	movs	r3, r1
 80061fa:	0010      	movs	r0, r2
 80061fc:	0019      	movs	r1, r3
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f7fa f987 	bl	800051c <__aeabi_uldivmod>
 800620e:	0002      	movs	r2, r0
 8006210:	000b      	movs	r3, r1
 8006212:	0013      	movs	r3, r2
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
 8006216:	e017      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	0018      	movs	r0, r3
 800621c:	2300      	movs	r3, #0
 800621e:	0019      	movs	r1, r3
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_RCC_GetSysClockFreq+0x140>)
 8006222:	2300      	movs	r3, #0
 8006224:	f7fa f99a 	bl	800055c <__aeabi_lmul>
 8006228:	0002      	movs	r2, r0
 800622a:	000b      	movs	r3, r1
 800622c:	0010      	movs	r0, r2
 800622e:	0019      	movs	r1, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	001c      	movs	r4, r3
 8006234:	2300      	movs	r3, #0
 8006236:	001d      	movs	r5, r3
 8006238:	0022      	movs	r2, r4
 800623a:	002b      	movs	r3, r5
 800623c:	f7fa f96e 	bl	800051c <__aeabi_uldivmod>
 8006240:	0002      	movs	r2, r0
 8006242:	000b      	movs	r3, r1
 8006244:	0013      	movs	r3, r2
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800624c:	e00d      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCC_GetSysClockFreq+0x138>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	0b5b      	lsrs	r3, r3, #13
 8006254:	2207      	movs	r2, #7
 8006256:	4013      	ands	r3, r2
 8006258:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	3301      	adds	r3, #1
 800625e:	2280      	movs	r2, #128	; 0x80
 8006260:	0212      	lsls	r2, r2, #8
 8006262:	409a      	lsls	r2, r3
 8006264:	0013      	movs	r3, r2
 8006266:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006268:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b00e      	add	sp, #56	; 0x38
 8006272:	bdb0      	pop	{r4, r5, r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	003d0900 	.word	0x003d0900
 800627c:	00f42400 	.word	0x00f42400
 8006280:	007a1200 	.word	0x007a1200
 8006284:	0800b99c 	.word	0x0800b99c

08006288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <HAL_RCC_GetHCLKFreq+0x10>)
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	0018      	movs	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	20000000 	.word	0x20000000

0800629c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062a0:	f7ff fff2 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062a4:	0001      	movs	r1, r0
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	2207      	movs	r2, #7
 80062ae:	4013      	ands	r3, r2
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062b2:	5cd3      	ldrb	r3, [r2, r3]
 80062b4:	40d9      	lsrs	r1, r3
 80062b6:	000b      	movs	r3, r1
}
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	40021000 	.word	0x40021000
 80062c4:	0800b994 	.word	0x0800b994

080062c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062cc:	f7ff ffdc 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062d0:	0001      	movs	r1, r0
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	0adb      	lsrs	r3, r3, #11
 80062d8:	2207      	movs	r2, #7
 80062da:	4013      	ands	r3, r2
 80062dc:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062de:	5cd3      	ldrb	r3, [r2, r3]
 80062e0:	40d9      	lsrs	r1, r3
 80062e2:	000b      	movs	r3, r1
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	40021000 	.word	0x40021000
 80062f0:	0800b994 	.word	0x0800b994

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80062fc:	2017      	movs	r0, #23
 80062fe:	183b      	adds	r3, r7, r0
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2220      	movs	r2, #32
 800630a:	4013      	ands	r3, r2
 800630c:	d100      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800630e:	e0c7      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006310:	4b8b      	ldr	r3, [pc, #556]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	055b      	lsls	r3, r3, #21
 8006318:	4013      	ands	r3, r2
 800631a:	d109      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b88      	ldr	r3, [pc, #544]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800631e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006320:	4b87      	ldr	r3, [pc, #540]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	0549      	lsls	r1, r1, #21
 8006326:	430a      	orrs	r2, r1
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800632a:	183b      	adds	r3, r7, r0
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006330:	4b84      	ldr	r3, [pc, #528]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	4013      	ands	r3, r2
 800633a:	d11a      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800633c:	4b81      	ldr	r3, [pc, #516]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b80      	ldr	r3, [pc, #512]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	0049      	lsls	r1, r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800634a:	f7fd fe61 	bl	8004010 <HAL_GetTick>
 800634e:	0003      	movs	r3, r0
 8006350:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006352:	e008      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006354:	f7fd fe5c 	bl	8004010 <HAL_GetTick>
 8006358:	0002      	movs	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	; 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e0e8      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006366:	4b77      	ldr	r3, [pc, #476]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	2380      	movs	r3, #128	; 0x80
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	4013      	ands	r3, r2
 8006370:	d0f0      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006372:	4b73      	ldr	r3, [pc, #460]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	23c0      	movs	r3, #192	; 0xc0
 8006378:	039b      	lsls	r3, r3, #14
 800637a:	4013      	ands	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	23c0      	movs	r3, #192	; 0xc0
 8006384:	039b      	lsls	r3, r3, #14
 8006386:	4013      	ands	r3, r2
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	429a      	cmp	r2, r3
 800638c:	d013      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	23c0      	movs	r3, #192	; 0xc0
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	401a      	ands	r2, r3
 8006398:	23c0      	movs	r3, #192	; 0xc0
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	429a      	cmp	r2, r3
 800639e:	d10a      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063a0:	4b67      	ldr	r3, [pc, #412]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	401a      	ands	r2, r3
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0c0      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80063b6:	4b62      	ldr	r3, [pc, #392]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ba:	23c0      	movs	r3, #192	; 0xc0
 80063bc:	029b      	lsls	r3, r3, #10
 80063be:	4013      	ands	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03b      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	23c0      	movs	r3, #192	; 0xc0
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	4013      	ands	r3, r2
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d033      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2220      	movs	r2, #32
 80063de:	4013      	ands	r3, r2
 80063e0:	d02e      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80063e2:	4b57      	ldr	r3, [pc, #348]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ec:	4b54      	ldr	r3, [pc, #336]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063f0:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	0309      	lsls	r1, r1, #12
 80063f6:	430a      	orrs	r2, r1
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063fa:	4b51      	ldr	r3, [pc, #324]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fe:	4b50      	ldr	r3, [pc, #320]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006400:	4952      	ldr	r1, [pc, #328]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006402:	400a      	ands	r2, r1
 8006404:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006406:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4013      	ands	r3, r2
 8006414:	d014      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006416:	f7fd fdfb 	bl	8004010 <HAL_GetTick>
 800641a:	0003      	movs	r3, r0
 800641c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800641e:	e009      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006420:	f7fd fdf6 	bl	8004010 <HAL_GetTick>
 8006424:	0002      	movs	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	4a49      	ldr	r2, [pc, #292]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e081      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006434:	4b42      	ldr	r3, [pc, #264]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4013      	ands	r3, r2
 800643e:	d0ef      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	4013      	ands	r3, r2
 8006448:	d01f      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	23c0      	movs	r3, #192	; 0xc0
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	401a      	ands	r2, r3
 8006454:	23c0      	movs	r3, #192	; 0xc0
 8006456:	029b      	lsls	r3, r3, #10
 8006458:	429a      	cmp	r2, r3
 800645a:	d10c      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800645c:	4b38      	ldr	r3, [pc, #224]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a3c      	ldr	r2, [pc, #240]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006462:	4013      	ands	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	23c0      	movs	r3, #192	; 0xc0
 800646c:	039b      	lsls	r3, r3, #14
 800646e:	401a      	ands	r2, r3
 8006470:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	4b32      	ldr	r3, [pc, #200]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006478:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	23c0      	movs	r3, #192	; 0xc0
 8006480:	029b      	lsls	r3, r3, #10
 8006482:	401a      	ands	r2, r3
 8006484:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006486:	430a      	orrs	r2, r1
 8006488:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800648a:	2317      	movs	r3, #23
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006494:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006498:	4b29      	ldr	r3, [pc, #164]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800649a:	492f      	ldr	r1, [pc, #188]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800649c:	400a      	ands	r2, r1
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064aa:	4b25      	ldr	r3, [pc, #148]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ae:	2203      	movs	r2, #3
 80064b0:	4393      	bics	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064ba:	430a      	orrs	r2, r1
 80064bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2202      	movs	r2, #2
 80064c4:	4013      	ands	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064cc:	220c      	movs	r2, #12
 80064ce:	4393      	bics	r3, r2
 80064d0:	0019      	movs	r1, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064d8:	430a      	orrs	r2, r1
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2204      	movs	r2, #4
 80064e2:	4013      	ands	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064e6:	4b16      	ldr	r3, [pc, #88]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	0019      	movs	r1, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	4b12      	ldr	r3, [pc, #72]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064f6:	430a      	orrs	r2, r1
 80064f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2208      	movs	r2, #8
 8006500:	4013      	ands	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006508:	4a15      	ldr	r2, [pc, #84]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800650a:	4013      	ands	r3, r2
 800650c:	0019      	movs	r1, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006514:	430a      	orrs	r2, r1
 8006516:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2280      	movs	r2, #128	; 0x80
 800651e:	4013      	ands	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	4a0f      	ldr	r2, [pc, #60]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006528:	4013      	ands	r3, r2
 800652a:	0019      	movs	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006532:	430a      	orrs	r2, r1
 8006534:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b006      	add	sp, #24
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40021000 	.word	0x40021000
 8006544:	40007000 	.word	0x40007000
 8006548:	fffcffff 	.word	0xfffcffff
 800654c:	fff7ffff 	.word	0xfff7ffff
 8006550:	00001388 	.word	0x00001388
 8006554:	ffcfffff 	.word	0xffcfffff
 8006558:	efffffff 	.word	0xefffffff
 800655c:	fffff3ff 	.word	0xfffff3ff
 8006560:	ffffcfff 	.word	0xffffcfff
 8006564:	fff3ffff 	.word	0xfff3ffff

08006568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e083      	b.n	8006682 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	2382      	movs	r3, #130	; 0x82
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	429a      	cmp	r2, r3
 800658c:	d009      	beq.n	80065a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	61da      	str	r2, [r3, #28]
 8006594:	e005      	b.n	80065a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2251      	movs	r2, #81	; 0x51
 80065ac:	5c9b      	ldrb	r3, [r3, r2]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2250      	movs	r2, #80	; 0x50
 80065b8:	2100      	movs	r1, #0
 80065ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fd f9be 	bl	8003940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2251      	movs	r2, #81	; 0x51
 80065c8:	2102      	movs	r1, #2
 80065ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2140      	movs	r1, #64	; 0x40
 80065d8:	438a      	bics	r2, r1
 80065da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	2382      	movs	r3, #130	; 0x82
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	401a      	ands	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6899      	ldr	r1, [r3, #8]
 80065ea:	2384      	movs	r3, #132	; 0x84
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	400b      	ands	r3, r1
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68d9      	ldr	r1, [r3, #12]
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	400b      	ands	r3, r1
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2102      	movs	r1, #2
 8006604:	400b      	ands	r3, r1
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	2101      	movs	r1, #1
 800660e:	400b      	ands	r3, r1
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	400b      	ands	r3, r1
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	2138      	movs	r1, #56	; 0x38
 8006624:	400b      	ands	r3, r1
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	2180      	movs	r1, #128	; 0x80
 800662e:	400b      	ands	r3, r1
 8006630:	431a      	orrs	r2, r3
 8006632:	0011      	movs	r1, r2
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	019b      	lsls	r3, r3, #6
 800663c:	401a      	ands	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	2204      	movs	r2, #4
 800664e:	4013      	ands	r3, r2
 8006650:	0019      	movs	r1, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2210      	movs	r2, #16
 8006658:	401a      	ands	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <HAL_SPI_Init+0x124>)
 800666e:	400a      	ands	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2251      	movs	r2, #81	; 0x51
 800667c:	2101      	movs	r1, #1
 800667e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b002      	add	sp, #8
 8006688:	bd80      	pop	{r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	fffff7ff 	.word	0xfffff7ff

08006690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	001a      	movs	r2, r3
 800669e:	1cbb      	adds	r3, r7, #2
 80066a0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066a2:	2301      	movs	r3, #1
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066a6:	232b      	movs	r3, #43	; 0x2b
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2250      	movs	r2, #80	; 0x50
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_SPI_TransmitReceive+0x2c>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e1b0      	b.n	8006a1e <HAL_SPI_TransmitReceive+0x38e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2250      	movs	r2, #80	; 0x50
 80066c0:	2101      	movs	r1, #1
 80066c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c4:	f7fd fca4 	bl	8004010 <HAL_GetTick>
 80066c8:	0003      	movs	r3, r0
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066cc:	2023      	movs	r0, #35	; 0x23
 80066ce:	183b      	adds	r3, r7, r0
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	2151      	movs	r1, #81	; 0x51
 80066d4:	5c52      	ldrb	r2, [r2, r1]
 80066d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066de:	231a      	movs	r3, #26
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	1cba      	adds	r2, r7, #2
 80066e4:	8812      	ldrh	r2, [r2, #0]
 80066e6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066e8:	183b      	adds	r3, r7, r0
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d011      	beq.n	8006714 <HAL_SPI_TransmitReceive+0x84>
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	2382      	movs	r3, #130	; 0x82
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d107      	bne.n	800670a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <HAL_SPI_TransmitReceive+0x7a>
 8006702:	183b      	adds	r3, r7, r0
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d004      	beq.n	8006714 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800670a:	232b      	movs	r3, #43	; 0x2b
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2202      	movs	r2, #2
 8006710:	701a      	strb	r2, [r3, #0]
    goto error;
 8006712:	e17d      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d006      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x98>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x98>
 8006720:	1cbb      	adds	r3, r7, #2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006728:	232b      	movs	r3, #43	; 0x2b
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006730:	e16e      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2251      	movs	r2, #81	; 0x51
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b04      	cmp	r3, #4
 800673c:	d003      	beq.n	8006746 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2251      	movs	r2, #81	; 0x51
 8006742:	2105      	movs	r1, #5
 8006744:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1cba      	adds	r2, r7, #2
 8006756:	8812      	ldrh	r2, [r2, #0]
 8006758:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1cba      	adds	r2, r7, #2
 800675e:	8812      	ldrh	r2, [r2, #0]
 8006760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1cba      	adds	r2, r7, #2
 800676c:	8812      	ldrh	r2, [r2, #0]
 800676e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1cba      	adds	r2, r7, #2
 8006774:	8812      	ldrh	r2, [r2, #0]
 8006776:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2240      	movs	r2, #64	; 0x40
 800678c:	4013      	ands	r3, r2
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d007      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d000      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x120>
 80067ae:	e07f      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x134>
 80067b8:	231a      	movs	r3, #26
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d000      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x134>
 80067c2:	e06a      	b.n	800689a <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	881a      	ldrh	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	1c9a      	adds	r2, r3, #2
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e8:	e057      	b.n	800689a <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2202      	movs	r2, #2
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d11b      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x1a0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x1a0>
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d113      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2201      	movs	r2, #1
 8006838:	4013      	ands	r3, r2
 800683a:	2b01      	cmp	r3, #1
 800683c:	d119      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x1e2>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d014      	beq.n	8006872 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	b292      	uxth	r2, r2
 8006854:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800686e:	2301      	movs	r3, #1
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006872:	f7fd fbcd 	bl	8004010 <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687e:	429a      	cmp	r2, r3
 8006880:	d80b      	bhi.n	800689a <HAL_SPI_TransmitReceive+0x20a>
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	3301      	adds	r3, #1
 8006886:	d008      	beq.n	800689a <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006888:	232b      	movs	r3, #43	; 0x2b
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	2203      	movs	r2, #3
 800688e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2251      	movs	r2, #81	; 0x51
 8006894:	2101      	movs	r1, #1
 8006896:	5499      	strb	r1, [r3, r2]
        goto error;
 8006898:	e0ba      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1a2      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x15a>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d19d      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x15a>
 80068ae:	e083      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x234>
 80068b8:	231a      	movs	r3, #26
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d000      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x234>
 80068c2:	e06f      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ea:	e05b      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2202      	movs	r2, #2
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d11c      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x2a4>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x2a4>
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d114      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2201      	movs	r2, #1
 800693c:	4013      	ands	r3, r2
 800693e:	2b01      	cmp	r3, #1
 8006940:	d119      	bne.n	8006976 <HAL_SPI_TransmitReceive+0x2e6>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d014      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006972:	2301      	movs	r3, #1
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006976:	f7fd fb4b 	bl	8004010 <HAL_GetTick>
 800697a:	0002      	movs	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006982:	429a      	cmp	r2, r3
 8006984:	d802      	bhi.n	800698c <HAL_SPI_TransmitReceive+0x2fc>
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	3301      	adds	r3, #1
 800698a:	d102      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x302>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	2b00      	cmp	r3, #0
 8006990:	d108      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006992:	232b      	movs	r3, #43	; 0x2b
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	2203      	movs	r2, #3
 8006998:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2251      	movs	r2, #81	; 0x51
 800699e:	2101      	movs	r1, #1
 80069a0:	5499      	strb	r1, [r3, r2]
        goto error;
 80069a2:	e035      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d19e      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x25c>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d199      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 f8c0 	bl	8006b44 <SPI_EndRxTxTransaction>
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80069c8:	232b      	movs	r3, #43	; 0x2b
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	2201      	movs	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069d6:	e01b      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80069fe:	232b      	movs	r3, #43	; 0x2b
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e003      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2251      	movs	r2, #81	; 0x51
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2250      	movs	r2, #80	; 0x50
 8006a14:	2100      	movs	r1, #0
 8006a16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a18:	232b      	movs	r3, #43	; 0x2b
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	781b      	ldrb	r3, [r3, #0]
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b00c      	add	sp, #48	; 0x30
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	1dfb      	adds	r3, r7, #7
 8006a36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a38:	f7fd faea 	bl	8004010 <HAL_GetTick>
 8006a3c:	0002      	movs	r2, r0
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	1a9b      	subs	r3, r3, r2
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a48:	f7fd fae2 	bl	8004010 <HAL_GetTick>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a50:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	015b      	lsls	r3, r3, #5
 8006a56:	0d1b      	lsrs	r3, r3, #20
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	4353      	muls	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5e:	e058      	b.n	8006b12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	d055      	beq.n	8006b12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a66:	f7fd fad3 	bl	8004010 <HAL_GetTick>
 8006a6a:	0002      	movs	r2, r0
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d902      	bls.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d142      	bne.n	8006b02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	21e0      	movs	r1, #224	; 0xe0
 8006a88:	438a      	bics	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	2382      	movs	r3, #130	; 0x82
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d113      	bne.n	8006ac0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d005      	beq.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d107      	bne.n	8006ac0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2140      	movs	r1, #64	; 0x40
 8006abc:	438a      	bics	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	019b      	lsls	r3, r3, #6
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d110      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	491a      	ldr	r1, [pc, #104]	; (8006b40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006ad8:	400a      	ands	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	0189      	lsls	r1, r1, #6
 8006aea:	430a      	orrs	r2, r1
 8006aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2251      	movs	r2, #81	; 0x51
 8006af2:	2101      	movs	r1, #1
 8006af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2250      	movs	r2, #80	; 0x50
 8006afa:	2100      	movs	r1, #0
 8006afc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e017      	b.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	425a      	negs	r2, r3
 8006b22:	4153      	adcs	r3, r2
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	001a      	movs	r2, r3
 8006b28:	1dfb      	adds	r3, r7, #7
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d197      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	0018      	movs	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b008      	add	sp, #32
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	20000000 	.word	0x20000000
 8006b40:	ffffdfff 	.word	0xffffdfff

08006b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b50:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <SPI_EndRxTxTransaction+0x84>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	491d      	ldr	r1, [pc, #116]	; (8006bcc <SPI_EndRxTxTransaction+0x88>)
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7f9 faf2 	bl	8000140 <__udivsi3>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	001a      	movs	r2, r3
 8006b60:	0013      	movs	r3, r2
 8006b62:	015b      	lsls	r3, r3, #5
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	189b      	adds	r3, r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	2382      	movs	r3, #130	; 0x82
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d112      	bne.n	8006ba0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	0013      	movs	r3, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	f7ff ff4e 	bl	8006a28 <SPI_WaitFlagStateUntilTimeout>
 8006b8c:	1e03      	subs	r3, r0, #0
 8006b8e:	d016      	beq.n	8006bbe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	2220      	movs	r2, #32
 8006b96:	431a      	orrs	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e00f      	b.n	8006bc0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2280      	movs	r2, #128	; 0x80
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d0f2      	beq.n	8006ba0 <SPI_EndRxTxTransaction+0x5c>
 8006bba:	e000      	b.n	8006bbe <SPI_EndRxTxTransaction+0x7a>
        break;
 8006bbc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b006      	add	sp, #24
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000000 	.word	0x20000000
 8006bcc:	016e3600 	.word	0x016e3600

08006bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e032      	b.n	8006c48 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2239      	movs	r2, #57	; 0x39
 8006be6:	5c9b      	ldrb	r3, [r3, r2]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2238      	movs	r2, #56	; 0x38
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7fc fee5 	bl	80039c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2239      	movs	r2, #57	; 0x39
 8006c02:	2102      	movs	r1, #2
 8006c04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	0019      	movs	r1, r3
 8006c10:	0010      	movs	r0, r2
 8006c12:	f000 fdd7 	bl	80077c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223e      	movs	r2, #62	; 0x3e
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	223a      	movs	r2, #58	; 0x3a
 8006c22:	2101      	movs	r1, #1
 8006c24:	5499      	strb	r1, [r3, r2]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	223b      	movs	r2, #59	; 0x3b
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	223c      	movs	r2, #60	; 0x3c
 8006c32:	2101      	movs	r1, #1
 8006c34:	5499      	strb	r1, [r3, r2]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223d      	movs	r2, #61	; 0x3d
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2239      	movs	r2, #57	; 0x39
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2101      	movs	r1, #1
 8006c64:	438a      	bics	r2, r1
 8006c66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_TIM_Base_Stop_IT+0x48>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_Base_Stop_IT+0x34>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2101      	movs	r1, #1
 8006c80:	438a      	bics	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2239      	movs	r2, #57	; 0x39
 8006c88:	2101      	movs	r1, #1
 8006c8a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b002      	add	sp, #8
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	00001111 	.word	0x00001111

08006c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e032      	b.n	8006d14 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2239      	movs	r2, #57	; 0x39
 8006cb2:	5c9b      	ldrb	r3, [r3, r2]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2238      	movs	r2, #56	; 0x38
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f829 	bl	8006d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2239      	movs	r2, #57	; 0x39
 8006cce:	2102      	movs	r1, #2
 8006cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	0019      	movs	r1, r3
 8006cdc:	0010      	movs	r0, r2
 8006cde:	f000 fd71 	bl	80077c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	223e      	movs	r2, #62	; 0x3e
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	223a      	movs	r2, #58	; 0x3a
 8006cee:	2101      	movs	r1, #1
 8006cf0:	5499      	strb	r1, [r3, r2]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	223b      	movs	r2, #59	; 0x3b
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	5499      	strb	r1, [r3, r2]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	223c      	movs	r2, #60	; 0x3c
 8006cfe:	2101      	movs	r1, #1
 8006d00:	5499      	strb	r1, [r3, r2]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	223d      	movs	r2, #61	; 0x3d
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2239      	movs	r2, #57	; 0x39
 8006d0e:	2101      	movs	r1, #1
 8006d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b002      	add	sp, #8
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d24:	46c0      	nop			; (mov r8, r8)
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d108      	bne.n	8006d4e <HAL_TIM_PWM_Start+0x22>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	223a      	movs	r2, #58	; 0x3a
 8006d40:	5c9b      	ldrb	r3, [r3, r2]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	1e5a      	subs	r2, r3, #1
 8006d48:	4193      	sbcs	r3, r2
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e01f      	b.n	8006d8e <HAL_TIM_PWM_Start+0x62>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d108      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x3a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	223b      	movs	r2, #59	; 0x3b
 8006d58:	5c9b      	ldrb	r3, [r3, r2]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	4193      	sbcs	r3, r2
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	e013      	b.n	8006d8e <HAL_TIM_PWM_Start+0x62>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d108      	bne.n	8006d7e <HAL_TIM_PWM_Start+0x52>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	223c      	movs	r2, #60	; 0x3c
 8006d70:	5c9b      	ldrb	r3, [r3, r2]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	1e5a      	subs	r2, r3, #1
 8006d78:	4193      	sbcs	r3, r2
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e007      	b.n	8006d8e <HAL_TIM_PWM_Start+0x62>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	223d      	movs	r2, #61	; 0x3d
 8006d82:	5c9b      	ldrb	r3, [r3, r2]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	1e5a      	subs	r2, r3, #1
 8006d8a:	4193      	sbcs	r3, r2
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e04d      	b.n	8006e32 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Start+0x7a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	223a      	movs	r2, #58	; 0x3a
 8006da0:	2102      	movs	r1, #2
 8006da2:	5499      	strb	r1, [r3, r2]
 8006da4:	e013      	b.n	8006dce <HAL_TIM_PWM_Start+0xa2>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start+0x8a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	223b      	movs	r2, #59	; 0x3b
 8006db0:	2102      	movs	r1, #2
 8006db2:	5499      	strb	r1, [r3, r2]
 8006db4:	e00b      	b.n	8006dce <HAL_TIM_PWM_Start+0xa2>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Start+0x9a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	223c      	movs	r2, #60	; 0x3c
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	5499      	strb	r1, [r3, r2]
 8006dc4:	e003      	b.n	8006dce <HAL_TIM_PWM_Start+0xa2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	223d      	movs	r2, #61	; 0x3d
 8006dca:	2102      	movs	r1, #2
 8006dcc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f001 f804 	bl	8007de4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	05db      	lsls	r3, r3, #23
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_PWM_Start+0xd0>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_TIM_PWM_Start+0x110>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_PWM_Start+0xd0>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a12      	ldr	r2, [pc, #72]	; (8006e40 <HAL_TIM_PWM_Start+0x114>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d111      	bne.n	8006e20 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2207      	movs	r2, #7
 8006e04:	4013      	ands	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d010      	beq.n	8006e30 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2101      	movs	r1, #1
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1e:	e007      	b.n	8006e30 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b004      	add	sp, #16
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	40010800 	.word	0x40010800
 8006e40:	40011400 	.word	0x40011400

08006e44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	2200      	movs	r2, #0
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 ffc4 	bl	8007de4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	4a16      	ldr	r2, [pc, #88]	; (8006ebc <HAL_TIM_PWM_Stop+0x78>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_PWM_Stop+0x34>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2101      	movs	r1, #1
 8006e74:	438a      	bics	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <HAL_TIM_PWM_Stop+0x44>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	223a      	movs	r2, #58	; 0x3a
 8006e82:	2101      	movs	r1, #1
 8006e84:	5499      	strb	r1, [r3, r2]
 8006e86:	e013      	b.n	8006eb0 <HAL_TIM_PWM_Stop+0x6c>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d104      	bne.n	8006e98 <HAL_TIM_PWM_Stop+0x54>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	223b      	movs	r2, #59	; 0x3b
 8006e92:	2101      	movs	r1, #1
 8006e94:	5499      	strb	r1, [r3, r2]
 8006e96:	e00b      	b.n	8006eb0 <HAL_TIM_PWM_Stop+0x6c>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d104      	bne.n	8006ea8 <HAL_TIM_PWM_Stop+0x64>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	223c      	movs	r2, #60	; 0x3c
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	5499      	strb	r1, [r3, r2]
 8006ea6:	e003      	b.n	8006eb0 <HAL_TIM_PWM_Stop+0x6c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	223d      	movs	r2, #61	; 0x3d
 8006eac:	2101      	movs	r1, #1
 8006eae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	00001111 	.word	0x00001111

08006ec0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e032      	b.n	8006f38 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2239      	movs	r2, #57	; 0x39
 8006ed6:	5c9b      	ldrb	r3, [r3, r2]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d107      	bne.n	8006eee <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2238      	movs	r2, #56	; 0x38
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f000 f829 	bl	8006f40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2239      	movs	r2, #57	; 0x39
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	0019      	movs	r1, r3
 8006f00:	0010      	movs	r0, r2
 8006f02:	f000 fc5f 	bl	80077c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	223e      	movs	r2, #62	; 0x3e
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	223a      	movs	r2, #58	; 0x3a
 8006f12:	2101      	movs	r1, #1
 8006f14:	5499      	strb	r1, [r3, r2]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	223b      	movs	r2, #59	; 0x3b
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	223c      	movs	r2, #60	; 0x3c
 8006f22:	2101      	movs	r1, #1
 8006f24:	5499      	strb	r1, [r3, r2]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	223d      	movs	r2, #61	; 0x3d
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2239      	movs	r2, #57	; 0x39
 8006f32:	2101      	movs	r1, #1
 8006f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b002      	add	sp, #8
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f48:	46c0      	nop			; (mov r8, r8)
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b002      	add	sp, #8
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	230f      	movs	r3, #15
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_IC_Start_IT+0x22>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	223a      	movs	r2, #58	; 0x3a
 8006f6c:	5c9b      	ldrb	r3, [r3, r2]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e013      	b.n	8006f9a <HAL_TIM_IC_Start_IT+0x4a>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_IC_Start_IT+0x32>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	223b      	movs	r2, #59	; 0x3b
 8006f7c:	5c9b      	ldrb	r3, [r3, r2]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	e00b      	b.n	8006f9a <HAL_TIM_IC_Start_IT+0x4a>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_IC_Start_IT+0x42>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	223c      	movs	r2, #60	; 0x3c
 8006f8c:	5c9b      	ldrb	r3, [r3, r2]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	e003      	b.n	8006f9a <HAL_TIM_IC_Start_IT+0x4a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	223d      	movs	r2, #61	; 0x3d
 8006f96:	5c9b      	ldrb	r3, [r3, r2]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	210e      	movs	r1, #14
 8006f9c:	187a      	adds	r2, r7, r1
 8006f9e:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa0:	187b      	adds	r3, r7, r1
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d001      	beq.n	8006fac <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e090      	b.n	80070ce <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <HAL_TIM_IC_Start_IT+0x6c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	223a      	movs	r2, #58	; 0x3a
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	5499      	strb	r1, [r3, r2]
 8006fba:	e013      	b.n	8006fe4 <HAL_TIM_IC_Start_IT+0x94>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d104      	bne.n	8006fcc <HAL_TIM_IC_Start_IT+0x7c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	223b      	movs	r2, #59	; 0x3b
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	5499      	strb	r1, [r3, r2]
 8006fca:	e00b      	b.n	8006fe4 <HAL_TIM_IC_Start_IT+0x94>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d104      	bne.n	8006fdc <HAL_TIM_IC_Start_IT+0x8c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	223c      	movs	r2, #60	; 0x3c
 8006fd6:	2102      	movs	r1, #2
 8006fd8:	5499      	strb	r1, [r3, r2]
 8006fda:	e003      	b.n	8006fe4 <HAL_TIM_IC_Start_IT+0x94>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	223d      	movs	r2, #61	; 0x3d
 8006fe0:	2102      	movs	r1, #2
 8006fe2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d02a      	beq.n	8007040 <HAL_TIM_IC_Start_IT+0xf0>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b0c      	cmp	r3, #12
 8006fee:	d830      	bhi.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d01b      	beq.n	800702e <HAL_TIM_IC_Start_IT+0xde>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d82a      	bhi.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IC_Start_IT+0xba>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d009      	beq.n	800701c <HAL_TIM_IC_Start_IT+0xcc>
 8007008:	e023      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2102      	movs	r1, #2
 8007016:	430a      	orrs	r2, r1
 8007018:	60da      	str	r2, [r3, #12]
      break;
 800701a:	e01f      	b.n	800705c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2104      	movs	r1, #4
 8007028:	430a      	orrs	r2, r1
 800702a:	60da      	str	r2, [r3, #12]
      break;
 800702c:	e016      	b.n	800705c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2108      	movs	r1, #8
 800703a:	430a      	orrs	r2, r1
 800703c:	60da      	str	r2, [r3, #12]
      break;
 800703e:	e00d      	b.n	800705c <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2110      	movs	r1, #16
 800704c:	430a      	orrs	r2, r1
 800704e:	60da      	str	r2, [r3, #12]
      break;
 8007050:	e004      	b.n	800705c <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8007052:	230f      	movs	r3, #15
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800705c:	230f      	movs	r3, #15
 800705e:	18fb      	adds	r3, r7, r3
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d130      	bne.n	80070c8 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	2201      	movs	r2, #1
 800706e:	0018      	movs	r0, r3
 8007070:	f000 feb8 	bl	8007de4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	429a      	cmp	r2, r3
 800707e:	d009      	beq.n	8007094 <HAL_TIM_IC_Start_IT+0x144>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <HAL_TIM_IC_Start_IT+0x188>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIM_IC_Start_IT+0x144>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a13      	ldr	r2, [pc, #76]	; (80070dc <HAL_TIM_IC_Start_IT+0x18c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d111      	bne.n	80070b8 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2207      	movs	r2, #7
 800709c:	4013      	ands	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d010      	beq.n	80070c8 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2101      	movs	r1, #1
 80070b2:	430a      	orrs	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b6:	e007      	b.n	80070c8 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2101      	movs	r1, #1
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80070c8:	230f      	movs	r3, #15
 80070ca:	18fb      	adds	r3, r7, r3
 80070cc:	781b      	ldrb	r3, [r3, #0]
}
 80070ce:	0018      	movs	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b004      	add	sp, #16
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	40010800 	.word	0x40010800
 80070dc:	40011400 	.word	0x40011400

080070e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2202      	movs	r2, #2
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d124      	bne.n	8007140 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2202      	movs	r2, #2
 80070fe:	4013      	ands	r3, r2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d11d      	bne.n	8007140 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2203      	movs	r2, #3
 800710a:	4252      	negs	r2, r2
 800710c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2203      	movs	r2, #3
 800711c:	4013      	ands	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	0018      	movs	r0, r3
 8007124:	f7fb fce8 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8007128:	e007      	b.n	800713a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	0018      	movs	r0, r3
 800712e:	f000 fb31 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fb35 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2204      	movs	r2, #4
 8007148:	4013      	ands	r3, r2
 800714a:	2b04      	cmp	r3, #4
 800714c:	d125      	bne.n	800719a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2204      	movs	r2, #4
 8007156:	4013      	ands	r3, r2
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11e      	bne.n	800719a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2205      	movs	r2, #5
 8007162:	4252      	negs	r2, r2
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	23c0      	movs	r3, #192	; 0xc0
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4013      	ands	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0018      	movs	r0, r3
 800717e:	f7fb fcbb 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8007182:	e007      	b.n	8007194 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	0018      	movs	r0, r3
 8007188:	f000 fb04 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0018      	movs	r0, r3
 8007190:	f000 fb08 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2208      	movs	r2, #8
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d124      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2208      	movs	r2, #8
 80071b0:	4013      	ands	r3, r2
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d11d      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2209      	movs	r2, #9
 80071bc:	4252      	negs	r2, r2
 80071be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2204      	movs	r2, #4
 80071c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	2203      	movs	r2, #3
 80071ce:	4013      	ands	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7fb fc8f 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 80071da:	e007      	b.n	80071ec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 fad8 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 fadc 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2210      	movs	r2, #16
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d125      	bne.n	800724c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2210      	movs	r2, #16
 8007208:	4013      	ands	r3, r2
 800720a:	2b10      	cmp	r3, #16
 800720c:	d11e      	bne.n	800724c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2211      	movs	r2, #17
 8007214:	4252      	negs	r2, r2
 8007216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2208      	movs	r2, #8
 800721c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	23c0      	movs	r3, #192	; 0xc0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4013      	ands	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	0018      	movs	r0, r3
 8007230:	f7fb fc62 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8007234:	e007      	b.n	8007246 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f000 faab 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	0018      	movs	r0, r3
 8007242:	f000 faaf 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2201      	movs	r2, #1
 8007254:	4013      	ands	r3, r2
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10f      	bne.n	800727a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	4013      	ands	r3, r2
 8007264:	2b01      	cmp	r3, #1
 8007266:	d108      	bne.n	800727a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2202      	movs	r2, #2
 800726e:	4252      	negs	r2, r2
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0018      	movs	r0, r3
 8007276:	f7fb fc63 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2240      	movs	r2, #64	; 0x40
 8007282:	4013      	ands	r3, r2
 8007284:	2b40      	cmp	r3, #64	; 0x40
 8007286:	d10f      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	4013      	ands	r3, r2
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d108      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2241      	movs	r2, #65	; 0x41
 800729c:	4252      	negs	r2, r2
 800729e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	0018      	movs	r0, r3
 80072a4:	f000 fa86 	bl	80077b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a8:	46c0      	nop			; (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072bc:	2317      	movs	r3, #23
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2238      	movs	r2, #56	; 0x38
 80072c8:	5c9b      	ldrb	r3, [r3, r2]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_IC_ConfigChannel+0x22>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e08c      	b.n	80073ec <HAL_TIM_IC_ConfigChannel+0x13c>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2238      	movs	r2, #56	; 0x38
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11b      	bne.n	8007318 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80072f0:	f000 fbc0 	bl	8007a74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	210c      	movs	r1, #12
 8007300:	438a      	bics	r2, r1
 8007302:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6999      	ldr	r1, [r3, #24]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	619a      	str	r2, [r3, #24]
 8007316:	e062      	b.n	80073de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d11c      	bne.n	8007358 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800732e:	f000 fc25 	bl	8007b7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	492d      	ldr	r1, [pc, #180]	; (80073f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800733e:	400a      	ands	r2, r1
 8007340:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6999      	ldr	r1, [r3, #24]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	021a      	lsls	r2, r3, #8
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	619a      	str	r2, [r3, #24]
 8007356:	e042      	b.n	80073de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b08      	cmp	r3, #8
 800735c:	d11b      	bne.n	8007396 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800736e:	f000 fc79 	bl	8007c64 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	210c      	movs	r1, #12
 800737e:	438a      	bics	r2, r1
 8007380:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69d9      	ldr	r1, [r3, #28]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	61da      	str	r2, [r3, #28]
 8007394:	e023      	b.n	80073de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b0c      	cmp	r3, #12
 800739a:	d11c      	bne.n	80073d6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80073ac:	f000 fc9a 	bl	8007ce4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	490e      	ldr	r1, [pc, #56]	; (80073f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80073bc:	400a      	ands	r2, r1
 80073be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69d9      	ldr	r1, [r3, #28]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	021a      	lsls	r2, r3, #8
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	61da      	str	r2, [r3, #28]
 80073d4:	e003      	b.n	80073de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80073d6:	2317      	movs	r3, #23
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	2201      	movs	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2238      	movs	r2, #56	; 0x38
 80073e2:	2100      	movs	r1, #0
 80073e4:	5499      	strb	r1, [r3, r2]

  return status;
 80073e6:	2317      	movs	r3, #23
 80073e8:	18fb      	adds	r3, r7, r3
 80073ea:	781b      	ldrb	r3, [r3, #0]
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b006      	add	sp, #24
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	fffff3ff 	.word	0xfffff3ff

080073f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2317      	movs	r3, #23
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2238      	movs	r2, #56	; 0x38
 8007410:	5c9b      	ldrb	r3, [r3, r2]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007416:	2302      	movs	r3, #2
 8007418:	e0ad      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2238      	movs	r2, #56	; 0x38
 800741e:	2101      	movs	r1, #1
 8007420:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d100      	bne.n	800742a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007428:	e076      	b.n	8007518 <HAL_TIM_PWM_ConfigChannel+0x120>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d900      	bls.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007430:	e095      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b08      	cmp	r3, #8
 8007436:	d04e      	beq.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b08      	cmp	r3, #8
 800743c:	d900      	bls.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x48>
 800743e:	e08e      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d021      	beq.n	8007490 <HAL_TIM_PWM_ConfigChannel+0x98>
 800744c:	e087      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0011      	movs	r1, r2
 8007456:	0018      	movs	r0, r3
 8007458:	f000 fa08 	bl	800786c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2108      	movs	r1, #8
 8007468:	430a      	orrs	r2, r1
 800746a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2104      	movs	r1, #4
 8007478:	438a      	bics	r2, r1
 800747a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6999      	ldr	r1, [r3, #24]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	619a      	str	r2, [r3, #24]
      break;
 800748e:	e06b      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	0011      	movs	r1, r2
 8007498:	0018      	movs	r0, r3
 800749a:	f000 fa23 	bl	80078e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2180      	movs	r1, #128	; 0x80
 80074aa:	0109      	lsls	r1, r1, #4
 80074ac:	430a      	orrs	r2, r1
 80074ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4931      	ldr	r1, [pc, #196]	; (8007580 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80074bc:	400a      	ands	r2, r1
 80074be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	021a      	lsls	r2, r3, #8
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	619a      	str	r2, [r3, #24]
      break;
 80074d4:	e048      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0011      	movs	r1, r2
 80074de:	0018      	movs	r0, r3
 80074e0:	f000 fa42 	bl	8007968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2108      	movs	r1, #8
 80074f0:	430a      	orrs	r2, r1
 80074f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2104      	movs	r1, #4
 8007500:	438a      	bics	r2, r1
 8007502:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69d9      	ldr	r1, [r3, #28]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	61da      	str	r2, [r3, #28]
      break;
 8007516:	e027      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	0011      	movs	r1, r2
 8007520:	0018      	movs	r0, r3
 8007522:	f000 fa61 	bl	80079e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	0109      	lsls	r1, r1, #4
 8007534:	430a      	orrs	r2, r1
 8007536:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69da      	ldr	r2, [r3, #28]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	490f      	ldr	r1, [pc, #60]	; (8007580 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007544:	400a      	ands	r2, r1
 8007546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69d9      	ldr	r1, [r3, #28]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	61da      	str	r2, [r3, #28]
      break;
 800755c:	e004      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800755e:	2317      	movs	r3, #23
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	2201      	movs	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
      break;
 8007566:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2238      	movs	r2, #56	; 0x38
 800756c:	2100      	movs	r1, #0
 800756e:	5499      	strb	r1, [r3, r2]

  return status;
 8007570:	2317      	movs	r3, #23
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	781b      	ldrb	r3, [r3, #0]
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b006      	add	sp, #24
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	fffffbff 	.word	0xfffffbff

08007584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758e:	230f      	movs	r3, #15
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2238      	movs	r2, #56	; 0x38
 800759a:	5c9b      	ldrb	r3, [r3, r2]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_ConfigClockSource+0x20>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0bc      	b.n	800771e <HAL_TIM_ConfigClockSource+0x19a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2238      	movs	r2, #56	; 0x38
 80075a8:	2101      	movs	r1, #1
 80075aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2239      	movs	r2, #57	; 0x39
 80075b0:	2102      	movs	r1, #2
 80075b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2277      	movs	r2, #119	; 0x77
 80075c0:	4393      	bics	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a58      	ldr	r2, [pc, #352]	; (8007728 <HAL_TIM_ConfigClockSource+0x1a4>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2280      	movs	r2, #128	; 0x80
 80075da:	0192      	lsls	r2, r2, #6
 80075dc:	4293      	cmp	r3, r2
 80075de:	d040      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0xde>
 80075e0:	2280      	movs	r2, #128	; 0x80
 80075e2:	0192      	lsls	r2, r2, #6
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d900      	bls.n	80075ea <HAL_TIM_ConfigClockSource+0x66>
 80075e8:	e088      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	0152      	lsls	r2, r2, #5
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d100      	bne.n	80075f4 <HAL_TIM_ConfigClockSource+0x70>
 80075f2:	e088      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x182>
 80075f4:	2280      	movs	r2, #128	; 0x80
 80075f6:	0152      	lsls	r2, r2, #5
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d900      	bls.n	80075fe <HAL_TIM_ConfigClockSource+0x7a>
 80075fc:	e07e      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 80075fe:	2b70      	cmp	r3, #112	; 0x70
 8007600:	d018      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0xb0>
 8007602:	d900      	bls.n	8007606 <HAL_TIM_ConfigClockSource+0x82>
 8007604:	e07a      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 8007606:	2b60      	cmp	r3, #96	; 0x60
 8007608:	d04f      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x126>
 800760a:	d900      	bls.n	800760e <HAL_TIM_ConfigClockSource+0x8a>
 800760c:	e076      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 800760e:	2b50      	cmp	r3, #80	; 0x50
 8007610:	d03b      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x106>
 8007612:	d900      	bls.n	8007616 <HAL_TIM_ConfigClockSource+0x92>
 8007614:	e072      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d057      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x146>
 800761a:	d900      	bls.n	800761e <HAL_TIM_ConfigClockSource+0x9a>
 800761c:	e06e      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 800761e:	2b30      	cmp	r3, #48	; 0x30
 8007620:	d063      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x166>
 8007622:	d86b      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 8007624:	2b20      	cmp	r3, #32
 8007626:	d060      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x166>
 8007628:	d868      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d05d      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x166>
 800762e:	2b10      	cmp	r3, #16
 8007630:	d05b      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x166>
 8007632:	e063      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007644:	f000 fbae 	bl	8007da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2277      	movs	r2, #119	; 0x77
 8007654:	4313      	orrs	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	609a      	str	r2, [r3, #8]
      break;
 8007660:	e052      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007672:	f000 fb97 	bl	8007da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2180      	movs	r1, #128	; 0x80
 8007682:	01c9      	lsls	r1, r1, #7
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
      break;
 8007688:	e03e      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007696:	001a      	movs	r2, r3
 8007698:	f000 fa42 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2150      	movs	r1, #80	; 0x50
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 fb64 	bl	8007d70 <TIM_ITRx_SetConfig>
      break;
 80076a8:	e02e      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076b6:	001a      	movs	r2, r3
 80076b8:	f000 faa2 	bl	8007c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2160      	movs	r1, #96	; 0x60
 80076c2:	0018      	movs	r0, r3
 80076c4:	f000 fb54 	bl	8007d70 <TIM_ITRx_SetConfig>
      break;
 80076c8:	e01e      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d6:	001a      	movs	r2, r3
 80076d8:	f000 fa22 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2140      	movs	r1, #64	; 0x40
 80076e2:	0018      	movs	r0, r3
 80076e4:	f000 fb44 	bl	8007d70 <TIM_ITRx_SetConfig>
      break;
 80076e8:	e00e      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	0019      	movs	r1, r3
 80076f4:	0010      	movs	r0, r2
 80076f6:	f000 fb3b 	bl	8007d70 <TIM_ITRx_SetConfig>
      break;
 80076fa:	e005      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80076fc:	230f      	movs	r3, #15
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2201      	movs	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
      break;
 8007704:	e000      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007706:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2239      	movs	r2, #57	; 0x39
 800770c:	2101      	movs	r1, #1
 800770e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2238      	movs	r2, #56	; 0x38
 8007714:	2100      	movs	r1, #0
 8007716:	5499      	strb	r1, [r3, r2]

  return status;
 8007718:	230f      	movs	r3, #15
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	781b      	ldrb	r3, [r3, #0]
}
 800771e:	0018      	movs	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	b004      	add	sp, #16
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	ffff00ff 	.word	0xffff00ff

0800772c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b0c      	cmp	r3, #12
 800773e:	d01e      	beq.n	800777e <HAL_TIM_ReadCapturedValue+0x52>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b0c      	cmp	r3, #12
 8007744:	d820      	bhi.n	8007788 <HAL_TIM_ReadCapturedValue+0x5c>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d013      	beq.n	8007774 <HAL_TIM_ReadCapturedValue+0x48>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b08      	cmp	r3, #8
 8007750:	d81a      	bhi.n	8007788 <HAL_TIM_ReadCapturedValue+0x5c>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_TIM_ReadCapturedValue+0x34>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d005      	beq.n	800776a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800775e:	e013      	b.n	8007788 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	60fb      	str	r3, [r7, #12]
      break;
 8007768:	e00f      	b.n	800778a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	60fb      	str	r3, [r7, #12]
      break;
 8007772:	e00a      	b.n	800778a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777a:	60fb      	str	r3, [r7, #12]
      break;
 800777c:	e005      	b.n	800778a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	60fb      	str	r3, [r7, #12]
      break;
 8007786:	e000      	b.n	800778a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007788:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	0018      	movs	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	b004      	add	sp, #16
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800779c:	46c0      	nop			; (mov r8, r8)
 800779e:	46bd      	mov	sp, r7
 80077a0:	b002      	add	sp, #8
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	05db      	lsls	r3, r3, #23
 80077da:	429a      	cmp	r2, r3
 80077dc:	d007      	beq.n	80077ee <TIM_Base_SetConfig+0x2a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <TIM_Base_SetConfig+0x9c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d003      	beq.n	80077ee <TIM_Base_SetConfig+0x2a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <TIM_Base_SetConfig+0xa0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d108      	bne.n	8007800 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2270      	movs	r2, #112	; 0x70
 80077f2:	4393      	bics	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	05db      	lsls	r3, r3, #23
 8007806:	429a      	cmp	r2, r3
 8007808:	d007      	beq.n	800781a <TIM_Base_SetConfig+0x56>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <TIM_Base_SetConfig+0x9c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_Base_SetConfig+0x56>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a13      	ldr	r2, [pc, #76]	; (8007864 <TIM_Base_SetConfig+0xa0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d108      	bne.n	800782c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4a12      	ldr	r2, [pc, #72]	; (8007868 <TIM_Base_SetConfig+0xa4>)
 800781e:	4013      	ands	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2280      	movs	r2, #128	; 0x80
 8007830:	4393      	bics	r3, r2
 8007832:	001a      	movs	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	615a      	str	r2, [r3, #20]
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b004      	add	sp, #16
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40010800 	.word	0x40010800
 8007864:	40011400 	.word	0x40011400
 8007868:	fffffcff 	.word	0xfffffcff

0800786c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	2201      	movs	r2, #1
 800787c:	4393      	bics	r3, r2
 800787e:	001a      	movs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2270      	movs	r2, #112	; 0x70
 800789a:	4393      	bics	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2203      	movs	r2, #3
 80078a2:	4393      	bics	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2202      	movs	r2, #2
 80078b4:	4393      	bics	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	621a      	str	r2, [r3, #32]
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b006      	add	sp, #24
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	2210      	movs	r2, #16
 80078f4:	4393      	bics	r3, r2
 80078f6:	001a      	movs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <TIM_OC2_SetConfig+0x7c>)
 8007912:	4013      	ands	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4a12      	ldr	r2, [pc, #72]	; (8007964 <TIM_OC2_SetConfig+0x80>)
 800791a:	4013      	ands	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2220      	movs	r2, #32
 800792e:	4393      	bics	r3, r2
 8007930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b006      	add	sp, #24
 800795e:	bd80      	pop	{r7, pc}
 8007960:	ffff8fff 	.word	0xffff8fff
 8007964:	fffffcff 	.word	0xfffffcff

08007968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	4a1a      	ldr	r2, [pc, #104]	; (80079e0 <TIM_OC3_SetConfig+0x78>)
 8007978:	401a      	ands	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2270      	movs	r2, #112	; 0x70
 8007994:	4393      	bics	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2203      	movs	r2, #3
 800799c:	4393      	bics	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4a0d      	ldr	r2, [pc, #52]	; (80079e4 <TIM_OC3_SetConfig+0x7c>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	621a      	str	r2, [r3, #32]
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b006      	add	sp, #24
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	fffffeff 	.word	0xfffffeff
 80079e4:	fffffdff 	.word	0xfffffdff

080079e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <TIM_OC4_SetConfig+0x7c>)
 80079f8:	401a      	ands	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <TIM_OC4_SetConfig+0x80>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <TIM_OC4_SetConfig+0x84>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <TIM_OC4_SetConfig+0x88>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	031b      	lsls	r3, r3, #12
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b006      	add	sp, #24
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	ffffefff 	.word	0xffffefff
 8007a68:	ffff8fff 	.word	0xffff8fff
 8007a6c:	fffffcff 	.word	0xfffffcff
 8007a70:	ffffdfff 	.word	0xffffdfff

08007a74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	2201      	movs	r2, #1
 8007a88:	4393      	bics	r3, r2
 8007a8a:	001a      	movs	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	2380      	movs	r3, #128	; 0x80
 8007aa0:	05db      	lsls	r3, r3, #23
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d007      	beq.n	8007ab6 <TIM_TI1_SetConfig+0x42>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <TIM_TI1_SetConfig+0xa4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_TI1_SetConfig+0x42>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a1a      	ldr	r2, [pc, #104]	; (8007b1c <TIM_TI1_SetConfig+0xa8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d101      	bne.n	8007aba <TIM_TI1_SetConfig+0x46>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <TIM_TI1_SetConfig+0x48>
 8007aba:	2300      	movs	r3, #0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	4393      	bics	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e003      	b.n	8007ada <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	22f0      	movs	r2, #240	; 0xf0
 8007ade:	4393      	bics	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	22ff      	movs	r2, #255	; 0xff
 8007ae8:	4013      	ands	r3, r2
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	220a      	movs	r2, #10
 8007af4:	4393      	bics	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	220a      	movs	r2, #10
 8007afc:	4013      	ands	r3, r2
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	621a      	str	r2, [r3, #32]
}
 8007b10:	46c0      	nop			; (mov r8, r8)
 8007b12:	46bd      	mov	sp, r7
 8007b14:	b006      	add	sp, #24
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40010800 	.word	0x40010800
 8007b1c:	40011400 	.word	0x40011400

08007b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	2201      	movs	r2, #1
 8007b38:	4393      	bics	r3, r2
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	22f0      	movs	r2, #240	; 0xf0
 8007b4a:	4393      	bics	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4393      	bics	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	2210      	movs	r2, #16
 8007b90:	4393      	bics	r3, r2
 8007b92:	001a      	movs	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <TIM_TI2_SetConfig+0x7c>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	4a10      	ldr	r2, [pc, #64]	; (8007bfc <TIM_TI2_SetConfig+0x80>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	0c1b      	lsrs	r3, r3, #16
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	22a0      	movs	r2, #160	; 0xa0
 8007bd0:	4393      	bics	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	22a0      	movs	r2, #160	; 0xa0
 8007bda:	4013      	ands	r3, r2
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b006      	add	sp, #24
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	fffffcff 	.word	0xfffffcff
 8007bfc:	ffff0fff 	.word	0xffff0fff

08007c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	2210      	movs	r2, #16
 8007c12:	4393      	bics	r3, r2
 8007c14:	001a      	movs	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <TIM_TI2_ConfigInputStage+0x60>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	22a0      	movs	r2, #160	; 0xa0
 8007c3c:	4393      	bics	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b006      	add	sp, #24
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	ffff0fff 	.word	0xffff0fff

08007c64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <TIM_TI3_SetConfig+0x78>)
 8007c78:	401a      	ands	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	4393      	bics	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	22f0      	movs	r2, #240	; 0xf0
 8007c9e:	4393      	bics	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	22ff      	movs	r2, #255	; 0xff
 8007ca8:	4013      	ands	r3, r2
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ce0 <TIM_TI3_SetConfig+0x7c>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	23a0      	movs	r3, #160	; 0xa0
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	621a      	str	r2, [r3, #32]
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b006      	add	sp, #24
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	fffffeff 	.word	0xfffffeff
 8007ce0:	fffff5ff 	.word	0xfffff5ff

08007ce4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <TIM_TI4_SetConfig+0x7c>)
 8007cf8:	401a      	ands	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <TIM_TI4_SetConfig+0x80>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <TIM_TI4_SetConfig+0x84>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	031b      	lsls	r3, r3, #12
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4a0d      	ldr	r2, [pc, #52]	; (8007d6c <TIM_TI4_SetConfig+0x88>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	031a      	lsls	r2, r3, #12
 8007d3e:	23a0      	movs	r3, #160	; 0xa0
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	4013      	ands	r3, r2
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b006      	add	sp, #24
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	ffffefff 	.word	0xffffefff
 8007d64:	fffffcff 	.word	0xfffffcff
 8007d68:	ffff0fff 	.word	0xffff0fff
 8007d6c:	ffff5fff 	.word	0xffff5fff

08007d70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2270      	movs	r2, #112	; 0x70
 8007d84:	4393      	bics	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	2207      	movs	r2, #7
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	609a      	str	r2, [r3, #8]
}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b004      	add	sp, #16
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <TIM_ETR_SetConfig+0x3c>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	021a      	lsls	r2, r3, #8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	609a      	str	r2, [r3, #8]
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b006      	add	sp, #24
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	ffff00ff 	.word	0xffff00ff

08007de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	221f      	movs	r2, #31
 8007df4:	4013      	ands	r3, r2
 8007df6:	2201      	movs	r2, #1
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	0013      	movs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	43d2      	mvns	r2, r2
 8007e06:	401a      	ands	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a1a      	ldr	r2, [r3, #32]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	211f      	movs	r1, #31
 8007e14:	400b      	ands	r3, r1
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4099      	lsls	r1, r3
 8007e1a:	000b      	movs	r3, r1
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b006      	add	sp, #24
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2238      	movs	r2, #56	; 0x38
 8007e3a:	5c9b      	ldrb	r3, [r3, r2]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e042      	b.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2238      	movs	r2, #56	; 0x38
 8007e48:	2101      	movs	r1, #1
 8007e4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2239      	movs	r2, #57	; 0x39
 8007e50:	2102      	movs	r1, #2
 8007e52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2270      	movs	r2, #112	; 0x70
 8007e68:	4393      	bics	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	2380      	movs	r3, #128	; 0x80
 8007e84:	05db      	lsls	r3, r3, #23
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d009      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a11      	ldr	r2, [pc, #68]	; (8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a0f      	ldr	r2, [pc, #60]	; (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2280      	movs	r2, #128	; 0x80
 8007ea2:	4393      	bics	r3, r2
 8007ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2239      	movs	r2, #57	; 0x39
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2238      	movs	r2, #56	; 0x38
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	0018      	movs	r0, r3
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b004      	add	sp, #16
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	40010800 	.word	0x40010800
 8007ed8:	40011400 	.word	0x40011400

08007edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e044      	b.n	8007f78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2278      	movs	r2, #120	; 0x78
 8007efa:	2100      	movs	r1, #0
 8007efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7fb fe8d 	bl	8003c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2224      	movs	r2, #36	; 0x24
 8007f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2101      	movs	r1, #1
 8007f18:	438a      	bics	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f000 f8d0 	bl	80080c4 <UART_SetConfig>
 8007f24:	0003      	movs	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e024      	b.n	8007f78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 fb47 	bl	80085cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	490d      	ldr	r1, [pc, #52]	; (8007f80 <HAL_UART_Init+0xa4>)
 8007f4a:	400a      	ands	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	212a      	movs	r1, #42	; 0x2a
 8007f5a:	438a      	bics	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	f000 fbdf 	bl	8008734 <UART_CheckIdleState>
 8007f76:	0003      	movs	r3, r0
}
 8007f78:	0018      	movs	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	ffffb7ff 	.word	0xffffb7ff

08007f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08a      	sub	sp, #40	; 0x28
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	1dbb      	adds	r3, r7, #6
 8007f92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d000      	beq.n	8007f9e <HAL_UART_Transmit+0x1a>
 8007f9c:	e08c      	b.n	80080b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_UART_Transmit+0x28>
 8007fa4:	1dbb      	adds	r3, r7, #6
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e084      	b.n	80080ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	2380      	movs	r3, #128	; 0x80
 8007fb6:	015b      	lsls	r3, r3, #5
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d109      	bne.n	8007fd0 <HAL_UART_Transmit+0x4c>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4013      	ands	r3, r2
 8007fca:	d001      	beq.n	8007fd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e074      	b.n	80080ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2284      	movs	r2, #132	; 0x84
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2221      	movs	r2, #33	; 0x21
 8007fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fde:	f7fc f817 	bl	8004010 <HAL_GetTick>
 8007fe2:	0003      	movs	r3, r0
 8007fe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1dba      	adds	r2, r7, #6
 8007fea:	2150      	movs	r1, #80	; 0x50
 8007fec:	8812      	ldrh	r2, [r2, #0]
 8007fee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1dba      	adds	r2, r7, #6
 8007ff4:	2152      	movs	r1, #82	; 0x52
 8007ff6:	8812      	ldrh	r2, [r2, #0]
 8007ff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	2380      	movs	r3, #128	; 0x80
 8008000:	015b      	lsls	r3, r3, #5
 8008002:	429a      	cmp	r2, r3
 8008004:	d108      	bne.n	8008018 <HAL_UART_Transmit+0x94>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	e003      	b.n	8008020 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008020:	e02f      	b.n	8008082 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	0013      	movs	r3, r2
 800802c:	2200      	movs	r2, #0
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	f000 fc28 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 8008034:	1e03      	subs	r3, r0, #0
 8008036:	d004      	beq.n	8008042 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e03b      	b.n	80080ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	001a      	movs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	05d2      	lsls	r2, r2, #23
 8008054:	0dd2      	lsrs	r2, r2, #23
 8008056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	3302      	adds	r3, #2
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	e007      	b.n	8008070 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3301      	adds	r3, #1
 800806e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2252      	movs	r2, #82	; 0x52
 8008074:	5a9b      	ldrh	r3, [r3, r2]
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	b299      	uxth	r1, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2252      	movs	r2, #82	; 0x52
 8008080:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2252      	movs	r2, #82	; 0x52
 8008086:	5a9b      	ldrh	r3, [r3, r2]
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1c9      	bne.n	8008022 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	0013      	movs	r3, r2
 8008098:	2200      	movs	r2, #0
 800809a:	2140      	movs	r1, #64	; 0x40
 800809c:	f000 fbf2 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 80080a0:	1e03      	subs	r3, r0, #0
 80080a2:	d004      	beq.n	80080ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e005      	b.n	80080ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e000      	b.n	80080ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80080b8:	2302      	movs	r3, #2
  }
}
 80080ba:	0018      	movs	r0, r3
 80080bc:	46bd      	mov	sp, r7
 80080be:	b008      	add	sp, #32
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c4:	b5b0      	push	{r4, r5, r7, lr}
 80080c6:	b08e      	sub	sp, #56	; 0x38
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080cc:	231a      	movs	r3, #26
 80080ce:	2218      	movs	r2, #24
 80080d0:	189b      	adds	r3, r3, r2
 80080d2:	19db      	adds	r3, r3, r7
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	431a      	orrs	r2, r3
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4ac6      	ldr	r2, [pc, #792]	; (8008410 <UART_SetConfig+0x34c>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	0019      	movs	r1, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008102:	430a      	orrs	r2, r1
 8008104:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	4ac1      	ldr	r2, [pc, #772]	; (8008414 <UART_SetConfig+0x350>)
 800810e:	4013      	ands	r3, r2
 8008110:	0019      	movs	r1, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4abb      	ldr	r2, [pc, #748]	; (8008418 <UART_SetConfig+0x354>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008134:	4313      	orrs	r3, r2
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4ab7      	ldr	r2, [pc, #732]	; (800841c <UART_SetConfig+0x358>)
 8008140:	4013      	ands	r3, r2
 8008142:	0019      	movs	r1, r3
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814a:	430a      	orrs	r2, r1
 800814c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4ab3      	ldr	r2, [pc, #716]	; (8008420 <UART_SetConfig+0x35c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d131      	bne.n	80081bc <UART_SetConfig+0xf8>
 8008158:	4bb2      	ldr	r3, [pc, #712]	; (8008424 <UART_SetConfig+0x360>)
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815c:	2203      	movs	r2, #3
 800815e:	4013      	ands	r3, r2
 8008160:	2b03      	cmp	r3, #3
 8008162:	d01d      	beq.n	80081a0 <UART_SetConfig+0xdc>
 8008164:	d823      	bhi.n	80081ae <UART_SetConfig+0xea>
 8008166:	2b02      	cmp	r3, #2
 8008168:	d00c      	beq.n	8008184 <UART_SetConfig+0xc0>
 800816a:	d820      	bhi.n	80081ae <UART_SetConfig+0xea>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <UART_SetConfig+0xb2>
 8008170:	2b01      	cmp	r3, #1
 8008172:	d00e      	beq.n	8008192 <UART_SetConfig+0xce>
 8008174:	e01b      	b.n	80081ae <UART_SetConfig+0xea>
 8008176:	231b      	movs	r3, #27
 8008178:	2218      	movs	r2, #24
 800817a:	189b      	adds	r3, r3, r2
 800817c:	19db      	adds	r3, r3, r7
 800817e:	2201      	movs	r2, #1
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e09c      	b.n	80082be <UART_SetConfig+0x1fa>
 8008184:	231b      	movs	r3, #27
 8008186:	2218      	movs	r2, #24
 8008188:	189b      	adds	r3, r3, r2
 800818a:	19db      	adds	r3, r3, r7
 800818c:	2202      	movs	r2, #2
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	e095      	b.n	80082be <UART_SetConfig+0x1fa>
 8008192:	231b      	movs	r3, #27
 8008194:	2218      	movs	r2, #24
 8008196:	189b      	adds	r3, r3, r2
 8008198:	19db      	adds	r3, r3, r7
 800819a:	2204      	movs	r2, #4
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e08e      	b.n	80082be <UART_SetConfig+0x1fa>
 80081a0:	231b      	movs	r3, #27
 80081a2:	2218      	movs	r2, #24
 80081a4:	189b      	adds	r3, r3, r2
 80081a6:	19db      	adds	r3, r3, r7
 80081a8:	2208      	movs	r2, #8
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e087      	b.n	80082be <UART_SetConfig+0x1fa>
 80081ae:	231b      	movs	r3, #27
 80081b0:	2218      	movs	r2, #24
 80081b2:	189b      	adds	r3, r3, r2
 80081b4:	19db      	adds	r3, r3, r7
 80081b6:	2210      	movs	r2, #16
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	e080      	b.n	80082be <UART_SetConfig+0x1fa>
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a99      	ldr	r2, [pc, #612]	; (8008428 <UART_SetConfig+0x364>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d131      	bne.n	800822a <UART_SetConfig+0x166>
 80081c6:	4b97      	ldr	r3, [pc, #604]	; (8008424 <UART_SetConfig+0x360>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	220c      	movs	r2, #12
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b0c      	cmp	r3, #12
 80081d0:	d01d      	beq.n	800820e <UART_SetConfig+0x14a>
 80081d2:	d823      	bhi.n	800821c <UART_SetConfig+0x158>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d00c      	beq.n	80081f2 <UART_SetConfig+0x12e>
 80081d8:	d820      	bhi.n	800821c <UART_SetConfig+0x158>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <UART_SetConfig+0x120>
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d00e      	beq.n	8008200 <UART_SetConfig+0x13c>
 80081e2:	e01b      	b.n	800821c <UART_SetConfig+0x158>
 80081e4:	231b      	movs	r3, #27
 80081e6:	2218      	movs	r2, #24
 80081e8:	189b      	adds	r3, r3, r2
 80081ea:	19db      	adds	r3, r3, r7
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	e065      	b.n	80082be <UART_SetConfig+0x1fa>
 80081f2:	231b      	movs	r3, #27
 80081f4:	2218      	movs	r2, #24
 80081f6:	189b      	adds	r3, r3, r2
 80081f8:	19db      	adds	r3, r3, r7
 80081fa:	2202      	movs	r2, #2
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e05e      	b.n	80082be <UART_SetConfig+0x1fa>
 8008200:	231b      	movs	r3, #27
 8008202:	2218      	movs	r2, #24
 8008204:	189b      	adds	r3, r3, r2
 8008206:	19db      	adds	r3, r3, r7
 8008208:	2204      	movs	r2, #4
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e057      	b.n	80082be <UART_SetConfig+0x1fa>
 800820e:	231b      	movs	r3, #27
 8008210:	2218      	movs	r2, #24
 8008212:	189b      	adds	r3, r3, r2
 8008214:	19db      	adds	r3, r3, r7
 8008216:	2208      	movs	r2, #8
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e050      	b.n	80082be <UART_SetConfig+0x1fa>
 800821c:	231b      	movs	r3, #27
 800821e:	2218      	movs	r2, #24
 8008220:	189b      	adds	r3, r3, r2
 8008222:	19db      	adds	r3, r3, r7
 8008224:	2210      	movs	r2, #16
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e049      	b.n	80082be <UART_SetConfig+0x1fa>
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a7a      	ldr	r2, [pc, #488]	; (8008418 <UART_SetConfig+0x354>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d13e      	bne.n	80082b2 <UART_SetConfig+0x1ee>
 8008234:	4b7b      	ldr	r3, [pc, #492]	; (8008424 <UART_SetConfig+0x360>)
 8008236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008238:	23c0      	movs	r3, #192	; 0xc0
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	4013      	ands	r3, r2
 800823e:	22c0      	movs	r2, #192	; 0xc0
 8008240:	0112      	lsls	r2, r2, #4
 8008242:	4293      	cmp	r3, r2
 8008244:	d027      	beq.n	8008296 <UART_SetConfig+0x1d2>
 8008246:	22c0      	movs	r2, #192	; 0xc0
 8008248:	0112      	lsls	r2, r2, #4
 800824a:	4293      	cmp	r3, r2
 800824c:	d82a      	bhi.n	80082a4 <UART_SetConfig+0x1e0>
 800824e:	2280      	movs	r2, #128	; 0x80
 8008250:	0112      	lsls	r2, r2, #4
 8008252:	4293      	cmp	r3, r2
 8008254:	d011      	beq.n	800827a <UART_SetConfig+0x1b6>
 8008256:	2280      	movs	r2, #128	; 0x80
 8008258:	0112      	lsls	r2, r2, #4
 800825a:	4293      	cmp	r3, r2
 800825c:	d822      	bhi.n	80082a4 <UART_SetConfig+0x1e0>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <UART_SetConfig+0x1a8>
 8008262:	2280      	movs	r2, #128	; 0x80
 8008264:	00d2      	lsls	r2, r2, #3
 8008266:	4293      	cmp	r3, r2
 8008268:	d00e      	beq.n	8008288 <UART_SetConfig+0x1c4>
 800826a:	e01b      	b.n	80082a4 <UART_SetConfig+0x1e0>
 800826c:	231b      	movs	r3, #27
 800826e:	2218      	movs	r2, #24
 8008270:	189b      	adds	r3, r3, r2
 8008272:	19db      	adds	r3, r3, r7
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e021      	b.n	80082be <UART_SetConfig+0x1fa>
 800827a:	231b      	movs	r3, #27
 800827c:	2218      	movs	r2, #24
 800827e:	189b      	adds	r3, r3, r2
 8008280:	19db      	adds	r3, r3, r7
 8008282:	2202      	movs	r2, #2
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e01a      	b.n	80082be <UART_SetConfig+0x1fa>
 8008288:	231b      	movs	r3, #27
 800828a:	2218      	movs	r2, #24
 800828c:	189b      	adds	r3, r3, r2
 800828e:	19db      	adds	r3, r3, r7
 8008290:	2204      	movs	r2, #4
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e013      	b.n	80082be <UART_SetConfig+0x1fa>
 8008296:	231b      	movs	r3, #27
 8008298:	2218      	movs	r2, #24
 800829a:	189b      	adds	r3, r3, r2
 800829c:	19db      	adds	r3, r3, r7
 800829e:	2208      	movs	r2, #8
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e00c      	b.n	80082be <UART_SetConfig+0x1fa>
 80082a4:	231b      	movs	r3, #27
 80082a6:	2218      	movs	r2, #24
 80082a8:	189b      	adds	r3, r3, r2
 80082aa:	19db      	adds	r3, r3, r7
 80082ac:	2210      	movs	r2, #16
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	e005      	b.n	80082be <UART_SetConfig+0x1fa>
 80082b2:	231b      	movs	r3, #27
 80082b4:	2218      	movs	r2, #24
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	19db      	adds	r3, r3, r7
 80082ba:	2210      	movs	r2, #16
 80082bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a55      	ldr	r2, [pc, #340]	; (8008418 <UART_SetConfig+0x354>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d000      	beq.n	80082ca <UART_SetConfig+0x206>
 80082c8:	e084      	b.n	80083d4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082ca:	231b      	movs	r3, #27
 80082cc:	2218      	movs	r2, #24
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	19db      	adds	r3, r3, r7
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d01d      	beq.n	8008314 <UART_SetConfig+0x250>
 80082d8:	dc20      	bgt.n	800831c <UART_SetConfig+0x258>
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d015      	beq.n	800830a <UART_SetConfig+0x246>
 80082de:	dc1d      	bgt.n	800831c <UART_SetConfig+0x258>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <UART_SetConfig+0x226>
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d005      	beq.n	80082f4 <UART_SetConfig+0x230>
 80082e8:	e018      	b.n	800831c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ea:	f7fd ffd7 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 80082ee:	0003      	movs	r3, r0
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082f2:	e01c      	b.n	800832e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082f4:	4b4b      	ldr	r3, [pc, #300]	; (8008424 <UART_SetConfig+0x360>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2210      	movs	r2, #16
 80082fa:	4013      	ands	r3, r2
 80082fc:	d002      	beq.n	8008304 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80082fe:	4b4b      	ldr	r3, [pc, #300]	; (800842c <UART_SetConfig+0x368>)
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008302:	e014      	b.n	800832e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8008304:	4b4a      	ldr	r3, [pc, #296]	; (8008430 <UART_SetConfig+0x36c>)
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008308:	e011      	b.n	800832e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800830a:	f7fd ff17 	bl	800613c <HAL_RCC_GetSysClockFreq>
 800830e:	0003      	movs	r3, r0
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008312:	e00c      	b.n	800832e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800831a:	e008      	b.n	800832e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008320:	231a      	movs	r3, #26
 8008322:	2218      	movs	r2, #24
 8008324:	189b      	adds	r3, r3, r2
 8008326:	19db      	adds	r3, r3, r7
 8008328:	2201      	movs	r2, #1
 800832a:	701a      	strb	r2, [r3, #0]
        break;
 800832c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d100      	bne.n	8008336 <UART_SetConfig+0x272>
 8008334:	e132      	b.n	800859c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	0013      	movs	r3, r2
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	189b      	adds	r3, r3, r2
 8008340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d305      	bcc.n	8008352 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800834c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834e:	429a      	cmp	r2, r3
 8008350:	d906      	bls.n	8008360 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8008352:	231a      	movs	r3, #26
 8008354:	2218      	movs	r2, #24
 8008356:	189b      	adds	r3, r3, r2
 8008358:	19db      	adds	r3, r3, r7
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e11d      	b.n	800859c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	6939      	ldr	r1, [r7, #16]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	000b      	movs	r3, r1
 800836e:	0e1b      	lsrs	r3, r3, #24
 8008370:	0010      	movs	r0, r2
 8008372:	0205      	lsls	r5, r0, #8
 8008374:	431d      	orrs	r5, r3
 8008376:	000b      	movs	r3, r1
 8008378:	021c      	lsls	r4, r3, #8
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	68b8      	ldr	r0, [r7, #8]
 8008388:	68f9      	ldr	r1, [r7, #12]
 800838a:	1900      	adds	r0, r0, r4
 800838c:	4169      	adcs	r1, r5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	607b      	str	r3, [r7, #4]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f7f8 f8be 	bl	800051c <__aeabi_uldivmod>
 80083a0:	0002      	movs	r2, r0
 80083a2:	000b      	movs	r3, r1
 80083a4:	0013      	movs	r3, r2
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083aa:	23c0      	movs	r3, #192	; 0xc0
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d309      	bcc.n	80083c6 <UART_SetConfig+0x302>
 80083b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	035b      	lsls	r3, r3, #13
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d204      	bcs.n	80083c6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e0ea      	b.n	800859c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80083c6:	231a      	movs	r3, #26
 80083c8:	2218      	movs	r2, #24
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e0e3      	b.n	800859c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	69da      	ldr	r2, [r3, #28]
 80083d8:	2380      	movs	r3, #128	; 0x80
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	429a      	cmp	r2, r3
 80083de:	d000      	beq.n	80083e2 <UART_SetConfig+0x31e>
 80083e0:	e085      	b.n	80084ee <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80083e2:	231b      	movs	r3, #27
 80083e4:	2218      	movs	r2, #24
 80083e6:	189b      	adds	r3, r3, r2
 80083e8:	19db      	adds	r3, r3, r7
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d837      	bhi.n	8008460 <UART_SetConfig+0x39c>
 80083f0:	009a      	lsls	r2, r3, #2
 80083f2:	4b10      	ldr	r3, [pc, #64]	; (8008434 <UART_SetConfig+0x370>)
 80083f4:	18d3      	adds	r3, r2, r3
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fa:	f7fd ff4f 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 80083fe:	0003      	movs	r3, r0
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008402:	e036      	b.n	8008472 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008404:	f7fd ff60 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 8008408:	0003      	movs	r3, r0
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800840c:	e031      	b.n	8008472 <UART_SetConfig+0x3ae>
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	efff69f3 	.word	0xefff69f3
 8008414:	ffffcfff 	.word	0xffffcfff
 8008418:	40004800 	.word	0x40004800
 800841c:	fffff4ff 	.word	0xfffff4ff
 8008420:	40013800 	.word	0x40013800
 8008424:	40021000 	.word	0x40021000
 8008428:	40004400 	.word	0x40004400
 800842c:	003d0900 	.word	0x003d0900
 8008430:	00f42400 	.word	0x00f42400
 8008434:	0800b9a8 	.word	0x0800b9a8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008438:	4b60      	ldr	r3, [pc, #384]	; (80085bc <UART_SetConfig+0x4f8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2210      	movs	r2, #16
 800843e:	4013      	ands	r3, r2
 8008440:	d002      	beq.n	8008448 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008442:	4b5f      	ldr	r3, [pc, #380]	; (80085c0 <UART_SetConfig+0x4fc>)
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008446:	e014      	b.n	8008472 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8008448:	4b5e      	ldr	r3, [pc, #376]	; (80085c4 <UART_SetConfig+0x500>)
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800844c:	e011      	b.n	8008472 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844e:	f7fd fe75 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008452:	0003      	movs	r3, r0
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008456:	e00c      	b.n	8008472 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800845e:	e008      	b.n	8008472 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008464:	231a      	movs	r3, #26
 8008466:	2218      	movs	r2, #24
 8008468:	189b      	adds	r3, r3, r2
 800846a:	19db      	adds	r3, r3, r7
 800846c:	2201      	movs	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]
        break;
 8008470:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d100      	bne.n	800847a <UART_SetConfig+0x3b6>
 8008478:	e090      	b.n	800859c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	005a      	lsls	r2, r3, #1
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	18d2      	adds	r2, r2, r3
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	0019      	movs	r1, r3
 800848c:	0010      	movs	r0, r2
 800848e:	f7f7 fe57 	bl	8000140 <__udivsi3>
 8008492:	0003      	movs	r3, r0
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d921      	bls.n	80084e0 <UART_SetConfig+0x41c>
 800849c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849e:	2380      	movs	r3, #128	; 0x80
 80084a0:	025b      	lsls	r3, r3, #9
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d21c      	bcs.n	80084e0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	200e      	movs	r0, #14
 80084ac:	2418      	movs	r4, #24
 80084ae:	1903      	adds	r3, r0, r4
 80084b0:	19db      	adds	r3, r3, r7
 80084b2:	210f      	movs	r1, #15
 80084b4:	438a      	bics	r2, r1
 80084b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2207      	movs	r2, #7
 80084c0:	4013      	ands	r3, r2
 80084c2:	b299      	uxth	r1, r3
 80084c4:	1903      	adds	r3, r0, r4
 80084c6:	19db      	adds	r3, r3, r7
 80084c8:	1902      	adds	r2, r0, r4
 80084ca:	19d2      	adds	r2, r2, r7
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	1902      	adds	r2, r0, r4
 80084d8:	19d2      	adds	r2, r2, r7
 80084da:	8812      	ldrh	r2, [r2, #0]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	e05d      	b.n	800859c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80084e0:	231a      	movs	r3, #26
 80084e2:	2218      	movs	r2, #24
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	19db      	adds	r3, r3, r7
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e056      	b.n	800859c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ee:	231b      	movs	r3, #27
 80084f0:	2218      	movs	r2, #24
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	19db      	adds	r3, r3, r7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d822      	bhi.n	8008542 <UART_SetConfig+0x47e>
 80084fc:	009a      	lsls	r2, r3, #2
 80084fe:	4b32      	ldr	r3, [pc, #200]	; (80085c8 <UART_SetConfig+0x504>)
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008506:	f7fd fec9 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 800850a:	0003      	movs	r3, r0
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800850e:	e021      	b.n	8008554 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008510:	f7fd feda 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 8008514:	0003      	movs	r3, r0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008518:	e01c      	b.n	8008554 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800851a:	4b28      	ldr	r3, [pc, #160]	; (80085bc <UART_SetConfig+0x4f8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2210      	movs	r2, #16
 8008520:	4013      	ands	r3, r2
 8008522:	d002      	beq.n	800852a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008524:	4b26      	ldr	r3, [pc, #152]	; (80085c0 <UART_SetConfig+0x4fc>)
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008528:	e014      	b.n	8008554 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800852a:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <UART_SetConfig+0x500>)
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800852e:	e011      	b.n	8008554 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008530:	f7fd fe04 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8008534:	0003      	movs	r3, r0
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008538:	e00c      	b.n	8008554 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008540:	e008      	b.n	8008554 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008546:	231a      	movs	r3, #26
 8008548:	2218      	movs	r2, #24
 800854a:	189b      	adds	r3, r3, r2
 800854c:	19db      	adds	r3, r3, r7
 800854e:	2201      	movs	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
        break;
 8008552:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d020      	beq.n	800859c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	085a      	lsrs	r2, r3, #1
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	18d2      	adds	r2, r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	0019      	movs	r1, r3
 800856a:	0010      	movs	r0, r2
 800856c:	f7f7 fde8 	bl	8000140 <__udivsi3>
 8008570:	0003      	movs	r3, r0
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d90a      	bls.n	8008590 <UART_SetConfig+0x4cc>
 800857a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	025b      	lsls	r3, r3, #9
 8008580:	429a      	cmp	r2, r3
 8008582:	d205      	bcs.n	8008590 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	b29a      	uxth	r2, r3
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	e005      	b.n	800859c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008590:	231a      	movs	r3, #26
 8008592:	2218      	movs	r2, #24
 8008594:	189b      	adds	r3, r3, r2
 8008596:	19db      	adds	r3, r3, r7
 8008598:	2201      	movs	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2200      	movs	r2, #0
 80085a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	2200      	movs	r2, #0
 80085a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80085a8:	231a      	movs	r3, #26
 80085aa:	2218      	movs	r2, #24
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	19db      	adds	r3, r3, r7
 80085b0:	781b      	ldrb	r3, [r3, #0]
}
 80085b2:	0018      	movs	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b00e      	add	sp, #56	; 0x38
 80085b8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	40021000 	.word	0x40021000
 80085c0:	003d0900 	.word	0x003d0900
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	0800b9cc 	.word	0x0800b9cc

080085cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2201      	movs	r2, #1
 80085da:	4013      	ands	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a4a      	ldr	r2, [pc, #296]	; (8008710 <UART_AdvFeatureConfig+0x144>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	0019      	movs	r1, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	2202      	movs	r2, #2
 80085fc:	4013      	ands	r3, r2
 80085fe:	d00b      	beq.n	8008618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4a43      	ldr	r2, [pc, #268]	; (8008714 <UART_AdvFeatureConfig+0x148>)
 8008608:	4013      	ands	r3, r2
 800860a:	0019      	movs	r1, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2204      	movs	r2, #4
 800861e:	4013      	ands	r3, r2
 8008620:	d00b      	beq.n	800863a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4a3b      	ldr	r2, [pc, #236]	; (8008718 <UART_AdvFeatureConfig+0x14c>)
 800862a:	4013      	ands	r3, r2
 800862c:	0019      	movs	r1, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2208      	movs	r2, #8
 8008640:	4013      	ands	r3, r2
 8008642:	d00b      	beq.n	800865c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4a34      	ldr	r2, [pc, #208]	; (800871c <UART_AdvFeatureConfig+0x150>)
 800864c:	4013      	ands	r3, r2
 800864e:	0019      	movs	r1, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2210      	movs	r2, #16
 8008662:	4013      	ands	r3, r2
 8008664:	d00b      	beq.n	800867e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4a2c      	ldr	r2, [pc, #176]	; (8008720 <UART_AdvFeatureConfig+0x154>)
 800866e:	4013      	ands	r3, r2
 8008670:	0019      	movs	r1, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2220      	movs	r2, #32
 8008684:	4013      	ands	r3, r2
 8008686:	d00b      	beq.n	80086a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	4a25      	ldr	r2, [pc, #148]	; (8008724 <UART_AdvFeatureConfig+0x158>)
 8008690:	4013      	ands	r3, r2
 8008692:	0019      	movs	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2240      	movs	r2, #64	; 0x40
 80086a6:	4013      	ands	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <UART_AdvFeatureConfig+0x15c>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	0019      	movs	r1, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	035b      	lsls	r3, r3, #13
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10b      	bne.n	80086e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <UART_AdvFeatureConfig+0x160>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	0019      	movs	r1, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2280      	movs	r2, #128	; 0x80
 80086ec:	4013      	ands	r3, r2
 80086ee:	d00b      	beq.n	8008708 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4a0e      	ldr	r2, [pc, #56]	; (8008730 <UART_AdvFeatureConfig+0x164>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	0019      	movs	r1, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	605a      	str	r2, [r3, #4]
  }
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b002      	add	sp, #8
 800870e:	bd80      	pop	{r7, pc}
 8008710:	fffdffff 	.word	0xfffdffff
 8008714:	fffeffff 	.word	0xfffeffff
 8008718:	fffbffff 	.word	0xfffbffff
 800871c:	ffff7fff 	.word	0xffff7fff
 8008720:	ffffefff 	.word	0xffffefff
 8008724:	ffffdfff 	.word	0xffffdfff
 8008728:	ffefffff 	.word	0xffefffff
 800872c:	ff9fffff 	.word	0xff9fffff
 8008730:	fff7ffff 	.word	0xfff7ffff

08008734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b092      	sub	sp, #72	; 0x48
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2284      	movs	r2, #132	; 0x84
 8008740:	2100      	movs	r1, #0
 8008742:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008744:	f7fb fc64 	bl	8004010 <HAL_GetTick>
 8008748:	0003      	movs	r3, r0
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2208      	movs	r2, #8
 8008754:	4013      	ands	r3, r2
 8008756:	2b08      	cmp	r3, #8
 8008758:	d12c      	bne.n	80087b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	2280      	movs	r2, #128	; 0x80
 800875e:	0391      	lsls	r1, r2, #14
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4a46      	ldr	r2, [pc, #280]	; (800887c <UART_CheckIdleState+0x148>)
 8008764:	9200      	str	r2, [sp, #0]
 8008766:	2200      	movs	r2, #0
 8008768:	f000 f88c 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 800876c:	1e03      	subs	r3, r0, #0
 800876e:	d021      	beq.n	80087b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8310 	mrs	r3, PRIMASK
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38
 800877a:	2301      	movs	r3, #1
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	f383 8810 	msr	PRIMASK, r3
}
 8008784:	46c0      	nop			; (mov r8, r8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2180      	movs	r1, #128	; 0x80
 8008792:	438a      	bics	r2, r1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	f383 8810 	msr	PRIMASK, r3
}
 80087a0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2278      	movs	r2, #120	; 0x78
 80087ac:	2100      	movs	r1, #0
 80087ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e05f      	b.n	8008874 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2204      	movs	r2, #4
 80087bc:	4013      	ands	r3, r2
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d146      	bne.n	8008850 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	2280      	movs	r2, #128	; 0x80
 80087c6:	03d1      	lsls	r1, r2, #15
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <UART_CheckIdleState+0x148>)
 80087cc:	9200      	str	r2, [sp, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f000 f858 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 80087d4:	1e03      	subs	r3, r0, #0
 80087d6:	d03b      	beq.n	8008850 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d8:	f3ef 8310 	mrs	r3, PRIMASK
 80087dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80087de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
 80087e2:	2301      	movs	r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f383 8810 	msr	PRIMASK, r3
}
 80087ec:	46c0      	nop			; (mov r8, r8)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4921      	ldr	r1, [pc, #132]	; (8008880 <UART_CheckIdleState+0x14c>)
 80087fa:	400a      	ands	r2, r1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f383 8810 	msr	PRIMASK, r3
}
 8008808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800880a:	f3ef 8310 	mrs	r3, PRIMASK
 800880e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008810:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008812:	633b      	str	r3, [r7, #48]	; 0x30
 8008814:	2301      	movs	r3, #1
 8008816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2101      	movs	r1, #1
 800882c:	438a      	bics	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2280      	movs	r2, #128	; 0x80
 8008840:	2120      	movs	r1, #32
 8008842:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2278      	movs	r2, #120	; 0x78
 8008848:	2100      	movs	r1, #0
 800884a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e011      	b.n	8008874 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2280      	movs	r2, #128	; 0x80
 800885a:	2120      	movs	r1, #32
 800885c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2278      	movs	r2, #120	; 0x78
 800886e:	2100      	movs	r1, #0
 8008870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	0018      	movs	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	b010      	add	sp, #64	; 0x40
 800887a:	bd80      	pop	{r7, pc}
 800887c:	01ffffff 	.word	0x01ffffff
 8008880:	fffffedf 	.word	0xfffffedf

08008884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	1dfb      	adds	r3, r7, #7
 8008892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008894:	e04b      	b.n	800892e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3301      	adds	r3, #1
 800889a:	d048      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889c:	f7fb fbb8 	bl	8004010 <HAL_GetTick>
 80088a0:	0002      	movs	r2, r0
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e04b      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2204      	movs	r2, #4
 80088be:	4013      	ands	r3, r2
 80088c0:	d035      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	2208      	movs	r2, #8
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d111      	bne.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2208      	movs	r2, #8
 80088d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 f83c 	bl	8008958 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2284      	movs	r2, #132	; 0x84
 80088e4:	2108      	movs	r1, #8
 80088e6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2278      	movs	r2, #120	; 0x78
 80088ec:	2100      	movs	r1, #0
 80088ee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e02c      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69da      	ldr	r2, [r3, #28]
 80088fa:	2380      	movs	r3, #128	; 0x80
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	401a      	ands	r2, r3
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	429a      	cmp	r2, r3
 8008906:	d112      	bne.n	800892e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	0112      	lsls	r2, r2, #4
 8008910:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	0018      	movs	r0, r3
 8008916:	f000 f81f 	bl	8008958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2284      	movs	r2, #132	; 0x84
 800891e:	2120      	movs	r1, #32
 8008920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2278      	movs	r2, #120	; 0x78
 8008926:	2100      	movs	r1, #0
 8008928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e00f      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	425a      	negs	r2, r3
 800893e:	4153      	adcs	r3, r2
 8008940:	b2db      	uxtb	r3, r3
 8008942:	001a      	movs	r2, r3
 8008944:	1dfb      	adds	r3, r7, #7
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d0a4      	beq.n	8008896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	0018      	movs	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	b004      	add	sp, #16
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08e      	sub	sp, #56	; 0x38
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008960:	f3ef 8310 	mrs	r3, PRIMASK
 8008964:	617b      	str	r3, [r7, #20]
  return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
 800896a:	2301      	movs	r3, #1
 800896c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f383 8810 	msr	PRIMASK, r3
}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4926      	ldr	r1, [pc, #152]	; (8008a1c <UART_EndRxTransfer+0xc4>)
 8008982:	400a      	ands	r2, r1
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f383 8810 	msr	PRIMASK, r3
}
 8008990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008992:	f3ef 8310 	mrs	r3, PRIMASK
 8008996:	623b      	str	r3, [r7, #32]
  return(result);
 8008998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899a:	633b      	str	r3, [r7, #48]	; 0x30
 800899c:	2301      	movs	r3, #1
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	f383 8810 	msr	PRIMASK, r3
}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2101      	movs	r1, #1
 80089b4:	438a      	bics	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	f383 8810 	msr	PRIMASK, r3
}
 80089c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d118      	bne.n	80089fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089cc:	f3ef 8310 	mrs	r3, PRIMASK
 80089d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80089d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089d6:	2301      	movs	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f383 8810 	msr	PRIMASK, r3
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2110      	movs	r1, #16
 80089ee:	438a      	bics	r2, r1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f383 8810 	msr	PRIMASK, r3
}
 80089fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2280      	movs	r2, #128	; 0x80
 8008a02:	2120      	movs	r1, #32
 8008a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b00e      	add	sp, #56	; 0x38
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	fffffedf 	.word	0xfffffedf

08008a20 <__cvt>:
 8008a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a22:	001e      	movs	r6, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	0014      	movs	r4, r2
 8008a28:	b08b      	sub	sp, #44	; 0x2c
 8008a2a:	429e      	cmp	r6, r3
 8008a2c:	da04      	bge.n	8008a38 <__cvt+0x18>
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	0609      	lsls	r1, r1, #24
 8008a32:	1873      	adds	r3, r6, r1
 8008a34:	001e      	movs	r6, r3
 8008a36:	232d      	movs	r3, #45	; 0x2d
 8008a38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a3c:	7013      	strb	r3, [r2, #0]
 8008a3e:	2320      	movs	r3, #32
 8008a40:	2203      	movs	r2, #3
 8008a42:	439f      	bics	r7, r3
 8008a44:	2f46      	cmp	r7, #70	; 0x46
 8008a46:	d007      	beq.n	8008a58 <__cvt+0x38>
 8008a48:	003b      	movs	r3, r7
 8008a4a:	3b45      	subs	r3, #69	; 0x45
 8008a4c:	4259      	negs	r1, r3
 8008a4e:	414b      	adcs	r3, r1
 8008a50:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a52:	3a01      	subs	r2, #1
 8008a54:	18cb      	adds	r3, r1, r3
 8008a56:	9310      	str	r3, [sp, #64]	; 0x40
 8008a58:	ab09      	add	r3, sp, #36	; 0x24
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	ab08      	add	r3, sp, #32
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a62:	9200      	str	r2, [sp, #0]
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a68:	0022      	movs	r2, r4
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	0033      	movs	r3, r6
 8008a6e:	f000 fea7 	bl	80097c0 <_dtoa_r>
 8008a72:	0005      	movs	r5, r0
 8008a74:	2f47      	cmp	r7, #71	; 0x47
 8008a76:	d102      	bne.n	8008a7e <__cvt+0x5e>
 8008a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	d528      	bpl.n	8008ad0 <__cvt+0xb0>
 8008a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a80:	18eb      	adds	r3, r5, r3
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	2f46      	cmp	r7, #70	; 0x46
 8008a86:	d114      	bne.n	8008ab2 <__cvt+0x92>
 8008a88:	782b      	ldrb	r3, [r5, #0]
 8008a8a:	2b30      	cmp	r3, #48	; 0x30
 8008a8c:	d10c      	bne.n	8008aa8 <__cvt+0x88>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	0020      	movs	r0, r4
 8008a94:	0031      	movs	r1, r6
 8008a96:	f7f7 fcd9 	bl	800044c <__aeabi_dcmpeq>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d104      	bne.n	8008aa8 <__cvt+0x88>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	18d3      	adds	r3, r2, r3
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	0020      	movs	r0, r4
 8008ab8:	0031      	movs	r1, r6
 8008aba:	f7f7 fcc7 	bl	800044c <__aeabi_dcmpeq>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d001      	beq.n	8008ac6 <__cvt+0xa6>
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac6:	2230      	movs	r2, #48	; 0x30
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	9907      	ldr	r1, [sp, #28]
 8008acc:	428b      	cmp	r3, r1
 8008ace:	d306      	bcc.n	8008ade <__cvt+0xbe>
 8008ad0:	0028      	movs	r0, r5
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ad6:	1b5b      	subs	r3, r3, r5
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	b00b      	add	sp, #44	; 0x2c
 8008adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e7f0      	b.n	8008ac8 <__cvt+0xa8>

08008ae6 <__exponent>:
 8008ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae8:	1c83      	adds	r3, r0, #2
 8008aea:	b087      	sub	sp, #28
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	0005      	movs	r5, r0
 8008af0:	000c      	movs	r4, r1
 8008af2:	232b      	movs	r3, #43	; 0x2b
 8008af4:	7002      	strb	r2, [r0, #0]
 8008af6:	2900      	cmp	r1, #0
 8008af8:	da01      	bge.n	8008afe <__exponent+0x18>
 8008afa:	424c      	negs	r4, r1
 8008afc:	3302      	adds	r3, #2
 8008afe:	706b      	strb	r3, [r5, #1]
 8008b00:	2c09      	cmp	r4, #9
 8008b02:	dd2f      	ble.n	8008b64 <__exponent+0x7e>
 8008b04:	270a      	movs	r7, #10
 8008b06:	ab04      	add	r3, sp, #16
 8008b08:	1dde      	adds	r6, r3, #7
 8008b0a:	0020      	movs	r0, r4
 8008b0c:	0039      	movs	r1, r7
 8008b0e:	9601      	str	r6, [sp, #4]
 8008b10:	f7f7 fc86 	bl	8000420 <__aeabi_idivmod>
 8008b14:	3e01      	subs	r6, #1
 8008b16:	3130      	adds	r1, #48	; 0x30
 8008b18:	0020      	movs	r0, r4
 8008b1a:	7031      	strb	r1, [r6, #0]
 8008b1c:	0039      	movs	r1, r7
 8008b1e:	9402      	str	r4, [sp, #8]
 8008b20:	f7f7 fb98 	bl	8000254 <__divsi3>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	0004      	movs	r4, r0
 8008b28:	2b63      	cmp	r3, #99	; 0x63
 8008b2a:	dcee      	bgt.n	8008b0a <__exponent+0x24>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	3430      	adds	r4, #48	; 0x30
 8008b30:	1e9a      	subs	r2, r3, #2
 8008b32:	0013      	movs	r3, r2
 8008b34:	9903      	ldr	r1, [sp, #12]
 8008b36:	7014      	strb	r4, [r2, #0]
 8008b38:	a804      	add	r0, sp, #16
 8008b3a:	3007      	adds	r0, #7
 8008b3c:	4298      	cmp	r0, r3
 8008b3e:	d80c      	bhi.n	8008b5a <__exponent+0x74>
 8008b40:	2300      	movs	r3, #0
 8008b42:	4282      	cmp	r2, r0
 8008b44:	d804      	bhi.n	8008b50 <__exponent+0x6a>
 8008b46:	aa04      	add	r2, sp, #16
 8008b48:	3309      	adds	r3, #9
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	9a01      	ldr	r2, [sp, #4]
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	9a03      	ldr	r2, [sp, #12]
 8008b52:	18d3      	adds	r3, r2, r3
 8008b54:	1b58      	subs	r0, r3, r5
 8008b56:	b007      	add	sp, #28
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	7818      	ldrb	r0, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	7008      	strb	r0, [r1, #0]
 8008b60:	3101      	adds	r1, #1
 8008b62:	e7e9      	b.n	8008b38 <__exponent+0x52>
 8008b64:	2330      	movs	r3, #48	; 0x30
 8008b66:	3430      	adds	r4, #48	; 0x30
 8008b68:	70ab      	strb	r3, [r5, #2]
 8008b6a:	70ec      	strb	r4, [r5, #3]
 8008b6c:	1d2b      	adds	r3, r5, #4
 8008b6e:	e7f1      	b.n	8008b54 <__exponent+0x6e>

08008b70 <_printf_float>:
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b095      	sub	sp, #84	; 0x54
 8008b74:	000c      	movs	r4, r1
 8008b76:	9208      	str	r2, [sp, #32]
 8008b78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7c:	0007      	movs	r7, r0
 8008b7e:	f000 fd05 	bl	800958c <_localeconv_r>
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	0018      	movs	r0, r3
 8008b86:	930c      	str	r3, [sp, #48]	; 0x30
 8008b88:	f7f7 fabe 	bl	8000108 <strlen>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8008b90:	7e23      	ldrb	r3, [r4, #24]
 8008b92:	2207      	movs	r2, #7
 8008b94:	930a      	str	r3, [sp, #40]	; 0x28
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	900d      	str	r0, [sp, #52]	; 0x34
 8008b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	05c9      	lsls	r1, r1, #23
 8008ba2:	d547      	bpl.n	8008c34 <_printf_float+0xc4>
 8008ba4:	189b      	adds	r3, r3, r2
 8008ba6:	4393      	bics	r3, r2
 8008ba8:	001a      	movs	r2, r3
 8008baa:	3208      	adds	r2, #8
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	681e      	ldr	r6, [r3, #0]
 8008bb0:	685d      	ldr	r5, [r3, #4]
 8008bb2:	0032      	movs	r2, r6
 8008bb4:	002b      	movs	r3, r5
 8008bb6:	64a2      	str	r2, [r4, #72]	; 0x48
 8008bb8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008bba:	2201      	movs	r2, #1
 8008bbc:	006b      	lsls	r3, r5, #1
 8008bbe:	085b      	lsrs	r3, r3, #1
 8008bc0:	930e      	str	r3, [sp, #56]	; 0x38
 8008bc2:	0030      	movs	r0, r6
 8008bc4:	4bab      	ldr	r3, [pc, #684]	; (8008e74 <_printf_float+0x304>)
 8008bc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bc8:	4252      	negs	r2, r2
 8008bca:	f7f9 fd71 	bl	80026b0 <__aeabi_dcmpun>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d132      	bne.n	8008c38 <_printf_float+0xc8>
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	0030      	movs	r0, r6
 8008bd6:	4ba7      	ldr	r3, [pc, #668]	; (8008e74 <_printf_float+0x304>)
 8008bd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bda:	4252      	negs	r2, r2
 8008bdc:	f7f7 fc46 	bl	800046c <__aeabi_dcmple>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d129      	bne.n	8008c38 <_printf_float+0xc8>
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	0030      	movs	r0, r6
 8008bea:	0029      	movs	r1, r5
 8008bec:	f7f7 fc34 	bl	8000458 <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d003      	beq.n	8008bfc <_printf_float+0x8c>
 8008bf4:	0023      	movs	r3, r4
 8008bf6:	222d      	movs	r2, #45	; 0x2d
 8008bf8:	3343      	adds	r3, #67	; 0x43
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfe:	4d9e      	ldr	r5, [pc, #632]	; (8008e78 <_printf_float+0x308>)
 8008c00:	2b47      	cmp	r3, #71	; 0x47
 8008c02:	d900      	bls.n	8008c06 <_printf_float+0x96>
 8008c04:	4d9d      	ldr	r5, [pc, #628]	; (8008e7c <_printf_float+0x30c>)
 8008c06:	2303      	movs	r3, #3
 8008c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	439a      	bics	r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6022      	str	r2, [r4, #0]
 8008c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	0021      	movs	r1, r4
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	0038      	movs	r0, r7
 8008c1e:	9b08      	ldr	r3, [sp, #32]
 8008c20:	aa13      	add	r2, sp, #76	; 0x4c
 8008c22:	f000 f9fb 	bl	800901c <_printf_common>
 8008c26:	3001      	adds	r0, #1
 8008c28:	d000      	beq.n	8008c2c <_printf_float+0xbc>
 8008c2a:	e0a3      	b.n	8008d74 <_printf_float+0x204>
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	4240      	negs	r0, r0
 8008c30:	b015      	add	sp, #84	; 0x54
 8008c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c34:	3307      	adds	r3, #7
 8008c36:	e7b6      	b.n	8008ba6 <_printf_float+0x36>
 8008c38:	0032      	movs	r2, r6
 8008c3a:	002b      	movs	r3, r5
 8008c3c:	0030      	movs	r0, r6
 8008c3e:	0029      	movs	r1, r5
 8008c40:	f7f9 fd36 	bl	80026b0 <__aeabi_dcmpun>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d00b      	beq.n	8008c60 <_printf_float+0xf0>
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	da03      	bge.n	8008c54 <_printf_float+0xe4>
 8008c4c:	0023      	movs	r3, r4
 8008c4e:	222d      	movs	r2, #45	; 0x2d
 8008c50:	3343      	adds	r3, #67	; 0x43
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c56:	4d8a      	ldr	r5, [pc, #552]	; (8008e80 <_printf_float+0x310>)
 8008c58:	2b47      	cmp	r3, #71	; 0x47
 8008c5a:	d9d4      	bls.n	8008c06 <_printf_float+0x96>
 8008c5c:	4d89      	ldr	r5, [pc, #548]	; (8008e84 <_printf_float+0x314>)
 8008c5e:	e7d2      	b.n	8008c06 <_printf_float+0x96>
 8008c60:	2220      	movs	r2, #32
 8008c62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	4391      	bics	r1, r2
 8008c68:	910e      	str	r1, [sp, #56]	; 0x38
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	d14a      	bne.n	8008d04 <_printf_float+0x194>
 8008c6e:	3307      	adds	r3, #7
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	9206      	str	r2, [sp, #24]
 8008c7e:	aa12      	add	r2, sp, #72	; 0x48
 8008c80:	9205      	str	r2, [sp, #20]
 8008c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	9204      	str	r2, [sp, #16]
 8008c88:	aa11      	add	r2, sp, #68	; 0x44
 8008c8a:	9203      	str	r2, [sp, #12]
 8008c8c:	2223      	movs	r2, #35	; 0x23
 8008c8e:	a908      	add	r1, sp, #32
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	6863      	ldr	r3, [r4, #4]
 8008c94:	1852      	adds	r2, r2, r1
 8008c96:	9202      	str	r2, [sp, #8]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	0032      	movs	r2, r6
 8008c9c:	002b      	movs	r3, r5
 8008c9e:	0038      	movs	r0, r7
 8008ca0:	f7ff febe 	bl	8008a20 <__cvt>
 8008ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ca6:	0005      	movs	r5, r0
 8008ca8:	2b47      	cmp	r3, #71	; 0x47
 8008caa:	d109      	bne.n	8008cc0 <_printf_float+0x150>
 8008cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cae:	1cda      	adds	r2, r3, #3
 8008cb0:	db02      	blt.n	8008cb8 <_printf_float+0x148>
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	dd49      	ble.n	8008d4c <_printf_float+0x1dc>
 8008cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cba:	3b02      	subs	r3, #2
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cc4:	2b65      	cmp	r3, #101	; 0x65
 8008cc6:	d824      	bhi.n	8008d12 <_printf_float+0x1a2>
 8008cc8:	0020      	movs	r0, r4
 8008cca:	001a      	movs	r2, r3
 8008ccc:	3901      	subs	r1, #1
 8008cce:	3050      	adds	r0, #80	; 0x50
 8008cd0:	9111      	str	r1, [sp, #68]	; 0x44
 8008cd2:	f7ff ff08 	bl	8008ae6 <__exponent>
 8008cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008cda:	1813      	adds	r3, r2, r0
 8008cdc:	6123      	str	r3, [r4, #16]
 8008cde:	2a01      	cmp	r2, #1
 8008ce0:	dc02      	bgt.n	8008ce8 <_printf_float+0x178>
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	07d2      	lsls	r2, r2, #31
 8008ce6:	d501      	bpl.n	8008cec <_printf_float+0x17c>
 8008ce8:	3301      	adds	r3, #1
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	2323      	movs	r3, #35	; 0x23
 8008cee:	aa08      	add	r2, sp, #32
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d100      	bne.n	8008cfa <_printf_float+0x18a>
 8008cf8:	e78d      	b.n	8008c16 <_printf_float+0xa6>
 8008cfa:	0023      	movs	r3, r4
 8008cfc:	222d      	movs	r2, #45	; 0x2d
 8008cfe:	3343      	adds	r3, #67	; 0x43
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e788      	b.n	8008c16 <_printf_float+0xa6>
 8008d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d06:	2a47      	cmp	r2, #71	; 0x47
 8008d08:	d1b3      	bne.n	8008c72 <_printf_float+0x102>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1b1      	bne.n	8008c72 <_printf_float+0x102>
 8008d0e:	3301      	adds	r3, #1
 8008d10:	e7ae      	b.n	8008c70 <_printf_float+0x100>
 8008d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d14:	2b66      	cmp	r3, #102	; 0x66
 8008d16:	d11b      	bne.n	8008d50 <_printf_float+0x1e0>
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	dd09      	ble.n	8008d32 <_printf_float+0x1c2>
 8008d1e:	6121      	str	r1, [r4, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <_printf_float+0x1ba>
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	07d2      	lsls	r2, r2, #31
 8008d28:	d50b      	bpl.n	8008d42 <_printf_float+0x1d2>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	185b      	adds	r3, r3, r1
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	e007      	b.n	8008d42 <_printf_float+0x1d2>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d103      	bne.n	8008d3e <_printf_float+0x1ce>
 8008d36:	2201      	movs	r2, #1
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	4211      	tst	r1, r2
 8008d3c:	d000      	beq.n	8008d40 <_printf_float+0x1d0>
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	6122      	str	r2, [r4, #16]
 8008d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d44:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d46:	2300      	movs	r3, #0
 8008d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d4a:	e7cf      	b.n	8008cec <_printf_float+0x17c>
 8008d4c:	2367      	movs	r3, #103	; 0x67
 8008d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d50:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d54:	4299      	cmp	r1, r3
 8008d56:	db06      	blt.n	8008d66 <_printf_float+0x1f6>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	6121      	str	r1, [r4, #16]
 8008d5c:	07db      	lsls	r3, r3, #31
 8008d5e:	d5f0      	bpl.n	8008d42 <_printf_float+0x1d2>
 8008d60:	3101      	adds	r1, #1
 8008d62:	6121      	str	r1, [r4, #16]
 8008d64:	e7ed      	b.n	8008d42 <_printf_float+0x1d2>
 8008d66:	2201      	movs	r2, #1
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	dc01      	bgt.n	8008d70 <_printf_float+0x200>
 8008d6c:	1892      	adds	r2, r2, r2
 8008d6e:	1a52      	subs	r2, r2, r1
 8008d70:	189b      	adds	r3, r3, r2
 8008d72:	e7dc      	b.n	8008d2e <_printf_float+0x1be>
 8008d74:	6822      	ldr	r2, [r4, #0]
 8008d76:	0553      	lsls	r3, r2, #21
 8008d78:	d408      	bmi.n	8008d8c <_printf_float+0x21c>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	002a      	movs	r2, r5
 8008d7e:	0038      	movs	r0, r7
 8008d80:	9908      	ldr	r1, [sp, #32]
 8008d82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d84:	47a8      	blx	r5
 8008d86:	3001      	adds	r0, #1
 8008d88:	d12a      	bne.n	8008de0 <_printf_float+0x270>
 8008d8a:	e74f      	b.n	8008c2c <_printf_float+0xbc>
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8e:	2b65      	cmp	r3, #101	; 0x65
 8008d90:	d800      	bhi.n	8008d94 <_printf_float+0x224>
 8008d92:	e0ec      	b.n	8008f6e <_printf_float+0x3fe>
 8008d94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f7f7 fb56 	bl	800044c <__aeabi_dcmpeq>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d034      	beq.n	8008e0e <_printf_float+0x29e>
 8008da4:	2301      	movs	r3, #1
 8008da6:	0038      	movs	r0, r7
 8008da8:	4a37      	ldr	r2, [pc, #220]	; (8008e88 <_printf_float+0x318>)
 8008daa:	9908      	ldr	r1, [sp, #32]
 8008dac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dae:	47a8      	blx	r5
 8008db0:	3001      	adds	r0, #1
 8008db2:	d100      	bne.n	8008db6 <_printf_float+0x246>
 8008db4:	e73a      	b.n	8008c2c <_printf_float+0xbc>
 8008db6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	db02      	blt.n	8008dc4 <_printf_float+0x254>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	07db      	lsls	r3, r3, #31
 8008dc2:	d50d      	bpl.n	8008de0 <_printf_float+0x270>
 8008dc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dc6:	0038      	movs	r0, r7
 8008dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dcc:	9908      	ldr	r1, [sp, #32]
 8008dce:	47a8      	blx	r5
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d100      	bne.n	8008dd8 <_printf_float+0x268>
 8008dd6:	e729      	b.n	8008c2c <_printf_float+0xbc>
 8008dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc0a      	bgt.n	8008df6 <_printf_float+0x286>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	079b      	lsls	r3, r3, #30
 8008de4:	d500      	bpl.n	8008de8 <_printf_float+0x278>
 8008de6:	e116      	b.n	8009016 <_printf_float+0x4a6>
 8008de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	4298      	cmp	r0, r3
 8008dee:	db00      	blt.n	8008df2 <_printf_float+0x282>
 8008df0:	e71e      	b.n	8008c30 <_printf_float+0xc0>
 8008df2:	0018      	movs	r0, r3
 8008df4:	e71c      	b.n	8008c30 <_printf_float+0xc0>
 8008df6:	0022      	movs	r2, r4
 8008df8:	2301      	movs	r3, #1
 8008dfa:	0038      	movs	r0, r7
 8008dfc:	9908      	ldr	r1, [sp, #32]
 8008dfe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e00:	321a      	adds	r2, #26
 8008e02:	47b0      	blx	r6
 8008e04:	3001      	adds	r0, #1
 8008e06:	d100      	bne.n	8008e0a <_printf_float+0x29a>
 8008e08:	e710      	b.n	8008c2c <_printf_float+0xbc>
 8008e0a:	3501      	adds	r5, #1
 8008e0c:	e7e4      	b.n	8008dd8 <_printf_float+0x268>
 8008e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dc3b      	bgt.n	8008e8c <_printf_float+0x31c>
 8008e14:	2301      	movs	r3, #1
 8008e16:	0038      	movs	r0, r7
 8008e18:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <_printf_float+0x318>)
 8008e1a:	9908      	ldr	r1, [sp, #32]
 8008e1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e1e:	47b0      	blx	r6
 8008e20:	3001      	adds	r0, #1
 8008e22:	d100      	bne.n	8008e26 <_printf_float+0x2b6>
 8008e24:	e702      	b.n	8008c2c <_printf_float+0xbc>
 8008e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	d102      	bne.n	8008e34 <_printf_float+0x2c4>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07db      	lsls	r3, r3, #31
 8008e32:	d5d5      	bpl.n	8008de0 <_printf_float+0x270>
 8008e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e36:	0038      	movs	r0, r7
 8008e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e3a:	9908      	ldr	r1, [sp, #32]
 8008e3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e3e:	47b0      	blx	r6
 8008e40:	2300      	movs	r3, #0
 8008e42:	3001      	adds	r0, #1
 8008e44:	d100      	bne.n	8008e48 <_printf_float+0x2d8>
 8008e46:	e6f1      	b.n	8008c2c <_printf_float+0xbc>
 8008e48:	930a      	str	r3, [sp, #40]	; 0x28
 8008e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4e:	425b      	negs	r3, r3
 8008e50:	4293      	cmp	r3, r2
 8008e52:	dc01      	bgt.n	8008e58 <_printf_float+0x2e8>
 8008e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e56:	e791      	b.n	8008d7c <_printf_float+0x20c>
 8008e58:	0022      	movs	r2, r4
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	0038      	movs	r0, r7
 8008e5e:	9908      	ldr	r1, [sp, #32]
 8008e60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e62:	321a      	adds	r2, #26
 8008e64:	47b0      	blx	r6
 8008e66:	3001      	adds	r0, #1
 8008e68:	d100      	bne.n	8008e6c <_printf_float+0x2fc>
 8008e6a:	e6df      	b.n	8008c2c <_printf_float+0xbc>
 8008e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6e:	3301      	adds	r3, #1
 8008e70:	e7ea      	b.n	8008e48 <_printf_float+0x2d8>
 8008e72:	46c0      	nop			; (mov r8, r8)
 8008e74:	7fefffff 	.word	0x7fefffff
 8008e78:	0800b9f0 	.word	0x0800b9f0
 8008e7c:	0800b9f4 	.word	0x0800b9f4
 8008e80:	0800b9f8 	.word	0x0800b9f8
 8008e84:	0800b9fc 	.word	0x0800b9fc
 8008e88:	0800ba00 	.word	0x0800ba00
 8008e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e90:	920a      	str	r2, [sp, #40]	; 0x28
 8008e92:	429a      	cmp	r2, r3
 8008e94:	dd00      	ble.n	8008e98 <_printf_float+0x328>
 8008e96:	930a      	str	r3, [sp, #40]	; 0x28
 8008e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc3d      	bgt.n	8008f1a <_printf_float+0x3aa>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea4:	43db      	mvns	r3, r3
 8008ea6:	17db      	asrs	r3, r3, #31
 8008ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	dc36      	bgt.n	8008f2c <_printf_float+0x3bc>
 8008ebe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	db40      	blt.n	8008f48 <_printf_float+0x3d8>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	07db      	lsls	r3, r3, #31
 8008eca:	d43d      	bmi.n	8008f48 <_printf_float+0x3d8>
 8008ecc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ed2:	1af3      	subs	r3, r6, r3
 8008ed4:	1ab6      	subs	r6, r6, r2
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	dd00      	ble.n	8008edc <_printf_float+0x36c>
 8008eda:	001e      	movs	r6, r3
 8008edc:	2e00      	cmp	r6, #0
 8008ede:	dc3c      	bgt.n	8008f5a <_printf_float+0x3ea>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee4:	43f3      	mvns	r3, r6
 8008ee6:	17db      	asrs	r3, r3, #31
 8008ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ef2:	4032      	ands	r2, r6
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	dc00      	bgt.n	8008efe <_printf_float+0x38e>
 8008efc:	e770      	b.n	8008de0 <_printf_float+0x270>
 8008efe:	0022      	movs	r2, r4
 8008f00:	2301      	movs	r3, #1
 8008f02:	0038      	movs	r0, r7
 8008f04:	9908      	ldr	r1, [sp, #32]
 8008f06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f08:	321a      	adds	r2, #26
 8008f0a:	47a8      	blx	r5
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d100      	bne.n	8008f12 <_printf_float+0x3a2>
 8008f10:	e68c      	b.n	8008c2c <_printf_float+0xbc>
 8008f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f14:	3301      	adds	r3, #1
 8008f16:	930a      	str	r3, [sp, #40]	; 0x28
 8008f18:	e7e7      	b.n	8008eea <_printf_float+0x37a>
 8008f1a:	002a      	movs	r2, r5
 8008f1c:	0038      	movs	r0, r7
 8008f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f20:	9908      	ldr	r1, [sp, #32]
 8008f22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f24:	47b0      	blx	r6
 8008f26:	3001      	adds	r0, #1
 8008f28:	d1b9      	bne.n	8008e9e <_printf_float+0x32e>
 8008f2a:	e67f      	b.n	8008c2c <_printf_float+0xbc>
 8008f2c:	0022      	movs	r2, r4
 8008f2e:	2301      	movs	r3, #1
 8008f30:	0038      	movs	r0, r7
 8008f32:	9908      	ldr	r1, [sp, #32]
 8008f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f36:	321a      	adds	r2, #26
 8008f38:	47b0      	blx	r6
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d100      	bne.n	8008f40 <_printf_float+0x3d0>
 8008f3e:	e675      	b.n	8008c2c <_printf_float+0xbc>
 8008f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f42:	3301      	adds	r3, #1
 8008f44:	930e      	str	r3, [sp, #56]	; 0x38
 8008f46:	e7b0      	b.n	8008eaa <_printf_float+0x33a>
 8008f48:	0038      	movs	r0, r7
 8008f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f4e:	9908      	ldr	r1, [sp, #32]
 8008f50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f52:	47b0      	blx	r6
 8008f54:	3001      	adds	r0, #1
 8008f56:	d1b9      	bne.n	8008ecc <_printf_float+0x35c>
 8008f58:	e668      	b.n	8008c2c <_printf_float+0xbc>
 8008f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5c:	0038      	movs	r0, r7
 8008f5e:	18ea      	adds	r2, r5, r3
 8008f60:	9908      	ldr	r1, [sp, #32]
 8008f62:	0033      	movs	r3, r6
 8008f64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f66:	47a8      	blx	r5
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d1b9      	bne.n	8008ee0 <_printf_float+0x370>
 8008f6c:	e65e      	b.n	8008c2c <_printf_float+0xbc>
 8008f6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	dc02      	bgt.n	8008f7a <_printf_float+0x40a>
 8008f74:	2301      	movs	r3, #1
 8008f76:	421a      	tst	r2, r3
 8008f78:	d03a      	beq.n	8008ff0 <_printf_float+0x480>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	002a      	movs	r2, r5
 8008f7e:	0038      	movs	r0, r7
 8008f80:	9908      	ldr	r1, [sp, #32]
 8008f82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f84:	47b0      	blx	r6
 8008f86:	3001      	adds	r0, #1
 8008f88:	d100      	bne.n	8008f8c <_printf_float+0x41c>
 8008f8a:	e64f      	b.n	8008c2c <_printf_float+0xbc>
 8008f8c:	0038      	movs	r0, r7
 8008f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f92:	9908      	ldr	r1, [sp, #32]
 8008f94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f96:	47b0      	blx	r6
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d100      	bne.n	8008f9e <_printf_float+0x42e>
 8008f9c:	e646      	b.n	8008c2c <_printf_float+0xbc>
 8008f9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fa0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	001e      	movs	r6, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f7f7 fa4f 	bl	800044c <__aeabi_dcmpeq>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d11c      	bne.n	8008fec <_printf_float+0x47c>
 8008fb2:	0033      	movs	r3, r6
 8008fb4:	1c6a      	adds	r2, r5, #1
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	0038      	movs	r0, r7
 8008fba:	9908      	ldr	r1, [sp, #32]
 8008fbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fbe:	47a8      	blx	r5
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d10f      	bne.n	8008fe4 <_printf_float+0x474>
 8008fc4:	e632      	b.n	8008c2c <_printf_float+0xbc>
 8008fc6:	0022      	movs	r2, r4
 8008fc8:	2301      	movs	r3, #1
 8008fca:	0038      	movs	r0, r7
 8008fcc:	9908      	ldr	r1, [sp, #32]
 8008fce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fd0:	321a      	adds	r2, #26
 8008fd2:	47b0      	blx	r6
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d100      	bne.n	8008fda <_printf_float+0x46a>
 8008fd8:	e628      	b.n	8008c2c <_printf_float+0xbc>
 8008fda:	3501      	adds	r5, #1
 8008fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	dcf0      	bgt.n	8008fc6 <_printf_float+0x456>
 8008fe4:	0022      	movs	r2, r4
 8008fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe8:	3250      	adds	r2, #80	; 0x50
 8008fea:	e6c8      	b.n	8008d7e <_printf_float+0x20e>
 8008fec:	2500      	movs	r5, #0
 8008fee:	e7f5      	b.n	8008fdc <_printf_float+0x46c>
 8008ff0:	002a      	movs	r2, r5
 8008ff2:	e7e1      	b.n	8008fb8 <_printf_float+0x448>
 8008ff4:	0022      	movs	r2, r4
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	0038      	movs	r0, r7
 8008ffa:	9908      	ldr	r1, [sp, #32]
 8008ffc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ffe:	3219      	adds	r2, #25
 8009000:	47b0      	blx	r6
 8009002:	3001      	adds	r0, #1
 8009004:	d100      	bne.n	8009008 <_printf_float+0x498>
 8009006:	e611      	b.n	8008c2c <_printf_float+0xbc>
 8009008:	3501      	adds	r5, #1
 800900a:	68e3      	ldr	r3, [r4, #12]
 800900c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800900e:	1a9b      	subs	r3, r3, r2
 8009010:	42ab      	cmp	r3, r5
 8009012:	dcef      	bgt.n	8008ff4 <_printf_float+0x484>
 8009014:	e6e8      	b.n	8008de8 <_printf_float+0x278>
 8009016:	2500      	movs	r5, #0
 8009018:	e7f7      	b.n	800900a <_printf_float+0x49a>
 800901a:	46c0      	nop			; (mov r8, r8)

0800901c <_printf_common>:
 800901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901e:	0016      	movs	r6, r2
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	688a      	ldr	r2, [r1, #8]
 8009024:	690b      	ldr	r3, [r1, #16]
 8009026:	000c      	movs	r4, r1
 8009028:	9000      	str	r0, [sp, #0]
 800902a:	4293      	cmp	r3, r2
 800902c:	da00      	bge.n	8009030 <_printf_common+0x14>
 800902e:	0013      	movs	r3, r2
 8009030:	0022      	movs	r2, r4
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	3243      	adds	r2, #67	; 0x43
 8009036:	7812      	ldrb	r2, [r2, #0]
 8009038:	2a00      	cmp	r2, #0
 800903a:	d001      	beq.n	8009040 <_printf_common+0x24>
 800903c:	3301      	adds	r3, #1
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	069b      	lsls	r3, r3, #26
 8009044:	d502      	bpl.n	800904c <_printf_common+0x30>
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	3302      	adds	r3, #2
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	2306      	movs	r3, #6
 8009050:	0015      	movs	r5, r2
 8009052:	401d      	ands	r5, r3
 8009054:	421a      	tst	r2, r3
 8009056:	d027      	beq.n	80090a8 <_printf_common+0x8c>
 8009058:	0023      	movs	r3, r4
 800905a:	3343      	adds	r3, #67	; 0x43
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	1e5a      	subs	r2, r3, #1
 8009060:	4193      	sbcs	r3, r2
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	0692      	lsls	r2, r2, #26
 8009066:	d430      	bmi.n	80090ca <_printf_common+0xae>
 8009068:	0022      	movs	r2, r4
 800906a:	9901      	ldr	r1, [sp, #4]
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	9d08      	ldr	r5, [sp, #32]
 8009070:	3243      	adds	r2, #67	; 0x43
 8009072:	47a8      	blx	r5
 8009074:	3001      	adds	r0, #1
 8009076:	d025      	beq.n	80090c4 <_printf_common+0xa8>
 8009078:	2206      	movs	r2, #6
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	2500      	movs	r5, #0
 800907e:	4013      	ands	r3, r2
 8009080:	2b04      	cmp	r3, #4
 8009082:	d105      	bne.n	8009090 <_printf_common+0x74>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	68e5      	ldr	r5, [r4, #12]
 8009088:	1aed      	subs	r5, r5, r3
 800908a:	43eb      	mvns	r3, r5
 800908c:	17db      	asrs	r3, r3, #31
 800908e:	401d      	ands	r5, r3
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	4293      	cmp	r3, r2
 8009096:	dd01      	ble.n	800909c <_printf_common+0x80>
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	18ed      	adds	r5, r5, r3
 800909c:	2600      	movs	r6, #0
 800909e:	42b5      	cmp	r5, r6
 80090a0:	d120      	bne.n	80090e4 <_printf_common+0xc8>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e010      	b.n	80090c8 <_printf_common+0xac>
 80090a6:	3501      	adds	r5, #1
 80090a8:	68e3      	ldr	r3, [r4, #12]
 80090aa:	6832      	ldr	r2, [r6, #0]
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	42ab      	cmp	r3, r5
 80090b0:	ddd2      	ble.n	8009058 <_printf_common+0x3c>
 80090b2:	0022      	movs	r2, r4
 80090b4:	2301      	movs	r3, #1
 80090b6:	9901      	ldr	r1, [sp, #4]
 80090b8:	9800      	ldr	r0, [sp, #0]
 80090ba:	9f08      	ldr	r7, [sp, #32]
 80090bc:	3219      	adds	r2, #25
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	d1f0      	bne.n	80090a6 <_printf_common+0x8a>
 80090c4:	2001      	movs	r0, #1
 80090c6:	4240      	negs	r0, r0
 80090c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ca:	2030      	movs	r0, #48	; 0x30
 80090cc:	18e1      	adds	r1, r4, r3
 80090ce:	3143      	adds	r1, #67	; 0x43
 80090d0:	7008      	strb	r0, [r1, #0]
 80090d2:	0021      	movs	r1, r4
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	3145      	adds	r1, #69	; 0x45
 80090d8:	7809      	ldrb	r1, [r1, #0]
 80090da:	18a2      	adds	r2, r4, r2
 80090dc:	3243      	adds	r2, #67	; 0x43
 80090de:	3302      	adds	r3, #2
 80090e0:	7011      	strb	r1, [r2, #0]
 80090e2:	e7c1      	b.n	8009068 <_printf_common+0x4c>
 80090e4:	0022      	movs	r2, r4
 80090e6:	2301      	movs	r3, #1
 80090e8:	9901      	ldr	r1, [sp, #4]
 80090ea:	9800      	ldr	r0, [sp, #0]
 80090ec:	9f08      	ldr	r7, [sp, #32]
 80090ee:	321a      	adds	r2, #26
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	d0e6      	beq.n	80090c4 <_printf_common+0xa8>
 80090f6:	3601      	adds	r6, #1
 80090f8:	e7d1      	b.n	800909e <_printf_common+0x82>
	...

080090fc <_printf_i>:
 80090fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fe:	b08b      	sub	sp, #44	; 0x2c
 8009100:	9206      	str	r2, [sp, #24]
 8009102:	000a      	movs	r2, r1
 8009104:	3243      	adds	r2, #67	; 0x43
 8009106:	9307      	str	r3, [sp, #28]
 8009108:	9005      	str	r0, [sp, #20]
 800910a:	9204      	str	r2, [sp, #16]
 800910c:	7e0a      	ldrb	r2, [r1, #24]
 800910e:	000c      	movs	r4, r1
 8009110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009112:	2a78      	cmp	r2, #120	; 0x78
 8009114:	d809      	bhi.n	800912a <_printf_i+0x2e>
 8009116:	2a62      	cmp	r2, #98	; 0x62
 8009118:	d80b      	bhi.n	8009132 <_printf_i+0x36>
 800911a:	2a00      	cmp	r2, #0
 800911c:	d100      	bne.n	8009120 <_printf_i+0x24>
 800911e:	e0be      	b.n	800929e <_printf_i+0x1a2>
 8009120:	497c      	ldr	r1, [pc, #496]	; (8009314 <_printf_i+0x218>)
 8009122:	9103      	str	r1, [sp, #12]
 8009124:	2a58      	cmp	r2, #88	; 0x58
 8009126:	d100      	bne.n	800912a <_printf_i+0x2e>
 8009128:	e093      	b.n	8009252 <_printf_i+0x156>
 800912a:	0026      	movs	r6, r4
 800912c:	3642      	adds	r6, #66	; 0x42
 800912e:	7032      	strb	r2, [r6, #0]
 8009130:	e022      	b.n	8009178 <_printf_i+0x7c>
 8009132:	0010      	movs	r0, r2
 8009134:	3863      	subs	r0, #99	; 0x63
 8009136:	2815      	cmp	r0, #21
 8009138:	d8f7      	bhi.n	800912a <_printf_i+0x2e>
 800913a:	f7f6 fff7 	bl	800012c <__gnu_thumb1_case_shi>
 800913e:	0016      	.short	0x0016
 8009140:	fff6001f 	.word	0xfff6001f
 8009144:	fff6fff6 	.word	0xfff6fff6
 8009148:	001ffff6 	.word	0x001ffff6
 800914c:	fff6fff6 	.word	0xfff6fff6
 8009150:	fff6fff6 	.word	0xfff6fff6
 8009154:	003600a3 	.word	0x003600a3
 8009158:	fff60083 	.word	0xfff60083
 800915c:	00b4fff6 	.word	0x00b4fff6
 8009160:	0036fff6 	.word	0x0036fff6
 8009164:	fff6fff6 	.word	0xfff6fff6
 8009168:	0087      	.short	0x0087
 800916a:	0026      	movs	r6, r4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	3642      	adds	r6, #66	; 0x42
 8009170:	1d11      	adds	r1, r2, #4
 8009172:	6019      	str	r1, [r3, #0]
 8009174:	6813      	ldr	r3, [r2, #0]
 8009176:	7033      	strb	r3, [r6, #0]
 8009178:	2301      	movs	r3, #1
 800917a:	e0a2      	b.n	80092c2 <_printf_i+0x1c6>
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	6809      	ldr	r1, [r1, #0]
 8009180:	1d02      	adds	r2, r0, #4
 8009182:	060d      	lsls	r5, r1, #24
 8009184:	d50b      	bpl.n	800919e <_printf_i+0xa2>
 8009186:	6805      	ldr	r5, [r0, #0]
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	2d00      	cmp	r5, #0
 800918c:	da03      	bge.n	8009196 <_printf_i+0x9a>
 800918e:	232d      	movs	r3, #45	; 0x2d
 8009190:	9a04      	ldr	r2, [sp, #16]
 8009192:	426d      	negs	r5, r5
 8009194:	7013      	strb	r3, [r2, #0]
 8009196:	4b5f      	ldr	r3, [pc, #380]	; (8009314 <_printf_i+0x218>)
 8009198:	270a      	movs	r7, #10
 800919a:	9303      	str	r3, [sp, #12]
 800919c:	e01b      	b.n	80091d6 <_printf_i+0xda>
 800919e:	6805      	ldr	r5, [r0, #0]
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	0649      	lsls	r1, r1, #25
 80091a4:	d5f1      	bpl.n	800918a <_printf_i+0x8e>
 80091a6:	b22d      	sxth	r5, r5
 80091a8:	e7ef      	b.n	800918a <_printf_i+0x8e>
 80091aa:	680d      	ldr	r5, [r1, #0]
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	1d08      	adds	r0, r1, #4
 80091b0:	6018      	str	r0, [r3, #0]
 80091b2:	062e      	lsls	r6, r5, #24
 80091b4:	d501      	bpl.n	80091ba <_printf_i+0xbe>
 80091b6:	680d      	ldr	r5, [r1, #0]
 80091b8:	e003      	b.n	80091c2 <_printf_i+0xc6>
 80091ba:	066d      	lsls	r5, r5, #25
 80091bc:	d5fb      	bpl.n	80091b6 <_printf_i+0xba>
 80091be:	680d      	ldr	r5, [r1, #0]
 80091c0:	b2ad      	uxth	r5, r5
 80091c2:	4b54      	ldr	r3, [pc, #336]	; (8009314 <_printf_i+0x218>)
 80091c4:	2708      	movs	r7, #8
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	2a6f      	cmp	r2, #111	; 0x6f
 80091ca:	d000      	beq.n	80091ce <_printf_i+0xd2>
 80091cc:	3702      	adds	r7, #2
 80091ce:	0023      	movs	r3, r4
 80091d0:	2200      	movs	r2, #0
 80091d2:	3343      	adds	r3, #67	; 0x43
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	6863      	ldr	r3, [r4, #4]
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	db03      	blt.n	80091e6 <_printf_i+0xea>
 80091de:	2104      	movs	r1, #4
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	438a      	bics	r2, r1
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	d102      	bne.n	80091f0 <_printf_i+0xf4>
 80091ea:	9e04      	ldr	r6, [sp, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <_printf_i+0x10e>
 80091f0:	9e04      	ldr	r6, [sp, #16]
 80091f2:	0028      	movs	r0, r5
 80091f4:	0039      	movs	r1, r7
 80091f6:	f7f7 f829 	bl	800024c <__aeabi_uidivmod>
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	3e01      	subs	r6, #1
 80091fe:	5c5b      	ldrb	r3, [r3, r1]
 8009200:	7033      	strb	r3, [r6, #0]
 8009202:	002b      	movs	r3, r5
 8009204:	0005      	movs	r5, r0
 8009206:	429f      	cmp	r7, r3
 8009208:	d9f3      	bls.n	80091f2 <_printf_i+0xf6>
 800920a:	2f08      	cmp	r7, #8
 800920c:	d109      	bne.n	8009222 <_printf_i+0x126>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	07db      	lsls	r3, r3, #31
 8009212:	d506      	bpl.n	8009222 <_printf_i+0x126>
 8009214:	6862      	ldr	r2, [r4, #4]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	429a      	cmp	r2, r3
 800921a:	dc02      	bgt.n	8009222 <_printf_i+0x126>
 800921c:	2330      	movs	r3, #48	; 0x30
 800921e:	3e01      	subs	r6, #1
 8009220:	7033      	strb	r3, [r6, #0]
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	1b9b      	subs	r3, r3, r6
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	9b07      	ldr	r3, [sp, #28]
 800922a:	0021      	movs	r1, r4
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	9805      	ldr	r0, [sp, #20]
 8009230:	9b06      	ldr	r3, [sp, #24]
 8009232:	aa09      	add	r2, sp, #36	; 0x24
 8009234:	f7ff fef2 	bl	800901c <_printf_common>
 8009238:	3001      	adds	r0, #1
 800923a:	d147      	bne.n	80092cc <_printf_i+0x1d0>
 800923c:	2001      	movs	r0, #1
 800923e:	4240      	negs	r0, r0
 8009240:	b00b      	add	sp, #44	; 0x2c
 8009242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009244:	2220      	movs	r2, #32
 8009246:	6809      	ldr	r1, [r1, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	2278      	movs	r2, #120	; 0x78
 800924e:	4932      	ldr	r1, [pc, #200]	; (8009318 <_printf_i+0x21c>)
 8009250:	9103      	str	r1, [sp, #12]
 8009252:	0021      	movs	r1, r4
 8009254:	3145      	adds	r1, #69	; 0x45
 8009256:	700a      	strb	r2, [r1, #0]
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	c920      	ldmia	r1!, {r5}
 800925e:	0610      	lsls	r0, r2, #24
 8009260:	d402      	bmi.n	8009268 <_printf_i+0x16c>
 8009262:	0650      	lsls	r0, r2, #25
 8009264:	d500      	bpl.n	8009268 <_printf_i+0x16c>
 8009266:	b2ad      	uxth	r5, r5
 8009268:	6019      	str	r1, [r3, #0]
 800926a:	07d3      	lsls	r3, r2, #31
 800926c:	d502      	bpl.n	8009274 <_printf_i+0x178>
 800926e:	2320      	movs	r3, #32
 8009270:	4313      	orrs	r3, r2
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	2710      	movs	r7, #16
 8009276:	2d00      	cmp	r5, #0
 8009278:	d1a9      	bne.n	80091ce <_printf_i+0xd2>
 800927a:	2220      	movs	r2, #32
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	4393      	bics	r3, r2
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	e7a4      	b.n	80091ce <_printf_i+0xd2>
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	680d      	ldr	r5, [r1, #0]
 8009288:	1d10      	adds	r0, r2, #4
 800928a:	6949      	ldr	r1, [r1, #20]
 800928c:	6018      	str	r0, [r3, #0]
 800928e:	6813      	ldr	r3, [r2, #0]
 8009290:	062e      	lsls	r6, r5, #24
 8009292:	d501      	bpl.n	8009298 <_printf_i+0x19c>
 8009294:	6019      	str	r1, [r3, #0]
 8009296:	e002      	b.n	800929e <_printf_i+0x1a2>
 8009298:	066d      	lsls	r5, r5, #25
 800929a:	d5fb      	bpl.n	8009294 <_printf_i+0x198>
 800929c:	8019      	strh	r1, [r3, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	9e04      	ldr	r6, [sp, #16]
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	e7c0      	b.n	8009228 <_printf_i+0x12c>
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	1d11      	adds	r1, r2, #4
 80092aa:	6019      	str	r1, [r3, #0]
 80092ac:	6816      	ldr	r6, [r2, #0]
 80092ae:	2100      	movs	r1, #0
 80092b0:	0030      	movs	r0, r6
 80092b2:	6862      	ldr	r2, [r4, #4]
 80092b4:	f000 f9e9 	bl	800968a <memchr>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d001      	beq.n	80092c0 <_printf_i+0x1c4>
 80092bc:	1b80      	subs	r0, r0, r6
 80092be:	6060      	str	r0, [r4, #4]
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	2300      	movs	r3, #0
 80092c6:	9a04      	ldr	r2, [sp, #16]
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	e7ad      	b.n	8009228 <_printf_i+0x12c>
 80092cc:	0032      	movs	r2, r6
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	9906      	ldr	r1, [sp, #24]
 80092d2:	9805      	ldr	r0, [sp, #20]
 80092d4:	9d07      	ldr	r5, [sp, #28]
 80092d6:	47a8      	blx	r5
 80092d8:	3001      	adds	r0, #1
 80092da:	d0af      	beq.n	800923c <_printf_i+0x140>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	079b      	lsls	r3, r3, #30
 80092e0:	d415      	bmi.n	800930e <_printf_i+0x212>
 80092e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e4:	68e0      	ldr	r0, [r4, #12]
 80092e6:	4298      	cmp	r0, r3
 80092e8:	daaa      	bge.n	8009240 <_printf_i+0x144>
 80092ea:	0018      	movs	r0, r3
 80092ec:	e7a8      	b.n	8009240 <_printf_i+0x144>
 80092ee:	0022      	movs	r2, r4
 80092f0:	2301      	movs	r3, #1
 80092f2:	9906      	ldr	r1, [sp, #24]
 80092f4:	9805      	ldr	r0, [sp, #20]
 80092f6:	9e07      	ldr	r6, [sp, #28]
 80092f8:	3219      	adds	r2, #25
 80092fa:	47b0      	blx	r6
 80092fc:	3001      	adds	r0, #1
 80092fe:	d09d      	beq.n	800923c <_printf_i+0x140>
 8009300:	3501      	adds	r5, #1
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	42ab      	cmp	r3, r5
 800930a:	dcf0      	bgt.n	80092ee <_printf_i+0x1f2>
 800930c:	e7e9      	b.n	80092e2 <_printf_i+0x1e6>
 800930e:	2500      	movs	r5, #0
 8009310:	e7f7      	b.n	8009302 <_printf_i+0x206>
 8009312:	46c0      	nop			; (mov r8, r8)
 8009314:	0800ba02 	.word	0x0800ba02
 8009318:	0800ba13 	.word	0x0800ba13

0800931c <std>:
 800931c:	2300      	movs	r3, #0
 800931e:	b510      	push	{r4, lr}
 8009320:	0004      	movs	r4, r0
 8009322:	6003      	str	r3, [r0, #0]
 8009324:	6043      	str	r3, [r0, #4]
 8009326:	6083      	str	r3, [r0, #8]
 8009328:	8181      	strh	r1, [r0, #12]
 800932a:	6643      	str	r3, [r0, #100]	; 0x64
 800932c:	81c2      	strh	r2, [r0, #14]
 800932e:	6103      	str	r3, [r0, #16]
 8009330:	6143      	str	r3, [r0, #20]
 8009332:	6183      	str	r3, [r0, #24]
 8009334:	0019      	movs	r1, r3
 8009336:	2208      	movs	r2, #8
 8009338:	305c      	adds	r0, #92	; 0x5c
 800933a:	f000 f91f 	bl	800957c <memset>
 800933e:	4b0b      	ldr	r3, [pc, #44]	; (800936c <std+0x50>)
 8009340:	6224      	str	r4, [r4, #32]
 8009342:	6263      	str	r3, [r4, #36]	; 0x24
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <std+0x54>)
 8009346:	62a3      	str	r3, [r4, #40]	; 0x28
 8009348:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <std+0x58>)
 800934a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <std+0x5c>)
 800934e:	6323      	str	r3, [r4, #48]	; 0x30
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <std+0x60>)
 8009352:	429c      	cmp	r4, r3
 8009354:	d005      	beq.n	8009362 <std+0x46>
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <std+0x64>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d002      	beq.n	8009362 <std+0x46>
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <std+0x68>)
 800935e:	429c      	cmp	r4, r3
 8009360:	d103      	bne.n	800936a <std+0x4e>
 8009362:	0020      	movs	r0, r4
 8009364:	3058      	adds	r0, #88	; 0x58
 8009366:	f000 f98d 	bl	8009684 <__retarget_lock_init_recursive>
 800936a:	bd10      	pop	{r4, pc}
 800936c:	080094e5 	.word	0x080094e5
 8009370:	0800950d 	.word	0x0800950d
 8009374:	08009545 	.word	0x08009545
 8009378:	08009571 	.word	0x08009571
 800937c:	200004d8 	.word	0x200004d8
 8009380:	20000540 	.word	0x20000540
 8009384:	200005a8 	.word	0x200005a8

08009388 <stdio_exit_handler>:
 8009388:	b510      	push	{r4, lr}
 800938a:	4a03      	ldr	r2, [pc, #12]	; (8009398 <stdio_exit_handler+0x10>)
 800938c:	4903      	ldr	r1, [pc, #12]	; (800939c <stdio_exit_handler+0x14>)
 800938e:	4804      	ldr	r0, [pc, #16]	; (80093a0 <stdio_exit_handler+0x18>)
 8009390:	f000 f86c 	bl	800946c <_fwalk_sglue>
 8009394:	bd10      	pop	{r4, pc}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	2000000c 	.word	0x2000000c
 800939c:	0800b0f9 	.word	0x0800b0f9
 80093a0:	20000018 	.word	0x20000018

080093a4 <cleanup_stdio>:
 80093a4:	6841      	ldr	r1, [r0, #4]
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <cleanup_stdio+0x30>)
 80093a8:	b510      	push	{r4, lr}
 80093aa:	0004      	movs	r4, r0
 80093ac:	4299      	cmp	r1, r3
 80093ae:	d001      	beq.n	80093b4 <cleanup_stdio+0x10>
 80093b0:	f001 fea2 	bl	800b0f8 <_fflush_r>
 80093b4:	68a1      	ldr	r1, [r4, #8]
 80093b6:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <cleanup_stdio+0x34>)
 80093b8:	4299      	cmp	r1, r3
 80093ba:	d002      	beq.n	80093c2 <cleanup_stdio+0x1e>
 80093bc:	0020      	movs	r0, r4
 80093be:	f001 fe9b 	bl	800b0f8 <_fflush_r>
 80093c2:	68e1      	ldr	r1, [r4, #12]
 80093c4:	4b05      	ldr	r3, [pc, #20]	; (80093dc <cleanup_stdio+0x38>)
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d002      	beq.n	80093d0 <cleanup_stdio+0x2c>
 80093ca:	0020      	movs	r0, r4
 80093cc:	f001 fe94 	bl	800b0f8 <_fflush_r>
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	200004d8 	.word	0x200004d8
 80093d8:	20000540 	.word	0x20000540
 80093dc:	200005a8 	.word	0x200005a8

080093e0 <global_stdio_init.part.0>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <global_stdio_init.part.0+0x28>)
 80093e4:	4a09      	ldr	r2, [pc, #36]	; (800940c <global_stdio_init.part.0+0x2c>)
 80093e6:	2104      	movs	r1, #4
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	4809      	ldr	r0, [pc, #36]	; (8009410 <global_stdio_init.part.0+0x30>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	f7ff ff95 	bl	800931c <std>
 80093f2:	2201      	movs	r2, #1
 80093f4:	2109      	movs	r1, #9
 80093f6:	4807      	ldr	r0, [pc, #28]	; (8009414 <global_stdio_init.part.0+0x34>)
 80093f8:	f7ff ff90 	bl	800931c <std>
 80093fc:	2202      	movs	r2, #2
 80093fe:	2112      	movs	r1, #18
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <global_stdio_init.part.0+0x38>)
 8009402:	f7ff ff8b 	bl	800931c <std>
 8009406:	bd10      	pop	{r4, pc}
 8009408:	20000610 	.word	0x20000610
 800940c:	08009389 	.word	0x08009389
 8009410:	200004d8 	.word	0x200004d8
 8009414:	20000540 	.word	0x20000540
 8009418:	200005a8 	.word	0x200005a8

0800941c <__sfp_lock_acquire>:
 800941c:	b510      	push	{r4, lr}
 800941e:	4802      	ldr	r0, [pc, #8]	; (8009428 <__sfp_lock_acquire+0xc>)
 8009420:	f000 f931 	bl	8009686 <__retarget_lock_acquire_recursive>
 8009424:	bd10      	pop	{r4, pc}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	20000619 	.word	0x20000619

0800942c <__sfp_lock_release>:
 800942c:	b510      	push	{r4, lr}
 800942e:	4802      	ldr	r0, [pc, #8]	; (8009438 <__sfp_lock_release+0xc>)
 8009430:	f000 f92a 	bl	8009688 <__retarget_lock_release_recursive>
 8009434:	bd10      	pop	{r4, pc}
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	20000619 	.word	0x20000619

0800943c <__sinit>:
 800943c:	b510      	push	{r4, lr}
 800943e:	0004      	movs	r4, r0
 8009440:	f7ff ffec 	bl	800941c <__sfp_lock_acquire>
 8009444:	6a23      	ldr	r3, [r4, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <__sinit+0x14>
 800944a:	f7ff ffef 	bl	800942c <__sfp_lock_release>
 800944e:	bd10      	pop	{r4, pc}
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <__sinit+0x28>)
 8009452:	6223      	str	r3, [r4, #32]
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <__sinit+0x2c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f6      	bne.n	800944a <__sinit+0xe>
 800945c:	f7ff ffc0 	bl	80093e0 <global_stdio_init.part.0>
 8009460:	e7f3      	b.n	800944a <__sinit+0xe>
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	080093a5 	.word	0x080093a5
 8009468:	20000610 	.word	0x20000610

0800946c <_fwalk_sglue>:
 800946c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800946e:	0014      	movs	r4, r2
 8009470:	2600      	movs	r6, #0
 8009472:	9000      	str	r0, [sp, #0]
 8009474:	9101      	str	r1, [sp, #4]
 8009476:	68a5      	ldr	r5, [r4, #8]
 8009478:	6867      	ldr	r7, [r4, #4]
 800947a:	3f01      	subs	r7, #1
 800947c:	d504      	bpl.n	8009488 <_fwalk_sglue+0x1c>
 800947e:	6824      	ldr	r4, [r4, #0]
 8009480:	2c00      	cmp	r4, #0
 8009482:	d1f8      	bne.n	8009476 <_fwalk_sglue+0xa>
 8009484:	0030      	movs	r0, r6
 8009486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009488:	89ab      	ldrh	r3, [r5, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d908      	bls.n	80094a0 <_fwalk_sglue+0x34>
 800948e:	220e      	movs	r2, #14
 8009490:	5eab      	ldrsh	r3, [r5, r2]
 8009492:	3301      	adds	r3, #1
 8009494:	d004      	beq.n	80094a0 <_fwalk_sglue+0x34>
 8009496:	0029      	movs	r1, r5
 8009498:	9800      	ldr	r0, [sp, #0]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	4798      	blx	r3
 800949e:	4306      	orrs	r6, r0
 80094a0:	3568      	adds	r5, #104	; 0x68
 80094a2:	e7ea      	b.n	800947a <_fwalk_sglue+0xe>

080094a4 <siprintf>:
 80094a4:	b40e      	push	{r1, r2, r3}
 80094a6:	b500      	push	{lr}
 80094a8:	490b      	ldr	r1, [pc, #44]	; (80094d8 <siprintf+0x34>)
 80094aa:	b09c      	sub	sp, #112	; 0x70
 80094ac:	ab1d      	add	r3, sp, #116	; 0x74
 80094ae:	9002      	str	r0, [sp, #8]
 80094b0:	9006      	str	r0, [sp, #24]
 80094b2:	9107      	str	r1, [sp, #28]
 80094b4:	9104      	str	r1, [sp, #16]
 80094b6:	4809      	ldr	r0, [pc, #36]	; (80094dc <siprintf+0x38>)
 80094b8:	4909      	ldr	r1, [pc, #36]	; (80094e0 <siprintf+0x3c>)
 80094ba:	cb04      	ldmia	r3!, {r2}
 80094bc:	9105      	str	r1, [sp, #20]
 80094be:	6800      	ldr	r0, [r0, #0]
 80094c0:	a902      	add	r1, sp, #8
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	f001 fc8e 	bl	800ade4 <_svfiprintf_r>
 80094c8:	2200      	movs	r2, #0
 80094ca:	9b02      	ldr	r3, [sp, #8]
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	b01c      	add	sp, #112	; 0x70
 80094d0:	bc08      	pop	{r3}
 80094d2:	b003      	add	sp, #12
 80094d4:	4718      	bx	r3
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	7fffffff 	.word	0x7fffffff
 80094dc:	20000064 	.word	0x20000064
 80094e0:	ffff0208 	.word	0xffff0208

080094e4 <__sread>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	000c      	movs	r4, r1
 80094e8:	250e      	movs	r5, #14
 80094ea:	5f49      	ldrsh	r1, [r1, r5]
 80094ec:	f000 f878 	bl	80095e0 <_read_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	db03      	blt.n	80094fc <__sread+0x18>
 80094f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80094f6:	181b      	adds	r3, r3, r0
 80094f8:	6563      	str	r3, [r4, #84]	; 0x54
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	4a02      	ldr	r2, [pc, #8]	; (8009508 <__sread+0x24>)
 8009500:	4013      	ands	r3, r2
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	e7f9      	b.n	80094fa <__sread+0x16>
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	ffffefff 	.word	0xffffefff

0800950c <__swrite>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	001f      	movs	r7, r3
 8009510:	898b      	ldrh	r3, [r1, #12]
 8009512:	0005      	movs	r5, r0
 8009514:	000c      	movs	r4, r1
 8009516:	0016      	movs	r6, r2
 8009518:	05db      	lsls	r3, r3, #23
 800951a:	d505      	bpl.n	8009528 <__swrite+0x1c>
 800951c:	230e      	movs	r3, #14
 800951e:	5ec9      	ldrsh	r1, [r1, r3]
 8009520:	2200      	movs	r2, #0
 8009522:	2302      	movs	r3, #2
 8009524:	f000 f848 	bl	80095b8 <_lseek_r>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	4a05      	ldr	r2, [pc, #20]	; (8009540 <__swrite+0x34>)
 800952c:	0028      	movs	r0, r5
 800952e:	4013      	ands	r3, r2
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	0032      	movs	r2, r6
 8009534:	230e      	movs	r3, #14
 8009536:	5ee1      	ldrsh	r1, [r4, r3]
 8009538:	003b      	movs	r3, r7
 800953a:	f000 f865 	bl	8009608 <_write_r>
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009540:	ffffefff 	.word	0xffffefff

08009544 <__sseek>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	000c      	movs	r4, r1
 8009548:	250e      	movs	r5, #14
 800954a:	5f49      	ldrsh	r1, [r1, r5]
 800954c:	f000 f834 	bl	80095b8 <_lseek_r>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	1c42      	adds	r2, r0, #1
 8009554:	d103      	bne.n	800955e <__sseek+0x1a>
 8009556:	4a05      	ldr	r2, [pc, #20]	; (800956c <__sseek+0x28>)
 8009558:	4013      	ands	r3, r2
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	2280      	movs	r2, #128	; 0x80
 8009560:	0152      	lsls	r2, r2, #5
 8009562:	4313      	orrs	r3, r2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	6560      	str	r0, [r4, #84]	; 0x54
 8009568:	e7f8      	b.n	800955c <__sseek+0x18>
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	ffffefff 	.word	0xffffefff

08009570 <__sclose>:
 8009570:	b510      	push	{r4, lr}
 8009572:	230e      	movs	r3, #14
 8009574:	5ec9      	ldrsh	r1, [r1, r3]
 8009576:	f000 f80d 	bl	8009594 <_close_r>
 800957a:	bd10      	pop	{r4, pc}

0800957c <memset>:
 800957c:	0003      	movs	r3, r0
 800957e:	1882      	adds	r2, r0, r2
 8009580:	4293      	cmp	r3, r2
 8009582:	d100      	bne.n	8009586 <memset+0xa>
 8009584:	4770      	bx	lr
 8009586:	7019      	strb	r1, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	e7f9      	b.n	8009580 <memset+0x4>

0800958c <_localeconv_r>:
 800958c:	4800      	ldr	r0, [pc, #0]	; (8009590 <_localeconv_r+0x4>)
 800958e:	4770      	bx	lr
 8009590:	20000158 	.word	0x20000158

08009594 <_close_r>:
 8009594:	2300      	movs	r3, #0
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	4d06      	ldr	r5, [pc, #24]	; (80095b4 <_close_r+0x20>)
 800959a:	0004      	movs	r4, r0
 800959c:	0008      	movs	r0, r1
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f7fa fc3d 	bl	8003e1e <_close>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d103      	bne.n	80095b0 <_close_r+0x1c>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d000      	beq.n	80095b0 <_close_r+0x1c>
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	20000614 	.word	0x20000614

080095b8 <_lseek_r>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	0004      	movs	r4, r0
 80095bc:	0008      	movs	r0, r1
 80095be:	0011      	movs	r1, r2
 80095c0:	001a      	movs	r2, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	4d05      	ldr	r5, [pc, #20]	; (80095dc <_lseek_r+0x24>)
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7fa fc4a 	bl	8003e60 <_lseek>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d103      	bne.n	80095d8 <_lseek_r+0x20>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d000      	beq.n	80095d8 <_lseek_r+0x20>
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	bd70      	pop	{r4, r5, r6, pc}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	20000614 	.word	0x20000614

080095e0 <_read_r>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	0004      	movs	r4, r0
 80095e4:	0008      	movs	r0, r1
 80095e6:	0011      	movs	r1, r2
 80095e8:	001a      	movs	r2, r3
 80095ea:	2300      	movs	r3, #0
 80095ec:	4d05      	ldr	r5, [pc, #20]	; (8009604 <_read_r+0x24>)
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7fa fbdc 	bl	8003dac <_read>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d103      	bne.n	8009600 <_read_r+0x20>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d000      	beq.n	8009600 <_read_r+0x20>
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	20000614 	.word	0x20000614

08009608 <_write_r>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	0004      	movs	r4, r0
 800960c:	0008      	movs	r0, r1
 800960e:	0011      	movs	r1, r2
 8009610:	001a      	movs	r2, r3
 8009612:	2300      	movs	r3, #0
 8009614:	4d05      	ldr	r5, [pc, #20]	; (800962c <_write_r+0x24>)
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7fa fbe5 	bl	8003de6 <_write>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d103      	bne.n	8009628 <_write_r+0x20>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d000      	beq.n	8009628 <_write_r+0x20>
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	20000614 	.word	0x20000614

08009630 <__errno>:
 8009630:	4b01      	ldr	r3, [pc, #4]	; (8009638 <__errno+0x8>)
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	4770      	bx	lr
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	20000064 	.word	0x20000064

0800963c <__libc_init_array>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	2600      	movs	r6, #0
 8009640:	4c0c      	ldr	r4, [pc, #48]	; (8009674 <__libc_init_array+0x38>)
 8009642:	4d0d      	ldr	r5, [pc, #52]	; (8009678 <__libc_init_array+0x3c>)
 8009644:	1b64      	subs	r4, r4, r5
 8009646:	10a4      	asrs	r4, r4, #2
 8009648:	42a6      	cmp	r6, r4
 800964a:	d109      	bne.n	8009660 <__libc_init_array+0x24>
 800964c:	2600      	movs	r6, #0
 800964e:	f002 f923 	bl	800b898 <_init>
 8009652:	4c0a      	ldr	r4, [pc, #40]	; (800967c <__libc_init_array+0x40>)
 8009654:	4d0a      	ldr	r5, [pc, #40]	; (8009680 <__libc_init_array+0x44>)
 8009656:	1b64      	subs	r4, r4, r5
 8009658:	10a4      	asrs	r4, r4, #2
 800965a:	42a6      	cmp	r6, r4
 800965c:	d105      	bne.n	800966a <__libc_init_array+0x2e>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	00b3      	lsls	r3, r6, #2
 8009662:	58eb      	ldr	r3, [r5, r3]
 8009664:	4798      	blx	r3
 8009666:	3601      	adds	r6, #1
 8009668:	e7ee      	b.n	8009648 <__libc_init_array+0xc>
 800966a:	00b3      	lsls	r3, r6, #2
 800966c:	58eb      	ldr	r3, [r5, r3]
 800966e:	4798      	blx	r3
 8009670:	3601      	adds	r6, #1
 8009672:	e7f2      	b.n	800965a <__libc_init_array+0x1e>
 8009674:	0800bd6c 	.word	0x0800bd6c
 8009678:	0800bd6c 	.word	0x0800bd6c
 800967c:	0800bd70 	.word	0x0800bd70
 8009680:	0800bd6c 	.word	0x0800bd6c

08009684 <__retarget_lock_init_recursive>:
 8009684:	4770      	bx	lr

08009686 <__retarget_lock_acquire_recursive>:
 8009686:	4770      	bx	lr

08009688 <__retarget_lock_release_recursive>:
 8009688:	4770      	bx	lr

0800968a <memchr>:
 800968a:	b2c9      	uxtb	r1, r1
 800968c:	1882      	adds	r2, r0, r2
 800968e:	4290      	cmp	r0, r2
 8009690:	d101      	bne.n	8009696 <memchr+0xc>
 8009692:	2000      	movs	r0, #0
 8009694:	4770      	bx	lr
 8009696:	7803      	ldrb	r3, [r0, #0]
 8009698:	428b      	cmp	r3, r1
 800969a:	d0fb      	beq.n	8009694 <memchr+0xa>
 800969c:	3001      	adds	r0, #1
 800969e:	e7f6      	b.n	800968e <memchr+0x4>

080096a0 <quorem>:
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	6902      	ldr	r2, [r0, #16]
 80096a4:	690b      	ldr	r3, [r1, #16]
 80096a6:	b089      	sub	sp, #36	; 0x24
 80096a8:	0007      	movs	r7, r0
 80096aa:	9104      	str	r1, [sp, #16]
 80096ac:	2000      	movs	r0, #0
 80096ae:	429a      	cmp	r2, r3
 80096b0:	db69      	blt.n	8009786 <quorem+0xe6>
 80096b2:	3b01      	subs	r3, #1
 80096b4:	009c      	lsls	r4, r3, #2
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	000b      	movs	r3, r1
 80096ba:	3314      	adds	r3, #20
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	191b      	adds	r3, r3, r4
 80096c0:	9305      	str	r3, [sp, #20]
 80096c2:	003b      	movs	r3, r7
 80096c4:	3314      	adds	r3, #20
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	191c      	adds	r4, r3, r4
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	6826      	ldr	r6, [r4, #0]
 80096ce:	681d      	ldr	r5, [r3, #0]
 80096d0:	0030      	movs	r0, r6
 80096d2:	3501      	adds	r5, #1
 80096d4:	0029      	movs	r1, r5
 80096d6:	f7f6 fd33 	bl	8000140 <__udivsi3>
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	42ae      	cmp	r6, r5
 80096de:	d329      	bcc.n	8009734 <quorem+0x94>
 80096e0:	9b06      	ldr	r3, [sp, #24]
 80096e2:	2600      	movs	r6, #0
 80096e4:	469c      	mov	ip, r3
 80096e6:	9d03      	ldr	r5, [sp, #12]
 80096e8:	9606      	str	r6, [sp, #24]
 80096ea:	4662      	mov	r2, ip
 80096ec:	ca08      	ldmia	r2!, {r3}
 80096ee:	6828      	ldr	r0, [r5, #0]
 80096f0:	4694      	mov	ip, r2
 80096f2:	9a02      	ldr	r2, [sp, #8]
 80096f4:	b299      	uxth	r1, r3
 80096f6:	4351      	muls	r1, r2
 80096f8:	0c1b      	lsrs	r3, r3, #16
 80096fa:	4353      	muls	r3, r2
 80096fc:	1989      	adds	r1, r1, r6
 80096fe:	0c0a      	lsrs	r2, r1, #16
 8009700:	189b      	adds	r3, r3, r2
 8009702:	9307      	str	r3, [sp, #28]
 8009704:	0c1e      	lsrs	r6, r3, #16
 8009706:	9b06      	ldr	r3, [sp, #24]
 8009708:	b282      	uxth	r2, r0
 800970a:	18d2      	adds	r2, r2, r3
 800970c:	466b      	mov	r3, sp
 800970e:	b289      	uxth	r1, r1
 8009710:	8b9b      	ldrh	r3, [r3, #28]
 8009712:	1a52      	subs	r2, r2, r1
 8009714:	0c01      	lsrs	r1, r0, #16
 8009716:	1ac9      	subs	r1, r1, r3
 8009718:	1413      	asrs	r3, r2, #16
 800971a:	18cb      	adds	r3, r1, r3
 800971c:	1419      	asrs	r1, r3, #16
 800971e:	b292      	uxth	r2, r2
 8009720:	041b      	lsls	r3, r3, #16
 8009722:	4313      	orrs	r3, r2
 8009724:	c508      	stmia	r5!, {r3}
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	9106      	str	r1, [sp, #24]
 800972a:	4563      	cmp	r3, ip
 800972c:	d2dd      	bcs.n	80096ea <quorem+0x4a>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d030      	beq.n	8009796 <quorem+0xf6>
 8009734:	0038      	movs	r0, r7
 8009736:	9904      	ldr	r1, [sp, #16]
 8009738:	f001 f9de 	bl	800aaf8 <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	db21      	blt.n	8009784 <quorem+0xe4>
 8009740:	0038      	movs	r0, r7
 8009742:	2600      	movs	r6, #0
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	9c04      	ldr	r4, [sp, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	9302      	str	r3, [sp, #8]
 800974c:	3014      	adds	r0, #20
 800974e:	3414      	adds	r4, #20
 8009750:	6803      	ldr	r3, [r0, #0]
 8009752:	cc02      	ldmia	r4!, {r1}
 8009754:	b29d      	uxth	r5, r3
 8009756:	19ad      	adds	r5, r5, r6
 8009758:	b28a      	uxth	r2, r1
 800975a:	1aaa      	subs	r2, r5, r2
 800975c:	0c09      	lsrs	r1, r1, #16
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	1a5b      	subs	r3, r3, r1
 8009762:	1411      	asrs	r1, r2, #16
 8009764:	185b      	adds	r3, r3, r1
 8009766:	141e      	asrs	r6, r3, #16
 8009768:	b292      	uxth	r2, r2
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	4313      	orrs	r3, r2
 800976e:	c008      	stmia	r0!, {r3}
 8009770:	9b05      	ldr	r3, [sp, #20]
 8009772:	42a3      	cmp	r3, r4
 8009774:	d2ec      	bcs.n	8009750 <quorem+0xb0>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	9a03      	ldr	r2, [sp, #12]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	18d3      	adds	r3, r2, r3
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	2a00      	cmp	r2, #0
 8009782:	d015      	beq.n	80097b0 <quorem+0x110>
 8009784:	9802      	ldr	r0, [sp, #8]
 8009786:	b009      	add	sp, #36	; 0x24
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <quorem+0xfe>
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	3b01      	subs	r3, #1
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	9b03      	ldr	r3, [sp, #12]
 8009798:	3c04      	subs	r4, #4
 800979a:	42a3      	cmp	r3, r4
 800979c:	d3f5      	bcc.n	800978a <quorem+0xea>
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	e7c7      	b.n	8009734 <quorem+0x94>
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	d106      	bne.n	80097b8 <quorem+0x118>
 80097aa:	9a01      	ldr	r2, [sp, #4]
 80097ac:	3a01      	subs	r2, #1
 80097ae:	9201      	str	r2, [sp, #4]
 80097b0:	9a03      	ldr	r2, [sp, #12]
 80097b2:	3b04      	subs	r3, #4
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d3f5      	bcc.n	80097a4 <quorem+0x104>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	e7e2      	b.n	8009784 <quorem+0xe4>
	...

080097c0 <_dtoa_r>:
 80097c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097c2:	0014      	movs	r4, r2
 80097c4:	001d      	movs	r5, r3
 80097c6:	69c6      	ldr	r6, [r0, #28]
 80097c8:	b09d      	sub	sp, #116	; 0x74
 80097ca:	9408      	str	r4, [sp, #32]
 80097cc:	9509      	str	r5, [sp, #36]	; 0x24
 80097ce:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80097d0:	9004      	str	r0, [sp, #16]
 80097d2:	2e00      	cmp	r6, #0
 80097d4:	d10f      	bne.n	80097f6 <_dtoa_r+0x36>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f000 fe4a 	bl	800a470 <malloc>
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	1e02      	subs	r2, r0, #0
 80097e0:	61d8      	str	r0, [r3, #28]
 80097e2:	d104      	bne.n	80097ee <_dtoa_r+0x2e>
 80097e4:	21ef      	movs	r1, #239	; 0xef
 80097e6:	4bc6      	ldr	r3, [pc, #792]	; (8009b00 <_dtoa_r+0x340>)
 80097e8:	48c6      	ldr	r0, [pc, #792]	; (8009b04 <_dtoa_r+0x344>)
 80097ea:	f001 fcdf 	bl	800b1ac <__assert_func>
 80097ee:	6046      	str	r6, [r0, #4]
 80097f0:	6086      	str	r6, [r0, #8]
 80097f2:	6006      	str	r6, [r0, #0]
 80097f4:	60c6      	str	r6, [r0, #12]
 80097f6:	9b04      	ldr	r3, [sp, #16]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	6819      	ldr	r1, [r3, #0]
 80097fc:	2900      	cmp	r1, #0
 80097fe:	d00b      	beq.n	8009818 <_dtoa_r+0x58>
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	2301      	movs	r3, #1
 8009804:	4093      	lsls	r3, r2
 8009806:	604a      	str	r2, [r1, #4]
 8009808:	608b      	str	r3, [r1, #8]
 800980a:	9804      	ldr	r0, [sp, #16]
 800980c:	f000 ff32 	bl	800a674 <_Bfree>
 8009810:	2200      	movs	r2, #0
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	2d00      	cmp	r5, #0
 800981a:	da1e      	bge.n	800985a <_dtoa_r+0x9a>
 800981c:	2301      	movs	r3, #1
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	006b      	lsls	r3, r5, #1
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
 8009826:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009828:	4bb7      	ldr	r3, [pc, #732]	; (8009b08 <_dtoa_r+0x348>)
 800982a:	4ab7      	ldr	r2, [pc, #732]	; (8009b08 <_dtoa_r+0x348>)
 800982c:	403b      	ands	r3, r7
 800982e:	4293      	cmp	r3, r2
 8009830:	d116      	bne.n	8009860 <_dtoa_r+0xa0>
 8009832:	4bb6      	ldr	r3, [pc, #728]	; (8009b0c <_dtoa_r+0x34c>)
 8009834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	033b      	lsls	r3, r7, #12
 800983a:	0b1b      	lsrs	r3, r3, #12
 800983c:	4323      	orrs	r3, r4
 800983e:	d101      	bne.n	8009844 <_dtoa_r+0x84>
 8009840:	f000 fdb5 	bl	800a3ae <_dtoa_r+0xbee>
 8009844:	4bb2      	ldr	r3, [pc, #712]	; (8009b10 <_dtoa_r+0x350>)
 8009846:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009848:	9306      	str	r3, [sp, #24]
 800984a:	2a00      	cmp	r2, #0
 800984c:	d002      	beq.n	8009854 <_dtoa_r+0x94>
 800984e:	4bb1      	ldr	r3, [pc, #708]	; (8009b14 <_dtoa_r+0x354>)
 8009850:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	9806      	ldr	r0, [sp, #24]
 8009856:	b01d      	add	sp, #116	; 0x74
 8009858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800985a:	2300      	movs	r3, #0
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	e7e2      	b.n	8009826 <_dtoa_r+0x66>
 8009860:	9a08      	ldr	r2, [sp, #32]
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	9210      	str	r2, [sp, #64]	; 0x40
 8009866:	9311      	str	r3, [sp, #68]	; 0x44
 8009868:	9810      	ldr	r0, [sp, #64]	; 0x40
 800986a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800986c:	2200      	movs	r2, #0
 800986e:	2300      	movs	r3, #0
 8009870:	f7f6 fdec 	bl	800044c <__aeabi_dcmpeq>
 8009874:	1e06      	subs	r6, r0, #0
 8009876:	d009      	beq.n	800988c <_dtoa_r+0xcc>
 8009878:	2301      	movs	r3, #1
 800987a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	4ba6      	ldr	r3, [pc, #664]	; (8009b18 <_dtoa_r+0x358>)
 8009880:	9306      	str	r3, [sp, #24]
 8009882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0e5      	beq.n	8009854 <_dtoa_r+0x94>
 8009888:	4ba4      	ldr	r3, [pc, #656]	; (8009b1c <_dtoa_r+0x35c>)
 800988a:	e7e1      	b.n	8009850 <_dtoa_r+0x90>
 800988c:	ab1a      	add	r3, sp, #104	; 0x68
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	ab1b      	add	r3, sp, #108	; 0x6c
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	9804      	ldr	r0, [sp, #16]
 8009896:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800989a:	f001 f9e1 	bl	800ac60 <__d2b>
 800989e:	007a      	lsls	r2, r7, #1
 80098a0:	9005      	str	r0, [sp, #20]
 80098a2:	0d52      	lsrs	r2, r2, #21
 80098a4:	d100      	bne.n	80098a8 <_dtoa_r+0xe8>
 80098a6:	e07b      	b.n	80099a0 <_dtoa_r+0x1e0>
 80098a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098aa:	9617      	str	r6, [sp, #92]	; 0x5c
 80098ac:	0319      	lsls	r1, r3, #12
 80098ae:	4b9c      	ldr	r3, [pc, #624]	; (8009b20 <_dtoa_r+0x360>)
 80098b0:	0b09      	lsrs	r1, r1, #12
 80098b2:	430b      	orrs	r3, r1
 80098b4:	499b      	ldr	r1, [pc, #620]	; (8009b24 <_dtoa_r+0x364>)
 80098b6:	1857      	adds	r7, r2, r1
 80098b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80098ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098bc:	0019      	movs	r1, r3
 80098be:	2200      	movs	r2, #0
 80098c0:	4b99      	ldr	r3, [pc, #612]	; (8009b28 <_dtoa_r+0x368>)
 80098c2:	f7f8 fb73 	bl	8001fac <__aeabi_dsub>
 80098c6:	4a99      	ldr	r2, [pc, #612]	; (8009b2c <_dtoa_r+0x36c>)
 80098c8:	4b99      	ldr	r3, [pc, #612]	; (8009b30 <_dtoa_r+0x370>)
 80098ca:	f7f8 f8ad 	bl	8001a28 <__aeabi_dmul>
 80098ce:	4a99      	ldr	r2, [pc, #612]	; (8009b34 <_dtoa_r+0x374>)
 80098d0:	4b99      	ldr	r3, [pc, #612]	; (8009b38 <_dtoa_r+0x378>)
 80098d2:	f7f7 f94f 	bl	8000b74 <__aeabi_dadd>
 80098d6:	0004      	movs	r4, r0
 80098d8:	0038      	movs	r0, r7
 80098da:	000d      	movs	r5, r1
 80098dc:	f7f8 ff3c 	bl	8002758 <__aeabi_i2d>
 80098e0:	4a96      	ldr	r2, [pc, #600]	; (8009b3c <_dtoa_r+0x37c>)
 80098e2:	4b97      	ldr	r3, [pc, #604]	; (8009b40 <_dtoa_r+0x380>)
 80098e4:	f7f8 f8a0 	bl	8001a28 <__aeabi_dmul>
 80098e8:	0002      	movs	r2, r0
 80098ea:	000b      	movs	r3, r1
 80098ec:	0020      	movs	r0, r4
 80098ee:	0029      	movs	r1, r5
 80098f0:	f7f7 f940 	bl	8000b74 <__aeabi_dadd>
 80098f4:	0004      	movs	r4, r0
 80098f6:	000d      	movs	r5, r1
 80098f8:	f7f8 fef8 	bl	80026ec <__aeabi_d2iz>
 80098fc:	2200      	movs	r2, #0
 80098fe:	9003      	str	r0, [sp, #12]
 8009900:	2300      	movs	r3, #0
 8009902:	0020      	movs	r0, r4
 8009904:	0029      	movs	r1, r5
 8009906:	f7f6 fda7 	bl	8000458 <__aeabi_dcmplt>
 800990a:	2800      	cmp	r0, #0
 800990c:	d00b      	beq.n	8009926 <_dtoa_r+0x166>
 800990e:	9803      	ldr	r0, [sp, #12]
 8009910:	f7f8 ff22 	bl	8002758 <__aeabi_i2d>
 8009914:	002b      	movs	r3, r5
 8009916:	0022      	movs	r2, r4
 8009918:	f7f6 fd98 	bl	800044c <__aeabi_dcmpeq>
 800991c:	4243      	negs	r3, r0
 800991e:	4158      	adcs	r0, r3
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	1a1b      	subs	r3, r3, r0
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	2301      	movs	r3, #1
 8009928:	9316      	str	r3, [sp, #88]	; 0x58
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	2b16      	cmp	r3, #22
 800992e:	d810      	bhi.n	8009952 <_dtoa_r+0x192>
 8009930:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009932:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009934:	9a03      	ldr	r2, [sp, #12]
 8009936:	4b83      	ldr	r3, [pc, #524]	; (8009b44 <_dtoa_r+0x384>)
 8009938:	00d2      	lsls	r2, r2, #3
 800993a:	189b      	adds	r3, r3, r2
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f7f6 fd8a 	bl	8000458 <__aeabi_dcmplt>
 8009944:	2800      	cmp	r0, #0
 8009946:	d047      	beq.n	80099d8 <_dtoa_r+0x218>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	3b01      	subs	r3, #1
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	2300      	movs	r3, #0
 8009950:	9316      	str	r3, [sp, #88]	; 0x58
 8009952:	2200      	movs	r2, #0
 8009954:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009956:	920a      	str	r2, [sp, #40]	; 0x28
 8009958:	1bdb      	subs	r3, r3, r7
 800995a:	1e5a      	subs	r2, r3, #1
 800995c:	d53e      	bpl.n	80099dc <_dtoa_r+0x21c>
 800995e:	2201      	movs	r2, #1
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	930a      	str	r3, [sp, #40]	; 0x28
 8009964:	2300      	movs	r3, #0
 8009966:	930c      	str	r3, [sp, #48]	; 0x30
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	db38      	blt.n	80099e0 <_dtoa_r+0x220>
 800996e:	9a03      	ldr	r2, [sp, #12]
 8009970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009972:	4694      	mov	ip, r2
 8009974:	4463      	add	r3, ip
 8009976:	930c      	str	r3, [sp, #48]	; 0x30
 8009978:	2300      	movs	r3, #0
 800997a:	9213      	str	r2, [sp, #76]	; 0x4c
 800997c:	930d      	str	r3, [sp, #52]	; 0x34
 800997e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009980:	2401      	movs	r4, #1
 8009982:	2b09      	cmp	r3, #9
 8009984:	d867      	bhi.n	8009a56 <_dtoa_r+0x296>
 8009986:	2b05      	cmp	r3, #5
 8009988:	dd02      	ble.n	8009990 <_dtoa_r+0x1d0>
 800998a:	2400      	movs	r4, #0
 800998c:	3b04      	subs	r3, #4
 800998e:	9322      	str	r3, [sp, #136]	; 0x88
 8009990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009992:	1e98      	subs	r0, r3, #2
 8009994:	2803      	cmp	r0, #3
 8009996:	d867      	bhi.n	8009a68 <_dtoa_r+0x2a8>
 8009998:	f7f6 fbbe 	bl	8000118 <__gnu_thumb1_case_uqi>
 800999c:	5b383a2b 	.word	0x5b383a2b
 80099a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099a2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80099a4:	18f6      	adds	r6, r6, r3
 80099a6:	4b68      	ldr	r3, [pc, #416]	; (8009b48 <_dtoa_r+0x388>)
 80099a8:	18f2      	adds	r2, r6, r3
 80099aa:	2a20      	cmp	r2, #32
 80099ac:	dd0f      	ble.n	80099ce <_dtoa_r+0x20e>
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	409f      	lsls	r7, r3
 80099b4:	4b65      	ldr	r3, [pc, #404]	; (8009b4c <_dtoa_r+0x38c>)
 80099b6:	0038      	movs	r0, r7
 80099b8:	18f3      	adds	r3, r6, r3
 80099ba:	40dc      	lsrs	r4, r3
 80099bc:	4320      	orrs	r0, r4
 80099be:	f7f8 fefb 	bl	80027b8 <__aeabi_ui2d>
 80099c2:	2201      	movs	r2, #1
 80099c4:	4b62      	ldr	r3, [pc, #392]	; (8009b50 <_dtoa_r+0x390>)
 80099c6:	1e77      	subs	r7, r6, #1
 80099c8:	18cb      	adds	r3, r1, r3
 80099ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80099cc:	e776      	b.n	80098bc <_dtoa_r+0xfc>
 80099ce:	2320      	movs	r3, #32
 80099d0:	0020      	movs	r0, r4
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	4098      	lsls	r0, r3
 80099d6:	e7f2      	b.n	80099be <_dtoa_r+0x1fe>
 80099d8:	9016      	str	r0, [sp, #88]	; 0x58
 80099da:	e7ba      	b.n	8009952 <_dtoa_r+0x192>
 80099dc:	920c      	str	r2, [sp, #48]	; 0x30
 80099de:	e7c3      	b.n	8009968 <_dtoa_r+0x1a8>
 80099e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e2:	9a03      	ldr	r2, [sp, #12]
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
 80099e8:	4253      	negs	r3, r2
 80099ea:	930d      	str	r3, [sp, #52]	; 0x34
 80099ec:	2300      	movs	r3, #0
 80099ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80099f0:	e7c5      	b.n	800997e <_dtoa_r+0x1be>
 80099f2:	2300      	movs	r3, #0
 80099f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099fa:	9307      	str	r3, [sp, #28]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	dc13      	bgt.n	8009a28 <_dtoa_r+0x268>
 8009a00:	2301      	movs	r3, #1
 8009a02:	001a      	movs	r2, r3
 8009a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a06:	9307      	str	r3, [sp, #28]
 8009a08:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a0a:	e00d      	b.n	8009a28 <_dtoa_r+0x268>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e7f1      	b.n	80099f4 <_dtoa_r+0x234>
 8009a10:	2300      	movs	r3, #0
 8009a12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a16:	4694      	mov	ip, r2
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	4463      	add	r3, ip
 8009a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a1e:	3301      	adds	r3, #1
 8009a20:	9307      	str	r3, [sp, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dc00      	bgt.n	8009a28 <_dtoa_r+0x268>
 8009a26:	2301      	movs	r3, #1
 8009a28:	9a04      	ldr	r2, [sp, #16]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	69d0      	ldr	r0, [r2, #28]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	0015      	movs	r5, r2
 8009a32:	3514      	adds	r5, #20
 8009a34:	429d      	cmp	r5, r3
 8009a36:	d91b      	bls.n	8009a70 <_dtoa_r+0x2b0>
 8009a38:	6041      	str	r1, [r0, #4]
 8009a3a:	9804      	ldr	r0, [sp, #16]
 8009a3c:	f000 fdd6 	bl	800a5ec <_Balloc>
 8009a40:	9006      	str	r0, [sp, #24]
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d117      	bne.n	8009a76 <_dtoa_r+0x2b6>
 8009a46:	21b0      	movs	r1, #176	; 0xb0
 8009a48:	4b42      	ldr	r3, [pc, #264]	; (8009b54 <_dtoa_r+0x394>)
 8009a4a:	482e      	ldr	r0, [pc, #184]	; (8009b04 <_dtoa_r+0x344>)
 8009a4c:	9a06      	ldr	r2, [sp, #24]
 8009a4e:	31ff      	adds	r1, #255	; 0xff
 8009a50:	e6cb      	b.n	80097ea <_dtoa_r+0x2a>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7dd      	b.n	8009a12 <_dtoa_r+0x252>
 8009a56:	2300      	movs	r3, #0
 8009a58:	940f      	str	r4, [sp, #60]	; 0x3c
 8009a5a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	2200      	movs	r2, #0
 8009a64:	3313      	adds	r3, #19
 8009a66:	e7cf      	b.n	8009a08 <_dtoa_r+0x248>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a6c:	3b02      	subs	r3, #2
 8009a6e:	e7f6      	b.n	8009a5e <_dtoa_r+0x29e>
 8009a70:	3101      	adds	r1, #1
 8009a72:	0052      	lsls	r2, r2, #1
 8009a74:	e7dc      	b.n	8009a30 <_dtoa_r+0x270>
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	9a06      	ldr	r2, [sp, #24]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	9b07      	ldr	r3, [sp, #28]
 8009a80:	2b0e      	cmp	r3, #14
 8009a82:	d900      	bls.n	8009a86 <_dtoa_r+0x2c6>
 8009a84:	e0e5      	b.n	8009c52 <_dtoa_r+0x492>
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	d100      	bne.n	8009a8c <_dtoa_r+0x2cc>
 8009a8a:	e0e2      	b.n	8009c52 <_dtoa_r+0x492>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dd64      	ble.n	8009b5c <_dtoa_r+0x39c>
 8009a92:	210f      	movs	r1, #15
 8009a94:	9a03      	ldr	r2, [sp, #12]
 8009a96:	4b2b      	ldr	r3, [pc, #172]	; (8009b44 <_dtoa_r+0x384>)
 8009a98:	400a      	ands	r2, r1
 8009a9a:	00d2      	lsls	r2, r2, #3
 8009a9c:	189b      	adds	r3, r3, r2
 8009a9e:	681e      	ldr	r6, [r3, #0]
 8009aa0:	685f      	ldr	r7, [r3, #4]
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	2402      	movs	r4, #2
 8009aa6:	111d      	asrs	r5, r3, #4
 8009aa8:	05db      	lsls	r3, r3, #23
 8009aaa:	d50a      	bpl.n	8009ac2 <_dtoa_r+0x302>
 8009aac:	4b2a      	ldr	r3, [pc, #168]	; (8009b58 <_dtoa_r+0x398>)
 8009aae:	400d      	ands	r5, r1
 8009ab0:	6a1a      	ldr	r2, [r3, #32]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ab6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ab8:	f7f7 fbbc 	bl	8001234 <__aeabi_ddiv>
 8009abc:	9008      	str	r0, [sp, #32]
 8009abe:	9109      	str	r1, [sp, #36]	; 0x24
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <_dtoa_r+0x398>)
 8009ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	d108      	bne.n	8009adc <_dtoa_r+0x31c>
 8009aca:	9808      	ldr	r0, [sp, #32]
 8009acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ace:	0032      	movs	r2, r6
 8009ad0:	003b      	movs	r3, r7
 8009ad2:	f7f7 fbaf 	bl	8001234 <__aeabi_ddiv>
 8009ad6:	9008      	str	r0, [sp, #32]
 8009ad8:	9109      	str	r1, [sp, #36]	; 0x24
 8009ada:	e05a      	b.n	8009b92 <_dtoa_r+0x3d2>
 8009adc:	2301      	movs	r3, #1
 8009ade:	421d      	tst	r5, r3
 8009ae0:	d009      	beq.n	8009af6 <_dtoa_r+0x336>
 8009ae2:	18e4      	adds	r4, r4, r3
 8009ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae6:	0030      	movs	r0, r6
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	0039      	movs	r1, r7
 8009aee:	f7f7 ff9b 	bl	8001a28 <__aeabi_dmul>
 8009af2:	0006      	movs	r6, r0
 8009af4:	000f      	movs	r7, r1
 8009af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009af8:	106d      	asrs	r5, r5, #1
 8009afa:	3308      	adds	r3, #8
 8009afc:	e7e2      	b.n	8009ac4 <_dtoa_r+0x304>
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	0800ba31 	.word	0x0800ba31
 8009b04:	0800ba48 	.word	0x0800ba48
 8009b08:	7ff00000 	.word	0x7ff00000
 8009b0c:	0000270f 	.word	0x0000270f
 8009b10:	0800ba2d 	.word	0x0800ba2d
 8009b14:	0800ba30 	.word	0x0800ba30
 8009b18:	0800ba00 	.word	0x0800ba00
 8009b1c:	0800ba01 	.word	0x0800ba01
 8009b20:	3ff00000 	.word	0x3ff00000
 8009b24:	fffffc01 	.word	0xfffffc01
 8009b28:	3ff80000 	.word	0x3ff80000
 8009b2c:	636f4361 	.word	0x636f4361
 8009b30:	3fd287a7 	.word	0x3fd287a7
 8009b34:	8b60c8b3 	.word	0x8b60c8b3
 8009b38:	3fc68a28 	.word	0x3fc68a28
 8009b3c:	509f79fb 	.word	0x509f79fb
 8009b40:	3fd34413 	.word	0x3fd34413
 8009b44:	0800bb38 	.word	0x0800bb38
 8009b48:	00000432 	.word	0x00000432
 8009b4c:	00000412 	.word	0x00000412
 8009b50:	fe100000 	.word	0xfe100000
 8009b54:	0800baa0 	.word	0x0800baa0
 8009b58:	0800bb10 	.word	0x0800bb10
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	2402      	movs	r4, #2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d016      	beq.n	8009b92 <_dtoa_r+0x3d2>
 8009b64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b68:	220f      	movs	r2, #15
 8009b6a:	425d      	negs	r5, r3
 8009b6c:	402a      	ands	r2, r5
 8009b6e:	4bdd      	ldr	r3, [pc, #884]	; (8009ee4 <_dtoa_r+0x724>)
 8009b70:	00d2      	lsls	r2, r2, #3
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f7f7 ff56 	bl	8001a28 <__aeabi_dmul>
 8009b7c:	2701      	movs	r7, #1
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9008      	str	r0, [sp, #32]
 8009b82:	9109      	str	r1, [sp, #36]	; 0x24
 8009b84:	4ed8      	ldr	r6, [pc, #864]	; (8009ee8 <_dtoa_r+0x728>)
 8009b86:	112d      	asrs	r5, r5, #4
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	d000      	beq.n	8009b8e <_dtoa_r+0x3ce>
 8009b8c:	e091      	b.n	8009cb2 <_dtoa_r+0x4f2>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1a1      	bne.n	8009ad6 <_dtoa_r+0x316>
 8009b92:	9e08      	ldr	r6, [sp, #32]
 8009b94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d100      	bne.n	8009b9e <_dtoa_r+0x3de>
 8009b9c:	e094      	b.n	8009cc8 <_dtoa_r+0x508>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	0030      	movs	r0, r6
 8009ba2:	0039      	movs	r1, r7
 8009ba4:	4bd1      	ldr	r3, [pc, #836]	; (8009eec <_dtoa_r+0x72c>)
 8009ba6:	f7f6 fc57 	bl	8000458 <__aeabi_dcmplt>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d100      	bne.n	8009bb0 <_dtoa_r+0x3f0>
 8009bae:	e08b      	b.n	8009cc8 <_dtoa_r+0x508>
 8009bb0:	9b07      	ldr	r3, [sp, #28]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d100      	bne.n	8009bb8 <_dtoa_r+0x3f8>
 8009bb6:	e087      	b.n	8009cc8 <_dtoa_r+0x508>
 8009bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd45      	ble.n	8009c4a <_dtoa_r+0x48a>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bc6:	0030      	movs	r0, r6
 8009bc8:	4bc9      	ldr	r3, [pc, #804]	; (8009ef0 <_dtoa_r+0x730>)
 8009bca:	0039      	movs	r1, r7
 8009bcc:	f7f7 ff2c 	bl	8001a28 <__aeabi_dmul>
 8009bd0:	9008      	str	r0, [sp, #32]
 8009bd2:	9109      	str	r1, [sp, #36]	; 0x24
 8009bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	0020      	movs	r0, r4
 8009bda:	9e08      	ldr	r6, [sp, #32]
 8009bdc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bde:	9312      	str	r3, [sp, #72]	; 0x48
 8009be0:	f7f8 fdba 	bl	8002758 <__aeabi_i2d>
 8009be4:	0032      	movs	r2, r6
 8009be6:	003b      	movs	r3, r7
 8009be8:	f7f7 ff1e 	bl	8001a28 <__aeabi_dmul>
 8009bec:	2200      	movs	r2, #0
 8009bee:	4bc1      	ldr	r3, [pc, #772]	; (8009ef4 <_dtoa_r+0x734>)
 8009bf0:	f7f6 ffc0 	bl	8000b74 <__aeabi_dadd>
 8009bf4:	4ac0      	ldr	r2, [pc, #768]	; (8009ef8 <_dtoa_r+0x738>)
 8009bf6:	9014      	str	r0, [sp, #80]	; 0x50
 8009bf8:	9115      	str	r1, [sp, #84]	; 0x54
 8009bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009bfe:	4694      	mov	ip, r2
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	9409      	str	r4, [sp, #36]	; 0x24
 8009c04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c06:	4463      	add	r3, ip
 8009c08:	9318      	str	r3, [sp, #96]	; 0x60
 8009c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d15e      	bne.n	8009cd0 <_dtoa_r+0x510>
 8009c12:	2200      	movs	r2, #0
 8009c14:	4bb9      	ldr	r3, [pc, #740]	; (8009efc <_dtoa_r+0x73c>)
 8009c16:	0030      	movs	r0, r6
 8009c18:	0039      	movs	r1, r7
 8009c1a:	f7f8 f9c7 	bl	8001fac <__aeabi_dsub>
 8009c1e:	9a08      	ldr	r2, [sp, #32]
 8009c20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009c22:	0004      	movs	r4, r0
 8009c24:	000d      	movs	r5, r1
 8009c26:	f7f6 fc2b 	bl	8000480 <__aeabi_dcmpgt>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d000      	beq.n	8009c30 <_dtoa_r+0x470>
 8009c2e:	e2b3      	b.n	800a198 <_dtoa_r+0x9d8>
 8009c30:	48b3      	ldr	r0, [pc, #716]	; (8009f00 <_dtoa_r+0x740>)
 8009c32:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009c34:	4684      	mov	ip, r0
 8009c36:	4461      	add	r1, ip
 8009c38:	000b      	movs	r3, r1
 8009c3a:	0020      	movs	r0, r4
 8009c3c:	0029      	movs	r1, r5
 8009c3e:	9a08      	ldr	r2, [sp, #32]
 8009c40:	f7f6 fc0a 	bl	8000458 <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d000      	beq.n	8009c4a <_dtoa_r+0x48a>
 8009c48:	e2a3      	b.n	800a192 <_dtoa_r+0x9d2>
 8009c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009c4e:	9308      	str	r3, [sp, #32]
 8009c50:	9409      	str	r4, [sp, #36]	; 0x24
 8009c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da00      	bge.n	8009c5a <_dtoa_r+0x49a>
 8009c58:	e179      	b.n	8009f4e <_dtoa_r+0x78e>
 8009c5a:	9a03      	ldr	r2, [sp, #12]
 8009c5c:	2a0e      	cmp	r2, #14
 8009c5e:	dd00      	ble.n	8009c62 <_dtoa_r+0x4a2>
 8009c60:	e175      	b.n	8009f4e <_dtoa_r+0x78e>
 8009c62:	4ba0      	ldr	r3, [pc, #640]	; (8009ee4 <_dtoa_r+0x724>)
 8009c64:	00d2      	lsls	r2, r2, #3
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	681e      	ldr	r6, [r3, #0]
 8009c6a:	685f      	ldr	r7, [r3, #4]
 8009c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db00      	blt.n	8009c74 <_dtoa_r+0x4b4>
 8009c72:	e0e5      	b.n	8009e40 <_dtoa_r+0x680>
 8009c74:	9b07      	ldr	r3, [sp, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	dd00      	ble.n	8009c7c <_dtoa_r+0x4bc>
 8009c7a:	e0e1      	b.n	8009e40 <_dtoa_r+0x680>
 8009c7c:	d000      	beq.n	8009c80 <_dtoa_r+0x4c0>
 8009c7e:	e288      	b.n	800a192 <_dtoa_r+0x9d2>
 8009c80:	2200      	movs	r2, #0
 8009c82:	0030      	movs	r0, r6
 8009c84:	0039      	movs	r1, r7
 8009c86:	4b9d      	ldr	r3, [pc, #628]	; (8009efc <_dtoa_r+0x73c>)
 8009c88:	f7f7 fece 	bl	8001a28 <__aeabi_dmul>
 8009c8c:	9a08      	ldr	r2, [sp, #32]
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	f7f6 fc00 	bl	8000494 <__aeabi_dcmpge>
 8009c94:	9e07      	ldr	r6, [sp, #28]
 8009c96:	0037      	movs	r7, r6
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d000      	beq.n	8009c9e <_dtoa_r+0x4de>
 8009c9c:	e25f      	b.n	800a15e <_dtoa_r+0x99e>
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	9a06      	ldr	r2, [sp, #24]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	9308      	str	r3, [sp, #32]
 8009ca6:	2331      	movs	r3, #49	; 0x31
 8009ca8:	7013      	strb	r3, [r2, #0]
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	e25a      	b.n	800a168 <_dtoa_r+0x9a8>
 8009cb2:	423d      	tst	r5, r7
 8009cb4:	d005      	beq.n	8009cc2 <_dtoa_r+0x502>
 8009cb6:	6832      	ldr	r2, [r6, #0]
 8009cb8:	6873      	ldr	r3, [r6, #4]
 8009cba:	f7f7 feb5 	bl	8001a28 <__aeabi_dmul>
 8009cbe:	003b      	movs	r3, r7
 8009cc0:	3401      	adds	r4, #1
 8009cc2:	106d      	asrs	r5, r5, #1
 8009cc4:	3608      	adds	r6, #8
 8009cc6:	e75f      	b.n	8009b88 <_dtoa_r+0x3c8>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	930e      	str	r3, [sp, #56]	; 0x38
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	e783      	b.n	8009bd8 <_dtoa_r+0x418>
 8009cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cd2:	4b84      	ldr	r3, [pc, #528]	; (8009ee4 <_dtoa_r+0x724>)
 8009cd4:	3a01      	subs	r2, #1
 8009cd6:	00d2      	lsls	r2, r2, #3
 8009cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	9c08      	ldr	r4, [sp, #32]
 8009cde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d051      	beq.n	8009d8c <_dtoa_r+0x5cc>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	4986      	ldr	r1, [pc, #536]	; (8009f04 <_dtoa_r+0x744>)
 8009cec:	f7f7 faa2 	bl	8001234 <__aeabi_ddiv>
 8009cf0:	0022      	movs	r2, r4
 8009cf2:	002b      	movs	r3, r5
 8009cf4:	f7f8 f95a 	bl	8001fac <__aeabi_dsub>
 8009cf8:	9a06      	ldr	r2, [sp, #24]
 8009cfa:	0004      	movs	r4, r0
 8009cfc:	4694      	mov	ip, r2
 8009cfe:	000d      	movs	r5, r1
 8009d00:	9b06      	ldr	r3, [sp, #24]
 8009d02:	9314      	str	r3, [sp, #80]	; 0x50
 8009d04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d06:	4463      	add	r3, ip
 8009d08:	9318      	str	r3, [sp, #96]	; 0x60
 8009d0a:	0039      	movs	r1, r7
 8009d0c:	0030      	movs	r0, r6
 8009d0e:	f7f8 fced 	bl	80026ec <__aeabi_d2iz>
 8009d12:	9012      	str	r0, [sp, #72]	; 0x48
 8009d14:	f7f8 fd20 	bl	8002758 <__aeabi_i2d>
 8009d18:	0002      	movs	r2, r0
 8009d1a:	000b      	movs	r3, r1
 8009d1c:	0030      	movs	r0, r6
 8009d1e:	0039      	movs	r1, r7
 8009d20:	f7f8 f944 	bl	8001fac <__aeabi_dsub>
 8009d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d28:	3301      	adds	r3, #1
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d2e:	0006      	movs	r6, r0
 8009d30:	3330      	adds	r3, #48	; 0x30
 8009d32:	7013      	strb	r3, [r2, #0]
 8009d34:	0022      	movs	r2, r4
 8009d36:	002b      	movs	r3, r5
 8009d38:	000f      	movs	r7, r1
 8009d3a:	f7f6 fb8d 	bl	8000458 <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d174      	bne.n	8009e2c <_dtoa_r+0x66c>
 8009d42:	0032      	movs	r2, r6
 8009d44:	003b      	movs	r3, r7
 8009d46:	2000      	movs	r0, #0
 8009d48:	4968      	ldr	r1, [pc, #416]	; (8009eec <_dtoa_r+0x72c>)
 8009d4a:	f7f8 f92f 	bl	8001fac <__aeabi_dsub>
 8009d4e:	0022      	movs	r2, r4
 8009d50:	002b      	movs	r3, r5
 8009d52:	f7f6 fb81 	bl	8000458 <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d000      	beq.n	8009d5c <_dtoa_r+0x59c>
 8009d5a:	e0d7      	b.n	8009f0c <_dtoa_r+0x74c>
 8009d5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d5e:	9a08      	ldr	r2, [sp, #32]
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d100      	bne.n	8009d66 <_dtoa_r+0x5a6>
 8009d64:	e771      	b.n	8009c4a <_dtoa_r+0x48a>
 8009d66:	2200      	movs	r2, #0
 8009d68:	0020      	movs	r0, r4
 8009d6a:	0029      	movs	r1, r5
 8009d6c:	4b60      	ldr	r3, [pc, #384]	; (8009ef0 <_dtoa_r+0x730>)
 8009d6e:	f7f7 fe5b 	bl	8001a28 <__aeabi_dmul>
 8009d72:	4b5f      	ldr	r3, [pc, #380]	; (8009ef0 <_dtoa_r+0x730>)
 8009d74:	0004      	movs	r4, r0
 8009d76:	000d      	movs	r5, r1
 8009d78:	0030      	movs	r0, r6
 8009d7a:	0039      	movs	r1, r7
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f7f7 fe53 	bl	8001a28 <__aeabi_dmul>
 8009d82:	9b08      	ldr	r3, [sp, #32]
 8009d84:	0006      	movs	r6, r0
 8009d86:	000f      	movs	r7, r1
 8009d88:	9314      	str	r3, [sp, #80]	; 0x50
 8009d8a:	e7be      	b.n	8009d0a <_dtoa_r+0x54a>
 8009d8c:	0020      	movs	r0, r4
 8009d8e:	0029      	movs	r1, r5
 8009d90:	f7f7 fe4a 	bl	8001a28 <__aeabi_dmul>
 8009d94:	9a06      	ldr	r2, [sp, #24]
 8009d96:	9b06      	ldr	r3, [sp, #24]
 8009d98:	4694      	mov	ip, r2
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d9e:	9014      	str	r0, [sp, #80]	; 0x50
 8009da0:	9115      	str	r1, [sp, #84]	; 0x54
 8009da2:	4463      	add	r3, ip
 8009da4:	9319      	str	r3, [sp, #100]	; 0x64
 8009da6:	0030      	movs	r0, r6
 8009da8:	0039      	movs	r1, r7
 8009daa:	f7f8 fc9f 	bl	80026ec <__aeabi_d2iz>
 8009dae:	9018      	str	r0, [sp, #96]	; 0x60
 8009db0:	f7f8 fcd2 	bl	8002758 <__aeabi_i2d>
 8009db4:	0002      	movs	r2, r0
 8009db6:	000b      	movs	r3, r1
 8009db8:	0030      	movs	r0, r6
 8009dba:	0039      	movs	r1, r7
 8009dbc:	f7f8 f8f6 	bl	8001fac <__aeabi_dsub>
 8009dc0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009dc2:	9b08      	ldr	r3, [sp, #32]
 8009dc4:	3630      	adds	r6, #48	; 0x30
 8009dc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dc8:	701e      	strb	r6, [r3, #0]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	0004      	movs	r4, r0
 8009dce:	000d      	movs	r5, r1
 8009dd0:	9308      	str	r3, [sp, #32]
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d12d      	bne.n	8009e32 <_dtoa_r+0x672>
 8009dd6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009dd8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009dda:	9a06      	ldr	r2, [sp, #24]
 8009ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dde:	4694      	mov	ip, r2
 8009de0:	4463      	add	r3, ip
 8009de2:	2200      	movs	r2, #0
 8009de4:	9308      	str	r3, [sp, #32]
 8009de6:	4b47      	ldr	r3, [pc, #284]	; (8009f04 <_dtoa_r+0x744>)
 8009de8:	f7f6 fec4 	bl	8000b74 <__aeabi_dadd>
 8009dec:	0002      	movs	r2, r0
 8009dee:	000b      	movs	r3, r1
 8009df0:	0020      	movs	r0, r4
 8009df2:	0029      	movs	r1, r5
 8009df4:	f7f6 fb44 	bl	8000480 <__aeabi_dcmpgt>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d000      	beq.n	8009dfe <_dtoa_r+0x63e>
 8009dfc:	e086      	b.n	8009f0c <_dtoa_r+0x74c>
 8009dfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e02:	2000      	movs	r0, #0
 8009e04:	493f      	ldr	r1, [pc, #252]	; (8009f04 <_dtoa_r+0x744>)
 8009e06:	f7f8 f8d1 	bl	8001fac <__aeabi_dsub>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	000b      	movs	r3, r1
 8009e0e:	0020      	movs	r0, r4
 8009e10:	0029      	movs	r1, r5
 8009e12:	f7f6 fb21 	bl	8000458 <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d100      	bne.n	8009e1c <_dtoa_r+0x65c>
 8009e1a:	e716      	b.n	8009c4a <_dtoa_r+0x48a>
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	001a      	movs	r2, r3
 8009e20:	3a01      	subs	r2, #1
 8009e22:	9208      	str	r2, [sp, #32]
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	2a30      	cmp	r2, #48	; 0x30
 8009e28:	d0f8      	beq.n	8009e1c <_dtoa_r+0x65c>
 8009e2a:	9308      	str	r3, [sp, #32]
 8009e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e2e:	9303      	str	r3, [sp, #12]
 8009e30:	e046      	b.n	8009ec0 <_dtoa_r+0x700>
 8009e32:	2200      	movs	r2, #0
 8009e34:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <_dtoa_r+0x730>)
 8009e36:	f7f7 fdf7 	bl	8001a28 <__aeabi_dmul>
 8009e3a:	0006      	movs	r6, r0
 8009e3c:	000f      	movs	r7, r1
 8009e3e:	e7b2      	b.n	8009da6 <_dtoa_r+0x5e6>
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	9a06      	ldr	r2, [sp, #24]
 8009e44:	930a      	str	r3, [sp, #40]	; 0x28
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	9c08      	ldr	r4, [sp, #32]
 8009e4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	189b      	adds	r3, r3, r2
 8009e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e52:	0032      	movs	r2, r6
 8009e54:	003b      	movs	r3, r7
 8009e56:	0020      	movs	r0, r4
 8009e58:	0029      	movs	r1, r5
 8009e5a:	f7f7 f9eb 	bl	8001234 <__aeabi_ddiv>
 8009e5e:	f7f8 fc45 	bl	80026ec <__aeabi_d2iz>
 8009e62:	9007      	str	r0, [sp, #28]
 8009e64:	f7f8 fc78 	bl	8002758 <__aeabi_i2d>
 8009e68:	0032      	movs	r2, r6
 8009e6a:	003b      	movs	r3, r7
 8009e6c:	f7f7 fddc 	bl	8001a28 <__aeabi_dmul>
 8009e70:	0002      	movs	r2, r0
 8009e72:	000b      	movs	r3, r1
 8009e74:	0020      	movs	r0, r4
 8009e76:	0029      	movs	r1, r5
 8009e78:	f7f8 f898 	bl	8001fac <__aeabi_dsub>
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	001a      	movs	r2, r3
 8009e80:	3201      	adds	r2, #1
 8009e82:	920a      	str	r2, [sp, #40]	; 0x28
 8009e84:	9208      	str	r2, [sp, #32]
 8009e86:	9a07      	ldr	r2, [sp, #28]
 8009e88:	3230      	adds	r2, #48	; 0x30
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d14f      	bne.n	8009f32 <_dtoa_r+0x772>
 8009e92:	0002      	movs	r2, r0
 8009e94:	000b      	movs	r3, r1
 8009e96:	f7f6 fe6d 	bl	8000b74 <__aeabi_dadd>
 8009e9a:	0032      	movs	r2, r6
 8009e9c:	003b      	movs	r3, r7
 8009e9e:	0004      	movs	r4, r0
 8009ea0:	000d      	movs	r5, r1
 8009ea2:	f7f6 faed 	bl	8000480 <__aeabi_dcmpgt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d12e      	bne.n	8009f08 <_dtoa_r+0x748>
 8009eaa:	0032      	movs	r2, r6
 8009eac:	003b      	movs	r3, r7
 8009eae:	0020      	movs	r0, r4
 8009eb0:	0029      	movs	r1, r5
 8009eb2:	f7f6 facb 	bl	800044c <__aeabi_dcmpeq>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d002      	beq.n	8009ec0 <_dtoa_r+0x700>
 8009eba:	9b07      	ldr	r3, [sp, #28]
 8009ebc:	07de      	lsls	r6, r3, #31
 8009ebe:	d423      	bmi.n	8009f08 <_dtoa_r+0x748>
 8009ec0:	9905      	ldr	r1, [sp, #20]
 8009ec2:	9804      	ldr	r0, [sp, #16]
 8009ec4:	f000 fbd6 	bl	800a674 <_Bfree>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9a08      	ldr	r2, [sp, #32]
 8009ecc:	7013      	strb	r3, [r2, #0]
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d100      	bne.n	8009ede <_dtoa_r+0x71e>
 8009edc:	e4ba      	b.n	8009854 <_dtoa_r+0x94>
 8009ede:	9a08      	ldr	r2, [sp, #32]
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e4b7      	b.n	8009854 <_dtoa_r+0x94>
 8009ee4:	0800bb38 	.word	0x0800bb38
 8009ee8:	0800bb10 	.word	0x0800bb10
 8009eec:	3ff00000 	.word	0x3ff00000
 8009ef0:	40240000 	.word	0x40240000
 8009ef4:	401c0000 	.word	0x401c0000
 8009ef8:	fcc00000 	.word	0xfcc00000
 8009efc:	40140000 	.word	0x40140000
 8009f00:	7cc00000 	.word	0x7cc00000
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f0c:	9b08      	ldr	r3, [sp, #32]
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	2a39      	cmp	r2, #57	; 0x39
 8009f16:	d108      	bne.n	8009f2a <_dtoa_r+0x76a>
 8009f18:	9a06      	ldr	r2, [sp, #24]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d1f7      	bne.n	8009f0e <_dtoa_r+0x74e>
 8009f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f20:	9906      	ldr	r1, [sp, #24]
 8009f22:	3201      	adds	r2, #1
 8009f24:	920e      	str	r2, [sp, #56]	; 0x38
 8009f26:	2230      	movs	r2, #48	; 0x30
 8009f28:	700a      	strb	r2, [r1, #0]
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	e77c      	b.n	8009e2c <_dtoa_r+0x66c>
 8009f32:	2200      	movs	r2, #0
 8009f34:	4ba9      	ldr	r3, [pc, #676]	; (800a1dc <_dtoa_r+0xa1c>)
 8009f36:	f7f7 fd77 	bl	8001a28 <__aeabi_dmul>
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	0004      	movs	r4, r0
 8009f40:	000d      	movs	r5, r1
 8009f42:	f7f6 fa83 	bl	800044c <__aeabi_dcmpeq>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d100      	bne.n	8009f4c <_dtoa_r+0x78c>
 8009f4a:	e782      	b.n	8009e52 <_dtoa_r+0x692>
 8009f4c:	e7b8      	b.n	8009ec0 <_dtoa_r+0x700>
 8009f4e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009f50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f54:	2f00      	cmp	r7, #0
 8009f56:	d012      	beq.n	8009f7e <_dtoa_r+0x7be>
 8009f58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f5a:	2a01      	cmp	r2, #1
 8009f5c:	dc6e      	bgt.n	800a03c <_dtoa_r+0x87c>
 8009f5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d065      	beq.n	800a030 <_dtoa_r+0x870>
 8009f64:	4a9e      	ldr	r2, [pc, #632]	; (800a1e0 <_dtoa_r+0xa20>)
 8009f66:	189b      	adds	r3, r3, r2
 8009f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	18d2      	adds	r2, r2, r3
 8009f6e:	920a      	str	r2, [sp, #40]	; 0x28
 8009f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f72:	9804      	ldr	r0, [sp, #16]
 8009f74:	18d3      	adds	r3, r2, r3
 8009f76:	930c      	str	r3, [sp, #48]	; 0x30
 8009f78:	f000 fc2c 	bl	800a7d4 <__i2b>
 8009f7c:	0007      	movs	r7, r0
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	d00e      	beq.n	8009fa0 <_dtoa_r+0x7e0>
 8009f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd0b      	ble.n	8009fa0 <_dtoa_r+0x7e0>
 8009f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f8a:	0023      	movs	r3, r4
 8009f8c:	4294      	cmp	r4, r2
 8009f8e:	dd00      	ble.n	8009f92 <_dtoa_r+0x7d2>
 8009f90:	0013      	movs	r3, r2
 8009f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f94:	1ae4      	subs	r4, r4, r3
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	920a      	str	r2, [sp, #40]	; 0x28
 8009f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01e      	beq.n	8009fe4 <_dtoa_r+0x824>
 8009fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d05c      	beq.n	800a066 <_dtoa_r+0x8a6>
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	dd10      	ble.n	8009fd2 <_dtoa_r+0x812>
 8009fb0:	0039      	movs	r1, r7
 8009fb2:	002a      	movs	r2, r5
 8009fb4:	9804      	ldr	r0, [sp, #16]
 8009fb6:	f000 fcd5 	bl	800a964 <__pow5mult>
 8009fba:	9a05      	ldr	r2, [sp, #20]
 8009fbc:	0001      	movs	r1, r0
 8009fbe:	0007      	movs	r7, r0
 8009fc0:	9804      	ldr	r0, [sp, #16]
 8009fc2:	f000 fc1f 	bl	800a804 <__multiply>
 8009fc6:	0006      	movs	r6, r0
 8009fc8:	9905      	ldr	r1, [sp, #20]
 8009fca:	9804      	ldr	r0, [sp, #16]
 8009fcc:	f000 fb52 	bl	800a674 <_Bfree>
 8009fd0:	9605      	str	r6, [sp, #20]
 8009fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd4:	1b5a      	subs	r2, r3, r5
 8009fd6:	42ab      	cmp	r3, r5
 8009fd8:	d004      	beq.n	8009fe4 <_dtoa_r+0x824>
 8009fda:	9905      	ldr	r1, [sp, #20]
 8009fdc:	9804      	ldr	r0, [sp, #16]
 8009fde:	f000 fcc1 	bl	800a964 <__pow5mult>
 8009fe2:	9005      	str	r0, [sp, #20]
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	9804      	ldr	r0, [sp, #16]
 8009fe8:	f000 fbf4 	bl	800a7d4 <__i2b>
 8009fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fee:	0006      	movs	r6, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dd3a      	ble.n	800a06a <_dtoa_r+0x8aa>
 8009ff4:	001a      	movs	r2, r3
 8009ff6:	0001      	movs	r1, r0
 8009ff8:	9804      	ldr	r0, [sp, #16]
 8009ffa:	f000 fcb3 	bl	800a964 <__pow5mult>
 8009ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a000:	0006      	movs	r6, r0
 800a002:	2500      	movs	r5, #0
 800a004:	2b01      	cmp	r3, #1
 800a006:	dc38      	bgt.n	800a07a <_dtoa_r+0x8ba>
 800a008:	2500      	movs	r5, #0
 800a00a:	9b08      	ldr	r3, [sp, #32]
 800a00c:	42ab      	cmp	r3, r5
 800a00e:	d130      	bne.n	800a072 <_dtoa_r+0x8b2>
 800a010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a012:	031b      	lsls	r3, r3, #12
 800a014:	42ab      	cmp	r3, r5
 800a016:	d12c      	bne.n	800a072 <_dtoa_r+0x8b2>
 800a018:	4b72      	ldr	r3, [pc, #456]	; (800a1e4 <_dtoa_r+0xa24>)
 800a01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01c:	4213      	tst	r3, r2
 800a01e:	d028      	beq.n	800a072 <_dtoa_r+0x8b2>
 800a020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a022:	3501      	adds	r5, #1
 800a024:	3301      	adds	r3, #1
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a02a:	3301      	adds	r3, #1
 800a02c:	930c      	str	r3, [sp, #48]	; 0x30
 800a02e:	e020      	b.n	800a072 <_dtoa_r+0x8b2>
 800a030:	2336      	movs	r3, #54	; 0x36
 800a032:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a034:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a036:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a038:	1a9b      	subs	r3, r3, r2
 800a03a:	e795      	b.n	8009f68 <_dtoa_r+0x7a8>
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	1e5d      	subs	r5, r3, #1
 800a040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a042:	42ab      	cmp	r3, r5
 800a044:	db07      	blt.n	800a056 <_dtoa_r+0x896>
 800a046:	1b5d      	subs	r5, r3, r5
 800a048:	9b07      	ldr	r3, [sp, #28]
 800a04a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	da8b      	bge.n	8009f68 <_dtoa_r+0x7a8>
 800a050:	1ae4      	subs	r4, r4, r3
 800a052:	2300      	movs	r3, #0
 800a054:	e788      	b.n	8009f68 <_dtoa_r+0x7a8>
 800a056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a05a:	1aeb      	subs	r3, r5, r3
 800a05c:	18d3      	adds	r3, r2, r3
 800a05e:	950d      	str	r5, [sp, #52]	; 0x34
 800a060:	9313      	str	r3, [sp, #76]	; 0x4c
 800a062:	2500      	movs	r5, #0
 800a064:	e7f0      	b.n	800a048 <_dtoa_r+0x888>
 800a066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a068:	e7b7      	b.n	8009fda <_dtoa_r+0x81a>
 800a06a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06c:	2500      	movs	r5, #0
 800a06e:	2b01      	cmp	r3, #1
 800a070:	ddca      	ble.n	800a008 <_dtoa_r+0x848>
 800a072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a074:	2001      	movs	r0, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d008      	beq.n	800a08c <_dtoa_r+0x8cc>
 800a07a:	6933      	ldr	r3, [r6, #16]
 800a07c:	3303      	adds	r3, #3
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	18f3      	adds	r3, r6, r3
 800a082:	6858      	ldr	r0, [r3, #4]
 800a084:	f000 fb5e 	bl	800a744 <__hi0bits>
 800a088:	2320      	movs	r3, #32
 800a08a:	1a18      	subs	r0, r3, r0
 800a08c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a08e:	1818      	adds	r0, r3, r0
 800a090:	0002      	movs	r2, r0
 800a092:	231f      	movs	r3, #31
 800a094:	401a      	ands	r2, r3
 800a096:	4218      	tst	r0, r3
 800a098:	d047      	beq.n	800a12a <_dtoa_r+0x96a>
 800a09a:	3301      	adds	r3, #1
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	dd3f      	ble.n	800a122 <_dtoa_r+0x962>
 800a0a2:	231c      	movs	r3, #28
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a8:	18e4      	adds	r4, r4, r3
 800a0aa:	18d2      	adds	r2, r2, r3
 800a0ac:	920a      	str	r2, [sp, #40]	; 0x28
 800a0ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b0:	18d3      	adds	r3, r2, r3
 800a0b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd05      	ble.n	800a0c6 <_dtoa_r+0x906>
 800a0ba:	001a      	movs	r2, r3
 800a0bc:	9905      	ldr	r1, [sp, #20]
 800a0be:	9804      	ldr	r0, [sp, #16]
 800a0c0:	f000 fcac 	bl	800aa1c <__lshift>
 800a0c4:	9005      	str	r0, [sp, #20]
 800a0c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	dd05      	ble.n	800a0d8 <_dtoa_r+0x918>
 800a0cc:	0031      	movs	r1, r6
 800a0ce:	001a      	movs	r2, r3
 800a0d0:	9804      	ldr	r0, [sp, #16]
 800a0d2:	f000 fca3 	bl	800aa1c <__lshift>
 800a0d6:	0006      	movs	r6, r0
 800a0d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d027      	beq.n	800a12e <_dtoa_r+0x96e>
 800a0de:	0031      	movs	r1, r6
 800a0e0:	9805      	ldr	r0, [sp, #20]
 800a0e2:	f000 fd09 	bl	800aaf8 <__mcmp>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	da21      	bge.n	800a12e <_dtoa_r+0x96e>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	9905      	ldr	r1, [sp, #20]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9804      	ldr	r0, [sp, #16]
 800a0f8:	f000 fae0 	bl	800a6bc <__multadd>
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fe:	9005      	str	r0, [sp, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d100      	bne.n	800a106 <_dtoa_r+0x946>
 800a104:	e15d      	b.n	800a3c2 <_dtoa_r+0xc02>
 800a106:	2300      	movs	r3, #0
 800a108:	0039      	movs	r1, r7
 800a10a:	220a      	movs	r2, #10
 800a10c:	9804      	ldr	r0, [sp, #16]
 800a10e:	f000 fad5 	bl	800a6bc <__multadd>
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	0007      	movs	r7, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	dc49      	bgt.n	800a1ae <_dtoa_r+0x9ee>
 800a11a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	dc0e      	bgt.n	800a13e <_dtoa_r+0x97e>
 800a120:	e045      	b.n	800a1ae <_dtoa_r+0x9ee>
 800a122:	2b04      	cmp	r3, #4
 800a124:	d0c6      	beq.n	800a0b4 <_dtoa_r+0x8f4>
 800a126:	331c      	adds	r3, #28
 800a128:	e7bd      	b.n	800a0a6 <_dtoa_r+0x8e6>
 800a12a:	0013      	movs	r3, r2
 800a12c:	e7fb      	b.n	800a126 <_dtoa_r+0x966>
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc36      	bgt.n	800a1a2 <_dtoa_r+0x9e2>
 800a134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a136:	2b02      	cmp	r3, #2
 800a138:	dd33      	ble.n	800a1a2 <_dtoa_r+0x9e2>
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10c      	bne.n	800a15e <_dtoa_r+0x99e>
 800a144:	0031      	movs	r1, r6
 800a146:	2205      	movs	r2, #5
 800a148:	9804      	ldr	r0, [sp, #16]
 800a14a:	f000 fab7 	bl	800a6bc <__multadd>
 800a14e:	0006      	movs	r6, r0
 800a150:	0001      	movs	r1, r0
 800a152:	9805      	ldr	r0, [sp, #20]
 800a154:	f000 fcd0 	bl	800aaf8 <__mcmp>
 800a158:	2800      	cmp	r0, #0
 800a15a:	dd00      	ble.n	800a15e <_dtoa_r+0x99e>
 800a15c:	e59f      	b.n	8009c9e <_dtoa_r+0x4de>
 800a15e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a160:	43db      	mvns	r3, r3
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	9b06      	ldr	r3, [sp, #24]
 800a166:	9308      	str	r3, [sp, #32]
 800a168:	2500      	movs	r5, #0
 800a16a:	0031      	movs	r1, r6
 800a16c:	9804      	ldr	r0, [sp, #16]
 800a16e:	f000 fa81 	bl	800a674 <_Bfree>
 800a172:	2f00      	cmp	r7, #0
 800a174:	d100      	bne.n	800a178 <_dtoa_r+0x9b8>
 800a176:	e6a3      	b.n	8009ec0 <_dtoa_r+0x700>
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d005      	beq.n	800a188 <_dtoa_r+0x9c8>
 800a17c:	42bd      	cmp	r5, r7
 800a17e:	d003      	beq.n	800a188 <_dtoa_r+0x9c8>
 800a180:	0029      	movs	r1, r5
 800a182:	9804      	ldr	r0, [sp, #16]
 800a184:	f000 fa76 	bl	800a674 <_Bfree>
 800a188:	0039      	movs	r1, r7
 800a18a:	9804      	ldr	r0, [sp, #16]
 800a18c:	f000 fa72 	bl	800a674 <_Bfree>
 800a190:	e696      	b.n	8009ec0 <_dtoa_r+0x700>
 800a192:	2600      	movs	r6, #0
 800a194:	0037      	movs	r7, r6
 800a196:	e7e2      	b.n	800a15e <_dtoa_r+0x99e>
 800a198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	0037      	movs	r7, r6
 800a1a0:	e57d      	b.n	8009c9e <_dtoa_r+0x4de>
 800a1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d100      	bne.n	800a1aa <_dtoa_r+0x9ea>
 800a1a8:	e0c3      	b.n	800a332 <_dtoa_r+0xb72>
 800a1aa:	9b07      	ldr	r3, [sp, #28]
 800a1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	dd05      	ble.n	800a1be <_dtoa_r+0x9fe>
 800a1b2:	0039      	movs	r1, r7
 800a1b4:	0022      	movs	r2, r4
 800a1b6:	9804      	ldr	r0, [sp, #16]
 800a1b8:	f000 fc30 	bl	800aa1c <__lshift>
 800a1bc:	0007      	movs	r7, r0
 800a1be:	0038      	movs	r0, r7
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	d024      	beq.n	800a20e <_dtoa_r+0xa4e>
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	9804      	ldr	r0, [sp, #16]
 800a1c8:	f000 fa10 	bl	800a5ec <_Balloc>
 800a1cc:	1e04      	subs	r4, r0, #0
 800a1ce:	d111      	bne.n	800a1f4 <_dtoa_r+0xa34>
 800a1d0:	0022      	movs	r2, r4
 800a1d2:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <_dtoa_r+0xa28>)
 800a1d4:	4805      	ldr	r0, [pc, #20]	; (800a1ec <_dtoa_r+0xa2c>)
 800a1d6:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <_dtoa_r+0xa30>)
 800a1d8:	f7ff fb07 	bl	80097ea <_dtoa_r+0x2a>
 800a1dc:	40240000 	.word	0x40240000
 800a1e0:	00000433 	.word	0x00000433
 800a1e4:	7ff00000 	.word	0x7ff00000
 800a1e8:	0800baa0 	.word	0x0800baa0
 800a1ec:	0800ba48 	.word	0x0800ba48
 800a1f0:	000002ef 	.word	0x000002ef
 800a1f4:	0039      	movs	r1, r7
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	310c      	adds	r1, #12
 800a1fa:	3202      	adds	r2, #2
 800a1fc:	0092      	lsls	r2, r2, #2
 800a1fe:	300c      	adds	r0, #12
 800a200:	f000 ffca 	bl	800b198 <memcpy>
 800a204:	2201      	movs	r2, #1
 800a206:	0021      	movs	r1, r4
 800a208:	9804      	ldr	r0, [sp, #16]
 800a20a:	f000 fc07 	bl	800aa1c <__lshift>
 800a20e:	9b06      	ldr	r3, [sp, #24]
 800a210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a212:	9307      	str	r3, [sp, #28]
 800a214:	3b01      	subs	r3, #1
 800a216:	189b      	adds	r3, r3, r2
 800a218:	2201      	movs	r2, #1
 800a21a:	003d      	movs	r5, r7
 800a21c:	0007      	movs	r7, r0
 800a21e:	930e      	str	r3, [sp, #56]	; 0x38
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	4013      	ands	r3, r2
 800a224:	930d      	str	r3, [sp, #52]	; 0x34
 800a226:	0031      	movs	r1, r6
 800a228:	9805      	ldr	r0, [sp, #20]
 800a22a:	f7ff fa39 	bl	80096a0 <quorem>
 800a22e:	0029      	movs	r1, r5
 800a230:	0004      	movs	r4, r0
 800a232:	900b      	str	r0, [sp, #44]	; 0x2c
 800a234:	9805      	ldr	r0, [sp, #20]
 800a236:	f000 fc5f 	bl	800aaf8 <__mcmp>
 800a23a:	003a      	movs	r2, r7
 800a23c:	900c      	str	r0, [sp, #48]	; 0x30
 800a23e:	0031      	movs	r1, r6
 800a240:	9804      	ldr	r0, [sp, #16]
 800a242:	f000 fc75 	bl	800ab30 <__mdiff>
 800a246:	2201      	movs	r2, #1
 800a248:	68c3      	ldr	r3, [r0, #12]
 800a24a:	3430      	adds	r4, #48	; 0x30
 800a24c:	9008      	str	r0, [sp, #32]
 800a24e:	920a      	str	r2, [sp, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <_dtoa_r+0xa9e>
 800a254:	0001      	movs	r1, r0
 800a256:	9805      	ldr	r0, [sp, #20]
 800a258:	f000 fc4e 	bl	800aaf8 <__mcmp>
 800a25c:	900a      	str	r0, [sp, #40]	; 0x28
 800a25e:	9908      	ldr	r1, [sp, #32]
 800a260:	9804      	ldr	r0, [sp, #16]
 800a262:	f000 fa07 	bl	800a674 <_Bfree>
 800a266:	9b07      	ldr	r3, [sp, #28]
 800a268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a26a:	3301      	adds	r3, #1
 800a26c:	9308      	str	r3, [sp, #32]
 800a26e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a270:	4313      	orrs	r3, r2
 800a272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a274:	4313      	orrs	r3, r2
 800a276:	d109      	bne.n	800a28c <_dtoa_r+0xacc>
 800a278:	2c39      	cmp	r4, #57	; 0x39
 800a27a:	d022      	beq.n	800a2c2 <_dtoa_r+0xb02>
 800a27c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd01      	ble.n	800a286 <_dtoa_r+0xac6>
 800a282:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a284:	3431      	adds	r4, #49	; 0x31
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	701c      	strb	r4, [r3, #0]
 800a28a:	e76e      	b.n	800a16a <_dtoa_r+0x9aa>
 800a28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a28e:	2b00      	cmp	r3, #0
 800a290:	db04      	blt.n	800a29c <_dtoa_r+0xadc>
 800a292:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a294:	4313      	orrs	r3, r2
 800a296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a298:	4313      	orrs	r3, r2
 800a29a:	d11e      	bne.n	800a2da <_dtoa_r+0xb1a>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	ddf1      	ble.n	800a286 <_dtoa_r+0xac6>
 800a2a2:	9905      	ldr	r1, [sp, #20]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	9804      	ldr	r0, [sp, #16]
 800a2a8:	f000 fbb8 	bl	800aa1c <__lshift>
 800a2ac:	0031      	movs	r1, r6
 800a2ae:	9005      	str	r0, [sp, #20]
 800a2b0:	f000 fc22 	bl	800aaf8 <__mcmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dc02      	bgt.n	800a2be <_dtoa_r+0xafe>
 800a2b8:	d1e5      	bne.n	800a286 <_dtoa_r+0xac6>
 800a2ba:	07e3      	lsls	r3, r4, #31
 800a2bc:	d5e3      	bpl.n	800a286 <_dtoa_r+0xac6>
 800a2be:	2c39      	cmp	r4, #57	; 0x39
 800a2c0:	d1df      	bne.n	800a282 <_dtoa_r+0xac2>
 800a2c2:	2339      	movs	r3, #57	; 0x39
 800a2c4:	9a07      	ldr	r2, [sp, #28]
 800a2c6:	7013      	strb	r3, [r2, #0]
 800a2c8:	9b08      	ldr	r3, [sp, #32]
 800a2ca:	9308      	str	r3, [sp, #32]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	2a39      	cmp	r2, #57	; 0x39
 800a2d2:	d063      	beq.n	800a39c <_dtoa_r+0xbdc>
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e747      	b.n	800a16a <_dtoa_r+0x9aa>
 800a2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dd03      	ble.n	800a2e8 <_dtoa_r+0xb28>
 800a2e0:	2c39      	cmp	r4, #57	; 0x39
 800a2e2:	d0ee      	beq.n	800a2c2 <_dtoa_r+0xb02>
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	e7ce      	b.n	800a286 <_dtoa_r+0xac6>
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	9a07      	ldr	r2, [sp, #28]
 800a2ec:	701c      	strb	r4, [r3, #0]
 800a2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d03e      	beq.n	800a372 <_dtoa_r+0xbb2>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	9905      	ldr	r1, [sp, #20]
 800a2fa:	9804      	ldr	r0, [sp, #16]
 800a2fc:	f000 f9de 	bl	800a6bc <__multadd>
 800a300:	2300      	movs	r3, #0
 800a302:	9005      	str	r0, [sp, #20]
 800a304:	220a      	movs	r2, #10
 800a306:	0029      	movs	r1, r5
 800a308:	9804      	ldr	r0, [sp, #16]
 800a30a:	42bd      	cmp	r5, r7
 800a30c:	d106      	bne.n	800a31c <_dtoa_r+0xb5c>
 800a30e:	f000 f9d5 	bl	800a6bc <__multadd>
 800a312:	0005      	movs	r5, r0
 800a314:	0007      	movs	r7, r0
 800a316:	9b08      	ldr	r3, [sp, #32]
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	e784      	b.n	800a226 <_dtoa_r+0xa66>
 800a31c:	f000 f9ce 	bl	800a6bc <__multadd>
 800a320:	0039      	movs	r1, r7
 800a322:	0005      	movs	r5, r0
 800a324:	2300      	movs	r3, #0
 800a326:	220a      	movs	r2, #10
 800a328:	9804      	ldr	r0, [sp, #16]
 800a32a:	f000 f9c7 	bl	800a6bc <__multadd>
 800a32e:	0007      	movs	r7, r0
 800a330:	e7f1      	b.n	800a316 <_dtoa_r+0xb56>
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	930b      	str	r3, [sp, #44]	; 0x2c
 800a336:	2500      	movs	r5, #0
 800a338:	0031      	movs	r1, r6
 800a33a:	9805      	ldr	r0, [sp, #20]
 800a33c:	f7ff f9b0 	bl	80096a0 <quorem>
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	3030      	adds	r0, #48	; 0x30
 800a344:	5558      	strb	r0, [r3, r5]
 800a346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a348:	3501      	adds	r5, #1
 800a34a:	0004      	movs	r4, r0
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dd07      	ble.n	800a360 <_dtoa_r+0xba0>
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	9905      	ldr	r1, [sp, #20]
 800a356:	9804      	ldr	r0, [sp, #16]
 800a358:	f000 f9b0 	bl	800a6bc <__multadd>
 800a35c:	9005      	str	r0, [sp, #20]
 800a35e:	e7eb      	b.n	800a338 <_dtoa_r+0xb78>
 800a360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a362:	2301      	movs	r3, #1
 800a364:	2a00      	cmp	r2, #0
 800a366:	dd00      	ble.n	800a36a <_dtoa_r+0xbaa>
 800a368:	0013      	movs	r3, r2
 800a36a:	2500      	movs	r5, #0
 800a36c:	9a06      	ldr	r2, [sp, #24]
 800a36e:	18d3      	adds	r3, r2, r3
 800a370:	9308      	str	r3, [sp, #32]
 800a372:	9905      	ldr	r1, [sp, #20]
 800a374:	2201      	movs	r2, #1
 800a376:	9804      	ldr	r0, [sp, #16]
 800a378:	f000 fb50 	bl	800aa1c <__lshift>
 800a37c:	0031      	movs	r1, r6
 800a37e:	9005      	str	r0, [sp, #20]
 800a380:	f000 fbba 	bl	800aaf8 <__mcmp>
 800a384:	2800      	cmp	r0, #0
 800a386:	dc9f      	bgt.n	800a2c8 <_dtoa_r+0xb08>
 800a388:	d101      	bne.n	800a38e <_dtoa_r+0xbce>
 800a38a:	07e4      	lsls	r4, r4, #31
 800a38c:	d49c      	bmi.n	800a2c8 <_dtoa_r+0xb08>
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	3b01      	subs	r3, #1
 800a394:	781a      	ldrb	r2, [r3, #0]
 800a396:	2a30      	cmp	r2, #48	; 0x30
 800a398:	d0fa      	beq.n	800a390 <_dtoa_r+0xbd0>
 800a39a:	e6e6      	b.n	800a16a <_dtoa_r+0x9aa>
 800a39c:	9a06      	ldr	r2, [sp, #24]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d193      	bne.n	800a2ca <_dtoa_r+0xb0a>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	9303      	str	r3, [sp, #12]
 800a3a8:	2331      	movs	r3, #49	; 0x31
 800a3aa:	7013      	strb	r3, [r2, #0]
 800a3ac:	e6dd      	b.n	800a16a <_dtoa_r+0x9aa>
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <_dtoa_r+0xc14>)
 800a3b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	4b08      	ldr	r3, [pc, #32]	; (800a3d8 <_dtoa_r+0xc18>)
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	d001      	beq.n	800a3be <_dtoa_r+0xbfe>
 800a3ba:	f7ff fa49 	bl	8009850 <_dtoa_r+0x90>
 800a3be:	f7ff fa49 	bl	8009854 <_dtoa_r+0x94>
 800a3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dcb6      	bgt.n	800a336 <_dtoa_r+0xb76>
 800a3c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	dd00      	ble.n	800a3d0 <_dtoa_r+0xc10>
 800a3ce:	e6b6      	b.n	800a13e <_dtoa_r+0x97e>
 800a3d0:	e7b1      	b.n	800a336 <_dtoa_r+0xb76>
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	0800ba24 	.word	0x0800ba24
 800a3d8:	0800ba2c 	.word	0x0800ba2c

0800a3dc <_free_r>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	0005      	movs	r5, r0
 800a3e0:	2900      	cmp	r1, #0
 800a3e2:	d010      	beq.n	800a406 <_free_r+0x2a>
 800a3e4:	1f0c      	subs	r4, r1, #4
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	da00      	bge.n	800a3ee <_free_r+0x12>
 800a3ec:	18e4      	adds	r4, r4, r3
 800a3ee:	0028      	movs	r0, r5
 800a3f0:	f000 f8ec 	bl	800a5cc <__malloc_lock>
 800a3f4:	4a1d      	ldr	r2, [pc, #116]	; (800a46c <_free_r+0x90>)
 800a3f6:	6813      	ldr	r3, [r2, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d105      	bne.n	800a408 <_free_r+0x2c>
 800a3fc:	6063      	str	r3, [r4, #4]
 800a3fe:	6014      	str	r4, [r2, #0]
 800a400:	0028      	movs	r0, r5
 800a402:	f000 f8eb 	bl	800a5dc <__malloc_unlock>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	42a3      	cmp	r3, r4
 800a40a:	d908      	bls.n	800a41e <_free_r+0x42>
 800a40c:	6820      	ldr	r0, [r4, #0]
 800a40e:	1821      	adds	r1, r4, r0
 800a410:	428b      	cmp	r3, r1
 800a412:	d1f3      	bne.n	800a3fc <_free_r+0x20>
 800a414:	6819      	ldr	r1, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	1809      	adds	r1, r1, r0
 800a41a:	6021      	str	r1, [r4, #0]
 800a41c:	e7ee      	b.n	800a3fc <_free_r+0x20>
 800a41e:	001a      	movs	r2, r3
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <_free_r+0x4e>
 800a426:	42a3      	cmp	r3, r4
 800a428:	d9f9      	bls.n	800a41e <_free_r+0x42>
 800a42a:	6811      	ldr	r1, [r2, #0]
 800a42c:	1850      	adds	r0, r2, r1
 800a42e:	42a0      	cmp	r0, r4
 800a430:	d10b      	bne.n	800a44a <_free_r+0x6e>
 800a432:	6820      	ldr	r0, [r4, #0]
 800a434:	1809      	adds	r1, r1, r0
 800a436:	1850      	adds	r0, r2, r1
 800a438:	6011      	str	r1, [r2, #0]
 800a43a:	4283      	cmp	r3, r0
 800a43c:	d1e0      	bne.n	800a400 <_free_r+0x24>
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	1841      	adds	r1, r0, r1
 800a444:	6011      	str	r1, [r2, #0]
 800a446:	6053      	str	r3, [r2, #4]
 800a448:	e7da      	b.n	800a400 <_free_r+0x24>
 800a44a:	42a0      	cmp	r0, r4
 800a44c:	d902      	bls.n	800a454 <_free_r+0x78>
 800a44e:	230c      	movs	r3, #12
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	e7d5      	b.n	800a400 <_free_r+0x24>
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	1821      	adds	r1, r4, r0
 800a458:	428b      	cmp	r3, r1
 800a45a:	d103      	bne.n	800a464 <_free_r+0x88>
 800a45c:	6819      	ldr	r1, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	1809      	adds	r1, r1, r0
 800a462:	6021      	str	r1, [r4, #0]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	6054      	str	r4, [r2, #4]
 800a468:	e7ca      	b.n	800a400 <_free_r+0x24>
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	2000061c 	.word	0x2000061c

0800a470 <malloc>:
 800a470:	b510      	push	{r4, lr}
 800a472:	4b03      	ldr	r3, [pc, #12]	; (800a480 <malloc+0x10>)
 800a474:	0001      	movs	r1, r0
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	f000 f826 	bl	800a4c8 <_malloc_r>
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	20000064 	.word	0x20000064

0800a484 <sbrk_aligned>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4e0f      	ldr	r6, [pc, #60]	; (800a4c4 <sbrk_aligned+0x40>)
 800a488:	000d      	movs	r5, r1
 800a48a:	6831      	ldr	r1, [r6, #0]
 800a48c:	0004      	movs	r4, r0
 800a48e:	2900      	cmp	r1, #0
 800a490:	d102      	bne.n	800a498 <sbrk_aligned+0x14>
 800a492:	f000 fe6f 	bl	800b174 <_sbrk_r>
 800a496:	6030      	str	r0, [r6, #0]
 800a498:	0029      	movs	r1, r5
 800a49a:	0020      	movs	r0, r4
 800a49c:	f000 fe6a 	bl	800b174 <_sbrk_r>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d00a      	beq.n	800a4ba <sbrk_aligned+0x36>
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	1cc5      	adds	r5, r0, #3
 800a4a8:	439d      	bics	r5, r3
 800a4aa:	42a8      	cmp	r0, r5
 800a4ac:	d007      	beq.n	800a4be <sbrk_aligned+0x3a>
 800a4ae:	1a29      	subs	r1, r5, r0
 800a4b0:	0020      	movs	r0, r4
 800a4b2:	f000 fe5f 	bl	800b174 <_sbrk_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d101      	bne.n	800a4be <sbrk_aligned+0x3a>
 800a4ba:	2501      	movs	r5, #1
 800a4bc:	426d      	negs	r5, r5
 800a4be:	0028      	movs	r0, r5
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	20000620 	.word	0x20000620

0800a4c8 <_malloc_r>:
 800a4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	1ccb      	adds	r3, r1, #3
 800a4ce:	4393      	bics	r3, r2
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	0006      	movs	r6, r0
 800a4d4:	001f      	movs	r7, r3
 800a4d6:	2b0c      	cmp	r3, #12
 800a4d8:	d238      	bcs.n	800a54c <_malloc_r+0x84>
 800a4da:	270c      	movs	r7, #12
 800a4dc:	42b9      	cmp	r1, r7
 800a4de:	d837      	bhi.n	800a550 <_malloc_r+0x88>
 800a4e0:	0030      	movs	r0, r6
 800a4e2:	f000 f873 	bl	800a5cc <__malloc_lock>
 800a4e6:	4b38      	ldr	r3, [pc, #224]	; (800a5c8 <_malloc_r+0x100>)
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	001c      	movs	r4, r3
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	d133      	bne.n	800a55a <_malloc_r+0x92>
 800a4f2:	0039      	movs	r1, r7
 800a4f4:	0030      	movs	r0, r6
 800a4f6:	f7ff ffc5 	bl	800a484 <sbrk_aligned>
 800a4fa:	0004      	movs	r4, r0
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d15e      	bne.n	800a5be <_malloc_r+0xf6>
 800a500:	9b00      	ldr	r3, [sp, #0]
 800a502:	681c      	ldr	r4, [r3, #0]
 800a504:	0025      	movs	r5, r4
 800a506:	2d00      	cmp	r5, #0
 800a508:	d14e      	bne.n	800a5a8 <_malloc_r+0xe0>
 800a50a:	2c00      	cmp	r4, #0
 800a50c:	d051      	beq.n	800a5b2 <_malloc_r+0xea>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	0029      	movs	r1, r5
 800a512:	18e3      	adds	r3, r4, r3
 800a514:	0030      	movs	r0, r6
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	f000 fe2c 	bl	800b174 <_sbrk_r>
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	4283      	cmp	r3, r0
 800a520:	d147      	bne.n	800a5b2 <_malloc_r+0xea>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	0030      	movs	r0, r6
 800a526:	1aff      	subs	r7, r7, r3
 800a528:	0039      	movs	r1, r7
 800a52a:	f7ff ffab 	bl	800a484 <sbrk_aligned>
 800a52e:	3001      	adds	r0, #1
 800a530:	d03f      	beq.n	800a5b2 <_malloc_r+0xea>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	19db      	adds	r3, r3, r7
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	9b00      	ldr	r3, [sp, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d040      	beq.n	800a5c2 <_malloc_r+0xfa>
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	42a2      	cmp	r2, r4
 800a544:	d133      	bne.n	800a5ae <_malloc_r+0xe6>
 800a546:	2200      	movs	r2, #0
 800a548:	605a      	str	r2, [r3, #4]
 800a54a:	e014      	b.n	800a576 <_malloc_r+0xae>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dac5      	bge.n	800a4dc <_malloc_r+0x14>
 800a550:	230c      	movs	r3, #12
 800a552:	2500      	movs	r5, #0
 800a554:	6033      	str	r3, [r6, #0]
 800a556:	0028      	movs	r0, r5
 800a558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	1bc9      	subs	r1, r1, r7
 800a55e:	d420      	bmi.n	800a5a2 <_malloc_r+0xda>
 800a560:	290b      	cmp	r1, #11
 800a562:	d918      	bls.n	800a596 <_malloc_r+0xce>
 800a564:	19e2      	adds	r2, r4, r7
 800a566:	6027      	str	r7, [r4, #0]
 800a568:	42a3      	cmp	r3, r4
 800a56a:	d112      	bne.n	800a592 <_malloc_r+0xca>
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	6863      	ldr	r3, [r4, #4]
 800a572:	6011      	str	r1, [r2, #0]
 800a574:	6053      	str	r3, [r2, #4]
 800a576:	0030      	movs	r0, r6
 800a578:	0025      	movs	r5, r4
 800a57a:	f000 f82f 	bl	800a5dc <__malloc_unlock>
 800a57e:	2207      	movs	r2, #7
 800a580:	350b      	adds	r5, #11
 800a582:	1d23      	adds	r3, r4, #4
 800a584:	4395      	bics	r5, r2
 800a586:	1aea      	subs	r2, r5, r3
 800a588:	429d      	cmp	r5, r3
 800a58a:	d0e4      	beq.n	800a556 <_malloc_r+0x8e>
 800a58c:	1b5b      	subs	r3, r3, r5
 800a58e:	50a3      	str	r3, [r4, r2]
 800a590:	e7e1      	b.n	800a556 <_malloc_r+0x8e>
 800a592:	605a      	str	r2, [r3, #4]
 800a594:	e7ec      	b.n	800a570 <_malloc_r+0xa8>
 800a596:	6862      	ldr	r2, [r4, #4]
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d1d5      	bne.n	800a548 <_malloc_r+0x80>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	e7e9      	b.n	800a576 <_malloc_r+0xae>
 800a5a2:	0023      	movs	r3, r4
 800a5a4:	6864      	ldr	r4, [r4, #4]
 800a5a6:	e7a2      	b.n	800a4ee <_malloc_r+0x26>
 800a5a8:	002c      	movs	r4, r5
 800a5aa:	686d      	ldr	r5, [r5, #4]
 800a5ac:	e7ab      	b.n	800a506 <_malloc_r+0x3e>
 800a5ae:	0013      	movs	r3, r2
 800a5b0:	e7c4      	b.n	800a53c <_malloc_r+0x74>
 800a5b2:	230c      	movs	r3, #12
 800a5b4:	0030      	movs	r0, r6
 800a5b6:	6033      	str	r3, [r6, #0]
 800a5b8:	f000 f810 	bl	800a5dc <__malloc_unlock>
 800a5bc:	e7cb      	b.n	800a556 <_malloc_r+0x8e>
 800a5be:	6027      	str	r7, [r4, #0]
 800a5c0:	e7d9      	b.n	800a576 <_malloc_r+0xae>
 800a5c2:	605b      	str	r3, [r3, #4]
 800a5c4:	deff      	udf	#255	; 0xff
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	2000061c 	.word	0x2000061c

0800a5cc <__malloc_lock>:
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	4802      	ldr	r0, [pc, #8]	; (800a5d8 <__malloc_lock+0xc>)
 800a5d0:	f7ff f859 	bl	8009686 <__retarget_lock_acquire_recursive>
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	20000618 	.word	0x20000618

0800a5dc <__malloc_unlock>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4802      	ldr	r0, [pc, #8]	; (800a5e8 <__malloc_unlock+0xc>)
 800a5e0:	f7ff f852 	bl	8009688 <__retarget_lock_release_recursive>
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	20000618 	.word	0x20000618

0800a5ec <_Balloc>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	69c5      	ldr	r5, [r0, #28]
 800a5f0:	0006      	movs	r6, r0
 800a5f2:	000c      	movs	r4, r1
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	d10e      	bne.n	800a616 <_Balloc+0x2a>
 800a5f8:	2010      	movs	r0, #16
 800a5fa:	f7ff ff39 	bl	800a470 <malloc>
 800a5fe:	1e02      	subs	r2, r0, #0
 800a600:	61f0      	str	r0, [r6, #28]
 800a602:	d104      	bne.n	800a60e <_Balloc+0x22>
 800a604:	216b      	movs	r1, #107	; 0x6b
 800a606:	4b19      	ldr	r3, [pc, #100]	; (800a66c <_Balloc+0x80>)
 800a608:	4819      	ldr	r0, [pc, #100]	; (800a670 <_Balloc+0x84>)
 800a60a:	f000 fdcf 	bl	800b1ac <__assert_func>
 800a60e:	6045      	str	r5, [r0, #4]
 800a610:	6085      	str	r5, [r0, #8]
 800a612:	6005      	str	r5, [r0, #0]
 800a614:	60c5      	str	r5, [r0, #12]
 800a616:	69f5      	ldr	r5, [r6, #28]
 800a618:	68eb      	ldr	r3, [r5, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d013      	beq.n	800a646 <_Balloc+0x5a>
 800a61e:	69f3      	ldr	r3, [r6, #28]
 800a620:	00a2      	lsls	r2, r4, #2
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	189b      	adds	r3, r3, r2
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	2800      	cmp	r0, #0
 800a62a:	d118      	bne.n	800a65e <_Balloc+0x72>
 800a62c:	2101      	movs	r1, #1
 800a62e:	000d      	movs	r5, r1
 800a630:	40a5      	lsls	r5, r4
 800a632:	1d6a      	adds	r2, r5, #5
 800a634:	0030      	movs	r0, r6
 800a636:	0092      	lsls	r2, r2, #2
 800a638:	f000 fdd6 	bl	800b1e8 <_calloc_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d00c      	beq.n	800a65a <_Balloc+0x6e>
 800a640:	6044      	str	r4, [r0, #4]
 800a642:	6085      	str	r5, [r0, #8]
 800a644:	e00d      	b.n	800a662 <_Balloc+0x76>
 800a646:	2221      	movs	r2, #33	; 0x21
 800a648:	2104      	movs	r1, #4
 800a64a:	0030      	movs	r0, r6
 800a64c:	f000 fdcc 	bl	800b1e8 <_calloc_r>
 800a650:	69f3      	ldr	r3, [r6, #28]
 800a652:	60e8      	str	r0, [r5, #12]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e1      	bne.n	800a61e <_Balloc+0x32>
 800a65a:	2000      	movs	r0, #0
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	6802      	ldr	r2, [r0, #0]
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6103      	str	r3, [r0, #16]
 800a666:	60c3      	str	r3, [r0, #12]
 800a668:	e7f8      	b.n	800a65c <_Balloc+0x70>
 800a66a:	46c0      	nop			; (mov r8, r8)
 800a66c:	0800ba31 	.word	0x0800ba31
 800a670:	0800bab1 	.word	0x0800bab1

0800a674 <_Bfree>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	69c6      	ldr	r6, [r0, #28]
 800a678:	0005      	movs	r5, r0
 800a67a:	000c      	movs	r4, r1
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	d10e      	bne.n	800a69e <_Bfree+0x2a>
 800a680:	2010      	movs	r0, #16
 800a682:	f7ff fef5 	bl	800a470 <malloc>
 800a686:	1e02      	subs	r2, r0, #0
 800a688:	61e8      	str	r0, [r5, #28]
 800a68a:	d104      	bne.n	800a696 <_Bfree+0x22>
 800a68c:	218f      	movs	r1, #143	; 0x8f
 800a68e:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <_Bfree+0x40>)
 800a690:	4809      	ldr	r0, [pc, #36]	; (800a6b8 <_Bfree+0x44>)
 800a692:	f000 fd8b 	bl	800b1ac <__assert_func>
 800a696:	6046      	str	r6, [r0, #4]
 800a698:	6086      	str	r6, [r0, #8]
 800a69a:	6006      	str	r6, [r0, #0]
 800a69c:	60c6      	str	r6, [r0, #12]
 800a69e:	2c00      	cmp	r4, #0
 800a6a0:	d007      	beq.n	800a6b2 <_Bfree+0x3e>
 800a6a2:	69eb      	ldr	r3, [r5, #28]
 800a6a4:	6862      	ldr	r2, [r4, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	0092      	lsls	r2, r2, #2
 800a6aa:	189b      	adds	r3, r3, r2
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	6022      	str	r2, [r4, #0]
 800a6b0:	601c      	str	r4, [r3, #0]
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	0800ba31 	.word	0x0800ba31
 800a6b8:	0800bab1 	.word	0x0800bab1

0800a6bc <__multadd>:
 800a6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6be:	000e      	movs	r6, r1
 800a6c0:	9001      	str	r0, [sp, #4]
 800a6c2:	000c      	movs	r4, r1
 800a6c4:	001d      	movs	r5, r3
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	690f      	ldr	r7, [r1, #16]
 800a6ca:	3614      	adds	r6, #20
 800a6cc:	6833      	ldr	r3, [r6, #0]
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	b299      	uxth	r1, r3
 800a6d2:	4351      	muls	r1, r2
 800a6d4:	0c1b      	lsrs	r3, r3, #16
 800a6d6:	4353      	muls	r3, r2
 800a6d8:	1949      	adds	r1, r1, r5
 800a6da:	0c0d      	lsrs	r5, r1, #16
 800a6dc:	195b      	adds	r3, r3, r5
 800a6de:	0c1d      	lsrs	r5, r3, #16
 800a6e0:	b289      	uxth	r1, r1
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	185b      	adds	r3, r3, r1
 800a6e6:	c608      	stmia	r6!, {r3}
 800a6e8:	4287      	cmp	r7, r0
 800a6ea:	dcef      	bgt.n	800a6cc <__multadd+0x10>
 800a6ec:	2d00      	cmp	r5, #0
 800a6ee:	d022      	beq.n	800a736 <__multadd+0x7a>
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	42bb      	cmp	r3, r7
 800a6f4:	dc19      	bgt.n	800a72a <__multadd+0x6e>
 800a6f6:	6861      	ldr	r1, [r4, #4]
 800a6f8:	9801      	ldr	r0, [sp, #4]
 800a6fa:	3101      	adds	r1, #1
 800a6fc:	f7ff ff76 	bl	800a5ec <_Balloc>
 800a700:	1e06      	subs	r6, r0, #0
 800a702:	d105      	bne.n	800a710 <__multadd+0x54>
 800a704:	0032      	movs	r2, r6
 800a706:	21ba      	movs	r1, #186	; 0xba
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <__multadd+0x80>)
 800a70a:	480d      	ldr	r0, [pc, #52]	; (800a740 <__multadd+0x84>)
 800a70c:	f000 fd4e 	bl	800b1ac <__assert_func>
 800a710:	0021      	movs	r1, r4
 800a712:	6922      	ldr	r2, [r4, #16]
 800a714:	310c      	adds	r1, #12
 800a716:	3202      	adds	r2, #2
 800a718:	0092      	lsls	r2, r2, #2
 800a71a:	300c      	adds	r0, #12
 800a71c:	f000 fd3c 	bl	800b198 <memcpy>
 800a720:	0021      	movs	r1, r4
 800a722:	9801      	ldr	r0, [sp, #4]
 800a724:	f7ff ffa6 	bl	800a674 <_Bfree>
 800a728:	0034      	movs	r4, r6
 800a72a:	1d3b      	adds	r3, r7, #4
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	18e3      	adds	r3, r4, r3
 800a730:	605d      	str	r5, [r3, #4]
 800a732:	1c7b      	adds	r3, r7, #1
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	0020      	movs	r0, r4
 800a738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	0800baa0 	.word	0x0800baa0
 800a740:	0800bab1 	.word	0x0800bab1

0800a744 <__hi0bits>:
 800a744:	0003      	movs	r3, r0
 800a746:	0c02      	lsrs	r2, r0, #16
 800a748:	2000      	movs	r0, #0
 800a74a:	4282      	cmp	r2, r0
 800a74c:	d101      	bne.n	800a752 <__hi0bits+0xe>
 800a74e:	041b      	lsls	r3, r3, #16
 800a750:	3010      	adds	r0, #16
 800a752:	0e1a      	lsrs	r2, r3, #24
 800a754:	d101      	bne.n	800a75a <__hi0bits+0x16>
 800a756:	3008      	adds	r0, #8
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	0f1a      	lsrs	r2, r3, #28
 800a75c:	d101      	bne.n	800a762 <__hi0bits+0x1e>
 800a75e:	3004      	adds	r0, #4
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	0f9a      	lsrs	r2, r3, #30
 800a764:	d101      	bne.n	800a76a <__hi0bits+0x26>
 800a766:	3002      	adds	r0, #2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db03      	blt.n	800a776 <__hi0bits+0x32>
 800a76e:	3001      	adds	r0, #1
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	d400      	bmi.n	800a776 <__hi0bits+0x32>
 800a774:	2020      	movs	r0, #32
 800a776:	4770      	bx	lr

0800a778 <__lo0bits>:
 800a778:	6803      	ldr	r3, [r0, #0]
 800a77a:	0001      	movs	r1, r0
 800a77c:	2207      	movs	r2, #7
 800a77e:	0018      	movs	r0, r3
 800a780:	4010      	ands	r0, r2
 800a782:	4213      	tst	r3, r2
 800a784:	d00d      	beq.n	800a7a2 <__lo0bits+0x2a>
 800a786:	3a06      	subs	r2, #6
 800a788:	2000      	movs	r0, #0
 800a78a:	4213      	tst	r3, r2
 800a78c:	d105      	bne.n	800a79a <__lo0bits+0x22>
 800a78e:	3002      	adds	r0, #2
 800a790:	4203      	tst	r3, r0
 800a792:	d003      	beq.n	800a79c <__lo0bits+0x24>
 800a794:	40d3      	lsrs	r3, r2
 800a796:	0010      	movs	r0, r2
 800a798:	600b      	str	r3, [r1, #0]
 800a79a:	4770      	bx	lr
 800a79c:	089b      	lsrs	r3, r3, #2
 800a79e:	600b      	str	r3, [r1, #0]
 800a7a0:	e7fb      	b.n	800a79a <__lo0bits+0x22>
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	d101      	bne.n	800a7ac <__lo0bits+0x34>
 800a7a8:	2010      	movs	r0, #16
 800a7aa:	0c1b      	lsrs	r3, r3, #16
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	d101      	bne.n	800a7b6 <__lo0bits+0x3e>
 800a7b2:	3008      	adds	r0, #8
 800a7b4:	0a1b      	lsrs	r3, r3, #8
 800a7b6:	071a      	lsls	r2, r3, #28
 800a7b8:	d101      	bne.n	800a7be <__lo0bits+0x46>
 800a7ba:	3004      	adds	r0, #4
 800a7bc:	091b      	lsrs	r3, r3, #4
 800a7be:	079a      	lsls	r2, r3, #30
 800a7c0:	d101      	bne.n	800a7c6 <__lo0bits+0x4e>
 800a7c2:	3002      	adds	r0, #2
 800a7c4:	089b      	lsrs	r3, r3, #2
 800a7c6:	07da      	lsls	r2, r3, #31
 800a7c8:	d4e9      	bmi.n	800a79e <__lo0bits+0x26>
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	d1e6      	bne.n	800a79e <__lo0bits+0x26>
 800a7d0:	2020      	movs	r0, #32
 800a7d2:	e7e2      	b.n	800a79a <__lo0bits+0x22>

0800a7d4 <__i2b>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	000c      	movs	r4, r1
 800a7d8:	2101      	movs	r1, #1
 800a7da:	f7ff ff07 	bl	800a5ec <_Balloc>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d107      	bne.n	800a7f2 <__i2b+0x1e>
 800a7e2:	2146      	movs	r1, #70	; 0x46
 800a7e4:	4c05      	ldr	r4, [pc, #20]	; (800a7fc <__i2b+0x28>)
 800a7e6:	0002      	movs	r2, r0
 800a7e8:	4b05      	ldr	r3, [pc, #20]	; (800a800 <__i2b+0x2c>)
 800a7ea:	0020      	movs	r0, r4
 800a7ec:	31ff      	adds	r1, #255	; 0xff
 800a7ee:	f000 fcdd 	bl	800b1ac <__assert_func>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	6144      	str	r4, [r0, #20]
 800a7f6:	6103      	str	r3, [r0, #16]
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	0800bab1 	.word	0x0800bab1
 800a800:	0800baa0 	.word	0x0800baa0

0800a804 <__multiply>:
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a806:	0015      	movs	r5, r2
 800a808:	690a      	ldr	r2, [r1, #16]
 800a80a:	692b      	ldr	r3, [r5, #16]
 800a80c:	000c      	movs	r4, r1
 800a80e:	b08b      	sub	sp, #44	; 0x2c
 800a810:	429a      	cmp	r2, r3
 800a812:	da01      	bge.n	800a818 <__multiply+0x14>
 800a814:	002c      	movs	r4, r5
 800a816:	000d      	movs	r5, r1
 800a818:	6927      	ldr	r7, [r4, #16]
 800a81a:	692e      	ldr	r6, [r5, #16]
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	19bb      	adds	r3, r7, r6
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	68a3      	ldr	r3, [r4, #8]
 800a824:	19ba      	adds	r2, r7, r6
 800a826:	4293      	cmp	r3, r2
 800a828:	da00      	bge.n	800a82c <__multiply+0x28>
 800a82a:	3101      	adds	r1, #1
 800a82c:	f7ff fede 	bl	800a5ec <_Balloc>
 800a830:	9002      	str	r0, [sp, #8]
 800a832:	2800      	cmp	r0, #0
 800a834:	d106      	bne.n	800a844 <__multiply+0x40>
 800a836:	21b1      	movs	r1, #177	; 0xb1
 800a838:	4b48      	ldr	r3, [pc, #288]	; (800a95c <__multiply+0x158>)
 800a83a:	4849      	ldr	r0, [pc, #292]	; (800a960 <__multiply+0x15c>)
 800a83c:	9a02      	ldr	r2, [sp, #8]
 800a83e:	0049      	lsls	r1, r1, #1
 800a840:	f000 fcb4 	bl	800b1ac <__assert_func>
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	2200      	movs	r2, #0
 800a848:	3314      	adds	r3, #20
 800a84a:	469c      	mov	ip, r3
 800a84c:	19bb      	adds	r3, r7, r6
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4463      	add	r3, ip
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	4663      	mov	r3, ip
 800a856:	9904      	ldr	r1, [sp, #16]
 800a858:	428b      	cmp	r3, r1
 800a85a:	d32a      	bcc.n	800a8b2 <__multiply+0xae>
 800a85c:	0023      	movs	r3, r4
 800a85e:	00bf      	lsls	r7, r7, #2
 800a860:	3314      	adds	r3, #20
 800a862:	3514      	adds	r5, #20
 800a864:	9308      	str	r3, [sp, #32]
 800a866:	00b6      	lsls	r6, r6, #2
 800a868:	19db      	adds	r3, r3, r7
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	19ab      	adds	r3, r5, r6
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	2304      	movs	r3, #4
 800a872:	9306      	str	r3, [sp, #24]
 800a874:	0023      	movs	r3, r4
 800a876:	9a05      	ldr	r2, [sp, #20]
 800a878:	3315      	adds	r3, #21
 800a87a:	9501      	str	r5, [sp, #4]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d305      	bcc.n	800a88c <__multiply+0x88>
 800a880:	1b13      	subs	r3, r2, r4
 800a882:	3b15      	subs	r3, #21
 800a884:	089b      	lsrs	r3, r3, #2
 800a886:	3301      	adds	r3, #1
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	9306      	str	r3, [sp, #24]
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a890:	4293      	cmp	r3, r2
 800a892:	d310      	bcc.n	800a8b6 <__multiply+0xb2>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd05      	ble.n	800a8a6 <__multiply+0xa2>
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d056      	beq.n	800a954 <__multiply+0x150>
 800a8a6:	9b02      	ldr	r3, [sp, #8]
 800a8a8:	9a03      	ldr	r2, [sp, #12]
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	611a      	str	r2, [r3, #16]
 800a8ae:	b00b      	add	sp, #44	; 0x2c
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	c304      	stmia	r3!, {r2}
 800a8b4:	e7cf      	b.n	800a856 <__multiply+0x52>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	b280      	uxth	r0, r0
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d01e      	beq.n	800a8fe <__multiply+0xfa>
 800a8c0:	4667      	mov	r7, ip
 800a8c2:	2500      	movs	r5, #0
 800a8c4:	9e08      	ldr	r6, [sp, #32]
 800a8c6:	ce02      	ldmia	r6!, {r1}
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	9307      	str	r3, [sp, #28]
 800a8cc:	b28b      	uxth	r3, r1
 800a8ce:	4343      	muls	r3, r0
 800a8d0:	001a      	movs	r2, r3
 800a8d2:	466b      	mov	r3, sp
 800a8d4:	8b9b      	ldrh	r3, [r3, #28]
 800a8d6:	18d3      	adds	r3, r2, r3
 800a8d8:	195b      	adds	r3, r3, r5
 800a8da:	0c0d      	lsrs	r5, r1, #16
 800a8dc:	4345      	muls	r5, r0
 800a8de:	9a07      	ldr	r2, [sp, #28]
 800a8e0:	0c11      	lsrs	r1, r2, #16
 800a8e2:	1869      	adds	r1, r5, r1
 800a8e4:	0c1a      	lsrs	r2, r3, #16
 800a8e6:	188a      	adds	r2, r1, r2
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	0c15      	lsrs	r5, r2, #16
 800a8ec:	0412      	lsls	r2, r2, #16
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	c704      	stmia	r7!, {r2}
 800a8f4:	42b3      	cmp	r3, r6
 800a8f6:	d8e6      	bhi.n	800a8c6 <__multiply+0xc2>
 800a8f8:	4663      	mov	r3, ip
 800a8fa:	9a06      	ldr	r2, [sp, #24]
 800a8fc:	509d      	str	r5, [r3, r2]
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	0c00      	lsrs	r0, r0, #16
 800a904:	d020      	beq.n	800a948 <__multiply+0x144>
 800a906:	4663      	mov	r3, ip
 800a908:	0025      	movs	r5, r4
 800a90a:	4661      	mov	r1, ip
 800a90c:	2700      	movs	r7, #0
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3514      	adds	r5, #20
 800a912:	682a      	ldr	r2, [r5, #0]
 800a914:	680e      	ldr	r6, [r1, #0]
 800a916:	b292      	uxth	r2, r2
 800a918:	4342      	muls	r2, r0
 800a91a:	0c36      	lsrs	r6, r6, #16
 800a91c:	1992      	adds	r2, r2, r6
 800a91e:	19d2      	adds	r2, r2, r7
 800a920:	0416      	lsls	r6, r2, #16
 800a922:	b29b      	uxth	r3, r3
 800a924:	431e      	orrs	r6, r3
 800a926:	600e      	str	r6, [r1, #0]
 800a928:	cd40      	ldmia	r5!, {r6}
 800a92a:	684b      	ldr	r3, [r1, #4]
 800a92c:	0c36      	lsrs	r6, r6, #16
 800a92e:	4346      	muls	r6, r0
 800a930:	b29b      	uxth	r3, r3
 800a932:	0c12      	lsrs	r2, r2, #16
 800a934:	18f3      	adds	r3, r6, r3
 800a936:	189b      	adds	r3, r3, r2
 800a938:	9a05      	ldr	r2, [sp, #20]
 800a93a:	0c1f      	lsrs	r7, r3, #16
 800a93c:	3104      	adds	r1, #4
 800a93e:	42aa      	cmp	r2, r5
 800a940:	d8e7      	bhi.n	800a912 <__multiply+0x10e>
 800a942:	4662      	mov	r2, ip
 800a944:	9906      	ldr	r1, [sp, #24]
 800a946:	5053      	str	r3, [r2, r1]
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	2304      	movs	r3, #4
 800a950:	449c      	add	ip, r3
 800a952:	e79b      	b.n	800a88c <__multiply+0x88>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	3b01      	subs	r3, #1
 800a958:	9303      	str	r3, [sp, #12]
 800a95a:	e79b      	b.n	800a894 <__multiply+0x90>
 800a95c:	0800baa0 	.word	0x0800baa0
 800a960:	0800bab1 	.word	0x0800bab1

0800a964 <__pow5mult>:
 800a964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a966:	2303      	movs	r3, #3
 800a968:	0015      	movs	r5, r2
 800a96a:	0007      	movs	r7, r0
 800a96c:	000e      	movs	r6, r1
 800a96e:	401a      	ands	r2, r3
 800a970:	421d      	tst	r5, r3
 800a972:	d008      	beq.n	800a986 <__pow5mult+0x22>
 800a974:	4925      	ldr	r1, [pc, #148]	; (800aa0c <__pow5mult+0xa8>)
 800a976:	3a01      	subs	r2, #1
 800a978:	0092      	lsls	r2, r2, #2
 800a97a:	5852      	ldr	r2, [r2, r1]
 800a97c:	2300      	movs	r3, #0
 800a97e:	0031      	movs	r1, r6
 800a980:	f7ff fe9c 	bl	800a6bc <__multadd>
 800a984:	0006      	movs	r6, r0
 800a986:	10ad      	asrs	r5, r5, #2
 800a988:	d03d      	beq.n	800aa06 <__pow5mult+0xa2>
 800a98a:	69fc      	ldr	r4, [r7, #28]
 800a98c:	2c00      	cmp	r4, #0
 800a98e:	d10f      	bne.n	800a9b0 <__pow5mult+0x4c>
 800a990:	2010      	movs	r0, #16
 800a992:	f7ff fd6d 	bl	800a470 <malloc>
 800a996:	1e02      	subs	r2, r0, #0
 800a998:	61f8      	str	r0, [r7, #28]
 800a99a:	d105      	bne.n	800a9a8 <__pow5mult+0x44>
 800a99c:	21b4      	movs	r1, #180	; 0xb4
 800a99e:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <__pow5mult+0xac>)
 800a9a0:	481c      	ldr	r0, [pc, #112]	; (800aa14 <__pow5mult+0xb0>)
 800a9a2:	31ff      	adds	r1, #255	; 0xff
 800a9a4:	f000 fc02 	bl	800b1ac <__assert_func>
 800a9a8:	6044      	str	r4, [r0, #4]
 800a9aa:	6084      	str	r4, [r0, #8]
 800a9ac:	6004      	str	r4, [r0, #0]
 800a9ae:	60c4      	str	r4, [r0, #12]
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	689c      	ldr	r4, [r3, #8]
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	d108      	bne.n	800a9cc <__pow5mult+0x68>
 800a9ba:	0038      	movs	r0, r7
 800a9bc:	4916      	ldr	r1, [pc, #88]	; (800aa18 <__pow5mult+0xb4>)
 800a9be:	f7ff ff09 	bl	800a7d4 <__i2b>
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	0004      	movs	r4, r0
 800a9c6:	6098      	str	r0, [r3, #8]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	421d      	tst	r5, r3
 800a9d0:	d00a      	beq.n	800a9e8 <__pow5mult+0x84>
 800a9d2:	0031      	movs	r1, r6
 800a9d4:	0022      	movs	r2, r4
 800a9d6:	0038      	movs	r0, r7
 800a9d8:	f7ff ff14 	bl	800a804 <__multiply>
 800a9dc:	0031      	movs	r1, r6
 800a9de:	9001      	str	r0, [sp, #4]
 800a9e0:	0038      	movs	r0, r7
 800a9e2:	f7ff fe47 	bl	800a674 <_Bfree>
 800a9e6:	9e01      	ldr	r6, [sp, #4]
 800a9e8:	106d      	asrs	r5, r5, #1
 800a9ea:	d00c      	beq.n	800aa06 <__pow5mult+0xa2>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d107      	bne.n	800aa02 <__pow5mult+0x9e>
 800a9f2:	0022      	movs	r2, r4
 800a9f4:	0021      	movs	r1, r4
 800a9f6:	0038      	movs	r0, r7
 800a9f8:	f7ff ff04 	bl	800a804 <__multiply>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	6020      	str	r0, [r4, #0]
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	0004      	movs	r4, r0
 800aa04:	e7e2      	b.n	800a9cc <__pow5mult+0x68>
 800aa06:	0030      	movs	r0, r6
 800aa08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	0800bc00 	.word	0x0800bc00
 800aa10:	0800ba31 	.word	0x0800ba31
 800aa14:	0800bab1 	.word	0x0800bab1
 800aa18:	00000271 	.word	0x00000271

0800aa1c <__lshift>:
 800aa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa1e:	000c      	movs	r4, r1
 800aa20:	0017      	movs	r7, r2
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	1155      	asrs	r5, r2, #5
 800aa26:	b087      	sub	sp, #28
 800aa28:	18eb      	adds	r3, r5, r3
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	6849      	ldr	r1, [r1, #4]
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	9004      	str	r0, [sp, #16]
 800aa36:	9a01      	ldr	r2, [sp, #4]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	db10      	blt.n	800aa5e <__lshift+0x42>
 800aa3c:	9804      	ldr	r0, [sp, #16]
 800aa3e:	f7ff fdd5 	bl	800a5ec <_Balloc>
 800aa42:	2300      	movs	r3, #0
 800aa44:	0002      	movs	r2, r0
 800aa46:	0006      	movs	r6, r0
 800aa48:	0019      	movs	r1, r3
 800aa4a:	3214      	adds	r2, #20
 800aa4c:	4298      	cmp	r0, r3
 800aa4e:	d10c      	bne.n	800aa6a <__lshift+0x4e>
 800aa50:	31df      	adds	r1, #223	; 0xdf
 800aa52:	0032      	movs	r2, r6
 800aa54:	4b26      	ldr	r3, [pc, #152]	; (800aaf0 <__lshift+0xd4>)
 800aa56:	4827      	ldr	r0, [pc, #156]	; (800aaf4 <__lshift+0xd8>)
 800aa58:	31ff      	adds	r1, #255	; 0xff
 800aa5a:	f000 fba7 	bl	800b1ac <__assert_func>
 800aa5e:	3101      	adds	r1, #1
 800aa60:	005b      	lsls	r3, r3, #1
 800aa62:	e7e8      	b.n	800aa36 <__lshift+0x1a>
 800aa64:	0098      	lsls	r0, r3, #2
 800aa66:	5011      	str	r1, [r2, r0]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	42ab      	cmp	r3, r5
 800aa6c:	dbfa      	blt.n	800aa64 <__lshift+0x48>
 800aa6e:	43eb      	mvns	r3, r5
 800aa70:	17db      	asrs	r3, r3, #31
 800aa72:	401d      	ands	r5, r3
 800aa74:	211f      	movs	r1, #31
 800aa76:	0023      	movs	r3, r4
 800aa78:	0038      	movs	r0, r7
 800aa7a:	00ad      	lsls	r5, r5, #2
 800aa7c:	1955      	adds	r5, r2, r5
 800aa7e:	6922      	ldr	r2, [r4, #16]
 800aa80:	3314      	adds	r3, #20
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	4008      	ands	r0, r1
 800aa86:	4684      	mov	ip, r0
 800aa88:	189a      	adds	r2, r3, r2
 800aa8a:	420f      	tst	r7, r1
 800aa8c:	d02a      	beq.n	800aae4 <__lshift+0xc8>
 800aa8e:	3101      	adds	r1, #1
 800aa90:	1a09      	subs	r1, r1, r0
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	2100      	movs	r1, #0
 800aa96:	9503      	str	r5, [sp, #12]
 800aa98:	4667      	mov	r7, ip
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	40b8      	lsls	r0, r7
 800aa9e:	4308      	orrs	r0, r1
 800aaa0:	9903      	ldr	r1, [sp, #12]
 800aaa2:	c101      	stmia	r1!, {r0}
 800aaa4:	9103      	str	r1, [sp, #12]
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	cb02      	ldmia	r3!, {r1}
 800aaaa:	40c1      	lsrs	r1, r0
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d8f3      	bhi.n	800aa98 <__lshift+0x7c>
 800aab0:	0020      	movs	r0, r4
 800aab2:	3015      	adds	r0, #21
 800aab4:	2304      	movs	r3, #4
 800aab6:	4282      	cmp	r2, r0
 800aab8:	d304      	bcc.n	800aac4 <__lshift+0xa8>
 800aaba:	1b13      	subs	r3, r2, r4
 800aabc:	3b15      	subs	r3, #21
 800aabe:	089b      	lsrs	r3, r3, #2
 800aac0:	3301      	adds	r3, #1
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	50e9      	str	r1, [r5, r3]
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d002      	beq.n	800aad0 <__lshift+0xb4>
 800aaca:	9b02      	ldr	r3, [sp, #8]
 800aacc:	3302      	adds	r3, #2
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	9804      	ldr	r0, [sp, #16]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	0021      	movs	r1, r4
 800aad8:	6133      	str	r3, [r6, #16]
 800aada:	f7ff fdcb 	bl	800a674 <_Bfree>
 800aade:	0030      	movs	r0, r6
 800aae0:	b007      	add	sp, #28
 800aae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae4:	cb02      	ldmia	r3!, {r1}
 800aae6:	c502      	stmia	r5!, {r1}
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d8fb      	bhi.n	800aae4 <__lshift+0xc8>
 800aaec:	e7f0      	b.n	800aad0 <__lshift+0xb4>
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	0800baa0 	.word	0x0800baa0
 800aaf4:	0800bab1 	.word	0x0800bab1

0800aaf8 <__mcmp>:
 800aaf8:	b530      	push	{r4, r5, lr}
 800aafa:	690b      	ldr	r3, [r1, #16]
 800aafc:	6904      	ldr	r4, [r0, #16]
 800aafe:	0002      	movs	r2, r0
 800ab00:	1ae0      	subs	r0, r4, r3
 800ab02:	429c      	cmp	r4, r3
 800ab04:	d10e      	bne.n	800ab24 <__mcmp+0x2c>
 800ab06:	3214      	adds	r2, #20
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	3114      	adds	r1, #20
 800ab0c:	0014      	movs	r4, r2
 800ab0e:	18c9      	adds	r1, r1, r3
 800ab10:	18d2      	adds	r2, r2, r3
 800ab12:	3a04      	subs	r2, #4
 800ab14:	3904      	subs	r1, #4
 800ab16:	6815      	ldr	r5, [r2, #0]
 800ab18:	680b      	ldr	r3, [r1, #0]
 800ab1a:	429d      	cmp	r5, r3
 800ab1c:	d003      	beq.n	800ab26 <__mcmp+0x2e>
 800ab1e:	2001      	movs	r0, #1
 800ab20:	429d      	cmp	r5, r3
 800ab22:	d303      	bcc.n	800ab2c <__mcmp+0x34>
 800ab24:	bd30      	pop	{r4, r5, pc}
 800ab26:	4294      	cmp	r4, r2
 800ab28:	d3f3      	bcc.n	800ab12 <__mcmp+0x1a>
 800ab2a:	e7fb      	b.n	800ab24 <__mcmp+0x2c>
 800ab2c:	4240      	negs	r0, r0
 800ab2e:	e7f9      	b.n	800ab24 <__mcmp+0x2c>

0800ab30 <__mdiff>:
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	000e      	movs	r6, r1
 800ab34:	0007      	movs	r7, r0
 800ab36:	0011      	movs	r1, r2
 800ab38:	0030      	movs	r0, r6
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	0014      	movs	r4, r2
 800ab3e:	f7ff ffdb 	bl	800aaf8 <__mcmp>
 800ab42:	1e05      	subs	r5, r0, #0
 800ab44:	d110      	bne.n	800ab68 <__mdiff+0x38>
 800ab46:	0001      	movs	r1, r0
 800ab48:	0038      	movs	r0, r7
 800ab4a:	f7ff fd4f 	bl	800a5ec <_Balloc>
 800ab4e:	1e02      	subs	r2, r0, #0
 800ab50:	d104      	bne.n	800ab5c <__mdiff+0x2c>
 800ab52:	4b3f      	ldr	r3, [pc, #252]	; (800ac50 <__mdiff+0x120>)
 800ab54:	483f      	ldr	r0, [pc, #252]	; (800ac54 <__mdiff+0x124>)
 800ab56:	4940      	ldr	r1, [pc, #256]	; (800ac58 <__mdiff+0x128>)
 800ab58:	f000 fb28 	bl	800b1ac <__assert_func>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	6145      	str	r5, [r0, #20]
 800ab60:	6103      	str	r3, [r0, #16]
 800ab62:	0010      	movs	r0, r2
 800ab64:	b007      	add	sp, #28
 800ab66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab68:	2301      	movs	r3, #1
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	db04      	blt.n	800ab7a <__mdiff+0x4a>
 800ab70:	0023      	movs	r3, r4
 800ab72:	0034      	movs	r4, r6
 800ab74:	001e      	movs	r6, r3
 800ab76:	2300      	movs	r3, #0
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	0038      	movs	r0, r7
 800ab7c:	6861      	ldr	r1, [r4, #4]
 800ab7e:	f7ff fd35 	bl	800a5ec <_Balloc>
 800ab82:	1e02      	subs	r2, r0, #0
 800ab84:	d103      	bne.n	800ab8e <__mdiff+0x5e>
 800ab86:	4b32      	ldr	r3, [pc, #200]	; (800ac50 <__mdiff+0x120>)
 800ab88:	4832      	ldr	r0, [pc, #200]	; (800ac54 <__mdiff+0x124>)
 800ab8a:	4934      	ldr	r1, [pc, #208]	; (800ac5c <__mdiff+0x12c>)
 800ab8c:	e7e4      	b.n	800ab58 <__mdiff+0x28>
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	2700      	movs	r7, #0
 800ab92:	60c3      	str	r3, [r0, #12]
 800ab94:	6920      	ldr	r0, [r4, #16]
 800ab96:	3414      	adds	r4, #20
 800ab98:	0083      	lsls	r3, r0, #2
 800ab9a:	18e3      	adds	r3, r4, r3
 800ab9c:	0021      	movs	r1, r4
 800ab9e:	9401      	str	r4, [sp, #4]
 800aba0:	0034      	movs	r4, r6
 800aba2:	9302      	str	r3, [sp, #8]
 800aba4:	6933      	ldr	r3, [r6, #16]
 800aba6:	3414      	adds	r4, #20
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	18e3      	adds	r3, r4, r3
 800abac:	9303      	str	r3, [sp, #12]
 800abae:	0013      	movs	r3, r2
 800abb0:	3314      	adds	r3, #20
 800abb2:	469c      	mov	ip, r3
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	9104      	str	r1, [sp, #16]
 800abb8:	9b04      	ldr	r3, [sp, #16]
 800abba:	cc02      	ldmia	r4!, {r1}
 800abbc:	cb20      	ldmia	r3!, {r5}
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	b2ab      	uxth	r3, r5
 800abc2:	19df      	adds	r7, r3, r7
 800abc4:	b28b      	uxth	r3, r1
 800abc6:	1afb      	subs	r3, r7, r3
 800abc8:	0c09      	lsrs	r1, r1, #16
 800abca:	0c2d      	lsrs	r5, r5, #16
 800abcc:	1a6d      	subs	r5, r5, r1
 800abce:	1419      	asrs	r1, r3, #16
 800abd0:	1869      	adds	r1, r5, r1
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	140f      	asrs	r7, r1, #16
 800abd6:	0409      	lsls	r1, r1, #16
 800abd8:	4319      	orrs	r1, r3
 800abda:	4663      	mov	r3, ip
 800abdc:	c302      	stmia	r3!, {r1}
 800abde:	469c      	mov	ip, r3
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	d8e8      	bhi.n	800abb8 <__mdiff+0x88>
 800abe6:	0031      	movs	r1, r6
 800abe8:	9c03      	ldr	r4, [sp, #12]
 800abea:	3115      	adds	r1, #21
 800abec:	2304      	movs	r3, #4
 800abee:	428c      	cmp	r4, r1
 800abf0:	d304      	bcc.n	800abfc <__mdiff+0xcc>
 800abf2:	1ba3      	subs	r3, r4, r6
 800abf4:	3b15      	subs	r3, #21
 800abf6:	089b      	lsrs	r3, r3, #2
 800abf8:	3301      	adds	r3, #1
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	9901      	ldr	r1, [sp, #4]
 800abfe:	18cd      	adds	r5, r1, r3
 800ac00:	9905      	ldr	r1, [sp, #20]
 800ac02:	002e      	movs	r6, r5
 800ac04:	18cb      	adds	r3, r1, r3
 800ac06:	469c      	mov	ip, r3
 800ac08:	9902      	ldr	r1, [sp, #8]
 800ac0a:	428e      	cmp	r6, r1
 800ac0c:	d310      	bcc.n	800ac30 <__mdiff+0x100>
 800ac0e:	9e02      	ldr	r6, [sp, #8]
 800ac10:	1ee9      	subs	r1, r5, #3
 800ac12:	2400      	movs	r4, #0
 800ac14:	428e      	cmp	r6, r1
 800ac16:	d304      	bcc.n	800ac22 <__mdiff+0xf2>
 800ac18:	0031      	movs	r1, r6
 800ac1a:	3103      	adds	r1, #3
 800ac1c:	1b49      	subs	r1, r1, r5
 800ac1e:	0889      	lsrs	r1, r1, #2
 800ac20:	008c      	lsls	r4, r1, #2
 800ac22:	191b      	adds	r3, r3, r4
 800ac24:	3b04      	subs	r3, #4
 800ac26:	6819      	ldr	r1, [r3, #0]
 800ac28:	2900      	cmp	r1, #0
 800ac2a:	d00f      	beq.n	800ac4c <__mdiff+0x11c>
 800ac2c:	6110      	str	r0, [r2, #16]
 800ac2e:	e798      	b.n	800ab62 <__mdiff+0x32>
 800ac30:	ce02      	ldmia	r6!, {r1}
 800ac32:	b28c      	uxth	r4, r1
 800ac34:	19e4      	adds	r4, r4, r7
 800ac36:	0c0f      	lsrs	r7, r1, #16
 800ac38:	1421      	asrs	r1, r4, #16
 800ac3a:	1879      	adds	r1, r7, r1
 800ac3c:	b2a4      	uxth	r4, r4
 800ac3e:	140f      	asrs	r7, r1, #16
 800ac40:	0409      	lsls	r1, r1, #16
 800ac42:	4321      	orrs	r1, r4
 800ac44:	4664      	mov	r4, ip
 800ac46:	c402      	stmia	r4!, {r1}
 800ac48:	46a4      	mov	ip, r4
 800ac4a:	e7dd      	b.n	800ac08 <__mdiff+0xd8>
 800ac4c:	3801      	subs	r0, #1
 800ac4e:	e7e9      	b.n	800ac24 <__mdiff+0xf4>
 800ac50:	0800baa0 	.word	0x0800baa0
 800ac54:	0800bab1 	.word	0x0800bab1
 800ac58:	00000237 	.word	0x00000237
 800ac5c:	00000245 	.word	0x00000245

0800ac60 <__d2b>:
 800ac60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac62:	2101      	movs	r1, #1
 800ac64:	0014      	movs	r4, r2
 800ac66:	001d      	movs	r5, r3
 800ac68:	9f08      	ldr	r7, [sp, #32]
 800ac6a:	f7ff fcbf 	bl	800a5ec <_Balloc>
 800ac6e:	1e06      	subs	r6, r0, #0
 800ac70:	d105      	bne.n	800ac7e <__d2b+0x1e>
 800ac72:	0032      	movs	r2, r6
 800ac74:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <__d2b+0xa8>)
 800ac76:	4825      	ldr	r0, [pc, #148]	; (800ad0c <__d2b+0xac>)
 800ac78:	4925      	ldr	r1, [pc, #148]	; (800ad10 <__d2b+0xb0>)
 800ac7a:	f000 fa97 	bl	800b1ac <__assert_func>
 800ac7e:	032b      	lsls	r3, r5, #12
 800ac80:	006d      	lsls	r5, r5, #1
 800ac82:	0b1b      	lsrs	r3, r3, #12
 800ac84:	0d6d      	lsrs	r5, r5, #21
 800ac86:	d125      	bne.n	800acd4 <__d2b+0x74>
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d028      	beq.n	800ace0 <__d2b+0x80>
 800ac8e:	4668      	mov	r0, sp
 800ac90:	9400      	str	r4, [sp, #0]
 800ac92:	f7ff fd71 	bl	800a778 <__lo0bits>
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d01e      	beq.n	800acdc <__d2b+0x7c>
 800ac9e:	2220      	movs	r2, #32
 800aca0:	001c      	movs	r4, r3
 800aca2:	1a12      	subs	r2, r2, r0
 800aca4:	4094      	lsls	r4, r2
 800aca6:	0022      	movs	r2, r4
 800aca8:	40c3      	lsrs	r3, r0
 800acaa:	430a      	orrs	r2, r1
 800acac:	6172      	str	r2, [r6, #20]
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	9c01      	ldr	r4, [sp, #4]
 800acb2:	61b4      	str	r4, [r6, #24]
 800acb4:	1e63      	subs	r3, r4, #1
 800acb6:	419c      	sbcs	r4, r3
 800acb8:	3401      	adds	r4, #1
 800acba:	6134      	str	r4, [r6, #16]
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	d017      	beq.n	800acf0 <__d2b+0x90>
 800acc0:	2435      	movs	r4, #53	; 0x35
 800acc2:	4b14      	ldr	r3, [pc, #80]	; (800ad14 <__d2b+0xb4>)
 800acc4:	18ed      	adds	r5, r5, r3
 800acc6:	182d      	adds	r5, r5, r0
 800acc8:	603d      	str	r5, [r7, #0]
 800acca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800accc:	1a24      	subs	r4, r4, r0
 800acce:	601c      	str	r4, [r3, #0]
 800acd0:	0030      	movs	r0, r6
 800acd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acd4:	2280      	movs	r2, #128	; 0x80
 800acd6:	0352      	lsls	r2, r2, #13
 800acd8:	4313      	orrs	r3, r2
 800acda:	e7d5      	b.n	800ac88 <__d2b+0x28>
 800acdc:	6171      	str	r1, [r6, #20]
 800acde:	e7e7      	b.n	800acb0 <__d2b+0x50>
 800ace0:	a801      	add	r0, sp, #4
 800ace2:	f7ff fd49 	bl	800a778 <__lo0bits>
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	2401      	movs	r4, #1
 800acea:	6173      	str	r3, [r6, #20]
 800acec:	3020      	adds	r0, #32
 800acee:	e7e4      	b.n	800acba <__d2b+0x5a>
 800acf0:	4b09      	ldr	r3, [pc, #36]	; (800ad18 <__d2b+0xb8>)
 800acf2:	18c0      	adds	r0, r0, r3
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <__d2b+0xbc>)
 800acf6:	6038      	str	r0, [r7, #0]
 800acf8:	18e3      	adds	r3, r4, r3
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	18f3      	adds	r3, r6, r3
 800acfe:	6958      	ldr	r0, [r3, #20]
 800ad00:	f7ff fd20 	bl	800a744 <__hi0bits>
 800ad04:	0164      	lsls	r4, r4, #5
 800ad06:	e7e0      	b.n	800acca <__d2b+0x6a>
 800ad08:	0800baa0 	.word	0x0800baa0
 800ad0c:	0800bab1 	.word	0x0800bab1
 800ad10:	0000030f 	.word	0x0000030f
 800ad14:	fffffbcd 	.word	0xfffffbcd
 800ad18:	fffffbce 	.word	0xfffffbce
 800ad1c:	3fffffff 	.word	0x3fffffff

0800ad20 <__ssputs_r>:
 800ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad22:	b085      	sub	sp, #20
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	9203      	str	r2, [sp, #12]
 800ad28:	688e      	ldr	r6, [r1, #8]
 800ad2a:	9a01      	ldr	r2, [sp, #4]
 800ad2c:	0007      	movs	r7, r0
 800ad2e:	000c      	movs	r4, r1
 800ad30:	680b      	ldr	r3, [r1, #0]
 800ad32:	4296      	cmp	r6, r2
 800ad34:	d831      	bhi.n	800ad9a <__ssputs_r+0x7a>
 800ad36:	898a      	ldrh	r2, [r1, #12]
 800ad38:	2190      	movs	r1, #144	; 0x90
 800ad3a:	00c9      	lsls	r1, r1, #3
 800ad3c:	420a      	tst	r2, r1
 800ad3e:	d029      	beq.n	800ad94 <__ssputs_r+0x74>
 800ad40:	2003      	movs	r0, #3
 800ad42:	6921      	ldr	r1, [r4, #16]
 800ad44:	1a5b      	subs	r3, r3, r1
 800ad46:	9302      	str	r3, [sp, #8]
 800ad48:	6963      	ldr	r3, [r4, #20]
 800ad4a:	4343      	muls	r3, r0
 800ad4c:	0fdd      	lsrs	r5, r3, #31
 800ad4e:	18ed      	adds	r5, r5, r3
 800ad50:	9b01      	ldr	r3, [sp, #4]
 800ad52:	9802      	ldr	r0, [sp, #8]
 800ad54:	3301      	adds	r3, #1
 800ad56:	181b      	adds	r3, r3, r0
 800ad58:	106d      	asrs	r5, r5, #1
 800ad5a:	42ab      	cmp	r3, r5
 800ad5c:	d900      	bls.n	800ad60 <__ssputs_r+0x40>
 800ad5e:	001d      	movs	r5, r3
 800ad60:	0552      	lsls	r2, r2, #21
 800ad62:	d529      	bpl.n	800adb8 <__ssputs_r+0x98>
 800ad64:	0029      	movs	r1, r5
 800ad66:	0038      	movs	r0, r7
 800ad68:	f7ff fbae 	bl	800a4c8 <_malloc_r>
 800ad6c:	1e06      	subs	r6, r0, #0
 800ad6e:	d02d      	beq.n	800adcc <__ssputs_r+0xac>
 800ad70:	9a02      	ldr	r2, [sp, #8]
 800ad72:	6921      	ldr	r1, [r4, #16]
 800ad74:	f000 fa10 	bl	800b198 <memcpy>
 800ad78:	89a2      	ldrh	r2, [r4, #12]
 800ad7a:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <__ssputs_r+0xc0>)
 800ad7c:	401a      	ands	r2, r3
 800ad7e:	2380      	movs	r3, #128	; 0x80
 800ad80:	4313      	orrs	r3, r2
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	6126      	str	r6, [r4, #16]
 800ad88:	18f6      	adds	r6, r6, r3
 800ad8a:	6026      	str	r6, [r4, #0]
 800ad8c:	6165      	str	r5, [r4, #20]
 800ad8e:	9e01      	ldr	r6, [sp, #4]
 800ad90:	1aed      	subs	r5, r5, r3
 800ad92:	60a5      	str	r5, [r4, #8]
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	429e      	cmp	r6, r3
 800ad98:	d900      	bls.n	800ad9c <__ssputs_r+0x7c>
 800ad9a:	9e01      	ldr	r6, [sp, #4]
 800ad9c:	0032      	movs	r2, r6
 800ad9e:	9903      	ldr	r1, [sp, #12]
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	f000 f9d4 	bl	800b14e <memmove>
 800ada6:	2000      	movs	r0, #0
 800ada8:	68a3      	ldr	r3, [r4, #8]
 800adaa:	1b9b      	subs	r3, r3, r6
 800adac:	60a3      	str	r3, [r4, #8]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	199b      	adds	r3, r3, r6
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	b005      	add	sp, #20
 800adb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb8:	002a      	movs	r2, r5
 800adba:	0038      	movs	r0, r7
 800adbc:	f000 fa53 	bl	800b266 <_realloc_r>
 800adc0:	1e06      	subs	r6, r0, #0
 800adc2:	d1df      	bne.n	800ad84 <__ssputs_r+0x64>
 800adc4:	0038      	movs	r0, r7
 800adc6:	6921      	ldr	r1, [r4, #16]
 800adc8:	f7ff fb08 	bl	800a3dc <_free_r>
 800adcc:	230c      	movs	r3, #12
 800adce:	2001      	movs	r0, #1
 800add0:	603b      	str	r3, [r7, #0]
 800add2:	89a2      	ldrh	r2, [r4, #12]
 800add4:	3334      	adds	r3, #52	; 0x34
 800add6:	4313      	orrs	r3, r2
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	4240      	negs	r0, r0
 800addc:	e7ea      	b.n	800adb4 <__ssputs_r+0x94>
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	fffffb7f 	.word	0xfffffb7f

0800ade4 <_svfiprintf_r>:
 800ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade6:	b0a1      	sub	sp, #132	; 0x84
 800ade8:	9003      	str	r0, [sp, #12]
 800adea:	001d      	movs	r5, r3
 800adec:	898b      	ldrh	r3, [r1, #12]
 800adee:	000f      	movs	r7, r1
 800adf0:	0016      	movs	r6, r2
 800adf2:	061b      	lsls	r3, r3, #24
 800adf4:	d511      	bpl.n	800ae1a <_svfiprintf_r+0x36>
 800adf6:	690b      	ldr	r3, [r1, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10e      	bne.n	800ae1a <_svfiprintf_r+0x36>
 800adfc:	2140      	movs	r1, #64	; 0x40
 800adfe:	f7ff fb63 	bl	800a4c8 <_malloc_r>
 800ae02:	6038      	str	r0, [r7, #0]
 800ae04:	6138      	str	r0, [r7, #16]
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d105      	bne.n	800ae16 <_svfiprintf_r+0x32>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	9a03      	ldr	r2, [sp, #12]
 800ae0e:	3801      	subs	r0, #1
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	b021      	add	sp, #132	; 0x84
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae16:	2340      	movs	r3, #64	; 0x40
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	ac08      	add	r4, sp, #32
 800ae1e:	6163      	str	r3, [r4, #20]
 800ae20:	3320      	adds	r3, #32
 800ae22:	7663      	strb	r3, [r4, #25]
 800ae24:	3310      	adds	r3, #16
 800ae26:	76a3      	strb	r3, [r4, #26]
 800ae28:	9507      	str	r5, [sp, #28]
 800ae2a:	0035      	movs	r5, r6
 800ae2c:	782b      	ldrb	r3, [r5, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <_svfiprintf_r+0x52>
 800ae32:	2b25      	cmp	r3, #37	; 0x25
 800ae34:	d148      	bne.n	800aec8 <_svfiprintf_r+0xe4>
 800ae36:	1bab      	subs	r3, r5, r6
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	42b5      	cmp	r5, r6
 800ae3c:	d00b      	beq.n	800ae56 <_svfiprintf_r+0x72>
 800ae3e:	0032      	movs	r2, r6
 800ae40:	0039      	movs	r1, r7
 800ae42:	9803      	ldr	r0, [sp, #12]
 800ae44:	f7ff ff6c 	bl	800ad20 <__ssputs_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d100      	bne.n	800ae4e <_svfiprintf_r+0x6a>
 800ae4c:	e0af      	b.n	800afae <_svfiprintf_r+0x1ca>
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	9a05      	ldr	r2, [sp, #20]
 800ae52:	189b      	adds	r3, r3, r2
 800ae54:	6163      	str	r3, [r4, #20]
 800ae56:	782b      	ldrb	r3, [r5, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d100      	bne.n	800ae5e <_svfiprintf_r+0x7a>
 800ae5c:	e0a7      	b.n	800afae <_svfiprintf_r+0x1ca>
 800ae5e:	2201      	movs	r2, #1
 800ae60:	2300      	movs	r3, #0
 800ae62:	4252      	negs	r2, r2
 800ae64:	6062      	str	r2, [r4, #4]
 800ae66:	a904      	add	r1, sp, #16
 800ae68:	3254      	adds	r2, #84	; 0x54
 800ae6a:	1852      	adds	r2, r2, r1
 800ae6c:	1c6e      	adds	r6, r5, #1
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	60e3      	str	r3, [r4, #12]
 800ae72:	60a3      	str	r3, [r4, #8]
 800ae74:	7013      	strb	r3, [r2, #0]
 800ae76:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae78:	4b55      	ldr	r3, [pc, #340]	; (800afd0 <_svfiprintf_r+0x1ec>)
 800ae7a:	2205      	movs	r2, #5
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	7831      	ldrb	r1, [r6, #0]
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	f7fe fc02 	bl	800968a <memchr>
 800ae86:	1c75      	adds	r5, r6, #1
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d11f      	bne.n	800aecc <_svfiprintf_r+0xe8>
 800ae8c:	6822      	ldr	r2, [r4, #0]
 800ae8e:	06d3      	lsls	r3, r2, #27
 800ae90:	d504      	bpl.n	800ae9c <_svfiprintf_r+0xb8>
 800ae92:	2353      	movs	r3, #83	; 0x53
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	185b      	adds	r3, r3, r1
 800ae98:	2120      	movs	r1, #32
 800ae9a:	7019      	strb	r1, [r3, #0]
 800ae9c:	0713      	lsls	r3, r2, #28
 800ae9e:	d504      	bpl.n	800aeaa <_svfiprintf_r+0xc6>
 800aea0:	2353      	movs	r3, #83	; 0x53
 800aea2:	a904      	add	r1, sp, #16
 800aea4:	185b      	adds	r3, r3, r1
 800aea6:	212b      	movs	r1, #43	; 0x2b
 800aea8:	7019      	strb	r1, [r3, #0]
 800aeaa:	7833      	ldrb	r3, [r6, #0]
 800aeac:	2b2a      	cmp	r3, #42	; 0x2a
 800aeae:	d016      	beq.n	800aede <_svfiprintf_r+0xfa>
 800aeb0:	0035      	movs	r5, r6
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	200a      	movs	r0, #10
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	782a      	ldrb	r2, [r5, #0]
 800aeba:	1c6e      	adds	r6, r5, #1
 800aebc:	3a30      	subs	r2, #48	; 0x30
 800aebe:	2a09      	cmp	r2, #9
 800aec0:	d94e      	bls.n	800af60 <_svfiprintf_r+0x17c>
 800aec2:	2900      	cmp	r1, #0
 800aec4:	d111      	bne.n	800aeea <_svfiprintf_r+0x106>
 800aec6:	e017      	b.n	800aef8 <_svfiprintf_r+0x114>
 800aec8:	3501      	adds	r5, #1
 800aeca:	e7af      	b.n	800ae2c <_svfiprintf_r+0x48>
 800aecc:	9b05      	ldr	r3, [sp, #20]
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	1ac0      	subs	r0, r0, r3
 800aed2:	2301      	movs	r3, #1
 800aed4:	4083      	lsls	r3, r0
 800aed6:	4313      	orrs	r3, r2
 800aed8:	002e      	movs	r6, r5
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	e7cc      	b.n	800ae78 <_svfiprintf_r+0x94>
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	1d19      	adds	r1, r3, #4
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	9107      	str	r1, [sp, #28]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	db01      	blt.n	800aeee <_svfiprintf_r+0x10a>
 800aeea:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeec:	e004      	b.n	800aef8 <_svfiprintf_r+0x114>
 800aeee:	425b      	negs	r3, r3
 800aef0:	60e3      	str	r3, [r4, #12]
 800aef2:	2302      	movs	r3, #2
 800aef4:	4313      	orrs	r3, r2
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	782b      	ldrb	r3, [r5, #0]
 800aefa:	2b2e      	cmp	r3, #46	; 0x2e
 800aefc:	d10a      	bne.n	800af14 <_svfiprintf_r+0x130>
 800aefe:	786b      	ldrb	r3, [r5, #1]
 800af00:	2b2a      	cmp	r3, #42	; 0x2a
 800af02:	d135      	bne.n	800af70 <_svfiprintf_r+0x18c>
 800af04:	9b07      	ldr	r3, [sp, #28]
 800af06:	3502      	adds	r5, #2
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9207      	str	r2, [sp, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	db2b      	blt.n	800af6a <_svfiprintf_r+0x186>
 800af12:	9309      	str	r3, [sp, #36]	; 0x24
 800af14:	4e2f      	ldr	r6, [pc, #188]	; (800afd4 <_svfiprintf_r+0x1f0>)
 800af16:	2203      	movs	r2, #3
 800af18:	0030      	movs	r0, r6
 800af1a:	7829      	ldrb	r1, [r5, #0]
 800af1c:	f7fe fbb5 	bl	800968a <memchr>
 800af20:	2800      	cmp	r0, #0
 800af22:	d006      	beq.n	800af32 <_svfiprintf_r+0x14e>
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	1b80      	subs	r0, r0, r6
 800af28:	4083      	lsls	r3, r0
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	3501      	adds	r5, #1
 800af2e:	4313      	orrs	r3, r2
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	7829      	ldrb	r1, [r5, #0]
 800af34:	2206      	movs	r2, #6
 800af36:	4828      	ldr	r0, [pc, #160]	; (800afd8 <_svfiprintf_r+0x1f4>)
 800af38:	1c6e      	adds	r6, r5, #1
 800af3a:	7621      	strb	r1, [r4, #24]
 800af3c:	f7fe fba5 	bl	800968a <memchr>
 800af40:	2800      	cmp	r0, #0
 800af42:	d03c      	beq.n	800afbe <_svfiprintf_r+0x1da>
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <_svfiprintf_r+0x1f8>)
 800af46:	2b00      	cmp	r3, #0
 800af48:	d125      	bne.n	800af96 <_svfiprintf_r+0x1b2>
 800af4a:	2207      	movs	r2, #7
 800af4c:	9b07      	ldr	r3, [sp, #28]
 800af4e:	3307      	adds	r3, #7
 800af50:	4393      	bics	r3, r2
 800af52:	3308      	adds	r3, #8
 800af54:	9307      	str	r3, [sp, #28]
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	189b      	adds	r3, r3, r2
 800af5c:	6163      	str	r3, [r4, #20]
 800af5e:	e764      	b.n	800ae2a <_svfiprintf_r+0x46>
 800af60:	4343      	muls	r3, r0
 800af62:	0035      	movs	r5, r6
 800af64:	2101      	movs	r1, #1
 800af66:	189b      	adds	r3, r3, r2
 800af68:	e7a6      	b.n	800aeb8 <_svfiprintf_r+0xd4>
 800af6a:	2301      	movs	r3, #1
 800af6c:	425b      	negs	r3, r3
 800af6e:	e7d0      	b.n	800af12 <_svfiprintf_r+0x12e>
 800af70:	2300      	movs	r3, #0
 800af72:	200a      	movs	r0, #10
 800af74:	001a      	movs	r2, r3
 800af76:	3501      	adds	r5, #1
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	7829      	ldrb	r1, [r5, #0]
 800af7c:	1c6e      	adds	r6, r5, #1
 800af7e:	3930      	subs	r1, #48	; 0x30
 800af80:	2909      	cmp	r1, #9
 800af82:	d903      	bls.n	800af8c <_svfiprintf_r+0x1a8>
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0c5      	beq.n	800af14 <_svfiprintf_r+0x130>
 800af88:	9209      	str	r2, [sp, #36]	; 0x24
 800af8a:	e7c3      	b.n	800af14 <_svfiprintf_r+0x130>
 800af8c:	4342      	muls	r2, r0
 800af8e:	0035      	movs	r5, r6
 800af90:	2301      	movs	r3, #1
 800af92:	1852      	adds	r2, r2, r1
 800af94:	e7f1      	b.n	800af7a <_svfiprintf_r+0x196>
 800af96:	aa07      	add	r2, sp, #28
 800af98:	9200      	str	r2, [sp, #0]
 800af9a:	0021      	movs	r1, r4
 800af9c:	003a      	movs	r2, r7
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <_svfiprintf_r+0x1fc>)
 800afa0:	9803      	ldr	r0, [sp, #12]
 800afa2:	f7fd fde5 	bl	8008b70 <_printf_float>
 800afa6:	9004      	str	r0, [sp, #16]
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	3301      	adds	r3, #1
 800afac:	d1d3      	bne.n	800af56 <_svfiprintf_r+0x172>
 800afae:	89bb      	ldrh	r3, [r7, #12]
 800afb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800afb2:	065b      	lsls	r3, r3, #25
 800afb4:	d400      	bmi.n	800afb8 <_svfiprintf_r+0x1d4>
 800afb6:	e72c      	b.n	800ae12 <_svfiprintf_r+0x2e>
 800afb8:	2001      	movs	r0, #1
 800afba:	4240      	negs	r0, r0
 800afbc:	e729      	b.n	800ae12 <_svfiprintf_r+0x2e>
 800afbe:	aa07      	add	r2, sp, #28
 800afc0:	9200      	str	r2, [sp, #0]
 800afc2:	0021      	movs	r1, r4
 800afc4:	003a      	movs	r2, r7
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <_svfiprintf_r+0x1fc>)
 800afc8:	9803      	ldr	r0, [sp, #12]
 800afca:	f7fe f897 	bl	80090fc <_printf_i>
 800afce:	e7ea      	b.n	800afa6 <_svfiprintf_r+0x1c2>
 800afd0:	0800bc0c 	.word	0x0800bc0c
 800afd4:	0800bc12 	.word	0x0800bc12
 800afd8:	0800bc16 	.word	0x0800bc16
 800afdc:	08008b71 	.word	0x08008b71
 800afe0:	0800ad21 	.word	0x0800ad21

0800afe4 <__sflush_r>:
 800afe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe6:	898b      	ldrh	r3, [r1, #12]
 800afe8:	0005      	movs	r5, r0
 800afea:	000c      	movs	r4, r1
 800afec:	071a      	lsls	r2, r3, #28
 800afee:	d45c      	bmi.n	800b0aa <__sflush_r+0xc6>
 800aff0:	684a      	ldr	r2, [r1, #4]
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	dc04      	bgt.n	800b000 <__sflush_r+0x1c>
 800aff6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800aff8:	2a00      	cmp	r2, #0
 800affa:	dc01      	bgt.n	800b000 <__sflush_r+0x1c>
 800affc:	2000      	movs	r0, #0
 800affe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b000:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b002:	2f00      	cmp	r7, #0
 800b004:	d0fa      	beq.n	800affc <__sflush_r+0x18>
 800b006:	2200      	movs	r2, #0
 800b008:	2080      	movs	r0, #128	; 0x80
 800b00a:	682e      	ldr	r6, [r5, #0]
 800b00c:	602a      	str	r2, [r5, #0]
 800b00e:	001a      	movs	r2, r3
 800b010:	0140      	lsls	r0, r0, #5
 800b012:	6a21      	ldr	r1, [r4, #32]
 800b014:	4002      	ands	r2, r0
 800b016:	4203      	tst	r3, r0
 800b018:	d034      	beq.n	800b084 <__sflush_r+0xa0>
 800b01a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	075b      	lsls	r3, r3, #29
 800b020:	d506      	bpl.n	800b030 <__sflush_r+0x4c>
 800b022:	6863      	ldr	r3, [r4, #4]
 800b024:	1ac0      	subs	r0, r0, r3
 800b026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <__sflush_r+0x4c>
 800b02c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b02e:	1ac0      	subs	r0, r0, r3
 800b030:	0002      	movs	r2, r0
 800b032:	2300      	movs	r3, #0
 800b034:	0028      	movs	r0, r5
 800b036:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b038:	6a21      	ldr	r1, [r4, #32]
 800b03a:	47b8      	blx	r7
 800b03c:	89a2      	ldrh	r2, [r4, #12]
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d106      	bne.n	800b050 <__sflush_r+0x6c>
 800b042:	6829      	ldr	r1, [r5, #0]
 800b044:	291d      	cmp	r1, #29
 800b046:	d82c      	bhi.n	800b0a2 <__sflush_r+0xbe>
 800b048:	4b2a      	ldr	r3, [pc, #168]	; (800b0f4 <__sflush_r+0x110>)
 800b04a:	410b      	asrs	r3, r1
 800b04c:	07db      	lsls	r3, r3, #31
 800b04e:	d428      	bmi.n	800b0a2 <__sflush_r+0xbe>
 800b050:	2300      	movs	r3, #0
 800b052:	6063      	str	r3, [r4, #4]
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	04d2      	lsls	r2, r2, #19
 800b05a:	d505      	bpl.n	800b068 <__sflush_r+0x84>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <__sflush_r+0x82>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d100      	bne.n	800b068 <__sflush_r+0x84>
 800b066:	6560      	str	r0, [r4, #84]	; 0x54
 800b068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b06a:	602e      	str	r6, [r5, #0]
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d0c5      	beq.n	800affc <__sflush_r+0x18>
 800b070:	0023      	movs	r3, r4
 800b072:	3344      	adds	r3, #68	; 0x44
 800b074:	4299      	cmp	r1, r3
 800b076:	d002      	beq.n	800b07e <__sflush_r+0x9a>
 800b078:	0028      	movs	r0, r5
 800b07a:	f7ff f9af 	bl	800a3dc <_free_r>
 800b07e:	2000      	movs	r0, #0
 800b080:	6360      	str	r0, [r4, #52]	; 0x34
 800b082:	e7bc      	b.n	800affe <__sflush_r+0x1a>
 800b084:	2301      	movs	r3, #1
 800b086:	0028      	movs	r0, r5
 800b088:	47b8      	blx	r7
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	d1c6      	bne.n	800b01c <__sflush_r+0x38>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0c3      	beq.n	800b01c <__sflush_r+0x38>
 800b094:	2b1d      	cmp	r3, #29
 800b096:	d001      	beq.n	800b09c <__sflush_r+0xb8>
 800b098:	2b16      	cmp	r3, #22
 800b09a:	d101      	bne.n	800b0a0 <__sflush_r+0xbc>
 800b09c:	602e      	str	r6, [r5, #0]
 800b09e:	e7ad      	b.n	800affc <__sflush_r+0x18>
 800b0a0:	89a2      	ldrh	r2, [r4, #12]
 800b0a2:	2340      	movs	r3, #64	; 0x40
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	e7a9      	b.n	800affe <__sflush_r+0x1a>
 800b0aa:	690e      	ldr	r6, [r1, #16]
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	d0a5      	beq.n	800affc <__sflush_r+0x18>
 800b0b0:	680f      	ldr	r7, [r1, #0]
 800b0b2:	600e      	str	r6, [r1, #0]
 800b0b4:	1bba      	subs	r2, r7, r6
 800b0b6:	9201      	str	r2, [sp, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	079b      	lsls	r3, r3, #30
 800b0bc:	d100      	bne.n	800b0c0 <__sflush_r+0xdc>
 800b0be:	694a      	ldr	r2, [r1, #20]
 800b0c0:	60a2      	str	r2, [r4, #8]
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd99      	ble.n	800affc <__sflush_r+0x18>
 800b0c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0ca:	0032      	movs	r2, r6
 800b0cc:	001f      	movs	r7, r3
 800b0ce:	0028      	movs	r0, r5
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	6a21      	ldr	r1, [r4, #32]
 800b0d4:	47b8      	blx	r7
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dc06      	bgt.n	800b0e8 <__sflush_r+0x104>
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	2001      	movs	r0, #1
 800b0de:	89a2      	ldrh	r2, [r4, #12]
 800b0e0:	4240      	negs	r0, r0
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	e78a      	b.n	800affe <__sflush_r+0x1a>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	1836      	adds	r6, r6, r0
 800b0ec:	1a1b      	subs	r3, r3, r0
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	e7e7      	b.n	800b0c2 <__sflush_r+0xde>
 800b0f2:	46c0      	nop			; (mov r8, r8)
 800b0f4:	dfbffffe 	.word	0xdfbffffe

0800b0f8 <_fflush_r>:
 800b0f8:	690b      	ldr	r3, [r1, #16]
 800b0fa:	b570      	push	{r4, r5, r6, lr}
 800b0fc:	0005      	movs	r5, r0
 800b0fe:	000c      	movs	r4, r1
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <_fflush_r+0x12>
 800b104:	2500      	movs	r5, #0
 800b106:	0028      	movs	r0, r5
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d004      	beq.n	800b118 <_fflush_r+0x20>
 800b10e:	6a03      	ldr	r3, [r0, #32]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <_fflush_r+0x20>
 800b114:	f7fe f992 	bl	800943c <__sinit>
 800b118:	220c      	movs	r2, #12
 800b11a:	5ea3      	ldrsh	r3, [r4, r2]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0f1      	beq.n	800b104 <_fflush_r+0xc>
 800b120:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b122:	07d2      	lsls	r2, r2, #31
 800b124:	d404      	bmi.n	800b130 <_fflush_r+0x38>
 800b126:	059b      	lsls	r3, r3, #22
 800b128:	d402      	bmi.n	800b130 <_fflush_r+0x38>
 800b12a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b12c:	f7fe faab 	bl	8009686 <__retarget_lock_acquire_recursive>
 800b130:	0028      	movs	r0, r5
 800b132:	0021      	movs	r1, r4
 800b134:	f7ff ff56 	bl	800afe4 <__sflush_r>
 800b138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b13a:	0005      	movs	r5, r0
 800b13c:	07db      	lsls	r3, r3, #31
 800b13e:	d4e2      	bmi.n	800b106 <_fflush_r+0xe>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	059b      	lsls	r3, r3, #22
 800b144:	d4df      	bmi.n	800b106 <_fflush_r+0xe>
 800b146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b148:	f7fe fa9e 	bl	8009688 <__retarget_lock_release_recursive>
 800b14c:	e7db      	b.n	800b106 <_fflush_r+0xe>

0800b14e <memmove>:
 800b14e:	b510      	push	{r4, lr}
 800b150:	4288      	cmp	r0, r1
 800b152:	d902      	bls.n	800b15a <memmove+0xc>
 800b154:	188b      	adds	r3, r1, r2
 800b156:	4298      	cmp	r0, r3
 800b158:	d303      	bcc.n	800b162 <memmove+0x14>
 800b15a:	2300      	movs	r3, #0
 800b15c:	e007      	b.n	800b16e <memmove+0x20>
 800b15e:	5c8b      	ldrb	r3, [r1, r2]
 800b160:	5483      	strb	r3, [r0, r2]
 800b162:	3a01      	subs	r2, #1
 800b164:	d2fb      	bcs.n	800b15e <memmove+0x10>
 800b166:	bd10      	pop	{r4, pc}
 800b168:	5ccc      	ldrb	r4, [r1, r3]
 800b16a:	54c4      	strb	r4, [r0, r3]
 800b16c:	3301      	adds	r3, #1
 800b16e:	429a      	cmp	r2, r3
 800b170:	d1fa      	bne.n	800b168 <memmove+0x1a>
 800b172:	e7f8      	b.n	800b166 <memmove+0x18>

0800b174 <_sbrk_r>:
 800b174:	2300      	movs	r3, #0
 800b176:	b570      	push	{r4, r5, r6, lr}
 800b178:	4d06      	ldr	r5, [pc, #24]	; (800b194 <_sbrk_r+0x20>)
 800b17a:	0004      	movs	r4, r0
 800b17c:	0008      	movs	r0, r1
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	f7f8 fe7a 	bl	8003e78 <_sbrk>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d103      	bne.n	800b190 <_sbrk_r+0x1c>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d000      	beq.n	800b190 <_sbrk_r+0x1c>
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	bd70      	pop	{r4, r5, r6, pc}
 800b192:	46c0      	nop			; (mov r8, r8)
 800b194:	20000614 	.word	0x20000614

0800b198 <memcpy>:
 800b198:	2300      	movs	r3, #0
 800b19a:	b510      	push	{r4, lr}
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d100      	bne.n	800b1a2 <memcpy+0xa>
 800b1a0:	bd10      	pop	{r4, pc}
 800b1a2:	5ccc      	ldrb	r4, [r1, r3]
 800b1a4:	54c4      	strb	r4, [r0, r3]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	e7f8      	b.n	800b19c <memcpy+0x4>
	...

0800b1ac <__assert_func>:
 800b1ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b1ae:	0014      	movs	r4, r2
 800b1b0:	001a      	movs	r2, r3
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <__assert_func+0x2c>)
 800b1b4:	0005      	movs	r5, r0
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	000e      	movs	r6, r1
 800b1ba:	68d8      	ldr	r0, [r3, #12]
 800b1bc:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <__assert_func+0x30>)
 800b1be:	2c00      	cmp	r4, #0
 800b1c0:	d101      	bne.n	800b1c6 <__assert_func+0x1a>
 800b1c2:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <__assert_func+0x34>)
 800b1c4:	001c      	movs	r4, r3
 800b1c6:	4907      	ldr	r1, [pc, #28]	; (800b1e4 <__assert_func+0x38>)
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	9402      	str	r4, [sp, #8]
 800b1cc:	002b      	movs	r3, r5
 800b1ce:	9600      	str	r6, [sp, #0]
 800b1d0:	f000 f886 	bl	800b2e0 <fiprintf>
 800b1d4:	f000 f894 	bl	800b300 <abort>
 800b1d8:	20000064 	.word	0x20000064
 800b1dc:	0800bc27 	.word	0x0800bc27
 800b1e0:	0800bc62 	.word	0x0800bc62
 800b1e4:	0800bc34 	.word	0x0800bc34

0800b1e8 <_calloc_r>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	0c0b      	lsrs	r3, r1, #16
 800b1ec:	0c15      	lsrs	r5, r2, #16
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d11e      	bne.n	800b230 <_calloc_r+0x48>
 800b1f2:	2d00      	cmp	r5, #0
 800b1f4:	d10c      	bne.n	800b210 <_calloc_r+0x28>
 800b1f6:	b289      	uxth	r1, r1
 800b1f8:	b294      	uxth	r4, r2
 800b1fa:	434c      	muls	r4, r1
 800b1fc:	0021      	movs	r1, r4
 800b1fe:	f7ff f963 	bl	800a4c8 <_malloc_r>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	d01b      	beq.n	800b23e <_calloc_r+0x56>
 800b206:	0022      	movs	r2, r4
 800b208:	2100      	movs	r1, #0
 800b20a:	f7fe f9b7 	bl	800957c <memset>
 800b20e:	e016      	b.n	800b23e <_calloc_r+0x56>
 800b210:	1c2b      	adds	r3, r5, #0
 800b212:	1c0c      	adds	r4, r1, #0
 800b214:	b289      	uxth	r1, r1
 800b216:	b292      	uxth	r2, r2
 800b218:	434a      	muls	r2, r1
 800b21a:	b2a1      	uxth	r1, r4
 800b21c:	b29c      	uxth	r4, r3
 800b21e:	434c      	muls	r4, r1
 800b220:	0c13      	lsrs	r3, r2, #16
 800b222:	18e4      	adds	r4, r4, r3
 800b224:	0c23      	lsrs	r3, r4, #16
 800b226:	d107      	bne.n	800b238 <_calloc_r+0x50>
 800b228:	0424      	lsls	r4, r4, #16
 800b22a:	b292      	uxth	r2, r2
 800b22c:	4314      	orrs	r4, r2
 800b22e:	e7e5      	b.n	800b1fc <_calloc_r+0x14>
 800b230:	2d00      	cmp	r5, #0
 800b232:	d101      	bne.n	800b238 <_calloc_r+0x50>
 800b234:	1c14      	adds	r4, r2, #0
 800b236:	e7ed      	b.n	800b214 <_calloc_r+0x2c>
 800b238:	230c      	movs	r3, #12
 800b23a:	2500      	movs	r5, #0
 800b23c:	6003      	str	r3, [r0, #0]
 800b23e:	0028      	movs	r0, r5
 800b240:	bd70      	pop	{r4, r5, r6, pc}

0800b242 <__ascii_mbtowc>:
 800b242:	b082      	sub	sp, #8
 800b244:	2900      	cmp	r1, #0
 800b246:	d100      	bne.n	800b24a <__ascii_mbtowc+0x8>
 800b248:	a901      	add	r1, sp, #4
 800b24a:	1e10      	subs	r0, r2, #0
 800b24c:	d006      	beq.n	800b25c <__ascii_mbtowc+0x1a>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <__ascii_mbtowc+0x1e>
 800b252:	7813      	ldrb	r3, [r2, #0]
 800b254:	600b      	str	r3, [r1, #0]
 800b256:	7810      	ldrb	r0, [r2, #0]
 800b258:	1e43      	subs	r3, r0, #1
 800b25a:	4198      	sbcs	r0, r3
 800b25c:	b002      	add	sp, #8
 800b25e:	4770      	bx	lr
 800b260:	2002      	movs	r0, #2
 800b262:	4240      	negs	r0, r0
 800b264:	e7fa      	b.n	800b25c <__ascii_mbtowc+0x1a>

0800b266 <_realloc_r>:
 800b266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b268:	0007      	movs	r7, r0
 800b26a:	000e      	movs	r6, r1
 800b26c:	0014      	movs	r4, r2
 800b26e:	2900      	cmp	r1, #0
 800b270:	d105      	bne.n	800b27e <_realloc_r+0x18>
 800b272:	0011      	movs	r1, r2
 800b274:	f7ff f928 	bl	800a4c8 <_malloc_r>
 800b278:	0005      	movs	r5, r0
 800b27a:	0028      	movs	r0, r5
 800b27c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b27e:	2a00      	cmp	r2, #0
 800b280:	d103      	bne.n	800b28a <_realloc_r+0x24>
 800b282:	f7ff f8ab 	bl	800a3dc <_free_r>
 800b286:	0025      	movs	r5, r4
 800b288:	e7f7      	b.n	800b27a <_realloc_r+0x14>
 800b28a:	f000 f840 	bl	800b30e <_malloc_usable_size_r>
 800b28e:	9001      	str	r0, [sp, #4]
 800b290:	4284      	cmp	r4, r0
 800b292:	d803      	bhi.n	800b29c <_realloc_r+0x36>
 800b294:	0035      	movs	r5, r6
 800b296:	0843      	lsrs	r3, r0, #1
 800b298:	42a3      	cmp	r3, r4
 800b29a:	d3ee      	bcc.n	800b27a <_realloc_r+0x14>
 800b29c:	0021      	movs	r1, r4
 800b29e:	0038      	movs	r0, r7
 800b2a0:	f7ff f912 	bl	800a4c8 <_malloc_r>
 800b2a4:	1e05      	subs	r5, r0, #0
 800b2a6:	d0e8      	beq.n	800b27a <_realloc_r+0x14>
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	0022      	movs	r2, r4
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	d900      	bls.n	800b2b2 <_realloc_r+0x4c>
 800b2b0:	001a      	movs	r2, r3
 800b2b2:	0031      	movs	r1, r6
 800b2b4:	0028      	movs	r0, r5
 800b2b6:	f7ff ff6f 	bl	800b198 <memcpy>
 800b2ba:	0031      	movs	r1, r6
 800b2bc:	0038      	movs	r0, r7
 800b2be:	f7ff f88d 	bl	800a3dc <_free_r>
 800b2c2:	e7da      	b.n	800b27a <_realloc_r+0x14>

0800b2c4 <__ascii_wctomb>:
 800b2c4:	0003      	movs	r3, r0
 800b2c6:	1e08      	subs	r0, r1, #0
 800b2c8:	d005      	beq.n	800b2d6 <__ascii_wctomb+0x12>
 800b2ca:	2aff      	cmp	r2, #255	; 0xff
 800b2cc:	d904      	bls.n	800b2d8 <__ascii_wctomb+0x14>
 800b2ce:	228a      	movs	r2, #138	; 0x8a
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	4240      	negs	r0, r0
 800b2d6:	4770      	bx	lr
 800b2d8:	2001      	movs	r0, #1
 800b2da:	700a      	strb	r2, [r1, #0]
 800b2dc:	e7fb      	b.n	800b2d6 <__ascii_wctomb+0x12>
	...

0800b2e0 <fiprintf>:
 800b2e0:	b40e      	push	{r1, r2, r3}
 800b2e2:	b517      	push	{r0, r1, r2, r4, lr}
 800b2e4:	4c05      	ldr	r4, [pc, #20]	; (800b2fc <fiprintf+0x1c>)
 800b2e6:	ab05      	add	r3, sp, #20
 800b2e8:	cb04      	ldmia	r3!, {r2}
 800b2ea:	0001      	movs	r1, r0
 800b2ec:	6820      	ldr	r0, [r4, #0]
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	f000 f83c 	bl	800b36c <_vfiprintf_r>
 800b2f4:	bc1e      	pop	{r1, r2, r3, r4}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	b003      	add	sp, #12
 800b2fa:	4718      	bx	r3
 800b2fc:	20000064 	.word	0x20000064

0800b300 <abort>:
 800b300:	2006      	movs	r0, #6
 800b302:	b510      	push	{r4, lr}
 800b304:	f000 fa1e 	bl	800b744 <raise>
 800b308:	2001      	movs	r0, #1
 800b30a:	f7f8 fd43 	bl	8003d94 <_exit>

0800b30e <_malloc_usable_size_r>:
 800b30e:	1f0b      	subs	r3, r1, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	1f18      	subs	r0, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	da01      	bge.n	800b31c <_malloc_usable_size_r+0xe>
 800b318:	580b      	ldr	r3, [r1, r0]
 800b31a:	18c0      	adds	r0, r0, r3
 800b31c:	4770      	bx	lr

0800b31e <__sfputc_r>:
 800b31e:	6893      	ldr	r3, [r2, #8]
 800b320:	b510      	push	{r4, lr}
 800b322:	3b01      	subs	r3, #1
 800b324:	6093      	str	r3, [r2, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	da04      	bge.n	800b334 <__sfputc_r+0x16>
 800b32a:	6994      	ldr	r4, [r2, #24]
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	db07      	blt.n	800b340 <__sfputc_r+0x22>
 800b330:	290a      	cmp	r1, #10
 800b332:	d005      	beq.n	800b340 <__sfputc_r+0x22>
 800b334:	6813      	ldr	r3, [r2, #0]
 800b336:	1c58      	adds	r0, r3, #1
 800b338:	6010      	str	r0, [r2, #0]
 800b33a:	7019      	strb	r1, [r3, #0]
 800b33c:	0008      	movs	r0, r1
 800b33e:	bd10      	pop	{r4, pc}
 800b340:	f000 f930 	bl	800b5a4 <__swbuf_r>
 800b344:	0001      	movs	r1, r0
 800b346:	e7f9      	b.n	800b33c <__sfputc_r+0x1e>

0800b348 <__sfputs_r>:
 800b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34a:	0006      	movs	r6, r0
 800b34c:	000f      	movs	r7, r1
 800b34e:	0014      	movs	r4, r2
 800b350:	18d5      	adds	r5, r2, r3
 800b352:	42ac      	cmp	r4, r5
 800b354:	d101      	bne.n	800b35a <__sfputs_r+0x12>
 800b356:	2000      	movs	r0, #0
 800b358:	e007      	b.n	800b36a <__sfputs_r+0x22>
 800b35a:	7821      	ldrb	r1, [r4, #0]
 800b35c:	003a      	movs	r2, r7
 800b35e:	0030      	movs	r0, r6
 800b360:	f7ff ffdd 	bl	800b31e <__sfputc_r>
 800b364:	3401      	adds	r4, #1
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d1f3      	bne.n	800b352 <__sfputs_r+0xa>
 800b36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b36c <_vfiprintf_r>:
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	b0a1      	sub	sp, #132	; 0x84
 800b370:	000f      	movs	r7, r1
 800b372:	0015      	movs	r5, r2
 800b374:	001e      	movs	r6, r3
 800b376:	9003      	str	r0, [sp, #12]
 800b378:	2800      	cmp	r0, #0
 800b37a:	d004      	beq.n	800b386 <_vfiprintf_r+0x1a>
 800b37c:	6a03      	ldr	r3, [r0, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <_vfiprintf_r+0x1a>
 800b382:	f7fe f85b 	bl	800943c <__sinit>
 800b386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b388:	07db      	lsls	r3, r3, #31
 800b38a:	d405      	bmi.n	800b398 <_vfiprintf_r+0x2c>
 800b38c:	89bb      	ldrh	r3, [r7, #12]
 800b38e:	059b      	lsls	r3, r3, #22
 800b390:	d402      	bmi.n	800b398 <_vfiprintf_r+0x2c>
 800b392:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b394:	f7fe f977 	bl	8009686 <__retarget_lock_acquire_recursive>
 800b398:	89bb      	ldrh	r3, [r7, #12]
 800b39a:	071b      	lsls	r3, r3, #28
 800b39c:	d502      	bpl.n	800b3a4 <_vfiprintf_r+0x38>
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d113      	bne.n	800b3cc <_vfiprintf_r+0x60>
 800b3a4:	0039      	movs	r1, r7
 800b3a6:	9803      	ldr	r0, [sp, #12]
 800b3a8:	f000 f93e 	bl	800b628 <__swsetup_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d00d      	beq.n	800b3cc <_vfiprintf_r+0x60>
 800b3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3b2:	07db      	lsls	r3, r3, #31
 800b3b4:	d503      	bpl.n	800b3be <_vfiprintf_r+0x52>
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	4240      	negs	r0, r0
 800b3ba:	b021      	add	sp, #132	; 0x84
 800b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3be:	89bb      	ldrh	r3, [r7, #12]
 800b3c0:	059b      	lsls	r3, r3, #22
 800b3c2:	d4f8      	bmi.n	800b3b6 <_vfiprintf_r+0x4a>
 800b3c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3c6:	f7fe f95f 	bl	8009688 <__retarget_lock_release_recursive>
 800b3ca:	e7f4      	b.n	800b3b6 <_vfiprintf_r+0x4a>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	ac08      	add	r4, sp, #32
 800b3d0:	6163      	str	r3, [r4, #20]
 800b3d2:	3320      	adds	r3, #32
 800b3d4:	7663      	strb	r3, [r4, #25]
 800b3d6:	3310      	adds	r3, #16
 800b3d8:	76a3      	strb	r3, [r4, #26]
 800b3da:	9607      	str	r6, [sp, #28]
 800b3dc:	002e      	movs	r6, r5
 800b3de:	7833      	ldrb	r3, [r6, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <_vfiprintf_r+0x7c>
 800b3e4:	2b25      	cmp	r3, #37	; 0x25
 800b3e6:	d148      	bne.n	800b47a <_vfiprintf_r+0x10e>
 800b3e8:	1b73      	subs	r3, r6, r5
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	42ae      	cmp	r6, r5
 800b3ee:	d00b      	beq.n	800b408 <_vfiprintf_r+0x9c>
 800b3f0:	002a      	movs	r2, r5
 800b3f2:	0039      	movs	r1, r7
 800b3f4:	9803      	ldr	r0, [sp, #12]
 800b3f6:	f7ff ffa7 	bl	800b348 <__sfputs_r>
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d100      	bne.n	800b400 <_vfiprintf_r+0x94>
 800b3fe:	e0af      	b.n	800b560 <_vfiprintf_r+0x1f4>
 800b400:	6963      	ldr	r3, [r4, #20]
 800b402:	9a05      	ldr	r2, [sp, #20]
 800b404:	189b      	adds	r3, r3, r2
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	7833      	ldrb	r3, [r6, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d100      	bne.n	800b410 <_vfiprintf_r+0xa4>
 800b40e:	e0a7      	b.n	800b560 <_vfiprintf_r+0x1f4>
 800b410:	2201      	movs	r2, #1
 800b412:	2300      	movs	r3, #0
 800b414:	4252      	negs	r2, r2
 800b416:	6062      	str	r2, [r4, #4]
 800b418:	a904      	add	r1, sp, #16
 800b41a:	3254      	adds	r2, #84	; 0x54
 800b41c:	1852      	adds	r2, r2, r1
 800b41e:	1c75      	adds	r5, r6, #1
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	60e3      	str	r3, [r4, #12]
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	7013      	strb	r3, [r2, #0]
 800b428:	65a3      	str	r3, [r4, #88]	; 0x58
 800b42a:	4b59      	ldr	r3, [pc, #356]	; (800b590 <_vfiprintf_r+0x224>)
 800b42c:	2205      	movs	r2, #5
 800b42e:	0018      	movs	r0, r3
 800b430:	7829      	ldrb	r1, [r5, #0]
 800b432:	9305      	str	r3, [sp, #20]
 800b434:	f7fe f929 	bl	800968a <memchr>
 800b438:	1c6e      	adds	r6, r5, #1
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d11f      	bne.n	800b47e <_vfiprintf_r+0x112>
 800b43e:	6822      	ldr	r2, [r4, #0]
 800b440:	06d3      	lsls	r3, r2, #27
 800b442:	d504      	bpl.n	800b44e <_vfiprintf_r+0xe2>
 800b444:	2353      	movs	r3, #83	; 0x53
 800b446:	a904      	add	r1, sp, #16
 800b448:	185b      	adds	r3, r3, r1
 800b44a:	2120      	movs	r1, #32
 800b44c:	7019      	strb	r1, [r3, #0]
 800b44e:	0713      	lsls	r3, r2, #28
 800b450:	d504      	bpl.n	800b45c <_vfiprintf_r+0xf0>
 800b452:	2353      	movs	r3, #83	; 0x53
 800b454:	a904      	add	r1, sp, #16
 800b456:	185b      	adds	r3, r3, r1
 800b458:	212b      	movs	r1, #43	; 0x2b
 800b45a:	7019      	strb	r1, [r3, #0]
 800b45c:	782b      	ldrb	r3, [r5, #0]
 800b45e:	2b2a      	cmp	r3, #42	; 0x2a
 800b460:	d016      	beq.n	800b490 <_vfiprintf_r+0x124>
 800b462:	002e      	movs	r6, r5
 800b464:	2100      	movs	r1, #0
 800b466:	200a      	movs	r0, #10
 800b468:	68e3      	ldr	r3, [r4, #12]
 800b46a:	7832      	ldrb	r2, [r6, #0]
 800b46c:	1c75      	adds	r5, r6, #1
 800b46e:	3a30      	subs	r2, #48	; 0x30
 800b470:	2a09      	cmp	r2, #9
 800b472:	d94e      	bls.n	800b512 <_vfiprintf_r+0x1a6>
 800b474:	2900      	cmp	r1, #0
 800b476:	d111      	bne.n	800b49c <_vfiprintf_r+0x130>
 800b478:	e017      	b.n	800b4aa <_vfiprintf_r+0x13e>
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7af      	b.n	800b3de <_vfiprintf_r+0x72>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	6822      	ldr	r2, [r4, #0]
 800b482:	1ac0      	subs	r0, r0, r3
 800b484:	2301      	movs	r3, #1
 800b486:	4083      	lsls	r3, r0
 800b488:	4313      	orrs	r3, r2
 800b48a:	0035      	movs	r5, r6
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	e7cc      	b.n	800b42a <_vfiprintf_r+0xbe>
 800b490:	9b07      	ldr	r3, [sp, #28]
 800b492:	1d19      	adds	r1, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	9107      	str	r1, [sp, #28]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	db01      	blt.n	800b4a0 <_vfiprintf_r+0x134>
 800b49c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b49e:	e004      	b.n	800b4aa <_vfiprintf_r+0x13e>
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	60e3      	str	r3, [r4, #12]
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	7833      	ldrb	r3, [r6, #0]
 800b4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ae:	d10a      	bne.n	800b4c6 <_vfiprintf_r+0x15a>
 800b4b0:	7873      	ldrb	r3, [r6, #1]
 800b4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b4:	d135      	bne.n	800b522 <_vfiprintf_r+0x1b6>
 800b4b6:	9b07      	ldr	r3, [sp, #28]
 800b4b8:	3602      	adds	r6, #2
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9207      	str	r2, [sp, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db2b      	blt.n	800b51c <_vfiprintf_r+0x1b0>
 800b4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c6:	4d33      	ldr	r5, [pc, #204]	; (800b594 <_vfiprintf_r+0x228>)
 800b4c8:	2203      	movs	r2, #3
 800b4ca:	0028      	movs	r0, r5
 800b4cc:	7831      	ldrb	r1, [r6, #0]
 800b4ce:	f7fe f8dc 	bl	800968a <memchr>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d006      	beq.n	800b4e4 <_vfiprintf_r+0x178>
 800b4d6:	2340      	movs	r3, #64	; 0x40
 800b4d8:	1b40      	subs	r0, r0, r5
 800b4da:	4083      	lsls	r3, r0
 800b4dc:	6822      	ldr	r2, [r4, #0]
 800b4de:	3601      	adds	r6, #1
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	6023      	str	r3, [r4, #0]
 800b4e4:	7831      	ldrb	r1, [r6, #0]
 800b4e6:	2206      	movs	r2, #6
 800b4e8:	482b      	ldr	r0, [pc, #172]	; (800b598 <_vfiprintf_r+0x22c>)
 800b4ea:	1c75      	adds	r5, r6, #1
 800b4ec:	7621      	strb	r1, [r4, #24]
 800b4ee:	f7fe f8cc 	bl	800968a <memchr>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d043      	beq.n	800b57e <_vfiprintf_r+0x212>
 800b4f6:	4b29      	ldr	r3, [pc, #164]	; (800b59c <_vfiprintf_r+0x230>)
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d125      	bne.n	800b548 <_vfiprintf_r+0x1dc>
 800b4fc:	2207      	movs	r2, #7
 800b4fe:	9b07      	ldr	r3, [sp, #28]
 800b500:	3307      	adds	r3, #7
 800b502:	4393      	bics	r3, r2
 800b504:	3308      	adds	r3, #8
 800b506:	9307      	str	r3, [sp, #28]
 800b508:	6963      	ldr	r3, [r4, #20]
 800b50a:	9a04      	ldr	r2, [sp, #16]
 800b50c:	189b      	adds	r3, r3, r2
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	e764      	b.n	800b3dc <_vfiprintf_r+0x70>
 800b512:	4343      	muls	r3, r0
 800b514:	002e      	movs	r6, r5
 800b516:	2101      	movs	r1, #1
 800b518:	189b      	adds	r3, r3, r2
 800b51a:	e7a6      	b.n	800b46a <_vfiprintf_r+0xfe>
 800b51c:	2301      	movs	r3, #1
 800b51e:	425b      	negs	r3, r3
 800b520:	e7d0      	b.n	800b4c4 <_vfiprintf_r+0x158>
 800b522:	2300      	movs	r3, #0
 800b524:	200a      	movs	r0, #10
 800b526:	001a      	movs	r2, r3
 800b528:	3601      	adds	r6, #1
 800b52a:	6063      	str	r3, [r4, #4]
 800b52c:	7831      	ldrb	r1, [r6, #0]
 800b52e:	1c75      	adds	r5, r6, #1
 800b530:	3930      	subs	r1, #48	; 0x30
 800b532:	2909      	cmp	r1, #9
 800b534:	d903      	bls.n	800b53e <_vfiprintf_r+0x1d2>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0c5      	beq.n	800b4c6 <_vfiprintf_r+0x15a>
 800b53a:	9209      	str	r2, [sp, #36]	; 0x24
 800b53c:	e7c3      	b.n	800b4c6 <_vfiprintf_r+0x15a>
 800b53e:	4342      	muls	r2, r0
 800b540:	002e      	movs	r6, r5
 800b542:	2301      	movs	r3, #1
 800b544:	1852      	adds	r2, r2, r1
 800b546:	e7f1      	b.n	800b52c <_vfiprintf_r+0x1c0>
 800b548:	aa07      	add	r2, sp, #28
 800b54a:	9200      	str	r2, [sp, #0]
 800b54c:	0021      	movs	r1, r4
 800b54e:	003a      	movs	r2, r7
 800b550:	4b13      	ldr	r3, [pc, #76]	; (800b5a0 <_vfiprintf_r+0x234>)
 800b552:	9803      	ldr	r0, [sp, #12]
 800b554:	f7fd fb0c 	bl	8008b70 <_printf_float>
 800b558:	9004      	str	r0, [sp, #16]
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	3301      	adds	r3, #1
 800b55e:	d1d3      	bne.n	800b508 <_vfiprintf_r+0x19c>
 800b560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b562:	07db      	lsls	r3, r3, #31
 800b564:	d405      	bmi.n	800b572 <_vfiprintf_r+0x206>
 800b566:	89bb      	ldrh	r3, [r7, #12]
 800b568:	059b      	lsls	r3, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_vfiprintf_r+0x206>
 800b56c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b56e:	f7fe f88b 	bl	8009688 <__retarget_lock_release_recursive>
 800b572:	89bb      	ldrh	r3, [r7, #12]
 800b574:	065b      	lsls	r3, r3, #25
 800b576:	d500      	bpl.n	800b57a <_vfiprintf_r+0x20e>
 800b578:	e71d      	b.n	800b3b6 <_vfiprintf_r+0x4a>
 800b57a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b57c:	e71d      	b.n	800b3ba <_vfiprintf_r+0x4e>
 800b57e:	aa07      	add	r2, sp, #28
 800b580:	9200      	str	r2, [sp, #0]
 800b582:	0021      	movs	r1, r4
 800b584:	003a      	movs	r2, r7
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <_vfiprintf_r+0x234>)
 800b588:	9803      	ldr	r0, [sp, #12]
 800b58a:	f7fd fdb7 	bl	80090fc <_printf_i>
 800b58e:	e7e3      	b.n	800b558 <_vfiprintf_r+0x1ec>
 800b590:	0800bc0c 	.word	0x0800bc0c
 800b594:	0800bc12 	.word	0x0800bc12
 800b598:	0800bc16 	.word	0x0800bc16
 800b59c:	08008b71 	.word	0x08008b71
 800b5a0:	0800b349 	.word	0x0800b349

0800b5a4 <__swbuf_r>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	0006      	movs	r6, r0
 800b5a8:	000d      	movs	r5, r1
 800b5aa:	0014      	movs	r4, r2
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d004      	beq.n	800b5ba <__swbuf_r+0x16>
 800b5b0:	6a03      	ldr	r3, [r0, #32]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <__swbuf_r+0x16>
 800b5b6:	f7fd ff41 	bl	800943c <__sinit>
 800b5ba:	69a3      	ldr	r3, [r4, #24]
 800b5bc:	60a3      	str	r3, [r4, #8]
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	071b      	lsls	r3, r3, #28
 800b5c2:	d528      	bpl.n	800b616 <__swbuf_r+0x72>
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d025      	beq.n	800b616 <__swbuf_r+0x72>
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	b2ef      	uxtb	r7, r5
 800b5d0:	1ac0      	subs	r0, r0, r3
 800b5d2:	6963      	ldr	r3, [r4, #20]
 800b5d4:	b2ed      	uxtb	r5, r5
 800b5d6:	4283      	cmp	r3, r0
 800b5d8:	dc05      	bgt.n	800b5e6 <__swbuf_r+0x42>
 800b5da:	0021      	movs	r1, r4
 800b5dc:	0030      	movs	r0, r6
 800b5de:	f7ff fd8b 	bl	800b0f8 <_fflush_r>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d11d      	bne.n	800b622 <__swbuf_r+0x7e>
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	60a3      	str	r3, [r4, #8]
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	6022      	str	r2, [r4, #0]
 800b5f4:	701f      	strb	r7, [r3, #0]
 800b5f6:	6963      	ldr	r3, [r4, #20]
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	d004      	beq.n	800b606 <__swbuf_r+0x62>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d507      	bpl.n	800b612 <__swbuf_r+0x6e>
 800b602:	2d0a      	cmp	r5, #10
 800b604:	d105      	bne.n	800b612 <__swbuf_r+0x6e>
 800b606:	0021      	movs	r1, r4
 800b608:	0030      	movs	r0, r6
 800b60a:	f7ff fd75 	bl	800b0f8 <_fflush_r>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d107      	bne.n	800b622 <__swbuf_r+0x7e>
 800b612:	0028      	movs	r0, r5
 800b614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b616:	0021      	movs	r1, r4
 800b618:	0030      	movs	r0, r6
 800b61a:	f000 f805 	bl	800b628 <__swsetup_r>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d0d3      	beq.n	800b5ca <__swbuf_r+0x26>
 800b622:	2501      	movs	r5, #1
 800b624:	426d      	negs	r5, r5
 800b626:	e7f4      	b.n	800b612 <__swbuf_r+0x6e>

0800b628 <__swsetup_r>:
 800b628:	4b30      	ldr	r3, [pc, #192]	; (800b6ec <__swsetup_r+0xc4>)
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	0005      	movs	r5, r0
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	000c      	movs	r4, r1
 800b632:	2800      	cmp	r0, #0
 800b634:	d004      	beq.n	800b640 <__swsetup_r+0x18>
 800b636:	6a03      	ldr	r3, [r0, #32]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <__swsetup_r+0x18>
 800b63c:	f7fd fefe 	bl	800943c <__sinit>
 800b640:	230c      	movs	r3, #12
 800b642:	5ee2      	ldrsh	r2, [r4, r3]
 800b644:	b293      	uxth	r3, r2
 800b646:	0711      	lsls	r1, r2, #28
 800b648:	d423      	bmi.n	800b692 <__swsetup_r+0x6a>
 800b64a:	06d9      	lsls	r1, r3, #27
 800b64c:	d407      	bmi.n	800b65e <__swsetup_r+0x36>
 800b64e:	2309      	movs	r3, #9
 800b650:	2001      	movs	r0, #1
 800b652:	602b      	str	r3, [r5, #0]
 800b654:	3337      	adds	r3, #55	; 0x37
 800b656:	4313      	orrs	r3, r2
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	4240      	negs	r0, r0
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	075b      	lsls	r3, r3, #29
 800b660:	d513      	bpl.n	800b68a <__swsetup_r+0x62>
 800b662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b664:	2900      	cmp	r1, #0
 800b666:	d008      	beq.n	800b67a <__swsetup_r+0x52>
 800b668:	0023      	movs	r3, r4
 800b66a:	3344      	adds	r3, #68	; 0x44
 800b66c:	4299      	cmp	r1, r3
 800b66e:	d002      	beq.n	800b676 <__swsetup_r+0x4e>
 800b670:	0028      	movs	r0, r5
 800b672:	f7fe feb3 	bl	800a3dc <_free_r>
 800b676:	2300      	movs	r3, #0
 800b678:	6363      	str	r3, [r4, #52]	; 0x34
 800b67a:	2224      	movs	r2, #36	; 0x24
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	4393      	bics	r3, r2
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	2300      	movs	r3, #0
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	2308      	movs	r3, #8
 800b68c:	89a2      	ldrh	r2, [r4, #12]
 800b68e:	4313      	orrs	r3, r2
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10b      	bne.n	800b6b0 <__swsetup_r+0x88>
 800b698:	21a0      	movs	r1, #160	; 0xa0
 800b69a:	2280      	movs	r2, #128	; 0x80
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	0089      	lsls	r1, r1, #2
 800b6a0:	0092      	lsls	r2, r2, #2
 800b6a2:	400b      	ands	r3, r1
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d003      	beq.n	800b6b0 <__swsetup_r+0x88>
 800b6a8:	0021      	movs	r1, r4
 800b6aa:	0028      	movs	r0, r5
 800b6ac:	f000 f892 	bl	800b7d4 <__smakebuf_r>
 800b6b0:	220c      	movs	r2, #12
 800b6b2:	5ea3      	ldrsh	r3, [r4, r2]
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	001a      	movs	r2, r3
 800b6b8:	b299      	uxth	r1, r3
 800b6ba:	4002      	ands	r2, r0
 800b6bc:	4203      	tst	r3, r0
 800b6be:	d00f      	beq.n	800b6e0 <__swsetup_r+0xb8>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6962      	ldr	r2, [r4, #20]
 800b6c6:	4252      	negs	r2, r2
 800b6c8:	61a2      	str	r2, [r4, #24]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	4282      	cmp	r2, r0
 800b6d0:	d1c4      	bne.n	800b65c <__swsetup_r+0x34>
 800b6d2:	0609      	lsls	r1, r1, #24
 800b6d4:	d5c2      	bpl.n	800b65c <__swsetup_r+0x34>
 800b6d6:	2240      	movs	r2, #64	; 0x40
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	3801      	subs	r0, #1
 800b6de:	e7bd      	b.n	800b65c <__swsetup_r+0x34>
 800b6e0:	0788      	lsls	r0, r1, #30
 800b6e2:	d400      	bmi.n	800b6e6 <__swsetup_r+0xbe>
 800b6e4:	6962      	ldr	r2, [r4, #20]
 800b6e6:	60a2      	str	r2, [r4, #8]
 800b6e8:	e7ef      	b.n	800b6ca <__swsetup_r+0xa2>
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	20000064 	.word	0x20000064

0800b6f0 <_raise_r>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	000d      	movs	r5, r1
 800b6f6:	291f      	cmp	r1, #31
 800b6f8:	d904      	bls.n	800b704 <_raise_r+0x14>
 800b6fa:	2316      	movs	r3, #22
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	2001      	movs	r0, #1
 800b700:	4240      	negs	r0, r0
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d004      	beq.n	800b714 <_raise_r+0x24>
 800b70a:	008a      	lsls	r2, r1, #2
 800b70c:	189b      	adds	r3, r3, r2
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	2a00      	cmp	r2, #0
 800b712:	d108      	bne.n	800b726 <_raise_r+0x36>
 800b714:	0020      	movs	r0, r4
 800b716:	f000 f831 	bl	800b77c <_getpid_r>
 800b71a:	002a      	movs	r2, r5
 800b71c:	0001      	movs	r1, r0
 800b71e:	0020      	movs	r0, r4
 800b720:	f000 f81a 	bl	800b758 <_kill_r>
 800b724:	e7ed      	b.n	800b702 <_raise_r+0x12>
 800b726:	2000      	movs	r0, #0
 800b728:	2a01      	cmp	r2, #1
 800b72a:	d0ea      	beq.n	800b702 <_raise_r+0x12>
 800b72c:	1c51      	adds	r1, r2, #1
 800b72e:	d103      	bne.n	800b738 <_raise_r+0x48>
 800b730:	2316      	movs	r3, #22
 800b732:	3001      	adds	r0, #1
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	e7e4      	b.n	800b702 <_raise_r+0x12>
 800b738:	2400      	movs	r4, #0
 800b73a:	0028      	movs	r0, r5
 800b73c:	601c      	str	r4, [r3, #0]
 800b73e:	4790      	blx	r2
 800b740:	0020      	movs	r0, r4
 800b742:	e7de      	b.n	800b702 <_raise_r+0x12>

0800b744 <raise>:
 800b744:	b510      	push	{r4, lr}
 800b746:	4b03      	ldr	r3, [pc, #12]	; (800b754 <raise+0x10>)
 800b748:	0001      	movs	r1, r0
 800b74a:	6818      	ldr	r0, [r3, #0]
 800b74c:	f7ff ffd0 	bl	800b6f0 <_raise_r>
 800b750:	bd10      	pop	{r4, pc}
 800b752:	46c0      	nop			; (mov r8, r8)
 800b754:	20000064 	.word	0x20000064

0800b758 <_kill_r>:
 800b758:	2300      	movs	r3, #0
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	4d06      	ldr	r5, [pc, #24]	; (800b778 <_kill_r+0x20>)
 800b75e:	0004      	movs	r4, r0
 800b760:	0008      	movs	r0, r1
 800b762:	0011      	movs	r1, r2
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f7f8 fb05 	bl	8003d74 <_kill>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d103      	bne.n	800b776 <_kill_r+0x1e>
 800b76e:	682b      	ldr	r3, [r5, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d000      	beq.n	800b776 <_kill_r+0x1e>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	20000614 	.word	0x20000614

0800b77c <_getpid_r>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	f7f8 faf3 	bl	8003d68 <_getpid>
 800b782:	bd10      	pop	{r4, pc}

0800b784 <__swhatbuf_r>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	000e      	movs	r6, r1
 800b788:	001d      	movs	r5, r3
 800b78a:	230e      	movs	r3, #14
 800b78c:	5ec9      	ldrsh	r1, [r1, r3]
 800b78e:	0014      	movs	r4, r2
 800b790:	b096      	sub	sp, #88	; 0x58
 800b792:	2900      	cmp	r1, #0
 800b794:	da0c      	bge.n	800b7b0 <__swhatbuf_r+0x2c>
 800b796:	89b2      	ldrh	r2, [r6, #12]
 800b798:	2380      	movs	r3, #128	; 0x80
 800b79a:	0011      	movs	r1, r2
 800b79c:	4019      	ands	r1, r3
 800b79e:	421a      	tst	r2, r3
 800b7a0:	d013      	beq.n	800b7ca <__swhatbuf_r+0x46>
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	3b40      	subs	r3, #64	; 0x40
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	6029      	str	r1, [r5, #0]
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	b016      	add	sp, #88	; 0x58
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}
 800b7b0:	466a      	mov	r2, sp
 800b7b2:	f000 f84d 	bl	800b850 <_fstat_r>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	dbed      	blt.n	800b796 <__swhatbuf_r+0x12>
 800b7ba:	23f0      	movs	r3, #240	; 0xf0
 800b7bc:	9901      	ldr	r1, [sp, #4]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	4019      	ands	r1, r3
 800b7c2:	4b03      	ldr	r3, [pc, #12]	; (800b7d0 <__swhatbuf_r+0x4c>)
 800b7c4:	18c9      	adds	r1, r1, r3
 800b7c6:	424b      	negs	r3, r1
 800b7c8:	4159      	adcs	r1, r3
 800b7ca:	2380      	movs	r3, #128	; 0x80
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	e7ea      	b.n	800b7a6 <__swhatbuf_r+0x22>
 800b7d0:	ffffe000 	.word	0xffffe000

0800b7d4 <__smakebuf_r>:
 800b7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d6:	2602      	movs	r6, #2
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	0005      	movs	r5, r0
 800b7dc:	000c      	movs	r4, r1
 800b7de:	4233      	tst	r3, r6
 800b7e0:	d006      	beq.n	800b7f0 <__smakebuf_r+0x1c>
 800b7e2:	0023      	movs	r3, r4
 800b7e4:	3347      	adds	r3, #71	; 0x47
 800b7e6:	6023      	str	r3, [r4, #0]
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	6163      	str	r3, [r4, #20]
 800b7ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b7f0:	466a      	mov	r2, sp
 800b7f2:	ab01      	add	r3, sp, #4
 800b7f4:	f7ff ffc6 	bl	800b784 <__swhatbuf_r>
 800b7f8:	9900      	ldr	r1, [sp, #0]
 800b7fa:	0007      	movs	r7, r0
 800b7fc:	0028      	movs	r0, r5
 800b7fe:	f7fe fe63 	bl	800a4c8 <_malloc_r>
 800b802:	2800      	cmp	r0, #0
 800b804:	d108      	bne.n	800b818 <__smakebuf_r+0x44>
 800b806:	220c      	movs	r2, #12
 800b808:	5ea3      	ldrsh	r3, [r4, r2]
 800b80a:	059a      	lsls	r2, r3, #22
 800b80c:	d4ef      	bmi.n	800b7ee <__smakebuf_r+0x1a>
 800b80e:	2203      	movs	r2, #3
 800b810:	4393      	bics	r3, r2
 800b812:	431e      	orrs	r6, r3
 800b814:	81a6      	strh	r6, [r4, #12]
 800b816:	e7e4      	b.n	800b7e2 <__smakebuf_r+0xe>
 800b818:	2380      	movs	r3, #128	; 0x80
 800b81a:	89a2      	ldrh	r2, [r4, #12]
 800b81c:	6020      	str	r0, [r4, #0]
 800b81e:	4313      	orrs	r3, r2
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	6120      	str	r0, [r4, #16]
 800b826:	6163      	str	r3, [r4, #20]
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00c      	beq.n	800b848 <__smakebuf_r+0x74>
 800b82e:	0028      	movs	r0, r5
 800b830:	230e      	movs	r3, #14
 800b832:	5ee1      	ldrsh	r1, [r4, r3]
 800b834:	f000 f81e 	bl	800b874 <_isatty_r>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d005      	beq.n	800b848 <__smakebuf_r+0x74>
 800b83c:	2303      	movs	r3, #3
 800b83e:	89a2      	ldrh	r2, [r4, #12]
 800b840:	439a      	bics	r2, r3
 800b842:	3b02      	subs	r3, #2
 800b844:	4313      	orrs	r3, r2
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	433b      	orrs	r3, r7
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	e7ce      	b.n	800b7ee <__smakebuf_r+0x1a>

0800b850 <_fstat_r>:
 800b850:	2300      	movs	r3, #0
 800b852:	b570      	push	{r4, r5, r6, lr}
 800b854:	4d06      	ldr	r5, [pc, #24]	; (800b870 <_fstat_r+0x20>)
 800b856:	0004      	movs	r4, r0
 800b858:	0008      	movs	r0, r1
 800b85a:	0011      	movs	r1, r2
 800b85c:	602b      	str	r3, [r5, #0]
 800b85e:	f7f8 fae8 	bl	8003e32 <_fstat>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d103      	bne.n	800b86e <_fstat_r+0x1e>
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d000      	beq.n	800b86e <_fstat_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	20000614 	.word	0x20000614

0800b874 <_isatty_r>:
 800b874:	2300      	movs	r3, #0
 800b876:	b570      	push	{r4, r5, r6, lr}
 800b878:	4d06      	ldr	r5, [pc, #24]	; (800b894 <_isatty_r+0x20>)
 800b87a:	0004      	movs	r4, r0
 800b87c:	0008      	movs	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f8 fae5 	bl	8003e4e <_isatty>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d103      	bne.n	800b890 <_isatty_r+0x1c>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d000      	beq.n	800b890 <_isatty_r+0x1c>
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	bd70      	pop	{r4, r5, r6, pc}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	20000614 	.word	0x20000614

0800b898 <_init>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	46c0      	nop			; (mov r8, r8)
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr

0800b8a4 <_fini>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr
