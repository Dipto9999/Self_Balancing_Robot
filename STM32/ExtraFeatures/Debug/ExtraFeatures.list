
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b670  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbcc  0800bbcc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbd4  0800bbd4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd4  0800bbd4  0001bbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bbdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001d4  0800bdb0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800bdb0  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014437  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e54  00000000  00000000  00034676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000374d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3d  00000000  00000000  00038710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000461a  00000000  00000000  0003954d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001758f  00000000  00000000  0003db67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078954  00000000  00000000  000550f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052c8  00000000  00000000  000cda4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d2d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b718 	.word	0x0800b718

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800b718 	.word	0x0800b718

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa8f 	bl	8001960 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9df 	bl	8001810 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa81 	bl	8001960 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa77 	bl	8001960 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa07 	bl	8001894 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9fd 	bl	8001894 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5f 	bl	8000984 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa6b 	bl	80009d0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa61 	bl	80009d0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 f932 	bl	8002840 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 f92d 	bl	8002840 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	464f      	mov	r7, r9
 8000754:	4646      	mov	r6, r8
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0047      	lsls	r7, r0, #1
 800075e:	1c0c      	adds	r4, r1, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	0e3f      	lsrs	r7, r7, #24
 8000764:	0fc6      	lsrs	r6, r0, #31
 8000766:	2f00      	cmp	r7, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fdiv+0x1c>
 800076a:	e06f      	b.n	800084c <__aeabi_fdiv+0xfc>
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x22>
 8000770:	e074      	b.n	800085c <__aeabi_fdiv+0x10c>
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	00ed      	lsls	r5, r5, #3
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4315      	orrs	r5, r2
 8000780:	3f7f      	subs	r7, #127	; 0x7f
 8000782:	0263      	lsls	r3, r4, #9
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4698      	mov	r8, r3
 8000788:	0063      	lsls	r3, r4, #1
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	0fe4      	lsrs	r4, r4, #31
 800078e:	2b00      	cmp	r3, #0
 8000790:	d04d      	beq.n	800082e <__aeabi_fdiv+0xde>
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d045      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 8000796:	4642      	mov	r2, r8
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	04c9      	lsls	r1, r1, #19
 800079e:	4311      	orrs	r1, r2
 80007a0:	4688      	mov	r8, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	3b7f      	subs	r3, #127	; 0x7f
 80007a6:	0031      	movs	r1, r6
 80007a8:	1aff      	subs	r7, r7, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	4061      	eors	r1, r4
 80007ae:	b2c9      	uxtb	r1, r1
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d900      	bls.n	80007b6 <__aeabi_fdiv+0x66>
 80007b4:	e0b8      	b.n	8000928 <__aeabi_fdiv+0x1d8>
 80007b6:	4870      	ldr	r0, [pc, #448]	; (8000978 <__aeabi_fdiv+0x228>)
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	58c3      	ldr	r3, [r0, r3]
 80007bc:	469f      	mov	pc, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4698      	mov	r8, r3
 80007c2:	0026      	movs	r6, r4
 80007c4:	4645      	mov	r5, r8
 80007c6:	4692      	mov	sl, r2
 80007c8:	4653      	mov	r3, sl
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fdiv+0x80>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fdiv+0x19c>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fdiv+0x86>
 80007d4:	e0a1      	b.n	800091a <__aeabi_fdiv+0x1ca>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d018      	beq.n	800080c <__aeabi_fdiv+0xbc>
 80007da:	003b      	movs	r3, r7
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd6d      	ble.n	80008be <__aeabi_fdiv+0x16e>
 80007e2:	076a      	lsls	r2, r5, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007e6:	220f      	movs	r2, #15
 80007e8:	402a      	ands	r2, r5
 80007ea:	2a04      	cmp	r2, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	3504      	adds	r5, #4
 80007f0:	012a      	lsls	r2, r5, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0xac>
 80007f4:	4b61      	ldr	r3, [pc, #388]	; (800097c <__aeabi_fdiv+0x22c>)
 80007f6:	401d      	ands	r5, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3380      	adds	r3, #128	; 0x80
 80007fc:	2bfe      	cmp	r3, #254	; 0xfe
 80007fe:	dd00      	ble.n	8000802 <__aeabi_fdiv+0xb2>
 8000800:	e074      	b.n	80008ec <__aeabi_fdiv+0x19c>
 8000802:	01aa      	lsls	r2, r5, #6
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e002      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800080a:	000e      	movs	r6, r1
 800080c:	2000      	movs	r0, #0
 800080e:	2200      	movs	r2, #0
 8000810:	05c0      	lsls	r0, r0, #23
 8000812:	07f6      	lsls	r6, r6, #31
 8000814:	4310      	orrs	r0, r2
 8000816:	4330      	orrs	r0, r6
 8000818:	bce0      	pop	{r5, r6, r7}
 800081a:	46ba      	mov	sl, r7
 800081c:	46b1      	mov	r9, r6
 800081e:	46a8      	mov	r8, r5
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0x158>
 8000828:	2202      	movs	r2, #2
 800082a:	3fff      	subs	r7, #255	; 0xff
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0xe6>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0x140>
 8000834:	2201      	movs	r2, #1
 8000836:	0031      	movs	r1, r6
 8000838:	464b      	mov	r3, r9
 800083a:	4061      	eors	r1, r4
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0x166>
 8000844:	484e      	ldr	r0, [pc, #312]	; (8000980 <__aeabi_fdiv+0x230>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2d00      	cmp	r5, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0x128>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e792      	b.n	8000782 <__aeabi_fdiv+0x32>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0x11c>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e78a      	b.n	8000782 <__aeabi_fdiv+0x32>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	; 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e784      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000878:	0028      	movs	r0, r5
 800087a:	f001 ffc3 	bl	8002804 <__clzsi2>
 800087e:	2776      	movs	r7, #118	; 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409d      	lsls	r5, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e778      	b.n	8000782 <__aeabi_fdiv+0x32>
 8000890:	4640      	mov	r0, r8
 8000892:	f001 ffb7 	bl	8002804 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	; 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	4690      	mov	r8, r2
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	2200      	movs	r2, #0
 80008a6:	e77e      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	33fc      	adds	r3, #252	; 0xfc
 80008b2:	2203      	movs	r2, #3
 80008b4:	e777      	b.n	80007a6 <__aeabi_fdiv+0x56>
 80008b6:	000e      	movs	r6, r1
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	e7a8      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008be:	2201      	movs	r2, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b1b      	cmp	r3, #27
 80008c4:	dca2      	bgt.n	800080c <__aeabi_fdiv+0xbc>
 80008c6:	379e      	adds	r7, #158	; 0x9e
 80008c8:	002a      	movs	r2, r5
 80008ca:	40bd      	lsls	r5, r7
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	1e6b      	subs	r3, r5, #1
 80008d0:	419d      	sbcs	r5, r3
 80008d2:	4315      	orrs	r5, r2
 80008d4:	076a      	lsls	r2, r5, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008d8:	220f      	movs	r2, #15
 80008da:	402a      	ands	r2, r5
 80008dc:	2a04      	cmp	r2, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x192>
 80008e0:	3504      	adds	r5, #4
 80008e2:	016a      	lsls	r2, r5, #5
 80008e4:	d544      	bpl.n	8000970 <__aeabi_fdiv+0x220>
 80008e6:	2001      	movs	r0, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	e791      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	e78e      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	2600      	movs	r6, #0
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	e789      	b.n	8000810 <__aeabi_fdiv+0xc0>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4698      	mov	r8, r3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	4215      	tst	r5, r2
 8000906:	d008      	beq.n	800091a <__aeabi_fdiv+0x1ca>
 8000908:	4643      	mov	r3, r8
 800090a:	4213      	tst	r3, r2
 800090c:	d105      	bne.n	800091a <__aeabi_fdiv+0x1ca>
 800090e:	431a      	orrs	r2, r3
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0026      	movs	r6, r4
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e77a      	b.n	8000810 <__aeabi_fdiv+0xc0>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	432a      	orrs	r2, r5
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e773      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000928:	4642      	mov	r2, r8
 800092a:	016b      	lsls	r3, r5, #5
 800092c:	0155      	lsls	r5, r2, #5
 800092e:	42ab      	cmp	r3, r5
 8000930:	d21a      	bcs.n	8000968 <__aeabi_fdiv+0x218>
 8000932:	201b      	movs	r0, #27
 8000934:	2200      	movs	r2, #0
 8000936:	3f01      	subs	r7, #1
 8000938:	2601      	movs	r6, #1
 800093a:	001c      	movs	r4, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2c00      	cmp	r4, #0
 8000942:	db01      	blt.n	8000948 <__aeabi_fdiv+0x1f8>
 8000944:	429d      	cmp	r5, r3
 8000946:	d801      	bhi.n	800094c <__aeabi_fdiv+0x1fc>
 8000948:	1b5b      	subs	r3, r3, r5
 800094a:	4332      	orrs	r2, r6
 800094c:	3801      	subs	r0, #1
 800094e:	2800      	cmp	r0, #0
 8000950:	d1f3      	bne.n	800093a <__aeabi_fdiv+0x1ea>
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	4183      	sbcs	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	001d      	movs	r5, r3
 800095a:	003b      	movs	r3, r7
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	000e      	movs	r6, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd00      	ble.n	8000966 <__aeabi_fdiv+0x216>
 8000964:	e73d      	b.n	80007e2 <__aeabi_fdiv+0x92>
 8000966:	e7aa      	b.n	80008be <__aeabi_fdiv+0x16e>
 8000968:	201a      	movs	r0, #26
 800096a:	2201      	movs	r2, #1
 800096c:	1b5b      	subs	r3, r3, r5
 800096e:	e7e3      	b.n	8000938 <__aeabi_fdiv+0x1e8>
 8000970:	01aa      	lsls	r2, r5, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a52      	lsrs	r2, r2, #9
 8000976:	e74b      	b.n	8000810 <__aeabi_fdiv+0xc0>
 8000978:	0800b730 	.word	0x0800b730
 800097c:	f7ffffff 	.word	0xf7ffffff
 8000980:	0800b770 	.word	0x0800b770

08000984 <__eqsf2>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0245      	lsls	r5, r0, #9
 800098a:	024e      	lsls	r6, r1, #9
 800098c:	004c      	lsls	r4, r1, #1
 800098e:	0fc3      	lsrs	r3, r0, #31
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	2001      	movs	r0, #1
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0a76      	lsrs	r6, r6, #9
 8000998:	0e24      	lsrs	r4, r4, #24
 800099a:	0fc9      	lsrs	r1, r1, #31
 800099c:	2aff      	cmp	r2, #255	; 0xff
 800099e:	d006      	beq.n	80009ae <__eqsf2+0x2a>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d003      	beq.n	80009ac <__eqsf2+0x28>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d101      	bne.n	80009ac <__eqsf2+0x28>
 80009a8:	42b5      	cmp	r5, r6
 80009aa:	d006      	beq.n	80009ba <__eqsf2+0x36>
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d1fc      	bne.n	80009ac <__eqsf2+0x28>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d1fa      	bne.n	80009ac <__eqsf2+0x28>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1f8      	bne.n	80009ac <__eqsf2+0x28>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d006      	beq.n	80009cc <__eqsf2+0x48>
 80009be:	2001      	movs	r0, #1
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d1f3      	bne.n	80009ac <__eqsf2+0x28>
 80009c4:	0028      	movs	r0, r5
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	e7ef      	b.n	80009ac <__eqsf2+0x28>
 80009cc:	2000      	movs	r0, #0
 80009ce:	e7ed      	b.n	80009ac <__eqsf2+0x28>

080009d0 <__gesf2>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	0042      	lsls	r2, r0, #1
 80009d4:	0245      	lsls	r5, r0, #9
 80009d6:	024e      	lsls	r6, r1, #9
 80009d8:	004c      	lsls	r4, r1, #1
 80009da:	0fc3      	lsrs	r3, r0, #31
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e12      	lsrs	r2, r2, #24
 80009e0:	0a76      	lsrs	r6, r6, #9
 80009e2:	0e24      	lsrs	r4, r4, #24
 80009e4:	0fc8      	lsrs	r0, r1, #31
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d01b      	beq.n	8000a22 <__gesf2+0x52>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d00e      	beq.n	8000a0c <__gesf2+0x3c>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d11b      	bne.n	8000a2a <__gesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d101      	bne.n	80009fa <__gesf2+0x2a>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d01c      	beq.n	8000a34 <__gesf2+0x64>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d00c      	beq.n	8000a18 <__gesf2+0x48>
 80009fe:	4283      	cmp	r3, r0
 8000a00:	d01c      	beq.n	8000a3c <__gesf2+0x6c>
 8000a02:	2102      	movs	r1, #2
 8000a04:	1e58      	subs	r0, r3, #1
 8000a06:	4008      	ands	r0, r1
 8000a08:	3801      	subs	r0, #1
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d122      	bne.n	8000a56 <__gesf2+0x86>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d1f4      	bne.n	80009fe <__gesf2+0x2e>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d1f2      	bne.n	80009fe <__gesf2+0x2e>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f6      	bne.n	8000a0a <__gesf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	4240      	negs	r0, r0
 8000a20:	e7f3      	b.n	8000a0a <__gesf2+0x3a>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d117      	bne.n	8000a56 <__gesf2+0x86>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d0f0      	beq.n	8000a0c <__gesf2+0x3c>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1e7      	bne.n	80009fe <__gesf2+0x2e>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1e5      	bne.n	80009fe <__gesf2+0x2e>
 8000a32:	e7e6      	b.n	8000a02 <__gesf2+0x32>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0e7      	beq.n	8000a0a <__gesf2+0x3a>
 8000a3a:	e7e2      	b.n	8000a02 <__gesf2+0x32>
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	dc05      	bgt.n	8000a4c <__gesf2+0x7c>
 8000a40:	dbea      	blt.n	8000a18 <__gesf2+0x48>
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d802      	bhi.n	8000a4c <__gesf2+0x7c>
 8000a46:	d3e7      	bcc.n	8000a18 <__gesf2+0x48>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7de      	b.n	8000a0a <__gesf2+0x3a>
 8000a4c:	4243      	negs	r3, r0
 8000a4e:	4158      	adcs	r0, r3
 8000a50:	0040      	lsls	r0, r0, #1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7d9      	b.n	8000a0a <__gesf2+0x3a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	4240      	negs	r0, r0
 8000a5a:	e7d6      	b.n	8000a0a <__gesf2+0x3a>

08000a5c <__lesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d00b      	beq.n	8000a8e <__lesf2+0x32>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00d      	beq.n	8000a96 <__lesf2+0x3a>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11f      	bne.n	8000abe <__lesf2+0x62>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d116      	bne.n	8000ab0 <__lesf2+0x54>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d114      	bne.n	8000ab0 <__lesf2+0x54>
 8000a86:	2000      	movs	r0, #0
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d010      	beq.n	8000aae <__lesf2+0x52>
 8000a8c:	e009      	b.n	8000aa2 <__lesf2+0x46>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d10c      	bne.n	8000aac <__lesf2+0x50>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d113      	bne.n	8000abe <__lesf2+0x62>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d108      	bne.n	8000aac <__lesf2+0x50>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d008      	beq.n	8000ab0 <__lesf2+0x54>
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d012      	beq.n	8000ac8 <__lesf2+0x6c>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	1e58      	subs	r0, r3, #1
 8000aa6:	4008      	ands	r0, r1
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e000      	b.n	8000aae <__lesf2+0x52>
 8000aac:	2002      	movs	r0, #2
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d1f4      	bne.n	8000a9e <__lesf2+0x42>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1fa      	bne.n	8000aae <__lesf2+0x52>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4240      	negs	r0, r0
 8000abc:	e7f7      	b.n	8000aae <__lesf2+0x52>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1ed      	bne.n	8000a9e <__lesf2+0x42>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1eb      	bne.n	8000a9e <__lesf2+0x42>
 8000ac6:	e7ec      	b.n	8000aa2 <__lesf2+0x46>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__lesf2+0x7c>
 8000acc:	dbf2      	blt.n	8000ab4 <__lesf2+0x58>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__lesf2+0x7c>
 8000ad2:	d3ef      	bcc.n	8000ab4 <__lesf2+0x58>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ea      	b.n	8000aae <__lesf2+0x52>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e5      	b.n	8000aae <__lesf2+0x52>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__aeabi_ui2f>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	1e04      	subs	r4, r0, #0
 8000ae8:	d00e      	beq.n	8000b08 <__aeabi_ui2f+0x24>
 8000aea:	f001 fe8b 	bl	8002804 <__clzsi2>
 8000aee:	239e      	movs	r3, #158	; 0x9e
 8000af0:	0001      	movs	r1, r0
 8000af2:	1a1b      	subs	r3, r3, r0
 8000af4:	2b96      	cmp	r3, #150	; 0x96
 8000af6:	dc0c      	bgt.n	8000b12 <__aeabi_ui2f+0x2e>
 8000af8:	2808      	cmp	r0, #8
 8000afa:	d02c      	beq.n	8000b56 <__aeabi_ui2f+0x72>
 8000afc:	3908      	subs	r1, #8
 8000afe:	408c      	lsls	r4, r1
 8000b00:	0264      	lsls	r4, r4, #9
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	e001      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	05c0      	lsls	r0, r0, #23
 8000b0e:	4320      	orrs	r0, r4
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b99      	cmp	r3, #153	; 0x99
 8000b14:	dd0a      	ble.n	8000b2c <__aeabi_ui2f+0x48>
 8000b16:	0002      	movs	r2, r0
 8000b18:	0020      	movs	r0, r4
 8000b1a:	321b      	adds	r2, #27
 8000b1c:	4090      	lsls	r0, r2
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1e50      	subs	r0, r2, #1
 8000b22:	4182      	sbcs	r2, r0
 8000b24:	2005      	movs	r0, #5
 8000b26:	1a40      	subs	r0, r0, r1
 8000b28:	40c4      	lsrs	r4, r0
 8000b2a:	4314      	orrs	r4, r2
 8000b2c:	2905      	cmp	r1, #5
 8000b2e:	dc16      	bgt.n	8000b5e <__aeabi_ui2f+0x7a>
 8000b30:	0022      	movs	r2, r4
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b34:	4002      	ands	r2, r0
 8000b36:	0765      	lsls	r5, r4, #29
 8000b38:	d009      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	402c      	ands	r4, r5
 8000b3e:	2c04      	cmp	r4, #4
 8000b40:	d005      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0154      	lsls	r4, r2, #5
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b48:	239f      	movs	r3, #159	; 0x9f
 8000b4a:	4002      	ands	r2, r0
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	0a54      	lsrs	r4, r2, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e7da      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	2096      	movs	r0, #150	; 0x96
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	e7d6      	b.n	8000b0c <__aeabi_ui2f+0x28>
 8000b5e:	1f4a      	subs	r2, r1, #5
 8000b60:	4094      	lsls	r4, r2
 8000b62:	0022      	movs	r2, r4
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <__aeabi_ui2f+0x8c>)
 8000b66:	4002      	ands	r2, r0
 8000b68:	0765      	lsls	r5, r4, #29
 8000b6a:	d0f0      	beq.n	8000b4e <__aeabi_ui2f+0x6a>
 8000b6c:	e7e5      	b.n	8000b3a <__aeabi_ui2f+0x56>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fbffffff 	.word	0xfbffffff

08000b74 <__aeabi_dadd>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0004      	movs	r4, r0
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	001f      	movs	r7, r3
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0010      	movs	r0, r2
 8000b86:	004e      	lsls	r6, r1, #1
 8000b88:	0a5b      	lsrs	r3, r3, #9
 8000b8a:	0fcd      	lsrs	r5, r1, #31
 8000b8c:	0f61      	lsrs	r1, r4, #29
 8000b8e:	007a      	lsls	r2, r7, #1
 8000b90:	4319      	orrs	r1, r3
 8000b92:	00e3      	lsls	r3, r4, #3
 8000b94:	033c      	lsls	r4, r7, #12
 8000b96:	0fff      	lsrs	r7, r7, #31
 8000b98:	46bc      	mov	ip, r7
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	0f47      	lsrs	r7, r0, #29
 8000b9e:	4327      	orrs	r7, r4
 8000ba0:	0d76      	lsrs	r6, r6, #21
 8000ba2:	0d52      	lsrs	r2, r2, #21
 8000ba4:	00c0      	lsls	r0, r0, #3
 8000ba6:	46b9      	mov	r9, r7
 8000ba8:	4680      	mov	r8, r0
 8000baa:	1ab7      	subs	r7, r6, r2
 8000bac:	4565      	cmp	r5, ip
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x3e>
 8000bb0:	e09b      	b.n	8000cea <__aeabi_dadd+0x176>
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_dadd+0x44>
 8000bb6:	e084      	b.n	8000cc2 <__aeabi_dadd+0x14e>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x4a>
 8000bbc:	e0be      	b.n	8000d3c <__aeabi_dadd+0x1c8>
 8000bbe:	4ac8      	ldr	r2, [pc, #800]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000bc0:	4296      	cmp	r6, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x52>
 8000bc4:	e124      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0412      	lsls	r2, r2, #16
 8000bcc:	4314      	orrs	r4, r2
 8000bce:	46a1      	mov	r9, r4
 8000bd0:	2f38      	cmp	r7, #56	; 0x38
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x62>
 8000bd4:	e167      	b.n	8000ea6 <__aeabi_dadd+0x332>
 8000bd6:	2f1f      	cmp	r7, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x68>
 8000bda:	e1d6      	b.n	8000f8a <__aeabi_dadd+0x416>
 8000bdc:	2220      	movs	r2, #32
 8000bde:	464c      	mov	r4, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4094      	lsls	r4, r2
 8000be4:	46a2      	mov	sl, r4
 8000be6:	4644      	mov	r4, r8
 8000be8:	40fc      	lsrs	r4, r7
 8000bea:	0020      	movs	r0, r4
 8000bec:	4654      	mov	r4, sl
 8000bee:	4304      	orrs	r4, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4090      	lsls	r0, r2
 8000bf4:	1e42      	subs	r2, r0, #1
 8000bf6:	4190      	sbcs	r0, r2
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	40fa      	lsrs	r2, r7
 8000bfc:	4304      	orrs	r4, r0
 8000bfe:	1a89      	subs	r1, r1, r2
 8000c00:	1b1c      	subs	r4, r3, r4
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	4192      	sbcs	r2, r2
 8000c06:	4252      	negs	r2, r2
 8000c08:	1a8b      	subs	r3, r1, r2
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_dadd+0xa0>
 8000c12:	e0d4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000c14:	4653      	mov	r3, sl
 8000c16:	025a      	lsls	r2, r3, #9
 8000c18:	0a53      	lsrs	r3, r2, #9
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0xb0>
 8000c22:	e104      	b.n	8000e2e <__aeabi_dadd+0x2ba>
 8000c24:	4650      	mov	r0, sl
 8000c26:	f001 fded 	bl	8002804 <__clzsi2>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0020      	movs	r0, r4
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	4651      	mov	r1, sl
 8000c36:	40d0      	lsrs	r0, r2
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	da00      	bge.n	8000c46 <__aeabi_dadd+0xd2>
 8000c44:	e102      	b.n	8000e4c <__aeabi_dadd+0x2d8>
 8000c46:	1b9b      	subs	r3, r3, r6
 8000c48:	1c59      	adds	r1, r3, #1
 8000c4a:	291f      	cmp	r1, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0xdc>
 8000c4e:	e0a7      	b.n	8000da0 <__aeabi_dadd+0x22c>
 8000c50:	2320      	movs	r3, #32
 8000c52:	0010      	movs	r0, r2
 8000c54:	0026      	movs	r6, r4
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	4098      	lsls	r0, r3
 8000c5c:	40ce      	lsrs	r6, r1
 8000c5e:	40ca      	lsrs	r2, r1
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4330      	orrs	r0, r6
 8000c66:	4692      	mov	sl, r2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4304      	orrs	r4, r0
 8000c6c:	0763      	lsls	r3, r4, #29
 8000c6e:	d009      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d005      	beq.n	8000c84 <__aeabi_dadd+0x110>
 8000c78:	1d23      	adds	r3, r4, #4
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	41a4      	sbcs	r4, r4
 8000c7e:	4264      	negs	r4, r4
 8000c80:	44a2      	add	sl, r4
 8000c82:	001c      	movs	r4, r3
 8000c84:	4653      	mov	r3, sl
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_dadd+0x118>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_dadd+0x250>
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000c8e:	3601      	adds	r6, #1
 8000c90:	429e      	cmp	r6, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x122>
 8000c94:	e0b8      	b.n	8000e08 <__aeabi_dadd+0x294>
 8000c96:	4653      	mov	r3, sl
 8000c98:	4992      	ldr	r1, [pc, #584]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000c9a:	08e4      	lsrs	r4, r4, #3
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	0572      	lsls	r2, r6, #21
 8000ca6:	024c      	lsls	r4, r1, #9
 8000ca8:	0b24      	lsrs	r4, r4, #12
 8000caa:	0d52      	lsrs	r2, r2, #21
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	07ed      	lsls	r5, r5, #31
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	432a      	orrs	r2, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	bce0      	pop	{r5, r6, r7}
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	46b1      	mov	r9, r6
 8000cbe:	46a8      	mov	r8, r5
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d048      	beq.n	8000d58 <__aeabi_dadd+0x1e4>
 8000cc6:	1b97      	subs	r7, r2, r6
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x15a>
 8000ccc:	e10e      	b.n	8000eec <__aeabi_dadd+0x378>
 8000cce:	000c      	movs	r4, r1
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x162>
 8000cd4:	e1b7      	b.n	8001046 <__aeabi_dadd+0x4d2>
 8000cd6:	1e7c      	subs	r4, r7, #1
 8000cd8:	2f01      	cmp	r7, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16a>
 8000cdc:	e226      	b.n	800112c <__aeabi_dadd+0x5b8>
 8000cde:	4d80      	ldr	r5, [pc, #512]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000ce0:	42af      	cmp	r7, r5
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x172>
 8000ce4:	e1d5      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ce6:	0027      	movs	r7, r4
 8000ce8:	e107      	b.n	8000efa <__aeabi_dadd+0x386>
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_dadd+0x17c>
 8000cee:	e0b2      	b.n	8000e56 <__aeabi_dadd+0x2e2>
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d047      	beq.n	8000d84 <__aeabi_dadd+0x210>
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000cf6:	4296      	cmp	r6, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x188>
 8000cfa:	e089      	b.n	8000e10 <__aeabi_dadd+0x29c>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	464c      	mov	r4, r9
 8000d00:	0412      	lsls	r2, r2, #16
 8000d02:	4314      	orrs	r4, r2
 8000d04:	46a1      	mov	r9, r4
 8000d06:	2f38      	cmp	r7, #56	; 0x38
 8000d08:	dc6b      	bgt.n	8000de2 <__aeabi_dadd+0x26e>
 8000d0a:	2f1f      	cmp	r7, #31
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_dadd+0x19c>
 8000d0e:	e16e      	b.n	8000fee <__aeabi_dadd+0x47a>
 8000d10:	003a      	movs	r2, r7
 8000d12:	4648      	mov	r0, r9
 8000d14:	3a20      	subs	r2, #32
 8000d16:	40d0      	lsrs	r0, r2
 8000d18:	4684      	mov	ip, r0
 8000d1a:	2f20      	cmp	r7, #32
 8000d1c:	d007      	beq.n	8000d2e <__aeabi_dadd+0x1ba>
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	4648      	mov	r0, r9
 8000d22:	1bd2      	subs	r2, r2, r7
 8000d24:	4090      	lsls	r0, r2
 8000d26:	0002      	movs	r2, r0
 8000d28:	4640      	mov	r0, r8
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4640      	mov	r0, r8
 8000d30:	1e42      	subs	r2, r0, #1
 8000d32:	4190      	sbcs	r0, r2
 8000d34:	4662      	mov	r2, ip
 8000d36:	0004      	movs	r4, r0
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	e057      	b.n	8000dec <__aeabi_dadd+0x278>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x1d0>
 8000d42:	e103      	b.n	8000f4c <__aeabi_dadd+0x3d8>
 8000d44:	1e7a      	subs	r2, r7, #1
 8000d46:	2f01      	cmp	r7, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x1d8>
 8000d4a:	e193      	b.n	8001074 <__aeabi_dadd+0x500>
 8000d4c:	4c64      	ldr	r4, [pc, #400]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d4e:	42a7      	cmp	r7, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x1e0>
 8000d52:	e18a      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d54:	0017      	movs	r7, r2
 8000d56:	e73b      	b.n	8000bd0 <__aeabi_dadd+0x5c>
 8000d58:	4c63      	ldr	r4, [pc, #396]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000d5a:	1c72      	adds	r2, r6, #1
 8000d5c:	4222      	tst	r2, r4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dadd+0x1ee>
 8000d60:	e0e0      	b.n	8000f24 <__aeabi_dadd+0x3b0>
 8000d62:	000a      	movs	r2, r1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dadd+0x1f8>
 8000d6a:	e174      	b.n	8001056 <__aeabi_dadd+0x4e2>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x1fe>
 8000d70:	e1d0      	b.n	8001114 <__aeabi_dadd+0x5a0>
 8000d72:	464a      	mov	r2, r9
 8000d74:	4302      	orrs	r2, r0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x206>
 8000d78:	e1e3      	b.n	8001142 <__aeabi_dadd+0x5ce>
 8000d7a:	074a      	lsls	r2, r1, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	e029      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000d84:	464a      	mov	r2, r9
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x218>
 8000d8a:	e17d      	b.n	8001088 <__aeabi_dadd+0x514>
 8000d8c:	1e7a      	subs	r2, r7, #1
 8000d8e:	2f01      	cmp	r7, #1
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x220>
 8000d92:	e0e0      	b.n	8000f56 <__aeabi_dadd+0x3e2>
 8000d94:	4c52      	ldr	r4, [pc, #328]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000d96:	42a7      	cmp	r7, r4
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x228>
 8000d9a:	e166      	b.n	800106a <__aeabi_dadd+0x4f6>
 8000d9c:	0017      	movs	r7, r2
 8000d9e:	e7b2      	b.n	8000d06 <__aeabi_dadd+0x192>
 8000da0:	0010      	movs	r0, r2
 8000da2:	3b1f      	subs	r3, #31
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	2920      	cmp	r1, #32
 8000da8:	d003      	beq.n	8000db2 <__aeabi_dadd+0x23e>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	0763      	lsls	r3, r4, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x250>
 8000dc2:	e755      	b.n	8000c70 <__aeabi_dadd+0xfc>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	08e3      	lsrs	r3, r4, #3
 8000dc8:	0752      	lsls	r2, r2, #29
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	4652      	mov	r2, sl
 8000dce:	0037      	movs	r7, r6
 8000dd0:	08d1      	lsrs	r1, r2, #3
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000dd4:	4297      	cmp	r7, r2
 8000dd6:	d01f      	beq.n	8000e18 <__aeabi_dadd+0x2a4>
 8000dd8:	0309      	lsls	r1, r1, #12
 8000dda:	057a      	lsls	r2, r7, #21
 8000ddc:	0b0c      	lsrs	r4, r1, #12
 8000dde:	0d52      	lsrs	r2, r2, #21
 8000de0:	e764      	b.n	8000cac <__aeabi_dadd+0x138>
 8000de2:	4642      	mov	r2, r8
 8000de4:	464c      	mov	r4, r9
 8000de6:	4314      	orrs	r4, r2
 8000de8:	1e62      	subs	r2, r4, #1
 8000dea:	4194      	sbcs	r4, r2
 8000dec:	18e4      	adds	r4, r4, r3
 8000dee:	429c      	cmp	r4, r3
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4252      	negs	r2, r2
 8000df4:	4692      	mov	sl, r2
 8000df6:	448a      	add	sl, r1
 8000df8:	4653      	mov	r3, sl
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	d5df      	bpl.n	8000dbe <__aeabi_dadd+0x24a>
 8000dfe:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e00:	3601      	adds	r6, #1
 8000e02:	429e      	cmp	r6, r3
 8000e04:	d000      	beq.n	8000e08 <__aeabi_dadd+0x294>
 8000e06:	e0b3      	b.n	8000f70 <__aeabi_dadd+0x3fc>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e74d      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e10:	074a      	lsls	r2, r1, #29
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	08c9      	lsrs	r1, r1, #3
 8000e18:	001a      	movs	r2, r3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x2ac>
 8000e1e:	e200      	b.n	8001222 <__aeabi_dadd+0x6ae>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	0324      	lsls	r4, r4, #12
 8000e24:	430c      	orrs	r4, r1
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e2a:	0b24      	lsrs	r4, r4, #12
 8000e2c:	e73e      	b.n	8000cac <__aeabi_dadd+0x138>
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f001 fce8 	bl	8002804 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3318      	adds	r3, #24
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_dadd+0x2ca>
 8000e3c:	e6f7      	b.n	8000c2e <__aeabi_dadd+0xba>
 8000e3e:	0022      	movs	r2, r4
 8000e40:	3808      	subs	r0, #8
 8000e42:	4082      	lsls	r2, r0
 8000e44:	2400      	movs	r4, #0
 8000e46:	42b3      	cmp	r3, r6
 8000e48:	db00      	blt.n	8000e4c <__aeabi_dadd+0x2d8>
 8000e4a:	e6fc      	b.n	8000c46 <__aeabi_dadd+0xd2>
 8000e4c:	1af6      	subs	r6, r6, r3
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <__aeabi_dadd+0x370>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	4692      	mov	sl, r2
 8000e54:	e70a      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d02b      	beq.n	8000eb2 <__aeabi_dadd+0x33e>
 8000e5a:	1b97      	subs	r7, r2, r6
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x2ee>
 8000e60:	e0b8      	b.n	8000fd4 <__aeabi_dadd+0x460>
 8000e62:	4c1f      	ldr	r4, [pc, #124]	; (8000ee0 <__aeabi_dadd+0x36c>)
 8000e64:	42a2      	cmp	r2, r4
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x2f6>
 8000e68:	e11c      	b.n	80010a4 <__aeabi_dadd+0x530>
 8000e6a:	2480      	movs	r4, #128	; 0x80
 8000e6c:	0424      	lsls	r4, r4, #16
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	2f38      	cmp	r7, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x302>
 8000e74:	e11e      	b.n	80010b4 <__aeabi_dadd+0x540>
 8000e76:	2f1f      	cmp	r7, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x308>
 8000e7a:	e19e      	b.n	80011ba <__aeabi_dadd+0x646>
 8000e7c:	2620      	movs	r6, #32
 8000e7e:	000c      	movs	r4, r1
 8000e80:	1bf6      	subs	r6, r6, r7
 8000e82:	0018      	movs	r0, r3
 8000e84:	40b3      	lsls	r3, r6
 8000e86:	40b4      	lsls	r4, r6
 8000e88:	40f8      	lsrs	r0, r7
 8000e8a:	1e5e      	subs	r6, r3, #1
 8000e8c:	41b3      	sbcs	r3, r6
 8000e8e:	40f9      	lsrs	r1, r7
 8000e90:	4304      	orrs	r4, r0
 8000e92:	431c      	orrs	r4, r3
 8000e94:	4489      	add	r9, r1
 8000e96:	4444      	add	r4, r8
 8000e98:	4544      	cmp	r4, r8
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	444b      	add	r3, r9
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	0016      	movs	r6, r2
 8000ea4:	e7a8      	b.n	8000df8 <__aeabi_dadd+0x284>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	464c      	mov	r4, r9
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	1e62      	subs	r2, r4, #1
 8000eae:	4194      	sbcs	r4, r2
 8000eb0:	e6a6      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__aeabi_dadd+0x374>)
 8000eb4:	1c72      	adds	r2, r6, #1
 8000eb6:	4222      	tst	r2, r4
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x348>
 8000eba:	e0a8      	b.n	800100e <__aeabi_dadd+0x49a>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x352>
 8000ec4:	e10a      	b.n	80010dc <__aeabi_dadd+0x568>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x358>
 8000eca:	e15e      	b.n	800118a <__aeabi_dadd+0x616>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dadd+0x360>
 8000ed2:	e161      	b.n	8001198 <__aeabi_dadd+0x624>
 8000ed4:	074a      	lsls	r2, r1, #29
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	e77c      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	ff7fffff 	.word	0xff7fffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	4ccf      	ldr	r4, [pc, #828]	; (800122c <__aeabi_dadd+0x6b8>)
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x380>
 8000ef2:	e0ce      	b.n	8001092 <__aeabi_dadd+0x51e>
 8000ef4:	2480      	movs	r4, #128	; 0x80
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	4321      	orrs	r1, r4
 8000efa:	2f38      	cmp	r7, #56	; 0x38
 8000efc:	dc5b      	bgt.n	8000fb6 <__aeabi_dadd+0x442>
 8000efe:	2f1f      	cmp	r7, #31
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_dadd+0x390>
 8000f02:	e0dc      	b.n	80010be <__aeabi_dadd+0x54a>
 8000f04:	2520      	movs	r5, #32
 8000f06:	000c      	movs	r4, r1
 8000f08:	1bed      	subs	r5, r5, r7
 8000f0a:	001e      	movs	r6, r3
 8000f0c:	40ab      	lsls	r3, r5
 8000f0e:	40ac      	lsls	r4, r5
 8000f10:	40fe      	lsrs	r6, r7
 8000f12:	1e5d      	subs	r5, r3, #1
 8000f14:	41ab      	sbcs	r3, r5
 8000f16:	4334      	orrs	r4, r6
 8000f18:	40f9      	lsrs	r1, r7
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	1a5b      	subs	r3, r3, r1
 8000f20:	4699      	mov	r9, r3
 8000f22:	e04c      	b.n	8000fbe <__aeabi_dadd+0x44a>
 8000f24:	464a      	mov	r2, r9
 8000f26:	1a1c      	subs	r4, r3, r0
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	4192      	sbcs	r2, r2
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4692      	mov	sl, r2
 8000f32:	0002      	movs	r2, r0
 8000f34:	4650      	mov	r0, sl
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	4692      	mov	sl, r2
 8000f3a:	0212      	lsls	r2, r2, #8
 8000f3c:	d478      	bmi.n	8001030 <__aeabi_dadd+0x4bc>
 8000f3e:	4653      	mov	r3, sl
 8000f40:	4323      	orrs	r3, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x3d2>
 8000f44:	e66a      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8000f46:	2100      	movs	r1, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e745      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8000f4c:	074a      	lsls	r2, r1, #29
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	08c9      	lsrs	r1, r1, #3
 8000f54:	e73d      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8000f56:	181c      	adds	r4, r3, r0
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	419b      	sbcs	r3, r3
 8000f5c:	4449      	add	r1, r9
 8000f5e:	468a      	mov	sl, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	449a      	add	sl, r3
 8000f64:	4653      	mov	r3, sl
 8000f66:	2601      	movs	r6, #1
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_dadd+0x3fa>
 8000f6c:	e727      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8000f6e:	2602      	movs	r6, #2
 8000f70:	4652      	mov	r2, sl
 8000f72:	4baf      	ldr	r3, [pc, #700]	; (8001230 <__aeabi_dadd+0x6bc>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	4021      	ands	r1, r4
 8000f7c:	0862      	lsrs	r2, r4, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	07dc      	lsls	r4, r3, #31
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	469a      	mov	sl, r3
 8000f86:	4314      	orrs	r4, r2
 8000f88:	e670      	b.n	8000c6c <__aeabi_dadd+0xf8>
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	3a20      	subs	r2, #32
 8000f90:	40d4      	lsrs	r4, r2
 8000f92:	46a4      	mov	ip, r4
 8000f94:	2f20      	cmp	r7, #32
 8000f96:	d007      	beq.n	8000fa8 <__aeabi_dadd+0x434>
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	1bd2      	subs	r2, r2, r7
 8000f9e:	4090      	lsls	r0, r2
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	4680      	mov	r8, r0
 8000fa8:	4640      	mov	r0, r8
 8000faa:	1e42      	subs	r2, r0, #1
 8000fac:	4190      	sbcs	r0, r2
 8000fae:	4662      	mov	r2, ip
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	e624      	b.n	8000c00 <__aeabi_dadd+0x8c>
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	000c      	movs	r4, r1
 8000fba:	1e63      	subs	r3, r4, #1
 8000fbc:	419c      	sbcs	r4, r3
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	1b1c      	subs	r4, r3, r4
 8000fc2:	45a0      	cmp	r8, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	469a      	mov	sl, r3
 8000fce:	4665      	mov	r5, ip
 8000fd0:	0016      	movs	r6, r2
 8000fd2:	e61b      	b.n	8000c0c <__aeabi_dadd+0x98>
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x468>
 8000fda:	e0c7      	b.n	800116c <__aeabi_dadd+0x5f8>
 8000fdc:	1e7c      	subs	r4, r7, #1
 8000fde:	2f01      	cmp	r7, #1
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x470>
 8000fe2:	e0f9      	b.n	80011d8 <__aeabi_dadd+0x664>
 8000fe4:	4e91      	ldr	r6, [pc, #580]	; (800122c <__aeabi_dadd+0x6b8>)
 8000fe6:	42b7      	cmp	r7, r6
 8000fe8:	d05c      	beq.n	80010a4 <__aeabi_dadd+0x530>
 8000fea:	0027      	movs	r7, r4
 8000fec:	e740      	b.n	8000e70 <__aeabi_dadd+0x2fc>
 8000fee:	2220      	movs	r2, #32
 8000ff0:	464c      	mov	r4, r9
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	1bd2      	subs	r2, r2, r7
 8000ff6:	4094      	lsls	r4, r2
 8000ff8:	40f8      	lsrs	r0, r7
 8000ffa:	4304      	orrs	r4, r0
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	4090      	lsls	r0, r2
 8001000:	1e42      	subs	r2, r0, #1
 8001002:	4190      	sbcs	r0, r2
 8001004:	464a      	mov	r2, r9
 8001006:	40fa      	lsrs	r2, r7
 8001008:	4304      	orrs	r4, r0
 800100a:	1889      	adds	r1, r1, r2
 800100c:	e6ee      	b.n	8000dec <__aeabi_dadd+0x278>
 800100e:	4c87      	ldr	r4, [pc, #540]	; (800122c <__aeabi_dadd+0x6b8>)
 8001010:	42a2      	cmp	r2, r4
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x4a2>
 8001014:	e6f9      	b.n	8000e0a <__aeabi_dadd+0x296>
 8001016:	1818      	adds	r0, r3, r0
 8001018:	4298      	cmp	r0, r3
 800101a:	419b      	sbcs	r3, r3
 800101c:	4449      	add	r1, r9
 800101e:	425b      	negs	r3, r3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	07dc      	lsls	r4, r3, #31
 8001024:	0840      	lsrs	r0, r0, #1
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	469a      	mov	sl, r3
 800102a:	0016      	movs	r6, r2
 800102c:	4304      	orrs	r4, r0
 800102e:	e6c6      	b.n	8000dbe <__aeabi_dadd+0x24a>
 8001030:	4642      	mov	r2, r8
 8001032:	1ad4      	subs	r4, r2, r3
 8001034:	45a0      	cmp	r8, r4
 8001036:	4180      	sbcs	r0, r0
 8001038:	464b      	mov	r3, r9
 800103a:	4240      	negs	r0, r0
 800103c:	1a59      	subs	r1, r3, r1
 800103e:	1a0b      	subs	r3, r1, r0
 8001040:	469a      	mov	sl, r3
 8001042:	4665      	mov	r5, ip
 8001044:	e5ea      	b.n	8000c1c <__aeabi_dadd+0xa8>
 8001046:	464b      	mov	r3, r9
 8001048:	464a      	mov	r2, r9
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	075b      	lsls	r3, r3, #29
 800104e:	4665      	mov	r5, ip
 8001050:	4303      	orrs	r3, r0
 8001052:	08d1      	lsrs	r1, r2, #3
 8001054:	e6bd      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001056:	2a00      	cmp	r2, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x4e8>
 800105a:	e08e      	b.n	800117a <__aeabi_dadd+0x606>
 800105c:	464b      	mov	r3, r9
 800105e:	4303      	orrs	r3, r0
 8001060:	d117      	bne.n	8001092 <__aeabi_dadd+0x51e>
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	2500      	movs	r5, #0
 8001066:	0309      	lsls	r1, r1, #12
 8001068:	e6da      	b.n	8000e20 <__aeabi_dadd+0x2ac>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	08c9      	lsrs	r1, r1, #3
 8001072:	e6d1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001074:	1a1c      	subs	r4, r3, r0
 8001076:	464a      	mov	r2, r9
 8001078:	42a3      	cmp	r3, r4
 800107a:	419b      	sbcs	r3, r3
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	425b      	negs	r3, r3
 8001080:	1acb      	subs	r3, r1, r3
 8001082:	469a      	mov	sl, r3
 8001084:	2601      	movs	r6, #1
 8001086:	e5c1      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001088:	074a      	lsls	r2, r1, #29
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	4313      	orrs	r3, r2
 800108e:	08c9      	lsrs	r1, r1, #3
 8001090:	e69f      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 8001092:	4643      	mov	r3, r8
 8001094:	08d8      	lsrs	r0, r3, #3
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	4665      	mov	r5, ip
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e6b9      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010a4:	4643      	mov	r3, r8
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	464b      	mov	r3, r9
 80010aa:	464a      	mov	r2, r9
 80010ac:	075b      	lsls	r3, r3, #29
 80010ae:	4303      	orrs	r3, r0
 80010b0:	08d1      	lsrs	r1, r2, #3
 80010b2:	e6b1      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 80010b4:	4319      	orrs	r1, r3
 80010b6:	000c      	movs	r4, r1
 80010b8:	1e63      	subs	r3, r4, #1
 80010ba:	419c      	sbcs	r4, r3
 80010bc:	e6eb      	b.n	8000e96 <__aeabi_dadd+0x322>
 80010be:	003c      	movs	r4, r7
 80010c0:	000d      	movs	r5, r1
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e5      	lsrs	r5, r4
 80010c6:	2f20      	cmp	r7, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x55e>
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	1be4      	subs	r4, r4, r7
 80010ce:	40a1      	lsls	r1, r4
 80010d0:	430b      	orrs	r3, r1
 80010d2:	001c      	movs	r4, r3
 80010d4:	1e63      	subs	r3, r4, #1
 80010d6:	419c      	sbcs	r4, r3
 80010d8:	432c      	orrs	r4, r5
 80010da:	e770      	b.n	8000fbe <__aeabi_dadd+0x44a>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d0e1      	beq.n	80010a4 <__aeabi_dadd+0x530>
 80010e0:	464a      	mov	r2, r9
 80010e2:	4302      	orrs	r2, r0
 80010e4:	d0c1      	beq.n	800106a <__aeabi_dadd+0x4f6>
 80010e6:	074a      	lsls	r2, r1, #29
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	08c9      	lsrs	r1, r1, #3
 80010f0:	0312      	lsls	r2, r2, #12
 80010f2:	4211      	tst	r1, r2
 80010f4:	d008      	beq.n	8001108 <__aeabi_dadd+0x594>
 80010f6:	4648      	mov	r0, r9
 80010f8:	08c4      	lsrs	r4, r0, #3
 80010fa:	4214      	tst	r4, r2
 80010fc:	d104      	bne.n	8001108 <__aeabi_dadd+0x594>
 80010fe:	4643      	mov	r3, r8
 8001100:	0021      	movs	r1, r4
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	0742      	lsls	r2, r0, #29
 8001106:	4313      	orrs	r3, r2
 8001108:	0f5a      	lsrs	r2, r3, #29
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	0752      	lsls	r2, r2, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	e681      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001114:	464b      	mov	r3, r9
 8001116:	4303      	orrs	r3, r0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x5a8>
 800111a:	e714      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 800111c:	464b      	mov	r3, r9
 800111e:	464a      	mov	r2, r9
 8001120:	08c0      	lsrs	r0, r0, #3
 8001122:	075b      	lsls	r3, r3, #29
 8001124:	4665      	mov	r5, ip
 8001126:	4303      	orrs	r3, r0
 8001128:	08d1      	lsrs	r1, r2, #3
 800112a:	e655      	b.n	8000dd8 <__aeabi_dadd+0x264>
 800112c:	1ac4      	subs	r4, r0, r3
 800112e:	45a0      	cmp	r8, r4
 8001130:	4180      	sbcs	r0, r0
 8001132:	464b      	mov	r3, r9
 8001134:	4240      	negs	r0, r0
 8001136:	1a59      	subs	r1, r3, r1
 8001138:	1a0b      	subs	r3, r1, r0
 800113a:	469a      	mov	sl, r3
 800113c:	4665      	mov	r5, ip
 800113e:	2601      	movs	r6, #1
 8001140:	e564      	b.n	8000c0c <__aeabi_dadd+0x98>
 8001142:	1a1c      	subs	r4, r3, r0
 8001144:	464a      	mov	r2, r9
 8001146:	42a3      	cmp	r3, r4
 8001148:	4180      	sbcs	r0, r0
 800114a:	1a8a      	subs	r2, r1, r2
 800114c:	4240      	negs	r0, r0
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	4692      	mov	sl, r2
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	d549      	bpl.n	80011ea <__aeabi_dadd+0x676>
 8001156:	4642      	mov	r2, r8
 8001158:	1ad4      	subs	r4, r2, r3
 800115a:	45a0      	cmp	r8, r4
 800115c:	4180      	sbcs	r0, r0
 800115e:	464b      	mov	r3, r9
 8001160:	4240      	negs	r0, r0
 8001162:	1a59      	subs	r1, r3, r1
 8001164:	1a0b      	subs	r3, r1, r0
 8001166:	469a      	mov	sl, r3
 8001168:	4665      	mov	r5, ip
 800116a:	e57f      	b.n	8000c6c <__aeabi_dadd+0xf8>
 800116c:	464b      	mov	r3, r9
 800116e:	464a      	mov	r2, r9
 8001170:	08c0      	lsrs	r0, r0, #3
 8001172:	075b      	lsls	r3, r3, #29
 8001174:	4303      	orrs	r3, r0
 8001176:	08d1      	lsrs	r1, r2, #3
 8001178:	e62b      	b.n	8000dd2 <__aeabi_dadd+0x25e>
 800117a:	464a      	mov	r2, r9
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	4302      	orrs	r2, r0
 8001180:	d138      	bne.n	80011f4 <__aeabi_dadd+0x680>
 8001182:	074a      	lsls	r2, r1, #29
 8001184:	4313      	orrs	r3, r2
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	e646      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 800118a:	464b      	mov	r3, r9
 800118c:	464a      	mov	r2, r9
 800118e:	08c0      	lsrs	r0, r0, #3
 8001190:	075b      	lsls	r3, r3, #29
 8001192:	4303      	orrs	r3, r0
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	e61f      	b.n	8000dd8 <__aeabi_dadd+0x264>
 8001198:	181c      	adds	r4, r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4449      	add	r1, r9
 80011a0:	468a      	mov	sl, r1
 80011a2:	425b      	negs	r3, r3
 80011a4:	449a      	add	sl, r3
 80011a6:	4653      	mov	r3, sl
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dadd+0x63a>
 80011ac:	e607      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ae:	4652      	mov	r2, sl
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <__aeabi_dadd+0x6bc>)
 80011b2:	2601      	movs	r6, #1
 80011b4:	401a      	ands	r2, r3
 80011b6:	4692      	mov	sl, r2
 80011b8:	e601      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011ba:	003c      	movs	r4, r7
 80011bc:	000e      	movs	r6, r1
 80011be:	3c20      	subs	r4, #32
 80011c0:	40e6      	lsrs	r6, r4
 80011c2:	2f20      	cmp	r7, #32
 80011c4:	d003      	beq.n	80011ce <__aeabi_dadd+0x65a>
 80011c6:	2440      	movs	r4, #64	; 0x40
 80011c8:	1be4      	subs	r4, r4, r7
 80011ca:	40a1      	lsls	r1, r4
 80011cc:	430b      	orrs	r3, r1
 80011ce:	001c      	movs	r4, r3
 80011d0:	1e63      	subs	r3, r4, #1
 80011d2:	419c      	sbcs	r4, r3
 80011d4:	4334      	orrs	r4, r6
 80011d6:	e65e      	b.n	8000e96 <__aeabi_dadd+0x322>
 80011d8:	4443      	add	r3, r8
 80011da:	4283      	cmp	r3, r0
 80011dc:	4180      	sbcs	r0, r0
 80011de:	4449      	add	r1, r9
 80011e0:	468a      	mov	sl, r1
 80011e2:	4240      	negs	r0, r0
 80011e4:	001c      	movs	r4, r3
 80011e6:	4482      	add	sl, r0
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_dadd+0x3f0>
 80011ea:	4653      	mov	r3, sl
 80011ec:	4323      	orrs	r3, r4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x67e>
 80011f0:	e6a9      	b.n	8000f46 <__aeabi_dadd+0x3d2>
 80011f2:	e5e4      	b.n	8000dbe <__aeabi_dadd+0x24a>
 80011f4:	074a      	lsls	r2, r1, #29
 80011f6:	4313      	orrs	r3, r2
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	0312      	lsls	r2, r2, #12
 80011fe:	4211      	tst	r1, r2
 8001200:	d009      	beq.n	8001216 <__aeabi_dadd+0x6a2>
 8001202:	4648      	mov	r0, r9
 8001204:	08c4      	lsrs	r4, r0, #3
 8001206:	4214      	tst	r4, r2
 8001208:	d105      	bne.n	8001216 <__aeabi_dadd+0x6a2>
 800120a:	4643      	mov	r3, r8
 800120c:	4665      	mov	r5, ip
 800120e:	0021      	movs	r1, r4
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	0742      	lsls	r2, r0, #29
 8001214:	4313      	orrs	r3, r2
 8001216:	0f5a      	lsrs	r2, r3, #29
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	0752      	lsls	r2, r2, #29
 800121e:	4313      	orrs	r3, r2
 8001220:	e5fa      	b.n	8000e18 <__aeabi_dadd+0x2a4>
 8001222:	2300      	movs	r3, #0
 8001224:	4a01      	ldr	r2, [pc, #4]	; (800122c <__aeabi_dadd+0x6b8>)
 8001226:	001c      	movs	r4, r3
 8001228:	e540      	b.n	8000cac <__aeabi_dadd+0x138>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	ff7fffff 	.word	0xff7fffff

08001234 <__aeabi_ddiv>:
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	4657      	mov	r7, sl
 8001238:	464e      	mov	r6, r9
 800123a:	4645      	mov	r5, r8
 800123c:	46de      	mov	lr, fp
 800123e:	b5e0      	push	{r5, r6, r7, lr}
 8001240:	030c      	lsls	r4, r1, #12
 8001242:	001f      	movs	r7, r3
 8001244:	004b      	lsls	r3, r1, #1
 8001246:	4681      	mov	r9, r0
 8001248:	4692      	mov	sl, r2
 800124a:	0005      	movs	r5, r0
 800124c:	b085      	sub	sp, #20
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d5b      	lsrs	r3, r3, #21
 8001252:	0fce      	lsrs	r6, r1, #31
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x26>
 8001258:	e152      	b.n	8001500 <__aeabi_ddiv+0x2cc>
 800125a:	4ad2      	ldr	r2, [pc, #840]	; (80015a4 <__aeabi_ddiv+0x370>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2e>
 8001260:	e16e      	b.n	8001540 <__aeabi_ddiv+0x30c>
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00e4      	lsls	r4, r4, #3
 8001266:	4314      	orrs	r4, r2
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	4322      	orrs	r2, r4
 800126e:	4690      	mov	r8, r2
 8001270:	4acd      	ldr	r2, [pc, #820]	; (80015a8 <__aeabi_ddiv+0x374>)
 8001272:	00c5      	lsls	r5, r0, #3
 8001274:	4693      	mov	fp, r2
 8001276:	449b      	add	fp, r3
 8001278:	2300      	movs	r3, #0
 800127a:	4699      	mov	r9, r3
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	033c      	lsls	r4, r7, #12
 8001280:	007b      	lsls	r3, r7, #1
 8001282:	4650      	mov	r0, sl
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fff      	lsrs	r7, r7, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x5c>
 800128e:	e11a      	b.n	80014c6 <__aeabi_ddiv+0x292>
 8001290:	4ac4      	ldr	r2, [pc, #784]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x64>
 8001296:	e15e      	b.n	8001556 <__aeabi_ddiv+0x322>
 8001298:	0f42      	lsrs	r2, r0, #29
 800129a:	00e4      	lsls	r4, r4, #3
 800129c:	4322      	orrs	r2, r4
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	4314      	orrs	r4, r2
 80012a4:	4ac0      	ldr	r2, [pc, #768]	; (80015a8 <__aeabi_ddiv+0x374>)
 80012a6:	00c1      	lsls	r1, r0, #3
 80012a8:	4694      	mov	ip, r2
 80012aa:	465a      	mov	r2, fp
 80012ac:	4463      	add	r3, ip
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	469b      	mov	fp, r3
 80012b2:	2000      	movs	r0, #0
 80012b4:	0033      	movs	r3, r6
 80012b6:	407b      	eors	r3, r7
 80012b8:	469a      	mov	sl, r3
 80012ba:	464b      	mov	r3, r9
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d827      	bhi.n	8001310 <__aeabi_ddiv+0xdc>
 80012c0:	4aba      	ldr	r2, [pc, #744]	; (80015ac <__aeabi_ddiv+0x378>)
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	469f      	mov	pc, r3
 80012c8:	46b2      	mov	sl, r6
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d016      	beq.n	80012fe <__aeabi_ddiv+0xca>
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0xa2>
 80012d4:	e287      	b.n	80017e6 <__aeabi_ddiv+0x5b2>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa8>
 80012da:	e0d5      	b.n	8001488 <__aeabi_ddiv+0x254>
 80012dc:	2300      	movs	r3, #0
 80012de:	2200      	movs	r2, #0
 80012e0:	2500      	movs	r5, #0
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	4313      	orrs	r3, r2
 80012e6:	4652      	mov	r2, sl
 80012e8:	07d2      	lsls	r2, r2, #31
 80012ea:	4313      	orrs	r3, r2
 80012ec:	0028      	movs	r0, r5
 80012ee:	0019      	movs	r1, r3
 80012f0:	b005      	add	sp, #20
 80012f2:	bcf0      	pop	{r4, r5, r6, r7}
 80012f4:	46bb      	mov	fp, r7
 80012f6:	46b2      	mov	sl, r6
 80012f8:	46a9      	mov	r9, r5
 80012fa:	46a0      	mov	r8, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	2200      	movs	r2, #0
 8001300:	2500      	movs	r5, #0
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <__aeabi_ddiv+0x370>)
 8001304:	e7ed      	b.n	80012e2 <__aeabi_ddiv+0xae>
 8001306:	46ba      	mov	sl, r7
 8001308:	46a0      	mov	r8, r4
 800130a:	000d      	movs	r5, r1
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	e7dc      	b.n	80012ca <__aeabi_ddiv+0x96>
 8001310:	4544      	cmp	r4, r8
 8001312:	d200      	bcs.n	8001316 <__aeabi_ddiv+0xe2>
 8001314:	e1c4      	b.n	80016a0 <__aeabi_ddiv+0x46c>
 8001316:	d100      	bne.n	800131a <__aeabi_ddiv+0xe6>
 8001318:	e1bf      	b.n	800169a <__aeabi_ddiv+0x466>
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	469c      	mov	ip, r3
 8001320:	002e      	movs	r6, r5
 8001322:	4640      	mov	r0, r8
 8001324:	2500      	movs	r5, #0
 8001326:	44e3      	add	fp, ip
 8001328:	0223      	lsls	r3, r4, #8
 800132a:	0e0c      	lsrs	r4, r1, #24
 800132c:	431c      	orrs	r4, r3
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	4699      	mov	r9, r3
 8001332:	0423      	lsls	r3, r4, #16
 8001334:	020a      	lsls	r2, r1, #8
 8001336:	0c1f      	lsrs	r7, r3, #16
 8001338:	4649      	mov	r1, r9
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	9701      	str	r7, [sp, #4]
 800133e:	f7fe ff85 	bl	800024c <__aeabi_uidivmod>
 8001342:	0002      	movs	r2, r0
 8001344:	437a      	muls	r2, r7
 8001346:	040b      	lsls	r3, r1, #16
 8001348:	0c31      	lsrs	r1, r6, #16
 800134a:	4680      	mov	r8, r0
 800134c:	4319      	orrs	r1, r3
 800134e:	428a      	cmp	r2, r1
 8001350:	d907      	bls.n	8001362 <__aeabi_ddiv+0x12e>
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	469c      	mov	ip, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	44e0      	add	r8, ip
 800135c:	428c      	cmp	r4, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x12e>
 8001360:	e201      	b.n	8001766 <__aeabi_ddiv+0x532>
 8001362:	1a88      	subs	r0, r1, r2
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff71 	bl	800024c <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	0436      	lsls	r6, r6, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	0c36      	lsrs	r6, r6, #16
 8001374:	0003      	movs	r3, r0
 8001376:	430e      	orrs	r6, r1
 8001378:	42b2      	cmp	r2, r6
 800137a:	d904      	bls.n	8001386 <__aeabi_ddiv+0x152>
 800137c:	1936      	adds	r6, r6, r4
 800137e:	3b01      	subs	r3, #1
 8001380:	42b4      	cmp	r4, r6
 8001382:	d800      	bhi.n	8001386 <__aeabi_ddiv+0x152>
 8001384:	e1e9      	b.n	800175a <__aeabi_ddiv+0x526>
 8001386:	1ab0      	subs	r0, r6, r2
 8001388:	4642      	mov	r2, r8
 800138a:	9e00      	ldr	r6, [sp, #0]
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	0c33      	lsrs	r3, r6, #16
 8001392:	001f      	movs	r7, r3
 8001394:	0c11      	lsrs	r1, r2, #16
 8001396:	4690      	mov	r8, r2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	0413      	lsls	r3, r2, #16
 800139c:	0432      	lsls	r2, r6, #16
 800139e:	0c16      	lsrs	r6, r2, #16
 80013a0:	0032      	movs	r2, r6
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	435a      	muls	r2, r3
 80013a6:	9603      	str	r6, [sp, #12]
 80013a8:	437b      	muls	r3, r7
 80013aa:	434e      	muls	r6, r1
 80013ac:	4379      	muls	r1, r7
 80013ae:	0c17      	lsrs	r7, r2, #16
 80013b0:	46bc      	mov	ip, r7
 80013b2:	199b      	adds	r3, r3, r6
 80013b4:	4463      	add	r3, ip
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d903      	bls.n	80013c2 <__aeabi_ddiv+0x18e>
 80013ba:	2680      	movs	r6, #128	; 0x80
 80013bc:	0276      	lsls	r6, r6, #9
 80013be:	46b4      	mov	ip, r6
 80013c0:	4461      	add	r1, ip
 80013c2:	0c1e      	lsrs	r6, r3, #16
 80013c4:	1871      	adds	r1, r6, r1
 80013c6:	0416      	lsls	r6, r2, #16
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	0c36      	lsrs	r6, r6, #16
 80013cc:	199e      	adds	r6, r3, r6
 80013ce:	4288      	cmp	r0, r1
 80013d0:	d302      	bcc.n	80013d8 <__aeabi_ddiv+0x1a4>
 80013d2:	d112      	bne.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d4:	42b5      	cmp	r5, r6
 80013d6:	d210      	bcs.n	80013fa <__aeabi_ddiv+0x1c6>
 80013d8:	4643      	mov	r3, r8
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	9b00      	ldr	r3, [sp, #0]
 80013de:	469c      	mov	ip, r3
 80013e0:	4465      	add	r5, ip
 80013e2:	001f      	movs	r7, r3
 80013e4:	429d      	cmp	r5, r3
 80013e6:	419b      	sbcs	r3, r3
 80013e8:	425b      	negs	r3, r3
 80013ea:	191b      	adds	r3, r3, r4
 80013ec:	18c0      	adds	r0, r0, r3
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d200      	bcs.n	80013f4 <__aeabi_ddiv+0x1c0>
 80013f2:	e19e      	b.n	8001732 <__aeabi_ddiv+0x4fe>
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x1c4>
 80013f6:	e199      	b.n	800172c <__aeabi_ddiv+0x4f8>
 80013f8:	4690      	mov	r8, r2
 80013fa:	1bae      	subs	r6, r5, r6
 80013fc:	42b5      	cmp	r5, r6
 80013fe:	41ad      	sbcs	r5, r5
 8001400:	1a40      	subs	r0, r0, r1
 8001402:	426d      	negs	r5, r5
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	4284      	cmp	r4, r0
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x1d8>
 800140a:	e1d2      	b.n	80017b2 <__aeabi_ddiv+0x57e>
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff1d 	bl	800024c <__aeabi_uidivmod>
 8001412:	9a01      	ldr	r2, [sp, #4]
 8001414:	040b      	lsls	r3, r1, #16
 8001416:	4342      	muls	r2, r0
 8001418:	0c31      	lsrs	r1, r6, #16
 800141a:	0005      	movs	r5, r0
 800141c:	4319      	orrs	r1, r3
 800141e:	428a      	cmp	r2, r1
 8001420:	d900      	bls.n	8001424 <__aeabi_ddiv+0x1f0>
 8001422:	e16c      	b.n	80016fe <__aeabi_ddiv+0x4ca>
 8001424:	1a88      	subs	r0, r1, r2
 8001426:	4649      	mov	r1, r9
 8001428:	f7fe ff10 	bl	800024c <__aeabi_uidivmod>
 800142c:	9a01      	ldr	r2, [sp, #4]
 800142e:	0436      	lsls	r6, r6, #16
 8001430:	4342      	muls	r2, r0
 8001432:	0409      	lsls	r1, r1, #16
 8001434:	0c36      	lsrs	r6, r6, #16
 8001436:	0003      	movs	r3, r0
 8001438:	430e      	orrs	r6, r1
 800143a:	42b2      	cmp	r2, r6
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x20c>
 800143e:	e153      	b.n	80016e8 <__aeabi_ddiv+0x4b4>
 8001440:	9803      	ldr	r0, [sp, #12]
 8001442:	1ab6      	subs	r6, r6, r2
 8001444:	0002      	movs	r2, r0
 8001446:	042d      	lsls	r5, r5, #16
 8001448:	431d      	orrs	r5, r3
 800144a:	9f02      	ldr	r7, [sp, #8]
 800144c:	042b      	lsls	r3, r5, #16
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435a      	muls	r2, r3
 8001452:	437b      	muls	r3, r7
 8001454:	469c      	mov	ip, r3
 8001456:	0c29      	lsrs	r1, r5, #16
 8001458:	4348      	muls	r0, r1
 800145a:	0c13      	lsrs	r3, r2, #16
 800145c:	4484      	add	ip, r0
 800145e:	4463      	add	r3, ip
 8001460:	4379      	muls	r1, r7
 8001462:	4298      	cmp	r0, r3
 8001464:	d903      	bls.n	800146e <__aeabi_ddiv+0x23a>
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	0240      	lsls	r0, r0, #9
 800146a:	4684      	mov	ip, r0
 800146c:	4461      	add	r1, ip
 800146e:	0c18      	lsrs	r0, r3, #16
 8001470:	0412      	lsls	r2, r2, #16
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	0c12      	lsrs	r2, r2, #16
 8001476:	1840      	adds	r0, r0, r1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	4286      	cmp	r6, r0
 800147c:	d200      	bcs.n	8001480 <__aeabi_ddiv+0x24c>
 800147e:	e100      	b.n	8001682 <__aeabi_ddiv+0x44e>
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x250>
 8001482:	e0fb      	b.n	800167c <__aeabi_ddiv+0x448>
 8001484:	2301      	movs	r3, #1
 8001486:	431d      	orrs	r5, r3
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <__aeabi_ddiv+0x37c>)
 800148a:	445b      	add	r3, fp
 800148c:	2b00      	cmp	r3, #0
 800148e:	dc00      	bgt.n	8001492 <__aeabi_ddiv+0x25e>
 8001490:	e0aa      	b.n	80015e8 <__aeabi_ddiv+0x3b4>
 8001492:	076a      	lsls	r2, r5, #29
 8001494:	d000      	beq.n	8001498 <__aeabi_ddiv+0x264>
 8001496:	e13d      	b.n	8001714 <__aeabi_ddiv+0x4e0>
 8001498:	08e9      	lsrs	r1, r5, #3
 800149a:	4642      	mov	r2, r8
 800149c:	01d2      	lsls	r2, r2, #7
 800149e:	d506      	bpl.n	80014ae <__aeabi_ddiv+0x27a>
 80014a0:	4642      	mov	r2, r8
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <__aeabi_ddiv+0x380>)
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	4690      	mov	r8, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	445b      	add	r3, fp
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <__aeabi_ddiv+0x384>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_ddiv+0x282>
 80014b4:	e723      	b.n	80012fe <__aeabi_ddiv+0xca>
 80014b6:	4642      	mov	r2, r8
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	0755      	lsls	r5, r2, #29
 80014bc:	0252      	lsls	r2, r2, #9
 80014be:	430d      	orrs	r5, r1
 80014c0:	0b12      	lsrs	r2, r2, #12
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	e70d      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80014c6:	4651      	mov	r1, sl
 80014c8:	4321      	orrs	r1, r4
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x29a>
 80014cc:	e07c      	b.n	80015c8 <__aeabi_ddiv+0x394>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x2a0>
 80014d2:	e0fb      	b.n	80016cc <__aeabi_ddiv+0x498>
 80014d4:	0020      	movs	r0, r4
 80014d6:	f001 f995 	bl	8002804 <__clzsi2>
 80014da:	0002      	movs	r2, r0
 80014dc:	3a0b      	subs	r2, #11
 80014de:	231d      	movs	r3, #29
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4652      	mov	r2, sl
 80014e4:	0001      	movs	r1, r0
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4653      	mov	r3, sl
 80014ea:	3908      	subs	r1, #8
 80014ec:	408b      	lsls	r3, r1
 80014ee:	408c      	lsls	r4, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	4314      	orrs	r4, r2
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <__aeabi_ddiv+0x388>)
 80014f6:	4458      	add	r0, fp
 80014f8:	469b      	mov	fp, r3
 80014fa:	4483      	add	fp, r0
 80014fc:	2000      	movs	r0, #0
 80014fe:	e6d9      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001500:	0003      	movs	r3, r0
 8001502:	4323      	orrs	r3, r4
 8001504:	4698      	mov	r8, r3
 8001506:	d044      	beq.n	8001592 <__aeabi_ddiv+0x35e>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x2da>
 800150c:	e0cf      	b.n	80016ae <__aeabi_ddiv+0x47a>
 800150e:	0020      	movs	r0, r4
 8001510:	f001 f978 	bl	8002804 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	0002      	movs	r2, r0
 8001518:	390b      	subs	r1, #11
 800151a:	231d      	movs	r3, #29
 800151c:	1a5b      	subs	r3, r3, r1
 800151e:	4649      	mov	r1, r9
 8001520:	0010      	movs	r0, r2
 8001522:	40d9      	lsrs	r1, r3
 8001524:	3808      	subs	r0, #8
 8001526:	4084      	lsls	r4, r0
 8001528:	000b      	movs	r3, r1
 800152a:	464d      	mov	r5, r9
 800152c:	4323      	orrs	r3, r4
 800152e:	4698      	mov	r8, r3
 8001530:	4085      	lsls	r5, r0
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <__aeabi_ddiv+0x38c>)
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	469b      	mov	fp, r3
 8001538:	2300      	movs	r3, #0
 800153a:	4699      	mov	r9, r3
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	e69e      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001540:	0002      	movs	r2, r0
 8001542:	4322      	orrs	r2, r4
 8001544:	4690      	mov	r8, r2
 8001546:	d11d      	bne.n	8001584 <__aeabi_ddiv+0x350>
 8001548:	2208      	movs	r2, #8
 800154a:	469b      	mov	fp, r3
 800154c:	2302      	movs	r3, #2
 800154e:	2500      	movs	r5, #0
 8001550:	4691      	mov	r9, r2
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	e693      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001556:	4651      	mov	r1, sl
 8001558:	4321      	orrs	r1, r4
 800155a:	d109      	bne.n	8001570 <__aeabi_ddiv+0x33c>
 800155c:	2302      	movs	r3, #2
 800155e:	464a      	mov	r2, r9
 8001560:	431a      	orrs	r2, r3
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001564:	4691      	mov	r9, r2
 8001566:	469c      	mov	ip, r3
 8001568:	2400      	movs	r4, #0
 800156a:	2002      	movs	r0, #2
 800156c:	44e3      	add	fp, ip
 800156e:	e6a1      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001570:	2303      	movs	r3, #3
 8001572:	464a      	mov	r2, r9
 8001574:	431a      	orrs	r2, r3
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <__aeabi_ddiv+0x390>)
 8001578:	4691      	mov	r9, r2
 800157a:	469c      	mov	ip, r3
 800157c:	4651      	mov	r1, sl
 800157e:	2003      	movs	r0, #3
 8001580:	44e3      	add	fp, ip
 8001582:	e697      	b.n	80012b4 <__aeabi_ddiv+0x80>
 8001584:	220c      	movs	r2, #12
 8001586:	469b      	mov	fp, r3
 8001588:	2303      	movs	r3, #3
 800158a:	46a0      	mov	r8, r4
 800158c:	4691      	mov	r9, r2
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	e675      	b.n	800127e <__aeabi_ddiv+0x4a>
 8001592:	2304      	movs	r3, #4
 8001594:	4699      	mov	r9, r3
 8001596:	2300      	movs	r3, #0
 8001598:	469b      	mov	fp, r3
 800159a:	3301      	adds	r3, #1
 800159c:	2500      	movs	r5, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	e66d      	b.n	800127e <__aeabi_ddiv+0x4a>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff
 80015a8:	fffffc01 	.word	0xfffffc01
 80015ac:	0800b7b0 	.word	0x0800b7b0
 80015b0:	000003ff 	.word	0x000003ff
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	000007fe 	.word	0x000007fe
 80015bc:	000003f3 	.word	0x000003f3
 80015c0:	fffffc0d 	.word	0xfffffc0d
 80015c4:	fffff801 	.word	0xfffff801
 80015c8:	464a      	mov	r2, r9
 80015ca:	2301      	movs	r3, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	4691      	mov	r9, r2
 80015d0:	2400      	movs	r4, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	e66e      	b.n	80012b4 <__aeabi_ddiv+0x80>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	469a      	mov	sl, r3
 80015dc:	2500      	movs	r5, #0
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	e67e      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80015e4:	2501      	movs	r5, #1
 80015e6:	426d      	negs	r5, r5
 80015e8:	2201      	movs	r2, #1
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	2a38      	cmp	r2, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0x3be>
 80015f0:	e674      	b.n	80012dc <__aeabi_ddiv+0xa8>
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x3c4>
 80015f6:	e0bd      	b.n	8001774 <__aeabi_ddiv+0x540>
 80015f8:	211f      	movs	r1, #31
 80015fa:	4249      	negs	r1, r1
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	4641      	mov	r1, r8
 8001600:	40d9      	lsrs	r1, r3
 8001602:	000b      	movs	r3, r1
 8001604:	2a20      	cmp	r2, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_ddiv+0x3de>
 8001608:	4641      	mov	r1, r8
 800160a:	4a7e      	ldr	r2, [pc, #504]	; (8001804 <__aeabi_ddiv+0x5d0>)
 800160c:	445a      	add	r2, fp
 800160e:	4091      	lsls	r1, r2
 8001610:	430d      	orrs	r5, r1
 8001612:	0029      	movs	r1, r5
 8001614:	1e4a      	subs	r2, r1, #1
 8001616:	4191      	sbcs	r1, r2
 8001618:	4319      	orrs	r1, r3
 800161a:	2307      	movs	r3, #7
 800161c:	001d      	movs	r5, r3
 800161e:	2200      	movs	r2, #0
 8001620:	400d      	ands	r5, r1
 8001622:	420b      	tst	r3, r1
 8001624:	d100      	bne.n	8001628 <__aeabi_ddiv+0x3f4>
 8001626:	e0d0      	b.n	80017ca <__aeabi_ddiv+0x596>
 8001628:	220f      	movs	r2, #15
 800162a:	2300      	movs	r3, #0
 800162c:	400a      	ands	r2, r1
 800162e:	2a04      	cmp	r2, #4
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x400>
 8001632:	e0c7      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001634:	1d0a      	adds	r2, r1, #4
 8001636:	428a      	cmp	r2, r1
 8001638:	4189      	sbcs	r1, r1
 800163a:	4249      	negs	r1, r1
 800163c:	185b      	adds	r3, r3, r1
 800163e:	0011      	movs	r1, r2
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_ddiv+0x412>
 8001644:	e0be      	b.n	80017c4 <__aeabi_ddiv+0x590>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e649      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	4643      	mov	r3, r8
 8001652:	0312      	lsls	r2, r2, #12
 8001654:	4213      	tst	r3, r2
 8001656:	d008      	beq.n	800166a <__aeabi_ddiv+0x436>
 8001658:	4214      	tst	r4, r2
 800165a:	d106      	bne.n	800166a <__aeabi_ddiv+0x436>
 800165c:	4322      	orrs	r2, r4
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	46ba      	mov	sl, r7
 8001662:	000d      	movs	r5, r1
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001666:	0b12      	lsrs	r2, r2, #12
 8001668:	e63b      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4643      	mov	r3, r8
 800166e:	0312      	lsls	r2, r2, #12
 8001670:	431a      	orrs	r2, r3
 8001672:	0312      	lsls	r2, r2, #12
 8001674:	46b2      	mov	sl, r6
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <__aeabi_ddiv+0x5cc>)
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	e632      	b.n	80012e2 <__aeabi_ddiv+0xae>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x44e>
 8001680:	e702      	b.n	8001488 <__aeabi_ddiv+0x254>
 8001682:	19a6      	adds	r6, r4, r6
 8001684:	1e6a      	subs	r2, r5, #1
 8001686:	42a6      	cmp	r6, r4
 8001688:	d200      	bcs.n	800168c <__aeabi_ddiv+0x458>
 800168a:	e089      	b.n	80017a0 <__aeabi_ddiv+0x56c>
 800168c:	4286      	cmp	r6, r0
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0x45e>
 8001690:	e09f      	b.n	80017d2 <__aeabi_ddiv+0x59e>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x462>
 8001694:	e0af      	b.n	80017f6 <__aeabi_ddiv+0x5c2>
 8001696:	0015      	movs	r5, r2
 8001698:	e6f4      	b.n	8001484 <__aeabi_ddiv+0x250>
 800169a:	42a9      	cmp	r1, r5
 800169c:	d900      	bls.n	80016a0 <__aeabi_ddiv+0x46c>
 800169e:	e63c      	b.n	800131a <__aeabi_ddiv+0xe6>
 80016a0:	4643      	mov	r3, r8
 80016a2:	07de      	lsls	r6, r3, #31
 80016a4:	0858      	lsrs	r0, r3, #1
 80016a6:	086b      	lsrs	r3, r5, #1
 80016a8:	431e      	orrs	r6, r3
 80016aa:	07ed      	lsls	r5, r5, #31
 80016ac:	e63c      	b.n	8001328 <__aeabi_ddiv+0xf4>
 80016ae:	f001 f8a9 	bl	8002804 <__clzsi2>
 80016b2:	0001      	movs	r1, r0
 80016b4:	0002      	movs	r2, r0
 80016b6:	3115      	adds	r1, #21
 80016b8:	3220      	adds	r2, #32
 80016ba:	291c      	cmp	r1, #28
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_ddiv+0x48c>
 80016be:	e72c      	b.n	800151a <__aeabi_ddiv+0x2e6>
 80016c0:	464b      	mov	r3, r9
 80016c2:	3808      	subs	r0, #8
 80016c4:	4083      	lsls	r3, r0
 80016c6:	2500      	movs	r5, #0
 80016c8:	4698      	mov	r8, r3
 80016ca:	e732      	b.n	8001532 <__aeabi_ddiv+0x2fe>
 80016cc:	f001 f89a 	bl	8002804 <__clzsi2>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	3215      	adds	r2, #21
 80016d6:	3020      	adds	r0, #32
 80016d8:	2a1c      	cmp	r2, #28
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x4aa>
 80016dc:	e6ff      	b.n	80014de <__aeabi_ddiv+0x2aa>
 80016de:	4654      	mov	r4, sl
 80016e0:	3b08      	subs	r3, #8
 80016e2:	2100      	movs	r1, #0
 80016e4:	409c      	lsls	r4, r3
 80016e6:	e705      	b.n	80014f4 <__aeabi_ddiv+0x2c0>
 80016e8:	1936      	adds	r6, r6, r4
 80016ea:	3b01      	subs	r3, #1
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	d900      	bls.n	80016f2 <__aeabi_ddiv+0x4be>
 80016f0:	e6a6      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f2:	42b2      	cmp	r2, r6
 80016f4:	d800      	bhi.n	80016f8 <__aeabi_ddiv+0x4c4>
 80016f6:	e6a3      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016f8:	1e83      	subs	r3, r0, #2
 80016fa:	1936      	adds	r6, r6, r4
 80016fc:	e6a0      	b.n	8001440 <__aeabi_ddiv+0x20c>
 80016fe:	1909      	adds	r1, r1, r4
 8001700:	3d01      	subs	r5, #1
 8001702:	428c      	cmp	r4, r1
 8001704:	d900      	bls.n	8001708 <__aeabi_ddiv+0x4d4>
 8001706:	e68d      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001708:	428a      	cmp	r2, r1
 800170a:	d800      	bhi.n	800170e <__aeabi_ddiv+0x4da>
 800170c:	e68a      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 800170e:	1e85      	subs	r5, r0, #2
 8001710:	1909      	adds	r1, r1, r4
 8001712:	e687      	b.n	8001424 <__aeabi_ddiv+0x1f0>
 8001714:	220f      	movs	r2, #15
 8001716:	402a      	ands	r2, r5
 8001718:	2a04      	cmp	r2, #4
 800171a:	d100      	bne.n	800171e <__aeabi_ddiv+0x4ea>
 800171c:	e6bc      	b.n	8001498 <__aeabi_ddiv+0x264>
 800171e:	1d29      	adds	r1, r5, #4
 8001720:	42a9      	cmp	r1, r5
 8001722:	41ad      	sbcs	r5, r5
 8001724:	426d      	negs	r5, r5
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	44a8      	add	r8, r5
 800172a:	e6b6      	b.n	800149a <__aeabi_ddiv+0x266>
 800172c:	42af      	cmp	r7, r5
 800172e:	d900      	bls.n	8001732 <__aeabi_ddiv+0x4fe>
 8001730:	e662      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001732:	4281      	cmp	r1, r0
 8001734:	d804      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 8001736:	d000      	beq.n	800173a <__aeabi_ddiv+0x506>
 8001738:	e65e      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 800173a:	42ae      	cmp	r6, r5
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x50c>
 800173e:	e65b      	b.n	80013f8 <__aeabi_ddiv+0x1c4>
 8001740:	2302      	movs	r3, #2
 8001742:	425b      	negs	r3, r3
 8001744:	469c      	mov	ip, r3
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	44e0      	add	r8, ip
 800174a:	469c      	mov	ip, r3
 800174c:	4465      	add	r5, ip
 800174e:	429d      	cmp	r5, r3
 8001750:	419b      	sbcs	r3, r3
 8001752:	425b      	negs	r3, r3
 8001754:	191b      	adds	r3, r3, r4
 8001756:	18c0      	adds	r0, r0, r3
 8001758:	e64f      	b.n	80013fa <__aeabi_ddiv+0x1c6>
 800175a:	42b2      	cmp	r2, r6
 800175c:	d800      	bhi.n	8001760 <__aeabi_ddiv+0x52c>
 800175e:	e612      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001760:	1e83      	subs	r3, r0, #2
 8001762:	1936      	adds	r6, r6, r4
 8001764:	e60f      	b.n	8001386 <__aeabi_ddiv+0x152>
 8001766:	428a      	cmp	r2, r1
 8001768:	d800      	bhi.n	800176c <__aeabi_ddiv+0x538>
 800176a:	e5fa      	b.n	8001362 <__aeabi_ddiv+0x12e>
 800176c:	1e83      	subs	r3, r0, #2
 800176e:	4698      	mov	r8, r3
 8001770:	1909      	adds	r1, r1, r4
 8001772:	e5f6      	b.n	8001362 <__aeabi_ddiv+0x12e>
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <__aeabi_ddiv+0x5d4>)
 8001776:	0028      	movs	r0, r5
 8001778:	445b      	add	r3, fp
 800177a:	4641      	mov	r1, r8
 800177c:	409d      	lsls	r5, r3
 800177e:	4099      	lsls	r1, r3
 8001780:	40d0      	lsrs	r0, r2
 8001782:	1e6b      	subs	r3, r5, #1
 8001784:	419d      	sbcs	r5, r3
 8001786:	4643      	mov	r3, r8
 8001788:	4301      	orrs	r1, r0
 800178a:	4329      	orrs	r1, r5
 800178c:	40d3      	lsrs	r3, r2
 800178e:	074a      	lsls	r2, r1, #29
 8001790:	d100      	bne.n	8001794 <__aeabi_ddiv+0x560>
 8001792:	e755      	b.n	8001640 <__aeabi_ddiv+0x40c>
 8001794:	220f      	movs	r2, #15
 8001796:	400a      	ands	r2, r1
 8001798:	2a04      	cmp	r2, #4
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x56a>
 800179c:	e74a      	b.n	8001634 <__aeabi_ddiv+0x400>
 800179e:	e74f      	b.n	8001640 <__aeabi_ddiv+0x40c>
 80017a0:	0015      	movs	r5, r2
 80017a2:	4286      	cmp	r6, r0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_ddiv+0x574>
 80017a6:	e66d      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017a8:	9a00      	ldr	r2, [sp, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d000      	beq.n	80017b0 <__aeabi_ddiv+0x57c>
 80017ae:	e669      	b.n	8001484 <__aeabi_ddiv+0x250>
 80017b0:	e66a      	b.n	8001488 <__aeabi_ddiv+0x254>
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <__aeabi_ddiv+0x5d8>)
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_ddiv+0x588>
 80017ba:	e713      	b.n	80015e4 <__aeabi_ddiv+0x3b0>
 80017bc:	2501      	movs	r5, #1
 80017be:	2100      	movs	r1, #0
 80017c0:	44a8      	add	r8, r5
 80017c2:	e66a      	b.n	800149a <__aeabi_ddiv+0x266>
 80017c4:	075d      	lsls	r5, r3, #29
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	0b1a      	lsrs	r2, r3, #12
 80017ca:	08c9      	lsrs	r1, r1, #3
 80017cc:	2300      	movs	r3, #0
 80017ce:	430d      	orrs	r5, r1
 80017d0:	e587      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017d2:	9900      	ldr	r1, [sp, #0]
 80017d4:	3d02      	subs	r5, #2
 80017d6:	004a      	lsls	r2, r1, #1
 80017d8:	428a      	cmp	r2, r1
 80017da:	41bf      	sbcs	r7, r7
 80017dc:	427f      	negs	r7, r7
 80017de:	193f      	adds	r7, r7, r4
 80017e0:	19f6      	adds	r6, r6, r7
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	e7dd      	b.n	80017a2 <__aeabi_ddiv+0x56e>
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4643      	mov	r3, r8
 80017ea:	0312      	lsls	r2, r2, #12
 80017ec:	431a      	orrs	r2, r3
 80017ee:	0312      	lsls	r2, r2, #12
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <__aeabi_ddiv+0x5cc>)
 80017f2:	0b12      	lsrs	r2, r2, #12
 80017f4:	e575      	b.n	80012e2 <__aeabi_ddiv+0xae>
 80017f6:	9900      	ldr	r1, [sp, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d3ea      	bcc.n	80017d2 <__aeabi_ddiv+0x59e>
 80017fc:	0015      	movs	r5, r2
 80017fe:	e7d3      	b.n	80017a8 <__aeabi_ddiv+0x574>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4645      	mov	r5, r8
 8001a2c:	46de      	mov	lr, fp
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	001f      	movs	r7, r3
 8001a36:	030b      	lsls	r3, r1, #12
 8001a38:	0b1b      	lsrs	r3, r3, #12
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	004d      	lsls	r5, r1, #1
 8001a3e:	0fcb      	lsrs	r3, r1, #31
 8001a40:	0004      	movs	r4, r0
 8001a42:	4691      	mov	r9, r2
 8001a44:	4698      	mov	r8, r3
 8001a46:	b087      	sub	sp, #28
 8001a48:	0d6d      	lsrs	r5, r5, #21
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x26>
 8001a4c:	e1cd      	b.n	8001dea <__aeabi_dmul+0x3c2>
 8001a4e:	4bce      	ldr	r3, [pc, #824]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a50:	429d      	cmp	r5, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x2e>
 8001a54:	e1e9      	b.n	8001e2a <__aeabi_dmul+0x402>
 8001a56:	465a      	mov	r2, fp
 8001a58:	0f43      	lsrs	r3, r0, #29
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	00c3      	lsls	r3, r0, #3
 8001a66:	469a      	mov	sl, r3
 8001a68:	4bc8      	ldr	r3, [pc, #800]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	469c      	mov	ip, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2600      	movs	r6, #0
 8001a72:	4465      	add	r5, ip
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x60>
 8001a86:	e189      	b.n	8001d9c <__aeabi_dmul+0x374>
 8001a88:	4abf      	ldr	r2, [pc, #764]	; (8001d88 <__aeabi_dmul+0x360>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <__aeabi_dmul+0x9a>
 8001a8e:	0f42      	lsrs	r2, r0, #29
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4322      	orrs	r2, r4
 8001a94:	2480      	movs	r4, #128	; 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4314      	orrs	r4, r2
 8001a9a:	4abc      	ldr	r2, [pc, #752]	; (8001d8c <__aeabi_dmul+0x364>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	4463      	add	r3, ip
 8001aa4:	195b      	adds	r3, r3, r5
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	407a      	eors	r2, r7
 8001aac:	3301      	adds	r3, #1
 8001aae:	00c0      	lsls	r0, r0, #3
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2e0a      	cmp	r6, #10
 8001ab6:	dd1c      	ble.n	8001af2 <__aeabi_dmul+0xca>
 8001ab8:	003a      	movs	r2, r7
 8001aba:	2e0b      	cmp	r6, #11
 8001abc:	d05e      	beq.n	8001b7c <__aeabi_dmul+0x154>
 8001abe:	4647      	mov	r7, r8
 8001ac0:	e056      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	4bb0      	ldr	r3, [pc, #704]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ac6:	4321      	orrs	r1, r4
 8001ac8:	18eb      	adds	r3, r5, r3
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d12a      	bne.n	8001b26 <__aeabi_dmul+0xfe>
 8001ad0:	2080      	movs	r0, #128	; 0x80
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	0100      	lsls	r0, r0, #4
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	4684      	mov	ip, r0
 8001ada:	4316      	orrs	r6, r2
 8001adc:	4642      	mov	r2, r8
 8001ade:	4463      	add	r3, ip
 8001ae0:	407a      	eors	r2, r7
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2e0a      	cmp	r6, #10
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dmul+0xc4>
 8001aea:	e231      	b.n	8001f50 <__aeabi_dmul+0x528>
 8001aec:	2000      	movs	r0, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2102      	movs	r1, #2
 8001af2:	2e02      	cmp	r6, #2
 8001af4:	dc26      	bgt.n	8001b44 <__aeabi_dmul+0x11c>
 8001af6:	3e01      	subs	r6, #1
 8001af8:	2e01      	cmp	r6, #1
 8001afa:	d852      	bhi.n	8001ba2 <__aeabi_dmul+0x17a>
 8001afc:	2902      	cmp	r1, #2
 8001afe:	d04c      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b00:	2901      	cmp	r1, #1
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001b04:	e118      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	07d2      	lsls	r2, r2, #31
 8001b12:	4313      	orrs	r3, r2
 8001b14:	0028      	movs	r0, r5
 8001b16:	0019      	movs	r1, r3
 8001b18:	b007      	add	sp, #28
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	2203      	movs	r2, #3
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	002b      	movs	r3, r5
 8001b2e:	468c      	mov	ip, r1
 8001b30:	4316      	orrs	r6, r2
 8001b32:	4642      	mov	r2, r8
 8001b34:	4463      	add	r3, ip
 8001b36:	407a      	eors	r2, r7
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2e0a      	cmp	r6, #10
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dmul+0x11a>
 8001b40:	e228      	b.n	8001f94 <__aeabi_dmul+0x56c>
 8001b42:	2103      	movs	r1, #3
 8001b44:	2501      	movs	r5, #1
 8001b46:	40b5      	lsls	r5, r6
 8001b48:	46ac      	mov	ip, r5
 8001b4a:	26a6      	movs	r6, #166	; 0xa6
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	00f6      	lsls	r6, r6, #3
 8001b50:	4035      	ands	r5, r6
 8001b52:	4233      	tst	r3, r6
 8001b54:	d10b      	bne.n	8001b6e <__aeabi_dmul+0x146>
 8001b56:	2690      	movs	r6, #144	; 0x90
 8001b58:	00b6      	lsls	r6, r6, #2
 8001b5a:	4233      	tst	r3, r6
 8001b5c:	d118      	bne.n	8001b90 <__aeabi_dmul+0x168>
 8001b5e:	3eb9      	subs	r6, #185	; 0xb9
 8001b60:	3eff      	subs	r6, #255	; 0xff
 8001b62:	421e      	tst	r6, r3
 8001b64:	d01d      	beq.n	8001ba2 <__aeabi_dmul+0x17a>
 8001b66:	46a3      	mov	fp, r4
 8001b68:	4682      	mov	sl, r0
 8001b6a:	9100      	str	r1, [sp, #0]
 8001b6c:	e000      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001b6e:	0017      	movs	r7, r2
 8001b70:	9900      	ldr	r1, [sp, #0]
 8001b72:	003a      	movs	r2, r7
 8001b74:	2902      	cmp	r1, #2
 8001b76:	d010      	beq.n	8001b9a <__aeabi_dmul+0x172>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	2903      	cmp	r1, #3
 8001b7e:	d1bf      	bne.n	8001b00 <__aeabi_dmul+0xd8>
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	031b      	lsls	r3, r3, #12
 8001b84:	431c      	orrs	r4, r3
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b8c:	0b24      	lsrs	r4, r4, #12
 8001b8e:	e7bd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2200      	movs	r2, #0
 8001b94:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <__aeabi_dmul+0x360>)
 8001b96:	0324      	lsls	r4, r4, #12
 8001b98:	e7b8      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <__aeabi_dmul+0x360>)
 8001ba0:	e7b4      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ba2:	4653      	mov	r3, sl
 8001ba4:	041e      	lsls	r6, r3, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	0c1f      	lsrs	r7, r3, #16
 8001baa:	0033      	movs	r3, r6
 8001bac:	0c01      	lsrs	r1, r0, #16
 8001bae:	0400      	lsls	r0, r0, #16
 8001bb0:	0c00      	lsrs	r0, r0, #16
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	437b      	muls	r3, r7
 8001bba:	4699      	mov	r9, r3
 8001bbc:	0033      	movs	r3, r6
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	000d      	movs	r5, r1
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	469a      	mov	sl, r3
 8001bca:	437d      	muls	r5, r7
 8001bcc:	44cc      	add	ip, r9
 8001bce:	44d4      	add	ip, sl
 8001bd0:	9500      	str	r5, [sp, #0]
 8001bd2:	45e1      	cmp	r9, ip
 8001bd4:	d904      	bls.n	8001be0 <__aeabi_dmul+0x1b8>
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	4699      	mov	r9, r3
 8001bdc:	444d      	add	r5, r9
 8001bde:	9500      	str	r5, [sp, #0]
 8001be0:	4663      	mov	r3, ip
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	001d      	movs	r5, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	469c      	mov	ip, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	4663      	mov	r3, ip
 8001bf6:	4443      	add	r3, r8
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	0c23      	lsrs	r3, r4, #16
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	0033      	movs	r3, r6
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	4363      	muls	r3, r4
 8001c06:	469c      	mov	ip, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	437b      	muls	r3, r7
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4643      	mov	r3, r8
 8001c10:	435e      	muls	r6, r3
 8001c12:	435f      	muls	r7, r3
 8001c14:	444e      	add	r6, r9
 8001c16:	4663      	mov	r3, ip
 8001c18:	46b2      	mov	sl, r6
 8001c1a:	0c1e      	lsrs	r6, r3, #16
 8001c1c:	4456      	add	r6, sl
 8001c1e:	45b1      	cmp	r9, r6
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x202>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4699      	mov	r9, r3
 8001c28:	444f      	add	r7, r9
 8001c2a:	0c33      	lsrs	r3, r6, #16
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	003b      	movs	r3, r7
 8001c30:	444b      	add	r3, r9
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	4663      	mov	r3, ip
 8001c36:	46ac      	mov	ip, r5
 8001c38:	041f      	lsls	r7, r3, #16
 8001c3a:	0c3f      	lsrs	r7, r7, #16
 8001c3c:	0436      	lsls	r6, r6, #16
 8001c3e:	19f6      	adds	r6, r6, r7
 8001c40:	44b4      	add	ip, r6
 8001c42:	4663      	mov	r3, ip
 8001c44:	9304      	str	r3, [sp, #16]
 8001c46:	465b      	mov	r3, fp
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	041f      	lsls	r7, r3, #16
 8001c50:	0c3f      	lsrs	r7, r7, #16
 8001c52:	003b      	movs	r3, r7
 8001c54:	4343      	muls	r3, r0
 8001c56:	4699      	mov	r9, r3
 8001c58:	4663      	mov	r3, ip
 8001c5a:	4343      	muls	r3, r0
 8001c5c:	469a      	mov	sl, r3
 8001c5e:	464b      	mov	r3, r9
 8001c60:	4660      	mov	r0, ip
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	469b      	mov	fp, r3
 8001c66:	4348      	muls	r0, r1
 8001c68:	4379      	muls	r1, r7
 8001c6a:	4451      	add	r1, sl
 8001c6c:	4459      	add	r1, fp
 8001c6e:	458a      	cmp	sl, r1
 8001c70:	d903      	bls.n	8001c7a <__aeabi_dmul+0x252>
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	469a      	mov	sl, r3
 8001c78:	4450      	add	r0, sl
 8001c7a:	0c0b      	lsrs	r3, r1, #16
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	464b      	mov	r3, r9
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	4699      	mov	r9, r3
 8001c86:	003b      	movs	r3, r7
 8001c88:	4363      	muls	r3, r4
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4645      	mov	r5, r8
 8001c8e:	4449      	add	r1, r9
 8001c90:	4699      	mov	r9, r3
 8001c92:	4663      	mov	r3, ip
 8001c94:	435c      	muls	r4, r3
 8001c96:	436b      	muls	r3, r5
 8001c98:	469c      	mov	ip, r3
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	436f      	muls	r7, r5
 8001ca2:	193f      	adds	r7, r7, r4
 8001ca4:	4447      	add	r7, r8
 8001ca6:	4450      	add	r0, sl
 8001ca8:	42bc      	cmp	r4, r7
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_dmul+0x28c>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	44c4      	add	ip, r8
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	9d00      	ldr	r5, [sp, #0]
 8001cb8:	4698      	mov	r8, r3
 8001cba:	4445      	add	r5, r8
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	41b6      	sbcs	r6, r6
 8001cc0:	4273      	negs	r3, r6
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	041e      	lsls	r6, r3, #16
 8001cc8:	9b05      	ldr	r3, [sp, #20]
 8001cca:	043c      	lsls	r4, r7, #16
 8001ccc:	4699      	mov	r9, r3
 8001cce:	0c36      	lsrs	r6, r6, #16
 8001cd0:	19a4      	adds	r4, r4, r6
 8001cd2:	444c      	add	r4, r9
 8001cd4:	46a1      	mov	r9, r4
 8001cd6:	4683      	mov	fp, r0
 8001cd8:	186e      	adds	r6, r5, r1
 8001cda:	44c1      	add	r9, r8
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	4189      	sbcs	r1, r1
 8001ce0:	44cb      	add	fp, r9
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	186d      	adds	r5, r5, r1
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	41a4      	sbcs	r4, r4
 8001cec:	45c1      	cmp	r9, r8
 8001cee:	419b      	sbcs	r3, r3
 8001cf0:	4583      	cmp	fp, r0
 8001cf2:	4180      	sbcs	r0, r0
 8001cf4:	428d      	cmp	r5, r1
 8001cf6:	4189      	sbcs	r1, r1
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	4264      	negs	r4, r4
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4240      	negs	r0, r0
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	4249      	negs	r1, r1
 8001d04:	4301      	orrs	r1, r0
 8001d06:	0270      	lsls	r0, r6, #9
 8001d08:	0c3f      	lsrs	r7, r7, #16
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	19e4      	adds	r4, r4, r7
 8001d0e:	1e47      	subs	r7, r0, #1
 8001d10:	41b8      	sbcs	r0, r7
 8001d12:	1864      	adds	r4, r4, r1
 8001d14:	4464      	add	r4, ip
 8001d16:	0df6      	lsrs	r6, r6, #23
 8001d18:	0261      	lsls	r1, r4, #9
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	0dec      	lsrs	r4, r5, #23
 8001d1e:	026e      	lsls	r6, r5, #9
 8001d20:	430c      	orrs	r4, r1
 8001d22:	4330      	orrs	r0, r6
 8001d24:	01c9      	lsls	r1, r1, #7
 8001d26:	d400      	bmi.n	8001d2a <__aeabi_dmul+0x302>
 8001d28:	e0f1      	b.n	8001f0e <__aeabi_dmul+0x4e6>
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	0843      	lsrs	r3, r0, #1
 8001d2e:	4001      	ands	r1, r0
 8001d30:	430b      	orrs	r3, r1
 8001d32:	07e0      	lsls	r0, r4, #31
 8001d34:	4318      	orrs	r0, r3
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <__aeabi_dmul+0x368>)
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	468c      	mov	ip, r1
 8001d3e:	4463      	add	r3, ip
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dmul+0x31e>
 8001d44:	e097      	b.n	8001e76 <__aeabi_dmul+0x44e>
 8001d46:	0741      	lsls	r1, r0, #29
 8001d48:	d009      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	4001      	ands	r1, r0
 8001d4e:	2904      	cmp	r1, #4
 8001d50:	d005      	beq.n	8001d5e <__aeabi_dmul+0x336>
 8001d52:	1d01      	adds	r1, r0, #4
 8001d54:	4281      	cmp	r1, r0
 8001d56:	4180      	sbcs	r0, r0
 8001d58:	4240      	negs	r0, r0
 8001d5a:	1824      	adds	r4, r4, r0
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	01e1      	lsls	r1, r4, #7
 8001d60:	d506      	bpl.n	8001d70 <__aeabi_dmul+0x348>
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	00c9      	lsls	r1, r1, #3
 8001d66:	468c      	mov	ip, r1
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <__aeabi_dmul+0x36c>)
 8001d6a:	401c      	ands	r4, r3
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	4463      	add	r3, ip
 8001d70:	4909      	ldr	r1, [pc, #36]	; (8001d98 <__aeabi_dmul+0x370>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dmul+0x350>
 8001d76:	e710      	b.n	8001b9a <__aeabi_dmul+0x172>
 8001d78:	0761      	lsls	r1, r4, #29
 8001d7a:	08c5      	lsrs	r5, r0, #3
 8001d7c:	0264      	lsls	r4, r4, #9
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	430d      	orrs	r5, r1
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	0d5b      	lsrs	r3, r3, #21
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	000003ff 	.word	0x000003ff
 8001d94:	feffffff 	.word	0xfeffffff
 8001d98:	000007fe 	.word	0x000007fe
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	d059      	beq.n	8001e56 <__aeabi_dmul+0x42e>
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dmul+0x380>
 8001da6:	e0a3      	b.n	8001ef0 <__aeabi_dmul+0x4c8>
 8001da8:	0020      	movs	r0, r4
 8001daa:	f000 fd2b 	bl	8002804 <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	390b      	subs	r1, #11
 8001db4:	221d      	movs	r2, #29
 8001db6:	1a52      	subs	r2, r2, r1
 8001db8:	4649      	mov	r1, r9
 8001dba:	0018      	movs	r0, r3
 8001dbc:	40d1      	lsrs	r1, r2
 8001dbe:	464a      	mov	r2, r9
 8001dc0:	3808      	subs	r0, #8
 8001dc2:	4082      	lsls	r2, r0
 8001dc4:	4084      	lsls	r4, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	430c      	orrs	r4, r1
 8001dca:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <__aeabi_dmul+0x574>)
 8001dcc:	1aeb      	subs	r3, r5, r3
 8001dce:	4694      	mov	ip, r2
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	4463      	add	r3, ip
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	407a      	eors	r2, r7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dmul+0x3c0>
 8001de6:	e667      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001de8:	e683      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001dea:	465b      	mov	r3, fp
 8001dec:	4303      	orrs	r3, r0
 8001dee:	469a      	mov	sl, r3
 8001df0:	d02a      	beq.n	8001e48 <__aeabi_dmul+0x420>
 8001df2:	465b      	mov	r3, fp
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06d      	beq.n	8001ed4 <__aeabi_dmul+0x4ac>
 8001df8:	4658      	mov	r0, fp
 8001dfa:	f000 fd03 	bl	8002804 <__clzsi2>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	0003      	movs	r3, r0
 8001e02:	390b      	subs	r1, #11
 8001e04:	221d      	movs	r2, #29
 8001e06:	1a52      	subs	r2, r2, r1
 8001e08:	0021      	movs	r1, r4
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	465d      	mov	r5, fp
 8001e0e:	40d1      	lsrs	r1, r2
 8001e10:	3808      	subs	r0, #8
 8001e12:	4085      	lsls	r5, r0
 8001e14:	000a      	movs	r2, r1
 8001e16:	4084      	lsls	r4, r0
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	4d5f      	ldr	r5, [pc, #380]	; (8001f9c <__aeabi_dmul+0x574>)
 8001e20:	2600      	movs	r6, #0
 8001e22:	1aed      	subs	r5, r5, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	e625      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	469a      	mov	sl, r3
 8001e30:	d105      	bne.n	8001e3e <__aeabi_dmul+0x416>
 8001e32:	2300      	movs	r3, #0
 8001e34:	469b      	mov	fp, r3
 8001e36:	3302      	adds	r3, #2
 8001e38:	2608      	movs	r6, #8
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e61b      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4682      	mov	sl, r0
 8001e42:	260c      	movs	r6, #12
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	e616      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	469b      	mov	fp, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2500      	movs	r5, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	e60f      	b.n	8001a76 <__aeabi_dmul+0x4e>
 8001e56:	4642      	mov	r2, r8
 8001e58:	3301      	adds	r3, #1
 8001e5a:	9501      	str	r5, [sp, #4]
 8001e5c:	431e      	orrs	r6, r3
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	407a      	eors	r2, r7
 8001e62:	3301      	adds	r3, #1
 8001e64:	2400      	movs	r4, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	2101      	movs	r1, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2e0a      	cmp	r6, #10
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dmul+0x44c>
 8001e72:	e621      	b.n	8001ab8 <__aeabi_dmul+0x90>
 8001e74:	e63d      	b.n	8001af2 <__aeabi_dmul+0xca>
 8001e76:	2101      	movs	r1, #1
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	2938      	cmp	r1, #56	; 0x38
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x458>
 8001e7e:	e642      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dd47      	ble.n	8001f14 <__aeabi_dmul+0x4ec>
 8001e84:	261f      	movs	r6, #31
 8001e86:	0025      	movs	r5, r4
 8001e88:	4276      	negs	r6, r6
 8001e8a:	1af3      	subs	r3, r6, r3
 8001e8c:	40dd      	lsrs	r5, r3
 8001e8e:	002b      	movs	r3, r5
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_dmul+0x478>
 8001e94:	4942      	ldr	r1, [pc, #264]	; (8001fa0 <__aeabi_dmul+0x578>)
 8001e96:	9d02      	ldr	r5, [sp, #8]
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4465      	add	r5, ip
 8001e9c:	40ac      	lsls	r4, r5
 8001e9e:	4320      	orrs	r0, r4
 8001ea0:	1e41      	subs	r1, r0, #1
 8001ea2:	4188      	sbcs	r0, r1
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	001d      	movs	r5, r3
 8001eaa:	2400      	movs	r4, #0
 8001eac:	4005      	ands	r5, r0
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d04a      	beq.n	8001f48 <__aeabi_dmul+0x520>
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	4003      	ands	r3, r0
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d042      	beq.n	8001f42 <__aeabi_dmul+0x51a>
 8001ebc:	1d03      	adds	r3, r0, #4
 8001ebe:	4283      	cmp	r3, r0
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1824      	adds	r4, r4, r0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	0223      	lsls	r3, r4, #8
 8001eca:	d53a      	bpl.n	8001f42 <__aeabi_dmul+0x51a>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e61b      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001ed4:	f000 fc96 	bl	8002804 <__clzsi2>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	3115      	adds	r1, #21
 8001ede:	3320      	adds	r3, #32
 8001ee0:	291c      	cmp	r1, #28
 8001ee2:	dd8f      	ble.n	8001e04 <__aeabi_dmul+0x3dc>
 8001ee4:	3808      	subs	r0, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4084      	lsls	r4, r0
 8001eea:	4692      	mov	sl, r2
 8001eec:	46a3      	mov	fp, r4
 8001eee:	e796      	b.n	8001e1e <__aeabi_dmul+0x3f6>
 8001ef0:	f000 fc88 	bl	8002804 <__clzsi2>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	3115      	adds	r1, #21
 8001efa:	3320      	adds	r3, #32
 8001efc:	291c      	cmp	r1, #28
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dmul+0x4da>
 8001f00:	e758      	b.n	8001db4 <__aeabi_dmul+0x38c>
 8001f02:	0002      	movs	r2, r0
 8001f04:	464c      	mov	r4, r9
 8001f06:	3a08      	subs	r2, #8
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4094      	lsls	r4, r2
 8001f0c:	e75d      	b.n	8001dca <__aeabi_dmul+0x3a2>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	e711      	b.n	8001d38 <__aeabi_dmul+0x310>
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <__aeabi_dmul+0x57c>)
 8001f16:	0026      	movs	r6, r4
 8001f18:	469c      	mov	ip, r3
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	9d02      	ldr	r5, [sp, #8]
 8001f1e:	40cb      	lsrs	r3, r1
 8001f20:	4465      	add	r5, ip
 8001f22:	40ae      	lsls	r6, r5
 8001f24:	431e      	orrs	r6, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	40ab      	lsls	r3, r5
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	4183      	sbcs	r3, r0
 8001f2e:	0030      	movs	r0, r6
 8001f30:	4318      	orrs	r0, r3
 8001f32:	40cc      	lsrs	r4, r1
 8001f34:	0743      	lsls	r3, r0, #29
 8001f36:	d0c7      	beq.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f38:	230f      	movs	r3, #15
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d1bd      	bne.n	8001ebc <__aeabi_dmul+0x494>
 8001f40:	e7c2      	b.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001f42:	0765      	lsls	r5, r4, #29
 8001f44:	0264      	lsls	r4, r4, #9
 8001f46:	0b24      	lsrs	r4, r4, #12
 8001f48:	08c0      	lsrs	r0, r0, #3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4305      	orrs	r5, r0
 8001f4e:	e5dd      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f50:	2500      	movs	r5, #0
 8001f52:	2302      	movs	r3, #2
 8001f54:	2e0f      	cmp	r6, #15
 8001f56:	d10c      	bne.n	8001f72 <__aeabi_dmul+0x54a>
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	465b      	mov	r3, fp
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	4223      	tst	r3, r4
 8001f60:	d00e      	beq.n	8001f80 <__aeabi_dmul+0x558>
 8001f62:	4221      	tst	r1, r4
 8001f64:	d10c      	bne.n	8001f80 <__aeabi_dmul+0x558>
 8001f66:	430c      	orrs	r4, r1
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	003a      	movs	r2, r7
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	e5cc      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f72:	2e0b      	cmp	r6, #11
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dmul+0x550>
 8001f76:	e5a2      	b.n	8001abe <__aeabi_dmul+0x96>
 8001f78:	468b      	mov	fp, r1
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	e5f7      	b.n	8001b70 <__aeabi_dmul+0x148>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	465b      	mov	r3, fp
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	431c      	orrs	r4, r3
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4655      	mov	r5, sl
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <__aeabi_dmul+0x580>)
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	e5bb      	b.n	8001b0c <__aeabi_dmul+0xe4>
 8001f94:	464d      	mov	r5, r9
 8001f96:	0021      	movs	r1, r4
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e7db      	b.n	8001f54 <__aeabi_dmul+0x52c>
 8001f9c:	fffffc0d 	.word	0xfffffc0d
 8001fa0:	0000043e 	.word	0x0000043e
 8001fa4:	0000041e 	.word	0x0000041e
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__aeabi_dsub>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	000d      	movs	r5, r1
 8001fba:	0004      	movs	r4, r0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	032b      	lsls	r3, r5, #12
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	0f62      	lsrs	r2, r4, #29
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	00e3      	lsls	r3, r4, #3
 8001fca:	030c      	lsls	r4, r1, #12
 8001fcc:	0a64      	lsrs	r4, r4, #9
 8001fce:	0f47      	lsrs	r7, r0, #29
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	4cd0      	ldr	r4, [pc, #832]	; (8002314 <__aeabi_dsub+0x368>)
 8001fd4:	006e      	lsls	r6, r5, #1
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	b083      	sub	sp, #12
 8001fda:	004a      	lsls	r2, r1, #1
 8001fdc:	00c0      	lsls	r0, r0, #3
 8001fde:	4698      	mov	r8, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	0d76      	lsrs	r6, r6, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	0d52      	lsrs	r2, r2, #21
 8001fe8:	0fc9      	lsrs	r1, r1, #31
 8001fea:	9001      	str	r0, [sp, #4]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x46>
 8001ff0:	e0b9      	b.n	8002166 <__aeabi_dsub+0x1ba>
 8001ff2:	2401      	movs	r4, #1
 8001ff4:	4061      	eors	r1, r4
 8001ff6:	468b      	mov	fp, r1
 8001ff8:	428d      	cmp	r5, r1
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x52>
 8001ffc:	e08d      	b.n	800211a <__aeabi_dsub+0x16e>
 8001ffe:	1ab4      	subs	r4, r6, r2
 8002000:	46a4      	mov	ip, r4
 8002002:	2c00      	cmp	r4, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x5c>
 8002006:	e0b7      	b.n	8002178 <__aeabi_dsub+0x1cc>
 8002008:	2a00      	cmp	r2, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x62>
 800200c:	e0cb      	b.n	80021a6 <__aeabi_dsub+0x1fa>
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <__aeabi_dsub+0x368>)
 8002010:	4296      	cmp	r6, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x6a>
 8002014:	e186      	b.n	8002324 <__aeabi_dsub+0x378>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	4317      	orrs	r7, r2
 800201c:	4662      	mov	r2, ip
 800201e:	2a38      	cmp	r2, #56	; 0x38
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0x78>
 8002022:	e1a4      	b.n	800236e <__aeabi_dsub+0x3c2>
 8002024:	2a1f      	cmp	r2, #31
 8002026:	dd00      	ble.n	800202a <__aeabi_dsub+0x7e>
 8002028:	e21d      	b.n	8002466 <__aeabi_dsub+0x4ba>
 800202a:	4661      	mov	r1, ip
 800202c:	2220      	movs	r2, #32
 800202e:	003c      	movs	r4, r7
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	0001      	movs	r1, r0
 8002034:	4090      	lsls	r0, r2
 8002036:	4094      	lsls	r4, r2
 8002038:	1e42      	subs	r2, r0, #1
 800203a:	4190      	sbcs	r0, r2
 800203c:	4662      	mov	r2, ip
 800203e:	46a0      	mov	r8, r4
 8002040:	4664      	mov	r4, ip
 8002042:	40d7      	lsrs	r7, r2
 8002044:	464a      	mov	r2, r9
 8002046:	40e1      	lsrs	r1, r4
 8002048:	4644      	mov	r4, r8
 800204a:	1bd2      	subs	r2, r2, r7
 800204c:	4691      	mov	r9, r2
 800204e:	430c      	orrs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	1b1c      	subs	r4, r3, r4
 8002054:	42a3      	cmp	r3, r4
 8002056:	4192      	sbcs	r2, r2
 8002058:	464b      	mov	r3, r9
 800205a:	4252      	negs	r2, r2
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	469a      	mov	sl, r3
 8002060:	4653      	mov	r3, sl
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d400      	bmi.n	8002068 <__aeabi_dsub+0xbc>
 8002066:	e12b      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002068:	4653      	mov	r3, sl
 800206a:	025a      	lsls	r2, r3, #9
 800206c:	0a53      	lsrs	r3, r2, #9
 800206e:	469a      	mov	sl, r3
 8002070:	4653      	mov	r3, sl
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0xcc>
 8002076:	e166      	b.n	8002346 <__aeabi_dsub+0x39a>
 8002078:	4650      	mov	r0, sl
 800207a:	f000 fbc3 	bl	8002804 <__clzsi2>
 800207e:	0003      	movs	r3, r0
 8002080:	3b08      	subs	r3, #8
 8002082:	2220      	movs	r2, #32
 8002084:	0020      	movs	r0, r4
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	4651      	mov	r1, sl
 800208a:	40d0      	lsrs	r0, r2
 800208c:	4099      	lsls	r1, r3
 800208e:	0002      	movs	r2, r0
 8002090:	409c      	lsls	r4, r3
 8002092:	430a      	orrs	r2, r1
 8002094:	429e      	cmp	r6, r3
 8002096:	dd00      	ble.n	800209a <__aeabi_dsub+0xee>
 8002098:	e164      	b.n	8002364 <__aeabi_dsub+0x3b8>
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	291f      	cmp	r1, #31
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dsub+0xf8>
 80020a2:	e0fe      	b.n	80022a2 <__aeabi_dsub+0x2f6>
 80020a4:	2320      	movs	r3, #32
 80020a6:	0010      	movs	r0, r2
 80020a8:	0026      	movs	r6, r4
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	409c      	lsls	r4, r3
 80020ae:	4098      	lsls	r0, r3
 80020b0:	40ce      	lsrs	r6, r1
 80020b2:	40ca      	lsrs	r2, r1
 80020b4:	1e63      	subs	r3, r4, #1
 80020b6:	419c      	sbcs	r4, r3
 80020b8:	4330      	orrs	r0, r6
 80020ba:	4692      	mov	sl, r2
 80020bc:	2600      	movs	r6, #0
 80020be:	4304      	orrs	r4, r0
 80020c0:	0763      	lsls	r3, r4, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020c4:	230f      	movs	r3, #15
 80020c6:	4023      	ands	r3, r4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dsub+0x12c>
 80020cc:	1d23      	adds	r3, r4, #4
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	41a4      	sbcs	r4, r4
 80020d2:	4264      	negs	r4, r4
 80020d4:	44a2      	add	sl, r4
 80020d6:	001c      	movs	r4, r3
 80020d8:	4653      	mov	r3, sl
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x134>
 80020de:	e0f2      	b.n	80022c6 <__aeabi_dsub+0x31a>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <__aeabi_dsub+0x368>)
 80020e2:	3601      	adds	r6, #1
 80020e4:	429e      	cmp	r6, r3
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x13e>
 80020e8:	e10f      	b.n	800230a <__aeabi_dsub+0x35e>
 80020ea:	4653      	mov	r3, sl
 80020ec:	498a      	ldr	r1, [pc, #552]	; (8002318 <__aeabi_dsub+0x36c>)
 80020ee:	08e4      	lsrs	r4, r4, #3
 80020f0:	400b      	ands	r3, r1
 80020f2:	0019      	movs	r1, r3
 80020f4:	075b      	lsls	r3, r3, #29
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0572      	lsls	r2, r6, #21
 80020fa:	024c      	lsls	r4, r1, #9
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d52      	lsrs	r2, r2, #21
 8002100:	0512      	lsls	r2, r2, #20
 8002102:	4322      	orrs	r2, r4
 8002104:	07ed      	lsls	r5, r5, #31
 8002106:	432a      	orrs	r2, r5
 8002108:	0018      	movs	r0, r3
 800210a:	0011      	movs	r1, r2
 800210c:	b003      	add	sp, #12
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	46bb      	mov	fp, r7
 8002112:	46b2      	mov	sl, r6
 8002114:	46a9      	mov	r9, r5
 8002116:	46a0      	mov	r8, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	1ab4      	subs	r4, r6, r2
 800211c:	46a4      	mov	ip, r4
 800211e:	2c00      	cmp	r4, #0
 8002120:	dd59      	ble.n	80021d6 <__aeabi_dsub+0x22a>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x17c>
 8002126:	e0b0      	b.n	800228a <__aeabi_dsub+0x2de>
 8002128:	4556      	cmp	r6, sl
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x182>
 800212c:	e0fa      	b.n	8002324 <__aeabi_dsub+0x378>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0412      	lsls	r2, r2, #16
 8002132:	4317      	orrs	r7, r2
 8002134:	4662      	mov	r2, ip
 8002136:	2a38      	cmp	r2, #56	; 0x38
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x190>
 800213a:	e0d4      	b.n	80022e6 <__aeabi_dsub+0x33a>
 800213c:	2a1f      	cmp	r2, #31
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dsub+0x196>
 8002140:	e1c0      	b.n	80024c4 <__aeabi_dsub+0x518>
 8002142:	0039      	movs	r1, r7
 8002144:	3a20      	subs	r2, #32
 8002146:	40d1      	lsrs	r1, r2
 8002148:	4662      	mov	r2, ip
 800214a:	2a20      	cmp	r2, #32
 800214c:	d006      	beq.n	800215c <__aeabi_dsub+0x1b0>
 800214e:	4664      	mov	r4, ip
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	1b12      	subs	r2, r2, r4
 8002154:	003c      	movs	r4, r7
 8002156:	4094      	lsls	r4, r2
 8002158:	4304      	orrs	r4, r0
 800215a:	9401      	str	r4, [sp, #4]
 800215c:	9c01      	ldr	r4, [sp, #4]
 800215e:	1e62      	subs	r2, r4, #1
 8002160:	4194      	sbcs	r4, r2
 8002162:	430c      	orrs	r4, r1
 8002164:	e0c3      	b.n	80022ee <__aeabi_dsub+0x342>
 8002166:	003c      	movs	r4, r7
 8002168:	4304      	orrs	r4, r0
 800216a:	d02b      	beq.n	80021c4 <__aeabi_dsub+0x218>
 800216c:	468b      	mov	fp, r1
 800216e:	428d      	cmp	r5, r1
 8002170:	d02e      	beq.n	80021d0 <__aeabi_dsub+0x224>
 8002172:	4c6a      	ldr	r4, [pc, #424]	; (800231c <__aeabi_dsub+0x370>)
 8002174:	46a4      	mov	ip, r4
 8002176:	44b4      	add	ip, r6
 8002178:	4664      	mov	r4, ip
 800217a:	2c00      	cmp	r4, #0
 800217c:	d05f      	beq.n	800223e <__aeabi_dsub+0x292>
 800217e:	1b94      	subs	r4, r2, r6
 8002180:	46a4      	mov	ip, r4
 8002182:	2e00      	cmp	r6, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x1dc>
 8002186:	e120      	b.n	80023ca <__aeabi_dsub+0x41e>
 8002188:	464c      	mov	r4, r9
 800218a:	431c      	orrs	r4, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x1e4>
 800218e:	e1c7      	b.n	8002520 <__aeabi_dsub+0x574>
 8002190:	4661      	mov	r1, ip
 8002192:	1e4c      	subs	r4, r1, #1
 8002194:	2901      	cmp	r1, #1
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x1ee>
 8002198:	e223      	b.n	80025e2 <__aeabi_dsub+0x636>
 800219a:	4d5e      	ldr	r5, [pc, #376]	; (8002314 <__aeabi_dsub+0x368>)
 800219c:	45ac      	cmp	ip, r5
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x1f6>
 80021a0:	e1d8      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80021a2:	46a4      	mov	ip, r4
 80021a4:	e11a      	b.n	80023dc <__aeabi_dsub+0x430>
 80021a6:	003a      	movs	r2, r7
 80021a8:	4302      	orrs	r2, r0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x202>
 80021ac:	e0e4      	b.n	8002378 <__aeabi_dsub+0x3cc>
 80021ae:	0022      	movs	r2, r4
 80021b0:	3a01      	subs	r2, #1
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x20c>
 80021b6:	e1c3      	b.n	8002540 <__aeabi_dsub+0x594>
 80021b8:	4956      	ldr	r1, [pc, #344]	; (8002314 <__aeabi_dsub+0x368>)
 80021ba:	428c      	cmp	r4, r1
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x214>
 80021be:	e0b1      	b.n	8002324 <__aeabi_dsub+0x378>
 80021c0:	4694      	mov	ip, r2
 80021c2:	e72b      	b.n	800201c <__aeabi_dsub+0x70>
 80021c4:	2401      	movs	r4, #1
 80021c6:	4061      	eors	r1, r4
 80021c8:	468b      	mov	fp, r1
 80021ca:	428d      	cmp	r5, r1
 80021cc:	d000      	beq.n	80021d0 <__aeabi_dsub+0x224>
 80021ce:	e716      	b.n	8001ffe <__aeabi_dsub+0x52>
 80021d0:	4952      	ldr	r1, [pc, #328]	; (800231c <__aeabi_dsub+0x370>)
 80021d2:	468c      	mov	ip, r1
 80021d4:	44b4      	add	ip, r6
 80021d6:	4664      	mov	r4, ip
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x232>
 80021dc:	e0d3      	b.n	8002386 <__aeabi_dsub+0x3da>
 80021de:	1b91      	subs	r1, r2, r6
 80021e0:	468c      	mov	ip, r1
 80021e2:	2e00      	cmp	r6, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x23c>
 80021e6:	e15e      	b.n	80024a6 <__aeabi_dsub+0x4fa>
 80021e8:	494a      	ldr	r1, [pc, #296]	; (8002314 <__aeabi_dsub+0x368>)
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x244>
 80021ee:	e1be      	b.n	800256e <__aeabi_dsub+0x5c2>
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	464c      	mov	r4, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	430c      	orrs	r4, r1
 80021f8:	46a1      	mov	r9, r4
 80021fa:	4661      	mov	r1, ip
 80021fc:	2938      	cmp	r1, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0x256>
 8002200:	e1ba      	b.n	8002578 <__aeabi_dsub+0x5cc>
 8002202:	291f      	cmp	r1, #31
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x25c>
 8002206:	e227      	b.n	8002658 <__aeabi_dsub+0x6ac>
 8002208:	2420      	movs	r4, #32
 800220a:	1a64      	subs	r4, r4, r1
 800220c:	4649      	mov	r1, r9
 800220e:	40a1      	lsls	r1, r4
 8002210:	001e      	movs	r6, r3
 8002212:	4688      	mov	r8, r1
 8002214:	4661      	mov	r1, ip
 8002216:	40a3      	lsls	r3, r4
 8002218:	40ce      	lsrs	r6, r1
 800221a:	4641      	mov	r1, r8
 800221c:	1e5c      	subs	r4, r3, #1
 800221e:	41a3      	sbcs	r3, r4
 8002220:	4331      	orrs	r1, r6
 8002222:	4319      	orrs	r1, r3
 8002224:	000c      	movs	r4, r1
 8002226:	4663      	mov	r3, ip
 8002228:	4649      	mov	r1, r9
 800222a:	40d9      	lsrs	r1, r3
 800222c:	187f      	adds	r7, r7, r1
 800222e:	1824      	adds	r4, r4, r0
 8002230:	4284      	cmp	r4, r0
 8002232:	419b      	sbcs	r3, r3
 8002234:	425b      	negs	r3, r3
 8002236:	469a      	mov	sl, r3
 8002238:	0016      	movs	r6, r2
 800223a:	44ba      	add	sl, r7
 800223c:	e05d      	b.n	80022fa <__aeabi_dsub+0x34e>
 800223e:	4c38      	ldr	r4, [pc, #224]	; (8002320 <__aeabi_dsub+0x374>)
 8002240:	1c72      	adds	r2, r6, #1
 8002242:	4222      	tst	r2, r4
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x29c>
 8002246:	e0df      	b.n	8002408 <__aeabi_dsub+0x45c>
 8002248:	464a      	mov	r2, r9
 800224a:	431a      	orrs	r2, r3
 800224c:	2e00      	cmp	r6, #0
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x2a6>
 8002250:	e15c      	b.n	800250c <__aeabi_dsub+0x560>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x2ac>
 8002256:	e1cf      	b.n	80025f8 <__aeabi_dsub+0x64c>
 8002258:	003a      	movs	r2, r7
 800225a:	4302      	orrs	r2, r0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x2b4>
 800225e:	e17f      	b.n	8002560 <__aeabi_dsub+0x5b4>
 8002260:	1a1c      	subs	r4, r3, r0
 8002262:	464a      	mov	r2, r9
 8002264:	42a3      	cmp	r3, r4
 8002266:	4189      	sbcs	r1, r1
 8002268:	1bd2      	subs	r2, r2, r7
 800226a:	4249      	negs	r1, r1
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	4692      	mov	sl, r2
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	d400      	bmi.n	8002276 <__aeabi_dsub+0x2ca>
 8002274:	e20a      	b.n	800268c <__aeabi_dsub+0x6e0>
 8002276:	1ac4      	subs	r4, r0, r3
 8002278:	42a0      	cmp	r0, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	464b      	mov	r3, r9
 800227e:	4240      	negs	r0, r0
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	1a3b      	subs	r3, r7, r0
 8002284:	469a      	mov	sl, r3
 8002286:	465d      	mov	r5, fp
 8002288:	e71a      	b.n	80020c0 <__aeabi_dsub+0x114>
 800228a:	003a      	movs	r2, r7
 800228c:	4302      	orrs	r2, r0
 800228e:	d073      	beq.n	8002378 <__aeabi_dsub+0x3cc>
 8002290:	0022      	movs	r2, r4
 8002292:	3a01      	subs	r2, #1
 8002294:	2c01      	cmp	r4, #1
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x2ee>
 8002298:	e0cb      	b.n	8002432 <__aeabi_dsub+0x486>
 800229a:	4554      	cmp	r4, sl
 800229c:	d042      	beq.n	8002324 <__aeabi_dsub+0x378>
 800229e:	4694      	mov	ip, r2
 80022a0:	e748      	b.n	8002134 <__aeabi_dsub+0x188>
 80022a2:	0010      	movs	r0, r2
 80022a4:	3b1f      	subs	r3, #31
 80022a6:	40d8      	lsrs	r0, r3
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d003      	beq.n	80022b4 <__aeabi_dsub+0x308>
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	1a5b      	subs	r3, r3, r1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4314      	orrs	r4, r2
 80022b4:	1e63      	subs	r3, r4, #1
 80022b6:	419c      	sbcs	r4, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	2600      	movs	r6, #0
 80022bc:	469a      	mov	sl, r3
 80022be:	4304      	orrs	r4, r0
 80022c0:	0763      	lsls	r3, r4, #29
 80022c2:	d000      	beq.n	80022c6 <__aeabi_dsub+0x31a>
 80022c4:	e6fe      	b.n	80020c4 <__aeabi_dsub+0x118>
 80022c6:	4652      	mov	r2, sl
 80022c8:	08e3      	lsrs	r3, r4, #3
 80022ca:	0752      	lsls	r2, r2, #29
 80022cc:	4313      	orrs	r3, r2
 80022ce:	4652      	mov	r2, sl
 80022d0:	46b4      	mov	ip, r6
 80022d2:	08d2      	lsrs	r2, r2, #3
 80022d4:	490f      	ldr	r1, [pc, #60]	; (8002314 <__aeabi_dsub+0x368>)
 80022d6:	458c      	cmp	ip, r1
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dsub+0x384>
 80022da:	0312      	lsls	r2, r2, #12
 80022dc:	0b14      	lsrs	r4, r2, #12
 80022de:	4662      	mov	r2, ip
 80022e0:	0552      	lsls	r2, r2, #21
 80022e2:	0d52      	lsrs	r2, r2, #21
 80022e4:	e70c      	b.n	8002100 <__aeabi_dsub+0x154>
 80022e6:	003c      	movs	r4, r7
 80022e8:	4304      	orrs	r4, r0
 80022ea:	1e62      	subs	r2, r4, #1
 80022ec:	4194      	sbcs	r4, r2
 80022ee:	18e4      	adds	r4, r4, r3
 80022f0:	429c      	cmp	r4, r3
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	4252      	negs	r2, r2
 80022f6:	444a      	add	r2, r9
 80022f8:	4692      	mov	sl, r2
 80022fa:	4653      	mov	r3, sl
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	d5df      	bpl.n	80022c0 <__aeabi_dsub+0x314>
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__aeabi_dsub+0x368>)
 8002302:	3601      	adds	r6, #1
 8002304:	429e      	cmp	r6, r3
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x35e>
 8002308:	e0a0      	b.n	800244c <__aeabi_dsub+0x4a0>
 800230a:	0032      	movs	r2, r6
 800230c:	2400      	movs	r4, #0
 800230e:	2300      	movs	r3, #0
 8002310:	e6f6      	b.n	8002100 <__aeabi_dsub+0x154>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	fffff801 	.word	0xfffff801
 8002320:	000007fe 	.word	0x000007fe
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	464a      	mov	r2, r9
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	4313      	orrs	r3, r2
 800232c:	464a      	mov	r2, r9
 800232e:	08d2      	lsrs	r2, r2, #3
 8002330:	0019      	movs	r1, r3
 8002332:	4311      	orrs	r1, r2
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x38c>
 8002336:	e1b5      	b.n	80026a4 <__aeabi_dsub+0x6f8>
 8002338:	2480      	movs	r4, #128	; 0x80
 800233a:	0324      	lsls	r4, r4, #12
 800233c:	4314      	orrs	r4, r2
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	4ad5      	ldr	r2, [pc, #852]	; (8002698 <__aeabi_dsub+0x6ec>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e6dc      	b.n	8002100 <__aeabi_dsub+0x154>
 8002346:	0020      	movs	r0, r4
 8002348:	f000 fa5c 	bl	8002804 <__clzsi2>
 800234c:	0003      	movs	r3, r0
 800234e:	3318      	adds	r3, #24
 8002350:	2b1f      	cmp	r3, #31
 8002352:	dc00      	bgt.n	8002356 <__aeabi_dsub+0x3aa>
 8002354:	e695      	b.n	8002082 <__aeabi_dsub+0xd6>
 8002356:	0022      	movs	r2, r4
 8002358:	3808      	subs	r0, #8
 800235a:	4082      	lsls	r2, r0
 800235c:	2400      	movs	r4, #0
 800235e:	429e      	cmp	r6, r3
 8002360:	dc00      	bgt.n	8002364 <__aeabi_dsub+0x3b8>
 8002362:	e69a      	b.n	800209a <__aeabi_dsub+0xee>
 8002364:	1af6      	subs	r6, r6, r3
 8002366:	4bcd      	ldr	r3, [pc, #820]	; (800269c <__aeabi_dsub+0x6f0>)
 8002368:	401a      	ands	r2, r3
 800236a:	4692      	mov	sl, r2
 800236c:	e6a8      	b.n	80020c0 <__aeabi_dsub+0x114>
 800236e:	003c      	movs	r4, r7
 8002370:	4304      	orrs	r4, r0
 8002372:	1e62      	subs	r2, r4, #1
 8002374:	4194      	sbcs	r4, r2
 8002376:	e66c      	b.n	8002052 <__aeabi_dsub+0xa6>
 8002378:	464a      	mov	r2, r9
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0752      	lsls	r2, r2, #29
 800237e:	4313      	orrs	r3, r2
 8002380:	464a      	mov	r2, r9
 8002382:	08d2      	lsrs	r2, r2, #3
 8002384:	e7a6      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002386:	4cc6      	ldr	r4, [pc, #792]	; (80026a0 <__aeabi_dsub+0x6f4>)
 8002388:	1c72      	adds	r2, r6, #1
 800238a:	4222      	tst	r2, r4
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x3e4>
 800238e:	e0ac      	b.n	80024ea <__aeabi_dsub+0x53e>
 8002390:	464a      	mov	r2, r9
 8002392:	431a      	orrs	r2, r3
 8002394:	2e00      	cmp	r6, #0
 8002396:	d000      	beq.n	800239a <__aeabi_dsub+0x3ee>
 8002398:	e105      	b.n	80025a6 <__aeabi_dsub+0x5fa>
 800239a:	2a00      	cmp	r2, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x3f4>
 800239e:	e156      	b.n	800264e <__aeabi_dsub+0x6a2>
 80023a0:	003a      	movs	r2, r7
 80023a2:	4302      	orrs	r2, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x3fc>
 80023a6:	e0db      	b.n	8002560 <__aeabi_dsub+0x5b4>
 80023a8:	181c      	adds	r4, r3, r0
 80023aa:	429c      	cmp	r4, r3
 80023ac:	419b      	sbcs	r3, r3
 80023ae:	444f      	add	r7, r9
 80023b0:	46ba      	mov	sl, r7
 80023b2:	425b      	negs	r3, r3
 80023b4:	449a      	add	sl, r3
 80023b6:	4653      	mov	r3, sl
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	d400      	bmi.n	80023be <__aeabi_dsub+0x412>
 80023bc:	e780      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023be:	4652      	mov	r2, sl
 80023c0:	4bb6      	ldr	r3, [pc, #728]	; (800269c <__aeabi_dsub+0x6f0>)
 80023c2:	2601      	movs	r6, #1
 80023c4:	401a      	ands	r2, r3
 80023c6:	4692      	mov	sl, r2
 80023c8:	e77a      	b.n	80022c0 <__aeabi_dsub+0x314>
 80023ca:	4cb3      	ldr	r4, [pc, #716]	; (8002698 <__aeabi_dsub+0x6ec>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x426>
 80023d0:	e0c0      	b.n	8002554 <__aeabi_dsub+0x5a8>
 80023d2:	2480      	movs	r4, #128	; 0x80
 80023d4:	464d      	mov	r5, r9
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	4325      	orrs	r5, r4
 80023da:	46a9      	mov	r9, r5
 80023dc:	4664      	mov	r4, ip
 80023de:	2c38      	cmp	r4, #56	; 0x38
 80023e0:	dc53      	bgt.n	800248a <__aeabi_dsub+0x4de>
 80023e2:	4661      	mov	r1, ip
 80023e4:	2c1f      	cmp	r4, #31
 80023e6:	dd00      	ble.n	80023ea <__aeabi_dsub+0x43e>
 80023e8:	e0cd      	b.n	8002586 <__aeabi_dsub+0x5da>
 80023ea:	2520      	movs	r5, #32
 80023ec:	001e      	movs	r6, r3
 80023ee:	1b2d      	subs	r5, r5, r4
 80023f0:	464c      	mov	r4, r9
 80023f2:	40ab      	lsls	r3, r5
 80023f4:	40ac      	lsls	r4, r5
 80023f6:	40ce      	lsrs	r6, r1
 80023f8:	1e5d      	subs	r5, r3, #1
 80023fa:	41ab      	sbcs	r3, r5
 80023fc:	4334      	orrs	r4, r6
 80023fe:	4323      	orrs	r3, r4
 8002400:	464c      	mov	r4, r9
 8002402:	40cc      	lsrs	r4, r1
 8002404:	1b3f      	subs	r7, r7, r4
 8002406:	e045      	b.n	8002494 <__aeabi_dsub+0x4e8>
 8002408:	464a      	mov	r2, r9
 800240a:	1a1c      	subs	r4, r3, r0
 800240c:	1bd1      	subs	r1, r2, r7
 800240e:	42a3      	cmp	r3, r4
 8002410:	4192      	sbcs	r2, r2
 8002412:	4252      	negs	r2, r2
 8002414:	4692      	mov	sl, r2
 8002416:	000a      	movs	r2, r1
 8002418:	4651      	mov	r1, sl
 800241a:	1a52      	subs	r2, r2, r1
 800241c:	4692      	mov	sl, r2
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	d500      	bpl.n	8002424 <__aeabi_dsub+0x478>
 8002422:	e083      	b.n	800252c <__aeabi_dsub+0x580>
 8002424:	4653      	mov	r3, sl
 8002426:	4323      	orrs	r3, r4
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x480>
 800242a:	e621      	b.n	8002070 <__aeabi_dsub+0xc4>
 800242c:	2200      	movs	r2, #0
 800242e:	2500      	movs	r5, #0
 8002430:	e753      	b.n	80022da <__aeabi_dsub+0x32e>
 8002432:	181c      	adds	r4, r3, r0
 8002434:	429c      	cmp	r4, r3
 8002436:	419b      	sbcs	r3, r3
 8002438:	444f      	add	r7, r9
 800243a:	46ba      	mov	sl, r7
 800243c:	425b      	negs	r3, r3
 800243e:	449a      	add	sl, r3
 8002440:	4653      	mov	r3, sl
 8002442:	2601      	movs	r6, #1
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	d400      	bmi.n	800244a <__aeabi_dsub+0x49e>
 8002448:	e73a      	b.n	80022c0 <__aeabi_dsub+0x314>
 800244a:	2602      	movs	r6, #2
 800244c:	4652      	mov	r2, sl
 800244e:	4b93      	ldr	r3, [pc, #588]	; (800269c <__aeabi_dsub+0x6f0>)
 8002450:	2101      	movs	r1, #1
 8002452:	401a      	ands	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	4021      	ands	r1, r4
 8002458:	0862      	lsrs	r2, r4, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	07dc      	lsls	r4, r3, #31
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	469a      	mov	sl, r3
 8002462:	4314      	orrs	r4, r2
 8002464:	e62c      	b.n	80020c0 <__aeabi_dsub+0x114>
 8002466:	0039      	movs	r1, r7
 8002468:	3a20      	subs	r2, #32
 800246a:	40d1      	lsrs	r1, r2
 800246c:	4662      	mov	r2, ip
 800246e:	2a20      	cmp	r2, #32
 8002470:	d006      	beq.n	8002480 <__aeabi_dsub+0x4d4>
 8002472:	4664      	mov	r4, ip
 8002474:	2240      	movs	r2, #64	; 0x40
 8002476:	1b12      	subs	r2, r2, r4
 8002478:	003c      	movs	r4, r7
 800247a:	4094      	lsls	r4, r2
 800247c:	4304      	orrs	r4, r0
 800247e:	9401      	str	r4, [sp, #4]
 8002480:	9c01      	ldr	r4, [sp, #4]
 8002482:	1e62      	subs	r2, r4, #1
 8002484:	4194      	sbcs	r4, r2
 8002486:	430c      	orrs	r4, r1
 8002488:	e5e3      	b.n	8002052 <__aeabi_dsub+0xa6>
 800248a:	4649      	mov	r1, r9
 800248c:	4319      	orrs	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	1e5c      	subs	r4, r3, #1
 8002492:	41a3      	sbcs	r3, r4
 8002494:	1ac4      	subs	r4, r0, r3
 8002496:	42a0      	cmp	r0, r4
 8002498:	419b      	sbcs	r3, r3
 800249a:	425b      	negs	r3, r3
 800249c:	1afb      	subs	r3, r7, r3
 800249e:	469a      	mov	sl, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	0016      	movs	r6, r2
 80024a4:	e5dc      	b.n	8002060 <__aeabi_dsub+0xb4>
 80024a6:	4649      	mov	r1, r9
 80024a8:	4319      	orrs	r1, r3
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x502>
 80024ac:	e0ae      	b.n	800260c <__aeabi_dsub+0x660>
 80024ae:	4661      	mov	r1, ip
 80024b0:	4664      	mov	r4, ip
 80024b2:	3901      	subs	r1, #1
 80024b4:	2c01      	cmp	r4, #1
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x50e>
 80024b8:	e0e0      	b.n	800267c <__aeabi_dsub+0x6d0>
 80024ba:	4c77      	ldr	r4, [pc, #476]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024bc:	45a4      	cmp	ip, r4
 80024be:	d056      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80024c0:	468c      	mov	ip, r1
 80024c2:	e69a      	b.n	80021fa <__aeabi_dsub+0x24e>
 80024c4:	4661      	mov	r1, ip
 80024c6:	2220      	movs	r2, #32
 80024c8:	003c      	movs	r4, r7
 80024ca:	1a52      	subs	r2, r2, r1
 80024cc:	4094      	lsls	r4, r2
 80024ce:	0001      	movs	r1, r0
 80024d0:	4090      	lsls	r0, r2
 80024d2:	46a0      	mov	r8, r4
 80024d4:	4664      	mov	r4, ip
 80024d6:	1e42      	subs	r2, r0, #1
 80024d8:	4190      	sbcs	r0, r2
 80024da:	4662      	mov	r2, ip
 80024dc:	40e1      	lsrs	r1, r4
 80024de:	4644      	mov	r4, r8
 80024e0:	40d7      	lsrs	r7, r2
 80024e2:	430c      	orrs	r4, r1
 80024e4:	4304      	orrs	r4, r0
 80024e6:	44b9      	add	r9, r7
 80024e8:	e701      	b.n	80022ee <__aeabi_dsub+0x342>
 80024ea:	496b      	ldr	r1, [pc, #428]	; (8002698 <__aeabi_dsub+0x6ec>)
 80024ec:	428a      	cmp	r2, r1
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x546>
 80024f0:	e70c      	b.n	800230c <__aeabi_dsub+0x360>
 80024f2:	1818      	adds	r0, r3, r0
 80024f4:	4298      	cmp	r0, r3
 80024f6:	419b      	sbcs	r3, r3
 80024f8:	444f      	add	r7, r9
 80024fa:	425b      	negs	r3, r3
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	07dc      	lsls	r4, r3, #31
 8002500:	0840      	lsrs	r0, r0, #1
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	469a      	mov	sl, r3
 8002506:	0016      	movs	r6, r2
 8002508:	4304      	orrs	r4, r0
 800250a:	e6d9      	b.n	80022c0 <__aeabi_dsub+0x314>
 800250c:	2a00      	cmp	r2, #0
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x566>
 8002510:	e081      	b.n	8002616 <__aeabi_dsub+0x66a>
 8002512:	003b      	movs	r3, r7
 8002514:	4303      	orrs	r3, r0
 8002516:	d11d      	bne.n	8002554 <__aeabi_dsub+0x5a8>
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	0312      	lsls	r2, r2, #12
 800251e:	e70b      	b.n	8002338 <__aeabi_dsub+0x38c>
 8002520:	08c0      	lsrs	r0, r0, #3
 8002522:	077b      	lsls	r3, r7, #29
 8002524:	465d      	mov	r5, fp
 8002526:	4303      	orrs	r3, r0
 8002528:	08fa      	lsrs	r2, r7, #3
 800252a:	e6d3      	b.n	80022d4 <__aeabi_dsub+0x328>
 800252c:	1ac4      	subs	r4, r0, r3
 800252e:	42a0      	cmp	r0, r4
 8002530:	4180      	sbcs	r0, r0
 8002532:	464b      	mov	r3, r9
 8002534:	4240      	negs	r0, r0
 8002536:	1aff      	subs	r7, r7, r3
 8002538:	1a3b      	subs	r3, r7, r0
 800253a:	469a      	mov	sl, r3
 800253c:	465d      	mov	r5, fp
 800253e:	e597      	b.n	8002070 <__aeabi_dsub+0xc4>
 8002540:	1a1c      	subs	r4, r3, r0
 8002542:	464a      	mov	r2, r9
 8002544:	42a3      	cmp	r3, r4
 8002546:	419b      	sbcs	r3, r3
 8002548:	1bd7      	subs	r7, r2, r7
 800254a:	425b      	negs	r3, r3
 800254c:	1afb      	subs	r3, r7, r3
 800254e:	469a      	mov	sl, r3
 8002550:	2601      	movs	r6, #1
 8002552:	e585      	b.n	8002060 <__aeabi_dsub+0xb4>
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	077b      	lsls	r3, r7, #29
 8002558:	465d      	mov	r5, fp
 800255a:	4303      	orrs	r3, r0
 800255c:	08fa      	lsrs	r2, r7, #3
 800255e:	e6e7      	b.n	8002330 <__aeabi_dsub+0x384>
 8002560:	464a      	mov	r2, r9
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	0752      	lsls	r2, r2, #29
 8002566:	4313      	orrs	r3, r2
 8002568:	464a      	mov	r2, r9
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	e6b5      	b.n	80022da <__aeabi_dsub+0x32e>
 800256e:	08c0      	lsrs	r0, r0, #3
 8002570:	077b      	lsls	r3, r7, #29
 8002572:	4303      	orrs	r3, r0
 8002574:	08fa      	lsrs	r2, r7, #3
 8002576:	e6db      	b.n	8002330 <__aeabi_dsub+0x384>
 8002578:	4649      	mov	r1, r9
 800257a:	4319      	orrs	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	418b      	sbcs	r3, r1
 8002582:	001c      	movs	r4, r3
 8002584:	e653      	b.n	800222e <__aeabi_dsub+0x282>
 8002586:	464d      	mov	r5, r9
 8002588:	3c20      	subs	r4, #32
 800258a:	40e5      	lsrs	r5, r4
 800258c:	2920      	cmp	r1, #32
 800258e:	d005      	beq.n	800259c <__aeabi_dsub+0x5f0>
 8002590:	2440      	movs	r4, #64	; 0x40
 8002592:	1a64      	subs	r4, r4, r1
 8002594:	4649      	mov	r1, r9
 8002596:	40a1      	lsls	r1, r4
 8002598:	430b      	orrs	r3, r1
 800259a:	4698      	mov	r8, r3
 800259c:	4643      	mov	r3, r8
 800259e:	1e5c      	subs	r4, r3, #1
 80025a0:	41a3      	sbcs	r3, r4
 80025a2:	432b      	orrs	r3, r5
 80025a4:	e776      	b.n	8002494 <__aeabi_dsub+0x4e8>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d0e1      	beq.n	800256e <__aeabi_dsub+0x5c2>
 80025aa:	003a      	movs	r2, r7
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	4302      	orrs	r2, r0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x608>
 80025b2:	e6b8      	b.n	8002326 <__aeabi_dsub+0x37a>
 80025b4:	464a      	mov	r2, r9
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	2480      	movs	r4, #128	; 0x80
 80025ba:	4313      	orrs	r3, r2
 80025bc:	464a      	mov	r2, r9
 80025be:	0324      	lsls	r4, r4, #12
 80025c0:	08d2      	lsrs	r2, r2, #3
 80025c2:	4222      	tst	r2, r4
 80025c4:	d007      	beq.n	80025d6 <__aeabi_dsub+0x62a>
 80025c6:	08fe      	lsrs	r6, r7, #3
 80025c8:	4226      	tst	r6, r4
 80025ca:	d104      	bne.n	80025d6 <__aeabi_dsub+0x62a>
 80025cc:	465d      	mov	r5, fp
 80025ce:	0032      	movs	r2, r6
 80025d0:	08c3      	lsrs	r3, r0, #3
 80025d2:	077f      	lsls	r7, r7, #29
 80025d4:	433b      	orrs	r3, r7
 80025d6:	0f59      	lsrs	r1, r3, #29
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	0749      	lsls	r1, r1, #29
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	430b      	orrs	r3, r1
 80025e0:	e6a6      	b.n	8002330 <__aeabi_dsub+0x384>
 80025e2:	1ac4      	subs	r4, r0, r3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	4180      	sbcs	r0, r0
 80025e8:	464b      	mov	r3, r9
 80025ea:	4240      	negs	r0, r0
 80025ec:	1aff      	subs	r7, r7, r3
 80025ee:	1a3b      	subs	r3, r7, r0
 80025f0:	469a      	mov	sl, r3
 80025f2:	465d      	mov	r5, fp
 80025f4:	2601      	movs	r6, #1
 80025f6:	e533      	b.n	8002060 <__aeabi_dsub+0xb4>
 80025f8:	003b      	movs	r3, r7
 80025fa:	4303      	orrs	r3, r0
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x654>
 80025fe:	e715      	b.n	800242c <__aeabi_dsub+0x480>
 8002600:	08c0      	lsrs	r0, r0, #3
 8002602:	077b      	lsls	r3, r7, #29
 8002604:	465d      	mov	r5, fp
 8002606:	4303      	orrs	r3, r0
 8002608:	08fa      	lsrs	r2, r7, #3
 800260a:	e666      	b.n	80022da <__aeabi_dsub+0x32e>
 800260c:	08c0      	lsrs	r0, r0, #3
 800260e:	077b      	lsls	r3, r7, #29
 8002610:	4303      	orrs	r3, r0
 8002612:	08fa      	lsrs	r2, r7, #3
 8002614:	e65e      	b.n	80022d4 <__aeabi_dsub+0x328>
 8002616:	003a      	movs	r2, r7
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	4302      	orrs	r2, r0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x674>
 800261e:	e682      	b.n	8002326 <__aeabi_dsub+0x37a>
 8002620:	464a      	mov	r2, r9
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	2480      	movs	r4, #128	; 0x80
 8002626:	4313      	orrs	r3, r2
 8002628:	464a      	mov	r2, r9
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4222      	tst	r2, r4
 8002630:	d007      	beq.n	8002642 <__aeabi_dsub+0x696>
 8002632:	08fe      	lsrs	r6, r7, #3
 8002634:	4226      	tst	r6, r4
 8002636:	d104      	bne.n	8002642 <__aeabi_dsub+0x696>
 8002638:	465d      	mov	r5, fp
 800263a:	0032      	movs	r2, r6
 800263c:	08c3      	lsrs	r3, r0, #3
 800263e:	077f      	lsls	r7, r7, #29
 8002640:	433b      	orrs	r3, r7
 8002642:	0f59      	lsrs	r1, r3, #29
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	0749      	lsls	r1, r1, #29
 800264a:	430b      	orrs	r3, r1
 800264c:	e670      	b.n	8002330 <__aeabi_dsub+0x384>
 800264e:	08c0      	lsrs	r0, r0, #3
 8002650:	077b      	lsls	r3, r7, #29
 8002652:	4303      	orrs	r3, r0
 8002654:	08fa      	lsrs	r2, r7, #3
 8002656:	e640      	b.n	80022da <__aeabi_dsub+0x32e>
 8002658:	464c      	mov	r4, r9
 800265a:	3920      	subs	r1, #32
 800265c:	40cc      	lsrs	r4, r1
 800265e:	4661      	mov	r1, ip
 8002660:	2920      	cmp	r1, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x6c6>
 8002664:	4666      	mov	r6, ip
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	1b89      	subs	r1, r1, r6
 800266a:	464e      	mov	r6, r9
 800266c:	408e      	lsls	r6, r1
 800266e:	4333      	orrs	r3, r6
 8002670:	4698      	mov	r8, r3
 8002672:	4643      	mov	r3, r8
 8002674:	1e59      	subs	r1, r3, #1
 8002676:	418b      	sbcs	r3, r1
 8002678:	431c      	orrs	r4, r3
 800267a:	e5d8      	b.n	800222e <__aeabi_dsub+0x282>
 800267c:	181c      	adds	r4, r3, r0
 800267e:	4284      	cmp	r4, r0
 8002680:	4180      	sbcs	r0, r0
 8002682:	444f      	add	r7, r9
 8002684:	46ba      	mov	sl, r7
 8002686:	4240      	negs	r0, r0
 8002688:	4482      	add	sl, r0
 800268a:	e6d9      	b.n	8002440 <__aeabi_dsub+0x494>
 800268c:	4653      	mov	r3, sl
 800268e:	4323      	orrs	r3, r4
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x6e8>
 8002692:	e6cb      	b.n	800242c <__aeabi_dsub+0x480>
 8002694:	e614      	b.n	80022c0 <__aeabi_dsub+0x314>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	000007ff 	.word	0x000007ff
 800269c:	ff7fffff 	.word	0xff7fffff
 80026a0:	000007fe 	.word	0x000007fe
 80026a4:	2300      	movs	r3, #0
 80026a6:	4a01      	ldr	r2, [pc, #4]	; (80026ac <__aeabi_dsub+0x700>)
 80026a8:	001c      	movs	r4, r3
 80026aa:	e529      	b.n	8002100 <__aeabi_dsub+0x154>
 80026ac:	000007ff 	.word	0x000007ff

080026b0 <__aeabi_dcmpun>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	0005      	movs	r5, r0
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026b6:	031c      	lsls	r4, r3, #12
 80026b8:	0016      	movs	r6, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	030a      	lsls	r2, r1, #12
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	0b12      	lsrs	r2, r2, #12
 80026c2:	0d49      	lsrs	r1, r1, #21
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	4281      	cmp	r1, r0
 80026ca:	d008      	beq.n	80026de <__aeabi_dcmpun+0x2e>
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <__aeabi_dcmpun+0x38>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026d4:	0020      	movs	r0, r4
 80026d6:	4330      	orrs	r0, r6
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	4198      	sbcs	r0, r3
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	2001      	movs	r0, #1
 80026e0:	432a      	orrs	r2, r5
 80026e2:	d1fb      	bne.n	80026dc <__aeabi_dcmpun+0x2c>
 80026e4:	e7f2      	b.n	80026cc <__aeabi_dcmpun+0x1c>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	000007ff 	.word	0x000007ff

080026ec <__aeabi_d2iz>:
 80026ec:	000a      	movs	r2, r1
 80026ee:	b530      	push	{r4, r5, lr}
 80026f0:	4c13      	ldr	r4, [pc, #76]	; (8002740 <__aeabi_d2iz+0x54>)
 80026f2:	0053      	lsls	r3, r2, #1
 80026f4:	0309      	lsls	r1, r1, #12
 80026f6:	0005      	movs	r5, r0
 80026f8:	0b09      	lsrs	r1, r1, #12
 80026fa:	2000      	movs	r0, #0
 80026fc:	0d5b      	lsrs	r3, r3, #21
 80026fe:	0fd2      	lsrs	r2, r2, #31
 8002700:	42a3      	cmp	r3, r4
 8002702:	dd04      	ble.n	800270e <__aeabi_d2iz+0x22>
 8002704:	480f      	ldr	r0, [pc, #60]	; (8002744 <__aeabi_d2iz+0x58>)
 8002706:	4283      	cmp	r3, r0
 8002708:	dd02      	ble.n	8002710 <__aeabi_d2iz+0x24>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <__aeabi_d2iz+0x5c>)
 800270c:	18d0      	adds	r0, r2, r3
 800270e:	bd30      	pop	{r4, r5, pc}
 8002710:	2080      	movs	r0, #128	; 0x80
 8002712:	0340      	lsls	r0, r0, #13
 8002714:	4301      	orrs	r1, r0
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <__aeabi_d2iz+0x60>)
 8002718:	1ac0      	subs	r0, r0, r3
 800271a:	281f      	cmp	r0, #31
 800271c:	dd08      	ble.n	8002730 <__aeabi_d2iz+0x44>
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <__aeabi_d2iz+0x64>)
 8002720:	1ac3      	subs	r3, r0, r3
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000b      	movs	r3, r1
 8002726:	4258      	negs	r0, r3
 8002728:	2a00      	cmp	r2, #0
 800272a:	d1f0      	bne.n	800270e <__aeabi_d2iz+0x22>
 800272c:	0018      	movs	r0, r3
 800272e:	e7ee      	b.n	800270e <__aeabi_d2iz+0x22>
 8002730:	4c08      	ldr	r4, [pc, #32]	; (8002754 <__aeabi_d2iz+0x68>)
 8002732:	40c5      	lsrs	r5, r0
 8002734:	46a4      	mov	ip, r4
 8002736:	4463      	add	r3, ip
 8002738:	4099      	lsls	r1, r3
 800273a:	000b      	movs	r3, r1
 800273c:	432b      	orrs	r3, r5
 800273e:	e7f2      	b.n	8002726 <__aeabi_d2iz+0x3a>
 8002740:	000003fe 	.word	0x000003fe
 8002744:	0000041d 	.word	0x0000041d
 8002748:	7fffffff 	.word	0x7fffffff
 800274c:	00000433 	.word	0x00000433
 8002750:	00000413 	.word	0x00000413
 8002754:	fffffbed 	.word	0xfffffbed

08002758 <__aeabi_i2d>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2800      	cmp	r0, #0
 800275c:	d016      	beq.n	800278c <__aeabi_i2d+0x34>
 800275e:	17c3      	asrs	r3, r0, #31
 8002760:	18c5      	adds	r5, r0, r3
 8002762:	405d      	eors	r5, r3
 8002764:	0fc4      	lsrs	r4, r0, #31
 8002766:	0028      	movs	r0, r5
 8002768:	f000 f84c 	bl	8002804 <__clzsi2>
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <__aeabi_i2d+0x5c>)
 800276e:	1a1b      	subs	r3, r3, r0
 8002770:	280a      	cmp	r0, #10
 8002772:	dc16      	bgt.n	80027a2 <__aeabi_i2d+0x4a>
 8002774:	0002      	movs	r2, r0
 8002776:	002e      	movs	r6, r5
 8002778:	3215      	adds	r2, #21
 800277a:	4096      	lsls	r6, r2
 800277c:	220b      	movs	r2, #11
 800277e:	1a12      	subs	r2, r2, r0
 8002780:	40d5      	lsrs	r5, r2
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	032d      	lsls	r5, r5, #12
 8002786:	0b2d      	lsrs	r5, r5, #12
 8002788:	0d5b      	lsrs	r3, r3, #21
 800278a:	e003      	b.n	8002794 <__aeabi_i2d+0x3c>
 800278c:	2400      	movs	r4, #0
 800278e:	2300      	movs	r3, #0
 8002790:	2500      	movs	r5, #0
 8002792:	2600      	movs	r6, #0
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	432b      	orrs	r3, r5
 8002798:	07e4      	lsls	r4, r4, #31
 800279a:	4323      	orrs	r3, r4
 800279c:	0030      	movs	r0, r6
 800279e:	0019      	movs	r1, r3
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	380b      	subs	r0, #11
 80027a4:	4085      	lsls	r5, r0
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	032d      	lsls	r5, r5, #12
 80027aa:	2600      	movs	r6, #0
 80027ac:	0b2d      	lsrs	r5, r5, #12
 80027ae:	0d5b      	lsrs	r3, r3, #21
 80027b0:	e7f0      	b.n	8002794 <__aeabi_i2d+0x3c>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_ui2d>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	1e04      	subs	r4, r0, #0
 80027bc:	d010      	beq.n	80027e0 <__aeabi_ui2d+0x28>
 80027be:	f000 f821 	bl	8002804 <__clzsi2>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <__aeabi_ui2d+0x48>)
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	280a      	cmp	r0, #10
 80027c8:	dc11      	bgt.n	80027ee <__aeabi_ui2d+0x36>
 80027ca:	220b      	movs	r2, #11
 80027cc:	0021      	movs	r1, r4
 80027ce:	1a12      	subs	r2, r2, r0
 80027d0:	40d1      	lsrs	r1, r2
 80027d2:	3015      	adds	r0, #21
 80027d4:	030a      	lsls	r2, r1, #12
 80027d6:	055b      	lsls	r3, r3, #21
 80027d8:	4084      	lsls	r4, r0
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	e001      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	4313      	orrs	r3, r2
 80027e8:	0020      	movs	r0, r4
 80027ea:	0019      	movs	r1, r3
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	0022      	movs	r2, r4
 80027f0:	380b      	subs	r0, #11
 80027f2:	4082      	lsls	r2, r0
 80027f4:	055b      	lsls	r3, r3, #21
 80027f6:	0312      	lsls	r2, r2, #12
 80027f8:	2400      	movs	r4, #0
 80027fa:	0b12      	lsrs	r2, r2, #12
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	e7f1      	b.n	80027e4 <__aeabi_ui2d+0x2c>
 8002800:	0000041e 	.word	0x0000041e

08002804 <__clzsi2>:
 8002804:	211c      	movs	r1, #28
 8002806:	2301      	movs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	4298      	cmp	r0, r3
 800280c:	d301      	bcc.n	8002812 <__clzsi2+0xe>
 800280e:	0c00      	lsrs	r0, r0, #16
 8002810:	3910      	subs	r1, #16
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	4298      	cmp	r0, r3
 8002816:	d301      	bcc.n	800281c <__clzsi2+0x18>
 8002818:	0a00      	lsrs	r0, r0, #8
 800281a:	3908      	subs	r1, #8
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	4298      	cmp	r0, r3
 8002820:	d301      	bcc.n	8002826 <__clzsi2+0x22>
 8002822:	0900      	lsrs	r0, r0, #4
 8002824:	3904      	subs	r1, #4
 8002826:	a202      	add	r2, pc, #8	; (adr r2, 8002830 <__clzsi2+0x2c>)
 8002828:	5c10      	ldrb	r0, [r2, r0]
 800282a:	1840      	adds	r0, r0, r1
 800282c:	4770      	bx	lr
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	02020304 	.word	0x02020304
 8002834:	01010101 	.word	0x01010101
	...

08002840 <__clzdi2>:
 8002840:	b510      	push	{r4, lr}
 8002842:	2900      	cmp	r1, #0
 8002844:	d103      	bne.n	800284e <__clzdi2+0xe>
 8002846:	f7ff ffdd 	bl	8002804 <__clzsi2>
 800284a:	3020      	adds	r0, #32
 800284c:	e002      	b.n	8002854 <__clzdi2+0x14>
 800284e:	0008      	movs	r0, r1
 8002850:	f7ff ffd8 	bl	8002804 <__clzsi2>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	46c0      	nop			; (mov r8, r8)

08002858 <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7d1b      	ldrb	r3, [r3, #20]
 8002868:	b29b      	uxth	r3, r3
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f002 f9f3 	bl	8004c58 <HAL_GPIO_ReadPin>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d010      	beq.n	8002898 <DistanceSensor_InputCaptureInterrupt+0x40>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	0018      	movs	r0, r3
 800287e:	f005 f901 	bl	8007a84 <HAL_TIM_ReadCapturedValue>
 8002882:	0003      	movs	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2104      	movs	r1, #4
 8002890:	0018      	movs	r0, r3
 8002892:	f004 fd4b 	bl	800732c <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002896:	e034      	b.n	8002902 <DistanceSensor_InputCaptureInterrupt+0xaa>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	0018      	movs	r0, r3
 80028a0:	f005 f8f0 	bl	8007a84 <HAL_TIM_ReadCapturedValue>
 80028a4:	0003      	movs	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	88da      	ldrh	r2, [r3, #6]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d909      	bls.n	80028cc <DistanceSensor_InputCaptureInterrupt+0x74>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	88db      	ldrh	r3, [r3, #6]
 80028bc:	001a      	movs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	001a      	movs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e00b      	b.n	80028e4 <DistanceSensor_InputCaptureInterrupt+0x8c>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	889b      	ldrh	r3, [r3, #4]
 80028d0:	001a      	movs	r2, r3
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	025b      	lsls	r3, r3, #9
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	88d2      	ldrh	r2, [r2, #6]
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	001a      	movs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2104      	movs	r1, #4
 80028ea:	0018      	movs	r0, r3
 80028ec:	f004 fc92 	bl	8007214 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <DistanceSensor_InputCaptureInterrupt+0xb4>)
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
			DistanceSensor_Handle(sensor);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f81d 	bl	800293c <DistanceSensor_Handle>
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	0000ffff 	.word	0x0000ffff

08002910 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0018      	movs	r0, r3
 800291e:	f7fe f8e1 	bl	8000ae4 <__aeabi_ui2f>
 8002922:	1c03      	adds	r3, r0, #0
 8002924:	4904      	ldr	r1, [pc, #16]	; (8002938 <DistanceSensor_GetDistance+0x28>)
 8002926:	1c18      	adds	r0, r3, #0
 8002928:	f7fd ff12 	bl	8000750 <__aeabi_fdiv>
 800292c:	1c03      	adds	r3, r0, #0
}
 800292e:	1c18      	adds	r0, r3, #0
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	42680000 	.word	0x42680000

0800293c <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff ffe2 	bl	8002910 <DistanceSensor_GetDistance>
 800294c:	1c03      	adds	r3, r0, #0
 800294e:	60fb      	str	r3, [r7, #12]
	if (sensor->countAtMaxDistance > 5)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7b1b      	ldrb	r3, [r3, #12]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d918      	bls.n	800298a <DistanceSensor_Handle+0x4e>
	{
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6998      	ldr	r0, [r3, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	b29b      	uxth	r3, r3
 8002962:	2200      	movs	r2, #0
 8002964:	0019      	movs	r1, r3
 8002966:	f002 f994 	bl	8004c92 <HAL_GPIO_WritePin>

		if (!Speaker.hasFault) Speaker_Start(&Speaker, sensor->ID);
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <DistanceSensor_Handle+0xa0>)
 800296c:	7c1b      	ldrb	r3, [r3, #16]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2201      	movs	r2, #1
 8002972:	4053      	eors	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02c      	beq.n	80029d4 <DistanceSensor_Handle+0x98>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b5a      	ldrb	r2, [r3, #13]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <DistanceSensor_Handle+0xa0>)
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 f827 	bl	80039d6 <Speaker_Start>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);

		if (Speaker.hasFault) Speaker_Stop(&Speaker, sensor->ID);

	}
}
 8002988:	e024      	b.n	80029d4 <DistanceSensor_Handle+0x98>
	else if (distance < MIN_DISTANCE)
 800298a:	4915      	ldr	r1, [pc, #84]	; (80029e0 <DistanceSensor_Handle+0xa4>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7fd fd9d 	bl	80004cc <__aeabi_fcmplt>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d006      	beq.n	80029a4 <DistanceSensor_Handle+0x68>
		sensor->countAtMaxDistance++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7b1b      	ldrb	r3, [r3, #12]
 800299a:	3301      	adds	r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	731a      	strb	r2, [r3, #12]
}
 80029a2:	e017      	b.n	80029d4 <DistanceSensor_Handle+0x98>
		sensor->countAtMaxDistance = 0;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6998      	ldr	r0, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7f1b      	ldrb	r3, [r3, #28]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2201      	movs	r2, #1
 80029b6:	0019      	movs	r1, r3
 80029b8:	f002 f96b 	bl	8004c92 <HAL_GPIO_WritePin>
		if (Speaker.hasFault) Speaker_Stop(&Speaker, sensor->ID);
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <DistanceSensor_Handle+0xa0>)
 80029be:	7c1b      	ldrb	r3, [r3, #16]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <DistanceSensor_Handle+0x98>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b5a      	ldrb	r2, [r3, #13]
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <DistanceSensor_Handle+0xa0>)
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 f836 	bl	8003a40 <Speaker_Stop>
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000478 	.word	0x20000478
 80029e0:	41200000 	.word	0x41200000

080029e4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_TIM_IC_CaptureCallback+0x38>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d104      	bne.n	8002a00 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ff2d 	bl	8002858 <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM22) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 80029fe:	e008      	b.n	8002a12 <HAL_TIM_IC_CaptureCallback+0x2e>
	else if (htim->Instance == TIM22) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d103      	bne.n	8002a12 <HAL_TIM_IC_CaptureCallback+0x2e>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ff23 	bl	8002858 <DistanceSensor_InputCaptureInterrupt>
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	20000438 	.word	0x20000438
 8002a24:	40011400 	.word	0x40011400
 8002a28:	20000458 	.word	0x20000458

08002a2c <HAL_TIM_PeriodElapsedCallback>:
    }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2 && Speaker.beepLengthOn != 0)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	05db      	lsls	r3, r3, #23
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d108      	bne.n	8002a52 <HAL_TIM_PeriodElapsedCallback+0x26>
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Speaker_BeepInterrupt(&Speaker);
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 f895 	bl	8003b7c <Speaker_BeepInterrupt>
	}

}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b002      	add	sp, #8
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20000478 	.word	0x20000478

08002a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a66:	f001 fc95 	bl	8004394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a6a:	f000 f825 	bl	8002ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a6e:	f000 fb33 	bl	80030d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a72:	f000 fb13 	bl	800309c <MX_DMA_Init>
  MX_I2C1_Init();
 8002a76:	f000 f89b 	bl	8002bb0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a7a:	f000 f8d9 	bl	8002c30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a7e:	f000 fadd 	bl	800303c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f000 f90d 	bl	8002ca0 <MX_TIM2_Init>
  MX_TIM22_Init();
 8002a86:	f000 fa31 	bl	8002eec <MX_TIM22_Init>
  MX_TIM21_Init();
 8002a8a:	f000 f987 	bl	8002d9c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  Speaker_Init(&Speaker, &htim2);
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <main+0x4c>)
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <main+0x50>)
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 ff69 	bl	800396c <Speaker_Init>
  //DistanceSensor_Init(&Front, &htim21, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
  RFID_Init(&RFID_Module);
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <main+0x54>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fe31 	bl	8003704 <RFID_Init>
  //DistanceSensor_Start(&Back);W

  uint8_t serialNum[5];
  while (1)
  {
	  RFID_SecurityLogic(&RFID_Module);
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <main+0x54>)
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fee1 	bl	800386c <RFID_SecurityLogic>
 8002aaa:	e7fa      	b.n	8002aa2 <main+0x42>
 8002aac:	200002e4 	.word	0x200002e4
 8002ab0:	20000478 	.word	0x20000478
 8002ab4:	2000042c 	.word	0x2000042c

08002ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b09b      	sub	sp, #108	; 0x6c
 8002abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002abe:	2434      	movs	r4, #52	; 0x34
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	2334      	movs	r3, #52	; 0x34
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f006 fe43 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ace:	2320      	movs	r3, #32
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	2314      	movs	r3, #20
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f006 fe3b 	bl	8009754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	231c      	movs	r3, #28
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f006 fe34 	bl	8009754 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <SystemClock_Config+0xf0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <SystemClock_Config+0xf4>)
 8002af2:	401a      	ands	r2, r3
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <SystemClock_Config+0xf0>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0109      	lsls	r1, r1, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002afe:	0021      	movs	r1, r4
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2201      	movs	r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2210      	movs	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	2202      	movs	r2, #2
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	02d2      	lsls	r2, r2, #11
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 fff5 	bl	8005b20 <HAL_RCC_OscConfig>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002b3a:	f000 fb49 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3e:	2120      	movs	r1, #32
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	220f      	movs	r2, #15
 8002b44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2101      	movs	r1, #1
 8002b62:	0018      	movs	r0, r3
 8002b64:	f003 fb46 	bl	80061f4 <HAL_RCC_ClockConfig>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d001      	beq.n	8002b70 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002b6c:	f000 fb30 	bl	80031d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2209      	movs	r2, #9
 8002b74:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	0018      	movs	r0, r3
 8002b86:	f003 fddd 	bl	8006744 <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002b8e:	f000 fb1f 	bl	80031d0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	045b      	lsls	r3, r3, #17
 8002b96:	2200      	movs	r2, #0
 8002b98:	0019      	movs	r1, r3
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f003 fc72 	bl	8006484 <HAL_RCC_MCOConfig>
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b01b      	add	sp, #108	; 0x6c
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	ffffe7ff 	.word	0xffffe7ff

08002bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <MX_I2C1_Init+0x7c>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bec:	0018      	movs	r0, r3
 8002bee:	f002 f86d 	bl	8004ccc <HAL_I2C_Init>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 faeb 	bl	80031d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 fef6 	bl	80059f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c08:	f000 fae2 	bl	80031d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <MX_I2C1_Init+0x74>)
 8002c0e:	2100      	movs	r1, #0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f002 ff39 	bl	8005a88 <HAL_I2CEx_ConfigDigitalFilter>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c1a:	f000 fad9 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200001f0 	.word	0x200001f0
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	00300f38 	.word	0x00300f38

08002c30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c36:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <MX_SPI1_Init+0x6c>)
 8002c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c3c:	2282      	movs	r2, #130	; 0x82
 8002c3e:	0052      	lsls	r2, r2, #1
 8002c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c64:	2238      	movs	r2, #56	; 0x38
 8002c66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <MX_SPI1_Init+0x68>)
 8002c82:	0018      	movs	r0, r3
 8002c84:	f003 fe98 	bl	80069b8 <HAL_SPI_Init>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c8c:	f000 faa0 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	2000028c 	.word	0x2000028c
 8002c9c:	40013000 	.word	0x40013000

08002ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	2318      	movs	r3, #24
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	0018      	movs	r0, r3
 8002cac:	2310      	movs	r3, #16
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f006 fd4f 	bl	8009754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f006 fd47 	bl	8009754 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc6:	003b      	movs	r3, r7
 8002cc8:	0018      	movs	r0, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f006 fd40 	bl	8009754 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	05d2      	lsls	r2, r2, #23
 8002cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cde:	221f      	movs	r2, #31
 8002ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cea:	22f4      	movs	r2, #244	; 0xf4
 8002cec:	0052      	lsls	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f004 f98e 	bl	8007020 <HAL_TIM_Base_Init>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002d08:	f000 fa62 	bl	80031d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0c:	2118      	movs	r1, #24
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0152      	lsls	r2, r2, #5
 8002d14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d16:	187a      	adds	r2, r7, r1
 8002d18:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 fddd 	bl	80078dc <HAL_TIM_ConfigClockSource>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002d26:	f000 fa53 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f004 fa29 	bl	8007184 <HAL_TIM_PWM_Init>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d36:	f000 fa4b 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d48:	187a      	adds	r2, r7, r1
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 fa18 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002d58:	f000 fa3a 	bl	80031d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5c:	003b      	movs	r3, r7
 8002d5e:	2260      	movs	r2, #96	; 0x60
 8002d60:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 244;
 8002d62:	003b      	movs	r3, r7
 8002d64:	22f4      	movs	r2, #244	; 0xf4
 8002d66:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d68:	003b      	movs	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	003b      	movs	r3, r7
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d74:	0039      	movs	r1, r7
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 fce8 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002d84:	f000 fa24 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <MX_TIM2_Init+0xf8>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 f8de 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b00a      	add	sp, #40	; 0x28
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200002e4 	.word	0x200002e4

08002d9c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	; 0x38
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	2328      	movs	r3, #40	; 0x28
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	0018      	movs	r0, r3
 8002da8:	2310      	movs	r3, #16
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f006 fcd1 	bl	8009754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db2:	2320      	movs	r3, #32
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	0018      	movs	r0, r3
 8002db8:	2308      	movs	r3, #8
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f006 fcc9 	bl	8009754 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2310      	movs	r3, #16
 8002dca:	001a      	movs	r2, r3
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f006 fcc1 	bl	8009754 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f006 fcba 	bl	8009754 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002de2:	4a40      	ldr	r2, [pc, #256]	; (8002ee4 <MX_TIM21_Init+0x148>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002de6:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002de8:	221f      	movs	r2, #31
 8002dea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <MX_TIM21_Init+0x14c>)
 8002df6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f004 f90a 	bl	8007020 <HAL_TIM_Base_Init>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8002e10:	f000 f9de 	bl	80031d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	2128      	movs	r1, #40	; 0x28
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	0152      	lsls	r2, r2, #5
 8002e1c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002e1e:	187a      	adds	r2, r7, r1
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f004 fd59 	bl	80078dc <HAL_TIM_ConfigClockSource>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8002e2e:	f000 f9cf 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f004 fab7 	bl	80073a8 <HAL_TIM_IC_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8002e3e:	f000 f9c7 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e44:	0018      	movs	r0, r3
 8002e46:	f004 f99d 	bl	8007184 <HAL_TIM_PWM_Init>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM21_Init+0xb6>
  {
    Error_Handler();
 8002e4e:	f000 f9bf 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e52:	2120      	movs	r1, #32
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002e60:	187a      	adds	r2, r7, r1
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f005 f98c 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM21_Init+0xd8>
  {
    Error_Handler();
 8002e70:	f000 f9ae 	bl	80031d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002e74:	2110      	movs	r1, #16
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	220a      	movs	r2, #10
 8002e7a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2201      	movs	r2, #1
 8002e80:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e8e:	1879      	adds	r1, r7, r1
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	0018      	movs	r0, r3
 8002e96:	f004 fbb7 	bl	8007608 <HAL_TIM_IC_ConfigChannel>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM21_Init+0x106>
  {
    Error_Handler();
 8002e9e:	f000 f997 	bl	80031d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	2260      	movs	r2, #96	; 0x60
 8002ea6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	220a      	movs	r2, #10
 8002eac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eae:	003b      	movs	r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb4:	003b      	movs	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eba:	0039      	movs	r1, r7
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f004 fc45 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	1e03      	subs	r3, r0, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM21_Init+0x132>
  {
    Error_Handler();
 8002eca:	f000 f981 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <MX_TIM21_Init+0x144>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f001 f83b 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b00e      	add	sp, #56	; 0x38
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000324 	.word	0x20000324
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	0000ffff 	.word	0x0000ffff

08002eec <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	2328      	movs	r3, #40	; 0x28
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	2310      	movs	r3, #16
 8002efa:	001a      	movs	r2, r3
 8002efc:	2100      	movs	r1, #0
 8002efe:	f006 fc29 	bl	8009754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	2320      	movs	r3, #32
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	0018      	movs	r0, r3
 8002f08:	2308      	movs	r3, #8
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f006 fc21 	bl	8009754 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f12:	2310      	movs	r3, #16
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	0018      	movs	r0, r3
 8002f18:	2310      	movs	r3, #16
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f006 fc19 	bl	8009754 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f22:	003b      	movs	r3, r7
 8002f24:	0018      	movs	r0, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f006 fc12 	bl	8009754 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <MX_TIM22_Init+0x148>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 8002f36:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f38:	221f      	movs	r2, #31
 8002f3a:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f44:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <MX_TIM22_Init+0x14c>)
 8002f46:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f004 f862 	bl	8007020 <HAL_TIM_Base_Init>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM22_Init+0x78>
  {
    Error_Handler();
 8002f60:	f000 f936 	bl	80031d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f64:	2128      	movs	r1, #40	; 0x28
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	0152      	lsls	r2, r2, #5
 8002f6c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002f6e:	187a      	adds	r2, r7, r1
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f004 fcb1 	bl	80078dc <HAL_TIM_ConfigClockSource>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8002f7e:	f000 f927 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim22) != HAL_OK)
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f84:	0018      	movs	r0, r3
 8002f86:	f004 fa0f 	bl	80073a8 <HAL_TIM_IC_Init>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8002f8e:	f000 f91f 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <MX_TIM22_Init+0x144>)
 8002f94:	0018      	movs	r0, r3
 8002f96:	f004 f8f5 	bl	8007184 <HAL_TIM_PWM_Init>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 8002f9e:	f000 f917 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002fb0:	187a      	adds	r2, r7, r1
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <MX_TIM22_Init+0x144>)
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 f8e4 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM22_Init+0xd8>
  {
    Error_Handler();
 8002fc0:	f000 f906 	bl	80031d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	220a      	movs	r2, #10
 8002fca:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2201      	movs	r2, #1
 8002fd0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim22, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fde:	1879      	adds	r1, r7, r1
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <MX_TIM22_Init+0x144>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f004 fb0f 	bl	8007608 <HAL_TIM_IC_ConfigChannel>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM22_Init+0x106>
  {
    Error_Handler();
 8002fee:	f000 f8ef 	bl	80031d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	003b      	movs	r3, r7
 8002ff4:	2260      	movs	r2, #96	; 0x60
 8002ff6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	220a      	movs	r2, #10
 8002ffc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffe:	003b      	movs	r3, r7
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003004:	003b      	movs	r3, r7
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800300a:	0039      	movs	r1, r7
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <MX_TIM22_Init+0x144>)
 800300e:	2204      	movs	r2, #4
 8003010:	0018      	movs	r0, r3
 8003012:	f004 fb9d 	bl	8007750 <HAL_TIM_PWM_ConfigChannel>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_TIM22_Init+0x132>
  {
    Error_Handler();
 800301a:	f000 f8d9 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <MX_TIM22_Init+0x144>)
 8003020:	0018      	movs	r0, r3
 8003022:	f000 ff93 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b00e      	add	sp, #56	; 0x38
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	20000364 	.word	0x20000364
 8003034:	40011400 	.word	0x40011400
 8003038:	0000ffff 	.word	0x0000ffff

0800303c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <MX_USART1_UART_Init+0x5c>)
 8003044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003048:	22e1      	movs	r2, #225	; 0xe1
 800304a:	0252      	lsls	r2, r2, #9
 800304c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <MX_USART1_UART_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <MX_USART1_UART_Init+0x58>)
 8003080:	0018      	movs	r0, r3
 8003082:	f005 f8d7 	bl	8008234 <HAL_UART_Init>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d001      	beq.n	800308e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800308a:	f000 f8a1 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200003a4 	.word	0x200003a4
 8003098:	40013800 	.word	0x40013800

0800309c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a8:	2101      	movs	r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_DMA_Init+0x38>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	2201      	movs	r2, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	200a      	movs	r0, #10
 80030c0:	f001 faa8 	bl	8004614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f001 faba 	bl	800463e <HAL_NVIC_EnableIRQ>

}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000

080030d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	240c      	movs	r4, #12
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	0018      	movs	r0, r3
 80030e4:	2314      	movs	r3, #20
 80030e6:	001a      	movs	r2, r3
 80030e8:	2100      	movs	r1, #0
 80030ea:	f006 fb33 	bl	8009754 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <MX_GPIO_Init+0xec>)
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <MX_GPIO_Init+0xec>)
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030fa:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <MX_GPIO_Init+0xec>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <MX_GPIO_Init+0xec>)
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <MX_GPIO_Init+0xec>)
 800310c:	2102      	movs	r1, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <MX_GPIO_Init+0xec>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_RESET);
 800311e:	492a      	ldr	r1, [pc, #168]	; (80031c8 <MX_GPIO_Init+0xf0>)
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	2200      	movs	r2, #0
 8003126:	0018      	movs	r0, r3
 8003128:	f001 fdb3 	bl	8004c92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <MX_GPIO_Init+0xf4>)
 800312e:	2200      	movs	r2, #0
 8003130:	2109      	movs	r1, #9
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fdad 	bl	8004c92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	0159      	lsls	r1, r3, #5
 800313c:	23a0      	movs	r3, #160	; 0xa0
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	2201      	movs	r2, #1
 8003142:	0018      	movs	r0, r3
 8003144:	f001 fda5 	bl	8004c92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003148:	193b      	adds	r3, r7, r4
 800314a:	2210      	movs	r2, #16
 800314c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	193b      	adds	r3, r7, r4
 8003150:	2201      	movs	r2, #1
 8003152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	193b      	adds	r3, r7, r4
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	193b      	adds	r3, r7, r4
 800315c:	2200      	movs	r2, #0
 800315e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003160:	193a      	adds	r2, r7, r4
 8003162:	23a0      	movs	r3, #160	; 0xa0
 8003164:	05db      	lsls	r3, r3, #23
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f001 fbff 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2209      	movs	r2, #9
 8003172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2201      	movs	r2, #1
 8003178:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317a:	193b      	adds	r3, r7, r4
 800317c:	2201      	movs	r2, #1
 800317e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	193b      	adds	r3, r7, r4
 8003188:	4a10      	ldr	r2, [pc, #64]	; (80031cc <MX_GPIO_Init+0xf4>)
 800318a:	0019      	movs	r1, r3
 800318c:	0010      	movs	r0, r2
 800318e:	f001 fbed 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_STATUS_Pin DISTANCE_SENSOR_FRONT_STATUS_Pin */
  GPIO_InitStruct.Pin = RFID_STATUS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin;
 8003192:	0021      	movs	r1, r4
 8003194:	187b      	adds	r3, r7, r1
 8003196:	2290      	movs	r2, #144	; 0x90
 8003198:	0212      	lsls	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2201      	movs	r2, #1
 80031a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2201      	movs	r2, #1
 80031a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	187a      	adds	r2, r7, r1
 80031b0:	23a0      	movs	r3, #160	; 0xa0
 80031b2:	05db      	lsls	r3, r3, #23
 80031b4:	0011      	movs	r1, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f001 fbd8 	bl	800496c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b009      	add	sp, #36	; 0x24
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	00008010 	.word	0x00008010
 80031cc:	50000400 	.word	0x50000400

080031d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <Error_Handler+0x8>
	...

080031dc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b087      	sub	sp, #28
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	0002      	movs	r2, r0
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80031e8:	240f      	movs	r4, #15
 80031ea:	193a      	adds	r2, r7, r4
 80031ec:	1df9      	adds	r1, r7, #7
 80031ee:	4806      	ldr	r0, [pc, #24]	; (8003208 <RC522_SPI_Transfer+0x2c>)
 80031f0:	2364      	movs	r3, #100	; 0x64
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2301      	movs	r3, #1
 80031f6:	f003 fc73 	bl	8006ae0 <HAL_SPI_TransmitReceive>

	return rx_data;
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	781b      	ldrb	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b005      	add	sp, #20
 8003204:	bd90      	pop	{r4, r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	2000028c 	.word	0x2000028c

0800320c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	0002      	movs	r2, r0
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	1c0a      	adds	r2, r1, #0
 800321c:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	2200      	movs	r2, #0
 8003224:	2110      	movs	r1, #16
 8003226:	0018      	movs	r0, r3
 8003228:	f001 fd33 	bl	8004c92 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	227e      	movs	r2, #126	; 0x7e
 8003236:	4013      	ands	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	0018      	movs	r0, r3
 800323c:	f7ff ffce 	bl	80031dc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8003240:	1dbb      	adds	r3, r7, #6
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	0018      	movs	r0, r3
 8003246:	f7ff ffc9 	bl	80031dc <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800324a:	23a0      	movs	r3, #160	; 0xa0
 800324c:	05db      	lsls	r3, r3, #23
 800324e:	2201      	movs	r2, #1
 8003250:	2110      	movs	r1, #16
 8003252:	0018      	movs	r0, r3
 8003254:	f001 fd1d 	bl	8004c92 <HAL_GPIO_WritePin>
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	0002      	movs	r2, r0
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800326c:	23a0      	movs	r3, #160	; 0xa0
 800326e:	05db      	lsls	r3, r3, #23
 8003270:	2200      	movs	r2, #0
 8003272:	2110      	movs	r1, #16
 8003274:	0018      	movs	r0, r3
 8003276:	f001 fd0c 	bl	8004c92 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b25b      	sxtb	r3, r3
 8003282:	227e      	movs	r2, #126	; 0x7e
 8003284:	4013      	ands	r3, r2
 8003286:	b25b      	sxtb	r3, r3
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	4252      	negs	r2, r2
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff ffa2 	bl	80031dc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8003298:	250f      	movs	r5, #15
 800329a:	197c      	adds	r4, r7, r5
 800329c:	2000      	movs	r0, #0
 800329e:	f7ff ff9d 	bl	80031dc <RC522_SPI_Transfer>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80032a6:	23a0      	movs	r3, #160	; 0xa0
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	2201      	movs	r2, #1
 80032ac:	2110      	movs	r1, #16
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 fcef 	bl	8004c92 <HAL_GPIO_WritePin>

	return val;
 80032b4:	197b      	adds	r3, r7, r5
 80032b6:	781b      	ldrb	r3, [r3, #0]

}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bdb0      	pop	{r4, r5, r7, pc}

080032c0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	0002      	movs	r2, r0
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	1dbb      	adds	r3, r7, #6
 80032ce:	1c0a      	adds	r2, r1, #0
 80032d0:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80032d2:	250f      	movs	r5, #15
 80032d4:	197c      	adds	r4, r7, r5
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff ffc0 	bl	8003260 <Read_MFRC522>
 80032e0:	0003      	movs	r3, r0
 80032e2:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80032e4:	197a      	adds	r2, r7, r5
 80032e6:	1dbb      	adds	r3, r7, #6
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff ff88 	bl	800320c <Write_MFRC522>
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bdb0      	pop	{r4, r5, r7, pc}

08003304 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	0002      	movs	r2, r0
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	1c0a      	adds	r2, r1, #0
 8003314:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8003316:	250f      	movs	r5, #15
 8003318:	197c      	adds	r4, r7, r5
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	0018      	movs	r0, r3
 8003320:	f7ff ff9e 	bl	8003260 <Read_MFRC522>
 8003324:	0003      	movs	r3, r0
 8003326:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b25b      	sxtb	r3, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	b25b      	sxtb	r3, r3
 8003332:	197a      	adds	r2, r7, r5
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	b252      	sxtb	r2, r2
 8003338:	4013      	ands	r3, r2
 800333a:	b25b      	sxtb	r3, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f7ff ff61 	bl	800320c <Write_MFRC522>
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bdb0      	pop	{r4, r5, r7, pc}

08003352 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8003356:	2014      	movs	r0, #20
 8003358:	f7ff ff82 	bl	8003260 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800335c:	2103      	movs	r1, #3
 800335e:	2014      	movs	r0, #20
 8003360:	f7ff ffae 	bl	80032c0 <SetBitMask>
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800336e:	210f      	movs	r1, #15
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff ff4b 	bl	800320c <Write_MFRC522>
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003380:	23a0      	movs	r3, #160	; 0xa0
 8003382:	05db      	lsls	r3, r3, #23
 8003384:	2201      	movs	r2, #1
 8003386:	2110      	movs	r1, #16
 8003388:	0018      	movs	r0, r3
 800338a:	f001 fc82 	bl	8004c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <MFRC522_Init+0x5c>)
 8003390:	2201      	movs	r2, #1
 8003392:	2101      	movs	r1, #1
 8003394:	0018      	movs	r0, r3
 8003396:	f001 fc7c 	bl	8004c92 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800339a:	f7ff ffe6 	bl	800336a <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800339e:	218d      	movs	r1, #141	; 0x8d
 80033a0:	202a      	movs	r0, #42	; 0x2a
 80033a2:	f7ff ff33 	bl	800320c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80033a6:	213e      	movs	r1, #62	; 0x3e
 80033a8:	202b      	movs	r0, #43	; 0x2b
 80033aa:	f7ff ff2f 	bl	800320c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80033ae:	211e      	movs	r1, #30
 80033b0:	202d      	movs	r0, #45	; 0x2d
 80033b2:	f7ff ff2b 	bl	800320c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80033b6:	2100      	movs	r1, #0
 80033b8:	202c      	movs	r0, #44	; 0x2c
 80033ba:	f7ff ff27 	bl	800320c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80033be:	2140      	movs	r1, #64	; 0x40
 80033c0:	2015      	movs	r0, #21
 80033c2:	f7ff ff23 	bl	800320c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80033c6:	213d      	movs	r1, #61	; 0x3d
 80033c8:	2011      	movs	r0, #17
 80033ca:	f7ff ff1f 	bl	800320c <Write_MFRC522>

	AntennaOn();
 80033ce:	f7ff ffc0 	bl	8003352 <AntennaOn>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	50000400 	.word	0x50000400

080033dc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80033dc:	b5b0      	push	{r4, r5, r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	0011      	movs	r1, r2
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	240f      	movs	r4, #15
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	1c02      	adds	r2, r0, #0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	230e      	movs	r3, #14
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	1c0a      	adds	r2, r1, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 80033f8:	231f      	movs	r3, #31
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 8003400:	211e      	movs	r1, #30
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 8003408:	201d      	movs	r0, #29
 800340a:	183b      	adds	r3, r7, r0
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8003410:	193b      	adds	r3, r7, r4
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d008      	beq.n	800342a <MFRC522_ToCard+0x4e>
 8003418:	2b0e      	cmp	r3, #14
 800341a:	d10f      	bne.n	800343c <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2212      	movs	r2, #18
 8003420:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8003422:	183b      	adds	r3, r7, r0
 8003424:	2210      	movs	r2, #16
 8003426:	701a      	strb	r2, [r3, #0]
			break;
 8003428:	e009      	b.n	800343e <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800342a:	231e      	movs	r3, #30
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	2277      	movs	r2, #119	; 0x77
 8003430:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8003432:	231d      	movs	r3, #29
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2230      	movs	r2, #48	; 0x30
 8003438:	701a      	strb	r2, [r3, #0]
			break;
 800343a:	e000      	b.n	800343e <MFRC522_ToCard+0x62>
		}
		default:
			break;
 800343c:	46c0      	nop			; (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800343e:	231e      	movs	r3, #30
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	4252      	negs	r2, r2
 8003448:	4313      	orrs	r3, r2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	0019      	movs	r1, r3
 800344e:	2002      	movs	r0, #2
 8003450:	f7ff fedc 	bl	800320c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	2004      	movs	r0, #4
 8003458:	f7ff ff54 	bl	8003304 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	200a      	movs	r0, #10
 8003460:	f7ff ff2e 	bl	80032c0 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8003464:	2100      	movs	r1, #0
 8003466:	2001      	movs	r0, #1
 8003468:	f7ff fed0 	bl	800320c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e00a      	b.n	8003488 <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	18d3      	adds	r3, r2, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	0019      	movs	r1, r3
 800347c:	2009      	movs	r0, #9
 800347e:	f7ff fec5 	bl	800320c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3301      	adds	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	230e      	movs	r3, #14
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3ee      	bcc.n	8003472 <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8003494:	240f      	movs	r4, #15
 8003496:	193b      	adds	r3, r7, r4
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	0019      	movs	r1, r3
 800349c:	2001      	movs	r0, #1
 800349e:	f7ff feb5 	bl	800320c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d103      	bne.n	80034b2 <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	200d      	movs	r0, #13
 80034ae:	f7ff ff07 	bl	80032c0 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80034b2:	23fa      	movs	r3, #250	; 0xfa
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80034b8:	251c      	movs	r5, #28
 80034ba:	197c      	adds	r4, r7, r5
 80034bc:	2004      	movs	r0, #4
 80034be:	f7ff fecf 	bl	8003260 <Read_MFRC522>
 80034c2:	0003      	movs	r3, r0
 80034c4:	7023      	strb	r3, [r4, #0]
        i--;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <MFRC522_ToCard+0x112>
 80034d2:	197b      	adds	r3, r7, r5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	d108      	bne.n	80034ee <MFRC522_ToCard+0x112>
 80034dc:	197b      	adds	r3, r7, r5
 80034de:	221d      	movs	r2, #29
 80034e0:	18ba      	adds	r2, r7, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	4013      	ands	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0e4      	beq.n	80034b8 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	200d      	movs	r0, #13
 80034f2:	f7ff ff07 	bl	8003304 <ClearBitMask>

    if (i != 0)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d100      	bne.n	80034fe <MFRC522_ToCard+0x122>
 80034fc:	e070      	b.n	80035e0 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80034fe:	2006      	movs	r0, #6
 8003500:	f7ff feae 	bl	8003260 <Read_MFRC522>
 8003504:	0003      	movs	r3, r0
 8003506:	001a      	movs	r2, r3
 8003508:	231b      	movs	r3, #27
 800350a:	4013      	ands	r3, r2
 800350c:	d164      	bne.n	80035d8 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 800350e:	211f      	movs	r1, #31
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8003516:	231c      	movs	r3, #28
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	221e      	movs	r2, #30
 800351c:	18ba      	adds	r2, r7, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	4013      	ands	r3, r2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	001a      	movs	r2, r3
 8003528:	2301      	movs	r3, #1
 800352a:	4013      	ands	r3, r2
 800352c:	d002      	beq.n	8003534 <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8003534:	230f      	movs	r3, #15
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d150      	bne.n	80035e0 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800353e:	251c      	movs	r5, #28
 8003540:	197c      	adds	r4, r7, r5
 8003542:	200a      	movs	r0, #10
 8003544:	f7ff fe8c 	bl	8003260 <Read_MFRC522>
 8003548:	0003      	movs	r3, r0
 800354a:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800354c:	200c      	movs	r0, #12
 800354e:	f7ff fe87 	bl	8003260 <Read_MFRC522>
 8003552:	0003      	movs	r3, r0
 8003554:	0019      	movs	r1, r3
 8003556:	2017      	movs	r0, #23
 8003558:	183b      	adds	r3, r7, r0
 800355a:	2207      	movs	r2, #7
 800355c:	400a      	ands	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8003560:	0001      	movs	r1, r0
 8003562:	187b      	adds	r3, r7, r1
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 800356a:	197b      	adds	r3, r7, r5
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	00da      	lsls	r2, r3, #3
 8003572:	187b      	adds	r3, r7, r1
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	001a      	movs	r2, r3
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e006      	b.n	800358e <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 8003580:	231c      	movs	r3, #28
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	001a      	movs	r2, r3
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800358e:	221c      	movs	r2, #28
 8003590:	18bb      	adds	r3, r7, r2
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 8003598:	18bb      	adds	r3, r7, r2
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 800359e:	221c      	movs	r2, #28
 80035a0:	18bb      	adds	r3, r7, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d902      	bls.n	80035ae <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 80035a8:	18bb      	adds	r3, r7, r2
 80035aa:	2210      	movs	r2, #16
 80035ac:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e00a      	b.n	80035ca <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	18d4      	adds	r4, r2, r3
 80035ba:	2009      	movs	r0, #9
 80035bc:	f7ff fe50 	bl	8003260 <Read_MFRC522>
 80035c0:	0003      	movs	r3, r0
 80035c2:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	231c      	movs	r3, #28
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3ee      	bcc.n	80035b4 <MFRC522_ToCard+0x1d8>
 80035d6:	e003      	b.n	80035e0 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2202      	movs	r2, #2
 80035de:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80035e0:	231f      	movs	r3, #31
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b008      	add	sp, #32
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}

080035ee <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80035ee:	b5b0      	push	{r4, r5, r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af02      	add	r7, sp, #8
 80035f4:	0002      	movs	r2, r0
 80035f6:	6039      	str	r1, [r7, #0]
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80035fc:	2107      	movs	r1, #7
 80035fe:	200d      	movs	r0, #13
 8003600:	f7ff fe04 	bl	800320c <Write_MFRC522>

	TagType[0] = reqMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	1dfa      	adds	r2, r7, #7
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800360c:	250f      	movs	r5, #15
 800360e:	197c      	adds	r4, r7, r5
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	2308      	movs	r3, #8
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	0013      	movs	r3, r2
 800361c:	2201      	movs	r2, #1
 800361e:	200c      	movs	r0, #12
 8003620:	f7ff fedc 	bl	80033dc <MFRC522_ToCard>
 8003624:	0003      	movs	r3, r0
 8003626:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8003628:	197b      	adds	r3, r7, r5
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <MFRC522_Request+0x48>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b10      	cmp	r3, #16
 8003634:	d003      	beq.n	800363e <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 8003636:	230f      	movs	r3, #15
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2202      	movs	r2, #2
 800363c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bdb0      	pop	{r4, r5, r7, pc}

0800364c <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8003654:	230d      	movs	r3, #13
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800365c:	2100      	movs	r1, #0
 800365e:	200d      	movs	r0, #13
 8003660:	f7ff fdd4 	bl	800320c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2293      	movs	r2, #147	; 0x93
 8003668:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3301      	adds	r3, #1
 800366e:	2220      	movs	r2, #32
 8003670:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003672:	250f      	movs	r5, #15
 8003674:	197c      	adds	r4, r7, r5
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	2308      	movs	r3, #8
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0013      	movs	r3, r2
 8003682:	2202      	movs	r2, #2
 8003684:	200c      	movs	r0, #12
 8003686:	f7ff fea9 	bl	80033dc <MFRC522_ToCard>
 800368a:	0003      	movs	r3, r0
 800368c:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 800368e:	197b      	adds	r3, r7, r5
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d129      	bne.n	80036ea <MFRC522_Anticoll+0x9e>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8003696:	230e      	movs	r3, #14
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e010      	b.n	80036c2 <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 80036a0:	200e      	movs	r0, #14
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	7819      	ldrb	r1, [r3, #0]
 80036ac:	220d      	movs	r2, #13
 80036ae:	18bb      	adds	r3, r7, r2
 80036b0:	18ba      	adds	r2, r7, r2
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	404a      	eors	r2, r1
 80036b6:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	183b      	adds	r3, r7, r0
 80036be:	3201      	adds	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	220e      	movs	r2, #14
 80036c4:	18bb      	adds	r3, r7, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d9e9      	bls.n	80036a0 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80036cc:	18bb      	adds	r3, r7, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	220d      	movs	r2, #13
 80036d8:	18ba      	adds	r2, r7, r2
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d00a      	beq.n	80036f6 <MFRC522_Anticoll+0xaa>
		{
			status = MI_ERR;
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e005      	b.n	80036f6 <MFRC522_Anticoll+0xaa>
		}
    }
    else
    {
    	memset(serNum, 0, 5);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2205      	movs	r2, #5
 80036ee:	2100      	movs	r1, #0
 80036f0:	0018      	movs	r0, r3
 80036f2:	f006 f82f 	bl	8009754 <memset>
    }

    return status;
 80036f6:	230f      	movs	r3, #15
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bdb0      	pop	{r4, r5, r7, pc}

08003704 <RFID_Init>:

extern speaker Speaker;
extern UART_HandleTypeDef huart1;
extern char Data;

void RFID_Init(rfid* sensor) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    MFRC522_Init();
 800370c:	f7ff fe36 	bl	800337c <MFRC522_Init>
    memset(sensor->prevSerialNum, 0, 5);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2205      	movs	r2, #5
 8003714:	2100      	movs	r1, #0
 8003716:	0018      	movs	r0, r3
 8003718:	f006 f81c 	bl	8009754 <memset>
    sensor->status = CARD_IDLE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	715a      	strb	r2, [r3, #5]

    sensor->botEnabled = false;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	719a      	strb	r2, [r3, #6]
    sensor->initialSuccessfulCardTap = true;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	71da      	strb	r2, [r3, #7]
    sensor->initialFailedCardTap = true;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	721a      	strb	r2, [r3, #8]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}

0800373c <RFID_ValidateCard>:

rfid_card_status RFID_ValidateCard(rfid* sensor)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	uint8_t serialNum[5];
	MFRC522_Request(PICC_REQIDL, serialNum);
 8003744:	2408      	movs	r4, #8
 8003746:	193b      	adds	r3, r7, r4
 8003748:	0019      	movs	r1, r3
 800374a:	2026      	movs	r0, #38	; 0x26
 800374c:	f7ff ff4f 	bl	80035ee <MFRC522_Request>
	MFRC522_Anticoll(serialNum);
 8003750:	193b      	adds	r3, r7, r4
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff ff7a 	bl	800364c <MFRC522_Anticoll>

	sensor->status = CARD_IDLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	715a      	strb	r2, [r3, #5]

	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 800375e:	0022      	movs	r2, r4
 8003760:	18bb      	adds	r3, r7, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2baa      	cmp	r3, #170	; 0xaa
 8003766:	d10f      	bne.n	8003788 <RFID_ValidateCard+0x4c>
 8003768:	18bb      	adds	r3, r7, r2
 800376a:	785b      	ldrb	r3, [r3, #1]
 800376c:	2bcd      	cmp	r3, #205	; 0xcd
 800376e:	d10b      	bne.n	8003788 <RFID_ValidateCard+0x4c>
 8003770:	18bb      	adds	r3, r7, r2
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	2b2f      	cmp	r3, #47	; 0x2f
 8003776:	d107      	bne.n	8003788 <RFID_ValidateCard+0x4c>
 8003778:	18bb      	adds	r3, r7, r2
 800377a:	78db      	ldrb	r3, [r3, #3]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d103      	bne.n	8003788 <RFID_ValidateCard+0x4c>
 8003780:	18bb      	adds	r3, r7, r2
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	2b4b      	cmp	r3, #75	; 0x4b
 8003786:	d013      	beq.n	80037b0 <RFID_ValidateCard+0x74>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	781b      	ldrb	r3, [r3, #0]
	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 800378c:	2baa      	cmp	r3, #170	; 0xaa
 800378e:	d113      	bne.n	80037b8 <RFID_ValidateCard+0x7c>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2bcd      	cmp	r3, #205	; 0xcd
 8003796:	d10f      	bne.n	80037b8 <RFID_ValidateCard+0x7c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	2b2f      	cmp	r3, #47	; 0x2f
 800379e:	d10b      	bne.n	80037b8 <RFID_ValidateCard+0x7c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	78db      	ldrb	r3, [r3, #3]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d107      	bne.n	80037b8 <RFID_ValidateCard+0x7c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	2b4b      	cmp	r3, #75	; 0x4b
 80037ae:	d103      	bne.n	80037b8 <RFID_ValidateCard+0x7c>
	{
		sensor->status = CARD_SUCCESS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	715a      	strb	r2, [r3, #5]
 80037b6:	e039      	b.n	800382c <RFID_ValidateCard+0xf0>

	}
	else if (!(serialNum[0] | (!(serialNum[1] == 32 || serialNum[1] == 0)) | serialNum[2] | serialNum[3] | serialNum[4]))
 80037b8:	2108      	movs	r1, #8
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	001a      	movs	r2, r3
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d005      	beq.n	80037d4 <RFID_ValidateCard+0x98>
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <RFID_ValidateCard+0x98>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <RFID_ValidateCard+0x9a>
 80037d4:	2300      	movs	r3, #0
 80037d6:	4313      	orrs	r3, r2
 80037d8:	2108      	movs	r1, #8
 80037da:	187a      	adds	r2, r7, r1
 80037dc:	7892      	ldrb	r2, [r2, #2]
 80037de:	4313      	orrs	r3, r2
 80037e0:	187a      	adds	r2, r7, r1
 80037e2:	78d2      	ldrb	r2, [r2, #3]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	7912      	ldrb	r2, [r2, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d11b      	bne.n	8003826 <RFID_ValidateCard+0xea>
	{
		if (!(sensor->prevSerialNum[0] | sensor->prevSerialNum[1] | sensor->prevSerialNum[2] | sensor->prevSerialNum[3] | sensor->prevSerialNum[4]))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	4313      	orrs	r3, r2
 8003800:	b2da      	uxtb	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	78db      	ldrb	r3, [r3, #3]
 8003806:	4313      	orrs	r3, r2
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	791b      	ldrb	r3, [r3, #4]
 800380e:	4313      	orrs	r3, r2
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <RFID_ValidateCard+0xe2>
			sensor->status = CARD_IDLE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	715a      	strb	r2, [r3, #5]
 800381c:	e006      	b.n	800382c <RFID_ValidateCard+0xf0>
		else
		{
			sensor->status = CARD_FAIL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	715a      	strb	r2, [r3, #5]
 8003824:	e002      	b.n	800382c <RFID_ValidateCard+0xf0>
		}

	}
	else
	{
		sensor->status = CARD_FAIL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	715a      	strb	r2, [r3, #5]
	}


	for (uint8_t i = 0; i < 5; i++)
 800382c:	230f      	movs	r3, #15
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <RFID_ValidateCard+0x118>
	{
		sensor->prevSerialNum[i] = serialNum[i];
 8003836:	200f      	movs	r0, #15
 8003838:	183b      	adds	r3, r7, r0
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	183b      	adds	r3, r7, r0
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2108      	movs	r1, #8
 8003842:	1879      	adds	r1, r7, r1
 8003844:	5c89      	ldrb	r1, [r1, r2]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++)
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	183b      	adds	r3, r7, r0
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d9eb      	bls.n	8003836 <RFID_ValidateCard+0xfa>
	}

	return sensor->status;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	795b      	ldrb	r3, [r3, #5]
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b005      	add	sp, #20
 8003868:	bd90      	pop	{r4, r7, pc}
	...

0800386c <RFID_SecurityLogic>:

void RFID_SecurityLogic(rfid* sensor)
{
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	rfid_card_status cardStatus = RFID_ValidateCard(sensor);
 8003874:	250f      	movs	r5, #15
 8003876:	197c      	adds	r4, r7, r5
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f7ff ff5e 	bl	800373c <RFID_ValidateCard>
 8003880:	0003      	movs	r3, r0
 8003882:	7023      	strb	r3, [r4, #0]

	switch (cardStatus) {
 8003884:	197b      	adds	r3, r7, r5
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d05a      	beq.n	8003942 <RFID_SecurityLogic+0xd6>
 800388c:	dc60      	bgt.n	8003950 <RFID_SecurityLogic+0xe4>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <RFID_SecurityLogic+0x2c>
 8003892:	2b01      	cmp	r3, #1
 8003894:	d033      	beq.n	80038fe <RFID_SecurityLogic+0x92>
	        break;

	    // Optional: Default case if no case matches
	    default:
	        // Code to execute if none of the above cases match
	        break;
 8003896:	e05b      	b.n	8003950 <RFID_SecurityLogic+0xe4>
	    	if (sensor->initialSuccessfulCardTap)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	79db      	ldrb	r3, [r3, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d059      	beq.n	8003954 <RFID_SecurityLogic+0xe8>
	    		Speaker_SetAutoReload(&Speaker, 488);
 80038a0:	23f4      	movs	r3, #244	; 0xf4
 80038a2:	005a      	lsls	r2, r3, #1
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <RFID_SecurityLogic+0xfc>)
 80038a6:	0011      	movs	r1, r2
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 f9c3 	bl	8003c34 <Speaker_SetAutoReload>
	    		Speaker_Beep(&Speaker, 150, 0, 1);
 80038ae:	482e      	ldr	r0, [pc, #184]	; (8003968 <RFID_SecurityLogic+0xfc>)
 80038b0:	2301      	movs	r3, #1
 80038b2:	2200      	movs	r2, #0
 80038b4:	2196      	movs	r1, #150	; 0x96
 80038b6:	f000 f8fd 	bl	8003ab4 <Speaker_Beep>
	    		sensor->initialSuccessfulCardTap = false;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	71da      	strb	r2, [r3, #7]
	    		sensor->initialFailedCardTap = true;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	721a      	strb	r2, [r3, #8]
	    		sensor->botEnabled = !sensor->botEnabled;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	799b      	ldrb	r3, [r3, #6]
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	4193      	sbcs	r3, r2
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2201      	movs	r2, #1
 80038d2:	4053      	eors	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	1c1a      	adds	r2, r3, #0
 80038d8:	2301      	movs	r3, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	719a      	strb	r2, [r3, #6]
	    		HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, (GPIO_PinState) !sensor->botEnabled);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	799b      	ldrb	r3, [r3, #6]
 80038e6:	2201      	movs	r2, #1
 80038e8:	4053      	eors	r3, r2
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	001a      	movs	r2, r3
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	0159      	lsls	r1, r3, #5
 80038f2:	23a0      	movs	r3, #160	; 0xa0
 80038f4:	05db      	lsls	r3, r3, #23
 80038f6:	0018      	movs	r0, r3
 80038f8:	f001 f9cb 	bl	8004c92 <HAL_GPIO_WritePin>
	        break;
 80038fc:	e02a      	b.n	8003954 <RFID_SecurityLogic+0xe8>
	    	if (sensor->initialFailedCardTap)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	7a1b      	ldrb	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d028      	beq.n	8003958 <RFID_SecurityLogic+0xec>
	    		HAL_Delay(200);
 8003906:	20c8      	movs	r0, #200	; 0xc8
 8003908:	f000 fdb4 	bl	8004474 <HAL_Delay>
				if (RFID_ValidateCard(sensor) != CARD_FAIL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0018      	movs	r0, r3
 8003910:	f7ff ff14 	bl	800373c <RFID_ValidateCard>
 8003914:	0003      	movs	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d120      	bne.n	800395c <RFID_SecurityLogic+0xf0>
				Speaker_SetAutoReload(&Speaker, 488 * 4);
 800391a:	23f4      	movs	r3, #244	; 0xf4
 800391c:	00da      	lsls	r2, r3, #3
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <RFID_SecurityLogic+0xfc>)
 8003920:	0011      	movs	r1, r2
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f986 	bl	8003c34 <Speaker_SetAutoReload>
				Speaker_Beep(&Speaker, 150, 50, 4);
 8003928:	480f      	ldr	r0, [pc, #60]	; (8003968 <RFID_SecurityLogic+0xfc>)
 800392a:	2304      	movs	r3, #4
 800392c:	2232      	movs	r2, #50	; 0x32
 800392e:	2196      	movs	r1, #150	; 0x96
 8003930:	f000 f8c0 	bl	8003ab4 <Speaker_Beep>
				sensor->initialSuccessfulCardTap = true;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	71da      	strb	r2, [r3, #7]
				sensor->initialFailedCardTap = false;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	721a      	strb	r2, [r3, #8]
	        break;
 8003940:	e00a      	b.n	8003958 <RFID_SecurityLogic+0xec>
	    	sensor->initialSuccessfulCardTap = true;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	71da      	strb	r2, [r3, #7]
	    	sensor->initialFailedCardTap = true;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	721a      	strb	r2, [r3, #8]
	        break;
 800394e:	e006      	b.n	800395e <RFID_SecurityLogic+0xf2>
	        break;
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	e004      	b.n	800395e <RFID_SecurityLogic+0xf2>
	        break;
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	e002      	b.n	800395e <RFID_SecurityLogic+0xf2>
	        break;
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	e000      	b.n	800395e <RFID_SecurityLogic+0xf2>
					break;
 800395c:	46c0      	nop			; (mov r8, r8)
	}

}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bdb0      	pop	{r4, r5, r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000478 	.word	0x20000478

0800396c <Speaker_Init>:

#define CLK_SPEED 32000000
#define DEFAULT_AUTORELOAD 488

void Speaker_Init(speaker* speaker, TIM_HandleTypeDef* timer)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	speaker->timer = timer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	601a      	str	r2, [r3, #0]
	speaker->hasFault = false;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	741a      	strb	r2, [r3, #16]
	speaker->beepLengthOn = 0;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	809a      	strh	r2, [r3, #4]
	speaker->beepLengthPeriod = 0;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	80da      	strh	r2, [r3, #6]
	speaker->wantedNumBeeps = 0;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	721a      	strb	r2, [r3, #8]
	speaker->currentNumBeeps = 0;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	725a      	strb	r2, [r3, #9]
	speaker->timerCounter = 0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	815a      	strh	r2, [r3, #10]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e00b      	b.n	80039c2 <Speaker_Init+0x56>
	{
		speaker->featureFault[i] = false;
 80039aa:	210f      	movs	r1, #15
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	2200      	movs	r2, #0
 80039b6:	731a      	strb	r2, [r3, #12]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	3201      	adds	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	230f      	movs	r3, #15
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d9ee      	bls.n	80039aa <Speaker_Init+0x3e>
	}


}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	000a      	movs	r2, r1
 80039e0:	1cfb      	adds	r3, r7, #3
 80039e2:	701a      	strb	r2, [r3, #0]

	speaker->featureFault[ID] = true;
 80039e4:	1cfb      	adds	r3, r7, #3
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	18d3      	adds	r3, r2, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	731a      	strb	r2, [r3, #12]
	if (speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2] || speaker->featureFault[3])
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7b1b      	ldrb	r3, [r3, #12]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <Speaker_Start+0x42>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7b5b      	ldrb	r3, [r3, #13]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <Speaker_Start+0x42>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7b9b      	ldrb	r3, [r3, #14]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <Speaker_Start+0x42>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7bdb      	ldrb	r3, [r3, #15]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00f      	beq.n	8003a38 <Speaker_Start+0x62>
	{
		speaker->hasFault = true;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	741a      	strb	r2, [r3, #16]
		Speaker_SetAutoReload(speaker, DEFAULT_AUTORELOAD);
 8003a1e:	23f4      	movs	r3, #244	; 0xf4
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f000 f904 	bl	8003c34 <Speaker_SetAutoReload>
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2100      	movs	r1, #0
 8003a32:	0018      	movs	r0, r3
 8003a34:	f003 fbee 	bl	8007214 <HAL_TIM_PWM_Start>
	}

}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	000a      	movs	r2, r1
 8003a4a:	1cfb      	adds	r3, r7, #3
 8003a4c:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 8003a4e:	1cfb      	adds	r3, r7, #3
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	731a      	strb	r2, [r3, #12]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2] || speaker->featureFault[3]))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7b1b      	ldrb	r3, [r3, #12]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2201      	movs	r2, #1
 8003a62:	4053      	eors	r3, r2
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <Speaker_Stop+0x6c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7b5b      	ldrb	r3, [r3, #13]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2201      	movs	r2, #1
 8003a72:	4053      	eors	r3, r2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <Speaker_Stop+0x6c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7b9b      	ldrb	r3, [r3, #14]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2201      	movs	r2, #1
 8003a82:	4053      	eors	r3, r2
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d010      	beq.n	8003aac <Speaker_Stop+0x6c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7bdb      	ldrb	r3, [r3, #15]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2201      	movs	r2, #1
 8003a92:	4053      	eors	r3, r2
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <Speaker_Stop+0x6c>
	{
		speaker->hasFault = false;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	741a      	strb	r2, [r3, #16]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f003 fc40 	bl	800732c <HAL_TIM_PWM_Stop>
	}
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <Speaker_Beep>:



bool Speaker_Beep(speaker* speaker, uint16_t length_on_ms, uint16_t length_off_ms, uint8_t numBeeps)
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	000c      	movs	r4, r1
 8003abe:	0010      	movs	r0, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	1c22      	adds	r2, r4, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	2308      	movs	r3, #8
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	1c02      	adds	r2, r0, #0
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	1c0a      	adds	r2, r1, #0
 8003ad6:	701a      	strb	r2, [r3, #0]

	if (speaker->hasFault)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	7c1b      	ldrb	r3, [r3, #16]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <Speaker_Beep+0x32>
		return false;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e046      	b.n	8003b74 <Speaker_Beep+0xc0>


	speaker->timerCounter = 0;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	815a      	strh	r2, [r3, #10]
	speaker->currentNumBeeps = 0;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	725a      	strb	r2, [r3, #9]



	speaker->beepLengthOn = length_on_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 8003af2:	230a      	movs	r3, #10
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	0013      	movs	r3, r2
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	001a      	movs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f7fc fb15 	bl	8000140 <__udivsi3>
 8003b16:	0003      	movs	r3, r0
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	809a      	strh	r2, [r3, #4]
	speaker->beepLengthPeriod =speaker->beepLengthOn + length_off_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	889b      	ldrh	r3, [r3, #4]
 8003b22:	b29c      	uxth	r4, r3
 8003b24:	2308      	movs	r3, #8
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	001a      	movs	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	0019      	movs	r1, r3
 8003b42:	0010      	movs	r0, r2
 8003b44:	f7fc fafc 	bl	8000140 <__udivsi3>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	18e3      	adds	r3, r4, r3
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	80da      	strh	r2, [r3, #6]
	speaker->wantedNumBeeps = numBeeps;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1dfa      	adds	r2, r7, #7
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	721a      	strb	r2, [r3, #8]

	//speaker->beepLength = length_ms * CLK_SPEED / (speaker->timer->Instance->PSC);

	HAL_TIM_Base_Start_IT(speaker->timer);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f003 fa9d 	bl	80070a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f003 fb51 	bl	8007214 <HAL_TIM_PWM_Start>
	return true;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b005      	add	sp, #20
 8003b7a:	bd90      	pop	{r4, r7, pc}

08003b7c <Speaker_BeepInterrupt>:
	return ((HAL_TIM_Base_GetState(speaker->timer) == HAL_TIM_STATE_BUSY) ? true : false);
}
*/

void Speaker_BeepInterrupt(speaker* speaker)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a5b      	ldrb	r3, [r3, #9]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7a1b      	ldrb	r3, [r3, #8]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d240      	bcs.n	8003c16 <Speaker_BeepInterrupt+0x9a>
    {

        if (speaker->timerCounter == speaker->beepLengthOn)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	895b      	ldrh	r3, [r3, #10]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	889b      	ldrh	r3, [r3, #4]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d110      	bne.n	8003bc6 <Speaker_BeepInterrupt+0x4a>
        {
            HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	0018      	movs	r0, r3
 8003bac:	f003 fbbe 	bl	800732c <HAL_TIM_PWM_Stop>
            __HAL_TIM_ENABLE(speaker->timer);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e01f      	b.n	8003c06 <Speaker_BeepInterrupt+0x8a>
        	//__NOP();
        }
        else if (speaker->timerCounter >= speaker->beepLengthPeriod)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	895b      	ldrh	r3, [r3, #10]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	88db      	ldrh	r3, [r3, #6]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d317      	bcc.n	8003c06 <Speaker_BeepInterrupt+0x8a>
        {
        	speaker->currentNumBeeps++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7a5b      	ldrb	r3, [r3, #9]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	725a      	strb	r2, [r3, #9]
			speaker->timerCounter = 0;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	815a      	strh	r2, [r3, #10]

            if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7a5b      	ldrb	r3, [r3, #9]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7a1b      	ldrb	r3, [r3, #8]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d205      	bcs.n	8003c06 <Speaker_BeepInterrupt+0x8a>
            {
                HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	0018      	movs	r0, r3
 8003c02:	f003 fb07 	bl	8007214 <HAL_TIM_PWM_Start>

            	//__NOP();
            }

        }
        speaker->timerCounter++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	895b      	ldrh	r3, [r3, #10]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	815a      	strh	r2, [r3, #10]
    else
    {
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
        HAL_TIM_Base_Stop_IT(speaker->timer);
    }
}
 8003c14:	e00a      	b.n	8003c2c <Speaker_BeepInterrupt+0xb0>
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f003 fb85 	bl	800732c <HAL_TIM_PWM_Stop>
        HAL_TIM_Base_Stop_IT(speaker->timer);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f003 fa86 	bl	8007138 <HAL_TIM_Base_Stop_IT>
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <Speaker_SetAutoReload>:

void Speaker_SetAutoReload(speaker* speaker, uint16_t value)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	000a      	movs	r2, r1
 8003c3e:	1cbb      	adds	r3, r7, #2
 8003c40:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(speaker->timer, value);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1cba      	adds	r2, r7, #2
 8003c4a:	8812      	ldrh	r2, [r2, #0]
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1cba      	adds	r2, r7, #2
 8003c54:	8812      	ldrh	r2, [r2, #0]
 8003c56:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(speaker->timer, TIM_CHANNEL_1, value / 2);
 8003c58:	1cbb      	adds	r3, r7, #2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c74:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_MspInit+0x24>)
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_MspInit+0x24>)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <HAL_MspInit+0x24>)
 8003c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_MspInit+0x24>)
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	0549      	lsls	r1, r1, #21
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	240c      	movs	r4, #12
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	2314      	movs	r3, #20
 8003ca8:	001a      	movs	r2, r3
 8003caa:	2100      	movs	r1, #0
 8003cac:	f005 fd52 	bl	8009754 <memset>
  if(hi2c->Instance==I2C1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a31      	ldr	r2, [pc, #196]	; (8003d7c <HAL_I2C_MspInit+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d15c      	bne.n	8003d74 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_I2C_MspInit+0xe8>)
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_I2C_MspInit+0xe8>)
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_I2C_MspInit+0xe8>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	2202      	movs	r2, #2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cd2:	0021      	movs	r1, r4
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	22c0      	movs	r2, #192	; 0xc0
 8003cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	2212      	movs	r2, #18
 8003cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <HAL_I2C_MspInit+0xec>)
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	f000 fe37 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_I2C_MspInit+0xe8>)
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_I2C_MspInit+0xe8>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0389      	lsls	r1, r1, #14
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_I2C_MspInit+0xf4>)
 8003d10:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003d12:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d14:	2206      	movs	r2, #6
 8003d16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	0052      	lsls	r2, r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	00d2      	lsls	r2, r2, #3
 8003d38:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	0192      	lsls	r2, r2, #6
 8003d46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fc94 	bl	8004678 <HAL_DMA_Init>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8003d54:	f7ff fa3c 	bl	80031d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_I2C_MspInit+0xf0>)
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	2017      	movs	r0, #23
 8003d6a:	f000 fc53 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003d6e:	2017      	movs	r0, #23
 8003d70:	f000 fc65 	bl	800463e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b009      	add	sp, #36	; 0x24
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	40005400 	.word	0x40005400
 8003d80:	40021000 	.word	0x40021000
 8003d84:	50000400 	.word	0x50000400
 8003d88:	20000244 	.word	0x20000244
 8003d8c:	40020030 	.word	0x40020030

08003d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	240c      	movs	r4, #12
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	2314      	movs	r3, #20
 8003da0:	001a      	movs	r2, r3
 8003da2:	2100      	movs	r1, #0
 8003da4:	f005 fcd6 	bl	8009754 <memset>
  if(hspi->Instance==SPI1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_SPI_MspInit+0x80>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d129      	bne.n	8003e06 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_SPI_MspInit+0x84>)
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_SPI_MspInit+0x84>)
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	0149      	lsls	r1, r1, #5
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_SPI_MspInit+0x84>)
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_SPI_MspInit+0x84>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_SPI_MspInit+0x84>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003dd8:	0021      	movs	r1, r4
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	22e0      	movs	r2, #224	; 0xe0
 8003dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2202      	movs	r2, #2
 8003de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2203      	movs	r2, #3
 8003df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df8:	187a      	adds	r2, r7, r1
 8003dfa:	23a0      	movs	r3, #160	; 0xa0
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	0011      	movs	r1, r2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 fdb3 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b009      	add	sp, #36	; 0x24
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	40013000 	.word	0x40013000
 8003e14:	40021000 	.word	0x40021000

08003e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	2314      	movs	r3, #20
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	0018      	movs	r0, r3
 8003e26:	2314      	movs	r3, #20
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f005 fc92 	bl	8009754 <memset>
  if(htim_base->Instance==TIM2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	05db      	lsls	r3, r3, #23
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10e      	bne.n	8003e5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e40:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	200f      	movs	r0, #15
 8003e4e:	f000 fbe1 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e52:	200f      	movs	r0, #15
 8003e54:	f000 fbf3 	bl	800463e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003e58:	e06b      	b.n	8003f32 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM21)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_TIM_Base_MspInit+0x128>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d131      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e70:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	2201      	movs	r2, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8003e88:	2114      	movs	r1, #20
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2202      	movs	r2, #2
 8003e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	187a      	adds	r2, r7, r1
 8003eaa:	23a0      	movs	r3, #160	; 0xa0
 8003eac:	05db      	lsls	r3, r3, #23
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 fd5b 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2014      	movs	r0, #20
 8003ebc:	f000 fbaa 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003ec0:	2014      	movs	r0, #20
 8003ec2:	f000 fbbc 	bl	800463e <HAL_NVIC_EnableIRQ>
}
 8003ec6:	e034      	b.n	8003f32 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM22)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIM_Base_MspInit+0x12c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d12f      	bne.n	8003f32 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003ed8:	2120      	movs	r1, #32
 8003eda:	430a      	orrs	r2, r1
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ede:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <HAL_TIM_Base_MspInit+0x124>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003ef6:	2114      	movs	r1, #20
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2210      	movs	r2, #16
 8003efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	2202      	movs	r2, #2
 8003f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	2204      	movs	r2, #4
 8003f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003f16:	187b      	adds	r3, r7, r1
 8003f18:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_TIM_Base_MspInit+0x130>)
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	f000 fd25 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	2016      	movs	r0, #22
 8003f28:	f000 fb74 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003f2c:	2016      	movs	r0, #22
 8003f2e:	f000 fb86 	bl	800463e <HAL_NVIC_EnableIRQ>
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b00a      	add	sp, #40	; 0x28
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010800 	.word	0x40010800
 8003f44:	40011400 	.word	0x40011400
 8003f48:	50000400 	.word	0x50000400

08003f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	2414      	movs	r4, #20
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	0018      	movs	r0, r3
 8003f5a:	2314      	movs	r3, #20
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	2100      	movs	r1, #0
 8003f60:	f005 fbf8 	bl	8009754 <memset>
  if(htim->Instance==TIM2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	05db      	lsls	r3, r3, #23
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d123      	bne.n	8003fb8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003f76:	2101      	movs	r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f7c:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8003f88:	0021      	movs	r1, r4
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2202      	movs	r2, #2
 8003f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	187a      	adds	r2, r7, r1
 8003faa:	23a0      	movs	r3, #160	; 0xa0
 8003fac:	05db      	lsls	r3, r3, #23
 8003fae:	0011      	movs	r1, r2
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 fcdb 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8003fb6:	e04f      	b.n	8004058 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM21)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	; (8004064 <HAL_TIM_MspPostInit+0x118>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d123      	bne.n	800400a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 8003fda:	2114      	movs	r1, #20
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2208      	movs	r2, #8
 8003fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003ffa:	187a      	adds	r2, r7, r1
 8003ffc:	23a0      	movs	r3, #160	; 0xa0
 8003ffe:	05db      	lsls	r3, r3, #23
 8004000:	0011      	movs	r1, r2
 8004002:	0018      	movs	r0, r3
 8004004:	f000 fcb2 	bl	800496c <HAL_GPIO_Init>
}
 8004008:	e026      	b.n	8004058 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM22)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_TIM_MspPostInit+0x11c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d121      	bne.n	8004058 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 800401a:	2102      	movs	r1, #2
 800401c:	430a      	orrs	r2, r1
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_TIM_MspPostInit+0x114>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	2202      	movs	r2, #2
 8004026:	4013      	ands	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 800402c:	2114      	movs	r1, #20
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2220      	movs	r2, #32
 8004032:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	187b      	adds	r3, r7, r1
 8004036:	2202      	movs	r2, #2
 8004038:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004040:	187b      	adds	r3, r7, r1
 8004042:	2201      	movs	r2, #1
 8004044:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8004046:	187b      	adds	r3, r7, r1
 8004048:	2204      	movs	r2, #4
 800404a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 800404c:	187b      	adds	r3, r7, r1
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_TIM_MspPostInit+0x120>)
 8004050:	0019      	movs	r1, r3
 8004052:	0010      	movs	r0, r2
 8004054:	f000 fc8a 	bl	800496c <HAL_GPIO_Init>
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b00b      	add	sp, #44	; 0x2c
 800405e:	bd90      	pop	{r4, r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	40010800 	.word	0x40010800
 8004068:	40011400 	.word	0x40011400
 800406c:	50000400 	.word	0x50000400

08004070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	240c      	movs	r4, #12
 800407a:	193b      	adds	r3, r7, r4
 800407c:	0018      	movs	r0, r3
 800407e:	2314      	movs	r3, #20
 8004080:	001a      	movs	r2, r3
 8004082:	2100      	movs	r1, #0
 8004084:	f005 fb66 	bl	8009754 <memset>
  if(huart->Instance==USART1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_UART_MspInit+0x80>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d12a      	bne.n	80040e8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_UART_MspInit+0x84>)
 8004094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_UART_MspInit+0x84>)
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	01c9      	lsls	r1, r1, #7
 800409c:	430a      	orrs	r2, r1
 800409e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_UART_MspInit+0x84>)
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_UART_MspInit+0x84>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	430a      	orrs	r2, r1
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_UART_MspInit+0x84>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	22c0      	movs	r2, #192	; 0xc0
 80040bc:	00d2      	lsls	r2, r2, #3
 80040be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	0021      	movs	r1, r4
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	2202      	movs	r2, #2
 80040c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	2203      	movs	r2, #3
 80040d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	2204      	movs	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040da:	187a      	adds	r2, r7, r1
 80040dc:	23a0      	movs	r3, #160	; 0xa0
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fc42 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b009      	add	sp, #36	; 0x24
 80040ee:	bd90      	pop	{r4, r7, pc}
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000

080040f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040fc:	e7fe      	b.n	80040fc <NMI_Handler+0x4>

080040fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004102:	e7fe      	b.n	8004102 <HardFault_Handler+0x4>

08004104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800411c:	f000 f98e 	bl	800443c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <DMA1_Channel2_3_IRQHandler+0x14>)
 800412e:	0018      	movs	r0, r3
 8004130:	f000 fb61 	bl	80047f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000244 	.word	0x20000244

08004140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <TIM2_IRQHandler+0x14>)
 8004146:	0018      	movs	r0, r3
 8004148:	f003 f976 	bl	8007438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	200002e4 	.word	0x200002e4

08004158 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <TIM21_IRQHandler+0x14>)
 800415e:	0018      	movs	r0, r3
 8004160:	f003 f96a 	bl	8007438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	20000324 	.word	0x20000324

08004170 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <TIM22_IRQHandler+0x14>)
 8004176:	0018      	movs	r0, r3
 8004178:	f003 f95e 	bl	8007438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000364 	.word	0x20000364

08004188 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <I2C1_IRQHandler+0x2c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	23e0      	movs	r3, #224	; 0xe0
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4013      	ands	r3, r2
 8004198:	d004      	beq.n	80041a4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <I2C1_IRQHandler+0x2c>)
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fe45 	bl	8004e2c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80041a2:	e003      	b.n	80041ac <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <I2C1_IRQHandler+0x2c>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fe26 	bl	8004df8 <HAL_I2C_EV_IRQHandler>
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	200001f0 	.word	0x200001f0

080041b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_kill>:

int _kill(int pid, int sig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ce:	f005 fb1b 	bl	8009808 <__errno>
 80041d2:	0003      	movs	r3, r0
 80041d4:	2216      	movs	r2, #22
 80041d6:	601a      	str	r2, [r3, #0]
  return -1;
 80041d8:	2301      	movs	r3, #1
 80041da:	425b      	negs	r3, r3
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_exit>:

void _exit (int status)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ec:	2301      	movs	r3, #1
 80041ee:	425a      	negs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff ffe5 	bl	80041c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041fa:	e7fe      	b.n	80041fa <_exit+0x16>

080041fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00a      	b.n	8004224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800420e:	e000      	b.n	8004212 <_read+0x16>
 8004210:	bf00      	nop
 8004212:	0001      	movs	r1, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	60ba      	str	r2, [r7, #8]
 800421a:	b2ca      	uxtb	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	dbf0      	blt.n	800420e <_read+0x12>
  }

  return len;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b006      	add	sp, #24
 8004234:	bd80      	pop	{r7, pc}

08004236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e009      	b.n	800425c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	0018      	movs	r0, r3
 8004252:	e000      	b.n	8004256 <_write+0x20>
 8004254:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	3301      	adds	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	dbf1      	blt.n	8004248 <_write+0x12>
  }
  return len;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}

0800426e <_close>:

int _close(int file)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004276:	2301      	movs	r3, #1
 8004278:	425b      	negs	r3, r3
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}

08004282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	0192      	lsls	r2, r2, #6
 8004292:	605a      	str	r2, [r3, #4]
  return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}

0800429e <_isatty>:

int _isatty(int file)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042a6:	2301      	movs	r3, #1
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f005 fa86 	bl	8009808 <__errno>
 80042fc:	0003      	movs	r3, r0
 80042fe:	220c      	movs	r2, #12
 8004300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004302:	2301      	movs	r3, #1
 8004304:	425b      	negs	r3, r3
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	18d2      	adds	r2, r2, r3
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <_sbrk+0x64>)
 8004318:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b006      	add	sp, #24
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20002000 	.word	0x20002000
 8004328:	00000400 	.word	0x00000400
 800432c:	2000048c 	.word	0x2000048c
 8004330:	200005e0 	.word	0x200005e0

08004334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004342:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004344:	f7ff fff6 	bl	8004334 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <LoopForever+0x6>)
  ldr r1, =_edata
 800434a:	490d      	ldr	r1, [pc, #52]	; (8004380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <LoopForever+0xe>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004350:	e002      	b.n	8004358 <LoopCopyDataInit>

08004352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004356:	3304      	adds	r3, #4

08004358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800435c:	d3f9      	bcc.n	8004352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004360:	4c0a      	ldr	r4, [pc, #40]	; (800438c <LoopForever+0x16>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004364:	e001      	b.n	800436a <LoopFillZerobss>

08004366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004368:	3204      	adds	r2, #4

0800436a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800436c:	d3fb      	bcc.n	8004366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800436e:	f005 fa51 	bl	8009814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004372:	f7fe fb75 	bl	8002a60 <main>

08004376 <LoopForever>:

LoopForever:
    b LoopForever
 8004376:	e7fe      	b.n	8004376 <LoopForever>
   ldr   r0, =_estack
 8004378:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800437c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004380:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004384:	0800bbdc 	.word	0x0800bbdc
  ldr r2, =_sbss
 8004388:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800438c:	200005e0 	.word	0x200005e0

08004390 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004390:	e7fe      	b.n	8004390 <ADC1_COMP_IRQHandler>
	...

08004394 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800439a:	1dfb      	adds	r3, r7, #7
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_Init+0x3c>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_Init+0x3c>)
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043ac:	2003      	movs	r0, #3
 80043ae:	f000 f811 	bl	80043d4 <HAL_InitTick>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d003      	beq.n	80043be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e001      	b.n	80043c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043be:	f7ff fc57 	bl	8003c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b002      	add	sp, #8
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40022000 	.word	0x40022000

080043d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_InitTick+0x5c>)
 80043de:	681c      	ldr	r4, [r3, #0]
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_InitTick+0x60>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	0019      	movs	r1, r3
 80043e6:	23fa      	movs	r3, #250	; 0xfa
 80043e8:	0098      	lsls	r0, r3, #2
 80043ea:	f7fb fea9 	bl	8000140 <__udivsi3>
 80043ee:	0003      	movs	r3, r0
 80043f0:	0019      	movs	r1, r3
 80043f2:	0020      	movs	r0, r4
 80043f4:	f7fb fea4 	bl	8000140 <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 f92f 	bl	800465e <HAL_SYSTICK_Config>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e00f      	b.n	8004428 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d80b      	bhi.n	8004426 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	2301      	movs	r3, #1
 8004412:	425b      	negs	r3, r3
 8004414:	2200      	movs	r2, #0
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f8fc 	bl	8004614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_InitTick+0x64>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b003      	add	sp, #12
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	20000000 	.word	0x20000000
 8004434:	20000008 	.word	0x20000008
 8004438:	20000004 	.word	0x20000004

0800443c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_IncTick+0x1c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	001a      	movs	r2, r3
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_IncTick+0x20>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	18d2      	adds	r2, r2, r3
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_IncTick+0x20>)
 800444e:	601a      	str	r2, [r3, #0]
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	20000008 	.word	0x20000008
 800445c:	20000490 	.word	0x20000490

08004460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <HAL_GetTick+0x10>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20000490 	.word	0x20000490

08004474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff fff0 	bl	8004460 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	d005      	beq.n	800449a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_Delay+0x44>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	001a      	movs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	189b      	adds	r3, r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	f7ff ffe0 	bl	8004460 <HAL_GetTick>
 80044a0:	0002      	movs	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f7      	bhi.n	800449c <HAL_Delay+0x28>
  {
  }
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000008 	.word	0x20000008

080044bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	0002      	movs	r2, r0
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044c8:	1dfb      	adds	r3, r7, #7
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b7f      	cmp	r3, #127	; 0x7f
 80044ce:	d809      	bhi.n	80044e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	001a      	movs	r2, r3
 80044d6:	231f      	movs	r3, #31
 80044d8:	401a      	ands	r2, r3
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__NVIC_EnableIRQ+0x30>)
 80044dc:	2101      	movs	r1, #1
 80044de:	4091      	lsls	r1, r2
 80044e0:	000a      	movs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
  }
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b7f      	cmp	r3, #127	; 0x7f
 8004504:	d828      	bhi.n	8004558 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004506:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <__NVIC_SetPriority+0xd4>)
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b25b      	sxtb	r3, r3
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	33c0      	adds	r3, #192	; 0xc0
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	589b      	ldr	r3, [r3, r2]
 8004516:	1dfa      	adds	r2, r7, #7
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	0011      	movs	r1, r2
 800451c:	2203      	movs	r2, #3
 800451e:	400a      	ands	r2, r1
 8004520:	00d2      	lsls	r2, r2, #3
 8004522:	21ff      	movs	r1, #255	; 0xff
 8004524:	4091      	lsls	r1, r2
 8004526:	000a      	movs	r2, r1
 8004528:	43d2      	mvns	r2, r2
 800452a:	401a      	ands	r2, r3
 800452c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	22ff      	movs	r2, #255	; 0xff
 8004534:	401a      	ands	r2, r3
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	0018      	movs	r0, r3
 800453c:	2303      	movs	r3, #3
 800453e:	4003      	ands	r3, r0
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004544:	481f      	ldr	r0, [pc, #124]	; (80045c4 <__NVIC_SetPriority+0xd4>)
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b25b      	sxtb	r3, r3
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	430a      	orrs	r2, r1
 8004550:	33c0      	adds	r3, #192	; 0xc0
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004556:	e031      	b.n	80045bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004558:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <__NVIC_SetPriority+0xd8>)
 800455a:	1dfb      	adds	r3, r7, #7
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	0019      	movs	r1, r3
 8004560:	230f      	movs	r3, #15
 8004562:	400b      	ands	r3, r1
 8004564:	3b08      	subs	r3, #8
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	3306      	adds	r3, #6
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	18d3      	adds	r3, r2, r3
 800456e:	3304      	adds	r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	1dfa      	adds	r2, r7, #7
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	0011      	movs	r1, r2
 8004578:	2203      	movs	r2, #3
 800457a:	400a      	ands	r2, r1
 800457c:	00d2      	lsls	r2, r2, #3
 800457e:	21ff      	movs	r1, #255	; 0xff
 8004580:	4091      	lsls	r1, r2
 8004582:	000a      	movs	r2, r1
 8004584:	43d2      	mvns	r2, r2
 8004586:	401a      	ands	r2, r3
 8004588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	22ff      	movs	r2, #255	; 0xff
 8004590:	401a      	ands	r2, r3
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	0018      	movs	r0, r3
 8004598:	2303      	movs	r3, #3
 800459a:	4003      	ands	r3, r0
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045a0:	4809      	ldr	r0, [pc, #36]	; (80045c8 <__NVIC_SetPriority+0xd8>)
 80045a2:	1dfb      	adds	r3, r7, #7
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	001c      	movs	r4, r3
 80045a8:	230f      	movs	r3, #15
 80045aa:	4023      	ands	r3, r4
 80045ac:	3b08      	subs	r3, #8
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	430a      	orrs	r2, r1
 80045b2:	3306      	adds	r3, #6
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18c3      	adds	r3, r0, r3
 80045b8:	3304      	adds	r3, #4
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b003      	add	sp, #12
 80045c2:	bd90      	pop	{r4, r7, pc}
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	045b      	lsls	r3, r3, #17
 80045dc:	429a      	cmp	r2, r3
 80045de:	d301      	bcc.n	80045e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e0:	2301      	movs	r3, #1
 80045e2:	e010      	b.n	8004606 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <SysTick_Config+0x44>)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ec:	2301      	movs	r3, #1
 80045ee:	425b      	negs	r3, r3
 80045f0:	2103      	movs	r1, #3
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7ff ff7c 	bl	80044f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <SysTick_Config+0x44>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <SysTick_Config+0x44>)
 8004600:	2207      	movs	r2, #7
 8004602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004604:	2300      	movs	r3, #0
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	e000e010 	.word	0xe000e010

08004614 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	210f      	movs	r1, #15
 8004620:	187b      	adds	r3, r7, r1
 8004622:	1c02      	adds	r2, r0, #0
 8004624:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	187b      	adds	r3, r7, r1
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b25b      	sxtb	r3, r3
 800462e:	0011      	movs	r1, r2
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff ff5d 	bl	80044f0 <__NVIC_SetPriority>
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	0002      	movs	r2, r0
 8004646:	1dfb      	adds	r3, r7, #7
 8004648:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b25b      	sxtb	r3, r3
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff ff33 	bl	80044bc <__NVIC_EnableIRQ>
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b002      	add	sp, #8
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff ffaf 	bl	80045cc <SysTick_Config>
 800466e:	0003      	movs	r3, r0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e061      	b.n	800474e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a32      	ldr	r2, [pc, #200]	; (8004758 <HAL_DMA_Init+0xe0>)
 8004690:	4694      	mov	ip, r2
 8004692:	4463      	add	r3, ip
 8004694:	2114      	movs	r1, #20
 8004696:	0018      	movs	r0, r3
 8004698:	f7fb fd52 	bl	8000140 <__udivsi3>
 800469c:	0003      	movs	r3, r0
 800469e:	009a      	lsls	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2d      	ldr	r2, [pc, #180]	; (800475c <HAL_DMA_Init+0xe4>)
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2225      	movs	r2, #37	; 0x25
 80046ae:	2102      	movs	r1, #2
 80046b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_DMA_Init+0xe8>)
 80046be:	4013      	ands	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	01db      	lsls	r3, r3, #7
 8004700:	429a      	cmp	r2, r3
 8004702:	d018      	beq.n	8004736 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <HAL_DMA_Init+0xec>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	211c      	movs	r1, #28
 800470e:	400b      	ands	r3, r1
 8004710:	210f      	movs	r1, #15
 8004712:	4099      	lsls	r1, r3
 8004714:	000b      	movs	r3, r1
 8004716:	43d9      	mvns	r1, r3
 8004718:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_DMA_Init+0xec>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_DMA_Init+0xec>)
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	201c      	movs	r0, #28
 800472c:	4003      	ands	r3, r0
 800472e:	409a      	lsls	r2, r3
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_DMA_Init+0xec>)
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2225      	movs	r2, #37	; 0x25
 8004740:	2101      	movs	r1, #1
 8004742:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	2100      	movs	r1, #0
 800474a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	bffdfff8 	.word	0xbffdfff8
 800475c:	40020000 	.word	0x40020000
 8004760:	ffff800f 	.word	0xffff800f
 8004764:	400200a8 	.word	0x400200a8

08004768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004770:	210f      	movs	r1, #15
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2225      	movs	r2, #37	; 0x25
 800477c:	5c9b      	ldrb	r3, [r3, r2]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d006      	beq.n	8004792 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2204      	movs	r2, #4
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800478a:	187b      	adds	r3, r7, r1
 800478c:	2201      	movs	r2, #1
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e02a      	b.n	80047e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	210e      	movs	r1, #14
 800479e:	438a      	bics	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	438a      	bics	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	221c      	movs	r2, #28
 80047b8:	401a      	ands	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2101      	movs	r1, #1
 80047c0:	4091      	lsls	r1, r2
 80047c2:	000a      	movs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2225      	movs	r2, #37	; 0x25
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2224      	movs	r2, #36	; 0x24
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	0010      	movs	r0, r2
 80047e6:	4798      	blx	r3
    }
  }
  return status;
 80047e8:	230f      	movs	r3, #15
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	781b      	ldrb	r3, [r3, #0]
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b004      	add	sp, #16
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	221c      	movs	r2, #28
 8004814:	4013      	ands	r3, r2
 8004816:	2204      	movs	r2, #4
 8004818:	409a      	lsls	r2, r3
 800481a:	0013      	movs	r3, r2
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	d026      	beq.n	8004870 <HAL_DMA_IRQHandler+0x7a>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2204      	movs	r2, #4
 8004826:	4013      	ands	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	4013      	ands	r3, r2
 8004834:	d107      	bne.n	8004846 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2104      	movs	r1, #4
 8004842:	438a      	bics	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	221c      	movs	r2, #28
 800484c:	401a      	ands	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2104      	movs	r1, #4
 8004854:	4091      	lsls	r1, r2
 8004856:	000a      	movs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	2b00      	cmp	r3, #0
 8004860:	d100      	bne.n	8004864 <HAL_DMA_IRQHandler+0x6e>
 8004862:	e071      	b.n	8004948 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	0010      	movs	r0, r2
 800486c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800486e:	e06b      	b.n	8004948 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	221c      	movs	r2, #28
 8004876:	4013      	ands	r3, r2
 8004878:	2202      	movs	r2, #2
 800487a:	409a      	lsls	r2, r3
 800487c:	0013      	movs	r3, r2
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4013      	ands	r3, r2
 8004882:	d02d      	beq.n	80048e0 <HAL_DMA_IRQHandler+0xea>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2202      	movs	r2, #2
 8004888:	4013      	ands	r3, r2
 800488a:	d029      	beq.n	80048e0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2220      	movs	r2, #32
 8004894:	4013      	ands	r3, r2
 8004896:	d10b      	bne.n	80048b0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	210a      	movs	r1, #10
 80048a4:	438a      	bics	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2225      	movs	r2, #37	; 0x25
 80048ac:	2101      	movs	r1, #1
 80048ae:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	221c      	movs	r2, #28
 80048b6:	401a      	ands	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2102      	movs	r1, #2
 80048be:	4091      	lsls	r1, r2
 80048c0:	000a      	movs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	2100      	movs	r1, #0
 80048ca:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d039      	beq.n	8004948 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	0010      	movs	r0, r2
 80048dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048de:	e033      	b.n	8004948 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	221c      	movs	r2, #28
 80048e6:	4013      	ands	r3, r2
 80048e8:	2208      	movs	r2, #8
 80048ea:	409a      	lsls	r2, r3
 80048ec:	0013      	movs	r3, r2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4013      	ands	r3, r2
 80048f2:	d02a      	beq.n	800494a <HAL_DMA_IRQHandler+0x154>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2208      	movs	r2, #8
 80048f8:	4013      	ands	r3, r2
 80048fa:	d026      	beq.n	800494a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	210e      	movs	r1, #14
 8004908:	438a      	bics	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	221c      	movs	r2, #28
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2101      	movs	r1, #1
 800491a:	4091      	lsls	r1, r2
 800491c:	000a      	movs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2225      	movs	r2, #37	; 0x25
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2224      	movs	r2, #36	; 0x24
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	0010      	movs	r0, r2
 8004946:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46c0      	nop			; (mov r8, r8)
}
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2225      	movs	r2, #37	; 0x25
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	b2db      	uxtb	r3, r3
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004982:	e14f      	b.n	8004c24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2101      	movs	r1, #1
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4091      	lsls	r1, r2
 800498e:	000a      	movs	r2, r1
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d100      	bne.n	800499c <HAL_GPIO_Init+0x30>
 800499a:	e140      	b.n	8004c1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d005      	beq.n	80049b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2203      	movs	r2, #3
 80049ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d130      	bne.n	8004a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2203      	movs	r2, #3
 80049c0:	409a      	lsls	r2, r3
 80049c2:	0013      	movs	r3, r2
 80049c4:	43da      	mvns	r2, r3
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	0013      	movs	r3, r2
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ea:	2201      	movs	r2, #1
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	409a      	lsls	r2, r3
 80049f0:	0013      	movs	r3, r2
 80049f2:	43da      	mvns	r2, r3
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	2201      	movs	r2, #1
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	409a      	lsls	r2, r3
 8004a08:	0013      	movs	r3, r2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d017      	beq.n	8004a52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	0013      	movs	r3, r2
 8004a32:	43da      	mvns	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	409a      	lsls	r2, r3
 8004a44:	0013      	movs	r3, r2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2203      	movs	r2, #3
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d123      	bne.n	8004aa6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	08da      	lsrs	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3208      	adds	r2, #8
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	58d3      	ldr	r3, [r2, r3]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2207      	movs	r2, #7
 8004a70:	4013      	ands	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	409a      	lsls	r2, r3
 8004a78:	0013      	movs	r3, r2
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2107      	movs	r1, #7
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	0013      	movs	r3, r2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	08da      	lsrs	r2, r3, #3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3208      	adds	r2, #8
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	6939      	ldr	r1, [r7, #16]
 8004aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	0013      	movs	r3, r2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	23c0      	movs	r3, #192	; 0xc0
 8004ae0:	029b      	lsls	r3, r3, #10
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d100      	bne.n	8004ae8 <HAL_GPIO_Init+0x17c>
 8004ae6:	e09a      	b.n	8004c1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae8:	4b54      	ldr	r3, [pc, #336]	; (8004c3c <HAL_GPIO_Init+0x2d0>)
 8004aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_GPIO_Init+0x2d0>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	430a      	orrs	r2, r1
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af4:	4a52      	ldr	r2, [pc, #328]	; (8004c40 <HAL_GPIO_Init+0x2d4>)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	589b      	ldr	r3, [r3, r2]
 8004b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2203      	movs	r2, #3
 8004b06:	4013      	ands	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	220f      	movs	r2, #15
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	0013      	movs	r3, r2
 8004b10:	43da      	mvns	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	23a0      	movs	r3, #160	; 0xa0
 8004b1c:	05db      	lsls	r3, r3, #23
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d019      	beq.n	8004b56 <HAL_GPIO_Init+0x1ea>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a47      	ldr	r2, [pc, #284]	; (8004c44 <HAL_GPIO_Init+0x2d8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_GPIO_Init+0x1e6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a46      	ldr	r2, [pc, #280]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00d      	beq.n	8004b4e <HAL_GPIO_Init+0x1e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a45      	ldr	r2, [pc, #276]	; (8004c4c <HAL_GPIO_Init+0x2e0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <HAL_GPIO_Init+0x1de>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a44      	ldr	r2, [pc, #272]	; (8004c50 <HAL_GPIO_Init+0x2e4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_GPIO_Init+0x1da>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e008      	b.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b46:	2306      	movs	r3, #6
 8004b48:	e006      	b.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e004      	b.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e002      	b.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b56:	2300      	movs	r3, #0
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	2103      	movs	r1, #3
 8004b5c:	400a      	ands	r2, r1
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	4093      	lsls	r3, r2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b68:	4935      	ldr	r1, [pc, #212]	; (8004c40 <HAL_GPIO_Init+0x2d4>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	3302      	adds	r3, #2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b76:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	035b      	lsls	r3, r3, #13
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	039b      	lsls	r3, r3, #14
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	4013      	ands	r3, r2
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004bee:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	025b      	lsls	r3, r3, #9
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3301      	adds	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	40da      	lsrs	r2, r3
 8004c2c:	1e13      	subs	r3, r2, #0
 8004c2e:	d000      	beq.n	8004c32 <HAL_GPIO_Init+0x2c6>
 8004c30:	e6a8      	b.n	8004984 <HAL_GPIO_Init+0x18>
  }
}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b006      	add	sp, #24
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40010000 	.word	0x40010000
 8004c44:	50000400 	.word	0x50000400
 8004c48:	50000800 	.word	0x50000800
 8004c4c:	50000c00 	.word	0x50000c00
 8004c50:	50001c00 	.word	0x50001c00
 8004c54:	40010400 	.word	0x40010400

08004c58 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	000a      	movs	r2, r1
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	1cba      	adds	r2, r7, #2
 8004c6c:	8812      	ldrh	r2, [r2, #0]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c72:	230f      	movs	r3, #15
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e003      	b.n	8004c84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c84:	230f      	movs	r3, #15
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	781b      	ldrb	r3, [r3, #0]
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	0008      	movs	r0, r1
 8004c9c:	0011      	movs	r1, r2
 8004c9e:	1cbb      	adds	r3, r7, #2
 8004ca0:	1c02      	adds	r2, r0, #0
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	1c7b      	adds	r3, r7, #1
 8004ca6:	1c0a      	adds	r2, r1, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004caa:	1c7b      	adds	r3, r7, #1
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb2:	1cbb      	adds	r3, r7, #2
 8004cb4:	881a      	ldrh	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004cba:	e003      	b.n	8004cc4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004cbc:	1cbb      	adds	r3, r7, #2
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e082      	b.n	8004de4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2241      	movs	r2, #65	; 0x41
 8004ce2:	5c9b      	ldrb	r3, [r3, r2]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2240      	movs	r2, #64	; 0x40
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fe ffcf 	bl	8003c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2241      	movs	r2, #65	; 0x41
 8004cfe:	2124      	movs	r1, #36	; 0x24
 8004d00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	438a      	bics	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4934      	ldr	r1, [pc, #208]	; (8004dec <HAL_I2C_Init+0x120>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4931      	ldr	r1, [pc, #196]	; (8004df0 <HAL_I2C_Init+0x124>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d108      	bne.n	8004d4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	0209      	lsls	r1, r1, #8
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	e007      	b.n	8004d5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2184      	movs	r1, #132	; 0x84
 8004d54:	0209      	lsls	r1, r1, #8
 8004d56:	430a      	orrs	r2, r1
 8004d58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d104      	bne.n	8004d6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	0112      	lsls	r2, r2, #4
 8004d6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	491f      	ldr	r1, [pc, #124]	; (8004df4 <HAL_I2C_Init+0x128>)
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	491a      	ldr	r1, [pc, #104]	; (8004df0 <HAL_I2C_Init+0x124>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69d9      	ldr	r1, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2241      	movs	r2, #65	; 0x41
 8004dd0:	2120      	movs	r1, #32
 8004dd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2242      	movs	r2, #66	; 0x42
 8004dde:	2100      	movs	r1, #0
 8004de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b002      	add	sp, #8
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	f0ffffff 	.word	0xf0ffffff
 8004df0:	ffff7fff 	.word	0xffff7fff
 8004df4:	02008000 	.word	0x02008000

08004df8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
  }
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e54:	d00a      	beq.n	8004e6c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	0052      	lsls	r2, r2, #1
 8004e6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4013      	ands	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e7c:	d00a      	beq.n	8004e94 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	2208      	movs	r2, #8
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	00d2      	lsls	r2, r2, #3
 8004e92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ea4:	d00a      	beq.n	8004ebc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	2202      	movs	r2, #2
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	0092      	lsls	r2, r2, #2
 8004eba:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	220b      	movs	r2, #11
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d005      	beq.n	8004ed6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 fbbd 	bl	8005650 <I2C_ITError>
  }
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b006      	add	sp, #24
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	0008      	movs	r0, r1
 8004f08:	0011      	movs	r1, r2
 8004f0a:	1cfb      	adds	r3, r7, #3
 8004f0c:	1c02      	adds	r2, r0, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	003b      	movs	r3, r7
 8004f12:	1c0a      	adds	r2, r1, #0
 8004f14:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b002      	add	sp, #8
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <I2C_Slave_ISR_IT+0x24>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0e6      	b.n	8005142 <I2C_Slave_ISR_IT+0x1f2>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	4013      	ands	r3, r2
 8004f82:	d009      	beq.n	8004f98 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f8a:	d005      	beq.n	8004f98 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	0011      	movs	r1, r2
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f9e4 	bl	8005360 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d052      	beq.n	8005046 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fa6:	d04e      	beq.n	8005046 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12d      	bne.n	800500e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2241      	movs	r2, #65	; 0x41
 8004fb6:	5c9b      	ldrb	r3, [r3, r2]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b28      	cmp	r3, #40	; 0x28
 8004fbc:	d10b      	bne.n	8004fd6 <I2C_Slave_ISR_IT+0x86>
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	049b      	lsls	r3, r3, #18
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fae6 	bl	80055a0 <I2C_ITListenCplt>
 8004fd4:	e036      	b.n	8005044 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2241      	movs	r2, #65	; 0x41
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b29      	cmp	r3, #41	; 0x29
 8004fe0:	d110      	bne.n	8005004 <I2C_Slave_ISR_IT+0xb4>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4a59      	ldr	r2, [pc, #356]	; (800514c <I2C_Slave_ISR_IT+0x1fc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00c      	beq.n	8005004 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 fc56 	bl	80058a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f000 f94b 	bl	8005298 <I2C_ITSlaveSeqCplt>
 8005002:	e01f      	b.n	8005044 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2210      	movs	r2, #16
 800500a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800500c:	e091      	b.n	8005132 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2210      	movs	r2, #16
 8005014:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	2204      	movs	r2, #4
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <I2C_Slave_ISR_IT+0xe4>
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	045b      	lsls	r3, r3, #17
 800502e:	429a      	cmp	r2, r3
 8005030:	d000      	beq.n	8005034 <I2C_Slave_ISR_IT+0xe4>
 8005032:	e07e      	b.n	8005132 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	0011      	movs	r1, r2
 800503c:	0018      	movs	r0, r3
 800503e:	f000 fb07 	bl	8005650 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005042:	e076      	b.n	8005132 <I2C_Slave_ISR_IT+0x1e2>
 8005044:	e075      	b.n	8005132 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2204      	movs	r2, #4
 800504a:	4013      	ands	r3, r2
 800504c:	d02f      	beq.n	80050ae <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005054:	d02b      	beq.n	80050ae <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d018      	beq.n	8005092 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d14c      	bne.n	8005136 <I2C_Slave_ISR_IT+0x1e6>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4a2b      	ldr	r2, [pc, #172]	; (800514c <I2C_Slave_ISR_IT+0x1fc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d048      	beq.n	8005136 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 f8f6 	bl	8005298 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050ac:	e043      	b.n	8005136 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4013      	ands	r3, r2
 80050b4:	d00a      	beq.n	80050cc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2208      	movs	r2, #8
 80050ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050bc:	d006      	beq.n	80050cc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f843 	bl	8005150 <I2C_ITAddrCplt>
 80050ca:	e035      	b.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2202      	movs	r2, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	d031      	beq.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050da:	d02d      	beq.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	781a      	ldrb	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
 8005116:	e00f      	b.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	045b      	lsls	r3, r3, #17
 800511e:	429a      	cmp	r2, r3
 8005120:	d002      	beq.n	8005128 <I2C_Slave_ISR_IT+0x1d8>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0018      	movs	r0, r3
 800512c:	f000 f8b4 	bl	8005298 <I2C_ITSlaveSeqCplt>
 8005130:	e002      	b.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	e000      	b.n	8005138 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8005136:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	2100      	movs	r1, #0
 800513e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b006      	add	sp, #24
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2241      	movs	r2, #65	; 0x41
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	001a      	movs	r2, r3
 8005164:	2328      	movs	r3, #40	; 0x28
 8005166:	4013      	ands	r3, r2
 8005168:	2b28      	cmp	r3, #40	; 0x28
 800516a:	d000      	beq.n	800516e <I2C_ITAddrCplt+0x1e>
 800516c:	e088      	b.n	8005280 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	b2da      	uxtb	r2, r3
 8005178:	250f      	movs	r5, #15
 800517a:	197b      	adds	r3, r7, r5
 800517c:	2101      	movs	r1, #1
 800517e:	400a      	ands	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	b29a      	uxth	r2, r3
 800518c:	200c      	movs	r0, #12
 800518e:	183b      	adds	r3, r7, r0
 8005190:	21fe      	movs	r1, #254	; 0xfe
 8005192:	400a      	ands	r2, r1
 8005194:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	b29a      	uxth	r2, r3
 800519e:	240a      	movs	r4, #10
 80051a0:	193b      	adds	r3, r7, r4
 80051a2:	0592      	lsls	r2, r2, #22
 80051a4:	0d92      	lsrs	r2, r2, #22
 80051a6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	2308      	movs	r3, #8
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	21fe      	movs	r1, #254	; 0xfe
 80051b6:	400a      	ands	r2, r1
 80051b8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d148      	bne.n	8005254 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80051c2:	0021      	movs	r1, r4
 80051c4:	187b      	adds	r3, r7, r1
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	4053      	eors	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	001a      	movs	r2, r3
 80051d6:	2306      	movs	r3, #6
 80051d8:	4013      	ands	r3, r2
 80051da:	d120      	bne.n	800521e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80051dc:	183b      	adds	r3, r7, r0
 80051de:	187a      	adds	r2, r7, r1
 80051e0:	8812      	ldrh	r2, [r2, #0]
 80051e2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d14c      	bne.n	8005290 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	2100      	movs	r1, #0
 800520a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800520c:	183b      	adds	r3, r7, r0
 800520e:	881a      	ldrh	r2, [r3, #0]
 8005210:	197b      	adds	r3, r7, r5
 8005212:	7819      	ldrb	r1, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff fe71 	bl	8004efe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800521c:	e038      	b.n	8005290 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800521e:	240c      	movs	r4, #12
 8005220:	193b      	adds	r3, r7, r4
 8005222:	2208      	movs	r2, #8
 8005224:	18ba      	adds	r2, r7, r2
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	021a      	lsls	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0011      	movs	r1, r2
 8005232:	0018      	movs	r0, r3
 8005234:	f000 fb78 	bl	8005928 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005240:	193b      	adds	r3, r7, r4
 8005242:	881a      	ldrh	r2, [r3, #0]
 8005244:	230f      	movs	r3, #15
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	7819      	ldrb	r1, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f7ff fe56 	bl	8004efe <HAL_I2C_AddrCallback>
}
 8005252:	e01d      	b.n	8005290 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	0011      	movs	r1, r2
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fb63 	bl	8005928 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2240      	movs	r2, #64	; 0x40
 8005266:	2100      	movs	r1, #0
 8005268:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800526a:	230c      	movs	r3, #12
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	230f      	movs	r3, #15
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	7819      	ldrb	r1, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff fe40 	bl	8004efe <HAL_I2C_AddrCallback>
}
 800527e:	e007      	b.n	8005290 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2208      	movs	r2, #8
 8005286:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2240      	movs	r2, #64	; 0x40
 800528c:	2100      	movs	r1, #0
 800528e:	5499      	strb	r1, [r3, r2]
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b004      	add	sp, #16
 8005296:	bdb0      	pop	{r4, r5, r7, pc}

08005298 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2242      	movs	r2, #66	; 0x42
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	4013      	ands	r3, r2
 80052b8:	d008      	beq.n	80052cc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4924      	ldr	r1, [pc, #144]	; (8005358 <I2C_ITSlaveSeqCplt+0xc0>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e00c      	b.n	80052e6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	4013      	ands	r3, r2
 80052d4:	d007      	beq.n	80052e6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	491e      	ldr	r1, [pc, #120]	; (800535c <I2C_ITSlaveSeqCplt+0xc4>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2241      	movs	r2, #65	; 0x41
 80052ea:	5c9b      	ldrb	r3, [r3, r2]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b29      	cmp	r3, #41	; 0x29
 80052f0:	d114      	bne.n	800531c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2241      	movs	r2, #65	; 0x41
 80052f6:	2128      	movs	r1, #40	; 0x28
 80052f8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2221      	movs	r2, #33	; 0x21
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2101      	movs	r1, #1
 8005304:	0018      	movs	r0, r3
 8005306:	f000 fb0f 	bl	8005928 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2240      	movs	r2, #64	; 0x40
 800530e:	2100      	movs	r1, #0
 8005310:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff fde2 	bl	8004ede <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800531a:	e019      	b.n	8005350 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2241      	movs	r2, #65	; 0x41
 8005320:	5c9b      	ldrb	r3, [r3, r2]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b2a      	cmp	r3, #42	; 0x2a
 8005326:	d113      	bne.n	8005350 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2241      	movs	r2, #65	; 0x41
 800532c:	2128      	movs	r1, #40	; 0x28
 800532e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2222      	movs	r2, #34	; 0x22
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2102      	movs	r1, #2
 800533a:	0018      	movs	r0, r3
 800533c:	f000 faf4 	bl	8005928 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f7ff fdcf 	bl	8004eee <HAL_I2C_SlaveRxCpltCallback>
}
 8005350:	46c0      	nop			; (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b004      	add	sp, #16
 8005356:	bd80      	pop	{r7, pc}
 8005358:	ffffbfff 	.word	0xffffbfff
 800535c:	ffff7fff 	.word	0xffff7fff

08005360 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005376:	200f      	movs	r0, #15
 8005378:	183b      	adds	r3, r7, r0
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	2141      	movs	r1, #65	; 0x41
 800537e:	5c52      	ldrb	r2, [r2, r1]
 8005380:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2220      	movs	r2, #32
 8005388:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800538a:	183b      	adds	r3, r7, r0
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b21      	cmp	r3, #33	; 0x21
 8005390:	d003      	beq.n	800539a <I2C_ITSlaveCplt+0x3a>
 8005392:	183b      	adds	r3, r7, r0
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b29      	cmp	r3, #41	; 0x29
 8005398:	d109      	bne.n	80053ae <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800539a:	4a7b      	ldr	r2, [pc, #492]	; (8005588 <I2C_ITSlaveCplt+0x228>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	0011      	movs	r1, r2
 80053a0:	0018      	movs	r0, r3
 80053a2:	f000 fac1 	bl	8005928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2221      	movs	r2, #33	; 0x21
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
 80053ac:	e011      	b.n	80053d2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ae:	220f      	movs	r2, #15
 80053b0:	18bb      	adds	r3, r7, r2
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b22      	cmp	r3, #34	; 0x22
 80053b6:	d003      	beq.n	80053c0 <I2C_ITSlaveCplt+0x60>
 80053b8:	18bb      	adds	r3, r7, r2
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b2a      	cmp	r3, #42	; 0x2a
 80053be:	d108      	bne.n	80053d2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80053c0:	4a72      	ldr	r2, [pc, #456]	; (800558c <I2C_ITSlaveCplt+0x22c>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0011      	movs	r1, r2
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 faae 	bl	8005928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2222      	movs	r2, #34	; 0x22
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0209      	lsls	r1, r1, #8
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4968      	ldr	r1, [pc, #416]	; (8005590 <I2C_ITSlaveCplt+0x230>)
 80053f0:	400a      	ands	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fa55 	bl	80058a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	01db      	lsls	r3, r3, #7
 8005402:	4013      	ands	r3, r2
 8005404:	d013      	beq.n	800542e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4960      	ldr	r1, [pc, #384]	; (8005594 <I2C_ITSlaveCplt+0x234>)
 8005412:	400a      	ands	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01f      	beq.n	800545e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800542c:	e017      	b.n	800545e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	4013      	ands	r3, r2
 8005436:	d012      	beq.n	800545e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4955      	ldr	r1, [pc, #340]	; (8005598 <I2C_ITSlaveCplt+0x238>)
 8005444:	400a      	ands	r2, r1
 8005446:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2204      	movs	r2, #4
 8005462:	4013      	ands	r3, r2
 8005464:	d020      	beq.n	80054a8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2204      	movs	r2, #4
 800546a:	4393      	bics	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	2204      	movs	r2, #4
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2242      	movs	r2, #66	; 0x42
 80054c2:	2100      	movs	r1, #0
 80054c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f8b7 	bl	8005650 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2241      	movs	r2, #65	; 0x41
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b28      	cmp	r3, #40	; 0x28
 80054ec:	d147      	bne.n	800557e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f853 	bl	80055a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054fa:	e040      	b.n	800557e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <I2C_ITSlaveCplt+0x23c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d016      	beq.n	8005534 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7ff fec5 	bl	8005298 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <I2C_ITSlaveCplt+0x23c>)
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2241      	movs	r2, #65	; 0x41
 8005518:	2120      	movs	r1, #32
 800551a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f7ff fcf6 	bl	8004f1e <HAL_I2C_ListenCpltCallback>
}
 8005532:	e024      	b.n	800557e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2241      	movs	r2, #65	; 0x41
 8005538:	5c9b      	ldrb	r3, [r3, r2]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b22      	cmp	r3, #34	; 0x22
 800553e:	d10f      	bne.n	8005560 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2241      	movs	r2, #65	; 0x41
 8005544:	2120      	movs	r1, #32
 8005546:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2240      	movs	r2, #64	; 0x40
 8005552:	2100      	movs	r1, #0
 8005554:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fcc8 	bl	8004eee <HAL_I2C_SlaveRxCpltCallback>
}
 800555e:	e00e      	b.n	800557e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2241      	movs	r2, #65	; 0x41
 8005564:	2120      	movs	r1, #32
 8005566:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	2100      	movs	r1, #0
 8005574:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f7ff fcb0 	bl	8004ede <HAL_I2C_SlaveTxCpltCallback>
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b006      	add	sp, #24
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	00008001 	.word	0x00008001
 800558c:	00008002 	.word	0x00008002
 8005590:	fe00e800 	.word	0xfe00e800
 8005594:	ffffbfff 	.word	0xffffbfff
 8005598:	ffff7fff 	.word	0xffff7fff
 800559c:	ffff0000 	.word	0xffff0000

080055a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <I2C_ITListenCplt+0xa8>)
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2241      	movs	r2, #65	; 0x41
 80055ba:	2120      	movs	r1, #32
 80055bc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2242      	movs	r2, #66	; 0x42
 80055c2:	2100      	movs	r1, #0
 80055c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	d022      	beq.n	800561a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	2204      	movs	r2, #4
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800561a:	4a0c      	ldr	r2, [pc, #48]	; (800564c <I2C_ITListenCplt+0xac>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	0011      	movs	r1, r2
 8005620:	0018      	movs	r0, r3
 8005622:	f000 f981 	bl	8005928 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2210      	movs	r2, #16
 800562c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2240      	movs	r2, #64	; 0x40
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f7ff fc70 	bl	8004f1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	46bd      	mov	sp, r7
 8005642:	b002      	add	sp, #8
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	00008003 	.word	0x00008003

08005650 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800565a:	200f      	movs	r0, #15
 800565c:	183b      	adds	r3, r7, r0
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	2141      	movs	r1, #65	; 0x41
 8005662:	5c52      	ldrb	r2, [r2, r1]
 8005664:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2242      	movs	r2, #66	; 0x42
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a72      	ldr	r2, [pc, #456]	; (800583c <I2C_ITError+0x1ec>)
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005686:	183b      	adds	r3, r7, r0
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b28      	cmp	r3, #40	; 0x28
 800568c:	d007      	beq.n	800569e <I2C_ITError+0x4e>
 800568e:	183b      	adds	r3, r7, r0
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b29      	cmp	r3, #41	; 0x29
 8005694:	d003      	beq.n	800569e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005696:	183b      	adds	r3, r7, r0
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b2a      	cmp	r3, #42	; 0x2a
 800569c:	d10c      	bne.n	80056b8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2103      	movs	r1, #3
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f940 	bl	8005928 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2241      	movs	r2, #65	; 0x41
 80056ac:	2128      	movs	r1, #40	; 0x28
 80056ae:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a63      	ldr	r2, [pc, #396]	; (8005840 <I2C_ITError+0x1f0>)
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34
 80056b6:	e032      	b.n	800571e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056b8:	4a62      	ldr	r2, [pc, #392]	; (8005844 <I2C_ITError+0x1f4>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0011      	movs	r1, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 f932 	bl	8005928 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 f8ed 	bl	80058a6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2241      	movs	r2, #65	; 0x41
 80056d0:	5c9b      	ldrb	r3, [r3, r2]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d01f      	beq.n	8005718 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2241      	movs	r2, #65	; 0x41
 80056dc:	2120      	movs	r1, #32
 80056de:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2220      	movs	r2, #32
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d114      	bne.n	8005718 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2210      	movs	r2, #16
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d109      	bne.n	8005710 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2210      	movs	r2, #16
 8005702:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	2204      	movs	r2, #4
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2220      	movs	r2, #32
 8005716:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03b      	beq.n	80057a4 <I2C_ITError+0x154>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b11      	cmp	r3, #17
 8005730:	d002      	beq.n	8005738 <I2C_ITError+0xe8>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b21      	cmp	r3, #33	; 0x21
 8005736:	d135      	bne.n	80057a4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	401a      	ands	r2, r3
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	429a      	cmp	r2, r3
 800574a:	d107      	bne.n	800575c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	493c      	ldr	r1, [pc, #240]	; (8005848 <I2C_ITError+0x1f8>)
 8005758:	400a      	ands	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	0018      	movs	r0, r3
 8005762:	f7ff f8f6 	bl	8004952 <HAL_DMA_GetState>
 8005766:	0003      	movs	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d016      	beq.n	800579a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	4a36      	ldr	r2, [pc, #216]	; (800584c <I2C_ITError+0x1fc>)
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2240      	movs	r2, #64	; 0x40
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	0018      	movs	r0, r3
 8005782:	f7fe fff1 	bl	8004768 <HAL_DMA_Abort_IT>
 8005786:	1e03      	subs	r3, r0, #0
 8005788:	d051      	beq.n	800582e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	0018      	movs	r0, r3
 8005796:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005798:	e049      	b.n	800582e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0018      	movs	r0, r3
 800579e:	f000 f859 	bl	8005854 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057a2:	e044      	b.n	800582e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d03b      	beq.n	8005824 <I2C_ITError+0x1d4>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b12      	cmp	r3, #18
 80057b0:	d002      	beq.n	80057b8 <I2C_ITError+0x168>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b22      	cmp	r3, #34	; 0x22
 80057b6:	d135      	bne.n	8005824 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	401a      	ands	r2, r3
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d107      	bne.n	80057dc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	491e      	ldr	r1, [pc, #120]	; (8005850 <I2C_ITError+0x200>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff f8b6 	bl	8004952 <HAL_DMA_GetState>
 80057e6:	0003      	movs	r3, r0
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d016      	beq.n	800581a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	4a16      	ldr	r2, [pc, #88]	; (800584c <I2C_ITError+0x1fc>)
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2240      	movs	r2, #64	; 0x40
 80057f8:	2100      	movs	r1, #0
 80057fa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	0018      	movs	r0, r3
 8005802:	f7fe ffb1 	bl	8004768 <HAL_DMA_Abort_IT>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d013      	beq.n	8005832 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	0018      	movs	r0, r3
 8005816:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005818:	e00b      	b.n	8005832 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f000 f819 	bl	8005854 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005822:	e006      	b.n	8005832 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f814 	bl	8005854 <I2C_TreatErrorCallback>
  }
}
 800582c:	e002      	b.n	8005834 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	e000      	b.n	8005834 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005832:	46c0      	nop			; (mov r8, r8)
}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46bd      	mov	sp, r7
 8005838:	b004      	add	sp, #16
 800583a:	bd80      	pop	{r7, pc}
 800583c:	ffff0000 	.word	0xffff0000
 8005840:	08004f51 	.word	0x08004f51
 8005844:	00008003 	.word	0x00008003
 8005848:	ffffbfff 	.word	0xffffbfff
 800584c:	080058eb 	.word	0x080058eb
 8005850:	ffff7fff 	.word	0xffff7fff

08005854 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2241      	movs	r2, #65	; 0x41
 8005860:	5c9b      	ldrb	r3, [r3, r2]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b60      	cmp	r3, #96	; 0x60
 8005866:	d10f      	bne.n	8005888 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2241      	movs	r2, #65	; 0x41
 800586c:	2120      	movs	r1, #32
 800586e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	2100      	movs	r1, #0
 800587c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff fb5c 	bl	8004f3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005886:	e00a      	b.n	800589e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2240      	movs	r2, #64	; 0x40
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff fb48 	bl	8004f2e <HAL_I2C_ErrorCallback>
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d103      	bne.n	80058c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2201      	movs	r2, #1
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d007      	beq.n	80058e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2101      	movs	r1, #1
 80058de:	430a      	orrs	r2, r1
 80058e0:	619a      	str	r2, [r3, #24]
  }
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}

080058ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	2200      	movs	r2, #0
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	2200      	movs	r2, #0
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff ff9a 	bl	8005854 <I2C_TreatErrorCallback>
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b004      	add	sp, #16
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	000a      	movs	r2, r1
 8005932:	1cbb      	adds	r3, r7, #2
 8005934:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800593a:	1cbb      	adds	r3, r7, #2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	2201      	movs	r2, #1
 8005940:	4013      	ands	r3, r2
 8005942:	d010      	beq.n	8005966 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2242      	movs	r2, #66	; 0x42
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2241      	movs	r2, #65	; 0x41
 8005950:	5c9b      	ldrb	r3, [r3, r2]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	001a      	movs	r2, r3
 8005956:	2328      	movs	r3, #40	; 0x28
 8005958:	4013      	ands	r3, r2
 800595a:	2b28      	cmp	r3, #40	; 0x28
 800595c:	d003      	beq.n	8005966 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	22b0      	movs	r2, #176	; 0xb0
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005966:	1cbb      	adds	r3, r7, #2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d010      	beq.n	8005992 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2244      	movs	r2, #68	; 0x44
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2241      	movs	r2, #65	; 0x41
 800597c:	5c9b      	ldrb	r3, [r3, r2]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	001a      	movs	r2, r3
 8005982:	2328      	movs	r3, #40	; 0x28
 8005984:	4013      	ands	r3, r2
 8005986:	2b28      	cmp	r3, #40	; 0x28
 8005988:	d003      	beq.n	8005992 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22b0      	movs	r2, #176	; 0xb0
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005992:	1cbb      	adds	r3, r7, #2
 8005994:	2200      	movs	r2, #0
 8005996:	5e9b      	ldrsh	r3, [r3, r2]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da03      	bge.n	80059a4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22b8      	movs	r2, #184	; 0xb8
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059a4:	1cbb      	adds	r3, r7, #2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d103      	bne.n	80059b4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2290      	movs	r2, #144	; 0x90
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059b4:	1cbb      	adds	r3, r7, #2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d103      	bne.n	80059c4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80059c4:	1cbb      	adds	r3, r7, #2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d103      	bne.n	80059d4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43d9      	mvns	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	400a      	ands	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b004      	add	sp, #16
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2241      	movs	r2, #65	; 0x41
 80059fe:	5c9b      	ldrb	r3, [r3, r2]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d138      	bne.n	8005a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2240      	movs	r2, #64	; 0x40
 8005a0a:	5c9b      	ldrb	r3, [r3, r2]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e032      	b.n	8005a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2240      	movs	r2, #64	; 0x40
 8005a18:	2101      	movs	r1, #1
 8005a1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2241      	movs	r2, #65	; 0x41
 8005a20:	2124      	movs	r1, #36	; 0x24
 8005a22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2101      	movs	r1, #1
 8005a30:	438a      	bics	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4911      	ldr	r1, [pc, #68]	; (8005a84 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a40:	400a      	ands	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2101      	movs	r1, #1
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2241      	movs	r2, #65	; 0x41
 8005a68:	2120      	movs	r1, #32
 8005a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
  }
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b002      	add	sp, #8
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	ffffefff 	.word	0xffffefff

08005a88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2241      	movs	r2, #65	; 0x41
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d139      	bne.n	8005b12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2240      	movs	r2, #64	; 0x40
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e033      	b.n	8005b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2241      	movs	r2, #65	; 0x41
 8005ab8:	2124      	movs	r1, #36	; 0x24
 8005aba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2101      	movs	r1, #1
 8005afa:	430a      	orrs	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2241      	movs	r2, #65	; 0x41
 8005b02:	2120      	movs	r1, #32
 8005b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	fffff0ff 	.word	0xfffff0ff

08005b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f000 fb5a 	bl	80061e8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b34:	4bce      	ldr	r3, [pc, #824]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	220c      	movs	r2, #12
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b3e:	4bcc      	ldr	r3, [pc, #816]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	025b      	lsls	r3, r3, #9
 8005b46:	4013      	ands	r3, r2
 8005b48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	d100      	bne.n	8005b56 <HAL_RCC_OscConfig+0x36>
 8005b54:	e07c      	b.n	8005c50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d007      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d111      	bne.n	8005b86 <HAL_RCC_OscConfig+0x66>
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	025b      	lsls	r3, r3, #9
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d10c      	bne.n	8005b86 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	4bc0      	ldr	r3, [pc, #768]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	029b      	lsls	r3, r3, #10
 8005b74:	4013      	ands	r3, r2
 8005b76:	d100      	bne.n	8005b7a <HAL_RCC_OscConfig+0x5a>
 8005b78:	e069      	b.n	8005c4e <HAL_RCC_OscConfig+0x12e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d165      	bne.n	8005c4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e330      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	025b      	lsls	r3, r3, #9
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d107      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x82>
 8005b92:	4bb7      	ldr	r3, [pc, #732]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4bb6      	ldr	r3, [pc, #728]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	0249      	lsls	r1, r1, #9
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e027      	b.n	8005bf2 <HAL_RCC_OscConfig+0xd2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	23a0      	movs	r3, #160	; 0xa0
 8005ba8:	02db      	lsls	r3, r3, #11
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d10e      	bne.n	8005bcc <HAL_RCC_OscConfig+0xac>
 8005bae:	4bb0      	ldr	r3, [pc, #704]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4baf      	ldr	r3, [pc, #700]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	02c9      	lsls	r1, r1, #11
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	4bac      	ldr	r3, [pc, #688]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4bab      	ldr	r3, [pc, #684]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	0249      	lsls	r1, r1, #9
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e012      	b.n	8005bf2 <HAL_RCC_OscConfig+0xd2>
 8005bcc:	4ba8      	ldr	r3, [pc, #672]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4ba7      	ldr	r3, [pc, #668]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bd2:	49a8      	ldr	r1, [pc, #672]	; (8005e74 <HAL_RCC_OscConfig+0x354>)
 8005bd4:	400a      	ands	r2, r1
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	4ba5      	ldr	r3, [pc, #660]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	025b      	lsls	r3, r3, #9
 8005be0:	4013      	ands	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4ba2      	ldr	r3, [pc, #648]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4ba1      	ldr	r3, [pc, #644]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005bec:	49a2      	ldr	r1, [pc, #648]	; (8005e78 <HAL_RCC_OscConfig+0x358>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d014      	beq.n	8005c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fe fc31 	bl	8004460 <HAL_GetTick>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fe fc2c 	bl	8004460 <HAL_GetTick>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e2e8      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c16:	4b96      	ldr	r3, [pc, #600]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xe4>
 8005c22:	e015      	b.n	8005c50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fe fc1c 	bl	8004460 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c2e:	f7fe fc17 	bl	8004460 <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b64      	cmp	r3, #100	; 0x64
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e2d3      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c40:	4b8b      	ldr	r3, [pc, #556]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCC_OscConfig+0x10e>
 8005c4c:	e000      	b.n	8005c50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2202      	movs	r2, #2
 8005c56:	4013      	ands	r3, r2
 8005c58:	d100      	bne.n	8005c5c <HAL_RCC_OscConfig+0x13c>
 8005c5a:	e08b      	b.n	8005d74 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b0c      	cmp	r3, #12
 8005c6c:	d13e      	bne.n	8005cec <HAL_RCC_OscConfig+0x1cc>
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d13b      	bne.n	8005cec <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c74:	4b7e      	ldr	r3, [pc, #504]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_RCC_OscConfig+0x168>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e2af      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c88:	4b79      	ldr	r3, [pc, #484]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a7b      	ldr	r2, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x35c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	4b75      	ldr	r3, [pc, #468]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c9e:	4b74      	ldr	r3, [pc, #464]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2209      	movs	r2, #9
 8005ca4:	4393      	bics	r3, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	4b71      	ldr	r3, [pc, #452]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb0:	f000 fc6c 	bl	800658c <HAL_RCC_GetSysClockFreq>
 8005cb4:	0001      	movs	r1, r0
 8005cb6:	4b6e      	ldr	r3, [pc, #440]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	4a6f      	ldr	r2, [pc, #444]	; (8005e80 <HAL_RCC_OscConfig+0x360>)
 8005cc2:	5cd3      	ldrb	r3, [r2, r3]
 8005cc4:	000a      	movs	r2, r1
 8005cc6:	40da      	lsrs	r2, r3
 8005cc8:	4b6e      	ldr	r3, [pc, #440]	; (8005e84 <HAL_RCC_OscConfig+0x364>)
 8005cca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ccc:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_RCC_OscConfig+0x368>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2513      	movs	r5, #19
 8005cd2:	197c      	adds	r4, r7, r5
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7fe fb7d 	bl	80043d4 <HAL_InitTick>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d046      	beq.n	8005d74 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005ce6:	197b      	adds	r3, r7, r5
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	e27d      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d027      	beq.n	8005d42 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cf2:	4b5f      	ldr	r3, [pc, #380]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2209      	movs	r2, #9
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	4b5c      	ldr	r3, [pc, #368]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fe fbac 	bl	8004460 <HAL_GetTick>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d0e:	f7fe fba7 	bl	8004460 <HAL_GetTick>
 8005d12:	0002      	movs	r2, r0
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e263      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d20:	4b53      	ldr	r3, [pc, #332]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2204      	movs	r2, #4
 8005d26:	4013      	ands	r3, r2
 8005d28:	d0f1      	beq.n	8005d0e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2a:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <HAL_RCC_OscConfig+0x35c>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	021a      	lsls	r2, r3, #8
 8005d3a:	4b4d      	ldr	r3, [pc, #308]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	e018      	b.n	8005d74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d48:	2101      	movs	r1, #1
 8005d4a:	438a      	bics	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4e:	f7fe fb87 	bl	8004460 <HAL_GetTick>
 8005d52:	0003      	movs	r3, r0
 8005d54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d58:	f7fe fb82 	bl	8004460 <HAL_GetTick>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e23e      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	4013      	ands	r3, r2
 8005d72:	d1f1      	bne.n	8005d58 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2210      	movs	r2, #16
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d100      	bne.n	8005d80 <HAL_RCC_OscConfig+0x260>
 8005d7e:	e0a1      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d140      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d005      	beq.n	8005d9e <HAL_RCC_OscConfig+0x27e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e224      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d9e:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_RCC_OscConfig+0x36c>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	4b30      	ldr	r3, [pc, #192]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	0a19      	lsrs	r1, r3, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	061a      	lsls	r2, r3, #24
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	0b5b      	lsrs	r3, r3, #13
 8005dcc:	3301      	adds	r3, #1
 8005dce:	2280      	movs	r2, #128	; 0x80
 8005dd0:	0212      	lsls	r2, r2, #8
 8005dd2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005dd4:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	210f      	movs	r1, #15
 8005ddc:	400b      	ands	r3, r1
 8005dde:	4928      	ldr	r1, [pc, #160]	; (8005e80 <HAL_RCC_OscConfig+0x360>)
 8005de0:	5ccb      	ldrb	r3, [r1, r3]
 8005de2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_RCC_OscConfig+0x364>)
 8005de6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_RCC_OscConfig+0x368>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2513      	movs	r5, #19
 8005dee:	197c      	adds	r4, r7, r5
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7fe faef 	bl	80043d4 <HAL_InitTick>
 8005df6:	0003      	movs	r3, r0
 8005df8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005dfa:	197b      	adds	r3, r7, r5
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d060      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8005e02:	197b      	adds	r3, r7, r5
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	e1ef      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d03f      	beq.n	8005e90 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	0049      	lsls	r1, r1, #1
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fe fb1f 	bl	8004460 <HAL_GetTick>
 8005e22:	0003      	movs	r3, r0
 8005e24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e28:	f7fe fb1a 	bl	8004460 <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e1d6      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4013      	ands	r3, r2
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <HAL_RCC_OscConfig+0x36c>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	0019      	movs	r1, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	0a19      	lsrs	r1, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	061a      	lsls	r2, r3, #24
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <HAL_RCC_OscConfig+0x350>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e029      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3a4>
 8005e70:	40021000 	.word	0x40021000
 8005e74:	fffeffff 	.word	0xfffeffff
 8005e78:	fffbffff 	.word	0xfffbffff
 8005e7c:	ffffe0ff 	.word	0xffffe0ff
 8005e80:	0800b7f0 	.word	0x0800b7f0
 8005e84:	20000000 	.word	0x20000000
 8005e88:	20000004 	.word	0x20000004
 8005e8c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e90:	4bbe      	ldr	r3, [pc, #760]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4bbd      	ldr	r3, [pc, #756]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005e96:	49be      	ldr	r1, [pc, #760]	; (8006190 <HAL_RCC_OscConfig+0x670>)
 8005e98:	400a      	ands	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9c:	f7fe fae0 	bl	8004460 <HAL_GetTick>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ea6:	f7fe fadb 	bl	8004460 <HAL_GetTick>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e197      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005eb8:	4bb4      	ldr	r3, [pc, #720]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d036      	beq.n	8005f3c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed6:	4bad      	ldr	r3, [pc, #692]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eda:	4bac      	ldr	r3, [pc, #688]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005edc:	2101      	movs	r1, #1
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee2:	f7fe fabd 	bl	8004460 <HAL_GetTick>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eec:	f7fe fab8 	bl	8004460 <HAL_GetTick>
 8005ef0:	0002      	movs	r2, r0
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e174      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005efe:	4ba3      	ldr	r3, [pc, #652]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	2202      	movs	r2, #2
 8005f04:	4013      	ands	r3, r2
 8005f06:	d0f1      	beq.n	8005eec <HAL_RCC_OscConfig+0x3cc>
 8005f08:	e018      	b.n	8005f3c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f0a:	4ba0      	ldr	r3, [pc, #640]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f0e:	4b9f      	ldr	r3, [pc, #636]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f10:	2101      	movs	r1, #1
 8005f12:	438a      	bics	r2, r1
 8005f14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f16:	f7fe faa3 	bl	8004460 <HAL_GetTick>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f20:	f7fe fa9e 	bl	8004460 <HAL_GetTick>
 8005f24:	0002      	movs	r2, r0
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e15a      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f32:	4b96      	ldr	r3, [pc, #600]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	2202      	movs	r2, #2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d1f1      	bne.n	8005f20 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2204      	movs	r2, #4
 8005f42:	4013      	ands	r3, r2
 8005f44:	d100      	bne.n	8005f48 <HAL_RCC_OscConfig+0x428>
 8005f46:	e0ae      	b.n	80060a6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f48:	2027      	movs	r0, #39	; 0x27
 8005f4a:	183b      	adds	r3, r7, r0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f50:	4b8e      	ldr	r3, [pc, #568]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	055b      	lsls	r3, r3, #21
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5c:	4b8b      	ldr	r3, [pc, #556]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f60:	4b8a      	ldr	r3, [pc, #552]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005f62:	2180      	movs	r1, #128	; 0x80
 8005f64:	0549      	lsls	r1, r1, #21
 8005f66:	430a      	orrs	r2, r1
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f6a:	183b      	adds	r3, r7, r0
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b88      	ldr	r3, [pc, #544]	; (8006194 <HAL_RCC_OscConfig+0x674>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d11a      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f7c:	4b85      	ldr	r3, [pc, #532]	; (8006194 <HAL_RCC_OscConfig+0x674>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b84      	ldr	r3, [pc, #528]	; (8006194 <HAL_RCC_OscConfig+0x674>)
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	0049      	lsls	r1, r1, #1
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f8a:	f7fe fa69 	bl	8004460 <HAL_GetTick>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f94:	f7fe fa64 	bl	8004460 <HAL_GetTick>
 8005f98:	0002      	movs	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e120      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa6:	4b7b      	ldr	r3, [pc, #492]	; (8006194 <HAL_RCC_OscConfig+0x674>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_OscConfig+0x4ae>
 8005fbe:	4b73      	ldr	r3, [pc, #460]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc2:	4b72      	ldr	r3, [pc, #456]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	0049      	lsls	r1, r1, #1
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	651a      	str	r2, [r3, #80]	; 0x50
 8005fcc:	e031      	b.n	8006032 <HAL_RCC_OscConfig+0x512>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10c      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4d0>
 8005fd6:	4b6d      	ldr	r3, [pc, #436]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fda:	4b6c      	ldr	r3, [pc, #432]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fdc:	496c      	ldr	r1, [pc, #432]	; (8006190 <HAL_RCC_OscConfig+0x670>)
 8005fde:	400a      	ands	r2, r1
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8005fe2:	4b6a      	ldr	r3, [pc, #424]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe6:	4b69      	ldr	r3, [pc, #420]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005fe8:	496b      	ldr	r1, [pc, #428]	; (8006198 <HAL_RCC_OscConfig+0x678>)
 8005fea:	400a      	ands	r2, r1
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
 8005fee:	e020      	b.n	8006032 <HAL_RCC_OscConfig+0x512>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	23a0      	movs	r3, #160	; 0xa0
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d10e      	bne.n	800601a <HAL_RCC_OscConfig+0x4fa>
 8005ffc:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8005ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006000:	4b62      	ldr	r3, [pc, #392]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	00c9      	lsls	r1, r1, #3
 8006006:	430a      	orrs	r2, r1
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
 800600a:	4b60      	ldr	r3, [pc, #384]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800600c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800600e:	4b5f      	ldr	r3, [pc, #380]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006010:	2180      	movs	r1, #128	; 0x80
 8006012:	0049      	lsls	r1, r1, #1
 8006014:	430a      	orrs	r2, r1
 8006016:	651a      	str	r2, [r3, #80]	; 0x50
 8006018:	e00b      	b.n	8006032 <HAL_RCC_OscConfig+0x512>
 800601a:	4b5c      	ldr	r3, [pc, #368]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800601c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800601e:	4b5b      	ldr	r3, [pc, #364]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006020:	495b      	ldr	r1, [pc, #364]	; (8006190 <HAL_RCC_OscConfig+0x670>)
 8006022:	400a      	ands	r2, r1
 8006024:	651a      	str	r2, [r3, #80]	; 0x50
 8006026:	4b59      	ldr	r3, [pc, #356]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800602a:	4b58      	ldr	r3, [pc, #352]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800602c:	495a      	ldr	r1, [pc, #360]	; (8006198 <HAL_RCC_OscConfig+0x678>)
 800602e:	400a      	ands	r2, r1
 8006030:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d015      	beq.n	8006066 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603a:	f7fe fa11 	bl	8004460 <HAL_GetTick>
 800603e:	0003      	movs	r3, r0
 8006040:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006042:	e009      	b.n	8006058 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fe fa0c 	bl	8004460 <HAL_GetTick>
 8006048:	0002      	movs	r2, r0
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	4a53      	ldr	r2, [pc, #332]	; (800619c <HAL_RCC_OscConfig+0x67c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0c7      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006058:	4b4c      	ldr	r3, [pc, #304]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800605a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4013      	ands	r3, r2
 8006062:	d0ef      	beq.n	8006044 <HAL_RCC_OscConfig+0x524>
 8006064:	e014      	b.n	8006090 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006066:	f7fe f9fb 	bl	8004460 <HAL_GetTick>
 800606a:	0003      	movs	r3, r0
 800606c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800606e:	e009      	b.n	8006084 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7fe f9f6 	bl	8004460 <HAL_GetTick>
 8006074:	0002      	movs	r2, r0
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	4a48      	ldr	r2, [pc, #288]	; (800619c <HAL_RCC_OscConfig+0x67c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e0b1      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006084:	4b41      	ldr	r3, [pc, #260]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4013      	ands	r3, r2
 800608e:	d1ef      	bne.n	8006070 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006090:	2327      	movs	r3, #39	; 0x27
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609a:	4b3c      	ldr	r3, [pc, #240]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800609c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609e:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 80060a0:	493f      	ldr	r1, [pc, #252]	; (80061a0 <HAL_RCC_OscConfig+0x680>)
 80060a2:	400a      	ands	r2, r1
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d100      	bne.n	80060b0 <HAL_RCC_OscConfig+0x590>
 80060ae:	e09a      	b.n	80061e6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d064      	beq.n	8006180 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d145      	bne.n	800614a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060be:	4b33      	ldr	r3, [pc, #204]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 80060c4:	4937      	ldr	r1, [pc, #220]	; (80061a4 <HAL_RCC_OscConfig+0x684>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ca:	f7fe f9c9 	bl	8004460 <HAL_GetTick>
 80060ce:	0003      	movs	r3, r0
 80060d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fe f9c4 	bl	8004460 <HAL_GetTick>
 80060d8:	0002      	movs	r2, r0
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e080      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060e6:	4b29      	ldr	r3, [pc, #164]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	049b      	lsls	r3, r3, #18
 80060ee:	4013      	ands	r3, r2
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f2:	4b26      	ldr	r3, [pc, #152]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <HAL_RCC_OscConfig+0x688>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	0019      	movs	r1, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	431a      	orrs	r2, r3
 800610c:	4b1f      	ldr	r3, [pc, #124]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800610e:	430a      	orrs	r2, r1
 8006110:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	0449      	lsls	r1, r1, #17
 800611c:	430a      	orrs	r2, r1
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fe f99e 	bl	8004460 <HAL_GetTick>
 8006124:	0003      	movs	r3, r0
 8006126:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612a:	f7fe f999 	bl	8004460 <HAL_GetTick>
 800612e:	0002      	movs	r2, r0
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e055      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800613c:	4b13      	ldr	r3, [pc, #76]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	049b      	lsls	r3, r3, #18
 8006144:	4013      	ands	r3, r2
 8006146:	d0f0      	beq.n	800612a <HAL_RCC_OscConfig+0x60a>
 8006148:	e04d      	b.n	80061e6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614a:	4b10      	ldr	r3, [pc, #64]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006150:	4914      	ldr	r1, [pc, #80]	; (80061a4 <HAL_RCC_OscConfig+0x684>)
 8006152:	400a      	ands	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006156:	f7fe f983 	bl	8004460 <HAL_GetTick>
 800615a:	0003      	movs	r3, r0
 800615c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006160:	f7fe f97e 	bl	8004460 <HAL_GetTick>
 8006164:	0002      	movs	r2, r0
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e03a      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_OscConfig+0x66c>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	049b      	lsls	r3, r3, #18
 800617a:	4013      	ands	r3, r2
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x640>
 800617e:	e032      	b.n	80061e6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	2b01      	cmp	r3, #1
 8006186:	d111      	bne.n	80061ac <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e02d      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
 800618c:	40021000 	.word	0x40021000
 8006190:	fffffeff 	.word	0xfffffeff
 8006194:	40007000 	.word	0x40007000
 8006198:	fffffbff 	.word	0xfffffbff
 800619c:	00001388 	.word	0x00001388
 80061a0:	efffffff 	.word	0xefffffff
 80061a4:	feffffff 	.word	0xfeffffff
 80061a8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <HAL_RCC_OscConfig+0x6d0>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	025b      	lsls	r3, r3, #9
 80061b8:	401a      	ands	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	429a      	cmp	r2, r3
 80061c0:	d10f      	bne.n	80061e2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	23f0      	movs	r3, #240	; 0xf0
 80061c6:	039b      	lsls	r3, r3, #14
 80061c8:	401a      	ands	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	23c0      	movs	r3, #192	; 0xc0
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	401a      	ands	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061de:	429a      	cmp	r2, r3
 80061e0:	d001      	beq.n	80061e6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	0018      	movs	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b00a      	add	sp, #40	; 0x28
 80061ee:	bdb0      	pop	{r4, r5, r7, pc}
 80061f0:	40021000 	.word	0x40021000

080061f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b5b0      	push	{r4, r5, r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e128      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b96      	ldr	r3, [pc, #600]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	4013      	ands	r3, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d91e      	bls.n	8006254 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b93      	ldr	r3, [pc, #588]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	4393      	bics	r3, r2
 800621e:	0019      	movs	r1, r3
 8006220:	4b90      	ldr	r3, [pc, #576]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006228:	f7fe f91a 	bl	8004460 <HAL_GetTick>
 800622c:	0003      	movs	r3, r0
 800622e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006230:	e009      	b.n	8006246 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006232:	f7fe f915 	bl	8004460 <HAL_GetTick>
 8006236:	0002      	movs	r2, r0
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	4a8a      	ldr	r2, [pc, #552]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e109      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b87      	ldr	r3, [pc, #540]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	4013      	ands	r3, r2
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d1ee      	bne.n	8006232 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2202      	movs	r2, #2
 800625a:	4013      	ands	r3, r2
 800625c:	d009      	beq.n	8006272 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800625e:	4b83      	ldr	r3, [pc, #524]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	22f0      	movs	r2, #240	; 0xf0
 8006264:	4393      	bics	r3, r2
 8006266:	0019      	movs	r1, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	4b7f      	ldr	r3, [pc, #508]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 800626e:	430a      	orrs	r2, r1
 8006270:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2201      	movs	r2, #1
 8006278:	4013      	ands	r3, r2
 800627a:	d100      	bne.n	800627e <HAL_RCC_ClockConfig+0x8a>
 800627c:	e089      	b.n	8006392 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d107      	bne.n	8006296 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006286:	4b79      	ldr	r3, [pc, #484]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	029b      	lsls	r3, r3, #10
 800628e:	4013      	ands	r3, r2
 8006290:	d120      	bne.n	80062d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0e1      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800629e:	4b73      	ldr	r3, [pc, #460]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	049b      	lsls	r3, r3, #18
 80062a6:	4013      	ands	r3, r2
 80062a8:	d114      	bne.n	80062d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0d5      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d106      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062b6:	4b6d      	ldr	r3, [pc, #436]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2204      	movs	r2, #4
 80062bc:	4013      	ands	r3, r2
 80062be:	d109      	bne.n	80062d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0ca      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80062c4:	4b69      	ldr	r3, [pc, #420]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4013      	ands	r3, r2
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0c2      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d4:	4b65      	ldr	r3, [pc, #404]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	2203      	movs	r2, #3
 80062da:	4393      	bics	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4b62      	ldr	r3, [pc, #392]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7fe f8ba 	bl	8004460 <HAL_GetTick>
 80062ec:	0003      	movs	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d111      	bne.n	800631c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062f8:	e009      	b.n	800630e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fa:	f7fe f8b1 	bl	8004460 <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	4a58      	ldr	r2, [pc, #352]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e0a5      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800630e:	4b57      	ldr	r3, [pc, #348]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	220c      	movs	r2, #12
 8006314:	4013      	ands	r3, r2
 8006316:	2b08      	cmp	r3, #8
 8006318:	d1ef      	bne.n	80062fa <HAL_RCC_ClockConfig+0x106>
 800631a:	e03a      	b.n	8006392 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d111      	bne.n	8006348 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006324:	e009      	b.n	800633a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006326:	f7fe f89b 	bl	8004460 <HAL_GetTick>
 800632a:	0002      	movs	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	4a4d      	ldr	r2, [pc, #308]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e08f      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800633a:	4b4c      	ldr	r3, [pc, #304]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	220c      	movs	r2, #12
 8006340:	4013      	ands	r3, r2
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d1ef      	bne.n	8006326 <HAL_RCC_ClockConfig+0x132>
 8006346:	e024      	b.n	8006392 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d11b      	bne.n	8006388 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006350:	e009      	b.n	8006366 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006352:	f7fe f885 	bl	8004460 <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	4a42      	ldr	r2, [pc, #264]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e079      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006366:	4b41      	ldr	r3, [pc, #260]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	220c      	movs	r2, #12
 800636c:	4013      	ands	r3, r2
 800636e:	2b04      	cmp	r3, #4
 8006370:	d1ef      	bne.n	8006352 <HAL_RCC_ClockConfig+0x15e>
 8006372:	e00e      	b.n	8006392 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006374:	f7fe f874 	bl	8004460 <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	4a3a      	ldr	r2, [pc, #232]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e068      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006388:	4b38      	ldr	r3, [pc, #224]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	220c      	movs	r2, #12
 800638e:	4013      	ands	r3, r2
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006392:	4b34      	ldr	r3, [pc, #208]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2201      	movs	r2, #1
 8006398:	4013      	ands	r3, r2
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d21e      	bcs.n	80063de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a0:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4393      	bics	r3, r2
 80063a8:	0019      	movs	r1, r3
 80063aa:	4b2e      	ldr	r3, [pc, #184]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063b2:	f7fe f855 	bl	8004460 <HAL_GetTick>
 80063b6:	0003      	movs	r3, r0
 80063b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	e009      	b.n	80063d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063bc:	f7fe f850 	bl	8004460 <HAL_GetTick>
 80063c0:	0002      	movs	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	4a28      	ldr	r2, [pc, #160]	; (8006468 <HAL_RCC_ClockConfig+0x274>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e044      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d0:	4b24      	ldr	r3, [pc, #144]	; (8006464 <HAL_RCC_ClockConfig+0x270>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	4013      	ands	r3, r2
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1ee      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2204      	movs	r2, #4
 80063e4:	4013      	ands	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <HAL_RCC_ClockConfig+0x27c>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	0019      	movs	r1, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	4b1d      	ldr	r3, [pc, #116]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 80063f8:	430a      	orrs	r2, r1
 80063fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	4013      	ands	r3, r2
 8006404:	d00a      	beq.n	800641c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <HAL_RCC_ClockConfig+0x280>)
 800640c:	4013      	ands	r3, r2
 800640e:	0019      	movs	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	00da      	lsls	r2, r3, #3
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006418:	430a      	orrs	r2, r1
 800641a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800641c:	f000 f8b6 	bl	800658c <HAL_RCC_GetSysClockFreq>
 8006420:	0001      	movs	r1, r0
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <HAL_RCC_ClockConfig+0x278>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	220f      	movs	r2, #15
 800642a:	4013      	ands	r3, r2
 800642c:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_RCC_ClockConfig+0x284>)
 800642e:	5cd3      	ldrb	r3, [r2, r3]
 8006430:	000a      	movs	r2, r1
 8006432:	40da      	lsrs	r2, r3
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_RCC_ClockConfig+0x288>)
 8006436:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <HAL_RCC_ClockConfig+0x28c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	250b      	movs	r5, #11
 800643e:	197c      	adds	r4, r7, r5
 8006440:	0018      	movs	r0, r3
 8006442:	f7fd ffc7 	bl	80043d4 <HAL_InitTick>
 8006446:	0003      	movs	r3, r0
 8006448:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800644a:	197b      	adds	r3, r7, r5
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006452:	197b      	adds	r3, r7, r5
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	e000      	b.n	800645a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bdb0      	pop	{r4, r5, r7, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	40022000 	.word	0x40022000
 8006468:	00001388 	.word	0x00001388
 800646c:	40021000 	.word	0x40021000
 8006470:	fffff8ff 	.word	0xfffff8ff
 8006474:	ffffc7ff 	.word	0xffffc7ff
 8006478:	0800b7f0 	.word	0x0800b7f0
 800647c:	20000000 	.word	0x20000000
 8006480:	20000004 	.word	0x20000004

08006484 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b08d      	sub	sp, #52	; 0x34
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8006490:	241c      	movs	r4, #28
 8006492:	193b      	adds	r3, r7, r4
 8006494:	0018      	movs	r0, r3
 8006496:	2314      	movs	r3, #20
 8006498:	001a      	movs	r2, r3
 800649a:	2100      	movs	r1, #0
 800649c:	f003 f95a 	bl	8009754 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80064a0:	0020      	movs	r0, r4
 80064a2:	183b      	adds	r3, r7, r0
 80064a4:	2202      	movs	r2, #2
 80064a6:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80064a8:	183b      	adds	r3, r7, r0
 80064aa:	2202      	movs	r2, #2
 80064ac:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80064ae:	183b      	adds	r3, r7, r0
 80064b0:	2200      	movs	r2, #0
 80064b2:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11a      	bne.n	80064f0 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 80064ba:	183b      	adds	r3, r7, r0
 80064bc:	2280      	movs	r2, #128	; 0x80
 80064be:	0052      	lsls	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80064c2:	183b      	adds	r3, r7, r0
 80064c4:	2200      	movs	r2, #0
 80064c6:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 80064ce:	2101      	movs	r1, #1
 80064d0:	430a      	orrs	r2, r1
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	2201      	movs	r2, #1
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80064e0:	183a      	adds	r2, r7, r0
 80064e2:	23a0      	movs	r3, #160	; 0xa0
 80064e4:	05db      	lsls	r3, r3, #23
 80064e6:	0011      	movs	r1, r2
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7fe fa3f 	bl	800496c <HAL_GPIO_Init>
 80064ee:	e038      	b.n	8006562 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d11a      	bne.n	800652c <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 80064f6:	201c      	movs	r0, #28
 80064f8:	183b      	adds	r3, r7, r0
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	0192      	lsls	r2, r2, #6
 80064fe:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8006500:	183b      	adds	r3, r7, r0
 8006502:	2200      	movs	r2, #0
 8006504:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 800650c:	2102      	movs	r1, #2
 800650e:	430a      	orrs	r2, r1
 8006510:	62da      	str	r2, [r3, #44]	; 0x2c
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	2202      	movs	r2, #2
 8006518:	4013      	ands	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800651e:	183b      	adds	r3, r7, r0
 8006520:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_RCC_MCOConfig+0x100>)
 8006522:	0019      	movs	r1, r3
 8006524:	0010      	movs	r0, r2
 8006526:	f7fe fa21 	bl	800496c <HAL_GPIO_Init>
 800652a:	e01a      	b.n	8006562 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 800652c:	201c      	movs	r0, #28
 800652e:	183b      	adds	r3, r7, r0
 8006530:	2280      	movs	r2, #128	; 0x80
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8006536:	183b      	adds	r3, r7, r0
 8006538:	2200      	movs	r2, #0
 800653a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4b0f      	ldr	r3, [pc, #60]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 8006542:	2101      	movs	r1, #1
 8006544:	430a      	orrs	r2, r1
 8006546:	62da      	str	r2, [r3, #44]	; 0x2c
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	2201      	movs	r2, #1
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006554:	183a      	adds	r2, r7, r0
 8006556:	23a0      	movs	r3, #160	; 0xa0
 8006558:	05db      	lsls	r3, r3, #23
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f7fe fa05 	bl	800496c <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <HAL_RCC_MCOConfig+0x104>)
 8006568:	4013      	ands	r3, r2
 800656a:	0019      	movs	r1, r3
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	431a      	orrs	r2, r3
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <HAL_RCC_MCOConfig+0xfc>)
 8006574:	430a      	orrs	r2, r1
 8006576:	60da      	str	r2, [r3, #12]
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b00d      	add	sp, #52	; 0x34
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	50000400 	.word	0x50000400
 8006588:	80ffffff 	.word	0x80ffffff

0800658c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b08e      	sub	sp, #56	; 0x38
 8006590:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006592:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659a:	230c      	movs	r3, #12
 800659c:	4013      	ands	r3, r2
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d014      	beq.n	80065cc <HAL_RCC_GetSysClockFreq+0x40>
 80065a2:	d900      	bls.n	80065a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80065a4:	e07b      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x112>
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d002      	beq.n	80065b0 <HAL_RCC_GetSysClockFreq+0x24>
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d00b      	beq.n	80065c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ae:	e076      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80065b0:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2210      	movs	r2, #16
 80065b6:	4013      	ands	r3, r2
 80065b8:	d002      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80065ba:	4b43      	ldr	r3, [pc, #268]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80065be:	e07c      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80065c0:	4b42      	ldr	r3, [pc, #264]	; (80066cc <HAL_RCC_GetSysClockFreq+0x140>)
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065c4:	e079      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065c6:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80065c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065ca:	e076      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	0c9a      	lsrs	r2, r3, #18
 80065d0:	230f      	movs	r3, #15
 80065d2:	401a      	ands	r2, r3
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80065d6:	5c9b      	ldrb	r3, [r3, r2]
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	0d9a      	lsrs	r2, r3, #22
 80065de:	2303      	movs	r3, #3
 80065e0:	4013      	ands	r3, r2
 80065e2:	3301      	adds	r3, #1
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065e6:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	025b      	lsls	r3, r3, #9
 80065ee:	4013      	ands	r3, r2
 80065f0:	d01a      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	4a35      	ldr	r2, [pc, #212]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80065fc:	2300      	movs	r3, #0
 80065fe:	69b8      	ldr	r0, [r7, #24]
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	f7f9 ffab 	bl	800055c <__aeabi_lmul>
 8006606:	0002      	movs	r2, r0
 8006608:	000b      	movs	r3, r1
 800660a:	0010      	movs	r0, r2
 800660c:	0019      	movs	r1, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f7f9 ff7f 	bl	800051c <__aeabi_uldivmod>
 800661e:	0002      	movs	r2, r0
 8006620:	000b      	movs	r3, r1
 8006622:	0013      	movs	r3, r2
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	e037      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2210      	movs	r2, #16
 800662e:	4013      	ands	r3, r2
 8006630:	d01a      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800663c:	2300      	movs	r3, #0
 800663e:	68b8      	ldr	r0, [r7, #8]
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	f7f9 ff8b 	bl	800055c <__aeabi_lmul>
 8006646:	0002      	movs	r2, r0
 8006648:	000b      	movs	r3, r1
 800664a:	0010      	movs	r0, r2
 800664c:	0019      	movs	r1, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f7f9 ff5f 	bl	800051c <__aeabi_uldivmod>
 800665e:	0002      	movs	r2, r0
 8006660:	000b      	movs	r3, r1
 8006662:	0013      	movs	r3, r2
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	e017      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	0018      	movs	r0, r3
 800666c:	2300      	movs	r3, #0
 800666e:	0019      	movs	r1, r3
 8006670:	4a16      	ldr	r2, [pc, #88]	; (80066cc <HAL_RCC_GetSysClockFreq+0x140>)
 8006672:	2300      	movs	r3, #0
 8006674:	f7f9 ff72 	bl	800055c <__aeabi_lmul>
 8006678:	0002      	movs	r2, r0
 800667a:	000b      	movs	r3, r1
 800667c:	0010      	movs	r0, r2
 800667e:	0019      	movs	r1, r3
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	001c      	movs	r4, r3
 8006684:	2300      	movs	r3, #0
 8006686:	001d      	movs	r5, r3
 8006688:	0022      	movs	r2, r4
 800668a:	002b      	movs	r3, r5
 800668c:	f7f9 ff46 	bl	800051c <__aeabi_uldivmod>
 8006690:	0002      	movs	r2, r0
 8006692:	000b      	movs	r3, r1
 8006694:	0013      	movs	r3, r2
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800669c:	e00d      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	0b5b      	lsrs	r3, r3, #13
 80066a4:	2207      	movs	r2, #7
 80066a6:	4013      	ands	r3, r2
 80066a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	3301      	adds	r3, #1
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	0212      	lsls	r2, r2, #8
 80066b2:	409a      	lsls	r2, r3
 80066b4:	0013      	movs	r3, r2
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b00e      	add	sp, #56	; 0x38
 80066c2:	bdb0      	pop	{r4, r5, r7, pc}
 80066c4:	40021000 	.word	0x40021000
 80066c8:	003d0900 	.word	0x003d0900
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	007a1200 	.word	0x007a1200
 80066d4:	0800b808 	.word	0x0800b808

080066d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80066de:	681b      	ldr	r3, [r3, #0]
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000000 	.word	0x20000000

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066f0:	f7ff fff2 	bl	80066d8 <HAL_RCC_GetHCLKFreq>
 80066f4:	0001      	movs	r1, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	2207      	movs	r2, #7
 80066fe:	4013      	ands	r3, r2
 8006700:	4a04      	ldr	r2, [pc, #16]	; (8006714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006702:	5cd3      	ldrb	r3, [r2, r3]
 8006704:	40d9      	lsrs	r1, r3
 8006706:	000b      	movs	r3, r1
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	40021000 	.word	0x40021000
 8006714:	0800b800 	.word	0x0800b800

08006718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800671c:	f7ff ffdc 	bl	80066d8 <HAL_RCC_GetHCLKFreq>
 8006720:	0001      	movs	r1, r0
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	0adb      	lsrs	r3, r3, #11
 8006728:	2207      	movs	r2, #7
 800672a:	4013      	ands	r3, r2
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	40d9      	lsrs	r1, r3
 8006732:	000b      	movs	r3, r1
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	40021000 	.word	0x40021000
 8006740:	0800b800 	.word	0x0800b800

08006744 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800674c:	2017      	movs	r0, #23
 800674e:	183b      	adds	r3, r7, r0
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2220      	movs	r2, #32
 800675a:	4013      	ands	r3, r2
 800675c:	d100      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800675e:	e0c7      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006760:	4b8b      	ldr	r3, [pc, #556]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	055b      	lsls	r3, r3, #21
 8006768:	4013      	ands	r3, r2
 800676a:	d109      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676c:	4b88      	ldr	r3, [pc, #544]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800676e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006770:	4b87      	ldr	r3, [pc, #540]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	0549      	lsls	r1, r1, #21
 8006776:	430a      	orrs	r2, r1
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800677a:	183b      	adds	r3, r7, r0
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006780:	4b84      	ldr	r3, [pc, #528]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4013      	ands	r3, r2
 800678a:	d11a      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800678c:	4b81      	ldr	r3, [pc, #516]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b80      	ldr	r3, [pc, #512]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0049      	lsls	r1, r1, #1
 8006796:	430a      	orrs	r2, r1
 8006798:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679a:	f7fd fe61 	bl	8004460 <HAL_GetTick>
 800679e:	0003      	movs	r3, r0
 80067a0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	e008      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a4:	f7fd fe5c 	bl	8004460 <HAL_GetTick>
 80067a8:	0002      	movs	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b64      	cmp	r3, #100	; 0x64
 80067b0:	d901      	bls.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e0e8      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b6:	4b77      	ldr	r3, [pc, #476]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4013      	ands	r3, r2
 80067c0:	d0f0      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80067c2:	4b73      	ldr	r3, [pc, #460]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	23c0      	movs	r3, #192	; 0xc0
 80067c8:	039b      	lsls	r3, r3, #14
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	23c0      	movs	r3, #192	; 0xc0
 80067d4:	039b      	lsls	r3, r3, #14
 80067d6:	4013      	ands	r3, r2
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d013      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	23c0      	movs	r3, #192	; 0xc0
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	401a      	ands	r2, r3
 80067e8:	23c0      	movs	r3, #192	; 0xc0
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d10a      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067f0:	4b67      	ldr	r3, [pc, #412]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	401a      	ands	r2, r3
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	029b      	lsls	r3, r3, #10
 80067fe:	429a      	cmp	r2, r3
 8006800:	d101      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0c0      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006806:	4b62      	ldr	r3, [pc, #392]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800680a:	23c0      	movs	r3, #192	; 0xc0
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	4013      	ands	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d03b      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	23c0      	movs	r3, #192	; 0xc0
 800681e:	029b      	lsls	r3, r3, #10
 8006820:	4013      	ands	r3, r2
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d033      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2220      	movs	r2, #32
 800682e:	4013      	ands	r3, r2
 8006830:	d02e      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006832:	4b57      	ldr	r3, [pc, #348]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006836:	4a58      	ldr	r2, [pc, #352]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800683c:	4b54      	ldr	r3, [pc, #336]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800683e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006840:	4b53      	ldr	r3, [pc, #332]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006842:	2180      	movs	r1, #128	; 0x80
 8006844:	0309      	lsls	r1, r1, #12
 8006846:	430a      	orrs	r2, r1
 8006848:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800684a:	4b51      	ldr	r3, [pc, #324]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800684c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800684e:	4b50      	ldr	r3, [pc, #320]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006850:	4952      	ldr	r1, [pc, #328]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006852:	400a      	ands	r2, r1
 8006854:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006856:	4b4e      	ldr	r3, [pc, #312]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d014      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006866:	f7fd fdfb 	bl	8004460 <HAL_GetTick>
 800686a:	0003      	movs	r3, r0
 800686c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686e:	e009      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006870:	f7fd fdf6 	bl	8004460 <HAL_GetTick>
 8006874:	0002      	movs	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	4a49      	ldr	r2, [pc, #292]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e081      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006884:	4b42      	ldr	r3, [pc, #264]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4013      	ands	r3, r2
 800688e:	d0ef      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2220      	movs	r2, #32
 8006896:	4013      	ands	r3, r2
 8006898:	d01f      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	23c0      	movs	r3, #192	; 0xc0
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	401a      	ands	r2, r3
 80068a4:	23c0      	movs	r3, #192	; 0xc0
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d10c      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80068ac:	4b38      	ldr	r3, [pc, #224]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3c      	ldr	r2, [pc, #240]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	0019      	movs	r1, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	23c0      	movs	r3, #192	; 0xc0
 80068bc:	039b      	lsls	r3, r3, #14
 80068be:	401a      	ands	r2, r3
 80068c0:	4b33      	ldr	r3, [pc, #204]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068c2:	430a      	orrs	r2, r1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	4b32      	ldr	r3, [pc, #200]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	23c0      	movs	r3, #192	; 0xc0
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	401a      	ands	r2, r3
 80068d4:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068d6:	430a      	orrs	r2, r1
 80068d8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068da:	2317      	movs	r3, #23
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068ea:	492f      	ldr	r1, [pc, #188]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068ec:	400a      	ands	r2, r1
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	d009      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068fa:	4b25      	ldr	r3, [pc, #148]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	2203      	movs	r2, #3
 8006900:	4393      	bics	r3, r2
 8006902:	0019      	movs	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	4b21      	ldr	r3, [pc, #132]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800690a:	430a      	orrs	r2, r1
 800690c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2202      	movs	r2, #2
 8006914:	4013      	ands	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	220c      	movs	r2, #12
 800691e:	4393      	bics	r3, r2
 8006920:	0019      	movs	r1, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006928:	430a      	orrs	r2, r1
 800692a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2204      	movs	r2, #4
 8006932:	4013      	ands	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006936:	4b16      	ldr	r3, [pc, #88]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693c:	4013      	ands	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006946:	430a      	orrs	r2, r1
 8006948:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2208      	movs	r2, #8
 8006950:	4013      	ands	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006958:	4a15      	ldr	r2, [pc, #84]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800695a:	4013      	ands	r3, r2
 800695c:	0019      	movs	r1, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006964:	430a      	orrs	r2, r1
 8006966:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	4013      	ands	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006978:	4013      	ands	r3, r2
 800697a:	0019      	movs	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006982:	430a      	orrs	r2, r1
 8006984:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b006      	add	sp, #24
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40021000 	.word	0x40021000
 8006994:	40007000 	.word	0x40007000
 8006998:	fffcffff 	.word	0xfffcffff
 800699c:	fff7ffff 	.word	0xfff7ffff
 80069a0:	00001388 	.word	0x00001388
 80069a4:	ffcfffff 	.word	0xffcfffff
 80069a8:	efffffff 	.word	0xefffffff
 80069ac:	fffff3ff 	.word	0xfffff3ff
 80069b0:	ffffcfff 	.word	0xffffcfff
 80069b4:	fff3ffff 	.word	0xfff3ffff

080069b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e083      	b.n	8006ad2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	2382      	movs	r3, #130	; 0x82
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	429a      	cmp	r2, r3
 80069dc:	d009      	beq.n	80069f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	61da      	str	r2, [r3, #28]
 80069e4:	e005      	b.n	80069f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2251      	movs	r2, #81	; 0x51
 80069fc:	5c9b      	ldrb	r3, [r3, r2]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d107      	bne.n	8006a14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2250      	movs	r2, #80	; 0x50
 8006a08:	2100      	movs	r1, #0
 8006a0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fd f9be 	bl	8003d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2251      	movs	r2, #81	; 0x51
 8006a18:	2102      	movs	r1, #2
 8006a1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2140      	movs	r1, #64	; 0x40
 8006a28:	438a      	bics	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	2382      	movs	r3, #130	; 0x82
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	401a      	ands	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	2384      	movs	r3, #132	; 0x84
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	400b      	ands	r3, r1
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68d9      	ldr	r1, [r3, #12]
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2102      	movs	r1, #2
 8006a54:	400b      	ands	r3, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	400b      	ands	r3, r1
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6999      	ldr	r1, [r3, #24]
 8006a66:	2380      	movs	r3, #128	; 0x80
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2138      	movs	r1, #56	; 0x38
 8006a74:	400b      	ands	r3, r1
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2180      	movs	r1, #128	; 0x80
 8006a7e:	400b      	ands	r3, r1
 8006a80:	431a      	orrs	r2, r3
 8006a82:	0011      	movs	r1, r2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	019b      	lsls	r3, r3, #6
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	0019      	movs	r1, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4907      	ldr	r1, [pc, #28]	; (8006adc <HAL_SPI_Init+0x124>)
 8006abe:	400a      	ands	r2, r1
 8006ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2251      	movs	r2, #81	; 0x51
 8006acc:	2101      	movs	r1, #1
 8006ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	fffff7ff 	.word	0xfffff7ff

08006ae0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	; 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	001a      	movs	r2, r3
 8006aee:	1cbb      	adds	r3, r7, #2
 8006af0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006af2:	2301      	movs	r3, #1
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006af6:	232b      	movs	r3, #43	; 0x2b
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2250      	movs	r2, #80	; 0x50
 8006b02:	5c9b      	ldrb	r3, [r3, r2]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x2c>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e1b0      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x38e>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2250      	movs	r2, #80	; 0x50
 8006b10:	2101      	movs	r1, #1
 8006b12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b14:	f7fd fca4 	bl	8004460 <HAL_GetTick>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b1c:	2023      	movs	r0, #35	; 0x23
 8006b1e:	183b      	adds	r3, r7, r0
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	2151      	movs	r1, #81	; 0x51
 8006b24:	5c52      	ldrb	r2, [r2, r1]
 8006b26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b2e:	231a      	movs	r3, #26
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	1cba      	adds	r2, r7, #2
 8006b34:	8812      	ldrh	r2, [r2, #0]
 8006b36:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b38:	183b      	adds	r3, r7, r0
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d011      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x84>
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	2382      	movs	r3, #130	; 0x82
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d107      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x7a>
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d004      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b5a:	232b      	movs	r3, #43	; 0x2b
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2202      	movs	r2, #2
 8006b60:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b62:	e17d      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <HAL_SPI_TransmitReceive+0x98>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_SPI_TransmitReceive+0x98>
 8006b70:	1cbb      	adds	r3, r7, #2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006b78:	232b      	movs	r3, #43	; 0x2b
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b80:	e16e      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2251      	movs	r2, #81	; 0x51
 8006b86:	5c9b      	ldrb	r3, [r3, r2]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d003      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2251      	movs	r2, #81	; 0x51
 8006b92:	2105      	movs	r1, #5
 8006b94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1cba      	adds	r2, r7, #2
 8006ba6:	8812      	ldrh	r2, [r2, #0]
 8006ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1cba      	adds	r2, r7, #2
 8006bae:	8812      	ldrh	r2, [r2, #0]
 8006bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	1cba      	adds	r2, r7, #2
 8006bbc:	8812      	ldrh	r2, [r2, #0]
 8006bbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1cba      	adds	r2, r7, #2
 8006bc4:	8812      	ldrh	r2, [r2, #0]
 8006bc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d007      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2140      	movs	r1, #64	; 0x40
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d000      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x120>
 8006bfe:	e07f      	b.n	8006d00 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x134>
 8006c08:	231a      	movs	r3, #26
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d000      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x134>
 8006c12:	e06a      	b.n	8006cea <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	1c9a      	adds	r2, r3, #2
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c38:	e057      	b.n	8006cea <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2202      	movs	r2, #2
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d11b      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x1a0>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0x1a0>
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d113      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	1c9a      	adds	r2, r3, #2
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2201      	movs	r2, #1
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d119      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x1e2>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d014      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	b292      	uxth	r2, r2
 8006ca4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cc2:	f7fd fbcd 	bl	8004460 <HAL_GetTick>
 8006cc6:	0002      	movs	r2, r0
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d80b      	bhi.n	8006cea <HAL_SPI_TransmitReceive+0x20a>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	d008      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006cd8:	232b      	movs	r3, #43	; 0x2b
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2203      	movs	r2, #3
 8006cde:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2251      	movs	r2, #81	; 0x51
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	5499      	strb	r1, [r3, r2]
        goto error;
 8006ce8:	e0ba      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1a2      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x15a>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d19d      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x15a>
 8006cfe:	e083      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x234>
 8006d08:	231a      	movs	r3, #26
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d000      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x234>
 8006d12:	e06f      	b.n	8006df4 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d3a:	e05b      	b.n	8006df4 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2202      	movs	r2, #2
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d11c      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x2a4>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d017      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x2a4>
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d114      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	330c      	adds	r3, #12
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d119      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x2e6>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d014      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dc6:	f7fd fb4b 	bl	8004460 <HAL_GetTick>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d802      	bhi.n	8006ddc <HAL_SPI_TransmitReceive+0x2fc>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	3301      	adds	r3, #1
 8006dda:	d102      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x302>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006de2:	232b      	movs	r3, #43	; 0x2b
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	2203      	movs	r2, #3
 8006de8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2251      	movs	r2, #81	; 0x51
 8006dee:	2101      	movs	r1, #1
 8006df0:	5499      	strb	r1, [r3, r2]
        goto error;
 8006df2:	e035      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d19e      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x25c>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d199      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 f8c0 	bl	8006f94 <SPI_EndRxTxTransaction>
 8006e14:	1e03      	subs	r3, r0, #0
 8006e16:	d007      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006e18:	232b      	movs	r3, #43	; 0x2b
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e26:	e01b      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8006e4e:	232b      	movs	r3, #43	; 0x2b
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	2201      	movs	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e003      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2251      	movs	r2, #81	; 0x51
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2250      	movs	r2, #80	; 0x50
 8006e64:	2100      	movs	r1, #0
 8006e66:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e68:	232b      	movs	r3, #43	; 0x2b
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	781b      	ldrb	r3, [r3, #0]
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b00c      	add	sp, #48	; 0x30
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	1dfb      	adds	r3, r7, #7
 8006e86:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e88:	f7fd faea 	bl	8004460 <HAL_GetTick>
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	18d3      	adds	r3, r2, r3
 8006e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e98:	f7fd fae2 	bl	8004460 <HAL_GetTick>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ea0:	4b3a      	ldr	r3, [pc, #232]	; (8006f8c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	015b      	lsls	r3, r3, #5
 8006ea6:	0d1b      	lsrs	r3, r3, #20
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	4353      	muls	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eae:	e058      	b.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	d055      	beq.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eb6:	f7fd fad3 	bl	8004460 <HAL_GetTick>
 8006eba:	0002      	movs	r2, r0
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d902      	bls.n	8006ecc <SPI_WaitFlagStateUntilTimeout+0x54>
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d142      	bne.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	21e0      	movs	r1, #224	; 0xe0
 8006ed8:	438a      	bics	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	2382      	movs	r3, #130	; 0x82
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d113      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d005      	beq.n	8006f00 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d107      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2140      	movs	r1, #64	; 0x40
 8006f0c:	438a      	bics	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f14:	2380      	movs	r3, #128	; 0x80
 8006f16:	019b      	lsls	r3, r3, #6
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d110      	bne.n	8006f3e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	491a      	ldr	r1, [pc, #104]	; (8006f90 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f28:	400a      	ands	r2, r1
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2180      	movs	r1, #128	; 0x80
 8006f38:	0189      	lsls	r1, r1, #6
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2251      	movs	r2, #81	; 0x51
 8006f42:	2101      	movs	r1, #1
 8006f44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2250      	movs	r2, #80	; 0x50
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e017      	b.n	8006f82 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	425a      	negs	r2, r3
 8006f72:	4153      	adcs	r3, r2
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	001a      	movs	r2, r3
 8006f78:	1dfb      	adds	r3, r7, #7
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d197      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b008      	add	sp, #32
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	20000000 	.word	0x20000000
 8006f90:	ffffdfff 	.word	0xffffdfff

08006f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <SPI_EndRxTxTransaction+0x84>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	491d      	ldr	r1, [pc, #116]	; (800701c <SPI_EndRxTxTransaction+0x88>)
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7f9 f8ca 	bl	8000140 <__udivsi3>
 8006fac:	0003      	movs	r3, r0
 8006fae:	001a      	movs	r2, r3
 8006fb0:	0013      	movs	r3, r2
 8006fb2:	015b      	lsls	r3, r3, #5
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	189b      	adds	r3, r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	2382      	movs	r3, #130	; 0x82
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d112      	bne.n	8006ff0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	0013      	movs	r3, r2
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	f7ff ff4e 	bl	8006e78 <SPI_WaitFlagStateUntilTimeout>
 8006fdc:	1e03      	subs	r3, r0, #0
 8006fde:	d016      	beq.n	800700e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e00f      	b.n	8007010 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	4013      	ands	r3, r2
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d0f2      	beq.n	8006ff0 <SPI_EndRxTxTransaction+0x5c>
 800700a:	e000      	b.n	800700e <SPI_EndRxTxTransaction+0x7a>
        break;
 800700c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	b006      	add	sp, #24
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000000 	.word	0x20000000
 800701c:	016e3600 	.word	0x016e3600

08007020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e032      	b.n	8007098 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2239      	movs	r2, #57	; 0x39
 8007036:	5c9b      	ldrb	r3, [r3, r2]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d107      	bne.n	800704e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2238      	movs	r2, #56	; 0x38
 8007042:	2100      	movs	r1, #0
 8007044:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0018      	movs	r0, r3
 800704a:	f7fc fee5 	bl	8003e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2239      	movs	r2, #57	; 0x39
 8007052:	2102      	movs	r1, #2
 8007054:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3304      	adds	r3, #4
 800705e:	0019      	movs	r1, r3
 8007060:	0010      	movs	r0, r2
 8007062:	f000 fd5b 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	223e      	movs	r2, #62	; 0x3e
 800706a:	2101      	movs	r1, #1
 800706c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	223a      	movs	r2, #58	; 0x3a
 8007072:	2101      	movs	r1, #1
 8007074:	5499      	strb	r1, [r3, r2]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	223b      	movs	r2, #59	; 0x3b
 800707a:	2101      	movs	r1, #1
 800707c:	5499      	strb	r1, [r3, r2]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	223c      	movs	r2, #60	; 0x3c
 8007082:	2101      	movs	r1, #1
 8007084:	5499      	strb	r1, [r3, r2]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	223d      	movs	r2, #61	; 0x3d
 800708a:	2101      	movs	r1, #1
 800708c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2239      	movs	r2, #57	; 0x39
 8007092:	2101      	movs	r1, #1
 8007094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	0018      	movs	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	b002      	add	sp, #8
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2239      	movs	r2, #57	; 0x39
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e036      	b.n	8007126 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2239      	movs	r2, #57	; 0x39
 80070bc:	2102      	movs	r1, #2
 80070be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2101      	movs	r1, #1
 80070cc:	430a      	orrs	r2, r1
 80070ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	05db      	lsls	r3, r3, #23
 80070d8:	429a      	cmp	r2, r3
 80070da:	d009      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x50>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a13      	ldr	r2, [pc, #76]	; (8007130 <HAL_TIM_Base_Start_IT+0x90>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x50>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a12      	ldr	r2, [pc, #72]	; (8007134 <HAL_TIM_Base_Start_IT+0x94>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d111      	bne.n	8007114 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2207      	movs	r2, #7
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d010      	beq.n	8007124 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2101      	movs	r1, #1
 800710e:	430a      	orrs	r2, r1
 8007110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007112:	e007      	b.n	8007124 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2101      	movs	r1, #1
 8007120:	430a      	orrs	r2, r1
 8007122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	0018      	movs	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	b004      	add	sp, #16
 800712c:	bd80      	pop	{r7, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	40010800 	.word	0x40010800
 8007134:	40011400 	.word	0x40011400

08007138 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2101      	movs	r1, #1
 800714c:	438a      	bics	r2, r1
 800714e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4a0a      	ldr	r2, [pc, #40]	; (8007180 <HAL_TIM_Base_Stop_IT+0x48>)
 8007158:	4013      	ands	r3, r2
 800715a:	d107      	bne.n	800716c <HAL_TIM_Base_Stop_IT+0x34>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2101      	movs	r1, #1
 8007168:	438a      	bics	r2, r1
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2239      	movs	r2, #57	; 0x39
 8007170:	2101      	movs	r1, #1
 8007172:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	0018      	movs	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	b002      	add	sp, #8
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	00001111 	.word	0x00001111

08007184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e032      	b.n	80071fc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2239      	movs	r2, #57	; 0x39
 800719a:	5c9b      	ldrb	r3, [r3, r2]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2238      	movs	r2, #56	; 0x38
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	0018      	movs	r0, r3
 80071ae:	f000 f829 	bl	8007204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2239      	movs	r2, #57	; 0x39
 80071b6:	2102      	movs	r1, #2
 80071b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3304      	adds	r3, #4
 80071c2:	0019      	movs	r1, r3
 80071c4:	0010      	movs	r0, r2
 80071c6:	f000 fca9 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	223e      	movs	r2, #62	; 0x3e
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	223a      	movs	r2, #58	; 0x3a
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	223b      	movs	r2, #59	; 0x3b
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	223c      	movs	r2, #60	; 0x3c
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	223d      	movs	r2, #61	; 0x3d
 80071ee:	2101      	movs	r1, #1
 80071f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2239      	movs	r2, #57	; 0x39
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b002      	add	sp, #8
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800720c:	46c0      	nop			; (mov r8, r8)
 800720e:	46bd      	mov	sp, r7
 8007210:	b002      	add	sp, #8
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d108      	bne.n	8007236 <HAL_TIM_PWM_Start+0x22>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	223a      	movs	r2, #58	; 0x3a
 8007228:	5c9b      	ldrb	r3, [r3, r2]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	4193      	sbcs	r3, r2
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e01f      	b.n	8007276 <HAL_TIM_PWM_Start+0x62>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d108      	bne.n	800724e <HAL_TIM_PWM_Start+0x3a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	223b      	movs	r2, #59	; 0x3b
 8007240:	5c9b      	ldrb	r3, [r3, r2]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	4193      	sbcs	r3, r2
 800724a:	b2db      	uxtb	r3, r3
 800724c:	e013      	b.n	8007276 <HAL_TIM_PWM_Start+0x62>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d108      	bne.n	8007266 <HAL_TIM_PWM_Start+0x52>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	223c      	movs	r2, #60	; 0x3c
 8007258:	5c9b      	ldrb	r3, [r3, r2]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	4193      	sbcs	r3, r2
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e007      	b.n	8007276 <HAL_TIM_PWM_Start+0x62>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	223d      	movs	r2, #61	; 0x3d
 800726a:	5c9b      	ldrb	r3, [r3, r2]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	1e5a      	subs	r2, r3, #1
 8007272:	4193      	sbcs	r3, r2
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e04d      	b.n	800731a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <HAL_TIM_PWM_Start+0x7a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	223a      	movs	r2, #58	; 0x3a
 8007288:	2102      	movs	r1, #2
 800728a:	5499      	strb	r1, [r3, r2]
 800728c:	e013      	b.n	80072b6 <HAL_TIM_PWM_Start+0xa2>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d104      	bne.n	800729e <HAL_TIM_PWM_Start+0x8a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	223b      	movs	r2, #59	; 0x3b
 8007298:	2102      	movs	r1, #2
 800729a:	5499      	strb	r1, [r3, r2]
 800729c:	e00b      	b.n	80072b6 <HAL_TIM_PWM_Start+0xa2>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d104      	bne.n	80072ae <HAL_TIM_PWM_Start+0x9a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	223c      	movs	r2, #60	; 0x3c
 80072a8:	2102      	movs	r1, #2
 80072aa:	5499      	strb	r1, [r3, r2]
 80072ac:	e003      	b.n	80072b6 <HAL_TIM_PWM_Start+0xa2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	223d      	movs	r2, #61	; 0x3d
 80072b2:	2102      	movs	r1, #2
 80072b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	2201      	movs	r2, #1
 80072be:	0018      	movs	r0, r3
 80072c0:	f000 ff3c 	bl	800813c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	05db      	lsls	r3, r3, #23
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d009      	beq.n	80072e4 <HAL_TIM_PWM_Start+0xd0>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <HAL_TIM_PWM_Start+0x110>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_TIM_PWM_Start+0xd0>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a12      	ldr	r2, [pc, #72]	; (8007328 <HAL_TIM_PWM_Start+0x114>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d111      	bne.n	8007308 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2207      	movs	r2, #7
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d010      	beq.n	8007318 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2101      	movs	r1, #1
 8007302:	430a      	orrs	r2, r1
 8007304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	e007      	b.n	8007318 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2101      	movs	r1, #1
 8007314:	430a      	orrs	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	0018      	movs	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	b004      	add	sp, #16
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	40010800 	.word	0x40010800
 8007328:	40011400 	.word	0x40011400

0800732c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	0018      	movs	r0, r3
 8007340:	f000 fefc 	bl	800813c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_TIM_PWM_Stop+0x78>)
 800734c:	4013      	ands	r3, r2
 800734e:	d107      	bne.n	8007360 <HAL_TIM_PWM_Stop+0x34>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2101      	movs	r1, #1
 800735c:	438a      	bics	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <HAL_TIM_PWM_Stop+0x44>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	223a      	movs	r2, #58	; 0x3a
 800736a:	2101      	movs	r1, #1
 800736c:	5499      	strb	r1, [r3, r2]
 800736e:	e013      	b.n	8007398 <HAL_TIM_PWM_Stop+0x6c>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d104      	bne.n	8007380 <HAL_TIM_PWM_Stop+0x54>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	223b      	movs	r2, #59	; 0x3b
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]
 800737e:	e00b      	b.n	8007398 <HAL_TIM_PWM_Stop+0x6c>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b08      	cmp	r3, #8
 8007384:	d104      	bne.n	8007390 <HAL_TIM_PWM_Stop+0x64>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	223c      	movs	r2, #60	; 0x3c
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]
 800738e:	e003      	b.n	8007398 <HAL_TIM_PWM_Stop+0x6c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	223d      	movs	r2, #61	; 0x3d
 8007394:	2101      	movs	r1, #1
 8007396:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	0018      	movs	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	b002      	add	sp, #8
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	00001111 	.word	0x00001111

080073a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e032      	b.n	8007420 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2239      	movs	r2, #57	; 0x39
 80073be:	5c9b      	ldrb	r3, [r3, r2]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d107      	bne.n	80073d6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2238      	movs	r2, #56	; 0x38
 80073ca:	2100      	movs	r1, #0
 80073cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f000 f829 	bl	8007428 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2239      	movs	r2, #57	; 0x39
 80073da:	2102      	movs	r1, #2
 80073dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	0019      	movs	r1, r3
 80073e8:	0010      	movs	r0, r2
 80073ea:	f000 fb97 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	223e      	movs	r2, #62	; 0x3e
 80073f2:	2101      	movs	r1, #1
 80073f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	223a      	movs	r2, #58	; 0x3a
 80073fa:	2101      	movs	r1, #1
 80073fc:	5499      	strb	r1, [r3, r2]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	223b      	movs	r2, #59	; 0x3b
 8007402:	2101      	movs	r1, #1
 8007404:	5499      	strb	r1, [r3, r2]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	223c      	movs	r2, #60	; 0x3c
 800740a:	2101      	movs	r1, #1
 800740c:	5499      	strb	r1, [r3, r2]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	223d      	movs	r2, #61	; 0x3d
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2239      	movs	r2, #57	; 0x39
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b002      	add	sp, #8
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2202      	movs	r2, #2
 8007448:	4013      	ands	r3, r2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d124      	bne.n	8007498 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2202      	movs	r2, #2
 8007456:	4013      	ands	r3, r2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d11d      	bne.n	8007498 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2203      	movs	r2, #3
 8007462:	4252      	negs	r2, r2
 8007464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2203      	movs	r2, #3
 8007474:	4013      	ands	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0018      	movs	r0, r3
 800747c:	f7fb fab2 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8007480:	e007      	b.n	8007492 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	0018      	movs	r0, r3
 8007486:	f000 fb31 	bl	8007aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	0018      	movs	r0, r3
 800748e:	f000 fb35 	bl	8007afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2204      	movs	r2, #4
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d125      	bne.n	80074f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2204      	movs	r2, #4
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d11e      	bne.n	80074f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2205      	movs	r2, #5
 80074ba:	4252      	negs	r2, r2
 80074bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	23c0      	movs	r3, #192	; 0xc0
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4013      	ands	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	0018      	movs	r0, r3
 80074d6:	f7fb fa85 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 80074da:	e007      	b.n	80074ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	0018      	movs	r0, r3
 80074e0:	f000 fb04 	bl	8007aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	0018      	movs	r0, r3
 80074e8:	f000 fb08 	bl	8007afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2208      	movs	r2, #8
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d124      	bne.n	800754a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2208      	movs	r2, #8
 8007508:	4013      	ands	r3, r2
 800750a:	2b08      	cmp	r3, #8
 800750c:	d11d      	bne.n	800754a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2209      	movs	r2, #9
 8007514:	4252      	negs	r2, r2
 8007516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2204      	movs	r2, #4
 800751c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2203      	movs	r2, #3
 8007526:	4013      	ands	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	0018      	movs	r0, r3
 800752e:	f7fb fa59 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8007532:	e007      	b.n	8007544 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0018      	movs	r0, r3
 8007538:	f000 fad8 	bl	8007aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	0018      	movs	r0, r3
 8007540:	f000 fadc 	bl	8007afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2210      	movs	r2, #16
 8007552:	4013      	ands	r3, r2
 8007554:	2b10      	cmp	r3, #16
 8007556:	d125      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2210      	movs	r2, #16
 8007560:	4013      	ands	r3, r2
 8007562:	2b10      	cmp	r3, #16
 8007564:	d11e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2211      	movs	r2, #17
 800756c:	4252      	negs	r2, r2
 800756e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2208      	movs	r2, #8
 8007574:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	23c0      	movs	r3, #192	; 0xc0
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4013      	ands	r3, r2
 8007582:	d004      	beq.n	800758e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	0018      	movs	r0, r3
 8007588:	f7fb fa2c 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 800758c:	e007      	b.n	800759e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	0018      	movs	r0, r3
 8007592:	f000 faab 	bl	8007aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	0018      	movs	r0, r3
 800759a:	f000 faaf 	bl	8007afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2201      	movs	r2, #1
 80075ac:	4013      	ands	r3, r2
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10f      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d108      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2202      	movs	r2, #2
 80075c6:	4252      	negs	r2, r2
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7fb fa2d 	bl	8002a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	4013      	ands	r3, r2
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d10f      	bne.n	8007600 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2240      	movs	r2, #64	; 0x40
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d108      	bne.n	8007600 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2241      	movs	r2, #65	; 0x41
 80075f4:	4252      	negs	r2, r2
 80075f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	0018      	movs	r0, r3
 80075fc:	f000 fa86 	bl	8007b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007614:	2317      	movs	r3, #23
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2238      	movs	r2, #56	; 0x38
 8007620:	5c9b      	ldrb	r3, [r3, r2]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_TIM_IC_ConfigChannel+0x22>
 8007626:	2302      	movs	r3, #2
 8007628:	e08c      	b.n	8007744 <HAL_TIM_IC_ConfigChannel+0x13c>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2238      	movs	r2, #56	; 0x38
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11b      	bne.n	8007670 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007648:	f000 fbc0 	bl	8007dcc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	210c      	movs	r1, #12
 8007658:	438a      	bics	r2, r1
 800765a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	619a      	str	r2, [r3, #24]
 800766e:	e062      	b.n	8007736 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b04      	cmp	r3, #4
 8007674:	d11c      	bne.n	80076b0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007686:	f000 fc25 	bl	8007ed4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	492d      	ldr	r1, [pc, #180]	; (800774c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007696:	400a      	ands	r2, r1
 8007698:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6999      	ldr	r1, [r3, #24]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	021a      	lsls	r2, r3, #8
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	619a      	str	r2, [r3, #24]
 80076ae:	e042      	b.n	8007736 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d11b      	bne.n	80076ee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076c6:	f000 fc79 	bl	8007fbc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	210c      	movs	r1, #12
 80076d6:	438a      	bics	r2, r1
 80076d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	61da      	str	r2, [r3, #28]
 80076ec:	e023      	b.n	8007736 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d11c      	bne.n	800772e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007704:	f000 fc9a 	bl	800803c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69da      	ldr	r2, [r3, #28]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	490e      	ldr	r1, [pc, #56]	; (800774c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007714:	400a      	ands	r2, r1
 8007716:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69d9      	ldr	r1, [r3, #28]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	61da      	str	r2, [r3, #28]
 800772c:	e003      	b.n	8007736 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800772e:	2317      	movs	r3, #23
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	2201      	movs	r2, #1
 8007734:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2238      	movs	r2, #56	; 0x38
 800773a:	2100      	movs	r1, #0
 800773c:	5499      	strb	r1, [r3, r2]

  return status;
 800773e:	2317      	movs	r3, #23
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	781b      	ldrb	r3, [r3, #0]
}
 8007744:	0018      	movs	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	b006      	add	sp, #24
 800774a:	bd80      	pop	{r7, pc}
 800774c:	fffff3ff 	.word	0xfffff3ff

08007750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800775c:	2317      	movs	r3, #23
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2238      	movs	r2, #56	; 0x38
 8007768:	5c9b      	ldrb	r3, [r3, r2]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_TIM_PWM_ConfigChannel+0x22>
 800776e:	2302      	movs	r3, #2
 8007770:	e0ad      	b.n	80078ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2238      	movs	r2, #56	; 0x38
 8007776:	2101      	movs	r1, #1
 8007778:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b0c      	cmp	r3, #12
 800777e:	d100      	bne.n	8007782 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007780:	e076      	b.n	8007870 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b0c      	cmp	r3, #12
 8007786:	d900      	bls.n	800778a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007788:	e095      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d04e      	beq.n	800782e <HAL_TIM_PWM_ConfigChannel+0xde>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d900      	bls.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007796:	e08e      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d021      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80077a4:	e087      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0011      	movs	r1, r2
 80077ae:	0018      	movs	r0, r3
 80077b0:	f000 fa08 	bl	8007bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2108      	movs	r1, #8
 80077c0:	430a      	orrs	r2, r1
 80077c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2104      	movs	r1, #4
 80077d0:	438a      	bics	r2, r1
 80077d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6999      	ldr	r1, [r3, #24]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	619a      	str	r2, [r3, #24]
      break;
 80077e6:	e06b      	b.n	80078c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	0011      	movs	r1, r2
 80077f0:	0018      	movs	r0, r3
 80077f2:	f000 fa23 	bl	8007c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2180      	movs	r1, #128	; 0x80
 8007802:	0109      	lsls	r1, r1, #4
 8007804:	430a      	orrs	r2, r1
 8007806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4931      	ldr	r1, [pc, #196]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007814:	400a      	ands	r2, r1
 8007816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6999      	ldr	r1, [r3, #24]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	619a      	str	r2, [r3, #24]
      break;
 800782c:	e048      	b.n	80078c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	0011      	movs	r1, r2
 8007836:	0018      	movs	r0, r3
 8007838:	f000 fa42 	bl	8007cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2108      	movs	r1, #8
 8007848:	430a      	orrs	r2, r1
 800784a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2104      	movs	r1, #4
 8007858:	438a      	bics	r2, r1
 800785a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69d9      	ldr	r1, [r3, #28]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	61da      	str	r2, [r3, #28]
      break;
 800786e:	e027      	b.n	80078c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	0011      	movs	r1, r2
 8007878:	0018      	movs	r0, r3
 800787a:	f000 fa61 	bl	8007d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2180      	movs	r1, #128	; 0x80
 800788a:	0109      	lsls	r1, r1, #4
 800788c:	430a      	orrs	r2, r1
 800788e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	490f      	ldr	r1, [pc, #60]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800789c:	400a      	ands	r2, r1
 800789e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69d9      	ldr	r1, [r3, #28]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	021a      	lsls	r2, r3, #8
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	61da      	str	r2, [r3, #28]
      break;
 80078b4:	e004      	b.n	80078c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80078b6:	2317      	movs	r3, #23
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2238      	movs	r2, #56	; 0x38
 80078c4:	2100      	movs	r1, #0
 80078c6:	5499      	strb	r1, [r3, r2]

  return status;
 80078c8:	2317      	movs	r3, #23
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	781b      	ldrb	r3, [r3, #0]
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b006      	add	sp, #24
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	fffffbff 	.word	0xfffffbff

080078dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	230f      	movs	r3, #15
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2238      	movs	r2, #56	; 0x38
 80078f2:	5c9b      	ldrb	r3, [r3, r2]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_ConfigClockSource+0x20>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0bc      	b.n	8007a76 <HAL_TIM_ConfigClockSource+0x19a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2238      	movs	r2, #56	; 0x38
 8007900:	2101      	movs	r1, #1
 8007902:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2239      	movs	r2, #57	; 0x39
 8007908:	2102      	movs	r1, #2
 800790a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2277      	movs	r2, #119	; 0x77
 8007918:	4393      	bics	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4a58      	ldr	r2, [pc, #352]	; (8007a80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007920:	4013      	ands	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2280      	movs	r2, #128	; 0x80
 8007932:	0192      	lsls	r2, r2, #6
 8007934:	4293      	cmp	r3, r2
 8007936:	d040      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0xde>
 8007938:	2280      	movs	r2, #128	; 0x80
 800793a:	0192      	lsls	r2, r2, #6
 800793c:	4293      	cmp	r3, r2
 800793e:	d900      	bls.n	8007942 <HAL_TIM_ConfigClockSource+0x66>
 8007940:	e088      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007942:	2280      	movs	r2, #128	; 0x80
 8007944:	0152      	lsls	r2, r2, #5
 8007946:	4293      	cmp	r3, r2
 8007948:	d100      	bne.n	800794c <HAL_TIM_ConfigClockSource+0x70>
 800794a:	e088      	b.n	8007a5e <HAL_TIM_ConfigClockSource+0x182>
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	0152      	lsls	r2, r2, #5
 8007950:	4293      	cmp	r3, r2
 8007952:	d900      	bls.n	8007956 <HAL_TIM_ConfigClockSource+0x7a>
 8007954:	e07e      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007956:	2b70      	cmp	r3, #112	; 0x70
 8007958:	d018      	beq.n	800798c <HAL_TIM_ConfigClockSource+0xb0>
 800795a:	d900      	bls.n	800795e <HAL_TIM_ConfigClockSource+0x82>
 800795c:	e07a      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800795e:	2b60      	cmp	r3, #96	; 0x60
 8007960:	d04f      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x126>
 8007962:	d900      	bls.n	8007966 <HAL_TIM_ConfigClockSource+0x8a>
 8007964:	e076      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007966:	2b50      	cmp	r3, #80	; 0x50
 8007968:	d03b      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x106>
 800796a:	d900      	bls.n	800796e <HAL_TIM_ConfigClockSource+0x92>
 800796c:	e072      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d057      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0x146>
 8007972:	d900      	bls.n	8007976 <HAL_TIM_ConfigClockSource+0x9a>
 8007974:	e06e      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	d063      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 800797a:	d86b      	bhi.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800797c:	2b20      	cmp	r3, #32
 800797e:	d060      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 8007980:	d868      	bhi.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05d      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 8007986:	2b10      	cmp	r3, #16
 8007988:	d05b      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 800798a:	e063      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800799c:	f000 fbae 	bl	80080fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2277      	movs	r2, #119	; 0x77
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	609a      	str	r2, [r3, #8]
      break;
 80079b8:	e052      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079ca:	f000 fb97 	bl	80080fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2180      	movs	r1, #128	; 0x80
 80079da:	01c9      	lsls	r1, r1, #7
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
      break;
 80079e0:	e03e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	001a      	movs	r2, r3
 80079f0:	f000 fa42 	bl	8007e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2150      	movs	r1, #80	; 0x50
 80079fa:	0018      	movs	r0, r3
 80079fc:	f000 fb64 	bl	80080c8 <TIM_ITRx_SetConfig>
      break;
 8007a00:	e02e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	001a      	movs	r2, r3
 8007a10:	f000 faa2 	bl	8007f58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2160      	movs	r1, #96	; 0x60
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f000 fb54 	bl	80080c8 <TIM_ITRx_SetConfig>
      break;
 8007a20:	e01e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	001a      	movs	r2, r3
 8007a30:	f000 fa22 	bl	8007e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2140      	movs	r1, #64	; 0x40
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f000 fb44 	bl	80080c8 <TIM_ITRx_SetConfig>
      break;
 8007a40:	e00e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	0010      	movs	r0, r2
 8007a4e:	f000 fb3b 	bl	80080c8 <TIM_ITRx_SetConfig>
      break;
 8007a52:	e005      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a54:	230f      	movs	r3, #15
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a5e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2239      	movs	r2, #57	; 0x39
 8007a64:	2101      	movs	r1, #1
 8007a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2238      	movs	r2, #56	; 0x38
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8007a70:	230f      	movs	r3, #15
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	781b      	ldrb	r3, [r3, #0]
}
 8007a76:	0018      	movs	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b004      	add	sp, #16
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	ffff00ff 	.word	0xffff00ff

08007a84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	d01e      	beq.n	8007ad6 <HAL_TIM_ReadCapturedValue+0x52>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b0c      	cmp	r3, #12
 8007a9c:	d820      	bhi.n	8007ae0 <HAL_TIM_ReadCapturedValue+0x5c>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d013      	beq.n	8007acc <HAL_TIM_ReadCapturedValue+0x48>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d81a      	bhi.n	8007ae0 <HAL_TIM_ReadCapturedValue+0x5c>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_TIM_ReadCapturedValue+0x34>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d005      	beq.n	8007ac2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8007ab6:	e013      	b.n	8007ae0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abe:	60fb      	str	r3, [r7, #12]
      break;
 8007ac0:	e00f      	b.n	8007ae2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	60fb      	str	r3, [r7, #12]
      break;
 8007aca:	e00a      	b.n	8007ae2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	60fb      	str	r3, [r7, #12]
      break;
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	60fb      	str	r3, [r7, #12]
      break;
 8007ade:	e000      	b.n	8007ae2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007ae0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b004      	add	sp, #16
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007af4:	46c0      	nop			; (mov r8, r8)
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b002      	add	sp, #8
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b04:	46c0      	nop			; (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b002      	add	sp, #8
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	2380      	movs	r3, #128	; 0x80
 8007b30:	05db      	lsls	r3, r3, #23
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d007      	beq.n	8007b46 <TIM_Base_SetConfig+0x2a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <TIM_Base_SetConfig+0x9c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_Base_SetConfig+0x2a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <TIM_Base_SetConfig+0xa0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2270      	movs	r2, #112	; 0x70
 8007b4a:	4393      	bics	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	2380      	movs	r3, #128	; 0x80
 8007b5c:	05db      	lsls	r3, r3, #23
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d007      	beq.n	8007b72 <TIM_Base_SetConfig+0x56>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <TIM_Base_SetConfig+0x9c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d003      	beq.n	8007b72 <TIM_Base_SetConfig+0x56>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <TIM_Base_SetConfig+0xa0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d108      	bne.n	8007b84 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_Base_SetConfig+0xa4>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2280      	movs	r2, #128	; 0x80
 8007b88:	4393      	bics	r3, r2
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	615a      	str	r2, [r3, #20]
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b004      	add	sp, #16
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40010800 	.word	0x40010800
 8007bbc:	40011400 	.word	0x40011400
 8007bc0:	fffffcff 	.word	0xfffffcff

08007bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4393      	bics	r3, r2
 8007bd6:	001a      	movs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2270      	movs	r2, #112	; 0x70
 8007bf2:	4393      	bics	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	4393      	bics	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	4393      	bics	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	621a      	str	r2, [r3, #32]
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b006      	add	sp, #24
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	4393      	bics	r3, r2
 8007c4e:	001a      	movs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a13      	ldr	r2, [pc, #76]	; (8007cb8 <TIM_OC2_SetConfig+0x7c>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4a12      	ldr	r2, [pc, #72]	; (8007cbc <TIM_OC2_SetConfig+0x80>)
 8007c72:	4013      	ands	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2220      	movs	r2, #32
 8007c86:	4393      	bics	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	621a      	str	r2, [r3, #32]
}
 8007cb0:	46c0      	nop			; (mov r8, r8)
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b006      	add	sp, #24
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	ffff8fff 	.word	0xffff8fff
 8007cbc:	fffffcff 	.word	0xfffffcff

08007cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	4a1a      	ldr	r2, [pc, #104]	; (8007d38 <TIM_OC3_SetConfig+0x78>)
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2270      	movs	r2, #112	; 0x70
 8007cec:	4393      	bics	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	4393      	bics	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4a0d      	ldr	r2, [pc, #52]	; (8007d3c <TIM_OC3_SetConfig+0x7c>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	621a      	str	r2, [r3, #32]
}
 8007d30:	46c0      	nop			; (mov r8, r8)
 8007d32:	46bd      	mov	sp, r7
 8007d34:	b006      	add	sp, #24
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	fffffeff 	.word	0xfffffeff
 8007d3c:	fffffdff 	.word	0xfffffdff

08007d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <TIM_OC4_SetConfig+0x7c>)
 8007d50:	401a      	ands	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a15      	ldr	r2, [pc, #84]	; (8007dc0 <TIM_OC4_SetConfig+0x80>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a14      	ldr	r2, [pc, #80]	; (8007dc4 <TIM_OC4_SetConfig+0x84>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <TIM_OC4_SetConfig+0x88>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	031b      	lsls	r3, r3, #12
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b006      	add	sp, #24
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	ffffefff 	.word	0xffffefff
 8007dc0:	ffff8fff 	.word	0xffff8fff
 8007dc4:	fffffcff 	.word	0xfffffcff
 8007dc8:	ffffdfff 	.word	0xffffdfff

08007dcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	2201      	movs	r2, #1
 8007de0:	4393      	bics	r3, r2
 8007de2:	001a      	movs	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	2380      	movs	r3, #128	; 0x80
 8007df8:	05db      	lsls	r3, r3, #23
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d007      	beq.n	8007e0e <TIM_TI1_SetConfig+0x42>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <TIM_TI1_SetConfig+0xa4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_TI1_SetConfig+0x42>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a1a      	ldr	r2, [pc, #104]	; (8007e74 <TIM_TI1_SetConfig+0xa8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d101      	bne.n	8007e12 <TIM_TI1_SetConfig+0x46>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <TIM_TI1_SetConfig+0x48>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4393      	bics	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e003      	b.n	8007e32 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	22f0      	movs	r2, #240	; 0xf0
 8007e36:	4393      	bics	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	22ff      	movs	r2, #255	; 0xff
 8007e40:	4013      	ands	r3, r2
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	220a      	movs	r2, #10
 8007e4c:	4393      	bics	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	220a      	movs	r2, #10
 8007e54:	4013      	ands	r3, r2
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	46c0      	nop			; (mov r8, r8)
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b006      	add	sp, #24
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40010800 	.word	0x40010800
 8007e74:	40011400 	.word	0x40011400

08007e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4393      	bics	r3, r2
 8007e92:	001a      	movs	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	22f0      	movs	r2, #240	; 0xf0
 8007ea2:	4393      	bics	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	220a      	movs	r2, #10
 8007eb4:	4393      	bics	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	b006      	add	sp, #24
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	4393      	bics	r3, r2
 8007eea:	001a      	movs	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4a14      	ldr	r2, [pc, #80]	; (8007f50 <TIM_TI2_SetConfig+0x7c>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <TIM_TI2_SetConfig+0x80>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	041b      	lsls	r3, r3, #16
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	22a0      	movs	r2, #160	; 0xa0
 8007f28:	4393      	bics	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	22a0      	movs	r2, #160	; 0xa0
 8007f32:	4013      	ands	r3, r2
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b006      	add	sp, #24
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	fffffcff 	.word	0xfffffcff
 8007f54:	ffff0fff 	.word	0xffff0fff

08007f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	2210      	movs	r2, #16
 8007f6a:	4393      	bics	r3, r2
 8007f6c:	001a      	movs	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	4a0d      	ldr	r2, [pc, #52]	; (8007fb8 <TIM_TI2_ConfigInputStage+0x60>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	031b      	lsls	r3, r3, #12
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	22a0      	movs	r2, #160	; 0xa0
 8007f94:	4393      	bics	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b006      	add	sp, #24
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	ffff0fff 	.word	0xffff0fff

08007fbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	4a19      	ldr	r2, [pc, #100]	; (8008034 <TIM_TI3_SetConfig+0x78>)
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	4393      	bics	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	22f0      	movs	r2, #240	; 0xf0
 8007ff6:	4393      	bics	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	4013      	ands	r3, r2
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4a0b      	ldr	r2, [pc, #44]	; (8008038 <TIM_TI3_SetConfig+0x7c>)
 800800c:	4013      	ands	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	021a      	lsls	r2, r3, #8
 8008014:	23a0      	movs	r3, #160	; 0xa0
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4013      	ands	r3, r2
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b006      	add	sp, #24
 8008032:	bd80      	pop	{r7, pc}
 8008034:	fffffeff 	.word	0xfffffeff
 8008038:	fffff5ff 	.word	0xfffff5ff

0800803c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <TIM_TI4_SetConfig+0x7c>)
 8008050:	401a      	ands	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4a15      	ldr	r2, [pc, #84]	; (80080bc <TIM_TI4_SetConfig+0x80>)
 8008066:	4013      	ands	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4a12      	ldr	r2, [pc, #72]	; (80080c0 <TIM_TI4_SetConfig+0x84>)
 8008078:	4013      	ands	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	031b      	lsls	r3, r3, #12
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4a0d      	ldr	r2, [pc, #52]	; (80080c4 <TIM_TI4_SetConfig+0x88>)
 800808e:	4013      	ands	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	031a      	lsls	r2, r3, #12
 8008096:	23a0      	movs	r3, #160	; 0xa0
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	4013      	ands	r3, r2
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b006      	add	sp, #24
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	ffffefff 	.word	0xffffefff
 80080bc:	fffffcff 	.word	0xfffffcff
 80080c0:	ffff0fff 	.word	0xffff0fff
 80080c4:	ffff5fff 	.word	0xffff5fff

080080c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2270      	movs	r2, #112	; 0x70
 80080dc:	4393      	bics	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	2207      	movs	r2, #7
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	609a      	str	r2, [r3, #8]
}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	46bd      	mov	sp, r7
 80080f6:	b004      	add	sp, #16
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <TIM_ETR_SetConfig+0x3c>)
 8008114:	4013      	ands	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	021a      	lsls	r2, r3, #8
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	431a      	orrs	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4313      	orrs	r3, r2
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	609a      	str	r2, [r3, #8]
}
 8008130:	46c0      	nop			; (mov r8, r8)
 8008132:	46bd      	mov	sp, r7
 8008134:	b006      	add	sp, #24
 8008136:	bd80      	pop	{r7, pc}
 8008138:	ffff00ff 	.word	0xffff00ff

0800813c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	221f      	movs	r2, #31
 800814c:	4013      	ands	r3, r2
 800814e:	2201      	movs	r2, #1
 8008150:	409a      	lsls	r2, r3
 8008152:	0013      	movs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	43d2      	mvns	r2, r2
 800815e:	401a      	ands	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1a      	ldr	r2, [r3, #32]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	211f      	movs	r1, #31
 800816c:	400b      	ands	r3, r1
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4099      	lsls	r1, r3
 8008172:	000b      	movs	r3, r1
 8008174:	431a      	orrs	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	621a      	str	r2, [r3, #32]
}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	46bd      	mov	sp, r7
 800817e:	b006      	add	sp, #24
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2238      	movs	r2, #56	; 0x38
 8008192:	5c9b      	ldrb	r3, [r3, r2]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e042      	b.n	8008222 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2238      	movs	r2, #56	; 0x38
 80081a0:	2101      	movs	r1, #1
 80081a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2239      	movs	r2, #57	; 0x39
 80081a8:	2102      	movs	r1, #2
 80081aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2270      	movs	r2, #112	; 0x70
 80081c0:	4393      	bics	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	2380      	movs	r3, #128	; 0x80
 80081dc:	05db      	lsls	r3, r3, #23
 80081de:	429a      	cmp	r2, r3
 80081e0:	d009      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a11      	ldr	r2, [pc, #68]	; (800822c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0f      	ldr	r2, [pc, #60]	; (8008230 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10c      	bne.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	4393      	bics	r3, r2
 80081fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4313      	orrs	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2239      	movs	r2, #57	; 0x39
 8008214:	2101      	movs	r1, #1
 8008216:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2238      	movs	r2, #56	; 0x38
 800821c:	2100      	movs	r1, #0
 800821e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	0018      	movs	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	b004      	add	sp, #16
 8008228:	bd80      	pop	{r7, pc}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	40010800 	.word	0x40010800
 8008230:	40011400 	.word	0x40011400

08008234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e044      	b.n	80082d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d107      	bne.n	800825e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2278      	movs	r2, #120	; 0x78
 8008252:	2100      	movs	r1, #0
 8008254:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	0018      	movs	r0, r3
 800825a:	f7fb ff09 	bl	8004070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2224      	movs	r2, #36	; 0x24
 8008262:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2101      	movs	r1, #1
 8008270:	438a      	bics	r2, r1
 8008272:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	0018      	movs	r0, r3
 8008278:	f000 f830 	bl	80082dc <UART_SetConfig>
 800827c:	0003      	movs	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e024      	b.n	80082d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	0018      	movs	r0, r3
 8008292:	f000 faa7 	bl	80087e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	490d      	ldr	r1, [pc, #52]	; (80082d8 <HAL_UART_Init+0xa4>)
 80082a2:	400a      	ands	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	212a      	movs	r1, #42	; 0x2a
 80082b2:	438a      	bics	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2101      	movs	r1, #1
 80082c2:	430a      	orrs	r2, r1
 80082c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	0018      	movs	r0, r3
 80082ca:	f000 fb3f 	bl	800894c <UART_CheckIdleState>
 80082ce:	0003      	movs	r3, r0
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b002      	add	sp, #8
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	ffffb7ff 	.word	0xffffb7ff

080082dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082dc:	b5b0      	push	{r4, r5, r7, lr}
 80082de:	b08e      	sub	sp, #56	; 0x38
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082e4:	231a      	movs	r3, #26
 80082e6:	2218      	movs	r2, #24
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	19db      	adds	r3, r3, r7
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	4313      	orrs	r3, r2
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4ac6      	ldr	r2, [pc, #792]	; (8008628 <UART_SetConfig+0x34c>)
 8008310:	4013      	ands	r3, r2
 8008312:	0019      	movs	r1, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831a:	430a      	orrs	r2, r1
 800831c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4ac1      	ldr	r2, [pc, #772]	; (800862c <UART_SetConfig+0x350>)
 8008326:	4013      	ands	r3, r2
 8008328:	0019      	movs	r1, r3
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4abb      	ldr	r2, [pc, #748]	; (8008630 <UART_SetConfig+0x354>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800834c:	4313      	orrs	r3, r2
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	4ab7      	ldr	r2, [pc, #732]	; (8008634 <UART_SetConfig+0x358>)
 8008358:	4013      	ands	r3, r2
 800835a:	0019      	movs	r1, r3
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008362:	430a      	orrs	r2, r1
 8008364:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4ab3      	ldr	r2, [pc, #716]	; (8008638 <UART_SetConfig+0x35c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d131      	bne.n	80083d4 <UART_SetConfig+0xf8>
 8008370:	4bb2      	ldr	r3, [pc, #712]	; (800863c <UART_SetConfig+0x360>)
 8008372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008374:	2203      	movs	r2, #3
 8008376:	4013      	ands	r3, r2
 8008378:	2b03      	cmp	r3, #3
 800837a:	d01d      	beq.n	80083b8 <UART_SetConfig+0xdc>
 800837c:	d823      	bhi.n	80083c6 <UART_SetConfig+0xea>
 800837e:	2b02      	cmp	r3, #2
 8008380:	d00c      	beq.n	800839c <UART_SetConfig+0xc0>
 8008382:	d820      	bhi.n	80083c6 <UART_SetConfig+0xea>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <UART_SetConfig+0xb2>
 8008388:	2b01      	cmp	r3, #1
 800838a:	d00e      	beq.n	80083aa <UART_SetConfig+0xce>
 800838c:	e01b      	b.n	80083c6 <UART_SetConfig+0xea>
 800838e:	231b      	movs	r3, #27
 8008390:	2218      	movs	r2, #24
 8008392:	189b      	adds	r3, r3, r2
 8008394:	19db      	adds	r3, r3, r7
 8008396:	2201      	movs	r2, #1
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e09c      	b.n	80084d6 <UART_SetConfig+0x1fa>
 800839c:	231b      	movs	r3, #27
 800839e:	2218      	movs	r2, #24
 80083a0:	189b      	adds	r3, r3, r2
 80083a2:	19db      	adds	r3, r3, r7
 80083a4:	2202      	movs	r2, #2
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	e095      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80083aa:	231b      	movs	r3, #27
 80083ac:	2218      	movs	r2, #24
 80083ae:	189b      	adds	r3, r3, r2
 80083b0:	19db      	adds	r3, r3, r7
 80083b2:	2204      	movs	r2, #4
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	e08e      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80083b8:	231b      	movs	r3, #27
 80083ba:	2218      	movs	r2, #24
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	19db      	adds	r3, r3, r7
 80083c0:	2208      	movs	r2, #8
 80083c2:	701a      	strb	r2, [r3, #0]
 80083c4:	e087      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80083c6:	231b      	movs	r3, #27
 80083c8:	2218      	movs	r2, #24
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	2210      	movs	r2, #16
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e080      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a99      	ldr	r2, [pc, #612]	; (8008640 <UART_SetConfig+0x364>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d131      	bne.n	8008442 <UART_SetConfig+0x166>
 80083de:	4b97      	ldr	r3, [pc, #604]	; (800863c <UART_SetConfig+0x360>)
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	220c      	movs	r2, #12
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b0c      	cmp	r3, #12
 80083e8:	d01d      	beq.n	8008426 <UART_SetConfig+0x14a>
 80083ea:	d823      	bhi.n	8008434 <UART_SetConfig+0x158>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d00c      	beq.n	800840a <UART_SetConfig+0x12e>
 80083f0:	d820      	bhi.n	8008434 <UART_SetConfig+0x158>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <UART_SetConfig+0x120>
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d00e      	beq.n	8008418 <UART_SetConfig+0x13c>
 80083fa:	e01b      	b.n	8008434 <UART_SetConfig+0x158>
 80083fc:	231b      	movs	r3, #27
 80083fe:	2218      	movs	r2, #24
 8008400:	189b      	adds	r3, r3, r2
 8008402:	19db      	adds	r3, r3, r7
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e065      	b.n	80084d6 <UART_SetConfig+0x1fa>
 800840a:	231b      	movs	r3, #27
 800840c:	2218      	movs	r2, #24
 800840e:	189b      	adds	r3, r3, r2
 8008410:	19db      	adds	r3, r3, r7
 8008412:	2202      	movs	r2, #2
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	e05e      	b.n	80084d6 <UART_SetConfig+0x1fa>
 8008418:	231b      	movs	r3, #27
 800841a:	2218      	movs	r2, #24
 800841c:	189b      	adds	r3, r3, r2
 800841e:	19db      	adds	r3, r3, r7
 8008420:	2204      	movs	r2, #4
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	e057      	b.n	80084d6 <UART_SetConfig+0x1fa>
 8008426:	231b      	movs	r3, #27
 8008428:	2218      	movs	r2, #24
 800842a:	189b      	adds	r3, r3, r2
 800842c:	19db      	adds	r3, r3, r7
 800842e:	2208      	movs	r2, #8
 8008430:	701a      	strb	r2, [r3, #0]
 8008432:	e050      	b.n	80084d6 <UART_SetConfig+0x1fa>
 8008434:	231b      	movs	r3, #27
 8008436:	2218      	movs	r2, #24
 8008438:	189b      	adds	r3, r3, r2
 800843a:	19db      	adds	r3, r3, r7
 800843c:	2210      	movs	r2, #16
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	e049      	b.n	80084d6 <UART_SetConfig+0x1fa>
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a7a      	ldr	r2, [pc, #488]	; (8008630 <UART_SetConfig+0x354>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d13e      	bne.n	80084ca <UART_SetConfig+0x1ee>
 800844c:	4b7b      	ldr	r3, [pc, #492]	; (800863c <UART_SetConfig+0x360>)
 800844e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008450:	23c0      	movs	r3, #192	; 0xc0
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	4013      	ands	r3, r2
 8008456:	22c0      	movs	r2, #192	; 0xc0
 8008458:	0112      	lsls	r2, r2, #4
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <UART_SetConfig+0x1d2>
 800845e:	22c0      	movs	r2, #192	; 0xc0
 8008460:	0112      	lsls	r2, r2, #4
 8008462:	4293      	cmp	r3, r2
 8008464:	d82a      	bhi.n	80084bc <UART_SetConfig+0x1e0>
 8008466:	2280      	movs	r2, #128	; 0x80
 8008468:	0112      	lsls	r2, r2, #4
 800846a:	4293      	cmp	r3, r2
 800846c:	d011      	beq.n	8008492 <UART_SetConfig+0x1b6>
 800846e:	2280      	movs	r2, #128	; 0x80
 8008470:	0112      	lsls	r2, r2, #4
 8008472:	4293      	cmp	r3, r2
 8008474:	d822      	bhi.n	80084bc <UART_SetConfig+0x1e0>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <UART_SetConfig+0x1a8>
 800847a:	2280      	movs	r2, #128	; 0x80
 800847c:	00d2      	lsls	r2, r2, #3
 800847e:	4293      	cmp	r3, r2
 8008480:	d00e      	beq.n	80084a0 <UART_SetConfig+0x1c4>
 8008482:	e01b      	b.n	80084bc <UART_SetConfig+0x1e0>
 8008484:	231b      	movs	r3, #27
 8008486:	2218      	movs	r2, #24
 8008488:	189b      	adds	r3, r3, r2
 800848a:	19db      	adds	r3, r3, r7
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e021      	b.n	80084d6 <UART_SetConfig+0x1fa>
 8008492:	231b      	movs	r3, #27
 8008494:	2218      	movs	r2, #24
 8008496:	189b      	adds	r3, r3, r2
 8008498:	19db      	adds	r3, r3, r7
 800849a:	2202      	movs	r2, #2
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e01a      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80084a0:	231b      	movs	r3, #27
 80084a2:	2218      	movs	r2, #24
 80084a4:	189b      	adds	r3, r3, r2
 80084a6:	19db      	adds	r3, r3, r7
 80084a8:	2204      	movs	r2, #4
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	e013      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80084ae:	231b      	movs	r3, #27
 80084b0:	2218      	movs	r2, #24
 80084b2:	189b      	adds	r3, r3, r2
 80084b4:	19db      	adds	r3, r3, r7
 80084b6:	2208      	movs	r2, #8
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	e00c      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80084bc:	231b      	movs	r3, #27
 80084be:	2218      	movs	r2, #24
 80084c0:	189b      	adds	r3, r3, r2
 80084c2:	19db      	adds	r3, r3, r7
 80084c4:	2210      	movs	r2, #16
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e005      	b.n	80084d6 <UART_SetConfig+0x1fa>
 80084ca:	231b      	movs	r3, #27
 80084cc:	2218      	movs	r2, #24
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	19db      	adds	r3, r3, r7
 80084d2:	2210      	movs	r2, #16
 80084d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a55      	ldr	r2, [pc, #340]	; (8008630 <UART_SetConfig+0x354>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d000      	beq.n	80084e2 <UART_SetConfig+0x206>
 80084e0:	e084      	b.n	80085ec <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e2:	231b      	movs	r3, #27
 80084e4:	2218      	movs	r2, #24
 80084e6:	189b      	adds	r3, r3, r2
 80084e8:	19db      	adds	r3, r3, r7
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d01d      	beq.n	800852c <UART_SetConfig+0x250>
 80084f0:	dc20      	bgt.n	8008534 <UART_SetConfig+0x258>
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d015      	beq.n	8008522 <UART_SetConfig+0x246>
 80084f6:	dc1d      	bgt.n	8008534 <UART_SetConfig+0x258>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <UART_SetConfig+0x226>
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d005      	beq.n	800850c <UART_SetConfig+0x230>
 8008500:	e018      	b.n	8008534 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008502:	f7fe f8f3 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008506:	0003      	movs	r3, r0
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800850a:	e01c      	b.n	8008546 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800850c:	4b4b      	ldr	r3, [pc, #300]	; (800863c <UART_SetConfig+0x360>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	4013      	ands	r3, r2
 8008514:	d002      	beq.n	800851c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008516:	4b4b      	ldr	r3, [pc, #300]	; (8008644 <UART_SetConfig+0x368>)
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800851a:	e014      	b.n	8008546 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800851c:	4b4a      	ldr	r3, [pc, #296]	; (8008648 <UART_SetConfig+0x36c>)
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008520:	e011      	b.n	8008546 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fe f833 	bl	800658c <HAL_RCC_GetSysClockFreq>
 8008526:	0003      	movs	r3, r0
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800852a:	e00c      	b.n	8008546 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008532:	e008      	b.n	8008546 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008538:	231a      	movs	r3, #26
 800853a:	2218      	movs	r2, #24
 800853c:	189b      	adds	r3, r3, r2
 800853e:	19db      	adds	r3, r3, r7
 8008540:	2201      	movs	r2, #1
 8008542:	701a      	strb	r2, [r3, #0]
        break;
 8008544:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d100      	bne.n	800854e <UART_SetConfig+0x272>
 800854c:	e132      	b.n	80087b4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	0013      	movs	r3, r2
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	189b      	adds	r3, r3, r2
 8008558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855a:	429a      	cmp	r2, r3
 800855c:	d305      	bcc.n	800856a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008566:	429a      	cmp	r2, r3
 8008568:	d906      	bls.n	8008578 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800856a:	231a      	movs	r3, #26
 800856c:	2218      	movs	r2, #24
 800856e:	189b      	adds	r3, r3, r2
 8008570:	19db      	adds	r3, r3, r7
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	e11d      	b.n	80087b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	6939      	ldr	r1, [r7, #16]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	000b      	movs	r3, r1
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	0010      	movs	r0, r2
 800858a:	0205      	lsls	r5, r0, #8
 800858c:	431d      	orrs	r5, r3
 800858e:	000b      	movs	r3, r1
 8008590:	021c      	lsls	r4, r3, #8
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	60bb      	str	r3, [r7, #8]
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	68f9      	ldr	r1, [r7, #12]
 80085a2:	1900      	adds	r0, r0, r4
 80085a4:	4169      	adcs	r1, r5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	2300      	movs	r3, #0
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f7f7 ffb2 	bl	800051c <__aeabi_uldivmod>
 80085b8:	0002      	movs	r2, r0
 80085ba:	000b      	movs	r3, r1
 80085bc:	0013      	movs	r3, r2
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c2:	23c0      	movs	r3, #192	; 0xc0
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d309      	bcc.n	80085de <UART_SetConfig+0x302>
 80085ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	035b      	lsls	r3, r3, #13
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d204      	bcs.n	80085de <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085da:	60da      	str	r2, [r3, #12]
 80085dc:	e0ea      	b.n	80087b4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80085de:	231a      	movs	r3, #26
 80085e0:	2218      	movs	r2, #24
 80085e2:	189b      	adds	r3, r3, r2
 80085e4:	19db      	adds	r3, r3, r7
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e0e3      	b.n	80087b4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d000      	beq.n	80085fa <UART_SetConfig+0x31e>
 80085f8:	e085      	b.n	8008706 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80085fa:	231b      	movs	r3, #27
 80085fc:	2218      	movs	r2, #24
 80085fe:	189b      	adds	r3, r3, r2
 8008600:	19db      	adds	r3, r3, r7
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b08      	cmp	r3, #8
 8008606:	d837      	bhi.n	8008678 <UART_SetConfig+0x39c>
 8008608:	009a      	lsls	r2, r3, #2
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <UART_SetConfig+0x370>)
 800860c:	18d3      	adds	r3, r2, r3
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008612:	f7fe f86b 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008616:	0003      	movs	r3, r0
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800861a:	e036      	b.n	800868a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fe f87c 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 8008620:	0003      	movs	r3, r0
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008624:	e031      	b.n	800868a <UART_SetConfig+0x3ae>
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	efff69f3 	.word	0xefff69f3
 800862c:	ffffcfff 	.word	0xffffcfff
 8008630:	40004800 	.word	0x40004800
 8008634:	fffff4ff 	.word	0xfffff4ff
 8008638:	40013800 	.word	0x40013800
 800863c:	40021000 	.word	0x40021000
 8008640:	40004400 	.word	0x40004400
 8008644:	003d0900 	.word	0x003d0900
 8008648:	00f42400 	.word	0x00f42400
 800864c:	0800b814 	.word	0x0800b814
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008650:	4b60      	ldr	r3, [pc, #384]	; (80087d4 <UART_SetConfig+0x4f8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2210      	movs	r2, #16
 8008656:	4013      	ands	r3, r2
 8008658:	d002      	beq.n	8008660 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800865a:	4b5f      	ldr	r3, [pc, #380]	; (80087d8 <UART_SetConfig+0x4fc>)
 800865c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800865e:	e014      	b.n	800868a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8008660:	4b5e      	ldr	r3, [pc, #376]	; (80087dc <UART_SetConfig+0x500>)
 8008662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008664:	e011      	b.n	800868a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008666:	f7fd ff91 	bl	800658c <HAL_RCC_GetSysClockFreq>
 800866a:	0003      	movs	r3, r0
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800866e:	e00c      	b.n	800868a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008670:	2380      	movs	r3, #128	; 0x80
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008676:	e008      	b.n	800868a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800867c:	231a      	movs	r3, #26
 800867e:	2218      	movs	r2, #24
 8008680:	189b      	adds	r3, r3, r2
 8008682:	19db      	adds	r3, r3, r7
 8008684:	2201      	movs	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]
        break;
 8008688:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d100      	bne.n	8008692 <UART_SetConfig+0x3b6>
 8008690:	e090      	b.n	80087b4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	005a      	lsls	r2, r3, #1
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	18d2      	adds	r2, r2, r3
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	0019      	movs	r1, r3
 80086a4:	0010      	movs	r0, r2
 80086a6:	f7f7 fd4b 	bl	8000140 <__udivsi3>
 80086aa:	0003      	movs	r3, r0
 80086ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	2b0f      	cmp	r3, #15
 80086b2:	d921      	bls.n	80086f8 <UART_SetConfig+0x41c>
 80086b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b6:	2380      	movs	r3, #128	; 0x80
 80086b8:	025b      	lsls	r3, r3, #9
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d21c      	bcs.n	80086f8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	200e      	movs	r0, #14
 80086c4:	2418      	movs	r4, #24
 80086c6:	1903      	adds	r3, r0, r4
 80086c8:	19db      	adds	r3, r3, r7
 80086ca:	210f      	movs	r1, #15
 80086cc:	438a      	bics	r2, r1
 80086ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2207      	movs	r2, #7
 80086d8:	4013      	ands	r3, r2
 80086da:	b299      	uxth	r1, r3
 80086dc:	1903      	adds	r3, r0, r4
 80086de:	19db      	adds	r3, r3, r7
 80086e0:	1902      	adds	r2, r0, r4
 80086e2:	19d2      	adds	r2, r2, r7
 80086e4:	8812      	ldrh	r2, [r2, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	1902      	adds	r2, r0, r4
 80086f0:	19d2      	adds	r2, r2, r7
 80086f2:	8812      	ldrh	r2, [r2, #0]
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	e05d      	b.n	80087b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80086f8:	231a      	movs	r3, #26
 80086fa:	2218      	movs	r2, #24
 80086fc:	189b      	adds	r3, r3, r2
 80086fe:	19db      	adds	r3, r3, r7
 8008700:	2201      	movs	r2, #1
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e056      	b.n	80087b4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008706:	231b      	movs	r3, #27
 8008708:	2218      	movs	r2, #24
 800870a:	189b      	adds	r3, r3, r2
 800870c:	19db      	adds	r3, r3, r7
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b08      	cmp	r3, #8
 8008712:	d822      	bhi.n	800875a <UART_SetConfig+0x47e>
 8008714:	009a      	lsls	r2, r3, #2
 8008716:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <UART_SetConfig+0x504>)
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800871e:	f7fd ffe5 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008722:	0003      	movs	r3, r0
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008726:	e021      	b.n	800876c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fd fff6 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 800872c:	0003      	movs	r3, r0
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008730:	e01c      	b.n	800876c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008732:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <UART_SetConfig+0x4f8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2210      	movs	r2, #16
 8008738:	4013      	ands	r3, r2
 800873a:	d002      	beq.n	8008742 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800873c:	4b26      	ldr	r3, [pc, #152]	; (80087d8 <UART_SetConfig+0x4fc>)
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008740:	e014      	b.n	800876c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8008742:	4b26      	ldr	r3, [pc, #152]	; (80087dc <UART_SetConfig+0x500>)
 8008744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008746:	e011      	b.n	800876c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008748:	f7fd ff20 	bl	800658c <HAL_RCC_GetSysClockFreq>
 800874c:	0003      	movs	r3, r0
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008750:	e00c      	b.n	800876c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008752:	2380      	movs	r3, #128	; 0x80
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008758:	e008      	b.n	800876c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800875e:	231a      	movs	r3, #26
 8008760:	2218      	movs	r2, #24
 8008762:	189b      	adds	r3, r3, r2
 8008764:	19db      	adds	r3, r3, r7
 8008766:	2201      	movs	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
        break;
 800876a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d020      	beq.n	80087b4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	085a      	lsrs	r2, r3, #1
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	18d2      	adds	r2, r2, r3
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	0019      	movs	r1, r3
 8008782:	0010      	movs	r0, r2
 8008784:	f7f7 fcdc 	bl	8000140 <__udivsi3>
 8008788:	0003      	movs	r3, r0
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	2b0f      	cmp	r3, #15
 8008790:	d90a      	bls.n	80087a8 <UART_SetConfig+0x4cc>
 8008792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008794:	2380      	movs	r3, #128	; 0x80
 8008796:	025b      	lsls	r3, r3, #9
 8008798:	429a      	cmp	r2, r3
 800879a:	d205      	bcs.n	80087a8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	b29a      	uxth	r2, r3
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	e005      	b.n	80087b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80087a8:	231a      	movs	r3, #26
 80087aa:	2218      	movs	r2, #24
 80087ac:	189b      	adds	r3, r3, r2
 80087ae:	19db      	adds	r3, r3, r7
 80087b0:	2201      	movs	r2, #1
 80087b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2200      	movs	r2, #0
 80087b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2200      	movs	r2, #0
 80087be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80087c0:	231a      	movs	r3, #26
 80087c2:	2218      	movs	r2, #24
 80087c4:	189b      	adds	r3, r3, r2
 80087c6:	19db      	adds	r3, r3, r7
 80087c8:	781b      	ldrb	r3, [r3, #0]
}
 80087ca:	0018      	movs	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	b00e      	add	sp, #56	; 0x38
 80087d0:	bdb0      	pop	{r4, r5, r7, pc}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	40021000 	.word	0x40021000
 80087d8:	003d0900 	.word	0x003d0900
 80087dc:	00f42400 	.word	0x00f42400
 80087e0:	0800b838 	.word	0x0800b838

080087e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2201      	movs	r2, #1
 80087f2:	4013      	ands	r3, r2
 80087f4:	d00b      	beq.n	800880e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	4a4a      	ldr	r2, [pc, #296]	; (8008928 <UART_AdvFeatureConfig+0x144>)
 80087fe:	4013      	ands	r3, r2
 8008800:	0019      	movs	r1, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2202      	movs	r2, #2
 8008814:	4013      	ands	r3, r2
 8008816:	d00b      	beq.n	8008830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4a43      	ldr	r2, [pc, #268]	; (800892c <UART_AdvFeatureConfig+0x148>)
 8008820:	4013      	ands	r3, r2
 8008822:	0019      	movs	r1, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2204      	movs	r2, #4
 8008836:	4013      	ands	r3, r2
 8008838:	d00b      	beq.n	8008852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4a3b      	ldr	r2, [pc, #236]	; (8008930 <UART_AdvFeatureConfig+0x14c>)
 8008842:	4013      	ands	r3, r2
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2208      	movs	r2, #8
 8008858:	4013      	ands	r3, r2
 800885a:	d00b      	beq.n	8008874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	4a34      	ldr	r2, [pc, #208]	; (8008934 <UART_AdvFeatureConfig+0x150>)
 8008864:	4013      	ands	r3, r2
 8008866:	0019      	movs	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2210      	movs	r2, #16
 800887a:	4013      	ands	r3, r2
 800887c:	d00b      	beq.n	8008896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	4a2c      	ldr	r2, [pc, #176]	; (8008938 <UART_AdvFeatureConfig+0x154>)
 8008886:	4013      	ands	r3, r2
 8008888:	0019      	movs	r1, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	2220      	movs	r2, #32
 800889c:	4013      	ands	r3, r2
 800889e:	d00b      	beq.n	80088b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	4a25      	ldr	r2, [pc, #148]	; (800893c <UART_AdvFeatureConfig+0x158>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	0019      	movs	r1, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	4013      	ands	r3, r2
 80088c0:	d01d      	beq.n	80088fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4a1d      	ldr	r2, [pc, #116]	; (8008940 <UART_AdvFeatureConfig+0x15c>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	0019      	movs	r1, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088de:	2380      	movs	r3, #128	; 0x80
 80088e0:	035b      	lsls	r3, r3, #13
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d10b      	bne.n	80088fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <UART_AdvFeatureConfig+0x160>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	0019      	movs	r1, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	4013      	ands	r3, r2
 8008906:	d00b      	beq.n	8008920 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	4a0e      	ldr	r2, [pc, #56]	; (8008948 <UART_AdvFeatureConfig+0x164>)
 8008910:	4013      	ands	r3, r2
 8008912:	0019      	movs	r1, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	605a      	str	r2, [r3, #4]
  }
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}
 8008928:	fffdffff 	.word	0xfffdffff
 800892c:	fffeffff 	.word	0xfffeffff
 8008930:	fffbffff 	.word	0xfffbffff
 8008934:	ffff7fff 	.word	0xffff7fff
 8008938:	ffffefff 	.word	0xffffefff
 800893c:	ffffdfff 	.word	0xffffdfff
 8008940:	ffefffff 	.word	0xffefffff
 8008944:	ff9fffff 	.word	0xff9fffff
 8008948:	fff7ffff 	.word	0xfff7ffff

0800894c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b092      	sub	sp, #72	; 0x48
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2284      	movs	r2, #132	; 0x84
 8008958:	2100      	movs	r1, #0
 800895a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800895c:	f7fb fd80 	bl	8004460 <HAL_GetTick>
 8008960:	0003      	movs	r3, r0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2208      	movs	r2, #8
 800896c:	4013      	ands	r3, r2
 800896e:	2b08      	cmp	r3, #8
 8008970:	d12c      	bne.n	80089cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008974:	2280      	movs	r2, #128	; 0x80
 8008976:	0391      	lsls	r1, r2, #14
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	4a46      	ldr	r2, [pc, #280]	; (8008a94 <UART_CheckIdleState+0x148>)
 800897c:	9200      	str	r2, [sp, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	f000 f88c 	bl	8008a9c <UART_WaitOnFlagUntilTimeout>
 8008984:	1e03      	subs	r3, r0, #0
 8008986:	d021      	beq.n	80089cc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008988:	f3ef 8310 	mrs	r3, PRIMASK
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008990:	63bb      	str	r3, [r7, #56]	; 0x38
 8008992:	2301      	movs	r3, #1
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	f383 8810 	msr	PRIMASK, r3
}
 800899c:	46c0      	nop			; (mov r8, r8)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	438a      	bics	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	f383 8810 	msr	PRIMASK, r3
}
 80089b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2278      	movs	r2, #120	; 0x78
 80089c4:	2100      	movs	r1, #0
 80089c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e05f      	b.n	8008a8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2204      	movs	r2, #4
 80089d4:	4013      	ands	r3, r2
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d146      	bne.n	8008a68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089dc:	2280      	movs	r2, #128	; 0x80
 80089de:	03d1      	lsls	r1, r2, #15
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4a2c      	ldr	r2, [pc, #176]	; (8008a94 <UART_CheckIdleState+0x148>)
 80089e4:	9200      	str	r2, [sp, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f000 f858 	bl	8008a9c <UART_WaitOnFlagUntilTimeout>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d03b      	beq.n	8008a68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089f0:	f3ef 8310 	mrs	r3, PRIMASK
 80089f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
 80089fa:	2301      	movs	r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f383 8810 	msr	PRIMASK, r3
}
 8008a04:	46c0      	nop			; (mov r8, r8)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4921      	ldr	r1, [pc, #132]	; (8008a98 <UART_CheckIdleState+0x14c>)
 8008a12:	400a      	ands	r2, r1
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f383 8810 	msr	PRIMASK, r3
}
 8008a20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a22:	f3ef 8310 	mrs	r3, PRIMASK
 8008a26:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f383 8810 	msr	PRIMASK, r3
}
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2101      	movs	r1, #1
 8008a44:	438a      	bics	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	f383 8810 	msr	PRIMASK, r3
}
 8008a52:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2280      	movs	r2, #128	; 0x80
 8008a58:	2120      	movs	r1, #32
 8008a5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2278      	movs	r2, #120	; 0x78
 8008a60:	2100      	movs	r1, #0
 8008a62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e011      	b.n	8008a8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2280      	movs	r2, #128	; 0x80
 8008a72:	2120      	movs	r1, #32
 8008a74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2278      	movs	r2, #120	; 0x78
 8008a86:	2100      	movs	r1, #0
 8008a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b010      	add	sp, #64	; 0x40
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	01ffffff 	.word	0x01ffffff
 8008a98:	fffffedf 	.word	0xfffffedf

08008a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	1dfb      	adds	r3, r7, #7
 8008aaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aac:	e04b      	b.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	d048      	beq.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab4:	f7fb fcd4 	bl	8004460 <HAL_GetTick>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <UART_WaitOnFlagUntilTimeout+0x2e>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e04b      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d035      	beq.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d111      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2208      	movs	r2, #8
 8008aee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	0018      	movs	r0, r3
 8008af4:	f000 f83c 	bl	8008b70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2284      	movs	r2, #132	; 0x84
 8008afc:	2108      	movs	r1, #8
 8008afe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2278      	movs	r2, #120	; 0x78
 8008b04:	2100      	movs	r1, #0
 8008b06:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e02c      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69da      	ldr	r2, [r3, #28]
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	401a      	ands	r2, r3
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d112      	bne.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2280      	movs	r2, #128	; 0x80
 8008b26:	0112      	lsls	r2, r2, #4
 8008b28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f000 f81f 	bl	8008b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2284      	movs	r2, #132	; 0x84
 8008b36:	2120      	movs	r1, #32
 8008b38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2278      	movs	r2, #120	; 0x78
 8008b3e:	2100      	movs	r1, #0
 8008b40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e00f      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	425a      	negs	r2, r3
 8008b56:	4153      	adcs	r3, r2
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	001a      	movs	r2, r3
 8008b5c:	1dfb      	adds	r3, r7, #7
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d0a4      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b004      	add	sp, #16
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08e      	sub	sp, #56	; 0x38
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b78:	f3ef 8310 	mrs	r3, PRIMASK
 8008b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
 8008b82:	2301      	movs	r3, #1
 8008b84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	f383 8810 	msr	PRIMASK, r3
}
 8008b8c:	46c0      	nop			; (mov r8, r8)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4926      	ldr	r1, [pc, #152]	; (8008c34 <UART_EndRxTransfer+0xc4>)
 8008b9a:	400a      	ands	r2, r1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	f383 8810 	msr	PRIMASK, r3
}
 8008ba8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008baa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bae:	623b      	str	r3, [r7, #32]
  return(result);
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f383 8810 	msr	PRIMASK, r3
}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2101      	movs	r1, #1
 8008bcc:	438a      	bics	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	f383 8810 	msr	PRIMASK, r3
}
 8008bda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d118      	bne.n	8008c16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be4:	f3ef 8310 	mrs	r3, PRIMASK
 8008be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bee:	2301      	movs	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f383 8810 	msr	PRIMASK, r3
}
 8008bf8:	46c0      	nop			; (mov r8, r8)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2110      	movs	r1, #16
 8008c06:	438a      	bics	r2, r1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f383 8810 	msr	PRIMASK, r3
}
 8008c14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2280      	movs	r2, #128	; 0x80
 8008c1a:	2120      	movs	r1, #32
 8008c1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	b00e      	add	sp, #56	; 0x38
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	46c0      	nop			; (mov r8, r8)
 8008c34:	fffffedf 	.word	0xfffffedf

08008c38 <__cvt>:
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	001e      	movs	r6, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	0014      	movs	r4, r2
 8008c40:	b08b      	sub	sp, #44	; 0x2c
 8008c42:	429e      	cmp	r6, r3
 8008c44:	da04      	bge.n	8008c50 <__cvt+0x18>
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	0609      	lsls	r1, r1, #24
 8008c4a:	1873      	adds	r3, r6, r1
 8008c4c:	001e      	movs	r6, r3
 8008c4e:	232d      	movs	r3, #45	; 0x2d
 8008c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008c54:	7013      	strb	r3, [r2, #0]
 8008c56:	2320      	movs	r3, #32
 8008c58:	2203      	movs	r2, #3
 8008c5a:	439f      	bics	r7, r3
 8008c5c:	2f46      	cmp	r7, #70	; 0x46
 8008c5e:	d007      	beq.n	8008c70 <__cvt+0x38>
 8008c60:	003b      	movs	r3, r7
 8008c62:	3b45      	subs	r3, #69	; 0x45
 8008c64:	4259      	negs	r1, r3
 8008c66:	414b      	adcs	r3, r1
 8008c68:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c6a:	3a01      	subs	r2, #1
 8008c6c:	18cb      	adds	r3, r1, r3
 8008c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c70:	ab09      	add	r3, sp, #36	; 0x24
 8008c72:	9304      	str	r3, [sp, #16]
 8008c74:	ab08      	add	r3, sp, #32
 8008c76:	9303      	str	r3, [sp, #12]
 8008c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c7a:	9200      	str	r2, [sp, #0]
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c80:	0022      	movs	r2, r4
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	0033      	movs	r3, r6
 8008c86:	f000 fe87 	bl	8009998 <_dtoa_r>
 8008c8a:	0005      	movs	r5, r0
 8008c8c:	2f47      	cmp	r7, #71	; 0x47
 8008c8e:	d102      	bne.n	8008c96 <__cvt+0x5e>
 8008c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d528      	bpl.n	8008ce8 <__cvt+0xb0>
 8008c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c98:	18eb      	adds	r3, r5, r3
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	2f46      	cmp	r7, #70	; 0x46
 8008c9e:	d114      	bne.n	8008cca <__cvt+0x92>
 8008ca0:	782b      	ldrb	r3, [r5, #0]
 8008ca2:	2b30      	cmp	r3, #48	; 0x30
 8008ca4:	d10c      	bne.n	8008cc0 <__cvt+0x88>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	0020      	movs	r0, r4
 8008cac:	0031      	movs	r1, r6
 8008cae:	f7f7 fbcd 	bl	800044c <__aeabi_dcmpeq>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d104      	bne.n	8008cc0 <__cvt+0x88>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cba:	1a9b      	subs	r3, r3, r2
 8008cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cc2:	9a07      	ldr	r2, [sp, #28]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	18d3      	adds	r3, r2, r3
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2300      	movs	r3, #0
 8008cce:	0020      	movs	r0, r4
 8008cd0:	0031      	movs	r1, r6
 8008cd2:	f7f7 fbbb 	bl	800044c <__aeabi_dcmpeq>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d001      	beq.n	8008cde <__cvt+0xa6>
 8008cda:	9b07      	ldr	r3, [sp, #28]
 8008cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cde:	2230      	movs	r2, #48	; 0x30
 8008ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce2:	9907      	ldr	r1, [sp, #28]
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	d306      	bcc.n	8008cf6 <__cvt+0xbe>
 8008ce8:	0028      	movs	r0, r5
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cee:	1b5b      	subs	r3, r3, r5
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	b00b      	add	sp, #44	; 0x2c
 8008cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf6:	1c59      	adds	r1, r3, #1
 8008cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e7f0      	b.n	8008ce0 <__cvt+0xa8>

08008cfe <__exponent>:
 8008cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d00:	1c83      	adds	r3, r0, #2
 8008d02:	b087      	sub	sp, #28
 8008d04:	9303      	str	r3, [sp, #12]
 8008d06:	0005      	movs	r5, r0
 8008d08:	000c      	movs	r4, r1
 8008d0a:	232b      	movs	r3, #43	; 0x2b
 8008d0c:	7002      	strb	r2, [r0, #0]
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	da01      	bge.n	8008d16 <__exponent+0x18>
 8008d12:	424c      	negs	r4, r1
 8008d14:	3302      	adds	r3, #2
 8008d16:	706b      	strb	r3, [r5, #1]
 8008d18:	2c09      	cmp	r4, #9
 8008d1a:	dd2f      	ble.n	8008d7c <__exponent+0x7e>
 8008d1c:	270a      	movs	r7, #10
 8008d1e:	ab04      	add	r3, sp, #16
 8008d20:	1dde      	adds	r6, r3, #7
 8008d22:	0020      	movs	r0, r4
 8008d24:	0039      	movs	r1, r7
 8008d26:	9601      	str	r6, [sp, #4]
 8008d28:	f7f7 fb7a 	bl	8000420 <__aeabi_idivmod>
 8008d2c:	3e01      	subs	r6, #1
 8008d2e:	3130      	adds	r1, #48	; 0x30
 8008d30:	0020      	movs	r0, r4
 8008d32:	7031      	strb	r1, [r6, #0]
 8008d34:	0039      	movs	r1, r7
 8008d36:	9402      	str	r4, [sp, #8]
 8008d38:	f7f7 fa8c 	bl	8000254 <__divsi3>
 8008d3c:	9b02      	ldr	r3, [sp, #8]
 8008d3e:	0004      	movs	r4, r0
 8008d40:	2b63      	cmp	r3, #99	; 0x63
 8008d42:	dcee      	bgt.n	8008d22 <__exponent+0x24>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	3430      	adds	r4, #48	; 0x30
 8008d48:	1e9a      	subs	r2, r3, #2
 8008d4a:	0013      	movs	r3, r2
 8008d4c:	9903      	ldr	r1, [sp, #12]
 8008d4e:	7014      	strb	r4, [r2, #0]
 8008d50:	a804      	add	r0, sp, #16
 8008d52:	3007      	adds	r0, #7
 8008d54:	4298      	cmp	r0, r3
 8008d56:	d80c      	bhi.n	8008d72 <__exponent+0x74>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4282      	cmp	r2, r0
 8008d5c:	d804      	bhi.n	8008d68 <__exponent+0x6a>
 8008d5e:	aa04      	add	r2, sp, #16
 8008d60:	3309      	adds	r3, #9
 8008d62:	189b      	adds	r3, r3, r2
 8008d64:	9a01      	ldr	r2, [sp, #4]
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	9a03      	ldr	r2, [sp, #12]
 8008d6a:	18d3      	adds	r3, r2, r3
 8008d6c:	1b58      	subs	r0, r3, r5
 8008d6e:	b007      	add	sp, #28
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d72:	7818      	ldrb	r0, [r3, #0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	7008      	strb	r0, [r1, #0]
 8008d78:	3101      	adds	r1, #1
 8008d7a:	e7e9      	b.n	8008d50 <__exponent+0x52>
 8008d7c:	2330      	movs	r3, #48	; 0x30
 8008d7e:	3430      	adds	r4, #48	; 0x30
 8008d80:	70ab      	strb	r3, [r5, #2]
 8008d82:	70ec      	strb	r4, [r5, #3]
 8008d84:	1d2b      	adds	r3, r5, #4
 8008d86:	e7f1      	b.n	8008d6c <__exponent+0x6e>

08008d88 <_printf_float>:
 8008d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8a:	b095      	sub	sp, #84	; 0x54
 8008d8c:	000c      	movs	r4, r1
 8008d8e:	9208      	str	r2, [sp, #32]
 8008d90:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008d92:	9309      	str	r3, [sp, #36]	; 0x24
 8008d94:	0007      	movs	r7, r0
 8008d96:	f000 fce5 	bl	8009764 <_localeconv_r>
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008da0:	f7f7 f9b2 	bl	8000108 <strlen>
 8008da4:	2300      	movs	r3, #0
 8008da6:	9312      	str	r3, [sp, #72]	; 0x48
 8008da8:	7e23      	ldrb	r3, [r4, #24]
 8008daa:	2207      	movs	r2, #7
 8008dac:	930a      	str	r3, [sp, #40]	; 0x28
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	900d      	str	r0, [sp, #52]	; 0x34
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	05c9      	lsls	r1, r1, #23
 8008dba:	d547      	bpl.n	8008e4c <_printf_float+0xc4>
 8008dbc:	189b      	adds	r3, r3, r2
 8008dbe:	4393      	bics	r3, r2
 8008dc0:	001a      	movs	r2, r3
 8008dc2:	3208      	adds	r2, #8
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	681e      	ldr	r6, [r3, #0]
 8008dc8:	685d      	ldr	r5, [r3, #4]
 8008dca:	0032      	movs	r2, r6
 8008dcc:	002b      	movs	r3, r5
 8008dce:	64a2      	str	r2, [r4, #72]	; 0x48
 8008dd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	006b      	lsls	r3, r5, #1
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8008dda:	0030      	movs	r0, r6
 8008ddc:	4bab      	ldr	r3, [pc, #684]	; (800908c <_printf_float+0x304>)
 8008dde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008de0:	4252      	negs	r2, r2
 8008de2:	f7f9 fc65 	bl	80026b0 <__aeabi_dcmpun>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d132      	bne.n	8008e50 <_printf_float+0xc8>
 8008dea:	2201      	movs	r2, #1
 8008dec:	0030      	movs	r0, r6
 8008dee:	4ba7      	ldr	r3, [pc, #668]	; (800908c <_printf_float+0x304>)
 8008df0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008df2:	4252      	negs	r2, r2
 8008df4:	f7f7 fb3a 	bl	800046c <__aeabi_dcmple>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d129      	bne.n	8008e50 <_printf_float+0xc8>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	0030      	movs	r0, r6
 8008e02:	0029      	movs	r1, r5
 8008e04:	f7f7 fb28 	bl	8000458 <__aeabi_dcmplt>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d003      	beq.n	8008e14 <_printf_float+0x8c>
 8008e0c:	0023      	movs	r3, r4
 8008e0e:	222d      	movs	r2, #45	; 0x2d
 8008e10:	3343      	adds	r3, #67	; 0x43
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e16:	4d9e      	ldr	r5, [pc, #632]	; (8009090 <_printf_float+0x308>)
 8008e18:	2b47      	cmp	r3, #71	; 0x47
 8008e1a:	d900      	bls.n	8008e1e <_printf_float+0x96>
 8008e1c:	4d9d      	ldr	r5, [pc, #628]	; (8009094 <_printf_float+0x30c>)
 8008e1e:	2303      	movs	r3, #3
 8008e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	3301      	adds	r3, #1
 8008e26:	439a      	bics	r2, r3
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6022      	str	r2, [r4, #0]
 8008e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	0021      	movs	r1, r4
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	0038      	movs	r0, r7
 8008e36:	9b08      	ldr	r3, [sp, #32]
 8008e38:	aa13      	add	r2, sp, #76	; 0x4c
 8008e3a:	f000 f9fb 	bl	8009234 <_printf_common>
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d000      	beq.n	8008e44 <_printf_float+0xbc>
 8008e42:	e0a3      	b.n	8008f8c <_printf_float+0x204>
 8008e44:	2001      	movs	r0, #1
 8008e46:	4240      	negs	r0, r0
 8008e48:	b015      	add	sp, #84	; 0x54
 8008e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	e7b6      	b.n	8008dbe <_printf_float+0x36>
 8008e50:	0032      	movs	r2, r6
 8008e52:	002b      	movs	r3, r5
 8008e54:	0030      	movs	r0, r6
 8008e56:	0029      	movs	r1, r5
 8008e58:	f7f9 fc2a 	bl	80026b0 <__aeabi_dcmpun>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d00b      	beq.n	8008e78 <_printf_float+0xf0>
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	da03      	bge.n	8008e6c <_printf_float+0xe4>
 8008e64:	0023      	movs	r3, r4
 8008e66:	222d      	movs	r2, #45	; 0x2d
 8008e68:	3343      	adds	r3, #67	; 0x43
 8008e6a:	701a      	strb	r2, [r3, #0]
 8008e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6e:	4d8a      	ldr	r5, [pc, #552]	; (8009098 <_printf_float+0x310>)
 8008e70:	2b47      	cmp	r3, #71	; 0x47
 8008e72:	d9d4      	bls.n	8008e1e <_printf_float+0x96>
 8008e74:	4d89      	ldr	r5, [pc, #548]	; (800909c <_printf_float+0x314>)
 8008e76:	e7d2      	b.n	8008e1e <_printf_float+0x96>
 8008e78:	2220      	movs	r2, #32
 8008e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e7c:	6863      	ldr	r3, [r4, #4]
 8008e7e:	4391      	bics	r1, r2
 8008e80:	910e      	str	r1, [sp, #56]	; 0x38
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	d14a      	bne.n	8008f1c <_printf_float+0x194>
 8008e86:	3307      	adds	r3, #7
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	2380      	movs	r3, #128	; 0x80
 8008e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	9206      	str	r2, [sp, #24]
 8008e96:	aa12      	add	r2, sp, #72	; 0x48
 8008e98:	9205      	str	r2, [sp, #20]
 8008e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	aa11      	add	r2, sp, #68	; 0x44
 8008ea2:	9203      	str	r2, [sp, #12]
 8008ea4:	2223      	movs	r2, #35	; 0x23
 8008ea6:	a908      	add	r1, sp, #32
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	1852      	adds	r2, r2, r1
 8008eae:	9202      	str	r2, [sp, #8]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	0032      	movs	r2, r6
 8008eb4:	002b      	movs	r3, r5
 8008eb6:	0038      	movs	r0, r7
 8008eb8:	f7ff febe 	bl	8008c38 <__cvt>
 8008ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ebe:	0005      	movs	r5, r0
 8008ec0:	2b47      	cmp	r3, #71	; 0x47
 8008ec2:	d109      	bne.n	8008ed8 <_printf_float+0x150>
 8008ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ec6:	1cda      	adds	r2, r3, #3
 8008ec8:	db02      	blt.n	8008ed0 <_printf_float+0x148>
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	dd49      	ble.n	8008f64 <_printf_float+0x1dc>
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	3b02      	subs	r3, #2
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008edc:	2b65      	cmp	r3, #101	; 0x65
 8008ede:	d824      	bhi.n	8008f2a <_printf_float+0x1a2>
 8008ee0:	0020      	movs	r0, r4
 8008ee2:	001a      	movs	r2, r3
 8008ee4:	3901      	subs	r1, #1
 8008ee6:	3050      	adds	r0, #80	; 0x50
 8008ee8:	9111      	str	r1, [sp, #68]	; 0x44
 8008eea:	f7ff ff08 	bl	8008cfe <__exponent>
 8008eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ef2:	1813      	adds	r3, r2, r0
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	2a01      	cmp	r2, #1
 8008ef8:	dc02      	bgt.n	8008f00 <_printf_float+0x178>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	07d2      	lsls	r2, r2, #31
 8008efe:	d501      	bpl.n	8008f04 <_printf_float+0x17c>
 8008f00:	3301      	adds	r3, #1
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	2323      	movs	r3, #35	; 0x23
 8008f06:	aa08      	add	r2, sp, #32
 8008f08:	189b      	adds	r3, r3, r2
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d100      	bne.n	8008f12 <_printf_float+0x18a>
 8008f10:	e78d      	b.n	8008e2e <_printf_float+0xa6>
 8008f12:	0023      	movs	r3, r4
 8008f14:	222d      	movs	r2, #45	; 0x2d
 8008f16:	3343      	adds	r3, #67	; 0x43
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	e788      	b.n	8008e2e <_printf_float+0xa6>
 8008f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1e:	2a47      	cmp	r2, #71	; 0x47
 8008f20:	d1b3      	bne.n	8008e8a <_printf_float+0x102>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1b1      	bne.n	8008e8a <_printf_float+0x102>
 8008f26:	3301      	adds	r3, #1
 8008f28:	e7ae      	b.n	8008e88 <_printf_float+0x100>
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	2b66      	cmp	r3, #102	; 0x66
 8008f2e:	d11b      	bne.n	8008f68 <_printf_float+0x1e0>
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	2900      	cmp	r1, #0
 8008f34:	dd09      	ble.n	8008f4a <_printf_float+0x1c2>
 8008f36:	6121      	str	r1, [r4, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <_printf_float+0x1ba>
 8008f3c:	6822      	ldr	r2, [r4, #0]
 8008f3e:	07d2      	lsls	r2, r2, #31
 8008f40:	d50b      	bpl.n	8008f5a <_printf_float+0x1d2>
 8008f42:	3301      	adds	r3, #1
 8008f44:	185b      	adds	r3, r3, r1
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	e007      	b.n	8008f5a <_printf_float+0x1d2>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d103      	bne.n	8008f56 <_printf_float+0x1ce>
 8008f4e:	2201      	movs	r2, #1
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	4211      	tst	r1, r2
 8008f54:	d000      	beq.n	8008f58 <_printf_float+0x1d0>
 8008f56:	1c9a      	adds	r2, r3, #2
 8008f58:	6122      	str	r2, [r4, #16]
 8008f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f5e:	2300      	movs	r3, #0
 8008f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f62:	e7cf      	b.n	8008f04 <_printf_float+0x17c>
 8008f64:	2367      	movs	r3, #103	; 0x67
 8008f66:	930a      	str	r3, [sp, #40]	; 0x28
 8008f68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	db06      	blt.n	8008f7e <_printf_float+0x1f6>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	6121      	str	r1, [r4, #16]
 8008f74:	07db      	lsls	r3, r3, #31
 8008f76:	d5f0      	bpl.n	8008f5a <_printf_float+0x1d2>
 8008f78:	3101      	adds	r1, #1
 8008f7a:	6121      	str	r1, [r4, #16]
 8008f7c:	e7ed      	b.n	8008f5a <_printf_float+0x1d2>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	2900      	cmp	r1, #0
 8008f82:	dc01      	bgt.n	8008f88 <_printf_float+0x200>
 8008f84:	1892      	adds	r2, r2, r2
 8008f86:	1a52      	subs	r2, r2, r1
 8008f88:	189b      	adds	r3, r3, r2
 8008f8a:	e7dc      	b.n	8008f46 <_printf_float+0x1be>
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	0553      	lsls	r3, r2, #21
 8008f90:	d408      	bmi.n	8008fa4 <_printf_float+0x21c>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	002a      	movs	r2, r5
 8008f96:	0038      	movs	r0, r7
 8008f98:	9908      	ldr	r1, [sp, #32]
 8008f9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f9c:	47a8      	blx	r5
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d12a      	bne.n	8008ff8 <_printf_float+0x270>
 8008fa2:	e74f      	b.n	8008e44 <_printf_float+0xbc>
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa6:	2b65      	cmp	r3, #101	; 0x65
 8008fa8:	d800      	bhi.n	8008fac <_printf_float+0x224>
 8008faa:	e0ec      	b.n	8009186 <_printf_float+0x3fe>
 8008fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f7f7 fa4a 	bl	800044c <__aeabi_dcmpeq>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d034      	beq.n	8009026 <_printf_float+0x29e>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	0038      	movs	r0, r7
 8008fc0:	4a37      	ldr	r2, [pc, #220]	; (80090a0 <_printf_float+0x318>)
 8008fc2:	9908      	ldr	r1, [sp, #32]
 8008fc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fc6:	47a8      	blx	r5
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d100      	bne.n	8008fce <_printf_float+0x246>
 8008fcc:	e73a      	b.n	8008e44 <_printf_float+0xbc>
 8008fce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	db02      	blt.n	8008fdc <_printf_float+0x254>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	07db      	lsls	r3, r3, #31
 8008fda:	d50d      	bpl.n	8008ff8 <_printf_float+0x270>
 8008fdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fde:	0038      	movs	r0, r7
 8008fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe4:	9908      	ldr	r1, [sp, #32]
 8008fe6:	47a8      	blx	r5
 8008fe8:	2500      	movs	r5, #0
 8008fea:	3001      	adds	r0, #1
 8008fec:	d100      	bne.n	8008ff0 <_printf_float+0x268>
 8008fee:	e729      	b.n	8008e44 <_printf_float+0xbc>
 8008ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	42ab      	cmp	r3, r5
 8008ff6:	dc0a      	bgt.n	800900e <_printf_float+0x286>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	079b      	lsls	r3, r3, #30
 8008ffc:	d500      	bpl.n	8009000 <_printf_float+0x278>
 8008ffe:	e116      	b.n	800922e <_printf_float+0x4a6>
 8009000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	4298      	cmp	r0, r3
 8009006:	db00      	blt.n	800900a <_printf_float+0x282>
 8009008:	e71e      	b.n	8008e48 <_printf_float+0xc0>
 800900a:	0018      	movs	r0, r3
 800900c:	e71c      	b.n	8008e48 <_printf_float+0xc0>
 800900e:	0022      	movs	r2, r4
 8009010:	2301      	movs	r3, #1
 8009012:	0038      	movs	r0, r7
 8009014:	9908      	ldr	r1, [sp, #32]
 8009016:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009018:	321a      	adds	r2, #26
 800901a:	47b0      	blx	r6
 800901c:	3001      	adds	r0, #1
 800901e:	d100      	bne.n	8009022 <_printf_float+0x29a>
 8009020:	e710      	b.n	8008e44 <_printf_float+0xbc>
 8009022:	3501      	adds	r5, #1
 8009024:	e7e4      	b.n	8008ff0 <_printf_float+0x268>
 8009026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009028:	2b00      	cmp	r3, #0
 800902a:	dc3b      	bgt.n	80090a4 <_printf_float+0x31c>
 800902c:	2301      	movs	r3, #1
 800902e:	0038      	movs	r0, r7
 8009030:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <_printf_float+0x318>)
 8009032:	9908      	ldr	r1, [sp, #32]
 8009034:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009036:	47b0      	blx	r6
 8009038:	3001      	adds	r0, #1
 800903a:	d100      	bne.n	800903e <_printf_float+0x2b6>
 800903c:	e702      	b.n	8008e44 <_printf_float+0xbc>
 800903e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009040:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009042:	4313      	orrs	r3, r2
 8009044:	d102      	bne.n	800904c <_printf_float+0x2c4>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	07db      	lsls	r3, r3, #31
 800904a:	d5d5      	bpl.n	8008ff8 <_printf_float+0x270>
 800904c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800904e:	0038      	movs	r0, r7
 8009050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009052:	9908      	ldr	r1, [sp, #32]
 8009054:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009056:	47b0      	blx	r6
 8009058:	2300      	movs	r3, #0
 800905a:	3001      	adds	r0, #1
 800905c:	d100      	bne.n	8009060 <_printf_float+0x2d8>
 800905e:	e6f1      	b.n	8008e44 <_printf_float+0xbc>
 8009060:	930a      	str	r3, [sp, #40]	; 0x28
 8009062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009066:	425b      	negs	r3, r3
 8009068:	4293      	cmp	r3, r2
 800906a:	dc01      	bgt.n	8009070 <_printf_float+0x2e8>
 800906c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906e:	e791      	b.n	8008f94 <_printf_float+0x20c>
 8009070:	0022      	movs	r2, r4
 8009072:	2301      	movs	r3, #1
 8009074:	0038      	movs	r0, r7
 8009076:	9908      	ldr	r1, [sp, #32]
 8009078:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800907a:	321a      	adds	r2, #26
 800907c:	47b0      	blx	r6
 800907e:	3001      	adds	r0, #1
 8009080:	d100      	bne.n	8009084 <_printf_float+0x2fc>
 8009082:	e6df      	b.n	8008e44 <_printf_float+0xbc>
 8009084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009086:	3301      	adds	r3, #1
 8009088:	e7ea      	b.n	8009060 <_printf_float+0x2d8>
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	7fefffff 	.word	0x7fefffff
 8009090:	0800b85c 	.word	0x0800b85c
 8009094:	0800b860 	.word	0x0800b860
 8009098:	0800b864 	.word	0x0800b864
 800909c:	0800b868 	.word	0x0800b868
 80090a0:	0800b86c 	.word	0x0800b86c
 80090a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090a8:	920a      	str	r2, [sp, #40]	; 0x28
 80090aa:	429a      	cmp	r2, r3
 80090ac:	dd00      	ble.n	80090b0 <_printf_float+0x328>
 80090ae:	930a      	str	r3, [sp, #40]	; 0x28
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	dc3d      	bgt.n	8009132 <_printf_float+0x3aa>
 80090b6:	2300      	movs	r3, #0
 80090b8:	930e      	str	r3, [sp, #56]	; 0x38
 80090ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090bc:	43db      	mvns	r3, r3
 80090be:	17db      	asrs	r3, r3, #31
 80090c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80090c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ca:	4013      	ands	r3, r2
 80090cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d2:	4293      	cmp	r3, r2
 80090d4:	dc36      	bgt.n	8009144 <_printf_float+0x3bc>
 80090d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090da:	429a      	cmp	r2, r3
 80090dc:	db40      	blt.n	8009160 <_printf_float+0x3d8>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	07db      	lsls	r3, r3, #31
 80090e2:	d43d      	bmi.n	8009160 <_printf_float+0x3d8>
 80090e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80090e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	1af3      	subs	r3, r6, r3
 80090ec:	1ab6      	subs	r6, r6, r2
 80090ee:	429e      	cmp	r6, r3
 80090f0:	dd00      	ble.n	80090f4 <_printf_float+0x36c>
 80090f2:	001e      	movs	r6, r3
 80090f4:	2e00      	cmp	r6, #0
 80090f6:	dc3c      	bgt.n	8009172 <_printf_float+0x3ea>
 80090f8:	2300      	movs	r3, #0
 80090fa:	930a      	str	r3, [sp, #40]	; 0x28
 80090fc:	43f3      	mvns	r3, r6
 80090fe:	17db      	asrs	r3, r3, #31
 8009100:	930b      	str	r3, [sp, #44]	; 0x2c
 8009102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800910a:	4032      	ands	r2, r6
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009110:	4293      	cmp	r3, r2
 8009112:	dc00      	bgt.n	8009116 <_printf_float+0x38e>
 8009114:	e770      	b.n	8008ff8 <_printf_float+0x270>
 8009116:	0022      	movs	r2, r4
 8009118:	2301      	movs	r3, #1
 800911a:	0038      	movs	r0, r7
 800911c:	9908      	ldr	r1, [sp, #32]
 800911e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009120:	321a      	adds	r2, #26
 8009122:	47a8      	blx	r5
 8009124:	3001      	adds	r0, #1
 8009126:	d100      	bne.n	800912a <_printf_float+0x3a2>
 8009128:	e68c      	b.n	8008e44 <_printf_float+0xbc>
 800912a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800912c:	3301      	adds	r3, #1
 800912e:	930a      	str	r3, [sp, #40]	; 0x28
 8009130:	e7e7      	b.n	8009102 <_printf_float+0x37a>
 8009132:	002a      	movs	r2, r5
 8009134:	0038      	movs	r0, r7
 8009136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009138:	9908      	ldr	r1, [sp, #32]
 800913a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800913c:	47b0      	blx	r6
 800913e:	3001      	adds	r0, #1
 8009140:	d1b9      	bne.n	80090b6 <_printf_float+0x32e>
 8009142:	e67f      	b.n	8008e44 <_printf_float+0xbc>
 8009144:	0022      	movs	r2, r4
 8009146:	2301      	movs	r3, #1
 8009148:	0038      	movs	r0, r7
 800914a:	9908      	ldr	r1, [sp, #32]
 800914c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800914e:	321a      	adds	r2, #26
 8009150:	47b0      	blx	r6
 8009152:	3001      	adds	r0, #1
 8009154:	d100      	bne.n	8009158 <_printf_float+0x3d0>
 8009156:	e675      	b.n	8008e44 <_printf_float+0xbc>
 8009158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915a:	3301      	adds	r3, #1
 800915c:	930e      	str	r3, [sp, #56]	; 0x38
 800915e:	e7b0      	b.n	80090c2 <_printf_float+0x33a>
 8009160:	0038      	movs	r0, r7
 8009162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009166:	9908      	ldr	r1, [sp, #32]
 8009168:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800916a:	47b0      	blx	r6
 800916c:	3001      	adds	r0, #1
 800916e:	d1b9      	bne.n	80090e4 <_printf_float+0x35c>
 8009170:	e668      	b.n	8008e44 <_printf_float+0xbc>
 8009172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009174:	0038      	movs	r0, r7
 8009176:	18ea      	adds	r2, r5, r3
 8009178:	9908      	ldr	r1, [sp, #32]
 800917a:	0033      	movs	r3, r6
 800917c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800917e:	47a8      	blx	r5
 8009180:	3001      	adds	r0, #1
 8009182:	d1b9      	bne.n	80090f8 <_printf_float+0x370>
 8009184:	e65e      	b.n	8008e44 <_printf_float+0xbc>
 8009186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009188:	2b01      	cmp	r3, #1
 800918a:	dc02      	bgt.n	8009192 <_printf_float+0x40a>
 800918c:	2301      	movs	r3, #1
 800918e:	421a      	tst	r2, r3
 8009190:	d03a      	beq.n	8009208 <_printf_float+0x480>
 8009192:	2301      	movs	r3, #1
 8009194:	002a      	movs	r2, r5
 8009196:	0038      	movs	r0, r7
 8009198:	9908      	ldr	r1, [sp, #32]
 800919a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800919c:	47b0      	blx	r6
 800919e:	3001      	adds	r0, #1
 80091a0:	d100      	bne.n	80091a4 <_printf_float+0x41c>
 80091a2:	e64f      	b.n	8008e44 <_printf_float+0xbc>
 80091a4:	0038      	movs	r0, r7
 80091a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091aa:	9908      	ldr	r1, [sp, #32]
 80091ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091ae:	47b0      	blx	r6
 80091b0:	3001      	adds	r0, #1
 80091b2:	d100      	bne.n	80091b6 <_printf_float+0x42e>
 80091b4:	e646      	b.n	8008e44 <_printf_float+0xbc>
 80091b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80091b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80091ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091bc:	2200      	movs	r2, #0
 80091be:	001e      	movs	r6, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	f7f7 f943 	bl	800044c <__aeabi_dcmpeq>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d11c      	bne.n	8009204 <_printf_float+0x47c>
 80091ca:	0033      	movs	r3, r6
 80091cc:	1c6a      	adds	r2, r5, #1
 80091ce:	3b01      	subs	r3, #1
 80091d0:	0038      	movs	r0, r7
 80091d2:	9908      	ldr	r1, [sp, #32]
 80091d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80091d6:	47a8      	blx	r5
 80091d8:	3001      	adds	r0, #1
 80091da:	d10f      	bne.n	80091fc <_printf_float+0x474>
 80091dc:	e632      	b.n	8008e44 <_printf_float+0xbc>
 80091de:	0022      	movs	r2, r4
 80091e0:	2301      	movs	r3, #1
 80091e2:	0038      	movs	r0, r7
 80091e4:	9908      	ldr	r1, [sp, #32]
 80091e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091e8:	321a      	adds	r2, #26
 80091ea:	47b0      	blx	r6
 80091ec:	3001      	adds	r0, #1
 80091ee:	d100      	bne.n	80091f2 <_printf_float+0x46a>
 80091f0:	e628      	b.n	8008e44 <_printf_float+0xbc>
 80091f2:	3501      	adds	r5, #1
 80091f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f6:	3b01      	subs	r3, #1
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	dcf0      	bgt.n	80091de <_printf_float+0x456>
 80091fc:	0022      	movs	r2, r4
 80091fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009200:	3250      	adds	r2, #80	; 0x50
 8009202:	e6c8      	b.n	8008f96 <_printf_float+0x20e>
 8009204:	2500      	movs	r5, #0
 8009206:	e7f5      	b.n	80091f4 <_printf_float+0x46c>
 8009208:	002a      	movs	r2, r5
 800920a:	e7e1      	b.n	80091d0 <_printf_float+0x448>
 800920c:	0022      	movs	r2, r4
 800920e:	2301      	movs	r3, #1
 8009210:	0038      	movs	r0, r7
 8009212:	9908      	ldr	r1, [sp, #32]
 8009214:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009216:	3219      	adds	r2, #25
 8009218:	47b0      	blx	r6
 800921a:	3001      	adds	r0, #1
 800921c:	d100      	bne.n	8009220 <_printf_float+0x498>
 800921e:	e611      	b.n	8008e44 <_printf_float+0xbc>
 8009220:	3501      	adds	r5, #1
 8009222:	68e3      	ldr	r3, [r4, #12]
 8009224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	42ab      	cmp	r3, r5
 800922a:	dcef      	bgt.n	800920c <_printf_float+0x484>
 800922c:	e6e8      	b.n	8009000 <_printf_float+0x278>
 800922e:	2500      	movs	r5, #0
 8009230:	e7f7      	b.n	8009222 <_printf_float+0x49a>
 8009232:	46c0      	nop			; (mov r8, r8)

08009234 <_printf_common>:
 8009234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009236:	0016      	movs	r6, r2
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	688a      	ldr	r2, [r1, #8]
 800923c:	690b      	ldr	r3, [r1, #16]
 800923e:	000c      	movs	r4, r1
 8009240:	9000      	str	r0, [sp, #0]
 8009242:	4293      	cmp	r3, r2
 8009244:	da00      	bge.n	8009248 <_printf_common+0x14>
 8009246:	0013      	movs	r3, r2
 8009248:	0022      	movs	r2, r4
 800924a:	6033      	str	r3, [r6, #0]
 800924c:	3243      	adds	r2, #67	; 0x43
 800924e:	7812      	ldrb	r2, [r2, #0]
 8009250:	2a00      	cmp	r2, #0
 8009252:	d001      	beq.n	8009258 <_printf_common+0x24>
 8009254:	3301      	adds	r3, #1
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	069b      	lsls	r3, r3, #26
 800925c:	d502      	bpl.n	8009264 <_printf_common+0x30>
 800925e:	6833      	ldr	r3, [r6, #0]
 8009260:	3302      	adds	r3, #2
 8009262:	6033      	str	r3, [r6, #0]
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	2306      	movs	r3, #6
 8009268:	0015      	movs	r5, r2
 800926a:	401d      	ands	r5, r3
 800926c:	421a      	tst	r2, r3
 800926e:	d027      	beq.n	80092c0 <_printf_common+0x8c>
 8009270:	0023      	movs	r3, r4
 8009272:	3343      	adds	r3, #67	; 0x43
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	1e5a      	subs	r2, r3, #1
 8009278:	4193      	sbcs	r3, r2
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	0692      	lsls	r2, r2, #26
 800927e:	d430      	bmi.n	80092e2 <_printf_common+0xae>
 8009280:	0022      	movs	r2, r4
 8009282:	9901      	ldr	r1, [sp, #4]
 8009284:	9800      	ldr	r0, [sp, #0]
 8009286:	9d08      	ldr	r5, [sp, #32]
 8009288:	3243      	adds	r2, #67	; 0x43
 800928a:	47a8      	blx	r5
 800928c:	3001      	adds	r0, #1
 800928e:	d025      	beq.n	80092dc <_printf_common+0xa8>
 8009290:	2206      	movs	r2, #6
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	2500      	movs	r5, #0
 8009296:	4013      	ands	r3, r2
 8009298:	2b04      	cmp	r3, #4
 800929a:	d105      	bne.n	80092a8 <_printf_common+0x74>
 800929c:	6833      	ldr	r3, [r6, #0]
 800929e:	68e5      	ldr	r5, [r4, #12]
 80092a0:	1aed      	subs	r5, r5, r3
 80092a2:	43eb      	mvns	r3, r5
 80092a4:	17db      	asrs	r3, r3, #31
 80092a6:	401d      	ands	r5, r3
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	6922      	ldr	r2, [r4, #16]
 80092ac:	4293      	cmp	r3, r2
 80092ae:	dd01      	ble.n	80092b4 <_printf_common+0x80>
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	18ed      	adds	r5, r5, r3
 80092b4:	2600      	movs	r6, #0
 80092b6:	42b5      	cmp	r5, r6
 80092b8:	d120      	bne.n	80092fc <_printf_common+0xc8>
 80092ba:	2000      	movs	r0, #0
 80092bc:	e010      	b.n	80092e0 <_printf_common+0xac>
 80092be:	3501      	adds	r5, #1
 80092c0:	68e3      	ldr	r3, [r4, #12]
 80092c2:	6832      	ldr	r2, [r6, #0]
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	42ab      	cmp	r3, r5
 80092c8:	ddd2      	ble.n	8009270 <_printf_common+0x3c>
 80092ca:	0022      	movs	r2, r4
 80092cc:	2301      	movs	r3, #1
 80092ce:	9901      	ldr	r1, [sp, #4]
 80092d0:	9800      	ldr	r0, [sp, #0]
 80092d2:	9f08      	ldr	r7, [sp, #32]
 80092d4:	3219      	adds	r2, #25
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	d1f0      	bne.n	80092be <_printf_common+0x8a>
 80092dc:	2001      	movs	r0, #1
 80092de:	4240      	negs	r0, r0
 80092e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092e2:	2030      	movs	r0, #48	; 0x30
 80092e4:	18e1      	adds	r1, r4, r3
 80092e6:	3143      	adds	r1, #67	; 0x43
 80092e8:	7008      	strb	r0, [r1, #0]
 80092ea:	0021      	movs	r1, r4
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	3145      	adds	r1, #69	; 0x45
 80092f0:	7809      	ldrb	r1, [r1, #0]
 80092f2:	18a2      	adds	r2, r4, r2
 80092f4:	3243      	adds	r2, #67	; 0x43
 80092f6:	3302      	adds	r3, #2
 80092f8:	7011      	strb	r1, [r2, #0]
 80092fa:	e7c1      	b.n	8009280 <_printf_common+0x4c>
 80092fc:	0022      	movs	r2, r4
 80092fe:	2301      	movs	r3, #1
 8009300:	9901      	ldr	r1, [sp, #4]
 8009302:	9800      	ldr	r0, [sp, #0]
 8009304:	9f08      	ldr	r7, [sp, #32]
 8009306:	321a      	adds	r2, #26
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	d0e6      	beq.n	80092dc <_printf_common+0xa8>
 800930e:	3601      	adds	r6, #1
 8009310:	e7d1      	b.n	80092b6 <_printf_common+0x82>
	...

08009314 <_printf_i>:
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	b08b      	sub	sp, #44	; 0x2c
 8009318:	9206      	str	r2, [sp, #24]
 800931a:	000a      	movs	r2, r1
 800931c:	3243      	adds	r2, #67	; 0x43
 800931e:	9307      	str	r3, [sp, #28]
 8009320:	9005      	str	r0, [sp, #20]
 8009322:	9204      	str	r2, [sp, #16]
 8009324:	7e0a      	ldrb	r2, [r1, #24]
 8009326:	000c      	movs	r4, r1
 8009328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800932a:	2a78      	cmp	r2, #120	; 0x78
 800932c:	d809      	bhi.n	8009342 <_printf_i+0x2e>
 800932e:	2a62      	cmp	r2, #98	; 0x62
 8009330:	d80b      	bhi.n	800934a <_printf_i+0x36>
 8009332:	2a00      	cmp	r2, #0
 8009334:	d100      	bne.n	8009338 <_printf_i+0x24>
 8009336:	e0be      	b.n	80094b6 <_printf_i+0x1a2>
 8009338:	497c      	ldr	r1, [pc, #496]	; (800952c <_printf_i+0x218>)
 800933a:	9103      	str	r1, [sp, #12]
 800933c:	2a58      	cmp	r2, #88	; 0x58
 800933e:	d100      	bne.n	8009342 <_printf_i+0x2e>
 8009340:	e093      	b.n	800946a <_printf_i+0x156>
 8009342:	0026      	movs	r6, r4
 8009344:	3642      	adds	r6, #66	; 0x42
 8009346:	7032      	strb	r2, [r6, #0]
 8009348:	e022      	b.n	8009390 <_printf_i+0x7c>
 800934a:	0010      	movs	r0, r2
 800934c:	3863      	subs	r0, #99	; 0x63
 800934e:	2815      	cmp	r0, #21
 8009350:	d8f7      	bhi.n	8009342 <_printf_i+0x2e>
 8009352:	f7f6 feeb 	bl	800012c <__gnu_thumb1_case_shi>
 8009356:	0016      	.short	0x0016
 8009358:	fff6001f 	.word	0xfff6001f
 800935c:	fff6fff6 	.word	0xfff6fff6
 8009360:	001ffff6 	.word	0x001ffff6
 8009364:	fff6fff6 	.word	0xfff6fff6
 8009368:	fff6fff6 	.word	0xfff6fff6
 800936c:	003600a3 	.word	0x003600a3
 8009370:	fff60083 	.word	0xfff60083
 8009374:	00b4fff6 	.word	0x00b4fff6
 8009378:	0036fff6 	.word	0x0036fff6
 800937c:	fff6fff6 	.word	0xfff6fff6
 8009380:	0087      	.short	0x0087
 8009382:	0026      	movs	r6, r4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	3642      	adds	r6, #66	; 0x42
 8009388:	1d11      	adds	r1, r2, #4
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	7033      	strb	r3, [r6, #0]
 8009390:	2301      	movs	r3, #1
 8009392:	e0a2      	b.n	80094da <_printf_i+0x1c6>
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	6809      	ldr	r1, [r1, #0]
 8009398:	1d02      	adds	r2, r0, #4
 800939a:	060d      	lsls	r5, r1, #24
 800939c:	d50b      	bpl.n	80093b6 <_printf_i+0xa2>
 800939e:	6805      	ldr	r5, [r0, #0]
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	da03      	bge.n	80093ae <_printf_i+0x9a>
 80093a6:	232d      	movs	r3, #45	; 0x2d
 80093a8:	9a04      	ldr	r2, [sp, #16]
 80093aa:	426d      	negs	r5, r5
 80093ac:	7013      	strb	r3, [r2, #0]
 80093ae:	4b5f      	ldr	r3, [pc, #380]	; (800952c <_printf_i+0x218>)
 80093b0:	270a      	movs	r7, #10
 80093b2:	9303      	str	r3, [sp, #12]
 80093b4:	e01b      	b.n	80093ee <_printf_i+0xda>
 80093b6:	6805      	ldr	r5, [r0, #0]
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	0649      	lsls	r1, r1, #25
 80093bc:	d5f1      	bpl.n	80093a2 <_printf_i+0x8e>
 80093be:	b22d      	sxth	r5, r5
 80093c0:	e7ef      	b.n	80093a2 <_printf_i+0x8e>
 80093c2:	680d      	ldr	r5, [r1, #0]
 80093c4:	6819      	ldr	r1, [r3, #0]
 80093c6:	1d08      	adds	r0, r1, #4
 80093c8:	6018      	str	r0, [r3, #0]
 80093ca:	062e      	lsls	r6, r5, #24
 80093cc:	d501      	bpl.n	80093d2 <_printf_i+0xbe>
 80093ce:	680d      	ldr	r5, [r1, #0]
 80093d0:	e003      	b.n	80093da <_printf_i+0xc6>
 80093d2:	066d      	lsls	r5, r5, #25
 80093d4:	d5fb      	bpl.n	80093ce <_printf_i+0xba>
 80093d6:	680d      	ldr	r5, [r1, #0]
 80093d8:	b2ad      	uxth	r5, r5
 80093da:	4b54      	ldr	r3, [pc, #336]	; (800952c <_printf_i+0x218>)
 80093dc:	2708      	movs	r7, #8
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	2a6f      	cmp	r2, #111	; 0x6f
 80093e2:	d000      	beq.n	80093e6 <_printf_i+0xd2>
 80093e4:	3702      	adds	r7, #2
 80093e6:	0023      	movs	r3, r4
 80093e8:	2200      	movs	r2, #0
 80093ea:	3343      	adds	r3, #67	; 0x43
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	60a3      	str	r3, [r4, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	db03      	blt.n	80093fe <_printf_i+0xea>
 80093f6:	2104      	movs	r1, #4
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	438a      	bics	r2, r1
 80093fc:	6022      	str	r2, [r4, #0]
 80093fe:	2d00      	cmp	r5, #0
 8009400:	d102      	bne.n	8009408 <_printf_i+0xf4>
 8009402:	9e04      	ldr	r6, [sp, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00c      	beq.n	8009422 <_printf_i+0x10e>
 8009408:	9e04      	ldr	r6, [sp, #16]
 800940a:	0028      	movs	r0, r5
 800940c:	0039      	movs	r1, r7
 800940e:	f7f6 ff1d 	bl	800024c <__aeabi_uidivmod>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	3e01      	subs	r6, #1
 8009416:	5c5b      	ldrb	r3, [r3, r1]
 8009418:	7033      	strb	r3, [r6, #0]
 800941a:	002b      	movs	r3, r5
 800941c:	0005      	movs	r5, r0
 800941e:	429f      	cmp	r7, r3
 8009420:	d9f3      	bls.n	800940a <_printf_i+0xf6>
 8009422:	2f08      	cmp	r7, #8
 8009424:	d109      	bne.n	800943a <_printf_i+0x126>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	07db      	lsls	r3, r3, #31
 800942a:	d506      	bpl.n	800943a <_printf_i+0x126>
 800942c:	6862      	ldr	r2, [r4, #4]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	dc02      	bgt.n	800943a <_printf_i+0x126>
 8009434:	2330      	movs	r3, #48	; 0x30
 8009436:	3e01      	subs	r6, #1
 8009438:	7033      	strb	r3, [r6, #0]
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	1b9b      	subs	r3, r3, r6
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	0021      	movs	r1, r4
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	9805      	ldr	r0, [sp, #20]
 8009448:	9b06      	ldr	r3, [sp, #24]
 800944a:	aa09      	add	r2, sp, #36	; 0x24
 800944c:	f7ff fef2 	bl	8009234 <_printf_common>
 8009450:	3001      	adds	r0, #1
 8009452:	d147      	bne.n	80094e4 <_printf_i+0x1d0>
 8009454:	2001      	movs	r0, #1
 8009456:	4240      	negs	r0, r0
 8009458:	b00b      	add	sp, #44	; 0x2c
 800945a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945c:	2220      	movs	r2, #32
 800945e:	6809      	ldr	r1, [r1, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	2278      	movs	r2, #120	; 0x78
 8009466:	4932      	ldr	r1, [pc, #200]	; (8009530 <_printf_i+0x21c>)
 8009468:	9103      	str	r1, [sp, #12]
 800946a:	0021      	movs	r1, r4
 800946c:	3145      	adds	r1, #69	; 0x45
 800946e:	700a      	strb	r2, [r1, #0]
 8009470:	6819      	ldr	r1, [r3, #0]
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	c920      	ldmia	r1!, {r5}
 8009476:	0610      	lsls	r0, r2, #24
 8009478:	d402      	bmi.n	8009480 <_printf_i+0x16c>
 800947a:	0650      	lsls	r0, r2, #25
 800947c:	d500      	bpl.n	8009480 <_printf_i+0x16c>
 800947e:	b2ad      	uxth	r5, r5
 8009480:	6019      	str	r1, [r3, #0]
 8009482:	07d3      	lsls	r3, r2, #31
 8009484:	d502      	bpl.n	800948c <_printf_i+0x178>
 8009486:	2320      	movs	r3, #32
 8009488:	4313      	orrs	r3, r2
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	2710      	movs	r7, #16
 800948e:	2d00      	cmp	r5, #0
 8009490:	d1a9      	bne.n	80093e6 <_printf_i+0xd2>
 8009492:	2220      	movs	r2, #32
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	4393      	bics	r3, r2
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	e7a4      	b.n	80093e6 <_printf_i+0xd2>
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	680d      	ldr	r5, [r1, #0]
 80094a0:	1d10      	adds	r0, r2, #4
 80094a2:	6949      	ldr	r1, [r1, #20]
 80094a4:	6018      	str	r0, [r3, #0]
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	062e      	lsls	r6, r5, #24
 80094aa:	d501      	bpl.n	80094b0 <_printf_i+0x19c>
 80094ac:	6019      	str	r1, [r3, #0]
 80094ae:	e002      	b.n	80094b6 <_printf_i+0x1a2>
 80094b0:	066d      	lsls	r5, r5, #25
 80094b2:	d5fb      	bpl.n	80094ac <_printf_i+0x198>
 80094b4:	8019      	strh	r1, [r3, #0]
 80094b6:	2300      	movs	r3, #0
 80094b8:	9e04      	ldr	r6, [sp, #16]
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	e7c0      	b.n	8009440 <_printf_i+0x12c>
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	1d11      	adds	r1, r2, #4
 80094c2:	6019      	str	r1, [r3, #0]
 80094c4:	6816      	ldr	r6, [r2, #0]
 80094c6:	2100      	movs	r1, #0
 80094c8:	0030      	movs	r0, r6
 80094ca:	6862      	ldr	r2, [r4, #4]
 80094cc:	f000 f9c9 	bl	8009862 <memchr>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d001      	beq.n	80094d8 <_printf_i+0x1c4>
 80094d4:	1b80      	subs	r0, r0, r6
 80094d6:	6060      	str	r0, [r4, #4]
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	2300      	movs	r3, #0
 80094de:	9a04      	ldr	r2, [sp, #16]
 80094e0:	7013      	strb	r3, [r2, #0]
 80094e2:	e7ad      	b.n	8009440 <_printf_i+0x12c>
 80094e4:	0032      	movs	r2, r6
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	9906      	ldr	r1, [sp, #24]
 80094ea:	9805      	ldr	r0, [sp, #20]
 80094ec:	9d07      	ldr	r5, [sp, #28]
 80094ee:	47a8      	blx	r5
 80094f0:	3001      	adds	r0, #1
 80094f2:	d0af      	beq.n	8009454 <_printf_i+0x140>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	079b      	lsls	r3, r3, #30
 80094f8:	d415      	bmi.n	8009526 <_printf_i+0x212>
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fc:	68e0      	ldr	r0, [r4, #12]
 80094fe:	4298      	cmp	r0, r3
 8009500:	daaa      	bge.n	8009458 <_printf_i+0x144>
 8009502:	0018      	movs	r0, r3
 8009504:	e7a8      	b.n	8009458 <_printf_i+0x144>
 8009506:	0022      	movs	r2, r4
 8009508:	2301      	movs	r3, #1
 800950a:	9906      	ldr	r1, [sp, #24]
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	9e07      	ldr	r6, [sp, #28]
 8009510:	3219      	adds	r2, #25
 8009512:	47b0      	blx	r6
 8009514:	3001      	adds	r0, #1
 8009516:	d09d      	beq.n	8009454 <_printf_i+0x140>
 8009518:	3501      	adds	r5, #1
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	42ab      	cmp	r3, r5
 8009522:	dcf0      	bgt.n	8009506 <_printf_i+0x1f2>
 8009524:	e7e9      	b.n	80094fa <_printf_i+0x1e6>
 8009526:	2500      	movs	r5, #0
 8009528:	e7f7      	b.n	800951a <_printf_i+0x206>
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	0800b86e 	.word	0x0800b86e
 8009530:	0800b87f 	.word	0x0800b87f

08009534 <std>:
 8009534:	2300      	movs	r3, #0
 8009536:	b510      	push	{r4, lr}
 8009538:	0004      	movs	r4, r0
 800953a:	6003      	str	r3, [r0, #0]
 800953c:	6043      	str	r3, [r0, #4]
 800953e:	6083      	str	r3, [r0, #8]
 8009540:	8181      	strh	r1, [r0, #12]
 8009542:	6643      	str	r3, [r0, #100]	; 0x64
 8009544:	81c2      	strh	r2, [r0, #14]
 8009546:	6103      	str	r3, [r0, #16]
 8009548:	6143      	str	r3, [r0, #20]
 800954a:	6183      	str	r3, [r0, #24]
 800954c:	0019      	movs	r1, r3
 800954e:	2208      	movs	r2, #8
 8009550:	305c      	adds	r0, #92	; 0x5c
 8009552:	f000 f8ff 	bl	8009754 <memset>
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <std+0x50>)
 8009558:	6224      	str	r4, [r4, #32]
 800955a:	6263      	str	r3, [r4, #36]	; 0x24
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <std+0x54>)
 800955e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <std+0x58>)
 8009562:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <std+0x5c>)
 8009566:	6323      	str	r3, [r4, #48]	; 0x30
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <std+0x60>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d005      	beq.n	800957a <std+0x46>
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <std+0x64>)
 8009570:	429c      	cmp	r4, r3
 8009572:	d002      	beq.n	800957a <std+0x46>
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <std+0x68>)
 8009576:	429c      	cmp	r4, r3
 8009578:	d103      	bne.n	8009582 <std+0x4e>
 800957a:	0020      	movs	r0, r4
 800957c:	3058      	adds	r0, #88	; 0x58
 800957e:	f000 f96d 	bl	800985c <__retarget_lock_init_recursive>
 8009582:	bd10      	pop	{r4, pc}
 8009584:	080096bd 	.word	0x080096bd
 8009588:	080096e5 	.word	0x080096e5
 800958c:	0800971d 	.word	0x0800971d
 8009590:	08009749 	.word	0x08009749
 8009594:	20000494 	.word	0x20000494
 8009598:	200004fc 	.word	0x200004fc
 800959c:	20000564 	.word	0x20000564

080095a0 <stdio_exit_handler>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4a03      	ldr	r2, [pc, #12]	; (80095b0 <stdio_exit_handler+0x10>)
 80095a4:	4903      	ldr	r1, [pc, #12]	; (80095b4 <stdio_exit_handler+0x14>)
 80095a6:	4804      	ldr	r0, [pc, #16]	; (80095b8 <stdio_exit_handler+0x18>)
 80095a8:	f000 f86c 	bl	8009684 <_fwalk_sglue>
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	2000000c 	.word	0x2000000c
 80095b4:	0800b00d 	.word	0x0800b00d
 80095b8:	20000018 	.word	0x20000018

080095bc <cleanup_stdio>:
 80095bc:	6841      	ldr	r1, [r0, #4]
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <cleanup_stdio+0x30>)
 80095c0:	b510      	push	{r4, lr}
 80095c2:	0004      	movs	r4, r0
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d001      	beq.n	80095cc <cleanup_stdio+0x10>
 80095c8:	f001 fd20 	bl	800b00c <_fflush_r>
 80095cc:	68a1      	ldr	r1, [r4, #8]
 80095ce:	4b08      	ldr	r3, [pc, #32]	; (80095f0 <cleanup_stdio+0x34>)
 80095d0:	4299      	cmp	r1, r3
 80095d2:	d002      	beq.n	80095da <cleanup_stdio+0x1e>
 80095d4:	0020      	movs	r0, r4
 80095d6:	f001 fd19 	bl	800b00c <_fflush_r>
 80095da:	68e1      	ldr	r1, [r4, #12]
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <cleanup_stdio+0x38>)
 80095de:	4299      	cmp	r1, r3
 80095e0:	d002      	beq.n	80095e8 <cleanup_stdio+0x2c>
 80095e2:	0020      	movs	r0, r4
 80095e4:	f001 fd12 	bl	800b00c <_fflush_r>
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	20000494 	.word	0x20000494
 80095f0:	200004fc 	.word	0x200004fc
 80095f4:	20000564 	.word	0x20000564

080095f8 <global_stdio_init.part.0>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <global_stdio_init.part.0+0x28>)
 80095fc:	4a09      	ldr	r2, [pc, #36]	; (8009624 <global_stdio_init.part.0+0x2c>)
 80095fe:	2104      	movs	r1, #4
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	4809      	ldr	r0, [pc, #36]	; (8009628 <global_stdio_init.part.0+0x30>)
 8009604:	2200      	movs	r2, #0
 8009606:	f7ff ff95 	bl	8009534 <std>
 800960a:	2201      	movs	r2, #1
 800960c:	2109      	movs	r1, #9
 800960e:	4807      	ldr	r0, [pc, #28]	; (800962c <global_stdio_init.part.0+0x34>)
 8009610:	f7ff ff90 	bl	8009534 <std>
 8009614:	2202      	movs	r2, #2
 8009616:	2112      	movs	r1, #18
 8009618:	4805      	ldr	r0, [pc, #20]	; (8009630 <global_stdio_init.part.0+0x38>)
 800961a:	f7ff ff8b 	bl	8009534 <std>
 800961e:	bd10      	pop	{r4, pc}
 8009620:	200005cc 	.word	0x200005cc
 8009624:	080095a1 	.word	0x080095a1
 8009628:	20000494 	.word	0x20000494
 800962c:	200004fc 	.word	0x200004fc
 8009630:	20000564 	.word	0x20000564

08009634 <__sfp_lock_acquire>:
 8009634:	b510      	push	{r4, lr}
 8009636:	4802      	ldr	r0, [pc, #8]	; (8009640 <__sfp_lock_acquire+0xc>)
 8009638:	f000 f911 	bl	800985e <__retarget_lock_acquire_recursive>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	200005d5 	.word	0x200005d5

08009644 <__sfp_lock_release>:
 8009644:	b510      	push	{r4, lr}
 8009646:	4802      	ldr	r0, [pc, #8]	; (8009650 <__sfp_lock_release+0xc>)
 8009648:	f000 f90a 	bl	8009860 <__retarget_lock_release_recursive>
 800964c:	bd10      	pop	{r4, pc}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	200005d5 	.word	0x200005d5

08009654 <__sinit>:
 8009654:	b510      	push	{r4, lr}
 8009656:	0004      	movs	r4, r0
 8009658:	f7ff ffec 	bl	8009634 <__sfp_lock_acquire>
 800965c:	6a23      	ldr	r3, [r4, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <__sinit+0x14>
 8009662:	f7ff ffef 	bl	8009644 <__sfp_lock_release>
 8009666:	bd10      	pop	{r4, pc}
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <__sinit+0x28>)
 800966a:	6223      	str	r3, [r4, #32]
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <__sinit+0x2c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f6      	bne.n	8009662 <__sinit+0xe>
 8009674:	f7ff ffc0 	bl	80095f8 <global_stdio_init.part.0>
 8009678:	e7f3      	b.n	8009662 <__sinit+0xe>
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	080095bd 	.word	0x080095bd
 8009680:	200005cc 	.word	0x200005cc

08009684 <_fwalk_sglue>:
 8009684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009686:	0014      	movs	r4, r2
 8009688:	2600      	movs	r6, #0
 800968a:	9000      	str	r0, [sp, #0]
 800968c:	9101      	str	r1, [sp, #4]
 800968e:	68a5      	ldr	r5, [r4, #8]
 8009690:	6867      	ldr	r7, [r4, #4]
 8009692:	3f01      	subs	r7, #1
 8009694:	d504      	bpl.n	80096a0 <_fwalk_sglue+0x1c>
 8009696:	6824      	ldr	r4, [r4, #0]
 8009698:	2c00      	cmp	r4, #0
 800969a:	d1f8      	bne.n	800968e <_fwalk_sglue+0xa>
 800969c:	0030      	movs	r0, r6
 800969e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096a0:	89ab      	ldrh	r3, [r5, #12]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d908      	bls.n	80096b8 <_fwalk_sglue+0x34>
 80096a6:	220e      	movs	r2, #14
 80096a8:	5eab      	ldrsh	r3, [r5, r2]
 80096aa:	3301      	adds	r3, #1
 80096ac:	d004      	beq.n	80096b8 <_fwalk_sglue+0x34>
 80096ae:	0029      	movs	r1, r5
 80096b0:	9800      	ldr	r0, [sp, #0]
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4306      	orrs	r6, r0
 80096b8:	3568      	adds	r5, #104	; 0x68
 80096ba:	e7ea      	b.n	8009692 <_fwalk_sglue+0xe>

080096bc <__sread>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	000c      	movs	r4, r1
 80096c0:	250e      	movs	r5, #14
 80096c2:	5f49      	ldrsh	r1, [r1, r5]
 80096c4:	f000 f878 	bl	80097b8 <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	db03      	blt.n	80096d4 <__sread+0x18>
 80096cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096ce:	181b      	adds	r3, r3, r0
 80096d0:	6563      	str	r3, [r4, #84]	; 0x54
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	4a02      	ldr	r2, [pc, #8]	; (80096e0 <__sread+0x24>)
 80096d8:	4013      	ands	r3, r2
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	e7f9      	b.n	80096d2 <__sread+0x16>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	ffffefff 	.word	0xffffefff

080096e4 <__swrite>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	001f      	movs	r7, r3
 80096e8:	898b      	ldrh	r3, [r1, #12]
 80096ea:	0005      	movs	r5, r0
 80096ec:	000c      	movs	r4, r1
 80096ee:	0016      	movs	r6, r2
 80096f0:	05db      	lsls	r3, r3, #23
 80096f2:	d505      	bpl.n	8009700 <__swrite+0x1c>
 80096f4:	230e      	movs	r3, #14
 80096f6:	5ec9      	ldrsh	r1, [r1, r3]
 80096f8:	2200      	movs	r2, #0
 80096fa:	2302      	movs	r3, #2
 80096fc:	f000 f848 	bl	8009790 <_lseek_r>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	4a05      	ldr	r2, [pc, #20]	; (8009718 <__swrite+0x34>)
 8009704:	0028      	movs	r0, r5
 8009706:	4013      	ands	r3, r2
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	0032      	movs	r2, r6
 800970c:	230e      	movs	r3, #14
 800970e:	5ee1      	ldrsh	r1, [r4, r3]
 8009710:	003b      	movs	r3, r7
 8009712:	f000 f865 	bl	80097e0 <_write_r>
 8009716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009718:	ffffefff 	.word	0xffffefff

0800971c <__sseek>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	000c      	movs	r4, r1
 8009720:	250e      	movs	r5, #14
 8009722:	5f49      	ldrsh	r1, [r1, r5]
 8009724:	f000 f834 	bl	8009790 <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	1c42      	adds	r2, r0, #1
 800972c:	d103      	bne.n	8009736 <__sseek+0x1a>
 800972e:	4a05      	ldr	r2, [pc, #20]	; (8009744 <__sseek+0x28>)
 8009730:	4013      	ands	r3, r2
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	2280      	movs	r2, #128	; 0x80
 8009738:	0152      	lsls	r2, r2, #5
 800973a:	4313      	orrs	r3, r2
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	6560      	str	r0, [r4, #84]	; 0x54
 8009740:	e7f8      	b.n	8009734 <__sseek+0x18>
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	ffffefff 	.word	0xffffefff

08009748 <__sclose>:
 8009748:	b510      	push	{r4, lr}
 800974a:	230e      	movs	r3, #14
 800974c:	5ec9      	ldrsh	r1, [r1, r3]
 800974e:	f000 f80d 	bl	800976c <_close_r>
 8009752:	bd10      	pop	{r4, pc}

08009754 <memset>:
 8009754:	0003      	movs	r3, r0
 8009756:	1882      	adds	r2, r0, r2
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	7019      	strb	r1, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <_localeconv_r>:
 8009764:	4800      	ldr	r0, [pc, #0]	; (8009768 <_localeconv_r+0x4>)
 8009766:	4770      	bx	lr
 8009768:	20000158 	.word	0x20000158

0800976c <_close_r>:
 800976c:	2300      	movs	r3, #0
 800976e:	b570      	push	{r4, r5, r6, lr}
 8009770:	4d06      	ldr	r5, [pc, #24]	; (800978c <_close_r+0x20>)
 8009772:	0004      	movs	r4, r0
 8009774:	0008      	movs	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7fa fd79 	bl	800426e <_close>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d103      	bne.n	8009788 <_close_r+0x1c>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d000      	beq.n	8009788 <_close_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	200005d0 	.word	0x200005d0

08009790 <_lseek_r>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	0004      	movs	r4, r0
 8009794:	0008      	movs	r0, r1
 8009796:	0011      	movs	r1, r2
 8009798:	001a      	movs	r2, r3
 800979a:	2300      	movs	r3, #0
 800979c:	4d05      	ldr	r5, [pc, #20]	; (80097b4 <_lseek_r+0x24>)
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7fa fd86 	bl	80042b0 <_lseek>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d103      	bne.n	80097b0 <_lseek_r+0x20>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d000      	beq.n	80097b0 <_lseek_r+0x20>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	200005d0 	.word	0x200005d0

080097b8 <_read_r>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	0004      	movs	r4, r0
 80097bc:	0008      	movs	r0, r1
 80097be:	0011      	movs	r1, r2
 80097c0:	001a      	movs	r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	4d05      	ldr	r5, [pc, #20]	; (80097dc <_read_r+0x24>)
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7fa fd18 	bl	80041fc <_read>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d103      	bne.n	80097d8 <_read_r+0x20>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d000      	beq.n	80097d8 <_read_r+0x20>
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	200005d0 	.word	0x200005d0

080097e0 <_write_r>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	0004      	movs	r4, r0
 80097e4:	0008      	movs	r0, r1
 80097e6:	0011      	movs	r1, r2
 80097e8:	001a      	movs	r2, r3
 80097ea:	2300      	movs	r3, #0
 80097ec:	4d05      	ldr	r5, [pc, #20]	; (8009804 <_write_r+0x24>)
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f7fa fd21 	bl	8004236 <_write>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d103      	bne.n	8009800 <_write_r+0x20>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d000      	beq.n	8009800 <_write_r+0x20>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	bd70      	pop	{r4, r5, r6, pc}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	200005d0 	.word	0x200005d0

08009808 <__errno>:
 8009808:	4b01      	ldr	r3, [pc, #4]	; (8009810 <__errno+0x8>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	20000064 	.word	0x20000064

08009814 <__libc_init_array>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	2600      	movs	r6, #0
 8009818:	4c0c      	ldr	r4, [pc, #48]	; (800984c <__libc_init_array+0x38>)
 800981a:	4d0d      	ldr	r5, [pc, #52]	; (8009850 <__libc_init_array+0x3c>)
 800981c:	1b64      	subs	r4, r4, r5
 800981e:	10a4      	asrs	r4, r4, #2
 8009820:	42a6      	cmp	r6, r4
 8009822:	d109      	bne.n	8009838 <__libc_init_array+0x24>
 8009824:	2600      	movs	r6, #0
 8009826:	f001 ff77 	bl	800b718 <_init>
 800982a:	4c0a      	ldr	r4, [pc, #40]	; (8009854 <__libc_init_array+0x40>)
 800982c:	4d0a      	ldr	r5, [pc, #40]	; (8009858 <__libc_init_array+0x44>)
 800982e:	1b64      	subs	r4, r4, r5
 8009830:	10a4      	asrs	r4, r4, #2
 8009832:	42a6      	cmp	r6, r4
 8009834:	d105      	bne.n	8009842 <__libc_init_array+0x2e>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	00b3      	lsls	r3, r6, #2
 800983a:	58eb      	ldr	r3, [r5, r3]
 800983c:	4798      	blx	r3
 800983e:	3601      	adds	r6, #1
 8009840:	e7ee      	b.n	8009820 <__libc_init_array+0xc>
 8009842:	00b3      	lsls	r3, r6, #2
 8009844:	58eb      	ldr	r3, [r5, r3]
 8009846:	4798      	blx	r3
 8009848:	3601      	adds	r6, #1
 800984a:	e7f2      	b.n	8009832 <__libc_init_array+0x1e>
 800984c:	0800bbd4 	.word	0x0800bbd4
 8009850:	0800bbd4 	.word	0x0800bbd4
 8009854:	0800bbd8 	.word	0x0800bbd8
 8009858:	0800bbd4 	.word	0x0800bbd4

0800985c <__retarget_lock_init_recursive>:
 800985c:	4770      	bx	lr

0800985e <__retarget_lock_acquire_recursive>:
 800985e:	4770      	bx	lr

08009860 <__retarget_lock_release_recursive>:
 8009860:	4770      	bx	lr

08009862 <memchr>:
 8009862:	b2c9      	uxtb	r1, r1
 8009864:	1882      	adds	r2, r0, r2
 8009866:	4290      	cmp	r0, r2
 8009868:	d101      	bne.n	800986e <memchr+0xc>
 800986a:	2000      	movs	r0, #0
 800986c:	4770      	bx	lr
 800986e:	7803      	ldrb	r3, [r0, #0]
 8009870:	428b      	cmp	r3, r1
 8009872:	d0fb      	beq.n	800986c <memchr+0xa>
 8009874:	3001      	adds	r0, #1
 8009876:	e7f6      	b.n	8009866 <memchr+0x4>

08009878 <quorem>:
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987a:	6902      	ldr	r2, [r0, #16]
 800987c:	690b      	ldr	r3, [r1, #16]
 800987e:	b089      	sub	sp, #36	; 0x24
 8009880:	0007      	movs	r7, r0
 8009882:	9104      	str	r1, [sp, #16]
 8009884:	2000      	movs	r0, #0
 8009886:	429a      	cmp	r2, r3
 8009888:	db69      	blt.n	800995e <quorem+0xe6>
 800988a:	3b01      	subs	r3, #1
 800988c:	009c      	lsls	r4, r3, #2
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	000b      	movs	r3, r1
 8009892:	3314      	adds	r3, #20
 8009894:	9306      	str	r3, [sp, #24]
 8009896:	191b      	adds	r3, r3, r4
 8009898:	9305      	str	r3, [sp, #20]
 800989a:	003b      	movs	r3, r7
 800989c:	3314      	adds	r3, #20
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	191c      	adds	r4, r3, r4
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	6826      	ldr	r6, [r4, #0]
 80098a6:	681d      	ldr	r5, [r3, #0]
 80098a8:	0030      	movs	r0, r6
 80098aa:	3501      	adds	r5, #1
 80098ac:	0029      	movs	r1, r5
 80098ae:	f7f6 fc47 	bl	8000140 <__udivsi3>
 80098b2:	9002      	str	r0, [sp, #8]
 80098b4:	42ae      	cmp	r6, r5
 80098b6:	d329      	bcc.n	800990c <quorem+0x94>
 80098b8:	9b06      	ldr	r3, [sp, #24]
 80098ba:	2600      	movs	r6, #0
 80098bc:	469c      	mov	ip, r3
 80098be:	9d03      	ldr	r5, [sp, #12]
 80098c0:	9606      	str	r6, [sp, #24]
 80098c2:	4662      	mov	r2, ip
 80098c4:	ca08      	ldmia	r2!, {r3}
 80098c6:	6828      	ldr	r0, [r5, #0]
 80098c8:	4694      	mov	ip, r2
 80098ca:	9a02      	ldr	r2, [sp, #8]
 80098cc:	b299      	uxth	r1, r3
 80098ce:	4351      	muls	r1, r2
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	4353      	muls	r3, r2
 80098d4:	1989      	adds	r1, r1, r6
 80098d6:	0c0a      	lsrs	r2, r1, #16
 80098d8:	189b      	adds	r3, r3, r2
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	0c1e      	lsrs	r6, r3, #16
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	b282      	uxth	r2, r0
 80098e2:	18d2      	adds	r2, r2, r3
 80098e4:	466b      	mov	r3, sp
 80098e6:	b289      	uxth	r1, r1
 80098e8:	8b9b      	ldrh	r3, [r3, #28]
 80098ea:	1a52      	subs	r2, r2, r1
 80098ec:	0c01      	lsrs	r1, r0, #16
 80098ee:	1ac9      	subs	r1, r1, r3
 80098f0:	1413      	asrs	r3, r2, #16
 80098f2:	18cb      	adds	r3, r1, r3
 80098f4:	1419      	asrs	r1, r3, #16
 80098f6:	b292      	uxth	r2, r2
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	4313      	orrs	r3, r2
 80098fc:	c508      	stmia	r5!, {r3}
 80098fe:	9b05      	ldr	r3, [sp, #20]
 8009900:	9106      	str	r1, [sp, #24]
 8009902:	4563      	cmp	r3, ip
 8009904:	d2dd      	bcs.n	80098c2 <quorem+0x4a>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d030      	beq.n	800996e <quorem+0xf6>
 800990c:	0038      	movs	r0, r7
 800990e:	9904      	ldr	r1, [sp, #16]
 8009910:	f001 f9de 	bl	800acd0 <__mcmp>
 8009914:	2800      	cmp	r0, #0
 8009916:	db21      	blt.n	800995c <quorem+0xe4>
 8009918:	0038      	movs	r0, r7
 800991a:	2600      	movs	r6, #0
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	9c04      	ldr	r4, [sp, #16]
 8009920:	3301      	adds	r3, #1
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	3014      	adds	r0, #20
 8009926:	3414      	adds	r4, #20
 8009928:	6803      	ldr	r3, [r0, #0]
 800992a:	cc02      	ldmia	r4!, {r1}
 800992c:	b29d      	uxth	r5, r3
 800992e:	19ad      	adds	r5, r5, r6
 8009930:	b28a      	uxth	r2, r1
 8009932:	1aaa      	subs	r2, r5, r2
 8009934:	0c09      	lsrs	r1, r1, #16
 8009936:	0c1b      	lsrs	r3, r3, #16
 8009938:	1a5b      	subs	r3, r3, r1
 800993a:	1411      	asrs	r1, r2, #16
 800993c:	185b      	adds	r3, r3, r1
 800993e:	141e      	asrs	r6, r3, #16
 8009940:	b292      	uxth	r2, r2
 8009942:	041b      	lsls	r3, r3, #16
 8009944:	4313      	orrs	r3, r2
 8009946:	c008      	stmia	r0!, {r3}
 8009948:	9b05      	ldr	r3, [sp, #20]
 800994a:	42a3      	cmp	r3, r4
 800994c:	d2ec      	bcs.n	8009928 <quorem+0xb0>
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	9a03      	ldr	r2, [sp, #12]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	18d3      	adds	r3, r2, r3
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	2a00      	cmp	r2, #0
 800995a:	d015      	beq.n	8009988 <quorem+0x110>
 800995c:	9802      	ldr	r0, [sp, #8]
 800995e:	b009      	add	sp, #36	; 0x24
 8009960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <quorem+0xfe>
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	3b01      	subs	r3, #1
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	3c04      	subs	r4, #4
 8009972:	42a3      	cmp	r3, r4
 8009974:	d3f5      	bcc.n	8009962 <quorem+0xea>
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	e7c7      	b.n	800990c <quorem+0x94>
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	2a00      	cmp	r2, #0
 8009980:	d106      	bne.n	8009990 <quorem+0x118>
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	3a01      	subs	r2, #1
 8009986:	9201      	str	r2, [sp, #4]
 8009988:	9a03      	ldr	r2, [sp, #12]
 800998a:	3b04      	subs	r3, #4
 800998c:	429a      	cmp	r2, r3
 800998e:	d3f5      	bcc.n	800997c <quorem+0x104>
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	e7e2      	b.n	800995c <quorem+0xe4>
	...

08009998 <_dtoa_r>:
 8009998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800999a:	0014      	movs	r4, r2
 800999c:	001d      	movs	r5, r3
 800999e:	69c6      	ldr	r6, [r0, #28]
 80099a0:	b09d      	sub	sp, #116	; 0x74
 80099a2:	9408      	str	r4, [sp, #32]
 80099a4:	9509      	str	r5, [sp, #36]	; 0x24
 80099a6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80099a8:	9004      	str	r0, [sp, #16]
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d10f      	bne.n	80099ce <_dtoa_r+0x36>
 80099ae:	2010      	movs	r0, #16
 80099b0:	f000 fe4a 	bl	800a648 <malloc>
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	1e02      	subs	r2, r0, #0
 80099b8:	61d8      	str	r0, [r3, #28]
 80099ba:	d104      	bne.n	80099c6 <_dtoa_r+0x2e>
 80099bc:	21ef      	movs	r1, #239	; 0xef
 80099be:	4bc6      	ldr	r3, [pc, #792]	; (8009cd8 <_dtoa_r+0x340>)
 80099c0:	48c6      	ldr	r0, [pc, #792]	; (8009cdc <_dtoa_r+0x344>)
 80099c2:	f001 fb6b 	bl	800b09c <__assert_func>
 80099c6:	6046      	str	r6, [r0, #4]
 80099c8:	6086      	str	r6, [r0, #8]
 80099ca:	6006      	str	r6, [r0, #0]
 80099cc:	60c6      	str	r6, [r0, #12]
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d00b      	beq.n	80099f0 <_dtoa_r+0x58>
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	2301      	movs	r3, #1
 80099dc:	4093      	lsls	r3, r2
 80099de:	604a      	str	r2, [r1, #4]
 80099e0:	608b      	str	r3, [r1, #8]
 80099e2:	9804      	ldr	r0, [sp, #16]
 80099e4:	f000 ff32 	bl	800a84c <_Bfree>
 80099e8:	2200      	movs	r2, #0
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	2d00      	cmp	r5, #0
 80099f2:	da1e      	bge.n	8009a32 <_dtoa_r+0x9a>
 80099f4:	2301      	movs	r3, #1
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	006b      	lsls	r3, r5, #1
 80099fa:	085b      	lsrs	r3, r3, #1
 80099fc:	9309      	str	r3, [sp, #36]	; 0x24
 80099fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a00:	4bb7      	ldr	r3, [pc, #732]	; (8009ce0 <_dtoa_r+0x348>)
 8009a02:	4ab7      	ldr	r2, [pc, #732]	; (8009ce0 <_dtoa_r+0x348>)
 8009a04:	403b      	ands	r3, r7
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d116      	bne.n	8009a38 <_dtoa_r+0xa0>
 8009a0a:	4bb6      	ldr	r3, [pc, #728]	; (8009ce4 <_dtoa_r+0x34c>)
 8009a0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	033b      	lsls	r3, r7, #12
 8009a12:	0b1b      	lsrs	r3, r3, #12
 8009a14:	4323      	orrs	r3, r4
 8009a16:	d101      	bne.n	8009a1c <_dtoa_r+0x84>
 8009a18:	f000 fdb5 	bl	800a586 <_dtoa_r+0xbee>
 8009a1c:	4bb2      	ldr	r3, [pc, #712]	; (8009ce8 <_dtoa_r+0x350>)
 8009a1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a20:	9306      	str	r3, [sp, #24]
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	d002      	beq.n	8009a2c <_dtoa_r+0x94>
 8009a26:	4bb1      	ldr	r3, [pc, #708]	; (8009cec <_dtoa_r+0x354>)
 8009a28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	9806      	ldr	r0, [sp, #24]
 8009a2e:	b01d      	add	sp, #116	; 0x74
 8009a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a32:	2300      	movs	r3, #0
 8009a34:	603b      	str	r3, [r7, #0]
 8009a36:	e7e2      	b.n	80099fe <_dtoa_r+0x66>
 8009a38:	9a08      	ldr	r2, [sp, #32]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	9210      	str	r2, [sp, #64]	; 0x40
 8009a3e:	9311      	str	r3, [sp, #68]	; 0x44
 8009a40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	f7f6 fd00 	bl	800044c <__aeabi_dcmpeq>
 8009a4c:	1e06      	subs	r6, r0, #0
 8009a4e:	d009      	beq.n	8009a64 <_dtoa_r+0xcc>
 8009a50:	2301      	movs	r3, #1
 8009a52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	4ba6      	ldr	r3, [pc, #664]	; (8009cf0 <_dtoa_r+0x358>)
 8009a58:	9306      	str	r3, [sp, #24]
 8009a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0e5      	beq.n	8009a2c <_dtoa_r+0x94>
 8009a60:	4ba4      	ldr	r3, [pc, #656]	; (8009cf4 <_dtoa_r+0x35c>)
 8009a62:	e7e1      	b.n	8009a28 <_dtoa_r+0x90>
 8009a64:	ab1a      	add	r3, sp, #104	; 0x68
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	9804      	ldr	r0, [sp, #16]
 8009a6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a72:	f001 f9e1 	bl	800ae38 <__d2b>
 8009a76:	007a      	lsls	r2, r7, #1
 8009a78:	9005      	str	r0, [sp, #20]
 8009a7a:	0d52      	lsrs	r2, r2, #21
 8009a7c:	d100      	bne.n	8009a80 <_dtoa_r+0xe8>
 8009a7e:	e07b      	b.n	8009b78 <_dtoa_r+0x1e0>
 8009a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a82:	9617      	str	r6, [sp, #92]	; 0x5c
 8009a84:	0319      	lsls	r1, r3, #12
 8009a86:	4b9c      	ldr	r3, [pc, #624]	; (8009cf8 <_dtoa_r+0x360>)
 8009a88:	0b09      	lsrs	r1, r1, #12
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	499b      	ldr	r1, [pc, #620]	; (8009cfc <_dtoa_r+0x364>)
 8009a8e:	1857      	adds	r7, r2, r1
 8009a90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a94:	0019      	movs	r1, r3
 8009a96:	2200      	movs	r2, #0
 8009a98:	4b99      	ldr	r3, [pc, #612]	; (8009d00 <_dtoa_r+0x368>)
 8009a9a:	f7f8 fa87 	bl	8001fac <__aeabi_dsub>
 8009a9e:	4a99      	ldr	r2, [pc, #612]	; (8009d04 <_dtoa_r+0x36c>)
 8009aa0:	4b99      	ldr	r3, [pc, #612]	; (8009d08 <_dtoa_r+0x370>)
 8009aa2:	f7f7 ffc1 	bl	8001a28 <__aeabi_dmul>
 8009aa6:	4a99      	ldr	r2, [pc, #612]	; (8009d0c <_dtoa_r+0x374>)
 8009aa8:	4b99      	ldr	r3, [pc, #612]	; (8009d10 <_dtoa_r+0x378>)
 8009aaa:	f7f7 f863 	bl	8000b74 <__aeabi_dadd>
 8009aae:	0004      	movs	r4, r0
 8009ab0:	0038      	movs	r0, r7
 8009ab2:	000d      	movs	r5, r1
 8009ab4:	f7f8 fe50 	bl	8002758 <__aeabi_i2d>
 8009ab8:	4a96      	ldr	r2, [pc, #600]	; (8009d14 <_dtoa_r+0x37c>)
 8009aba:	4b97      	ldr	r3, [pc, #604]	; (8009d18 <_dtoa_r+0x380>)
 8009abc:	f7f7 ffb4 	bl	8001a28 <__aeabi_dmul>
 8009ac0:	0002      	movs	r2, r0
 8009ac2:	000b      	movs	r3, r1
 8009ac4:	0020      	movs	r0, r4
 8009ac6:	0029      	movs	r1, r5
 8009ac8:	f7f7 f854 	bl	8000b74 <__aeabi_dadd>
 8009acc:	0004      	movs	r4, r0
 8009ace:	000d      	movs	r5, r1
 8009ad0:	f7f8 fe0c 	bl	80026ec <__aeabi_d2iz>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	9003      	str	r0, [sp, #12]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	0020      	movs	r0, r4
 8009adc:	0029      	movs	r1, r5
 8009ade:	f7f6 fcbb 	bl	8000458 <__aeabi_dcmplt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d00b      	beq.n	8009afe <_dtoa_r+0x166>
 8009ae6:	9803      	ldr	r0, [sp, #12]
 8009ae8:	f7f8 fe36 	bl	8002758 <__aeabi_i2d>
 8009aec:	002b      	movs	r3, r5
 8009aee:	0022      	movs	r2, r4
 8009af0:	f7f6 fcac 	bl	800044c <__aeabi_dcmpeq>
 8009af4:	4243      	negs	r3, r0
 8009af6:	4158      	adcs	r0, r3
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	1a1b      	subs	r3, r3, r0
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	2301      	movs	r3, #1
 8009b00:	9316      	str	r3, [sp, #88]	; 0x58
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	2b16      	cmp	r3, #22
 8009b06:	d810      	bhi.n	8009b2a <_dtoa_r+0x192>
 8009b08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b0c:	9a03      	ldr	r2, [sp, #12]
 8009b0e:	4b83      	ldr	r3, [pc, #524]	; (8009d1c <_dtoa_r+0x384>)
 8009b10:	00d2      	lsls	r2, r2, #3
 8009b12:	189b      	adds	r3, r3, r2
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f7f6 fc9e 	bl	8000458 <__aeabi_dcmplt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d047      	beq.n	8009bb0 <_dtoa_r+0x218>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	9303      	str	r3, [sp, #12]
 8009b26:	2300      	movs	r3, #0
 8009b28:	9316      	str	r3, [sp, #88]	; 0x58
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b2e:	920a      	str	r2, [sp, #40]	; 0x28
 8009b30:	1bdb      	subs	r3, r3, r7
 8009b32:	1e5a      	subs	r2, r3, #1
 8009b34:	d53e      	bpl.n	8009bb4 <_dtoa_r+0x21c>
 8009b36:	2201      	movs	r2, #1
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	db38      	blt.n	8009bb8 <_dtoa_r+0x220>
 8009b46:	9a03      	ldr	r2, [sp, #12]
 8009b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b4a:	4694      	mov	ip, r2
 8009b4c:	4463      	add	r3, ip
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	2300      	movs	r3, #0
 8009b52:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b54:	930d      	str	r3, [sp, #52]	; 0x34
 8009b56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b58:	2401      	movs	r4, #1
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d867      	bhi.n	8009c2e <_dtoa_r+0x296>
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	dd02      	ble.n	8009b68 <_dtoa_r+0x1d0>
 8009b62:	2400      	movs	r4, #0
 8009b64:	3b04      	subs	r3, #4
 8009b66:	9322      	str	r3, [sp, #136]	; 0x88
 8009b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b6a:	1e98      	subs	r0, r3, #2
 8009b6c:	2803      	cmp	r0, #3
 8009b6e:	d867      	bhi.n	8009c40 <_dtoa_r+0x2a8>
 8009b70:	f7f6 fad2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009b74:	5b383a2b 	.word	0x5b383a2b
 8009b78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b7a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009b7c:	18f6      	adds	r6, r6, r3
 8009b7e:	4b68      	ldr	r3, [pc, #416]	; (8009d20 <_dtoa_r+0x388>)
 8009b80:	18f2      	adds	r2, r6, r3
 8009b82:	2a20      	cmp	r2, #32
 8009b84:	dd0f      	ble.n	8009ba6 <_dtoa_r+0x20e>
 8009b86:	2340      	movs	r3, #64	; 0x40
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	409f      	lsls	r7, r3
 8009b8c:	4b65      	ldr	r3, [pc, #404]	; (8009d24 <_dtoa_r+0x38c>)
 8009b8e:	0038      	movs	r0, r7
 8009b90:	18f3      	adds	r3, r6, r3
 8009b92:	40dc      	lsrs	r4, r3
 8009b94:	4320      	orrs	r0, r4
 8009b96:	f7f8 fe0f 	bl	80027b8 <__aeabi_ui2d>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	4b62      	ldr	r3, [pc, #392]	; (8009d28 <_dtoa_r+0x390>)
 8009b9e:	1e77      	subs	r7, r6, #1
 8009ba0:	18cb      	adds	r3, r1, r3
 8009ba2:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ba4:	e776      	b.n	8009a94 <_dtoa_r+0xfc>
 8009ba6:	2320      	movs	r3, #32
 8009ba8:	0020      	movs	r0, r4
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	4098      	lsls	r0, r3
 8009bae:	e7f2      	b.n	8009b96 <_dtoa_r+0x1fe>
 8009bb0:	9016      	str	r0, [sp, #88]	; 0x58
 8009bb2:	e7ba      	b.n	8009b2a <_dtoa_r+0x192>
 8009bb4:	920c      	str	r2, [sp, #48]	; 0x30
 8009bb6:	e7c3      	b.n	8009b40 <_dtoa_r+0x1a8>
 8009bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bba:	9a03      	ldr	r2, [sp, #12]
 8009bbc:	1a9b      	subs	r3, r3, r2
 8009bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc0:	4253      	negs	r3, r2
 8009bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bc8:	e7c5      	b.n	8009b56 <_dtoa_r+0x1be>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd2:	9307      	str	r3, [sp, #28]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dc13      	bgt.n	8009c00 <_dtoa_r+0x268>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	001a      	movs	r2, r3
 8009bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009be2:	e00d      	b.n	8009c00 <_dtoa_r+0x268>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7f1      	b.n	8009bcc <_dtoa_r+0x234>
 8009be8:	2300      	movs	r3, #0
 8009bea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bee:	4694      	mov	ip, r2
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	4463      	add	r3, ip
 8009bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc00      	bgt.n	8009c00 <_dtoa_r+0x268>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	9a04      	ldr	r2, [sp, #16]
 8009c02:	2100      	movs	r1, #0
 8009c04:	69d0      	ldr	r0, [r2, #28]
 8009c06:	2204      	movs	r2, #4
 8009c08:	0015      	movs	r5, r2
 8009c0a:	3514      	adds	r5, #20
 8009c0c:	429d      	cmp	r5, r3
 8009c0e:	d91b      	bls.n	8009c48 <_dtoa_r+0x2b0>
 8009c10:	6041      	str	r1, [r0, #4]
 8009c12:	9804      	ldr	r0, [sp, #16]
 8009c14:	f000 fdd6 	bl	800a7c4 <_Balloc>
 8009c18:	9006      	str	r0, [sp, #24]
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d117      	bne.n	8009c4e <_dtoa_r+0x2b6>
 8009c1e:	21b0      	movs	r1, #176	; 0xb0
 8009c20:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <_dtoa_r+0x394>)
 8009c22:	482e      	ldr	r0, [pc, #184]	; (8009cdc <_dtoa_r+0x344>)
 8009c24:	9a06      	ldr	r2, [sp, #24]
 8009c26:	31ff      	adds	r1, #255	; 0xff
 8009c28:	e6cb      	b.n	80099c2 <_dtoa_r+0x2a>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7dd      	b.n	8009bea <_dtoa_r+0x252>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	940f      	str	r4, [sp, #60]	; 0x3c
 8009c32:	9322      	str	r3, [sp, #136]	; 0x88
 8009c34:	3b01      	subs	r3, #1
 8009c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	3313      	adds	r3, #19
 8009c3e:	e7cf      	b.n	8009be0 <_dtoa_r+0x248>
 8009c40:	2301      	movs	r3, #1
 8009c42:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c44:	3b02      	subs	r3, #2
 8009c46:	e7f6      	b.n	8009c36 <_dtoa_r+0x29e>
 8009c48:	3101      	adds	r1, #1
 8009c4a:	0052      	lsls	r2, r2, #1
 8009c4c:	e7dc      	b.n	8009c08 <_dtoa_r+0x270>
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	9b07      	ldr	r3, [sp, #28]
 8009c58:	2b0e      	cmp	r3, #14
 8009c5a:	d900      	bls.n	8009c5e <_dtoa_r+0x2c6>
 8009c5c:	e0e5      	b.n	8009e2a <_dtoa_r+0x492>
 8009c5e:	2c00      	cmp	r4, #0
 8009c60:	d100      	bne.n	8009c64 <_dtoa_r+0x2cc>
 8009c62:	e0e2      	b.n	8009e2a <_dtoa_r+0x492>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd64      	ble.n	8009d34 <_dtoa_r+0x39c>
 8009c6a:	210f      	movs	r1, #15
 8009c6c:	9a03      	ldr	r2, [sp, #12]
 8009c6e:	4b2b      	ldr	r3, [pc, #172]	; (8009d1c <_dtoa_r+0x384>)
 8009c70:	400a      	ands	r2, r1
 8009c72:	00d2      	lsls	r2, r2, #3
 8009c74:	189b      	adds	r3, r3, r2
 8009c76:	681e      	ldr	r6, [r3, #0]
 8009c78:	685f      	ldr	r7, [r3, #4]
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	2402      	movs	r4, #2
 8009c7e:	111d      	asrs	r5, r3, #4
 8009c80:	05db      	lsls	r3, r3, #23
 8009c82:	d50a      	bpl.n	8009c9a <_dtoa_r+0x302>
 8009c84:	4b2a      	ldr	r3, [pc, #168]	; (8009d30 <_dtoa_r+0x398>)
 8009c86:	400d      	ands	r5, r1
 8009c88:	6a1a      	ldr	r2, [r3, #32]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c90:	f7f7 fad0 	bl	8001234 <__aeabi_ddiv>
 8009c94:	9008      	str	r0, [sp, #32]
 8009c96:	9109      	str	r1, [sp, #36]	; 0x24
 8009c98:	3401      	adds	r4, #1
 8009c9a:	4b25      	ldr	r3, [pc, #148]	; (8009d30 <_dtoa_r+0x398>)
 8009c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	d108      	bne.n	8009cb4 <_dtoa_r+0x31c>
 8009ca2:	9808      	ldr	r0, [sp, #32]
 8009ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ca6:	0032      	movs	r2, r6
 8009ca8:	003b      	movs	r3, r7
 8009caa:	f7f7 fac3 	bl	8001234 <__aeabi_ddiv>
 8009cae:	9008      	str	r0, [sp, #32]
 8009cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8009cb2:	e05a      	b.n	8009d6a <_dtoa_r+0x3d2>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	421d      	tst	r5, r3
 8009cb8:	d009      	beq.n	8009cce <_dtoa_r+0x336>
 8009cba:	18e4      	adds	r4, r4, r3
 8009cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cbe:	0030      	movs	r0, r6
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	0039      	movs	r1, r7
 8009cc6:	f7f7 feaf 	bl	8001a28 <__aeabi_dmul>
 8009cca:	0006      	movs	r6, r0
 8009ccc:	000f      	movs	r7, r1
 8009cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cd0:	106d      	asrs	r5, r5, #1
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	e7e2      	b.n	8009c9c <_dtoa_r+0x304>
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	0800b89d 	.word	0x0800b89d
 8009cdc:	0800b8b4 	.word	0x0800b8b4
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0000270f 	.word	0x0000270f
 8009ce8:	0800b899 	.word	0x0800b899
 8009cec:	0800b89c 	.word	0x0800b89c
 8009cf0:	0800b86c 	.word	0x0800b86c
 8009cf4:	0800b86d 	.word	0x0800b86d
 8009cf8:	3ff00000 	.word	0x3ff00000
 8009cfc:	fffffc01 	.word	0xfffffc01
 8009d00:	3ff80000 	.word	0x3ff80000
 8009d04:	636f4361 	.word	0x636f4361
 8009d08:	3fd287a7 	.word	0x3fd287a7
 8009d0c:	8b60c8b3 	.word	0x8b60c8b3
 8009d10:	3fc68a28 	.word	0x3fc68a28
 8009d14:	509f79fb 	.word	0x509f79fb
 8009d18:	3fd34413 	.word	0x3fd34413
 8009d1c:	0800b9a0 	.word	0x0800b9a0
 8009d20:	00000432 	.word	0x00000432
 8009d24:	00000412 	.word	0x00000412
 8009d28:	fe100000 	.word	0xfe100000
 8009d2c:	0800b90c 	.word	0x0800b90c
 8009d30:	0800b978 	.word	0x0800b978
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	2402      	movs	r4, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d016      	beq.n	8009d6a <_dtoa_r+0x3d2>
 8009d3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d40:	220f      	movs	r2, #15
 8009d42:	425d      	negs	r5, r3
 8009d44:	402a      	ands	r2, r5
 8009d46:	4bdd      	ldr	r3, [pc, #884]	; (800a0bc <_dtoa_r+0x724>)
 8009d48:	00d2      	lsls	r2, r2, #3
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f7f7 fe6a 	bl	8001a28 <__aeabi_dmul>
 8009d54:	2701      	movs	r7, #1
 8009d56:	2300      	movs	r3, #0
 8009d58:	9008      	str	r0, [sp, #32]
 8009d5a:	9109      	str	r1, [sp, #36]	; 0x24
 8009d5c:	4ed8      	ldr	r6, [pc, #864]	; (800a0c0 <_dtoa_r+0x728>)
 8009d5e:	112d      	asrs	r5, r5, #4
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	d000      	beq.n	8009d66 <_dtoa_r+0x3ce>
 8009d64:	e091      	b.n	8009e8a <_dtoa_r+0x4f2>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1a1      	bne.n	8009cae <_dtoa_r+0x316>
 8009d6a:	9e08      	ldr	r6, [sp, #32]
 8009d6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d100      	bne.n	8009d76 <_dtoa_r+0x3de>
 8009d74:	e094      	b.n	8009ea0 <_dtoa_r+0x508>
 8009d76:	2200      	movs	r2, #0
 8009d78:	0030      	movs	r0, r6
 8009d7a:	0039      	movs	r1, r7
 8009d7c:	4bd1      	ldr	r3, [pc, #836]	; (800a0c4 <_dtoa_r+0x72c>)
 8009d7e:	f7f6 fb6b 	bl	8000458 <__aeabi_dcmplt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d100      	bne.n	8009d88 <_dtoa_r+0x3f0>
 8009d86:	e08b      	b.n	8009ea0 <_dtoa_r+0x508>
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d100      	bne.n	8009d90 <_dtoa_r+0x3f8>
 8009d8e:	e087      	b.n	8009ea0 <_dtoa_r+0x508>
 8009d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd45      	ble.n	8009e22 <_dtoa_r+0x48a>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d9e:	0030      	movs	r0, r6
 8009da0:	4bc9      	ldr	r3, [pc, #804]	; (800a0c8 <_dtoa_r+0x730>)
 8009da2:	0039      	movs	r1, r7
 8009da4:	f7f7 fe40 	bl	8001a28 <__aeabi_dmul>
 8009da8:	9008      	str	r0, [sp, #32]
 8009daa:	9109      	str	r1, [sp, #36]	; 0x24
 8009dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dae:	3401      	adds	r4, #1
 8009db0:	0020      	movs	r0, r4
 8009db2:	9e08      	ldr	r6, [sp, #32]
 8009db4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009db6:	9312      	str	r3, [sp, #72]	; 0x48
 8009db8:	f7f8 fcce 	bl	8002758 <__aeabi_i2d>
 8009dbc:	0032      	movs	r2, r6
 8009dbe:	003b      	movs	r3, r7
 8009dc0:	f7f7 fe32 	bl	8001a28 <__aeabi_dmul>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4bc1      	ldr	r3, [pc, #772]	; (800a0cc <_dtoa_r+0x734>)
 8009dc8:	f7f6 fed4 	bl	8000b74 <__aeabi_dadd>
 8009dcc:	4ac0      	ldr	r2, [pc, #768]	; (800a0d0 <_dtoa_r+0x738>)
 8009dce:	9014      	str	r0, [sp, #80]	; 0x50
 8009dd0:	9115      	str	r1, [sp, #84]	; 0x54
 8009dd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009dd6:	4694      	mov	ip, r2
 8009dd8:	9308      	str	r3, [sp, #32]
 8009dda:	9409      	str	r4, [sp, #36]	; 0x24
 8009ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dde:	4463      	add	r3, ip
 8009de0:	9318      	str	r3, [sp, #96]	; 0x60
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d15e      	bne.n	8009ea8 <_dtoa_r+0x510>
 8009dea:	2200      	movs	r2, #0
 8009dec:	4bb9      	ldr	r3, [pc, #740]	; (800a0d4 <_dtoa_r+0x73c>)
 8009dee:	0030      	movs	r0, r6
 8009df0:	0039      	movs	r1, r7
 8009df2:	f7f8 f8db 	bl	8001fac <__aeabi_dsub>
 8009df6:	9a08      	ldr	r2, [sp, #32]
 8009df8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009dfa:	0004      	movs	r4, r0
 8009dfc:	000d      	movs	r5, r1
 8009dfe:	f7f6 fb3f 	bl	8000480 <__aeabi_dcmpgt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d000      	beq.n	8009e08 <_dtoa_r+0x470>
 8009e06:	e2b3      	b.n	800a370 <_dtoa_r+0x9d8>
 8009e08:	48b3      	ldr	r0, [pc, #716]	; (800a0d8 <_dtoa_r+0x740>)
 8009e0a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e0c:	4684      	mov	ip, r0
 8009e0e:	4461      	add	r1, ip
 8009e10:	000b      	movs	r3, r1
 8009e12:	0020      	movs	r0, r4
 8009e14:	0029      	movs	r1, r5
 8009e16:	9a08      	ldr	r2, [sp, #32]
 8009e18:	f7f6 fb1e 	bl	8000458 <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d000      	beq.n	8009e22 <_dtoa_r+0x48a>
 8009e20:	e2a3      	b.n	800a36a <_dtoa_r+0x9d2>
 8009e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e24:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	9409      	str	r4, [sp, #36]	; 0x24
 8009e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da00      	bge.n	8009e32 <_dtoa_r+0x49a>
 8009e30:	e179      	b.n	800a126 <_dtoa_r+0x78e>
 8009e32:	9a03      	ldr	r2, [sp, #12]
 8009e34:	2a0e      	cmp	r2, #14
 8009e36:	dd00      	ble.n	8009e3a <_dtoa_r+0x4a2>
 8009e38:	e175      	b.n	800a126 <_dtoa_r+0x78e>
 8009e3a:	4ba0      	ldr	r3, [pc, #640]	; (800a0bc <_dtoa_r+0x724>)
 8009e3c:	00d2      	lsls	r2, r2, #3
 8009e3e:	189b      	adds	r3, r3, r2
 8009e40:	681e      	ldr	r6, [r3, #0]
 8009e42:	685f      	ldr	r7, [r3, #4]
 8009e44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	db00      	blt.n	8009e4c <_dtoa_r+0x4b4>
 8009e4a:	e0e5      	b.n	800a018 <_dtoa_r+0x680>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd00      	ble.n	8009e54 <_dtoa_r+0x4bc>
 8009e52:	e0e1      	b.n	800a018 <_dtoa_r+0x680>
 8009e54:	d000      	beq.n	8009e58 <_dtoa_r+0x4c0>
 8009e56:	e288      	b.n	800a36a <_dtoa_r+0x9d2>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	0030      	movs	r0, r6
 8009e5c:	0039      	movs	r1, r7
 8009e5e:	4b9d      	ldr	r3, [pc, #628]	; (800a0d4 <_dtoa_r+0x73c>)
 8009e60:	f7f7 fde2 	bl	8001a28 <__aeabi_dmul>
 8009e64:	9a08      	ldr	r2, [sp, #32]
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	f7f6 fb14 	bl	8000494 <__aeabi_dcmpge>
 8009e6c:	9e07      	ldr	r6, [sp, #28]
 8009e6e:	0037      	movs	r7, r6
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d000      	beq.n	8009e76 <_dtoa_r+0x4de>
 8009e74:	e25f      	b.n	800a336 <_dtoa_r+0x99e>
 8009e76:	9b06      	ldr	r3, [sp, #24]
 8009e78:	9a06      	ldr	r2, [sp, #24]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9308      	str	r3, [sp, #32]
 8009e7e:	2331      	movs	r3, #49	; 0x31
 8009e80:	7013      	strb	r3, [r2, #0]
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	3301      	adds	r3, #1
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	e25a      	b.n	800a340 <_dtoa_r+0x9a8>
 8009e8a:	423d      	tst	r5, r7
 8009e8c:	d005      	beq.n	8009e9a <_dtoa_r+0x502>
 8009e8e:	6832      	ldr	r2, [r6, #0]
 8009e90:	6873      	ldr	r3, [r6, #4]
 8009e92:	f7f7 fdc9 	bl	8001a28 <__aeabi_dmul>
 8009e96:	003b      	movs	r3, r7
 8009e98:	3401      	adds	r4, #1
 8009e9a:	106d      	asrs	r5, r5, #1
 8009e9c:	3608      	adds	r6, #8
 8009e9e:	e75f      	b.n	8009d60 <_dtoa_r+0x3c8>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	e783      	b.n	8009db0 <_dtoa_r+0x418>
 8009ea8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eaa:	4b84      	ldr	r3, [pc, #528]	; (800a0bc <_dtoa_r+0x724>)
 8009eac:	3a01      	subs	r2, #1
 8009eae:	00d2      	lsls	r2, r2, #3
 8009eb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009eb2:	189b      	adds	r3, r3, r2
 8009eb4:	9c08      	ldr	r4, [sp, #32]
 8009eb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d051      	beq.n	8009f64 <_dtoa_r+0x5cc>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	4986      	ldr	r1, [pc, #536]	; (800a0dc <_dtoa_r+0x744>)
 8009ec4:	f7f7 f9b6 	bl	8001234 <__aeabi_ddiv>
 8009ec8:	0022      	movs	r2, r4
 8009eca:	002b      	movs	r3, r5
 8009ecc:	f7f8 f86e 	bl	8001fac <__aeabi_dsub>
 8009ed0:	9a06      	ldr	r2, [sp, #24]
 8009ed2:	0004      	movs	r4, r0
 8009ed4:	4694      	mov	ip, r2
 8009ed6:	000d      	movs	r5, r1
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	9314      	str	r3, [sp, #80]	; 0x50
 8009edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ede:	4463      	add	r3, ip
 8009ee0:	9318      	str	r3, [sp, #96]	; 0x60
 8009ee2:	0039      	movs	r1, r7
 8009ee4:	0030      	movs	r0, r6
 8009ee6:	f7f8 fc01 	bl	80026ec <__aeabi_d2iz>
 8009eea:	9012      	str	r0, [sp, #72]	; 0x48
 8009eec:	f7f8 fc34 	bl	8002758 <__aeabi_i2d>
 8009ef0:	0002      	movs	r2, r0
 8009ef2:	000b      	movs	r3, r1
 8009ef4:	0030      	movs	r0, r6
 8009ef6:	0039      	movs	r1, r7
 8009ef8:	f7f8 f858 	bl	8001fac <__aeabi_dsub>
 8009efc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009efe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f00:	3301      	adds	r3, #1
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f06:	0006      	movs	r6, r0
 8009f08:	3330      	adds	r3, #48	; 0x30
 8009f0a:	7013      	strb	r3, [r2, #0]
 8009f0c:	0022      	movs	r2, r4
 8009f0e:	002b      	movs	r3, r5
 8009f10:	000f      	movs	r7, r1
 8009f12:	f7f6 faa1 	bl	8000458 <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d174      	bne.n	800a004 <_dtoa_r+0x66c>
 8009f1a:	0032      	movs	r2, r6
 8009f1c:	003b      	movs	r3, r7
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4968      	ldr	r1, [pc, #416]	; (800a0c4 <_dtoa_r+0x72c>)
 8009f22:	f7f8 f843 	bl	8001fac <__aeabi_dsub>
 8009f26:	0022      	movs	r2, r4
 8009f28:	002b      	movs	r3, r5
 8009f2a:	f7f6 fa95 	bl	8000458 <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d000      	beq.n	8009f34 <_dtoa_r+0x59c>
 8009f32:	e0d7      	b.n	800a0e4 <_dtoa_r+0x74c>
 8009f34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f36:	9a08      	ldr	r2, [sp, #32]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d100      	bne.n	8009f3e <_dtoa_r+0x5a6>
 8009f3c:	e771      	b.n	8009e22 <_dtoa_r+0x48a>
 8009f3e:	2200      	movs	r2, #0
 8009f40:	0020      	movs	r0, r4
 8009f42:	0029      	movs	r1, r5
 8009f44:	4b60      	ldr	r3, [pc, #384]	; (800a0c8 <_dtoa_r+0x730>)
 8009f46:	f7f7 fd6f 	bl	8001a28 <__aeabi_dmul>
 8009f4a:	4b5f      	ldr	r3, [pc, #380]	; (800a0c8 <_dtoa_r+0x730>)
 8009f4c:	0004      	movs	r4, r0
 8009f4e:	000d      	movs	r5, r1
 8009f50:	0030      	movs	r0, r6
 8009f52:	0039      	movs	r1, r7
 8009f54:	2200      	movs	r2, #0
 8009f56:	f7f7 fd67 	bl	8001a28 <__aeabi_dmul>
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	0006      	movs	r6, r0
 8009f5e:	000f      	movs	r7, r1
 8009f60:	9314      	str	r3, [sp, #80]	; 0x50
 8009f62:	e7be      	b.n	8009ee2 <_dtoa_r+0x54a>
 8009f64:	0020      	movs	r0, r4
 8009f66:	0029      	movs	r1, r5
 8009f68:	f7f7 fd5e 	bl	8001a28 <__aeabi_dmul>
 8009f6c:	9a06      	ldr	r2, [sp, #24]
 8009f6e:	9b06      	ldr	r3, [sp, #24]
 8009f70:	4694      	mov	ip, r2
 8009f72:	9308      	str	r3, [sp, #32]
 8009f74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f76:	9014      	str	r0, [sp, #80]	; 0x50
 8009f78:	9115      	str	r1, [sp, #84]	; 0x54
 8009f7a:	4463      	add	r3, ip
 8009f7c:	9319      	str	r3, [sp, #100]	; 0x64
 8009f7e:	0030      	movs	r0, r6
 8009f80:	0039      	movs	r1, r7
 8009f82:	f7f8 fbb3 	bl	80026ec <__aeabi_d2iz>
 8009f86:	9018      	str	r0, [sp, #96]	; 0x60
 8009f88:	f7f8 fbe6 	bl	8002758 <__aeabi_i2d>
 8009f8c:	0002      	movs	r2, r0
 8009f8e:	000b      	movs	r3, r1
 8009f90:	0030      	movs	r0, r6
 8009f92:	0039      	movs	r1, r7
 8009f94:	f7f8 f80a 	bl	8001fac <__aeabi_dsub>
 8009f98:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	3630      	adds	r6, #48	; 0x30
 8009f9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fa0:	701e      	strb	r6, [r3, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	0004      	movs	r4, r0
 8009fa6:	000d      	movs	r5, r1
 8009fa8:	9308      	str	r3, [sp, #32]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d12d      	bne.n	800a00a <_dtoa_r+0x672>
 8009fae:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009fb0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009fb2:	9a06      	ldr	r2, [sp, #24]
 8009fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fb6:	4694      	mov	ip, r2
 8009fb8:	4463      	add	r3, ip
 8009fba:	2200      	movs	r2, #0
 8009fbc:	9308      	str	r3, [sp, #32]
 8009fbe:	4b47      	ldr	r3, [pc, #284]	; (800a0dc <_dtoa_r+0x744>)
 8009fc0:	f7f6 fdd8 	bl	8000b74 <__aeabi_dadd>
 8009fc4:	0002      	movs	r2, r0
 8009fc6:	000b      	movs	r3, r1
 8009fc8:	0020      	movs	r0, r4
 8009fca:	0029      	movs	r1, r5
 8009fcc:	f7f6 fa58 	bl	8000480 <__aeabi_dcmpgt>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d000      	beq.n	8009fd6 <_dtoa_r+0x63e>
 8009fd4:	e086      	b.n	800a0e4 <_dtoa_r+0x74c>
 8009fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fda:	2000      	movs	r0, #0
 8009fdc:	493f      	ldr	r1, [pc, #252]	; (800a0dc <_dtoa_r+0x744>)
 8009fde:	f7f7 ffe5 	bl	8001fac <__aeabi_dsub>
 8009fe2:	0002      	movs	r2, r0
 8009fe4:	000b      	movs	r3, r1
 8009fe6:	0020      	movs	r0, r4
 8009fe8:	0029      	movs	r1, r5
 8009fea:	f7f6 fa35 	bl	8000458 <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d100      	bne.n	8009ff4 <_dtoa_r+0x65c>
 8009ff2:	e716      	b.n	8009e22 <_dtoa_r+0x48a>
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	001a      	movs	r2, r3
 8009ff8:	3a01      	subs	r2, #1
 8009ffa:	9208      	str	r2, [sp, #32]
 8009ffc:	7812      	ldrb	r2, [r2, #0]
 8009ffe:	2a30      	cmp	r2, #48	; 0x30
 800a000:	d0f8      	beq.n	8009ff4 <_dtoa_r+0x65c>
 800a002:	9308      	str	r3, [sp, #32]
 800a004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a006:	9303      	str	r3, [sp, #12]
 800a008:	e046      	b.n	800a098 <_dtoa_r+0x700>
 800a00a:	2200      	movs	r2, #0
 800a00c:	4b2e      	ldr	r3, [pc, #184]	; (800a0c8 <_dtoa_r+0x730>)
 800a00e:	f7f7 fd0b 	bl	8001a28 <__aeabi_dmul>
 800a012:	0006      	movs	r6, r0
 800a014:	000f      	movs	r7, r1
 800a016:	e7b2      	b.n	8009f7e <_dtoa_r+0x5e6>
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	9a06      	ldr	r2, [sp, #24]
 800a01c:	930a      	str	r3, [sp, #40]	; 0x28
 800a01e:	9b07      	ldr	r3, [sp, #28]
 800a020:	9c08      	ldr	r4, [sp, #32]
 800a022:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a024:	3b01      	subs	r3, #1
 800a026:	189b      	adds	r3, r3, r2
 800a028:	930b      	str	r3, [sp, #44]	; 0x2c
 800a02a:	0032      	movs	r2, r6
 800a02c:	003b      	movs	r3, r7
 800a02e:	0020      	movs	r0, r4
 800a030:	0029      	movs	r1, r5
 800a032:	f7f7 f8ff 	bl	8001234 <__aeabi_ddiv>
 800a036:	f7f8 fb59 	bl	80026ec <__aeabi_d2iz>
 800a03a:	9007      	str	r0, [sp, #28]
 800a03c:	f7f8 fb8c 	bl	8002758 <__aeabi_i2d>
 800a040:	0032      	movs	r2, r6
 800a042:	003b      	movs	r3, r7
 800a044:	f7f7 fcf0 	bl	8001a28 <__aeabi_dmul>
 800a048:	0002      	movs	r2, r0
 800a04a:	000b      	movs	r3, r1
 800a04c:	0020      	movs	r0, r4
 800a04e:	0029      	movs	r1, r5
 800a050:	f7f7 ffac 	bl	8001fac <__aeabi_dsub>
 800a054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a056:	001a      	movs	r2, r3
 800a058:	3201      	adds	r2, #1
 800a05a:	920a      	str	r2, [sp, #40]	; 0x28
 800a05c:	9208      	str	r2, [sp, #32]
 800a05e:	9a07      	ldr	r2, [sp, #28]
 800a060:	3230      	adds	r2, #48	; 0x30
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d14f      	bne.n	800a10a <_dtoa_r+0x772>
 800a06a:	0002      	movs	r2, r0
 800a06c:	000b      	movs	r3, r1
 800a06e:	f7f6 fd81 	bl	8000b74 <__aeabi_dadd>
 800a072:	0032      	movs	r2, r6
 800a074:	003b      	movs	r3, r7
 800a076:	0004      	movs	r4, r0
 800a078:	000d      	movs	r5, r1
 800a07a:	f7f6 fa01 	bl	8000480 <__aeabi_dcmpgt>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d12e      	bne.n	800a0e0 <_dtoa_r+0x748>
 800a082:	0032      	movs	r2, r6
 800a084:	003b      	movs	r3, r7
 800a086:	0020      	movs	r0, r4
 800a088:	0029      	movs	r1, r5
 800a08a:	f7f6 f9df 	bl	800044c <__aeabi_dcmpeq>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d002      	beq.n	800a098 <_dtoa_r+0x700>
 800a092:	9b07      	ldr	r3, [sp, #28]
 800a094:	07de      	lsls	r6, r3, #31
 800a096:	d423      	bmi.n	800a0e0 <_dtoa_r+0x748>
 800a098:	9905      	ldr	r1, [sp, #20]
 800a09a:	9804      	ldr	r0, [sp, #16]
 800a09c:	f000 fbd6 	bl	800a84c <_Bfree>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9a08      	ldr	r2, [sp, #32]
 800a0a4:	7013      	strb	r3, [r2, #0]
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d100      	bne.n	800a0b6 <_dtoa_r+0x71e>
 800a0b4:	e4ba      	b.n	8009a2c <_dtoa_r+0x94>
 800a0b6:	9a08      	ldr	r2, [sp, #32]
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	e4b7      	b.n	8009a2c <_dtoa_r+0x94>
 800a0bc:	0800b9a0 	.word	0x0800b9a0
 800a0c0:	0800b978 	.word	0x0800b978
 800a0c4:	3ff00000 	.word	0x3ff00000
 800a0c8:	40240000 	.word	0x40240000
 800a0cc:	401c0000 	.word	0x401c0000
 800a0d0:	fcc00000 	.word	0xfcc00000
 800a0d4:	40140000 	.word	0x40140000
 800a0d8:	7cc00000 	.word	0x7cc00000
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	930e      	str	r3, [sp, #56]	; 0x38
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	2a39      	cmp	r2, #57	; 0x39
 800a0ee:	d108      	bne.n	800a102 <_dtoa_r+0x76a>
 800a0f0:	9a06      	ldr	r2, [sp, #24]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1f7      	bne.n	800a0e6 <_dtoa_r+0x74e>
 800a0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f8:	9906      	ldr	r1, [sp, #24]
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	920e      	str	r2, [sp, #56]	; 0x38
 800a0fe:	2230      	movs	r2, #48	; 0x30
 800a100:	700a      	strb	r2, [r1, #0]
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	3201      	adds	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e77c      	b.n	800a004 <_dtoa_r+0x66c>
 800a10a:	2200      	movs	r2, #0
 800a10c:	4ba9      	ldr	r3, [pc, #676]	; (800a3b4 <_dtoa_r+0xa1c>)
 800a10e:	f7f7 fc8b 	bl	8001a28 <__aeabi_dmul>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	0004      	movs	r4, r0
 800a118:	000d      	movs	r5, r1
 800a11a:	f7f6 f997 	bl	800044c <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d100      	bne.n	800a124 <_dtoa_r+0x78c>
 800a122:	e782      	b.n	800a02a <_dtoa_r+0x692>
 800a124:	e7b8      	b.n	800a098 <_dtoa_r+0x700>
 800a126:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a128:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a12a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a12c:	2f00      	cmp	r7, #0
 800a12e:	d012      	beq.n	800a156 <_dtoa_r+0x7be>
 800a130:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a132:	2a01      	cmp	r2, #1
 800a134:	dc6e      	bgt.n	800a214 <_dtoa_r+0x87c>
 800a136:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d065      	beq.n	800a208 <_dtoa_r+0x870>
 800a13c:	4a9e      	ldr	r2, [pc, #632]	; (800a3b8 <_dtoa_r+0xa20>)
 800a13e:	189b      	adds	r3, r3, r2
 800a140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a142:	2101      	movs	r1, #1
 800a144:	18d2      	adds	r2, r2, r3
 800a146:	920a      	str	r2, [sp, #40]	; 0x28
 800a148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a14a:	9804      	ldr	r0, [sp, #16]
 800a14c:	18d3      	adds	r3, r2, r3
 800a14e:	930c      	str	r3, [sp, #48]	; 0x30
 800a150:	f000 fc2c 	bl	800a9ac <__i2b>
 800a154:	0007      	movs	r7, r0
 800a156:	2c00      	cmp	r4, #0
 800a158:	d00e      	beq.n	800a178 <_dtoa_r+0x7e0>
 800a15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd0b      	ble.n	800a178 <_dtoa_r+0x7e0>
 800a160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a162:	0023      	movs	r3, r4
 800a164:	4294      	cmp	r4, r2
 800a166:	dd00      	ble.n	800a16a <_dtoa_r+0x7d2>
 800a168:	0013      	movs	r3, r2
 800a16a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a16c:	1ae4      	subs	r4, r4, r3
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	920a      	str	r2, [sp, #40]	; 0x28
 800a172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	930c      	str	r3, [sp, #48]	; 0x30
 800a178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01e      	beq.n	800a1bc <_dtoa_r+0x824>
 800a17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d05c      	beq.n	800a23e <_dtoa_r+0x8a6>
 800a184:	2d00      	cmp	r5, #0
 800a186:	dd10      	ble.n	800a1aa <_dtoa_r+0x812>
 800a188:	0039      	movs	r1, r7
 800a18a:	002a      	movs	r2, r5
 800a18c:	9804      	ldr	r0, [sp, #16]
 800a18e:	f000 fcd5 	bl	800ab3c <__pow5mult>
 800a192:	9a05      	ldr	r2, [sp, #20]
 800a194:	0001      	movs	r1, r0
 800a196:	0007      	movs	r7, r0
 800a198:	9804      	ldr	r0, [sp, #16]
 800a19a:	f000 fc1f 	bl	800a9dc <__multiply>
 800a19e:	0006      	movs	r6, r0
 800a1a0:	9905      	ldr	r1, [sp, #20]
 800a1a2:	9804      	ldr	r0, [sp, #16]
 800a1a4:	f000 fb52 	bl	800a84c <_Bfree>
 800a1a8:	9605      	str	r6, [sp, #20]
 800a1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ac:	1b5a      	subs	r2, r3, r5
 800a1ae:	42ab      	cmp	r3, r5
 800a1b0:	d004      	beq.n	800a1bc <_dtoa_r+0x824>
 800a1b2:	9905      	ldr	r1, [sp, #20]
 800a1b4:	9804      	ldr	r0, [sp, #16]
 800a1b6:	f000 fcc1 	bl	800ab3c <__pow5mult>
 800a1ba:	9005      	str	r0, [sp, #20]
 800a1bc:	2101      	movs	r1, #1
 800a1be:	9804      	ldr	r0, [sp, #16]
 800a1c0:	f000 fbf4 	bl	800a9ac <__i2b>
 800a1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1c6:	0006      	movs	r6, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dd3a      	ble.n	800a242 <_dtoa_r+0x8aa>
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	0001      	movs	r1, r0
 800a1d0:	9804      	ldr	r0, [sp, #16]
 800a1d2:	f000 fcb3 	bl	800ab3c <__pow5mult>
 800a1d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1d8:	0006      	movs	r6, r0
 800a1da:	2500      	movs	r5, #0
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	dc38      	bgt.n	800a252 <_dtoa_r+0x8ba>
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	d130      	bne.n	800a24a <_dtoa_r+0x8b2>
 800a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ea:	031b      	lsls	r3, r3, #12
 800a1ec:	42ab      	cmp	r3, r5
 800a1ee:	d12c      	bne.n	800a24a <_dtoa_r+0x8b2>
 800a1f0:	4b72      	ldr	r3, [pc, #456]	; (800a3bc <_dtoa_r+0xa24>)
 800a1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f4:	4213      	tst	r3, r2
 800a1f6:	d028      	beq.n	800a24a <_dtoa_r+0x8b2>
 800a1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fa:	3501      	adds	r5, #1
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a202:	3301      	adds	r3, #1
 800a204:	930c      	str	r3, [sp, #48]	; 0x30
 800a206:	e020      	b.n	800a24a <_dtoa_r+0x8b2>
 800a208:	2336      	movs	r3, #54	; 0x36
 800a20a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a20c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a20e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	e795      	b.n	800a140 <_dtoa_r+0x7a8>
 800a214:	9b07      	ldr	r3, [sp, #28]
 800a216:	1e5d      	subs	r5, r3, #1
 800a218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	db07      	blt.n	800a22e <_dtoa_r+0x896>
 800a21e:	1b5d      	subs	r5, r3, r5
 800a220:	9b07      	ldr	r3, [sp, #28]
 800a222:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a224:	2b00      	cmp	r3, #0
 800a226:	da8b      	bge.n	800a140 <_dtoa_r+0x7a8>
 800a228:	1ae4      	subs	r4, r4, r3
 800a22a:	2300      	movs	r3, #0
 800a22c:	e788      	b.n	800a140 <_dtoa_r+0x7a8>
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a232:	1aeb      	subs	r3, r5, r3
 800a234:	18d3      	adds	r3, r2, r3
 800a236:	950d      	str	r5, [sp, #52]	; 0x34
 800a238:	9313      	str	r3, [sp, #76]	; 0x4c
 800a23a:	2500      	movs	r5, #0
 800a23c:	e7f0      	b.n	800a220 <_dtoa_r+0x888>
 800a23e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a240:	e7b7      	b.n	800a1b2 <_dtoa_r+0x81a>
 800a242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a244:	2500      	movs	r5, #0
 800a246:	2b01      	cmp	r3, #1
 800a248:	ddca      	ble.n	800a1e0 <_dtoa_r+0x848>
 800a24a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a24c:	2001      	movs	r0, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <_dtoa_r+0x8cc>
 800a252:	6933      	ldr	r3, [r6, #16]
 800a254:	3303      	adds	r3, #3
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	18f3      	adds	r3, r6, r3
 800a25a:	6858      	ldr	r0, [r3, #4]
 800a25c:	f000 fb5e 	bl	800a91c <__hi0bits>
 800a260:	2320      	movs	r3, #32
 800a262:	1a18      	subs	r0, r3, r0
 800a264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a266:	1818      	adds	r0, r3, r0
 800a268:	0002      	movs	r2, r0
 800a26a:	231f      	movs	r3, #31
 800a26c:	401a      	ands	r2, r3
 800a26e:	4218      	tst	r0, r3
 800a270:	d047      	beq.n	800a302 <_dtoa_r+0x96a>
 800a272:	3301      	adds	r3, #1
 800a274:	1a9b      	subs	r3, r3, r2
 800a276:	2b04      	cmp	r3, #4
 800a278:	dd3f      	ble.n	800a2fa <_dtoa_r+0x962>
 800a27a:	231c      	movs	r3, #28
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a280:	18e4      	adds	r4, r4, r3
 800a282:	18d2      	adds	r2, r2, r3
 800a284:	920a      	str	r2, [sp, #40]	; 0x28
 800a286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a288:	18d3      	adds	r3, r2, r3
 800a28a:	930c      	str	r3, [sp, #48]	; 0x30
 800a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dd05      	ble.n	800a29e <_dtoa_r+0x906>
 800a292:	001a      	movs	r2, r3
 800a294:	9905      	ldr	r1, [sp, #20]
 800a296:	9804      	ldr	r0, [sp, #16]
 800a298:	f000 fcac 	bl	800abf4 <__lshift>
 800a29c:	9005      	str	r0, [sp, #20]
 800a29e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dd05      	ble.n	800a2b0 <_dtoa_r+0x918>
 800a2a4:	0031      	movs	r1, r6
 800a2a6:	001a      	movs	r2, r3
 800a2a8:	9804      	ldr	r0, [sp, #16]
 800a2aa:	f000 fca3 	bl	800abf4 <__lshift>
 800a2ae:	0006      	movs	r6, r0
 800a2b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d027      	beq.n	800a306 <_dtoa_r+0x96e>
 800a2b6:	0031      	movs	r1, r6
 800a2b8:	9805      	ldr	r0, [sp, #20]
 800a2ba:	f000 fd09 	bl	800acd0 <__mcmp>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	da21      	bge.n	800a306 <_dtoa_r+0x96e>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	9905      	ldr	r1, [sp, #20]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9804      	ldr	r0, [sp, #16]
 800a2d0:	f000 fae0 	bl	800a894 <__multadd>
 800a2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d6:	9005      	str	r0, [sp, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d100      	bne.n	800a2de <_dtoa_r+0x946>
 800a2dc:	e15d      	b.n	800a59a <_dtoa_r+0xc02>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	0039      	movs	r1, r7
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	9804      	ldr	r0, [sp, #16]
 800a2e6:	f000 fad5 	bl	800a894 <__multadd>
 800a2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ec:	0007      	movs	r7, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	dc49      	bgt.n	800a386 <_dtoa_r+0x9ee>
 800a2f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	dc0e      	bgt.n	800a316 <_dtoa_r+0x97e>
 800a2f8:	e045      	b.n	800a386 <_dtoa_r+0x9ee>
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d0c6      	beq.n	800a28c <_dtoa_r+0x8f4>
 800a2fe:	331c      	adds	r3, #28
 800a300:	e7bd      	b.n	800a27e <_dtoa_r+0x8e6>
 800a302:	0013      	movs	r3, r2
 800a304:	e7fb      	b.n	800a2fe <_dtoa_r+0x966>
 800a306:	9b07      	ldr	r3, [sp, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dc36      	bgt.n	800a37a <_dtoa_r+0x9e2>
 800a30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a30e:	2b02      	cmp	r3, #2
 800a310:	dd33      	ble.n	800a37a <_dtoa_r+0x9e2>
 800a312:	9b07      	ldr	r3, [sp, #28]
 800a314:	930b      	str	r3, [sp, #44]	; 0x2c
 800a316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10c      	bne.n	800a336 <_dtoa_r+0x99e>
 800a31c:	0031      	movs	r1, r6
 800a31e:	2205      	movs	r2, #5
 800a320:	9804      	ldr	r0, [sp, #16]
 800a322:	f000 fab7 	bl	800a894 <__multadd>
 800a326:	0006      	movs	r6, r0
 800a328:	0001      	movs	r1, r0
 800a32a:	9805      	ldr	r0, [sp, #20]
 800a32c:	f000 fcd0 	bl	800acd0 <__mcmp>
 800a330:	2800      	cmp	r0, #0
 800a332:	dd00      	ble.n	800a336 <_dtoa_r+0x99e>
 800a334:	e59f      	b.n	8009e76 <_dtoa_r+0x4de>
 800a336:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a338:	43db      	mvns	r3, r3
 800a33a:	9303      	str	r3, [sp, #12]
 800a33c:	9b06      	ldr	r3, [sp, #24]
 800a33e:	9308      	str	r3, [sp, #32]
 800a340:	2500      	movs	r5, #0
 800a342:	0031      	movs	r1, r6
 800a344:	9804      	ldr	r0, [sp, #16]
 800a346:	f000 fa81 	bl	800a84c <_Bfree>
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	d100      	bne.n	800a350 <_dtoa_r+0x9b8>
 800a34e:	e6a3      	b.n	800a098 <_dtoa_r+0x700>
 800a350:	2d00      	cmp	r5, #0
 800a352:	d005      	beq.n	800a360 <_dtoa_r+0x9c8>
 800a354:	42bd      	cmp	r5, r7
 800a356:	d003      	beq.n	800a360 <_dtoa_r+0x9c8>
 800a358:	0029      	movs	r1, r5
 800a35a:	9804      	ldr	r0, [sp, #16]
 800a35c:	f000 fa76 	bl	800a84c <_Bfree>
 800a360:	0039      	movs	r1, r7
 800a362:	9804      	ldr	r0, [sp, #16]
 800a364:	f000 fa72 	bl	800a84c <_Bfree>
 800a368:	e696      	b.n	800a098 <_dtoa_r+0x700>
 800a36a:	2600      	movs	r6, #0
 800a36c:	0037      	movs	r7, r6
 800a36e:	e7e2      	b.n	800a336 <_dtoa_r+0x99e>
 800a370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a372:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	0037      	movs	r7, r6
 800a378:	e57d      	b.n	8009e76 <_dtoa_r+0x4de>
 800a37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d100      	bne.n	800a382 <_dtoa_r+0x9ea>
 800a380:	e0c3      	b.n	800a50a <_dtoa_r+0xb72>
 800a382:	9b07      	ldr	r3, [sp, #28]
 800a384:	930b      	str	r3, [sp, #44]	; 0x2c
 800a386:	2c00      	cmp	r4, #0
 800a388:	dd05      	ble.n	800a396 <_dtoa_r+0x9fe>
 800a38a:	0039      	movs	r1, r7
 800a38c:	0022      	movs	r2, r4
 800a38e:	9804      	ldr	r0, [sp, #16]
 800a390:	f000 fc30 	bl	800abf4 <__lshift>
 800a394:	0007      	movs	r7, r0
 800a396:	0038      	movs	r0, r7
 800a398:	2d00      	cmp	r5, #0
 800a39a:	d024      	beq.n	800a3e6 <_dtoa_r+0xa4e>
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	9804      	ldr	r0, [sp, #16]
 800a3a0:	f000 fa10 	bl	800a7c4 <_Balloc>
 800a3a4:	1e04      	subs	r4, r0, #0
 800a3a6:	d111      	bne.n	800a3cc <_dtoa_r+0xa34>
 800a3a8:	0022      	movs	r2, r4
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <_dtoa_r+0xa28>)
 800a3ac:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <_dtoa_r+0xa2c>)
 800a3ae:	4906      	ldr	r1, [pc, #24]	; (800a3c8 <_dtoa_r+0xa30>)
 800a3b0:	f7ff fb07 	bl	80099c2 <_dtoa_r+0x2a>
 800a3b4:	40240000 	.word	0x40240000
 800a3b8:	00000433 	.word	0x00000433
 800a3bc:	7ff00000 	.word	0x7ff00000
 800a3c0:	0800b90c 	.word	0x0800b90c
 800a3c4:	0800b8b4 	.word	0x0800b8b4
 800a3c8:	000002ef 	.word	0x000002ef
 800a3cc:	0039      	movs	r1, r7
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	310c      	adds	r1, #12
 800a3d2:	3202      	adds	r2, #2
 800a3d4:	0092      	lsls	r2, r2, #2
 800a3d6:	300c      	adds	r0, #12
 800a3d8:	f000 fe56 	bl	800b088 <memcpy>
 800a3dc:	2201      	movs	r2, #1
 800a3de:	0021      	movs	r1, r4
 800a3e0:	9804      	ldr	r0, [sp, #16]
 800a3e2:	f000 fc07 	bl	800abf4 <__lshift>
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ea:	9307      	str	r3, [sp, #28]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	189b      	adds	r3, r3, r2
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	003d      	movs	r5, r7
 800a3f4:	0007      	movs	r7, r0
 800a3f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3f8:	9b08      	ldr	r3, [sp, #32]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	930d      	str	r3, [sp, #52]	; 0x34
 800a3fe:	0031      	movs	r1, r6
 800a400:	9805      	ldr	r0, [sp, #20]
 800a402:	f7ff fa39 	bl	8009878 <quorem>
 800a406:	0029      	movs	r1, r5
 800a408:	0004      	movs	r4, r0
 800a40a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a40c:	9805      	ldr	r0, [sp, #20]
 800a40e:	f000 fc5f 	bl	800acd0 <__mcmp>
 800a412:	003a      	movs	r2, r7
 800a414:	900c      	str	r0, [sp, #48]	; 0x30
 800a416:	0031      	movs	r1, r6
 800a418:	9804      	ldr	r0, [sp, #16]
 800a41a:	f000 fc75 	bl	800ad08 <__mdiff>
 800a41e:	2201      	movs	r2, #1
 800a420:	68c3      	ldr	r3, [r0, #12]
 800a422:	3430      	adds	r4, #48	; 0x30
 800a424:	9008      	str	r0, [sp, #32]
 800a426:	920a      	str	r2, [sp, #40]	; 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <_dtoa_r+0xa9e>
 800a42c:	0001      	movs	r1, r0
 800a42e:	9805      	ldr	r0, [sp, #20]
 800a430:	f000 fc4e 	bl	800acd0 <__mcmp>
 800a434:	900a      	str	r0, [sp, #40]	; 0x28
 800a436:	9908      	ldr	r1, [sp, #32]
 800a438:	9804      	ldr	r0, [sp, #16]
 800a43a:	f000 fa07 	bl	800a84c <_Bfree>
 800a43e:	9b07      	ldr	r3, [sp, #28]
 800a440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a442:	3301      	adds	r3, #1
 800a444:	9308      	str	r3, [sp, #32]
 800a446:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a448:	4313      	orrs	r3, r2
 800a44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a44c:	4313      	orrs	r3, r2
 800a44e:	d109      	bne.n	800a464 <_dtoa_r+0xacc>
 800a450:	2c39      	cmp	r4, #57	; 0x39
 800a452:	d022      	beq.n	800a49a <_dtoa_r+0xb02>
 800a454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd01      	ble.n	800a45e <_dtoa_r+0xac6>
 800a45a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a45c:	3431      	adds	r4, #49	; 0x31
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	701c      	strb	r4, [r3, #0]
 800a462:	e76e      	b.n	800a342 <_dtoa_r+0x9aa>
 800a464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a466:	2b00      	cmp	r3, #0
 800a468:	db04      	blt.n	800a474 <_dtoa_r+0xadc>
 800a46a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a46c:	4313      	orrs	r3, r2
 800a46e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a470:	4313      	orrs	r3, r2
 800a472:	d11e      	bne.n	800a4b2 <_dtoa_r+0xb1a>
 800a474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a476:	2b00      	cmp	r3, #0
 800a478:	ddf1      	ble.n	800a45e <_dtoa_r+0xac6>
 800a47a:	9905      	ldr	r1, [sp, #20]
 800a47c:	2201      	movs	r2, #1
 800a47e:	9804      	ldr	r0, [sp, #16]
 800a480:	f000 fbb8 	bl	800abf4 <__lshift>
 800a484:	0031      	movs	r1, r6
 800a486:	9005      	str	r0, [sp, #20]
 800a488:	f000 fc22 	bl	800acd0 <__mcmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	dc02      	bgt.n	800a496 <_dtoa_r+0xafe>
 800a490:	d1e5      	bne.n	800a45e <_dtoa_r+0xac6>
 800a492:	07e3      	lsls	r3, r4, #31
 800a494:	d5e3      	bpl.n	800a45e <_dtoa_r+0xac6>
 800a496:	2c39      	cmp	r4, #57	; 0x39
 800a498:	d1df      	bne.n	800a45a <_dtoa_r+0xac2>
 800a49a:	2339      	movs	r3, #57	; 0x39
 800a49c:	9a07      	ldr	r2, [sp, #28]
 800a49e:	7013      	strb	r3, [r2, #0]
 800a4a0:	9b08      	ldr	r3, [sp, #32]
 800a4a2:	9308      	str	r3, [sp, #32]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	781a      	ldrb	r2, [r3, #0]
 800a4a8:	2a39      	cmp	r2, #57	; 0x39
 800a4aa:	d063      	beq.n	800a574 <_dtoa_r+0xbdc>
 800a4ac:	3201      	adds	r2, #1
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	e747      	b.n	800a342 <_dtoa_r+0x9aa>
 800a4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd03      	ble.n	800a4c0 <_dtoa_r+0xb28>
 800a4b8:	2c39      	cmp	r4, #57	; 0x39
 800a4ba:	d0ee      	beq.n	800a49a <_dtoa_r+0xb02>
 800a4bc:	3401      	adds	r4, #1
 800a4be:	e7ce      	b.n	800a45e <_dtoa_r+0xac6>
 800a4c0:	9b07      	ldr	r3, [sp, #28]
 800a4c2:	9a07      	ldr	r2, [sp, #28]
 800a4c4:	701c      	strb	r4, [r3, #0]
 800a4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d03e      	beq.n	800a54a <_dtoa_r+0xbb2>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	9905      	ldr	r1, [sp, #20]
 800a4d2:	9804      	ldr	r0, [sp, #16]
 800a4d4:	f000 f9de 	bl	800a894 <__multadd>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9005      	str	r0, [sp, #20]
 800a4dc:	220a      	movs	r2, #10
 800a4de:	0029      	movs	r1, r5
 800a4e0:	9804      	ldr	r0, [sp, #16]
 800a4e2:	42bd      	cmp	r5, r7
 800a4e4:	d106      	bne.n	800a4f4 <_dtoa_r+0xb5c>
 800a4e6:	f000 f9d5 	bl	800a894 <__multadd>
 800a4ea:	0005      	movs	r5, r0
 800a4ec:	0007      	movs	r7, r0
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	9307      	str	r3, [sp, #28]
 800a4f2:	e784      	b.n	800a3fe <_dtoa_r+0xa66>
 800a4f4:	f000 f9ce 	bl	800a894 <__multadd>
 800a4f8:	0039      	movs	r1, r7
 800a4fa:	0005      	movs	r5, r0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	220a      	movs	r2, #10
 800a500:	9804      	ldr	r0, [sp, #16]
 800a502:	f000 f9c7 	bl	800a894 <__multadd>
 800a506:	0007      	movs	r7, r0
 800a508:	e7f1      	b.n	800a4ee <_dtoa_r+0xb56>
 800a50a:	9b07      	ldr	r3, [sp, #28]
 800a50c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a50e:	2500      	movs	r5, #0
 800a510:	0031      	movs	r1, r6
 800a512:	9805      	ldr	r0, [sp, #20]
 800a514:	f7ff f9b0 	bl	8009878 <quorem>
 800a518:	9b06      	ldr	r3, [sp, #24]
 800a51a:	3030      	adds	r0, #48	; 0x30
 800a51c:	5558      	strb	r0, [r3, r5]
 800a51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a520:	3501      	adds	r5, #1
 800a522:	0004      	movs	r4, r0
 800a524:	42ab      	cmp	r3, r5
 800a526:	dd07      	ble.n	800a538 <_dtoa_r+0xba0>
 800a528:	2300      	movs	r3, #0
 800a52a:	220a      	movs	r2, #10
 800a52c:	9905      	ldr	r1, [sp, #20]
 800a52e:	9804      	ldr	r0, [sp, #16]
 800a530:	f000 f9b0 	bl	800a894 <__multadd>
 800a534:	9005      	str	r0, [sp, #20]
 800a536:	e7eb      	b.n	800a510 <_dtoa_r+0xb78>
 800a538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a53a:	2301      	movs	r3, #1
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	dd00      	ble.n	800a542 <_dtoa_r+0xbaa>
 800a540:	0013      	movs	r3, r2
 800a542:	2500      	movs	r5, #0
 800a544:	9a06      	ldr	r2, [sp, #24]
 800a546:	18d3      	adds	r3, r2, r3
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	9905      	ldr	r1, [sp, #20]
 800a54c:	2201      	movs	r2, #1
 800a54e:	9804      	ldr	r0, [sp, #16]
 800a550:	f000 fb50 	bl	800abf4 <__lshift>
 800a554:	0031      	movs	r1, r6
 800a556:	9005      	str	r0, [sp, #20]
 800a558:	f000 fbba 	bl	800acd0 <__mcmp>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	dc9f      	bgt.n	800a4a0 <_dtoa_r+0xb08>
 800a560:	d101      	bne.n	800a566 <_dtoa_r+0xbce>
 800a562:	07e4      	lsls	r4, r4, #31
 800a564:	d49c      	bmi.n	800a4a0 <_dtoa_r+0xb08>
 800a566:	9b08      	ldr	r3, [sp, #32]
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	2a30      	cmp	r2, #48	; 0x30
 800a570:	d0fa      	beq.n	800a568 <_dtoa_r+0xbd0>
 800a572:	e6e6      	b.n	800a342 <_dtoa_r+0x9aa>
 800a574:	9a06      	ldr	r2, [sp, #24]
 800a576:	429a      	cmp	r2, r3
 800a578:	d193      	bne.n	800a4a2 <_dtoa_r+0xb0a>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	9303      	str	r3, [sp, #12]
 800a580:	2331      	movs	r3, #49	; 0x31
 800a582:	7013      	strb	r3, [r2, #0]
 800a584:	e6dd      	b.n	800a342 <_dtoa_r+0x9aa>
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <_dtoa_r+0xc14>)
 800a588:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <_dtoa_r+0xc18>)
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d001      	beq.n	800a596 <_dtoa_r+0xbfe>
 800a592:	f7ff fa49 	bl	8009a28 <_dtoa_r+0x90>
 800a596:	f7ff fa49 	bl	8009a2c <_dtoa_r+0x94>
 800a59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dcb6      	bgt.n	800a50e <_dtoa_r+0xb76>
 800a5a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	dd00      	ble.n	800a5a8 <_dtoa_r+0xc10>
 800a5a6:	e6b6      	b.n	800a316 <_dtoa_r+0x97e>
 800a5a8:	e7b1      	b.n	800a50e <_dtoa_r+0xb76>
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	0800b890 	.word	0x0800b890
 800a5b0:	0800b898 	.word	0x0800b898

0800a5b4 <_free_r>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	0005      	movs	r5, r0
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	d010      	beq.n	800a5de <_free_r+0x2a>
 800a5bc:	1f0c      	subs	r4, r1, #4
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	da00      	bge.n	800a5c6 <_free_r+0x12>
 800a5c4:	18e4      	adds	r4, r4, r3
 800a5c6:	0028      	movs	r0, r5
 800a5c8:	f000 f8ec 	bl	800a7a4 <__malloc_lock>
 800a5cc:	4a1d      	ldr	r2, [pc, #116]	; (800a644 <_free_r+0x90>)
 800a5ce:	6813      	ldr	r3, [r2, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d105      	bne.n	800a5e0 <_free_r+0x2c>
 800a5d4:	6063      	str	r3, [r4, #4]
 800a5d6:	6014      	str	r4, [r2, #0]
 800a5d8:	0028      	movs	r0, r5
 800a5da:	f000 f8eb 	bl	800a7b4 <__malloc_unlock>
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	42a3      	cmp	r3, r4
 800a5e2:	d908      	bls.n	800a5f6 <_free_r+0x42>
 800a5e4:	6820      	ldr	r0, [r4, #0]
 800a5e6:	1821      	adds	r1, r4, r0
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	d1f3      	bne.n	800a5d4 <_free_r+0x20>
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	1809      	adds	r1, r1, r0
 800a5f2:	6021      	str	r1, [r4, #0]
 800a5f4:	e7ee      	b.n	800a5d4 <_free_r+0x20>
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <_free_r+0x4e>
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d9f9      	bls.n	800a5f6 <_free_r+0x42>
 800a602:	6811      	ldr	r1, [r2, #0]
 800a604:	1850      	adds	r0, r2, r1
 800a606:	42a0      	cmp	r0, r4
 800a608:	d10b      	bne.n	800a622 <_free_r+0x6e>
 800a60a:	6820      	ldr	r0, [r4, #0]
 800a60c:	1809      	adds	r1, r1, r0
 800a60e:	1850      	adds	r0, r2, r1
 800a610:	6011      	str	r1, [r2, #0]
 800a612:	4283      	cmp	r3, r0
 800a614:	d1e0      	bne.n	800a5d8 <_free_r+0x24>
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	1841      	adds	r1, r0, r1
 800a61c:	6011      	str	r1, [r2, #0]
 800a61e:	6053      	str	r3, [r2, #4]
 800a620:	e7da      	b.n	800a5d8 <_free_r+0x24>
 800a622:	42a0      	cmp	r0, r4
 800a624:	d902      	bls.n	800a62c <_free_r+0x78>
 800a626:	230c      	movs	r3, #12
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	e7d5      	b.n	800a5d8 <_free_r+0x24>
 800a62c:	6820      	ldr	r0, [r4, #0]
 800a62e:	1821      	adds	r1, r4, r0
 800a630:	428b      	cmp	r3, r1
 800a632:	d103      	bne.n	800a63c <_free_r+0x88>
 800a634:	6819      	ldr	r1, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	1809      	adds	r1, r1, r0
 800a63a:	6021      	str	r1, [r4, #0]
 800a63c:	6063      	str	r3, [r4, #4]
 800a63e:	6054      	str	r4, [r2, #4]
 800a640:	e7ca      	b.n	800a5d8 <_free_r+0x24>
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	200005d8 	.word	0x200005d8

0800a648 <malloc>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <malloc+0x10>)
 800a64c:	0001      	movs	r1, r0
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	f000 f826 	bl	800a6a0 <_malloc_r>
 800a654:	bd10      	pop	{r4, pc}
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	20000064 	.word	0x20000064

0800a65c <sbrk_aligned>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	4e0f      	ldr	r6, [pc, #60]	; (800a69c <sbrk_aligned+0x40>)
 800a660:	000d      	movs	r5, r1
 800a662:	6831      	ldr	r1, [r6, #0]
 800a664:	0004      	movs	r4, r0
 800a666:	2900      	cmp	r1, #0
 800a668:	d102      	bne.n	800a670 <sbrk_aligned+0x14>
 800a66a:	f000 fcfb 	bl	800b064 <_sbrk_r>
 800a66e:	6030      	str	r0, [r6, #0]
 800a670:	0029      	movs	r1, r5
 800a672:	0020      	movs	r0, r4
 800a674:	f000 fcf6 	bl	800b064 <_sbrk_r>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d00a      	beq.n	800a692 <sbrk_aligned+0x36>
 800a67c:	2303      	movs	r3, #3
 800a67e:	1cc5      	adds	r5, r0, #3
 800a680:	439d      	bics	r5, r3
 800a682:	42a8      	cmp	r0, r5
 800a684:	d007      	beq.n	800a696 <sbrk_aligned+0x3a>
 800a686:	1a29      	subs	r1, r5, r0
 800a688:	0020      	movs	r0, r4
 800a68a:	f000 fceb 	bl	800b064 <_sbrk_r>
 800a68e:	3001      	adds	r0, #1
 800a690:	d101      	bne.n	800a696 <sbrk_aligned+0x3a>
 800a692:	2501      	movs	r5, #1
 800a694:	426d      	negs	r5, r5
 800a696:	0028      	movs	r0, r5
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	200005dc 	.word	0x200005dc

0800a6a0 <_malloc_r>:
 800a6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	1ccb      	adds	r3, r1, #3
 800a6a6:	4393      	bics	r3, r2
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	0006      	movs	r6, r0
 800a6ac:	001f      	movs	r7, r3
 800a6ae:	2b0c      	cmp	r3, #12
 800a6b0:	d238      	bcs.n	800a724 <_malloc_r+0x84>
 800a6b2:	270c      	movs	r7, #12
 800a6b4:	42b9      	cmp	r1, r7
 800a6b6:	d837      	bhi.n	800a728 <_malloc_r+0x88>
 800a6b8:	0030      	movs	r0, r6
 800a6ba:	f000 f873 	bl	800a7a4 <__malloc_lock>
 800a6be:	4b38      	ldr	r3, [pc, #224]	; (800a7a0 <_malloc_r+0x100>)
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	001c      	movs	r4, r3
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	d133      	bne.n	800a732 <_malloc_r+0x92>
 800a6ca:	0039      	movs	r1, r7
 800a6cc:	0030      	movs	r0, r6
 800a6ce:	f7ff ffc5 	bl	800a65c <sbrk_aligned>
 800a6d2:	0004      	movs	r4, r0
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d15e      	bne.n	800a796 <_malloc_r+0xf6>
 800a6d8:	9b00      	ldr	r3, [sp, #0]
 800a6da:	681c      	ldr	r4, [r3, #0]
 800a6dc:	0025      	movs	r5, r4
 800a6de:	2d00      	cmp	r5, #0
 800a6e0:	d14e      	bne.n	800a780 <_malloc_r+0xe0>
 800a6e2:	2c00      	cmp	r4, #0
 800a6e4:	d051      	beq.n	800a78a <_malloc_r+0xea>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	0029      	movs	r1, r5
 800a6ea:	18e3      	adds	r3, r4, r3
 800a6ec:	0030      	movs	r0, r6
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	f000 fcb8 	bl	800b064 <_sbrk_r>
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	4283      	cmp	r3, r0
 800a6f8:	d147      	bne.n	800a78a <_malloc_r+0xea>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	0030      	movs	r0, r6
 800a6fe:	1aff      	subs	r7, r7, r3
 800a700:	0039      	movs	r1, r7
 800a702:	f7ff ffab 	bl	800a65c <sbrk_aligned>
 800a706:	3001      	adds	r0, #1
 800a708:	d03f      	beq.n	800a78a <_malloc_r+0xea>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	19db      	adds	r3, r3, r7
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	9b00      	ldr	r3, [sp, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d040      	beq.n	800a79a <_malloc_r+0xfa>
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	42a2      	cmp	r2, r4
 800a71c:	d133      	bne.n	800a786 <_malloc_r+0xe6>
 800a71e:	2200      	movs	r2, #0
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	e014      	b.n	800a74e <_malloc_r+0xae>
 800a724:	2b00      	cmp	r3, #0
 800a726:	dac5      	bge.n	800a6b4 <_malloc_r+0x14>
 800a728:	230c      	movs	r3, #12
 800a72a:	2500      	movs	r5, #0
 800a72c:	6033      	str	r3, [r6, #0]
 800a72e:	0028      	movs	r0, r5
 800a730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a732:	6821      	ldr	r1, [r4, #0]
 800a734:	1bc9      	subs	r1, r1, r7
 800a736:	d420      	bmi.n	800a77a <_malloc_r+0xda>
 800a738:	290b      	cmp	r1, #11
 800a73a:	d918      	bls.n	800a76e <_malloc_r+0xce>
 800a73c:	19e2      	adds	r2, r4, r7
 800a73e:	6027      	str	r7, [r4, #0]
 800a740:	42a3      	cmp	r3, r4
 800a742:	d112      	bne.n	800a76a <_malloc_r+0xca>
 800a744:	9b00      	ldr	r3, [sp, #0]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	6011      	str	r1, [r2, #0]
 800a74c:	6053      	str	r3, [r2, #4]
 800a74e:	0030      	movs	r0, r6
 800a750:	0025      	movs	r5, r4
 800a752:	f000 f82f 	bl	800a7b4 <__malloc_unlock>
 800a756:	2207      	movs	r2, #7
 800a758:	350b      	adds	r5, #11
 800a75a:	1d23      	adds	r3, r4, #4
 800a75c:	4395      	bics	r5, r2
 800a75e:	1aea      	subs	r2, r5, r3
 800a760:	429d      	cmp	r5, r3
 800a762:	d0e4      	beq.n	800a72e <_malloc_r+0x8e>
 800a764:	1b5b      	subs	r3, r3, r5
 800a766:	50a3      	str	r3, [r4, r2]
 800a768:	e7e1      	b.n	800a72e <_malloc_r+0x8e>
 800a76a:	605a      	str	r2, [r3, #4]
 800a76c:	e7ec      	b.n	800a748 <_malloc_r+0xa8>
 800a76e:	6862      	ldr	r2, [r4, #4]
 800a770:	42a3      	cmp	r3, r4
 800a772:	d1d5      	bne.n	800a720 <_malloc_r+0x80>
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e7e9      	b.n	800a74e <_malloc_r+0xae>
 800a77a:	0023      	movs	r3, r4
 800a77c:	6864      	ldr	r4, [r4, #4]
 800a77e:	e7a2      	b.n	800a6c6 <_malloc_r+0x26>
 800a780:	002c      	movs	r4, r5
 800a782:	686d      	ldr	r5, [r5, #4]
 800a784:	e7ab      	b.n	800a6de <_malloc_r+0x3e>
 800a786:	0013      	movs	r3, r2
 800a788:	e7c4      	b.n	800a714 <_malloc_r+0x74>
 800a78a:	230c      	movs	r3, #12
 800a78c:	0030      	movs	r0, r6
 800a78e:	6033      	str	r3, [r6, #0]
 800a790:	f000 f810 	bl	800a7b4 <__malloc_unlock>
 800a794:	e7cb      	b.n	800a72e <_malloc_r+0x8e>
 800a796:	6027      	str	r7, [r4, #0]
 800a798:	e7d9      	b.n	800a74e <_malloc_r+0xae>
 800a79a:	605b      	str	r3, [r3, #4]
 800a79c:	deff      	udf	#255	; 0xff
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	200005d8 	.word	0x200005d8

0800a7a4 <__malloc_lock>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4802      	ldr	r0, [pc, #8]	; (800a7b0 <__malloc_lock+0xc>)
 800a7a8:	f7ff f859 	bl	800985e <__retarget_lock_acquire_recursive>
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	200005d4 	.word	0x200005d4

0800a7b4 <__malloc_unlock>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4802      	ldr	r0, [pc, #8]	; (800a7c0 <__malloc_unlock+0xc>)
 800a7b8:	f7ff f852 	bl	8009860 <__retarget_lock_release_recursive>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	200005d4 	.word	0x200005d4

0800a7c4 <_Balloc>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	69c5      	ldr	r5, [r0, #28]
 800a7c8:	0006      	movs	r6, r0
 800a7ca:	000c      	movs	r4, r1
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d10e      	bne.n	800a7ee <_Balloc+0x2a>
 800a7d0:	2010      	movs	r0, #16
 800a7d2:	f7ff ff39 	bl	800a648 <malloc>
 800a7d6:	1e02      	subs	r2, r0, #0
 800a7d8:	61f0      	str	r0, [r6, #28]
 800a7da:	d104      	bne.n	800a7e6 <_Balloc+0x22>
 800a7dc:	216b      	movs	r1, #107	; 0x6b
 800a7de:	4b19      	ldr	r3, [pc, #100]	; (800a844 <_Balloc+0x80>)
 800a7e0:	4819      	ldr	r0, [pc, #100]	; (800a848 <_Balloc+0x84>)
 800a7e2:	f000 fc5b 	bl	800b09c <__assert_func>
 800a7e6:	6045      	str	r5, [r0, #4]
 800a7e8:	6085      	str	r5, [r0, #8]
 800a7ea:	6005      	str	r5, [r0, #0]
 800a7ec:	60c5      	str	r5, [r0, #12]
 800a7ee:	69f5      	ldr	r5, [r6, #28]
 800a7f0:	68eb      	ldr	r3, [r5, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d013      	beq.n	800a81e <_Balloc+0x5a>
 800a7f6:	69f3      	ldr	r3, [r6, #28]
 800a7f8:	00a2      	lsls	r2, r4, #2
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	189b      	adds	r3, r3, r2
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	2800      	cmp	r0, #0
 800a802:	d118      	bne.n	800a836 <_Balloc+0x72>
 800a804:	2101      	movs	r1, #1
 800a806:	000d      	movs	r5, r1
 800a808:	40a5      	lsls	r5, r4
 800a80a:	1d6a      	adds	r2, r5, #5
 800a80c:	0030      	movs	r0, r6
 800a80e:	0092      	lsls	r2, r2, #2
 800a810:	f000 fc62 	bl	800b0d8 <_calloc_r>
 800a814:	2800      	cmp	r0, #0
 800a816:	d00c      	beq.n	800a832 <_Balloc+0x6e>
 800a818:	6044      	str	r4, [r0, #4]
 800a81a:	6085      	str	r5, [r0, #8]
 800a81c:	e00d      	b.n	800a83a <_Balloc+0x76>
 800a81e:	2221      	movs	r2, #33	; 0x21
 800a820:	2104      	movs	r1, #4
 800a822:	0030      	movs	r0, r6
 800a824:	f000 fc58 	bl	800b0d8 <_calloc_r>
 800a828:	69f3      	ldr	r3, [r6, #28]
 800a82a:	60e8      	str	r0, [r5, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e1      	bne.n	800a7f6 <_Balloc+0x32>
 800a832:	2000      	movs	r0, #0
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	6802      	ldr	r2, [r0, #0]
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	6103      	str	r3, [r0, #16]
 800a83e:	60c3      	str	r3, [r0, #12]
 800a840:	e7f8      	b.n	800a834 <_Balloc+0x70>
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	0800b89d 	.word	0x0800b89d
 800a848:	0800b91d 	.word	0x0800b91d

0800a84c <_Bfree>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	69c6      	ldr	r6, [r0, #28]
 800a850:	0005      	movs	r5, r0
 800a852:	000c      	movs	r4, r1
 800a854:	2e00      	cmp	r6, #0
 800a856:	d10e      	bne.n	800a876 <_Bfree+0x2a>
 800a858:	2010      	movs	r0, #16
 800a85a:	f7ff fef5 	bl	800a648 <malloc>
 800a85e:	1e02      	subs	r2, r0, #0
 800a860:	61e8      	str	r0, [r5, #28]
 800a862:	d104      	bne.n	800a86e <_Bfree+0x22>
 800a864:	218f      	movs	r1, #143	; 0x8f
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <_Bfree+0x40>)
 800a868:	4809      	ldr	r0, [pc, #36]	; (800a890 <_Bfree+0x44>)
 800a86a:	f000 fc17 	bl	800b09c <__assert_func>
 800a86e:	6046      	str	r6, [r0, #4]
 800a870:	6086      	str	r6, [r0, #8]
 800a872:	6006      	str	r6, [r0, #0]
 800a874:	60c6      	str	r6, [r0, #12]
 800a876:	2c00      	cmp	r4, #0
 800a878:	d007      	beq.n	800a88a <_Bfree+0x3e>
 800a87a:	69eb      	ldr	r3, [r5, #28]
 800a87c:	6862      	ldr	r2, [r4, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	0092      	lsls	r2, r2, #2
 800a882:	189b      	adds	r3, r3, r2
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	6022      	str	r2, [r4, #0]
 800a888:	601c      	str	r4, [r3, #0]
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	0800b89d 	.word	0x0800b89d
 800a890:	0800b91d 	.word	0x0800b91d

0800a894 <__multadd>:
 800a894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a896:	000e      	movs	r6, r1
 800a898:	9001      	str	r0, [sp, #4]
 800a89a:	000c      	movs	r4, r1
 800a89c:	001d      	movs	r5, r3
 800a89e:	2000      	movs	r0, #0
 800a8a0:	690f      	ldr	r7, [r1, #16]
 800a8a2:	3614      	adds	r6, #20
 800a8a4:	6833      	ldr	r3, [r6, #0]
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	b299      	uxth	r1, r3
 800a8aa:	4351      	muls	r1, r2
 800a8ac:	0c1b      	lsrs	r3, r3, #16
 800a8ae:	4353      	muls	r3, r2
 800a8b0:	1949      	adds	r1, r1, r5
 800a8b2:	0c0d      	lsrs	r5, r1, #16
 800a8b4:	195b      	adds	r3, r3, r5
 800a8b6:	0c1d      	lsrs	r5, r3, #16
 800a8b8:	b289      	uxth	r1, r1
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	185b      	adds	r3, r3, r1
 800a8be:	c608      	stmia	r6!, {r3}
 800a8c0:	4287      	cmp	r7, r0
 800a8c2:	dcef      	bgt.n	800a8a4 <__multadd+0x10>
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	d022      	beq.n	800a90e <__multadd+0x7a>
 800a8c8:	68a3      	ldr	r3, [r4, #8]
 800a8ca:	42bb      	cmp	r3, r7
 800a8cc:	dc19      	bgt.n	800a902 <__multadd+0x6e>
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	9801      	ldr	r0, [sp, #4]
 800a8d2:	3101      	adds	r1, #1
 800a8d4:	f7ff ff76 	bl	800a7c4 <_Balloc>
 800a8d8:	1e06      	subs	r6, r0, #0
 800a8da:	d105      	bne.n	800a8e8 <__multadd+0x54>
 800a8dc:	0032      	movs	r2, r6
 800a8de:	21ba      	movs	r1, #186	; 0xba
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <__multadd+0x80>)
 800a8e2:	480d      	ldr	r0, [pc, #52]	; (800a918 <__multadd+0x84>)
 800a8e4:	f000 fbda 	bl	800b09c <__assert_func>
 800a8e8:	0021      	movs	r1, r4
 800a8ea:	6922      	ldr	r2, [r4, #16]
 800a8ec:	310c      	adds	r1, #12
 800a8ee:	3202      	adds	r2, #2
 800a8f0:	0092      	lsls	r2, r2, #2
 800a8f2:	300c      	adds	r0, #12
 800a8f4:	f000 fbc8 	bl	800b088 <memcpy>
 800a8f8:	0021      	movs	r1, r4
 800a8fa:	9801      	ldr	r0, [sp, #4]
 800a8fc:	f7ff ffa6 	bl	800a84c <_Bfree>
 800a900:	0034      	movs	r4, r6
 800a902:	1d3b      	adds	r3, r7, #4
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	18e3      	adds	r3, r4, r3
 800a908:	605d      	str	r5, [r3, #4]
 800a90a:	1c7b      	adds	r3, r7, #1
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	0020      	movs	r0, r4
 800a910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	0800b90c 	.word	0x0800b90c
 800a918:	0800b91d 	.word	0x0800b91d

0800a91c <__hi0bits>:
 800a91c:	0003      	movs	r3, r0
 800a91e:	0c02      	lsrs	r2, r0, #16
 800a920:	2000      	movs	r0, #0
 800a922:	4282      	cmp	r2, r0
 800a924:	d101      	bne.n	800a92a <__hi0bits+0xe>
 800a926:	041b      	lsls	r3, r3, #16
 800a928:	3010      	adds	r0, #16
 800a92a:	0e1a      	lsrs	r2, r3, #24
 800a92c:	d101      	bne.n	800a932 <__hi0bits+0x16>
 800a92e:	3008      	adds	r0, #8
 800a930:	021b      	lsls	r3, r3, #8
 800a932:	0f1a      	lsrs	r2, r3, #28
 800a934:	d101      	bne.n	800a93a <__hi0bits+0x1e>
 800a936:	3004      	adds	r0, #4
 800a938:	011b      	lsls	r3, r3, #4
 800a93a:	0f9a      	lsrs	r2, r3, #30
 800a93c:	d101      	bne.n	800a942 <__hi0bits+0x26>
 800a93e:	3002      	adds	r0, #2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	2b00      	cmp	r3, #0
 800a944:	db03      	blt.n	800a94e <__hi0bits+0x32>
 800a946:	3001      	adds	r0, #1
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	d400      	bmi.n	800a94e <__hi0bits+0x32>
 800a94c:	2020      	movs	r0, #32
 800a94e:	4770      	bx	lr

0800a950 <__lo0bits>:
 800a950:	6803      	ldr	r3, [r0, #0]
 800a952:	0001      	movs	r1, r0
 800a954:	2207      	movs	r2, #7
 800a956:	0018      	movs	r0, r3
 800a958:	4010      	ands	r0, r2
 800a95a:	4213      	tst	r3, r2
 800a95c:	d00d      	beq.n	800a97a <__lo0bits+0x2a>
 800a95e:	3a06      	subs	r2, #6
 800a960:	2000      	movs	r0, #0
 800a962:	4213      	tst	r3, r2
 800a964:	d105      	bne.n	800a972 <__lo0bits+0x22>
 800a966:	3002      	adds	r0, #2
 800a968:	4203      	tst	r3, r0
 800a96a:	d003      	beq.n	800a974 <__lo0bits+0x24>
 800a96c:	40d3      	lsrs	r3, r2
 800a96e:	0010      	movs	r0, r2
 800a970:	600b      	str	r3, [r1, #0]
 800a972:	4770      	bx	lr
 800a974:	089b      	lsrs	r3, r3, #2
 800a976:	600b      	str	r3, [r1, #0]
 800a978:	e7fb      	b.n	800a972 <__lo0bits+0x22>
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	d101      	bne.n	800a984 <__lo0bits+0x34>
 800a980:	2010      	movs	r0, #16
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	b2da      	uxtb	r2, r3
 800a986:	2a00      	cmp	r2, #0
 800a988:	d101      	bne.n	800a98e <__lo0bits+0x3e>
 800a98a:	3008      	adds	r0, #8
 800a98c:	0a1b      	lsrs	r3, r3, #8
 800a98e:	071a      	lsls	r2, r3, #28
 800a990:	d101      	bne.n	800a996 <__lo0bits+0x46>
 800a992:	3004      	adds	r0, #4
 800a994:	091b      	lsrs	r3, r3, #4
 800a996:	079a      	lsls	r2, r3, #30
 800a998:	d101      	bne.n	800a99e <__lo0bits+0x4e>
 800a99a:	3002      	adds	r0, #2
 800a99c:	089b      	lsrs	r3, r3, #2
 800a99e:	07da      	lsls	r2, r3, #31
 800a9a0:	d4e9      	bmi.n	800a976 <__lo0bits+0x26>
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	085b      	lsrs	r3, r3, #1
 800a9a6:	d1e6      	bne.n	800a976 <__lo0bits+0x26>
 800a9a8:	2020      	movs	r0, #32
 800a9aa:	e7e2      	b.n	800a972 <__lo0bits+0x22>

0800a9ac <__i2b>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	000c      	movs	r4, r1
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	f7ff ff07 	bl	800a7c4 <_Balloc>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d107      	bne.n	800a9ca <__i2b+0x1e>
 800a9ba:	2146      	movs	r1, #70	; 0x46
 800a9bc:	4c05      	ldr	r4, [pc, #20]	; (800a9d4 <__i2b+0x28>)
 800a9be:	0002      	movs	r2, r0
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <__i2b+0x2c>)
 800a9c2:	0020      	movs	r0, r4
 800a9c4:	31ff      	adds	r1, #255	; 0xff
 800a9c6:	f000 fb69 	bl	800b09c <__assert_func>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	6144      	str	r4, [r0, #20]
 800a9ce:	6103      	str	r3, [r0, #16]
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	0800b91d 	.word	0x0800b91d
 800a9d8:	0800b90c 	.word	0x0800b90c

0800a9dc <__multiply>:
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	0015      	movs	r5, r2
 800a9e0:	690a      	ldr	r2, [r1, #16]
 800a9e2:	692b      	ldr	r3, [r5, #16]
 800a9e4:	000c      	movs	r4, r1
 800a9e6:	b08b      	sub	sp, #44	; 0x2c
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	da01      	bge.n	800a9f0 <__multiply+0x14>
 800a9ec:	002c      	movs	r4, r5
 800a9ee:	000d      	movs	r5, r1
 800a9f0:	6927      	ldr	r7, [r4, #16]
 800a9f2:	692e      	ldr	r6, [r5, #16]
 800a9f4:	6861      	ldr	r1, [r4, #4]
 800a9f6:	19bb      	adds	r3, r7, r6
 800a9f8:	9303      	str	r3, [sp, #12]
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	19ba      	adds	r2, r7, r6
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	da00      	bge.n	800aa04 <__multiply+0x28>
 800aa02:	3101      	adds	r1, #1
 800aa04:	f7ff fede 	bl	800a7c4 <_Balloc>
 800aa08:	9002      	str	r0, [sp, #8]
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d106      	bne.n	800aa1c <__multiply+0x40>
 800aa0e:	21b1      	movs	r1, #177	; 0xb1
 800aa10:	4b48      	ldr	r3, [pc, #288]	; (800ab34 <__multiply+0x158>)
 800aa12:	4849      	ldr	r0, [pc, #292]	; (800ab38 <__multiply+0x15c>)
 800aa14:	9a02      	ldr	r2, [sp, #8]
 800aa16:	0049      	lsls	r1, r1, #1
 800aa18:	f000 fb40 	bl	800b09c <__assert_func>
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	3314      	adds	r3, #20
 800aa22:	469c      	mov	ip, r3
 800aa24:	19bb      	adds	r3, r7, r6
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4463      	add	r3, ip
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	4663      	mov	r3, ip
 800aa2e:	9904      	ldr	r1, [sp, #16]
 800aa30:	428b      	cmp	r3, r1
 800aa32:	d32a      	bcc.n	800aa8a <__multiply+0xae>
 800aa34:	0023      	movs	r3, r4
 800aa36:	00bf      	lsls	r7, r7, #2
 800aa38:	3314      	adds	r3, #20
 800aa3a:	3514      	adds	r5, #20
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	00b6      	lsls	r6, r6, #2
 800aa40:	19db      	adds	r3, r3, r7
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	19ab      	adds	r3, r5, r6
 800aa46:	9309      	str	r3, [sp, #36]	; 0x24
 800aa48:	2304      	movs	r3, #4
 800aa4a:	9306      	str	r3, [sp, #24]
 800aa4c:	0023      	movs	r3, r4
 800aa4e:	9a05      	ldr	r2, [sp, #20]
 800aa50:	3315      	adds	r3, #21
 800aa52:	9501      	str	r5, [sp, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d305      	bcc.n	800aa64 <__multiply+0x88>
 800aa58:	1b13      	subs	r3, r2, r4
 800aa5a:	3b15      	subs	r3, #21
 800aa5c:	089b      	lsrs	r3, r3, #2
 800aa5e:	3301      	adds	r3, #1
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	9306      	str	r3, [sp, #24]
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d310      	bcc.n	800aa8e <__multiply+0xb2>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	dd05      	ble.n	800aa7e <__multiply+0xa2>
 800aa72:	9b04      	ldr	r3, [sp, #16]
 800aa74:	3b04      	subs	r3, #4
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d056      	beq.n	800ab2c <__multiply+0x150>
 800aa7e:	9b02      	ldr	r3, [sp, #8]
 800aa80:	9a03      	ldr	r2, [sp, #12]
 800aa82:	0018      	movs	r0, r3
 800aa84:	611a      	str	r2, [r3, #16]
 800aa86:	b00b      	add	sp, #44	; 0x2c
 800aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8a:	c304      	stmia	r3!, {r2}
 800aa8c:	e7cf      	b.n	800aa2e <__multiply+0x52>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	b280      	uxth	r0, r0
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d01e      	beq.n	800aad6 <__multiply+0xfa>
 800aa98:	4667      	mov	r7, ip
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	9e08      	ldr	r6, [sp, #32]
 800aa9e:	ce02      	ldmia	r6!, {r1}
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	b28b      	uxth	r3, r1
 800aaa6:	4343      	muls	r3, r0
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	466b      	mov	r3, sp
 800aaac:	8b9b      	ldrh	r3, [r3, #28]
 800aaae:	18d3      	adds	r3, r2, r3
 800aab0:	195b      	adds	r3, r3, r5
 800aab2:	0c0d      	lsrs	r5, r1, #16
 800aab4:	4345      	muls	r5, r0
 800aab6:	9a07      	ldr	r2, [sp, #28]
 800aab8:	0c11      	lsrs	r1, r2, #16
 800aaba:	1869      	adds	r1, r5, r1
 800aabc:	0c1a      	lsrs	r2, r3, #16
 800aabe:	188a      	adds	r2, r1, r2
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	0c15      	lsrs	r5, r2, #16
 800aac4:	0412      	lsls	r2, r2, #16
 800aac6:	431a      	orrs	r2, r3
 800aac8:	9b05      	ldr	r3, [sp, #20]
 800aaca:	c704      	stmia	r7!, {r2}
 800aacc:	42b3      	cmp	r3, r6
 800aace:	d8e6      	bhi.n	800aa9e <__multiply+0xc2>
 800aad0:	4663      	mov	r3, ip
 800aad2:	9a06      	ldr	r2, [sp, #24]
 800aad4:	509d      	str	r5, [r3, r2]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	0c00      	lsrs	r0, r0, #16
 800aadc:	d020      	beq.n	800ab20 <__multiply+0x144>
 800aade:	4663      	mov	r3, ip
 800aae0:	0025      	movs	r5, r4
 800aae2:	4661      	mov	r1, ip
 800aae4:	2700      	movs	r7, #0
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3514      	adds	r5, #20
 800aaea:	682a      	ldr	r2, [r5, #0]
 800aaec:	680e      	ldr	r6, [r1, #0]
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	4342      	muls	r2, r0
 800aaf2:	0c36      	lsrs	r6, r6, #16
 800aaf4:	1992      	adds	r2, r2, r6
 800aaf6:	19d2      	adds	r2, r2, r7
 800aaf8:	0416      	lsls	r6, r2, #16
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	431e      	orrs	r6, r3
 800aafe:	600e      	str	r6, [r1, #0]
 800ab00:	cd40      	ldmia	r5!, {r6}
 800ab02:	684b      	ldr	r3, [r1, #4]
 800ab04:	0c36      	lsrs	r6, r6, #16
 800ab06:	4346      	muls	r6, r0
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	0c12      	lsrs	r2, r2, #16
 800ab0c:	18f3      	adds	r3, r6, r3
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	9a05      	ldr	r2, [sp, #20]
 800ab12:	0c1f      	lsrs	r7, r3, #16
 800ab14:	3104      	adds	r1, #4
 800ab16:	42aa      	cmp	r2, r5
 800ab18:	d8e7      	bhi.n	800aaea <__multiply+0x10e>
 800ab1a:	4662      	mov	r2, ip
 800ab1c:	9906      	ldr	r1, [sp, #24]
 800ab1e:	5053      	str	r3, [r2, r1]
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	2304      	movs	r3, #4
 800ab28:	449c      	add	ip, r3
 800ab2a:	e79b      	b.n	800aa64 <__multiply+0x88>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	e79b      	b.n	800aa6c <__multiply+0x90>
 800ab34:	0800b90c 	.word	0x0800b90c
 800ab38:	0800b91d 	.word	0x0800b91d

0800ab3c <__pow5mult>:
 800ab3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab3e:	2303      	movs	r3, #3
 800ab40:	0015      	movs	r5, r2
 800ab42:	0007      	movs	r7, r0
 800ab44:	000e      	movs	r6, r1
 800ab46:	401a      	ands	r2, r3
 800ab48:	421d      	tst	r5, r3
 800ab4a:	d008      	beq.n	800ab5e <__pow5mult+0x22>
 800ab4c:	4925      	ldr	r1, [pc, #148]	; (800abe4 <__pow5mult+0xa8>)
 800ab4e:	3a01      	subs	r2, #1
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	5852      	ldr	r2, [r2, r1]
 800ab54:	2300      	movs	r3, #0
 800ab56:	0031      	movs	r1, r6
 800ab58:	f7ff fe9c 	bl	800a894 <__multadd>
 800ab5c:	0006      	movs	r6, r0
 800ab5e:	10ad      	asrs	r5, r5, #2
 800ab60:	d03d      	beq.n	800abde <__pow5mult+0xa2>
 800ab62:	69fc      	ldr	r4, [r7, #28]
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	d10f      	bne.n	800ab88 <__pow5mult+0x4c>
 800ab68:	2010      	movs	r0, #16
 800ab6a:	f7ff fd6d 	bl	800a648 <malloc>
 800ab6e:	1e02      	subs	r2, r0, #0
 800ab70:	61f8      	str	r0, [r7, #28]
 800ab72:	d105      	bne.n	800ab80 <__pow5mult+0x44>
 800ab74:	21b4      	movs	r1, #180	; 0xb4
 800ab76:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <__pow5mult+0xac>)
 800ab78:	481c      	ldr	r0, [pc, #112]	; (800abec <__pow5mult+0xb0>)
 800ab7a:	31ff      	adds	r1, #255	; 0xff
 800ab7c:	f000 fa8e 	bl	800b09c <__assert_func>
 800ab80:	6044      	str	r4, [r0, #4]
 800ab82:	6084      	str	r4, [r0, #8]
 800ab84:	6004      	str	r4, [r0, #0]
 800ab86:	60c4      	str	r4, [r0, #12]
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	689c      	ldr	r4, [r3, #8]
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	d108      	bne.n	800aba4 <__pow5mult+0x68>
 800ab92:	0038      	movs	r0, r7
 800ab94:	4916      	ldr	r1, [pc, #88]	; (800abf0 <__pow5mult+0xb4>)
 800ab96:	f7ff ff09 	bl	800a9ac <__i2b>
 800ab9a:	9b01      	ldr	r3, [sp, #4]
 800ab9c:	0004      	movs	r4, r0
 800ab9e:	6098      	str	r0, [r3, #8]
 800aba0:	2300      	movs	r3, #0
 800aba2:	6003      	str	r3, [r0, #0]
 800aba4:	2301      	movs	r3, #1
 800aba6:	421d      	tst	r5, r3
 800aba8:	d00a      	beq.n	800abc0 <__pow5mult+0x84>
 800abaa:	0031      	movs	r1, r6
 800abac:	0022      	movs	r2, r4
 800abae:	0038      	movs	r0, r7
 800abb0:	f7ff ff14 	bl	800a9dc <__multiply>
 800abb4:	0031      	movs	r1, r6
 800abb6:	9001      	str	r0, [sp, #4]
 800abb8:	0038      	movs	r0, r7
 800abba:	f7ff fe47 	bl	800a84c <_Bfree>
 800abbe:	9e01      	ldr	r6, [sp, #4]
 800abc0:	106d      	asrs	r5, r5, #1
 800abc2:	d00c      	beq.n	800abde <__pow5mult+0xa2>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d107      	bne.n	800abda <__pow5mult+0x9e>
 800abca:	0022      	movs	r2, r4
 800abcc:	0021      	movs	r1, r4
 800abce:	0038      	movs	r0, r7
 800abd0:	f7ff ff04 	bl	800a9dc <__multiply>
 800abd4:	2300      	movs	r3, #0
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	0004      	movs	r4, r0
 800abdc:	e7e2      	b.n	800aba4 <__pow5mult+0x68>
 800abde:	0030      	movs	r0, r6
 800abe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	0800ba68 	.word	0x0800ba68
 800abe8:	0800b89d 	.word	0x0800b89d
 800abec:	0800b91d 	.word	0x0800b91d
 800abf0:	00000271 	.word	0x00000271

0800abf4 <__lshift>:
 800abf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abf6:	000c      	movs	r4, r1
 800abf8:	0017      	movs	r7, r2
 800abfa:	6923      	ldr	r3, [r4, #16]
 800abfc:	1155      	asrs	r5, r2, #5
 800abfe:	b087      	sub	sp, #28
 800ac00:	18eb      	adds	r3, r5, r3
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	3301      	adds	r3, #1
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	6849      	ldr	r1, [r1, #4]
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	9004      	str	r0, [sp, #16]
 800ac0e:	9a01      	ldr	r2, [sp, #4]
 800ac10:	4293      	cmp	r3, r2
 800ac12:	db10      	blt.n	800ac36 <__lshift+0x42>
 800ac14:	9804      	ldr	r0, [sp, #16]
 800ac16:	f7ff fdd5 	bl	800a7c4 <_Balloc>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	0002      	movs	r2, r0
 800ac1e:	0006      	movs	r6, r0
 800ac20:	0019      	movs	r1, r3
 800ac22:	3214      	adds	r2, #20
 800ac24:	4298      	cmp	r0, r3
 800ac26:	d10c      	bne.n	800ac42 <__lshift+0x4e>
 800ac28:	31df      	adds	r1, #223	; 0xdf
 800ac2a:	0032      	movs	r2, r6
 800ac2c:	4b26      	ldr	r3, [pc, #152]	; (800acc8 <__lshift+0xd4>)
 800ac2e:	4827      	ldr	r0, [pc, #156]	; (800accc <__lshift+0xd8>)
 800ac30:	31ff      	adds	r1, #255	; 0xff
 800ac32:	f000 fa33 	bl	800b09c <__assert_func>
 800ac36:	3101      	adds	r1, #1
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	e7e8      	b.n	800ac0e <__lshift+0x1a>
 800ac3c:	0098      	lsls	r0, r3, #2
 800ac3e:	5011      	str	r1, [r2, r0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	42ab      	cmp	r3, r5
 800ac44:	dbfa      	blt.n	800ac3c <__lshift+0x48>
 800ac46:	43eb      	mvns	r3, r5
 800ac48:	17db      	asrs	r3, r3, #31
 800ac4a:	401d      	ands	r5, r3
 800ac4c:	211f      	movs	r1, #31
 800ac4e:	0023      	movs	r3, r4
 800ac50:	0038      	movs	r0, r7
 800ac52:	00ad      	lsls	r5, r5, #2
 800ac54:	1955      	adds	r5, r2, r5
 800ac56:	6922      	ldr	r2, [r4, #16]
 800ac58:	3314      	adds	r3, #20
 800ac5a:	0092      	lsls	r2, r2, #2
 800ac5c:	4008      	ands	r0, r1
 800ac5e:	4684      	mov	ip, r0
 800ac60:	189a      	adds	r2, r3, r2
 800ac62:	420f      	tst	r7, r1
 800ac64:	d02a      	beq.n	800acbc <__lshift+0xc8>
 800ac66:	3101      	adds	r1, #1
 800ac68:	1a09      	subs	r1, r1, r0
 800ac6a:	9105      	str	r1, [sp, #20]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	9503      	str	r5, [sp, #12]
 800ac70:	4667      	mov	r7, ip
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	40b8      	lsls	r0, r7
 800ac76:	4308      	orrs	r0, r1
 800ac78:	9903      	ldr	r1, [sp, #12]
 800ac7a:	c101      	stmia	r1!, {r0}
 800ac7c:	9103      	str	r1, [sp, #12]
 800ac7e:	9805      	ldr	r0, [sp, #20]
 800ac80:	cb02      	ldmia	r3!, {r1}
 800ac82:	40c1      	lsrs	r1, r0
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d8f3      	bhi.n	800ac70 <__lshift+0x7c>
 800ac88:	0020      	movs	r0, r4
 800ac8a:	3015      	adds	r0, #21
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	4282      	cmp	r2, r0
 800ac90:	d304      	bcc.n	800ac9c <__lshift+0xa8>
 800ac92:	1b13      	subs	r3, r2, r4
 800ac94:	3b15      	subs	r3, #21
 800ac96:	089b      	lsrs	r3, r3, #2
 800ac98:	3301      	adds	r3, #1
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	50e9      	str	r1, [r5, r3]
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	d002      	beq.n	800aca8 <__lshift+0xb4>
 800aca2:	9b02      	ldr	r3, [sp, #8]
 800aca4:	3302      	adds	r3, #2
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	9804      	ldr	r0, [sp, #16]
 800acac:	3b01      	subs	r3, #1
 800acae:	0021      	movs	r1, r4
 800acb0:	6133      	str	r3, [r6, #16]
 800acb2:	f7ff fdcb 	bl	800a84c <_Bfree>
 800acb6:	0030      	movs	r0, r6
 800acb8:	b007      	add	sp, #28
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbc:	cb02      	ldmia	r3!, {r1}
 800acbe:	c502      	stmia	r5!, {r1}
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d8fb      	bhi.n	800acbc <__lshift+0xc8>
 800acc4:	e7f0      	b.n	800aca8 <__lshift+0xb4>
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	0800b90c 	.word	0x0800b90c
 800accc:	0800b91d 	.word	0x0800b91d

0800acd0 <__mcmp>:
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	690b      	ldr	r3, [r1, #16]
 800acd4:	6904      	ldr	r4, [r0, #16]
 800acd6:	0002      	movs	r2, r0
 800acd8:	1ae0      	subs	r0, r4, r3
 800acda:	429c      	cmp	r4, r3
 800acdc:	d10e      	bne.n	800acfc <__mcmp+0x2c>
 800acde:	3214      	adds	r2, #20
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	3114      	adds	r1, #20
 800ace4:	0014      	movs	r4, r2
 800ace6:	18c9      	adds	r1, r1, r3
 800ace8:	18d2      	adds	r2, r2, r3
 800acea:	3a04      	subs	r2, #4
 800acec:	3904      	subs	r1, #4
 800acee:	6815      	ldr	r5, [r2, #0]
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	429d      	cmp	r5, r3
 800acf4:	d003      	beq.n	800acfe <__mcmp+0x2e>
 800acf6:	2001      	movs	r0, #1
 800acf8:	429d      	cmp	r5, r3
 800acfa:	d303      	bcc.n	800ad04 <__mcmp+0x34>
 800acfc:	bd30      	pop	{r4, r5, pc}
 800acfe:	4294      	cmp	r4, r2
 800ad00:	d3f3      	bcc.n	800acea <__mcmp+0x1a>
 800ad02:	e7fb      	b.n	800acfc <__mcmp+0x2c>
 800ad04:	4240      	negs	r0, r0
 800ad06:	e7f9      	b.n	800acfc <__mcmp+0x2c>

0800ad08 <__mdiff>:
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	000e      	movs	r6, r1
 800ad0c:	0007      	movs	r7, r0
 800ad0e:	0011      	movs	r1, r2
 800ad10:	0030      	movs	r0, r6
 800ad12:	b087      	sub	sp, #28
 800ad14:	0014      	movs	r4, r2
 800ad16:	f7ff ffdb 	bl	800acd0 <__mcmp>
 800ad1a:	1e05      	subs	r5, r0, #0
 800ad1c:	d110      	bne.n	800ad40 <__mdiff+0x38>
 800ad1e:	0001      	movs	r1, r0
 800ad20:	0038      	movs	r0, r7
 800ad22:	f7ff fd4f 	bl	800a7c4 <_Balloc>
 800ad26:	1e02      	subs	r2, r0, #0
 800ad28:	d104      	bne.n	800ad34 <__mdiff+0x2c>
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <__mdiff+0x120>)
 800ad2c:	483f      	ldr	r0, [pc, #252]	; (800ae2c <__mdiff+0x124>)
 800ad2e:	4940      	ldr	r1, [pc, #256]	; (800ae30 <__mdiff+0x128>)
 800ad30:	f000 f9b4 	bl	800b09c <__assert_func>
 800ad34:	2301      	movs	r3, #1
 800ad36:	6145      	str	r5, [r0, #20]
 800ad38:	6103      	str	r3, [r0, #16]
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	b007      	add	sp, #28
 800ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad40:	2301      	movs	r3, #1
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	2800      	cmp	r0, #0
 800ad46:	db04      	blt.n	800ad52 <__mdiff+0x4a>
 800ad48:	0023      	movs	r3, r4
 800ad4a:	0034      	movs	r4, r6
 800ad4c:	001e      	movs	r6, r3
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	0038      	movs	r0, r7
 800ad54:	6861      	ldr	r1, [r4, #4]
 800ad56:	f7ff fd35 	bl	800a7c4 <_Balloc>
 800ad5a:	1e02      	subs	r2, r0, #0
 800ad5c:	d103      	bne.n	800ad66 <__mdiff+0x5e>
 800ad5e:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <__mdiff+0x120>)
 800ad60:	4832      	ldr	r0, [pc, #200]	; (800ae2c <__mdiff+0x124>)
 800ad62:	4934      	ldr	r1, [pc, #208]	; (800ae34 <__mdiff+0x12c>)
 800ad64:	e7e4      	b.n	800ad30 <__mdiff+0x28>
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	2700      	movs	r7, #0
 800ad6a:	60c3      	str	r3, [r0, #12]
 800ad6c:	6920      	ldr	r0, [r4, #16]
 800ad6e:	3414      	adds	r4, #20
 800ad70:	0083      	lsls	r3, r0, #2
 800ad72:	18e3      	adds	r3, r4, r3
 800ad74:	0021      	movs	r1, r4
 800ad76:	9401      	str	r4, [sp, #4]
 800ad78:	0034      	movs	r4, r6
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	6933      	ldr	r3, [r6, #16]
 800ad7e:	3414      	adds	r4, #20
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	18e3      	adds	r3, r4, r3
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	0013      	movs	r3, r2
 800ad88:	3314      	adds	r3, #20
 800ad8a:	469c      	mov	ip, r3
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	9104      	str	r1, [sp, #16]
 800ad90:	9b04      	ldr	r3, [sp, #16]
 800ad92:	cc02      	ldmia	r4!, {r1}
 800ad94:	cb20      	ldmia	r3!, {r5}
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	b2ab      	uxth	r3, r5
 800ad9a:	19df      	adds	r7, r3, r7
 800ad9c:	b28b      	uxth	r3, r1
 800ad9e:	1afb      	subs	r3, r7, r3
 800ada0:	0c09      	lsrs	r1, r1, #16
 800ada2:	0c2d      	lsrs	r5, r5, #16
 800ada4:	1a6d      	subs	r5, r5, r1
 800ada6:	1419      	asrs	r1, r3, #16
 800ada8:	1869      	adds	r1, r5, r1
 800adaa:	b29b      	uxth	r3, r3
 800adac:	140f      	asrs	r7, r1, #16
 800adae:	0409      	lsls	r1, r1, #16
 800adb0:	4319      	orrs	r1, r3
 800adb2:	4663      	mov	r3, ip
 800adb4:	c302      	stmia	r3!, {r1}
 800adb6:	469c      	mov	ip, r3
 800adb8:	9b03      	ldr	r3, [sp, #12]
 800adba:	42a3      	cmp	r3, r4
 800adbc:	d8e8      	bhi.n	800ad90 <__mdiff+0x88>
 800adbe:	0031      	movs	r1, r6
 800adc0:	9c03      	ldr	r4, [sp, #12]
 800adc2:	3115      	adds	r1, #21
 800adc4:	2304      	movs	r3, #4
 800adc6:	428c      	cmp	r4, r1
 800adc8:	d304      	bcc.n	800add4 <__mdiff+0xcc>
 800adca:	1ba3      	subs	r3, r4, r6
 800adcc:	3b15      	subs	r3, #21
 800adce:	089b      	lsrs	r3, r3, #2
 800add0:	3301      	adds	r3, #1
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	9901      	ldr	r1, [sp, #4]
 800add6:	18cd      	adds	r5, r1, r3
 800add8:	9905      	ldr	r1, [sp, #20]
 800adda:	002e      	movs	r6, r5
 800addc:	18cb      	adds	r3, r1, r3
 800adde:	469c      	mov	ip, r3
 800ade0:	9902      	ldr	r1, [sp, #8]
 800ade2:	428e      	cmp	r6, r1
 800ade4:	d310      	bcc.n	800ae08 <__mdiff+0x100>
 800ade6:	9e02      	ldr	r6, [sp, #8]
 800ade8:	1ee9      	subs	r1, r5, #3
 800adea:	2400      	movs	r4, #0
 800adec:	428e      	cmp	r6, r1
 800adee:	d304      	bcc.n	800adfa <__mdiff+0xf2>
 800adf0:	0031      	movs	r1, r6
 800adf2:	3103      	adds	r1, #3
 800adf4:	1b49      	subs	r1, r1, r5
 800adf6:	0889      	lsrs	r1, r1, #2
 800adf8:	008c      	lsls	r4, r1, #2
 800adfa:	191b      	adds	r3, r3, r4
 800adfc:	3b04      	subs	r3, #4
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d00f      	beq.n	800ae24 <__mdiff+0x11c>
 800ae04:	6110      	str	r0, [r2, #16]
 800ae06:	e798      	b.n	800ad3a <__mdiff+0x32>
 800ae08:	ce02      	ldmia	r6!, {r1}
 800ae0a:	b28c      	uxth	r4, r1
 800ae0c:	19e4      	adds	r4, r4, r7
 800ae0e:	0c0f      	lsrs	r7, r1, #16
 800ae10:	1421      	asrs	r1, r4, #16
 800ae12:	1879      	adds	r1, r7, r1
 800ae14:	b2a4      	uxth	r4, r4
 800ae16:	140f      	asrs	r7, r1, #16
 800ae18:	0409      	lsls	r1, r1, #16
 800ae1a:	4321      	orrs	r1, r4
 800ae1c:	4664      	mov	r4, ip
 800ae1e:	c402      	stmia	r4!, {r1}
 800ae20:	46a4      	mov	ip, r4
 800ae22:	e7dd      	b.n	800ade0 <__mdiff+0xd8>
 800ae24:	3801      	subs	r0, #1
 800ae26:	e7e9      	b.n	800adfc <__mdiff+0xf4>
 800ae28:	0800b90c 	.word	0x0800b90c
 800ae2c:	0800b91d 	.word	0x0800b91d
 800ae30:	00000237 	.word	0x00000237
 800ae34:	00000245 	.word	0x00000245

0800ae38 <__d2b>:
 800ae38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	0014      	movs	r4, r2
 800ae3e:	001d      	movs	r5, r3
 800ae40:	9f08      	ldr	r7, [sp, #32]
 800ae42:	f7ff fcbf 	bl	800a7c4 <_Balloc>
 800ae46:	1e06      	subs	r6, r0, #0
 800ae48:	d105      	bne.n	800ae56 <__d2b+0x1e>
 800ae4a:	0032      	movs	r2, r6
 800ae4c:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <__d2b+0xa8>)
 800ae4e:	4825      	ldr	r0, [pc, #148]	; (800aee4 <__d2b+0xac>)
 800ae50:	4925      	ldr	r1, [pc, #148]	; (800aee8 <__d2b+0xb0>)
 800ae52:	f000 f923 	bl	800b09c <__assert_func>
 800ae56:	032b      	lsls	r3, r5, #12
 800ae58:	006d      	lsls	r5, r5, #1
 800ae5a:	0b1b      	lsrs	r3, r3, #12
 800ae5c:	0d6d      	lsrs	r5, r5, #21
 800ae5e:	d125      	bne.n	800aeac <__d2b+0x74>
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	d028      	beq.n	800aeb8 <__d2b+0x80>
 800ae66:	4668      	mov	r0, sp
 800ae68:	9400      	str	r4, [sp, #0]
 800ae6a:	f7ff fd71 	bl	800a950 <__lo0bits>
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	9900      	ldr	r1, [sp, #0]
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d01e      	beq.n	800aeb4 <__d2b+0x7c>
 800ae76:	2220      	movs	r2, #32
 800ae78:	001c      	movs	r4, r3
 800ae7a:	1a12      	subs	r2, r2, r0
 800ae7c:	4094      	lsls	r4, r2
 800ae7e:	0022      	movs	r2, r4
 800ae80:	40c3      	lsrs	r3, r0
 800ae82:	430a      	orrs	r2, r1
 800ae84:	6172      	str	r2, [r6, #20]
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	9c01      	ldr	r4, [sp, #4]
 800ae8a:	61b4      	str	r4, [r6, #24]
 800ae8c:	1e63      	subs	r3, r4, #1
 800ae8e:	419c      	sbcs	r4, r3
 800ae90:	3401      	adds	r4, #1
 800ae92:	6134      	str	r4, [r6, #16]
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	d017      	beq.n	800aec8 <__d2b+0x90>
 800ae98:	2435      	movs	r4, #53	; 0x35
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <__d2b+0xb4>)
 800ae9c:	18ed      	adds	r5, r5, r3
 800ae9e:	182d      	adds	r5, r5, r0
 800aea0:	603d      	str	r5, [r7, #0]
 800aea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea4:	1a24      	subs	r4, r4, r0
 800aea6:	601c      	str	r4, [r3, #0]
 800aea8:	0030      	movs	r0, r6
 800aeaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeac:	2280      	movs	r2, #128	; 0x80
 800aeae:	0352      	lsls	r2, r2, #13
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	e7d5      	b.n	800ae60 <__d2b+0x28>
 800aeb4:	6171      	str	r1, [r6, #20]
 800aeb6:	e7e7      	b.n	800ae88 <__d2b+0x50>
 800aeb8:	a801      	add	r0, sp, #4
 800aeba:	f7ff fd49 	bl	800a950 <__lo0bits>
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	2401      	movs	r4, #1
 800aec2:	6173      	str	r3, [r6, #20]
 800aec4:	3020      	adds	r0, #32
 800aec6:	e7e4      	b.n	800ae92 <__d2b+0x5a>
 800aec8:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <__d2b+0xb8>)
 800aeca:	18c0      	adds	r0, r0, r3
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <__d2b+0xbc>)
 800aece:	6038      	str	r0, [r7, #0]
 800aed0:	18e3      	adds	r3, r4, r3
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	18f3      	adds	r3, r6, r3
 800aed6:	6958      	ldr	r0, [r3, #20]
 800aed8:	f7ff fd20 	bl	800a91c <__hi0bits>
 800aedc:	0164      	lsls	r4, r4, #5
 800aede:	e7e0      	b.n	800aea2 <__d2b+0x6a>
 800aee0:	0800b90c 	.word	0x0800b90c
 800aee4:	0800b91d 	.word	0x0800b91d
 800aee8:	0000030f 	.word	0x0000030f
 800aeec:	fffffbcd 	.word	0xfffffbcd
 800aef0:	fffffbce 	.word	0xfffffbce
 800aef4:	3fffffff 	.word	0x3fffffff

0800aef8 <__sflush_r>:
 800aef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aefa:	898b      	ldrh	r3, [r1, #12]
 800aefc:	0005      	movs	r5, r0
 800aefe:	000c      	movs	r4, r1
 800af00:	071a      	lsls	r2, r3, #28
 800af02:	d45c      	bmi.n	800afbe <__sflush_r+0xc6>
 800af04:	684a      	ldr	r2, [r1, #4]
 800af06:	2a00      	cmp	r2, #0
 800af08:	dc04      	bgt.n	800af14 <__sflush_r+0x1c>
 800af0a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	dc01      	bgt.n	800af14 <__sflush_r+0x1c>
 800af10:	2000      	movs	r0, #0
 800af12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af16:	2f00      	cmp	r7, #0
 800af18:	d0fa      	beq.n	800af10 <__sflush_r+0x18>
 800af1a:	2200      	movs	r2, #0
 800af1c:	2080      	movs	r0, #128	; 0x80
 800af1e:	682e      	ldr	r6, [r5, #0]
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	001a      	movs	r2, r3
 800af24:	0140      	lsls	r0, r0, #5
 800af26:	6a21      	ldr	r1, [r4, #32]
 800af28:	4002      	ands	r2, r0
 800af2a:	4203      	tst	r3, r0
 800af2c:	d034      	beq.n	800af98 <__sflush_r+0xa0>
 800af2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	075b      	lsls	r3, r3, #29
 800af34:	d506      	bpl.n	800af44 <__sflush_r+0x4c>
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	1ac0      	subs	r0, r0, r3
 800af3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <__sflush_r+0x4c>
 800af40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af42:	1ac0      	subs	r0, r0, r3
 800af44:	0002      	movs	r2, r0
 800af46:	2300      	movs	r3, #0
 800af48:	0028      	movs	r0, r5
 800af4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	47b8      	blx	r7
 800af50:	89a2      	ldrh	r2, [r4, #12]
 800af52:	1c43      	adds	r3, r0, #1
 800af54:	d106      	bne.n	800af64 <__sflush_r+0x6c>
 800af56:	6829      	ldr	r1, [r5, #0]
 800af58:	291d      	cmp	r1, #29
 800af5a:	d82c      	bhi.n	800afb6 <__sflush_r+0xbe>
 800af5c:	4b2a      	ldr	r3, [pc, #168]	; (800b008 <__sflush_r+0x110>)
 800af5e:	410b      	asrs	r3, r1
 800af60:	07db      	lsls	r3, r3, #31
 800af62:	d428      	bmi.n	800afb6 <__sflush_r+0xbe>
 800af64:	2300      	movs	r3, #0
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	04d2      	lsls	r2, r2, #19
 800af6e:	d505      	bpl.n	800af7c <__sflush_r+0x84>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <__sflush_r+0x82>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d100      	bne.n	800af7c <__sflush_r+0x84>
 800af7a:	6560      	str	r0, [r4, #84]	; 0x54
 800af7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af7e:	602e      	str	r6, [r5, #0]
 800af80:	2900      	cmp	r1, #0
 800af82:	d0c5      	beq.n	800af10 <__sflush_r+0x18>
 800af84:	0023      	movs	r3, r4
 800af86:	3344      	adds	r3, #68	; 0x44
 800af88:	4299      	cmp	r1, r3
 800af8a:	d002      	beq.n	800af92 <__sflush_r+0x9a>
 800af8c:	0028      	movs	r0, r5
 800af8e:	f7ff fb11 	bl	800a5b4 <_free_r>
 800af92:	2000      	movs	r0, #0
 800af94:	6360      	str	r0, [r4, #52]	; 0x34
 800af96:	e7bc      	b.n	800af12 <__sflush_r+0x1a>
 800af98:	2301      	movs	r3, #1
 800af9a:	0028      	movs	r0, r5
 800af9c:	47b8      	blx	r7
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d1c6      	bne.n	800af30 <__sflush_r+0x38>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0c3      	beq.n	800af30 <__sflush_r+0x38>
 800afa8:	2b1d      	cmp	r3, #29
 800afaa:	d001      	beq.n	800afb0 <__sflush_r+0xb8>
 800afac:	2b16      	cmp	r3, #22
 800afae:	d101      	bne.n	800afb4 <__sflush_r+0xbc>
 800afb0:	602e      	str	r6, [r5, #0]
 800afb2:	e7ad      	b.n	800af10 <__sflush_r+0x18>
 800afb4:	89a2      	ldrh	r2, [r4, #12]
 800afb6:	2340      	movs	r3, #64	; 0x40
 800afb8:	4313      	orrs	r3, r2
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	e7a9      	b.n	800af12 <__sflush_r+0x1a>
 800afbe:	690e      	ldr	r6, [r1, #16]
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	d0a5      	beq.n	800af10 <__sflush_r+0x18>
 800afc4:	680f      	ldr	r7, [r1, #0]
 800afc6:	600e      	str	r6, [r1, #0]
 800afc8:	1bba      	subs	r2, r7, r6
 800afca:	9201      	str	r2, [sp, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	079b      	lsls	r3, r3, #30
 800afd0:	d100      	bne.n	800afd4 <__sflush_r+0xdc>
 800afd2:	694a      	ldr	r2, [r1, #20]
 800afd4:	60a2      	str	r2, [r4, #8]
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dd99      	ble.n	800af10 <__sflush_r+0x18>
 800afdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afde:	0032      	movs	r2, r6
 800afe0:	001f      	movs	r7, r3
 800afe2:	0028      	movs	r0, r5
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	6a21      	ldr	r1, [r4, #32]
 800afe8:	47b8      	blx	r7
 800afea:	2800      	cmp	r0, #0
 800afec:	dc06      	bgt.n	800affc <__sflush_r+0x104>
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	2001      	movs	r0, #1
 800aff2:	89a2      	ldrh	r2, [r4, #12]
 800aff4:	4240      	negs	r0, r0
 800aff6:	4313      	orrs	r3, r2
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	e78a      	b.n	800af12 <__sflush_r+0x1a>
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	1836      	adds	r6, r6, r0
 800b000:	1a1b      	subs	r3, r3, r0
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	e7e7      	b.n	800afd6 <__sflush_r+0xde>
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	dfbffffe 	.word	0xdfbffffe

0800b00c <_fflush_r>:
 800b00c:	690b      	ldr	r3, [r1, #16]
 800b00e:	b570      	push	{r4, r5, r6, lr}
 800b010:	0005      	movs	r5, r0
 800b012:	000c      	movs	r4, r1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <_fflush_r+0x12>
 800b018:	2500      	movs	r5, #0
 800b01a:	0028      	movs	r0, r5
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	2800      	cmp	r0, #0
 800b020:	d004      	beq.n	800b02c <_fflush_r+0x20>
 800b022:	6a03      	ldr	r3, [r0, #32]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <_fflush_r+0x20>
 800b028:	f7fe fb14 	bl	8009654 <__sinit>
 800b02c:	220c      	movs	r2, #12
 800b02e:	5ea3      	ldrsh	r3, [r4, r2]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0f1      	beq.n	800b018 <_fflush_r+0xc>
 800b034:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b036:	07d2      	lsls	r2, r2, #31
 800b038:	d404      	bmi.n	800b044 <_fflush_r+0x38>
 800b03a:	059b      	lsls	r3, r3, #22
 800b03c:	d402      	bmi.n	800b044 <_fflush_r+0x38>
 800b03e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b040:	f7fe fc0d 	bl	800985e <__retarget_lock_acquire_recursive>
 800b044:	0028      	movs	r0, r5
 800b046:	0021      	movs	r1, r4
 800b048:	f7ff ff56 	bl	800aef8 <__sflush_r>
 800b04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b04e:	0005      	movs	r5, r0
 800b050:	07db      	lsls	r3, r3, #31
 800b052:	d4e2      	bmi.n	800b01a <_fflush_r+0xe>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	059b      	lsls	r3, r3, #22
 800b058:	d4df      	bmi.n	800b01a <_fflush_r+0xe>
 800b05a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b05c:	f7fe fc00 	bl	8009860 <__retarget_lock_release_recursive>
 800b060:	e7db      	b.n	800b01a <_fflush_r+0xe>
	...

0800b064 <_sbrk_r>:
 800b064:	2300      	movs	r3, #0
 800b066:	b570      	push	{r4, r5, r6, lr}
 800b068:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_sbrk_r+0x20>)
 800b06a:	0004      	movs	r4, r0
 800b06c:	0008      	movs	r0, r1
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	f7f9 f92a 	bl	80042c8 <_sbrk>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d103      	bne.n	800b080 <_sbrk_r+0x1c>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d000      	beq.n	800b080 <_sbrk_r+0x1c>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	bd70      	pop	{r4, r5, r6, pc}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	200005d0 	.word	0x200005d0

0800b088 <memcpy>:
 800b088:	2300      	movs	r3, #0
 800b08a:	b510      	push	{r4, lr}
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d100      	bne.n	800b092 <memcpy+0xa>
 800b090:	bd10      	pop	{r4, pc}
 800b092:	5ccc      	ldrb	r4, [r1, r3]
 800b094:	54c4      	strb	r4, [r0, r3]
 800b096:	3301      	adds	r3, #1
 800b098:	e7f8      	b.n	800b08c <memcpy+0x4>
	...

0800b09c <__assert_func>:
 800b09c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b09e:	0014      	movs	r4, r2
 800b0a0:	001a      	movs	r2, r3
 800b0a2:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <__assert_func+0x2c>)
 800b0a4:	0005      	movs	r5, r0
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	000e      	movs	r6, r1
 800b0aa:	68d8      	ldr	r0, [r3, #12]
 800b0ac:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <__assert_func+0x30>)
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d101      	bne.n	800b0b6 <__assert_func+0x1a>
 800b0b2:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <__assert_func+0x34>)
 800b0b4:	001c      	movs	r4, r3
 800b0b6:	4907      	ldr	r1, [pc, #28]	; (800b0d4 <__assert_func+0x38>)
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	9402      	str	r4, [sp, #8]
 800b0bc:	002b      	movs	r3, r5
 800b0be:	9600      	str	r6, [sp, #0]
 800b0c0:	f000 f856 	bl	800b170 <fiprintf>
 800b0c4:	f000 f864 	bl	800b190 <abort>
 800b0c8:	20000064 	.word	0x20000064
 800b0cc:	0800ba7e 	.word	0x0800ba7e
 800b0d0:	0800bab9 	.word	0x0800bab9
 800b0d4:	0800ba8b 	.word	0x0800ba8b

0800b0d8 <_calloc_r>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	0c0b      	lsrs	r3, r1, #16
 800b0dc:	0c15      	lsrs	r5, r2, #16
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d11e      	bne.n	800b120 <_calloc_r+0x48>
 800b0e2:	2d00      	cmp	r5, #0
 800b0e4:	d10c      	bne.n	800b100 <_calloc_r+0x28>
 800b0e6:	b289      	uxth	r1, r1
 800b0e8:	b294      	uxth	r4, r2
 800b0ea:	434c      	muls	r4, r1
 800b0ec:	0021      	movs	r1, r4
 800b0ee:	f7ff fad7 	bl	800a6a0 <_malloc_r>
 800b0f2:	1e05      	subs	r5, r0, #0
 800b0f4:	d01b      	beq.n	800b12e <_calloc_r+0x56>
 800b0f6:	0022      	movs	r2, r4
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	f7fe fb2b 	bl	8009754 <memset>
 800b0fe:	e016      	b.n	800b12e <_calloc_r+0x56>
 800b100:	1c2b      	adds	r3, r5, #0
 800b102:	1c0c      	adds	r4, r1, #0
 800b104:	b289      	uxth	r1, r1
 800b106:	b292      	uxth	r2, r2
 800b108:	434a      	muls	r2, r1
 800b10a:	b2a1      	uxth	r1, r4
 800b10c:	b29c      	uxth	r4, r3
 800b10e:	434c      	muls	r4, r1
 800b110:	0c13      	lsrs	r3, r2, #16
 800b112:	18e4      	adds	r4, r4, r3
 800b114:	0c23      	lsrs	r3, r4, #16
 800b116:	d107      	bne.n	800b128 <_calloc_r+0x50>
 800b118:	0424      	lsls	r4, r4, #16
 800b11a:	b292      	uxth	r2, r2
 800b11c:	4314      	orrs	r4, r2
 800b11e:	e7e5      	b.n	800b0ec <_calloc_r+0x14>
 800b120:	2d00      	cmp	r5, #0
 800b122:	d101      	bne.n	800b128 <_calloc_r+0x50>
 800b124:	1c14      	adds	r4, r2, #0
 800b126:	e7ed      	b.n	800b104 <_calloc_r+0x2c>
 800b128:	230c      	movs	r3, #12
 800b12a:	2500      	movs	r5, #0
 800b12c:	6003      	str	r3, [r0, #0]
 800b12e:	0028      	movs	r0, r5
 800b130:	bd70      	pop	{r4, r5, r6, pc}

0800b132 <__ascii_mbtowc>:
 800b132:	b082      	sub	sp, #8
 800b134:	2900      	cmp	r1, #0
 800b136:	d100      	bne.n	800b13a <__ascii_mbtowc+0x8>
 800b138:	a901      	add	r1, sp, #4
 800b13a:	1e10      	subs	r0, r2, #0
 800b13c:	d006      	beq.n	800b14c <__ascii_mbtowc+0x1a>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <__ascii_mbtowc+0x1e>
 800b142:	7813      	ldrb	r3, [r2, #0]
 800b144:	600b      	str	r3, [r1, #0]
 800b146:	7810      	ldrb	r0, [r2, #0]
 800b148:	1e43      	subs	r3, r0, #1
 800b14a:	4198      	sbcs	r0, r3
 800b14c:	b002      	add	sp, #8
 800b14e:	4770      	bx	lr
 800b150:	2002      	movs	r0, #2
 800b152:	4240      	negs	r0, r0
 800b154:	e7fa      	b.n	800b14c <__ascii_mbtowc+0x1a>

0800b156 <__ascii_wctomb>:
 800b156:	0003      	movs	r3, r0
 800b158:	1e08      	subs	r0, r1, #0
 800b15a:	d005      	beq.n	800b168 <__ascii_wctomb+0x12>
 800b15c:	2aff      	cmp	r2, #255	; 0xff
 800b15e:	d904      	bls.n	800b16a <__ascii_wctomb+0x14>
 800b160:	228a      	movs	r2, #138	; 0x8a
 800b162:	2001      	movs	r0, #1
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	4240      	negs	r0, r0
 800b168:	4770      	bx	lr
 800b16a:	2001      	movs	r0, #1
 800b16c:	700a      	strb	r2, [r1, #0]
 800b16e:	e7fb      	b.n	800b168 <__ascii_wctomb+0x12>

0800b170 <fiprintf>:
 800b170:	b40e      	push	{r1, r2, r3}
 800b172:	b517      	push	{r0, r1, r2, r4, lr}
 800b174:	4c05      	ldr	r4, [pc, #20]	; (800b18c <fiprintf+0x1c>)
 800b176:	ab05      	add	r3, sp, #20
 800b178:	cb04      	ldmia	r3!, {r2}
 800b17a:	0001      	movs	r1, r0
 800b17c:	6820      	ldr	r0, [r4, #0]
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	f000 f834 	bl	800b1ec <_vfiprintf_r>
 800b184:	bc1e      	pop	{r1, r2, r3, r4}
 800b186:	bc08      	pop	{r3}
 800b188:	b003      	add	sp, #12
 800b18a:	4718      	bx	r3
 800b18c:	20000064 	.word	0x20000064

0800b190 <abort>:
 800b190:	2006      	movs	r0, #6
 800b192:	b510      	push	{r4, lr}
 800b194:	f000 fa16 	bl	800b5c4 <raise>
 800b198:	2001      	movs	r0, #1
 800b19a:	f7f9 f823 	bl	80041e4 <_exit>

0800b19e <__sfputc_r>:
 800b19e:	6893      	ldr	r3, [r2, #8]
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	6093      	str	r3, [r2, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	da04      	bge.n	800b1b4 <__sfputc_r+0x16>
 800b1aa:	6994      	ldr	r4, [r2, #24]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	db07      	blt.n	800b1c0 <__sfputc_r+0x22>
 800b1b0:	290a      	cmp	r1, #10
 800b1b2:	d005      	beq.n	800b1c0 <__sfputc_r+0x22>
 800b1b4:	6813      	ldr	r3, [r2, #0]
 800b1b6:	1c58      	adds	r0, r3, #1
 800b1b8:	6010      	str	r0, [r2, #0]
 800b1ba:	7019      	strb	r1, [r3, #0]
 800b1bc:	0008      	movs	r0, r1
 800b1be:	bd10      	pop	{r4, pc}
 800b1c0:	f000 f930 	bl	800b424 <__swbuf_r>
 800b1c4:	0001      	movs	r1, r0
 800b1c6:	e7f9      	b.n	800b1bc <__sfputc_r+0x1e>

0800b1c8 <__sfputs_r>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	0006      	movs	r6, r0
 800b1cc:	000f      	movs	r7, r1
 800b1ce:	0014      	movs	r4, r2
 800b1d0:	18d5      	adds	r5, r2, r3
 800b1d2:	42ac      	cmp	r4, r5
 800b1d4:	d101      	bne.n	800b1da <__sfputs_r+0x12>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e007      	b.n	800b1ea <__sfputs_r+0x22>
 800b1da:	7821      	ldrb	r1, [r4, #0]
 800b1dc:	003a      	movs	r2, r7
 800b1de:	0030      	movs	r0, r6
 800b1e0:	f7ff ffdd 	bl	800b19e <__sfputc_r>
 800b1e4:	3401      	adds	r4, #1
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d1f3      	bne.n	800b1d2 <__sfputs_r+0xa>
 800b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1ec <_vfiprintf_r>:
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b0a1      	sub	sp, #132	; 0x84
 800b1f0:	000f      	movs	r7, r1
 800b1f2:	0015      	movs	r5, r2
 800b1f4:	001e      	movs	r6, r3
 800b1f6:	9003      	str	r0, [sp, #12]
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d004      	beq.n	800b206 <_vfiprintf_r+0x1a>
 800b1fc:	6a03      	ldr	r3, [r0, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <_vfiprintf_r+0x1a>
 800b202:	f7fe fa27 	bl	8009654 <__sinit>
 800b206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b208:	07db      	lsls	r3, r3, #31
 800b20a:	d405      	bmi.n	800b218 <_vfiprintf_r+0x2c>
 800b20c:	89bb      	ldrh	r3, [r7, #12]
 800b20e:	059b      	lsls	r3, r3, #22
 800b210:	d402      	bmi.n	800b218 <_vfiprintf_r+0x2c>
 800b212:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b214:	f7fe fb23 	bl	800985e <__retarget_lock_acquire_recursive>
 800b218:	89bb      	ldrh	r3, [r7, #12]
 800b21a:	071b      	lsls	r3, r3, #28
 800b21c:	d502      	bpl.n	800b224 <_vfiprintf_r+0x38>
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d113      	bne.n	800b24c <_vfiprintf_r+0x60>
 800b224:	0039      	movs	r1, r7
 800b226:	9803      	ldr	r0, [sp, #12]
 800b228:	f000 f93e 	bl	800b4a8 <__swsetup_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d00d      	beq.n	800b24c <_vfiprintf_r+0x60>
 800b230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b232:	07db      	lsls	r3, r3, #31
 800b234:	d503      	bpl.n	800b23e <_vfiprintf_r+0x52>
 800b236:	2001      	movs	r0, #1
 800b238:	4240      	negs	r0, r0
 800b23a:	b021      	add	sp, #132	; 0x84
 800b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23e:	89bb      	ldrh	r3, [r7, #12]
 800b240:	059b      	lsls	r3, r3, #22
 800b242:	d4f8      	bmi.n	800b236 <_vfiprintf_r+0x4a>
 800b244:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b246:	f7fe fb0b 	bl	8009860 <__retarget_lock_release_recursive>
 800b24a:	e7f4      	b.n	800b236 <_vfiprintf_r+0x4a>
 800b24c:	2300      	movs	r3, #0
 800b24e:	ac08      	add	r4, sp, #32
 800b250:	6163      	str	r3, [r4, #20]
 800b252:	3320      	adds	r3, #32
 800b254:	7663      	strb	r3, [r4, #25]
 800b256:	3310      	adds	r3, #16
 800b258:	76a3      	strb	r3, [r4, #26]
 800b25a:	9607      	str	r6, [sp, #28]
 800b25c:	002e      	movs	r6, r5
 800b25e:	7833      	ldrb	r3, [r6, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <_vfiprintf_r+0x7c>
 800b264:	2b25      	cmp	r3, #37	; 0x25
 800b266:	d148      	bne.n	800b2fa <_vfiprintf_r+0x10e>
 800b268:	1b73      	subs	r3, r6, r5
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	42ae      	cmp	r6, r5
 800b26e:	d00b      	beq.n	800b288 <_vfiprintf_r+0x9c>
 800b270:	002a      	movs	r2, r5
 800b272:	0039      	movs	r1, r7
 800b274:	9803      	ldr	r0, [sp, #12]
 800b276:	f7ff ffa7 	bl	800b1c8 <__sfputs_r>
 800b27a:	3001      	adds	r0, #1
 800b27c:	d100      	bne.n	800b280 <_vfiprintf_r+0x94>
 800b27e:	e0af      	b.n	800b3e0 <_vfiprintf_r+0x1f4>
 800b280:	6963      	ldr	r3, [r4, #20]
 800b282:	9a05      	ldr	r2, [sp, #20]
 800b284:	189b      	adds	r3, r3, r2
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	7833      	ldrb	r3, [r6, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d100      	bne.n	800b290 <_vfiprintf_r+0xa4>
 800b28e:	e0a7      	b.n	800b3e0 <_vfiprintf_r+0x1f4>
 800b290:	2201      	movs	r2, #1
 800b292:	2300      	movs	r3, #0
 800b294:	4252      	negs	r2, r2
 800b296:	6062      	str	r2, [r4, #4]
 800b298:	a904      	add	r1, sp, #16
 800b29a:	3254      	adds	r2, #84	; 0x54
 800b29c:	1852      	adds	r2, r2, r1
 800b29e:	1c75      	adds	r5, r6, #1
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	60e3      	str	r3, [r4, #12]
 800b2a4:	60a3      	str	r3, [r4, #8]
 800b2a6:	7013      	strb	r3, [r2, #0]
 800b2a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2aa:	4b59      	ldr	r3, [pc, #356]	; (800b410 <_vfiprintf_r+0x224>)
 800b2ac:	2205      	movs	r2, #5
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	7829      	ldrb	r1, [r5, #0]
 800b2b2:	9305      	str	r3, [sp, #20]
 800b2b4:	f7fe fad5 	bl	8009862 <memchr>
 800b2b8:	1c6e      	adds	r6, r5, #1
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d11f      	bne.n	800b2fe <_vfiprintf_r+0x112>
 800b2be:	6822      	ldr	r2, [r4, #0]
 800b2c0:	06d3      	lsls	r3, r2, #27
 800b2c2:	d504      	bpl.n	800b2ce <_vfiprintf_r+0xe2>
 800b2c4:	2353      	movs	r3, #83	; 0x53
 800b2c6:	a904      	add	r1, sp, #16
 800b2c8:	185b      	adds	r3, r3, r1
 800b2ca:	2120      	movs	r1, #32
 800b2cc:	7019      	strb	r1, [r3, #0]
 800b2ce:	0713      	lsls	r3, r2, #28
 800b2d0:	d504      	bpl.n	800b2dc <_vfiprintf_r+0xf0>
 800b2d2:	2353      	movs	r3, #83	; 0x53
 800b2d4:	a904      	add	r1, sp, #16
 800b2d6:	185b      	adds	r3, r3, r1
 800b2d8:	212b      	movs	r1, #43	; 0x2b
 800b2da:	7019      	strb	r1, [r3, #0]
 800b2dc:	782b      	ldrb	r3, [r5, #0]
 800b2de:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e0:	d016      	beq.n	800b310 <_vfiprintf_r+0x124>
 800b2e2:	002e      	movs	r6, r5
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	200a      	movs	r0, #10
 800b2e8:	68e3      	ldr	r3, [r4, #12]
 800b2ea:	7832      	ldrb	r2, [r6, #0]
 800b2ec:	1c75      	adds	r5, r6, #1
 800b2ee:	3a30      	subs	r2, #48	; 0x30
 800b2f0:	2a09      	cmp	r2, #9
 800b2f2:	d94e      	bls.n	800b392 <_vfiprintf_r+0x1a6>
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d111      	bne.n	800b31c <_vfiprintf_r+0x130>
 800b2f8:	e017      	b.n	800b32a <_vfiprintf_r+0x13e>
 800b2fa:	3601      	adds	r6, #1
 800b2fc:	e7af      	b.n	800b25e <_vfiprintf_r+0x72>
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	6822      	ldr	r2, [r4, #0]
 800b302:	1ac0      	subs	r0, r0, r3
 800b304:	2301      	movs	r3, #1
 800b306:	4083      	lsls	r3, r0
 800b308:	4313      	orrs	r3, r2
 800b30a:	0035      	movs	r5, r6
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	e7cc      	b.n	800b2aa <_vfiprintf_r+0xbe>
 800b310:	9b07      	ldr	r3, [sp, #28]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9107      	str	r1, [sp, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db01      	blt.n	800b320 <_vfiprintf_r+0x134>
 800b31c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b31e:	e004      	b.n	800b32a <_vfiprintf_r+0x13e>
 800b320:	425b      	negs	r3, r3
 800b322:	60e3      	str	r3, [r4, #12]
 800b324:	2302      	movs	r3, #2
 800b326:	4313      	orrs	r3, r2
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	7833      	ldrb	r3, [r6, #0]
 800b32c:	2b2e      	cmp	r3, #46	; 0x2e
 800b32e:	d10a      	bne.n	800b346 <_vfiprintf_r+0x15a>
 800b330:	7873      	ldrb	r3, [r6, #1]
 800b332:	2b2a      	cmp	r3, #42	; 0x2a
 800b334:	d135      	bne.n	800b3a2 <_vfiprintf_r+0x1b6>
 800b336:	9b07      	ldr	r3, [sp, #28]
 800b338:	3602      	adds	r6, #2
 800b33a:	1d1a      	adds	r2, r3, #4
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9207      	str	r2, [sp, #28]
 800b340:	2b00      	cmp	r3, #0
 800b342:	db2b      	blt.n	800b39c <_vfiprintf_r+0x1b0>
 800b344:	9309      	str	r3, [sp, #36]	; 0x24
 800b346:	4d33      	ldr	r5, [pc, #204]	; (800b414 <_vfiprintf_r+0x228>)
 800b348:	2203      	movs	r2, #3
 800b34a:	0028      	movs	r0, r5
 800b34c:	7831      	ldrb	r1, [r6, #0]
 800b34e:	f7fe fa88 	bl	8009862 <memchr>
 800b352:	2800      	cmp	r0, #0
 800b354:	d006      	beq.n	800b364 <_vfiprintf_r+0x178>
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	1b40      	subs	r0, r0, r5
 800b35a:	4083      	lsls	r3, r0
 800b35c:	6822      	ldr	r2, [r4, #0]
 800b35e:	3601      	adds	r6, #1
 800b360:	4313      	orrs	r3, r2
 800b362:	6023      	str	r3, [r4, #0]
 800b364:	7831      	ldrb	r1, [r6, #0]
 800b366:	2206      	movs	r2, #6
 800b368:	482b      	ldr	r0, [pc, #172]	; (800b418 <_vfiprintf_r+0x22c>)
 800b36a:	1c75      	adds	r5, r6, #1
 800b36c:	7621      	strb	r1, [r4, #24]
 800b36e:	f7fe fa78 	bl	8009862 <memchr>
 800b372:	2800      	cmp	r0, #0
 800b374:	d043      	beq.n	800b3fe <_vfiprintf_r+0x212>
 800b376:	4b29      	ldr	r3, [pc, #164]	; (800b41c <_vfiprintf_r+0x230>)
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d125      	bne.n	800b3c8 <_vfiprintf_r+0x1dc>
 800b37c:	2207      	movs	r2, #7
 800b37e:	9b07      	ldr	r3, [sp, #28]
 800b380:	3307      	adds	r3, #7
 800b382:	4393      	bics	r3, r2
 800b384:	3308      	adds	r3, #8
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	6963      	ldr	r3, [r4, #20]
 800b38a:	9a04      	ldr	r2, [sp, #16]
 800b38c:	189b      	adds	r3, r3, r2
 800b38e:	6163      	str	r3, [r4, #20]
 800b390:	e764      	b.n	800b25c <_vfiprintf_r+0x70>
 800b392:	4343      	muls	r3, r0
 800b394:	002e      	movs	r6, r5
 800b396:	2101      	movs	r1, #1
 800b398:	189b      	adds	r3, r3, r2
 800b39a:	e7a6      	b.n	800b2ea <_vfiprintf_r+0xfe>
 800b39c:	2301      	movs	r3, #1
 800b39e:	425b      	negs	r3, r3
 800b3a0:	e7d0      	b.n	800b344 <_vfiprintf_r+0x158>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	200a      	movs	r0, #10
 800b3a6:	001a      	movs	r2, r3
 800b3a8:	3601      	adds	r6, #1
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	7831      	ldrb	r1, [r6, #0]
 800b3ae:	1c75      	adds	r5, r6, #1
 800b3b0:	3930      	subs	r1, #48	; 0x30
 800b3b2:	2909      	cmp	r1, #9
 800b3b4:	d903      	bls.n	800b3be <_vfiprintf_r+0x1d2>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0c5      	beq.n	800b346 <_vfiprintf_r+0x15a>
 800b3ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b3bc:	e7c3      	b.n	800b346 <_vfiprintf_r+0x15a>
 800b3be:	4342      	muls	r2, r0
 800b3c0:	002e      	movs	r6, r5
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	1852      	adds	r2, r2, r1
 800b3c6:	e7f1      	b.n	800b3ac <_vfiprintf_r+0x1c0>
 800b3c8:	aa07      	add	r2, sp, #28
 800b3ca:	9200      	str	r2, [sp, #0]
 800b3cc:	0021      	movs	r1, r4
 800b3ce:	003a      	movs	r2, r7
 800b3d0:	4b13      	ldr	r3, [pc, #76]	; (800b420 <_vfiprintf_r+0x234>)
 800b3d2:	9803      	ldr	r0, [sp, #12]
 800b3d4:	f7fd fcd8 	bl	8008d88 <_printf_float>
 800b3d8:	9004      	str	r0, [sp, #16]
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	d1d3      	bne.n	800b388 <_vfiprintf_r+0x19c>
 800b3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3e2:	07db      	lsls	r3, r3, #31
 800b3e4:	d405      	bmi.n	800b3f2 <_vfiprintf_r+0x206>
 800b3e6:	89bb      	ldrh	r3, [r7, #12]
 800b3e8:	059b      	lsls	r3, r3, #22
 800b3ea:	d402      	bmi.n	800b3f2 <_vfiprintf_r+0x206>
 800b3ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3ee:	f7fe fa37 	bl	8009860 <__retarget_lock_release_recursive>
 800b3f2:	89bb      	ldrh	r3, [r7, #12]
 800b3f4:	065b      	lsls	r3, r3, #25
 800b3f6:	d500      	bpl.n	800b3fa <_vfiprintf_r+0x20e>
 800b3f8:	e71d      	b.n	800b236 <_vfiprintf_r+0x4a>
 800b3fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3fc:	e71d      	b.n	800b23a <_vfiprintf_r+0x4e>
 800b3fe:	aa07      	add	r2, sp, #28
 800b400:	9200      	str	r2, [sp, #0]
 800b402:	0021      	movs	r1, r4
 800b404:	003a      	movs	r2, r7
 800b406:	4b06      	ldr	r3, [pc, #24]	; (800b420 <_vfiprintf_r+0x234>)
 800b408:	9803      	ldr	r0, [sp, #12]
 800b40a:	f7fd ff83 	bl	8009314 <_printf_i>
 800b40e:	e7e3      	b.n	800b3d8 <_vfiprintf_r+0x1ec>
 800b410:	0800bbbb 	.word	0x0800bbbb
 800b414:	0800bbc1 	.word	0x0800bbc1
 800b418:	0800bbc5 	.word	0x0800bbc5
 800b41c:	08008d89 	.word	0x08008d89
 800b420:	0800b1c9 	.word	0x0800b1c9

0800b424 <__swbuf_r>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	0006      	movs	r6, r0
 800b428:	000d      	movs	r5, r1
 800b42a:	0014      	movs	r4, r2
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d004      	beq.n	800b43a <__swbuf_r+0x16>
 800b430:	6a03      	ldr	r3, [r0, #32]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <__swbuf_r+0x16>
 800b436:	f7fe f90d 	bl	8009654 <__sinit>
 800b43a:	69a3      	ldr	r3, [r4, #24]
 800b43c:	60a3      	str	r3, [r4, #8]
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	071b      	lsls	r3, r3, #28
 800b442:	d528      	bpl.n	800b496 <__swbuf_r+0x72>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d025      	beq.n	800b496 <__swbuf_r+0x72>
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	6820      	ldr	r0, [r4, #0]
 800b44e:	b2ef      	uxtb	r7, r5
 800b450:	1ac0      	subs	r0, r0, r3
 800b452:	6963      	ldr	r3, [r4, #20]
 800b454:	b2ed      	uxtb	r5, r5
 800b456:	4283      	cmp	r3, r0
 800b458:	dc05      	bgt.n	800b466 <__swbuf_r+0x42>
 800b45a:	0021      	movs	r1, r4
 800b45c:	0030      	movs	r0, r6
 800b45e:	f7ff fdd5 	bl	800b00c <_fflush_r>
 800b462:	2800      	cmp	r0, #0
 800b464:	d11d      	bne.n	800b4a2 <__swbuf_r+0x7e>
 800b466:	68a3      	ldr	r3, [r4, #8]
 800b468:	3001      	adds	r0, #1
 800b46a:	3b01      	subs	r3, #1
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	6022      	str	r2, [r4, #0]
 800b474:	701f      	strb	r7, [r3, #0]
 800b476:	6963      	ldr	r3, [r4, #20]
 800b478:	4283      	cmp	r3, r0
 800b47a:	d004      	beq.n	800b486 <__swbuf_r+0x62>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	07db      	lsls	r3, r3, #31
 800b480:	d507      	bpl.n	800b492 <__swbuf_r+0x6e>
 800b482:	2d0a      	cmp	r5, #10
 800b484:	d105      	bne.n	800b492 <__swbuf_r+0x6e>
 800b486:	0021      	movs	r1, r4
 800b488:	0030      	movs	r0, r6
 800b48a:	f7ff fdbf 	bl	800b00c <_fflush_r>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d107      	bne.n	800b4a2 <__swbuf_r+0x7e>
 800b492:	0028      	movs	r0, r5
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b496:	0021      	movs	r1, r4
 800b498:	0030      	movs	r0, r6
 800b49a:	f000 f805 	bl	800b4a8 <__swsetup_r>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0d3      	beq.n	800b44a <__swbuf_r+0x26>
 800b4a2:	2501      	movs	r5, #1
 800b4a4:	426d      	negs	r5, r5
 800b4a6:	e7f4      	b.n	800b492 <__swbuf_r+0x6e>

0800b4a8 <__swsetup_r>:
 800b4a8:	4b30      	ldr	r3, [pc, #192]	; (800b56c <__swsetup_r+0xc4>)
 800b4aa:	b570      	push	{r4, r5, r6, lr}
 800b4ac:	0005      	movs	r5, r0
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	000c      	movs	r4, r1
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d004      	beq.n	800b4c0 <__swsetup_r+0x18>
 800b4b6:	6a03      	ldr	r3, [r0, #32]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <__swsetup_r+0x18>
 800b4bc:	f7fe f8ca 	bl	8009654 <__sinit>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	5ee2      	ldrsh	r2, [r4, r3]
 800b4c4:	b293      	uxth	r3, r2
 800b4c6:	0711      	lsls	r1, r2, #28
 800b4c8:	d423      	bmi.n	800b512 <__swsetup_r+0x6a>
 800b4ca:	06d9      	lsls	r1, r3, #27
 800b4cc:	d407      	bmi.n	800b4de <__swsetup_r+0x36>
 800b4ce:	2309      	movs	r3, #9
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	3337      	adds	r3, #55	; 0x37
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	4240      	negs	r0, r0
 800b4dc:	bd70      	pop	{r4, r5, r6, pc}
 800b4de:	075b      	lsls	r3, r3, #29
 800b4e0:	d513      	bpl.n	800b50a <__swsetup_r+0x62>
 800b4e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	d008      	beq.n	800b4fa <__swsetup_r+0x52>
 800b4e8:	0023      	movs	r3, r4
 800b4ea:	3344      	adds	r3, #68	; 0x44
 800b4ec:	4299      	cmp	r1, r3
 800b4ee:	d002      	beq.n	800b4f6 <__swsetup_r+0x4e>
 800b4f0:	0028      	movs	r0, r5
 800b4f2:	f7ff f85f 	bl	800a5b4 <_free_r>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4fa:	2224      	movs	r2, #36	; 0x24
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	4393      	bics	r3, r2
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	2300      	movs	r3, #0
 800b504:	6063      	str	r3, [r4, #4]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	2308      	movs	r3, #8
 800b50c:	89a2      	ldrh	r2, [r4, #12]
 800b50e:	4313      	orrs	r3, r2
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	6923      	ldr	r3, [r4, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10b      	bne.n	800b530 <__swsetup_r+0x88>
 800b518:	21a0      	movs	r1, #160	; 0xa0
 800b51a:	2280      	movs	r2, #128	; 0x80
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	0089      	lsls	r1, r1, #2
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	400b      	ands	r3, r1
 800b524:	4293      	cmp	r3, r2
 800b526:	d003      	beq.n	800b530 <__swsetup_r+0x88>
 800b528:	0021      	movs	r1, r4
 800b52a:	0028      	movs	r0, r5
 800b52c:	f000 f892 	bl	800b654 <__smakebuf_r>
 800b530:	220c      	movs	r2, #12
 800b532:	5ea3      	ldrsh	r3, [r4, r2]
 800b534:	2001      	movs	r0, #1
 800b536:	001a      	movs	r2, r3
 800b538:	b299      	uxth	r1, r3
 800b53a:	4002      	ands	r2, r0
 800b53c:	4203      	tst	r3, r0
 800b53e:	d00f      	beq.n	800b560 <__swsetup_r+0xb8>
 800b540:	2200      	movs	r2, #0
 800b542:	60a2      	str	r2, [r4, #8]
 800b544:	6962      	ldr	r2, [r4, #20]
 800b546:	4252      	negs	r2, r2
 800b548:	61a2      	str	r2, [r4, #24]
 800b54a:	2000      	movs	r0, #0
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	4282      	cmp	r2, r0
 800b550:	d1c4      	bne.n	800b4dc <__swsetup_r+0x34>
 800b552:	0609      	lsls	r1, r1, #24
 800b554:	d5c2      	bpl.n	800b4dc <__swsetup_r+0x34>
 800b556:	2240      	movs	r2, #64	; 0x40
 800b558:	4313      	orrs	r3, r2
 800b55a:	81a3      	strh	r3, [r4, #12]
 800b55c:	3801      	subs	r0, #1
 800b55e:	e7bd      	b.n	800b4dc <__swsetup_r+0x34>
 800b560:	0788      	lsls	r0, r1, #30
 800b562:	d400      	bmi.n	800b566 <__swsetup_r+0xbe>
 800b564:	6962      	ldr	r2, [r4, #20]
 800b566:	60a2      	str	r2, [r4, #8]
 800b568:	e7ef      	b.n	800b54a <__swsetup_r+0xa2>
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	20000064 	.word	0x20000064

0800b570 <_raise_r>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	0004      	movs	r4, r0
 800b574:	000d      	movs	r5, r1
 800b576:	291f      	cmp	r1, #31
 800b578:	d904      	bls.n	800b584 <_raise_r+0x14>
 800b57a:	2316      	movs	r3, #22
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	2001      	movs	r0, #1
 800b580:	4240      	negs	r0, r0
 800b582:	bd70      	pop	{r4, r5, r6, pc}
 800b584:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d004      	beq.n	800b594 <_raise_r+0x24>
 800b58a:	008a      	lsls	r2, r1, #2
 800b58c:	189b      	adds	r3, r3, r2
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	2a00      	cmp	r2, #0
 800b592:	d108      	bne.n	800b5a6 <_raise_r+0x36>
 800b594:	0020      	movs	r0, r4
 800b596:	f000 f831 	bl	800b5fc <_getpid_r>
 800b59a:	002a      	movs	r2, r5
 800b59c:	0001      	movs	r1, r0
 800b59e:	0020      	movs	r0, r4
 800b5a0:	f000 f81a 	bl	800b5d8 <_kill_r>
 800b5a4:	e7ed      	b.n	800b582 <_raise_r+0x12>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	2a01      	cmp	r2, #1
 800b5aa:	d0ea      	beq.n	800b582 <_raise_r+0x12>
 800b5ac:	1c51      	adds	r1, r2, #1
 800b5ae:	d103      	bne.n	800b5b8 <_raise_r+0x48>
 800b5b0:	2316      	movs	r3, #22
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	e7e4      	b.n	800b582 <_raise_r+0x12>
 800b5b8:	2400      	movs	r4, #0
 800b5ba:	0028      	movs	r0, r5
 800b5bc:	601c      	str	r4, [r3, #0]
 800b5be:	4790      	blx	r2
 800b5c0:	0020      	movs	r0, r4
 800b5c2:	e7de      	b.n	800b582 <_raise_r+0x12>

0800b5c4 <raise>:
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	4b03      	ldr	r3, [pc, #12]	; (800b5d4 <raise+0x10>)
 800b5c8:	0001      	movs	r1, r0
 800b5ca:	6818      	ldr	r0, [r3, #0]
 800b5cc:	f7ff ffd0 	bl	800b570 <_raise_r>
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	46c0      	nop			; (mov r8, r8)
 800b5d4:	20000064 	.word	0x20000064

0800b5d8 <_kill_r>:
 800b5d8:	2300      	movs	r3, #0
 800b5da:	b570      	push	{r4, r5, r6, lr}
 800b5dc:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_kill_r+0x20>)
 800b5de:	0004      	movs	r4, r0
 800b5e0:	0008      	movs	r0, r1
 800b5e2:	0011      	movs	r1, r2
 800b5e4:	602b      	str	r3, [r5, #0]
 800b5e6:	f7f8 fded 	bl	80041c4 <_kill>
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	d103      	bne.n	800b5f6 <_kill_r+0x1e>
 800b5ee:	682b      	ldr	r3, [r5, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d000      	beq.n	800b5f6 <_kill_r+0x1e>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	200005d0 	.word	0x200005d0

0800b5fc <_getpid_r>:
 800b5fc:	b510      	push	{r4, lr}
 800b5fe:	f7f8 fddb 	bl	80041b8 <_getpid>
 800b602:	bd10      	pop	{r4, pc}

0800b604 <__swhatbuf_r>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	000e      	movs	r6, r1
 800b608:	001d      	movs	r5, r3
 800b60a:	230e      	movs	r3, #14
 800b60c:	5ec9      	ldrsh	r1, [r1, r3]
 800b60e:	0014      	movs	r4, r2
 800b610:	b096      	sub	sp, #88	; 0x58
 800b612:	2900      	cmp	r1, #0
 800b614:	da0c      	bge.n	800b630 <__swhatbuf_r+0x2c>
 800b616:	89b2      	ldrh	r2, [r6, #12]
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	0011      	movs	r1, r2
 800b61c:	4019      	ands	r1, r3
 800b61e:	421a      	tst	r2, r3
 800b620:	d013      	beq.n	800b64a <__swhatbuf_r+0x46>
 800b622:	2100      	movs	r1, #0
 800b624:	3b40      	subs	r3, #64	; 0x40
 800b626:	2000      	movs	r0, #0
 800b628:	6029      	str	r1, [r5, #0]
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	b016      	add	sp, #88	; 0x58
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	466a      	mov	r2, sp
 800b632:	f000 f84d 	bl	800b6d0 <_fstat_r>
 800b636:	2800      	cmp	r0, #0
 800b638:	dbed      	blt.n	800b616 <__swhatbuf_r+0x12>
 800b63a:	23f0      	movs	r3, #240	; 0xf0
 800b63c:	9901      	ldr	r1, [sp, #4]
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	4019      	ands	r1, r3
 800b642:	4b03      	ldr	r3, [pc, #12]	; (800b650 <__swhatbuf_r+0x4c>)
 800b644:	18c9      	adds	r1, r1, r3
 800b646:	424b      	negs	r3, r1
 800b648:	4159      	adcs	r1, r3
 800b64a:	2380      	movs	r3, #128	; 0x80
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	e7ea      	b.n	800b626 <__swhatbuf_r+0x22>
 800b650:	ffffe000 	.word	0xffffe000

0800b654 <__smakebuf_r>:
 800b654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b656:	2602      	movs	r6, #2
 800b658:	898b      	ldrh	r3, [r1, #12]
 800b65a:	0005      	movs	r5, r0
 800b65c:	000c      	movs	r4, r1
 800b65e:	4233      	tst	r3, r6
 800b660:	d006      	beq.n	800b670 <__smakebuf_r+0x1c>
 800b662:	0023      	movs	r3, r4
 800b664:	3347      	adds	r3, #71	; 0x47
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	2301      	movs	r3, #1
 800b66c:	6163      	str	r3, [r4, #20]
 800b66e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b670:	466a      	mov	r2, sp
 800b672:	ab01      	add	r3, sp, #4
 800b674:	f7ff ffc6 	bl	800b604 <__swhatbuf_r>
 800b678:	9900      	ldr	r1, [sp, #0]
 800b67a:	0007      	movs	r7, r0
 800b67c:	0028      	movs	r0, r5
 800b67e:	f7ff f80f 	bl	800a6a0 <_malloc_r>
 800b682:	2800      	cmp	r0, #0
 800b684:	d108      	bne.n	800b698 <__smakebuf_r+0x44>
 800b686:	220c      	movs	r2, #12
 800b688:	5ea3      	ldrsh	r3, [r4, r2]
 800b68a:	059a      	lsls	r2, r3, #22
 800b68c:	d4ef      	bmi.n	800b66e <__smakebuf_r+0x1a>
 800b68e:	2203      	movs	r2, #3
 800b690:	4393      	bics	r3, r2
 800b692:	431e      	orrs	r6, r3
 800b694:	81a6      	strh	r6, [r4, #12]
 800b696:	e7e4      	b.n	800b662 <__smakebuf_r+0xe>
 800b698:	2380      	movs	r3, #128	; 0x80
 800b69a:	89a2      	ldrh	r2, [r4, #12]
 800b69c:	6020      	str	r0, [r4, #0]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	9b00      	ldr	r3, [sp, #0]
 800b6a4:	6120      	str	r0, [r4, #16]
 800b6a6:	6163      	str	r3, [r4, #20]
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00c      	beq.n	800b6c8 <__smakebuf_r+0x74>
 800b6ae:	0028      	movs	r0, r5
 800b6b0:	230e      	movs	r3, #14
 800b6b2:	5ee1      	ldrsh	r1, [r4, r3]
 800b6b4:	f000 f81e 	bl	800b6f4 <_isatty_r>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d005      	beq.n	800b6c8 <__smakebuf_r+0x74>
 800b6bc:	2303      	movs	r3, #3
 800b6be:	89a2      	ldrh	r2, [r4, #12]
 800b6c0:	439a      	bics	r2, r3
 800b6c2:	3b02      	subs	r3, #2
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	433b      	orrs	r3, r7
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	e7ce      	b.n	800b66e <__smakebuf_r+0x1a>

0800b6d0 <_fstat_r>:
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	4d06      	ldr	r5, [pc, #24]	; (800b6f0 <_fstat_r+0x20>)
 800b6d6:	0004      	movs	r4, r0
 800b6d8:	0008      	movs	r0, r1
 800b6da:	0011      	movs	r1, r2
 800b6dc:	602b      	str	r3, [r5, #0]
 800b6de:	f7f8 fdd0 	bl	8004282 <_fstat>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d103      	bne.n	800b6ee <_fstat_r+0x1e>
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d000      	beq.n	800b6ee <_fstat_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	200005d0 	.word	0x200005d0

0800b6f4 <_isatty_r>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b570      	push	{r4, r5, r6, lr}
 800b6f8:	4d06      	ldr	r5, [pc, #24]	; (800b714 <_isatty_r+0x20>)
 800b6fa:	0004      	movs	r4, r0
 800b6fc:	0008      	movs	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f8 fdcd 	bl	800429e <_isatty>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d103      	bne.n	800b710 <_isatty_r+0x1c>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d000      	beq.n	800b710 <_isatty_r+0x1c>
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	200005d0 	.word	0x200005d0

0800b718 <_init>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

0800b724 <_fini>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr
