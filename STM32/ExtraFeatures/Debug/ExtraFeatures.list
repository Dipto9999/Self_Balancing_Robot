
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800cc88  0800cc88  0000dc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d13c  0800d13c  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d13c  0800d13c  0000e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d144  0800d144  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d144  0800d144  0000e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d148  0800d148  0000e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d14c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001d4  0800d320  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800d320  0000f634  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157b1  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003101  00000000  00000000  000249ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00027ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e72  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150c4  00000000  00000000  00029baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001836e  00000000  00000000  0003ec6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078cb7  00000000  00000000  00056fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfc93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054fc  00000000  00000000  000cfcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d51d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cc6c 	.word	0x0800cc6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800cc6c 	.word	0x0800cc6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb2d 	bl	8001a9c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa71 	bl	8001934 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb1f 	bl	8001a9c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb15 	bl	8001a9c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa9b 	bl	80019bc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa91 	bl	80019bc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fad3 	bl	8000a5c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa5b 	bl	800097c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fac5 	bl	8000a5c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fabb 	bl	8000a5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa69 	bl	80009cc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa5f 	bl	80009cc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 fa8c 	bl	8002af4 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 fa87 	bl	8002af4 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fdiv>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	4646      	mov	r6, r8
 8000754:	464f      	mov	r7, r9
 8000756:	46d6      	mov	lr, sl
 8000758:	0245      	lsls	r5, r0, #9
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0fc3      	lsrs	r3, r0, #31
 800075e:	0047      	lsls	r7, r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	1c0e      	adds	r6, r1, #0
 8000764:	0a6d      	lsrs	r5, r5, #9
 8000766:	0e3f      	lsrs	r7, r7, #24
 8000768:	d05b      	beq.n	8000822 <__aeabi_fdiv+0xd2>
 800076a:	2fff      	cmp	r7, #255	@ 0xff
 800076c:	d021      	beq.n	80007b2 <__aeabi_fdiv+0x62>
 800076e:	2380      	movs	r3, #128	@ 0x80
 8000770:	00ed      	lsls	r5, r5, #3
 8000772:	04db      	lsls	r3, r3, #19
 8000774:	431d      	orrs	r5, r3
 8000776:	2300      	movs	r3, #0
 8000778:	4699      	mov	r9, r3
 800077a:	469a      	mov	sl, r3
 800077c:	3f7f      	subs	r7, #127	@ 0x7f
 800077e:	0274      	lsls	r4, r6, #9
 8000780:	0073      	lsls	r3, r6, #1
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0e1b      	lsrs	r3, r3, #24
 8000786:	0ff6      	lsrs	r6, r6, #31
 8000788:	2b00      	cmp	r3, #0
 800078a:	d020      	beq.n	80007ce <__aeabi_fdiv+0x7e>
 800078c:	2bff      	cmp	r3, #255	@ 0xff
 800078e:	d043      	beq.n	8000818 <__aeabi_fdiv+0xc8>
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	2000      	movs	r0, #0
 8000794:	00e4      	lsls	r4, r4, #3
 8000796:	04d2      	lsls	r2, r2, #19
 8000798:	4314      	orrs	r4, r2
 800079a:	3b7f      	subs	r3, #127	@ 0x7f
 800079c:	4642      	mov	r2, r8
 800079e:	1aff      	subs	r7, r7, r3
 80007a0:	464b      	mov	r3, r9
 80007a2:	4072      	eors	r2, r6
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d900      	bls.n	80007aa <__aeabi_fdiv+0x5a>
 80007a8:	e09d      	b.n	80008e6 <__aeabi_fdiv+0x196>
 80007aa:	4971      	ldr	r1, [pc, #452]	@ (8000970 <__aeabi_fdiv+0x220>)
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	58cb      	ldr	r3, [r1, r3]
 80007b0:	469f      	mov	pc, r3
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d15a      	bne.n	800086c <__aeabi_fdiv+0x11c>
 80007b6:	2308      	movs	r3, #8
 80007b8:	4699      	mov	r9, r3
 80007ba:	3b06      	subs	r3, #6
 80007bc:	0274      	lsls	r4, r6, #9
 80007be:	469a      	mov	sl, r3
 80007c0:	0073      	lsls	r3, r6, #1
 80007c2:	27ff      	movs	r7, #255	@ 0xff
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e1b      	lsrs	r3, r3, #24
 80007c8:	0ff6      	lsrs	r6, r6, #31
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1de      	bne.n	800078c <__aeabi_fdiv+0x3c>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d13b      	bne.n	800084a <__aeabi_fdiv+0xfa>
 80007d2:	2301      	movs	r3, #1
 80007d4:	4642      	mov	r2, r8
 80007d6:	4649      	mov	r1, r9
 80007d8:	4072      	eors	r2, r6
 80007da:	4319      	orrs	r1, r3
 80007dc:	290e      	cmp	r1, #14
 80007de:	d818      	bhi.n	8000812 <__aeabi_fdiv+0xc2>
 80007e0:	4864      	ldr	r0, [pc, #400]	@ (8000974 <__aeabi_fdiv+0x224>)
 80007e2:	0089      	lsls	r1, r1, #2
 80007e4:	5841      	ldr	r1, [r0, r1]
 80007e6:	468f      	mov	pc, r1
 80007e8:	4653      	mov	r3, sl
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fdiv+0xa0>
 80007ee:	e0b8      	b.n	8000962 <__aeabi_fdiv+0x212>
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d06e      	beq.n	80008d2 <__aeabi_fdiv+0x182>
 80007f4:	4642      	mov	r2, r8
 80007f6:	002c      	movs	r4, r5
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d140      	bne.n	800087e <__aeabi_fdiv+0x12e>
 80007fc:	2000      	movs	r0, #0
 80007fe:	2400      	movs	r4, #0
 8000800:	05c0      	lsls	r0, r0, #23
 8000802:	4320      	orrs	r0, r4
 8000804:	07d2      	lsls	r2, r2, #31
 8000806:	4310      	orrs	r0, r2
 8000808:	bce0      	pop	{r5, r6, r7}
 800080a:	46ba      	mov	sl, r7
 800080c:	46b1      	mov	r9, r6
 800080e:	46a8      	mov	r8, r5
 8000810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000812:	20ff      	movs	r0, #255	@ 0xff
 8000814:	2400      	movs	r4, #0
 8000816:	e7f3      	b.n	8000800 <__aeabi_fdiv+0xb0>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d120      	bne.n	800085e <__aeabi_fdiv+0x10e>
 800081c:	2302      	movs	r3, #2
 800081e:	3fff      	subs	r7, #255	@ 0xff
 8000820:	e7d8      	b.n	80007d4 <__aeabi_fdiv+0x84>
 8000822:	2d00      	cmp	r5, #0
 8000824:	d105      	bne.n	8000832 <__aeabi_fdiv+0xe2>
 8000826:	2304      	movs	r3, #4
 8000828:	4699      	mov	r9, r3
 800082a:	3b03      	subs	r3, #3
 800082c:	2700      	movs	r7, #0
 800082e:	469a      	mov	sl, r3
 8000830:	e7a5      	b.n	800077e <__aeabi_fdiv+0x2e>
 8000832:	0028      	movs	r0, r5
 8000834:	f002 f940 	bl	8002ab8 <__clzsi2>
 8000838:	2776      	movs	r7, #118	@ 0x76
 800083a:	1f43      	subs	r3, r0, #5
 800083c:	409d      	lsls	r5, r3
 800083e:	2300      	movs	r3, #0
 8000840:	427f      	negs	r7, r7
 8000842:	4699      	mov	r9, r3
 8000844:	469a      	mov	sl, r3
 8000846:	1a3f      	subs	r7, r7, r0
 8000848:	e799      	b.n	800077e <__aeabi_fdiv+0x2e>
 800084a:	0020      	movs	r0, r4
 800084c:	f002 f934 	bl	8002ab8 <__clzsi2>
 8000850:	1f43      	subs	r3, r0, #5
 8000852:	409c      	lsls	r4, r3
 8000854:	2376      	movs	r3, #118	@ 0x76
 8000856:	425b      	negs	r3, r3
 8000858:	1a1b      	subs	r3, r3, r0
 800085a:	2000      	movs	r0, #0
 800085c:	e79e      	b.n	800079c <__aeabi_fdiv+0x4c>
 800085e:	2303      	movs	r3, #3
 8000860:	464a      	mov	r2, r9
 8000862:	431a      	orrs	r2, r3
 8000864:	4691      	mov	r9, r2
 8000866:	2003      	movs	r0, #3
 8000868:	33fc      	adds	r3, #252	@ 0xfc
 800086a:	e797      	b.n	800079c <__aeabi_fdiv+0x4c>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	@ 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e782      	b.n	800077e <__aeabi_fdiv+0x2e>
 8000878:	2803      	cmp	r0, #3
 800087a:	d02c      	beq.n	80008d6 <__aeabi_fdiv+0x186>
 800087c:	0032      	movs	r2, r6
 800087e:	0038      	movs	r0, r7
 8000880:	307f      	adds	r0, #127	@ 0x7f
 8000882:	2800      	cmp	r0, #0
 8000884:	dd47      	ble.n	8000916 <__aeabi_fdiv+0x1c6>
 8000886:	0763      	lsls	r3, r4, #29
 8000888:	d004      	beq.n	8000894 <__aeabi_fdiv+0x144>
 800088a:	230f      	movs	r3, #15
 800088c:	4023      	ands	r3, r4
 800088e:	2b04      	cmp	r3, #4
 8000890:	d000      	beq.n	8000894 <__aeabi_fdiv+0x144>
 8000892:	3404      	adds	r4, #4
 8000894:	0123      	lsls	r3, r4, #4
 8000896:	d503      	bpl.n	80008a0 <__aeabi_fdiv+0x150>
 8000898:	0038      	movs	r0, r7
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <__aeabi_fdiv+0x228>)
 800089c:	3080      	adds	r0, #128	@ 0x80
 800089e:	401c      	ands	r4, r3
 80008a0:	28fe      	cmp	r0, #254	@ 0xfe
 80008a2:	dcb6      	bgt.n	8000812 <__aeabi_fdiv+0xc2>
 80008a4:	01a4      	lsls	r4, r4, #6
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	b2c0      	uxtb	r0, r0
 80008aa:	e7a9      	b.n	8000800 <__aeabi_fdiv+0xb0>
 80008ac:	2480      	movs	r4, #128	@ 0x80
 80008ae:	2200      	movs	r2, #0
 80008b0:	20ff      	movs	r0, #255	@ 0xff
 80008b2:	03e4      	lsls	r4, r4, #15
 80008b4:	e7a4      	b.n	8000800 <__aeabi_fdiv+0xb0>
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	03db      	lsls	r3, r3, #15
 80008ba:	421d      	tst	r5, r3
 80008bc:	d001      	beq.n	80008c2 <__aeabi_fdiv+0x172>
 80008be:	421c      	tst	r4, r3
 80008c0:	d00b      	beq.n	80008da <__aeabi_fdiv+0x18a>
 80008c2:	2480      	movs	r4, #128	@ 0x80
 80008c4:	03e4      	lsls	r4, r4, #15
 80008c6:	432c      	orrs	r4, r5
 80008c8:	0264      	lsls	r4, r4, #9
 80008ca:	4642      	mov	r2, r8
 80008cc:	20ff      	movs	r0, #255	@ 0xff
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	e796      	b.n	8000800 <__aeabi_fdiv+0xb0>
 80008d2:	4646      	mov	r6, r8
 80008d4:	002c      	movs	r4, r5
 80008d6:	2380      	movs	r3, #128	@ 0x80
 80008d8:	03db      	lsls	r3, r3, #15
 80008da:	431c      	orrs	r4, r3
 80008dc:	0264      	lsls	r4, r4, #9
 80008de:	0032      	movs	r2, r6
 80008e0:	20ff      	movs	r0, #255	@ 0xff
 80008e2:	0a64      	lsrs	r4, r4, #9
 80008e4:	e78c      	b.n	8000800 <__aeabi_fdiv+0xb0>
 80008e6:	016d      	lsls	r5, r5, #5
 80008e8:	0160      	lsls	r0, r4, #5
 80008ea:	4285      	cmp	r5, r0
 80008ec:	d22d      	bcs.n	800094a <__aeabi_fdiv+0x1fa>
 80008ee:	231b      	movs	r3, #27
 80008f0:	2400      	movs	r4, #0
 80008f2:	3f01      	subs	r7, #1
 80008f4:	2601      	movs	r6, #1
 80008f6:	0029      	movs	r1, r5
 80008f8:	0064      	lsls	r4, r4, #1
 80008fa:	006d      	lsls	r5, r5, #1
 80008fc:	2900      	cmp	r1, #0
 80008fe:	db01      	blt.n	8000904 <__aeabi_fdiv+0x1b4>
 8000900:	4285      	cmp	r5, r0
 8000902:	d301      	bcc.n	8000908 <__aeabi_fdiv+0x1b8>
 8000904:	1a2d      	subs	r5, r5, r0
 8000906:	4334      	orrs	r4, r6
 8000908:	3b01      	subs	r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f3      	bne.n	80008f6 <__aeabi_fdiv+0x1a6>
 800090e:	1e6b      	subs	r3, r5, #1
 8000910:	419d      	sbcs	r5, r3
 8000912:	432c      	orrs	r4, r5
 8000914:	e7b3      	b.n	800087e <__aeabi_fdiv+0x12e>
 8000916:	2301      	movs	r3, #1
 8000918:	1a1b      	subs	r3, r3, r0
 800091a:	2b1b      	cmp	r3, #27
 800091c:	dd00      	ble.n	8000920 <__aeabi_fdiv+0x1d0>
 800091e:	e76d      	b.n	80007fc <__aeabi_fdiv+0xac>
 8000920:	0021      	movs	r1, r4
 8000922:	379e      	adds	r7, #158	@ 0x9e
 8000924:	40d9      	lsrs	r1, r3
 8000926:	40bc      	lsls	r4, r7
 8000928:	000b      	movs	r3, r1
 800092a:	1e61      	subs	r1, r4, #1
 800092c:	418c      	sbcs	r4, r1
 800092e:	4323      	orrs	r3, r4
 8000930:	0759      	lsls	r1, r3, #29
 8000932:	d004      	beq.n	800093e <__aeabi_fdiv+0x1ee>
 8000934:	210f      	movs	r1, #15
 8000936:	4019      	ands	r1, r3
 8000938:	2904      	cmp	r1, #4
 800093a:	d000      	beq.n	800093e <__aeabi_fdiv+0x1ee>
 800093c:	3304      	adds	r3, #4
 800093e:	0159      	lsls	r1, r3, #5
 8000940:	d413      	bmi.n	800096a <__aeabi_fdiv+0x21a>
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	2000      	movs	r0, #0
 8000946:	0a5c      	lsrs	r4, r3, #9
 8000948:	e75a      	b.n	8000800 <__aeabi_fdiv+0xb0>
 800094a:	231a      	movs	r3, #26
 800094c:	2401      	movs	r4, #1
 800094e:	1a2d      	subs	r5, r5, r0
 8000950:	e7d0      	b.n	80008f4 <__aeabi_fdiv+0x1a4>
 8000952:	1e98      	subs	r0, r3, #2
 8000954:	4243      	negs	r3, r0
 8000956:	4158      	adcs	r0, r3
 8000958:	4240      	negs	r0, r0
 800095a:	0032      	movs	r2, r6
 800095c:	2400      	movs	r4, #0
 800095e:	b2c0      	uxtb	r0, r0
 8000960:	e74e      	b.n	8000800 <__aeabi_fdiv+0xb0>
 8000962:	4642      	mov	r2, r8
 8000964:	20ff      	movs	r0, #255	@ 0xff
 8000966:	2400      	movs	r4, #0
 8000968:	e74a      	b.n	8000800 <__aeabi_fdiv+0xb0>
 800096a:	2001      	movs	r0, #1
 800096c:	2400      	movs	r4, #0
 800096e:	e747      	b.n	8000800 <__aeabi_fdiv+0xb0>
 8000970:	0800cca0 	.word	0x0800cca0
 8000974:	0800cce0 	.word	0x0800cce0
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__eqsf2>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	0042      	lsls	r2, r0, #1
 8000980:	024e      	lsls	r6, r1, #9
 8000982:	004c      	lsls	r4, r1, #1
 8000984:	0245      	lsls	r5, r0, #9
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	0e12      	lsrs	r2, r2, #24
 800098a:	0fc3      	lsrs	r3, r0, #31
 800098c:	0a76      	lsrs	r6, r6, #9
 800098e:	0e24      	lsrs	r4, r4, #24
 8000990:	0fc9      	lsrs	r1, r1, #31
 8000992:	2aff      	cmp	r2, #255	@ 0xff
 8000994:	d010      	beq.n	80009b8 <__eqsf2+0x3c>
 8000996:	2cff      	cmp	r4, #255	@ 0xff
 8000998:	d00c      	beq.n	80009b4 <__eqsf2+0x38>
 800099a:	2001      	movs	r0, #1
 800099c:	42a2      	cmp	r2, r4
 800099e:	d10a      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a0:	42b5      	cmp	r5, r6
 80009a2:	d108      	bne.n	80009b6 <__eqsf2+0x3a>
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d00f      	beq.n	80009c8 <__eqsf2+0x4c>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d104      	bne.n	80009b6 <__eqsf2+0x3a>
 80009ac:	0028      	movs	r0, r5
 80009ae:	1e43      	subs	r3, r0, #1
 80009b0:	4198      	sbcs	r0, r3
 80009b2:	e000      	b.n	80009b6 <__eqsf2+0x3a>
 80009b4:	2001      	movs	r0, #1
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	2001      	movs	r0, #1
 80009ba:	2cff      	cmp	r4, #255	@ 0xff
 80009bc:	d1fb      	bne.n	80009b6 <__eqsf2+0x3a>
 80009be:	4335      	orrs	r5, r6
 80009c0:	d1f9      	bne.n	80009b6 <__eqsf2+0x3a>
 80009c2:	404b      	eors	r3, r1
 80009c4:	0018      	movs	r0, r3
 80009c6:	e7f6      	b.n	80009b6 <__eqsf2+0x3a>
 80009c8:	2000      	movs	r0, #0
 80009ca:	e7f4      	b.n	80009b6 <__eqsf2+0x3a>

080009cc <__gesf2>:
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	0042      	lsls	r2, r0, #1
 80009d0:	0244      	lsls	r4, r0, #9
 80009d2:	024d      	lsls	r5, r1, #9
 80009d4:	0fc3      	lsrs	r3, r0, #31
 80009d6:	0048      	lsls	r0, r1, #1
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	0e12      	lsrs	r2, r2, #24
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	0e00      	lsrs	r0, r0, #24
 80009e0:	0fc9      	lsrs	r1, r1, #31
 80009e2:	2aff      	cmp	r2, #255	@ 0xff
 80009e4:	d018      	beq.n	8000a18 <__gesf2+0x4c>
 80009e6:	28ff      	cmp	r0, #255	@ 0xff
 80009e8:	d00a      	beq.n	8000a00 <__gesf2+0x34>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d11e      	bne.n	8000a2c <__gesf2+0x60>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d10a      	bne.n	8000a08 <__gesf2+0x3c>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d029      	beq.n	8000a4a <__gesf2+0x7e>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d12d      	bne.n	8000a56 <__gesf2+0x8a>
 80009fa:	0048      	lsls	r0, r1, #1
 80009fc:	3801      	subs	r0, #1
 80009fe:	bd30      	pop	{r4, r5, pc}
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d125      	bne.n	8000a50 <__gesf2+0x84>
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d101      	bne.n	8000a0c <__gesf2+0x40>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d0f6      	beq.n	80009fa <__gesf2+0x2e>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d019      	beq.n	8000a44 <__gesf2+0x78>
 8000a10:	2001      	movs	r0, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	4318      	orrs	r0, r3
 8000a16:	e7f2      	b.n	80009fe <__gesf2+0x32>
 8000a18:	2c00      	cmp	r4, #0
 8000a1a:	d119      	bne.n	8000a50 <__gesf2+0x84>
 8000a1c:	28ff      	cmp	r0, #255	@ 0xff
 8000a1e:	d1f7      	bne.n	8000a10 <__gesf2+0x44>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d115      	bne.n	8000a50 <__gesf2+0x84>
 8000a24:	2000      	movs	r0, #0
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d1f2      	bne.n	8000a10 <__gesf2+0x44>
 8000a2a:	e7e8      	b.n	80009fe <__gesf2+0x32>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d0ef      	beq.n	8000a10 <__gesf2+0x44>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d1ed      	bne.n	8000a10 <__gesf2+0x44>
 8000a34:	4282      	cmp	r2, r0
 8000a36:	dceb      	bgt.n	8000a10 <__gesf2+0x44>
 8000a38:	db04      	blt.n	8000a44 <__gesf2+0x78>
 8000a3a:	42ac      	cmp	r4, r5
 8000a3c:	d8e8      	bhi.n	8000a10 <__gesf2+0x44>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	42ac      	cmp	r4, r5
 8000a42:	d2dc      	bcs.n	80009fe <__gesf2+0x32>
 8000a44:	0058      	lsls	r0, r3, #1
 8000a46:	3801      	subs	r0, #1
 8000a48:	e7d9      	b.n	80009fe <__gesf2+0x32>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d0d7      	beq.n	80009fe <__gesf2+0x32>
 8000a4e:	e7df      	b.n	8000a10 <__gesf2+0x44>
 8000a50:	2002      	movs	r0, #2
 8000a52:	4240      	negs	r0, r0
 8000a54:	e7d3      	b.n	80009fe <__gesf2+0x32>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d1da      	bne.n	8000a10 <__gesf2+0x44>
 8000a5a:	e7ee      	b.n	8000a3a <__gesf2+0x6e>

08000a5c <__lesf2>:
 8000a5c:	b530      	push	{r4, r5, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0244      	lsls	r4, r0, #9
 8000a62:	024d      	lsls	r5, r1, #9
 8000a64:	0fc3      	lsrs	r3, r0, #31
 8000a66:	0048      	lsls	r0, r1, #1
 8000a68:	0a64      	lsrs	r4, r4, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	0e00      	lsrs	r0, r0, #24
 8000a70:	0fc9      	lsrs	r1, r1, #31
 8000a72:	2aff      	cmp	r2, #255	@ 0xff
 8000a74:	d017      	beq.n	8000aa6 <__lesf2+0x4a>
 8000a76:	28ff      	cmp	r0, #255	@ 0xff
 8000a78:	d00a      	beq.n	8000a90 <__lesf2+0x34>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11b      	bne.n	8000ab6 <__lesf2+0x5a>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d10a      	bne.n	8000a98 <__lesf2+0x3c>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d01d      	beq.n	8000ac2 <__lesf2+0x66>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d12d      	bne.n	8000ae6 <__lesf2+0x8a>
 8000a8a:	0048      	lsls	r0, r1, #1
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e011      	b.n	8000ab4 <__lesf2+0x58>
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	d10e      	bne.n	8000ab2 <__lesf2+0x56>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d101      	bne.n	8000a9c <__lesf2+0x40>
 8000a98:	2c00      	cmp	r4, #0
 8000a9a:	d0f6      	beq.n	8000a8a <__lesf2+0x2e>
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d10c      	bne.n	8000aba <__lesf2+0x5e>
 8000aa0:	0058      	lsls	r0, r3, #1
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e006      	b.n	8000ab4 <__lesf2+0x58>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d103      	bne.n	8000ab2 <__lesf2+0x56>
 8000aaa:	28ff      	cmp	r0, #255	@ 0xff
 8000aac:	d105      	bne.n	8000aba <__lesf2+0x5e>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d015      	beq.n	8000ade <__lesf2+0x82>
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	bd30      	pop	{r4, r5, pc}
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d106      	bne.n	8000ac8 <__lesf2+0x6c>
 8000aba:	2001      	movs	r0, #1
 8000abc:	425b      	negs	r3, r3
 8000abe:	4318      	orrs	r0, r3
 8000ac0:	e7f8      	b.n	8000ab4 <__lesf2+0x58>
 8000ac2:	2c00      	cmp	r4, #0
 8000ac4:	d0f6      	beq.n	8000ab4 <__lesf2+0x58>
 8000ac6:	e7f8      	b.n	8000aba <__lesf2+0x5e>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d1f6      	bne.n	8000aba <__lesf2+0x5e>
 8000acc:	4282      	cmp	r2, r0
 8000ace:	dcf4      	bgt.n	8000aba <__lesf2+0x5e>
 8000ad0:	dbe6      	blt.n	8000aa0 <__lesf2+0x44>
 8000ad2:	42ac      	cmp	r4, r5
 8000ad4:	d8f1      	bhi.n	8000aba <__lesf2+0x5e>
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	42ac      	cmp	r4, r5
 8000ada:	d2eb      	bcs.n	8000ab4 <__lesf2+0x58>
 8000adc:	e7e0      	b.n	8000aa0 <__lesf2+0x44>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d1ea      	bne.n	8000aba <__lesf2+0x5e>
 8000ae4:	e7e6      	b.n	8000ab4 <__lesf2+0x58>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d1e7      	bne.n	8000aba <__lesf2+0x5e>
 8000aea:	e7f2      	b.n	8000ad2 <__lesf2+0x76>

08000aec <__aeabi_ui2f>:
 8000aec:	b510      	push	{r4, lr}
 8000aee:	1e04      	subs	r4, r0, #0
 8000af0:	d00d      	beq.n	8000b0e <__aeabi_ui2f+0x22>
 8000af2:	f001 ffe1 	bl	8002ab8 <__clzsi2>
 8000af6:	239e      	movs	r3, #158	@ 0x9e
 8000af8:	1a1b      	subs	r3, r3, r0
 8000afa:	2b96      	cmp	r3, #150	@ 0x96
 8000afc:	dc0c      	bgt.n	8000b18 <__aeabi_ui2f+0x2c>
 8000afe:	2808      	cmp	r0, #8
 8000b00:	d034      	beq.n	8000b6c <__aeabi_ui2f+0x80>
 8000b02:	3808      	subs	r0, #8
 8000b04:	4084      	lsls	r4, r0
 8000b06:	0264      	lsls	r4, r4, #9
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	e001      	b.n	8000b12 <__aeabi_ui2f+0x26>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	2400      	movs	r4, #0
 8000b12:	05c0      	lsls	r0, r0, #23
 8000b14:	4320      	orrs	r0, r4
 8000b16:	bd10      	pop	{r4, pc}
 8000b18:	2b99      	cmp	r3, #153	@ 0x99
 8000b1a:	dc13      	bgt.n	8000b44 <__aeabi_ui2f+0x58>
 8000b1c:	1f42      	subs	r2, r0, #5
 8000b1e:	4094      	lsls	r4, r2
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <__aeabi_ui2f+0x88>)
 8000b22:	4022      	ands	r2, r4
 8000b24:	0761      	lsls	r1, r4, #29
 8000b26:	d01c      	beq.n	8000b62 <__aeabi_ui2f+0x76>
 8000b28:	210f      	movs	r1, #15
 8000b2a:	4021      	ands	r1, r4
 8000b2c:	2904      	cmp	r1, #4
 8000b2e:	d018      	beq.n	8000b62 <__aeabi_ui2f+0x76>
 8000b30:	3204      	adds	r2, #4
 8000b32:	08d4      	lsrs	r4, r2, #3
 8000b34:	0152      	lsls	r2, r2, #5
 8000b36:	d515      	bpl.n	8000b64 <__aeabi_ui2f+0x78>
 8000b38:	239f      	movs	r3, #159	@ 0x9f
 8000b3a:	0264      	lsls	r4, r4, #9
 8000b3c:	1a18      	subs	r0, r3, r0
 8000b3e:	0a64      	lsrs	r4, r4, #9
 8000b40:	b2c0      	uxtb	r0, r0
 8000b42:	e7e6      	b.n	8000b12 <__aeabi_ui2f+0x26>
 8000b44:	0002      	movs	r2, r0
 8000b46:	0021      	movs	r1, r4
 8000b48:	321b      	adds	r2, #27
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	1e51      	subs	r1, r2, #1
 8000b50:	418a      	sbcs	r2, r1
 8000b52:	2105      	movs	r1, #5
 8000b54:	1a09      	subs	r1, r1, r0
 8000b56:	40cc      	lsrs	r4, r1
 8000b58:	4314      	orrs	r4, r2
 8000b5a:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <__aeabi_ui2f+0x88>)
 8000b5c:	4022      	ands	r2, r4
 8000b5e:	0761      	lsls	r1, r4, #29
 8000b60:	d1e2      	bne.n	8000b28 <__aeabi_ui2f+0x3c>
 8000b62:	08d4      	lsrs	r4, r2, #3
 8000b64:	0264      	lsls	r4, r4, #9
 8000b66:	0a64      	lsrs	r4, r4, #9
 8000b68:	b2d8      	uxtb	r0, r3
 8000b6a:	e7d2      	b.n	8000b12 <__aeabi_ui2f+0x26>
 8000b6c:	0264      	lsls	r4, r4, #9
 8000b6e:	0a64      	lsrs	r4, r4, #9
 8000b70:	308e      	adds	r0, #142	@ 0x8e
 8000b72:	e7ce      	b.n	8000b12 <__aeabi_ui2f+0x26>
 8000b74:	fbffffff 	.word	0xfbffffff

08000b78 <__aeabi_dadd>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	464f      	mov	r7, r9
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	b5c0      	push	{r6, r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	9000      	str	r0, [sp, #0]
 8000b86:	9101      	str	r1, [sp, #4]
 8000b88:	030e      	lsls	r6, r1, #12
 8000b8a:	004c      	lsls	r4, r1, #1
 8000b8c:	0fcd      	lsrs	r5, r1, #31
 8000b8e:	0a71      	lsrs	r1, r6, #9
 8000b90:	9e00      	ldr	r6, [sp, #0]
 8000b92:	005f      	lsls	r7, r3, #1
 8000b94:	0f76      	lsrs	r6, r6, #29
 8000b96:	430e      	orrs	r6, r1
 8000b98:	9900      	ldr	r1, [sp, #0]
 8000b9a:	9200      	str	r2, [sp, #0]
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	0319      	lsls	r1, r3, #12
 8000ba4:	0d7b      	lsrs	r3, r7, #21
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	0a49      	lsrs	r1, r1, #9
 8000bac:	0fdb      	lsrs	r3, r3, #31
 8000bae:	469c      	mov	ip, r3
 8000bb0:	9b00      	ldr	r3, [sp, #0]
 8000bb2:	9a00      	ldr	r2, [sp, #0]
 8000bb4:	0f5b      	lsrs	r3, r3, #29
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	4641      	mov	r1, r8
 8000bba:	0d64      	lsrs	r4, r4, #21
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	1a61      	subs	r1, r4, r1
 8000bc0:	4565      	cmp	r5, ip
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x4e>
 8000bc4:	e0a6      	b.n	8000d14 <__aeabi_dadd+0x19c>
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	dd72      	ble.n	8000cb0 <__aeabi_dadd+0x138>
 8000bca:	4647      	mov	r7, r8
 8000bcc:	2f00      	cmp	r7, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x5a>
 8000bd0:	e0dd      	b.n	8000d8e <__aeabi_dadd+0x216>
 8000bd2:	4fcc      	ldr	r7, [pc, #816]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000bd4:	42bc      	cmp	r4, r7
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x62>
 8000bd8:	e19a      	b.n	8000f10 <__aeabi_dadd+0x398>
 8000bda:	2701      	movs	r7, #1
 8000bdc:	2938      	cmp	r1, #56	@ 0x38
 8000bde:	dc17      	bgt.n	8000c10 <__aeabi_dadd+0x98>
 8000be0:	2780      	movs	r7, #128	@ 0x80
 8000be2:	043f      	lsls	r7, r7, #16
 8000be4:	433b      	orrs	r3, r7
 8000be6:	291f      	cmp	r1, #31
 8000be8:	dd00      	ble.n	8000bec <__aeabi_dadd+0x74>
 8000bea:	e1dd      	b.n	8000fa8 <__aeabi_dadd+0x430>
 8000bec:	2720      	movs	r7, #32
 8000bee:	1a78      	subs	r0, r7, r1
 8000bf0:	001f      	movs	r7, r3
 8000bf2:	4087      	lsls	r7, r0
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	0017      	movs	r7, r2
 8000bf8:	40cf      	lsrs	r7, r1
 8000bfa:	4684      	mov	ip, r0
 8000bfc:	0038      	movs	r0, r7
 8000bfe:	4657      	mov	r7, sl
 8000c00:	4307      	orrs	r7, r0
 8000c02:	4660      	mov	r0, ip
 8000c04:	4082      	lsls	r2, r0
 8000c06:	40cb      	lsrs	r3, r1
 8000c08:	1e50      	subs	r0, r2, #1
 8000c0a:	4182      	sbcs	r2, r0
 8000c0c:	1af6      	subs	r6, r6, r3
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	464b      	mov	r3, r9
 8000c12:	1bdf      	subs	r7, r3, r7
 8000c14:	45b9      	cmp	r9, r7
 8000c16:	4180      	sbcs	r0, r0
 8000c18:	4240      	negs	r0, r0
 8000c1a:	1a36      	subs	r6, r6, r0
 8000c1c:	0233      	lsls	r3, r6, #8
 8000c1e:	d400      	bmi.n	8000c22 <__aeabi_dadd+0xaa>
 8000c20:	e0ff      	b.n	8000e22 <__aeabi_dadd+0x2aa>
 8000c22:	0276      	lsls	r6, r6, #9
 8000c24:	0a76      	lsrs	r6, r6, #9
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0xb4>
 8000c2a:	e13c      	b.n	8000ea6 <__aeabi_dadd+0x32e>
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	f001 ff43 	bl	8002ab8 <__clzsi2>
 8000c32:	0003      	movs	r3, r0
 8000c34:	3b08      	subs	r3, #8
 8000c36:	2120      	movs	r1, #32
 8000c38:	0038      	movs	r0, r7
 8000c3a:	1aca      	subs	r2, r1, r3
 8000c3c:	40d0      	lsrs	r0, r2
 8000c3e:	409e      	lsls	r6, r3
 8000c40:	0002      	movs	r2, r0
 8000c42:	409f      	lsls	r7, r3
 8000c44:	4332      	orrs	r2, r6
 8000c46:	429c      	cmp	r4, r3
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_dadd+0xd4>
 8000c4a:	e1a6      	b.n	8000f9a <__aeabi_dadd+0x422>
 8000c4c:	1b18      	subs	r0, r3, r4
 8000c4e:	3001      	adds	r0, #1
 8000c50:	1a09      	subs	r1, r1, r0
 8000c52:	003e      	movs	r6, r7
 8000c54:	408f      	lsls	r7, r1
 8000c56:	40c6      	lsrs	r6, r0
 8000c58:	1e7b      	subs	r3, r7, #1
 8000c5a:	419f      	sbcs	r7, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	408b      	lsls	r3, r1
 8000c60:	4337      	orrs	r7, r6
 8000c62:	431f      	orrs	r7, r3
 8000c64:	40c2      	lsrs	r2, r0
 8000c66:	003b      	movs	r3, r7
 8000c68:	0016      	movs	r6, r2
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0xfa>
 8000c70:	e1df      	b.n	8001032 <__aeabi_dadd+0x4ba>
 8000c72:	077b      	lsls	r3, r7, #29
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dadd+0x100>
 8000c76:	e332      	b.n	80012de <__aeabi_dadd+0x766>
 8000c78:	230f      	movs	r3, #15
 8000c7a:	003a      	movs	r2, r7
 8000c7c:	403b      	ands	r3, r7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d004      	beq.n	8000c8c <__aeabi_dadd+0x114>
 8000c82:	1d3a      	adds	r2, r7, #4
 8000c84:	42ba      	cmp	r2, r7
 8000c86:	41bf      	sbcs	r7, r7
 8000c88:	427f      	negs	r7, r7
 8000c8a:	19f6      	adds	r6, r6, r7
 8000c8c:	0233      	lsls	r3, r6, #8
 8000c8e:	d400      	bmi.n	8000c92 <__aeabi_dadd+0x11a>
 8000c90:	e323      	b.n	80012da <__aeabi_dadd+0x762>
 8000c92:	4b9c      	ldr	r3, [pc, #624]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000c94:	3401      	adds	r4, #1
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x124>
 8000c9a:	e0b4      	b.n	8000e06 <__aeabi_dadd+0x28e>
 8000c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8000f08 <__aeabi_dadd+0x390>)
 8000c9e:	0564      	lsls	r4, r4, #21
 8000ca0:	401e      	ands	r6, r3
 8000ca2:	0d64      	lsrs	r4, r4, #21
 8000ca4:	0777      	lsls	r7, r6, #29
 8000ca6:	08d2      	lsrs	r2, r2, #3
 8000ca8:	0276      	lsls	r6, r6, #9
 8000caa:	4317      	orrs	r7, r2
 8000cac:	0b36      	lsrs	r6, r6, #12
 8000cae:	e0ac      	b.n	8000e0a <__aeabi_dadd+0x292>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x13e>
 8000cb4:	e07e      	b.n	8000db4 <__aeabi_dadd+0x23c>
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	1b09      	subs	r1, r1, r4
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_dadd+0x148>
 8000cbe:	e160      	b.n	8000f82 <__aeabi_dadd+0x40a>
 8000cc0:	0034      	movs	r4, r6
 8000cc2:	4648      	mov	r0, r9
 8000cc4:	4304      	orrs	r4, r0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x152>
 8000cc8:	e1c9      	b.n	800105e <__aeabi_dadd+0x4e6>
 8000cca:	1e4c      	subs	r4, r1, #1
 8000ccc:	2901      	cmp	r1, #1
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dadd+0x15a>
 8000cd0:	e22e      	b.n	8001130 <__aeabi_dadd+0x5b8>
 8000cd2:	4d8c      	ldr	r5, [pc, #560]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000cd4:	42a9      	cmp	r1, r5
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x162>
 8000cd8:	e224      	b.n	8001124 <__aeabi_dadd+0x5ac>
 8000cda:	2701      	movs	r7, #1
 8000cdc:	2c38      	cmp	r4, #56	@ 0x38
 8000cde:	dc11      	bgt.n	8000d04 <__aeabi_dadd+0x18c>
 8000ce0:	0021      	movs	r1, r4
 8000ce2:	291f      	cmp	r1, #31
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_dadd+0x170>
 8000ce6:	e20b      	b.n	8001100 <__aeabi_dadd+0x588>
 8000ce8:	2420      	movs	r4, #32
 8000cea:	0037      	movs	r7, r6
 8000cec:	4648      	mov	r0, r9
 8000cee:	1a64      	subs	r4, r4, r1
 8000cf0:	40a7      	lsls	r7, r4
 8000cf2:	40c8      	lsrs	r0, r1
 8000cf4:	4307      	orrs	r7, r0
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	40a0      	lsls	r0, r4
 8000cfa:	40ce      	lsrs	r6, r1
 8000cfc:	1e44      	subs	r4, r0, #1
 8000cfe:	41a0      	sbcs	r0, r4
 8000d00:	1b9b      	subs	r3, r3, r6
 8000d02:	4307      	orrs	r7, r0
 8000d04:	1bd7      	subs	r7, r2, r7
 8000d06:	42ba      	cmp	r2, r7
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4644      	mov	r4, r8
 8000d10:	1a9e      	subs	r6, r3, r2
 8000d12:	e783      	b.n	8000c1c <__aeabi_dadd+0xa4>
 8000d14:	2900      	cmp	r1, #0
 8000d16:	dc00      	bgt.n	8000d1a <__aeabi_dadd+0x1a2>
 8000d18:	e09c      	b.n	8000e54 <__aeabi_dadd+0x2dc>
 8000d1a:	4647      	mov	r7, r8
 8000d1c:	2f00      	cmp	r7, #0
 8000d1e:	d167      	bne.n	8000df0 <__aeabi_dadd+0x278>
 8000d20:	001f      	movs	r7, r3
 8000d22:	4317      	orrs	r7, r2
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dadd+0x1b0>
 8000d26:	e0e4      	b.n	8000ef2 <__aeabi_dadd+0x37a>
 8000d28:	1e48      	subs	r0, r1, #1
 8000d2a:	2901      	cmp	r1, #1
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dadd+0x1b8>
 8000d2e:	e19b      	b.n	8001068 <__aeabi_dadd+0x4f0>
 8000d30:	4f74      	ldr	r7, [pc, #464]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000d32:	42b9      	cmp	r1, r7
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x1c0>
 8000d36:	e0eb      	b.n	8000f10 <__aeabi_dadd+0x398>
 8000d38:	2701      	movs	r7, #1
 8000d3a:	0001      	movs	r1, r0
 8000d3c:	2838      	cmp	r0, #56	@ 0x38
 8000d3e:	dc11      	bgt.n	8000d64 <__aeabi_dadd+0x1ec>
 8000d40:	291f      	cmp	r1, #31
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x1ce>
 8000d44:	e1c7      	b.n	80010d6 <__aeabi_dadd+0x55e>
 8000d46:	2720      	movs	r7, #32
 8000d48:	1a78      	subs	r0, r7, r1
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	4684      	mov	ip, r0
 8000d4e:	4087      	lsls	r7, r0
 8000d50:	0010      	movs	r0, r2
 8000d52:	40c8      	lsrs	r0, r1
 8000d54:	4307      	orrs	r7, r0
 8000d56:	4660      	mov	r0, ip
 8000d58:	4082      	lsls	r2, r0
 8000d5a:	40cb      	lsrs	r3, r1
 8000d5c:	1e50      	subs	r0, r2, #1
 8000d5e:	4182      	sbcs	r2, r0
 8000d60:	18f6      	adds	r6, r6, r3
 8000d62:	4317      	orrs	r7, r2
 8000d64:	444f      	add	r7, r9
 8000d66:	454f      	cmp	r7, r9
 8000d68:	4180      	sbcs	r0, r0
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	1836      	adds	r6, r6, r0
 8000d6e:	0233      	lsls	r3, r6, #8
 8000d70:	d557      	bpl.n	8000e22 <__aeabi_dadd+0x2aa>
 8000d72:	4b64      	ldr	r3, [pc, #400]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000d74:	3401      	adds	r4, #1
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d045      	beq.n	8000e06 <__aeabi_dadd+0x28e>
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4b62      	ldr	r3, [pc, #392]	@ (8000f08 <__aeabi_dadd+0x390>)
 8000d7e:	087a      	lsrs	r2, r7, #1
 8000d80:	401e      	ands	r6, r3
 8000d82:	4039      	ands	r1, r7
 8000d84:	430a      	orrs	r2, r1
 8000d86:	07f7      	lsls	r7, r6, #31
 8000d88:	4317      	orrs	r7, r2
 8000d8a:	0876      	lsrs	r6, r6, #1
 8000d8c:	e771      	b.n	8000c72 <__aeabi_dadd+0xfa>
 8000d8e:	001f      	movs	r7, r3
 8000d90:	4317      	orrs	r7, r2
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x21e>
 8000d94:	e0ad      	b.n	8000ef2 <__aeabi_dadd+0x37a>
 8000d96:	1e4f      	subs	r7, r1, #1
 8000d98:	46bc      	mov	ip, r7
 8000d9a:	2901      	cmp	r1, #1
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x228>
 8000d9e:	e182      	b.n	80010a6 <__aeabi_dadd+0x52e>
 8000da0:	4f58      	ldr	r7, [pc, #352]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000da2:	42b9      	cmp	r1, r7
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x230>
 8000da6:	e190      	b.n	80010ca <__aeabi_dadd+0x552>
 8000da8:	4661      	mov	r1, ip
 8000daa:	2701      	movs	r7, #1
 8000dac:	2938      	cmp	r1, #56	@ 0x38
 8000dae:	dd00      	ble.n	8000db2 <__aeabi_dadd+0x23a>
 8000db0:	e72e      	b.n	8000c10 <__aeabi_dadd+0x98>
 8000db2:	e718      	b.n	8000be6 <__aeabi_dadd+0x6e>
 8000db4:	4f55      	ldr	r7, [pc, #340]	@ (8000f0c <__aeabi_dadd+0x394>)
 8000db6:	1c61      	adds	r1, r4, #1
 8000db8:	4239      	tst	r1, r7
 8000dba:	d000      	beq.n	8000dbe <__aeabi_dadd+0x246>
 8000dbc:	e0d0      	b.n	8000f60 <__aeabi_dadd+0x3e8>
 8000dbe:	0031      	movs	r1, r6
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	001f      	movs	r7, r3
 8000dc4:	4301      	orrs	r1, r0
 8000dc6:	4317      	orrs	r7, r2
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d000      	beq.n	8000dce <__aeabi_dadd+0x256>
 8000dcc:	e13d      	b.n	800104a <__aeabi_dadd+0x4d2>
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x25c>
 8000dd2:	e1bc      	b.n	800114e <__aeabi_dadd+0x5d6>
 8000dd4:	2f00      	cmp	r7, #0
 8000dd6:	d000      	beq.n	8000dda <__aeabi_dadd+0x262>
 8000dd8:	e1bf      	b.n	800115a <__aeabi_dadd+0x5e2>
 8000dda:	464b      	mov	r3, r9
 8000ddc:	2100      	movs	r1, #0
 8000dde:	08d8      	lsrs	r0, r3, #3
 8000de0:	0777      	lsls	r7, r6, #29
 8000de2:	4307      	orrs	r7, r0
 8000de4:	08f0      	lsrs	r0, r6, #3
 8000de6:	0306      	lsls	r6, r0, #12
 8000de8:	054c      	lsls	r4, r1, #21
 8000dea:	0b36      	lsrs	r6, r6, #12
 8000dec:	0d64      	lsrs	r4, r4, #21
 8000dee:	e00c      	b.n	8000e0a <__aeabi_dadd+0x292>
 8000df0:	4f44      	ldr	r7, [pc, #272]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000df2:	42bc      	cmp	r4, r7
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x280>
 8000df6:	e08b      	b.n	8000f10 <__aeabi_dadd+0x398>
 8000df8:	2701      	movs	r7, #1
 8000dfa:	2938      	cmp	r1, #56	@ 0x38
 8000dfc:	dcb2      	bgt.n	8000d64 <__aeabi_dadd+0x1ec>
 8000dfe:	2780      	movs	r7, #128	@ 0x80
 8000e00:	043f      	lsls	r7, r7, #16
 8000e02:	433b      	orrs	r3, r7
 8000e04:	e79c      	b.n	8000d40 <__aeabi_dadd+0x1c8>
 8000e06:	2600      	movs	r6, #0
 8000e08:	2700      	movs	r7, #0
 8000e0a:	0524      	lsls	r4, r4, #20
 8000e0c:	4334      	orrs	r4, r6
 8000e0e:	07ed      	lsls	r5, r5, #31
 8000e10:	432c      	orrs	r4, r5
 8000e12:	0038      	movs	r0, r7
 8000e14:	0021      	movs	r1, r4
 8000e16:	b002      	add	sp, #8
 8000e18:	bce0      	pop	{r5, r6, r7}
 8000e1a:	46ba      	mov	sl, r7
 8000e1c:	46b1      	mov	r9, r6
 8000e1e:	46a8      	mov	r8, r5
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e22:	077b      	lsls	r3, r7, #29
 8000e24:	d004      	beq.n	8000e30 <__aeabi_dadd+0x2b8>
 8000e26:	230f      	movs	r3, #15
 8000e28:	403b      	ands	r3, r7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_dadd+0x2b8>
 8000e2e:	e728      	b.n	8000c82 <__aeabi_dadd+0x10a>
 8000e30:	08f8      	lsrs	r0, r7, #3
 8000e32:	4b34      	ldr	r3, [pc, #208]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000e34:	0777      	lsls	r7, r6, #29
 8000e36:	4307      	orrs	r7, r0
 8000e38:	08f0      	lsrs	r0, r6, #3
 8000e3a:	429c      	cmp	r4, r3
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_dadd+0x2c8>
 8000e3e:	e24a      	b.n	80012d6 <__aeabi_dadd+0x75e>
 8000e40:	003b      	movs	r3, r7
 8000e42:	4303      	orrs	r3, r0
 8000e44:	d059      	beq.n	8000efa <__aeabi_dadd+0x382>
 8000e46:	2680      	movs	r6, #128	@ 0x80
 8000e48:	0336      	lsls	r6, r6, #12
 8000e4a:	4306      	orrs	r6, r0
 8000e4c:	0336      	lsls	r6, r6, #12
 8000e4e:	4c2d      	ldr	r4, [pc, #180]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000e50:	0b36      	lsrs	r6, r6, #12
 8000e52:	e7da      	b.n	8000e0a <__aeabi_dadd+0x292>
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d061      	beq.n	8000f1c <__aeabi_dadd+0x3a4>
 8000e58:	4641      	mov	r1, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x2ea>
 8000e60:	e0b9      	b.n	8000fd6 <__aeabi_dadd+0x45e>
 8000e62:	4c28      	ldr	r4, [pc, #160]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000e64:	45a0      	cmp	r8, r4
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x2f2>
 8000e68:	e1a5      	b.n	80011b6 <__aeabi_dadd+0x63e>
 8000e6a:	2701      	movs	r7, #1
 8000e6c:	2938      	cmp	r1, #56	@ 0x38
 8000e6e:	dc13      	bgt.n	8000e98 <__aeabi_dadd+0x320>
 8000e70:	2480      	movs	r4, #128	@ 0x80
 8000e72:	0424      	lsls	r4, r4, #16
 8000e74:	4326      	orrs	r6, r4
 8000e76:	291f      	cmp	r1, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x304>
 8000e7a:	e1c8      	b.n	800120e <__aeabi_dadd+0x696>
 8000e7c:	2420      	movs	r4, #32
 8000e7e:	0037      	movs	r7, r6
 8000e80:	4648      	mov	r0, r9
 8000e82:	1a64      	subs	r4, r4, r1
 8000e84:	40a7      	lsls	r7, r4
 8000e86:	40c8      	lsrs	r0, r1
 8000e88:	4307      	orrs	r7, r0
 8000e8a:	4648      	mov	r0, r9
 8000e8c:	40a0      	lsls	r0, r4
 8000e8e:	40ce      	lsrs	r6, r1
 8000e90:	1e44      	subs	r4, r0, #1
 8000e92:	41a0      	sbcs	r0, r4
 8000e94:	199b      	adds	r3, r3, r6
 8000e96:	4307      	orrs	r7, r0
 8000e98:	18bf      	adds	r7, r7, r2
 8000e9a:	4297      	cmp	r7, r2
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	4644      	mov	r4, r8
 8000ea2:	18d6      	adds	r6, r2, r3
 8000ea4:	e763      	b.n	8000d6e <__aeabi_dadd+0x1f6>
 8000ea6:	0038      	movs	r0, r7
 8000ea8:	f001 fe06 	bl	8002ab8 <__clzsi2>
 8000eac:	0003      	movs	r3, r0
 8000eae:	3318      	adds	r3, #24
 8000eb0:	2b1f      	cmp	r3, #31
 8000eb2:	dc00      	bgt.n	8000eb6 <__aeabi_dadd+0x33e>
 8000eb4:	e6bf      	b.n	8000c36 <__aeabi_dadd+0xbe>
 8000eb6:	003a      	movs	r2, r7
 8000eb8:	3808      	subs	r0, #8
 8000eba:	4082      	lsls	r2, r0
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	dd00      	ble.n	8000ec2 <__aeabi_dadd+0x34a>
 8000ec0:	e083      	b.n	8000fca <__aeabi_dadd+0x452>
 8000ec2:	1b1b      	subs	r3, r3, r4
 8000ec4:	1c58      	adds	r0, r3, #1
 8000ec6:	281f      	cmp	r0, #31
 8000ec8:	dc00      	bgt.n	8000ecc <__aeabi_dadd+0x354>
 8000eca:	e1b4      	b.n	8001236 <__aeabi_dadd+0x6be>
 8000ecc:	0017      	movs	r7, r2
 8000ece:	3b1f      	subs	r3, #31
 8000ed0:	40df      	lsrs	r7, r3
 8000ed2:	2820      	cmp	r0, #32
 8000ed4:	d005      	beq.n	8000ee2 <__aeabi_dadd+0x36a>
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	1a1b      	subs	r3, r3, r0
 8000eda:	409a      	lsls	r2, r3
 8000edc:	1e53      	subs	r3, r2, #1
 8000ede:	419a      	sbcs	r2, r3
 8000ee0:	4317      	orrs	r7, r2
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	2f00      	cmp	r7, #0
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_dadd+0x386>
 8000ee8:	077b      	lsls	r3, r7, #29
 8000eea:	d000      	beq.n	8000eee <__aeabi_dadd+0x376>
 8000eec:	e6c4      	b.n	8000c78 <__aeabi_dadd+0x100>
 8000eee:	0026      	movs	r6, r4
 8000ef0:	e79e      	b.n	8000e30 <__aeabi_dadd+0x2b8>
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	08d8      	lsrs	r0, r3, #3
 8000ef8:	e79b      	b.n	8000e32 <__aeabi_dadd+0x2ba>
 8000efa:	2700      	movs	r7, #0
 8000efc:	4c01      	ldr	r4, [pc, #4]	@ (8000f04 <__aeabi_dadd+0x38c>)
 8000efe:	2600      	movs	r6, #0
 8000f00:	e783      	b.n	8000e0a <__aeabi_dadd+0x292>
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	000007ff 	.word	0x000007ff
 8000f08:	ff7fffff 	.word	0xff7fffff
 8000f0c:	000007fe 	.word	0x000007fe
 8000f10:	464b      	mov	r3, r9
 8000f12:	0777      	lsls	r7, r6, #29
 8000f14:	08d8      	lsrs	r0, r3, #3
 8000f16:	4307      	orrs	r7, r0
 8000f18:	08f0      	lsrs	r0, r6, #3
 8000f1a:	e791      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 8000f1c:	4fcd      	ldr	r7, [pc, #820]	@ (8001254 <__aeabi_dadd+0x6dc>)
 8000f1e:	1c61      	adds	r1, r4, #1
 8000f20:	4239      	tst	r1, r7
 8000f22:	d16b      	bne.n	8000ffc <__aeabi_dadd+0x484>
 8000f24:	0031      	movs	r1, r6
 8000f26:	4648      	mov	r0, r9
 8000f28:	4301      	orrs	r1, r0
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_dadd+0x3b8>
 8000f2e:	e14b      	b.n	80011c8 <__aeabi_dadd+0x650>
 8000f30:	001f      	movs	r7, r3
 8000f32:	4317      	orrs	r7, r2
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x3c2>
 8000f38:	e181      	b.n	800123e <__aeabi_dadd+0x6c6>
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x3c8>
 8000f3e:	e74c      	b.n	8000dda <__aeabi_dadd+0x262>
 8000f40:	444a      	add	r2, r9
 8000f42:	454a      	cmp	r2, r9
 8000f44:	4180      	sbcs	r0, r0
 8000f46:	18f6      	adds	r6, r6, r3
 8000f48:	4240      	negs	r0, r0
 8000f4a:	1836      	adds	r6, r6, r0
 8000f4c:	0233      	lsls	r3, r6, #8
 8000f4e:	d500      	bpl.n	8000f52 <__aeabi_dadd+0x3da>
 8000f50:	e1b0      	b.n	80012b4 <__aeabi_dadd+0x73c>
 8000f52:	0017      	movs	r7, r2
 8000f54:	4691      	mov	r9, r2
 8000f56:	4337      	orrs	r7, r6
 8000f58:	d000      	beq.n	8000f5c <__aeabi_dadd+0x3e4>
 8000f5a:	e73e      	b.n	8000dda <__aeabi_dadd+0x262>
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	e754      	b.n	8000e0a <__aeabi_dadd+0x292>
 8000f60:	4649      	mov	r1, r9
 8000f62:	1a89      	subs	r1, r1, r2
 8000f64:	4688      	mov	r8, r1
 8000f66:	45c1      	cmp	r9, r8
 8000f68:	41bf      	sbcs	r7, r7
 8000f6a:	1af1      	subs	r1, r6, r3
 8000f6c:	427f      	negs	r7, r7
 8000f6e:	1bc9      	subs	r1, r1, r7
 8000f70:	020f      	lsls	r7, r1, #8
 8000f72:	d461      	bmi.n	8001038 <__aeabi_dadd+0x4c0>
 8000f74:	4647      	mov	r7, r8
 8000f76:	430f      	orrs	r7, r1
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x404>
 8000f7a:	e0bd      	b.n	80010f8 <__aeabi_dadd+0x580>
 8000f7c:	000e      	movs	r6, r1
 8000f7e:	4647      	mov	r7, r8
 8000f80:	e651      	b.n	8000c26 <__aeabi_dadd+0xae>
 8000f82:	4cb5      	ldr	r4, [pc, #724]	@ (8001258 <__aeabi_dadd+0x6e0>)
 8000f84:	45a0      	cmp	r8, r4
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x412>
 8000f88:	e100      	b.n	800118c <__aeabi_dadd+0x614>
 8000f8a:	2701      	movs	r7, #1
 8000f8c:	2938      	cmp	r1, #56	@ 0x38
 8000f8e:	dd00      	ble.n	8000f92 <__aeabi_dadd+0x41a>
 8000f90:	e6b8      	b.n	8000d04 <__aeabi_dadd+0x18c>
 8000f92:	2480      	movs	r4, #128	@ 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	4326      	orrs	r6, r4
 8000f98:	e6a3      	b.n	8000ce2 <__aeabi_dadd+0x16a>
 8000f9a:	4eb0      	ldr	r6, [pc, #704]	@ (800125c <__aeabi_dadd+0x6e4>)
 8000f9c:	1ae4      	subs	r4, r4, r3
 8000f9e:	4016      	ands	r6, r2
 8000fa0:	077b      	lsls	r3, r7, #29
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x42e>
 8000fa4:	e73f      	b.n	8000e26 <__aeabi_dadd+0x2ae>
 8000fa6:	e743      	b.n	8000e30 <__aeabi_dadd+0x2b8>
 8000fa8:	000f      	movs	r7, r1
 8000faa:	0018      	movs	r0, r3
 8000fac:	3f20      	subs	r7, #32
 8000fae:	40f8      	lsrs	r0, r7
 8000fb0:	4684      	mov	ip, r0
 8000fb2:	2920      	cmp	r1, #32
 8000fb4:	d003      	beq.n	8000fbe <__aeabi_dadd+0x446>
 8000fb6:	2740      	movs	r7, #64	@ 0x40
 8000fb8:	1a79      	subs	r1, r7, r1
 8000fba:	408b      	lsls	r3, r1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	1e53      	subs	r3, r2, #1
 8000fc0:	419a      	sbcs	r2, r3
 8000fc2:	4663      	mov	r3, ip
 8000fc4:	0017      	movs	r7, r2
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	e622      	b.n	8000c10 <__aeabi_dadd+0x98>
 8000fca:	48a4      	ldr	r0, [pc, #656]	@ (800125c <__aeabi_dadd+0x6e4>)
 8000fcc:	1ae1      	subs	r1, r4, r3
 8000fce:	4010      	ands	r0, r2
 8000fd0:	0747      	lsls	r7, r0, #29
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	e707      	b.n	8000de6 <__aeabi_dadd+0x26e>
 8000fd6:	0034      	movs	r4, r6
 8000fd8:	4648      	mov	r0, r9
 8000fda:	4304      	orrs	r4, r0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x468>
 8000fde:	e0fa      	b.n	80011d6 <__aeabi_dadd+0x65e>
 8000fe0:	1e4c      	subs	r4, r1, #1
 8000fe2:	2901      	cmp	r1, #1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x470>
 8000fe6:	e0d7      	b.n	8001198 <__aeabi_dadd+0x620>
 8000fe8:	4f9b      	ldr	r7, [pc, #620]	@ (8001258 <__aeabi_dadd+0x6e0>)
 8000fea:	42b9      	cmp	r1, r7
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x478>
 8000fee:	e0e2      	b.n	80011b6 <__aeabi_dadd+0x63e>
 8000ff0:	2701      	movs	r7, #1
 8000ff2:	2c38      	cmp	r4, #56	@ 0x38
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0x480>
 8000ff6:	e74f      	b.n	8000e98 <__aeabi_dadd+0x320>
 8000ff8:	0021      	movs	r1, r4
 8000ffa:	e73c      	b.n	8000e76 <__aeabi_dadd+0x2fe>
 8000ffc:	4c96      	ldr	r4, [pc, #600]	@ (8001258 <__aeabi_dadd+0x6e0>)
 8000ffe:	42a1      	cmp	r1, r4
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x48c>
 8001002:	e0dd      	b.n	80011c0 <__aeabi_dadd+0x648>
 8001004:	444a      	add	r2, r9
 8001006:	454a      	cmp	r2, r9
 8001008:	4180      	sbcs	r0, r0
 800100a:	18f3      	adds	r3, r6, r3
 800100c:	4240      	negs	r0, r0
 800100e:	1818      	adds	r0, r3, r0
 8001010:	07c7      	lsls	r7, r0, #31
 8001012:	0852      	lsrs	r2, r2, #1
 8001014:	4317      	orrs	r7, r2
 8001016:	0846      	lsrs	r6, r0, #1
 8001018:	0752      	lsls	r2, r2, #29
 800101a:	d005      	beq.n	8001028 <__aeabi_dadd+0x4b0>
 800101c:	220f      	movs	r2, #15
 800101e:	000c      	movs	r4, r1
 8001020:	403a      	ands	r2, r7
 8001022:	2a04      	cmp	r2, #4
 8001024:	d000      	beq.n	8001028 <__aeabi_dadd+0x4b0>
 8001026:	e62c      	b.n	8000c82 <__aeabi_dadd+0x10a>
 8001028:	0776      	lsls	r6, r6, #29
 800102a:	08ff      	lsrs	r7, r7, #3
 800102c:	4337      	orrs	r7, r6
 800102e:	0900      	lsrs	r0, r0, #4
 8001030:	e6d9      	b.n	8000de6 <__aeabi_dadd+0x26e>
 8001032:	2700      	movs	r7, #0
 8001034:	2600      	movs	r6, #0
 8001036:	e6e8      	b.n	8000e0a <__aeabi_dadd+0x292>
 8001038:	4649      	mov	r1, r9
 800103a:	1a57      	subs	r7, r2, r1
 800103c:	42ba      	cmp	r2, r7
 800103e:	4192      	sbcs	r2, r2
 8001040:	1b9e      	subs	r6, r3, r6
 8001042:	4252      	negs	r2, r2
 8001044:	4665      	mov	r5, ip
 8001046:	1ab6      	subs	r6, r6, r2
 8001048:	e5ed      	b.n	8000c26 <__aeabi_dadd+0xae>
 800104a:	2900      	cmp	r1, #0
 800104c:	d000      	beq.n	8001050 <__aeabi_dadd+0x4d8>
 800104e:	e0c6      	b.n	80011de <__aeabi_dadd+0x666>
 8001050:	2f00      	cmp	r7, #0
 8001052:	d167      	bne.n	8001124 <__aeabi_dadd+0x5ac>
 8001054:	2680      	movs	r6, #128	@ 0x80
 8001056:	2500      	movs	r5, #0
 8001058:	4c7f      	ldr	r4, [pc, #508]	@ (8001258 <__aeabi_dadd+0x6e0>)
 800105a:	0336      	lsls	r6, r6, #12
 800105c:	e6d5      	b.n	8000e0a <__aeabi_dadd+0x292>
 800105e:	4665      	mov	r5, ip
 8001060:	000c      	movs	r4, r1
 8001062:	001e      	movs	r6, r3
 8001064:	08d0      	lsrs	r0, r2, #3
 8001066:	e6e4      	b.n	8000e32 <__aeabi_dadd+0x2ba>
 8001068:	444a      	add	r2, r9
 800106a:	454a      	cmp	r2, r9
 800106c:	4180      	sbcs	r0, r0
 800106e:	18f3      	adds	r3, r6, r3
 8001070:	4240      	negs	r0, r0
 8001072:	1818      	adds	r0, r3, r0
 8001074:	0011      	movs	r1, r2
 8001076:	0203      	lsls	r3, r0, #8
 8001078:	d400      	bmi.n	800107c <__aeabi_dadd+0x504>
 800107a:	e096      	b.n	80011aa <__aeabi_dadd+0x632>
 800107c:	4b77      	ldr	r3, [pc, #476]	@ (800125c <__aeabi_dadd+0x6e4>)
 800107e:	0849      	lsrs	r1, r1, #1
 8001080:	4018      	ands	r0, r3
 8001082:	07c3      	lsls	r3, r0, #31
 8001084:	430b      	orrs	r3, r1
 8001086:	0844      	lsrs	r4, r0, #1
 8001088:	0749      	lsls	r1, r1, #29
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x516>
 800108c:	e129      	b.n	80012e2 <__aeabi_dadd+0x76a>
 800108e:	220f      	movs	r2, #15
 8001090:	401a      	ands	r2, r3
 8001092:	2a04      	cmp	r2, #4
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x520>
 8001096:	e0ea      	b.n	800126e <__aeabi_dadd+0x6f6>
 8001098:	1d1f      	adds	r7, r3, #4
 800109a:	429f      	cmp	r7, r3
 800109c:	41b6      	sbcs	r6, r6
 800109e:	4276      	negs	r6, r6
 80010a0:	1936      	adds	r6, r6, r4
 80010a2:	2402      	movs	r4, #2
 80010a4:	e6c4      	b.n	8000e30 <__aeabi_dadd+0x2b8>
 80010a6:	4649      	mov	r1, r9
 80010a8:	1a8f      	subs	r7, r1, r2
 80010aa:	45b9      	cmp	r9, r7
 80010ac:	4180      	sbcs	r0, r0
 80010ae:	1af6      	subs	r6, r6, r3
 80010b0:	4240      	negs	r0, r0
 80010b2:	1a36      	subs	r6, r6, r0
 80010b4:	0233      	lsls	r3, r6, #8
 80010b6:	d406      	bmi.n	80010c6 <__aeabi_dadd+0x54e>
 80010b8:	0773      	lsls	r3, r6, #29
 80010ba:	08ff      	lsrs	r7, r7, #3
 80010bc:	2101      	movs	r1, #1
 80010be:	431f      	orrs	r7, r3
 80010c0:	08f0      	lsrs	r0, r6, #3
 80010c2:	e690      	b.n	8000de6 <__aeabi_dadd+0x26e>
 80010c4:	4665      	mov	r5, ip
 80010c6:	2401      	movs	r4, #1
 80010c8:	e5ab      	b.n	8000c22 <__aeabi_dadd+0xaa>
 80010ca:	464b      	mov	r3, r9
 80010cc:	0777      	lsls	r7, r6, #29
 80010ce:	08d8      	lsrs	r0, r3, #3
 80010d0:	4307      	orrs	r7, r0
 80010d2:	08f0      	lsrs	r0, r6, #3
 80010d4:	e6b4      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 80010d6:	000f      	movs	r7, r1
 80010d8:	0018      	movs	r0, r3
 80010da:	3f20      	subs	r7, #32
 80010dc:	40f8      	lsrs	r0, r7
 80010de:	4684      	mov	ip, r0
 80010e0:	2920      	cmp	r1, #32
 80010e2:	d003      	beq.n	80010ec <__aeabi_dadd+0x574>
 80010e4:	2740      	movs	r7, #64	@ 0x40
 80010e6:	1a79      	subs	r1, r7, r1
 80010e8:	408b      	lsls	r3, r1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	1e53      	subs	r3, r2, #1
 80010ee:	419a      	sbcs	r2, r3
 80010f0:	4663      	mov	r3, ip
 80010f2:	0017      	movs	r7, r2
 80010f4:	431f      	orrs	r7, r3
 80010f6:	e635      	b.n	8000d64 <__aeabi_dadd+0x1ec>
 80010f8:	2500      	movs	r5, #0
 80010fa:	2400      	movs	r4, #0
 80010fc:	2600      	movs	r6, #0
 80010fe:	e684      	b.n	8000e0a <__aeabi_dadd+0x292>
 8001100:	000c      	movs	r4, r1
 8001102:	0035      	movs	r5, r6
 8001104:	3c20      	subs	r4, #32
 8001106:	40e5      	lsrs	r5, r4
 8001108:	2920      	cmp	r1, #32
 800110a:	d005      	beq.n	8001118 <__aeabi_dadd+0x5a0>
 800110c:	2440      	movs	r4, #64	@ 0x40
 800110e:	1a61      	subs	r1, r4, r1
 8001110:	408e      	lsls	r6, r1
 8001112:	4649      	mov	r1, r9
 8001114:	4331      	orrs	r1, r6
 8001116:	4689      	mov	r9, r1
 8001118:	4648      	mov	r0, r9
 800111a:	1e41      	subs	r1, r0, #1
 800111c:	4188      	sbcs	r0, r1
 800111e:	0007      	movs	r7, r0
 8001120:	432f      	orrs	r7, r5
 8001122:	e5ef      	b.n	8000d04 <__aeabi_dadd+0x18c>
 8001124:	08d2      	lsrs	r2, r2, #3
 8001126:	075f      	lsls	r7, r3, #29
 8001128:	4665      	mov	r5, ip
 800112a:	4317      	orrs	r7, r2
 800112c:	08d8      	lsrs	r0, r3, #3
 800112e:	e687      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 8001130:	1a17      	subs	r7, r2, r0
 8001132:	42ba      	cmp	r2, r7
 8001134:	4192      	sbcs	r2, r2
 8001136:	1b9e      	subs	r6, r3, r6
 8001138:	4252      	negs	r2, r2
 800113a:	1ab6      	subs	r6, r6, r2
 800113c:	0233      	lsls	r3, r6, #8
 800113e:	d4c1      	bmi.n	80010c4 <__aeabi_dadd+0x54c>
 8001140:	0773      	lsls	r3, r6, #29
 8001142:	08ff      	lsrs	r7, r7, #3
 8001144:	4665      	mov	r5, ip
 8001146:	2101      	movs	r1, #1
 8001148:	431f      	orrs	r7, r3
 800114a:	08f0      	lsrs	r0, r6, #3
 800114c:	e64b      	b.n	8000de6 <__aeabi_dadd+0x26e>
 800114e:	2f00      	cmp	r7, #0
 8001150:	d07b      	beq.n	800124a <__aeabi_dadd+0x6d2>
 8001152:	4665      	mov	r5, ip
 8001154:	001e      	movs	r6, r3
 8001156:	4691      	mov	r9, r2
 8001158:	e63f      	b.n	8000dda <__aeabi_dadd+0x262>
 800115a:	1a81      	subs	r1, r0, r2
 800115c:	4688      	mov	r8, r1
 800115e:	45c1      	cmp	r9, r8
 8001160:	41a4      	sbcs	r4, r4
 8001162:	1af1      	subs	r1, r6, r3
 8001164:	4264      	negs	r4, r4
 8001166:	1b09      	subs	r1, r1, r4
 8001168:	2480      	movs	r4, #128	@ 0x80
 800116a:	0424      	lsls	r4, r4, #16
 800116c:	4221      	tst	r1, r4
 800116e:	d077      	beq.n	8001260 <__aeabi_dadd+0x6e8>
 8001170:	1a10      	subs	r0, r2, r0
 8001172:	4282      	cmp	r2, r0
 8001174:	4192      	sbcs	r2, r2
 8001176:	0007      	movs	r7, r0
 8001178:	1b9e      	subs	r6, r3, r6
 800117a:	4252      	negs	r2, r2
 800117c:	1ab6      	subs	r6, r6, r2
 800117e:	4337      	orrs	r7, r6
 8001180:	d000      	beq.n	8001184 <__aeabi_dadd+0x60c>
 8001182:	e0a0      	b.n	80012c6 <__aeabi_dadd+0x74e>
 8001184:	4665      	mov	r5, ip
 8001186:	2400      	movs	r4, #0
 8001188:	2600      	movs	r6, #0
 800118a:	e63e      	b.n	8000e0a <__aeabi_dadd+0x292>
 800118c:	075f      	lsls	r7, r3, #29
 800118e:	08d2      	lsrs	r2, r2, #3
 8001190:	4665      	mov	r5, ip
 8001192:	4317      	orrs	r7, r2
 8001194:	08d8      	lsrs	r0, r3, #3
 8001196:	e653      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 8001198:	1881      	adds	r1, r0, r2
 800119a:	4291      	cmp	r1, r2
 800119c:	4192      	sbcs	r2, r2
 800119e:	18f0      	adds	r0, r6, r3
 80011a0:	4252      	negs	r2, r2
 80011a2:	1880      	adds	r0, r0, r2
 80011a4:	0203      	lsls	r3, r0, #8
 80011a6:	d500      	bpl.n	80011aa <__aeabi_dadd+0x632>
 80011a8:	e768      	b.n	800107c <__aeabi_dadd+0x504>
 80011aa:	0747      	lsls	r7, r0, #29
 80011ac:	08c9      	lsrs	r1, r1, #3
 80011ae:	430f      	orrs	r7, r1
 80011b0:	08c0      	lsrs	r0, r0, #3
 80011b2:	2101      	movs	r1, #1
 80011b4:	e617      	b.n	8000de6 <__aeabi_dadd+0x26e>
 80011b6:	08d2      	lsrs	r2, r2, #3
 80011b8:	075f      	lsls	r7, r3, #29
 80011ba:	4317      	orrs	r7, r2
 80011bc:	08d8      	lsrs	r0, r3, #3
 80011be:	e63f      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 80011c0:	000c      	movs	r4, r1
 80011c2:	2600      	movs	r6, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e620      	b.n	8000e0a <__aeabi_dadd+0x292>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d156      	bne.n	800127a <__aeabi_dadd+0x702>
 80011cc:	075f      	lsls	r7, r3, #29
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	4317      	orrs	r7, r2
 80011d2:	08d8      	lsrs	r0, r3, #3
 80011d4:	e634      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 80011d6:	000c      	movs	r4, r1
 80011d8:	001e      	movs	r6, r3
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	e629      	b.n	8000e32 <__aeabi_dadd+0x2ba>
 80011de:	08c1      	lsrs	r1, r0, #3
 80011e0:	0770      	lsls	r0, r6, #29
 80011e2:	4301      	orrs	r1, r0
 80011e4:	08f0      	lsrs	r0, r6, #3
 80011e6:	2f00      	cmp	r7, #0
 80011e8:	d062      	beq.n	80012b0 <__aeabi_dadd+0x738>
 80011ea:	2480      	movs	r4, #128	@ 0x80
 80011ec:	0324      	lsls	r4, r4, #12
 80011ee:	4220      	tst	r0, r4
 80011f0:	d007      	beq.n	8001202 <__aeabi_dadd+0x68a>
 80011f2:	08de      	lsrs	r6, r3, #3
 80011f4:	4226      	tst	r6, r4
 80011f6:	d104      	bne.n	8001202 <__aeabi_dadd+0x68a>
 80011f8:	4665      	mov	r5, ip
 80011fa:	0030      	movs	r0, r6
 80011fc:	08d1      	lsrs	r1, r2, #3
 80011fe:	075b      	lsls	r3, r3, #29
 8001200:	4319      	orrs	r1, r3
 8001202:	0f4f      	lsrs	r7, r1, #29
 8001204:	00c9      	lsls	r1, r1, #3
 8001206:	08c9      	lsrs	r1, r1, #3
 8001208:	077f      	lsls	r7, r7, #29
 800120a:	430f      	orrs	r7, r1
 800120c:	e618      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 800120e:	000c      	movs	r4, r1
 8001210:	0030      	movs	r0, r6
 8001212:	3c20      	subs	r4, #32
 8001214:	40e0      	lsrs	r0, r4
 8001216:	4684      	mov	ip, r0
 8001218:	2920      	cmp	r1, #32
 800121a:	d005      	beq.n	8001228 <__aeabi_dadd+0x6b0>
 800121c:	2440      	movs	r4, #64	@ 0x40
 800121e:	1a61      	subs	r1, r4, r1
 8001220:	408e      	lsls	r6, r1
 8001222:	4649      	mov	r1, r9
 8001224:	4331      	orrs	r1, r6
 8001226:	4689      	mov	r9, r1
 8001228:	4648      	mov	r0, r9
 800122a:	1e41      	subs	r1, r0, #1
 800122c:	4188      	sbcs	r0, r1
 800122e:	4661      	mov	r1, ip
 8001230:	0007      	movs	r7, r0
 8001232:	430f      	orrs	r7, r1
 8001234:	e630      	b.n	8000e98 <__aeabi_dadd+0x320>
 8001236:	2120      	movs	r1, #32
 8001238:	2700      	movs	r7, #0
 800123a:	1a09      	subs	r1, r1, r0
 800123c:	e50e      	b.n	8000c5c <__aeabi_dadd+0xe4>
 800123e:	001e      	movs	r6, r3
 8001240:	2f00      	cmp	r7, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x6ce>
 8001244:	e522      	b.n	8000c8c <__aeabi_dadd+0x114>
 8001246:	2400      	movs	r4, #0
 8001248:	e758      	b.n	80010fc <__aeabi_dadd+0x584>
 800124a:	2500      	movs	r5, #0
 800124c:	2400      	movs	r4, #0
 800124e:	2600      	movs	r6, #0
 8001250:	e5db      	b.n	8000e0a <__aeabi_dadd+0x292>
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	000007fe 	.word	0x000007fe
 8001258:	000007ff 	.word	0x000007ff
 800125c:	ff7fffff 	.word	0xff7fffff
 8001260:	4647      	mov	r7, r8
 8001262:	430f      	orrs	r7, r1
 8001264:	d100      	bne.n	8001268 <__aeabi_dadd+0x6f0>
 8001266:	e747      	b.n	80010f8 <__aeabi_dadd+0x580>
 8001268:	000e      	movs	r6, r1
 800126a:	46c1      	mov	r9, r8
 800126c:	e5b5      	b.n	8000dda <__aeabi_dadd+0x262>
 800126e:	08df      	lsrs	r7, r3, #3
 8001270:	0764      	lsls	r4, r4, #29
 8001272:	2102      	movs	r1, #2
 8001274:	4327      	orrs	r7, r4
 8001276:	0900      	lsrs	r0, r0, #4
 8001278:	e5b5      	b.n	8000de6 <__aeabi_dadd+0x26e>
 800127a:	0019      	movs	r1, r3
 800127c:	08c0      	lsrs	r0, r0, #3
 800127e:	0777      	lsls	r7, r6, #29
 8001280:	4307      	orrs	r7, r0
 8001282:	4311      	orrs	r1, r2
 8001284:	08f0      	lsrs	r0, r6, #3
 8001286:	2900      	cmp	r1, #0
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x714>
 800128a:	e5d9      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 800128c:	2180      	movs	r1, #128	@ 0x80
 800128e:	0309      	lsls	r1, r1, #12
 8001290:	4208      	tst	r0, r1
 8001292:	d007      	beq.n	80012a4 <__aeabi_dadd+0x72c>
 8001294:	08dc      	lsrs	r4, r3, #3
 8001296:	420c      	tst	r4, r1
 8001298:	d104      	bne.n	80012a4 <__aeabi_dadd+0x72c>
 800129a:	08d2      	lsrs	r2, r2, #3
 800129c:	075b      	lsls	r3, r3, #29
 800129e:	431a      	orrs	r2, r3
 80012a0:	0017      	movs	r7, r2
 80012a2:	0020      	movs	r0, r4
 80012a4:	0f7b      	lsrs	r3, r7, #29
 80012a6:	00ff      	lsls	r7, r7, #3
 80012a8:	08ff      	lsrs	r7, r7, #3
 80012aa:	075b      	lsls	r3, r3, #29
 80012ac:	431f      	orrs	r7, r3
 80012ae:	e5c7      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 80012b0:	000f      	movs	r7, r1
 80012b2:	e5c5      	b.n	8000e40 <__aeabi_dadd+0x2c8>
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <__aeabi_dadd+0x788>)
 80012b6:	08d2      	lsrs	r2, r2, #3
 80012b8:	4033      	ands	r3, r6
 80012ba:	075f      	lsls	r7, r3, #29
 80012bc:	025b      	lsls	r3, r3, #9
 80012be:	2401      	movs	r4, #1
 80012c0:	4317      	orrs	r7, r2
 80012c2:	0b1e      	lsrs	r6, r3, #12
 80012c4:	e5a1      	b.n	8000e0a <__aeabi_dadd+0x292>
 80012c6:	4226      	tst	r6, r4
 80012c8:	d012      	beq.n	80012f0 <__aeabi_dadd+0x778>
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <__aeabi_dadd+0x788>)
 80012cc:	4665      	mov	r5, ip
 80012ce:	0002      	movs	r2, r0
 80012d0:	2401      	movs	r4, #1
 80012d2:	401e      	ands	r6, r3
 80012d4:	e4e6      	b.n	8000ca4 <__aeabi_dadd+0x12c>
 80012d6:	0021      	movs	r1, r4
 80012d8:	e585      	b.n	8000de6 <__aeabi_dadd+0x26e>
 80012da:	0017      	movs	r7, r2
 80012dc:	e5a8      	b.n	8000e30 <__aeabi_dadd+0x2b8>
 80012de:	003a      	movs	r2, r7
 80012e0:	e4d4      	b.n	8000c8c <__aeabi_dadd+0x114>
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	0764      	lsls	r4, r4, #29
 80012e6:	431c      	orrs	r4, r3
 80012e8:	0027      	movs	r7, r4
 80012ea:	2102      	movs	r1, #2
 80012ec:	0900      	lsrs	r0, r0, #4
 80012ee:	e57a      	b.n	8000de6 <__aeabi_dadd+0x26e>
 80012f0:	08c0      	lsrs	r0, r0, #3
 80012f2:	0777      	lsls	r7, r6, #29
 80012f4:	4307      	orrs	r7, r0
 80012f6:	4665      	mov	r5, ip
 80012f8:	2100      	movs	r1, #0
 80012fa:	08f0      	lsrs	r0, r6, #3
 80012fc:	e573      	b.n	8000de6 <__aeabi_dadd+0x26e>
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	ff7fffff 	.word	0xff7fffff

08001304 <__aeabi_ddiv>:
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	46de      	mov	lr, fp
 8001308:	4645      	mov	r5, r8
 800130a:	4657      	mov	r7, sl
 800130c:	464e      	mov	r6, r9
 800130e:	b5e0      	push	{r5, r6, r7, lr}
 8001310:	b087      	sub	sp, #28
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	030b      	lsls	r3, r1, #12
 8001318:	0b1b      	lsrs	r3, r3, #12
 800131a:	469b      	mov	fp, r3
 800131c:	0fca      	lsrs	r2, r1, #31
 800131e:	004b      	lsls	r3, r1, #1
 8001320:	0004      	movs	r4, r0
 8001322:	4680      	mov	r8, r0
 8001324:	0d5b      	lsrs	r3, r3, #21
 8001326:	9202      	str	r2, [sp, #8]
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0x28>
 800132a:	e098      	b.n	800145e <__aeabi_ddiv+0x15a>
 800132c:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <__aeabi_ddiv+0x21c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d037      	beq.n	80013a2 <__aeabi_ddiv+0x9e>
 8001332:	4659      	mov	r1, fp
 8001334:	0f42      	lsrs	r2, r0, #29
 8001336:	00c9      	lsls	r1, r1, #3
 8001338:	430a      	orrs	r2, r1
 800133a:	2180      	movs	r1, #128	@ 0x80
 800133c:	0409      	lsls	r1, r1, #16
 800133e:	4311      	orrs	r1, r2
 8001340:	00c2      	lsls	r2, r0, #3
 8001342:	4690      	mov	r8, r2
 8001344:	4a77      	ldr	r2, [pc, #476]	@ (8001524 <__aeabi_ddiv+0x220>)
 8001346:	4689      	mov	r9, r1
 8001348:	4692      	mov	sl, r2
 800134a:	449a      	add	sl, r3
 800134c:	2300      	movs	r3, #0
 800134e:	2400      	movs	r4, #0
 8001350:	9303      	str	r3, [sp, #12]
 8001352:	9e00      	ldr	r6, [sp, #0]
 8001354:	9f01      	ldr	r7, [sp, #4]
 8001356:	033b      	lsls	r3, r7, #12
 8001358:	0b1b      	lsrs	r3, r3, #12
 800135a:	469b      	mov	fp, r3
 800135c:	007b      	lsls	r3, r7, #1
 800135e:	0030      	movs	r0, r6
 8001360:	0d5b      	lsrs	r3, r3, #21
 8001362:	0ffd      	lsrs	r5, r7, #31
 8001364:	2b00      	cmp	r3, #0
 8001366:	d059      	beq.n	800141c <__aeabi_ddiv+0x118>
 8001368:	4a6d      	ldr	r2, [pc, #436]	@ (8001520 <__aeabi_ddiv+0x21c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d048      	beq.n	8001400 <__aeabi_ddiv+0xfc>
 800136e:	4659      	mov	r1, fp
 8001370:	0f72      	lsrs	r2, r6, #29
 8001372:	00c9      	lsls	r1, r1, #3
 8001374:	430a      	orrs	r2, r1
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	0409      	lsls	r1, r1, #16
 800137a:	4311      	orrs	r1, r2
 800137c:	468b      	mov	fp, r1
 800137e:	4969      	ldr	r1, [pc, #420]	@ (8001524 <__aeabi_ddiv+0x220>)
 8001380:	00f2      	lsls	r2, r6, #3
 8001382:	468c      	mov	ip, r1
 8001384:	4651      	mov	r1, sl
 8001386:	4463      	add	r3, ip
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	469a      	mov	sl, r3
 800138c:	2100      	movs	r1, #0
 800138e:	9e02      	ldr	r6, [sp, #8]
 8001390:	406e      	eors	r6, r5
 8001392:	b2f6      	uxtb	r6, r6
 8001394:	2c0f      	cmp	r4, #15
 8001396:	d900      	bls.n	800139a <__aeabi_ddiv+0x96>
 8001398:	e0ce      	b.n	8001538 <__aeabi_ddiv+0x234>
 800139a:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <__aeabi_ddiv+0x224>)
 800139c:	00a4      	lsls	r4, r4, #2
 800139e:	591b      	ldr	r3, [r3, r4]
 80013a0:	469f      	mov	pc, r3
 80013a2:	465a      	mov	r2, fp
 80013a4:	4302      	orrs	r2, r0
 80013a6:	4691      	mov	r9, r2
 80013a8:	d000      	beq.n	80013ac <__aeabi_ddiv+0xa8>
 80013aa:	e090      	b.n	80014ce <__aeabi_ddiv+0x1ca>
 80013ac:	469a      	mov	sl, r3
 80013ae:	2302      	movs	r3, #2
 80013b0:	4690      	mov	r8, r2
 80013b2:	2408      	movs	r4, #8
 80013b4:	9303      	str	r3, [sp, #12]
 80013b6:	e7cc      	b.n	8001352 <__aeabi_ddiv+0x4e>
 80013b8:	46cb      	mov	fp, r9
 80013ba:	4642      	mov	r2, r8
 80013bc:	9d02      	ldr	r5, [sp, #8]
 80013be:	9903      	ldr	r1, [sp, #12]
 80013c0:	2902      	cmp	r1, #2
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0xc2>
 80013c4:	e1de      	b.n	8001784 <__aeabi_ddiv+0x480>
 80013c6:	2903      	cmp	r1, #3
 80013c8:	d100      	bne.n	80013cc <__aeabi_ddiv+0xc8>
 80013ca:	e08d      	b.n	80014e8 <__aeabi_ddiv+0x1e4>
 80013cc:	2901      	cmp	r1, #1
 80013ce:	d000      	beq.n	80013d2 <__aeabi_ddiv+0xce>
 80013d0:	e179      	b.n	80016c6 <__aeabi_ddiv+0x3c2>
 80013d2:	002e      	movs	r6, r5
 80013d4:	2200      	movs	r2, #0
 80013d6:	2300      	movs	r3, #0
 80013d8:	2400      	movs	r4, #0
 80013da:	4690      	mov	r8, r2
 80013dc:	051b      	lsls	r3, r3, #20
 80013de:	4323      	orrs	r3, r4
 80013e0:	07f6      	lsls	r6, r6, #31
 80013e2:	4333      	orrs	r3, r6
 80013e4:	4640      	mov	r0, r8
 80013e6:	0019      	movs	r1, r3
 80013e8:	b007      	add	sp, #28
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	46bb      	mov	fp, r7
 80013ee:	46b2      	mov	sl, r6
 80013f0:	46a9      	mov	r9, r5
 80013f2:	46a0      	mov	r8, r4
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2200      	movs	r2, #0
 80013f8:	2400      	movs	r4, #0
 80013fa:	4690      	mov	r8, r2
 80013fc:	4b48      	ldr	r3, [pc, #288]	@ (8001520 <__aeabi_ddiv+0x21c>)
 80013fe:	e7ed      	b.n	80013dc <__aeabi_ddiv+0xd8>
 8001400:	465a      	mov	r2, fp
 8001402:	9b00      	ldr	r3, [sp, #0]
 8001404:	431a      	orrs	r2, r3
 8001406:	4b49      	ldr	r3, [pc, #292]	@ (800152c <__aeabi_ddiv+0x228>)
 8001408:	469c      	mov	ip, r3
 800140a:	44e2      	add	sl, ip
 800140c:	2a00      	cmp	r2, #0
 800140e:	d159      	bne.n	80014c4 <__aeabi_ddiv+0x1c0>
 8001410:	2302      	movs	r3, #2
 8001412:	431c      	orrs	r4, r3
 8001414:	2300      	movs	r3, #0
 8001416:	2102      	movs	r1, #2
 8001418:	469b      	mov	fp, r3
 800141a:	e7b8      	b.n	800138e <__aeabi_ddiv+0x8a>
 800141c:	465a      	mov	r2, fp
 800141e:	9b00      	ldr	r3, [sp, #0]
 8001420:	431a      	orrs	r2, r3
 8001422:	d049      	beq.n	80014b8 <__aeabi_ddiv+0x1b4>
 8001424:	465b      	mov	r3, fp
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x128>
 800142a:	e19c      	b.n	8001766 <__aeabi_ddiv+0x462>
 800142c:	4658      	mov	r0, fp
 800142e:	f001 fb43 	bl	8002ab8 <__clzsi2>
 8001432:	0002      	movs	r2, r0
 8001434:	0003      	movs	r3, r0
 8001436:	3a0b      	subs	r2, #11
 8001438:	271d      	movs	r7, #29
 800143a:	9e00      	ldr	r6, [sp, #0]
 800143c:	1aba      	subs	r2, r7, r2
 800143e:	0019      	movs	r1, r3
 8001440:	4658      	mov	r0, fp
 8001442:	40d6      	lsrs	r6, r2
 8001444:	3908      	subs	r1, #8
 8001446:	4088      	lsls	r0, r1
 8001448:	0032      	movs	r2, r6
 800144a:	4302      	orrs	r2, r0
 800144c:	4693      	mov	fp, r2
 800144e:	9a00      	ldr	r2, [sp, #0]
 8001450:	408a      	lsls	r2, r1
 8001452:	4937      	ldr	r1, [pc, #220]	@ (8001530 <__aeabi_ddiv+0x22c>)
 8001454:	4453      	add	r3, sl
 8001456:	468a      	mov	sl, r1
 8001458:	2100      	movs	r1, #0
 800145a:	449a      	add	sl, r3
 800145c:	e797      	b.n	800138e <__aeabi_ddiv+0x8a>
 800145e:	465b      	mov	r3, fp
 8001460:	4303      	orrs	r3, r0
 8001462:	4699      	mov	r9, r3
 8001464:	d021      	beq.n	80014aa <__aeabi_ddiv+0x1a6>
 8001466:	465b      	mov	r3, fp
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x16a>
 800146c:	e169      	b.n	8001742 <__aeabi_ddiv+0x43e>
 800146e:	4658      	mov	r0, fp
 8001470:	f001 fb22 	bl	8002ab8 <__clzsi2>
 8001474:	230b      	movs	r3, #11
 8001476:	425b      	negs	r3, r3
 8001478:	469c      	mov	ip, r3
 800147a:	0002      	movs	r2, r0
 800147c:	4484      	add	ip, r0
 800147e:	4666      	mov	r6, ip
 8001480:	231d      	movs	r3, #29
 8001482:	1b9b      	subs	r3, r3, r6
 8001484:	0026      	movs	r6, r4
 8001486:	0011      	movs	r1, r2
 8001488:	4658      	mov	r0, fp
 800148a:	40de      	lsrs	r6, r3
 800148c:	3908      	subs	r1, #8
 800148e:	4088      	lsls	r0, r1
 8001490:	0033      	movs	r3, r6
 8001492:	4303      	orrs	r3, r0
 8001494:	4699      	mov	r9, r3
 8001496:	0023      	movs	r3, r4
 8001498:	408b      	lsls	r3, r1
 800149a:	4698      	mov	r8, r3
 800149c:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <__aeabi_ddiv+0x230>)
 800149e:	2400      	movs	r4, #0
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	469a      	mov	sl, r3
 80014a4:	2300      	movs	r3, #0
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	e753      	b.n	8001352 <__aeabi_ddiv+0x4e>
 80014aa:	2300      	movs	r3, #0
 80014ac:	4698      	mov	r8, r3
 80014ae:	469a      	mov	sl, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	2404      	movs	r4, #4
 80014b4:	9303      	str	r3, [sp, #12]
 80014b6:	e74c      	b.n	8001352 <__aeabi_ddiv+0x4e>
 80014b8:	2301      	movs	r3, #1
 80014ba:	431c      	orrs	r4, r3
 80014bc:	2300      	movs	r3, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	469b      	mov	fp, r3
 80014c2:	e764      	b.n	800138e <__aeabi_ddiv+0x8a>
 80014c4:	2303      	movs	r3, #3
 80014c6:	0032      	movs	r2, r6
 80014c8:	2103      	movs	r1, #3
 80014ca:	431c      	orrs	r4, r3
 80014cc:	e75f      	b.n	800138e <__aeabi_ddiv+0x8a>
 80014ce:	469a      	mov	sl, r3
 80014d0:	2303      	movs	r3, #3
 80014d2:	46d9      	mov	r9, fp
 80014d4:	240c      	movs	r4, #12
 80014d6:	9303      	str	r3, [sp, #12]
 80014d8:	e73b      	b.n	8001352 <__aeabi_ddiv+0x4e>
 80014da:	2300      	movs	r3, #0
 80014dc:	2480      	movs	r4, #128	@ 0x80
 80014de:	4698      	mov	r8, r3
 80014e0:	2600      	movs	r6, #0
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <__aeabi_ddiv+0x21c>)
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	e779      	b.n	80013dc <__aeabi_ddiv+0xd8>
 80014e8:	2480      	movs	r4, #128	@ 0x80
 80014ea:	465b      	mov	r3, fp
 80014ec:	0324      	lsls	r4, r4, #12
 80014ee:	431c      	orrs	r4, r3
 80014f0:	0324      	lsls	r4, r4, #12
 80014f2:	002e      	movs	r6, r5
 80014f4:	4690      	mov	r8, r2
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <__aeabi_ddiv+0x21c>)
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	e76f      	b.n	80013dc <__aeabi_ddiv+0xd8>
 80014fc:	2480      	movs	r4, #128	@ 0x80
 80014fe:	464b      	mov	r3, r9
 8001500:	0324      	lsls	r4, r4, #12
 8001502:	4223      	tst	r3, r4
 8001504:	d002      	beq.n	800150c <__aeabi_ddiv+0x208>
 8001506:	465b      	mov	r3, fp
 8001508:	4223      	tst	r3, r4
 800150a:	d0f0      	beq.n	80014ee <__aeabi_ddiv+0x1ea>
 800150c:	2480      	movs	r4, #128	@ 0x80
 800150e:	464b      	mov	r3, r9
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	431c      	orrs	r4, r3
 8001514:	0324      	lsls	r4, r4, #12
 8001516:	9e02      	ldr	r6, [sp, #8]
 8001518:	4b01      	ldr	r3, [pc, #4]	@ (8001520 <__aeabi_ddiv+0x21c>)
 800151a:	0b24      	lsrs	r4, r4, #12
 800151c:	e75e      	b.n	80013dc <__aeabi_ddiv+0xd8>
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	000007ff 	.word	0x000007ff
 8001524:	fffffc01 	.word	0xfffffc01
 8001528:	0800cd1c 	.word	0x0800cd1c
 800152c:	fffff801 	.word	0xfffff801
 8001530:	000003f3 	.word	0x000003f3
 8001534:	fffffc0d 	.word	0xfffffc0d
 8001538:	45cb      	cmp	fp, r9
 800153a:	d200      	bcs.n	800153e <__aeabi_ddiv+0x23a>
 800153c:	e0f8      	b.n	8001730 <__aeabi_ddiv+0x42c>
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0x23e>
 8001540:	e0f3      	b.n	800172a <__aeabi_ddiv+0x426>
 8001542:	2301      	movs	r3, #1
 8001544:	425b      	negs	r3, r3
 8001546:	469c      	mov	ip, r3
 8001548:	4644      	mov	r4, r8
 800154a:	4648      	mov	r0, r9
 800154c:	2500      	movs	r5, #0
 800154e:	44e2      	add	sl, ip
 8001550:	465b      	mov	r3, fp
 8001552:	0e17      	lsrs	r7, r2, #24
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	431f      	orrs	r7, r3
 8001558:	0c19      	lsrs	r1, r3, #16
 800155a:	043b      	lsls	r3, r7, #16
 800155c:	0212      	lsls	r2, r2, #8
 800155e:	9700      	str	r7, [sp, #0]
 8001560:	0c1f      	lsrs	r7, r3, #16
 8001562:	4691      	mov	r9, r2
 8001564:	9102      	str	r1, [sp, #8]
 8001566:	9703      	str	r7, [sp, #12]
 8001568:	f7fe fe70 	bl	800024c <__aeabi_uidivmod>
 800156c:	0002      	movs	r2, r0
 800156e:	437a      	muls	r2, r7
 8001570:	040b      	lsls	r3, r1, #16
 8001572:	0c21      	lsrs	r1, r4, #16
 8001574:	4680      	mov	r8, r0
 8001576:	4319      	orrs	r1, r3
 8001578:	428a      	cmp	r2, r1
 800157a:	d909      	bls.n	8001590 <__aeabi_ddiv+0x28c>
 800157c:	9f00      	ldr	r7, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	46bc      	mov	ip, r7
 8001582:	425b      	negs	r3, r3
 8001584:	4461      	add	r1, ip
 8001586:	469c      	mov	ip, r3
 8001588:	44e0      	add	r8, ip
 800158a:	428f      	cmp	r7, r1
 800158c:	d800      	bhi.n	8001590 <__aeabi_ddiv+0x28c>
 800158e:	e15c      	b.n	800184a <__aeabi_ddiv+0x546>
 8001590:	1a88      	subs	r0, r1, r2
 8001592:	9902      	ldr	r1, [sp, #8]
 8001594:	f7fe fe5a 	bl	800024c <__aeabi_uidivmod>
 8001598:	9a03      	ldr	r2, [sp, #12]
 800159a:	0424      	lsls	r4, r4, #16
 800159c:	4342      	muls	r2, r0
 800159e:	0409      	lsls	r1, r1, #16
 80015a0:	0c24      	lsrs	r4, r4, #16
 80015a2:	0003      	movs	r3, r0
 80015a4:	430c      	orrs	r4, r1
 80015a6:	42a2      	cmp	r2, r4
 80015a8:	d906      	bls.n	80015b8 <__aeabi_ddiv+0x2b4>
 80015aa:	9900      	ldr	r1, [sp, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	468c      	mov	ip, r1
 80015b0:	4464      	add	r4, ip
 80015b2:	42a1      	cmp	r1, r4
 80015b4:	d800      	bhi.n	80015b8 <__aeabi_ddiv+0x2b4>
 80015b6:	e142      	b.n	800183e <__aeabi_ddiv+0x53a>
 80015b8:	1aa0      	subs	r0, r4, r2
 80015ba:	4642      	mov	r2, r8
 80015bc:	0412      	lsls	r2, r2, #16
 80015be:	431a      	orrs	r2, r3
 80015c0:	4693      	mov	fp, r2
 80015c2:	464b      	mov	r3, r9
 80015c4:	4659      	mov	r1, fp
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	001f      	movs	r7, r3
 80015ca:	9304      	str	r3, [sp, #16]
 80015cc:	040b      	lsls	r3, r1, #16
 80015ce:	4649      	mov	r1, r9
 80015d0:	0409      	lsls	r1, r1, #16
 80015d2:	0c09      	lsrs	r1, r1, #16
 80015d4:	000c      	movs	r4, r1
 80015d6:	0c1b      	lsrs	r3, r3, #16
 80015d8:	435c      	muls	r4, r3
 80015da:	0c12      	lsrs	r2, r2, #16
 80015dc:	437b      	muls	r3, r7
 80015de:	4688      	mov	r8, r1
 80015e0:	4351      	muls	r1, r2
 80015e2:	437a      	muls	r2, r7
 80015e4:	0c27      	lsrs	r7, r4, #16
 80015e6:	46bc      	mov	ip, r7
 80015e8:	185b      	adds	r3, r3, r1
 80015ea:	4463      	add	r3, ip
 80015ec:	4299      	cmp	r1, r3
 80015ee:	d903      	bls.n	80015f8 <__aeabi_ddiv+0x2f4>
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	0249      	lsls	r1, r1, #9
 80015f4:	468c      	mov	ip, r1
 80015f6:	4462      	add	r2, ip
 80015f8:	0c19      	lsrs	r1, r3, #16
 80015fa:	0424      	lsls	r4, r4, #16
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c24      	lsrs	r4, r4, #16
 8001600:	188a      	adds	r2, r1, r2
 8001602:	191c      	adds	r4, r3, r4
 8001604:	4290      	cmp	r0, r2
 8001606:	d302      	bcc.n	800160e <__aeabi_ddiv+0x30a>
 8001608:	d116      	bne.n	8001638 <__aeabi_ddiv+0x334>
 800160a:	42a5      	cmp	r5, r4
 800160c:	d214      	bcs.n	8001638 <__aeabi_ddiv+0x334>
 800160e:	465b      	mov	r3, fp
 8001610:	9f00      	ldr	r7, [sp, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	444d      	add	r5, r9
 8001616:	9305      	str	r3, [sp, #20]
 8001618:	454d      	cmp	r5, r9
 800161a:	419b      	sbcs	r3, r3
 800161c:	46bc      	mov	ip, r7
 800161e:	425b      	negs	r3, r3
 8001620:	4463      	add	r3, ip
 8001622:	18c0      	adds	r0, r0, r3
 8001624:	4287      	cmp	r7, r0
 8001626:	d300      	bcc.n	800162a <__aeabi_ddiv+0x326>
 8001628:	e102      	b.n	8001830 <__aeabi_ddiv+0x52c>
 800162a:	4282      	cmp	r2, r0
 800162c:	d900      	bls.n	8001630 <__aeabi_ddiv+0x32c>
 800162e:	e129      	b.n	8001884 <__aeabi_ddiv+0x580>
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x330>
 8001632:	e124      	b.n	800187e <__aeabi_ddiv+0x57a>
 8001634:	9b05      	ldr	r3, [sp, #20]
 8001636:	469b      	mov	fp, r3
 8001638:	1b2c      	subs	r4, r5, r4
 800163a:	42a5      	cmp	r5, r4
 800163c:	41ad      	sbcs	r5, r5
 800163e:	9b00      	ldr	r3, [sp, #0]
 8001640:	1a80      	subs	r0, r0, r2
 8001642:	426d      	negs	r5, r5
 8001644:	1b40      	subs	r0, r0, r5
 8001646:	4283      	cmp	r3, r0
 8001648:	d100      	bne.n	800164c <__aeabi_ddiv+0x348>
 800164a:	e10f      	b.n	800186c <__aeabi_ddiv+0x568>
 800164c:	9902      	ldr	r1, [sp, #8]
 800164e:	f7fe fdfd 	bl	800024c <__aeabi_uidivmod>
 8001652:	9a03      	ldr	r2, [sp, #12]
 8001654:	040b      	lsls	r3, r1, #16
 8001656:	4342      	muls	r2, r0
 8001658:	0c21      	lsrs	r1, r4, #16
 800165a:	0005      	movs	r5, r0
 800165c:	4319      	orrs	r1, r3
 800165e:	428a      	cmp	r2, r1
 8001660:	d900      	bls.n	8001664 <__aeabi_ddiv+0x360>
 8001662:	e0cb      	b.n	80017fc <__aeabi_ddiv+0x4f8>
 8001664:	1a88      	subs	r0, r1, r2
 8001666:	9902      	ldr	r1, [sp, #8]
 8001668:	f7fe fdf0 	bl	800024c <__aeabi_uidivmod>
 800166c:	9a03      	ldr	r2, [sp, #12]
 800166e:	0424      	lsls	r4, r4, #16
 8001670:	4342      	muls	r2, r0
 8001672:	0409      	lsls	r1, r1, #16
 8001674:	0c24      	lsrs	r4, r4, #16
 8001676:	0003      	movs	r3, r0
 8001678:	430c      	orrs	r4, r1
 800167a:	42a2      	cmp	r2, r4
 800167c:	d900      	bls.n	8001680 <__aeabi_ddiv+0x37c>
 800167e:	e0ca      	b.n	8001816 <__aeabi_ddiv+0x512>
 8001680:	4641      	mov	r1, r8
 8001682:	1aa4      	subs	r4, r4, r2
 8001684:	042a      	lsls	r2, r5, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	9f04      	ldr	r7, [sp, #16]
 800168a:	0413      	lsls	r3, r2, #16
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	4359      	muls	r1, r3
 8001690:	4640      	mov	r0, r8
 8001692:	437b      	muls	r3, r7
 8001694:	469c      	mov	ip, r3
 8001696:	0c15      	lsrs	r5, r2, #16
 8001698:	4368      	muls	r0, r5
 800169a:	0c0b      	lsrs	r3, r1, #16
 800169c:	4484      	add	ip, r0
 800169e:	4463      	add	r3, ip
 80016a0:	437d      	muls	r5, r7
 80016a2:	4298      	cmp	r0, r3
 80016a4:	d903      	bls.n	80016ae <__aeabi_ddiv+0x3aa>
 80016a6:	2080      	movs	r0, #128	@ 0x80
 80016a8:	0240      	lsls	r0, r0, #9
 80016aa:	4684      	mov	ip, r0
 80016ac:	4465      	add	r5, ip
 80016ae:	0c18      	lsrs	r0, r3, #16
 80016b0:	0409      	lsls	r1, r1, #16
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	0c09      	lsrs	r1, r1, #16
 80016b6:	1940      	adds	r0, r0, r5
 80016b8:	185b      	adds	r3, r3, r1
 80016ba:	4284      	cmp	r4, r0
 80016bc:	d327      	bcc.n	800170e <__aeabi_ddiv+0x40a>
 80016be:	d023      	beq.n	8001708 <__aeabi_ddiv+0x404>
 80016c0:	2301      	movs	r3, #1
 80016c2:	0035      	movs	r5, r6
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b94      	ldr	r3, [pc, #592]	@ (8001918 <__aeabi_ddiv+0x614>)
 80016c8:	4453      	add	r3, sl
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dd60      	ble.n	8001790 <__aeabi_ddiv+0x48c>
 80016ce:	0751      	lsls	r1, r2, #29
 80016d0:	d000      	beq.n	80016d4 <__aeabi_ddiv+0x3d0>
 80016d2:	e086      	b.n	80017e2 <__aeabi_ddiv+0x4de>
 80016d4:	002e      	movs	r6, r5
 80016d6:	08d1      	lsrs	r1, r2, #3
 80016d8:	465a      	mov	r2, fp
 80016da:	01d2      	lsls	r2, r2, #7
 80016dc:	d506      	bpl.n	80016ec <__aeabi_ddiv+0x3e8>
 80016de:	465a      	mov	r2, fp
 80016e0:	4b8e      	ldr	r3, [pc, #568]	@ (800191c <__aeabi_ddiv+0x618>)
 80016e2:	401a      	ands	r2, r3
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	4693      	mov	fp, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4453      	add	r3, sl
 80016ec:	4a8c      	ldr	r2, [pc, #560]	@ (8001920 <__aeabi_ddiv+0x61c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_ddiv+0x3f0>
 80016f2:	e680      	b.n	80013f6 <__aeabi_ddiv+0xf2>
 80016f4:	465a      	mov	r2, fp
 80016f6:	0752      	lsls	r2, r2, #29
 80016f8:	430a      	orrs	r2, r1
 80016fa:	4690      	mov	r8, r2
 80016fc:	465a      	mov	r2, fp
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	0254      	lsls	r4, r2, #9
 8001702:	0b24      	lsrs	r4, r4, #12
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e669      	b.n	80013dc <__aeabi_ddiv+0xd8>
 8001708:	0035      	movs	r5, r6
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0db      	beq.n	80016c6 <__aeabi_ddiv+0x3c2>
 800170e:	9d00      	ldr	r5, [sp, #0]
 8001710:	1e51      	subs	r1, r2, #1
 8001712:	46ac      	mov	ip, r5
 8001714:	4464      	add	r4, ip
 8001716:	42ac      	cmp	r4, r5
 8001718:	d200      	bcs.n	800171c <__aeabi_ddiv+0x418>
 800171a:	e09e      	b.n	800185a <__aeabi_ddiv+0x556>
 800171c:	4284      	cmp	r4, r0
 800171e:	d200      	bcs.n	8001722 <__aeabi_ddiv+0x41e>
 8001720:	e0e1      	b.n	80018e6 <__aeabi_ddiv+0x5e2>
 8001722:	d100      	bne.n	8001726 <__aeabi_ddiv+0x422>
 8001724:	e0ee      	b.n	8001904 <__aeabi_ddiv+0x600>
 8001726:	000a      	movs	r2, r1
 8001728:	e7ca      	b.n	80016c0 <__aeabi_ddiv+0x3bc>
 800172a:	4542      	cmp	r2, r8
 800172c:	d900      	bls.n	8001730 <__aeabi_ddiv+0x42c>
 800172e:	e708      	b.n	8001542 <__aeabi_ddiv+0x23e>
 8001730:	464b      	mov	r3, r9
 8001732:	07dc      	lsls	r4, r3, #31
 8001734:	0858      	lsrs	r0, r3, #1
 8001736:	4643      	mov	r3, r8
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	431c      	orrs	r4, r3
 800173c:	4643      	mov	r3, r8
 800173e:	07dd      	lsls	r5, r3, #31
 8001740:	e706      	b.n	8001550 <__aeabi_ddiv+0x24c>
 8001742:	f001 f9b9 	bl	8002ab8 <__clzsi2>
 8001746:	2315      	movs	r3, #21
 8001748:	469c      	mov	ip, r3
 800174a:	4484      	add	ip, r0
 800174c:	0002      	movs	r2, r0
 800174e:	4663      	mov	r3, ip
 8001750:	3220      	adds	r2, #32
 8001752:	2b1c      	cmp	r3, #28
 8001754:	dc00      	bgt.n	8001758 <__aeabi_ddiv+0x454>
 8001756:	e692      	b.n	800147e <__aeabi_ddiv+0x17a>
 8001758:	0023      	movs	r3, r4
 800175a:	3808      	subs	r0, #8
 800175c:	4083      	lsls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4698      	mov	r8, r3
 8001764:	e69a      	b.n	800149c <__aeabi_ddiv+0x198>
 8001766:	f001 f9a7 	bl	8002ab8 <__clzsi2>
 800176a:	0002      	movs	r2, r0
 800176c:	0003      	movs	r3, r0
 800176e:	3215      	adds	r2, #21
 8001770:	3320      	adds	r3, #32
 8001772:	2a1c      	cmp	r2, #28
 8001774:	dc00      	bgt.n	8001778 <__aeabi_ddiv+0x474>
 8001776:	e65f      	b.n	8001438 <__aeabi_ddiv+0x134>
 8001778:	9900      	ldr	r1, [sp, #0]
 800177a:	3808      	subs	r0, #8
 800177c:	4081      	lsls	r1, r0
 800177e:	2200      	movs	r2, #0
 8001780:	468b      	mov	fp, r1
 8001782:	e666      	b.n	8001452 <__aeabi_ddiv+0x14e>
 8001784:	2200      	movs	r2, #0
 8001786:	002e      	movs	r6, r5
 8001788:	2400      	movs	r4, #0
 800178a:	4690      	mov	r8, r2
 800178c:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <__aeabi_ddiv+0x620>)
 800178e:	e625      	b.n	80013dc <__aeabi_ddiv+0xd8>
 8001790:	002e      	movs	r6, r5
 8001792:	2101      	movs	r1, #1
 8001794:	1ac9      	subs	r1, r1, r3
 8001796:	2938      	cmp	r1, #56	@ 0x38
 8001798:	dd00      	ble.n	800179c <__aeabi_ddiv+0x498>
 800179a:	e61b      	b.n	80013d4 <__aeabi_ddiv+0xd0>
 800179c:	291f      	cmp	r1, #31
 800179e:	dc7e      	bgt.n	800189e <__aeabi_ddiv+0x59a>
 80017a0:	4861      	ldr	r0, [pc, #388]	@ (8001928 <__aeabi_ddiv+0x624>)
 80017a2:	0014      	movs	r4, r2
 80017a4:	4450      	add	r0, sl
 80017a6:	465b      	mov	r3, fp
 80017a8:	4082      	lsls	r2, r0
 80017aa:	4083      	lsls	r3, r0
 80017ac:	40cc      	lsrs	r4, r1
 80017ae:	1e50      	subs	r0, r2, #1
 80017b0:	4182      	sbcs	r2, r0
 80017b2:	4323      	orrs	r3, r4
 80017b4:	431a      	orrs	r2, r3
 80017b6:	465b      	mov	r3, fp
 80017b8:	40cb      	lsrs	r3, r1
 80017ba:	0751      	lsls	r1, r2, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_ddiv+0x4ce>
 80017be:	210f      	movs	r1, #15
 80017c0:	4011      	ands	r1, r2
 80017c2:	2904      	cmp	r1, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_ddiv+0x4ce>
 80017c6:	1d11      	adds	r1, r2, #4
 80017c8:	4291      	cmp	r1, r2
 80017ca:	4192      	sbcs	r2, r2
 80017cc:	4252      	negs	r2, r2
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	000a      	movs	r2, r1
 80017d2:	0219      	lsls	r1, r3, #8
 80017d4:	d400      	bmi.n	80017d8 <__aeabi_ddiv+0x4d4>
 80017d6:	e09b      	b.n	8001910 <__aeabi_ddiv+0x60c>
 80017d8:	2200      	movs	r2, #0
 80017da:	2301      	movs	r3, #1
 80017dc:	2400      	movs	r4, #0
 80017de:	4690      	mov	r8, r2
 80017e0:	e5fc      	b.n	80013dc <__aeabi_ddiv+0xd8>
 80017e2:	210f      	movs	r1, #15
 80017e4:	4011      	ands	r1, r2
 80017e6:	2904      	cmp	r1, #4
 80017e8:	d100      	bne.n	80017ec <__aeabi_ddiv+0x4e8>
 80017ea:	e773      	b.n	80016d4 <__aeabi_ddiv+0x3d0>
 80017ec:	1d11      	adds	r1, r2, #4
 80017ee:	4291      	cmp	r1, r2
 80017f0:	4192      	sbcs	r2, r2
 80017f2:	4252      	negs	r2, r2
 80017f4:	002e      	movs	r6, r5
 80017f6:	08c9      	lsrs	r1, r1, #3
 80017f8:	4493      	add	fp, r2
 80017fa:	e76d      	b.n	80016d8 <__aeabi_ddiv+0x3d4>
 80017fc:	9b00      	ldr	r3, [sp, #0]
 80017fe:	3d01      	subs	r5, #1
 8001800:	469c      	mov	ip, r3
 8001802:	4461      	add	r1, ip
 8001804:	428b      	cmp	r3, r1
 8001806:	d900      	bls.n	800180a <__aeabi_ddiv+0x506>
 8001808:	e72c      	b.n	8001664 <__aeabi_ddiv+0x360>
 800180a:	428a      	cmp	r2, r1
 800180c:	d800      	bhi.n	8001810 <__aeabi_ddiv+0x50c>
 800180e:	e729      	b.n	8001664 <__aeabi_ddiv+0x360>
 8001810:	1e85      	subs	r5, r0, #2
 8001812:	4461      	add	r1, ip
 8001814:	e726      	b.n	8001664 <__aeabi_ddiv+0x360>
 8001816:	9900      	ldr	r1, [sp, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	468c      	mov	ip, r1
 800181c:	4464      	add	r4, ip
 800181e:	42a1      	cmp	r1, r4
 8001820:	d900      	bls.n	8001824 <__aeabi_ddiv+0x520>
 8001822:	e72d      	b.n	8001680 <__aeabi_ddiv+0x37c>
 8001824:	42a2      	cmp	r2, r4
 8001826:	d800      	bhi.n	800182a <__aeabi_ddiv+0x526>
 8001828:	e72a      	b.n	8001680 <__aeabi_ddiv+0x37c>
 800182a:	1e83      	subs	r3, r0, #2
 800182c:	4464      	add	r4, ip
 800182e:	e727      	b.n	8001680 <__aeabi_ddiv+0x37c>
 8001830:	4287      	cmp	r7, r0
 8001832:	d000      	beq.n	8001836 <__aeabi_ddiv+0x532>
 8001834:	e6fe      	b.n	8001634 <__aeabi_ddiv+0x330>
 8001836:	45a9      	cmp	r9, r5
 8001838:	d900      	bls.n	800183c <__aeabi_ddiv+0x538>
 800183a:	e6fb      	b.n	8001634 <__aeabi_ddiv+0x330>
 800183c:	e6f5      	b.n	800162a <__aeabi_ddiv+0x326>
 800183e:	42a2      	cmp	r2, r4
 8001840:	d800      	bhi.n	8001844 <__aeabi_ddiv+0x540>
 8001842:	e6b9      	b.n	80015b8 <__aeabi_ddiv+0x2b4>
 8001844:	1e83      	subs	r3, r0, #2
 8001846:	4464      	add	r4, ip
 8001848:	e6b6      	b.n	80015b8 <__aeabi_ddiv+0x2b4>
 800184a:	428a      	cmp	r2, r1
 800184c:	d800      	bhi.n	8001850 <__aeabi_ddiv+0x54c>
 800184e:	e69f      	b.n	8001590 <__aeabi_ddiv+0x28c>
 8001850:	46bc      	mov	ip, r7
 8001852:	1e83      	subs	r3, r0, #2
 8001854:	4698      	mov	r8, r3
 8001856:	4461      	add	r1, ip
 8001858:	e69a      	b.n	8001590 <__aeabi_ddiv+0x28c>
 800185a:	000a      	movs	r2, r1
 800185c:	4284      	cmp	r4, r0
 800185e:	d000      	beq.n	8001862 <__aeabi_ddiv+0x55e>
 8001860:	e72e      	b.n	80016c0 <__aeabi_ddiv+0x3bc>
 8001862:	454b      	cmp	r3, r9
 8001864:	d000      	beq.n	8001868 <__aeabi_ddiv+0x564>
 8001866:	e72b      	b.n	80016c0 <__aeabi_ddiv+0x3bc>
 8001868:	0035      	movs	r5, r6
 800186a:	e72c      	b.n	80016c6 <__aeabi_ddiv+0x3c2>
 800186c:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <__aeabi_ddiv+0x614>)
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <__aeabi_ddiv+0x628>)
 8001870:	4453      	add	r3, sl
 8001872:	4592      	cmp	sl, r2
 8001874:	db43      	blt.n	80018fe <__aeabi_ddiv+0x5fa>
 8001876:	2201      	movs	r2, #1
 8001878:	2100      	movs	r1, #0
 800187a:	4493      	add	fp, r2
 800187c:	e72c      	b.n	80016d8 <__aeabi_ddiv+0x3d4>
 800187e:	42ac      	cmp	r4, r5
 8001880:	d800      	bhi.n	8001884 <__aeabi_ddiv+0x580>
 8001882:	e6d7      	b.n	8001634 <__aeabi_ddiv+0x330>
 8001884:	2302      	movs	r3, #2
 8001886:	425b      	negs	r3, r3
 8001888:	469c      	mov	ip, r3
 800188a:	9900      	ldr	r1, [sp, #0]
 800188c:	444d      	add	r5, r9
 800188e:	454d      	cmp	r5, r9
 8001890:	419b      	sbcs	r3, r3
 8001892:	44e3      	add	fp, ip
 8001894:	468c      	mov	ip, r1
 8001896:	425b      	negs	r3, r3
 8001898:	4463      	add	r3, ip
 800189a:	18c0      	adds	r0, r0, r3
 800189c:	e6cc      	b.n	8001638 <__aeabi_ddiv+0x334>
 800189e:	201f      	movs	r0, #31
 80018a0:	4240      	negs	r0, r0
 80018a2:	1ac3      	subs	r3, r0, r3
 80018a4:	4658      	mov	r0, fp
 80018a6:	40d8      	lsrs	r0, r3
 80018a8:	2920      	cmp	r1, #32
 80018aa:	d004      	beq.n	80018b6 <__aeabi_ddiv+0x5b2>
 80018ac:	4659      	mov	r1, fp
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <__aeabi_ddiv+0x62c>)
 80018b0:	4453      	add	r3, sl
 80018b2:	4099      	lsls	r1, r3
 80018b4:	430a      	orrs	r2, r1
 80018b6:	1e53      	subs	r3, r2, #1
 80018b8:	419a      	sbcs	r2, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	0019      	movs	r1, r3
 80018be:	4302      	orrs	r2, r0
 80018c0:	2400      	movs	r4, #0
 80018c2:	4011      	ands	r1, r2
 80018c4:	4213      	tst	r3, r2
 80018c6:	d009      	beq.n	80018dc <__aeabi_ddiv+0x5d8>
 80018c8:	3308      	adds	r3, #8
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d01d      	beq.n	800190c <__aeabi_ddiv+0x608>
 80018d0:	1d13      	adds	r3, r2, #4
 80018d2:	4293      	cmp	r3, r2
 80018d4:	4189      	sbcs	r1, r1
 80018d6:	001a      	movs	r2, r3
 80018d8:	4249      	negs	r1, r1
 80018da:	0749      	lsls	r1, r1, #29
 80018dc:	08d2      	lsrs	r2, r2, #3
 80018de:	430a      	orrs	r2, r1
 80018e0:	4690      	mov	r8, r2
 80018e2:	2300      	movs	r3, #0
 80018e4:	e57a      	b.n	80013dc <__aeabi_ddiv+0xd8>
 80018e6:	4649      	mov	r1, r9
 80018e8:	9f00      	ldr	r7, [sp, #0]
 80018ea:	004d      	lsls	r5, r1, #1
 80018ec:	454d      	cmp	r5, r9
 80018ee:	4189      	sbcs	r1, r1
 80018f0:	46bc      	mov	ip, r7
 80018f2:	4249      	negs	r1, r1
 80018f4:	4461      	add	r1, ip
 80018f6:	46a9      	mov	r9, r5
 80018f8:	3a02      	subs	r2, #2
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	e7ae      	b.n	800185c <__aeabi_ddiv+0x558>
 80018fe:	2201      	movs	r2, #1
 8001900:	4252      	negs	r2, r2
 8001902:	e746      	b.n	8001792 <__aeabi_ddiv+0x48e>
 8001904:	4599      	cmp	r9, r3
 8001906:	d3ee      	bcc.n	80018e6 <__aeabi_ddiv+0x5e2>
 8001908:	000a      	movs	r2, r1
 800190a:	e7aa      	b.n	8001862 <__aeabi_ddiv+0x55e>
 800190c:	2100      	movs	r1, #0
 800190e:	e7e5      	b.n	80018dc <__aeabi_ddiv+0x5d8>
 8001910:	0759      	lsls	r1, r3, #29
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	0b1c      	lsrs	r4, r3, #12
 8001916:	e7e1      	b.n	80018dc <__aeabi_ddiv+0x5d8>
 8001918:	000003ff 	.word	0x000003ff
 800191c:	feffffff 	.word	0xfeffffff
 8001920:	000007fe 	.word	0x000007fe
 8001924:	000007ff 	.word	0x000007ff
 8001928:	0000041e 	.word	0x0000041e
 800192c:	fffffc02 	.word	0xfffffc02
 8001930:	0000043e 	.word	0x0000043e

08001934 <__eqdf2>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	4657      	mov	r7, sl
 8001938:	46de      	mov	lr, fp
 800193a:	464e      	mov	r6, r9
 800193c:	4645      	mov	r5, r8
 800193e:	b5e0      	push	{r5, r6, r7, lr}
 8001940:	000d      	movs	r5, r1
 8001942:	0004      	movs	r4, r0
 8001944:	0fe8      	lsrs	r0, r5, #31
 8001946:	4683      	mov	fp, r0
 8001948:	0309      	lsls	r1, r1, #12
 800194a:	0fd8      	lsrs	r0, r3, #31
 800194c:	0b09      	lsrs	r1, r1, #12
 800194e:	4682      	mov	sl, r0
 8001950:	4819      	ldr	r0, [pc, #100]	@ (80019b8 <__eqdf2+0x84>)
 8001952:	468c      	mov	ip, r1
 8001954:	031f      	lsls	r7, r3, #12
 8001956:	0069      	lsls	r1, r5, #1
 8001958:	005e      	lsls	r6, r3, #1
 800195a:	0d49      	lsrs	r1, r1, #21
 800195c:	0b3f      	lsrs	r7, r7, #12
 800195e:	0d76      	lsrs	r6, r6, #21
 8001960:	4281      	cmp	r1, r0
 8001962:	d018      	beq.n	8001996 <__eqdf2+0x62>
 8001964:	4286      	cmp	r6, r0
 8001966:	d00f      	beq.n	8001988 <__eqdf2+0x54>
 8001968:	2001      	movs	r0, #1
 800196a:	42b1      	cmp	r1, r6
 800196c:	d10d      	bne.n	800198a <__eqdf2+0x56>
 800196e:	45bc      	cmp	ip, r7
 8001970:	d10b      	bne.n	800198a <__eqdf2+0x56>
 8001972:	4294      	cmp	r4, r2
 8001974:	d109      	bne.n	800198a <__eqdf2+0x56>
 8001976:	45d3      	cmp	fp, sl
 8001978:	d01c      	beq.n	80019b4 <__eqdf2+0x80>
 800197a:	2900      	cmp	r1, #0
 800197c:	d105      	bne.n	800198a <__eqdf2+0x56>
 800197e:	4660      	mov	r0, ip
 8001980:	4320      	orrs	r0, r4
 8001982:	1e43      	subs	r3, r0, #1
 8001984:	4198      	sbcs	r0, r3
 8001986:	e000      	b.n	800198a <__eqdf2+0x56>
 8001988:	2001      	movs	r0, #1
 800198a:	bcf0      	pop	{r4, r5, r6, r7}
 800198c:	46bb      	mov	fp, r7
 800198e:	46b2      	mov	sl, r6
 8001990:	46a9      	mov	r9, r5
 8001992:	46a0      	mov	r8, r4
 8001994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001996:	2001      	movs	r0, #1
 8001998:	428e      	cmp	r6, r1
 800199a:	d1f6      	bne.n	800198a <__eqdf2+0x56>
 800199c:	4661      	mov	r1, ip
 800199e:	4339      	orrs	r1, r7
 80019a0:	000f      	movs	r7, r1
 80019a2:	4317      	orrs	r7, r2
 80019a4:	4327      	orrs	r7, r4
 80019a6:	d1f0      	bne.n	800198a <__eqdf2+0x56>
 80019a8:	465b      	mov	r3, fp
 80019aa:	4652      	mov	r2, sl
 80019ac:	1a98      	subs	r0, r3, r2
 80019ae:	1e43      	subs	r3, r0, #1
 80019b0:	4198      	sbcs	r0, r3
 80019b2:	e7ea      	b.n	800198a <__eqdf2+0x56>
 80019b4:	2000      	movs	r0, #0
 80019b6:	e7e8      	b.n	800198a <__eqdf2+0x56>
 80019b8:	000007ff 	.word	0x000007ff

080019bc <__gedf2>:
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	4657      	mov	r7, sl
 80019c0:	464e      	mov	r6, r9
 80019c2:	4645      	mov	r5, r8
 80019c4:	46de      	mov	lr, fp
 80019c6:	b5e0      	push	{r5, r6, r7, lr}
 80019c8:	000d      	movs	r5, r1
 80019ca:	030e      	lsls	r6, r1, #12
 80019cc:	0049      	lsls	r1, r1, #1
 80019ce:	0d49      	lsrs	r1, r1, #21
 80019d0:	468a      	mov	sl, r1
 80019d2:	0fdf      	lsrs	r7, r3, #31
 80019d4:	0fe9      	lsrs	r1, r5, #31
 80019d6:	46bc      	mov	ip, r7
 80019d8:	b083      	sub	sp, #12
 80019da:	4f2f      	ldr	r7, [pc, #188]	@ (8001a98 <__gedf2+0xdc>)
 80019dc:	0004      	movs	r4, r0
 80019de:	4680      	mov	r8, r0
 80019e0:	9101      	str	r1, [sp, #4]
 80019e2:	0058      	lsls	r0, r3, #1
 80019e4:	0319      	lsls	r1, r3, #12
 80019e6:	4691      	mov	r9, r2
 80019e8:	0b36      	lsrs	r6, r6, #12
 80019ea:	0b09      	lsrs	r1, r1, #12
 80019ec:	0d40      	lsrs	r0, r0, #21
 80019ee:	45ba      	cmp	sl, r7
 80019f0:	d01d      	beq.n	8001a2e <__gedf2+0x72>
 80019f2:	42b8      	cmp	r0, r7
 80019f4:	d00d      	beq.n	8001a12 <__gedf2+0x56>
 80019f6:	4657      	mov	r7, sl
 80019f8:	2f00      	cmp	r7, #0
 80019fa:	d12a      	bne.n	8001a52 <__gedf2+0x96>
 80019fc:	4334      	orrs	r4, r6
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d124      	bne.n	8001a4c <__gedf2+0x90>
 8001a02:	430a      	orrs	r2, r1
 8001a04:	d036      	beq.n	8001a74 <__gedf2+0xb8>
 8001a06:	2c00      	cmp	r4, #0
 8001a08:	d141      	bne.n	8001a8e <__gedf2+0xd2>
 8001a0a:	4663      	mov	r3, ip
 8001a0c:	0058      	lsls	r0, r3, #1
 8001a0e:	3801      	subs	r0, #1
 8001a10:	e015      	b.n	8001a3e <__gedf2+0x82>
 8001a12:	4311      	orrs	r1, r2
 8001a14:	d138      	bne.n	8001a88 <__gedf2+0xcc>
 8001a16:	4653      	mov	r3, sl
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <__gedf2+0x64>
 8001a1c:	4326      	orrs	r6, r4
 8001a1e:	d0f4      	beq.n	8001a0a <__gedf2+0x4e>
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	4563      	cmp	r3, ip
 8001a24:	d107      	bne.n	8001a36 <__gedf2+0x7a>
 8001a26:	9b01      	ldr	r3, [sp, #4]
 8001a28:	0058      	lsls	r0, r3, #1
 8001a2a:	3801      	subs	r0, #1
 8001a2c:	e007      	b.n	8001a3e <__gedf2+0x82>
 8001a2e:	4326      	orrs	r6, r4
 8001a30:	d12a      	bne.n	8001a88 <__gedf2+0xcc>
 8001a32:	4550      	cmp	r0, sl
 8001a34:	d021      	beq.n	8001a7a <__gedf2+0xbe>
 8001a36:	2001      	movs	r0, #1
 8001a38:	9b01      	ldr	r3, [sp, #4]
 8001a3a:	425f      	negs	r7, r3
 8001a3c:	4338      	orrs	r0, r7
 8001a3e:	b003      	add	sp, #12
 8001a40:	bcf0      	pop	{r4, r5, r6, r7}
 8001a42:	46bb      	mov	fp, r7
 8001a44:	46b2      	mov	sl, r6
 8001a46:	46a9      	mov	r9, r5
 8001a48:	46a0      	mov	r8, r4
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	2c00      	cmp	r4, #0
 8001a4e:	d0dc      	beq.n	8001a0a <__gedf2+0x4e>
 8001a50:	e7e6      	b.n	8001a20 <__gedf2+0x64>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d0ef      	beq.n	8001a36 <__gedf2+0x7a>
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	4563      	cmp	r3, ip
 8001a5a:	d1ec      	bne.n	8001a36 <__gedf2+0x7a>
 8001a5c:	4582      	cmp	sl, r0
 8001a5e:	dcea      	bgt.n	8001a36 <__gedf2+0x7a>
 8001a60:	dbe1      	blt.n	8001a26 <__gedf2+0x6a>
 8001a62:	428e      	cmp	r6, r1
 8001a64:	d8e7      	bhi.n	8001a36 <__gedf2+0x7a>
 8001a66:	d1de      	bne.n	8001a26 <__gedf2+0x6a>
 8001a68:	45c8      	cmp	r8, r9
 8001a6a:	d8e4      	bhi.n	8001a36 <__gedf2+0x7a>
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	45c8      	cmp	r8, r9
 8001a70:	d2e5      	bcs.n	8001a3e <__gedf2+0x82>
 8001a72:	e7d8      	b.n	8001a26 <__gedf2+0x6a>
 8001a74:	2c00      	cmp	r4, #0
 8001a76:	d0e2      	beq.n	8001a3e <__gedf2+0x82>
 8001a78:	e7dd      	b.n	8001a36 <__gedf2+0x7a>
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	d104      	bne.n	8001a88 <__gedf2+0xcc>
 8001a7e:	9b01      	ldr	r3, [sp, #4]
 8001a80:	4563      	cmp	r3, ip
 8001a82:	d1d8      	bne.n	8001a36 <__gedf2+0x7a>
 8001a84:	2000      	movs	r0, #0
 8001a86:	e7da      	b.n	8001a3e <__gedf2+0x82>
 8001a88:	2002      	movs	r0, #2
 8001a8a:	4240      	negs	r0, r0
 8001a8c:	e7d7      	b.n	8001a3e <__gedf2+0x82>
 8001a8e:	9b01      	ldr	r3, [sp, #4]
 8001a90:	4563      	cmp	r3, ip
 8001a92:	d0e6      	beq.n	8001a62 <__gedf2+0xa6>
 8001a94:	e7cf      	b.n	8001a36 <__gedf2+0x7a>
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	000007ff 	.word	0x000007ff

08001a9c <__ledf2>:
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	4657      	mov	r7, sl
 8001aa0:	464e      	mov	r6, r9
 8001aa2:	4645      	mov	r5, r8
 8001aa4:	46de      	mov	lr, fp
 8001aa6:	b5e0      	push	{r5, r6, r7, lr}
 8001aa8:	000d      	movs	r5, r1
 8001aaa:	030e      	lsls	r6, r1, #12
 8001aac:	0049      	lsls	r1, r1, #1
 8001aae:	0d49      	lsrs	r1, r1, #21
 8001ab0:	468a      	mov	sl, r1
 8001ab2:	0fdf      	lsrs	r7, r3, #31
 8001ab4:	0fe9      	lsrs	r1, r5, #31
 8001ab6:	46bc      	mov	ip, r7
 8001ab8:	b083      	sub	sp, #12
 8001aba:	4f2e      	ldr	r7, [pc, #184]	@ (8001b74 <__ledf2+0xd8>)
 8001abc:	0004      	movs	r4, r0
 8001abe:	4680      	mov	r8, r0
 8001ac0:	9101      	str	r1, [sp, #4]
 8001ac2:	0058      	lsls	r0, r3, #1
 8001ac4:	0319      	lsls	r1, r3, #12
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	0b36      	lsrs	r6, r6, #12
 8001aca:	0b09      	lsrs	r1, r1, #12
 8001acc:	0d40      	lsrs	r0, r0, #21
 8001ace:	45ba      	cmp	sl, r7
 8001ad0:	d01e      	beq.n	8001b10 <__ledf2+0x74>
 8001ad2:	42b8      	cmp	r0, r7
 8001ad4:	d00d      	beq.n	8001af2 <__ledf2+0x56>
 8001ad6:	4657      	mov	r7, sl
 8001ad8:	2f00      	cmp	r7, #0
 8001ada:	d127      	bne.n	8001b2c <__ledf2+0x90>
 8001adc:	4334      	orrs	r4, r6
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d133      	bne.n	8001b4a <__ledf2+0xae>
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	d034      	beq.n	8001b50 <__ledf2+0xb4>
 8001ae6:	2c00      	cmp	r4, #0
 8001ae8:	d140      	bne.n	8001b6c <__ledf2+0xd0>
 8001aea:	4663      	mov	r3, ip
 8001aec:	0058      	lsls	r0, r3, #1
 8001aee:	3801      	subs	r0, #1
 8001af0:	e015      	b.n	8001b1e <__ledf2+0x82>
 8001af2:	4311      	orrs	r1, r2
 8001af4:	d112      	bne.n	8001b1c <__ledf2+0x80>
 8001af6:	4653      	mov	r3, sl
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <__ledf2+0x64>
 8001afc:	4326      	orrs	r6, r4
 8001afe:	d0f4      	beq.n	8001aea <__ledf2+0x4e>
 8001b00:	9b01      	ldr	r3, [sp, #4]
 8001b02:	4563      	cmp	r3, ip
 8001b04:	d01d      	beq.n	8001b42 <__ledf2+0xa6>
 8001b06:	2001      	movs	r0, #1
 8001b08:	9b01      	ldr	r3, [sp, #4]
 8001b0a:	425f      	negs	r7, r3
 8001b0c:	4338      	orrs	r0, r7
 8001b0e:	e006      	b.n	8001b1e <__ledf2+0x82>
 8001b10:	4326      	orrs	r6, r4
 8001b12:	d103      	bne.n	8001b1c <__ledf2+0x80>
 8001b14:	4550      	cmp	r0, sl
 8001b16:	d1f6      	bne.n	8001b06 <__ledf2+0x6a>
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	d01c      	beq.n	8001b56 <__ledf2+0xba>
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	b003      	add	sp, #12
 8001b20:	bcf0      	pop	{r4, r5, r6, r7}
 8001b22:	46bb      	mov	fp, r7
 8001b24:	46b2      	mov	sl, r6
 8001b26:	46a9      	mov	r9, r5
 8001b28:	46a0      	mov	r8, r4
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d0ea      	beq.n	8001b06 <__ledf2+0x6a>
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	4563      	cmp	r3, ip
 8001b34:	d1e7      	bne.n	8001b06 <__ledf2+0x6a>
 8001b36:	4582      	cmp	sl, r0
 8001b38:	dce5      	bgt.n	8001b06 <__ledf2+0x6a>
 8001b3a:	db02      	blt.n	8001b42 <__ledf2+0xa6>
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	d8e2      	bhi.n	8001b06 <__ledf2+0x6a>
 8001b40:	d00e      	beq.n	8001b60 <__ledf2+0xc4>
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	0058      	lsls	r0, r3, #1
 8001b46:	3801      	subs	r0, #1
 8001b48:	e7e9      	b.n	8001b1e <__ledf2+0x82>
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d0cd      	beq.n	8001aea <__ledf2+0x4e>
 8001b4e:	e7d7      	b.n	8001b00 <__ledf2+0x64>
 8001b50:	2c00      	cmp	r4, #0
 8001b52:	d0e4      	beq.n	8001b1e <__ledf2+0x82>
 8001b54:	e7d7      	b.n	8001b06 <__ledf2+0x6a>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	2000      	movs	r0, #0
 8001b5a:	4563      	cmp	r3, ip
 8001b5c:	d0df      	beq.n	8001b1e <__ledf2+0x82>
 8001b5e:	e7d2      	b.n	8001b06 <__ledf2+0x6a>
 8001b60:	45c8      	cmp	r8, r9
 8001b62:	d8d0      	bhi.n	8001b06 <__ledf2+0x6a>
 8001b64:	2000      	movs	r0, #0
 8001b66:	45c8      	cmp	r8, r9
 8001b68:	d2d9      	bcs.n	8001b1e <__ledf2+0x82>
 8001b6a:	e7ea      	b.n	8001b42 <__ledf2+0xa6>
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	4563      	cmp	r3, ip
 8001b70:	d0e4      	beq.n	8001b3c <__ledf2+0xa0>
 8001b72:	e7c8      	b.n	8001b06 <__ledf2+0x6a>
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__aeabi_dmul>:
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	4657      	mov	r7, sl
 8001b7c:	464e      	mov	r6, r9
 8001b7e:	46de      	mov	lr, fp
 8001b80:	4645      	mov	r5, r8
 8001b82:	b5e0      	push	{r5, r6, r7, lr}
 8001b84:	001f      	movs	r7, r3
 8001b86:	030b      	lsls	r3, r1, #12
 8001b88:	0b1b      	lsrs	r3, r3, #12
 8001b8a:	0016      	movs	r6, r2
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	0fca      	lsrs	r2, r1, #31
 8001b90:	004b      	lsls	r3, r1, #1
 8001b92:	0004      	movs	r4, r0
 8001b94:	4691      	mov	r9, r2
 8001b96:	b085      	sub	sp, #20
 8001b98:	0d5b      	lsrs	r3, r3, #21
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dmul+0x26>
 8001b9c:	e1cf      	b.n	8001f3e <__aeabi_dmul+0x3c6>
 8001b9e:	4acd      	ldr	r2, [pc, #820]	@ (8001ed4 <__aeabi_dmul+0x35c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d055      	beq.n	8001c50 <__aeabi_dmul+0xd8>
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	0f42      	lsrs	r2, r0, #29
 8001ba8:	00c9      	lsls	r1, r1, #3
 8001baa:	430a      	orrs	r2, r1
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	0409      	lsls	r1, r1, #16
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	00c2      	lsls	r2, r0, #3
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	4ac8      	ldr	r2, [pc, #800]	@ (8001ed8 <__aeabi_dmul+0x360>)
 8001bb8:	468a      	mov	sl, r1
 8001bba:	4693      	mov	fp, r2
 8001bbc:	449b      	add	fp, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	033c      	lsls	r4, r7, #12
 8001bc6:	007b      	lsls	r3, r7, #1
 8001bc8:	0ffa      	lsrs	r2, r7, #31
 8001bca:	9601      	str	r6, [sp, #4]
 8001bcc:	0b24      	lsrs	r4, r4, #12
 8001bce:	0d5b      	lsrs	r3, r3, #21
 8001bd0:	9200      	str	r2, [sp, #0]
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dmul+0x5e>
 8001bd4:	e188      	b.n	8001ee8 <__aeabi_dmul+0x370>
 8001bd6:	4abf      	ldr	r2, [pc, #764]	@ (8001ed4 <__aeabi_dmul+0x35c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d100      	bne.n	8001bde <__aeabi_dmul+0x66>
 8001bdc:	e092      	b.n	8001d04 <__aeabi_dmul+0x18c>
 8001bde:	4abe      	ldr	r2, [pc, #760]	@ (8001ed8 <__aeabi_dmul+0x360>)
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	449b      	add	fp, r3
 8001be6:	2d0a      	cmp	r5, #10
 8001be8:	dc42      	bgt.n	8001c70 <__aeabi_dmul+0xf8>
 8001bea:	00e4      	lsls	r4, r4, #3
 8001bec:	0f73      	lsrs	r3, r6, #29
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	2480      	movs	r4, #128	@ 0x80
 8001bf2:	4649      	mov	r1, r9
 8001bf4:	0424      	lsls	r4, r4, #16
 8001bf6:	431c      	orrs	r4, r3
 8001bf8:	00f3      	lsls	r3, r6, #3
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b00      	ldr	r3, [sp, #0]
 8001bfe:	2000      	movs	r0, #0
 8001c00:	4059      	eors	r1, r3
 8001c02:	b2cb      	uxtb	r3, r1
 8001c04:	9303      	str	r3, [sp, #12]
 8001c06:	2d02      	cmp	r5, #2
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dmul+0x94>
 8001c0a:	e094      	b.n	8001d36 <__aeabi_dmul+0x1be>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	40ab      	lsls	r3, r5
 8001c10:	001d      	movs	r5, r3
 8001c12:	23a6      	movs	r3, #166	@ 0xa6
 8001c14:	002a      	movs	r2, r5
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	421d      	tst	r5, r3
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dmul+0xa8>
 8001c1e:	e229      	b.n	8002074 <__aeabi_dmul+0x4fc>
 8001c20:	2390      	movs	r3, #144	@ 0x90
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	421d      	tst	r5, r3
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dmul+0xb2>
 8001c28:	e24d      	b.n	80020c6 <__aeabi_dmul+0x54e>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2480      	movs	r4, #128	@ 0x80
 8001c2e:	4699      	mov	r9, r3
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	4ba8      	ldr	r3, [pc, #672]	@ (8001ed4 <__aeabi_dmul+0x35c>)
 8001c34:	0010      	movs	r0, r2
 8001c36:	464a      	mov	r2, r9
 8001c38:	051b      	lsls	r3, r3, #20
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	07d2      	lsls	r2, r2, #31
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	b005      	add	sp, #20
 8001c44:	bcf0      	pop	{r4, r5, r6, r7}
 8001c46:	46bb      	mov	fp, r7
 8001c48:	46b2      	mov	sl, r6
 8001c4a:	46a9      	mov	r9, r5
 8001c4c:	46a0      	mov	r8, r4
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	4652      	mov	r2, sl
 8001c52:	4302      	orrs	r2, r0
 8001c54:	4690      	mov	r8, r2
 8001c56:	d000      	beq.n	8001c5a <__aeabi_dmul+0xe2>
 8001c58:	e1ac      	b.n	8001fb4 <__aeabi_dmul+0x43c>
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	4692      	mov	sl, r2
 8001c60:	2508      	movs	r5, #8
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	e7ae      	b.n	8001bc4 <__aeabi_dmul+0x4c>
 8001c66:	9b00      	ldr	r3, [sp, #0]
 8001c68:	46a2      	mov	sl, r4
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9b01      	ldr	r3, [sp, #4]
 8001c6e:	4698      	mov	r8, r3
 8001c70:	9b02      	ldr	r3, [sp, #8]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dmul+0x100>
 8001c76:	e1ca      	b.n	800200e <__aeabi_dmul+0x496>
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dmul+0x106>
 8001c7c:	e192      	b.n	8001fa4 <__aeabi_dmul+0x42c>
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d110      	bne.n	8001ca4 <__aeabi_dmul+0x12c>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2400      	movs	r4, #0
 8001c86:	2200      	movs	r2, #0
 8001c88:	e7d4      	b.n	8001c34 <__aeabi_dmul+0xbc>
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	087b      	lsrs	r3, r7, #1
 8001c8e:	403a      	ands	r2, r7
 8001c90:	4313      	orrs	r3, r2
 8001c92:	4652      	mov	r2, sl
 8001c94:	07d2      	lsls	r2, r2, #31
 8001c96:	4313      	orrs	r3, r2
 8001c98:	4698      	mov	r8, r3
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	9b03      	ldr	r3, [sp, #12]
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	465b      	mov	r3, fp
 8001ca6:	1c58      	adds	r0, r3, #1
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	445b      	add	r3, fp
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_dmul+0x13c>
 8001cb2:	e1b1      	b.n	8002018 <__aeabi_dmul+0x4a0>
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	0752      	lsls	r2, r2, #29
 8001cb8:	d00b      	beq.n	8001cd2 <__aeabi_dmul+0x15a>
 8001cba:	220f      	movs	r2, #15
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	2a04      	cmp	r2, #4
 8001cc2:	d006      	beq.n	8001cd2 <__aeabi_dmul+0x15a>
 8001cc4:	4642      	mov	r2, r8
 8001cc6:	1d11      	adds	r1, r2, #4
 8001cc8:	4541      	cmp	r1, r8
 8001cca:	4192      	sbcs	r2, r2
 8001ccc:	4688      	mov	r8, r1
 8001cce:	4252      	negs	r2, r2
 8001cd0:	4492      	add	sl, r2
 8001cd2:	4652      	mov	r2, sl
 8001cd4:	01d2      	lsls	r2, r2, #7
 8001cd6:	d506      	bpl.n	8001ce6 <__aeabi_dmul+0x16e>
 8001cd8:	4652      	mov	r2, sl
 8001cda:	4b80      	ldr	r3, [pc, #512]	@ (8001edc <__aeabi_dmul+0x364>)
 8001cdc:	401a      	ands	r2, r3
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	4692      	mov	sl, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	18c3      	adds	r3, r0, r3
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <__aeabi_dmul+0x368>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0x176>
 8001cec:	e18f      	b.n	800200e <__aeabi_dmul+0x496>
 8001cee:	4642      	mov	r2, r8
 8001cf0:	08d1      	lsrs	r1, r2, #3
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	0752      	lsls	r2, r2, #29
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	4651      	mov	r1, sl
 8001cfa:	055b      	lsls	r3, r3, #21
 8001cfc:	024c      	lsls	r4, r1, #9
 8001cfe:	0b24      	lsrs	r4, r4, #12
 8001d00:	0d5b      	lsrs	r3, r3, #21
 8001d02:	e797      	b.n	8001c34 <__aeabi_dmul+0xbc>
 8001d04:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <__aeabi_dmul+0x35c>)
 8001d06:	4326      	orrs	r6, r4
 8001d08:	469c      	mov	ip, r3
 8001d0a:	44e3      	add	fp, ip
 8001d0c:	2e00      	cmp	r6, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x19a>
 8001d10:	e16f      	b.n	8001ff2 <__aeabi_dmul+0x47a>
 8001d12:	2303      	movs	r3, #3
 8001d14:	4649      	mov	r1, r9
 8001d16:	431d      	orrs	r5, r3
 8001d18:	9b00      	ldr	r3, [sp, #0]
 8001d1a:	4059      	eors	r1, r3
 8001d1c:	b2cb      	uxtb	r3, r1
 8001d1e:	9303      	str	r3, [sp, #12]
 8001d20:	2d0a      	cmp	r5, #10
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_dmul+0x1ae>
 8001d24:	e133      	b.n	8001f8e <__aeabi_dmul+0x416>
 8001d26:	2301      	movs	r3, #1
 8001d28:	40ab      	lsls	r3, r5
 8001d2a:	001d      	movs	r5, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2288      	movs	r2, #136	@ 0x88
 8001d32:	422a      	tst	r2, r5
 8001d34:	d197      	bne.n	8001c66 <__aeabi_dmul+0xee>
 8001d36:	4642      	mov	r2, r8
 8001d38:	4643      	mov	r3, r8
 8001d3a:	0412      	lsls	r2, r2, #16
 8001d3c:	0c12      	lsrs	r2, r2, #16
 8001d3e:	0016      	movs	r6, r2
 8001d40:	9801      	ldr	r0, [sp, #4]
 8001d42:	0c1d      	lsrs	r5, r3, #16
 8001d44:	0c03      	lsrs	r3, r0, #16
 8001d46:	0400      	lsls	r0, r0, #16
 8001d48:	0c00      	lsrs	r0, r0, #16
 8001d4a:	4346      	muls	r6, r0
 8001d4c:	46b4      	mov	ip, r6
 8001d4e:	001e      	movs	r6, r3
 8001d50:	436e      	muls	r6, r5
 8001d52:	9600      	str	r6, [sp, #0]
 8001d54:	0016      	movs	r6, r2
 8001d56:	0007      	movs	r7, r0
 8001d58:	435e      	muls	r6, r3
 8001d5a:	4661      	mov	r1, ip
 8001d5c:	46b0      	mov	r8, r6
 8001d5e:	436f      	muls	r7, r5
 8001d60:	0c0e      	lsrs	r6, r1, #16
 8001d62:	44b8      	add	r8, r7
 8001d64:	4446      	add	r6, r8
 8001d66:	42b7      	cmp	r7, r6
 8001d68:	d905      	bls.n	8001d76 <__aeabi_dmul+0x1fe>
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	0249      	lsls	r1, r1, #9
 8001d6e:	4688      	mov	r8, r1
 8001d70:	9f00      	ldr	r7, [sp, #0]
 8001d72:	4447      	add	r7, r8
 8001d74:	9700      	str	r7, [sp, #0]
 8001d76:	4661      	mov	r1, ip
 8001d78:	0409      	lsls	r1, r1, #16
 8001d7a:	0c09      	lsrs	r1, r1, #16
 8001d7c:	0c37      	lsrs	r7, r6, #16
 8001d7e:	0436      	lsls	r6, r6, #16
 8001d80:	468c      	mov	ip, r1
 8001d82:	0031      	movs	r1, r6
 8001d84:	4461      	add	r1, ip
 8001d86:	9101      	str	r1, [sp, #4]
 8001d88:	0011      	movs	r1, r2
 8001d8a:	0c26      	lsrs	r6, r4, #16
 8001d8c:	0424      	lsls	r4, r4, #16
 8001d8e:	0c24      	lsrs	r4, r4, #16
 8001d90:	4361      	muls	r1, r4
 8001d92:	468c      	mov	ip, r1
 8001d94:	0021      	movs	r1, r4
 8001d96:	4369      	muls	r1, r5
 8001d98:	4689      	mov	r9, r1
 8001d9a:	4661      	mov	r1, ip
 8001d9c:	0c09      	lsrs	r1, r1, #16
 8001d9e:	4688      	mov	r8, r1
 8001da0:	4372      	muls	r2, r6
 8001da2:	444a      	add	r2, r9
 8001da4:	4442      	add	r2, r8
 8001da6:	4375      	muls	r5, r6
 8001da8:	4591      	cmp	r9, r2
 8001daa:	d903      	bls.n	8001db4 <__aeabi_dmul+0x23c>
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	0249      	lsls	r1, r1, #9
 8001db0:	4688      	mov	r8, r1
 8001db2:	4445      	add	r5, r8
 8001db4:	0c11      	lsrs	r1, r2, #16
 8001db6:	4688      	mov	r8, r1
 8001db8:	4661      	mov	r1, ip
 8001dba:	0409      	lsls	r1, r1, #16
 8001dbc:	0c09      	lsrs	r1, r1, #16
 8001dbe:	468c      	mov	ip, r1
 8001dc0:	0412      	lsls	r2, r2, #16
 8001dc2:	4462      	add	r2, ip
 8001dc4:	18b9      	adds	r1, r7, r2
 8001dc6:	9102      	str	r1, [sp, #8]
 8001dc8:	4651      	mov	r1, sl
 8001dca:	0c09      	lsrs	r1, r1, #16
 8001dcc:	468c      	mov	ip, r1
 8001dce:	4651      	mov	r1, sl
 8001dd0:	040f      	lsls	r7, r1, #16
 8001dd2:	0c3f      	lsrs	r7, r7, #16
 8001dd4:	0039      	movs	r1, r7
 8001dd6:	4341      	muls	r1, r0
 8001dd8:	4445      	add	r5, r8
 8001dda:	4688      	mov	r8, r1
 8001ddc:	4661      	mov	r1, ip
 8001dde:	4341      	muls	r1, r0
 8001de0:	468a      	mov	sl, r1
 8001de2:	4641      	mov	r1, r8
 8001de4:	4660      	mov	r0, ip
 8001de6:	0c09      	lsrs	r1, r1, #16
 8001de8:	4689      	mov	r9, r1
 8001dea:	4358      	muls	r0, r3
 8001dec:	437b      	muls	r3, r7
 8001dee:	4453      	add	r3, sl
 8001df0:	444b      	add	r3, r9
 8001df2:	459a      	cmp	sl, r3
 8001df4:	d903      	bls.n	8001dfe <__aeabi_dmul+0x286>
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	0249      	lsls	r1, r1, #9
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	4448      	add	r0, r9
 8001dfe:	0c19      	lsrs	r1, r3, #16
 8001e00:	4689      	mov	r9, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	0409      	lsls	r1, r1, #16
 8001e06:	0c09      	lsrs	r1, r1, #16
 8001e08:	4688      	mov	r8, r1
 8001e0a:	0039      	movs	r1, r7
 8001e0c:	4361      	muls	r1, r4
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	4443      	add	r3, r8
 8001e12:	4688      	mov	r8, r1
 8001e14:	4661      	mov	r1, ip
 8001e16:	434c      	muls	r4, r1
 8001e18:	4371      	muls	r1, r6
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	4377      	muls	r7, r6
 8001e20:	0c0e      	lsrs	r6, r1, #16
 8001e22:	193f      	adds	r7, r7, r4
 8001e24:	19f6      	adds	r6, r6, r7
 8001e26:	4448      	add	r0, r9
 8001e28:	42b4      	cmp	r4, r6
 8001e2a:	d903      	bls.n	8001e34 <__aeabi_dmul+0x2bc>
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0249      	lsls	r1, r1, #9
 8001e30:	4689      	mov	r9, r1
 8001e32:	44cc      	add	ip, r9
 8001e34:	9902      	ldr	r1, [sp, #8]
 8001e36:	9f00      	ldr	r7, [sp, #0]
 8001e38:	4689      	mov	r9, r1
 8001e3a:	0431      	lsls	r1, r6, #16
 8001e3c:	444f      	add	r7, r9
 8001e3e:	4689      	mov	r9, r1
 8001e40:	4641      	mov	r1, r8
 8001e42:	4297      	cmp	r7, r2
 8001e44:	4192      	sbcs	r2, r2
 8001e46:	040c      	lsls	r4, r1, #16
 8001e48:	0c24      	lsrs	r4, r4, #16
 8001e4a:	444c      	add	r4, r9
 8001e4c:	18ff      	adds	r7, r7, r3
 8001e4e:	4252      	negs	r2, r2
 8001e50:	1964      	adds	r4, r4, r5
 8001e52:	18a1      	adds	r1, r4, r2
 8001e54:	429f      	cmp	r7, r3
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	4688      	mov	r8, r1
 8001e5a:	4682      	mov	sl, r0
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	4699      	mov	r9, r3
 8001e60:	4590      	cmp	r8, r2
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	42ac      	cmp	r4, r5
 8001e66:	41a4      	sbcs	r4, r4
 8001e68:	44c2      	add	sl, r8
 8001e6a:	44d1      	add	r9, sl
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	4264      	negs	r4, r4
 8001e70:	4314      	orrs	r4, r2
 8001e72:	4599      	cmp	r9, r3
 8001e74:	419b      	sbcs	r3, r3
 8001e76:	4582      	cmp	sl, r0
 8001e78:	4192      	sbcs	r2, r2
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	4252      	negs	r2, r2
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	464a      	mov	r2, r9
 8001e82:	0c36      	lsrs	r6, r6, #16
 8001e84:	19a4      	adds	r4, r4, r6
 8001e86:	18e3      	adds	r3, r4, r3
 8001e88:	4463      	add	r3, ip
 8001e8a:	025b      	lsls	r3, r3, #9
 8001e8c:	0dd2      	lsrs	r2, r2, #23
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	9901      	ldr	r1, [sp, #4]
 8001e92:	4692      	mov	sl, r2
 8001e94:	027a      	lsls	r2, r7, #9
 8001e96:	430a      	orrs	r2, r1
 8001e98:	1e50      	subs	r0, r2, #1
 8001e9a:	4182      	sbcs	r2, r0
 8001e9c:	0dff      	lsrs	r7, r7, #23
 8001e9e:	4317      	orrs	r7, r2
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	4317      	orrs	r7, r2
 8001ea6:	46b8      	mov	r8, r7
 8001ea8:	01db      	lsls	r3, r3, #7
 8001eaa:	d500      	bpl.n	8001eae <__aeabi_dmul+0x336>
 8001eac:	e6ed      	b.n	8001c8a <__aeabi_dmul+0x112>
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <__aeabi_dmul+0x36c>)
 8001eb0:	9a03      	ldr	r2, [sp, #12]
 8001eb2:	445b      	add	r3, fp
 8001eb4:	4691      	mov	r9, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dc00      	bgt.n	8001ebc <__aeabi_dmul+0x344>
 8001eba:	e0ac      	b.n	8002016 <__aeabi_dmul+0x49e>
 8001ebc:	003a      	movs	r2, r7
 8001ebe:	0752      	lsls	r2, r2, #29
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dmul+0x34c>
 8001ec2:	e710      	b.n	8001ce6 <__aeabi_dmul+0x16e>
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	4658      	mov	r0, fp
 8001ec8:	403a      	ands	r2, r7
 8001eca:	2a04      	cmp	r2, #4
 8001ecc:	d000      	beq.n	8001ed0 <__aeabi_dmul+0x358>
 8001ece:	e6f9      	b.n	8001cc4 <__aeabi_dmul+0x14c>
 8001ed0:	e709      	b.n	8001ce6 <__aeabi_dmul+0x16e>
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	000007ff 	.word	0x000007ff
 8001ed8:	fffffc01 	.word	0xfffffc01
 8001edc:	feffffff 	.word	0xfeffffff
 8001ee0:	000007fe 	.word	0x000007fe
 8001ee4:	000003ff 	.word	0x000003ff
 8001ee8:	0022      	movs	r2, r4
 8001eea:	4332      	orrs	r2, r6
 8001eec:	d06f      	beq.n	8001fce <__aeabi_dmul+0x456>
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dmul+0x37c>
 8001ef2:	e0c2      	b.n	800207a <__aeabi_dmul+0x502>
 8001ef4:	0020      	movs	r0, r4
 8001ef6:	f000 fddf 	bl	8002ab8 <__clzsi2>
 8001efa:	0002      	movs	r2, r0
 8001efc:	0003      	movs	r3, r0
 8001efe:	3a0b      	subs	r2, #11
 8001f00:	201d      	movs	r0, #29
 8001f02:	1a82      	subs	r2, r0, r2
 8001f04:	0030      	movs	r0, r6
 8001f06:	0019      	movs	r1, r3
 8001f08:	40d0      	lsrs	r0, r2
 8001f0a:	3908      	subs	r1, #8
 8001f0c:	408c      	lsls	r4, r1
 8001f0e:	0002      	movs	r2, r0
 8001f10:	4322      	orrs	r2, r4
 8001f12:	0034      	movs	r4, r6
 8001f14:	408c      	lsls	r4, r1
 8001f16:	4659      	mov	r1, fp
 8001f18:	1acb      	subs	r3, r1, r3
 8001f1a:	4986      	ldr	r1, [pc, #536]	@ (8002134 <__aeabi_dmul+0x5bc>)
 8001f1c:	468b      	mov	fp, r1
 8001f1e:	449b      	add	fp, r3
 8001f20:	2d0a      	cmp	r5, #10
 8001f22:	dd00      	ble.n	8001f26 <__aeabi_dmul+0x3ae>
 8001f24:	e6a4      	b.n	8001c70 <__aeabi_dmul+0xf8>
 8001f26:	4649      	mov	r1, r9
 8001f28:	9b00      	ldr	r3, [sp, #0]
 8001f2a:	9401      	str	r4, [sp, #4]
 8001f2c:	4059      	eors	r1, r3
 8001f2e:	b2cb      	uxtb	r3, r1
 8001f30:	0014      	movs	r4, r2
 8001f32:	2000      	movs	r0, #0
 8001f34:	9303      	str	r3, [sp, #12]
 8001f36:	2d02      	cmp	r5, #2
 8001f38:	dd00      	ble.n	8001f3c <__aeabi_dmul+0x3c4>
 8001f3a:	e667      	b.n	8001c0c <__aeabi_dmul+0x94>
 8001f3c:	e6fb      	b.n	8001d36 <__aeabi_dmul+0x1be>
 8001f3e:	4653      	mov	r3, sl
 8001f40:	4303      	orrs	r3, r0
 8001f42:	4698      	mov	r8, r3
 8001f44:	d03c      	beq.n	8001fc0 <__aeabi_dmul+0x448>
 8001f46:	4653      	mov	r3, sl
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dmul+0x3d6>
 8001f4c:	e0a3      	b.n	8002096 <__aeabi_dmul+0x51e>
 8001f4e:	4650      	mov	r0, sl
 8001f50:	f000 fdb2 	bl	8002ab8 <__clzsi2>
 8001f54:	230b      	movs	r3, #11
 8001f56:	425b      	negs	r3, r3
 8001f58:	469c      	mov	ip, r3
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	4484      	add	ip, r0
 8001f5e:	0011      	movs	r1, r2
 8001f60:	4650      	mov	r0, sl
 8001f62:	3908      	subs	r1, #8
 8001f64:	4088      	lsls	r0, r1
 8001f66:	231d      	movs	r3, #29
 8001f68:	4680      	mov	r8, r0
 8001f6a:	4660      	mov	r0, ip
 8001f6c:	1a1b      	subs	r3, r3, r0
 8001f6e:	0020      	movs	r0, r4
 8001f70:	40d8      	lsrs	r0, r3
 8001f72:	0003      	movs	r3, r0
 8001f74:	4640      	mov	r0, r8
 8001f76:	4303      	orrs	r3, r0
 8001f78:	469a      	mov	sl, r3
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4698      	mov	r8, r3
 8001f80:	4b6c      	ldr	r3, [pc, #432]	@ (8002134 <__aeabi_dmul+0x5bc>)
 8001f82:	2500      	movs	r5, #0
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	469b      	mov	fp, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	e61a      	b.n	8001bc4 <__aeabi_dmul+0x4c>
 8001f8e:	2d0f      	cmp	r5, #15
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dmul+0x41c>
 8001f92:	e0c9      	b.n	8002128 <__aeabi_dmul+0x5b0>
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	4652      	mov	r2, sl
 8001f98:	031b      	lsls	r3, r3, #12
 8001f9a:	421a      	tst	r2, r3
 8001f9c:	d002      	beq.n	8001fa4 <__aeabi_dmul+0x42c>
 8001f9e:	421c      	tst	r4, r3
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dmul+0x42c>
 8001fa2:	e092      	b.n	80020ca <__aeabi_dmul+0x552>
 8001fa4:	2480      	movs	r4, #128	@ 0x80
 8001fa6:	4653      	mov	r3, sl
 8001fa8:	0324      	lsls	r4, r4, #12
 8001faa:	431c      	orrs	r4, r3
 8001fac:	0324      	lsls	r4, r4, #12
 8001fae:	4642      	mov	r2, r8
 8001fb0:	0b24      	lsrs	r4, r4, #12
 8001fb2:	e63e      	b.n	8001c32 <__aeabi_dmul+0xba>
 8001fb4:	469b      	mov	fp, r3
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	4680      	mov	r8, r0
 8001fba:	250c      	movs	r5, #12
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	e601      	b.n	8001bc4 <__aeabi_dmul+0x4c>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	469a      	mov	sl, r3
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	2504      	movs	r5, #4
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	e5fa      	b.n	8001bc4 <__aeabi_dmul+0x4c>
 8001fce:	2101      	movs	r1, #1
 8001fd0:	430d      	orrs	r5, r1
 8001fd2:	2d0a      	cmp	r5, #10
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dmul+0x460>
 8001fd6:	e64b      	b.n	8001c70 <__aeabi_dmul+0xf8>
 8001fd8:	4649      	mov	r1, r9
 8001fda:	9800      	ldr	r0, [sp, #0]
 8001fdc:	4041      	eors	r1, r0
 8001fde:	b2c9      	uxtb	r1, r1
 8001fe0:	9103      	str	r1, [sp, #12]
 8001fe2:	2d02      	cmp	r5, #2
 8001fe4:	dc00      	bgt.n	8001fe8 <__aeabi_dmul+0x470>
 8001fe6:	e096      	b.n	8002116 <__aeabi_dmul+0x59e>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2400      	movs	r4, #0
 8001fec:	2001      	movs	r0, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	e60c      	b.n	8001c0c <__aeabi_dmul+0x94>
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9a00      	ldr	r2, [sp, #0]
 8001ff8:	432b      	orrs	r3, r5
 8001ffa:	4051      	eors	r1, r2
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	2b0a      	cmp	r3, #10
 8002002:	dd00      	ble.n	8002006 <__aeabi_dmul+0x48e>
 8002004:	e634      	b.n	8001c70 <__aeabi_dmul+0xf8>
 8002006:	2d00      	cmp	r5, #0
 8002008:	d157      	bne.n	80020ba <__aeabi_dmul+0x542>
 800200a:	9b03      	ldr	r3, [sp, #12]
 800200c:	4699      	mov	r9, r3
 800200e:	2400      	movs	r4, #0
 8002010:	2200      	movs	r2, #0
 8002012:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <__aeabi_dmul+0x5c0>)
 8002014:	e60e      	b.n	8001c34 <__aeabi_dmul+0xbc>
 8002016:	4658      	mov	r0, fp
 8002018:	2101      	movs	r1, #1
 800201a:	1ac9      	subs	r1, r1, r3
 800201c:	2938      	cmp	r1, #56	@ 0x38
 800201e:	dd00      	ble.n	8002022 <__aeabi_dmul+0x4aa>
 8002020:	e62f      	b.n	8001c82 <__aeabi_dmul+0x10a>
 8002022:	291f      	cmp	r1, #31
 8002024:	dd56      	ble.n	80020d4 <__aeabi_dmul+0x55c>
 8002026:	221f      	movs	r2, #31
 8002028:	4654      	mov	r4, sl
 800202a:	4252      	negs	r2, r2
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	40dc      	lsrs	r4, r3
 8002030:	2920      	cmp	r1, #32
 8002032:	d007      	beq.n	8002044 <__aeabi_dmul+0x4cc>
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <__aeabi_dmul+0x5c4>)
 8002036:	4642      	mov	r2, r8
 8002038:	469c      	mov	ip, r3
 800203a:	4653      	mov	r3, sl
 800203c:	4460      	add	r0, ip
 800203e:	4083      	lsls	r3, r0
 8002040:	431a      	orrs	r2, r3
 8002042:	4690      	mov	r8, r2
 8002044:	4642      	mov	r2, r8
 8002046:	2107      	movs	r1, #7
 8002048:	1e53      	subs	r3, r2, #1
 800204a:	419a      	sbcs	r2, r3
 800204c:	000b      	movs	r3, r1
 800204e:	4322      	orrs	r2, r4
 8002050:	4013      	ands	r3, r2
 8002052:	2400      	movs	r4, #0
 8002054:	4211      	tst	r1, r2
 8002056:	d009      	beq.n	800206c <__aeabi_dmul+0x4f4>
 8002058:	230f      	movs	r3, #15
 800205a:	4013      	ands	r3, r2
 800205c:	2b04      	cmp	r3, #4
 800205e:	d05d      	beq.n	800211c <__aeabi_dmul+0x5a4>
 8002060:	1d11      	adds	r1, r2, #4
 8002062:	4291      	cmp	r1, r2
 8002064:	419b      	sbcs	r3, r3
 8002066:	000a      	movs	r2, r1
 8002068:	425b      	negs	r3, r3
 800206a:	075b      	lsls	r3, r3, #29
 800206c:	08d2      	lsrs	r2, r2, #3
 800206e:	431a      	orrs	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	e5df      	b.n	8001c34 <__aeabi_dmul+0xbc>
 8002074:	9b03      	ldr	r3, [sp, #12]
 8002076:	4699      	mov	r9, r3
 8002078:	e5fa      	b.n	8001c70 <__aeabi_dmul+0xf8>
 800207a:	9801      	ldr	r0, [sp, #4]
 800207c:	f000 fd1c 	bl	8002ab8 <__clzsi2>
 8002080:	0002      	movs	r2, r0
 8002082:	0003      	movs	r3, r0
 8002084:	3215      	adds	r2, #21
 8002086:	3320      	adds	r3, #32
 8002088:	2a1c      	cmp	r2, #28
 800208a:	dc00      	bgt.n	800208e <__aeabi_dmul+0x516>
 800208c:	e738      	b.n	8001f00 <__aeabi_dmul+0x388>
 800208e:	9a01      	ldr	r2, [sp, #4]
 8002090:	3808      	subs	r0, #8
 8002092:	4082      	lsls	r2, r0
 8002094:	e73f      	b.n	8001f16 <__aeabi_dmul+0x39e>
 8002096:	f000 fd0f 	bl	8002ab8 <__clzsi2>
 800209a:	2315      	movs	r3, #21
 800209c:	469c      	mov	ip, r3
 800209e:	4484      	add	ip, r0
 80020a0:	0002      	movs	r2, r0
 80020a2:	4663      	mov	r3, ip
 80020a4:	3220      	adds	r2, #32
 80020a6:	2b1c      	cmp	r3, #28
 80020a8:	dc00      	bgt.n	80020ac <__aeabi_dmul+0x534>
 80020aa:	e758      	b.n	8001f5e <__aeabi_dmul+0x3e6>
 80020ac:	2300      	movs	r3, #0
 80020ae:	4698      	mov	r8, r3
 80020b0:	0023      	movs	r3, r4
 80020b2:	3808      	subs	r0, #8
 80020b4:	4083      	lsls	r3, r0
 80020b6:	469a      	mov	sl, r3
 80020b8:	e762      	b.n	8001f80 <__aeabi_dmul+0x408>
 80020ba:	001d      	movs	r5, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	2400      	movs	r4, #0
 80020c0:	2002      	movs	r0, #2
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	e5a2      	b.n	8001c0c <__aeabi_dmul+0x94>
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	e632      	b.n	8001d30 <__aeabi_dmul+0x1b8>
 80020ca:	431c      	orrs	r4, r3
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	9a01      	ldr	r2, [sp, #4]
 80020d0:	4699      	mov	r9, r3
 80020d2:	e5ae      	b.n	8001c32 <__aeabi_dmul+0xba>
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <__aeabi_dmul+0x5c8>)
 80020d6:	4652      	mov	r2, sl
 80020d8:	18c3      	adds	r3, r0, r3
 80020da:	4640      	mov	r0, r8
 80020dc:	409a      	lsls	r2, r3
 80020de:	40c8      	lsrs	r0, r1
 80020e0:	4302      	orrs	r2, r0
 80020e2:	4640      	mov	r0, r8
 80020e4:	4098      	lsls	r0, r3
 80020e6:	0003      	movs	r3, r0
 80020e8:	1e58      	subs	r0, r3, #1
 80020ea:	4183      	sbcs	r3, r0
 80020ec:	4654      	mov	r4, sl
 80020ee:	431a      	orrs	r2, r3
 80020f0:	40cc      	lsrs	r4, r1
 80020f2:	0753      	lsls	r3, r2, #29
 80020f4:	d009      	beq.n	800210a <__aeabi_dmul+0x592>
 80020f6:	230f      	movs	r3, #15
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d005      	beq.n	800210a <__aeabi_dmul+0x592>
 80020fe:	1d13      	adds	r3, r2, #4
 8002100:	4293      	cmp	r3, r2
 8002102:	4192      	sbcs	r2, r2
 8002104:	4252      	negs	r2, r2
 8002106:	18a4      	adds	r4, r4, r2
 8002108:	001a      	movs	r2, r3
 800210a:	0223      	lsls	r3, r4, #8
 800210c:	d508      	bpl.n	8002120 <__aeabi_dmul+0x5a8>
 800210e:	2301      	movs	r3, #1
 8002110:	2400      	movs	r4, #0
 8002112:	2200      	movs	r2, #0
 8002114:	e58e      	b.n	8001c34 <__aeabi_dmul+0xbc>
 8002116:	4689      	mov	r9, r1
 8002118:	2400      	movs	r4, #0
 800211a:	e58b      	b.n	8001c34 <__aeabi_dmul+0xbc>
 800211c:	2300      	movs	r3, #0
 800211e:	e7a5      	b.n	800206c <__aeabi_dmul+0x4f4>
 8002120:	0763      	lsls	r3, r4, #29
 8002122:	0264      	lsls	r4, r4, #9
 8002124:	0b24      	lsrs	r4, r4, #12
 8002126:	e7a1      	b.n	800206c <__aeabi_dmul+0x4f4>
 8002128:	9b00      	ldr	r3, [sp, #0]
 800212a:	46a2      	mov	sl, r4
 800212c:	4699      	mov	r9, r3
 800212e:	9b01      	ldr	r3, [sp, #4]
 8002130:	4698      	mov	r8, r3
 8002132:	e737      	b.n	8001fa4 <__aeabi_dmul+0x42c>
 8002134:	fffffc0d 	.word	0xfffffc0d
 8002138:	000007ff 	.word	0x000007ff
 800213c:	0000043e 	.word	0x0000043e
 8002140:	0000041e 	.word	0x0000041e

08002144 <__aeabi_dsub>:
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	4657      	mov	r7, sl
 8002148:	464e      	mov	r6, r9
 800214a:	4645      	mov	r5, r8
 800214c:	46de      	mov	lr, fp
 800214e:	b5e0      	push	{r5, r6, r7, lr}
 8002150:	b083      	sub	sp, #12
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	9101      	str	r1, [sp, #4]
 8002156:	030c      	lsls	r4, r1, #12
 8002158:	004d      	lsls	r5, r1, #1
 800215a:	0fce      	lsrs	r6, r1, #31
 800215c:	0a61      	lsrs	r1, r4, #9
 800215e:	9c00      	ldr	r4, [sp, #0]
 8002160:	005f      	lsls	r7, r3, #1
 8002162:	0f64      	lsrs	r4, r4, #29
 8002164:	430c      	orrs	r4, r1
 8002166:	9900      	ldr	r1, [sp, #0]
 8002168:	9200      	str	r2, [sp, #0]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	00c8      	lsls	r0, r1, #3
 800216e:	0319      	lsls	r1, r3, #12
 8002170:	0d7b      	lsrs	r3, r7, #21
 8002172:	4699      	mov	r9, r3
 8002174:	9b01      	ldr	r3, [sp, #4]
 8002176:	4fcc      	ldr	r7, [pc, #816]	@ (80024a8 <__aeabi_dsub+0x364>)
 8002178:	0fdb      	lsrs	r3, r3, #31
 800217a:	469c      	mov	ip, r3
 800217c:	0a4b      	lsrs	r3, r1, #9
 800217e:	9900      	ldr	r1, [sp, #0]
 8002180:	4680      	mov	r8, r0
 8002182:	0f49      	lsrs	r1, r1, #29
 8002184:	4319      	orrs	r1, r3
 8002186:	9b00      	ldr	r3, [sp, #0]
 8002188:	468b      	mov	fp, r1
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	4692      	mov	sl, r2
 800218e:	0d6d      	lsrs	r5, r5, #21
 8002190:	45b9      	cmp	r9, r7
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x52>
 8002194:	e0bf      	b.n	8002316 <__aeabi_dsub+0x1d2>
 8002196:	2301      	movs	r3, #1
 8002198:	4661      	mov	r1, ip
 800219a:	4059      	eors	r1, r3
 800219c:	464b      	mov	r3, r9
 800219e:	468c      	mov	ip, r1
 80021a0:	1aeb      	subs	r3, r5, r3
 80021a2:	428e      	cmp	r6, r1
 80021a4:	d075      	beq.n	8002292 <__aeabi_dsub+0x14e>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_dsub+0x68>
 80021aa:	e2a3      	b.n	80026f4 <__aeabi_dsub+0x5b0>
 80021ac:	4649      	mov	r1, r9
 80021ae:	2900      	cmp	r1, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x70>
 80021b2:	e0ce      	b.n	8002352 <__aeabi_dsub+0x20e>
 80021b4:	42bd      	cmp	r5, r7
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0x76>
 80021b8:	e200      	b.n	80025bc <__aeabi_dsub+0x478>
 80021ba:	2701      	movs	r7, #1
 80021bc:	2b38      	cmp	r3, #56	@ 0x38
 80021be:	dc19      	bgt.n	80021f4 <__aeabi_dsub+0xb0>
 80021c0:	2780      	movs	r7, #128	@ 0x80
 80021c2:	4659      	mov	r1, fp
 80021c4:	043f      	lsls	r7, r7, #16
 80021c6:	4339      	orrs	r1, r7
 80021c8:	468b      	mov	fp, r1
 80021ca:	2b1f      	cmp	r3, #31
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_dsub+0x8c>
 80021ce:	e1fa      	b.n	80025c6 <__aeabi_dsub+0x482>
 80021d0:	2720      	movs	r7, #32
 80021d2:	1af9      	subs	r1, r7, r3
 80021d4:	468c      	mov	ip, r1
 80021d6:	4659      	mov	r1, fp
 80021d8:	4667      	mov	r7, ip
 80021da:	40b9      	lsls	r1, r7
 80021dc:	000f      	movs	r7, r1
 80021de:	0011      	movs	r1, r2
 80021e0:	40d9      	lsrs	r1, r3
 80021e2:	430f      	orrs	r7, r1
 80021e4:	4661      	mov	r1, ip
 80021e6:	408a      	lsls	r2, r1
 80021e8:	1e51      	subs	r1, r2, #1
 80021ea:	418a      	sbcs	r2, r1
 80021ec:	4659      	mov	r1, fp
 80021ee:	40d9      	lsrs	r1, r3
 80021f0:	4317      	orrs	r7, r2
 80021f2:	1a64      	subs	r4, r4, r1
 80021f4:	1bc7      	subs	r7, r0, r7
 80021f6:	42b8      	cmp	r0, r7
 80021f8:	4180      	sbcs	r0, r0
 80021fa:	4240      	negs	r0, r0
 80021fc:	1a24      	subs	r4, r4, r0
 80021fe:	0223      	lsls	r3, r4, #8
 8002200:	d400      	bmi.n	8002204 <__aeabi_dsub+0xc0>
 8002202:	e140      	b.n	8002486 <__aeabi_dsub+0x342>
 8002204:	0264      	lsls	r4, r4, #9
 8002206:	0a64      	lsrs	r4, r4, #9
 8002208:	2c00      	cmp	r4, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0xca>
 800220c:	e154      	b.n	80024b8 <__aeabi_dsub+0x374>
 800220e:	0020      	movs	r0, r4
 8002210:	f000 fc52 	bl	8002ab8 <__clzsi2>
 8002214:	0003      	movs	r3, r0
 8002216:	3b08      	subs	r3, #8
 8002218:	2120      	movs	r1, #32
 800221a:	0038      	movs	r0, r7
 800221c:	1aca      	subs	r2, r1, r3
 800221e:	40d0      	lsrs	r0, r2
 8002220:	409c      	lsls	r4, r3
 8002222:	0002      	movs	r2, r0
 8002224:	409f      	lsls	r7, r3
 8002226:	4322      	orrs	r2, r4
 8002228:	429d      	cmp	r5, r3
 800222a:	dd00      	ble.n	800222e <__aeabi_dsub+0xea>
 800222c:	e1a6      	b.n	800257c <__aeabi_dsub+0x438>
 800222e:	1b58      	subs	r0, r3, r5
 8002230:	3001      	adds	r0, #1
 8002232:	1a09      	subs	r1, r1, r0
 8002234:	003c      	movs	r4, r7
 8002236:	408f      	lsls	r7, r1
 8002238:	40c4      	lsrs	r4, r0
 800223a:	1e7b      	subs	r3, r7, #1
 800223c:	419f      	sbcs	r7, r3
 800223e:	0013      	movs	r3, r2
 8002240:	408b      	lsls	r3, r1
 8002242:	4327      	orrs	r7, r4
 8002244:	431f      	orrs	r7, r3
 8002246:	40c2      	lsrs	r2, r0
 8002248:	003b      	movs	r3, r7
 800224a:	0014      	movs	r4, r2
 800224c:	2500      	movs	r5, #0
 800224e:	4313      	orrs	r3, r2
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x110>
 8002252:	e1f7      	b.n	8002644 <__aeabi_dsub+0x500>
 8002254:	077b      	lsls	r3, r7, #29
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x116>
 8002258:	e377      	b.n	800294a <__aeabi_dsub+0x806>
 800225a:	230f      	movs	r3, #15
 800225c:	0038      	movs	r0, r7
 800225e:	403b      	ands	r3, r7
 8002260:	2b04      	cmp	r3, #4
 8002262:	d004      	beq.n	800226e <__aeabi_dsub+0x12a>
 8002264:	1d38      	adds	r0, r7, #4
 8002266:	42b8      	cmp	r0, r7
 8002268:	41bf      	sbcs	r7, r7
 800226a:	427f      	negs	r7, r7
 800226c:	19e4      	adds	r4, r4, r7
 800226e:	0223      	lsls	r3, r4, #8
 8002270:	d400      	bmi.n	8002274 <__aeabi_dsub+0x130>
 8002272:	e368      	b.n	8002946 <__aeabi_dsub+0x802>
 8002274:	4b8c      	ldr	r3, [pc, #560]	@ (80024a8 <__aeabi_dsub+0x364>)
 8002276:	3501      	adds	r5, #1
 8002278:	429d      	cmp	r5, r3
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x13a>
 800227c:	e0f4      	b.n	8002468 <__aeabi_dsub+0x324>
 800227e:	4b8b      	ldr	r3, [pc, #556]	@ (80024ac <__aeabi_dsub+0x368>)
 8002280:	056d      	lsls	r5, r5, #21
 8002282:	401c      	ands	r4, r3
 8002284:	0d6d      	lsrs	r5, r5, #21
 8002286:	0767      	lsls	r7, r4, #29
 8002288:	08c0      	lsrs	r0, r0, #3
 800228a:	0264      	lsls	r4, r4, #9
 800228c:	4307      	orrs	r7, r0
 800228e:	0b24      	lsrs	r4, r4, #12
 8002290:	e0ec      	b.n	800246c <__aeabi_dsub+0x328>
 8002292:	2b00      	cmp	r3, #0
 8002294:	dc00      	bgt.n	8002298 <__aeabi_dsub+0x154>
 8002296:	e329      	b.n	80028ec <__aeabi_dsub+0x7a8>
 8002298:	4649      	mov	r1, r9
 800229a:	2900      	cmp	r1, #0
 800229c:	d000      	beq.n	80022a0 <__aeabi_dsub+0x15c>
 800229e:	e0d6      	b.n	800244e <__aeabi_dsub+0x30a>
 80022a0:	4659      	mov	r1, fp
 80022a2:	4311      	orrs	r1, r2
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x164>
 80022a6:	e12e      	b.n	8002506 <__aeabi_dsub+0x3c2>
 80022a8:	1e59      	subs	r1, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x16c>
 80022ae:	e1e6      	b.n	800267e <__aeabi_dsub+0x53a>
 80022b0:	42bb      	cmp	r3, r7
 80022b2:	d100      	bne.n	80022b6 <__aeabi_dsub+0x172>
 80022b4:	e182      	b.n	80025bc <__aeabi_dsub+0x478>
 80022b6:	2701      	movs	r7, #1
 80022b8:	000b      	movs	r3, r1
 80022ba:	2938      	cmp	r1, #56	@ 0x38
 80022bc:	dc14      	bgt.n	80022e8 <__aeabi_dsub+0x1a4>
 80022be:	2b1f      	cmp	r3, #31
 80022c0:	dd00      	ble.n	80022c4 <__aeabi_dsub+0x180>
 80022c2:	e23c      	b.n	800273e <__aeabi_dsub+0x5fa>
 80022c4:	2720      	movs	r7, #32
 80022c6:	1af9      	subs	r1, r7, r3
 80022c8:	468c      	mov	ip, r1
 80022ca:	4659      	mov	r1, fp
 80022cc:	4667      	mov	r7, ip
 80022ce:	40b9      	lsls	r1, r7
 80022d0:	000f      	movs	r7, r1
 80022d2:	0011      	movs	r1, r2
 80022d4:	40d9      	lsrs	r1, r3
 80022d6:	430f      	orrs	r7, r1
 80022d8:	4661      	mov	r1, ip
 80022da:	408a      	lsls	r2, r1
 80022dc:	1e51      	subs	r1, r2, #1
 80022de:	418a      	sbcs	r2, r1
 80022e0:	4659      	mov	r1, fp
 80022e2:	40d9      	lsrs	r1, r3
 80022e4:	4317      	orrs	r7, r2
 80022e6:	1864      	adds	r4, r4, r1
 80022e8:	183f      	adds	r7, r7, r0
 80022ea:	4287      	cmp	r7, r0
 80022ec:	4180      	sbcs	r0, r0
 80022ee:	4240      	negs	r0, r0
 80022f0:	1824      	adds	r4, r4, r0
 80022f2:	0223      	lsls	r3, r4, #8
 80022f4:	d400      	bmi.n	80022f8 <__aeabi_dsub+0x1b4>
 80022f6:	e0c6      	b.n	8002486 <__aeabi_dsub+0x342>
 80022f8:	4b6b      	ldr	r3, [pc, #428]	@ (80024a8 <__aeabi_dsub+0x364>)
 80022fa:	3501      	adds	r5, #1
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x1be>
 8002300:	e0b2      	b.n	8002468 <__aeabi_dsub+0x324>
 8002302:	2101      	movs	r1, #1
 8002304:	4b69      	ldr	r3, [pc, #420]	@ (80024ac <__aeabi_dsub+0x368>)
 8002306:	087a      	lsrs	r2, r7, #1
 8002308:	401c      	ands	r4, r3
 800230a:	4039      	ands	r1, r7
 800230c:	430a      	orrs	r2, r1
 800230e:	07e7      	lsls	r7, r4, #31
 8002310:	4317      	orrs	r7, r2
 8002312:	0864      	lsrs	r4, r4, #1
 8002314:	e79e      	b.n	8002254 <__aeabi_dsub+0x110>
 8002316:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <__aeabi_dsub+0x36c>)
 8002318:	4311      	orrs	r1, r2
 800231a:	468a      	mov	sl, r1
 800231c:	18eb      	adds	r3, r5, r3
 800231e:	2900      	cmp	r1, #0
 8002320:	d028      	beq.n	8002374 <__aeabi_dsub+0x230>
 8002322:	4566      	cmp	r6, ip
 8002324:	d02c      	beq.n	8002380 <__aeabi_dsub+0x23c>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d05b      	beq.n	80023e2 <__aeabi_dsub+0x29e>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x1ec>
 800232e:	e12c      	b.n	800258a <__aeabi_dsub+0x446>
 8002330:	465b      	mov	r3, fp
 8002332:	4666      	mov	r6, ip
 8002334:	075f      	lsls	r7, r3, #29
 8002336:	08d2      	lsrs	r2, r2, #3
 8002338:	4317      	orrs	r7, r2
 800233a:	08dd      	lsrs	r5, r3, #3
 800233c:	003b      	movs	r3, r7
 800233e:	432b      	orrs	r3, r5
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x200>
 8002342:	e0e2      	b.n	800250a <__aeabi_dsub+0x3c6>
 8002344:	2480      	movs	r4, #128	@ 0x80
 8002346:	0324      	lsls	r4, r4, #12
 8002348:	432c      	orrs	r4, r5
 800234a:	0324      	lsls	r4, r4, #12
 800234c:	4d56      	ldr	r5, [pc, #344]	@ (80024a8 <__aeabi_dsub+0x364>)
 800234e:	0b24      	lsrs	r4, r4, #12
 8002350:	e08c      	b.n	800246c <__aeabi_dsub+0x328>
 8002352:	4659      	mov	r1, fp
 8002354:	4311      	orrs	r1, r2
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x216>
 8002358:	e0d5      	b.n	8002506 <__aeabi_dsub+0x3c2>
 800235a:	1e59      	subs	r1, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d100      	bne.n	8002362 <__aeabi_dsub+0x21e>
 8002360:	e1b9      	b.n	80026d6 <__aeabi_dsub+0x592>
 8002362:	42bb      	cmp	r3, r7
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x224>
 8002366:	e1b1      	b.n	80026cc <__aeabi_dsub+0x588>
 8002368:	2701      	movs	r7, #1
 800236a:	000b      	movs	r3, r1
 800236c:	2938      	cmp	r1, #56	@ 0x38
 800236e:	dd00      	ble.n	8002372 <__aeabi_dsub+0x22e>
 8002370:	e740      	b.n	80021f4 <__aeabi_dsub+0xb0>
 8002372:	e72a      	b.n	80021ca <__aeabi_dsub+0x86>
 8002374:	4661      	mov	r1, ip
 8002376:	2701      	movs	r7, #1
 8002378:	4079      	eors	r1, r7
 800237a:	468c      	mov	ip, r1
 800237c:	4566      	cmp	r6, ip
 800237e:	d1d2      	bne.n	8002326 <__aeabi_dsub+0x1e2>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d100      	bne.n	8002386 <__aeabi_dsub+0x242>
 8002384:	e0c5      	b.n	8002512 <__aeabi_dsub+0x3ce>
 8002386:	2d00      	cmp	r5, #0
 8002388:	d000      	beq.n	800238c <__aeabi_dsub+0x248>
 800238a:	e155      	b.n	8002638 <__aeabi_dsub+0x4f4>
 800238c:	464b      	mov	r3, r9
 800238e:	0025      	movs	r5, r4
 8002390:	4305      	orrs	r5, r0
 8002392:	d100      	bne.n	8002396 <__aeabi_dsub+0x252>
 8002394:	e212      	b.n	80027bc <__aeabi_dsub+0x678>
 8002396:	1e59      	subs	r1, r3, #1
 8002398:	468c      	mov	ip, r1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x25c>
 800239e:	e249      	b.n	8002834 <__aeabi_dsub+0x6f0>
 80023a0:	4d41      	ldr	r5, [pc, #260]	@ (80024a8 <__aeabi_dsub+0x364>)
 80023a2:	42ab      	cmp	r3, r5
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x264>
 80023a6:	e28f      	b.n	80028c8 <__aeabi_dsub+0x784>
 80023a8:	2701      	movs	r7, #1
 80023aa:	2938      	cmp	r1, #56	@ 0x38
 80023ac:	dc11      	bgt.n	80023d2 <__aeabi_dsub+0x28e>
 80023ae:	4663      	mov	r3, ip
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x272>
 80023b4:	e25b      	b.n	800286e <__aeabi_dsub+0x72a>
 80023b6:	4661      	mov	r1, ip
 80023b8:	2320      	movs	r3, #32
 80023ba:	0027      	movs	r7, r4
 80023bc:	1a5b      	subs	r3, r3, r1
 80023be:	0005      	movs	r5, r0
 80023c0:	4098      	lsls	r0, r3
 80023c2:	409f      	lsls	r7, r3
 80023c4:	40cd      	lsrs	r5, r1
 80023c6:	1e43      	subs	r3, r0, #1
 80023c8:	4198      	sbcs	r0, r3
 80023ca:	40cc      	lsrs	r4, r1
 80023cc:	432f      	orrs	r7, r5
 80023ce:	4307      	orrs	r7, r0
 80023d0:	44a3      	add	fp, r4
 80023d2:	18bf      	adds	r7, r7, r2
 80023d4:	4297      	cmp	r7, r2
 80023d6:	4192      	sbcs	r2, r2
 80023d8:	4252      	negs	r2, r2
 80023da:	445a      	add	r2, fp
 80023dc:	0014      	movs	r4, r2
 80023de:	464d      	mov	r5, r9
 80023e0:	e787      	b.n	80022f2 <__aeabi_dsub+0x1ae>
 80023e2:	4f34      	ldr	r7, [pc, #208]	@ (80024b4 <__aeabi_dsub+0x370>)
 80023e4:	1c6b      	adds	r3, r5, #1
 80023e6:	423b      	tst	r3, r7
 80023e8:	d000      	beq.n	80023ec <__aeabi_dsub+0x2a8>
 80023ea:	e0b6      	b.n	800255a <__aeabi_dsub+0x416>
 80023ec:	4659      	mov	r1, fp
 80023ee:	0023      	movs	r3, r4
 80023f0:	4311      	orrs	r1, r2
 80023f2:	000f      	movs	r7, r1
 80023f4:	4303      	orrs	r3, r0
 80023f6:	2d00      	cmp	r5, #0
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x2b8>
 80023fa:	e126      	b.n	800264a <__aeabi_dsub+0x506>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x2be>
 8002400:	e1c0      	b.n	8002784 <__aeabi_dsub+0x640>
 8002402:	2900      	cmp	r1, #0
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x2c4>
 8002406:	e0a1      	b.n	800254c <__aeabi_dsub+0x408>
 8002408:	1a83      	subs	r3, r0, r2
 800240a:	4698      	mov	r8, r3
 800240c:	465b      	mov	r3, fp
 800240e:	4540      	cmp	r0, r8
 8002410:	41ad      	sbcs	r5, r5
 8002412:	1ae3      	subs	r3, r4, r3
 8002414:	426d      	negs	r5, r5
 8002416:	1b5b      	subs	r3, r3, r5
 8002418:	2580      	movs	r5, #128	@ 0x80
 800241a:	042d      	lsls	r5, r5, #16
 800241c:	422b      	tst	r3, r5
 800241e:	d100      	bne.n	8002422 <__aeabi_dsub+0x2de>
 8002420:	e14b      	b.n	80026ba <__aeabi_dsub+0x576>
 8002422:	465b      	mov	r3, fp
 8002424:	1a10      	subs	r0, r2, r0
 8002426:	4282      	cmp	r2, r0
 8002428:	4192      	sbcs	r2, r2
 800242a:	1b1c      	subs	r4, r3, r4
 800242c:	0007      	movs	r7, r0
 800242e:	2601      	movs	r6, #1
 8002430:	4663      	mov	r3, ip
 8002432:	4252      	negs	r2, r2
 8002434:	1aa4      	subs	r4, r4, r2
 8002436:	4327      	orrs	r7, r4
 8002438:	401e      	ands	r6, r3
 800243a:	2f00      	cmp	r7, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x2fc>
 800243e:	e142      	b.n	80026c6 <__aeabi_dsub+0x582>
 8002440:	422c      	tst	r4, r5
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x302>
 8002444:	e26d      	b.n	8002922 <__aeabi_dsub+0x7de>
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <__aeabi_dsub+0x368>)
 8002448:	2501      	movs	r5, #1
 800244a:	401c      	ands	r4, r3
 800244c:	e71b      	b.n	8002286 <__aeabi_dsub+0x142>
 800244e:	42bd      	cmp	r5, r7
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x310>
 8002452:	e13b      	b.n	80026cc <__aeabi_dsub+0x588>
 8002454:	2701      	movs	r7, #1
 8002456:	2b38      	cmp	r3, #56	@ 0x38
 8002458:	dd00      	ble.n	800245c <__aeabi_dsub+0x318>
 800245a:	e745      	b.n	80022e8 <__aeabi_dsub+0x1a4>
 800245c:	2780      	movs	r7, #128	@ 0x80
 800245e:	4659      	mov	r1, fp
 8002460:	043f      	lsls	r7, r7, #16
 8002462:	4339      	orrs	r1, r7
 8002464:	468b      	mov	fp, r1
 8002466:	e72a      	b.n	80022be <__aeabi_dsub+0x17a>
 8002468:	2400      	movs	r4, #0
 800246a:	2700      	movs	r7, #0
 800246c:	052d      	lsls	r5, r5, #20
 800246e:	4325      	orrs	r5, r4
 8002470:	07f6      	lsls	r6, r6, #31
 8002472:	4335      	orrs	r5, r6
 8002474:	0038      	movs	r0, r7
 8002476:	0029      	movs	r1, r5
 8002478:	b003      	add	sp, #12
 800247a:	bcf0      	pop	{r4, r5, r6, r7}
 800247c:	46bb      	mov	fp, r7
 800247e:	46b2      	mov	sl, r6
 8002480:	46a9      	mov	r9, r5
 8002482:	46a0      	mov	r8, r4
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	077b      	lsls	r3, r7, #29
 8002488:	d004      	beq.n	8002494 <__aeabi_dsub+0x350>
 800248a:	230f      	movs	r3, #15
 800248c:	403b      	ands	r3, r7
 800248e:	2b04      	cmp	r3, #4
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x350>
 8002492:	e6e7      	b.n	8002264 <__aeabi_dsub+0x120>
 8002494:	002b      	movs	r3, r5
 8002496:	08f8      	lsrs	r0, r7, #3
 8002498:	4a03      	ldr	r2, [pc, #12]	@ (80024a8 <__aeabi_dsub+0x364>)
 800249a:	0767      	lsls	r7, r4, #29
 800249c:	4307      	orrs	r7, r0
 800249e:	08e5      	lsrs	r5, r4, #3
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <__aeabi_dsub+0x362>
 80024a4:	e74a      	b.n	800233c <__aeabi_dsub+0x1f8>
 80024a6:	e0a5      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 80024a8:	000007ff 	.word	0x000007ff
 80024ac:	ff7fffff 	.word	0xff7fffff
 80024b0:	fffff801 	.word	0xfffff801
 80024b4:	000007fe 	.word	0x000007fe
 80024b8:	0038      	movs	r0, r7
 80024ba:	f000 fafd 	bl	8002ab8 <__clzsi2>
 80024be:	0003      	movs	r3, r0
 80024c0:	3318      	adds	r3, #24
 80024c2:	2b1f      	cmp	r3, #31
 80024c4:	dc00      	bgt.n	80024c8 <__aeabi_dsub+0x384>
 80024c6:	e6a7      	b.n	8002218 <__aeabi_dsub+0xd4>
 80024c8:	003a      	movs	r2, r7
 80024ca:	3808      	subs	r0, #8
 80024cc:	4082      	lsls	r2, r0
 80024ce:	429d      	cmp	r5, r3
 80024d0:	dd00      	ble.n	80024d4 <__aeabi_dsub+0x390>
 80024d2:	e08a      	b.n	80025ea <__aeabi_dsub+0x4a6>
 80024d4:	1b5b      	subs	r3, r3, r5
 80024d6:	1c58      	adds	r0, r3, #1
 80024d8:	281f      	cmp	r0, #31
 80024da:	dc00      	bgt.n	80024de <__aeabi_dsub+0x39a>
 80024dc:	e1d8      	b.n	8002890 <__aeabi_dsub+0x74c>
 80024de:	0017      	movs	r7, r2
 80024e0:	3b1f      	subs	r3, #31
 80024e2:	40df      	lsrs	r7, r3
 80024e4:	2820      	cmp	r0, #32
 80024e6:	d005      	beq.n	80024f4 <__aeabi_dsub+0x3b0>
 80024e8:	2340      	movs	r3, #64	@ 0x40
 80024ea:	1a1b      	subs	r3, r3, r0
 80024ec:	409a      	lsls	r2, r3
 80024ee:	1e53      	subs	r3, r2, #1
 80024f0:	419a      	sbcs	r2, r3
 80024f2:	4317      	orrs	r7, r2
 80024f4:	2500      	movs	r5, #0
 80024f6:	2f00      	cmp	r7, #0
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x3b8>
 80024fa:	e0e5      	b.n	80026c8 <__aeabi_dsub+0x584>
 80024fc:	077b      	lsls	r3, r7, #29
 80024fe:	d000      	beq.n	8002502 <__aeabi_dsub+0x3be>
 8002500:	e6ab      	b.n	800225a <__aeabi_dsub+0x116>
 8002502:	002c      	movs	r4, r5
 8002504:	e7c6      	b.n	8002494 <__aeabi_dsub+0x350>
 8002506:	08c0      	lsrs	r0, r0, #3
 8002508:	e7c6      	b.n	8002498 <__aeabi_dsub+0x354>
 800250a:	2700      	movs	r7, #0
 800250c:	2400      	movs	r4, #0
 800250e:	4dd1      	ldr	r5, [pc, #836]	@ (8002854 <__aeabi_dsub+0x710>)
 8002510:	e7ac      	b.n	800246c <__aeabi_dsub+0x328>
 8002512:	4fd1      	ldr	r7, [pc, #836]	@ (8002858 <__aeabi_dsub+0x714>)
 8002514:	1c6b      	adds	r3, r5, #1
 8002516:	423b      	tst	r3, r7
 8002518:	d171      	bne.n	80025fe <__aeabi_dsub+0x4ba>
 800251a:	0023      	movs	r3, r4
 800251c:	4303      	orrs	r3, r0
 800251e:	2d00      	cmp	r5, #0
 8002520:	d000      	beq.n	8002524 <__aeabi_dsub+0x3e0>
 8002522:	e14e      	b.n	80027c2 <__aeabi_dsub+0x67e>
 8002524:	4657      	mov	r7, sl
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x3e8>
 800252a:	e1b5      	b.n	8002898 <__aeabi_dsub+0x754>
 800252c:	2f00      	cmp	r7, #0
 800252e:	d00d      	beq.n	800254c <__aeabi_dsub+0x408>
 8002530:	1883      	adds	r3, r0, r2
 8002532:	4283      	cmp	r3, r0
 8002534:	4180      	sbcs	r0, r0
 8002536:	445c      	add	r4, fp
 8002538:	4240      	negs	r0, r0
 800253a:	1824      	adds	r4, r4, r0
 800253c:	0222      	lsls	r2, r4, #8
 800253e:	d500      	bpl.n	8002542 <__aeabi_dsub+0x3fe>
 8002540:	e1c8      	b.n	80028d4 <__aeabi_dsub+0x790>
 8002542:	001f      	movs	r7, r3
 8002544:	4698      	mov	r8, r3
 8002546:	4327      	orrs	r7, r4
 8002548:	d100      	bne.n	800254c <__aeabi_dsub+0x408>
 800254a:	e0bc      	b.n	80026c6 <__aeabi_dsub+0x582>
 800254c:	4643      	mov	r3, r8
 800254e:	0767      	lsls	r7, r4, #29
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	431f      	orrs	r7, r3
 8002554:	08e5      	lsrs	r5, r4, #3
 8002556:	2300      	movs	r3, #0
 8002558:	e04c      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 800255a:	1a83      	subs	r3, r0, r2
 800255c:	4698      	mov	r8, r3
 800255e:	465b      	mov	r3, fp
 8002560:	4540      	cmp	r0, r8
 8002562:	41bf      	sbcs	r7, r7
 8002564:	1ae3      	subs	r3, r4, r3
 8002566:	427f      	negs	r7, r7
 8002568:	1bdb      	subs	r3, r3, r7
 800256a:	021f      	lsls	r7, r3, #8
 800256c:	d47c      	bmi.n	8002668 <__aeabi_dsub+0x524>
 800256e:	4647      	mov	r7, r8
 8002570:	431f      	orrs	r7, r3
 8002572:	d100      	bne.n	8002576 <__aeabi_dsub+0x432>
 8002574:	e0a6      	b.n	80026c4 <__aeabi_dsub+0x580>
 8002576:	001c      	movs	r4, r3
 8002578:	4647      	mov	r7, r8
 800257a:	e645      	b.n	8002208 <__aeabi_dsub+0xc4>
 800257c:	4cb7      	ldr	r4, [pc, #732]	@ (800285c <__aeabi_dsub+0x718>)
 800257e:	1aed      	subs	r5, r5, r3
 8002580:	4014      	ands	r4, r2
 8002582:	077b      	lsls	r3, r7, #29
 8002584:	d000      	beq.n	8002588 <__aeabi_dsub+0x444>
 8002586:	e780      	b.n	800248a <__aeabi_dsub+0x346>
 8002588:	e784      	b.n	8002494 <__aeabi_dsub+0x350>
 800258a:	464b      	mov	r3, r9
 800258c:	0025      	movs	r5, r4
 800258e:	4305      	orrs	r5, r0
 8002590:	d066      	beq.n	8002660 <__aeabi_dsub+0x51c>
 8002592:	1e5f      	subs	r7, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d100      	bne.n	800259a <__aeabi_dsub+0x456>
 8002598:	e0fc      	b.n	8002794 <__aeabi_dsub+0x650>
 800259a:	4dae      	ldr	r5, [pc, #696]	@ (8002854 <__aeabi_dsub+0x710>)
 800259c:	42ab      	cmp	r3, r5
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x45e>
 80025a0:	e15e      	b.n	8002860 <__aeabi_dsub+0x71c>
 80025a2:	4666      	mov	r6, ip
 80025a4:	2f38      	cmp	r7, #56	@ 0x38
 80025a6:	dc00      	bgt.n	80025aa <__aeabi_dsub+0x466>
 80025a8:	e0b4      	b.n	8002714 <__aeabi_dsub+0x5d0>
 80025aa:	2001      	movs	r0, #1
 80025ac:	1a17      	subs	r7, r2, r0
 80025ae:	42ba      	cmp	r2, r7
 80025b0:	4192      	sbcs	r2, r2
 80025b2:	465b      	mov	r3, fp
 80025b4:	4252      	negs	r2, r2
 80025b6:	464d      	mov	r5, r9
 80025b8:	1a9c      	subs	r4, r3, r2
 80025ba:	e620      	b.n	80021fe <__aeabi_dsub+0xba>
 80025bc:	0767      	lsls	r7, r4, #29
 80025be:	08c0      	lsrs	r0, r0, #3
 80025c0:	4307      	orrs	r7, r0
 80025c2:	08e5      	lsrs	r5, r4, #3
 80025c4:	e6ba      	b.n	800233c <__aeabi_dsub+0x1f8>
 80025c6:	001f      	movs	r7, r3
 80025c8:	4659      	mov	r1, fp
 80025ca:	3f20      	subs	r7, #32
 80025cc:	40f9      	lsrs	r1, r7
 80025ce:	000f      	movs	r7, r1
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dsub+0x49c>
 80025d4:	2140      	movs	r1, #64	@ 0x40
 80025d6:	1acb      	subs	r3, r1, r3
 80025d8:	4659      	mov	r1, fp
 80025da:	4099      	lsls	r1, r3
 80025dc:	430a      	orrs	r2, r1
 80025de:	4692      	mov	sl, r2
 80025e0:	4653      	mov	r3, sl
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	4193      	sbcs	r3, r2
 80025e6:	431f      	orrs	r7, r3
 80025e8:	e604      	b.n	80021f4 <__aeabi_dsub+0xb0>
 80025ea:	1aeb      	subs	r3, r5, r3
 80025ec:	4d9b      	ldr	r5, [pc, #620]	@ (800285c <__aeabi_dsub+0x718>)
 80025ee:	4015      	ands	r5, r2
 80025f0:	076f      	lsls	r7, r5, #29
 80025f2:	08ed      	lsrs	r5, r5, #3
 80025f4:	032c      	lsls	r4, r5, #12
 80025f6:	055d      	lsls	r5, r3, #21
 80025f8:	0b24      	lsrs	r4, r4, #12
 80025fa:	0d6d      	lsrs	r5, r5, #21
 80025fc:	e736      	b.n	800246c <__aeabi_dsub+0x328>
 80025fe:	4d95      	ldr	r5, [pc, #596]	@ (8002854 <__aeabi_dsub+0x710>)
 8002600:	42ab      	cmp	r3, r5
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x4c2>
 8002604:	e0d6      	b.n	80027b4 <__aeabi_dsub+0x670>
 8002606:	1882      	adds	r2, r0, r2
 8002608:	0021      	movs	r1, r4
 800260a:	4282      	cmp	r2, r0
 800260c:	4180      	sbcs	r0, r0
 800260e:	4459      	add	r1, fp
 8002610:	4240      	negs	r0, r0
 8002612:	1808      	adds	r0, r1, r0
 8002614:	07c7      	lsls	r7, r0, #31
 8002616:	0852      	lsrs	r2, r2, #1
 8002618:	4317      	orrs	r7, r2
 800261a:	0844      	lsrs	r4, r0, #1
 800261c:	0752      	lsls	r2, r2, #29
 800261e:	d400      	bmi.n	8002622 <__aeabi_dsub+0x4de>
 8002620:	e185      	b.n	800292e <__aeabi_dsub+0x7ea>
 8002622:	220f      	movs	r2, #15
 8002624:	001d      	movs	r5, r3
 8002626:	403a      	ands	r2, r7
 8002628:	2a04      	cmp	r2, #4
 800262a:	d000      	beq.n	800262e <__aeabi_dsub+0x4ea>
 800262c:	e61a      	b.n	8002264 <__aeabi_dsub+0x120>
 800262e:	08ff      	lsrs	r7, r7, #3
 8002630:	0764      	lsls	r4, r4, #29
 8002632:	4327      	orrs	r7, r4
 8002634:	0905      	lsrs	r5, r0, #4
 8002636:	e7dd      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 8002638:	465b      	mov	r3, fp
 800263a:	08d2      	lsrs	r2, r2, #3
 800263c:	075f      	lsls	r7, r3, #29
 800263e:	4317      	orrs	r7, r2
 8002640:	08dd      	lsrs	r5, r3, #3
 8002642:	e67b      	b.n	800233c <__aeabi_dsub+0x1f8>
 8002644:	2700      	movs	r7, #0
 8002646:	2400      	movs	r4, #0
 8002648:	e710      	b.n	800246c <__aeabi_dsub+0x328>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d000      	beq.n	8002650 <__aeabi_dsub+0x50c>
 800264e:	e0d6      	b.n	80027fe <__aeabi_dsub+0x6ba>
 8002650:	2900      	cmp	r1, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x512>
 8002654:	e12f      	b.n	80028b6 <__aeabi_dsub+0x772>
 8002656:	2480      	movs	r4, #128	@ 0x80
 8002658:	2600      	movs	r6, #0
 800265a:	4d7e      	ldr	r5, [pc, #504]	@ (8002854 <__aeabi_dsub+0x710>)
 800265c:	0324      	lsls	r4, r4, #12
 800265e:	e705      	b.n	800246c <__aeabi_dsub+0x328>
 8002660:	4666      	mov	r6, ip
 8002662:	465c      	mov	r4, fp
 8002664:	08d0      	lsrs	r0, r2, #3
 8002666:	e717      	b.n	8002498 <__aeabi_dsub+0x354>
 8002668:	465b      	mov	r3, fp
 800266a:	1a17      	subs	r7, r2, r0
 800266c:	42ba      	cmp	r2, r7
 800266e:	4192      	sbcs	r2, r2
 8002670:	1b1c      	subs	r4, r3, r4
 8002672:	2601      	movs	r6, #1
 8002674:	4663      	mov	r3, ip
 8002676:	4252      	negs	r2, r2
 8002678:	1aa4      	subs	r4, r4, r2
 800267a:	401e      	ands	r6, r3
 800267c:	e5c4      	b.n	8002208 <__aeabi_dsub+0xc4>
 800267e:	1883      	adds	r3, r0, r2
 8002680:	4283      	cmp	r3, r0
 8002682:	4180      	sbcs	r0, r0
 8002684:	445c      	add	r4, fp
 8002686:	4240      	negs	r0, r0
 8002688:	1825      	adds	r5, r4, r0
 800268a:	022a      	lsls	r2, r5, #8
 800268c:	d400      	bmi.n	8002690 <__aeabi_dsub+0x54c>
 800268e:	e0da      	b.n	8002846 <__aeabi_dsub+0x702>
 8002690:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dsub+0x718>)
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	4015      	ands	r5, r2
 8002696:	07ea      	lsls	r2, r5, #31
 8002698:	431a      	orrs	r2, r3
 800269a:	0869      	lsrs	r1, r5, #1
 800269c:	075b      	lsls	r3, r3, #29
 800269e:	d400      	bmi.n	80026a2 <__aeabi_dsub+0x55e>
 80026a0:	e14a      	b.n	8002938 <__aeabi_dsub+0x7f4>
 80026a2:	230f      	movs	r3, #15
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x568>
 80026aa:	e0fc      	b.n	80028a6 <__aeabi_dsub+0x762>
 80026ac:	1d17      	adds	r7, r2, #4
 80026ae:	4297      	cmp	r7, r2
 80026b0:	41a4      	sbcs	r4, r4
 80026b2:	4264      	negs	r4, r4
 80026b4:	2502      	movs	r5, #2
 80026b6:	1864      	adds	r4, r4, r1
 80026b8:	e6ec      	b.n	8002494 <__aeabi_dsub+0x350>
 80026ba:	4647      	mov	r7, r8
 80026bc:	001c      	movs	r4, r3
 80026be:	431f      	orrs	r7, r3
 80026c0:	d000      	beq.n	80026c4 <__aeabi_dsub+0x580>
 80026c2:	e743      	b.n	800254c <__aeabi_dsub+0x408>
 80026c4:	2600      	movs	r6, #0
 80026c6:	2500      	movs	r5, #0
 80026c8:	2400      	movs	r4, #0
 80026ca:	e6cf      	b.n	800246c <__aeabi_dsub+0x328>
 80026cc:	08c0      	lsrs	r0, r0, #3
 80026ce:	0767      	lsls	r7, r4, #29
 80026d0:	4307      	orrs	r7, r0
 80026d2:	08e5      	lsrs	r5, r4, #3
 80026d4:	e632      	b.n	800233c <__aeabi_dsub+0x1f8>
 80026d6:	1a87      	subs	r7, r0, r2
 80026d8:	465b      	mov	r3, fp
 80026da:	42b8      	cmp	r0, r7
 80026dc:	4180      	sbcs	r0, r0
 80026de:	1ae4      	subs	r4, r4, r3
 80026e0:	4240      	negs	r0, r0
 80026e2:	1a24      	subs	r4, r4, r0
 80026e4:	0223      	lsls	r3, r4, #8
 80026e6:	d428      	bmi.n	800273a <__aeabi_dsub+0x5f6>
 80026e8:	0763      	lsls	r3, r4, #29
 80026ea:	08ff      	lsrs	r7, r7, #3
 80026ec:	431f      	orrs	r7, r3
 80026ee:	08e5      	lsrs	r5, r4, #3
 80026f0:	2301      	movs	r3, #1
 80026f2:	e77f      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x5b6>
 80026f8:	e673      	b.n	80023e2 <__aeabi_dsub+0x29e>
 80026fa:	464b      	mov	r3, r9
 80026fc:	1b5f      	subs	r7, r3, r5
 80026fe:	003b      	movs	r3, r7
 8002700:	2d00      	cmp	r5, #0
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x5c2>
 8002704:	e742      	b.n	800258c <__aeabi_dsub+0x448>
 8002706:	2f38      	cmp	r7, #56	@ 0x38
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0x5c8>
 800270a:	e0ec      	b.n	80028e6 <__aeabi_dsub+0x7a2>
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	000e      	movs	r6, r1
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	431c      	orrs	r4, r3
 8002714:	2f1f      	cmp	r7, #31
 8002716:	dc25      	bgt.n	8002764 <__aeabi_dsub+0x620>
 8002718:	2520      	movs	r5, #32
 800271a:	0023      	movs	r3, r4
 800271c:	1bed      	subs	r5, r5, r7
 800271e:	0001      	movs	r1, r0
 8002720:	40a8      	lsls	r0, r5
 8002722:	40ab      	lsls	r3, r5
 8002724:	40f9      	lsrs	r1, r7
 8002726:	1e45      	subs	r5, r0, #1
 8002728:	41a8      	sbcs	r0, r5
 800272a:	430b      	orrs	r3, r1
 800272c:	40fc      	lsrs	r4, r7
 800272e:	4318      	orrs	r0, r3
 8002730:	465b      	mov	r3, fp
 8002732:	1b1b      	subs	r3, r3, r4
 8002734:	469b      	mov	fp, r3
 8002736:	e739      	b.n	80025ac <__aeabi_dsub+0x468>
 8002738:	4666      	mov	r6, ip
 800273a:	2501      	movs	r5, #1
 800273c:	e562      	b.n	8002204 <__aeabi_dsub+0xc0>
 800273e:	001f      	movs	r7, r3
 8002740:	4659      	mov	r1, fp
 8002742:	3f20      	subs	r7, #32
 8002744:	40f9      	lsrs	r1, r7
 8002746:	468c      	mov	ip, r1
 8002748:	2b20      	cmp	r3, #32
 800274a:	d005      	beq.n	8002758 <__aeabi_dsub+0x614>
 800274c:	2740      	movs	r7, #64	@ 0x40
 800274e:	4659      	mov	r1, fp
 8002750:	1afb      	subs	r3, r7, r3
 8002752:	4099      	lsls	r1, r3
 8002754:	430a      	orrs	r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	4657      	mov	r7, sl
 800275a:	1e7b      	subs	r3, r7, #1
 800275c:	419f      	sbcs	r7, r3
 800275e:	4663      	mov	r3, ip
 8002760:	431f      	orrs	r7, r3
 8002762:	e5c1      	b.n	80022e8 <__aeabi_dsub+0x1a4>
 8002764:	003b      	movs	r3, r7
 8002766:	0025      	movs	r5, r4
 8002768:	3b20      	subs	r3, #32
 800276a:	40dd      	lsrs	r5, r3
 800276c:	2f20      	cmp	r7, #32
 800276e:	d004      	beq.n	800277a <__aeabi_dsub+0x636>
 8002770:	2340      	movs	r3, #64	@ 0x40
 8002772:	1bdb      	subs	r3, r3, r7
 8002774:	409c      	lsls	r4, r3
 8002776:	4320      	orrs	r0, r4
 8002778:	4680      	mov	r8, r0
 800277a:	4640      	mov	r0, r8
 800277c:	1e43      	subs	r3, r0, #1
 800277e:	4198      	sbcs	r0, r3
 8002780:	4328      	orrs	r0, r5
 8002782:	e713      	b.n	80025ac <__aeabi_dsub+0x468>
 8002784:	2900      	cmp	r1, #0
 8002786:	d09d      	beq.n	80026c4 <__aeabi_dsub+0x580>
 8002788:	2601      	movs	r6, #1
 800278a:	4663      	mov	r3, ip
 800278c:	465c      	mov	r4, fp
 800278e:	4690      	mov	r8, r2
 8002790:	401e      	ands	r6, r3
 8002792:	e6db      	b.n	800254c <__aeabi_dsub+0x408>
 8002794:	1a17      	subs	r7, r2, r0
 8002796:	465b      	mov	r3, fp
 8002798:	42ba      	cmp	r2, r7
 800279a:	4192      	sbcs	r2, r2
 800279c:	1b1c      	subs	r4, r3, r4
 800279e:	4252      	negs	r2, r2
 80027a0:	1aa4      	subs	r4, r4, r2
 80027a2:	0223      	lsls	r3, r4, #8
 80027a4:	d4c8      	bmi.n	8002738 <__aeabi_dsub+0x5f4>
 80027a6:	0763      	lsls	r3, r4, #29
 80027a8:	08ff      	lsrs	r7, r7, #3
 80027aa:	431f      	orrs	r7, r3
 80027ac:	4666      	mov	r6, ip
 80027ae:	2301      	movs	r3, #1
 80027b0:	08e5      	lsrs	r5, r4, #3
 80027b2:	e71f      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 80027b4:	001d      	movs	r5, r3
 80027b6:	2400      	movs	r4, #0
 80027b8:	2700      	movs	r7, #0
 80027ba:	e657      	b.n	800246c <__aeabi_dsub+0x328>
 80027bc:	465c      	mov	r4, fp
 80027be:	08d0      	lsrs	r0, r2, #3
 80027c0:	e66a      	b.n	8002498 <__aeabi_dsub+0x354>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x684>
 80027c6:	e737      	b.n	8002638 <__aeabi_dsub+0x4f4>
 80027c8:	4653      	mov	r3, sl
 80027ca:	08c0      	lsrs	r0, r0, #3
 80027cc:	0767      	lsls	r7, r4, #29
 80027ce:	4307      	orrs	r7, r0
 80027d0:	08e5      	lsrs	r5, r4, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x694>
 80027d6:	e5b1      	b.n	800233c <__aeabi_dsub+0x1f8>
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	421d      	tst	r5, r3
 80027de:	d008      	beq.n	80027f2 <__aeabi_dsub+0x6ae>
 80027e0:	4659      	mov	r1, fp
 80027e2:	08c8      	lsrs	r0, r1, #3
 80027e4:	4218      	tst	r0, r3
 80027e6:	d104      	bne.n	80027f2 <__aeabi_dsub+0x6ae>
 80027e8:	08d2      	lsrs	r2, r2, #3
 80027ea:	0749      	lsls	r1, r1, #29
 80027ec:	430a      	orrs	r2, r1
 80027ee:	0017      	movs	r7, r2
 80027f0:	0005      	movs	r5, r0
 80027f2:	0f7b      	lsrs	r3, r7, #29
 80027f4:	00ff      	lsls	r7, r7, #3
 80027f6:	08ff      	lsrs	r7, r7, #3
 80027f8:	075b      	lsls	r3, r3, #29
 80027fa:	431f      	orrs	r7, r3
 80027fc:	e59e      	b.n	800233c <__aeabi_dsub+0x1f8>
 80027fe:	08c0      	lsrs	r0, r0, #3
 8002800:	0763      	lsls	r3, r4, #29
 8002802:	4318      	orrs	r0, r3
 8002804:	08e5      	lsrs	r5, r4, #3
 8002806:	2900      	cmp	r1, #0
 8002808:	d053      	beq.n	80028b2 <__aeabi_dsub+0x76e>
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	421d      	tst	r5, r3
 8002810:	d00a      	beq.n	8002828 <__aeabi_dsub+0x6e4>
 8002812:	4659      	mov	r1, fp
 8002814:	08cc      	lsrs	r4, r1, #3
 8002816:	421c      	tst	r4, r3
 8002818:	d106      	bne.n	8002828 <__aeabi_dsub+0x6e4>
 800281a:	2601      	movs	r6, #1
 800281c:	4663      	mov	r3, ip
 800281e:	0025      	movs	r5, r4
 8002820:	08d0      	lsrs	r0, r2, #3
 8002822:	0749      	lsls	r1, r1, #29
 8002824:	4308      	orrs	r0, r1
 8002826:	401e      	ands	r6, r3
 8002828:	0f47      	lsrs	r7, r0, #29
 800282a:	00c0      	lsls	r0, r0, #3
 800282c:	08c0      	lsrs	r0, r0, #3
 800282e:	077f      	lsls	r7, r7, #29
 8002830:	4307      	orrs	r7, r0
 8002832:	e583      	b.n	800233c <__aeabi_dsub+0x1f8>
 8002834:	1883      	adds	r3, r0, r2
 8002836:	4293      	cmp	r3, r2
 8002838:	4192      	sbcs	r2, r2
 800283a:	445c      	add	r4, fp
 800283c:	4252      	negs	r2, r2
 800283e:	18a5      	adds	r5, r4, r2
 8002840:	022a      	lsls	r2, r5, #8
 8002842:	d500      	bpl.n	8002846 <__aeabi_dsub+0x702>
 8002844:	e724      	b.n	8002690 <__aeabi_dsub+0x54c>
 8002846:	076f      	lsls	r7, r5, #29
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	431f      	orrs	r7, r3
 800284c:	08ed      	lsrs	r5, r5, #3
 800284e:	2301      	movs	r3, #1
 8002850:	e6d0      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	000007ff 	.word	0x000007ff
 8002858:	000007fe 	.word	0x000007fe
 800285c:	ff7fffff 	.word	0xff7fffff
 8002860:	465b      	mov	r3, fp
 8002862:	08d2      	lsrs	r2, r2, #3
 8002864:	075f      	lsls	r7, r3, #29
 8002866:	4666      	mov	r6, ip
 8002868:	4317      	orrs	r7, r2
 800286a:	08dd      	lsrs	r5, r3, #3
 800286c:	e566      	b.n	800233c <__aeabi_dsub+0x1f8>
 800286e:	0025      	movs	r5, r4
 8002870:	3b20      	subs	r3, #32
 8002872:	40dd      	lsrs	r5, r3
 8002874:	4663      	mov	r3, ip
 8002876:	2b20      	cmp	r3, #32
 8002878:	d005      	beq.n	8002886 <__aeabi_dsub+0x742>
 800287a:	2340      	movs	r3, #64	@ 0x40
 800287c:	4661      	mov	r1, ip
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	409c      	lsls	r4, r3
 8002882:	4320      	orrs	r0, r4
 8002884:	4680      	mov	r8, r0
 8002886:	4647      	mov	r7, r8
 8002888:	1e7b      	subs	r3, r7, #1
 800288a:	419f      	sbcs	r7, r3
 800288c:	432f      	orrs	r7, r5
 800288e:	e5a0      	b.n	80023d2 <__aeabi_dsub+0x28e>
 8002890:	2120      	movs	r1, #32
 8002892:	2700      	movs	r7, #0
 8002894:	1a09      	subs	r1, r1, r0
 8002896:	e4d2      	b.n	800223e <__aeabi_dsub+0xfa>
 8002898:	2f00      	cmp	r7, #0
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x75a>
 800289c:	e713      	b.n	80026c6 <__aeabi_dsub+0x582>
 800289e:	465c      	mov	r4, fp
 80028a0:	0017      	movs	r7, r2
 80028a2:	2500      	movs	r5, #0
 80028a4:	e5f6      	b.n	8002494 <__aeabi_dsub+0x350>
 80028a6:	08d7      	lsrs	r7, r2, #3
 80028a8:	0749      	lsls	r1, r1, #29
 80028aa:	2302      	movs	r3, #2
 80028ac:	430f      	orrs	r7, r1
 80028ae:	092d      	lsrs	r5, r5, #4
 80028b0:	e6a0      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 80028b2:	0007      	movs	r7, r0
 80028b4:	e542      	b.n	800233c <__aeabi_dsub+0x1f8>
 80028b6:	465b      	mov	r3, fp
 80028b8:	2601      	movs	r6, #1
 80028ba:	075f      	lsls	r7, r3, #29
 80028bc:	08dd      	lsrs	r5, r3, #3
 80028be:	4663      	mov	r3, ip
 80028c0:	08d2      	lsrs	r2, r2, #3
 80028c2:	4317      	orrs	r7, r2
 80028c4:	401e      	ands	r6, r3
 80028c6:	e539      	b.n	800233c <__aeabi_dsub+0x1f8>
 80028c8:	465b      	mov	r3, fp
 80028ca:	08d2      	lsrs	r2, r2, #3
 80028cc:	075f      	lsls	r7, r3, #29
 80028ce:	4317      	orrs	r7, r2
 80028d0:	08dd      	lsrs	r5, r3, #3
 80028d2:	e533      	b.n	800233c <__aeabi_dsub+0x1f8>
 80028d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <__aeabi_dsub+0x80c>)
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	4022      	ands	r2, r4
 80028da:	0757      	lsls	r7, r2, #29
 80028dc:	0252      	lsls	r2, r2, #9
 80028de:	2501      	movs	r5, #1
 80028e0:	431f      	orrs	r7, r3
 80028e2:	0b14      	lsrs	r4, r2, #12
 80028e4:	e5c2      	b.n	800246c <__aeabi_dsub+0x328>
 80028e6:	000e      	movs	r6, r1
 80028e8:	2001      	movs	r0, #1
 80028ea:	e65f      	b.n	80025ac <__aeabi_dsub+0x468>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <__aeabi_dsub+0x7c8>
 80028f0:	464b      	mov	r3, r9
 80028f2:	1b5b      	subs	r3, r3, r5
 80028f4:	469c      	mov	ip, r3
 80028f6:	2d00      	cmp	r5, #0
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x7b8>
 80028fa:	e548      	b.n	800238e <__aeabi_dsub+0x24a>
 80028fc:	2701      	movs	r7, #1
 80028fe:	2b38      	cmp	r3, #56	@ 0x38
 8002900:	dd00      	ble.n	8002904 <__aeabi_dsub+0x7c0>
 8002902:	e566      	b.n	80023d2 <__aeabi_dsub+0x28e>
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	431c      	orrs	r4, r3
 800290a:	e550      	b.n	80023ae <__aeabi_dsub+0x26a>
 800290c:	1c6b      	adds	r3, r5, #1
 800290e:	4d11      	ldr	r5, [pc, #68]	@ (8002954 <__aeabi_dsub+0x810>)
 8002910:	422b      	tst	r3, r5
 8002912:	d000      	beq.n	8002916 <__aeabi_dsub+0x7d2>
 8002914:	e673      	b.n	80025fe <__aeabi_dsub+0x4ba>
 8002916:	4659      	mov	r1, fp
 8002918:	0023      	movs	r3, r4
 800291a:	4311      	orrs	r1, r2
 800291c:	468a      	mov	sl, r1
 800291e:	4303      	orrs	r3, r0
 8002920:	e600      	b.n	8002524 <__aeabi_dsub+0x3e0>
 8002922:	0767      	lsls	r7, r4, #29
 8002924:	08c0      	lsrs	r0, r0, #3
 8002926:	2300      	movs	r3, #0
 8002928:	4307      	orrs	r7, r0
 800292a:	08e5      	lsrs	r5, r4, #3
 800292c:	e662      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 800292e:	0764      	lsls	r4, r4, #29
 8002930:	08ff      	lsrs	r7, r7, #3
 8002932:	4327      	orrs	r7, r4
 8002934:	0905      	lsrs	r5, r0, #4
 8002936:	e65d      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 8002938:	08d2      	lsrs	r2, r2, #3
 800293a:	0749      	lsls	r1, r1, #29
 800293c:	4311      	orrs	r1, r2
 800293e:	000f      	movs	r7, r1
 8002940:	2302      	movs	r3, #2
 8002942:	092d      	lsrs	r5, r5, #4
 8002944:	e656      	b.n	80025f4 <__aeabi_dsub+0x4b0>
 8002946:	0007      	movs	r7, r0
 8002948:	e5a4      	b.n	8002494 <__aeabi_dsub+0x350>
 800294a:	0038      	movs	r0, r7
 800294c:	e48f      	b.n	800226e <__aeabi_dsub+0x12a>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	ff7fffff 	.word	0xff7fffff
 8002954:	000007fe 	.word	0x000007fe

08002958 <__aeabi_dcmpun>:
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	46c6      	mov	lr, r8
 800295c:	031e      	lsls	r6, r3, #12
 800295e:	0b36      	lsrs	r6, r6, #12
 8002960:	46b0      	mov	r8, r6
 8002962:	4e0d      	ldr	r6, [pc, #52]	@ (8002998 <__aeabi_dcmpun+0x40>)
 8002964:	030c      	lsls	r4, r1, #12
 8002966:	004d      	lsls	r5, r1, #1
 8002968:	005f      	lsls	r7, r3, #1
 800296a:	b500      	push	{lr}
 800296c:	0b24      	lsrs	r4, r4, #12
 800296e:	0d6d      	lsrs	r5, r5, #21
 8002970:	0d7f      	lsrs	r7, r7, #21
 8002972:	42b5      	cmp	r5, r6
 8002974:	d00b      	beq.n	800298e <__aeabi_dcmpun+0x36>
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__aeabi_dcmpun+0x40>)
 8002978:	2000      	movs	r0, #0
 800297a:	428f      	cmp	r7, r1
 800297c:	d104      	bne.n	8002988 <__aeabi_dcmpun+0x30>
 800297e:	4646      	mov	r6, r8
 8002980:	4316      	orrs	r6, r2
 8002982:	0030      	movs	r0, r6
 8002984:	1e43      	subs	r3, r0, #1
 8002986:	4198      	sbcs	r0, r3
 8002988:	bc80      	pop	{r7}
 800298a:	46b8      	mov	r8, r7
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298e:	4304      	orrs	r4, r0
 8002990:	2001      	movs	r0, #1
 8002992:	2c00      	cmp	r4, #0
 8002994:	d1f8      	bne.n	8002988 <__aeabi_dcmpun+0x30>
 8002996:	e7ee      	b.n	8002976 <__aeabi_dcmpun+0x1e>
 8002998:	000007ff 	.word	0x000007ff

0800299c <__aeabi_d2iz>:
 800299c:	000b      	movs	r3, r1
 800299e:	0002      	movs	r2, r0
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4d16      	ldr	r5, [pc, #88]	@ (80029fc <__aeabi_d2iz+0x60>)
 80029a4:	030c      	lsls	r4, r1, #12
 80029a6:	b082      	sub	sp, #8
 80029a8:	0049      	lsls	r1, r1, #1
 80029aa:	2000      	movs	r0, #0
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	0b24      	lsrs	r4, r4, #12
 80029b2:	0d49      	lsrs	r1, r1, #21
 80029b4:	0fde      	lsrs	r6, r3, #31
 80029b6:	42a9      	cmp	r1, r5
 80029b8:	dd04      	ble.n	80029c4 <__aeabi_d2iz+0x28>
 80029ba:	4811      	ldr	r0, [pc, #68]	@ (8002a00 <__aeabi_d2iz+0x64>)
 80029bc:	4281      	cmp	r1, r0
 80029be:	dd03      	ble.n	80029c8 <__aeabi_d2iz+0x2c>
 80029c0:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <__aeabi_d2iz+0x68>)
 80029c2:	18f0      	adds	r0, r6, r3
 80029c4:	b002      	add	sp, #8
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	2080      	movs	r0, #128	@ 0x80
 80029ca:	0340      	lsls	r0, r0, #13
 80029cc:	4320      	orrs	r0, r4
 80029ce:	4c0e      	ldr	r4, [pc, #56]	@ (8002a08 <__aeabi_d2iz+0x6c>)
 80029d0:	1a64      	subs	r4, r4, r1
 80029d2:	2c1f      	cmp	r4, #31
 80029d4:	dd08      	ble.n	80029e8 <__aeabi_d2iz+0x4c>
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <__aeabi_d2iz+0x70>)
 80029d8:	1a5b      	subs	r3, r3, r1
 80029da:	40d8      	lsrs	r0, r3
 80029dc:	0003      	movs	r3, r0
 80029de:	4258      	negs	r0, r3
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d1ef      	bne.n	80029c4 <__aeabi_d2iz+0x28>
 80029e4:	0018      	movs	r0, r3
 80029e6:	e7ed      	b.n	80029c4 <__aeabi_d2iz+0x28>
 80029e8:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <__aeabi_d2iz+0x74>)
 80029ea:	9a00      	ldr	r2, [sp, #0]
 80029ec:	469c      	mov	ip, r3
 80029ee:	0003      	movs	r3, r0
 80029f0:	4461      	add	r1, ip
 80029f2:	408b      	lsls	r3, r1
 80029f4:	40e2      	lsrs	r2, r4
 80029f6:	4313      	orrs	r3, r2
 80029f8:	e7f1      	b.n	80029de <__aeabi_d2iz+0x42>
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	000003fe 	.word	0x000003fe
 8002a00:	0000041d 	.word	0x0000041d
 8002a04:	7fffffff 	.word	0x7fffffff
 8002a08:	00000433 	.word	0x00000433
 8002a0c:	00000413 	.word	0x00000413
 8002a10:	fffffbed 	.word	0xfffffbed

08002a14 <__aeabi_i2d>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d016      	beq.n	8002a48 <__aeabi_i2d+0x34>
 8002a1a:	17c3      	asrs	r3, r0, #31
 8002a1c:	18c5      	adds	r5, r0, r3
 8002a1e:	405d      	eors	r5, r3
 8002a20:	0fc4      	lsrs	r4, r0, #31
 8002a22:	0028      	movs	r0, r5
 8002a24:	f000 f848 	bl	8002ab8 <__clzsi2>
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <__aeabi_i2d+0x58>)
 8002a2a:	1a1b      	subs	r3, r3, r0
 8002a2c:	055b      	lsls	r3, r3, #21
 8002a2e:	0d5b      	lsrs	r3, r3, #21
 8002a30:	280a      	cmp	r0, #10
 8002a32:	dc14      	bgt.n	8002a5e <__aeabi_i2d+0x4a>
 8002a34:	0002      	movs	r2, r0
 8002a36:	002e      	movs	r6, r5
 8002a38:	3215      	adds	r2, #21
 8002a3a:	4096      	lsls	r6, r2
 8002a3c:	220b      	movs	r2, #11
 8002a3e:	1a12      	subs	r2, r2, r0
 8002a40:	40d5      	lsrs	r5, r2
 8002a42:	032d      	lsls	r5, r5, #12
 8002a44:	0b2d      	lsrs	r5, r5, #12
 8002a46:	e003      	b.n	8002a50 <__aeabi_i2d+0x3c>
 8002a48:	2400      	movs	r4, #0
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	2600      	movs	r6, #0
 8002a50:	051b      	lsls	r3, r3, #20
 8002a52:	432b      	orrs	r3, r5
 8002a54:	07e4      	lsls	r4, r4, #31
 8002a56:	4323      	orrs	r3, r4
 8002a58:	0030      	movs	r0, r6
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	380b      	subs	r0, #11
 8002a60:	4085      	lsls	r5, r0
 8002a62:	032d      	lsls	r5, r5, #12
 8002a64:	2600      	movs	r6, #0
 8002a66:	0b2d      	lsrs	r5, r5, #12
 8002a68:	e7f2      	b.n	8002a50 <__aeabi_i2d+0x3c>
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	0000041e 	.word	0x0000041e

08002a70 <__aeabi_ui2d>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	1e04      	subs	r4, r0, #0
 8002a74:	d010      	beq.n	8002a98 <__aeabi_ui2d+0x28>
 8002a76:	f000 f81f 	bl	8002ab8 <__clzsi2>
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <__aeabi_ui2d+0x44>)
 8002a7c:	1a1b      	subs	r3, r3, r0
 8002a7e:	055b      	lsls	r3, r3, #21
 8002a80:	0d5b      	lsrs	r3, r3, #21
 8002a82:	280a      	cmp	r0, #10
 8002a84:	dc0f      	bgt.n	8002aa6 <__aeabi_ui2d+0x36>
 8002a86:	220b      	movs	r2, #11
 8002a88:	0021      	movs	r1, r4
 8002a8a:	1a12      	subs	r2, r2, r0
 8002a8c:	40d1      	lsrs	r1, r2
 8002a8e:	3015      	adds	r0, #21
 8002a90:	030a      	lsls	r2, r1, #12
 8002a92:	4084      	lsls	r4, r0
 8002a94:	0b12      	lsrs	r2, r2, #12
 8002a96:	e001      	b.n	8002a9c <__aeabi_ui2d+0x2c>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	051b      	lsls	r3, r3, #20
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	0022      	movs	r2, r4
 8002aa8:	380b      	subs	r0, #11
 8002aaa:	4082      	lsls	r2, r0
 8002aac:	0312      	lsls	r2, r2, #12
 8002aae:	2400      	movs	r4, #0
 8002ab0:	0b12      	lsrs	r2, r2, #12
 8002ab2:	e7f3      	b.n	8002a9c <__aeabi_ui2d+0x2c>
 8002ab4:	0000041e 	.word	0x0000041e

08002ab8 <__clzsi2>:
 8002ab8:	211c      	movs	r1, #28
 8002aba:	2301      	movs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	d301      	bcc.n	8002ac6 <__clzsi2+0xe>
 8002ac2:	0c00      	lsrs	r0, r0, #16
 8002ac4:	3910      	subs	r1, #16
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	4298      	cmp	r0, r3
 8002aca:	d301      	bcc.n	8002ad0 <__clzsi2+0x18>
 8002acc:	0a00      	lsrs	r0, r0, #8
 8002ace:	3908      	subs	r1, #8
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	d301      	bcc.n	8002ada <__clzsi2+0x22>
 8002ad6:	0900      	lsrs	r0, r0, #4
 8002ad8:	3904      	subs	r1, #4
 8002ada:	a202      	add	r2, pc, #8	@ (adr r2, 8002ae4 <__clzsi2+0x2c>)
 8002adc:	5c10      	ldrb	r0, [r2, r0]
 8002ade:	1840      	adds	r0, r0, r1
 8002ae0:	4770      	bx	lr
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	02020304 	.word	0x02020304
 8002ae8:	01010101 	.word	0x01010101
	...

08002af4 <__clzdi2>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	2900      	cmp	r1, #0
 8002af8:	d103      	bne.n	8002b02 <__clzdi2+0xe>
 8002afa:	f7ff ffdd 	bl	8002ab8 <__clzsi2>
 8002afe:	3020      	adds	r0, #32
 8002b00:	e002      	b.n	8002b08 <__clzdi2+0x14>
 8002b02:	0008      	movs	r0, r1
 8002b04:	f7ff ffd8 	bl	8002ab8 <__clzsi2>
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)

08002b0c <ColorSensor_Init>:
#include "colorsensor.h"

extern speaker Speaker;

void ColorSensor_Init(colorsensor* sensor, I2C_HandleTypeDef* i2c_handle) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
    sensor->i2c = i2c_handle;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	601a      	str	r2, [r3, #0]
    sensor->slave_address = TCS3472_SLAVE_ADDRESS;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2252      	movs	r2, #82	@ 0x52
 8002b20:	711a      	strb	r2, [r3, #4]

    memset(sensor->rgb_data, 0, sizeof(sensor->rgb_data));  // Clear RGB data
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3306      	adds	r3, #6
 8002b26:	2208      	movs	r2, #8
 8002b28:	2100      	movs	r1, #0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f007 ff40 	bl	800a9b0 <memset>
    sensor->enabled = true;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	739a      	strb	r2, [r3, #14]

    // Define initialization sequence
    uint8_t init_data[][2] = {
 8002b36:	230c      	movs	r3, #12
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <ColorSensor_Init+0x7c>)
 8002b3c:	6811      	ldr	r1, [r2, #0]
 8002b3e:	6019      	str	r1, [r3, #0]
 8002b40:	8892      	ldrh	r2, [r2, #4]
 8002b42:	809a      	strh	r2, [r3, #4]
        { TCS3472_ATIME_REG  | 0x80, 0xFF },  // Integration time
        { TCS3472_ENABLE_REG | 0x80, 0x0B },   // Power ON & enable RGBC
    };

    // Loop through initialization commands and send them
    for (size_t i = 0; i < sizeof(init_data) / sizeof(init_data[0]); i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e016      	b.n	8002b78 <ColorSensor_Init+0x6c>
        if (HAL_I2C_Master_Transmit(sensor->i2c, sensor->slave_address, init_data[i], 2, HAL_MAX_DELAY) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	791b      	ldrb	r3, [r3, #4]
 8002b52:	0019      	movs	r1, r3
 8002b54:	230c      	movs	r3, #12
 8002b56:	18fa      	adds	r2, r7, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	18d2      	adds	r2, r2, r3
 8002b5e:	2301      	movs	r3, #1
 8002b60:	425b      	negs	r3, r3
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2302      	movs	r3, #2
 8002b66:	f002 fc49 	bl	80053fc <HAL_I2C_Master_Transmit>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d001      	beq.n	8002b72 <ColorSensor_Init+0x66>
        	while(1);
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	e7fd      	b.n	8002b6e <ColorSensor_Init+0x62>
    for (size_t i = 0; i < sizeof(init_data) / sizeof(init_data[0]); i++) {
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d9e5      	bls.n	8002b4a <ColorSensor_Init+0x3e>
    }
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b006      	add	sp, #24
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0800cc88 	.word	0x0800cc88

08002b8c <ColorSensor_Read16>:
{
	sensor->enabled = enable;
}


uint16_t ColorSensor_Read16(colorsensor* sensor, uint8_t reg) {
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	000a      	movs	r2, r1
 8002b96:	1cfb      	adds	r3, r7, #3
 8002b98:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2];
    uint8_t command = reg | 0xA0;  // Add auto-increment bit
 8002b9a:	1cfb      	adds	r3, r7, #3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2260      	movs	r2, #96	@ 0x60
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	240b      	movs	r4, #11
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	701a      	strb	r2, [r3, #0]

    // Send register address
    if (HAL_I2C_Master_Transmit(sensor->i2c, sensor->slave_address, &command, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	193a      	adds	r2, r7, r4
 8002bb8:	2301      	movs	r3, #1
 8002bba:	425b      	negs	r3, r3
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f002 fc1c 	bl	80053fc <HAL_I2C_Master_Transmit>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d001      	beq.n	8002bcc <ColorSensor_Read16+0x40>
        return 0; // Handle error
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e01c      	b.n	8002c06 <ColorSensor_Read16+0x7a>
    }

    // Read 2 bytes from the sensor
    if (HAL_I2C_Master_Receive(sensor->i2c, sensor->slave_address, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	791b      	ldrb	r3, [r3, #4]
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	18fa      	adds	r2, r7, r3
 8002bda:	2301      	movs	r3, #1
 8002bdc:	425b      	negs	r3, r3
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2302      	movs	r3, #2
 8002be2:	f002 fd13 	bl	800560c <HAL_I2C_Master_Receive>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <ColorSensor_Read16+0x62>
        return 0; // Handle error
 8002bea:	2300      	movs	r3, #0
 8002bec:	e00b      	b.n	8002c06 <ColorSensor_Read16+0x7a>
    }

    // Combine two bytes into a 16-bit value (LSB first)
    return (uint16_t)(buffer[0] | (buffer[1] << 8));
 8002bee:	210c      	movs	r1, #12
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	b29b      	uxth	r3, r3
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b005      	add	sp, #20
 8002c0c:	bd90      	pop	{r4, r7, pc}

08002c0e <ColorSensor_ReadAll>:

void ColorSensor_ReadAll(colorsensor* sensor) {
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
    //sensor->rgb_data[0] = ColorSensor_Read16(sensor, TCS3472_CDATAL_REG); // TCS3472_CDATAL
    sensor->rgb_data[1]   = ColorSensor_Read16(sensor, TCS3472_RDATAL_REG); // TCS3472_RDATAL
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2116      	movs	r1, #22
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff ffb6 	bl	8002b8c <ColorSensor_Read16>
 8002c20:	0003      	movs	r3, r0
 8002c22:	001a      	movs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	811a      	strh	r2, [r3, #8]
    sensor->rgb_data[2] = ColorSensor_Read16(sensor, TCS3472_GDATAL_REG); // TCS3472_GDATAL
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2118      	movs	r1, #24
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff ffad 	bl	8002b8c <ColorSensor_Read16>
 8002c32:	0003      	movs	r3, r0
 8002c34:	001a      	movs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	815a      	strh	r2, [r3, #10]
    sensor->rgb_data[3]  = ColorSensor_Read16(sensor, TCS3472_BDATAL_REG); // TCS3472_BDATAL
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	211a      	movs	r1, #26
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff ffa4 	bl	8002b8c <ColorSensor_Read16>
 8002c44:	0003      	movs	r3, r0
 8002c46:	001a      	movs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	819a      	strh	r2, [r3, #12]
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <ColorSensor_CalculateColor>:


color ColorSensor_CalculateColor(colorsensor* sensor)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	uint16_t max_val = sensor->rgb_data[1];
 8002c5c:	210c      	movs	r1, #12
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	8912      	ldrh	r2, [r2, #8]
 8002c64:	801a      	strh	r2, [r3, #0]
	color detected_color = RED;
 8002c66:	200f      	movs	r0, #15
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]

	if (sensor->rgb_data[2] > max_val) detected_color = GREEN;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	895b      	ldrh	r3, [r3, #10]
 8002c72:	187a      	adds	r2, r7, r1
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d202      	bcs.n	8002c80 <ColorSensor_CalculateColor+0x2c>
 8002c7a:	183b      	adds	r3, r7, r0
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	701a      	strb	r2, [r3, #0]
	if (sensor->rgb_data[3] > max_val) detected_color = BLUE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	899b      	ldrh	r3, [r3, #12]
 8002c84:	220c      	movs	r2, #12
 8002c86:	18ba      	adds	r2, r7, r2
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d203      	bcs.n	8002c96 <ColorSensor_CalculateColor+0x42>
 8002c8e:	230f      	movs	r3, #15
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]

	return detected_color;
 8002c96:	230f      	movs	r3, #15
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <ColorSensor_Handle>:

void ColorSensor_Handle(colorsensor* sensor)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	6078      	str	r0, [r7, #4]
	ColorSensor_ReadAll(sensor);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7ff ffad 	bl	8002c0e <ColorSensor_ReadAll>
	color detected_color = ColorSensor_CalculateColor(sensor);
 8002cb4:	250f      	movs	r5, #15
 8002cb6:	197c      	adds	r4, r7, r5
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff ffca 	bl	8002c54 <ColorSensor_CalculateColor>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	7023      	strb	r3, [r4, #0]
	if (detected_color == RED && !Speaker.hasFault)
 8002cc4:	197b      	adds	r3, r7, r5
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10d      	bne.n	8002ce8 <ColorSensor_Handle+0x44>
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <ColorSensor_Handle+0x98>)
 8002cce:	7d1b      	ldrb	r3, [r3, #20]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4053      	eors	r3, r2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <ColorSensor_Handle+0x44>
	{
		Speaker_Start(&Speaker, COLOR_SENSOR_ID);
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <ColorSensor_Handle+0x98>)
 8002cde:	2102      	movs	r1, #2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f001 f980 	bl	8003fe6 <Speaker_Start>
 8002ce6:	e004      	b.n	8002cf2 <ColorSensor_Handle+0x4e>
	}
	else
	{
		Speaker_Stop(&Speaker, COLOR_SENSOR_ID);
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <ColorSensor_Handle+0x98>)
 8002cea:	2102      	movs	r1, #2
 8002cec:	0018      	movs	r0, r3
 8002cee:	f001 f9af 	bl	8004050 <Speaker_Stop>
	}

	sprintf(Data, "%u %u %u %u\r\n", (uint8_t) detected_color, sensor->rgb_data[1], sensor->rgb_data[2], sensor->rgb_data[3]);
 8002cf2:	230f      	movs	r3, #15
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	891b      	ldrh	r3, [r3, #8]
 8002cfc:	001d      	movs	r5, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	895b      	ldrh	r3, [r3, #10]
 8002d02:	001c      	movs	r4, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	899b      	ldrh	r3, [r3, #12]
 8002d08:	490d      	ldr	r1, [pc, #52]	@ (8002d40 <ColorSensor_Handle+0x9c>)
 8002d0a:	480e      	ldr	r0, [pc, #56]	@ (8002d44 <ColorSensor_Handle+0xa0>)
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	9400      	str	r4, [sp, #0]
 8002d10:	002b      	movs	r3, r5
 8002d12:	f007 fddf 	bl	800a8d4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <ColorSensor_Handle+0xa0>)
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7fd f9f5 	bl	8000108 <strlen>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	2301      	movs	r3, #1
 8002d24:	425b      	negs	r3, r3
 8002d26:	4907      	ldr	r1, [pc, #28]	@ (8002d44 <ColorSensor_Handle+0xa0>)
 8002d28:	4807      	ldr	r0, [pc, #28]	@ (8002d48 <ColorSensor_Handle+0xa4>)
 8002d2a:	f006 fb61 	bl	80093f0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002d2e:	2064      	movs	r0, #100	@ 0x64
 8002d30:	f001 fea2 	bl	8004a78 <HAL_Delay>

}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3c:	20000478 	.word	0x20000478
 8002d40:	0800cc90 	.word	0x0800cc90
 8002d44:	200004a0 	.word	0x200004a0
 8002d48:	200003a4 	.word	0x200003a4

08002d4c <DistanceSensor_Init>:
#define MIN_DISTANCE 20

extern speaker Speaker;

void DistanceSensor_Init(distancesensor* sensor, TIM_HandleTypeDef* timer, feature_id ID, GPIO_TypeDef* icGPIOPort, uint16_t icGPIOPin, GPIO_TypeDef* statusGPIOPort, uint16_t statusGPIOPin)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
	sensor->timer = timer;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	601a      	str	r2, [r3, #0]

	sensor->timeDifference = 0;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
	sensor->countAtMinDistance = 0;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	731a      	strb	r2, [r3, #12]

	sensor->ID = ID;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1dfa      	adds	r2, r7, #7
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	735a      	strb	r2, [r3, #13]

	sensor->icGPIOPort = icGPIOPort;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	611a      	str	r2, [r3, #16]
	sensor->icGPIOPin = icGPIOPin;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	2318      	movs	r3, #24
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	8293      	strh	r3, [r2, #20]

	sensor->statusGPIOPort = statusGPIOPort;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	619a      	str	r2, [r3, #24]
	sensor->statusGPIOPin = statusGPIOPin;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	18ba      	adds	r2, r7, r2
 8002d92:	8812      	ldrh	r2, [r2, #0]
 8002d94:	839a      	strh	r2, [r3, #28]

	HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6998      	ldr	r0, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8b9b      	ldrh	r3, [r3, #28]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	0019      	movs	r1, r3
 8002da2:	f002 fa78 	bl	8005296 <HAL_GPIO_WritePin>


}
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}

08002dae <DistanceSensor_Start>:

void DistanceSensor_Start(distancesensor* sensor)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2104      	movs	r1, #4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f005 f9eb 	bl	8008198 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(sensor->timer, TIM_CHANNEL_1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f005 faf7 	bl	80083bc <HAL_TIM_IC_Start_IT>
}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8a9b      	ldrh	r3, [r3, #20]
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f002 fa36 	bl	800525c <HAL_GPIO_ReadPin>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d010      	beq.n	8002e16 <DistanceSensor_InputCaptureInterrupt+0x3e>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2100      	movs	r1, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f005 fecc 	bl	8008b98 <HAL_TIM_ReadCapturedValue>
 8002e00:	0003      	movs	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f005 fa4e 	bl	80082b0 <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002e14:	e034      	b.n	8002e80 <DistanceSensor_InputCaptureInterrupt+0xa8>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f005 febb 	bl	8008b98 <HAL_TIM_ReadCapturedValue>
 8002e22:	0003      	movs	r3, r0
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	88da      	ldrh	r2, [r3, #6]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	889b      	ldrh	r3, [r3, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d909      	bls.n	8002e4a <DistanceSensor_InputCaptureInterrupt+0x72>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	88db      	ldrh	r3, [r3, #6]
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	889b      	ldrh	r3, [r3, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	001a      	movs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e00b      	b.n	8002e62 <DistanceSensor_InputCaptureInterrupt+0x8a>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	889b      	ldrh	r3, [r3, #4]
 8002e4e:	001a      	movs	r2, r3
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	88d2      	ldrh	r2, [r2, #6]
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2104      	movs	r1, #4
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f005 f995 	bl	8008198 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <DistanceSensor_InputCaptureInterrupt+0xb0>)
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24
			DistanceSensor_Handle(sensor);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f81c 	bl	8002eb8 <DistanceSensor_Handle>
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0000ffff 	.word	0x0000ffff

08002e8c <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd fe27 	bl	8000aec <__aeabi_ui2f>
 8002e9e:	1c03      	adds	r3, r0, #0
 8002ea0:	4904      	ldr	r1, [pc, #16]	@ (8002eb4 <DistanceSensor_GetDistance+0x28>)
 8002ea2:	1c18      	adds	r0, r3, #0
 8002ea4:	f7fd fc54 	bl	8000750 <__aeabi_fdiv>
 8002ea8:	1c03      	adds	r3, r0, #0
}
 8002eaa:	1c18      	adds	r0, r3, #0
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	42680000 	.word	0x42680000

08002eb8 <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7ff ffe2 	bl	8002e8c <DistanceSensor_GetDistance>
 8002ec8:	1c03      	adds	r3, r0, #0
 8002eca:	60fb      	str	r3, [r7, #12]

	if (distance > MIN_DISTANCE)
 8002ecc:	4921      	ldr	r1, [pc, #132]	@ (8002f54 <DistanceSensor_Handle+0x9c>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7fd fb10 	bl	80004f4 <__aeabi_fcmpgt>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d017      	beq.n	8002f08 <DistanceSensor_Handle+0x50>
	{
		sensor->countAtMinDistance = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6998      	ldr	r0, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8b9b      	ldrh	r3, [r3, #28]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	0019      	movs	r1, r3
 8002eea:	f002 f9d4 	bl	8005296 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_SET);

		if (Speaker.hasFault)
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <DistanceSensor_Handle+0xa0>)
 8002ef0:	7d1b      	ldrb	r3, [r3, #20]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d029      	beq.n	8002f4c <DistanceSensor_Handle+0x94>
			Speaker_Stop(&Speaker, sensor->ID);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7b5a      	ldrb	r2, [r3, #13]
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <DistanceSensor_Handle+0xa0>)
 8002efe:	0011      	movs	r1, r2
 8002f00:	0018      	movs	r0, r3
 8002f02:	f001 f8a5 	bl	8004050 <Speaker_Stop>
	else
	{
		sensor->countAtMinDistance++;
	}

}
 8002f06:	e021      	b.n	8002f4c <DistanceSensor_Handle+0x94>
	else if (sensor->countAtMinDistance > 2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7b1b      	ldrb	r3, [r3, #12]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d917      	bls.n	8002f40 <DistanceSensor_Handle+0x88>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6998      	ldr	r0, [r3, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8b9b      	ldrh	r3, [r3, #28]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	f002 f9bb 	bl	8005296 <HAL_GPIO_WritePin>
		if (!Speaker.hasFault)
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <DistanceSensor_Handle+0xa0>)
 8002f22:	7d1b      	ldrb	r3, [r3, #20]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2201      	movs	r2, #1
 8002f28:	4053      	eors	r3, r2
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <DistanceSensor_Handle+0x94>
			Speaker_Start(&Speaker, sensor->ID);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7b5a      	ldrb	r2, [r3, #13]
 8002f34:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <DistanceSensor_Handle+0xa0>)
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f001 f854 	bl	8003fe6 <Speaker_Start>
}
 8002f3e:	e005      	b.n	8002f4c <DistanceSensor_Handle+0x94>
		sensor->countAtMinDistance++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7b1b      	ldrb	r3, [r3, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	731a      	strb	r2, [r3, #12]
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b004      	add	sp, #16
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	41a00000 	.word	0x41a00000
 8002f58:	20000478 	.word	0x20000478

08002f5c <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d104      	bne.n	8002f78 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM22) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 8002f76:	e008      	b.n	8002f8a <HAL_TIM_IC_CaptureCallback+0x2e>
	else if (htim->Instance == TIM22) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <HAL_TIM_IC_CaptureCallback+0x40>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d103      	bne.n	8002f8a <HAL_TIM_IC_CaptureCallback+0x2e>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff ff27 	bl	8002dd8 <DistanceSensor_InputCaptureInterrupt>
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	40010800 	.word	0x40010800
 8002f98:	20000438 	.word	0x20000438
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	20000458 	.word	0x20000458

08002fa4 <HAL_TIM_PeriodElapsedCallback>:
    }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2 && Speaker.beepLengthOn != 0)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d108      	bne.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x26>
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002fba:	891b      	ldrh	r3, [r3, #8]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Speaker_BeepInterrupt(&Speaker);
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f001 f8d9 	bl	800417c <Speaker_BeepInterrupt>
	}

}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	20000478 	.word	0x20000478

08002fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fde:	f001 fcdb 	bl	8004998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fe2:	f000 f863 	bl	80030ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe6:	f000 fb71 	bl	80036cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002fea:	f000 fb51 	bl	8003690 <MX_DMA_Init>
  MX_I2C1_Init();
 8002fee:	f000 f8d9 	bl	80031a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002ff2:	f000 f917 	bl	8003224 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002ff6:	f000 fb1b 	bl	8003630 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002ffa:	f000 f94b 	bl	8003294 <MX_TIM2_Init>
  MX_TIM22_Init();
 8002ffe:	f000 fa6f 	bl	80034e0 <MX_TIM22_Init>
  MX_TIM21_Init();
 8003002:	f000 f9c5 	bl	8003390 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  DistanceSensor_Init(&Front, &htim21, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
 8003006:	23a0      	movs	r3, #160	@ 0xa0
 8003008:	05da      	lsls	r2, r3, #23
 800300a:	491e      	ldr	r1, [pc, #120]	@ (8003084 <main+0xac>)
 800300c:	481e      	ldr	r0, [pc, #120]	@ (8003088 <main+0xb0>)
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	9302      	str	r3, [sp, #8]
 8003014:	23a0      	movs	r3, #160	@ 0xa0
 8003016:	05db      	lsls	r3, r3, #23
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2304      	movs	r3, #4
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	0013      	movs	r3, r2
 8003020:	2200      	movs	r2, #0
 8003022:	f7ff fe93 	bl	8002d4c <DistanceSensor_Init>
  DistanceSensor_Init(&Back, &htim22, DISTANCE_SENSOR_BACK_ID, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_BACK_STATUS_GPIO_Port, DISTANCE_SENSOR_BACK_STATUS_Pin);
 8003026:	4a19      	ldr	r2, [pc, #100]	@ (800308c <main+0xb4>)
 8003028:	4919      	ldr	r1, [pc, #100]	@ (8003090 <main+0xb8>)
 800302a:	481a      	ldr	r0, [pc, #104]	@ (8003094 <main+0xbc>)
 800302c:	2308      	movs	r3, #8
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <main+0xb4>)
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	2310      	movs	r3, #16
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	0013      	movs	r3, r2
 800303a:	2201      	movs	r2, #1
 800303c:	f7ff fe86 	bl	8002d4c <DistanceSensor_Init>
  RFID_Init(&RFID_Module);
 8003040:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <main+0xc0>)
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fe5a 	bl	8003cfc <RFID_Init>
  Speaker_Init(&Speaker, &RFID_Module, &htim2);
 8003048:	4a14      	ldr	r2, [pc, #80]	@ (800309c <main+0xc4>)
 800304a:	4913      	ldr	r1, [pc, #76]	@ (8003098 <main+0xc0>)
 800304c:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <main+0xc8>)
 800304e:	0018      	movs	r0, r3
 8003050:	f000 ff90 	bl	8003f74 <Speaker_Init>
  ColorSensor_Init(&Color, &hi2c1);
 8003054:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <main+0xcc>)
 8003056:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <main+0xd0>)
 8003058:	0011      	movs	r1, r2
 800305a:	0018      	movs	r0, r3
 800305c:	f7ff fd56 	bl	8002b0c <ColorSensor_Init>
  //ColorSensor_Init(&Color, &hi2c1, COLORSENSOR_SLAVE_ADDRESS);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DistanceSensor_Start(&Front);
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <main+0xb0>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fea3 	bl	8002dae <DistanceSensor_Start>
  DistanceSensor_Start(&Back);
 8003068:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <main+0xbc>)
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fe9f 	bl	8002dae <DistanceSensor_Start>
  while (1)
  {
	  //ColorSensor_ReceiveTransmit(&Color, sendData, receiveData);
	  RFID_SecurityLogic(&RFID_Module);
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <main+0xc0>)
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fefe 	bl	8003e74 <RFID_SecurityLogic>
	  //ColorSensor_Handle(&Color);
	  ColorSensor_Handle(&Color);
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <main+0xd0>)
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fe12 	bl	8002ca4 <ColorSensor_Handle>
	  RFID_SecurityLogic(&RFID_Module);
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	e7f5      	b.n	8003070 <main+0x98>
 8003084:	20000324 	.word	0x20000324
 8003088:	20000438 	.word	0x20000438
 800308c:	50000400 	.word	0x50000400
 8003090:	20000364 	.word	0x20000364
 8003094:	20000458 	.word	0x20000458
 8003098:	2000042c 	.word	0x2000042c
 800309c:	200002e4 	.word	0x200002e4
 80030a0:	20000478 	.word	0x20000478
 80030a4:	200001f0 	.word	0x200001f0
 80030a8:	20000490 	.word	0x20000490

080030ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b09b      	sub	sp, #108	@ 0x6c
 80030b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b2:	2434      	movs	r4, #52	@ 0x34
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	0018      	movs	r0, r3
 80030b8:	2334      	movs	r3, #52	@ 0x34
 80030ba:	001a      	movs	r2, r3
 80030bc:	2100      	movs	r1, #0
 80030be:	f007 fc77 	bl	800a9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c2:	2320      	movs	r3, #32
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	0018      	movs	r0, r3
 80030c8:	2314      	movs	r3, #20
 80030ca:	001a      	movs	r2, r3
 80030cc:	2100      	movs	r1, #0
 80030ce:	f007 fc6f 	bl	800a9b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	0018      	movs	r0, r3
 80030d6:	231c      	movs	r3, #28
 80030d8:	001a      	movs	r2, r3
 80030da:	2100      	movs	r1, #0
 80030dc:	f007 fc68 	bl	800a9b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e0:	4b2e      	ldr	r3, [pc, #184]	@ (800319c <SystemClock_Config+0xf0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2e      	ldr	r2, [pc, #184]	@ (80031a0 <SystemClock_Config+0xf4>)
 80030e6:	401a      	ands	r2, r3
 80030e8:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <SystemClock_Config+0xf0>)
 80030ea:	2180      	movs	r1, #128	@ 0x80
 80030ec:	0109      	lsls	r1, r1, #4
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030f2:	0021      	movs	r1, r4
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	2202      	movs	r2, #2
 80030f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2201      	movs	r2, #1
 80030fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2210      	movs	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2202      	movs	r2, #2
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2280      	movs	r2, #128	@ 0x80
 8003116:	02d2      	lsls	r2, r2, #11
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	03d2      	lsls	r2, r2, #15
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003122:	187b      	adds	r3, r7, r1
 8003124:	0018      	movs	r0, r3
 8003126:	f003 fcbd 	bl	8006aa4 <HAL_RCC_OscConfig>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800312e:	f000 fb49 	bl	80037c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003132:	2120      	movs	r1, #32
 8003134:	187b      	adds	r3, r7, r1
 8003136:	220f      	movs	r2, #15
 8003138:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2203      	movs	r2, #3
 800313e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800314c:	187b      	adds	r3, r7, r1
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003152:	187b      	adds	r3, r7, r1
 8003154:	2101      	movs	r1, #1
 8003156:	0018      	movs	r0, r3
 8003158:	f004 f80e 	bl	8007178 <HAL_RCC_ClockConfig>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003160:	f000 fb30 	bl	80037c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2209      	movs	r2, #9
 8003168:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	0018      	movs	r0, r3
 800317a:	f004 faa5 	bl	80076c8 <HAL_RCCEx_PeriphCLKConfig>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003182:	f000 fb1f 	bl	80037c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8003186:	2380      	movs	r3, #128	@ 0x80
 8003188:	045b      	lsls	r3, r3, #17
 800318a:	2200      	movs	r2, #0
 800318c:	0019      	movs	r1, r3
 800318e:	2000      	movs	r0, #0
 8003190:	f004 f93a 	bl	8007408 <HAL_RCC_MCOConfig>
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b01b      	add	sp, #108	@ 0x6c
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	40007000 	.word	0x40007000
 80031a0:	ffffe7ff 	.word	0xffffe7ff

080031a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031aa:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <MX_I2C1_Init+0x78>)
 80031ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80031ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <MX_I2C1_Init+0x7c>)
 80031b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80031b4:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031b6:	2220      	movs	r2, #32
 80031b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031ba:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031bc:	2201      	movs	r2, #1
 80031be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031c0:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80031c6:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031da:	2200      	movs	r2, #0
 80031dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f002 f875 	bl	80052d0 <HAL_I2C_Init>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031ea:	f000 faeb 	bl	80037c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <MX_I2C1_Init+0x74>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f003 fbbe 	bl	8006974 <HAL_I2CEx_ConfigAnalogFilter>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d001      	beq.n	8003200 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031fc:	f000 fae2 	bl	80037c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <MX_I2C1_Init+0x74>)
 8003202:	2100      	movs	r1, #0
 8003204:	0018      	movs	r0, r3
 8003206:	f003 fc01 	bl	8006a0c <HAL_I2CEx_ConfigDigitalFilter>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d001      	beq.n	8003212 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800320e:	f000 fad9 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200001f0 	.word	0x200001f0
 800321c:	40005400 	.word	0x40005400
 8003220:	00300f38 	.word	0x00300f38

08003224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <MX_SPI1_Init+0x68>)
 800322a:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <MX_SPI1_Init+0x6c>)
 800322c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800322e:	4b17      	ldr	r3, [pc, #92]	@ (800328c <MX_SPI1_Init+0x68>)
 8003230:	2282      	movs	r2, #130	@ 0x82
 8003232:	0052      	lsls	r2, r2, #1
 8003234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <MX_SPI1_Init+0x68>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <MX_SPI1_Init+0x68>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <MX_SPI1_Init+0x68>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <MX_SPI1_Init+0x68>)
 800324a:	2200      	movs	r2, #0
 800324c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800324e:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <MX_SPI1_Init+0x68>)
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003256:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <MX_SPI1_Init+0x68>)
 8003258:	2228      	movs	r2, #40	@ 0x28
 800325a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <MX_SPI1_Init+0x68>)
 800325e:	2200      	movs	r2, #0
 8003260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003262:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <MX_SPI1_Init+0x68>)
 8003264:	2200      	movs	r2, #0
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <MX_SPI1_Init+0x68>)
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800326e:	4b07      	ldr	r3, [pc, #28]	@ (800328c <MX_SPI1_Init+0x68>)
 8003270:	2207      	movs	r2, #7
 8003272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <MX_SPI1_Init+0x68>)
 8003276:	0018      	movs	r0, r3
 8003278:	f004 fb60 	bl	800793c <HAL_SPI_Init>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003280:	f000 faa0 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	2000028c 	.word	0x2000028c
 8003290:	40013000 	.word	0x40013000

08003294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	@ 0x28
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800329a:	2318      	movs	r3, #24
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	0018      	movs	r0, r3
 80032a0:	2310      	movs	r3, #16
 80032a2:	001a      	movs	r2, r3
 80032a4:	2100      	movs	r1, #0
 80032a6:	f007 fb83 	bl	800a9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032aa:	2310      	movs	r3, #16
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	0018      	movs	r0, r3
 80032b0:	2308      	movs	r3, #8
 80032b2:	001a      	movs	r2, r3
 80032b4:	2100      	movs	r1, #0
 80032b6:	f007 fb7b 	bl	800a9b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ba:	003b      	movs	r3, r7
 80032bc:	0018      	movs	r0, r3
 80032be:	2310      	movs	r3, #16
 80032c0:	001a      	movs	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	f007 fb74 	bl	800a9b0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032c8:	4b30      	ldr	r3, [pc, #192]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	05d2      	lsls	r2, r2, #23
 80032ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80032d0:	4b2e      	ldr	r3, [pc, #184]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032d2:	221f      	movs	r2, #31
 80032d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b2d      	ldr	r3, [pc, #180]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 80032dc:	4b2b      	ldr	r3, [pc, #172]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032de:	22f4      	movs	r2, #244	@ 0xf4
 80032e0:	0052      	lsls	r2, r2, #1
 80032e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	4b29      	ldr	r3, [pc, #164]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032ea:	4b28      	ldr	r3, [pc, #160]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032f0:	4b26      	ldr	r3, [pc, #152]	@ (800338c <MX_TIM2_Init+0xf8>)
 80032f2:	0018      	movs	r0, r3
 80032f4:	f004 fe56 	bl	8007fa4 <HAL_TIM_Base_Init>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80032fc:	f000 fa62 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003300:	2118      	movs	r1, #24
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2280      	movs	r2, #128	@ 0x80
 8003306:	0152      	lsls	r2, r2, #5
 8003308:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800330a:	187a      	adds	r2, r7, r1
 800330c:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <MX_TIM2_Init+0xf8>)
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f005 fb6d 	bl	80089f0 <HAL_TIM_ConfigClockSource>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d001      	beq.n	800331e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800331a:	f000 fa53 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800331e:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <MX_TIM2_Init+0xf8>)
 8003320:	0018      	movs	r0, r3
 8003322:	f004 fef1 	bl	8008108 <HAL_TIM_PWM_Init>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d001      	beq.n	800332e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800332a:	f000 fa4b 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332e:	2110      	movs	r1, #16
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003336:	187b      	adds	r3, r7, r1
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800333c:	187a      	adds	r2, r7, r1
 800333e:	4b13      	ldr	r3, [pc, #76]	@ (800338c <MX_TIM2_Init+0xf8>)
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f005 ffa8 	bl	8009298 <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800334c:	f000 fa3a 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003350:	003b      	movs	r3, r7
 8003352:	2260      	movs	r2, #96	@ 0x60
 8003354:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 244;
 8003356:	003b      	movs	r3, r7
 8003358:	22f4      	movs	r2, #244	@ 0xf4
 800335a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335c:	003b      	movs	r3, r7
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	003b      	movs	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003368:	0039      	movs	r1, r7
 800336a:	4b08      	ldr	r3, [pc, #32]	@ (800338c <MX_TIM2_Init+0xf8>)
 800336c:	2200      	movs	r2, #0
 800336e:	0018      	movs	r0, r3
 8003370:	f005 fa78 	bl	8008864 <HAL_TIM_PWM_ConfigChannel>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003378:	f000 fa24 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <MX_TIM2_Init+0xf8>)
 800337e:	0018      	movs	r0, r3
 8003380:	f001 f8e4 	bl	800454c <HAL_TIM_MspPostInit>

}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b00a      	add	sp, #40	@ 0x28
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200002e4 	.word	0x200002e4

08003390 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003396:	2328      	movs	r3, #40	@ 0x28
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	0018      	movs	r0, r3
 800339c:	2310      	movs	r3, #16
 800339e:	001a      	movs	r2, r3
 80033a0:	2100      	movs	r1, #0
 80033a2:	f007 fb05 	bl	800a9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a6:	2320      	movs	r3, #32
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	0018      	movs	r0, r3
 80033ac:	2308      	movs	r3, #8
 80033ae:	001a      	movs	r2, r3
 80033b0:	2100      	movs	r1, #0
 80033b2:	f007 fafd 	bl	800a9b0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033b6:	2310      	movs	r3, #16
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	0018      	movs	r0, r3
 80033bc:	2310      	movs	r3, #16
 80033be:	001a      	movs	r2, r3
 80033c0:	2100      	movs	r1, #0
 80033c2:	f007 faf5 	bl	800a9b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c6:	003b      	movs	r3, r7
 80033c8:	0018      	movs	r0, r3
 80033ca:	2310      	movs	r3, #16
 80033cc:	001a      	movs	r2, r3
 80033ce:	2100      	movs	r1, #0
 80033d0:	f007 faee 	bl	800a9b0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80033d4:	4b3f      	ldr	r3, [pc, #252]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033d6:	4a40      	ldr	r2, [pc, #256]	@ (80034d8 <MX_TIM21_Init+0x148>)
 80033d8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 80033da:	4b3e      	ldr	r3, [pc, #248]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033dc:	221f      	movs	r2, #31
 80033de:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e0:	4b3c      	ldr	r3, [pc, #240]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 80033e6:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033e8:	4a3c      	ldr	r2, [pc, #240]	@ (80034dc <MX_TIM21_Init+0x14c>)
 80033ea:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ec:	4b39      	ldr	r3, [pc, #228]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033f2:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80033f8:	4b36      	ldr	r3, [pc, #216]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f004 fdd2 	bl	8007fa4 <HAL_TIM_Base_Init>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8003404:	f000 f9de 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003408:	2128      	movs	r1, #40	@ 0x28
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2280      	movs	r2, #128	@ 0x80
 800340e:	0152      	lsls	r2, r2, #5
 8003410:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003412:	187a      	adds	r2, r7, r1
 8003414:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <MX_TIM21_Init+0x144>)
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f005 fae9 	bl	80089f0 <HAL_TIM_ConfigClockSource>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8003422:	f000 f9cf 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 8003426:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <MX_TIM21_Init+0x144>)
 8003428:	0018      	movs	r0, r3
 800342a:	f004 ff7f 	bl	800832c <HAL_TIM_IC_Init>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8003432:	f000 f9c7 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8003436:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <MX_TIM21_Init+0x144>)
 8003438:	0018      	movs	r0, r3
 800343a:	f004 fe65 	bl	8008108 <HAL_TIM_PWM_Init>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM21_Init+0xb6>
  {
    Error_Handler();
 8003442:	f000 f9bf 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003446:	2120      	movs	r1, #32
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003454:	187a      	adds	r2, r7, r1
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <MX_TIM21_Init+0x144>)
 8003458:	0011      	movs	r1, r2
 800345a:	0018      	movs	r0, r3
 800345c:	f005 ff1c 	bl	8009298 <HAL_TIMEx_MasterConfigSynchronization>
 8003460:	1e03      	subs	r3, r0, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM21_Init+0xd8>
  {
    Error_Handler();
 8003464:	f000 f9ae 	bl	80037c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003468:	2110      	movs	r1, #16
 800346a:	187b      	adds	r3, r7, r1
 800346c:	220a      	movs	r2, #10
 800346e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2201      	movs	r2, #1
 8003474:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003482:	1879      	adds	r1, r7, r1
 8003484:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <MX_TIM21_Init+0x144>)
 8003486:	2200      	movs	r2, #0
 8003488:	0018      	movs	r0, r3
 800348a:	f005 f947 	bl	800871c <HAL_TIM_IC_ConfigChannel>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM21_Init+0x106>
  {
    Error_Handler();
 8003492:	f000 f997 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003496:	003b      	movs	r3, r7
 8003498:	2260      	movs	r2, #96	@ 0x60
 800349a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 800349c:	003b      	movs	r3, r7
 800349e:	220a      	movs	r2, #10
 80034a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a2:	003b      	movs	r3, r7
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034a8:	003b      	movs	r3, r7
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ae:	0039      	movs	r1, r7
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80034b2:	2204      	movs	r2, #4
 80034b4:	0018      	movs	r0, r3
 80034b6:	f005 f9d5 	bl	8008864 <HAL_TIM_PWM_ConfigChannel>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM21_Init+0x132>
  {
    Error_Handler();
 80034be:	f000 f981 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80034c2:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <MX_TIM21_Init+0x144>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f001 f841 	bl	800454c <HAL_TIM_MspPostInit>

}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b00e      	add	sp, #56	@ 0x38
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	20000324 	.word	0x20000324
 80034d8:	40010800 	.word	0x40010800
 80034dc:	0000ffff 	.word	0x0000ffff

080034e0 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034e6:	2328      	movs	r3, #40	@ 0x28
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	0018      	movs	r0, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	001a      	movs	r2, r3
 80034f0:	2100      	movs	r1, #0
 80034f2:	f007 fa5d 	bl	800a9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f6:	2320      	movs	r3, #32
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	0018      	movs	r0, r3
 80034fc:	2308      	movs	r3, #8
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f007 fa55 	bl	800a9b0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003506:	2310      	movs	r3, #16
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	0018      	movs	r0, r3
 800350c:	2310      	movs	r3, #16
 800350e:	001a      	movs	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f007 fa4d 	bl	800a9b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003516:	003b      	movs	r3, r7
 8003518:	0018      	movs	r0, r3
 800351a:	2310      	movs	r3, #16
 800351c:	001a      	movs	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	f007 fa46 	bl	800a9b0 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003524:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003526:	4a40      	ldr	r2, [pc, #256]	@ (8003628 <MX_TIM22_Init+0x148>)
 8003528:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32-1;
 800352a:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <MX_TIM22_Init+0x144>)
 800352c:	221f      	movs	r2, #31
 800352e:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003530:	4b3c      	ldr	r3, [pc, #240]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8003536:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003538:	4a3c      	ldr	r2, [pc, #240]	@ (800362c <MX_TIM22_Init+0x14c>)
 800353a:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353c:	4b39      	ldr	r3, [pc, #228]	@ (8003624 <MX_TIM22_Init+0x144>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003542:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003548:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <MX_TIM22_Init+0x144>)
 800354a:	0018      	movs	r0, r3
 800354c:	f004 fd2a 	bl	8007fa4 <HAL_TIM_Base_Init>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM22_Init+0x78>
  {
    Error_Handler();
 8003554:	f000 f936 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003558:	2128      	movs	r1, #40	@ 0x28
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	0152      	lsls	r2, r2, #5
 8003560:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003562:	187a      	adds	r2, r7, r1
 8003564:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f005 fa41 	bl	80089f0 <HAL_TIM_ConfigClockSource>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8003572:	f000 f927 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim22) != HAL_OK)
 8003576:	4b2b      	ldr	r3, [pc, #172]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003578:	0018      	movs	r0, r3
 800357a:	f004 fed7 	bl	800832c <HAL_TIM_IC_Init>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8003582:	f000 f91f 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8003586:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003588:	0018      	movs	r0, r3
 800358a:	f004 fdbd 	bl	8008108 <HAL_TIM_PWM_Init>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 8003592:	f000 f917 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003596:	2120      	movs	r1, #32
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80035a4:	187a      	adds	r2, r7, r1
 80035a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <MX_TIM22_Init+0x144>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f005 fe74 	bl	8009298 <HAL_TIMEx_MasterConfigSynchronization>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM22_Init+0xd8>
  {
    Error_Handler();
 80035b4:	f000 f906 	bl	80037c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80035b8:	2110      	movs	r1, #16
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	220a      	movs	r2, #10
 80035be:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2201      	movs	r2, #1
 80035c4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim22, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80035d2:	1879      	adds	r1, r7, r1
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <MX_TIM22_Init+0x144>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	0018      	movs	r0, r3
 80035da:	f005 f89f 	bl	800871c <HAL_TIM_IC_ConfigChannel>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM22_Init+0x106>
  {
    Error_Handler();
 80035e2:	f000 f8ef 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e6:	003b      	movs	r3, r7
 80035e8:	2260      	movs	r2, #96	@ 0x60
 80035ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80035ec:	003b      	movs	r3, r7
 80035ee:	220a      	movs	r2, #10
 80035f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f2:	003b      	movs	r3, r7
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f8:	003b      	movs	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035fe:	0039      	movs	r1, r7
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003602:	2204      	movs	r2, #4
 8003604:	0018      	movs	r0, r3
 8003606:	f005 f92d 	bl	8008864 <HAL_TIM_PWM_ConfigChannel>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM22_Init+0x132>
  {
    Error_Handler();
 800360e:	f000 f8d9 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <MX_TIM22_Init+0x144>)
 8003614:	0018      	movs	r0, r3
 8003616:	f000 ff99 	bl	800454c <HAL_TIM_MspPostInit>

}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b00e      	add	sp, #56	@ 0x38
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	20000364 	.word	0x20000364
 8003628:	40011400 	.word	0x40011400
 800362c:	0000ffff 	.word	0x0000ffff

08003630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003634:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003636:	4a15      	ldr	r2, [pc, #84]	@ (800368c <MX_USART1_UART_Init+0x5c>)
 8003638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800363a:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 800363c:	22e1      	movs	r2, #225	@ 0xe1
 800363e:	0252      	lsls	r2, r2, #9
 8003640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003642:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003648:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800364e:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003656:	220c      	movs	r2, #12
 8003658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003660:	4b09      	ldr	r3, [pc, #36]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <MX_USART1_UART_Init+0x58>)
 8003674:	0018      	movs	r0, r3
 8003676:	f005 fe67 	bl	8009348 <HAL_UART_Init>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d001      	beq.n	8003682 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800367e:	f000 f8a1 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200003a4 	.word	0x200003a4
 800368c:	40013800 	.word	0x40013800

08003690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003696:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <MX_DMA_Init+0x38>)
 8003698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <MX_DMA_Init+0x38>)
 800369c:	2101      	movs	r1, #1
 800369e:	430a      	orrs	r2, r1
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <MX_DMA_Init+0x38>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	2201      	movs	r2, #1
 80036a8:	4013      	ands	r3, r2
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	200a      	movs	r0, #10
 80036b4:	f001 fab0 	bl	8004c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80036b8:	200a      	movs	r0, #10
 80036ba:	f001 fac2 	bl	8004c42 <HAL_NVIC_EnableIRQ>

}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b002      	add	sp, #8
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000

080036cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	240c      	movs	r4, #12
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	0018      	movs	r0, r3
 80036d8:	2314      	movs	r3, #20
 80036da:	001a      	movs	r2, r3
 80036dc:	2100      	movs	r1, #0
 80036de:	f007 f967 	bl	800a9b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	4b35      	ldr	r3, [pc, #212]	@ (80037b8 <MX_GPIO_Init+0xec>)
 80036e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e6:	4b34      	ldr	r3, [pc, #208]	@ (80037b8 <MX_GPIO_Init+0xec>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	430a      	orrs	r2, r1
 80036ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ee:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <MX_GPIO_Init+0xec>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	4b2f      	ldr	r3, [pc, #188]	@ (80037b8 <MX_GPIO_Init+0xec>)
 80036fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fe:	4b2e      	ldr	r3, [pc, #184]	@ (80037b8 <MX_GPIO_Init+0xec>)
 8003700:	2102      	movs	r1, #2
 8003702:	430a      	orrs	r2, r1
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003706:	4b2c      	ldr	r3, [pc, #176]	@ (80037b8 <MX_GPIO_Init+0xec>)
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	2202      	movs	r2, #2
 800370c:	4013      	ands	r3, r2
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin, GPIO_PIN_RESET);
 8003712:	492a      	ldr	r1, [pc, #168]	@ (80037bc <MX_GPIO_Init+0xf0>)
 8003714:	23a0      	movs	r3, #160	@ 0xa0
 8003716:	05db      	lsls	r3, r3, #23
 8003718:	2200      	movs	r2, #0
 800371a:	0018      	movs	r0, r3
 800371c:	f001 fdbb 	bl	8005296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 8003720:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <MX_GPIO_Init+0xf4>)
 8003722:	2200      	movs	r2, #0
 8003724:	2109      	movs	r1, #9
 8003726:	0018      	movs	r0, r3
 8003728:	f001 fdb5 	bl	8005296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	23a0      	movs	r3, #160	@ 0xa0
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	2201      	movs	r2, #1
 8003736:	0018      	movs	r0, r3
 8003738:	f001 fdad 	bl	8005296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800373c:	193b      	adds	r3, r7, r4
 800373e:	2210      	movs	r2, #16
 8003740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2201      	movs	r2, #1
 8003746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	193b      	adds	r3, r7, r4
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	193b      	adds	r3, r7, r4
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003754:	193a      	adds	r2, r7, r4
 8003756:	23a0      	movs	r3, #160	@ 0xa0
 8003758:	05db      	lsls	r3, r3, #23
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f001 fc07 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2209      	movs	r2, #9
 8003766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	2201      	movs	r2, #1
 800376c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800376e:	193b      	adds	r3, r7, r4
 8003770:	2201      	movs	r2, #1
 8003772:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	193b      	adds	r3, r7, r4
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377a:	193b      	adds	r3, r7, r4
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <MX_GPIO_Init+0xf4>)
 800377e:	0019      	movs	r1, r3
 8003780:	0010      	movs	r0, r2
 8003782:	f001 fbf5 	bl	8004f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_STATUS_Pin DISTANCE_SENSOR_FRONT_STATUS_Pin */
  GPIO_InitStruct.Pin = RFID_STATUS_Pin|DISTANCE_SENSOR_FRONT_STATUS_Pin;
 8003786:	0021      	movs	r1, r4
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2290      	movs	r2, #144	@ 0x90
 800378c:	0212      	lsls	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2201      	movs	r2, #1
 8003794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003796:	187b      	adds	r3, r7, r1
 8003798:	2201      	movs	r2, #1
 800379a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	187b      	adds	r3, r7, r1
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	187a      	adds	r2, r7, r1
 80037a4:	23a0      	movs	r3, #160	@ 0xa0
 80037a6:	05db      	lsls	r3, r3, #23
 80037a8:	0011      	movs	r1, r2
 80037aa:	0018      	movs	r0, r3
 80037ac:	f001 fbe0 	bl	8004f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b009      	add	sp, #36	@ 0x24
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	00008010 	.word	0x00008010
 80037c0:	50000400 	.word	0x50000400

080037c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c8:	b672      	cpsid	i
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	e7fd      	b.n	80037cc <Error_Handler+0x8>

080037d0 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	0002      	movs	r2, r0
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80037dc:	240f      	movs	r4, #15
 80037de:	193a      	adds	r2, r7, r4
 80037e0:	1df9      	adds	r1, r7, #7
 80037e2:	4806      	ldr	r0, [pc, #24]	@ (80037fc <RC522_SPI_Transfer+0x2c>)
 80037e4:	2364      	movs	r3, #100	@ 0x64
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2301      	movs	r3, #1
 80037ea:	f004 f93b 	bl	8007a64 <HAL_SPI_TransmitReceive>

	return rx_data;
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	781b      	ldrb	r3, [r3, #0]
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b005      	add	sp, #20
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	2000028c 	.word	0x2000028c

08003800 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	0002      	movs	r2, r0
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	1c0a      	adds	r2, r1, #0
 8003810:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003812:	23a0      	movs	r3, #160	@ 0xa0
 8003814:	05db      	lsls	r3, r3, #23
 8003816:	2200      	movs	r2, #0
 8003818:	2110      	movs	r1, #16
 800381a:	0018      	movs	r0, r3
 800381c:	f001 fd3b 	bl	8005296 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	18db      	adds	r3, r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	227e      	movs	r2, #126	@ 0x7e
 800382a:	4013      	ands	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff ffce 	bl	80037d0 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ffc9 	bl	80037d0 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800383e:	23a0      	movs	r3, #160	@ 0xa0
 8003840:	05db      	lsls	r3, r3, #23
 8003842:	2201      	movs	r2, #1
 8003844:	2110      	movs	r1, #16
 8003846:	0018      	movs	r0, r3
 8003848:	f001 fd25 	bl	8005296 <HAL_GPIO_WritePin>
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	0002      	movs	r2, r0
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003860:	23a0      	movs	r3, #160	@ 0xa0
 8003862:	05db      	lsls	r3, r3, #23
 8003864:	2200      	movs	r2, #0
 8003866:	2110      	movs	r1, #16
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fd14 	bl	8005296 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b25b      	sxtb	r3, r3
 8003874:	18db      	adds	r3, r3, r3
 8003876:	b25b      	sxtb	r3, r3
 8003878:	227e      	movs	r2, #126	@ 0x7e
 800387a:	4013      	ands	r3, r2
 800387c:	b25b      	sxtb	r3, r3
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	4252      	negs	r2, r2
 8003882:	4313      	orrs	r3, r2
 8003884:	b25b      	sxtb	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff ffa1 	bl	80037d0 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800388e:	250f      	movs	r5, #15
 8003890:	197c      	adds	r4, r7, r5
 8003892:	2000      	movs	r0, #0
 8003894:	f7ff ff9c 	bl	80037d0 <RC522_SPI_Transfer>
 8003898:	0003      	movs	r3, r0
 800389a:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800389c:	23a0      	movs	r3, #160	@ 0xa0
 800389e:	05db      	lsls	r3, r3, #23
 80038a0:	2201      	movs	r2, #1
 80038a2:	2110      	movs	r1, #16
 80038a4:	0018      	movs	r0, r3
 80038a6:	f001 fcf6 	bl	8005296 <HAL_GPIO_WritePin>

	return val;
 80038aa:	197b      	adds	r3, r7, r5
 80038ac:	781b      	ldrb	r3, [r3, #0]

}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bdb0      	pop	{r4, r5, r7, pc}

080038b6 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80038b6:	b5b0      	push	{r4, r5, r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	0002      	movs	r2, r0
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	1c0a      	adds	r2, r1, #0
 80038c6:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80038c8:	250f      	movs	r5, #15
 80038ca:	197c      	adds	r4, r7, r5
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff ffbf 	bl	8003854 <Read_MFRC522>
 80038d6:	0003      	movs	r3, r0
 80038d8:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80038da:	197a      	adds	r2, r7, r5
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7ff ff87 	bl	8003800 <Write_MFRC522>
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bdb0      	pop	{r4, r5, r7, pc}

080038fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80038fa:	b5b0      	push	{r4, r5, r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	0002      	movs	r2, r0
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	1c0a      	adds	r2, r1, #0
 800390a:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800390c:	250f      	movs	r5, #15
 800390e:	197c      	adds	r4, r7, r5
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff ff9d 	bl	8003854 <Read_MFRC522>
 800391a:	0003      	movs	r3, r0
 800391c:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b25b      	sxtb	r3, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	b25b      	sxtb	r3, r3
 8003928:	197a      	adds	r2, r7, r5
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	b252      	sxtb	r2, r2
 800392e:	4013      	ands	r3, r2
 8003930:	b25b      	sxtb	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	0011      	movs	r1, r2
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ff60 	bl	8003800 <Write_MFRC522>
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bdb0      	pop	{r4, r5, r7, pc}

08003948 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800394c:	2014      	movs	r0, #20
 800394e:	f7ff ff81 	bl	8003854 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8003952:	2103      	movs	r1, #3
 8003954:	2014      	movs	r0, #20
 8003956:	f7ff ffae 	bl	80038b6 <SetBitMask>
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8003964:	210f      	movs	r1, #15
 8003966:	2001      	movs	r0, #1
 8003968:	f7ff ff4a 	bl	8003800 <Write_MFRC522>
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003978:	23a0      	movs	r3, #160	@ 0xa0
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	2201      	movs	r2, #1
 800397e:	2110      	movs	r1, #16
 8003980:	0018      	movs	r0, r3
 8003982:	f001 fc88 	bl	8005296 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <MFRC522_Init+0x5c>)
 8003988:	2201      	movs	r2, #1
 800398a:	2101      	movs	r1, #1
 800398c:	0018      	movs	r0, r3
 800398e:	f001 fc82 	bl	8005296 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8003992:	f7ff ffe5 	bl	8003960 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8003996:	218d      	movs	r1, #141	@ 0x8d
 8003998:	202a      	movs	r0, #42	@ 0x2a
 800399a:	f7ff ff31 	bl	8003800 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800399e:	213e      	movs	r1, #62	@ 0x3e
 80039a0:	202b      	movs	r0, #43	@ 0x2b
 80039a2:	f7ff ff2d 	bl	8003800 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80039a6:	211e      	movs	r1, #30
 80039a8:	202d      	movs	r0, #45	@ 0x2d
 80039aa:	f7ff ff29 	bl	8003800 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80039ae:	2100      	movs	r1, #0
 80039b0:	202c      	movs	r0, #44	@ 0x2c
 80039b2:	f7ff ff25 	bl	8003800 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80039b6:	2140      	movs	r1, #64	@ 0x40
 80039b8:	2015      	movs	r0, #21
 80039ba:	f7ff ff21 	bl	8003800 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80039be:	213d      	movs	r1, #61	@ 0x3d
 80039c0:	2011      	movs	r0, #17
 80039c2:	f7ff ff1d 	bl	8003800 <Write_MFRC522>

	AntennaOn();
 80039c6:	f7ff ffbf 	bl	8003948 <AntennaOn>
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	50000400 	.word	0x50000400

080039d4 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	0011      	movs	r1, r2
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	240f      	movs	r4, #15
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	1c02      	adds	r2, r0, #0
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	230e      	movs	r3, #14
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	1c0a      	adds	r2, r1, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 80039f8:	211e      	movs	r1, #30
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 8003a00:	201d      	movs	r0, #29
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d008      	beq.n	8003a22 <MFRC522_ToCard+0x4e>
 8003a10:	2b0e      	cmp	r3, #14
 8003a12:	d10f      	bne.n	8003a34 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2212      	movs	r2, #18
 8003a18:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	701a      	strb	r2, [r3, #0]
			break;
 8003a20:	e009      	b.n	8003a36 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8003a22:	231e      	movs	r3, #30
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2277      	movs	r2, #119	@ 0x77
 8003a28:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8003a2a:	231d      	movs	r3, #29
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2230      	movs	r2, #48	@ 0x30
 8003a30:	701a      	strb	r2, [r3, #0]
			break;
 8003a32:	e000      	b.n	8003a36 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8003a34:	46c0      	nop			@ (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8003a36:	231e      	movs	r3, #30
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	4252      	negs	r2, r2
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	0019      	movs	r1, r3
 8003a46:	2002      	movs	r0, #2
 8003a48:	f7ff feda 	bl	8003800 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8003a4c:	2180      	movs	r1, #128	@ 0x80
 8003a4e:	2004      	movs	r0, #4
 8003a50:	f7ff ff53 	bl	80038fa <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8003a54:	2180      	movs	r1, #128	@ 0x80
 8003a56:	200a      	movs	r0, #10
 8003a58:	f7ff ff2d 	bl	80038b6 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f7ff fece 	bl	8003800 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	e00a      	b.n	8003a80 <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	18d3      	adds	r3, r2, r3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0019      	movs	r1, r3
 8003a74:	2009      	movs	r0, #9
 8003a76:	f7ff fec3 	bl	8003800 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	230e      	movs	r3, #14
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3ee      	bcc.n	8003a6a <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8003a8c:	240f      	movs	r4, #15
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	0019      	movs	r1, r3
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7ff feb3 	bl	8003800 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d103      	bne.n	8003aaa <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	200d      	movs	r0, #13
 8003aa6:	f7ff ff06 	bl	80038b6 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8003aaa:	23fa      	movs	r3, #250	@ 0xfa
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8003ab0:	251c      	movs	r5, #28
 8003ab2:	197c      	adds	r4, r7, r5
 8003ab4:	2004      	movs	r0, #4
 8003ab6:	f7ff fecd 	bl	8003854 <Read_MFRC522>
 8003aba:	0003      	movs	r3, r0
 8003abc:	7023      	strb	r3, [r4, #0]
        i--;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <MFRC522_ToCard+0x112>
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <MFRC522_ToCard+0x112>
 8003ad4:	197b      	adds	r3, r7, r5
 8003ad6:	221d      	movs	r2, #29
 8003ad8:	18ba      	adds	r2, r7, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0e4      	beq.n	8003ab0 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	200d      	movs	r0, #13
 8003aea:	f7ff ff06 	bl	80038fa <ClearBitMask>

    if (i != 0)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d100      	bne.n	8003af6 <MFRC522_ToCard+0x122>
 8003af4:	e070      	b.n	8003bd8 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8003af6:	2006      	movs	r0, #6
 8003af8:	f7ff feac 	bl	8003854 <Read_MFRC522>
 8003afc:	0003      	movs	r3, r0
 8003afe:	001a      	movs	r2, r3
 8003b00:	231b      	movs	r3, #27
 8003b02:	4013      	ands	r3, r2
 8003b04:	d164      	bne.n	8003bd0 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8003b06:	211f      	movs	r1, #31
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8003b0e:	231c      	movs	r3, #28
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	221e      	movs	r2, #30
 8003b14:	18ba      	adds	r2, r7, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	001a      	movs	r2, r3
 8003b20:	2301      	movs	r3, #1
 8003b22:	4013      	ands	r3, r2
 8003b24:	d002      	beq.n	8003b2c <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d150      	bne.n	8003bd8 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8003b36:	251c      	movs	r5, #28
 8003b38:	197c      	adds	r4, r7, r5
 8003b3a:	200a      	movs	r0, #10
 8003b3c:	f7ff fe8a 	bl	8003854 <Read_MFRC522>
 8003b40:	0003      	movs	r3, r0
 8003b42:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8003b44:	200c      	movs	r0, #12
 8003b46:	f7ff fe85 	bl	8003854 <Read_MFRC522>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	2017      	movs	r0, #23
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	2207      	movs	r2, #7
 8003b54:	400a      	ands	r2, r1
 8003b56:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8003b58:	0001      	movs	r1, r0
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 8003b62:	197b      	adds	r3, r7, r5
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	00da      	lsls	r2, r3, #3
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	001a      	movs	r2, r3
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e006      	b.n	8003b86 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 8003b78:	231c      	movs	r3, #28
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	001a      	movs	r2, r3
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8003b86:	221c      	movs	r2, #28
 8003b88:	18bb      	adds	r3, r7, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 8003b90:	18bb      	adds	r3, r7, r2
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 8003b96:	221c      	movs	r2, #28
 8003b98:	18bb      	adds	r3, r7, r2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d902      	bls.n	8003ba6 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 8003ba0:	18bb      	adds	r3, r7, r2
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e00a      	b.n	8003bc2 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	18d4      	adds	r4, r2, r3
 8003bb2:	2009      	movs	r0, #9
 8003bb4:	f7ff fe4e 	bl	8003854 <Read_MFRC522>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	231c      	movs	r3, #28
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3ee      	bcc.n	8003bac <MFRC522_ToCard+0x1d8>
 8003bce:	e003      	b.n	8003bd8 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8003bd0:	231f      	movs	r3, #31
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8003bd8:	231f      	movs	r3, #31
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b008      	add	sp, #32
 8003be4:	bdb0      	pop	{r4, r5, r7, pc}

08003be6 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8003be6:	b5b0      	push	{r4, r5, r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	0002      	movs	r2, r0
 8003bee:	6039      	str	r1, [r7, #0]
 8003bf0:	1dfb      	adds	r3, r7, #7
 8003bf2:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8003bf4:	2107      	movs	r1, #7
 8003bf6:	200d      	movs	r0, #13
 8003bf8:	f7ff fe02 	bl	8003800 <Write_MFRC522>

	TagType[0] = reqMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1dfa      	adds	r2, r7, #7
 8003c00:	7812      	ldrb	r2, [r2, #0]
 8003c02:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003c04:	250f      	movs	r5, #15
 8003c06:	197c      	adds	r4, r7, r5
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	0013      	movs	r3, r2
 8003c14:	2201      	movs	r2, #1
 8003c16:	200c      	movs	r0, #12
 8003c18:	f7ff fedc 	bl	80039d4 <MFRC522_ToCard>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8003c20:	197b      	adds	r3, r7, r5
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <MFRC522_Request+0x48>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d003      	beq.n	8003c36 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2202      	movs	r2, #2
 8003c34:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003c36:	230f      	movs	r3, #15
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bdb0      	pop	{r4, r5, r7, pc}

08003c44 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8003c4c:	230d      	movs	r3, #13
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003c54:	2100      	movs	r1, #0
 8003c56:	200d      	movs	r0, #13
 8003c58:	f7ff fdd2 	bl	8003800 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2293      	movs	r2, #147	@ 0x93
 8003c60:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3301      	adds	r3, #1
 8003c66:	2220      	movs	r2, #32
 8003c68:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003c6a:	250f      	movs	r5, #15
 8003c6c:	197c      	adds	r4, r7, r5
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	2308      	movs	r3, #8
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	0013      	movs	r3, r2
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	200c      	movs	r0, #12
 8003c7e:	f7ff fea9 	bl	80039d4 <MFRC522_ToCard>
 8003c82:	0003      	movs	r3, r0
 8003c84:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 8003c86:	197b      	adds	r3, r7, r5
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d129      	bne.n	8003ce2 <MFRC522_Anticoll+0x9e>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8003c8e:	230e      	movs	r3, #14
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e010      	b.n	8003cba <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 8003c98:	200e      	movs	r0, #14
 8003c9a:	183b      	adds	r3, r7, r0
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	7819      	ldrb	r1, [r3, #0]
 8003ca4:	220d      	movs	r2, #13
 8003ca6:	18bb      	adds	r3, r7, r2
 8003ca8:	18ba      	adds	r2, r7, r2
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	404a      	eors	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 8003cb0:	183b      	adds	r3, r7, r0
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	183b      	adds	r3, r7, r0
 8003cb6:	3201      	adds	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	220e      	movs	r2, #14
 8003cbc:	18bb      	adds	r3, r7, r2
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d9e9      	bls.n	8003c98 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 8003cc4:	18bb      	adds	r3, r7, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	18d3      	adds	r3, r2, r3
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	220d      	movs	r2, #13
 8003cd0:	18ba      	adds	r2, r7, r2
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d00a      	beq.n	8003cee <MFRC522_Anticoll+0xaa>
		{
			status = MI_ERR;
 8003cd8:	230f      	movs	r3, #15
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2202      	movs	r2, #2
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e005      	b.n	8003cee <MFRC522_Anticoll+0xaa>
		}
    }
    else
    {
    	memset(serNum, 0, 5);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f006 fe61 	bl	800a9b0 <memset>
    }

    return status;
 8003cee:	230f      	movs	r3, #15
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	781b      	ldrb	r3, [r3, #0]
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b004      	add	sp, #16
 8003cfa:	bdb0      	pop	{r4, r5, r7, pc}

08003cfc <RFID_Init>:

extern speaker Speaker;
extern UART_HandleTypeDef huart1;
extern char Data;

void RFID_Init(rfid* sensor) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    MFRC522_Init();
 8003d04:	f7ff fe36 	bl	8003974 <MFRC522_Init>
    memset(sensor->prevSerialNum, 0, 5);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2205      	movs	r2, #5
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f006 fe4e 	bl	800a9b0 <memset>
    sensor->status = CARD_IDLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	715a      	strb	r2, [r3, #5]

    sensor->botEnabled = false;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	719a      	strb	r2, [r3, #6]
    sensor->initialSuccessfulCardTap = true;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	71da      	strb	r2, [r3, #7]
    sensor->initialFailedCardTap = true;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	721a      	strb	r2, [r3, #8]

    HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, GPIO_PIN_SET);
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	23a0      	movs	r3, #160	@ 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2201      	movs	r2, #1
 8003d36:	0018      	movs	r0, r3
 8003d38:	f001 faad 	bl	8005296 <HAL_GPIO_WritePin>
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <RFID_ValidateCard>:

rfid_card_status RFID_ValidateCard(rfid* sensor)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	uint8_t serialNum[5];
	MFRC522_Request(PICC_REQIDL, serialNum);
 8003d4c:	2408      	movs	r4, #8
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	0019      	movs	r1, r3
 8003d52:	2026      	movs	r0, #38	@ 0x26
 8003d54:	f7ff ff47 	bl	8003be6 <MFRC522_Request>
	MFRC522_Anticoll(serialNum);
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7ff ff72 	bl	8003c44 <MFRC522_Anticoll>

	sensor->status = CARD_IDLE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	715a      	strb	r2, [r3, #5]

	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 8003d66:	0022      	movs	r2, r4
 8003d68:	18bb      	adds	r3, r7, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2baa      	cmp	r3, #170	@ 0xaa
 8003d6e:	d10f      	bne.n	8003d90 <RFID_ValidateCard+0x4c>
 8003d70:	18bb      	adds	r3, r7, r2
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2bcd      	cmp	r3, #205	@ 0xcd
 8003d76:	d10b      	bne.n	8003d90 <RFID_ValidateCard+0x4c>
 8003d78:	18bb      	adds	r3, r7, r2
 8003d7a:	789b      	ldrb	r3, [r3, #2]
 8003d7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d7e:	d107      	bne.n	8003d90 <RFID_ValidateCard+0x4c>
 8003d80:	18bb      	adds	r3, r7, r2
 8003d82:	78db      	ldrb	r3, [r3, #3]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d103      	bne.n	8003d90 <RFID_ValidateCard+0x4c>
 8003d88:	18bb      	adds	r3, r7, r2
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	2b4b      	cmp	r3, #75	@ 0x4b
 8003d8e:	d013      	beq.n	8003db8 <RFID_ValidateCard+0x74>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	781b      	ldrb	r3, [r3, #0]
	if ((serialNum[0] == 170 && serialNum[1] == 205 && serialNum[2] == 47 && serialNum[3] == 3 && serialNum[4] == 75) ||
 8003d94:	2baa      	cmp	r3, #170	@ 0xaa
 8003d96:	d113      	bne.n	8003dc0 <RFID_ValidateCard+0x7c>
			(sensor->prevSerialNum[0] == 170 && sensor->prevSerialNum[1] == 205 && sensor->prevSerialNum[2] == 47 && sensor->prevSerialNum[3] == 3 && sensor->prevSerialNum[4] == 75))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	2bcd      	cmp	r3, #205	@ 0xcd
 8003d9e:	d10f      	bne.n	8003dc0 <RFID_ValidateCard+0x7c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	789b      	ldrb	r3, [r3, #2]
 8003da4:	2b2f      	cmp	r3, #47	@ 0x2f
 8003da6:	d10b      	bne.n	8003dc0 <RFID_ValidateCard+0x7c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	78db      	ldrb	r3, [r3, #3]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d107      	bne.n	8003dc0 <RFID_ValidateCard+0x7c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	2b4b      	cmp	r3, #75	@ 0x4b
 8003db6:	d103      	bne.n	8003dc0 <RFID_ValidateCard+0x7c>
	{
		sensor->status = CARD_SUCCESS;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	715a      	strb	r2, [r3, #5]
 8003dbe:	e039      	b.n	8003e34 <RFID_ValidateCard+0xf0>

	}
	else if (!(serialNum[0] | (!(serialNum[1] == 32 || serialNum[1] == 0)) | serialNum[2] | serialNum[3] | serialNum[4]))
 8003dc0:	2108      	movs	r1, #8
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d005      	beq.n	8003ddc <RFID_ValidateCard+0x98>
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <RFID_ValidateCard+0x98>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <RFID_ValidateCard+0x9a>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4313      	orrs	r3, r2
 8003de0:	2108      	movs	r1, #8
 8003de2:	187a      	adds	r2, r7, r1
 8003de4:	7892      	ldrb	r2, [r2, #2]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	187a      	adds	r2, r7, r1
 8003dea:	78d2      	ldrb	r2, [r2, #3]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	187a      	adds	r2, r7, r1
 8003df0:	7912      	ldrb	r2, [r2, #4]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d11b      	bne.n	8003e2e <RFID_ValidateCard+0xea>
	{
		if (!(sensor->prevSerialNum[0] | sensor->prevSerialNum[1] | sensor->prevSerialNum[2] | sensor->prevSerialNum[3] | sensor->prevSerialNum[4]))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	789b      	ldrb	r3, [r3, #2]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	78db      	ldrb	r3, [r3, #3]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <RFID_ValidateCard+0xe2>
			sensor->status = CARD_IDLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	715a      	strb	r2, [r3, #5]
 8003e24:	e006      	b.n	8003e34 <RFID_ValidateCard+0xf0>
		else
		{
			sensor->status = CARD_FAIL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	715a      	strb	r2, [r3, #5]
 8003e2c:	e002      	b.n	8003e34 <RFID_ValidateCard+0xf0>
		}

	}
	else
	{
		sensor->status = CARD_FAIL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	715a      	strb	r2, [r3, #5]
	}


	for (uint8_t i = 0; i < 5; i++)
 8003e34:	230f      	movs	r3, #15
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e00e      	b.n	8003e5c <RFID_ValidateCard+0x118>
	{
		sensor->prevSerialNum[i] = serialNum[i];
 8003e3e:	200f      	movs	r0, #15
 8003e40:	183b      	adds	r3, r7, r0
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	183b      	adds	r3, r7, r0
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2108      	movs	r1, #8
 8003e4a:	1879      	adds	r1, r7, r1
 8003e4c:	5c89      	ldrb	r1, [r1, r2]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++)
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	3201      	adds	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d9eb      	bls.n	8003e3e <RFID_ValidateCard+0xfa>
	}

	return sensor->status;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	795b      	ldrb	r3, [r3, #5]
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b005      	add	sp, #20
 8003e70:	bd90      	pop	{r4, r7, pc}
	...

08003e74 <RFID_SecurityLogic>:

void RFID_SecurityLogic(rfid* sensor)
{
 8003e74:	b5b0      	push	{r4, r5, r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	rfid_card_status cardStatus = RFID_ValidateCard(sensor);
 8003e7c:	250f      	movs	r5, #15
 8003e7e:	197c      	adds	r4, r7, r5
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff ff5e 	bl	8003d44 <RFID_ValidateCard>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	7023      	strb	r3, [r4, #0]

	switch (cardStatus) {
 8003e8c:	197b      	adds	r3, r7, r5
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d05a      	beq.n	8003f4a <RFID_SecurityLogic+0xd6>
 8003e94:	dc60      	bgt.n	8003f58 <RFID_SecurityLogic+0xe4>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <RFID_SecurityLogic+0x2c>
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d033      	beq.n	8003f06 <RFID_SecurityLogic+0x92>
	        break;

	    // Optional: Default case if no case matches
	    default:
	        // Code to execute if none of the above cases match
	        break;
 8003e9e:	e05b      	b.n	8003f58 <RFID_SecurityLogic+0xe4>
	    	if (sensor->initialSuccessfulCardTap)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	79db      	ldrb	r3, [r3, #7]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d059      	beq.n	8003f5c <RFID_SecurityLogic+0xe8>
	    		Speaker_SetAutoReload(&Speaker, 488);
 8003ea8:	23f4      	movs	r3, #244	@ 0xf4
 8003eaa:	005a      	lsls	r2, r3, #1
 8003eac:	4b30      	ldr	r3, [pc, #192]	@ (8003f70 <RFID_SecurityLogic+0xfc>)
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f9bf 	bl	8004234 <Speaker_SetAutoReload>
	    		Speaker_Beep(&Speaker, 150, 0, 1);
 8003eb6:	482e      	ldr	r0, [pc, #184]	@ (8003f70 <RFID_SecurityLogic+0xfc>)
 8003eb8:	2301      	movs	r3, #1
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2196      	movs	r1, #150	@ 0x96
 8003ebe:	f000 f8f9 	bl	80040b4 <Speaker_Beep>
	    		sensor->initialSuccessfulCardTap = false;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	71da      	strb	r2, [r3, #7]
	    		sensor->initialFailedCardTap = true;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	721a      	strb	r2, [r3, #8]
	    		sensor->botEnabled = !sensor->botEnabled;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	799b      	ldrb	r3, [r3, #6]
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	4193      	sbcs	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4053      	eors	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	1c1a      	adds	r2, r3, #0
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	719a      	strb	r2, [r3, #6]
	    		HAL_GPIO_WritePin(RFID_STATUS_GPIO_Port, RFID_STATUS_Pin, (GPIO_PinState) !sensor->botEnabled);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	799b      	ldrb	r3, [r3, #6]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4053      	eors	r3, r2
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	2380      	movs	r3, #128	@ 0x80
 8003ef8:	0159      	lsls	r1, r3, #5
 8003efa:	23a0      	movs	r3, #160	@ 0xa0
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	0018      	movs	r0, r3
 8003f00:	f001 f9c9 	bl	8005296 <HAL_GPIO_WritePin>
	        break;
 8003f04:	e02a      	b.n	8003f5c <RFID_SecurityLogic+0xe8>
	    	if (sensor->initialFailedCardTap)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7a1b      	ldrb	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d028      	beq.n	8003f60 <RFID_SecurityLogic+0xec>
	    		HAL_Delay(200);
 8003f0e:	20c8      	movs	r0, #200	@ 0xc8
 8003f10:	f000 fdb2 	bl	8004a78 <HAL_Delay>
				if (RFID_ValidateCard(sensor) != CARD_FAIL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7ff ff14 	bl	8003d44 <RFID_ValidateCard>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d120      	bne.n	8003f64 <RFID_SecurityLogic+0xf0>
				Speaker_SetAutoReload(&Speaker, 488 * 4);
 8003f22:	23f4      	movs	r3, #244	@ 0xf4
 8003f24:	00da      	lsls	r2, r3, #3
 8003f26:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <RFID_SecurityLogic+0xfc>)
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 f982 	bl	8004234 <Speaker_SetAutoReload>
				Speaker_Beep(&Speaker, 150, 50, 4);
 8003f30:	480f      	ldr	r0, [pc, #60]	@ (8003f70 <RFID_SecurityLogic+0xfc>)
 8003f32:	2304      	movs	r3, #4
 8003f34:	2232      	movs	r2, #50	@ 0x32
 8003f36:	2196      	movs	r1, #150	@ 0x96
 8003f38:	f000 f8bc 	bl	80040b4 <Speaker_Beep>
				sensor->initialSuccessfulCardTap = true;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	71da      	strb	r2, [r3, #7]
				sensor->initialFailedCardTap = false;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	721a      	strb	r2, [r3, #8]
	        break;
 8003f48:	e00a      	b.n	8003f60 <RFID_SecurityLogic+0xec>
	    	sensor->initialSuccessfulCardTap = true;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	71da      	strb	r2, [r3, #7]
	    	sensor->initialFailedCardTap = true;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	721a      	strb	r2, [r3, #8]
	        break;
 8003f56:	e006      	b.n	8003f66 <RFID_SecurityLogic+0xf2>
	        break;
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	e004      	b.n	8003f66 <RFID_SecurityLogic+0xf2>
	        break;
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	e002      	b.n	8003f66 <RFID_SecurityLogic+0xf2>
	        break;
 8003f60:	46c0      	nop			@ (mov r8, r8)
 8003f62:	e000      	b.n	8003f66 <RFID_SecurityLogic+0xf2>
					break;
 8003f64:	46c0      	nop			@ (mov r8, r8)
	}

}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	20000478 	.word	0x20000478

08003f74 <Speaker_Init>:

#define CLK_SPEED 32000000
#define DEFAULT_AUTORELOAD 488

void Speaker_Init(speaker* speaker, rfid* rfid_struct, TIM_HandleTypeDef* timer)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
	speaker->rfid_sensor = rfid_struct;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	601a      	str	r2, [r3, #0]
	speaker->timer = timer;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

	speaker->hasFault = false;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	751a      	strb	r2, [r3, #20]
	speaker->beepLengthOn = 0;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	811a      	strh	r2, [r3, #8]
	speaker->beepLengthPeriod = 0;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	815a      	strh	r2, [r3, #10]
	speaker->wantedNumBeeps = 0;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	731a      	strb	r2, [r3, #12]
	speaker->currentNumBeeps = 0;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	735a      	strb	r2, [r3, #13]
	speaker->timerCounter = 0;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	81da      	strh	r2, [r3, #14]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003fb0:	2317      	movs	r3, #23
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e00b      	b.n	8003fd2 <Speaker_Init+0x5e>
	{
		speaker->featureFault[i] = false;
 8003fba:	2117      	movs	r1, #23
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	18d3      	adds	r3, r2, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	3201      	adds	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	2317      	movs	r3, #23
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9ee      	bls.n	8003fba <Speaker_Init+0x46>
	}


}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b006      	add	sp, #24
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	000a      	movs	r2, r1
 8003ff0:	1cfb      	adds	r3, r7, #3
 8003ff2:	701a      	strb	r2, [r3, #0]

	speaker->featureFault[ID] = true;
 8003ff4:	1cfb      	adds	r3, r7, #3
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	18d3      	adds	r3, r2, r3
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	741a      	strb	r2, [r3, #16]
	if ((speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]) && speaker->rfid_sensor->botEnabled)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7c1b      	ldrb	r3, [r3, #16]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <Speaker_Start+0x38>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7c5b      	ldrb	r3, [r3, #17]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <Speaker_Start+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7c9b      	ldrb	r3, [r3, #18]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <Speaker_Start+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	799b      	ldrb	r3, [r3, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <Speaker_Start+0x62>
	{
		speaker->hasFault = true;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	751a      	strb	r2, [r3, #20]
		Speaker_SetAutoReload(speaker, DEFAULT_AUTORELOAD);
 800402e:	23f4      	movs	r3, #244	@ 0xf4
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0011      	movs	r1, r2
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f8fc 	bl	8004234 <Speaker_SetAutoReload>
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2100      	movs	r1, #0
 8004042:	0018      	movs	r0, r3
 8004044:	f004 f8a8 	bl	8008198 <HAL_TIM_PWM_Start>
	}

}
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}

08004050 <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	000a      	movs	r2, r1
 800405a:	1cfb      	adds	r3, r7, #3
 800405c:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	18d3      	adds	r3, r2, r3
 8004066:	2200      	movs	r2, #0
 8004068:	741a      	strb	r2, [r3, #16]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2]))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7c1b      	ldrb	r3, [r3, #16]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2201      	movs	r2, #1
 8004072:	4053      	eors	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <Speaker_Stop+0x5c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7c5b      	ldrb	r3, [r3, #17]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2201      	movs	r2, #1
 8004082:	4053      	eors	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <Speaker_Stop+0x5c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7c9b      	ldrb	r3, [r3, #18]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2201      	movs	r2, #1
 8004092:	4053      	eors	r3, r2
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <Speaker_Stop+0x5c>
	{
		speaker->hasFault = false;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	751a      	strb	r2, [r3, #20]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2100      	movs	r1, #0
 80040a6:	0018      	movs	r0, r3
 80040a8:	f004 f902 	bl	80082b0 <HAL_TIM_PWM_Stop>
	}
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <Speaker_Beep>:



bool Speaker_Beep(speaker* speaker, uint16_t length_on_ms, uint16_t length_off_ms, uint8_t numBeeps)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	000c      	movs	r4, r1
 80040be:	0010      	movs	r0, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	230a      	movs	r3, #10
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	1c22      	adds	r2, r4, #0
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	2308      	movs	r3, #8
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	1c02      	adds	r2, r0, #0
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	1c0a      	adds	r2, r1, #0
 80040d6:	701a      	strb	r2, [r3, #0]

	if (speaker->hasFault)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	7d1b      	ldrb	r3, [r3, #20]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <Speaker_Beep+0x32>
		return false;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e046      	b.n	8004174 <Speaker_Beep+0xc0>


	speaker->timerCounter = 0;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	81da      	strh	r2, [r3, #14]
	speaker->currentNumBeeps = 0;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	735a      	strb	r2, [r3, #13]



	speaker->beepLengthOn = length_on_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 80040f2:	230a      	movs	r3, #10
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	0013      	movs	r3, r2
 80040fa:	015b      	lsls	r3, r3, #5
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	189b      	adds	r3, r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	001a      	movs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	0019      	movs	r1, r3
 8004110:	0010      	movs	r0, r2
 8004112:	f7fc f815 	bl	8000140 <__udivsi3>
 8004116:	0003      	movs	r3, r0
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	811a      	strh	r2, [r3, #8]
	speaker->beepLengthPeriod =speaker->beepLengthOn + length_off_ms * 1000 / __HAL_TIM_GET_AUTORELOAD(speaker->timer);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	891b      	ldrh	r3, [r3, #8]
 8004122:	b29c      	uxth	r4, r3
 8004124:	2308      	movs	r3, #8
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	0013      	movs	r3, r2
 800412c:	015b      	lsls	r3, r3, #5
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	189b      	adds	r3, r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	001a      	movs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	0019      	movs	r1, r3
 8004142:	0010      	movs	r0, r2
 8004144:	f7fb fffc 	bl	8000140 <__udivsi3>
 8004148:	0003      	movs	r3, r0
 800414a:	b29b      	uxth	r3, r3
 800414c:	18e3      	adds	r3, r4, r3
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	815a      	strh	r2, [r3, #10]
	speaker->wantedNumBeeps = numBeeps;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1dfa      	adds	r2, r7, #7
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	731a      	strb	r2, [r3, #12]

	//speaker->beepLength = length_ms * CLK_SPEED / (speaker->timer->Instance->PSC);

	HAL_TIM_Base_Start_IT(speaker->timer);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f003 ff5f 	bl	8008024 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2100      	movs	r1, #0
 800416c:	0018      	movs	r0, r3
 800416e:	f004 f813 	bl	8008198 <HAL_TIM_PWM_Start>
	return true;
 8004172:	2301      	movs	r3, #1
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b005      	add	sp, #20
 800417a:	bd90      	pop	{r4, r7, pc}

0800417c <Speaker_BeepInterrupt>:
	return ((HAL_TIM_Base_GetState(speaker->timer) == HAL_TIM_STATE_BUSY) ? true : false);
}
*/

void Speaker_BeepInterrupt(speaker* speaker)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7b5b      	ldrb	r3, [r3, #13]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7b1b      	ldrb	r3, [r3, #12]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	429a      	cmp	r2, r3
 8004192:	d240      	bcs.n	8004216 <Speaker_BeepInterrupt+0x9a>
    {

        if (speaker->timerCounter == speaker->beepLengthOn)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	89db      	ldrh	r3, [r3, #14]
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	891b      	ldrh	r3, [r3, #8]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d110      	bne.n	80041c6 <Speaker_BeepInterrupt+0x4a>
        {
            HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2100      	movs	r1, #0
 80041aa:	0018      	movs	r0, r3
 80041ac:	f004 f880 	bl	80082b0 <HAL_TIM_PWM_Stop>
            __HAL_TIM_ENABLE(speaker->timer);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e01f      	b.n	8004206 <Speaker_BeepInterrupt+0x8a>
        	//__NOP();
        }
        else if (speaker->timerCounter >= speaker->beepLengthPeriod)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	89db      	ldrh	r3, [r3, #14]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	895b      	ldrh	r3, [r3, #10]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d317      	bcc.n	8004206 <Speaker_BeepInterrupt+0x8a>
        {
        	speaker->currentNumBeeps++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	7b5b      	ldrb	r3, [r3, #13]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	735a      	strb	r2, [r3, #13]
			speaker->timerCounter = 0;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	81da      	strh	r2, [r3, #14]

            if (speaker->currentNumBeeps < speaker->wantedNumBeeps)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7b5b      	ldrb	r3, [r3, #13]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7b1b      	ldrb	r3, [r3, #12]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d205      	bcs.n	8004206 <Speaker_BeepInterrupt+0x8a>
            {
                HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2100      	movs	r1, #0
 8004200:	0018      	movs	r0, r3
 8004202:	f003 ffc9 	bl	8008198 <HAL_TIM_PWM_Start>

            	//__NOP();
            }

        }
        speaker->timerCounter++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	89db      	ldrh	r3, [r3, #14]
 800420a:	b29b      	uxth	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	81da      	strh	r2, [r3, #14]
    else
    {
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
        HAL_TIM_Base_Stop_IT(speaker->timer);
    }
}
 8004214:	e00a      	b.n	800422c <Speaker_BeepInterrupt+0xb0>
        HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2100      	movs	r1, #0
 800421c:	0018      	movs	r0, r3
 800421e:	f004 f847 	bl	80082b0 <HAL_TIM_PWM_Stop>
        HAL_TIM_Base_Stop_IT(speaker->timer);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f003 ff48 	bl	80080bc <HAL_TIM_Base_Stop_IT>
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}

08004234 <Speaker_SetAutoReload>:

void Speaker_SetAutoReload(speaker* speaker, uint16_t value)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	000a      	movs	r2, r1
 800423e:	1cbb      	adds	r3, r7, #2
 8004240:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(speaker->timer, value);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1cba      	adds	r2, r7, #2
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	1cba      	adds	r2, r7, #2
 8004254:	8812      	ldrh	r2, [r2, #0]
 8004256:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(speaker->timer, TIM_CHANNEL_1, value / 2);
 8004258:	1cbb      	adds	r3, r7, #2
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004268:	46c0      	nop			@ (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	b002      	add	sp, #8
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_MspInit+0x24>)
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_MspInit+0x24>)
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004280:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <HAL_MspInit+0x24>)
 8004282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <HAL_MspInit+0x24>)
 8004286:	2180      	movs	r1, #128	@ 0x80
 8004288:	0549      	lsls	r1, r1, #21
 800428a:	430a      	orrs	r2, r1
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	240c      	movs	r4, #12
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	0018      	movs	r0, r3
 80042a6:	2314      	movs	r3, #20
 80042a8:	001a      	movs	r2, r3
 80042aa:	2100      	movs	r1, #0
 80042ac:	f006 fb80 	bl	800a9b0 <memset>
  if(hi2c->Instance==I2C1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a31      	ldr	r2, [pc, #196]	@ (800437c <HAL_I2C_MspInit+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d15c      	bne.n	8004374 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_I2C_MspInit+0xe8>)
 80042bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042be:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <HAL_I2C_MspInit+0xe8>)
 80042c0:	2102      	movs	r1, #2
 80042c2:	430a      	orrs	r2, r1
 80042c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004380 <HAL_I2C_MspInit+0xe8>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ca:	2202      	movs	r2, #2
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042d2:	0021      	movs	r1, r4
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	22c0      	movs	r2, #192	@ 0xc0
 80042d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	2212      	movs	r2, #18
 80042de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	2203      	movs	r2, #3
 80042ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	2201      	movs	r2, #1
 80042f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_I2C_MspInit+0xec>)
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f000 fe39 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <HAL_I2C_MspInit+0xe8>)
 8004300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004302:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_I2C_MspInit+0xe8>)
 8004304:	2180      	movs	r1, #128	@ 0x80
 8004306:	0389      	lsls	r1, r1, #14
 8004308:	430a      	orrs	r2, r1
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800430c:	4b1e      	ldr	r3, [pc, #120]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800430e:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <HAL_I2C_MspInit+0xf4>)
 8004310:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8004312:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004314:	2206      	movs	r2, #6
 8004316:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800431e:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004320:	2200      	movs	r2, #0
 8004322:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004324:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004326:	2280      	movs	r2, #128	@ 0x80
 8004328:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800432a:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	0052      	lsls	r2, r2, #1
 8004330:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004334:	2280      	movs	r2, #128	@ 0x80
 8004336:	00d2      	lsls	r2, r2, #3
 8004338:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800433a:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800433c:	2200      	movs	r2, #0
 800433e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004340:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004342:	2280      	movs	r2, #128	@ 0x80
 8004344:	0192      	lsls	r2, r2, #6
 8004346:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004348:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800434a:	0018      	movs	r0, r3
 800434c:	f000 fc96 	bl	8004c7c <HAL_DMA_Init>
 8004350:	1e03      	subs	r3, r0, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8004354:	f7ff fa36 	bl	80037c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a0b      	ldr	r2, [pc, #44]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 800435c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800435e:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <HAL_I2C_MspInit+0xf0>)
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	2017      	movs	r0, #23
 800436a:	f000 fc55 	bl	8004c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800436e:	2017      	movs	r0, #23
 8004370:	f000 fc67 	bl	8004c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b009      	add	sp, #36	@ 0x24
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	40005400 	.word	0x40005400
 8004380:	40021000 	.word	0x40021000
 8004384:	50000400 	.word	0x50000400
 8004388:	20000244 	.word	0x20000244
 800438c:	40020030 	.word	0x40020030

08004390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b089      	sub	sp, #36	@ 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	240c      	movs	r4, #12
 800439a:	193b      	adds	r3, r7, r4
 800439c:	0018      	movs	r0, r3
 800439e:	2314      	movs	r3, #20
 80043a0:	001a      	movs	r2, r3
 80043a2:	2100      	movs	r1, #0
 80043a4:	f006 fb04 	bl	800a9b0 <memset>
  if(hspi->Instance==SPI1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <HAL_SPI_MspInit+0x80>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d129      	bne.n	8004406 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043b2:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <HAL_SPI_MspInit+0x84>)
 80043b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b6:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_SPI_MspInit+0x84>)
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0149      	lsls	r1, r1, #5
 80043bc:	430a      	orrs	r2, r1
 80043be:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c0:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <HAL_SPI_MspInit+0x84>)
 80043c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c4:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <HAL_SPI_MspInit+0x84>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	430a      	orrs	r2, r1
 80043ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043cc:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <HAL_SPI_MspInit+0x84>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80043d8:	0021      	movs	r1, r4
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	22e0      	movs	r2, #224	@ 0xe0
 80043de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	2202      	movs	r2, #2
 80043e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	2203      	movs	r2, #3
 80043f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f8:	187a      	adds	r2, r7, r1
 80043fa:	23a0      	movs	r3, #160	@ 0xa0
 80043fc:	05db      	lsls	r3, r3, #23
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f000 fdb5 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b009      	add	sp, #36	@ 0x24
 800440c:	bd90      	pop	{r4, r7, pc}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	40013000 	.word	0x40013000
 8004414:	40021000 	.word	0x40021000

08004418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	@ 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	2314      	movs	r3, #20
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	0018      	movs	r0, r3
 8004426:	2314      	movs	r3, #20
 8004428:	001a      	movs	r2, r3
 800442a:	2100      	movs	r1, #0
 800442c:	f006 fac0 	bl	800a9b0 <memset>
  if(htim_base->Instance==TIM2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	05db      	lsls	r3, r3, #23
 8004438:	429a      	cmp	r2, r3
 800443a:	d10e      	bne.n	800445a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800443c:	4b3f      	ldr	r3, [pc, #252]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 800443e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004440:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 8004442:	2101      	movs	r1, #1
 8004444:	430a      	orrs	r2, r1
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004448:	2200      	movs	r2, #0
 800444a:	2100      	movs	r1, #0
 800444c:	200f      	movs	r0, #15
 800444e:	f000 fbe3 	bl	8004c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004452:	200f      	movs	r0, #15
 8004454:	f000 fbf5 	bl	8004c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004458:	e06b      	b.n	8004532 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM21)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a38      	ldr	r2, [pc, #224]	@ (8004540 <HAL_TIM_Base_MspInit+0x128>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d131      	bne.n	80044c8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 8004466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004468:	4b34      	ldr	r3, [pc, #208]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 800446a:	2104      	movs	r1, #4
 800446c:	430a      	orrs	r2, r1
 800446e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004470:	4b32      	ldr	r3, [pc, #200]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	4b31      	ldr	r3, [pc, #196]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 8004476:	2101      	movs	r1, #1
 8004478:	430a      	orrs	r2, r1
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800447c:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8004488:	2114      	movs	r1, #20
 800448a:	187b      	adds	r3, r7, r1
 800448c:	2204      	movs	r2, #4
 800448e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	187b      	adds	r3, r7, r1
 8004492:	2202      	movs	r2, #2
 8004494:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	187b      	adds	r3, r7, r1
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	187b      	adds	r3, r7, r1
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 80044a8:	187a      	adds	r2, r7, r1
 80044aa:	23a0      	movs	r3, #160	@ 0xa0
 80044ac:	05db      	lsls	r3, r3, #23
 80044ae:	0011      	movs	r1, r2
 80044b0:	0018      	movs	r0, r3
 80044b2:	f000 fd5d 	bl	8004f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80044b6:	2200      	movs	r2, #0
 80044b8:	2100      	movs	r1, #0
 80044ba:	2014      	movs	r0, #20
 80044bc:	f000 fbac 	bl	8004c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80044c0:	2014      	movs	r0, #20
 80044c2:	f000 fbbe 	bl	8004c42 <HAL_NVIC_EnableIRQ>
}
 80044c6:	e034      	b.n	8004532 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM22)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <HAL_TIM_Base_MspInit+0x12c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d12f      	bne.n	8004532 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 80044d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044d6:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 80044d8:	2120      	movs	r1, #32
 80044da:	430a      	orrs	r2, r1
 80044dc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	4b16      	ldr	r3, [pc, #88]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 80044e4:	2102      	movs	r1, #2
 80044e6:	430a      	orrs	r2, r1
 80044e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044ea:	4b14      	ldr	r3, [pc, #80]	@ (800453c <HAL_TIM_Base_MspInit+0x124>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	2202      	movs	r2, #2
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 80044f6:	2114      	movs	r1, #20
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	2210      	movs	r2, #16
 80044fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	2202      	movs	r2, #2
 8004502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	187b      	adds	r3, r7, r1
 800450c:	2200      	movs	r2, #0
 800450e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8004510:	187b      	adds	r3, r7, r1
 8004512:	2204      	movs	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8004516:	187b      	adds	r3, r7, r1
 8004518:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <HAL_TIM_Base_MspInit+0x130>)
 800451a:	0019      	movs	r1, r3
 800451c:	0010      	movs	r0, r2
 800451e:	f000 fd27 	bl	8004f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	2016      	movs	r0, #22
 8004528:	f000 fb76 	bl	8004c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800452c:	2016      	movs	r0, #22
 800452e:	f000 fb88 	bl	8004c42 <HAL_NVIC_EnableIRQ>
}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b00a      	add	sp, #40	@ 0x28
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	40021000 	.word	0x40021000
 8004540:	40010800 	.word	0x40010800
 8004544:	40011400 	.word	0x40011400
 8004548:	50000400 	.word	0x50000400

0800454c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	2414      	movs	r4, #20
 8004556:	193b      	adds	r3, r7, r4
 8004558:	0018      	movs	r0, r3
 800455a:	2314      	movs	r3, #20
 800455c:	001a      	movs	r2, r3
 800455e:	2100      	movs	r1, #0
 8004560:	f006 fa26 	bl	800a9b0 <memset>
  if(htim->Instance==TIM2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	05db      	lsls	r3, r3, #23
 800456c:	429a      	cmp	r2, r3
 800456e:	d123      	bne.n	80045b8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 8004576:	2101      	movs	r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800457c:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8004588:	0021      	movs	r1, r4
 800458a:	187b      	adds	r3, r7, r1
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	187b      	adds	r3, r7, r1
 8004592:	2202      	movs	r2, #2
 8004594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	187b      	adds	r3, r7, r1
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2202      	movs	r2, #2
 80045a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80045a8:	187a      	adds	r2, r7, r1
 80045aa:	23a0      	movs	r3, #160	@ 0xa0
 80045ac:	05db      	lsls	r3, r3, #23
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 fcdd 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 80045b6:	e04f      	b.n	8004658 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM21)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a29      	ldr	r2, [pc, #164]	@ (8004664 <HAL_TIM_MspPostInit+0x118>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d123      	bne.n	800460a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 80045c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c6:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045ce:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 80045da:	2114      	movs	r1, #20
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	2208      	movs	r2, #8
 80045e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	2202      	movs	r2, #2
 80045e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2201      	movs	r2, #1
 80045f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 80045fa:	187a      	adds	r2, r7, r1
 80045fc:	23a0      	movs	r3, #160	@ 0xa0
 80045fe:	05db      	lsls	r3, r3, #23
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fcb4 	bl	8004f70 <HAL_GPIO_Init>
}
 8004608:	e026      	b.n	8004658 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM22)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <HAL_TIM_MspPostInit+0x11c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d121      	bne.n	8004658 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004614:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 800461a:	2102      	movs	r1, #2
 800461c:	430a      	orrs	r2, r1
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004620:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <HAL_TIM_MspPostInit+0x114>)
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 800462c:	2114      	movs	r1, #20
 800462e:	187b      	adds	r3, r7, r1
 8004630:	2220      	movs	r2, #32
 8004632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	187b      	adds	r3, r7, r1
 8004636:	2202      	movs	r2, #2
 8004638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	187b      	adds	r3, r7, r1
 800463c:	2200      	movs	r2, #0
 800463e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2201      	movs	r2, #1
 8004644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2204      	movs	r2, #4
 800464a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 800464c:	187b      	adds	r3, r7, r1
 800464e:	4a07      	ldr	r2, [pc, #28]	@ (800466c <HAL_TIM_MspPostInit+0x120>)
 8004650:	0019      	movs	r1, r3
 8004652:	0010      	movs	r0, r2
 8004654:	f000 fc8c 	bl	8004f70 <HAL_GPIO_Init>
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b00b      	add	sp, #44	@ 0x2c
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	40010800 	.word	0x40010800
 8004668:	40011400 	.word	0x40011400
 800466c:	50000400 	.word	0x50000400

08004670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004678:	240c      	movs	r4, #12
 800467a:	193b      	adds	r3, r7, r4
 800467c:	0018      	movs	r0, r3
 800467e:	2314      	movs	r3, #20
 8004680:	001a      	movs	r2, r3
 8004682:	2100      	movs	r1, #0
 8004684:	f006 f994 	bl	800a9b0 <memset>
  if(huart->Instance==USART1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_UART_MspInit+0x80>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d12a      	bne.n	80046e8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004692:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <HAL_UART_MspInit+0x84>)
 8004694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004696:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <HAL_UART_MspInit+0x84>)
 8004698:	2180      	movs	r1, #128	@ 0x80
 800469a:	01c9      	lsls	r1, r1, #7
 800469c:	430a      	orrs	r2, r1
 800469e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a0:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <HAL_UART_MspInit+0x84>)
 80046a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a4:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <HAL_UART_MspInit+0x84>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	430a      	orrs	r2, r1
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_UART_MspInit+0x84>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	2201      	movs	r2, #1
 80046b2:	4013      	ands	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046b8:	193b      	adds	r3, r7, r4
 80046ba:	22c0      	movs	r2, #192	@ 0xc0
 80046bc:	00d2      	lsls	r2, r2, #3
 80046be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	0021      	movs	r1, r4
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2202      	movs	r2, #2
 80046c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2203      	movs	r2, #3
 80046d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	2204      	movs	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046da:	187a      	adds	r2, r7, r1
 80046dc:	23a0      	movs	r3, #160	@ 0xa0
 80046de:	05db      	lsls	r3, r3, #23
 80046e0:	0011      	movs	r1, r2
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fc44 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b009      	add	sp, #36	@ 0x24
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000

080046f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046fc:	46c0      	nop			@ (mov r8, r8)
 80046fe:	e7fd      	b.n	80046fc <NMI_Handler+0x4>

08004700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	e7fd      	b.n	8004704 <HardFault_Handler+0x4>

08004708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004720:	f000 f98e 	bl	8004a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004724:	46c0      	nop			@ (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004730:	4b03      	ldr	r3, [pc, #12]	@ (8004740 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fb61 	bl	8004dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	20000244 	.word	0x20000244

08004744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004748:	4b03      	ldr	r3, [pc, #12]	@ (8004758 <TIM2_IRQHandler+0x14>)
 800474a:	0018      	movs	r0, r3
 800474c:	f003 fefe 	bl	800854c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	200002e4 	.word	0x200002e4

0800475c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <TIM21_IRQHandler+0x14>)
 8004762:	0018      	movs	r0, r3
 8004764:	f003 fef2 	bl	800854c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	20000324 	.word	0x20000324

08004774 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <TIM22_IRQHandler+0x14>)
 800477a:	0018      	movs	r0, r3
 800477c:	f003 fee6 	bl	800854c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	20000364 	.word	0x20000364

0800478c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <I2C1_IRQHandler+0x2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	23e0      	movs	r3, #224	@ 0xe0
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4013      	ands	r3, r2
 800479c:	d004      	beq.n	80047a8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <I2C1_IRQHandler+0x2c>)
 80047a0:	0018      	movs	r0, r3
 80047a2:	f001 f855 	bl	8005850 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80047a6:	e003      	b.n	80047b0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80047a8:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <I2C1_IRQHandler+0x2c>)
 80047aa:	0018      	movs	r0, r3
 80047ac:	f001 f836 	bl	800581c <HAL_I2C_EV_IRQHandler>
}
 80047b0:	46c0      	nop			@ (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	200001f0 	.word	0x200001f0

080047bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  return 1;
 80047c0:	2301      	movs	r3, #1
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_kill>:

int _kill(int pid, int sig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047d2:	f006 f947 	bl	800aa64 <__errno>
 80047d6:	0003      	movs	r3, r0
 80047d8:	2216      	movs	r2, #22
 80047da:	601a      	str	r2, [r3, #0]
  return -1;
 80047dc:	2301      	movs	r3, #1
 80047de:	425b      	negs	r3, r3
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_exit>:

void _exit (int status)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047f0:	2301      	movs	r3, #1
 80047f2:	425a      	negs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0011      	movs	r1, r2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff ffe5 	bl	80047c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	e7fd      	b.n	80047fe <_exit+0x16>

08004802 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e00a      	b.n	800482a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004814:	e000      	b.n	8004818 <_read+0x16>
 8004816:	bf00      	nop
 8004818:	0001      	movs	r1, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	60ba      	str	r2, [r7, #8]
 8004820:	b2ca      	uxtb	r2, r1
 8004822:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3301      	adds	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	dbf0      	blt.n	8004814 <_read+0x12>
  }

  return len;
 8004832:	687b      	ldr	r3, [r7, #4]
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b006      	add	sp, #24
 800483a:	bd80      	pop	{r7, pc}

0800483c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e009      	b.n	8004862 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	60ba      	str	r2, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	0018      	movs	r0, r3
 8004858:	e000      	b.n	800485c <_write+0x20>
 800485a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3301      	adds	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	dbf1      	blt.n	800484e <_write+0x12>
  }
  return len;
 800486a:	687b      	ldr	r3, [r7, #4]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b006      	add	sp, #24
 8004872:	bd80      	pop	{r7, pc}

08004874 <_close>:

int _close(int file)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800487c:	2301      	movs	r3, #1
 800487e:	425b      	negs	r3, r3
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b002      	add	sp, #8
 8004886:	bd80      	pop	{r7, pc}

08004888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2280      	movs	r2, #128	@ 0x80
 8004896:	0192      	lsls	r2, r2, #6
 8004898:	605a      	str	r2, [r3, #4]
  return 0;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <_isatty>:

int _isatty(int file)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048ac:	2301      	movs	r3, #1
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048d4:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <_sbrk+0x5c>)
 80048d6:	4b15      	ldr	r3, [pc, #84]	@ (800492c <_sbrk+0x60>)
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048e0:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <_sbrk+0x64>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <_sbrk+0x64>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	@ (8004934 <_sbrk+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <_sbrk+0x64>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d207      	bcs.n	800490c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048fc:	f006 f8b2 	bl	800aa64 <__errno>
 8004900:	0003      	movs	r3, r0
 8004902:	220c      	movs	r2, #12
 8004904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004906:	2301      	movs	r3, #1
 8004908:	425b      	negs	r3, r3
 800490a:	e009      	b.n	8004920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800490c:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <_sbrk+0x64>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004912:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <_sbrk+0x64>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	18d2      	adds	r2, r2, r3
 800491a:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <_sbrk+0x64>)
 800491c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b006      	add	sp, #24
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20002000 	.word	0x20002000
 800492c:	00000400 	.word	0x00000400
 8004930:	200004e0 	.word	0x200004e0
 8004934:	20000638 	.word	0x20000638

08004938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004944:	480d      	ldr	r0, [pc, #52]	@ (800497c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004946:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004948:	f7ff fff6 	bl	8004938 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800494c:	480c      	ldr	r0, [pc, #48]	@ (8004980 <LoopForever+0x6>)
  ldr r1, =_edata
 800494e:	490d      	ldr	r1, [pc, #52]	@ (8004984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004950:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <LoopForever+0xe>)
  movs r3, #0
 8004952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004954:	e002      	b.n	800495c <LoopCopyDataInit>

08004956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495a:	3304      	adds	r3, #4

0800495c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800495c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800495e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004960:	d3f9      	bcc.n	8004956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004962:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004964:	4c0a      	ldr	r4, [pc, #40]	@ (8004990 <LoopForever+0x16>)
  movs r3, #0
 8004966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004968:	e001      	b.n	800496e <LoopFillZerobss>

0800496a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800496c:	3204      	adds	r2, #4

0800496e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800496e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004970:	d3fb      	bcc.n	800496a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004972:	f006 f87d 	bl	800aa70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004976:	f7fe fb2f 	bl	8002fd8 <main>

0800497a <LoopForever>:

LoopForever:
    b LoopForever
 800497a:	e7fe      	b.n	800497a <LoopForever>
   ldr   r0, =_estack
 800497c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004984:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004988:	0800d14c 	.word	0x0800d14c
  ldr r2, =_sbss
 800498c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004990:	20000634 	.word	0x20000634

08004994 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004994:	e7fe      	b.n	8004994 <ADC1_COMP_IRQHandler>
	...

08004998 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_Init+0x3c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <HAL_Init+0x3c>)
 80049aa:	2140      	movs	r1, #64	@ 0x40
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049b0:	2003      	movs	r0, #3
 80049b2:	f000 f811 	bl	80049d8 <HAL_InitTick>
 80049b6:	1e03      	subs	r3, r0, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e001      	b.n	80049c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049c2:	f7ff fc55 	bl	8004270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	40022000 	.word	0x40022000

080049d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049e0:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <HAL_InitTick+0x5c>)
 80049e2:	681c      	ldr	r4, [r3, #0]
 80049e4:	4b14      	ldr	r3, [pc, #80]	@ (8004a38 <HAL_InitTick+0x60>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	0019      	movs	r1, r3
 80049ea:	23fa      	movs	r3, #250	@ 0xfa
 80049ec:	0098      	lsls	r0, r3, #2
 80049ee:	f7fb fba7 	bl	8000140 <__udivsi3>
 80049f2:	0003      	movs	r3, r0
 80049f4:	0019      	movs	r1, r3
 80049f6:	0020      	movs	r0, r4
 80049f8:	f7fb fba2 	bl	8000140 <__udivsi3>
 80049fc:	0003      	movs	r3, r0
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 f92f 	bl	8004c62 <HAL_SYSTICK_Config>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e00f      	b.n	8004a2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d80b      	bhi.n	8004a2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	2301      	movs	r3, #1
 8004a16:	425b      	negs	r3, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f8fc 	bl	8004c18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a20:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_InitTick+0x64>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b003      	add	sp, #12
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000008 	.word	0x20000008
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_IncTick+0x1c>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_IncTick+0x20>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	18d2      	adds	r2, r2, r3
 8004a50:	4b03      	ldr	r3, [pc, #12]	@ (8004a60 <HAL_IncTick+0x20>)
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	200004e4 	.word	0x200004e4

08004a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  return uwTick;
 8004a68:	4b02      	ldr	r3, [pc, #8]	@ (8004a74 <HAL_GetTick+0x10>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	200004e4 	.word	0x200004e4

08004a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a80:	f7ff fff0 	bl	8004a64 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	d005      	beq.n	8004a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <HAL_Delay+0x44>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	001a      	movs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	f7ff ffe0 	bl	8004a64 <HAL_GetTick>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d8f7      	bhi.n	8004aa0 <HAL_Delay+0x28>
  {
  }
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000008 	.word	0x20000008

08004ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004acc:	1dfb      	adds	r3, r7, #7
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ad2:	d809      	bhi.n	8004ae8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	001a      	movs	r2, r3
 8004ada:	231f      	movs	r3, #31
 8004adc:	401a      	ands	r2, r3
 8004ade:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <__NVIC_EnableIRQ+0x30>)
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4091      	lsls	r1, r2
 8004ae4:	000a      	movs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
  }
}
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000e100 	.word	0xe000e100

08004af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	0002      	movs	r2, r0
 8004afc:	6039      	str	r1, [r7, #0]
 8004afe:	1dfb      	adds	r3, r7, #7
 8004b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b02:	1dfb      	adds	r3, r7, #7
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b08:	d828      	bhi.n	8004b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc8 <__NVIC_SetPriority+0xd4>)
 8004b0c:	1dfb      	adds	r3, r7, #7
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	33c0      	adds	r3, #192	@ 0xc0
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	589b      	ldr	r3, [r3, r2]
 8004b1a:	1dfa      	adds	r2, r7, #7
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	0011      	movs	r1, r2
 8004b20:	2203      	movs	r2, #3
 8004b22:	400a      	ands	r2, r1
 8004b24:	00d2      	lsls	r2, r2, #3
 8004b26:	21ff      	movs	r1, #255	@ 0xff
 8004b28:	4091      	lsls	r1, r2
 8004b2a:	000a      	movs	r2, r1
 8004b2c:	43d2      	mvns	r2, r2
 8004b2e:	401a      	ands	r2, r3
 8004b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	22ff      	movs	r2, #255	@ 0xff
 8004b38:	401a      	ands	r2, r3
 8004b3a:	1dfb      	adds	r3, r7, #7
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	0018      	movs	r0, r3
 8004b40:	2303      	movs	r3, #3
 8004b42:	4003      	ands	r3, r0
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b48:	481f      	ldr	r0, [pc, #124]	@ (8004bc8 <__NVIC_SetPriority+0xd4>)
 8004b4a:	1dfb      	adds	r3, r7, #7
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	430a      	orrs	r2, r1
 8004b54:	33c0      	adds	r3, #192	@ 0xc0
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b5a:	e031      	b.n	8004bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <__NVIC_SetPriority+0xd8>)
 8004b5e:	1dfb      	adds	r3, r7, #7
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	0019      	movs	r1, r3
 8004b64:	230f      	movs	r3, #15
 8004b66:	400b      	ands	r3, r1
 8004b68:	3b08      	subs	r3, #8
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	3306      	adds	r3, #6
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	3304      	adds	r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1dfa      	adds	r2, r7, #7
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	400a      	ands	r2, r1
 8004b80:	00d2      	lsls	r2, r2, #3
 8004b82:	21ff      	movs	r1, #255	@ 0xff
 8004b84:	4091      	lsls	r1, r2
 8004b86:	000a      	movs	r2, r1
 8004b88:	43d2      	mvns	r2, r2
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	019b      	lsls	r3, r3, #6
 8004b92:	22ff      	movs	r2, #255	@ 0xff
 8004b94:	401a      	ands	r2, r3
 8004b96:	1dfb      	adds	r3, r7, #7
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	4003      	ands	r3, r0
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ba4:	4809      	ldr	r0, [pc, #36]	@ (8004bcc <__NVIC_SetPriority+0xd8>)
 8004ba6:	1dfb      	adds	r3, r7, #7
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	001c      	movs	r4, r3
 8004bac:	230f      	movs	r3, #15
 8004bae:	4023      	ands	r3, r4
 8004bb0:	3b08      	subs	r3, #8
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	3306      	adds	r3, #6
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	18c3      	adds	r3, r0, r3
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b003      	add	sp, #12
 8004bc6:	bd90      	pop	{r4, r7, pc}
 8004bc8:	e000e100 	.word	0xe000e100
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	1e5a      	subs	r2, r3, #1
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	045b      	lsls	r3, r3, #17
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d301      	bcc.n	8004be8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be4:	2301      	movs	r3, #1
 8004be6:	e010      	b.n	8004c0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <SysTick_Config+0x44>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	3a01      	subs	r2, #1
 8004bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	2103      	movs	r1, #3
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff ff7c 	bl	8004af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <SysTick_Config+0x44>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c02:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <SysTick_Config+0x44>)
 8004c04:	2207      	movs	r2, #7
 8004c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	e000e010 	.word	0xe000e010

08004c18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	210f      	movs	r1, #15
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	1c02      	adds	r2, r0, #0
 8004c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff ff5d 	bl	8004af4 <__NVIC_SetPriority>
}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b004      	add	sp, #16
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	0002      	movs	r2, r0
 8004c4a:	1dfb      	adds	r3, r7, #7
 8004c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4e:	1dfb      	adds	r3, r7, #7
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff ff33 	bl	8004ac0 <__NVIC_EnableIRQ>
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7ff ffaf 	bl	8004bd0 <SysTick_Config>
 8004c72:	0003      	movs	r3, r0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e061      	b.n	8004d52 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a32      	ldr	r2, [pc, #200]	@ (8004d5c <HAL_DMA_Init+0xe0>)
 8004c94:	4694      	mov	ip, r2
 8004c96:	4463      	add	r3, ip
 8004c98:	2114      	movs	r1, #20
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fb fa50 	bl	8000140 <__udivsi3>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	009a      	lsls	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2d      	ldr	r2, [pc, #180]	@ (8004d60 <HAL_DMA_Init+0xe4>)
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2225      	movs	r2, #37	@ 0x25
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <HAL_DMA_Init+0xe8>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	01db      	lsls	r3, r3, #7
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d08:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <HAL_DMA_Init+0xec>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d10:	211c      	movs	r1, #28
 8004d12:	400b      	ands	r3, r1
 8004d14:	210f      	movs	r1, #15
 8004d16:	4099      	lsls	r1, r3
 8004d18:	000b      	movs	r3, r1
 8004d1a:	43d9      	mvns	r1, r3
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_DMA_Init+0xec>)
 8004d1e:	400a      	ands	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004d22:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <HAL_DMA_Init+0xec>)
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	201c      	movs	r0, #28
 8004d30:	4003      	ands	r3, r0
 8004d32:	409a      	lsls	r2, r3
 8004d34:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <HAL_DMA_Init+0xec>)
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2225      	movs	r2, #37	@ 0x25
 8004d44:	2101      	movs	r1, #1
 8004d46:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	@ 0x24
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	bffdfff8 	.word	0xbffdfff8
 8004d60:	40020000 	.word	0x40020000
 8004d64:	ffff800f 	.word	0xffff800f
 8004d68:	400200a8 	.word	0x400200a8

08004d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	210f      	movs	r1, #15
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2225      	movs	r2, #37	@ 0x25
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d006      	beq.n	8004d96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e02a      	b.n	8004dec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	210e      	movs	r1, #14
 8004da2:	438a      	bics	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2101      	movs	r1, #1
 8004db2:	438a      	bics	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	221c      	movs	r2, #28
 8004dbc:	401a      	ands	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4091      	lsls	r1, r2
 8004dc6:	000a      	movs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2225      	movs	r2, #37	@ 0x25
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2224      	movs	r2, #36	@ 0x24
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	0010      	movs	r0, r2
 8004dea:	4798      	blx	r3
    }
  }
  return status;
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
}
 8004df2:	0018      	movs	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	221c      	movs	r2, #28
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	0013      	movs	r3, r2
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4013      	ands	r3, r2
 8004e24:	d026      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x7a>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	4013      	ands	r3, r2
 8004e38:	d107      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2104      	movs	r1, #4
 8004e46:	438a      	bics	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	221c      	movs	r2, #28
 8004e50:	401a      	ands	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	2104      	movs	r1, #4
 8004e58:	4091      	lsls	r1, r2
 8004e5a:	000a      	movs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d100      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x6e>
 8004e66:	e071      	b.n	8004f4c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	0010      	movs	r0, r2
 8004e70:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004e72:	e06b      	b.n	8004f4c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	221c      	movs	r2, #28
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4013      	ands	r3, r2
 8004e86:	d02d      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xea>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d029      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2220      	movs	r2, #32
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	210a      	movs	r1, #10
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2225      	movs	r2, #37	@ 0x25
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb8:	221c      	movs	r2, #28
 8004eba:	401a      	ands	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4091      	lsls	r1, r2
 8004ec4:	000a      	movs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	@ 0x24
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d039      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	0010      	movs	r0, r2
 8004ee0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ee2:	e033      	b.n	8004f4c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee8:	221c      	movs	r2, #28
 8004eea:	4013      	ands	r3, r2
 8004eec:	2208      	movs	r2, #8
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	0013      	movs	r3, r2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d02a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x154>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2208      	movs	r2, #8
 8004efc:	4013      	ands	r3, r2
 8004efe:	d026      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	210e      	movs	r1, #14
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f14:	221c      	movs	r2, #28
 8004f16:	401a      	ands	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4091      	lsls	r1, r2
 8004f20:	000a      	movs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2225      	movs	r2, #37	@ 0x25
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2224      	movs	r2, #36	@ 0x24
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	0010      	movs	r0, r2
 8004f4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f4c:	46c0      	nop			@ (mov r8, r8)
 8004f4e:	46c0      	nop			@ (mov r8, r8)
}
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2225      	movs	r2, #37	@ 0x25
 8004f62:	5c9b      	ldrb	r3, [r3, r2]
 8004f64:	b2db      	uxtb	r3, r3
}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b002      	add	sp, #8
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f86:	e14f      	b.n	8005228 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4091      	lsls	r1, r2
 8004f92:	000a      	movs	r2, r1
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d100      	bne.n	8004fa0 <HAL_GPIO_Init+0x30>
 8004f9e:	e140      	b.n	8005222 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d005      	beq.n	8004fb8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d130      	bne.n	800501a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	43da      	mvns	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	0013      	movs	r3, r2
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fee:	2201      	movs	r2, #1
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	2201      	movs	r2, #1
 8005006:	401a      	ands	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	409a      	lsls	r2, r3
 800500c:	0013      	movs	r3, r2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2203      	movs	r2, #3
 8005020:	4013      	ands	r3, r2
 8005022:	2b03      	cmp	r3, #3
 8005024:	d017      	beq.n	8005056 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	409a      	lsls	r2, r3
 8005034:	0013      	movs	r3, r2
 8005036:	43da      	mvns	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	409a      	lsls	r2, r3
 8005048:	0013      	movs	r3, r2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2203      	movs	r2, #3
 800505c:	4013      	ands	r3, r2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d123      	bne.n	80050aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	08da      	lsrs	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3208      	adds	r2, #8
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	58d3      	ldr	r3, [r2, r3]
 800506e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2207      	movs	r2, #7
 8005074:	4013      	ands	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	220f      	movs	r2, #15
 800507a:	409a      	lsls	r2, r3
 800507c:	0013      	movs	r3, r2
 800507e:	43da      	mvns	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4013      	ands	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2107      	movs	r1, #7
 800508e:	400b      	ands	r3, r1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	409a      	lsls	r2, r3
 8005094:	0013      	movs	r3, r2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	08da      	lsrs	r2, r3, #3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3208      	adds	r2, #8
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	6939      	ldr	r1, [r7, #16]
 80050a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	2203      	movs	r2, #3
 80050b6:	409a      	lsls	r2, r3
 80050b8:	0013      	movs	r3, r2
 80050ba:	43da      	mvns	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4013      	ands	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2203      	movs	r2, #3
 80050c8:	401a      	ands	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	409a      	lsls	r2, r3
 80050d0:	0013      	movs	r3, r2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	23c0      	movs	r3, #192	@ 0xc0
 80050e4:	029b      	lsls	r3, r3, #10
 80050e6:	4013      	ands	r3, r2
 80050e8:	d100      	bne.n	80050ec <HAL_GPIO_Init+0x17c>
 80050ea:	e09a      	b.n	8005222 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ec:	4b54      	ldr	r3, [pc, #336]	@ (8005240 <HAL_GPIO_Init+0x2d0>)
 80050ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f0:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <HAL_GPIO_Init+0x2d0>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f8:	4a52      	ldr	r2, [pc, #328]	@ (8005244 <HAL_GPIO_Init+0x2d4>)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	3302      	adds	r3, #2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	589b      	ldr	r3, [r3, r2]
 8005104:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2203      	movs	r2, #3
 800510a:	4013      	ands	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	220f      	movs	r2, #15
 8005110:	409a      	lsls	r2, r3
 8005112:	0013      	movs	r3, r2
 8005114:	43da      	mvns	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	23a0      	movs	r3, #160	@ 0xa0
 8005120:	05db      	lsls	r3, r3, #23
 8005122:	429a      	cmp	r2, r3
 8005124:	d019      	beq.n	800515a <HAL_GPIO_Init+0x1ea>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a47      	ldr	r2, [pc, #284]	@ (8005248 <HAL_GPIO_Init+0x2d8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_GPIO_Init+0x1e6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a46      	ldr	r2, [pc, #280]	@ (800524c <HAL_GPIO_Init+0x2dc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00d      	beq.n	8005152 <HAL_GPIO_Init+0x1e2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a45      	ldr	r2, [pc, #276]	@ (8005250 <HAL_GPIO_Init+0x2e0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <HAL_GPIO_Init+0x1de>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a44      	ldr	r2, [pc, #272]	@ (8005254 <HAL_GPIO_Init+0x2e4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_GPIO_Init+0x1da>
 8005146:	2305      	movs	r3, #5
 8005148:	e008      	b.n	800515c <HAL_GPIO_Init+0x1ec>
 800514a:	2306      	movs	r3, #6
 800514c:	e006      	b.n	800515c <HAL_GPIO_Init+0x1ec>
 800514e:	2303      	movs	r3, #3
 8005150:	e004      	b.n	800515c <HAL_GPIO_Init+0x1ec>
 8005152:	2302      	movs	r3, #2
 8005154:	e002      	b.n	800515c <HAL_GPIO_Init+0x1ec>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_GPIO_Init+0x1ec>
 800515a:	2300      	movs	r3, #0
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	2103      	movs	r1, #3
 8005160:	400a      	ands	r2, r1
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	4093      	lsls	r3, r2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800516c:	4935      	ldr	r1, [pc, #212]	@ (8005244 <HAL_GPIO_Init+0x2d4>)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	3302      	adds	r3, #2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800517a:	4b37      	ldr	r3, [pc, #220]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	43da      	mvns	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	035b      	lsls	r3, r3, #13
 8005192:	4013      	ands	r3, r2
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800519e:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80051a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	43da      	mvns	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	039b      	lsls	r3, r3, #14
 80051bc:	4013      	ands	r3, r2
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051c8:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80051ce:	4b22      	ldr	r3, [pc, #136]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4013      	ands	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	2380      	movs	r3, #128	@ 0x80
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	4013      	ands	r3, r2
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051f2:	4b19      	ldr	r3, [pc, #100]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f8:	4b17      	ldr	r3, [pc, #92]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	43da      	mvns	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	025b      	lsls	r3, r3, #9
 8005210:	4013      	ands	r3, r2
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800521c:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <HAL_GPIO_Init+0x2e8>)
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3301      	adds	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	40da      	lsrs	r2, r3
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	d000      	beq.n	8005236 <HAL_GPIO_Init+0x2c6>
 8005234:	e6a8      	b.n	8004f88 <HAL_GPIO_Init+0x18>
  }
}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	40010000 	.word	0x40010000
 8005248:	50000400 	.word	0x50000400
 800524c:	50000800 	.word	0x50000800
 8005250:	50000c00 	.word	0x50000c00
 8005254:	50001c00 	.word	0x50001c00
 8005258:	40010400 	.word	0x40010400

0800525c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	000a      	movs	r2, r1
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	1cba      	adds	r2, r7, #2
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	4013      	ands	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005276:	230f      	movs	r3, #15
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e003      	b.n	8005288 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005280:	230f      	movs	r3, #15
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005288:	230f      	movs	r3, #15
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	781b      	ldrb	r3, [r3, #0]
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	0008      	movs	r0, r1
 80052a0:	0011      	movs	r1, r2
 80052a2:	1cbb      	adds	r3, r7, #2
 80052a4:	1c02      	adds	r2, r0, #0
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	1c7b      	adds	r3, r7, #1
 80052aa:	1c0a      	adds	r2, r1, #0
 80052ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052ae:	1c7b      	adds	r3, r7, #1
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052b6:	1cbb      	adds	r3, r7, #2
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80052be:	e003      	b.n	80052c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80052c0:	1cbb      	adds	r3, r7, #2
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80052c8:	46c0      	nop			@ (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e082      	b.n	80053e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	5c9b      	ldrb	r3, [r3, r2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2240      	movs	r2, #64	@ 0x40
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fe ffcd 	bl	8004298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2241      	movs	r2, #65	@ 0x41
 8005302:	2124      	movs	r1, #36	@ 0x24
 8005304:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	438a      	bics	r2, r1
 8005314:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4934      	ldr	r1, [pc, #208]	@ (80053f0 <HAL_I2C_Init+0x120>)
 8005320:	400a      	ands	r2, r1
 8005322:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4931      	ldr	r1, [pc, #196]	@ (80053f4 <HAL_I2C_Init+0x124>)
 8005330:	400a      	ands	r2, r1
 8005332:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d108      	bne.n	800534e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2180      	movs	r1, #128	@ 0x80
 8005346:	0209      	lsls	r1, r1, #8
 8005348:	430a      	orrs	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	e007      	b.n	800535e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2184      	movs	r1, #132	@ 0x84
 8005358:	0209      	lsls	r1, r1, #8
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d104      	bne.n	8005370 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2280      	movs	r2, #128	@ 0x80
 800536c:	0112      	lsls	r2, r2, #4
 800536e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	491f      	ldr	r1, [pc, #124]	@ (80053f8 <HAL_I2C_Init+0x128>)
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	491a      	ldr	r1, [pc, #104]	@ (80053f4 <HAL_I2C_Init+0x124>)
 800538c:	400a      	ands	r2, r1
 800538e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	431a      	orrs	r2, r3
 800539a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69d9      	ldr	r1, [r3, #28]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2241      	movs	r2, #65	@ 0x41
 80053d4:	2120      	movs	r1, #32
 80053d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2242      	movs	r2, #66	@ 0x42
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	f0ffffff 	.word	0xf0ffffff
 80053f4:	ffff7fff 	.word	0xffff7fff
 80053f8:	02008000 	.word	0x02008000

080053fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b089      	sub	sp, #36	@ 0x24
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	0008      	movs	r0, r1
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	0019      	movs	r1, r3
 800540a:	230a      	movs	r3, #10
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	1c02      	adds	r2, r0, #0
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	2308      	movs	r3, #8
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	1c0a      	adds	r2, r1, #0
 8005418:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2241      	movs	r2, #65	@ 0x41
 800541e:	5c9b      	ldrb	r3, [r3, r2]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b20      	cmp	r3, #32
 8005424:	d000      	beq.n	8005428 <HAL_I2C_Master_Transmit+0x2c>
 8005426:	e0e7      	b.n	80055f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2240      	movs	r2, #64	@ 0x40
 800542c:	5c9b      	ldrb	r3, [r3, r2]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_I2C_Master_Transmit+0x3a>
 8005432:	2302      	movs	r3, #2
 8005434:	e0e1      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2240      	movs	r2, #64	@ 0x40
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800543e:	f7ff fb11 	bl	8004a64 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	0219      	lsls	r1, r3, #8
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2319      	movs	r3, #25
 8005452:	2201      	movs	r2, #1
 8005454:	f000 ff9e 	bl	8006394 <I2C_WaitOnFlagUntilTimeout>
 8005458:	1e03      	subs	r3, r0, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0cc      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2241      	movs	r2, #65	@ 0x41
 8005464:	2121      	movs	r1, #33	@ 0x21
 8005466:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2242      	movs	r2, #66	@ 0x42
 800546c:	2110      	movs	r1, #16
 800546e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2208      	movs	r2, #8
 8005480:	18ba      	adds	r2, r7, r2
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2bff      	cmp	r3, #255	@ 0xff
 8005494:	d911      	bls.n	80054ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	@ 0xff
 800549a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	2380      	movs	r3, #128	@ 0x80
 80054a4:	045c      	lsls	r4, r3, #17
 80054a6:	230a      	movs	r3, #10
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	8819      	ldrh	r1, [r3, #0]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	4b55      	ldr	r3, [pc, #340]	@ (8005604 <HAL_I2C_Master_Transmit+0x208>)
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	0023      	movs	r3, r4
 80054b4:	f001 f9c0 	bl	8006838 <I2C_TransferConfig>
 80054b8:	e075      	b.n	80055a6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	2380      	movs	r3, #128	@ 0x80
 80054cc:	049c      	lsls	r4, r3, #18
 80054ce:	230a      	movs	r3, #10
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	8819      	ldrh	r1, [r3, #0]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005604 <HAL_I2C_Master_Transmit+0x208>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	0023      	movs	r3, r4
 80054dc:	f001 f9ac 	bl	8006838 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054e0:	e061      	b.n	80055a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 ffa1 	bl	8006430 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ee:	1e03      	subs	r3, r0, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e081      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03a      	beq.n	80055a6 <HAL_I2C_Master_Transmit+0x1aa>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d136      	bne.n	80055a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	0013      	movs	r3, r2
 8005542:	2200      	movs	r2, #0
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	f000 ff25 	bl	8006394 <I2C_WaitOnFlagUntilTimeout>
 800554a:	1e03      	subs	r3, r0, #0
 800554c:	d001      	beq.n	8005552 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e053      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	2bff      	cmp	r3, #255	@ 0xff
 800555a:	d911      	bls.n	8005580 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	22ff      	movs	r2, #255	@ 0xff
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	b2da      	uxtb	r2, r3
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	045c      	lsls	r4, r3, #17
 800556c:	230a      	movs	r3, #10
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	8819      	ldrh	r1, [r3, #0]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	2300      	movs	r3, #0
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	0023      	movs	r3, r4
 800557a:	f001 f95d 	bl	8006838 <I2C_TransferConfig>
 800557e:	e012      	b.n	80055a6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558e:	b2da      	uxtb	r2, r3
 8005590:	2380      	movs	r3, #128	@ 0x80
 8005592:	049c      	lsls	r4, r3, #18
 8005594:	230a      	movs	r3, #10
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	8819      	ldrh	r1, [r3, #0]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	2300      	movs	r3, #0
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	0023      	movs	r3, r4
 80055a2:	f001 f949 	bl	8006838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d198      	bne.n	80054e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 ff80 	bl	80064bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d001      	beq.n	80055c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e01a      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2220      	movs	r2, #32
 80055ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	490c      	ldr	r1, [pc, #48]	@ (8005608 <HAL_I2C_Master_Transmit+0x20c>)
 80055d8:	400a      	ands	r2, r1
 80055da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2241      	movs	r2, #65	@ 0x41
 80055e0:	2120      	movs	r1, #32
 80055e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2242      	movs	r2, #66	@ 0x42
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	@ 0x40
 80055f0:	2100      	movs	r1, #0
 80055f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b007      	add	sp, #28
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	80002000 	.word	0x80002000
 8005608:	fe00e800 	.word	0xfe00e800

0800560c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b089      	sub	sp, #36	@ 0x24
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	0008      	movs	r0, r1
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	0019      	movs	r1, r3
 800561a:	230a      	movs	r3, #10
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	1c02      	adds	r2, r0, #0
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	2308      	movs	r3, #8
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	1c0a      	adds	r2, r1, #0
 8005628:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2241      	movs	r2, #65	@ 0x41
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	d000      	beq.n	8005638 <HAL_I2C_Master_Receive+0x2c>
 8005636:	e0e8      	b.n	800580a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2240      	movs	r2, #64	@ 0x40
 800563c:	5c9b      	ldrb	r3, [r3, r2]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_I2C_Master_Receive+0x3a>
 8005642:	2302      	movs	r3, #2
 8005644:	e0e2      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2240      	movs	r2, #64	@ 0x40
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800564e:	f7ff fa09 	bl	8004a64 <HAL_GetTick>
 8005652:	0003      	movs	r3, r0
 8005654:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	0219      	lsls	r1, r3, #8
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2319      	movs	r3, #25
 8005662:	2201      	movs	r2, #1
 8005664:	f000 fe96 	bl	8006394 <I2C_WaitOnFlagUntilTimeout>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d001      	beq.n	8005670 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0cd      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2241      	movs	r2, #65	@ 0x41
 8005674:	2122      	movs	r1, #34	@ 0x22
 8005676:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2242      	movs	r2, #66	@ 0x42
 800567c:	2110      	movs	r1, #16
 800567e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2208      	movs	r2, #8
 8005690:	18ba      	adds	r2, r7, r2
 8005692:	8812      	ldrh	r2, [r2, #0]
 8005694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2bff      	cmp	r3, #255	@ 0xff
 80056a4:	d911      	bls.n	80056ca <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	22ff      	movs	r2, #255	@ 0xff
 80056aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	045c      	lsls	r4, r3, #17
 80056b6:	230a      	movs	r3, #10
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	8819      	ldrh	r1, [r3, #0]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	4b55      	ldr	r3, [pc, #340]	@ (8005814 <HAL_I2C_Master_Receive+0x208>)
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	0023      	movs	r3, r4
 80056c4:	f001 f8b8 	bl	8006838 <I2C_TransferConfig>
 80056c8:	e076      	b.n	80057b8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	049c      	lsls	r4, r3, #18
 80056de:	230a      	movs	r3, #10
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	8819      	ldrh	r1, [r3, #0]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005814 <HAL_I2C_Master_Receive+0x208>)
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	0023      	movs	r3, r4
 80056ec:	f001 f8a4 	bl	8006838 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80056f0:	e062      	b.n	80057b8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 ff23 	bl	8006544 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e082      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d03a      	beq.n	80057b8 <HAL_I2C_Master_Receive+0x1ac>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d136      	bne.n	80057b8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800574a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	0013      	movs	r3, r2
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	@ 0x80
 8005758:	f000 fe1c 	bl	8006394 <I2C_WaitOnFlagUntilTimeout>
 800575c:	1e03      	subs	r3, r0, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e053      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2bff      	cmp	r3, #255	@ 0xff
 800576c:	d911      	bls.n	8005792 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	22ff      	movs	r2, #255	@ 0xff
 8005772:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005778:	b2da      	uxtb	r2, r3
 800577a:	2380      	movs	r3, #128	@ 0x80
 800577c:	045c      	lsls	r4, r3, #17
 800577e:	230a      	movs	r3, #10
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	8819      	ldrh	r1, [r3, #0]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	0023      	movs	r3, r4
 800578c:	f001 f854 	bl	8006838 <I2C_TransferConfig>
 8005790:	e012      	b.n	80057b8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	049c      	lsls	r4, r3, #18
 80057a6:	230a      	movs	r3, #10
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	8819      	ldrh	r1, [r3, #0]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	0023      	movs	r3, r4
 80057b4:	f001 f840 	bl	8006838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d197      	bne.n	80056f2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 fe77 	bl	80064bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ce:	1e03      	subs	r3, r0, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e01a      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2220      	movs	r2, #32
 80057dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	490b      	ldr	r1, [pc, #44]	@ (8005818 <HAL_I2C_Master_Receive+0x20c>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2241      	movs	r2, #65	@ 0x41
 80057f2:	2120      	movs	r1, #32
 80057f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2242      	movs	r2, #66	@ 0x42
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2240      	movs	r2, #64	@ 0x40
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e000      	b.n	800580c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800580a:	2302      	movs	r3, #2
  }
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b007      	add	sp, #28
 8005812:	bd90      	pop	{r4, r7, pc}
 8005814:	80002400 	.word	0x80002400
 8005818:	fe00e800 	.word	0xfe00e800

0800581c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
  }
}
 8005848:	46c0      	nop			@ (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b004      	add	sp, #16
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	001a      	movs	r2, r3
 800586e:	2301      	movs	r3, #1
 8005870:	4013      	ands	r3, r2
 8005872:	d010      	beq.n	8005896 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	001a      	movs	r2, r3
 800587a:	2301      	movs	r3, #1
 800587c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800587e:	d00a      	beq.n	8005896 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005884:	2201      	movs	r2, #1
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	0052      	lsls	r2, r2, #1
 8005894:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	0a9b      	lsrs	r3, r3, #10
 800589a:	001a      	movs	r2, r3
 800589c:	2301      	movs	r3, #1
 800589e:	4013      	ands	r3, r2
 80058a0:	d010      	beq.n	80058c4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	09db      	lsrs	r3, r3, #7
 80058a6:	001a      	movs	r2, r3
 80058a8:	2301      	movs	r3, #1
 80058aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058ac:	d00a      	beq.n	80058c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	2208      	movs	r2, #8
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	00d2      	lsls	r2, r2, #3
 80058c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	0a5b      	lsrs	r3, r3, #9
 80058c8:	001a      	movs	r2, r3
 80058ca:	2301      	movs	r3, #1
 80058cc:	4013      	ands	r3, r2
 80058ce:	d010      	beq.n	80058f2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	001a      	movs	r2, r3
 80058d6:	2301      	movs	r3, #1
 80058d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058da:	d00a      	beq.n	80058f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	2202      	movs	r2, #2
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2280      	movs	r2, #128	@ 0x80
 80058ee:	0092      	lsls	r2, r2, #2
 80058f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	220b      	movs	r2, #11
 80058fc:	4013      	ands	r3, r2
 80058fe:	d005      	beq.n	800590c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0011      	movs	r1, r2
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fbd8 	bl	80060bc <I2C_ITError>
  }
}
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b006      	add	sp, #24
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b002      	add	sp, #8
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	46bd      	mov	sp, r7
 8005930:	b002      	add	sp, #8
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	0008      	movs	r0, r1
 800593e:	0011      	movs	r1, r2
 8005940:	1cfb      	adds	r3, r7, #3
 8005942:	1c02      	adds	r2, r0, #0
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	003b      	movs	r3, r7
 8005948:	1c0a      	adds	r2, r1, #0
 800594a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b002      	add	sp, #8
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800596c:	46c0      	nop			@ (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b002      	add	sp, #8
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800597c:	46c0      	nop			@ (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2240      	movs	r2, #64	@ 0x40
 800599e:	5c9b      	ldrb	r3, [r3, r2]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <I2C_Slave_ISR_IT+0x24>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0fa      	b.n	8005b9e <I2C_Slave_ISR_IT+0x21a>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	2101      	movs	r1, #1
 80059ae:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	001a      	movs	r2, r3
 80059b6:	2301      	movs	r3, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d00b      	beq.n	80059d4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	001a      	movs	r2, r3
 80059c2:	2301      	movs	r3, #1
 80059c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059c6:	d005      	beq.n	80059d4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	0011      	movs	r1, r2
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f9f6 	bl	8005dc0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	001a      	movs	r2, r3
 80059da:	2301      	movs	r3, #1
 80059dc:	4013      	ands	r3, r2
 80059de:	d054      	beq.n	8005a8a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	001a      	movs	r2, r3
 80059e6:	2301      	movs	r3, #1
 80059e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059ea:	d04e      	beq.n	8005a8a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d12d      	bne.n	8005a52 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2241      	movs	r2, #65	@ 0x41
 80059fa:	5c9b      	ldrb	r3, [r3, r2]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b28      	cmp	r3, #40	@ 0x28
 8005a00:	d10b      	bne.n	8005a1a <I2C_Slave_ISR_IT+0x96>
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	049b      	lsls	r3, r3, #18
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d106      	bne.n	8005a1a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	0011      	movs	r1, r2
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 faf8 	bl	8006008 <I2C_ITListenCplt>
 8005a18:	e036      	b.n	8005a88 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2241      	movs	r2, #65	@ 0x41
 8005a1e:	5c9b      	ldrb	r3, [r3, r2]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b29      	cmp	r3, #41	@ 0x29
 8005a24:	d110      	bne.n	8005a48 <I2C_Slave_ISR_IT+0xc4>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba8 <I2C_Slave_ISR_IT+0x224>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00c      	beq.n	8005a48 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2210      	movs	r2, #16
 8005a34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fc6a 	bl	8006312 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 f957 	bl	8005cf4 <I2C_ITSlaveSeqCplt>
 8005a46:	e01f      	b.n	8005a88 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a50:	e09d      	b.n	8005b8e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2210      	movs	r2, #16
 8005a58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5e:	2204      	movs	r2, #4
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <I2C_Slave_ISR_IT+0xf4>
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	2380      	movs	r3, #128	@ 0x80
 8005a70:	045b      	lsls	r3, r3, #17
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d000      	beq.n	8005a78 <I2C_Slave_ISR_IT+0xf4>
 8005a76:	e08a      	b.n	8005b8e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	0011      	movs	r1, r2
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 fb1b 	bl	80060bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a86:	e082      	b.n	8005b8e <I2C_Slave_ISR_IT+0x20a>
 8005a88:	e081      	b.n	8005b8e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	001a      	movs	r2, r3
 8005a90:	2301      	movs	r3, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d031      	beq.n	8005afa <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	089b      	lsrs	r3, r3, #2
 8005a9a:	001a      	movs	r2, r3
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005aa0:	d02b      	beq.n	8005afa <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d018      	beq.n	8005ade <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d154      	bne.n	8005b92 <I2C_Slave_ISR_IT+0x20e>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <I2C_Slave_ISR_IT+0x224>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d050      	beq.n	8005b92 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 f8fe 	bl	8005cf4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005af8:	e04b      	b.n	8005b92 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	001a      	movs	r2, r3
 8005b00:	2301      	movs	r3, #1
 8005b02:	4013      	ands	r3, r2
 8005b04:	d00c      	beq.n	8005b20 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	001a      	movs	r2, r3
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b10:	d006      	beq.n	8005b20 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 f847 	bl	8005bac <I2C_ITAddrCplt>
 8005b1e:	e039      	b.n	8005b94 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	001a      	movs	r2, r3
 8005b26:	2301      	movs	r3, #1
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d033      	beq.n	8005b94 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	001a      	movs	r2, r3
 8005b32:	2301      	movs	r3, #1
 8005b34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b36:	d02d      	beq.n	8005b94 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d018      	beq.n	8005b74 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b72:	e00f      	b.n	8005b94 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	2380      	movs	r3, #128	@ 0x80
 8005b78:	045b      	lsls	r3, r3, #17
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d002      	beq.n	8005b84 <I2C_Slave_ISR_IT+0x200>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 f8b4 	bl	8005cf4 <I2C_ITSlaveSeqCplt>
 8005b8c:	e002      	b.n	8005b94 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	e000      	b.n	8005b94 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005b92:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2240      	movs	r2, #64	@ 0x40
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	ffff0000 	.word	0xffff0000

08005bac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bac:	b5b0      	push	{r4, r5, r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2241      	movs	r2, #65	@ 0x41
 8005bba:	5c9b      	ldrb	r3, [r3, r2]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	2328      	movs	r3, #40	@ 0x28
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b28      	cmp	r3, #40	@ 0x28
 8005bc6:	d000      	beq.n	8005bca <I2C_ITAddrCplt+0x1e>
 8005bc8:	e088      	b.n	8005cdc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	250f      	movs	r5, #15
 8005bd6:	197b      	adds	r3, r7, r5
 8005bd8:	2101      	movs	r1, #1
 8005bda:	400a      	ands	r2, r1
 8005bdc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	200c      	movs	r0, #12
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	21fe      	movs	r1, #254	@ 0xfe
 8005bee:	400a      	ands	r2, r1
 8005bf0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	240a      	movs	r4, #10
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	0592      	lsls	r2, r2, #22
 8005c00:	0d92      	lsrs	r2, r2, #22
 8005c02:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	21fe      	movs	r1, #254	@ 0xfe
 8005c12:	400a      	ands	r2, r1
 8005c14:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d148      	bne.n	8005cb0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c1e:	0021      	movs	r1, r4
 8005c20:	187b      	adds	r3, r7, r1
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	183b      	adds	r3, r7, r0
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	4053      	eors	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	001a      	movs	r2, r3
 8005c32:	2306      	movs	r3, #6
 8005c34:	4013      	ands	r3, r2
 8005c36:	d120      	bne.n	8005c7a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005c38:	183b      	adds	r3, r7, r0
 8005c3a:	187a      	adds	r2, r7, r1
 8005c3c:	8812      	ldrh	r2, [r2, #0]
 8005c3e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d14c      	bne.n	8005cec <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2240      	movs	r2, #64	@ 0x40
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	197b      	adds	r3, r7, r5
 8005c6e:	7819      	ldrb	r1, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff fe5e 	bl	8005934 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c78:	e038      	b.n	8005cec <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005c7a:	240c      	movs	r4, #12
 8005c7c:	193b      	adds	r3, r7, r4
 8005c7e:	2208      	movs	r2, #8
 8005c80:	18ba      	adds	r2, r7, r2
 8005c82:	8812      	ldrh	r2, [r2, #0]
 8005c84:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	021a      	lsls	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0011      	movs	r1, r2
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 fe0c 	bl	80068ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2240      	movs	r2, #64	@ 0x40
 8005c98:	2100      	movs	r1, #0
 8005c9a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c9c:	193b      	adds	r3, r7, r4
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	230f      	movs	r3, #15
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	7819      	ldrb	r1, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fe43 	bl	8005934 <HAL_I2C_AddrCallback>
}
 8005cae:	e01d      	b.n	8005cec <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 fdf7 	bl	80068ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2240      	movs	r2, #64	@ 0x40
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	881a      	ldrh	r2, [r3, #0]
 8005ccc:	230f      	movs	r3, #15
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	7819      	ldrb	r1, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7ff fe2d 	bl	8005934 <HAL_I2C_AddrCallback>
}
 8005cda:	e007      	b.n	8005cec <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2240      	movs	r2, #64	@ 0x40
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]
}
 8005cec:	46c0      	nop			@ (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bdb0      	pop	{r4, r5, r7, pc}

08005cf4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2242      	movs	r2, #66	@ 0x42
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	0b9b      	lsrs	r3, r3, #14
 8005d10:	001a      	movs	r2, r3
 8005d12:	2301      	movs	r3, #1
 8005d14:	4013      	ands	r3, r2
 8005d16:	d008      	beq.n	8005d2a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4925      	ldr	r1, [pc, #148]	@ (8005db8 <I2C_ITSlaveSeqCplt+0xc4>)
 8005d24:	400a      	ands	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e00d      	b.n	8005d46 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	0bdb      	lsrs	r3, r3, #15
 8005d2e:	001a      	movs	r2, r3
 8005d30:	2301      	movs	r3, #1
 8005d32:	4013      	ands	r3, r2
 8005d34:	d007      	beq.n	8005d46 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	491e      	ldr	r1, [pc, #120]	@ (8005dbc <I2C_ITSlaveSeqCplt+0xc8>)
 8005d42:	400a      	ands	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2241      	movs	r2, #65	@ 0x41
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b29      	cmp	r3, #41	@ 0x29
 8005d50:	d114      	bne.n	8005d7c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2241      	movs	r2, #65	@ 0x41
 8005d56:	2128      	movs	r1, #40	@ 0x28
 8005d58:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2221      	movs	r2, #33	@ 0x21
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2101      	movs	r1, #1
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 fda1 	bl	80068ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2240      	movs	r2, #64	@ 0x40
 8005d6e:	2100      	movs	r1, #0
 8005d70:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7ff fdcd 	bl	8005914 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d7a:	e019      	b.n	8005db0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2241      	movs	r2, #65	@ 0x41
 8005d80:	5c9b      	ldrb	r3, [r3, r2]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d86:	d113      	bne.n	8005db0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2241      	movs	r2, #65	@ 0x41
 8005d8c:	2128      	movs	r1, #40	@ 0x28
 8005d8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2222      	movs	r2, #34	@ 0x22
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2102      	movs	r1, #2
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 fd86 	bl	80068ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2240      	movs	r2, #64	@ 0x40
 8005da4:	2100      	movs	r1, #0
 8005da6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f7ff fdba 	bl	8005924 <HAL_I2C_SlaveRxCpltCallback>
}
 8005db0:	46c0      	nop			@ (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b004      	add	sp, #16
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	ffffbfff 	.word	0xffffbfff
 8005dbc:	ffff7fff 	.word	0xffff7fff

08005dc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005dd6:	200f      	movs	r0, #15
 8005dd8:	183b      	adds	r3, r7, r0
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	2141      	movs	r1, #65	@ 0x41
 8005dde:	5c52      	ldrb	r2, [r2, r1]
 8005de0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2220      	movs	r2, #32
 8005de8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005dea:	183b      	adds	r3, r7, r0
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b21      	cmp	r3, #33	@ 0x21
 8005df0:	d003      	beq.n	8005dfa <I2C_ITSlaveCplt+0x3a>
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b29      	cmp	r3, #41	@ 0x29
 8005df8:	d109      	bne.n	8005e0e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ff0 <I2C_ITSlaveCplt+0x230>)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 fd53 	bl	80068ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2221      	movs	r2, #33	@ 0x21
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e0c:	e011      	b.n	8005e32 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e0e:	220f      	movs	r2, #15
 8005e10:	18bb      	adds	r3, r7, r2
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b22      	cmp	r3, #34	@ 0x22
 8005e16:	d003      	beq.n	8005e20 <I2C_ITSlaveCplt+0x60>
 8005e18:	18bb      	adds	r3, r7, r2
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e1e:	d108      	bne.n	8005e32 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e20:	4a74      	ldr	r2, [pc, #464]	@ (8005ff4 <I2C_ITSlaveCplt+0x234>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 fd40 	bl	80068ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2222      	movs	r2, #34	@ 0x22
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2180      	movs	r1, #128	@ 0x80
 8005e3e:	0209      	lsls	r1, r1, #8
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	496a      	ldr	r1, [pc, #424]	@ (8005ff8 <I2C_ITSlaveCplt+0x238>)
 8005e50:	400a      	ands	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 fa5b 	bl	8006312 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	0b9b      	lsrs	r3, r3, #14
 8005e60:	001a      	movs	r2, r3
 8005e62:	2301      	movs	r3, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d013      	beq.n	8005e90 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4962      	ldr	r1, [pc, #392]	@ (8005ffc <I2C_ITSlaveCplt+0x23c>)
 8005e74:	400a      	ands	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e8e:	e018      	b.n	8005ec2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	0bdb      	lsrs	r3, r3, #15
 8005e94:	001a      	movs	r2, r3
 8005e96:	2301      	movs	r3, #1
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d012      	beq.n	8005ec2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4956      	ldr	r1, [pc, #344]	@ (8006000 <I2C_ITSlaveCplt+0x240>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d006      	beq.n	8005ec2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d020      	beq.n	8005f10 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	4393      	bics	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00c      	beq.n	8005f10 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	2204      	movs	r2, #4
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2242      	movs	r2, #66	@ 0x42
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d013      	beq.n	8005f64 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 f8b9 	bl	80060bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2241      	movs	r2, #65	@ 0x41
 8005f4e:	5c9b      	ldrb	r3, [r3, r2]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b28      	cmp	r3, #40	@ 0x28
 8005f54:	d147      	bne.n	8005fe6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 f853 	bl	8006008 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f62:	e040      	b.n	8005fe6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <I2C_ITSlaveCplt+0x244>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d016      	beq.n	8005f9c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7ff febf 	bl	8005cf4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <I2C_ITSlaveCplt+0x244>)
 8005f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2241      	movs	r2, #65	@ 0x41
 8005f80:	2120      	movs	r1, #32
 8005f82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2240      	movs	r2, #64	@ 0x40
 8005f8e:	2100      	movs	r1, #0
 8005f90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7ff fcdd 	bl	8005954 <HAL_I2C_ListenCpltCallback>
}
 8005f9a:	e024      	b.n	8005fe6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2241      	movs	r2, #65	@ 0x41
 8005fa0:	5c9b      	ldrb	r3, [r3, r2]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b22      	cmp	r3, #34	@ 0x22
 8005fa6:	d10f      	bne.n	8005fc8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2241      	movs	r2, #65	@ 0x41
 8005fac:	2120      	movs	r1, #32
 8005fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2240      	movs	r2, #64	@ 0x40
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7ff fcaf 	bl	8005924 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fc6:	e00e      	b.n	8005fe6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2241      	movs	r2, #65	@ 0x41
 8005fcc:	2120      	movs	r1, #32
 8005fce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2240      	movs	r2, #64	@ 0x40
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7ff fc97 	bl	8005914 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b006      	add	sp, #24
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	00008001 	.word	0x00008001
 8005ff4:	00008002 	.word	0x00008002
 8005ff8:	fe00e800 	.word	0xfe00e800
 8005ffc:	ffffbfff 	.word	0xffffbfff
 8006000:	ffff7fff 	.word	0xffff7fff
 8006004:	ffff0000 	.word	0xffff0000

08006008 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a27      	ldr	r2, [pc, #156]	@ (80060b4 <I2C_ITListenCplt+0xac>)
 8006016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2241      	movs	r2, #65	@ 0x41
 8006022:	2120      	movs	r1, #32
 8006024:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2242      	movs	r2, #66	@ 0x42
 800602a:	2100      	movs	r1, #0
 800602c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	001a      	movs	r2, r3
 800603a:	2301      	movs	r3, #1
 800603c:	4013      	ands	r3, r2
 800603e:	d022      	beq.n	8006086 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	2204      	movs	r2, #4
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006086:	4a0c      	ldr	r2, [pc, #48]	@ (80060b8 <I2C_ITListenCplt+0xb0>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f000 fc0d 	bl	80068ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2210      	movs	r2, #16
 8006098:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2240      	movs	r2, #64	@ 0x40
 800609e:	2100      	movs	r1, #0
 80060a0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	0018      	movs	r0, r3
 80060a6:	f7ff fc55 	bl	8005954 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b002      	add	sp, #8
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	ffff0000 	.word	0xffff0000
 80060b8:	00008003 	.word	0x00008003

080060bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80060c6:	200f      	movs	r0, #15
 80060c8:	183b      	adds	r3, r7, r0
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	2141      	movs	r1, #65	@ 0x41
 80060ce:	5c52      	ldrb	r2, [r2, r1]
 80060d0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2242      	movs	r2, #66	@ 0x42
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a72      	ldr	r2, [pc, #456]	@ (80062a8 <I2C_ITError+0x1ec>)
 80060de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80060f2:	183b      	adds	r3, r7, r0
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b28      	cmp	r3, #40	@ 0x28
 80060f8:	d007      	beq.n	800610a <I2C_ITError+0x4e>
 80060fa:	183b      	adds	r3, r7, r0
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b29      	cmp	r3, #41	@ 0x29
 8006100:	d003      	beq.n	800610a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006102:	183b      	adds	r3, r7, r0
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b2a      	cmp	r3, #42	@ 0x2a
 8006108:	d10c      	bne.n	8006124 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2103      	movs	r1, #3
 800610e:	0018      	movs	r0, r3
 8006110:	f000 fbcc 	bl	80068ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2241      	movs	r2, #65	@ 0x41
 8006118:	2128      	movs	r1, #40	@ 0x28
 800611a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a63      	ldr	r2, [pc, #396]	@ (80062ac <I2C_ITError+0x1f0>)
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34
 8006122:	e032      	b.n	800618a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006124:	4a62      	ldr	r2, [pc, #392]	@ (80062b0 <I2C_ITError+0x1f4>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0011      	movs	r1, r2
 800612a:	0018      	movs	r0, r3
 800612c:	f000 fbbe 	bl	80068ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 f8ed 	bl	8006312 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2241      	movs	r2, #65	@ 0x41
 800613c:	5c9b      	ldrb	r3, [r3, r2]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b60      	cmp	r3, #96	@ 0x60
 8006142:	d01f      	beq.n	8006184 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2241      	movs	r2, #65	@ 0x41
 8006148:	2120      	movs	r1, #32
 800614a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2220      	movs	r2, #32
 8006154:	4013      	ands	r3, r2
 8006156:	2b20      	cmp	r3, #32
 8006158:	d114      	bne.n	8006184 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2210      	movs	r2, #16
 8006162:	4013      	ands	r3, r2
 8006164:	2b10      	cmp	r3, #16
 8006166:	d109      	bne.n	800617c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2210      	movs	r2, #16
 800616e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006174:	2204      	movs	r2, #4
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2220      	movs	r2, #32
 8006182:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	d03b      	beq.n	8006210 <I2C_ITError+0x154>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b11      	cmp	r3, #17
 800619c:	d002      	beq.n	80061a4 <I2C_ITError+0xe8>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b21      	cmp	r3, #33	@ 0x21
 80061a2:	d135      	bne.n	8006210 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	2380      	movs	r3, #128	@ 0x80
 80061ac:	01db      	lsls	r3, r3, #7
 80061ae:	401a      	ands	r2, r3
 80061b0:	2380      	movs	r3, #128	@ 0x80
 80061b2:	01db      	lsls	r3, r3, #7
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d107      	bne.n	80061c8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	493c      	ldr	r1, [pc, #240]	@ (80062b4 <I2C_ITError+0x1f8>)
 80061c4:	400a      	ands	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	0018      	movs	r0, r3
 80061ce:	f7fe fec2 	bl	8004f56 <HAL_DMA_GetState>
 80061d2:	0003      	movs	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d016      	beq.n	8006206 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	4a36      	ldr	r2, [pc, #216]	@ (80062b8 <I2C_ITError+0x1fc>)
 80061de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2240      	movs	r2, #64	@ 0x40
 80061e4:	2100      	movs	r1, #0
 80061e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7fe fdbd 	bl	8004d6c <HAL_DMA_Abort_IT>
 80061f2:	1e03      	subs	r3, r0, #0
 80061f4:	d051      	beq.n	800629a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	0018      	movs	r0, r3
 8006202:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006204:	e049      	b.n	800629a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f000 f859 	bl	80062c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800620e:	e044      	b.n	800629a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d03b      	beq.n	8006290 <I2C_ITError+0x1d4>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b12      	cmp	r3, #18
 800621c:	d002      	beq.n	8006224 <I2C_ITError+0x168>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b22      	cmp	r3, #34	@ 0x22
 8006222:	d135      	bne.n	8006290 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	2380      	movs	r3, #128	@ 0x80
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	401a      	ands	r2, r3
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	429a      	cmp	r2, r3
 8006236:	d107      	bne.n	8006248 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	491e      	ldr	r1, [pc, #120]	@ (80062bc <I2C_ITError+0x200>)
 8006244:	400a      	ands	r2, r1
 8006246:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624c:	0018      	movs	r0, r3
 800624e:	f7fe fe82 	bl	8004f56 <HAL_DMA_GetState>
 8006252:	0003      	movs	r3, r0
 8006254:	2b01      	cmp	r3, #1
 8006256:	d016      	beq.n	8006286 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	4a16      	ldr	r2, [pc, #88]	@ (80062b8 <I2C_ITError+0x1fc>)
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2240      	movs	r2, #64	@ 0x40
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	0018      	movs	r0, r3
 800626e:	f7fe fd7d 	bl	8004d6c <HAL_DMA_Abort_IT>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d013      	beq.n	800629e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006280:	0018      	movs	r0, r3
 8006282:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006284:	e00b      	b.n	800629e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f819 	bl	80062c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800628e:	e006      	b.n	800629e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 f814 	bl	80062c0 <I2C_TreatErrorCallback>
  }
}
 8006298:	e002      	b.n	80062a0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	e000      	b.n	80062a0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800629e:	46c0      	nop			@ (mov r8, r8)
}
 80062a0:	46c0      	nop			@ (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	ffff0000 	.word	0xffff0000
 80062ac:	08005985 	.word	0x08005985
 80062b0:	00008003 	.word	0x00008003
 80062b4:	ffffbfff 	.word	0xffffbfff
 80062b8:	08006357 	.word	0x08006357
 80062bc:	ffff7fff 	.word	0xffff7fff

080062c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2241      	movs	r2, #65	@ 0x41
 80062cc:	5c9b      	ldrb	r3, [r3, r2]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b60      	cmp	r3, #96	@ 0x60
 80062d2:	d10f      	bne.n	80062f4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2241      	movs	r2, #65	@ 0x41
 80062d8:	2120      	movs	r1, #32
 80062da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2240      	movs	r2, #64	@ 0x40
 80062e6:	2100      	movs	r1, #0
 80062e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff fb41 	bl	8005974 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062f2:	e00a      	b.n	800630a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2240      	movs	r2, #64	@ 0x40
 80062fe:	2100      	movs	r1, #0
 8006300:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f7ff fb2d 	bl	8005964 <HAL_I2C_ErrorCallback>
}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b002      	add	sp, #8
 8006310:	bd80      	pop	{r7, pc}

08006312 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	2202      	movs	r2, #2
 8006322:	4013      	ands	r3, r2
 8006324:	2b02      	cmp	r3, #2
 8006326:	d103      	bne.n	8006330 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2201      	movs	r2, #1
 8006338:	4013      	ands	r3, r2
 800633a:	2b01      	cmp	r3, #1
 800633c:	d007      	beq.n	800634e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2101      	movs	r1, #1
 800634a:	430a      	orrs	r2, r1
 800634c:	619a      	str	r2, [r3, #24]
  }
}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	46bd      	mov	sp, r7
 8006352:	b002      	add	sp, #8
 8006354:	bd80      	pop	{r7, pc}

08006356 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	2200      	movs	r2, #0
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	2200      	movs	r2, #0
 8006382:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0018      	movs	r0, r3
 8006388:	f7ff ff9a 	bl	80062c0 <I2C_TreatErrorCallback>
}
 800638c:	46c0      	nop			@ (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b004      	add	sp, #16
 8006392:	bd80      	pop	{r7, pc}

08006394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	1dfb      	adds	r3, r7, #7
 80063a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063a4:	e030      	b.n	8006408 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	d02d      	beq.n	8006408 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ac:	f7fe fb5a 	bl	8004a64 <HAL_GetTick>
 80063b0:	0002      	movs	r2, r0
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d302      	bcc.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d122      	bne.n	8006408 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	425a      	negs	r2, r3
 80063d2:	4153      	adcs	r3, r2
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	001a      	movs	r2, r3
 80063d8:	1dfb      	adds	r3, r7, #7
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d113      	bne.n	8006408 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e4:	2220      	movs	r2, #32
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2241      	movs	r2, #65	@ 0x41
 80063f0:	2120      	movs	r1, #32
 80063f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2242      	movs	r2, #66	@ 0x42
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2240      	movs	r2, #64	@ 0x40
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e00f      	b.n	8006428 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	425a      	negs	r2, r3
 8006418:	4153      	adcs	r3, r2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	001a      	movs	r2, r3
 800641e:	1dfb      	adds	r3, r7, #7
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d0bf      	beq.n	80063a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	b004      	add	sp, #16
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800643c:	e032      	b.n	80064a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 f8ff 	bl	8006648 <I2C_IsErrorOccurred>
 800644a:	1e03      	subs	r3, r0, #0
 800644c:	d001      	beq.n	8006452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e030      	b.n	80064b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3301      	adds	r3, #1
 8006456:	d025      	beq.n	80064a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006458:	f7fe fb04 	bl	8004a64 <HAL_GetTick>
 800645c:	0002      	movs	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11a      	bne.n	80064a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2202      	movs	r2, #2
 8006476:	4013      	ands	r3, r2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d013      	beq.n	80064a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006480:	2220      	movs	r2, #32
 8006482:	431a      	orrs	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2241      	movs	r2, #65	@ 0x41
 800648c:	2120      	movs	r1, #32
 800648e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2242      	movs	r2, #66	@ 0x42
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2240      	movs	r2, #64	@ 0x40
 800649c:	2100      	movs	r1, #0
 800649e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e007      	b.n	80064b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	2202      	movs	r2, #2
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d1c5      	bne.n	800643e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	0018      	movs	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b004      	add	sp, #16
 80064ba:	bd80      	pop	{r7, pc}

080064bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c8:	e02f      	b.n	800652a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 f8b9 	bl	8006648 <I2C_IsErrorOccurred>
 80064d6:	1e03      	subs	r3, r0, #0
 80064d8:	d001      	beq.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e02d      	b.n	800653a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fe fac1 	bl	8004a64 <HAL_GetTick>
 80064e2:	0002      	movs	r2, r0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d11a      	bne.n	800652a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	2220      	movs	r2, #32
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d013      	beq.n	800652a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006506:	2220      	movs	r2, #32
 8006508:	431a      	orrs	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2241      	movs	r2, #65	@ 0x41
 8006512:	2120      	movs	r1, #32
 8006514:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2242      	movs	r2, #66	@ 0x42
 800651a:	2100      	movs	r1, #0
 800651c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2240      	movs	r2, #64	@ 0x40
 8006522:	2100      	movs	r1, #0
 8006524:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e007      	b.n	800653a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2220      	movs	r2, #32
 8006532:	4013      	ands	r3, r2
 8006534:	2b20      	cmp	r3, #32
 8006536:	d1c8      	bne.n	80064ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	0018      	movs	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	b004      	add	sp, #16
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006550:	e06b      	b.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	0018      	movs	r0, r3
 800655a:	f000 f875 	bl	8006648 <I2C_IsErrorOccurred>
 800655e:	1e03      	subs	r3, r0, #0
 8006560:	d001      	beq.n	8006566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e069      	b.n	800663a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2220      	movs	r2, #32
 800656e:	4013      	ands	r3, r2
 8006570:	2b20      	cmp	r3, #32
 8006572:	d138      	bne.n	80065e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2204      	movs	r2, #4
 800657c:	4013      	ands	r3, r2
 800657e:	2b04      	cmp	r3, #4
 8006580:	d105      	bne.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e055      	b.n	800663a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2210      	movs	r2, #16
 8006596:	4013      	ands	r3, r2
 8006598:	2b10      	cmp	r3, #16
 800659a:	d107      	bne.n	80065ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2210      	movs	r2, #16
 80065a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2204      	movs	r2, #4
 80065a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80065aa:	e002      	b.n	80065b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2220      	movs	r2, #32
 80065b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	491f      	ldr	r1, [pc, #124]	@ (8006644 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80065c6:	400a      	ands	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2241      	movs	r2, #65	@ 0x41
 80065ce:	2120      	movs	r1, #32
 80065d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2242      	movs	r2, #66	@ 0x42
 80065d6:	2100      	movs	r1, #0
 80065d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2240      	movs	r2, #64	@ 0x40
 80065de:	2100      	movs	r1, #0
 80065e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e029      	b.n	800663a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e6:	f7fe fa3d 	bl	8004a64 <HAL_GetTick>
 80065ea:	0002      	movs	r2, r0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d116      	bne.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2204      	movs	r2, #4
 8006604:	4013      	ands	r3, r2
 8006606:	2b04      	cmp	r3, #4
 8006608:	d00f      	beq.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	2220      	movs	r2, #32
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2241      	movs	r2, #65	@ 0x41
 800661a:	2120      	movs	r1, #32
 800661c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2240      	movs	r2, #64	@ 0x40
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e007      	b.n	800663a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2204      	movs	r2, #4
 8006632:	4013      	ands	r3, r2
 8006634:	2b04      	cmp	r3, #4
 8006636:	d18c      	bne.n	8006552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	0018      	movs	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	b004      	add	sp, #16
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	fe00e800 	.word	0xfe00e800

08006648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006654:	2327      	movs	r3, #39	@ 0x27
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2210      	movs	r2, #16
 8006670:	4013      	ands	r3, r2
 8006672:	d100      	bne.n	8006676 <I2C_IsErrorOccurred+0x2e>
 8006674:	e079      	b.n	800676a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2210      	movs	r2, #16
 800667c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800667e:	e057      	b.n	8006730 <I2C_IsErrorOccurred+0xe8>
 8006680:	2227      	movs	r2, #39	@ 0x27
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	18ba      	adds	r2, r7, r2
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3301      	adds	r3, #1
 800668e:	d04f      	beq.n	8006730 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fe f9e8 	bl	8004a64 <HAL_GetTick>
 8006694:	0002      	movs	r2, r0
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <I2C_IsErrorOccurred+0x5e>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d144      	bne.n	8006730 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	01db      	lsls	r3, r3, #7
 80066b0:	4013      	ands	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066b4:	2013      	movs	r0, #19
 80066b6:	183b      	adds	r3, r7, r0
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	2142      	movs	r1, #66	@ 0x42
 80066bc:	5c52      	ldrb	r2, [r2, r1]
 80066be:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	2380      	movs	r3, #128	@ 0x80
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	401a      	ands	r2, r3
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d126      	bne.n	8006722 <I2C_IsErrorOccurred+0xda>
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	2380      	movs	r3, #128	@ 0x80
 80066d8:	01db      	lsls	r3, r3, #7
 80066da:	429a      	cmp	r2, r3
 80066dc:	d021      	beq.n	8006722 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80066de:	183b      	adds	r3, r7, r0
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d01d      	beq.n	8006722 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2180      	movs	r1, #128	@ 0x80
 80066f2:	01c9      	lsls	r1, r1, #7
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066f8:	f7fe f9b4 	bl	8004a64 <HAL_GetTick>
 80066fc:	0003      	movs	r3, r0
 80066fe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006700:	e00f      	b.n	8006722 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006702:	f7fe f9af 	bl	8004a64 <HAL_GetTick>
 8006706:	0002      	movs	r2, r0
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b19      	cmp	r3, #25
 800670e:	d908      	bls.n	8006722 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	2220      	movs	r2, #32
 8006714:	4313      	orrs	r3, r2
 8006716:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006718:	2327      	movs	r3, #39	@ 0x27
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]

              break;
 8006720:	e006      	b.n	8006730 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2220      	movs	r2, #32
 800672a:	4013      	ands	r3, r2
 800672c:	2b20      	cmp	r3, #32
 800672e:	d1e8      	bne.n	8006702 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2220      	movs	r2, #32
 8006738:	4013      	ands	r3, r2
 800673a:	2b20      	cmp	r3, #32
 800673c:	d004      	beq.n	8006748 <I2C_IsErrorOccurred+0x100>
 800673e:	2327      	movs	r3, #39	@ 0x27
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d09b      	beq.n	8006680 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006748:	2327      	movs	r3, #39	@ 0x27
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2220      	movs	r2, #32
 8006758:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	2204      	movs	r2, #4
 800675e:	4313      	orrs	r3, r2
 8006760:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006762:	2327      	movs	r3, #39	@ 0x27
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	2201      	movs	r2, #1
 8006768:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	2380      	movs	r3, #128	@ 0x80
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4013      	ands	r3, r2
 800677a:	d00c      	beq.n	8006796 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2201      	movs	r2, #1
 8006780:	4313      	orrs	r3, r2
 8006782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2280      	movs	r2, #128	@ 0x80
 800678a:	0052      	lsls	r2, r2, #1
 800678c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800678e:	2327      	movs	r3, #39	@ 0x27
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4013      	ands	r3, r2
 800679e:	d00c      	beq.n	80067ba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2208      	movs	r2, #8
 80067a4:	4313      	orrs	r3, r2
 80067a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2280      	movs	r2, #128	@ 0x80
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067b2:	2327      	movs	r3, #39	@ 0x27
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4013      	ands	r3, r2
 80067c2:	d00c      	beq.n	80067de <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	2202      	movs	r2, #2
 80067c8:	4313      	orrs	r3, r2
 80067ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2280      	movs	r2, #128	@ 0x80
 80067d2:	0092      	lsls	r2, r2, #2
 80067d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067d6:	2327      	movs	r3, #39	@ 0x27
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80067de:	2327      	movs	r3, #39	@ 0x27
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7ff fd91 	bl	8006312 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	490e      	ldr	r1, [pc, #56]	@ (8006834 <I2C_IsErrorOccurred+0x1ec>)
 80067fc:	400a      	ands	r2, r1
 80067fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	431a      	orrs	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2241      	movs	r2, #65	@ 0x41
 8006810:	2120      	movs	r1, #32
 8006812:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2242      	movs	r2, #66	@ 0x42
 8006818:	2100      	movs	r1, #0
 800681a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2240      	movs	r2, #64	@ 0x40
 8006820:	2100      	movs	r1, #0
 8006822:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006824:	2327      	movs	r3, #39	@ 0x27
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	781b      	ldrb	r3, [r3, #0]
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b00a      	add	sp, #40	@ 0x28
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	fe00e800 	.word	0xfe00e800

08006838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	0008      	movs	r0, r1
 8006842:	0011      	movs	r1, r2
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	240a      	movs	r4, #10
 8006848:	193b      	adds	r3, r7, r4
 800684a:	1c02      	adds	r2, r0, #0
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	2009      	movs	r0, #9
 8006850:	183b      	adds	r3, r7, r0
 8006852:	1c0a      	adds	r2, r1, #0
 8006854:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006856:	193b      	adds	r3, r7, r4
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	059b      	lsls	r3, r3, #22
 800685c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800685e:	183b      	adds	r3, r7, r0
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	0419      	lsls	r1, r3, #16
 8006864:	23ff      	movs	r3, #255	@ 0xff
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800686a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	4313      	orrs	r3, r2
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006882:	0d51      	lsrs	r1, r2, #21
 8006884:	2280      	movs	r2, #128	@ 0x80
 8006886:	00d2      	lsls	r2, r2, #3
 8006888:	400a      	ands	r2, r1
 800688a:	4907      	ldr	r1, [pc, #28]	@ (80068a8 <I2C_TransferConfig+0x70>)
 800688c:	430a      	orrs	r2, r1
 800688e:	43d2      	mvns	r2, r2
 8006890:	401a      	ands	r2, r3
 8006892:	0011      	movs	r1, r2
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b007      	add	sp, #28
 80068a4:	bd90      	pop	{r4, r7, pc}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	03ff63ff 	.word	0x03ff63ff

080068ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	000a      	movs	r2, r1
 80068b6:	1cbb      	adds	r3, r7, #2
 80068b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80068be:	1cbb      	adds	r3, r7, #2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	2201      	movs	r2, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	d010      	beq.n	80068ea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2242      	movs	r2, #66	@ 0x42
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2241      	movs	r2, #65	@ 0x41
 80068d4:	5c9b      	ldrb	r3, [r3, r2]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	001a      	movs	r2, r3
 80068da:	2328      	movs	r3, #40	@ 0x28
 80068dc:	4013      	ands	r3, r2
 80068de:	2b28      	cmp	r3, #40	@ 0x28
 80068e0:	d003      	beq.n	80068ea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22b0      	movs	r2, #176	@ 0xb0
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80068ea:	1cbb      	adds	r3, r7, #2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	2202      	movs	r2, #2
 80068f0:	4013      	ands	r3, r2
 80068f2:	d010      	beq.n	8006916 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2244      	movs	r2, #68	@ 0x44
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2241      	movs	r2, #65	@ 0x41
 8006900:	5c9b      	ldrb	r3, [r3, r2]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	001a      	movs	r2, r3
 8006906:	2328      	movs	r3, #40	@ 0x28
 8006908:	4013      	ands	r3, r2
 800690a:	2b28      	cmp	r3, #40	@ 0x28
 800690c:	d003      	beq.n	8006916 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	22b0      	movs	r2, #176	@ 0xb0
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006916:	1cbb      	adds	r3, r7, #2
 8006918:	2200      	movs	r2, #0
 800691a:	5e9b      	ldrsh	r3, [r3, r2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	da03      	bge.n	8006928 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	22b8      	movs	r2, #184	@ 0xb8
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006928:	1cbb      	adds	r3, r7, #2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	2b10      	cmp	r3, #16
 800692e:	d103      	bne.n	8006938 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2290      	movs	r2, #144	@ 0x90
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006938:	1cbb      	adds	r3, r7, #2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	2b20      	cmp	r3, #32
 800693e:	d103      	bne.n	8006948 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006948:	1cbb      	adds	r3, r7, #2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	2b40      	cmp	r3, #64	@ 0x40
 800694e:	d103      	bne.n	8006958 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	43d9      	mvns	r1, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	400a      	ands	r2, r1
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	46bd      	mov	sp, r7
 800696e:	b004      	add	sp, #16
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2241      	movs	r2, #65	@ 0x41
 8006982:	5c9b      	ldrb	r3, [r3, r2]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b20      	cmp	r3, #32
 8006988:	d138      	bne.n	80069fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2240      	movs	r2, #64	@ 0x40
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006994:	2302      	movs	r3, #2
 8006996:	e032      	b.n	80069fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2240      	movs	r2, #64	@ 0x40
 800699c:	2101      	movs	r1, #1
 800699e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2241      	movs	r2, #65	@ 0x41
 80069a4:	2124      	movs	r1, #36	@ 0x24
 80069a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2101      	movs	r1, #1
 80069b4:	438a      	bics	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4911      	ldr	r1, [pc, #68]	@ (8006a08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80069c4:	400a      	ands	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2101      	movs	r1, #1
 80069e4:	430a      	orrs	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2241      	movs	r2, #65	@ 0x41
 80069ec:	2120      	movs	r1, #32
 80069ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2240      	movs	r2, #64	@ 0x40
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	ffffefff 	.word	0xffffefff

08006a0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2241      	movs	r2, #65	@ 0x41
 8006a1a:	5c9b      	ldrb	r3, [r3, r2]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d139      	bne.n	8006a96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2240      	movs	r2, #64	@ 0x40
 8006a26:	5c9b      	ldrb	r3, [r3, r2]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e033      	b.n	8006a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2240      	movs	r2, #64	@ 0x40
 8006a34:	2101      	movs	r1, #1
 8006a36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2241      	movs	r2, #65	@ 0x41
 8006a3c:	2124      	movs	r1, #36	@ 0x24
 8006a3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	438a      	bics	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a11      	ldr	r2, [pc, #68]	@ (8006aa0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2241      	movs	r2, #65	@ 0x41
 8006a86:	2120      	movs	r1, #32
 8006a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2240      	movs	r2, #64	@ 0x40
 8006a8e:	2100      	movs	r1, #0
 8006a90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	fffff0ff 	.word	0xfffff0ff

08006aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa4:	b5b0      	push	{r4, r5, r7, lr}
 8006aa6:	b08a      	sub	sp, #40	@ 0x28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f000 fb5a 	bl	800716c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab8:	4bce      	ldr	r3, [pc, #824]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	220c      	movs	r2, #12
 8006abe:	4013      	ands	r3, r2
 8006ac0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ac2:	4bcc      	ldr	r3, [pc, #816]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	2380      	movs	r3, #128	@ 0x80
 8006ac8:	025b      	lsls	r3, r3, #9
 8006aca:	4013      	ands	r3, r2
 8006acc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d100      	bne.n	8006ada <HAL_RCC_OscConfig+0x36>
 8006ad8:	e07c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d007      	beq.n	8006af0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d111      	bne.n	8006b0a <HAL_RCC_OscConfig+0x66>
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	025b      	lsls	r3, r3, #9
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d10c      	bne.n	8006b0a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af0:	4bc0      	ldr	r3, [pc, #768]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	2380      	movs	r3, #128	@ 0x80
 8006af6:	029b      	lsls	r3, r3, #10
 8006af8:	4013      	ands	r3, r2
 8006afa:	d100      	bne.n	8006afe <HAL_RCC_OscConfig+0x5a>
 8006afc:	e069      	b.n	8006bd2 <HAL_RCC_OscConfig+0x12e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d165      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e330      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	2380      	movs	r3, #128	@ 0x80
 8006b10:	025b      	lsls	r3, r3, #9
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d107      	bne.n	8006b26 <HAL_RCC_OscConfig+0x82>
 8006b16:	4bb7      	ldr	r3, [pc, #732]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4bb6      	ldr	r3, [pc, #728]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b1c:	2180      	movs	r1, #128	@ 0x80
 8006b1e:	0249      	lsls	r1, r1, #9
 8006b20:	430a      	orrs	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e027      	b.n	8006b76 <HAL_RCC_OscConfig+0xd2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	23a0      	movs	r3, #160	@ 0xa0
 8006b2c:	02db      	lsls	r3, r3, #11
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d10e      	bne.n	8006b50 <HAL_RCC_OscConfig+0xac>
 8006b32:	4bb0      	ldr	r3, [pc, #704]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4baf      	ldr	r3, [pc, #700]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b38:	2180      	movs	r1, #128	@ 0x80
 8006b3a:	02c9      	lsls	r1, r1, #11
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	4bac      	ldr	r3, [pc, #688]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	4bab      	ldr	r3, [pc, #684]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b46:	2180      	movs	r1, #128	@ 0x80
 8006b48:	0249      	lsls	r1, r1, #9
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e012      	b.n	8006b76 <HAL_RCC_OscConfig+0xd2>
 8006b50:	4ba8      	ldr	r3, [pc, #672]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4ba7      	ldr	r3, [pc, #668]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b56:	49a8      	ldr	r1, [pc, #672]	@ (8006df8 <HAL_RCC_OscConfig+0x354>)
 8006b58:	400a      	ands	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	4ba5      	ldr	r3, [pc, #660]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	2380      	movs	r3, #128	@ 0x80
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	4013      	ands	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4ba2      	ldr	r3, [pc, #648]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4ba1      	ldr	r3, [pc, #644]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b70:	49a2      	ldr	r1, [pc, #648]	@ (8006dfc <HAL_RCC_OscConfig+0x358>)
 8006b72:	400a      	ands	r2, r1
 8006b74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d014      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7e:	f7fd ff71 	bl	8004a64 <HAL_GetTick>
 8006b82:	0003      	movs	r3, r0
 8006b84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fd ff6c 	bl	8004a64 <HAL_GetTick>
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	@ 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e2e8      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b9a:	4b96      	ldr	r3, [pc, #600]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	2380      	movs	r3, #128	@ 0x80
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0xe4>
 8006ba6:	e015      	b.n	8006bd4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fd ff5c 	bl	8004a64 <HAL_GetTick>
 8006bac:	0003      	movs	r3, r0
 8006bae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb2:	f7fd ff57 	bl	8004a64 <HAL_GetTick>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b64      	cmp	r3, #100	@ 0x64
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e2d3      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bc4:	4b8b      	ldr	r3, [pc, #556]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	029b      	lsls	r3, r3, #10
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x10e>
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d100      	bne.n	8006be0 <HAL_RCC_OscConfig+0x13c>
 8006bde:	e08b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	d13e      	bne.n	8006c70 <HAL_RCC_OscConfig+0x1cc>
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d13b      	bne.n	8006c70 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_RCC_OscConfig+0x168>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e2af      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0c:	4b79      	ldr	r3, [pc, #484]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a7b      	ldr	r2, [pc, #492]	@ (8006e00 <HAL_RCC_OscConfig+0x35c>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	021a      	lsls	r2, r3, #8
 8006c1c:	4b75      	ldr	r3, [pc, #468]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006c22:	4b74      	ldr	r3, [pc, #464]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2209      	movs	r2, #9
 8006c28:	4393      	bics	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	4b71      	ldr	r3, [pc, #452]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c34:	f000 fc6c 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 8006c38:	0001      	movs	r1, r0
 8006c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	091b      	lsrs	r3, r3, #4
 8006c40:	220f      	movs	r2, #15
 8006c42:	4013      	ands	r3, r2
 8006c44:	4a6f      	ldr	r2, [pc, #444]	@ (8006e04 <HAL_RCC_OscConfig+0x360>)
 8006c46:	5cd3      	ldrb	r3, [r2, r3]
 8006c48:	000a      	movs	r2, r1
 8006c4a:	40da      	lsrs	r2, r3
 8006c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8006e08 <HAL_RCC_OscConfig+0x364>)
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006c50:	4b6e      	ldr	r3, [pc, #440]	@ (8006e0c <HAL_RCC_OscConfig+0x368>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2513      	movs	r5, #19
 8006c56:	197c      	adds	r4, r7, r5
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7fd febd 	bl	80049d8 <HAL_InitTick>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006c62:	197b      	adds	r3, r7, r5
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d046      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8006c6a:	197b      	adds	r3, r7, r5
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	e27d      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d027      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006c76:	4b5f      	ldr	r3, [pc, #380]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2209      	movs	r2, #9
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	4b5c      	ldr	r3, [pc, #368]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c88:	f7fd feec 	bl	8004a64 <HAL_GetTick>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c92:	f7fd fee7 	bl	8004a64 <HAL_GetTick>
 8006c96:	0002      	movs	r2, r0
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e263      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ca4:	4b53      	ldr	r3, [pc, #332]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	4013      	ands	r3, r2
 8006cac:	d0f1      	beq.n	8006c92 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	4b51      	ldr	r3, [pc, #324]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4a53      	ldr	r2, [pc, #332]	@ (8006e00 <HAL_RCC_OscConfig+0x35c>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	021a      	lsls	r2, r3, #8
 8006cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	e018      	b.n	8006cf8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b4a      	ldr	r3, [pc, #296]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006ccc:	2101      	movs	r1, #1
 8006cce:	438a      	bics	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7fd fec7 	bl	8004a64 <HAL_GetTick>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cdc:	f7fd fec2 	bl	8004a64 <HAL_GetTick>
 8006ce0:	0002      	movs	r2, r0
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e23e      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cee:	4b41      	ldr	r3, [pc, #260]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d1f1      	bne.n	8006cdc <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d100      	bne.n	8006d04 <HAL_RCC_OscConfig+0x260>
 8006d02:	e0a1      	b.n	8006e48 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d140      	bne.n	8006d8c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	2380      	movs	r3, #128	@ 0x80
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4013      	ands	r3, r2
 8006d14:	d005      	beq.n	8006d22 <HAL_RCC_OscConfig+0x27e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e224      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d22:	4b34      	ldr	r3, [pc, #208]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a3a      	ldr	r2, [pc, #232]	@ (8006e10 <HAL_RCC_OscConfig+0x36c>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	4b30      	ldr	r3, [pc, #192]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d36:	4b2f      	ldr	r3, [pc, #188]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	0a19      	lsrs	r1, r3, #8
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	061a      	lsls	r2, r3, #24
 8006d44:	4b2b      	ldr	r3, [pc, #172]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	0b5b      	lsrs	r3, r3, #13
 8006d50:	3301      	adds	r3, #1
 8006d52:	2280      	movs	r2, #128	@ 0x80
 8006d54:	0212      	lsls	r2, r2, #8
 8006d56:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006d58:	4b26      	ldr	r3, [pc, #152]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	210f      	movs	r1, #15
 8006d60:	400b      	ands	r3, r1
 8006d62:	4928      	ldr	r1, [pc, #160]	@ (8006e04 <HAL_RCC_OscConfig+0x360>)
 8006d64:	5ccb      	ldrb	r3, [r1, r3]
 8006d66:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006d68:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <HAL_RCC_OscConfig+0x364>)
 8006d6a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006d6c:	4b27      	ldr	r3, [pc, #156]	@ (8006e0c <HAL_RCC_OscConfig+0x368>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2513      	movs	r5, #19
 8006d72:	197c      	adds	r4, r7, r5
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7fd fe2f 	bl	80049d8 <HAL_InitTick>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006d7e:	197b      	adds	r3, r7, r5
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d060      	beq.n	8006e48 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8006d86:	197b      	adds	r3, r7, r5
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	e1ef      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d03f      	beq.n	8006e14 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d94:	4b17      	ldr	r3, [pc, #92]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b16      	ldr	r3, [pc, #88]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006d9a:	2180      	movs	r1, #128	@ 0x80
 8006d9c:	0049      	lsls	r1, r1, #1
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da2:	f7fd fe5f 	bl	8004a64 <HAL_GetTick>
 8006da6:	0003      	movs	r3, r0
 8006da8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006dac:	f7fd fe5a 	bl	8004a64 <HAL_GetTick>
 8006db0:	0002      	movs	r2, r0
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e1d6      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	2380      	movs	r3, #128	@ 0x80
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dca:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <HAL_RCC_OscConfig+0x36c>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	0019      	movs	r1, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	4b06      	ldr	r3, [pc, #24]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	0a19      	lsrs	r1, r3, #8
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	061a      	lsls	r2, r3, #24
 8006dec:	4b01      	ldr	r3, [pc, #4]	@ (8006df4 <HAL_RCC_OscConfig+0x350>)
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	e029      	b.n	8006e48 <HAL_RCC_OscConfig+0x3a4>
 8006df4:	40021000 	.word	0x40021000
 8006df8:	fffeffff 	.word	0xfffeffff
 8006dfc:	fffbffff 	.word	0xfffbffff
 8006e00:	ffffe0ff 	.word	0xffffe0ff
 8006e04:	0800cd5c 	.word	0x0800cd5c
 8006e08:	20000000 	.word	0x20000000
 8006e0c:	20000004 	.word	0x20000004
 8006e10:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e14:	4bbe      	ldr	r3, [pc, #760]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4bbd      	ldr	r3, [pc, #756]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e1a:	49be      	ldr	r1, [pc, #760]	@ (8007114 <HAL_RCC_OscConfig+0x670>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fd fe20 	bl	8004a64 <HAL_GetTick>
 8006e24:	0003      	movs	r3, r0
 8006e26:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e2a:	f7fd fe1b 	bl	8004a64 <HAL_GetTick>
 8006e2e:	0002      	movs	r2, r0
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e197      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e3c:	4bb4      	ldr	r3, [pc, #720]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	2380      	movs	r3, #128	@ 0x80
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4013      	ands	r3, r2
 8006e46:	d1f0      	bne.n	8006e2a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d019      	beq.n	8006e8e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e5a:	4bad      	ldr	r3, [pc, #692]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e5e:	4bac      	ldr	r3, [pc, #688]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e60:	2101      	movs	r1, #1
 8006e62:	430a      	orrs	r2, r1
 8006e64:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e66:	f7fd fdfd 	bl	8004a64 <HAL_GetTick>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e70:	f7fd fdf8 	bl	8004a64 <HAL_GetTick>
 8006e74:	0002      	movs	r2, r0
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e174      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e82:	4ba3      	ldr	r3, [pc, #652]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e86:	2202      	movs	r2, #2
 8006e88:	4013      	ands	r3, r2
 8006e8a:	d0f1      	beq.n	8006e70 <HAL_RCC_OscConfig+0x3cc>
 8006e8c:	e018      	b.n	8006ec0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e8e:	4ba0      	ldr	r3, [pc, #640]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e92:	4b9f      	ldr	r3, [pc, #636]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006e94:	2101      	movs	r1, #1
 8006e96:	438a      	bics	r2, r1
 8006e98:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9a:	f7fd fde3 	bl	8004a64 <HAL_GetTick>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea4:	f7fd fdde 	bl	8004a64 <HAL_GetTick>
 8006ea8:	0002      	movs	r2, r0
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e15a      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eb6:	4b96      	ldr	r3, [pc, #600]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d1f1      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d100      	bne.n	8006ecc <HAL_RCC_OscConfig+0x428>
 8006eca:	e0ae      	b.n	800702a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ecc:	2027      	movs	r0, #39	@ 0x27
 8006ece:	183b      	adds	r3, r7, r0
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed8:	2380      	movs	r3, #128	@ 0x80
 8006eda:	055b      	lsls	r3, r3, #21
 8006edc:	4013      	ands	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee0:	4b8b      	ldr	r3, [pc, #556]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006ee6:	2180      	movs	r1, #128	@ 0x80
 8006ee8:	0549      	lsls	r1, r1, #21
 8006eea:	430a      	orrs	r2, r1
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006eee:	183b      	adds	r3, r7, r0
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef4:	4b88      	ldr	r3, [pc, #544]	@ (8007118 <HAL_RCC_OscConfig+0x674>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	4013      	ands	r3, r2
 8006efe:	d11a      	bne.n	8006f36 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f00:	4b85      	ldr	r3, [pc, #532]	@ (8007118 <HAL_RCC_OscConfig+0x674>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b84      	ldr	r3, [pc, #528]	@ (8007118 <HAL_RCC_OscConfig+0x674>)
 8006f06:	2180      	movs	r1, #128	@ 0x80
 8006f08:	0049      	lsls	r1, r1, #1
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f0e:	f7fd fda9 	bl	8004a64 <HAL_GetTick>
 8006f12:	0003      	movs	r3, r0
 8006f14:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f18:	f7fd fda4 	bl	8004a64 <HAL_GetTick>
 8006f1c:	0002      	movs	r2, r0
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b64      	cmp	r3, #100	@ 0x64
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e120      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007118 <HAL_RCC_OscConfig+0x674>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d107      	bne.n	8006f52 <HAL_RCC_OscConfig+0x4ae>
 8006f42:	4b73      	ldr	r3, [pc, #460]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f46:	4b72      	ldr	r3, [pc, #456]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f48:	2180      	movs	r1, #128	@ 0x80
 8006f4a:	0049      	lsls	r1, r1, #1
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f50:	e031      	b.n	8006fb6 <HAL_RCC_OscConfig+0x512>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCC_OscConfig+0x4d0>
 8006f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f60:	496c      	ldr	r1, [pc, #432]	@ (8007114 <HAL_RCC_OscConfig+0x670>)
 8006f62:	400a      	ands	r2, r1
 8006f64:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f6a:	4b69      	ldr	r3, [pc, #420]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f6c:	496b      	ldr	r1, [pc, #428]	@ (800711c <HAL_RCC_OscConfig+0x678>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f72:	e020      	b.n	8006fb6 <HAL_RCC_OscConfig+0x512>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	23a0      	movs	r3, #160	@ 0xa0
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d10e      	bne.n	8006f9e <HAL_RCC_OscConfig+0x4fa>
 8006f80:	4b63      	ldr	r3, [pc, #396]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f84:	4b62      	ldr	r3, [pc, #392]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f86:	2180      	movs	r1, #128	@ 0x80
 8006f88:	00c9      	lsls	r1, r1, #3
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f8e:	4b60      	ldr	r3, [pc, #384]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f92:	4b5f      	ldr	r3, [pc, #380]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006f94:	2180      	movs	r1, #128	@ 0x80
 8006f96:	0049      	lsls	r1, r1, #1
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f9c:	e00b      	b.n	8006fb6 <HAL_RCC_OscConfig+0x512>
 8006f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006fa4:	495b      	ldr	r1, [pc, #364]	@ (8007114 <HAL_RCC_OscConfig+0x670>)
 8006fa6:	400a      	ands	r2, r1
 8006fa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8006faa:	4b59      	ldr	r3, [pc, #356]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006fac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fae:	4b58      	ldr	r3, [pc, #352]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006fb0:	495a      	ldr	r1, [pc, #360]	@ (800711c <HAL_RCC_OscConfig+0x678>)
 8006fb2:	400a      	ands	r2, r1
 8006fb4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fbe:	f7fd fd51 	bl	8004a64 <HAL_GetTick>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fc6:	e009      	b.n	8006fdc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fc8:	f7fd fd4c 	bl	8004a64 <HAL_GetTick>
 8006fcc:	0002      	movs	r2, r0
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	4a53      	ldr	r2, [pc, #332]	@ (8007120 <HAL_RCC_OscConfig+0x67c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e0c7      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8006fde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d0ef      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x524>
 8006fe8:	e014      	b.n	8007014 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fea:	f7fd fd3b 	bl	8004a64 <HAL_GetTick>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ff2:	e009      	b.n	8007008 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ff4:	f7fd fd36 	bl	8004a64 <HAL_GetTick>
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	4a48      	ldr	r2, [pc, #288]	@ (8007120 <HAL_RCC_OscConfig+0x67c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e0b1      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007008:	4b41      	ldr	r3, [pc, #260]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 800700a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4013      	ands	r3, r2
 8007012:	d1ef      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007014:	2327      	movs	r3, #39	@ 0x27
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701e:	4b3c      	ldr	r3, [pc, #240]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007022:	4b3b      	ldr	r3, [pc, #236]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007024:	493f      	ldr	r1, [pc, #252]	@ (8007124 <HAL_RCC_OscConfig+0x680>)
 8007026:	400a      	ands	r2, r1
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d100      	bne.n	8007034 <HAL_RCC_OscConfig+0x590>
 8007032:	e09a      	b.n	800716a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2b0c      	cmp	r3, #12
 8007038:	d064      	beq.n	8007104 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	2b02      	cmp	r3, #2
 8007040:	d145      	bne.n	80070ce <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007042:	4b33      	ldr	r3, [pc, #204]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b32      	ldr	r3, [pc, #200]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007048:	4937      	ldr	r1, [pc, #220]	@ (8007128 <HAL_RCC_OscConfig+0x684>)
 800704a:	400a      	ands	r2, r1
 800704c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fd fd09 	bl	8004a64 <HAL_GetTick>
 8007052:	0003      	movs	r3, r0
 8007054:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007058:	f7fd fd04 	bl	8004a64 <HAL_GetTick>
 800705c:	0002      	movs	r2, r0
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e080      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800706a:	4b29      	ldr	r3, [pc, #164]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	2380      	movs	r3, #128	@ 0x80
 8007070:	049b      	lsls	r3, r3, #18
 8007072:	4013      	ands	r3, r2
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007076:	4b26      	ldr	r3, [pc, #152]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	4a2c      	ldr	r2, [pc, #176]	@ (800712c <HAL_RCC_OscConfig+0x688>)
 800707c:	4013      	ands	r3, r2
 800707e:	0019      	movs	r1, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	431a      	orrs	r2, r3
 8007090:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007092:	430a      	orrs	r2, r1
 8007094:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007096:	4b1e      	ldr	r3, [pc, #120]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	0449      	lsls	r1, r1, #17
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a4:	f7fd fcde 	bl	8004a64 <HAL_GetTick>
 80070a8:	0003      	movs	r3, r0
 80070aa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ae:	f7fd fcd9 	bl	8004a64 <HAL_GetTick>
 80070b2:	0002      	movs	r2, r0
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e055      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070c0:	4b13      	ldr	r3, [pc, #76]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	2380      	movs	r3, #128	@ 0x80
 80070c6:	049b      	lsls	r3, r3, #18
 80070c8:	4013      	ands	r3, r2
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x60a>
 80070cc:	e04d      	b.n	800716a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ce:	4b10      	ldr	r3, [pc, #64]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 80070d4:	4914      	ldr	r1, [pc, #80]	@ (8007128 <HAL_RCC_OscConfig+0x684>)
 80070d6:	400a      	ands	r2, r1
 80070d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070da:	f7fd fcc3 	bl	8004a64 <HAL_GetTick>
 80070de:	0003      	movs	r3, r0
 80070e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fd fcbe 	bl	8004a64 <HAL_GetTick>
 80070e8:	0002      	movs	r2, r0
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e03a      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <HAL_RCC_OscConfig+0x66c>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	2380      	movs	r3, #128	@ 0x80
 80070fc:	049b      	lsls	r3, r3, #18
 80070fe:	4013      	ands	r3, r2
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x640>
 8007102:	e032      	b.n	800716a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	2b01      	cmp	r3, #1
 800710a:	d111      	bne.n	8007130 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e02d      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
 8007110:	40021000 	.word	0x40021000
 8007114:	fffffeff 	.word	0xfffffeff
 8007118:	40007000 	.word	0x40007000
 800711c:	fffffbff 	.word	0xfffffbff
 8007120:	00001388 	.word	0x00001388
 8007124:	efffffff 	.word	0xefffffff
 8007128:	feffffff 	.word	0xfeffffff
 800712c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007130:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <HAL_RCC_OscConfig+0x6d0>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	025b      	lsls	r3, r3, #9
 800713c:	401a      	ands	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	429a      	cmp	r2, r3
 8007144:	d10f      	bne.n	8007166 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	23f0      	movs	r3, #240	@ 0xf0
 800714a:	039b      	lsls	r3, r3, #14
 800714c:	401a      	ands	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	429a      	cmp	r2, r3
 8007154:	d107      	bne.n	8007166 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	23c0      	movs	r3, #192	@ 0xc0
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	401a      	ands	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007162:	429a      	cmp	r2, r3
 8007164:	d001      	beq.n	800716a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	0018      	movs	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	b00a      	add	sp, #40	@ 0x28
 8007172:	bdb0      	pop	{r4, r5, r7, pc}
 8007174:	40021000 	.word	0x40021000

08007178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e128      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800718c:	4b96      	ldr	r3, [pc, #600]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2201      	movs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d91e      	bls.n	80071d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b93      	ldr	r3, [pc, #588]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	4393      	bics	r3, r2
 80071a2:	0019      	movs	r1, r3
 80071a4:	4b90      	ldr	r3, [pc, #576]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071ac:	f7fd fc5a 	bl	8004a64 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b4:	e009      	b.n	80071ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b6:	f7fd fc55 	bl	8004a64 <HAL_GetTick>
 80071ba:	0002      	movs	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	4a8a      	ldr	r2, [pc, #552]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e109      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b87      	ldr	r3, [pc, #540]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2201      	movs	r2, #1
 80071d0:	4013      	ands	r3, r2
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d1ee      	bne.n	80071b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2202      	movs	r2, #2
 80071de:	4013      	ands	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e2:	4b83      	ldr	r3, [pc, #524]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	22f0      	movs	r2, #240	@ 0xf0
 80071e8:	4393      	bics	r3, r2
 80071ea:	0019      	movs	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	4b7f      	ldr	r3, [pc, #508]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 80071f2:	430a      	orrs	r2, r1
 80071f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2201      	movs	r2, #1
 80071fc:	4013      	ands	r3, r2
 80071fe:	d100      	bne.n	8007202 <HAL_RCC_ClockConfig+0x8a>
 8007200:	e089      	b.n	8007316 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d107      	bne.n	800721a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800720a:	4b79      	ldr	r3, [pc, #484]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	029b      	lsls	r3, r3, #10
 8007212:	4013      	ands	r3, r2
 8007214:	d120      	bne.n	8007258 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e0e1      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d107      	bne.n	8007232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007222:	4b73      	ldr	r3, [pc, #460]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	049b      	lsls	r3, r3, #18
 800722a:	4013      	ands	r3, r2
 800722c:	d114      	bne.n	8007258 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e0d5      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d106      	bne.n	8007248 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723a:	4b6d      	ldr	r3, [pc, #436]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2204      	movs	r2, #4
 8007240:	4013      	ands	r3, r2
 8007242:	d109      	bne.n	8007258 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0ca      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007248:	4b69      	ldr	r3, [pc, #420]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	2380      	movs	r3, #128	@ 0x80
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4013      	ands	r3, r2
 8007252:	d101      	bne.n	8007258 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0c2      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007258:	4b65      	ldr	r3, [pc, #404]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2203      	movs	r2, #3
 800725e:	4393      	bics	r3, r2
 8007260:	0019      	movs	r1, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	4b62      	ldr	r3, [pc, #392]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 8007268:	430a      	orrs	r2, r1
 800726a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800726c:	f7fd fbfa 	bl	8004a64 <HAL_GetTick>
 8007270:	0003      	movs	r3, r0
 8007272:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d111      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800727c:	e009      	b.n	8007292 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800727e:	f7fd fbf1 	bl	8004a64 <HAL_GetTick>
 8007282:	0002      	movs	r2, r0
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	4a58      	ldr	r2, [pc, #352]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e0a5      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007292:	4b57      	ldr	r3, [pc, #348]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	220c      	movs	r2, #12
 8007298:	4013      	ands	r3, r2
 800729a:	2b08      	cmp	r3, #8
 800729c:	d1ef      	bne.n	800727e <HAL_RCC_ClockConfig+0x106>
 800729e:	e03a      	b.n	8007316 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d111      	bne.n	80072cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072a8:	e009      	b.n	80072be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072aa:	f7fd fbdb 	bl	8004a64 <HAL_GetTick>
 80072ae:	0002      	movs	r2, r0
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	4a4d      	ldr	r2, [pc, #308]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e08f      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072be:	4b4c      	ldr	r3, [pc, #304]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	220c      	movs	r2, #12
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b0c      	cmp	r3, #12
 80072c8:	d1ef      	bne.n	80072aa <HAL_RCC_ClockConfig+0x132>
 80072ca:	e024      	b.n	8007316 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d11b      	bne.n	800730c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072d4:	e009      	b.n	80072ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d6:	f7fd fbc5 	bl	8004a64 <HAL_GetTick>
 80072da:	0002      	movs	r2, r0
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	4a42      	ldr	r2, [pc, #264]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e079      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072ea:	4b41      	ldr	r3, [pc, #260]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	220c      	movs	r2, #12
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d1ef      	bne.n	80072d6 <HAL_RCC_ClockConfig+0x15e>
 80072f6:	e00e      	b.n	8007316 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f8:	f7fd fbb4 	bl	8004a64 <HAL_GetTick>
 80072fc:	0002      	movs	r2, r0
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	4a3a      	ldr	r2, [pc, #232]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e068      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800730c:	4b38      	ldr	r3, [pc, #224]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	220c      	movs	r2, #12
 8007312:	4013      	ands	r3, r2
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007316:	4b34      	ldr	r3, [pc, #208]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2201      	movs	r2, #1
 800731c:	4013      	ands	r3, r2
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d21e      	bcs.n	8007362 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007324:	4b30      	ldr	r3, [pc, #192]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2201      	movs	r2, #1
 800732a:	4393      	bics	r3, r2
 800732c:	0019      	movs	r1, r3
 800732e:	4b2e      	ldr	r3, [pc, #184]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007336:	f7fd fb95 	bl	8004a64 <HAL_GetTick>
 800733a:	0003      	movs	r3, r0
 800733c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	e009      	b.n	8007354 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007340:	f7fd fb90 	bl	8004a64 <HAL_GetTick>
 8007344:	0002      	movs	r2, r0
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	4a28      	ldr	r2, [pc, #160]	@ (80073ec <HAL_RCC_ClockConfig+0x274>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e044      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007354:	4b24      	ldr	r3, [pc, #144]	@ (80073e8 <HAL_RCC_ClockConfig+0x270>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2201      	movs	r2, #1
 800735a:	4013      	ands	r3, r2
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d1ee      	bne.n	8007340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2204      	movs	r2, #4
 8007368:	4013      	ands	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800736c:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4a20      	ldr	r2, [pc, #128]	@ (80073f4 <HAL_RCC_ClockConfig+0x27c>)
 8007372:	4013      	ands	r3, r2
 8007374:	0019      	movs	r1, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800737c:	430a      	orrs	r2, r1
 800737e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2208      	movs	r2, #8
 8007386:	4013      	ands	r3, r2
 8007388:	d00a      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800738a:	4b19      	ldr	r3, [pc, #100]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4a1a      	ldr	r2, [pc, #104]	@ (80073f8 <HAL_RCC_ClockConfig+0x280>)
 8007390:	4013      	ands	r3, r2
 8007392:	0019      	movs	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	00da      	lsls	r2, r3, #3
 800739a:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 800739c:	430a      	orrs	r2, r1
 800739e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073a0:	f000 f8b6 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 80073a4:	0001      	movs	r1, r0
 80073a6:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <HAL_RCC_ClockConfig+0x278>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	220f      	movs	r2, #15
 80073ae:	4013      	ands	r3, r2
 80073b0:	4a12      	ldr	r2, [pc, #72]	@ (80073fc <HAL_RCC_ClockConfig+0x284>)
 80073b2:	5cd3      	ldrb	r3, [r2, r3]
 80073b4:	000a      	movs	r2, r1
 80073b6:	40da      	lsrs	r2, r3
 80073b8:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <HAL_RCC_ClockConfig+0x288>)
 80073ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073bc:	4b11      	ldr	r3, [pc, #68]	@ (8007404 <HAL_RCC_ClockConfig+0x28c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	250b      	movs	r5, #11
 80073c2:	197c      	adds	r4, r7, r5
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7fd fb07 	bl	80049d8 <HAL_InitTick>
 80073ca:	0003      	movs	r3, r0
 80073cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80073ce:	197b      	adds	r3, r7, r5
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80073d6:	197b      	adds	r3, r7, r5
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	e000      	b.n	80073de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	0018      	movs	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b004      	add	sp, #16
 80073e4:	bdb0      	pop	{r4, r5, r7, pc}
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	40022000 	.word	0x40022000
 80073ec:	00001388 	.word	0x00001388
 80073f0:	40021000 	.word	0x40021000
 80073f4:	fffff8ff 	.word	0xfffff8ff
 80073f8:	ffffc7ff 	.word	0xffffc7ff
 80073fc:	0800cd5c 	.word	0x0800cd5c
 8007400:	20000000 	.word	0x20000000
 8007404:	20000004 	.word	0x20000004

08007408 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007408:	b590      	push	{r4, r7, lr}
 800740a:	b08d      	sub	sp, #52	@ 0x34
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8007414:	241c      	movs	r4, #28
 8007416:	193b      	adds	r3, r7, r4
 8007418:	0018      	movs	r0, r3
 800741a:	2314      	movs	r3, #20
 800741c:	001a      	movs	r2, r3
 800741e:	2100      	movs	r1, #0
 8007420:	f003 fac6 	bl	800a9b0 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8007424:	0020      	movs	r0, r4
 8007426:	183b      	adds	r3, r7, r0
 8007428:	2202      	movs	r2, #2
 800742a:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800742c:	183b      	adds	r3, r7, r0
 800742e:	2202      	movs	r2, #2
 8007430:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8007432:	183b      	adds	r3, r7, r0
 8007434:	2200      	movs	r2, #0
 8007436:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d11a      	bne.n	8007474 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800743e:	183b      	adds	r3, r7, r0
 8007440:	2280      	movs	r2, #128	@ 0x80
 8007442:	0052      	lsls	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8007446:	183b      	adds	r3, r7, r0
 8007448:	2200      	movs	r2, #0
 800744a:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800744c:	4b2d      	ldr	r3, [pc, #180]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 800744e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007450:	4b2c      	ldr	r3, [pc, #176]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 8007452:	2101      	movs	r1, #1
 8007454:	430a      	orrs	r2, r1
 8007456:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007458:	4b2a      	ldr	r3, [pc, #168]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	2201      	movs	r2, #1
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8007464:	183a      	adds	r2, r7, r0
 8007466:	23a0      	movs	r3, #160	@ 0xa0
 8007468:	05db      	lsls	r3, r3, #23
 800746a:	0011      	movs	r1, r2
 800746c:	0018      	movs	r0, r3
 800746e:	f7fd fd7f 	bl	8004f70 <HAL_GPIO_Init>
 8007472:	e038      	b.n	80074e6 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d11a      	bne.n	80074b0 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 800747a:	201c      	movs	r0, #28
 800747c:	183b      	adds	r3, r7, r0
 800747e:	2280      	movs	r2, #128	@ 0x80
 8007480:	0192      	lsls	r2, r2, #6
 8007482:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8007484:	183b      	adds	r3, r7, r0
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 800748a:	4b1e      	ldr	r3, [pc, #120]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 800748c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748e:	4b1d      	ldr	r3, [pc, #116]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 8007490:	2102      	movs	r1, #2
 8007492:	430a      	orrs	r2, r1
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007496:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	2202      	movs	r2, #2
 800749c:	4013      	ands	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80074a2:	183b      	adds	r3, r7, r0
 80074a4:	4a18      	ldr	r2, [pc, #96]	@ (8007508 <HAL_RCC_MCOConfig+0x100>)
 80074a6:	0019      	movs	r1, r3
 80074a8:	0010      	movs	r0, r2
 80074aa:	f7fd fd61 	bl	8004f70 <HAL_GPIO_Init>
 80074ae:	e01a      	b.n	80074e6 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80074b0:	201c      	movs	r0, #28
 80074b2:	183b      	adds	r3, r7, r0
 80074b4:	2280      	movs	r2, #128	@ 0x80
 80074b6:	0092      	lsls	r2, r2, #2
 80074b8:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80074ba:	183b      	adds	r3, r7, r0
 80074bc:	2200      	movs	r2, #0
 80074be:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80074c0:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 80074c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 80074c6:	2101      	movs	r1, #1
 80074c8:	430a      	orrs	r2, r1
 80074ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	2201      	movs	r2, #1
 80074d2:	4013      	ands	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80074d8:	183a      	adds	r2, r7, r0
 80074da:	23a0      	movs	r3, #160	@ 0xa0
 80074dc:	05db      	lsls	r3, r3, #23
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f7fd fd45 	bl	8004f70 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80074e6:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4a08      	ldr	r2, [pc, #32]	@ (800750c <HAL_RCC_MCOConfig+0x104>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	0019      	movs	r1, r3
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	4b03      	ldr	r3, [pc, #12]	@ (8007504 <HAL_RCC_MCOConfig+0xfc>)
 80074f8:	430a      	orrs	r2, r1
 80074fa:	60da      	str	r2, [r3, #12]
}
 80074fc:	46c0      	nop			@ (mov r8, r8)
 80074fe:	46bd      	mov	sp, r7
 8007500:	b00d      	add	sp, #52	@ 0x34
 8007502:	bd90      	pop	{r4, r7, pc}
 8007504:	40021000 	.word	0x40021000
 8007508:	50000400 	.word	0x50000400
 800750c:	80ffffff 	.word	0x80ffffff

08007510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007510:	b5b0      	push	{r4, r5, r7, lr}
 8007512:	b08e      	sub	sp, #56	@ 0x38
 8007514:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007516:	4b4c      	ldr	r3, [pc, #304]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x138>)
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800751c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800751e:	230c      	movs	r3, #12
 8007520:	4013      	ands	r3, r2
 8007522:	2b0c      	cmp	r3, #12
 8007524:	d014      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0x40>
 8007526:	d900      	bls.n	800752a <HAL_RCC_GetSysClockFreq+0x1a>
 8007528:	e07b      	b.n	8007622 <HAL_RCC_GetSysClockFreq+0x112>
 800752a:	2b04      	cmp	r3, #4
 800752c:	d002      	beq.n	8007534 <HAL_RCC_GetSysClockFreq+0x24>
 800752e:	2b08      	cmp	r3, #8
 8007530:	d00b      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x3a>
 8007532:	e076      	b.n	8007622 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007534:	4b44      	ldr	r3, [pc, #272]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x138>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2210      	movs	r2, #16
 800753a:	4013      	ands	r3, r2
 800753c:	d002      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800753e:	4b43      	ldr	r3, [pc, #268]	@ (800764c <HAL_RCC_GetSysClockFreq+0x13c>)
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007542:	e07c      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007544:	4b42      	ldr	r3, [pc, #264]	@ (8007650 <HAL_RCC_GetSysClockFreq+0x140>)
 8007546:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007548:	e079      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800754a:	4b42      	ldr	r3, [pc, #264]	@ (8007654 <HAL_RCC_GetSysClockFreq+0x144>)
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800754e:	e076      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	0c9a      	lsrs	r2, r3, #18
 8007554:	230f      	movs	r3, #15
 8007556:	401a      	ands	r2, r3
 8007558:	4b3f      	ldr	r3, [pc, #252]	@ (8007658 <HAL_RCC_GetSysClockFreq+0x148>)
 800755a:	5c9b      	ldrb	r3, [r3, r2]
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800755e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007560:	0d9a      	lsrs	r2, r3, #22
 8007562:	2303      	movs	r3, #3
 8007564:	4013      	ands	r3, r2
 8007566:	3301      	adds	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800756a:	4b37      	ldr	r3, [pc, #220]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x138>)
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	2380      	movs	r3, #128	@ 0x80
 8007570:	025b      	lsls	r3, r3, #9
 8007572:	4013      	ands	r3, r2
 8007574:	d01a      	beq.n	80075ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	4a35      	ldr	r2, [pc, #212]	@ (8007654 <HAL_RCC_GetSysClockFreq+0x144>)
 8007580:	2300      	movs	r3, #0
 8007582:	69b8      	ldr	r0, [r7, #24]
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	f7f8 ffe9 	bl	800055c <__aeabi_lmul>
 800758a:	0002      	movs	r2, r0
 800758c:	000b      	movs	r3, r1
 800758e:	0010      	movs	r0, r2
 8007590:	0019      	movs	r1, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f7f8 ffbd 	bl	800051c <__aeabi_uldivmod>
 80075a2:	0002      	movs	r2, r0
 80075a4:	000b      	movs	r3, r1
 80075a6:	0013      	movs	r3, r2
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075aa:	e037      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80075ac:	4b26      	ldr	r3, [pc, #152]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x138>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2210      	movs	r2, #16
 80075b2:	4013      	ands	r3, r2
 80075b4:	d01a      	beq.n	80075ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	4a23      	ldr	r2, [pc, #140]	@ (800764c <HAL_RCC_GetSysClockFreq+0x13c>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	68b8      	ldr	r0, [r7, #8]
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	f7f8 ffc9 	bl	800055c <__aeabi_lmul>
 80075ca:	0002      	movs	r2, r0
 80075cc:	000b      	movs	r3, r1
 80075ce:	0010      	movs	r0, r2
 80075d0:	0019      	movs	r1, r3
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f7f8 ff9d 	bl	800051c <__aeabi_uldivmod>
 80075e2:	0002      	movs	r2, r0
 80075e4:	000b      	movs	r3, r1
 80075e6:	0013      	movs	r3, r2
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ea:	e017      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80075ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ee:	0018      	movs	r0, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	0019      	movs	r1, r3
 80075f4:	4a16      	ldr	r2, [pc, #88]	@ (8007650 <HAL_RCC_GetSysClockFreq+0x140>)
 80075f6:	2300      	movs	r3, #0
 80075f8:	f7f8 ffb0 	bl	800055c <__aeabi_lmul>
 80075fc:	0002      	movs	r2, r0
 80075fe:	000b      	movs	r3, r1
 8007600:	0010      	movs	r0, r2
 8007602:	0019      	movs	r1, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	001c      	movs	r4, r3
 8007608:	2300      	movs	r3, #0
 800760a:	001d      	movs	r5, r3
 800760c:	0022      	movs	r2, r4
 800760e:	002b      	movs	r3, r5
 8007610:	f7f8 ff84 	bl	800051c <__aeabi_uldivmod>
 8007614:	0002      	movs	r2, r0
 8007616:	000b      	movs	r3, r1
 8007618:	0013      	movs	r3, r2
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007620:	e00d      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007622:	4b09      	ldr	r3, [pc, #36]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x138>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	0b5b      	lsrs	r3, r3, #13
 8007628:	2207      	movs	r2, #7
 800762a:	4013      	ands	r3, r2
 800762c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	3301      	adds	r3, #1
 8007632:	2280      	movs	r2, #128	@ 0x80
 8007634:	0212      	lsls	r2, r2, #8
 8007636:	409a      	lsls	r2, r3
 8007638:	0013      	movs	r3, r2
 800763a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800763c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b00e      	add	sp, #56	@ 0x38
 8007646:	bdb0      	pop	{r4, r5, r7, pc}
 8007648:	40021000 	.word	0x40021000
 800764c:	003d0900 	.word	0x003d0900
 8007650:	00f42400 	.word	0x00f42400
 8007654:	007a1200 	.word	0x007a1200
 8007658:	0800cd74 	.word	0x0800cd74

0800765c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007660:	4b02      	ldr	r3, [pc, #8]	@ (800766c <HAL_RCC_GetHCLKFreq+0x10>)
 8007662:	681b      	ldr	r3, [r3, #0]
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	20000000 	.word	0x20000000

08007670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007674:	f7ff fff2 	bl	800765c <HAL_RCC_GetHCLKFreq>
 8007678:	0001      	movs	r1, r0
 800767a:	4b06      	ldr	r3, [pc, #24]	@ (8007694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	2207      	movs	r2, #7
 8007682:	4013      	ands	r3, r2
 8007684:	4a04      	ldr	r2, [pc, #16]	@ (8007698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007686:	5cd3      	ldrb	r3, [r2, r3]
 8007688:	40d9      	lsrs	r1, r3
 800768a:	000b      	movs	r3, r1
}
 800768c:	0018      	movs	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	40021000 	.word	0x40021000
 8007698:	0800cd6c 	.word	0x0800cd6c

0800769c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076a0:	f7ff ffdc 	bl	800765c <HAL_RCC_GetHCLKFreq>
 80076a4:	0001      	movs	r1, r0
 80076a6:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	0adb      	lsrs	r3, r3, #11
 80076ac:	2207      	movs	r2, #7
 80076ae:	4013      	ands	r3, r2
 80076b0:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076b2:	5cd3      	ldrb	r3, [r2, r3]
 80076b4:	40d9      	lsrs	r1, r3
 80076b6:	000b      	movs	r3, r1
}
 80076b8:	0018      	movs	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	40021000 	.word	0x40021000
 80076c4:	0800cd6c 	.word	0x0800cd6c

080076c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80076d0:	2017      	movs	r0, #23
 80076d2:	183b      	adds	r3, r7, r0
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2220      	movs	r2, #32
 80076de:	4013      	ands	r3, r2
 80076e0:	d100      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80076e2:	e0c7      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076e4:	4b8b      	ldr	r3, [pc, #556]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80076e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	055b      	lsls	r3, r3, #21
 80076ec:	4013      	ands	r3, r2
 80076ee:	d109      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f0:	4b88      	ldr	r3, [pc, #544]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80076f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076f4:	4b87      	ldr	r3, [pc, #540]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	0549      	lsls	r1, r1, #21
 80076fa:	430a      	orrs	r2, r1
 80076fc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	2201      	movs	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007704:	4b84      	ldr	r3, [pc, #528]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	2380      	movs	r3, #128	@ 0x80
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4013      	ands	r3, r2
 800770e:	d11a      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007710:	4b81      	ldr	r3, [pc, #516]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4b80      	ldr	r3, [pc, #512]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007716:	2180      	movs	r1, #128	@ 0x80
 8007718:	0049      	lsls	r1, r1, #1
 800771a:	430a      	orrs	r2, r1
 800771c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800771e:	f7fd f9a1 	bl	8004a64 <HAL_GetTick>
 8007722:	0003      	movs	r3, r0
 8007724:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	e008      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007728:	f7fd f99c 	bl	8004a64 <HAL_GetTick>
 800772c:	0002      	movs	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	@ 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e0e8      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800773a:	4b77      	ldr	r3, [pc, #476]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	2380      	movs	r3, #128	@ 0x80
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	4013      	ands	r3, r2
 8007744:	d0f0      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007746:	4b73      	ldr	r3, [pc, #460]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	23c0      	movs	r3, #192	@ 0xc0
 800774c:	039b      	lsls	r3, r3, #14
 800774e:	4013      	ands	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	23c0      	movs	r3, #192	@ 0xc0
 8007758:	039b      	lsls	r3, r3, #14
 800775a:	4013      	ands	r3, r2
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	429a      	cmp	r2, r3
 8007760:	d013      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	23c0      	movs	r3, #192	@ 0xc0
 8007768:	029b      	lsls	r3, r3, #10
 800776a:	401a      	ands	r2, r3
 800776c:	23c0      	movs	r3, #192	@ 0xc0
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	429a      	cmp	r2, r3
 8007772:	d10a      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007774:	4b67      	ldr	r3, [pc, #412]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	401a      	ands	r2, r3
 800777e:	2380      	movs	r3, #128	@ 0x80
 8007780:	029b      	lsls	r3, r3, #10
 8007782:	429a      	cmp	r2, r3
 8007784:	d101      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e0c0      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800778a:	4b62      	ldr	r3, [pc, #392]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800778c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800778e:	23c0      	movs	r3, #192	@ 0xc0
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	4013      	ands	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d03b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	23c0      	movs	r3, #192	@ 0xc0
 80077a2:	029b      	lsls	r3, r3, #10
 80077a4:	4013      	ands	r3, r2
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d033      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2220      	movs	r2, #32
 80077b2:	4013      	ands	r3, r2
 80077b4:	d02e      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80077b6:	4b57      	ldr	r3, [pc, #348]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ba:	4a58      	ldr	r2, [pc, #352]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80077bc:	4013      	ands	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077c0:	4b54      	ldr	r3, [pc, #336]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077c4:	4b53      	ldr	r3, [pc, #332]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077c6:	2180      	movs	r1, #128	@ 0x80
 80077c8:	0309      	lsls	r1, r1, #12
 80077ca:	430a      	orrs	r2, r1
 80077cc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077ce:	4b51      	ldr	r3, [pc, #324]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077d2:	4b50      	ldr	r3, [pc, #320]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077d4:	4952      	ldr	r1, [pc, #328]	@ (8007920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077d6:	400a      	ands	r2, r1
 80077d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80077da:	4b4e      	ldr	r3, [pc, #312]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	2380      	movs	r3, #128	@ 0x80
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4013      	ands	r3, r2
 80077e8:	d014      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ea:	f7fd f93b 	bl	8004a64 <HAL_GetTick>
 80077ee:	0003      	movs	r3, r0
 80077f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f2:	e009      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f4:	f7fd f936 	bl	8004a64 <HAL_GetTick>
 80077f8:	0002      	movs	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	4a49      	ldr	r2, [pc, #292]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d901      	bls.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e081      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007808:	4b42      	ldr	r3, [pc, #264]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800780a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800780c:	2380      	movs	r3, #128	@ 0x80
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4013      	ands	r3, r2
 8007812:	d0ef      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2220      	movs	r2, #32
 800781a:	4013      	ands	r3, r2
 800781c:	d01f      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	23c0      	movs	r3, #192	@ 0xc0
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	401a      	ands	r2, r3
 8007828:	23c0      	movs	r3, #192	@ 0xc0
 800782a:	029b      	lsls	r3, r3, #10
 800782c:	429a      	cmp	r2, r3
 800782e:	d10c      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8007830:	4b38      	ldr	r3, [pc, #224]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a3c      	ldr	r2, [pc, #240]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007836:	4013      	ands	r3, r2
 8007838:	0019      	movs	r1, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	23c0      	movs	r3, #192	@ 0xc0
 8007840:	039b      	lsls	r3, r3, #14
 8007842:	401a      	ands	r2, r3
 8007844:	4b33      	ldr	r3, [pc, #204]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007846:	430a      	orrs	r2, r1
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	4b32      	ldr	r3, [pc, #200]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800784c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	23c0      	movs	r3, #192	@ 0xc0
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	401a      	ands	r2, r3
 8007858:	4b2e      	ldr	r3, [pc, #184]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800785a:	430a      	orrs	r2, r1
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800785e:	2317      	movs	r3, #23
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d105      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007868:	4b2a      	ldr	r3, [pc, #168]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800786a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800786c:	4b29      	ldr	r3, [pc, #164]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800786e:	492f      	ldr	r1, [pc, #188]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007870:	400a      	ands	r2, r1
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	4013      	ands	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800787e:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007882:	2203      	movs	r2, #3
 8007884:	4393      	bics	r3, r2
 8007886:	0019      	movs	r1, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	4b21      	ldr	r3, [pc, #132]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800788e:	430a      	orrs	r2, r1
 8007890:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2202      	movs	r2, #2
 8007898:	4013      	ands	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800789c:	4b1d      	ldr	r3, [pc, #116]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800789e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a0:	220c      	movs	r2, #12
 80078a2:	4393      	bics	r3, r2
 80078a4:	0019      	movs	r1, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078ac:	430a      	orrs	r2, r1
 80078ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2204      	movs	r2, #4
 80078b6:	4013      	ands	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078ba:	4b16      	ldr	r3, [pc, #88]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078be:	4a1c      	ldr	r2, [pc, #112]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	0019      	movs	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	4b12      	ldr	r3, [pc, #72]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078ca:	430a      	orrs	r2, r1
 80078cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2208      	movs	r2, #8
 80078d4:	4013      	ands	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078dc:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80078de:	4013      	ands	r3, r2
 80078e0:	0019      	movs	r1, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078e8:	430a      	orrs	r2, r1
 80078ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2280      	movs	r2, #128	@ 0x80
 80078f2:	4013      	ands	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80078f6:	4b07      	ldr	r3, [pc, #28]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	0019      	movs	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	4b03      	ldr	r3, [pc, #12]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007906:	430a      	orrs	r2, r1
 8007908:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	0018      	movs	r0, r3
 800790e:	46bd      	mov	sp, r7
 8007910:	b006      	add	sp, #24
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40021000 	.word	0x40021000
 8007918:	40007000 	.word	0x40007000
 800791c:	fffcffff 	.word	0xfffcffff
 8007920:	fff7ffff 	.word	0xfff7ffff
 8007924:	00001388 	.word	0x00001388
 8007928:	ffcfffff 	.word	0xffcfffff
 800792c:	efffffff 	.word	0xefffffff
 8007930:	fffff3ff 	.word	0xfffff3ff
 8007934:	ffffcfff 	.word	0xffffcfff
 8007938:	fff3ffff 	.word	0xfff3ffff

0800793c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e083      	b.n	8007a56 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	2382      	movs	r3, #130	@ 0x82
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	429a      	cmp	r2, r3
 8007960:	d009      	beq.n	8007976 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	61da      	str	r2, [r3, #28]
 8007968:	e005      	b.n	8007976 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2251      	movs	r2, #81	@ 0x51
 8007980:	5c9b      	ldrb	r3, [r3, r2]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2250      	movs	r2, #80	@ 0x50
 800798c:	2100      	movs	r1, #0
 800798e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	0018      	movs	r0, r3
 8007994:	f7fc fcfc 	bl	8004390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2251      	movs	r2, #81	@ 0x51
 800799c:	2102      	movs	r1, #2
 800799e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2140      	movs	r1, #64	@ 0x40
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	2382      	movs	r3, #130	@ 0x82
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	401a      	ands	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6899      	ldr	r1, [r3, #8]
 80079be:	2384      	movs	r3, #132	@ 0x84
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	400b      	ands	r3, r1
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68d9      	ldr	r1, [r3, #12]
 80079ca:	2380      	movs	r3, #128	@ 0x80
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	400b      	ands	r3, r1
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2102      	movs	r1, #2
 80079d8:	400b      	ands	r3, r1
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2101      	movs	r1, #1
 80079e2:	400b      	ands	r3, r1
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6999      	ldr	r1, [r3, #24]
 80079ea:	2380      	movs	r3, #128	@ 0x80
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	400b      	ands	r3, r1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	2138      	movs	r1, #56	@ 0x38
 80079f8:	400b      	ands	r3, r1
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	2180      	movs	r1, #128	@ 0x80
 8007a02:	400b      	ands	r3, r1
 8007a04:	431a      	orrs	r2, r3
 8007a06:	0011      	movs	r1, r2
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a0c:	2380      	movs	r3, #128	@ 0x80
 8007a0e:	019b      	lsls	r3, r3, #6
 8007a10:	401a      	ands	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	0c1b      	lsrs	r3, r3, #16
 8007a20:	2204      	movs	r2, #4
 8007a22:	4013      	ands	r3, r2
 8007a24:	0019      	movs	r1, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	401a      	ands	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4907      	ldr	r1, [pc, #28]	@ (8007a60 <HAL_SPI_Init+0x124>)
 8007a42:	400a      	ands	r2, r1
 8007a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2251      	movs	r2, #81	@ 0x51
 8007a50:	2101      	movs	r1, #1
 8007a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b002      	add	sp, #8
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	fffff7ff 	.word	0xfffff7ff

08007a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	@ 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	001a      	movs	r2, r3
 8007a72:	1cbb      	adds	r3, r7, #2
 8007a74:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a76:	2301      	movs	r3, #1
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a7a:	232b      	movs	r3, #43	@ 0x2b
 8007a7c:	18fb      	adds	r3, r7, r3
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2250      	movs	r2, #80	@ 0x50
 8007a86:	5c9b      	ldrb	r3, [r3, r2]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x2c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e1b0      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x38e>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2250      	movs	r2, #80	@ 0x50
 8007a94:	2101      	movs	r1, #1
 8007a96:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a98:	f7fc ffe4 	bl	8004a64 <HAL_GetTick>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007aa0:	2023      	movs	r0, #35	@ 0x23
 8007aa2:	183b      	adds	r3, r7, r0
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	2151      	movs	r1, #81	@ 0x51
 8007aa8:	5c52      	ldrb	r2, [r2, r1]
 8007aaa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ab2:	231a      	movs	r3, #26
 8007ab4:	18fb      	adds	r3, r7, r3
 8007ab6:	1cba      	adds	r2, r7, #2
 8007ab8:	8812      	ldrh	r2, [r2, #0]
 8007aba:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007abc:	183b      	adds	r3, r7, r0
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d011      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x84>
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	2382      	movs	r3, #130	@ 0x82
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d107      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x7a>
 8007ad6:	183b      	adds	r3, r7, r0
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d004      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007ade:	232b      	movs	r3, #43	@ 0x2b
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ae6:	e17d      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d006      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x98>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x98>
 8007af4:	1cbb      	adds	r3, r7, #2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007afc:	232b      	movs	r3, #43	@ 0x2b
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	2201      	movs	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b04:	e16e      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2251      	movs	r2, #81	@ 0x51
 8007b0a:	5c9b      	ldrb	r3, [r3, r2]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d003      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2251      	movs	r2, #81	@ 0x51
 8007b16:	2105      	movs	r1, #5
 8007b18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1cba      	adds	r2, r7, #2
 8007b2a:	8812      	ldrh	r2, [r2, #0]
 8007b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1cba      	adds	r2, r7, #2
 8007b32:	8812      	ldrh	r2, [r2, #0]
 8007b34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	1cba      	adds	r2, r7, #2
 8007b40:	8812      	ldrh	r2, [r2, #0]
 8007b42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1cba      	adds	r2, r7, #2
 8007b48:	8812      	ldrh	r2, [r2, #0]
 8007b4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2240      	movs	r2, #64	@ 0x40
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b40      	cmp	r3, #64	@ 0x40
 8007b64:	d007      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2140      	movs	r1, #64	@ 0x40
 8007b72:	430a      	orrs	r2, r1
 8007b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	2380      	movs	r3, #128	@ 0x80
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d000      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x120>
 8007b82:	e07f      	b.n	8007c84 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x134>
 8007b8c:	231a      	movs	r3, #26
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d000      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x134>
 8007b96:	e06a      	b.n	8007c6e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9c:	881a      	ldrh	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bbc:	e057      	b.n	8007c6e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d11b      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x1a0>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x1a0>
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d113      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	881a      	ldrh	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d119      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0x1e2>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d014      	beq.n	8007c46 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c26:	b292      	uxth	r2, r2
 8007c28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c42:	2301      	movs	r3, #1
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c46:	f7fc ff0d 	bl	8004a64 <HAL_GetTick>
 8007c4a:	0002      	movs	r2, r0
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d80b      	bhi.n	8007c6e <HAL_SPI_TransmitReceive+0x20a>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	3301      	adds	r3, #1
 8007c5a:	d008      	beq.n	8007c6e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8007c5c:	232b      	movs	r3, #43	@ 0x2b
 8007c5e:	18fb      	adds	r3, r7, r3
 8007c60:	2203      	movs	r2, #3
 8007c62:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2251      	movs	r2, #81	@ 0x51
 8007c68:	2101      	movs	r1, #1
 8007c6a:	5499      	strb	r1, [r3, r2]
        goto error;
 8007c6c:	e0ba      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1a2      	bne.n	8007bbe <HAL_SPI_TransmitReceive+0x15a>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d19d      	bne.n	8007bbe <HAL_SPI_TransmitReceive+0x15a>
 8007c82:	e083      	b.n	8007d8c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x234>
 8007c8c:	231a      	movs	r3, #26
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d000      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x234>
 8007c96:	e06f      	b.n	8007d78 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cbe:	e05b      	b.n	8007d78 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d11c      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x2a4>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x2a4>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d114      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d119      	bne.n	8007d4a <HAL_SPI_TransmitReceive+0x2e6>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d014      	beq.n	8007d4a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d46:	2301      	movs	r3, #1
 8007d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d4a:	f7fc fe8b 	bl	8004a64 <HAL_GetTick>
 8007d4e:	0002      	movs	r2, r0
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d802      	bhi.n	8007d60 <HAL_SPI_TransmitReceive+0x2fc>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x302>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d108      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8007d66:	232b      	movs	r3, #43	@ 0x2b
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2251      	movs	r2, #81	@ 0x51
 8007d72:	2101      	movs	r1, #1
 8007d74:	5499      	strb	r1, [r3, r2]
        goto error;
 8007d76:	e035      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d19e      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x25c>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d199      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 f8c0 	bl	8007f18 <SPI_EndRxTxTransaction>
 8007d98:	1e03      	subs	r3, r0, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8007d9c:	232b      	movs	r3, #43	@ 0x2b
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007daa:	e01b      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8007dd2:	232b      	movs	r3, #43	@ 0x2b
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e003      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2251      	movs	r2, #81	@ 0x51
 8007de0:	2101      	movs	r1, #1
 8007de2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2250      	movs	r2, #80	@ 0x50
 8007de8:	2100      	movs	r1, #0
 8007dea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007dec:	232b      	movs	r3, #43	@ 0x2b
 8007dee:	18fb      	adds	r3, r7, r3
 8007df0:	781b      	ldrb	r3, [r3, #0]
}
 8007df2:	0018      	movs	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b00c      	add	sp, #48	@ 0x30
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	1dfb      	adds	r3, r7, #7
 8007e0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e0c:	f7fc fe2a 	bl	8004a64 <HAL_GetTick>
 8007e10:	0002      	movs	r2, r0
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	18d3      	adds	r3, r2, r3
 8007e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e1c:	f7fc fe22 	bl	8004a64 <HAL_GetTick>
 8007e20:	0003      	movs	r3, r0
 8007e22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e24:	4b3a      	ldr	r3, [pc, #232]	@ (8007f10 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	015b      	lsls	r3, r3, #5
 8007e2a:	0d1b      	lsrs	r3, r3, #20
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	4353      	muls	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e32:	e058      	b.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	3301      	adds	r3, #1
 8007e38:	d055      	beq.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e3a:	f7fc fe13 	bl	8004a64 <HAL_GetTick>
 8007e3e:	0002      	movs	r2, r0
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d902      	bls.n	8007e50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d142      	bne.n	8007ed6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	21e0      	movs	r1, #224	@ 0xe0
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	2382      	movs	r3, #130	@ 0x82
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d113      	bne.n	8007e94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d005      	beq.n	8007e84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	2380      	movs	r3, #128	@ 0x80
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d107      	bne.n	8007e94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2140      	movs	r1, #64	@ 0x40
 8007e90:	438a      	bics	r2, r1
 8007e92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e98:	2380      	movs	r3, #128	@ 0x80
 8007e9a:	019b      	lsls	r3, r3, #6
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d110      	bne.n	8007ec2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	491a      	ldr	r1, [pc, #104]	@ (8007f14 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007eac:	400a      	ands	r2, r1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2180      	movs	r1, #128	@ 0x80
 8007ebc:	0189      	lsls	r1, r1, #6
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2251      	movs	r2, #81	@ 0x51
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2250      	movs	r2, #80	@ 0x50
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e017      	b.n	8007f06 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	425a      	negs	r2, r3
 8007ef6:	4153      	adcs	r3, r2
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	001a      	movs	r2, r3
 8007efc:	1dfb      	adds	r3, r7, #7
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d197      	bne.n	8007e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b008      	add	sp, #32
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	20000000 	.word	0x20000000
 8007f14:	ffffdfff 	.word	0xffffdfff

08007f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f24:	4b1d      	ldr	r3, [pc, #116]	@ (8007f9c <SPI_EndRxTxTransaction+0x84>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	491d      	ldr	r1, [pc, #116]	@ (8007fa0 <SPI_EndRxTxTransaction+0x88>)
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f7f8 f908 	bl	8000140 <__udivsi3>
 8007f30:	0003      	movs	r3, r0
 8007f32:	001a      	movs	r2, r3
 8007f34:	0013      	movs	r3, r2
 8007f36:	015b      	lsls	r3, r3, #5
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	2382      	movs	r3, #130	@ 0x82
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d112      	bne.n	8007f74 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	0013      	movs	r3, r2
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2180      	movs	r1, #128	@ 0x80
 8007f5c:	f7ff ff4e 	bl	8007dfc <SPI_WaitFlagStateUntilTimeout>
 8007f60:	1e03      	subs	r3, r0, #0
 8007f62:	d016      	beq.n	8007f92 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	2220      	movs	r2, #32
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e00f      	b.n	8007f94 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2280      	movs	r2, #128	@ 0x80
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b80      	cmp	r3, #128	@ 0x80
 8007f8c:	d0f2      	beq.n	8007f74 <SPI_EndRxTxTransaction+0x5c>
 8007f8e:	e000      	b.n	8007f92 <SPI_EndRxTxTransaction+0x7a>
        break;
 8007f90:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	0018      	movs	r0, r3
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b006      	add	sp, #24
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000000 	.word	0x20000000
 8007fa0:	016e3600 	.word	0x016e3600

08007fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e032      	b.n	800801c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2239      	movs	r2, #57	@ 0x39
 8007fba:	5c9b      	ldrb	r3, [r3, r2]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d107      	bne.n	8007fd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2238      	movs	r2, #56	@ 0x38
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f7fc fa23 	bl	8004418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2239      	movs	r2, #57	@ 0x39
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	0010      	movs	r0, r2
 8007fe6:	f000 fe23 	bl	8008c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	223e      	movs	r2, #62	@ 0x3e
 8007fee:	2101      	movs	r1, #1
 8007ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	223a      	movs	r2, #58	@ 0x3a
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	5499      	strb	r1, [r3, r2]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	223b      	movs	r2, #59	@ 0x3b
 8007ffe:	2101      	movs	r1, #1
 8008000:	5499      	strb	r1, [r3, r2]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	223c      	movs	r2, #60	@ 0x3c
 8008006:	2101      	movs	r1, #1
 8008008:	5499      	strb	r1, [r3, r2]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	223d      	movs	r2, #61	@ 0x3d
 800800e:	2101      	movs	r1, #1
 8008010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2239      	movs	r2, #57	@ 0x39
 8008016:	2101      	movs	r1, #1
 8008018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	0018      	movs	r0, r3
 800801e:	46bd      	mov	sp, r7
 8008020:	b002      	add	sp, #8
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2239      	movs	r2, #57	@ 0x39
 8008030:	5c9b      	ldrb	r3, [r3, r2]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e036      	b.n	80080aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2239      	movs	r2, #57	@ 0x39
 8008040:	2102      	movs	r1, #2
 8008042:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2101      	movs	r1, #1
 8008050:	430a      	orrs	r2, r1
 8008052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	2380      	movs	r3, #128	@ 0x80
 800805a:	05db      	lsls	r3, r3, #23
 800805c:	429a      	cmp	r2, r3
 800805e:	d009      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x50>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a13      	ldr	r2, [pc, #76]	@ (80080b4 <HAL_TIM_Base_Start_IT+0x90>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d004      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x50>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a12      	ldr	r2, [pc, #72]	@ (80080b8 <HAL_TIM_Base_Start_IT+0x94>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d111      	bne.n	8008098 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2207      	movs	r2, #7
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b06      	cmp	r3, #6
 8008084:	d010      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2101      	movs	r1, #1
 8008092:	430a      	orrs	r2, r1
 8008094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	e007      	b.n	80080a8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2101      	movs	r1, #1
 80080a4:	430a      	orrs	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	0018      	movs	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b004      	add	sp, #16
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	40010800 	.word	0x40010800
 80080b8:	40011400 	.word	0x40011400

080080bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2101      	movs	r1, #1
 80080d0:	438a      	bics	r2, r1
 80080d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	4a0a      	ldr	r2, [pc, #40]	@ (8008104 <HAL_TIM_Base_Stop_IT+0x48>)
 80080dc:	4013      	ands	r3, r2
 80080de:	d107      	bne.n	80080f0 <HAL_TIM_Base_Stop_IT+0x34>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2101      	movs	r1, #1
 80080ec:	438a      	bics	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2239      	movs	r2, #57	@ 0x39
 80080f4:	2101      	movs	r1, #1
 80080f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	0018      	movs	r0, r3
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b002      	add	sp, #8
 8008100:	bd80      	pop	{r7, pc}
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	00001111 	.word	0x00001111

08008108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e032      	b.n	8008180 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2239      	movs	r2, #57	@ 0x39
 800811e:	5c9b      	ldrb	r3, [r3, r2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d107      	bne.n	8008136 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2238      	movs	r2, #56	@ 0x38
 800812a:	2100      	movs	r1, #0
 800812c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	0018      	movs	r0, r3
 8008132:	f000 f829 	bl	8008188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2239      	movs	r2, #57	@ 0x39
 800813a:	2102      	movs	r1, #2
 800813c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3304      	adds	r3, #4
 8008146:	0019      	movs	r1, r3
 8008148:	0010      	movs	r0, r2
 800814a:	f000 fd71 	bl	8008c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	223e      	movs	r2, #62	@ 0x3e
 8008152:	2101      	movs	r1, #1
 8008154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	223a      	movs	r2, #58	@ 0x3a
 800815a:	2101      	movs	r1, #1
 800815c:	5499      	strb	r1, [r3, r2]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	223b      	movs	r2, #59	@ 0x3b
 8008162:	2101      	movs	r1, #1
 8008164:	5499      	strb	r1, [r3, r2]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	223c      	movs	r2, #60	@ 0x3c
 800816a:	2101      	movs	r1, #1
 800816c:	5499      	strb	r1, [r3, r2]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	223d      	movs	r2, #61	@ 0x3d
 8008172:	2101      	movs	r1, #1
 8008174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2239      	movs	r2, #57	@ 0x39
 800817a:	2101      	movs	r1, #1
 800817c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	0018      	movs	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	b002      	add	sp, #8
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008190:	46c0      	nop			@ (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d108      	bne.n	80081ba <HAL_TIM_PWM_Start+0x22>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	223a      	movs	r2, #58	@ 0x3a
 80081ac:	5c9b      	ldrb	r3, [r3, r2]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	1e5a      	subs	r2, r3, #1
 80081b4:	4193      	sbcs	r3, r2
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	e01f      	b.n	80081fa <HAL_TIM_PWM_Start+0x62>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d108      	bne.n	80081d2 <HAL_TIM_PWM_Start+0x3a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	223b      	movs	r2, #59	@ 0x3b
 80081c4:	5c9b      	ldrb	r3, [r3, r2]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	3b01      	subs	r3, #1
 80081ca:	1e5a      	subs	r2, r3, #1
 80081cc:	4193      	sbcs	r3, r2
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	e013      	b.n	80081fa <HAL_TIM_PWM_Start+0x62>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d108      	bne.n	80081ea <HAL_TIM_PWM_Start+0x52>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	223c      	movs	r2, #60	@ 0x3c
 80081dc:	5c9b      	ldrb	r3, [r3, r2]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	1e5a      	subs	r2, r3, #1
 80081e4:	4193      	sbcs	r3, r2
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	e007      	b.n	80081fa <HAL_TIM_PWM_Start+0x62>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	223d      	movs	r2, #61	@ 0x3d
 80081ee:	5c9b      	ldrb	r3, [r3, r2]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	4193      	sbcs	r3, r2
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e04d      	b.n	800829e <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0x7a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	223a      	movs	r2, #58	@ 0x3a
 800820c:	2102      	movs	r1, #2
 800820e:	5499      	strb	r1, [r3, r2]
 8008210:	e013      	b.n	800823a <HAL_TIM_PWM_Start+0xa2>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0x8a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	223b      	movs	r2, #59	@ 0x3b
 800821c:	2102      	movs	r1, #2
 800821e:	5499      	strb	r1, [r3, r2]
 8008220:	e00b      	b.n	800823a <HAL_TIM_PWM_Start+0xa2>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0x9a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	223c      	movs	r2, #60	@ 0x3c
 800822c:	2102      	movs	r1, #2
 800822e:	5499      	strb	r1, [r3, r2]
 8008230:	e003      	b.n	800823a <HAL_TIM_PWM_Start+0xa2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	223d      	movs	r2, #61	@ 0x3d
 8008236:	2102      	movs	r1, #2
 8008238:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	2201      	movs	r2, #1
 8008242:	0018      	movs	r0, r3
 8008244:	f001 f804 	bl	8009250 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	2380      	movs	r3, #128	@ 0x80
 800824e:	05db      	lsls	r3, r3, #23
 8008250:	429a      	cmp	r2, r3
 8008252:	d009      	beq.n	8008268 <HAL_TIM_PWM_Start+0xd0>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a13      	ldr	r2, [pc, #76]	@ (80082a8 <HAL_TIM_PWM_Start+0x110>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIM_PWM_Start+0xd0>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a12      	ldr	r2, [pc, #72]	@ (80082ac <HAL_TIM_PWM_Start+0x114>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d111      	bne.n	800828c <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2207      	movs	r2, #7
 8008270:	4013      	ands	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b06      	cmp	r3, #6
 8008278:	d010      	beq.n	800829c <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2101      	movs	r1, #1
 8008286:	430a      	orrs	r2, r1
 8008288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828a:	e007      	b.n	800829c <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2101      	movs	r1, #1
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b004      	add	sp, #16
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	40010800 	.word	0x40010800
 80082ac:	40011400 	.word	0x40011400

080082b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	2200      	movs	r2, #0
 80082c2:	0018      	movs	r0, r3
 80082c4:	f000 ffc4 	bl	8009250 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	4a16      	ldr	r2, [pc, #88]	@ (8008328 <HAL_TIM_PWM_Stop+0x78>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	d107      	bne.n	80082e4 <HAL_TIM_PWM_Stop+0x34>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2101      	movs	r1, #1
 80082e0:	438a      	bics	r2, r1
 80082e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <HAL_TIM_PWM_Stop+0x44>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	223a      	movs	r2, #58	@ 0x3a
 80082ee:	2101      	movs	r1, #1
 80082f0:	5499      	strb	r1, [r3, r2]
 80082f2:	e013      	b.n	800831c <HAL_TIM_PWM_Stop+0x6c>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_PWM_Stop+0x54>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	223b      	movs	r2, #59	@ 0x3b
 80082fe:	2101      	movs	r1, #1
 8008300:	5499      	strb	r1, [r3, r2]
 8008302:	e00b      	b.n	800831c <HAL_TIM_PWM_Stop+0x6c>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b08      	cmp	r3, #8
 8008308:	d104      	bne.n	8008314 <HAL_TIM_PWM_Stop+0x64>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	223c      	movs	r2, #60	@ 0x3c
 800830e:	2101      	movs	r1, #1
 8008310:	5499      	strb	r1, [r3, r2]
 8008312:	e003      	b.n	800831c <HAL_TIM_PWM_Stop+0x6c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	223d      	movs	r2, #61	@ 0x3d
 8008318:	2101      	movs	r1, #1
 800831a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	0018      	movs	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	b002      	add	sp, #8
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	00001111 	.word	0x00001111

0800832c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e032      	b.n	80083a4 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2239      	movs	r2, #57	@ 0x39
 8008342:	5c9b      	ldrb	r3, [r3, r2]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2238      	movs	r2, #56	@ 0x38
 800834e:	2100      	movs	r1, #0
 8008350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	0018      	movs	r0, r3
 8008356:	f000 f829 	bl	80083ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2239      	movs	r2, #57	@ 0x39
 800835e:	2102      	movs	r1, #2
 8008360:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3304      	adds	r3, #4
 800836a:	0019      	movs	r1, r3
 800836c:	0010      	movs	r0, r2
 800836e:	f000 fc5f 	bl	8008c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	223e      	movs	r2, #62	@ 0x3e
 8008376:	2101      	movs	r1, #1
 8008378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	223a      	movs	r2, #58	@ 0x3a
 800837e:	2101      	movs	r1, #1
 8008380:	5499      	strb	r1, [r3, r2]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	223b      	movs	r2, #59	@ 0x3b
 8008386:	2101      	movs	r1, #1
 8008388:	5499      	strb	r1, [r3, r2]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	223c      	movs	r2, #60	@ 0x3c
 800838e:	2101      	movs	r1, #1
 8008390:	5499      	strb	r1, [r3, r2]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	223d      	movs	r2, #61	@ 0x3d
 8008396:	2101      	movs	r1, #1
 8008398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2239      	movs	r2, #57	@ 0x39
 800839e:	2101      	movs	r1, #1
 80083a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b002      	add	sp, #8
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80083b4:	46c0      	nop			@ (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b002      	add	sp, #8
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083c6:	230f      	movs	r3, #15
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <HAL_TIM_IC_Start_IT+0x22>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	223a      	movs	r2, #58	@ 0x3a
 80083d8:	5c9b      	ldrb	r3, [r3, r2]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	e013      	b.n	8008406 <HAL_TIM_IC_Start_IT+0x4a>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d104      	bne.n	80083ee <HAL_TIM_IC_Start_IT+0x32>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	223b      	movs	r2, #59	@ 0x3b
 80083e8:	5c9b      	ldrb	r3, [r3, r2]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	e00b      	b.n	8008406 <HAL_TIM_IC_Start_IT+0x4a>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d104      	bne.n	80083fe <HAL_TIM_IC_Start_IT+0x42>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	223c      	movs	r2, #60	@ 0x3c
 80083f8:	5c9b      	ldrb	r3, [r3, r2]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	e003      	b.n	8008406 <HAL_TIM_IC_Start_IT+0x4a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	223d      	movs	r2, #61	@ 0x3d
 8008402:	5c9b      	ldrb	r3, [r3, r2]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	210e      	movs	r1, #14
 8008408:	187a      	adds	r2, r7, r1
 800840a:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800840c:	187b      	adds	r3, r7, r1
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e090      	b.n	800853a <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <HAL_TIM_IC_Start_IT+0x6c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	223a      	movs	r2, #58	@ 0x3a
 8008422:	2102      	movs	r1, #2
 8008424:	5499      	strb	r1, [r3, r2]
 8008426:	e013      	b.n	8008450 <HAL_TIM_IC_Start_IT+0x94>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b04      	cmp	r3, #4
 800842c:	d104      	bne.n	8008438 <HAL_TIM_IC_Start_IT+0x7c>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	223b      	movs	r2, #59	@ 0x3b
 8008432:	2102      	movs	r1, #2
 8008434:	5499      	strb	r1, [r3, r2]
 8008436:	e00b      	b.n	8008450 <HAL_TIM_IC_Start_IT+0x94>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b08      	cmp	r3, #8
 800843c:	d104      	bne.n	8008448 <HAL_TIM_IC_Start_IT+0x8c>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	223c      	movs	r2, #60	@ 0x3c
 8008442:	2102      	movs	r1, #2
 8008444:	5499      	strb	r1, [r3, r2]
 8008446:	e003      	b.n	8008450 <HAL_TIM_IC_Start_IT+0x94>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	223d      	movs	r2, #61	@ 0x3d
 800844c:	2102      	movs	r1, #2
 800844e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d02a      	beq.n	80084ac <HAL_TIM_IC_Start_IT+0xf0>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b0c      	cmp	r3, #12
 800845a:	d830      	bhi.n	80084be <HAL_TIM_IC_Start_IT+0x102>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b08      	cmp	r3, #8
 8008460:	d01b      	beq.n	800849a <HAL_TIM_IC_Start_IT+0xde>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d82a      	bhi.n	80084be <HAL_TIM_IC_Start_IT+0x102>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_TIM_IC_Start_IT+0xba>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b04      	cmp	r3, #4
 8008472:	d009      	beq.n	8008488 <HAL_TIM_IC_Start_IT+0xcc>
 8008474:	e023      	b.n	80084be <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2102      	movs	r1, #2
 8008482:	430a      	orrs	r2, r1
 8008484:	60da      	str	r2, [r3, #12]
      break;
 8008486:	e01f      	b.n	80084c8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2104      	movs	r1, #4
 8008494:	430a      	orrs	r2, r1
 8008496:	60da      	str	r2, [r3, #12]
      break;
 8008498:	e016      	b.n	80084c8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2108      	movs	r1, #8
 80084a6:	430a      	orrs	r2, r1
 80084a8:	60da      	str	r2, [r3, #12]
      break;
 80084aa:	e00d      	b.n	80084c8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2110      	movs	r1, #16
 80084b8:	430a      	orrs	r2, r1
 80084ba:	60da      	str	r2, [r3, #12]
      break;
 80084bc:	e004      	b.n	80084c8 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 80084be:	230f      	movs	r3, #15
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	2201      	movs	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
      break;
 80084c6:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80084c8:	230f      	movs	r3, #15
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d130      	bne.n	8008534 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	2201      	movs	r2, #1
 80084da:	0018      	movs	r0, r3
 80084dc:	f000 feb8 	bl	8009250 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	05db      	lsls	r3, r3, #23
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d009      	beq.n	8008500 <HAL_TIM_IC_Start_IT+0x144>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a14      	ldr	r2, [pc, #80]	@ (8008544 <HAL_TIM_IC_Start_IT+0x188>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIM_IC_Start_IT+0x144>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a13      	ldr	r2, [pc, #76]	@ (8008548 <HAL_TIM_IC_Start_IT+0x18c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d111      	bne.n	8008524 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2207      	movs	r2, #7
 8008508:	4013      	ands	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b06      	cmp	r3, #6
 8008510:	d010      	beq.n	8008534 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2101      	movs	r1, #1
 800851e:	430a      	orrs	r2, r1
 8008520:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008522:	e007      	b.n	8008534 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2101      	movs	r1, #1
 8008530:	430a      	orrs	r2, r1
 8008532:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008534:	230f      	movs	r3, #15
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	781b      	ldrb	r3, [r3, #0]
}
 800853a:	0018      	movs	r0, r3
 800853c:	46bd      	mov	sp, r7
 800853e:	b004      	add	sp, #16
 8008540:	bd80      	pop	{r7, pc}
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	40010800 	.word	0x40010800
 8008548:	40011400 	.word	0x40011400

0800854c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2202      	movs	r2, #2
 800855c:	4013      	ands	r3, r2
 800855e:	2b02      	cmp	r3, #2
 8008560:	d124      	bne.n	80085ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2202      	movs	r2, #2
 800856a:	4013      	ands	r3, r2
 800856c:	2b02      	cmp	r3, #2
 800856e:	d11d      	bne.n	80085ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2203      	movs	r2, #3
 8008576:	4252      	negs	r2, r2
 8008578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	2203      	movs	r2, #3
 8008588:	4013      	ands	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	0018      	movs	r0, r3
 8008590:	f7fa fce4 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8008594:	e007      	b.n	80085a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	0018      	movs	r0, r3
 800859a:	f000 fb31 	bl	8008c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 fb35 	bl	8008c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2204      	movs	r2, #4
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d125      	bne.n	8008606 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2204      	movs	r2, #4
 80085c2:	4013      	ands	r3, r2
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d11e      	bne.n	8008606 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2205      	movs	r2, #5
 80085ce:	4252      	negs	r2, r2
 80085d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	23c0      	movs	r3, #192	@ 0xc0
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4013      	ands	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	0018      	movs	r0, r3
 80085ea:	f7fa fcb7 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 80085ee:	e007      	b.n	8008600 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	0018      	movs	r0, r3
 80085f4:	f000 fb04 	bl	8008c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	0018      	movs	r0, r3
 80085fc:	f000 fb08 	bl	8008c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2208      	movs	r2, #8
 800860e:	4013      	ands	r3, r2
 8008610:	2b08      	cmp	r3, #8
 8008612:	d124      	bne.n	800865e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	2208      	movs	r2, #8
 800861c:	4013      	ands	r3, r2
 800861e:	2b08      	cmp	r3, #8
 8008620:	d11d      	bne.n	800865e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2209      	movs	r2, #9
 8008628:	4252      	negs	r2, r2
 800862a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2204      	movs	r2, #4
 8008630:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	2203      	movs	r2, #3
 800863a:	4013      	ands	r3, r2
 800863c:	d004      	beq.n	8008648 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	0018      	movs	r0, r3
 8008642:	f7fa fc8b 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8008646:	e007      	b.n	8008658 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	0018      	movs	r0, r3
 800864c:	f000 fad8 	bl	8008c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	0018      	movs	r0, r3
 8008654:	f000 fadc 	bl	8008c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2210      	movs	r2, #16
 8008666:	4013      	ands	r3, r2
 8008668:	2b10      	cmp	r3, #16
 800866a:	d125      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2210      	movs	r2, #16
 8008674:	4013      	ands	r3, r2
 8008676:	2b10      	cmp	r3, #16
 8008678:	d11e      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2211      	movs	r2, #17
 8008680:	4252      	negs	r2, r2
 8008682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2208      	movs	r2, #8
 8008688:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	23c0      	movs	r3, #192	@ 0xc0
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4013      	ands	r3, r2
 8008696:	d004      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	0018      	movs	r0, r3
 800869c:	f7fa fc5e 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 80086a0:	e007      	b.n	80086b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	0018      	movs	r0, r3
 80086a6:	f000 faab 	bl	8008c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f000 faaf 	bl	8008c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2201      	movs	r2, #1
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10f      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d108      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2202      	movs	r2, #2
 80086da:	4252      	negs	r2, r2
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fa fc5f 	bl	8002fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2240      	movs	r2, #64	@ 0x40
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b40      	cmp	r3, #64	@ 0x40
 80086f2:	d10f      	bne.n	8008714 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2240      	movs	r2, #64	@ 0x40
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b40      	cmp	r3, #64	@ 0x40
 8008700:	d108      	bne.n	8008714 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2241      	movs	r2, #65	@ 0x41
 8008708:	4252      	negs	r2, r2
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	0018      	movs	r0, r3
 8008710:	f000 fa86 	bl	8008c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008714:	46c0      	nop			@ (mov r8, r8)
 8008716:	46bd      	mov	sp, r7
 8008718:	b002      	add	sp, #8
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008728:	2317      	movs	r3, #23
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2238      	movs	r2, #56	@ 0x38
 8008734:	5c9b      	ldrb	r3, [r3, r2]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_TIM_IC_ConfigChannel+0x22>
 800873a:	2302      	movs	r3, #2
 800873c:	e08c      	b.n	8008858 <HAL_TIM_IC_ConfigChannel+0x13c>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2238      	movs	r2, #56	@ 0x38
 8008742:	2101      	movs	r1, #1
 8008744:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11b      	bne.n	8008784 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800875c:	f000 fbc0 	bl	8008ee0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	210c      	movs	r1, #12
 800876c:	438a      	bics	r2, r1
 800876e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6999      	ldr	r1, [r3, #24]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	619a      	str	r2, [r3, #24]
 8008782:	e062      	b.n	800884a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d11c      	bne.n	80087c4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800879a:	f000 fc25 	bl	8008fe8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	492d      	ldr	r1, [pc, #180]	@ (8008860 <HAL_TIM_IC_ConfigChannel+0x144>)
 80087aa:	400a      	ands	r2, r1
 80087ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6999      	ldr	r1, [r3, #24]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	021a      	lsls	r2, r3, #8
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	619a      	str	r2, [r3, #24]
 80087c2:	e042      	b.n	800884a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b08      	cmp	r3, #8
 80087c8:	d11b      	bne.n	8008802 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80087da:	f000 fc79 	bl	80090d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69da      	ldr	r2, [r3, #28]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	210c      	movs	r1, #12
 80087ea:	438a      	bics	r2, r1
 80087ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69d9      	ldr	r1, [r3, #28]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	61da      	str	r2, [r3, #28]
 8008800:	e023      	b.n	800884a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d11c      	bne.n	8008842 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008818:	f000 fc9a 	bl	8009150 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	490e      	ldr	r1, [pc, #56]	@ (8008860 <HAL_TIM_IC_ConfigChannel+0x144>)
 8008828:	400a      	ands	r2, r1
 800882a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69d9      	ldr	r1, [r3, #28]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	021a      	lsls	r2, r3, #8
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	61da      	str	r2, [r3, #28]
 8008840:	e003      	b.n	800884a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8008842:	2317      	movs	r3, #23
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	2201      	movs	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2238      	movs	r2, #56	@ 0x38
 800884e:	2100      	movs	r1, #0
 8008850:	5499      	strb	r1, [r3, r2]

  return status;
 8008852:	2317      	movs	r3, #23
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	781b      	ldrb	r3, [r3, #0]
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	b006      	add	sp, #24
 800885e:	bd80      	pop	{r7, pc}
 8008860:	fffff3ff 	.word	0xfffff3ff

08008864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008870:	2317      	movs	r3, #23
 8008872:	18fb      	adds	r3, r7, r3
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2238      	movs	r2, #56	@ 0x38
 800887c:	5c9b      	ldrb	r3, [r3, r2]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008882:	2302      	movs	r3, #2
 8008884:	e0ad      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2238      	movs	r2, #56	@ 0x38
 800888a:	2101      	movs	r1, #1
 800888c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b0c      	cmp	r3, #12
 8008892:	d100      	bne.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008894:	e076      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x120>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b0c      	cmp	r3, #12
 800889a:	d900      	bls.n	800889e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800889c:	e095      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x166>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d04e      	beq.n	8008942 <HAL_TIM_PWM_ConfigChannel+0xde>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d900      	bls.n	80088ac <HAL_TIM_PWM_ConfigChannel+0x48>
 80088aa:	e08e      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x166>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x56>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d021      	beq.n	80088fc <HAL_TIM_PWM_ConfigChannel+0x98>
 80088b8:	e087      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0011      	movs	r1, r2
 80088c2:	0018      	movs	r0, r3
 80088c4:	f000 fa08 	bl	8008cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2108      	movs	r1, #8
 80088d4:	430a      	orrs	r2, r1
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2104      	movs	r1, #4
 80088e4:	438a      	bics	r2, r1
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	619a      	str	r2, [r3, #24]
      break;
 80088fa:	e06b      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	0011      	movs	r1, r2
 8008904:	0018      	movs	r0, r3
 8008906:	f000 fa23 	bl	8008d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	699a      	ldr	r2, [r3, #24]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2180      	movs	r1, #128	@ 0x80
 8008916:	0109      	lsls	r1, r1, #4
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4931      	ldr	r1, [pc, #196]	@ (80089ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008928:	400a      	ands	r2, r1
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	619a      	str	r2, [r3, #24]
      break;
 8008940:	e048      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	0011      	movs	r1, r2
 800894a:	0018      	movs	r0, r3
 800894c:	f000 fa42 	bl	8008dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2108      	movs	r1, #8
 800895c:	430a      	orrs	r2, r1
 800895e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69da      	ldr	r2, [r3, #28]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2104      	movs	r1, #4
 800896c:	438a      	bics	r2, r1
 800896e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69d9      	ldr	r1, [r3, #28]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	61da      	str	r2, [r3, #28]
      break;
 8008982:	e027      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	0011      	movs	r1, r2
 800898c:	0018      	movs	r0, r3
 800898e:	f000 fa61 	bl	8008e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2180      	movs	r1, #128	@ 0x80
 800899e:	0109      	lsls	r1, r1, #4
 80089a0:	430a      	orrs	r2, r1
 80089a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69da      	ldr	r2, [r3, #28]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	490f      	ldr	r1, [pc, #60]	@ (80089ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69d9      	ldr	r1, [r3, #28]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	61da      	str	r2, [r3, #28]
      break;
 80089c8:	e004      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80089ca:	2317      	movs	r3, #23
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
      break;
 80089d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2238      	movs	r2, #56	@ 0x38
 80089d8:	2100      	movs	r1, #0
 80089da:	5499      	strb	r1, [r3, r2]

  return status;
 80089dc:	2317      	movs	r3, #23
 80089de:	18fb      	adds	r3, r7, r3
 80089e0:	781b      	ldrb	r3, [r3, #0]
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b006      	add	sp, #24
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	fffffbff 	.word	0xfffffbff

080089f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089fa:	230f      	movs	r3, #15
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2238      	movs	r2, #56	@ 0x38
 8008a06:	5c9b      	ldrb	r3, [r3, r2]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_ConfigClockSource+0x20>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e0bc      	b.n	8008b8a <HAL_TIM_ConfigClockSource+0x19a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2238      	movs	r2, #56	@ 0x38
 8008a14:	2101      	movs	r1, #1
 8008a16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2239      	movs	r2, #57	@ 0x39
 8008a1c:	2102      	movs	r1, #2
 8008a1e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2277      	movs	r2, #119	@ 0x77
 8008a2c:	4393      	bics	r3, r2
 8008a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4a58      	ldr	r2, [pc, #352]	@ (8008b94 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2280      	movs	r2, #128	@ 0x80
 8008a46:	0192      	lsls	r2, r2, #6
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d040      	beq.n	8008ace <HAL_TIM_ConfigClockSource+0xde>
 8008a4c:	2280      	movs	r2, #128	@ 0x80
 8008a4e:	0192      	lsls	r2, r2, #6
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d900      	bls.n	8008a56 <HAL_TIM_ConfigClockSource+0x66>
 8008a54:	e088      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a56:	2280      	movs	r2, #128	@ 0x80
 8008a58:	0152      	lsls	r2, r2, #5
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d100      	bne.n	8008a60 <HAL_TIM_ConfigClockSource+0x70>
 8008a5e:	e088      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x182>
 8008a60:	2280      	movs	r2, #128	@ 0x80
 8008a62:	0152      	lsls	r2, r2, #5
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d900      	bls.n	8008a6a <HAL_TIM_ConfigClockSource+0x7a>
 8008a68:	e07e      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a6a:	2b70      	cmp	r3, #112	@ 0x70
 8008a6c:	d018      	beq.n	8008aa0 <HAL_TIM_ConfigClockSource+0xb0>
 8008a6e:	d900      	bls.n	8008a72 <HAL_TIM_ConfigClockSource+0x82>
 8008a70:	e07a      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a72:	2b60      	cmp	r3, #96	@ 0x60
 8008a74:	d04f      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x126>
 8008a76:	d900      	bls.n	8008a7a <HAL_TIM_ConfigClockSource+0x8a>
 8008a78:	e076      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a7a:	2b50      	cmp	r3, #80	@ 0x50
 8008a7c:	d03b      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x106>
 8008a7e:	d900      	bls.n	8008a82 <HAL_TIM_ConfigClockSource+0x92>
 8008a80:	e072      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a82:	2b40      	cmp	r3, #64	@ 0x40
 8008a84:	d057      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x146>
 8008a86:	d900      	bls.n	8008a8a <HAL_TIM_ConfigClockSource+0x9a>
 8008a88:	e06e      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a8a:	2b30      	cmp	r3, #48	@ 0x30
 8008a8c:	d063      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x166>
 8008a8e:	d86b      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d060      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x166>
 8008a94:	d868      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d05d      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x166>
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d05b      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x166>
 8008a9e:	e063      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ab0:	f000 fbae 	bl	8009210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2277      	movs	r2, #119	@ 0x77
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	609a      	str	r2, [r3, #8]
      break;
 8008acc:	e052      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ade:	f000 fb97 	bl	8009210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2180      	movs	r1, #128	@ 0x80
 8008aee:	01c9      	lsls	r1, r1, #7
 8008af0:	430a      	orrs	r2, r1
 8008af2:	609a      	str	r2, [r3, #8]
      break;
 8008af4:	e03e      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b02:	001a      	movs	r2, r3
 8008b04:	f000 fa42 	bl	8008f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2150      	movs	r1, #80	@ 0x50
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f000 fb64 	bl	80091dc <TIM_ITRx_SetConfig>
      break;
 8008b14:	e02e      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b22:	001a      	movs	r2, r3
 8008b24:	f000 faa2 	bl	800906c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2160      	movs	r1, #96	@ 0x60
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f000 fb54 	bl	80091dc <TIM_ITRx_SetConfig>
      break;
 8008b34:	e01e      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b42:	001a      	movs	r2, r3
 8008b44:	f000 fa22 	bl	8008f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2140      	movs	r1, #64	@ 0x40
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f000 fb44 	bl	80091dc <TIM_ITRx_SetConfig>
      break;
 8008b54:	e00e      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	0019      	movs	r1, r3
 8008b60:	0010      	movs	r0, r2
 8008b62:	f000 fb3b 	bl	80091dc <TIM_ITRx_SetConfig>
      break;
 8008b66:	e005      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008b68:	230f      	movs	r3, #15
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]
      break;
 8008b70:	e000      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008b72:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2239      	movs	r2, #57	@ 0x39
 8008b78:	2101      	movs	r1, #1
 8008b7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2238      	movs	r2, #56	@ 0x38
 8008b80:	2100      	movs	r1, #0
 8008b82:	5499      	strb	r1, [r3, r2]

  return status;
 8008b84:	230f      	movs	r3, #15
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	781b      	ldrb	r3, [r3, #0]
}
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	b004      	add	sp, #16
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	46c0      	nop			@ (mov r8, r8)
 8008b94:	ffff00ff 	.word	0xffff00ff

08008b98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b0c      	cmp	r3, #12
 8008baa:	d01e      	beq.n	8008bea <HAL_TIM_ReadCapturedValue+0x52>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b0c      	cmp	r3, #12
 8008bb0:	d820      	bhi.n	8008bf4 <HAL_TIM_ReadCapturedValue+0x5c>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d013      	beq.n	8008be0 <HAL_TIM_ReadCapturedValue+0x48>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d81a      	bhi.n	8008bf4 <HAL_TIM_ReadCapturedValue+0x5c>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_TIM_ReadCapturedValue+0x34>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d005      	beq.n	8008bd6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8008bca:	e013      	b.n	8008bf4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd2:	60fb      	str	r3, [r7, #12]
      break;
 8008bd4:	e00f      	b.n	8008bf6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bdc:	60fb      	str	r3, [r7, #12]
      break;
 8008bde:	e00a      	b.n	8008bf6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be6:	60fb      	str	r3, [r7, #12]
      break;
 8008be8:	e005      	b.n	8008bf6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf0:	60fb      	str	r3, [r7, #12]
      break;
 8008bf2:	e000      	b.n	8008bf6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8008bf4:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b004      	add	sp, #16
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c08:	46c0      	nop			@ (mov r8, r8)
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	b002      	add	sp, #8
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c18:	46c0      	nop			@ (mov r8, r8)
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	b002      	add	sp, #8
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c28:	46c0      	nop			@ (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	2380      	movs	r3, #128	@ 0x80
 8008c44:	05db      	lsls	r3, r3, #23
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d007      	beq.n	8008c5a <TIM_Base_SetConfig+0x2a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8008ccc <TIM_Base_SetConfig+0x9c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d003      	beq.n	8008c5a <TIM_Base_SetConfig+0x2a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd0 <TIM_Base_SetConfig+0xa0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d108      	bne.n	8008c6c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2270      	movs	r2, #112	@ 0x70
 8008c5e:	4393      	bics	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	2380      	movs	r3, #128	@ 0x80
 8008c70:	05db      	lsls	r3, r3, #23
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d007      	beq.n	8008c86 <TIM_Base_SetConfig+0x56>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a14      	ldr	r2, [pc, #80]	@ (8008ccc <TIM_Base_SetConfig+0x9c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_Base_SetConfig+0x56>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a13      	ldr	r2, [pc, #76]	@ (8008cd0 <TIM_Base_SetConfig+0xa0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d108      	bne.n	8008c98 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a12      	ldr	r2, [pc, #72]	@ (8008cd4 <TIM_Base_SetConfig+0xa4>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2280      	movs	r2, #128	@ 0x80
 8008c9c:	4393      	bics	r3, r2
 8008c9e:	001a      	movs	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	615a      	str	r2, [r3, #20]
}
 8008cc4:	46c0      	nop			@ (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b004      	add	sp, #16
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40010800 	.word	0x40010800
 8008cd0:	40011400 	.word	0x40011400
 8008cd4:	fffffcff 	.word	0xfffffcff

08008cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4393      	bics	r3, r2
 8008cea:	001a      	movs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2270      	movs	r2, #112	@ 0x70
 8008d06:	4393      	bics	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	4393      	bics	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4393      	bics	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	621a      	str	r2, [r3, #32]
}
 8008d48:	46c0      	nop			@ (mov r8, r8)
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	b006      	add	sp, #24
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	4393      	bics	r3, r2
 8008d62:	001a      	movs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4a13      	ldr	r2, [pc, #76]	@ (8008dcc <TIM_OC2_SetConfig+0x7c>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a12      	ldr	r2, [pc, #72]	@ (8008dd0 <TIM_OC2_SetConfig+0x80>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	4393      	bics	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	46c0      	nop			@ (mov r8, r8)
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b006      	add	sp, #24
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	ffff8fff 	.word	0xffff8fff
 8008dd0:	fffffcff 	.word	0xfffffcff

08008dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	4a1a      	ldr	r2, [pc, #104]	@ (8008e4c <TIM_OC3_SetConfig+0x78>)
 8008de4:	401a      	ands	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2270      	movs	r2, #112	@ 0x70
 8008e00:	4393      	bics	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2203      	movs	r2, #3
 8008e08:	4393      	bics	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	4a0d      	ldr	r2, [pc, #52]	@ (8008e50 <TIM_OC3_SetConfig+0x7c>)
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	621a      	str	r2, [r3, #32]
}
 8008e44:	46c0      	nop			@ (mov r8, r8)
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b006      	add	sp, #24
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	fffffeff 	.word	0xfffffeff
 8008e50:	fffffdff 	.word	0xfffffdff

08008e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed0 <TIM_OC4_SetConfig+0x7c>)
 8008e64:	401a      	ands	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a15      	ldr	r2, [pc, #84]	@ (8008ed4 <TIM_OC4_SetConfig+0x80>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a14      	ldr	r2, [pc, #80]	@ (8008ed8 <TIM_OC4_SetConfig+0x84>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4a10      	ldr	r2, [pc, #64]	@ (8008edc <TIM_OC4_SetConfig+0x88>)
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	031b      	lsls	r3, r3, #12
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	46c0      	nop			@ (mov r8, r8)
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	b006      	add	sp, #24
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	46c0      	nop			@ (mov r8, r8)
 8008ed0:	ffffefff 	.word	0xffffefff
 8008ed4:	ffff8fff 	.word	0xffff8fff
 8008ed8:	fffffcff 	.word	0xfffffcff
 8008edc:	ffffdfff 	.word	0xffffdfff

08008ee0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4393      	bics	r3, r2
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	2380      	movs	r3, #128	@ 0x80
 8008f0c:	05db      	lsls	r3, r3, #23
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d007      	beq.n	8008f22 <TIM_TI1_SetConfig+0x42>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <TIM_TI1_SetConfig+0xa4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_TI1_SetConfig+0x42>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f88 <TIM_TI1_SetConfig+0xa8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d101      	bne.n	8008f26 <TIM_TI1_SetConfig+0x46>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <TIM_TI1_SetConfig+0x48>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2203      	movs	r2, #3
 8008f30:	4393      	bics	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e003      	b.n	8008f46 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2201      	movs	r2, #1
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	22f0      	movs	r2, #240	@ 0xf0
 8008f4a:	4393      	bics	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	22ff      	movs	r2, #255	@ 0xff
 8008f54:	4013      	ands	r3, r2
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	220a      	movs	r2, #10
 8008f60:	4393      	bics	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	220a      	movs	r2, #10
 8008f68:	4013      	ands	r3, r2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	621a      	str	r2, [r3, #32]
}
 8008f7c:	46c0      	nop			@ (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b006      	add	sp, #24
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40010800 	.word	0x40010800
 8008f88:	40011400 	.word	0x40011400

08008f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4393      	bics	r3, r2
 8008fa6:	001a      	movs	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	22f0      	movs	r2, #240	@ 0xf0
 8008fb6:	4393      	bics	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	220a      	movs	r2, #10
 8008fc8:	4393      	bics	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	621a      	str	r2, [r3, #32]
}
 8008fe0:	46c0      	nop			@ (mov r8, r8)
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	b006      	add	sp, #24
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	2210      	movs	r2, #16
 8008ffc:	4393      	bics	r3, r2
 8008ffe:	001a      	movs	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4a14      	ldr	r2, [pc, #80]	@ (8009064 <TIM_TI2_SetConfig+0x7c>)
 8009014:	4013      	ands	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	4a10      	ldr	r2, [pc, #64]	@ (8009068 <TIM_TI2_SetConfig+0x80>)
 8009026:	4013      	ands	r3, r2
 8009028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	041b      	lsls	r3, r3, #16
 8009030:	0c1b      	lsrs	r3, r3, #16
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	22a0      	movs	r2, #160	@ 0xa0
 800903c:	4393      	bics	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	22a0      	movs	r2, #160	@ 0xa0
 8009046:	4013      	ands	r3, r2
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	621a      	str	r2, [r3, #32]
}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b006      	add	sp, #24
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			@ (mov r8, r8)
 8009064:	fffffcff 	.word	0xfffffcff
 8009068:	ffff0fff 	.word	0xffff0fff

0800906c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	2210      	movs	r2, #16
 800907e:	4393      	bics	r3, r2
 8009080:	001a      	movs	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	4a0d      	ldr	r2, [pc, #52]	@ (80090cc <TIM_TI2_ConfigInputStage+0x60>)
 8009096:	4013      	ands	r3, r2
 8009098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	031b      	lsls	r3, r3, #12
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	22a0      	movs	r2, #160	@ 0xa0
 80090a8:	4393      	bics	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	621a      	str	r2, [r3, #32]
}
 80090c2:	46c0      	nop			@ (mov r8, r8)
 80090c4:	46bd      	mov	sp, r7
 80090c6:	b006      	add	sp, #24
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	46c0      	nop			@ (mov r8, r8)
 80090cc:	ffff0fff 	.word	0xffff0fff

080090d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	4a19      	ldr	r2, [pc, #100]	@ (8009148 <TIM_TI3_SetConfig+0x78>)
 80090e4:	401a      	ands	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2203      	movs	r2, #3
 80090fa:	4393      	bics	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4313      	orrs	r3, r2
 8009104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	22f0      	movs	r2, #240	@ 0xf0
 800910a:	4393      	bics	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	22ff      	movs	r2, #255	@ 0xff
 8009114:	4013      	ands	r3, r2
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	4a0b      	ldr	r2, [pc, #44]	@ (800914c <TIM_TI3_SetConfig+0x7c>)
 8009120:	4013      	ands	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	021a      	lsls	r2, r3, #8
 8009128:	23a0      	movs	r3, #160	@ 0xa0
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	4013      	ands	r3, r2
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	621a      	str	r2, [r3, #32]
}
 8009140:	46c0      	nop			@ (mov r8, r8)
 8009142:	46bd      	mov	sp, r7
 8009144:	b006      	add	sp, #24
 8009146:	bd80      	pop	{r7, pc}
 8009148:	fffffeff 	.word	0xfffffeff
 800914c:	fffff5ff 	.word	0xfffff5ff

08009150 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	4a1a      	ldr	r2, [pc, #104]	@ (80091cc <TIM_TI4_SetConfig+0x7c>)
 8009164:	401a      	ands	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4a15      	ldr	r2, [pc, #84]	@ (80091d0 <TIM_TI4_SetConfig+0x80>)
 800917a:	4013      	ands	r3, r2
 800917c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4a12      	ldr	r2, [pc, #72]	@ (80091d4 <TIM_TI4_SetConfig+0x84>)
 800918c:	4013      	ands	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	031b      	lsls	r3, r3, #12
 8009194:	041b      	lsls	r3, r3, #16
 8009196:	0c1b      	lsrs	r3, r3, #16
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4a0d      	ldr	r2, [pc, #52]	@ (80091d8 <TIM_TI4_SetConfig+0x88>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	031a      	lsls	r2, r3, #12
 80091aa:	23a0      	movs	r3, #160	@ 0xa0
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	4013      	ands	r3, r2
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	46bd      	mov	sp, r7
 80091c6:	b006      	add	sp, #24
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	ffffefff 	.word	0xffffefff
 80091d0:	fffffcff 	.word	0xfffffcff
 80091d4:	ffff0fff 	.word	0xffff0fff
 80091d8:	ffff5fff 	.word	0xffff5fff

080091dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2270      	movs	r2, #112	@ 0x70
 80091f0:	4393      	bics	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	2207      	movs	r2, #7
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	609a      	str	r2, [r3, #8]
}
 8009206:	46c0      	nop			@ (mov r8, r8)
 8009208:	46bd      	mov	sp, r7
 800920a:	b004      	add	sp, #16
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4a09      	ldr	r2, [pc, #36]	@ (800924c <TIM_ETR_SetConfig+0x3c>)
 8009228:	4013      	ands	r3, r2
 800922a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	021a      	lsls	r2, r3, #8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	431a      	orrs	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4313      	orrs	r3, r2
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	4313      	orrs	r3, r2
 800923c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	609a      	str	r2, [r3, #8]
}
 8009244:	46c0      	nop			@ (mov r8, r8)
 8009246:	46bd      	mov	sp, r7
 8009248:	b006      	add	sp, #24
 800924a:	bd80      	pop	{r7, pc}
 800924c:	ffff00ff 	.word	0xffff00ff

08009250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	221f      	movs	r2, #31
 8009260:	4013      	ands	r3, r2
 8009262:	2201      	movs	r2, #1
 8009264:	409a      	lsls	r2, r3
 8009266:	0013      	movs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	43d2      	mvns	r2, r2
 8009272:	401a      	ands	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	211f      	movs	r1, #31
 8009280:	400b      	ands	r3, r1
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4099      	lsls	r1, r3
 8009286:	000b      	movs	r3, r1
 8009288:	431a      	orrs	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	46c0      	nop			@ (mov r8, r8)
 8009290:	46bd      	mov	sp, r7
 8009292:	b006      	add	sp, #24
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2238      	movs	r2, #56	@ 0x38
 80092a6:	5c9b      	ldrb	r3, [r3, r2]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e042      	b.n	8009336 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2238      	movs	r2, #56	@ 0x38
 80092b4:	2101      	movs	r1, #1
 80092b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2239      	movs	r2, #57	@ 0x39
 80092bc:	2102      	movs	r1, #2
 80092be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2270      	movs	r2, #112	@ 0x70
 80092d4:	4393      	bics	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	2380      	movs	r3, #128	@ 0x80
 80092f0:	05db      	lsls	r3, r3, #23
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d009      	beq.n	800930a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a11      	ldr	r2, [pc, #68]	@ (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d004      	beq.n	800930a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a0f      	ldr	r2, [pc, #60]	@ (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d10c      	bne.n	8009324 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2280      	movs	r2, #128	@ 0x80
 800930e:	4393      	bics	r3, r2
 8009310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4313      	orrs	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2239      	movs	r2, #57	@ 0x39
 8009328:	2101      	movs	r1, #1
 800932a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2238      	movs	r2, #56	@ 0x38
 8009330:	2100      	movs	r1, #0
 8009332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	0018      	movs	r0, r3
 8009338:	46bd      	mov	sp, r7
 800933a:	b004      	add	sp, #16
 800933c:	bd80      	pop	{r7, pc}
 800933e:	46c0      	nop			@ (mov r8, r8)
 8009340:	40010800 	.word	0x40010800
 8009344:	40011400 	.word	0x40011400

08009348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e044      	b.n	80093e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d107      	bne.n	8009372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2278      	movs	r2, #120	@ 0x78
 8009366:	2100      	movs	r1, #0
 8009368:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	0018      	movs	r0, r3
 800936e:	f7fb f97f 	bl	8004670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2224      	movs	r2, #36	@ 0x24
 8009376:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2101      	movs	r1, #1
 8009384:	438a      	bics	r2, r1
 8009386:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	0018      	movs	r0, r3
 800938c:	f000 f8d0 	bl	8009530 <UART_SetConfig>
 8009390:	0003      	movs	r3, r0
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e024      	b.n	80093e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	0018      	movs	r0, r3
 80093a6:	f000 fb47 	bl	8009a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	490d      	ldr	r1, [pc, #52]	@ (80093ec <HAL_UART_Init+0xa4>)
 80093b6:	400a      	ands	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	212a      	movs	r1, #42	@ 0x2a
 80093c6:	438a      	bics	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2101      	movs	r1, #1
 80093d6:	430a      	orrs	r2, r1
 80093d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	0018      	movs	r0, r3
 80093de:	f000 fbdf 	bl	8009ba0 <UART_CheckIdleState>
 80093e2:	0003      	movs	r3, r0
}
 80093e4:	0018      	movs	r0, r3
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	ffffb7ff 	.word	0xffffb7ff

080093f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	@ 0x28
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	1dbb      	adds	r3, r7, #6
 80093fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009404:	2b20      	cmp	r3, #32
 8009406:	d000      	beq.n	800940a <HAL_UART_Transmit+0x1a>
 8009408:	e08c      	b.n	8009524 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <HAL_UART_Transmit+0x28>
 8009410:	1dbb      	adds	r3, r7, #6
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e084      	b.n	8009526 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	015b      	lsls	r3, r3, #5
 8009424:	429a      	cmp	r2, r3
 8009426:	d109      	bne.n	800943c <HAL_UART_Transmit+0x4c>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d105      	bne.n	800943c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2201      	movs	r2, #1
 8009434:	4013      	ands	r3, r2
 8009436:	d001      	beq.n	800943c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e074      	b.n	8009526 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2284      	movs	r2, #132	@ 0x84
 8009440:	2100      	movs	r1, #0
 8009442:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2221      	movs	r2, #33	@ 0x21
 8009448:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800944a:	f7fb fb0b 	bl	8004a64 <HAL_GetTick>
 800944e:	0003      	movs	r3, r0
 8009450:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1dba      	adds	r2, r7, #6
 8009456:	2150      	movs	r1, #80	@ 0x50
 8009458:	8812      	ldrh	r2, [r2, #0]
 800945a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	1dba      	adds	r2, r7, #6
 8009460:	2152      	movs	r1, #82	@ 0x52
 8009462:	8812      	ldrh	r2, [r2, #0]
 8009464:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	2380      	movs	r3, #128	@ 0x80
 800946c:	015b      	lsls	r3, r3, #5
 800946e:	429a      	cmp	r2, r3
 8009470:	d108      	bne.n	8009484 <HAL_UART_Transmit+0x94>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	e003      	b.n	800948c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009488:	2300      	movs	r3, #0
 800948a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800948c:	e02f      	b.n	80094ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	0013      	movs	r3, r2
 8009498:	2200      	movs	r2, #0
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	f000 fc28 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 80094a0:	1e03      	subs	r3, r0, #0
 80094a2:	d004      	beq.n	80094ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e03b      	b.n	8009526 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	001a      	movs	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	05d2      	lsls	r2, r2, #23
 80094c0:	0dd2      	lsrs	r2, r2, #23
 80094c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	3302      	adds	r3, #2
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e007      	b.n	80094dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	3301      	adds	r3, #1
 80094da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2252      	movs	r2, #82	@ 0x52
 80094e0:	5a9b      	ldrh	r3, [r3, r2]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b299      	uxth	r1, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2252      	movs	r2, #82	@ 0x52
 80094ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2252      	movs	r2, #82	@ 0x52
 80094f2:	5a9b      	ldrh	r3, [r3, r2]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1c9      	bne.n	800948e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	0013      	movs	r3, r2
 8009504:	2200      	movs	r2, #0
 8009506:	2140      	movs	r1, #64	@ 0x40
 8009508:	f000 fbf2 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 800950c:	1e03      	subs	r3, r0, #0
 800950e:	d004      	beq.n	800951a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e005      	b.n	8009526 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8009524:	2302      	movs	r3, #2
  }
}
 8009526:	0018      	movs	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	b008      	add	sp, #32
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b08e      	sub	sp, #56	@ 0x38
 8009534:	af00      	add	r7, sp, #0
 8009536:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009538:	231a      	movs	r3, #26
 800953a:	2218      	movs	r2, #24
 800953c:	189b      	adds	r3, r3, r2
 800953e:	19db      	adds	r3, r3, r7
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	431a      	orrs	r2, r3
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	431a      	orrs	r2, r3
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	4313      	orrs	r3, r2
 800955a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4ac6      	ldr	r2, [pc, #792]	@ (800987c <UART_SetConfig+0x34c>)
 8009564:	4013      	ands	r3, r2
 8009566:	0019      	movs	r1, r3
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800956e:	430a      	orrs	r2, r1
 8009570:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4ac1      	ldr	r2, [pc, #772]	@ (8009880 <UART_SetConfig+0x350>)
 800957a:	4013      	ands	r3, r2
 800957c:	0019      	movs	r1, r3
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4abb      	ldr	r2, [pc, #748]	@ (8009884 <UART_SetConfig+0x354>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d004      	beq.n	80095a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095a0:	4313      	orrs	r3, r2
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	4ab7      	ldr	r2, [pc, #732]	@ (8009888 <UART_SetConfig+0x358>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	0019      	movs	r1, r3
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095b6:	430a      	orrs	r2, r1
 80095b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4ab3      	ldr	r2, [pc, #716]	@ (800988c <UART_SetConfig+0x35c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d131      	bne.n	8009628 <UART_SetConfig+0xf8>
 80095c4:	4bb2      	ldr	r3, [pc, #712]	@ (8009890 <UART_SetConfig+0x360>)
 80095c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c8:	2203      	movs	r2, #3
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d01d      	beq.n	800960c <UART_SetConfig+0xdc>
 80095d0:	d823      	bhi.n	800961a <UART_SetConfig+0xea>
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d00c      	beq.n	80095f0 <UART_SetConfig+0xc0>
 80095d6:	d820      	bhi.n	800961a <UART_SetConfig+0xea>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <UART_SetConfig+0xb2>
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d00e      	beq.n	80095fe <UART_SetConfig+0xce>
 80095e0:	e01b      	b.n	800961a <UART_SetConfig+0xea>
 80095e2:	231b      	movs	r3, #27
 80095e4:	2218      	movs	r2, #24
 80095e6:	189b      	adds	r3, r3, r2
 80095e8:	19db      	adds	r3, r3, r7
 80095ea:	2201      	movs	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e09c      	b.n	800972a <UART_SetConfig+0x1fa>
 80095f0:	231b      	movs	r3, #27
 80095f2:	2218      	movs	r2, #24
 80095f4:	189b      	adds	r3, r3, r2
 80095f6:	19db      	adds	r3, r3, r7
 80095f8:	2202      	movs	r2, #2
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	e095      	b.n	800972a <UART_SetConfig+0x1fa>
 80095fe:	231b      	movs	r3, #27
 8009600:	2218      	movs	r2, #24
 8009602:	189b      	adds	r3, r3, r2
 8009604:	19db      	adds	r3, r3, r7
 8009606:	2204      	movs	r2, #4
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e08e      	b.n	800972a <UART_SetConfig+0x1fa>
 800960c:	231b      	movs	r3, #27
 800960e:	2218      	movs	r2, #24
 8009610:	189b      	adds	r3, r3, r2
 8009612:	19db      	adds	r3, r3, r7
 8009614:	2208      	movs	r2, #8
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e087      	b.n	800972a <UART_SetConfig+0x1fa>
 800961a:	231b      	movs	r3, #27
 800961c:	2218      	movs	r2, #24
 800961e:	189b      	adds	r3, r3, r2
 8009620:	19db      	adds	r3, r3, r7
 8009622:	2210      	movs	r2, #16
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e080      	b.n	800972a <UART_SetConfig+0x1fa>
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a99      	ldr	r2, [pc, #612]	@ (8009894 <UART_SetConfig+0x364>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d131      	bne.n	8009696 <UART_SetConfig+0x166>
 8009632:	4b97      	ldr	r3, [pc, #604]	@ (8009890 <UART_SetConfig+0x360>)
 8009634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009636:	220c      	movs	r2, #12
 8009638:	4013      	ands	r3, r2
 800963a:	2b0c      	cmp	r3, #12
 800963c:	d01d      	beq.n	800967a <UART_SetConfig+0x14a>
 800963e:	d823      	bhi.n	8009688 <UART_SetConfig+0x158>
 8009640:	2b08      	cmp	r3, #8
 8009642:	d00c      	beq.n	800965e <UART_SetConfig+0x12e>
 8009644:	d820      	bhi.n	8009688 <UART_SetConfig+0x158>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <UART_SetConfig+0x120>
 800964a:	2b04      	cmp	r3, #4
 800964c:	d00e      	beq.n	800966c <UART_SetConfig+0x13c>
 800964e:	e01b      	b.n	8009688 <UART_SetConfig+0x158>
 8009650:	231b      	movs	r3, #27
 8009652:	2218      	movs	r2, #24
 8009654:	189b      	adds	r3, r3, r2
 8009656:	19db      	adds	r3, r3, r7
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
 800965c:	e065      	b.n	800972a <UART_SetConfig+0x1fa>
 800965e:	231b      	movs	r3, #27
 8009660:	2218      	movs	r2, #24
 8009662:	189b      	adds	r3, r3, r2
 8009664:	19db      	adds	r3, r3, r7
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e05e      	b.n	800972a <UART_SetConfig+0x1fa>
 800966c:	231b      	movs	r3, #27
 800966e:	2218      	movs	r2, #24
 8009670:	189b      	adds	r3, r3, r2
 8009672:	19db      	adds	r3, r3, r7
 8009674:	2204      	movs	r2, #4
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e057      	b.n	800972a <UART_SetConfig+0x1fa>
 800967a:	231b      	movs	r3, #27
 800967c:	2218      	movs	r2, #24
 800967e:	189b      	adds	r3, r3, r2
 8009680:	19db      	adds	r3, r3, r7
 8009682:	2208      	movs	r2, #8
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e050      	b.n	800972a <UART_SetConfig+0x1fa>
 8009688:	231b      	movs	r3, #27
 800968a:	2218      	movs	r2, #24
 800968c:	189b      	adds	r3, r3, r2
 800968e:	19db      	adds	r3, r3, r7
 8009690:	2210      	movs	r2, #16
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	e049      	b.n	800972a <UART_SetConfig+0x1fa>
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a7a      	ldr	r2, [pc, #488]	@ (8009884 <UART_SetConfig+0x354>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d13e      	bne.n	800971e <UART_SetConfig+0x1ee>
 80096a0:	4b7b      	ldr	r3, [pc, #492]	@ (8009890 <UART_SetConfig+0x360>)
 80096a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096a4:	23c0      	movs	r3, #192	@ 0xc0
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	4013      	ands	r3, r2
 80096aa:	22c0      	movs	r2, #192	@ 0xc0
 80096ac:	0112      	lsls	r2, r2, #4
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d027      	beq.n	8009702 <UART_SetConfig+0x1d2>
 80096b2:	22c0      	movs	r2, #192	@ 0xc0
 80096b4:	0112      	lsls	r2, r2, #4
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d82a      	bhi.n	8009710 <UART_SetConfig+0x1e0>
 80096ba:	2280      	movs	r2, #128	@ 0x80
 80096bc:	0112      	lsls	r2, r2, #4
 80096be:	4293      	cmp	r3, r2
 80096c0:	d011      	beq.n	80096e6 <UART_SetConfig+0x1b6>
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	0112      	lsls	r2, r2, #4
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d822      	bhi.n	8009710 <UART_SetConfig+0x1e0>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <UART_SetConfig+0x1a8>
 80096ce:	2280      	movs	r2, #128	@ 0x80
 80096d0:	00d2      	lsls	r2, r2, #3
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00e      	beq.n	80096f4 <UART_SetConfig+0x1c4>
 80096d6:	e01b      	b.n	8009710 <UART_SetConfig+0x1e0>
 80096d8:	231b      	movs	r3, #27
 80096da:	2218      	movs	r2, #24
 80096dc:	189b      	adds	r3, r3, r2
 80096de:	19db      	adds	r3, r3, r7
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	e021      	b.n	800972a <UART_SetConfig+0x1fa>
 80096e6:	231b      	movs	r3, #27
 80096e8:	2218      	movs	r2, #24
 80096ea:	189b      	adds	r3, r3, r2
 80096ec:	19db      	adds	r3, r3, r7
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e01a      	b.n	800972a <UART_SetConfig+0x1fa>
 80096f4:	231b      	movs	r3, #27
 80096f6:	2218      	movs	r2, #24
 80096f8:	189b      	adds	r3, r3, r2
 80096fa:	19db      	adds	r3, r3, r7
 80096fc:	2204      	movs	r2, #4
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	e013      	b.n	800972a <UART_SetConfig+0x1fa>
 8009702:	231b      	movs	r3, #27
 8009704:	2218      	movs	r2, #24
 8009706:	189b      	adds	r3, r3, r2
 8009708:	19db      	adds	r3, r3, r7
 800970a:	2208      	movs	r2, #8
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e00c      	b.n	800972a <UART_SetConfig+0x1fa>
 8009710:	231b      	movs	r3, #27
 8009712:	2218      	movs	r2, #24
 8009714:	189b      	adds	r3, r3, r2
 8009716:	19db      	adds	r3, r3, r7
 8009718:	2210      	movs	r2, #16
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e005      	b.n	800972a <UART_SetConfig+0x1fa>
 800971e:	231b      	movs	r3, #27
 8009720:	2218      	movs	r2, #24
 8009722:	189b      	adds	r3, r3, r2
 8009724:	19db      	adds	r3, r3, r7
 8009726:	2210      	movs	r2, #16
 8009728:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a55      	ldr	r2, [pc, #340]	@ (8009884 <UART_SetConfig+0x354>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d000      	beq.n	8009736 <UART_SetConfig+0x206>
 8009734:	e084      	b.n	8009840 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009736:	231b      	movs	r3, #27
 8009738:	2218      	movs	r2, #24
 800973a:	189b      	adds	r3, r3, r2
 800973c:	19db      	adds	r3, r3, r7
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d01d      	beq.n	8009780 <UART_SetConfig+0x250>
 8009744:	dc20      	bgt.n	8009788 <UART_SetConfig+0x258>
 8009746:	2b04      	cmp	r3, #4
 8009748:	d015      	beq.n	8009776 <UART_SetConfig+0x246>
 800974a:	dc1d      	bgt.n	8009788 <UART_SetConfig+0x258>
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <UART_SetConfig+0x226>
 8009750:	2b02      	cmp	r3, #2
 8009752:	d005      	beq.n	8009760 <UART_SetConfig+0x230>
 8009754:	e018      	b.n	8009788 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009756:	f7fd ff8b 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 800975a:	0003      	movs	r3, r0
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800975e:	e01c      	b.n	800979a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009760:	4b4b      	ldr	r3, [pc, #300]	@ (8009890 <UART_SetConfig+0x360>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2210      	movs	r2, #16
 8009766:	4013      	ands	r3, r2
 8009768:	d002      	beq.n	8009770 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800976a:	4b4b      	ldr	r3, [pc, #300]	@ (8009898 <UART_SetConfig+0x368>)
 800976c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800976e:	e014      	b.n	800979a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8009770:	4b4a      	ldr	r3, [pc, #296]	@ (800989c <UART_SetConfig+0x36c>)
 8009772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009774:	e011      	b.n	800979a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009776:	f7fd fecb 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 800977a:	0003      	movs	r3, r0
 800977c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800977e:	e00c      	b.n	800979a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009780:	2380      	movs	r3, #128	@ 0x80
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009786:	e008      	b.n	800979a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800978c:	231a      	movs	r3, #26
 800978e:	2218      	movs	r2, #24
 8009790:	189b      	adds	r3, r3, r2
 8009792:	19db      	adds	r3, r3, r7
 8009794:	2201      	movs	r2, #1
 8009796:	701a      	strb	r2, [r3, #0]
        break;
 8009798:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800979a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d100      	bne.n	80097a2 <UART_SetConfig+0x272>
 80097a0:	e132      	b.n	8009a08 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	0013      	movs	r3, r2
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d305      	bcc.n	80097be <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d906      	bls.n	80097cc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80097be:	231a      	movs	r3, #26
 80097c0:	2218      	movs	r2, #24
 80097c2:	189b      	adds	r3, r3, r2
 80097c4:	19db      	adds	r3, r3, r7
 80097c6:	2201      	movs	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	e11d      	b.n	8009a08 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80097cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	6939      	ldr	r1, [r7, #16]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	000b      	movs	r3, r1
 80097da:	0e1b      	lsrs	r3, r3, #24
 80097dc:	0010      	movs	r0, r2
 80097de:	0205      	lsls	r5, r0, #8
 80097e0:	431d      	orrs	r5, r3
 80097e2:	000b      	movs	r3, r1
 80097e4:	021c      	lsls	r4, r3, #8
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	60bb      	str	r3, [r7, #8]
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	68b8      	ldr	r0, [r7, #8]
 80097f4:	68f9      	ldr	r1, [r7, #12]
 80097f6:	1900      	adds	r0, r0, r4
 80097f8:	4169      	adcs	r1, r5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	607b      	str	r3, [r7, #4]
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f7f6 fe88 	bl	800051c <__aeabi_uldivmod>
 800980c:	0002      	movs	r2, r0
 800980e:	000b      	movs	r3, r1
 8009810:	0013      	movs	r3, r2
 8009812:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009816:	23c0      	movs	r3, #192	@ 0xc0
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	429a      	cmp	r2, r3
 800981c:	d309      	bcc.n	8009832 <UART_SetConfig+0x302>
 800981e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009820:	2380      	movs	r3, #128	@ 0x80
 8009822:	035b      	lsls	r3, r3, #13
 8009824:	429a      	cmp	r2, r3
 8009826:	d204      	bcs.n	8009832 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800982e:	60da      	str	r2, [r3, #12]
 8009830:	e0ea      	b.n	8009a08 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8009832:	231a      	movs	r3, #26
 8009834:	2218      	movs	r2, #24
 8009836:	189b      	adds	r3, r3, r2
 8009838:	19db      	adds	r3, r3, r7
 800983a:	2201      	movs	r2, #1
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e0e3      	b.n	8009a08 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	69da      	ldr	r2, [r3, #28]
 8009844:	2380      	movs	r3, #128	@ 0x80
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	429a      	cmp	r2, r3
 800984a:	d000      	beq.n	800984e <UART_SetConfig+0x31e>
 800984c:	e085      	b.n	800995a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800984e:	231b      	movs	r3, #27
 8009850:	2218      	movs	r2, #24
 8009852:	189b      	adds	r3, r3, r2
 8009854:	19db      	adds	r3, r3, r7
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b08      	cmp	r3, #8
 800985a:	d837      	bhi.n	80098cc <UART_SetConfig+0x39c>
 800985c:	009a      	lsls	r2, r3, #2
 800985e:	4b10      	ldr	r3, [pc, #64]	@ (80098a0 <UART_SetConfig+0x370>)
 8009860:	18d3      	adds	r3, r2, r3
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009866:	f7fd ff03 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 800986a:	0003      	movs	r3, r0
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800986e:	e036      	b.n	80098de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009870:	f7fd ff14 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8009874:	0003      	movs	r3, r0
 8009876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009878:	e031      	b.n	80098de <UART_SetConfig+0x3ae>
 800987a:	46c0      	nop			@ (mov r8, r8)
 800987c:	efff69f3 	.word	0xefff69f3
 8009880:	ffffcfff 	.word	0xffffcfff
 8009884:	40004800 	.word	0x40004800
 8009888:	fffff4ff 	.word	0xfffff4ff
 800988c:	40013800 	.word	0x40013800
 8009890:	40021000 	.word	0x40021000
 8009894:	40004400 	.word	0x40004400
 8009898:	003d0900 	.word	0x003d0900
 800989c:	00f42400 	.word	0x00f42400
 80098a0:	0800cd80 	.word	0x0800cd80
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a4:	4b60      	ldr	r3, [pc, #384]	@ (8009a28 <UART_SetConfig+0x4f8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2210      	movs	r2, #16
 80098aa:	4013      	ands	r3, r2
 80098ac:	d002      	beq.n	80098b4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80098ae:	4b5f      	ldr	r3, [pc, #380]	@ (8009a2c <UART_SetConfig+0x4fc>)
 80098b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098b2:	e014      	b.n	80098de <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80098b4:	4b5e      	ldr	r3, [pc, #376]	@ (8009a30 <UART_SetConfig+0x500>)
 80098b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098b8:	e011      	b.n	80098de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ba:	f7fd fe29 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 80098be:	0003      	movs	r3, r0
 80098c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098c2:	e00c      	b.n	80098de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80098ca:	e008      	b.n	80098de <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80098d0:	231a      	movs	r3, #26
 80098d2:	2218      	movs	r2, #24
 80098d4:	189b      	adds	r3, r3, r2
 80098d6:	19db      	adds	r3, r3, r7
 80098d8:	2201      	movs	r2, #1
 80098da:	701a      	strb	r2, [r3, #0]
        break;
 80098dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d100      	bne.n	80098e6 <UART_SetConfig+0x3b6>
 80098e4:	e090      	b.n	8009a08 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	005a      	lsls	r2, r3, #1
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	18d2      	adds	r2, r2, r3
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	0019      	movs	r1, r3
 80098f8:	0010      	movs	r0, r2
 80098fa:	f7f6 fc21 	bl	8000140 <__udivsi3>
 80098fe:	0003      	movs	r3, r0
 8009900:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	2b0f      	cmp	r3, #15
 8009906:	d921      	bls.n	800994c <UART_SetConfig+0x41c>
 8009908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800990a:	2380      	movs	r3, #128	@ 0x80
 800990c:	025b      	lsls	r3, r3, #9
 800990e:	429a      	cmp	r2, r3
 8009910:	d21c      	bcs.n	800994c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	b29a      	uxth	r2, r3
 8009916:	200e      	movs	r0, #14
 8009918:	2418      	movs	r4, #24
 800991a:	1903      	adds	r3, r0, r4
 800991c:	19db      	adds	r3, r3, r7
 800991e:	210f      	movs	r1, #15
 8009920:	438a      	bics	r2, r1
 8009922:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	085b      	lsrs	r3, r3, #1
 8009928:	b29b      	uxth	r3, r3
 800992a:	2207      	movs	r2, #7
 800992c:	4013      	ands	r3, r2
 800992e:	b299      	uxth	r1, r3
 8009930:	1903      	adds	r3, r0, r4
 8009932:	19db      	adds	r3, r3, r7
 8009934:	1902      	adds	r2, r0, r4
 8009936:	19d2      	adds	r2, r2, r7
 8009938:	8812      	ldrh	r2, [r2, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	1902      	adds	r2, r0, r4
 8009944:	19d2      	adds	r2, r2, r7
 8009946:	8812      	ldrh	r2, [r2, #0]
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	e05d      	b.n	8009a08 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800994c:	231a      	movs	r3, #26
 800994e:	2218      	movs	r2, #24
 8009950:	189b      	adds	r3, r3, r2
 8009952:	19db      	adds	r3, r3, r7
 8009954:	2201      	movs	r2, #1
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e056      	b.n	8009a08 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800995a:	231b      	movs	r3, #27
 800995c:	2218      	movs	r2, #24
 800995e:	189b      	adds	r3, r3, r2
 8009960:	19db      	adds	r3, r3, r7
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b08      	cmp	r3, #8
 8009966:	d822      	bhi.n	80099ae <UART_SetConfig+0x47e>
 8009968:	009a      	lsls	r2, r3, #2
 800996a:	4b32      	ldr	r3, [pc, #200]	@ (8009a34 <UART_SetConfig+0x504>)
 800996c:	18d3      	adds	r3, r2, r3
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009972:	f7fd fe7d 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 8009976:	0003      	movs	r3, r0
 8009978:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800997a:	e021      	b.n	80099c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800997c:	f7fd fe8e 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8009980:	0003      	movs	r3, r0
 8009982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009984:	e01c      	b.n	80099c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009986:	4b28      	ldr	r3, [pc, #160]	@ (8009a28 <UART_SetConfig+0x4f8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2210      	movs	r2, #16
 800998c:	4013      	ands	r3, r2
 800998e:	d002      	beq.n	8009996 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009990:	4b26      	ldr	r3, [pc, #152]	@ (8009a2c <UART_SetConfig+0x4fc>)
 8009992:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009994:	e014      	b.n	80099c0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8009996:	4b26      	ldr	r3, [pc, #152]	@ (8009a30 <UART_SetConfig+0x500>)
 8009998:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800999a:	e011      	b.n	80099c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800999c:	f7fd fdb8 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 80099a0:	0003      	movs	r3, r0
 80099a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80099a4:	e00c      	b.n	80099c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a6:	2380      	movs	r3, #128	@ 0x80
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80099ac:	e008      	b.n	80099c0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80099b2:	231a      	movs	r3, #26
 80099b4:	2218      	movs	r2, #24
 80099b6:	189b      	adds	r3, r3, r2
 80099b8:	19db      	adds	r3, r3, r7
 80099ba:	2201      	movs	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]
        break;
 80099be:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d020      	beq.n	8009a08 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	085a      	lsrs	r2, r3, #1
 80099cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ce:	18d2      	adds	r2, r2, r3
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	0019      	movs	r1, r3
 80099d6:	0010      	movs	r0, r2
 80099d8:	f7f6 fbb2 	bl	8000140 <__udivsi3>
 80099dc:	0003      	movs	r3, r0
 80099de:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d90a      	bls.n	80099fc <UART_SetConfig+0x4cc>
 80099e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099e8:	2380      	movs	r3, #128	@ 0x80
 80099ea:	025b      	lsls	r3, r3, #9
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d205      	bcs.n	80099fc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	60da      	str	r2, [r3, #12]
 80099fa:	e005      	b.n	8009a08 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80099fc:	231a      	movs	r3, #26
 80099fe:	2218      	movs	r2, #24
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	19db      	adds	r3, r3, r7
 8009a04:	2201      	movs	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	2200      	movs	r2, #0
 8009a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009a14:	231a      	movs	r3, #26
 8009a16:	2218      	movs	r2, #24
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	19db      	adds	r3, r3, r7
 8009a1c:	781b      	ldrb	r3, [r3, #0]
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b00e      	add	sp, #56	@ 0x38
 8009a24:	bdb0      	pop	{r4, r5, r7, pc}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	40021000 	.word	0x40021000
 8009a2c:	003d0900 	.word	0x003d0900
 8009a30:	00f42400 	.word	0x00f42400
 8009a34:	0800cda4 	.word	0x0800cda4

08009a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	2201      	movs	r2, #1
 8009a46:	4013      	ands	r3, r2
 8009a48:	d00b      	beq.n	8009a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4a4a      	ldr	r2, [pc, #296]	@ (8009b7c <UART_AdvFeatureConfig+0x144>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	0019      	movs	r1, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	2202      	movs	r2, #2
 8009a68:	4013      	ands	r3, r2
 8009a6a:	d00b      	beq.n	8009a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4a43      	ldr	r2, [pc, #268]	@ (8009b80 <UART_AdvFeatureConfig+0x148>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	0019      	movs	r1, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a88:	2204      	movs	r2, #4
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d00b      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4a3b      	ldr	r2, [pc, #236]	@ (8009b84 <UART_AdvFeatureConfig+0x14c>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	0019      	movs	r1, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aaa:	2208      	movs	r2, #8
 8009aac:	4013      	ands	r3, r2
 8009aae:	d00b      	beq.n	8009ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4a34      	ldr	r2, [pc, #208]	@ (8009b88 <UART_AdvFeatureConfig+0x150>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	0019      	movs	r1, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009acc:	2210      	movs	r2, #16
 8009ace:	4013      	ands	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8009b8c <UART_AdvFeatureConfig+0x154>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	0019      	movs	r1, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	2220      	movs	r2, #32
 8009af0:	4013      	ands	r3, r2
 8009af2:	d00b      	beq.n	8009b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4a25      	ldr	r2, [pc, #148]	@ (8009b90 <UART_AdvFeatureConfig+0x158>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	0019      	movs	r1, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b10:	2240      	movs	r2, #64	@ 0x40
 8009b12:	4013      	ands	r3, r2
 8009b14:	d01d      	beq.n	8009b52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009b94 <UART_AdvFeatureConfig+0x15c>)
 8009b1e:	4013      	ands	r3, r2
 8009b20:	0019      	movs	r1, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b32:	2380      	movs	r3, #128	@ 0x80
 8009b34:	035b      	lsls	r3, r3, #13
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d10b      	bne.n	8009b52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	4a15      	ldr	r2, [pc, #84]	@ (8009b98 <UART_AdvFeatureConfig+0x160>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	0019      	movs	r1, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	2280      	movs	r2, #128	@ 0x80
 8009b58:	4013      	ands	r3, r2
 8009b5a:	d00b      	beq.n	8009b74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4a0e      	ldr	r2, [pc, #56]	@ (8009b9c <UART_AdvFeatureConfig+0x164>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	0019      	movs	r1, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }
}
 8009b74:	46c0      	nop			@ (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b002      	add	sp, #8
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	fffdffff 	.word	0xfffdffff
 8009b80:	fffeffff 	.word	0xfffeffff
 8009b84:	fffbffff 	.word	0xfffbffff
 8009b88:	ffff7fff 	.word	0xffff7fff
 8009b8c:	ffffefff 	.word	0xffffefff
 8009b90:	ffffdfff 	.word	0xffffdfff
 8009b94:	ffefffff 	.word	0xffefffff
 8009b98:	ff9fffff 	.word	0xff9fffff
 8009b9c:	fff7ffff 	.word	0xfff7ffff

08009ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b092      	sub	sp, #72	@ 0x48
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2284      	movs	r2, #132	@ 0x84
 8009bac:	2100      	movs	r1, #0
 8009bae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bb0:	f7fa ff58 	bl	8004a64 <HAL_GetTick>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2208      	movs	r2, #8
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b08      	cmp	r3, #8
 8009bc4:	d12c      	bne.n	8009c20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc8:	2280      	movs	r2, #128	@ 0x80
 8009bca:	0391      	lsls	r1, r2, #14
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	4a46      	ldr	r2, [pc, #280]	@ (8009ce8 <UART_CheckIdleState+0x148>)
 8009bd0:	9200      	str	r2, [sp, #0]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f000 f88c 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 8009bd8:	1e03      	subs	r3, r0, #0
 8009bda:	d021      	beq.n	8009c20 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009be4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009be6:	2301      	movs	r3, #1
 8009be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	f383 8810 	msr	PRIMASK, r3
}
 8009bf0:	46c0      	nop			@ (mov r8, r8)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2180      	movs	r1, #128	@ 0x80
 8009bfe:	438a      	bics	r2, r1
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c08:	f383 8810 	msr	PRIMASK, r3
}
 8009c0c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2278      	movs	r2, #120	@ 0x78
 8009c18:	2100      	movs	r1, #0
 8009c1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e05f      	b.n	8009ce0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2204      	movs	r2, #4
 8009c28:	4013      	ands	r3, r2
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d146      	bne.n	8009cbc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	2280      	movs	r2, #128	@ 0x80
 8009c32:	03d1      	lsls	r1, r2, #15
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4a2c      	ldr	r2, [pc, #176]	@ (8009ce8 <UART_CheckIdleState+0x148>)
 8009c38:	9200      	str	r2, [sp, #0]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f000 f858 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 8009c40:	1e03      	subs	r3, r0, #0
 8009c42:	d03b      	beq.n	8009cbc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c44:	f3ef 8310 	mrs	r3, PRIMASK
 8009c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4e:	2301      	movs	r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f383 8810 	msr	PRIMASK, r3
}
 8009c58:	46c0      	nop			@ (mov r8, r8)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4921      	ldr	r1, [pc, #132]	@ (8009cec <UART_CheckIdleState+0x14c>)
 8009c66:	400a      	ands	r2, r1
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f383 8810 	msr	PRIMASK, r3
}
 8009c74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c76:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c80:	2301      	movs	r3, #1
 8009c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f383 8810 	msr	PRIMASK, r3
}
 8009c8a:	46c0      	nop			@ (mov r8, r8)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2101      	movs	r1, #1
 8009c98:	438a      	bics	r2, r1
 8009c9a:	609a      	str	r2, [r3, #8]
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	f383 8810 	msr	PRIMASK, r3
}
 8009ca6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2280      	movs	r2, #128	@ 0x80
 8009cac:	2120      	movs	r1, #32
 8009cae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2278      	movs	r2, #120	@ 0x78
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e011      	b.n	8009ce0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2280      	movs	r2, #128	@ 0x80
 8009cc6:	2120      	movs	r1, #32
 8009cc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2278      	movs	r2, #120	@ 0x78
 8009cda:	2100      	movs	r1, #0
 8009cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b010      	add	sp, #64	@ 0x40
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	01ffffff 	.word	0x01ffffff
 8009cec:	fffffedf 	.word	0xfffffedf

08009cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	1dfb      	adds	r3, r7, #7
 8009cfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d00:	e04b      	b.n	8009d9a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3301      	adds	r3, #1
 8009d06:	d048      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d08:	f7fa feac 	bl	8004a64 <HAL_GetTick>
 8009d0c:	0002      	movs	r2, r0
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d302      	bcc.n	8009d1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e04b      	b.n	8009dba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d035      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	2208      	movs	r2, #8
 8009d36:	4013      	ands	r3, r2
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d111      	bne.n	8009d60 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2208      	movs	r2, #8
 8009d42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	0018      	movs	r0, r3
 8009d48:	f000 f83c 	bl	8009dc4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2284      	movs	r2, #132	@ 0x84
 8009d50:	2108      	movs	r1, #8
 8009d52:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2278      	movs	r2, #120	@ 0x78
 8009d58:	2100      	movs	r1, #0
 8009d5a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e02c      	b.n	8009dba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69da      	ldr	r2, [r3, #28]
 8009d66:	2380      	movs	r3, #128	@ 0x80
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	401a      	ands	r2, r3
 8009d6c:	2380      	movs	r3, #128	@ 0x80
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d112      	bne.n	8009d9a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2280      	movs	r2, #128	@ 0x80
 8009d7a:	0112      	lsls	r2, r2, #4
 8009d7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f000 f81f 	bl	8009dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2284      	movs	r2, #132	@ 0x84
 8009d8a:	2120      	movs	r1, #32
 8009d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2278      	movs	r2, #120	@ 0x78
 8009d92:	2100      	movs	r1, #0
 8009d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e00f      	b.n	8009dba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	4013      	ands	r3, r2
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	425a      	negs	r2, r3
 8009daa:	4153      	adcs	r3, r2
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	001a      	movs	r2, r3
 8009db0:	1dfb      	adds	r3, r7, #7
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d0a4      	beq.n	8009d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	0018      	movs	r0, r3
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	b004      	add	sp, #16
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08e      	sub	sp, #56	@ 0x38
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8009dd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	f383 8810 	msr	PRIMASK, r3
}
 8009de0:	46c0      	nop			@ (mov r8, r8)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4926      	ldr	r1, [pc, #152]	@ (8009e88 <UART_EndRxTransfer+0xc4>)
 8009dee:	400a      	ands	r2, r1
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	f383 8810 	msr	PRIMASK, r3
}
 8009dfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009e02:	623b      	str	r3, [r7, #32]
  return(result);
 8009e04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e08:	2301      	movs	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	f383 8810 	msr	PRIMASK, r3
}
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	438a      	bics	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2a:	f383 8810 	msr	PRIMASK, r3
}
 8009e2e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d118      	bne.n	8009e6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e38:	f3ef 8310 	mrs	r3, PRIMASK
 8009e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e42:	2301      	movs	r3, #1
 8009e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f383 8810 	msr	PRIMASK, r3
}
 8009e4c:	46c0      	nop			@ (mov r8, r8)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2110      	movs	r1, #16
 8009e5a:	438a      	bics	r2, r1
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f383 8810 	msr	PRIMASK, r3
}
 8009e68:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2280      	movs	r2, #128	@ 0x80
 8009e6e:	2120      	movs	r1, #32
 8009e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009e7e:	46c0      	nop			@ (mov r8, r8)
 8009e80:	46bd      	mov	sp, r7
 8009e82:	b00e      	add	sp, #56	@ 0x38
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	46c0      	nop			@ (mov r8, r8)
 8009e88:	fffffedf 	.word	0xfffffedf

08009e8c <__cvt>:
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	001f      	movs	r7, r3
 8009e90:	2300      	movs	r3, #0
 8009e92:	0016      	movs	r6, r2
 8009e94:	b08b      	sub	sp, #44	@ 0x2c
 8009e96:	429f      	cmp	r7, r3
 8009e98:	da04      	bge.n	8009ea4 <__cvt+0x18>
 8009e9a:	2180      	movs	r1, #128	@ 0x80
 8009e9c:	0609      	lsls	r1, r1, #24
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	001f      	movs	r7, r3
 8009ea2:	232d      	movs	r3, #45	@ 0x2d
 8009ea4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009ea6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009ea8:	7013      	strb	r3, [r2, #0]
 8009eaa:	2320      	movs	r3, #32
 8009eac:	2203      	movs	r2, #3
 8009eae:	439d      	bics	r5, r3
 8009eb0:	2d46      	cmp	r5, #70	@ 0x46
 8009eb2:	d007      	beq.n	8009ec4 <__cvt+0x38>
 8009eb4:	002b      	movs	r3, r5
 8009eb6:	3b45      	subs	r3, #69	@ 0x45
 8009eb8:	4259      	negs	r1, r3
 8009eba:	414b      	adcs	r3, r1
 8009ebc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	18cb      	adds	r3, r1, r3
 8009ec2:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ec4:	ab09      	add	r3, sp, #36	@ 0x24
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	ab08      	add	r3, sp, #32
 8009eca:	9303      	str	r3, [sp, #12]
 8009ecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ece:	9200      	str	r2, [sp, #0]
 8009ed0:	9302      	str	r3, [sp, #8]
 8009ed2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ed4:	0032      	movs	r2, r6
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	003b      	movs	r3, r7
 8009eda:	f000 fe81 	bl	800abe0 <_dtoa_r>
 8009ede:	0004      	movs	r4, r0
 8009ee0:	2d47      	cmp	r5, #71	@ 0x47
 8009ee2:	d11b      	bne.n	8009f1c <__cvt+0x90>
 8009ee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ee6:	07db      	lsls	r3, r3, #31
 8009ee8:	d511      	bpl.n	8009f0e <__cvt+0x82>
 8009eea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009eec:	18c3      	adds	r3, r0, r3
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	0030      	movs	r0, r6
 8009ef6:	0039      	movs	r1, r7
 8009ef8:	f7f6 faa8 	bl	800044c <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d001      	beq.n	8009f04 <__cvt+0x78>
 8009f00:	9b07      	ldr	r3, [sp, #28]
 8009f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f04:	2230      	movs	r2, #48	@ 0x30
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	9907      	ldr	r1, [sp, #28]
 8009f0a:	428b      	cmp	r3, r1
 8009f0c:	d320      	bcc.n	8009f50 <__cvt+0xc4>
 8009f0e:	0020      	movs	r0, r4
 8009f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009f14:	1b1b      	subs	r3, r3, r4
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	b00b      	add	sp, #44	@ 0x2c
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f1e:	18c3      	adds	r3, r0, r3
 8009f20:	9307      	str	r3, [sp, #28]
 8009f22:	2d46      	cmp	r5, #70	@ 0x46
 8009f24:	d1e4      	bne.n	8009ef0 <__cvt+0x64>
 8009f26:	7803      	ldrb	r3, [r0, #0]
 8009f28:	2b30      	cmp	r3, #48	@ 0x30
 8009f2a:	d10c      	bne.n	8009f46 <__cvt+0xba>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2300      	movs	r3, #0
 8009f30:	0030      	movs	r0, r6
 8009f32:	0039      	movs	r1, r7
 8009f34:	f7f6 fa8a 	bl	800044c <__aeabi_dcmpeq>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d104      	bne.n	8009f46 <__cvt+0xba>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	18d3      	adds	r3, r2, r3
 8009f4e:	e7ce      	b.n	8009eee <__cvt+0x62>
 8009f50:	1c59      	adds	r1, r3, #1
 8009f52:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	e7d6      	b.n	8009f06 <__cvt+0x7a>

08009f58 <__exponent>:
 8009f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5a:	232b      	movs	r3, #43	@ 0x2b
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	0005      	movs	r5, r0
 8009f60:	1e0c      	subs	r4, r1, #0
 8009f62:	7002      	strb	r2, [r0, #0]
 8009f64:	da01      	bge.n	8009f6a <__exponent+0x12>
 8009f66:	424c      	negs	r4, r1
 8009f68:	3302      	adds	r3, #2
 8009f6a:	706b      	strb	r3, [r5, #1]
 8009f6c:	2c09      	cmp	r4, #9
 8009f6e:	dd2c      	ble.n	8009fca <__exponent+0x72>
 8009f70:	ab02      	add	r3, sp, #8
 8009f72:	1dde      	adds	r6, r3, #7
 8009f74:	0020      	movs	r0, r4
 8009f76:	210a      	movs	r1, #10
 8009f78:	f7f6 fa52 	bl	8000420 <__aeabi_idivmod>
 8009f7c:	0037      	movs	r7, r6
 8009f7e:	3130      	adds	r1, #48	@ 0x30
 8009f80:	3e01      	subs	r6, #1
 8009f82:	0020      	movs	r0, r4
 8009f84:	7031      	strb	r1, [r6, #0]
 8009f86:	210a      	movs	r1, #10
 8009f88:	9401      	str	r4, [sp, #4]
 8009f8a:	f7f6 f963 	bl	8000254 <__divsi3>
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	0004      	movs	r4, r0
 8009f92:	2b63      	cmp	r3, #99	@ 0x63
 8009f94:	dcee      	bgt.n	8009f74 <__exponent+0x1c>
 8009f96:	1eba      	subs	r2, r7, #2
 8009f98:	1ca8      	adds	r0, r5, #2
 8009f9a:	0001      	movs	r1, r0
 8009f9c:	0013      	movs	r3, r2
 8009f9e:	3430      	adds	r4, #48	@ 0x30
 8009fa0:	7014      	strb	r4, [r2, #0]
 8009fa2:	ac02      	add	r4, sp, #8
 8009fa4:	3407      	adds	r4, #7
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d80a      	bhi.n	8009fc0 <__exponent+0x68>
 8009faa:	2300      	movs	r3, #0
 8009fac:	4294      	cmp	r4, r2
 8009fae:	d303      	bcc.n	8009fb8 <__exponent+0x60>
 8009fb0:	3309      	adds	r3, #9
 8009fb2:	aa02      	add	r2, sp, #8
 8009fb4:	189b      	adds	r3, r3, r2
 8009fb6:	1bdb      	subs	r3, r3, r7
 8009fb8:	18c0      	adds	r0, r0, r3
 8009fba:	1b40      	subs	r0, r0, r5
 8009fbc:	b005      	add	sp, #20
 8009fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc0:	781c      	ldrb	r4, [r3, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	700c      	strb	r4, [r1, #0]
 8009fc6:	3101      	adds	r1, #1
 8009fc8:	e7eb      	b.n	8009fa2 <__exponent+0x4a>
 8009fca:	2330      	movs	r3, #48	@ 0x30
 8009fcc:	18e4      	adds	r4, r4, r3
 8009fce:	70ab      	strb	r3, [r5, #2]
 8009fd0:	1d28      	adds	r0, r5, #4
 8009fd2:	70ec      	strb	r4, [r5, #3]
 8009fd4:	e7f1      	b.n	8009fba <__exponent+0x62>
	...

08009fd8 <_printf_float>:
 8009fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fda:	b097      	sub	sp, #92	@ 0x5c
 8009fdc:	000d      	movs	r5, r1
 8009fde:	920a      	str	r2, [sp, #40]	@ 0x28
 8009fe0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe4:	9009      	str	r0, [sp, #36]	@ 0x24
 8009fe6:	f000 fceb 	bl	800a9c0 <_localeconv_r>
 8009fea:	6803      	ldr	r3, [r0, #0]
 8009fec:	0018      	movs	r0, r3
 8009fee:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ff0:	f7f6 f88a 	bl	8000108 <strlen>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009ff8:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ffa:	7e2b      	ldrb	r3, [r5, #24]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	930c      	str	r3, [sp, #48]	@ 0x30
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	930e      	str	r3, [sp, #56]	@ 0x38
 800a004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	05c9      	lsls	r1, r1, #23
 800a00a:	d545      	bpl.n	800a098 <_printf_float+0xc0>
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	4393      	bics	r3, r2
 800a010:	001a      	movs	r2, r3
 800a012:	3208      	adds	r2, #8
 800a014:	6022      	str	r2, [r4, #0]
 800a016:	2201      	movs	r2, #1
 800a018:	681e      	ldr	r6, [r3, #0]
 800a01a:	685f      	ldr	r7, [r3, #4]
 800a01c:	007b      	lsls	r3, r7, #1
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	9311      	str	r3, [sp, #68]	@ 0x44
 800a022:	9610      	str	r6, [sp, #64]	@ 0x40
 800a024:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a026:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a028:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a02a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a02c:	4ba7      	ldr	r3, [pc, #668]	@ (800a2cc <_printf_float+0x2f4>)
 800a02e:	4252      	negs	r2, r2
 800a030:	f7f8 fc92 	bl	8002958 <__aeabi_dcmpun>
 800a034:	2800      	cmp	r0, #0
 800a036:	d131      	bne.n	800a09c <_printf_float+0xc4>
 800a038:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a03a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a03c:	2201      	movs	r2, #1
 800a03e:	4ba3      	ldr	r3, [pc, #652]	@ (800a2cc <_printf_float+0x2f4>)
 800a040:	4252      	negs	r2, r2
 800a042:	f7f6 fa13 	bl	800046c <__aeabi_dcmple>
 800a046:	2800      	cmp	r0, #0
 800a048:	d128      	bne.n	800a09c <_printf_float+0xc4>
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	0030      	movs	r0, r6
 800a050:	0039      	movs	r1, r7
 800a052:	f7f6 fa01 	bl	8000458 <__aeabi_dcmplt>
 800a056:	2800      	cmp	r0, #0
 800a058:	d003      	beq.n	800a062 <_printf_float+0x8a>
 800a05a:	002b      	movs	r3, r5
 800a05c:	222d      	movs	r2, #45	@ 0x2d
 800a05e:	3343      	adds	r3, #67	@ 0x43
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a064:	4f9a      	ldr	r7, [pc, #616]	@ (800a2d0 <_printf_float+0x2f8>)
 800a066:	2b47      	cmp	r3, #71	@ 0x47
 800a068:	d800      	bhi.n	800a06c <_printf_float+0x94>
 800a06a:	4f9a      	ldr	r7, [pc, #616]	@ (800a2d4 <_printf_float+0x2fc>)
 800a06c:	2303      	movs	r3, #3
 800a06e:	2400      	movs	r4, #0
 800a070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a072:	612b      	str	r3, [r5, #16]
 800a074:	3301      	adds	r3, #1
 800a076:	439a      	bics	r2, r3
 800a078:	602a      	str	r2, [r5, #0]
 800a07a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a07c:	0029      	movs	r1, r5
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a084:	aa15      	add	r2, sp, #84	@ 0x54
 800a086:	f000 f9e5 	bl	800a454 <_printf_common>
 800a08a:	3001      	adds	r0, #1
 800a08c:	d000      	beq.n	800a090 <_printf_float+0xb8>
 800a08e:	e09e      	b.n	800a1ce <_printf_float+0x1f6>
 800a090:	2001      	movs	r0, #1
 800a092:	4240      	negs	r0, r0
 800a094:	b017      	add	sp, #92	@ 0x5c
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	3307      	adds	r3, #7
 800a09a:	e7b8      	b.n	800a00e <_printf_float+0x36>
 800a09c:	0032      	movs	r2, r6
 800a09e:	003b      	movs	r3, r7
 800a0a0:	0030      	movs	r0, r6
 800a0a2:	0039      	movs	r1, r7
 800a0a4:	f7f8 fc58 	bl	8002958 <__aeabi_dcmpun>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d00b      	beq.n	800a0c4 <_printf_float+0xec>
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	da03      	bge.n	800a0b8 <_printf_float+0xe0>
 800a0b0:	002b      	movs	r3, r5
 800a0b2:	222d      	movs	r2, #45	@ 0x2d
 800a0b4:	3343      	adds	r3, #67	@ 0x43
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0ba:	4f87      	ldr	r7, [pc, #540]	@ (800a2d8 <_printf_float+0x300>)
 800a0bc:	2b47      	cmp	r3, #71	@ 0x47
 800a0be:	d8d5      	bhi.n	800a06c <_printf_float+0x94>
 800a0c0:	4f86      	ldr	r7, [pc, #536]	@ (800a2dc <_printf_float+0x304>)
 800a0c2:	e7d3      	b.n	800a06c <_printf_float+0x94>
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a0c8:	686b      	ldr	r3, [r5, #4]
 800a0ca:	4394      	bics	r4, r2
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	d146      	bne.n	800a15e <_printf_float+0x186>
 800a0d0:	3307      	adds	r3, #7
 800a0d2:	606b      	str	r3, [r5, #4]
 800a0d4:	2380      	movs	r3, #128	@ 0x80
 800a0d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	2200      	movs	r2, #0
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	9206      	str	r2, [sp, #24]
 800a0e2:	aa14      	add	r2, sp, #80	@ 0x50
 800a0e4:	9205      	str	r2, [sp, #20]
 800a0e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a0e8:	a90a      	add	r1, sp, #40	@ 0x28
 800a0ea:	9204      	str	r2, [sp, #16]
 800a0ec:	aa13      	add	r2, sp, #76	@ 0x4c
 800a0ee:	9203      	str	r2, [sp, #12]
 800a0f0:	2223      	movs	r2, #35	@ 0x23
 800a0f2:	1852      	adds	r2, r2, r1
 800a0f4:	9202      	str	r2, [sp, #8]
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	686b      	ldr	r3, [r5, #4]
 800a0fa:	0032      	movs	r2, r6
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a100:	003b      	movs	r3, r7
 800a102:	f7ff fec3 	bl	8009e8c <__cvt>
 800a106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a108:	0007      	movs	r7, r0
 800a10a:	2c47      	cmp	r4, #71	@ 0x47
 800a10c:	d12d      	bne.n	800a16a <_printf_float+0x192>
 800a10e:	1cd3      	adds	r3, r2, #3
 800a110:	db02      	blt.n	800a118 <_printf_float+0x140>
 800a112:	686b      	ldr	r3, [r5, #4]
 800a114:	429a      	cmp	r2, r3
 800a116:	dd47      	ble.n	800a1a8 <_printf_float+0x1d0>
 800a118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a11a:	3b02      	subs	r3, #2
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a120:	0028      	movs	r0, r5
 800a122:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a124:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a126:	3901      	subs	r1, #1
 800a128:	3050      	adds	r0, #80	@ 0x50
 800a12a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a12c:	f7ff ff14 	bl	8009f58 <__exponent>
 800a130:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a132:	0004      	movs	r4, r0
 800a134:	1813      	adds	r3, r2, r0
 800a136:	612b      	str	r3, [r5, #16]
 800a138:	2a01      	cmp	r2, #1
 800a13a:	dc02      	bgt.n	800a142 <_printf_float+0x16a>
 800a13c:	682a      	ldr	r2, [r5, #0]
 800a13e:	07d2      	lsls	r2, r2, #31
 800a140:	d501      	bpl.n	800a146 <_printf_float+0x16e>
 800a142:	3301      	adds	r3, #1
 800a144:	612b      	str	r3, [r5, #16]
 800a146:	2323      	movs	r3, #35	@ 0x23
 800a148:	aa0a      	add	r2, sp, #40	@ 0x28
 800a14a:	189b      	adds	r3, r3, r2
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d100      	bne.n	800a154 <_printf_float+0x17c>
 800a152:	e792      	b.n	800a07a <_printf_float+0xa2>
 800a154:	002b      	movs	r3, r5
 800a156:	222d      	movs	r2, #45	@ 0x2d
 800a158:	3343      	adds	r3, #67	@ 0x43
 800a15a:	701a      	strb	r2, [r3, #0]
 800a15c:	e78d      	b.n	800a07a <_printf_float+0xa2>
 800a15e:	2c47      	cmp	r4, #71	@ 0x47
 800a160:	d1b8      	bne.n	800a0d4 <_printf_float+0xfc>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1b6      	bne.n	800a0d4 <_printf_float+0xfc>
 800a166:	3301      	adds	r3, #1
 800a168:	e7b3      	b.n	800a0d2 <_printf_float+0xfa>
 800a16a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a16c:	2b65      	cmp	r3, #101	@ 0x65
 800a16e:	d9d7      	bls.n	800a120 <_printf_float+0x148>
 800a170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a172:	2b66      	cmp	r3, #102	@ 0x66
 800a174:	d11a      	bne.n	800a1ac <_printf_float+0x1d4>
 800a176:	686b      	ldr	r3, [r5, #4]
 800a178:	2a00      	cmp	r2, #0
 800a17a:	dd09      	ble.n	800a190 <_printf_float+0x1b8>
 800a17c:	612a      	str	r2, [r5, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <_printf_float+0x1b0>
 800a182:	6829      	ldr	r1, [r5, #0]
 800a184:	07c9      	lsls	r1, r1, #31
 800a186:	d50b      	bpl.n	800a1a0 <_printf_float+0x1c8>
 800a188:	3301      	adds	r3, #1
 800a18a:	189b      	adds	r3, r3, r2
 800a18c:	612b      	str	r3, [r5, #16]
 800a18e:	e007      	b.n	800a1a0 <_printf_float+0x1c8>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <_printf_float+0x1c4>
 800a194:	2201      	movs	r2, #1
 800a196:	6829      	ldr	r1, [r5, #0]
 800a198:	4211      	tst	r1, r2
 800a19a:	d000      	beq.n	800a19e <_printf_float+0x1c6>
 800a19c:	1c9a      	adds	r2, r3, #2
 800a19e:	612a      	str	r2, [r5, #16]
 800a1a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a1a6:	e7ce      	b.n	800a146 <_printf_float+0x16e>
 800a1a8:	2367      	movs	r3, #103	@ 0x67
 800a1aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1ac:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a1ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	db06      	blt.n	800a1c2 <_printf_float+0x1ea>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	6129      	str	r1, [r5, #16]
 800a1b8:	07db      	lsls	r3, r3, #31
 800a1ba:	d5f1      	bpl.n	800a1a0 <_printf_float+0x1c8>
 800a1bc:	3101      	adds	r1, #1
 800a1be:	6129      	str	r1, [r5, #16]
 800a1c0:	e7ee      	b.n	800a1a0 <_printf_float+0x1c8>
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	dce0      	bgt.n	800a18a <_printf_float+0x1b2>
 800a1c8:	1892      	adds	r2, r2, r2
 800a1ca:	1a52      	subs	r2, r2, r1
 800a1cc:	e7dd      	b.n	800a18a <_printf_float+0x1b2>
 800a1ce:	682a      	ldr	r2, [r5, #0]
 800a1d0:	0553      	lsls	r3, r2, #21
 800a1d2:	d408      	bmi.n	800a1e6 <_printf_float+0x20e>
 800a1d4:	692b      	ldr	r3, [r5, #16]
 800a1d6:	003a      	movs	r2, r7
 800a1d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a1de:	47a0      	blx	r4
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d129      	bne.n	800a238 <_printf_float+0x260>
 800a1e4:	e754      	b.n	800a090 <_printf_float+0xb8>
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1e8:	2b65      	cmp	r3, #101	@ 0x65
 800a1ea:	d800      	bhi.n	800a1ee <_printf_float+0x216>
 800a1ec:	e0db      	b.n	800a3a6 <_printf_float+0x3ce>
 800a1ee:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a1f0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f7f6 f929 	bl	800044c <__aeabi_dcmpeq>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d033      	beq.n	800a266 <_printf_float+0x28e>
 800a1fe:	2301      	movs	r3, #1
 800a200:	4a37      	ldr	r2, [pc, #220]	@ (800a2e0 <_printf_float+0x308>)
 800a202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a206:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a208:	47a0      	blx	r4
 800a20a:	3001      	adds	r0, #1
 800a20c:	d100      	bne.n	800a210 <_printf_float+0x238>
 800a20e:	e73f      	b.n	800a090 <_printf_float+0xb8>
 800a210:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a212:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a214:	42b3      	cmp	r3, r6
 800a216:	db02      	blt.n	800a21e <_printf_float+0x246>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d50c      	bpl.n	800a238 <_printf_float+0x260>
 800a21e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a222:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a224:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a228:	47a0      	blx	r4
 800a22a:	2400      	movs	r4, #0
 800a22c:	3001      	adds	r0, #1
 800a22e:	d100      	bne.n	800a232 <_printf_float+0x25a>
 800a230:	e72e      	b.n	800a090 <_printf_float+0xb8>
 800a232:	1e73      	subs	r3, r6, #1
 800a234:	42a3      	cmp	r3, r4
 800a236:	dc0a      	bgt.n	800a24e <_printf_float+0x276>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	079b      	lsls	r3, r3, #30
 800a23c:	d500      	bpl.n	800a240 <_printf_float+0x268>
 800a23e:	e106      	b.n	800a44e <_printf_float+0x476>
 800a240:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a242:	68e8      	ldr	r0, [r5, #12]
 800a244:	4298      	cmp	r0, r3
 800a246:	db00      	blt.n	800a24a <_printf_float+0x272>
 800a248:	e724      	b.n	800a094 <_printf_float+0xbc>
 800a24a:	0018      	movs	r0, r3
 800a24c:	e722      	b.n	800a094 <_printf_float+0xbc>
 800a24e:	002a      	movs	r2, r5
 800a250:	2301      	movs	r3, #1
 800a252:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a254:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a256:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a258:	321a      	adds	r2, #26
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	d100      	bne.n	800a262 <_printf_float+0x28a>
 800a260:	e716      	b.n	800a090 <_printf_float+0xb8>
 800a262:	3401      	adds	r4, #1
 800a264:	e7e5      	b.n	800a232 <_printf_float+0x25a>
 800a266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dc3b      	bgt.n	800a2e4 <_printf_float+0x30c>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2e0 <_printf_float+0x308>)
 800a270:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a274:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a276:	47a0      	blx	r4
 800a278:	3001      	adds	r0, #1
 800a27a:	d100      	bne.n	800a27e <_printf_float+0x2a6>
 800a27c:	e708      	b.n	800a090 <_printf_float+0xb8>
 800a27e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a282:	4333      	orrs	r3, r6
 800a284:	d102      	bne.n	800a28c <_printf_float+0x2b4>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	07db      	lsls	r3, r3, #31
 800a28a:	d5d5      	bpl.n	800a238 <_printf_float+0x260>
 800a28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a28e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a290:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a294:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a296:	47a0      	blx	r4
 800a298:	2300      	movs	r3, #0
 800a29a:	3001      	adds	r0, #1
 800a29c:	d100      	bne.n	800a2a0 <_printf_float+0x2c8>
 800a29e:	e6f7      	b.n	800a090 <_printf_float+0xb8>
 800a2a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2a6:	425b      	negs	r3, r3
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	dc01      	bgt.n	800a2b0 <_printf_float+0x2d8>
 800a2ac:	0033      	movs	r3, r6
 800a2ae:	e792      	b.n	800a1d6 <_printf_float+0x1fe>
 800a2b0:	002a      	movs	r2, r5
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a2ba:	321a      	adds	r2, #26
 800a2bc:	47a0      	blx	r4
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d100      	bne.n	800a2c4 <_printf_float+0x2ec>
 800a2c2:	e6e5      	b.n	800a090 <_printf_float+0xb8>
 800a2c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	e7ea      	b.n	800a2a0 <_printf_float+0x2c8>
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	7fefffff 	.word	0x7fefffff
 800a2d0:	0800cdcc 	.word	0x0800cdcc
 800a2d4:	0800cdc8 	.word	0x0800cdc8
 800a2d8:	0800cdd4 	.word	0x0800cdd4
 800a2dc:	0800cdd0 	.word	0x0800cdd0
 800a2e0:	0800cdd8 	.word	0x0800cdd8
 800a2e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a2e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2ea:	429e      	cmp	r6, r3
 800a2ec:	dd00      	ble.n	800a2f0 <_printf_float+0x318>
 800a2ee:	001e      	movs	r6, r3
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	dc31      	bgt.n	800a358 <_printf_float+0x380>
 800a2f4:	43f3      	mvns	r3, r6
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	17db      	asrs	r3, r3, #31
 800a2fa:	4033      	ands	r3, r6
 800a2fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a302:	1af3      	subs	r3, r6, r3
 800a304:	42a3      	cmp	r3, r4
 800a306:	dc30      	bgt.n	800a36a <_printf_float+0x392>
 800a308:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a30a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a30c:	429a      	cmp	r2, r3
 800a30e:	dc38      	bgt.n	800a382 <_printf_float+0x3aa>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	07db      	lsls	r3, r3, #31
 800a314:	d435      	bmi.n	800a382 <_printf_float+0x3aa>
 800a316:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a31a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a31c:	1b9b      	subs	r3, r3, r6
 800a31e:	1b14      	subs	r4, r2, r4
 800a320:	429c      	cmp	r4, r3
 800a322:	dd00      	ble.n	800a326 <_printf_float+0x34e>
 800a324:	001c      	movs	r4, r3
 800a326:	2c00      	cmp	r4, #0
 800a328:	dc34      	bgt.n	800a394 <_printf_float+0x3bc>
 800a32a:	43e3      	mvns	r3, r4
 800a32c:	2600      	movs	r6, #0
 800a32e:	17db      	asrs	r3, r3, #31
 800a330:	401c      	ands	r4, r3
 800a332:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a334:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	1b1b      	subs	r3, r3, r4
 800a33a:	42b3      	cmp	r3, r6
 800a33c:	dc00      	bgt.n	800a340 <_printf_float+0x368>
 800a33e:	e77b      	b.n	800a238 <_printf_float+0x260>
 800a340:	002a      	movs	r2, r5
 800a342:	2301      	movs	r3, #1
 800a344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a348:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a34a:	321a      	adds	r2, #26
 800a34c:	47b8      	blx	r7
 800a34e:	3001      	adds	r0, #1
 800a350:	d100      	bne.n	800a354 <_printf_float+0x37c>
 800a352:	e69d      	b.n	800a090 <_printf_float+0xb8>
 800a354:	3601      	adds	r6, #1
 800a356:	e7ec      	b.n	800a332 <_printf_float+0x35a>
 800a358:	0033      	movs	r3, r6
 800a35a:	003a      	movs	r2, r7
 800a35c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a35e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a360:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a362:	47a0      	blx	r4
 800a364:	3001      	adds	r0, #1
 800a366:	d1c5      	bne.n	800a2f4 <_printf_float+0x31c>
 800a368:	e692      	b.n	800a090 <_printf_float+0xb8>
 800a36a:	002a      	movs	r2, r5
 800a36c:	2301      	movs	r3, #1
 800a36e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a372:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a374:	321a      	adds	r2, #26
 800a376:	47b0      	blx	r6
 800a378:	3001      	adds	r0, #1
 800a37a:	d100      	bne.n	800a37e <_printf_float+0x3a6>
 800a37c:	e688      	b.n	800a090 <_printf_float+0xb8>
 800a37e:	3401      	adds	r4, #1
 800a380:	e7bd      	b.n	800a2fe <_printf_float+0x326>
 800a382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a386:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a388:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a38a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a38c:	47a0      	blx	r4
 800a38e:	3001      	adds	r0, #1
 800a390:	d1c1      	bne.n	800a316 <_printf_float+0x33e>
 800a392:	e67d      	b.n	800a090 <_printf_float+0xb8>
 800a394:	19ba      	adds	r2, r7, r6
 800a396:	0023      	movs	r3, r4
 800a398:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a39a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a39c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a39e:	47b0      	blx	r6
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d1c2      	bne.n	800a32a <_printf_float+0x352>
 800a3a4:	e674      	b.n	800a090 <_printf_float+0xb8>
 800a3a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	dc02      	bgt.n	800a3b4 <_printf_float+0x3dc>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	421a      	tst	r2, r3
 800a3b2:	d039      	beq.n	800a428 <_printf_float+0x450>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	003a      	movs	r2, r7
 800a3b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a3be:	47b0      	blx	r6
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d100      	bne.n	800a3c6 <_printf_float+0x3ee>
 800a3c4:	e664      	b.n	800a090 <_printf_float+0xb8>
 800a3c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a3d0:	47b0      	blx	r6
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	d100      	bne.n	800a3d8 <_printf_float+0x400>
 800a3d6:	e65b      	b.n	800a090 <_printf_float+0xb8>
 800a3d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a3da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3de:	2200      	movs	r2, #0
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f7f6 f831 	bl	800044c <__aeabi_dcmpeq>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d11a      	bne.n	800a424 <_printf_float+0x44c>
 800a3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3f0:	1c7a      	adds	r2, r7, #1
 800a3f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a3f8:	47b0      	blx	r6
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d10e      	bne.n	800a41c <_printf_float+0x444>
 800a3fe:	e647      	b.n	800a090 <_printf_float+0xb8>
 800a400:	002a      	movs	r2, r5
 800a402:	2301      	movs	r3, #1
 800a404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a408:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a40a:	321a      	adds	r2, #26
 800a40c:	47b8      	blx	r7
 800a40e:	3001      	adds	r0, #1
 800a410:	d100      	bne.n	800a414 <_printf_float+0x43c>
 800a412:	e63d      	b.n	800a090 <_printf_float+0xb8>
 800a414:	3601      	adds	r6, #1
 800a416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a418:	429e      	cmp	r6, r3
 800a41a:	dbf1      	blt.n	800a400 <_printf_float+0x428>
 800a41c:	002a      	movs	r2, r5
 800a41e:	0023      	movs	r3, r4
 800a420:	3250      	adds	r2, #80	@ 0x50
 800a422:	e6d9      	b.n	800a1d8 <_printf_float+0x200>
 800a424:	2600      	movs	r6, #0
 800a426:	e7f6      	b.n	800a416 <_printf_float+0x43e>
 800a428:	003a      	movs	r2, r7
 800a42a:	e7e2      	b.n	800a3f2 <_printf_float+0x41a>
 800a42c:	002a      	movs	r2, r5
 800a42e:	2301      	movs	r3, #1
 800a430:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a434:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a436:	3219      	adds	r2, #25
 800a438:	47b0      	blx	r6
 800a43a:	3001      	adds	r0, #1
 800a43c:	d100      	bne.n	800a440 <_printf_float+0x468>
 800a43e:	e627      	b.n	800a090 <_printf_float+0xb8>
 800a440:	3401      	adds	r4, #1
 800a442:	68eb      	ldr	r3, [r5, #12]
 800a444:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	42a3      	cmp	r3, r4
 800a44a:	dcef      	bgt.n	800a42c <_printf_float+0x454>
 800a44c:	e6f8      	b.n	800a240 <_printf_float+0x268>
 800a44e:	2400      	movs	r4, #0
 800a450:	e7f7      	b.n	800a442 <_printf_float+0x46a>
 800a452:	46c0      	nop			@ (mov r8, r8)

0800a454 <_printf_common>:
 800a454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a456:	0016      	movs	r6, r2
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	688a      	ldr	r2, [r1, #8]
 800a45c:	690b      	ldr	r3, [r1, #16]
 800a45e:	000c      	movs	r4, r1
 800a460:	9000      	str	r0, [sp, #0]
 800a462:	4293      	cmp	r3, r2
 800a464:	da00      	bge.n	800a468 <_printf_common+0x14>
 800a466:	0013      	movs	r3, r2
 800a468:	0022      	movs	r2, r4
 800a46a:	6033      	str	r3, [r6, #0]
 800a46c:	3243      	adds	r2, #67	@ 0x43
 800a46e:	7812      	ldrb	r2, [r2, #0]
 800a470:	2a00      	cmp	r2, #0
 800a472:	d001      	beq.n	800a478 <_printf_common+0x24>
 800a474:	3301      	adds	r3, #1
 800a476:	6033      	str	r3, [r6, #0]
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	069b      	lsls	r3, r3, #26
 800a47c:	d502      	bpl.n	800a484 <_printf_common+0x30>
 800a47e:	6833      	ldr	r3, [r6, #0]
 800a480:	3302      	adds	r3, #2
 800a482:	6033      	str	r3, [r6, #0]
 800a484:	6822      	ldr	r2, [r4, #0]
 800a486:	2306      	movs	r3, #6
 800a488:	0015      	movs	r5, r2
 800a48a:	401d      	ands	r5, r3
 800a48c:	421a      	tst	r2, r3
 800a48e:	d027      	beq.n	800a4e0 <_printf_common+0x8c>
 800a490:	0023      	movs	r3, r4
 800a492:	3343      	adds	r3, #67	@ 0x43
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	1e5a      	subs	r2, r3, #1
 800a498:	4193      	sbcs	r3, r2
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	0692      	lsls	r2, r2, #26
 800a49e:	d430      	bmi.n	800a502 <_printf_common+0xae>
 800a4a0:	0022      	movs	r2, r4
 800a4a2:	9901      	ldr	r1, [sp, #4]
 800a4a4:	9800      	ldr	r0, [sp, #0]
 800a4a6:	9d08      	ldr	r5, [sp, #32]
 800a4a8:	3243      	adds	r2, #67	@ 0x43
 800a4aa:	47a8      	blx	r5
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d025      	beq.n	800a4fc <_printf_common+0xa8>
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	2500      	movs	r5, #0
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d105      	bne.n	800a4c8 <_printf_common+0x74>
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	68e5      	ldr	r5, [r4, #12]
 800a4c0:	1aed      	subs	r5, r5, r3
 800a4c2:	43eb      	mvns	r3, r5
 800a4c4:	17db      	asrs	r3, r3, #31
 800a4c6:	401d      	ands	r5, r3
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	6922      	ldr	r2, [r4, #16]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	dd01      	ble.n	800a4d4 <_printf_common+0x80>
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	18ed      	adds	r5, r5, r3
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	42b5      	cmp	r5, r6
 800a4d8:	d120      	bne.n	800a51c <_printf_common+0xc8>
 800a4da:	2000      	movs	r0, #0
 800a4dc:	e010      	b.n	800a500 <_printf_common+0xac>
 800a4de:	3501      	adds	r5, #1
 800a4e0:	68e3      	ldr	r3, [r4, #12]
 800a4e2:	6832      	ldr	r2, [r6, #0]
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	42ab      	cmp	r3, r5
 800a4e8:	ddd2      	ble.n	800a490 <_printf_common+0x3c>
 800a4ea:	0022      	movs	r2, r4
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9901      	ldr	r1, [sp, #4]
 800a4f0:	9800      	ldr	r0, [sp, #0]
 800a4f2:	9f08      	ldr	r7, [sp, #32]
 800a4f4:	3219      	adds	r2, #25
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d1f0      	bne.n	800a4de <_printf_common+0x8a>
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	4240      	negs	r0, r0
 800a500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a502:	2030      	movs	r0, #48	@ 0x30
 800a504:	18e1      	adds	r1, r4, r3
 800a506:	3143      	adds	r1, #67	@ 0x43
 800a508:	7008      	strb	r0, [r1, #0]
 800a50a:	0021      	movs	r1, r4
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	3145      	adds	r1, #69	@ 0x45
 800a510:	7809      	ldrb	r1, [r1, #0]
 800a512:	18a2      	adds	r2, r4, r2
 800a514:	3243      	adds	r2, #67	@ 0x43
 800a516:	3302      	adds	r3, #2
 800a518:	7011      	strb	r1, [r2, #0]
 800a51a:	e7c1      	b.n	800a4a0 <_printf_common+0x4c>
 800a51c:	0022      	movs	r2, r4
 800a51e:	2301      	movs	r3, #1
 800a520:	9901      	ldr	r1, [sp, #4]
 800a522:	9800      	ldr	r0, [sp, #0]
 800a524:	9f08      	ldr	r7, [sp, #32]
 800a526:	321a      	adds	r2, #26
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	d0e6      	beq.n	800a4fc <_printf_common+0xa8>
 800a52e:	3601      	adds	r6, #1
 800a530:	e7d1      	b.n	800a4d6 <_printf_common+0x82>
	...

0800a534 <_printf_i>:
 800a534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a536:	b08b      	sub	sp, #44	@ 0x2c
 800a538:	9206      	str	r2, [sp, #24]
 800a53a:	000a      	movs	r2, r1
 800a53c:	3243      	adds	r2, #67	@ 0x43
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	9005      	str	r0, [sp, #20]
 800a542:	9203      	str	r2, [sp, #12]
 800a544:	7e0a      	ldrb	r2, [r1, #24]
 800a546:	000c      	movs	r4, r1
 800a548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a54a:	2a78      	cmp	r2, #120	@ 0x78
 800a54c:	d809      	bhi.n	800a562 <_printf_i+0x2e>
 800a54e:	2a62      	cmp	r2, #98	@ 0x62
 800a550:	d80b      	bhi.n	800a56a <_printf_i+0x36>
 800a552:	2a00      	cmp	r2, #0
 800a554:	d100      	bne.n	800a558 <_printf_i+0x24>
 800a556:	e0ba      	b.n	800a6ce <_printf_i+0x19a>
 800a558:	497a      	ldr	r1, [pc, #488]	@ (800a744 <_printf_i+0x210>)
 800a55a:	9104      	str	r1, [sp, #16]
 800a55c:	2a58      	cmp	r2, #88	@ 0x58
 800a55e:	d100      	bne.n	800a562 <_printf_i+0x2e>
 800a560:	e08e      	b.n	800a680 <_printf_i+0x14c>
 800a562:	0025      	movs	r5, r4
 800a564:	3542      	adds	r5, #66	@ 0x42
 800a566:	702a      	strb	r2, [r5, #0]
 800a568:	e022      	b.n	800a5b0 <_printf_i+0x7c>
 800a56a:	0010      	movs	r0, r2
 800a56c:	3863      	subs	r0, #99	@ 0x63
 800a56e:	2815      	cmp	r0, #21
 800a570:	d8f7      	bhi.n	800a562 <_printf_i+0x2e>
 800a572:	f7f5 fddb 	bl	800012c <__gnu_thumb1_case_shi>
 800a576:	0016      	.short	0x0016
 800a578:	fff6001f 	.word	0xfff6001f
 800a57c:	fff6fff6 	.word	0xfff6fff6
 800a580:	001ffff6 	.word	0x001ffff6
 800a584:	fff6fff6 	.word	0xfff6fff6
 800a588:	fff6fff6 	.word	0xfff6fff6
 800a58c:	0036009f 	.word	0x0036009f
 800a590:	fff6007e 	.word	0xfff6007e
 800a594:	00b0fff6 	.word	0x00b0fff6
 800a598:	0036fff6 	.word	0x0036fff6
 800a59c:	fff6fff6 	.word	0xfff6fff6
 800a5a0:	0082      	.short	0x0082
 800a5a2:	0025      	movs	r5, r4
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	3542      	adds	r5, #66	@ 0x42
 800a5a8:	1d11      	adds	r1, r2, #4
 800a5aa:	6019      	str	r1, [r3, #0]
 800a5ac:	6813      	ldr	r3, [r2, #0]
 800a5ae:	702b      	strb	r3, [r5, #0]
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e09e      	b.n	800a6f2 <_printf_i+0x1be>
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	6809      	ldr	r1, [r1, #0]
 800a5b8:	1d02      	adds	r2, r0, #4
 800a5ba:	060d      	lsls	r5, r1, #24
 800a5bc:	d50b      	bpl.n	800a5d6 <_printf_i+0xa2>
 800a5be:	6806      	ldr	r6, [r0, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	da03      	bge.n	800a5ce <_printf_i+0x9a>
 800a5c6:	232d      	movs	r3, #45	@ 0x2d
 800a5c8:	9a03      	ldr	r2, [sp, #12]
 800a5ca:	4276      	negs	r6, r6
 800a5cc:	7013      	strb	r3, [r2, #0]
 800a5ce:	4b5d      	ldr	r3, [pc, #372]	@ (800a744 <_printf_i+0x210>)
 800a5d0:	270a      	movs	r7, #10
 800a5d2:	9304      	str	r3, [sp, #16]
 800a5d4:	e018      	b.n	800a608 <_printf_i+0xd4>
 800a5d6:	6806      	ldr	r6, [r0, #0]
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	0649      	lsls	r1, r1, #25
 800a5dc:	d5f1      	bpl.n	800a5c2 <_printf_i+0x8e>
 800a5de:	b236      	sxth	r6, r6
 800a5e0:	e7ef      	b.n	800a5c2 <_printf_i+0x8e>
 800a5e2:	6808      	ldr	r0, [r1, #0]
 800a5e4:	6819      	ldr	r1, [r3, #0]
 800a5e6:	c940      	ldmia	r1!, {r6}
 800a5e8:	0605      	lsls	r5, r0, #24
 800a5ea:	d402      	bmi.n	800a5f2 <_printf_i+0xbe>
 800a5ec:	0640      	lsls	r0, r0, #25
 800a5ee:	d500      	bpl.n	800a5f2 <_printf_i+0xbe>
 800a5f0:	b2b6      	uxth	r6, r6
 800a5f2:	6019      	str	r1, [r3, #0]
 800a5f4:	4b53      	ldr	r3, [pc, #332]	@ (800a744 <_printf_i+0x210>)
 800a5f6:	270a      	movs	r7, #10
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	2a6f      	cmp	r2, #111	@ 0x6f
 800a5fc:	d100      	bne.n	800a600 <_printf_i+0xcc>
 800a5fe:	3f02      	subs	r7, #2
 800a600:	0023      	movs	r3, r4
 800a602:	2200      	movs	r2, #0
 800a604:	3343      	adds	r3, #67	@ 0x43
 800a606:	701a      	strb	r2, [r3, #0]
 800a608:	6863      	ldr	r3, [r4, #4]
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	db06      	blt.n	800a61e <_printf_i+0xea>
 800a610:	2104      	movs	r1, #4
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	9d03      	ldr	r5, [sp, #12]
 800a616:	438a      	bics	r2, r1
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	4333      	orrs	r3, r6
 800a61c:	d00c      	beq.n	800a638 <_printf_i+0x104>
 800a61e:	9d03      	ldr	r5, [sp, #12]
 800a620:	0030      	movs	r0, r6
 800a622:	0039      	movs	r1, r7
 800a624:	f7f5 fe12 	bl	800024c <__aeabi_uidivmod>
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	3d01      	subs	r5, #1
 800a62c:	5c5b      	ldrb	r3, [r3, r1]
 800a62e:	702b      	strb	r3, [r5, #0]
 800a630:	0033      	movs	r3, r6
 800a632:	0006      	movs	r6, r0
 800a634:	429f      	cmp	r7, r3
 800a636:	d9f3      	bls.n	800a620 <_printf_i+0xec>
 800a638:	2f08      	cmp	r7, #8
 800a63a:	d109      	bne.n	800a650 <_printf_i+0x11c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d506      	bpl.n	800a650 <_printf_i+0x11c>
 800a642:	6862      	ldr	r2, [r4, #4]
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	429a      	cmp	r2, r3
 800a648:	dc02      	bgt.n	800a650 <_printf_i+0x11c>
 800a64a:	2330      	movs	r3, #48	@ 0x30
 800a64c:	3d01      	subs	r5, #1
 800a64e:	702b      	strb	r3, [r5, #0]
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	1b5b      	subs	r3, r3, r5
 800a654:	6123      	str	r3, [r4, #16]
 800a656:	9b07      	ldr	r3, [sp, #28]
 800a658:	0021      	movs	r1, r4
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	9805      	ldr	r0, [sp, #20]
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	aa09      	add	r2, sp, #36	@ 0x24
 800a662:	f7ff fef7 	bl	800a454 <_printf_common>
 800a666:	3001      	adds	r0, #1
 800a668:	d148      	bne.n	800a6fc <_printf_i+0x1c8>
 800a66a:	2001      	movs	r0, #1
 800a66c:	4240      	negs	r0, r0
 800a66e:	b00b      	add	sp, #44	@ 0x2c
 800a670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a672:	2220      	movs	r2, #32
 800a674:	6809      	ldr	r1, [r1, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	6022      	str	r2, [r4, #0]
 800a67a:	2278      	movs	r2, #120	@ 0x78
 800a67c:	4932      	ldr	r1, [pc, #200]	@ (800a748 <_printf_i+0x214>)
 800a67e:	9104      	str	r1, [sp, #16]
 800a680:	0021      	movs	r1, r4
 800a682:	3145      	adds	r1, #69	@ 0x45
 800a684:	700a      	strb	r2, [r1, #0]
 800a686:	6819      	ldr	r1, [r3, #0]
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	c940      	ldmia	r1!, {r6}
 800a68c:	0610      	lsls	r0, r2, #24
 800a68e:	d402      	bmi.n	800a696 <_printf_i+0x162>
 800a690:	0650      	lsls	r0, r2, #25
 800a692:	d500      	bpl.n	800a696 <_printf_i+0x162>
 800a694:	b2b6      	uxth	r6, r6
 800a696:	6019      	str	r1, [r3, #0]
 800a698:	07d3      	lsls	r3, r2, #31
 800a69a:	d502      	bpl.n	800a6a2 <_printf_i+0x16e>
 800a69c:	2320      	movs	r3, #32
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	2e00      	cmp	r6, #0
 800a6a4:	d001      	beq.n	800a6aa <_printf_i+0x176>
 800a6a6:	2710      	movs	r7, #16
 800a6a8:	e7aa      	b.n	800a600 <_printf_i+0xcc>
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	4393      	bics	r3, r2
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	e7f8      	b.n	800a6a6 <_printf_i+0x172>
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	680d      	ldr	r5, [r1, #0]
 800a6b8:	1d10      	adds	r0, r2, #4
 800a6ba:	6949      	ldr	r1, [r1, #20]
 800a6bc:	6018      	str	r0, [r3, #0]
 800a6be:	6813      	ldr	r3, [r2, #0]
 800a6c0:	062e      	lsls	r6, r5, #24
 800a6c2:	d501      	bpl.n	800a6c8 <_printf_i+0x194>
 800a6c4:	6019      	str	r1, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <_printf_i+0x19a>
 800a6c8:	066d      	lsls	r5, r5, #25
 800a6ca:	d5fb      	bpl.n	800a6c4 <_printf_i+0x190>
 800a6cc:	8019      	strh	r1, [r3, #0]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9d03      	ldr	r5, [sp, #12]
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	e7bf      	b.n	800a656 <_printf_i+0x122>
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	1d11      	adds	r1, r2, #4
 800a6da:	6019      	str	r1, [r3, #0]
 800a6dc:	6815      	ldr	r5, [r2, #0]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	0028      	movs	r0, r5
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	f000 f9eb 	bl	800aabe <memchr>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d001      	beq.n	800a6f0 <_printf_i+0x1bc>
 800a6ec:	1b40      	subs	r0, r0, r5
 800a6ee:	6060      	str	r0, [r4, #4]
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	6123      	str	r3, [r4, #16]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9a03      	ldr	r2, [sp, #12]
 800a6f8:	7013      	strb	r3, [r2, #0]
 800a6fa:	e7ac      	b.n	800a656 <_printf_i+0x122>
 800a6fc:	002a      	movs	r2, r5
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	9906      	ldr	r1, [sp, #24]
 800a702:	9805      	ldr	r0, [sp, #20]
 800a704:	9d07      	ldr	r5, [sp, #28]
 800a706:	47a8      	blx	r5
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ae      	beq.n	800a66a <_printf_i+0x136>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d415      	bmi.n	800a73e <_printf_i+0x20a>
 800a712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a714:	68e0      	ldr	r0, [r4, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	daa9      	bge.n	800a66e <_printf_i+0x13a>
 800a71a:	0018      	movs	r0, r3
 800a71c:	e7a7      	b.n	800a66e <_printf_i+0x13a>
 800a71e:	0022      	movs	r2, r4
 800a720:	2301      	movs	r3, #1
 800a722:	9906      	ldr	r1, [sp, #24]
 800a724:	9805      	ldr	r0, [sp, #20]
 800a726:	9e07      	ldr	r6, [sp, #28]
 800a728:	3219      	adds	r2, #25
 800a72a:	47b0      	blx	r6
 800a72c:	3001      	adds	r0, #1
 800a72e:	d09c      	beq.n	800a66a <_printf_i+0x136>
 800a730:	3501      	adds	r5, #1
 800a732:	68e3      	ldr	r3, [r4, #12]
 800a734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	42ab      	cmp	r3, r5
 800a73a:	dcf0      	bgt.n	800a71e <_printf_i+0x1ea>
 800a73c:	e7e9      	b.n	800a712 <_printf_i+0x1de>
 800a73e:	2500      	movs	r5, #0
 800a740:	e7f7      	b.n	800a732 <_printf_i+0x1fe>
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	0800cdda 	.word	0x0800cdda
 800a748:	0800cdeb 	.word	0x0800cdeb

0800a74c <std>:
 800a74c:	2300      	movs	r3, #0
 800a74e:	b510      	push	{r4, lr}
 800a750:	0004      	movs	r4, r0
 800a752:	6003      	str	r3, [r0, #0]
 800a754:	6043      	str	r3, [r0, #4]
 800a756:	6083      	str	r3, [r0, #8]
 800a758:	8181      	strh	r1, [r0, #12]
 800a75a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a75c:	81c2      	strh	r2, [r0, #14]
 800a75e:	6103      	str	r3, [r0, #16]
 800a760:	6143      	str	r3, [r0, #20]
 800a762:	6183      	str	r3, [r0, #24]
 800a764:	0019      	movs	r1, r3
 800a766:	2208      	movs	r2, #8
 800a768:	305c      	adds	r0, #92	@ 0x5c
 800a76a:	f000 f921 	bl	800a9b0 <memset>
 800a76e:	4b0b      	ldr	r3, [pc, #44]	@ (800a79c <std+0x50>)
 800a770:	6224      	str	r4, [r4, #32]
 800a772:	6263      	str	r3, [r4, #36]	@ 0x24
 800a774:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a0 <std+0x54>)
 800a776:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a778:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a4 <std+0x58>)
 800a77a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a77c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <std+0x5c>)
 800a77e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a780:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <std+0x60>)
 800a782:	429c      	cmp	r4, r3
 800a784:	d005      	beq.n	800a792 <std+0x46>
 800a786:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <std+0x64>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	d002      	beq.n	800a792 <std+0x46>
 800a78c:	4b09      	ldr	r3, [pc, #36]	@ (800a7b4 <std+0x68>)
 800a78e:	429c      	cmp	r4, r3
 800a790:	d103      	bne.n	800a79a <std+0x4e>
 800a792:	0020      	movs	r0, r4
 800a794:	3058      	adds	r0, #88	@ 0x58
 800a796:	f000 f98f 	bl	800aab8 <__retarget_lock_init_recursive>
 800a79a:	bd10      	pop	{r4, pc}
 800a79c:	0800a919 	.word	0x0800a919
 800a7a0:	0800a941 	.word	0x0800a941
 800a7a4:	0800a979 	.word	0x0800a979
 800a7a8:	0800a9a5 	.word	0x0800a9a5
 800a7ac:	200004e8 	.word	0x200004e8
 800a7b0:	20000550 	.word	0x20000550
 800a7b4:	200005b8 	.word	0x200005b8

0800a7b8 <stdio_exit_handler>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4a03      	ldr	r2, [pc, #12]	@ (800a7c8 <stdio_exit_handler+0x10>)
 800a7bc:	4903      	ldr	r1, [pc, #12]	@ (800a7cc <stdio_exit_handler+0x14>)
 800a7be:	4804      	ldr	r0, [pc, #16]	@ (800a7d0 <stdio_exit_handler+0x18>)
 800a7c0:	f000 f86c 	bl	800a89c <_fwalk_sglue>
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	46c0      	nop			@ (mov r8, r8)
 800a7c8:	2000000c 	.word	0x2000000c
 800a7cc:	0800c4cd 	.word	0x0800c4cd
 800a7d0:	2000001c 	.word	0x2000001c

0800a7d4 <cleanup_stdio>:
 800a7d4:	6841      	ldr	r1, [r0, #4]
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <cleanup_stdio+0x30>)
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	0004      	movs	r4, r0
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	d001      	beq.n	800a7e4 <cleanup_stdio+0x10>
 800a7e0:	f001 fe74 	bl	800c4cc <_fflush_r>
 800a7e4:	68a1      	ldr	r1, [r4, #8]
 800a7e6:	4b08      	ldr	r3, [pc, #32]	@ (800a808 <cleanup_stdio+0x34>)
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	d002      	beq.n	800a7f2 <cleanup_stdio+0x1e>
 800a7ec:	0020      	movs	r0, r4
 800a7ee:	f001 fe6d 	bl	800c4cc <_fflush_r>
 800a7f2:	68e1      	ldr	r1, [r4, #12]
 800a7f4:	4b05      	ldr	r3, [pc, #20]	@ (800a80c <cleanup_stdio+0x38>)
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	d002      	beq.n	800a800 <cleanup_stdio+0x2c>
 800a7fa:	0020      	movs	r0, r4
 800a7fc:	f001 fe66 	bl	800c4cc <_fflush_r>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	200004e8 	.word	0x200004e8
 800a808:	20000550 	.word	0x20000550
 800a80c:	200005b8 	.word	0x200005b8

0800a810 <global_stdio_init.part.0>:
 800a810:	b510      	push	{r4, lr}
 800a812:	4b09      	ldr	r3, [pc, #36]	@ (800a838 <global_stdio_init.part.0+0x28>)
 800a814:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <global_stdio_init.part.0+0x2c>)
 800a816:	2104      	movs	r1, #4
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	4809      	ldr	r0, [pc, #36]	@ (800a840 <global_stdio_init.part.0+0x30>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	f7ff ff95 	bl	800a74c <std>
 800a822:	2201      	movs	r2, #1
 800a824:	2109      	movs	r1, #9
 800a826:	4807      	ldr	r0, [pc, #28]	@ (800a844 <global_stdio_init.part.0+0x34>)
 800a828:	f7ff ff90 	bl	800a74c <std>
 800a82c:	2202      	movs	r2, #2
 800a82e:	2112      	movs	r1, #18
 800a830:	4805      	ldr	r0, [pc, #20]	@ (800a848 <global_stdio_init.part.0+0x38>)
 800a832:	f7ff ff8b 	bl	800a74c <std>
 800a836:	bd10      	pop	{r4, pc}
 800a838:	20000620 	.word	0x20000620
 800a83c:	0800a7b9 	.word	0x0800a7b9
 800a840:	200004e8 	.word	0x200004e8
 800a844:	20000550 	.word	0x20000550
 800a848:	200005b8 	.word	0x200005b8

0800a84c <__sfp_lock_acquire>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	4802      	ldr	r0, [pc, #8]	@ (800a858 <__sfp_lock_acquire+0xc>)
 800a850:	f000 f933 	bl	800aaba <__retarget_lock_acquire_recursive>
 800a854:	bd10      	pop	{r4, pc}
 800a856:	46c0      	nop			@ (mov r8, r8)
 800a858:	20000629 	.word	0x20000629

0800a85c <__sfp_lock_release>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	4802      	ldr	r0, [pc, #8]	@ (800a868 <__sfp_lock_release+0xc>)
 800a860:	f000 f92c 	bl	800aabc <__retarget_lock_release_recursive>
 800a864:	bd10      	pop	{r4, pc}
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	20000629 	.word	0x20000629

0800a86c <__sinit>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	0004      	movs	r4, r0
 800a870:	f7ff ffec 	bl	800a84c <__sfp_lock_acquire>
 800a874:	6a23      	ldr	r3, [r4, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <__sinit+0x14>
 800a87a:	f7ff ffef 	bl	800a85c <__sfp_lock_release>
 800a87e:	bd10      	pop	{r4, pc}
 800a880:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <__sinit+0x28>)
 800a882:	6223      	str	r3, [r4, #32]
 800a884:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <__sinit+0x2c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f6      	bne.n	800a87a <__sinit+0xe>
 800a88c:	f7ff ffc0 	bl	800a810 <global_stdio_init.part.0>
 800a890:	e7f3      	b.n	800a87a <__sinit+0xe>
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	0800a7d5 	.word	0x0800a7d5
 800a898:	20000620 	.word	0x20000620

0800a89c <_fwalk_sglue>:
 800a89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a89e:	0014      	movs	r4, r2
 800a8a0:	2600      	movs	r6, #0
 800a8a2:	9000      	str	r0, [sp, #0]
 800a8a4:	9101      	str	r1, [sp, #4]
 800a8a6:	68a5      	ldr	r5, [r4, #8]
 800a8a8:	6867      	ldr	r7, [r4, #4]
 800a8aa:	3f01      	subs	r7, #1
 800a8ac:	d504      	bpl.n	800a8b8 <_fwalk_sglue+0x1c>
 800a8ae:	6824      	ldr	r4, [r4, #0]
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	d1f8      	bne.n	800a8a6 <_fwalk_sglue+0xa>
 800a8b4:	0030      	movs	r0, r6
 800a8b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8b8:	89ab      	ldrh	r3, [r5, #12]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d908      	bls.n	800a8d0 <_fwalk_sglue+0x34>
 800a8be:	220e      	movs	r2, #14
 800a8c0:	5eab      	ldrsh	r3, [r5, r2]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	d004      	beq.n	800a8d0 <_fwalk_sglue+0x34>
 800a8c6:	0029      	movs	r1, r5
 800a8c8:	9800      	ldr	r0, [sp, #0]
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	4798      	blx	r3
 800a8ce:	4306      	orrs	r6, r0
 800a8d0:	3568      	adds	r5, #104	@ 0x68
 800a8d2:	e7ea      	b.n	800a8aa <_fwalk_sglue+0xe>

0800a8d4 <siprintf>:
 800a8d4:	b40e      	push	{r1, r2, r3}
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	2400      	movs	r4, #0
 800a8da:	490c      	ldr	r1, [pc, #48]	@ (800a90c <siprintf+0x38>)
 800a8dc:	b09d      	sub	sp, #116	@ 0x74
 800a8de:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a8e0:	9002      	str	r0, [sp, #8]
 800a8e2:	9006      	str	r0, [sp, #24]
 800a8e4:	9107      	str	r1, [sp, #28]
 800a8e6:	9104      	str	r1, [sp, #16]
 800a8e8:	4809      	ldr	r0, [pc, #36]	@ (800a910 <siprintf+0x3c>)
 800a8ea:	490a      	ldr	r1, [pc, #40]	@ (800a914 <siprintf+0x40>)
 800a8ec:	cb04      	ldmia	r3!, {r2}
 800a8ee:	9105      	str	r1, [sp, #20]
 800a8f0:	6800      	ldr	r0, [r0, #0]
 800a8f2:	a902      	add	r1, sp, #8
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a8f8:	f001 fc64 	bl	800c1c4 <_svfiprintf_r>
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	701c      	strb	r4, [r3, #0]
 800a900:	b01d      	add	sp, #116	@ 0x74
 800a902:	bc10      	pop	{r4}
 800a904:	bc08      	pop	{r3}
 800a906:	b003      	add	sp, #12
 800a908:	4718      	bx	r3
 800a90a:	46c0      	nop			@ (mov r8, r8)
 800a90c:	7fffffff 	.word	0x7fffffff
 800a910:	20000018 	.word	0x20000018
 800a914:	ffff0208 	.word	0xffff0208

0800a918 <__sread>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	000c      	movs	r4, r1
 800a91c:	250e      	movs	r5, #14
 800a91e:	5f49      	ldrsh	r1, [r1, r5]
 800a920:	f000 f878 	bl	800aa14 <_read_r>
 800a924:	2800      	cmp	r0, #0
 800a926:	db03      	blt.n	800a930 <__sread+0x18>
 800a928:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a92a:	181b      	adds	r3, r3, r0
 800a92c:	6563      	str	r3, [r4, #84]	@ 0x54
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	4a02      	ldr	r2, [pc, #8]	@ (800a93c <__sread+0x24>)
 800a934:	4013      	ands	r3, r2
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	e7f9      	b.n	800a92e <__sread+0x16>
 800a93a:	46c0      	nop			@ (mov r8, r8)
 800a93c:	ffffefff 	.word	0xffffefff

0800a940 <__swrite>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	001f      	movs	r7, r3
 800a944:	898b      	ldrh	r3, [r1, #12]
 800a946:	0005      	movs	r5, r0
 800a948:	000c      	movs	r4, r1
 800a94a:	0016      	movs	r6, r2
 800a94c:	05db      	lsls	r3, r3, #23
 800a94e:	d505      	bpl.n	800a95c <__swrite+0x1c>
 800a950:	230e      	movs	r3, #14
 800a952:	5ec9      	ldrsh	r1, [r1, r3]
 800a954:	2200      	movs	r2, #0
 800a956:	2302      	movs	r3, #2
 800a958:	f000 f848 	bl	800a9ec <_lseek_r>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	4a05      	ldr	r2, [pc, #20]	@ (800a974 <__swrite+0x34>)
 800a960:	0028      	movs	r0, r5
 800a962:	4013      	ands	r3, r2
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	0032      	movs	r2, r6
 800a968:	230e      	movs	r3, #14
 800a96a:	5ee1      	ldrsh	r1, [r4, r3]
 800a96c:	003b      	movs	r3, r7
 800a96e:	f000 f865 	bl	800aa3c <_write_r>
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	ffffefff 	.word	0xffffefff

0800a978 <__sseek>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	000c      	movs	r4, r1
 800a97c:	250e      	movs	r5, #14
 800a97e:	5f49      	ldrsh	r1, [r1, r5]
 800a980:	f000 f834 	bl	800a9ec <_lseek_r>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	1c42      	adds	r2, r0, #1
 800a988:	d103      	bne.n	800a992 <__sseek+0x1a>
 800a98a:	4a05      	ldr	r2, [pc, #20]	@ (800a9a0 <__sseek+0x28>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	bd70      	pop	{r4, r5, r6, pc}
 800a992:	2280      	movs	r2, #128	@ 0x80
 800a994:	0152      	lsls	r2, r2, #5
 800a996:	4313      	orrs	r3, r2
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a99c:	e7f8      	b.n	800a990 <__sseek+0x18>
 800a99e:	46c0      	nop			@ (mov r8, r8)
 800a9a0:	ffffefff 	.word	0xffffefff

0800a9a4 <__sclose>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	230e      	movs	r3, #14
 800a9a8:	5ec9      	ldrsh	r1, [r1, r3]
 800a9aa:	f000 f80d 	bl	800a9c8 <_close_r>
 800a9ae:	bd10      	pop	{r4, pc}

0800a9b0 <memset>:
 800a9b0:	0003      	movs	r3, r0
 800a9b2:	1882      	adds	r2, r0, r2
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d100      	bne.n	800a9ba <memset+0xa>
 800a9b8:	4770      	bx	lr
 800a9ba:	7019      	strb	r1, [r3, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	e7f9      	b.n	800a9b4 <memset+0x4>

0800a9c0 <_localeconv_r>:
 800a9c0:	4800      	ldr	r0, [pc, #0]	@ (800a9c4 <_localeconv_r+0x4>)
 800a9c2:	4770      	bx	lr
 800a9c4:	20000158 	.word	0x20000158

0800a9c8 <_close_r>:
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	b570      	push	{r4, r5, r6, lr}
 800a9cc:	4d06      	ldr	r5, [pc, #24]	@ (800a9e8 <_close_r+0x20>)
 800a9ce:	0004      	movs	r4, r0
 800a9d0:	0008      	movs	r0, r1
 800a9d2:	602b      	str	r3, [r5, #0]
 800a9d4:	f7f9 ff4e 	bl	8004874 <_close>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d103      	bne.n	800a9e4 <_close_r+0x1c>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d000      	beq.n	800a9e4 <_close_r+0x1c>
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
 800a9e6:	46c0      	nop			@ (mov r8, r8)
 800a9e8:	20000624 	.word	0x20000624

0800a9ec <_lseek_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	0004      	movs	r4, r0
 800a9f0:	0008      	movs	r0, r1
 800a9f2:	0011      	movs	r1, r2
 800a9f4:	001a      	movs	r2, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4d05      	ldr	r5, [pc, #20]	@ (800aa10 <_lseek_r+0x24>)
 800a9fa:	602b      	str	r3, [r5, #0]
 800a9fc:	f7f9 ff5b 	bl	80048b6 <_lseek>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d103      	bne.n	800aa0c <_lseek_r+0x20>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d000      	beq.n	800aa0c <_lseek_r+0x20>
 800aa0a:	6023      	str	r3, [r4, #0]
 800aa0c:	bd70      	pop	{r4, r5, r6, pc}
 800aa0e:	46c0      	nop			@ (mov r8, r8)
 800aa10:	20000624 	.word	0x20000624

0800aa14 <_read_r>:
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	0004      	movs	r4, r0
 800aa18:	0008      	movs	r0, r1
 800aa1a:	0011      	movs	r1, r2
 800aa1c:	001a      	movs	r2, r3
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4d05      	ldr	r5, [pc, #20]	@ (800aa38 <_read_r+0x24>)
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f9 feed 	bl	8004802 <_read>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d103      	bne.n	800aa34 <_read_r+0x20>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d000      	beq.n	800aa34 <_read_r+0x20>
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	46c0      	nop			@ (mov r8, r8)
 800aa38:	20000624 	.word	0x20000624

0800aa3c <_write_r>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	0004      	movs	r4, r0
 800aa40:	0008      	movs	r0, r1
 800aa42:	0011      	movs	r1, r2
 800aa44:	001a      	movs	r2, r3
 800aa46:	2300      	movs	r3, #0
 800aa48:	4d05      	ldr	r5, [pc, #20]	@ (800aa60 <_write_r+0x24>)
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7f9 fef6 	bl	800483c <_write>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d103      	bne.n	800aa5c <_write_r+0x20>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d000      	beq.n	800aa5c <_write_r+0x20>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd70      	pop	{r4, r5, r6, pc}
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	20000624 	.word	0x20000624

0800aa64 <__errno>:
 800aa64:	4b01      	ldr	r3, [pc, #4]	@ (800aa6c <__errno+0x8>)
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	4770      	bx	lr
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	20000018 	.word	0x20000018

0800aa70 <__libc_init_array>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	2600      	movs	r6, #0
 800aa74:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa8 <__libc_init_array+0x38>)
 800aa76:	4d0d      	ldr	r5, [pc, #52]	@ (800aaac <__libc_init_array+0x3c>)
 800aa78:	1b64      	subs	r4, r4, r5
 800aa7a:	10a4      	asrs	r4, r4, #2
 800aa7c:	42a6      	cmp	r6, r4
 800aa7e:	d109      	bne.n	800aa94 <__libc_init_array+0x24>
 800aa80:	2600      	movs	r6, #0
 800aa82:	f002 f8f3 	bl	800cc6c <_init>
 800aa86:	4c0a      	ldr	r4, [pc, #40]	@ (800aab0 <__libc_init_array+0x40>)
 800aa88:	4d0a      	ldr	r5, [pc, #40]	@ (800aab4 <__libc_init_array+0x44>)
 800aa8a:	1b64      	subs	r4, r4, r5
 800aa8c:	10a4      	asrs	r4, r4, #2
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	d105      	bne.n	800aa9e <__libc_init_array+0x2e>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	00b3      	lsls	r3, r6, #2
 800aa96:	58eb      	ldr	r3, [r5, r3]
 800aa98:	4798      	blx	r3
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7ee      	b.n	800aa7c <__libc_init_array+0xc>
 800aa9e:	00b3      	lsls	r3, r6, #2
 800aaa0:	58eb      	ldr	r3, [r5, r3]
 800aaa2:	4798      	blx	r3
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	e7f2      	b.n	800aa8e <__libc_init_array+0x1e>
 800aaa8:	0800d144 	.word	0x0800d144
 800aaac:	0800d144 	.word	0x0800d144
 800aab0:	0800d148 	.word	0x0800d148
 800aab4:	0800d144 	.word	0x0800d144

0800aab8 <__retarget_lock_init_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <__retarget_lock_acquire_recursive>:
 800aaba:	4770      	bx	lr

0800aabc <__retarget_lock_release_recursive>:
 800aabc:	4770      	bx	lr

0800aabe <memchr>:
 800aabe:	b2c9      	uxtb	r1, r1
 800aac0:	1882      	adds	r2, r0, r2
 800aac2:	4290      	cmp	r0, r2
 800aac4:	d101      	bne.n	800aaca <memchr+0xc>
 800aac6:	2000      	movs	r0, #0
 800aac8:	4770      	bx	lr
 800aaca:	7803      	ldrb	r3, [r0, #0]
 800aacc:	428b      	cmp	r3, r1
 800aace:	d0fb      	beq.n	800aac8 <memchr+0xa>
 800aad0:	3001      	adds	r0, #1
 800aad2:	e7f6      	b.n	800aac2 <memchr+0x4>

0800aad4 <quorem>:
 800aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad6:	6903      	ldr	r3, [r0, #16]
 800aad8:	690c      	ldr	r4, [r1, #16]
 800aada:	b089      	sub	sp, #36	@ 0x24
 800aadc:	9003      	str	r0, [sp, #12]
 800aade:	9106      	str	r1, [sp, #24]
 800aae0:	2000      	movs	r0, #0
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	db63      	blt.n	800abae <quorem+0xda>
 800aae6:	000b      	movs	r3, r1
 800aae8:	3c01      	subs	r4, #1
 800aaea:	3314      	adds	r3, #20
 800aaec:	00a5      	lsls	r5, r4, #2
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	195b      	adds	r3, r3, r5
 800aaf2:	9305      	str	r3, [sp, #20]
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	3314      	adds	r3, #20
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	195d      	adds	r5, r3, r5
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	682f      	ldr	r7, [r5, #0]
 800ab00:	681e      	ldr	r6, [r3, #0]
 800ab02:	0038      	movs	r0, r7
 800ab04:	3601      	adds	r6, #1
 800ab06:	0031      	movs	r1, r6
 800ab08:	f7f5 fb1a 	bl	8000140 <__udivsi3>
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	42b7      	cmp	r7, r6
 800ab10:	d327      	bcc.n	800ab62 <quorem+0x8e>
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	2700      	movs	r7, #0
 800ab16:	469c      	mov	ip, r3
 800ab18:	9e01      	ldr	r6, [sp, #4]
 800ab1a:	9707      	str	r7, [sp, #28]
 800ab1c:	4662      	mov	r2, ip
 800ab1e:	ca08      	ldmia	r2!, {r3}
 800ab20:	6830      	ldr	r0, [r6, #0]
 800ab22:	4694      	mov	ip, r2
 800ab24:	9a02      	ldr	r2, [sp, #8]
 800ab26:	b299      	uxth	r1, r3
 800ab28:	4351      	muls	r1, r2
 800ab2a:	0c1b      	lsrs	r3, r3, #16
 800ab2c:	4353      	muls	r3, r2
 800ab2e:	19c9      	adds	r1, r1, r7
 800ab30:	0c0a      	lsrs	r2, r1, #16
 800ab32:	189b      	adds	r3, r3, r2
 800ab34:	b289      	uxth	r1, r1
 800ab36:	b282      	uxth	r2, r0
 800ab38:	1a52      	subs	r2, r2, r1
 800ab3a:	9907      	ldr	r1, [sp, #28]
 800ab3c:	0c1f      	lsrs	r7, r3, #16
 800ab3e:	1852      	adds	r2, r2, r1
 800ab40:	0c00      	lsrs	r0, r0, #16
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	1411      	asrs	r1, r2, #16
 800ab46:	1ac3      	subs	r3, r0, r3
 800ab48:	185b      	adds	r3, r3, r1
 800ab4a:	1419      	asrs	r1, r3, #16
 800ab4c:	b292      	uxth	r2, r2
 800ab4e:	041b      	lsls	r3, r3, #16
 800ab50:	431a      	orrs	r2, r3
 800ab52:	9b05      	ldr	r3, [sp, #20]
 800ab54:	9107      	str	r1, [sp, #28]
 800ab56:	c604      	stmia	r6!, {r2}
 800ab58:	4563      	cmp	r3, ip
 800ab5a:	d2df      	bcs.n	800ab1c <quorem+0x48>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d02b      	beq.n	800abba <quorem+0xe6>
 800ab62:	9906      	ldr	r1, [sp, #24]
 800ab64:	9803      	ldr	r0, [sp, #12]
 800ab66:	f001 f9b7 	bl	800bed8 <__mcmp>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	db1e      	blt.n	800abac <quorem+0xd8>
 800ab6e:	2600      	movs	r6, #0
 800ab70:	9d01      	ldr	r5, [sp, #4]
 800ab72:	9904      	ldr	r1, [sp, #16]
 800ab74:	c901      	ldmia	r1!, {r0}
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b287      	uxth	r7, r0
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	1bd2      	subs	r2, r2, r7
 800ab7e:	1992      	adds	r2, r2, r6
 800ab80:	0c00      	lsrs	r0, r0, #16
 800ab82:	0c1b      	lsrs	r3, r3, #16
 800ab84:	1a1b      	subs	r3, r3, r0
 800ab86:	1410      	asrs	r0, r2, #16
 800ab88:	181b      	adds	r3, r3, r0
 800ab8a:	141e      	asrs	r6, r3, #16
 800ab8c:	b292      	uxth	r2, r2
 800ab8e:	041b      	lsls	r3, r3, #16
 800ab90:	431a      	orrs	r2, r3
 800ab92:	9b05      	ldr	r3, [sp, #20]
 800ab94:	c504      	stmia	r5!, {r2}
 800ab96:	428b      	cmp	r3, r1
 800ab98:	d2ec      	bcs.n	800ab74 <quorem+0xa0>
 800ab9a:	9a01      	ldr	r2, [sp, #4]
 800ab9c:	00a3      	lsls	r3, r4, #2
 800ab9e:	18d3      	adds	r3, r2, r3
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	2a00      	cmp	r2, #0
 800aba4:	d014      	beq.n	800abd0 <quorem+0xfc>
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	3301      	adds	r3, #1
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	9802      	ldr	r0, [sp, #8]
 800abae:	b009      	add	sp, #36	@ 0x24
 800abb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d104      	bne.n	800abc2 <quorem+0xee>
 800abb8:	3c01      	subs	r4, #1
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	3d04      	subs	r5, #4
 800abbe:	42ab      	cmp	r3, r5
 800abc0:	d3f7      	bcc.n	800abb2 <quorem+0xde>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	611c      	str	r4, [r3, #16]
 800abc6:	e7cc      	b.n	800ab62 <quorem+0x8e>
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d104      	bne.n	800abd8 <quorem+0x104>
 800abce:	3c01      	subs	r4, #1
 800abd0:	9a01      	ldr	r2, [sp, #4]
 800abd2:	3b04      	subs	r3, #4
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d3f7      	bcc.n	800abc8 <quorem+0xf4>
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	611c      	str	r4, [r3, #16]
 800abdc:	e7e3      	b.n	800aba6 <quorem+0xd2>
	...

0800abe0 <_dtoa_r>:
 800abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe2:	0014      	movs	r4, r2
 800abe4:	001d      	movs	r5, r3
 800abe6:	69c6      	ldr	r6, [r0, #28]
 800abe8:	b09d      	sub	sp, #116	@ 0x74
 800abea:	940a      	str	r4, [sp, #40]	@ 0x28
 800abec:	950b      	str	r5, [sp, #44]	@ 0x2c
 800abee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800abf0:	9003      	str	r0, [sp, #12]
 800abf2:	2e00      	cmp	r6, #0
 800abf4:	d10f      	bne.n	800ac16 <_dtoa_r+0x36>
 800abf6:	2010      	movs	r0, #16
 800abf8:	f000 fe2c 	bl	800b854 <malloc>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	1e02      	subs	r2, r0, #0
 800ac00:	61d8      	str	r0, [r3, #28]
 800ac02:	d104      	bne.n	800ac0e <_dtoa_r+0x2e>
 800ac04:	21ef      	movs	r1, #239	@ 0xef
 800ac06:	4bc7      	ldr	r3, [pc, #796]	@ (800af24 <_dtoa_r+0x344>)
 800ac08:	48c7      	ldr	r0, [pc, #796]	@ (800af28 <_dtoa_r+0x348>)
 800ac0a:	f001 fcb9 	bl	800c580 <__assert_func>
 800ac0e:	6046      	str	r6, [r0, #4]
 800ac10:	6086      	str	r6, [r0, #8]
 800ac12:	6006      	str	r6, [r0, #0]
 800ac14:	60c6      	str	r6, [r0, #12]
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	6819      	ldr	r1, [r3, #0]
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d00b      	beq.n	800ac38 <_dtoa_r+0x58>
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	2301      	movs	r3, #1
 800ac24:	4093      	lsls	r3, r2
 800ac26:	604a      	str	r2, [r1, #4]
 800ac28:	608b      	str	r3, [r1, #8]
 800ac2a:	9803      	ldr	r0, [sp, #12]
 800ac2c:	f000 ff12 	bl	800ba54 <_Bfree>
 800ac30:	2200      	movs	r2, #0
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	2d00      	cmp	r5, #0
 800ac3a:	da1e      	bge.n	800ac7a <_dtoa_r+0x9a>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	006b      	lsls	r3, r5, #1
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac46:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ac48:	4bb8      	ldr	r3, [pc, #736]	@ (800af2c <_dtoa_r+0x34c>)
 800ac4a:	4ab8      	ldr	r2, [pc, #736]	@ (800af2c <_dtoa_r+0x34c>)
 800ac4c:	403b      	ands	r3, r7
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d116      	bne.n	800ac80 <_dtoa_r+0xa0>
 800ac52:	4bb7      	ldr	r3, [pc, #732]	@ (800af30 <_dtoa_r+0x350>)
 800ac54:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	033b      	lsls	r3, r7, #12
 800ac5a:	0b1b      	lsrs	r3, r3, #12
 800ac5c:	4323      	orrs	r3, r4
 800ac5e:	d101      	bne.n	800ac64 <_dtoa_r+0x84>
 800ac60:	f000 fd80 	bl	800b764 <_dtoa_r+0xb84>
 800ac64:	4bb3      	ldr	r3, [pc, #716]	@ (800af34 <_dtoa_r+0x354>)
 800ac66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ac68:	9308      	str	r3, [sp, #32]
 800ac6a:	2a00      	cmp	r2, #0
 800ac6c:	d002      	beq.n	800ac74 <_dtoa_r+0x94>
 800ac6e:	4bb2      	ldr	r3, [pc, #712]	@ (800af38 <_dtoa_r+0x358>)
 800ac70:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	9808      	ldr	r0, [sp, #32]
 800ac76:	b01d      	add	sp, #116	@ 0x74
 800ac78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	603b      	str	r3, [r7, #0]
 800ac7e:	e7e2      	b.n	800ac46 <_dtoa_r+0x66>
 800ac80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac84:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac86:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ac8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f7f5 fbdc 	bl	800044c <__aeabi_dcmpeq>
 800ac94:	1e06      	subs	r6, r0, #0
 800ac96:	d00b      	beq.n	800acb0 <_dtoa_r+0xd0>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <_dtoa_r+0xca>
 800aca4:	4ba5      	ldr	r3, [pc, #660]	@ (800af3c <_dtoa_r+0x35c>)
 800aca6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	4ba5      	ldr	r3, [pc, #660]	@ (800af40 <_dtoa_r+0x360>)
 800acac:	9308      	str	r3, [sp, #32]
 800acae:	e7e1      	b.n	800ac74 <_dtoa_r+0x94>
 800acb0:	ab1a      	add	r3, sp, #104	@ 0x68
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	9803      	ldr	r0, [sp, #12]
 800acba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800acbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acbe:	f001 f9c1 	bl	800c044 <__d2b>
 800acc2:	007a      	lsls	r2, r7, #1
 800acc4:	9005      	str	r0, [sp, #20]
 800acc6:	0d52      	lsrs	r2, r2, #21
 800acc8:	d100      	bne.n	800accc <_dtoa_r+0xec>
 800acca:	e07b      	b.n	800adc4 <_dtoa_r+0x1e4>
 800accc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acce:	9618      	str	r6, [sp, #96]	@ 0x60
 800acd0:	0319      	lsls	r1, r3, #12
 800acd2:	4b9c      	ldr	r3, [pc, #624]	@ (800af44 <_dtoa_r+0x364>)
 800acd4:	0b09      	lsrs	r1, r1, #12
 800acd6:	430b      	orrs	r3, r1
 800acd8:	499b      	ldr	r1, [pc, #620]	@ (800af48 <_dtoa_r+0x368>)
 800acda:	1857      	adds	r7, r2, r1
 800acdc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800acde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ace0:	0019      	movs	r1, r3
 800ace2:	2200      	movs	r2, #0
 800ace4:	4b99      	ldr	r3, [pc, #612]	@ (800af4c <_dtoa_r+0x36c>)
 800ace6:	f7f7 fa2d 	bl	8002144 <__aeabi_dsub>
 800acea:	4a99      	ldr	r2, [pc, #612]	@ (800af50 <_dtoa_r+0x370>)
 800acec:	4b99      	ldr	r3, [pc, #612]	@ (800af54 <_dtoa_r+0x374>)
 800acee:	f7f6 ff43 	bl	8001b78 <__aeabi_dmul>
 800acf2:	4a99      	ldr	r2, [pc, #612]	@ (800af58 <_dtoa_r+0x378>)
 800acf4:	4b99      	ldr	r3, [pc, #612]	@ (800af5c <_dtoa_r+0x37c>)
 800acf6:	f7f5 ff3f 	bl	8000b78 <__aeabi_dadd>
 800acfa:	0004      	movs	r4, r0
 800acfc:	0038      	movs	r0, r7
 800acfe:	000d      	movs	r5, r1
 800ad00:	f7f7 fe88 	bl	8002a14 <__aeabi_i2d>
 800ad04:	4a96      	ldr	r2, [pc, #600]	@ (800af60 <_dtoa_r+0x380>)
 800ad06:	4b97      	ldr	r3, [pc, #604]	@ (800af64 <_dtoa_r+0x384>)
 800ad08:	f7f6 ff36 	bl	8001b78 <__aeabi_dmul>
 800ad0c:	0002      	movs	r2, r0
 800ad0e:	000b      	movs	r3, r1
 800ad10:	0020      	movs	r0, r4
 800ad12:	0029      	movs	r1, r5
 800ad14:	f7f5 ff30 	bl	8000b78 <__aeabi_dadd>
 800ad18:	0004      	movs	r4, r0
 800ad1a:	000d      	movs	r5, r1
 800ad1c:	f7f7 fe3e 	bl	800299c <__aeabi_d2iz>
 800ad20:	2200      	movs	r2, #0
 800ad22:	9004      	str	r0, [sp, #16]
 800ad24:	2300      	movs	r3, #0
 800ad26:	0020      	movs	r0, r4
 800ad28:	0029      	movs	r1, r5
 800ad2a:	f7f5 fb95 	bl	8000458 <__aeabi_dcmplt>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d00b      	beq.n	800ad4a <_dtoa_r+0x16a>
 800ad32:	9804      	ldr	r0, [sp, #16]
 800ad34:	f7f7 fe6e 	bl	8002a14 <__aeabi_i2d>
 800ad38:	002b      	movs	r3, r5
 800ad3a:	0022      	movs	r2, r4
 800ad3c:	f7f5 fb86 	bl	800044c <__aeabi_dcmpeq>
 800ad40:	4243      	negs	r3, r0
 800ad42:	4158      	adcs	r0, r3
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	1a1b      	subs	r3, r3, r0
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad4e:	9b04      	ldr	r3, [sp, #16]
 800ad50:	2b16      	cmp	r3, #22
 800ad52:	d810      	bhi.n	800ad76 <_dtoa_r+0x196>
 800ad54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ad56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ad58:	9a04      	ldr	r2, [sp, #16]
 800ad5a:	4b83      	ldr	r3, [pc, #524]	@ (800af68 <_dtoa_r+0x388>)
 800ad5c:	00d2      	lsls	r2, r2, #3
 800ad5e:	189b      	adds	r3, r3, r2
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f7f5 fb78 	bl	8000458 <__aeabi_dcmplt>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d047      	beq.n	800adfc <_dtoa_r+0x21c>
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad76:	2200      	movs	r2, #0
 800ad78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ad7a:	9206      	str	r2, [sp, #24]
 800ad7c:	1bdb      	subs	r3, r3, r7
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	d53e      	bpl.n	800ae00 <_dtoa_r+0x220>
 800ad82:	2201      	movs	r2, #1
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	9306      	str	r3, [sp, #24]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	db38      	blt.n	800ae04 <_dtoa_r+0x224>
 800ad92:	9a04      	ldr	r2, [sp, #16]
 800ad94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad96:	4694      	mov	ip, r2
 800ad98:	4463      	add	r3, ip
 800ad9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ada0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ada2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ada4:	2401      	movs	r4, #1
 800ada6:	2b09      	cmp	r3, #9
 800ada8:	d862      	bhi.n	800ae70 <_dtoa_r+0x290>
 800adaa:	2b05      	cmp	r3, #5
 800adac:	dd02      	ble.n	800adb4 <_dtoa_r+0x1d4>
 800adae:	2400      	movs	r4, #0
 800adb0:	3b04      	subs	r3, #4
 800adb2:	9322      	str	r3, [sp, #136]	@ 0x88
 800adb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800adb6:	1e98      	subs	r0, r3, #2
 800adb8:	2803      	cmp	r0, #3
 800adba:	d863      	bhi.n	800ae84 <_dtoa_r+0x2a4>
 800adbc:	f7f5 f9ac 	bl	8000118 <__gnu_thumb1_case_uqi>
 800adc0:	2b385654 	.word	0x2b385654
 800adc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800adc6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800adc8:	18f6      	adds	r6, r6, r3
 800adca:	4b68      	ldr	r3, [pc, #416]	@ (800af6c <_dtoa_r+0x38c>)
 800adcc:	18f2      	adds	r2, r6, r3
 800adce:	2a20      	cmp	r2, #32
 800add0:	dd0f      	ble.n	800adf2 <_dtoa_r+0x212>
 800add2:	2340      	movs	r3, #64	@ 0x40
 800add4:	1a9b      	subs	r3, r3, r2
 800add6:	409f      	lsls	r7, r3
 800add8:	4b65      	ldr	r3, [pc, #404]	@ (800af70 <_dtoa_r+0x390>)
 800adda:	0038      	movs	r0, r7
 800addc:	18f3      	adds	r3, r6, r3
 800adde:	40dc      	lsrs	r4, r3
 800ade0:	4320      	orrs	r0, r4
 800ade2:	f7f7 fe45 	bl	8002a70 <__aeabi_ui2d>
 800ade6:	2201      	movs	r2, #1
 800ade8:	4b62      	ldr	r3, [pc, #392]	@ (800af74 <_dtoa_r+0x394>)
 800adea:	1e77      	subs	r7, r6, #1
 800adec:	18cb      	adds	r3, r1, r3
 800adee:	9218      	str	r2, [sp, #96]	@ 0x60
 800adf0:	e776      	b.n	800ace0 <_dtoa_r+0x100>
 800adf2:	2320      	movs	r3, #32
 800adf4:	0020      	movs	r0, r4
 800adf6:	1a9b      	subs	r3, r3, r2
 800adf8:	4098      	lsls	r0, r3
 800adfa:	e7f2      	b.n	800ade2 <_dtoa_r+0x202>
 800adfc:	9015      	str	r0, [sp, #84]	@ 0x54
 800adfe:	e7ba      	b.n	800ad76 <_dtoa_r+0x196>
 800ae00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ae02:	e7c3      	b.n	800ad8c <_dtoa_r+0x1ac>
 800ae04:	9b06      	ldr	r3, [sp, #24]
 800ae06:	9a04      	ldr	r2, [sp, #16]
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	9306      	str	r3, [sp, #24]
 800ae0c:	4253      	negs	r3, r2
 800ae0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae10:	2300      	movs	r3, #0
 800ae12:	9314      	str	r3, [sp, #80]	@ 0x50
 800ae14:	e7c5      	b.n	800ada2 <_dtoa_r+0x1c2>
 800ae16:	2301      	movs	r3, #1
 800ae18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae1c:	4694      	mov	ip, r2
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	4463      	add	r3, ip
 800ae22:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae24:	3301      	adds	r3, #1
 800ae26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	dc08      	bgt.n	800ae3e <_dtoa_r+0x25e>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e006      	b.n	800ae3e <_dtoa_r+0x25e>
 800ae30:	2301      	movs	r3, #1
 800ae32:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dd28      	ble.n	800ae8c <_dtoa_r+0x2ac>
 800ae3a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3e:	9a03      	ldr	r2, [sp, #12]
 800ae40:	2100      	movs	r1, #0
 800ae42:	69d0      	ldr	r0, [r2, #28]
 800ae44:	2204      	movs	r2, #4
 800ae46:	0015      	movs	r5, r2
 800ae48:	3514      	adds	r5, #20
 800ae4a:	429d      	cmp	r5, r3
 800ae4c:	d923      	bls.n	800ae96 <_dtoa_r+0x2b6>
 800ae4e:	6041      	str	r1, [r0, #4]
 800ae50:	9803      	ldr	r0, [sp, #12]
 800ae52:	f000 fdbb 	bl	800b9cc <_Balloc>
 800ae56:	9008      	str	r0, [sp, #32]
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d11f      	bne.n	800ae9c <_dtoa_r+0x2bc>
 800ae5c:	21b0      	movs	r1, #176	@ 0xb0
 800ae5e:	4b46      	ldr	r3, [pc, #280]	@ (800af78 <_dtoa_r+0x398>)
 800ae60:	4831      	ldr	r0, [pc, #196]	@ (800af28 <_dtoa_r+0x348>)
 800ae62:	9a08      	ldr	r2, [sp, #32]
 800ae64:	31ff      	adds	r1, #255	@ 0xff
 800ae66:	e6d0      	b.n	800ac0a <_dtoa_r+0x2a>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e7e2      	b.n	800ae32 <_dtoa_r+0x252>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e7d3      	b.n	800ae18 <_dtoa_r+0x238>
 800ae70:	2300      	movs	r3, #0
 800ae72:	9410      	str	r4, [sp, #64]	@ 0x40
 800ae74:	9322      	str	r3, [sp, #136]	@ 0x88
 800ae76:	3b01      	subs	r3, #1
 800ae78:	2200      	movs	r2, #0
 800ae7a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae7e:	3313      	adds	r3, #19
 800ae80:	9223      	str	r2, [sp, #140]	@ 0x8c
 800ae82:	e7dc      	b.n	800ae3e <_dtoa_r+0x25e>
 800ae84:	2301      	movs	r3, #1
 800ae86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae88:	3b02      	subs	r3, #2
 800ae8a:	e7f5      	b.n	800ae78 <_dtoa_r+0x298>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	001a      	movs	r2, r3
 800ae90:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae94:	e7f4      	b.n	800ae80 <_dtoa_r+0x2a0>
 800ae96:	3101      	adds	r1, #1
 800ae98:	0052      	lsls	r2, r2, #1
 800ae9a:	e7d4      	b.n	800ae46 <_dtoa_r+0x266>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	9a08      	ldr	r2, [sp, #32]
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea6:	2b0e      	cmp	r3, #14
 800aea8:	d900      	bls.n	800aeac <_dtoa_r+0x2cc>
 800aeaa:	e0d6      	b.n	800b05a <_dtoa_r+0x47a>
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	d100      	bne.n	800aeb2 <_dtoa_r+0x2d2>
 800aeb0:	e0d3      	b.n	800b05a <_dtoa_r+0x47a>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd63      	ble.n	800af80 <_dtoa_r+0x3a0>
 800aeb8:	210f      	movs	r1, #15
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	4b2a      	ldr	r3, [pc, #168]	@ (800af68 <_dtoa_r+0x388>)
 800aebe:	400a      	ands	r2, r1
 800aec0:	00d2      	lsls	r2, r2, #3
 800aec2:	189b      	adds	r3, r3, r2
 800aec4:	681e      	ldr	r6, [r3, #0]
 800aec6:	685f      	ldr	r7, [r3, #4]
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	2402      	movs	r4, #2
 800aecc:	111d      	asrs	r5, r3, #4
 800aece:	05db      	lsls	r3, r3, #23
 800aed0:	d50a      	bpl.n	800aee8 <_dtoa_r+0x308>
 800aed2:	4b2a      	ldr	r3, [pc, #168]	@ (800af7c <_dtoa_r+0x39c>)
 800aed4:	400d      	ands	r5, r1
 800aed6:	6a1a      	ldr	r2, [r3, #32]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800aedc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aede:	f7f6 fa11 	bl	8001304 <__aeabi_ddiv>
 800aee2:	900a      	str	r0, [sp, #40]	@ 0x28
 800aee4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aee6:	3401      	adds	r4, #1
 800aee8:	4b24      	ldr	r3, [pc, #144]	@ (800af7c <_dtoa_r+0x39c>)
 800aeea:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	d108      	bne.n	800af02 <_dtoa_r+0x322>
 800aef0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aef2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aef4:	0032      	movs	r2, r6
 800aef6:	003b      	movs	r3, r7
 800aef8:	f7f6 fa04 	bl	8001304 <__aeabi_ddiv>
 800aefc:	900a      	str	r0, [sp, #40]	@ 0x28
 800aefe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af00:	e059      	b.n	800afb6 <_dtoa_r+0x3d6>
 800af02:	2301      	movs	r3, #1
 800af04:	421d      	tst	r5, r3
 800af06:	d009      	beq.n	800af1c <_dtoa_r+0x33c>
 800af08:	18e4      	adds	r4, r4, r3
 800af0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af0c:	0030      	movs	r0, r6
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	0039      	movs	r1, r7
 800af14:	f7f6 fe30 	bl	8001b78 <__aeabi_dmul>
 800af18:	0006      	movs	r6, r0
 800af1a:	000f      	movs	r7, r1
 800af1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af1e:	106d      	asrs	r5, r5, #1
 800af20:	3308      	adds	r3, #8
 800af22:	e7e2      	b.n	800aeea <_dtoa_r+0x30a>
 800af24:	0800ce09 	.word	0x0800ce09
 800af28:	0800ce20 	.word	0x0800ce20
 800af2c:	7ff00000 	.word	0x7ff00000
 800af30:	0000270f 	.word	0x0000270f
 800af34:	0800ce05 	.word	0x0800ce05
 800af38:	0800ce08 	.word	0x0800ce08
 800af3c:	0800cdd9 	.word	0x0800cdd9
 800af40:	0800cdd8 	.word	0x0800cdd8
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	fffffc01 	.word	0xfffffc01
 800af4c:	3ff80000 	.word	0x3ff80000
 800af50:	636f4361 	.word	0x636f4361
 800af54:	3fd287a7 	.word	0x3fd287a7
 800af58:	8b60c8b3 	.word	0x8b60c8b3
 800af5c:	3fc68a28 	.word	0x3fc68a28
 800af60:	509f79fb 	.word	0x509f79fb
 800af64:	3fd34413 	.word	0x3fd34413
 800af68:	0800cf70 	.word	0x0800cf70
 800af6c:	00000432 	.word	0x00000432
 800af70:	00000412 	.word	0x00000412
 800af74:	fe100000 	.word	0xfe100000
 800af78:	0800ce78 	.word	0x0800ce78
 800af7c:	0800cf48 	.word	0x0800cf48
 800af80:	9b04      	ldr	r3, [sp, #16]
 800af82:	2402      	movs	r4, #2
 800af84:	2b00      	cmp	r3, #0
 800af86:	d016      	beq.n	800afb6 <_dtoa_r+0x3d6>
 800af88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800af8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800af8c:	220f      	movs	r2, #15
 800af8e:	425d      	negs	r5, r3
 800af90:	402a      	ands	r2, r5
 800af92:	4bd5      	ldr	r3, [pc, #852]	@ (800b2e8 <_dtoa_r+0x708>)
 800af94:	00d2      	lsls	r2, r2, #3
 800af96:	189b      	adds	r3, r3, r2
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f7f6 fdec 	bl	8001b78 <__aeabi_dmul>
 800afa0:	2701      	movs	r7, #1
 800afa2:	2300      	movs	r3, #0
 800afa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800afa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800afa8:	4ed0      	ldr	r6, [pc, #832]	@ (800b2ec <_dtoa_r+0x70c>)
 800afaa:	112d      	asrs	r5, r5, #4
 800afac:	2d00      	cmp	r5, #0
 800afae:	d000      	beq.n	800afb2 <_dtoa_r+0x3d2>
 800afb0:	e095      	b.n	800b0de <_dtoa_r+0x4fe>
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1a2      	bne.n	800aefc <_dtoa_r+0x31c>
 800afb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800afb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800afba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d100      	bne.n	800afc2 <_dtoa_r+0x3e2>
 800afc0:	e098      	b.n	800b0f4 <_dtoa_r+0x514>
 800afc2:	2200      	movs	r2, #0
 800afc4:	0030      	movs	r0, r6
 800afc6:	0039      	movs	r1, r7
 800afc8:	4bc9      	ldr	r3, [pc, #804]	@ (800b2f0 <_dtoa_r+0x710>)
 800afca:	f7f5 fa45 	bl	8000458 <__aeabi_dcmplt>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d100      	bne.n	800afd4 <_dtoa_r+0x3f4>
 800afd2:	e08f      	b.n	800b0f4 <_dtoa_r+0x514>
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d100      	bne.n	800afdc <_dtoa_r+0x3fc>
 800afda:	e08b      	b.n	800b0f4 <_dtoa_r+0x514>
 800afdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afde:	2b00      	cmp	r3, #0
 800afe0:	dd37      	ble.n	800b052 <_dtoa_r+0x472>
 800afe2:	9b04      	ldr	r3, [sp, #16]
 800afe4:	2200      	movs	r2, #0
 800afe6:	3b01      	subs	r3, #1
 800afe8:	930c      	str	r3, [sp, #48]	@ 0x30
 800afea:	0030      	movs	r0, r6
 800afec:	4bc1      	ldr	r3, [pc, #772]	@ (800b2f4 <_dtoa_r+0x714>)
 800afee:	0039      	movs	r1, r7
 800aff0:	f7f6 fdc2 	bl	8001b78 <__aeabi_dmul>
 800aff4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aff6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800affa:	3401      	adds	r4, #1
 800affc:	0020      	movs	r0, r4
 800affe:	9311      	str	r3, [sp, #68]	@ 0x44
 800b000:	f7f7 fd08 	bl	8002a14 <__aeabi_i2d>
 800b004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b008:	f7f6 fdb6 	bl	8001b78 <__aeabi_dmul>
 800b00c:	4bba      	ldr	r3, [pc, #744]	@ (800b2f8 <_dtoa_r+0x718>)
 800b00e:	2200      	movs	r2, #0
 800b010:	f7f5 fdb2 	bl	8000b78 <__aeabi_dadd>
 800b014:	4bb9      	ldr	r3, [pc, #740]	@ (800b2fc <_dtoa_r+0x71c>)
 800b016:	0006      	movs	r6, r0
 800b018:	18cf      	adds	r7, r1, r3
 800b01a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d16d      	bne.n	800b0fc <_dtoa_r+0x51c>
 800b020:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b022:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b024:	2200      	movs	r2, #0
 800b026:	4bb6      	ldr	r3, [pc, #728]	@ (800b300 <_dtoa_r+0x720>)
 800b028:	f7f7 f88c 	bl	8002144 <__aeabi_dsub>
 800b02c:	0032      	movs	r2, r6
 800b02e:	003b      	movs	r3, r7
 800b030:	0004      	movs	r4, r0
 800b032:	000d      	movs	r5, r1
 800b034:	f7f5 fa24 	bl	8000480 <__aeabi_dcmpgt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d000      	beq.n	800b03e <_dtoa_r+0x45e>
 800b03c:	e2b6      	b.n	800b5ac <_dtoa_r+0x9cc>
 800b03e:	2180      	movs	r1, #128	@ 0x80
 800b040:	0609      	lsls	r1, r1, #24
 800b042:	187b      	adds	r3, r7, r1
 800b044:	0032      	movs	r2, r6
 800b046:	0020      	movs	r0, r4
 800b048:	0029      	movs	r1, r5
 800b04a:	f7f5 fa05 	bl	8000458 <__aeabi_dcmplt>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d128      	bne.n	800b0a4 <_dtoa_r+0x4c4>
 800b052:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b054:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b056:	930a      	str	r3, [sp, #40]	@ 0x28
 800b058:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b05a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	da00      	bge.n	800b062 <_dtoa_r+0x482>
 800b060:	e174      	b.n	800b34c <_dtoa_r+0x76c>
 800b062:	9a04      	ldr	r2, [sp, #16]
 800b064:	2a0e      	cmp	r2, #14
 800b066:	dd00      	ble.n	800b06a <_dtoa_r+0x48a>
 800b068:	e170      	b.n	800b34c <_dtoa_r+0x76c>
 800b06a:	4b9f      	ldr	r3, [pc, #636]	@ (800b2e8 <_dtoa_r+0x708>)
 800b06c:	00d2      	lsls	r2, r2, #3
 800b06e:	189b      	adds	r3, r3, r2
 800b070:	685c      	ldr	r4, [r3, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	9306      	str	r3, [sp, #24]
 800b076:	9407      	str	r4, [sp, #28]
 800b078:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	db00      	blt.n	800b080 <_dtoa_r+0x4a0>
 800b07e:	e0e7      	b.n	800b250 <_dtoa_r+0x670>
 800b080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd00      	ble.n	800b088 <_dtoa_r+0x4a8>
 800b086:	e0e3      	b.n	800b250 <_dtoa_r+0x670>
 800b088:	d10c      	bne.n	800b0a4 <_dtoa_r+0x4c4>
 800b08a:	9806      	ldr	r0, [sp, #24]
 800b08c:	9907      	ldr	r1, [sp, #28]
 800b08e:	2200      	movs	r2, #0
 800b090:	4b9b      	ldr	r3, [pc, #620]	@ (800b300 <_dtoa_r+0x720>)
 800b092:	f7f6 fd71 	bl	8001b78 <__aeabi_dmul>
 800b096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b09a:	f7f5 f9fb 	bl	8000494 <__aeabi_dcmpge>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d100      	bne.n	800b0a4 <_dtoa_r+0x4c4>
 800b0a2:	e286      	b.n	800b5b2 <_dtoa_r+0x9d2>
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	0037      	movs	r7, r6
 800b0a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0aa:	9c08      	ldr	r4, [sp, #32]
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0b0:	9704      	str	r7, [sp, #16]
 800b0b2:	2700      	movs	r7, #0
 800b0b4:	0031      	movs	r1, r6
 800b0b6:	9803      	ldr	r0, [sp, #12]
 800b0b8:	f000 fccc 	bl	800ba54 <_Bfree>
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d100      	bne.n	800b0c4 <_dtoa_r+0x4e4>
 800b0c2:	e0bb      	b.n	800b23c <_dtoa_r+0x65c>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	d005      	beq.n	800b0d4 <_dtoa_r+0x4f4>
 800b0c8:	429f      	cmp	r7, r3
 800b0ca:	d003      	beq.n	800b0d4 <_dtoa_r+0x4f4>
 800b0cc:	0039      	movs	r1, r7
 800b0ce:	9803      	ldr	r0, [sp, #12]
 800b0d0:	f000 fcc0 	bl	800ba54 <_Bfree>
 800b0d4:	9904      	ldr	r1, [sp, #16]
 800b0d6:	9803      	ldr	r0, [sp, #12]
 800b0d8:	f000 fcbc 	bl	800ba54 <_Bfree>
 800b0dc:	e0ae      	b.n	800b23c <_dtoa_r+0x65c>
 800b0de:	423d      	tst	r5, r7
 800b0e0:	d005      	beq.n	800b0ee <_dtoa_r+0x50e>
 800b0e2:	6832      	ldr	r2, [r6, #0]
 800b0e4:	6873      	ldr	r3, [r6, #4]
 800b0e6:	f7f6 fd47 	bl	8001b78 <__aeabi_dmul>
 800b0ea:	003b      	movs	r3, r7
 800b0ec:	3401      	adds	r4, #1
 800b0ee:	106d      	asrs	r5, r5, #1
 800b0f0:	3608      	adds	r6, #8
 800b0f2:	e75b      	b.n	800afac <_dtoa_r+0x3cc>
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fa:	e77f      	b.n	800affc <_dtoa_r+0x41c>
 800b0fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0fe:	4b7a      	ldr	r3, [pc, #488]	@ (800b2e8 <_dtoa_r+0x708>)
 800b100:	3a01      	subs	r2, #1
 800b102:	00d2      	lsls	r2, r2, #3
 800b104:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b106:	189b      	adds	r3, r3, r2
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d04c      	beq.n	800b1aa <_dtoa_r+0x5ca>
 800b110:	2000      	movs	r0, #0
 800b112:	497c      	ldr	r1, [pc, #496]	@ (800b304 <_dtoa_r+0x724>)
 800b114:	f7f6 f8f6 	bl	8001304 <__aeabi_ddiv>
 800b118:	0032      	movs	r2, r6
 800b11a:	003b      	movs	r3, r7
 800b11c:	f7f7 f812 	bl	8002144 <__aeabi_dsub>
 800b120:	9a08      	ldr	r2, [sp, #32]
 800b122:	0006      	movs	r6, r0
 800b124:	4694      	mov	ip, r2
 800b126:	000f      	movs	r7, r1
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b12c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b12e:	4463      	add	r3, ip
 800b130:	9311      	str	r3, [sp, #68]	@ 0x44
 800b132:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b134:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b136:	f7f7 fc31 	bl	800299c <__aeabi_d2iz>
 800b13a:	0005      	movs	r5, r0
 800b13c:	f7f7 fc6a 	bl	8002a14 <__aeabi_i2d>
 800b140:	0002      	movs	r2, r0
 800b142:	000b      	movs	r3, r1
 800b144:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b146:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b148:	f7f6 fffc 	bl	8002144 <__aeabi_dsub>
 800b14c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b14e:	3530      	adds	r5, #48	@ 0x30
 800b150:	1c5c      	adds	r4, r3, #1
 800b152:	701d      	strb	r5, [r3, #0]
 800b154:	0032      	movs	r2, r6
 800b156:	003b      	movs	r3, r7
 800b158:	900a      	str	r0, [sp, #40]	@ 0x28
 800b15a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b15c:	f7f5 f97c 	bl	8000458 <__aeabi_dcmplt>
 800b160:	2800      	cmp	r0, #0
 800b162:	d16b      	bne.n	800b23c <_dtoa_r+0x65c>
 800b164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b168:	2000      	movs	r0, #0
 800b16a:	4961      	ldr	r1, [pc, #388]	@ (800b2f0 <_dtoa_r+0x710>)
 800b16c:	f7f6 ffea 	bl	8002144 <__aeabi_dsub>
 800b170:	0032      	movs	r2, r6
 800b172:	003b      	movs	r3, r7
 800b174:	f7f5 f970 	bl	8000458 <__aeabi_dcmplt>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d000      	beq.n	800b17e <_dtoa_r+0x59e>
 800b17c:	e0c6      	b.n	800b30c <_dtoa_r+0x72c>
 800b17e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b180:	42a3      	cmp	r3, r4
 800b182:	d100      	bne.n	800b186 <_dtoa_r+0x5a6>
 800b184:	e765      	b.n	800b052 <_dtoa_r+0x472>
 800b186:	2200      	movs	r2, #0
 800b188:	0030      	movs	r0, r6
 800b18a:	0039      	movs	r1, r7
 800b18c:	4b59      	ldr	r3, [pc, #356]	@ (800b2f4 <_dtoa_r+0x714>)
 800b18e:	f7f6 fcf3 	bl	8001b78 <__aeabi_dmul>
 800b192:	2200      	movs	r2, #0
 800b194:	0006      	movs	r6, r0
 800b196:	000f      	movs	r7, r1
 800b198:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b19a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b19c:	4b55      	ldr	r3, [pc, #340]	@ (800b2f4 <_dtoa_r+0x714>)
 800b19e:	f7f6 fceb 	bl	8001b78 <__aeabi_dmul>
 800b1a2:	9416      	str	r4, [sp, #88]	@ 0x58
 800b1a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b1a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1a8:	e7c3      	b.n	800b132 <_dtoa_r+0x552>
 800b1aa:	0030      	movs	r0, r6
 800b1ac:	0039      	movs	r1, r7
 800b1ae:	f7f6 fce3 	bl	8001b78 <__aeabi_dmul>
 800b1b2:	9d08      	ldr	r5, [sp, #32]
 800b1b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b1b6:	002b      	movs	r3, r5
 800b1b8:	4694      	mov	ip, r2
 800b1ba:	9016      	str	r0, [sp, #88]	@ 0x58
 800b1bc:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b1be:	4463      	add	r3, ip
 800b1c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b1c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1c6:	f7f7 fbe9 	bl	800299c <__aeabi_d2iz>
 800b1ca:	0004      	movs	r4, r0
 800b1cc:	f7f7 fc22 	bl	8002a14 <__aeabi_i2d>
 800b1d0:	000b      	movs	r3, r1
 800b1d2:	0002      	movs	r2, r0
 800b1d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1d8:	f7f6 ffb4 	bl	8002144 <__aeabi_dsub>
 800b1dc:	3430      	adds	r4, #48	@ 0x30
 800b1de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1e0:	702c      	strb	r4, [r5, #0]
 800b1e2:	3501      	adds	r5, #1
 800b1e4:	0006      	movs	r6, r0
 800b1e6:	000f      	movs	r7, r1
 800b1e8:	42ab      	cmp	r3, r5
 800b1ea:	d12a      	bne.n	800b242 <_dtoa_r+0x662>
 800b1ec:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b1ee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b1f4:	469c      	mov	ip, r3
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4b42      	ldr	r3, [pc, #264]	@ (800b304 <_dtoa_r+0x724>)
 800b1fa:	4464      	add	r4, ip
 800b1fc:	f7f5 fcbc 	bl	8000b78 <__aeabi_dadd>
 800b200:	0002      	movs	r2, r0
 800b202:	000b      	movs	r3, r1
 800b204:	0030      	movs	r0, r6
 800b206:	0039      	movs	r1, r7
 800b208:	f7f5 f93a 	bl	8000480 <__aeabi_dcmpgt>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d000      	beq.n	800b212 <_dtoa_r+0x632>
 800b210:	e07c      	b.n	800b30c <_dtoa_r+0x72c>
 800b212:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b214:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b216:	2000      	movs	r0, #0
 800b218:	493a      	ldr	r1, [pc, #232]	@ (800b304 <_dtoa_r+0x724>)
 800b21a:	f7f6 ff93 	bl	8002144 <__aeabi_dsub>
 800b21e:	0002      	movs	r2, r0
 800b220:	000b      	movs	r3, r1
 800b222:	0030      	movs	r0, r6
 800b224:	0039      	movs	r1, r7
 800b226:	f7f5 f917 	bl	8000458 <__aeabi_dcmplt>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d100      	bne.n	800b230 <_dtoa_r+0x650>
 800b22e:	e710      	b.n	800b052 <_dtoa_r+0x472>
 800b230:	0023      	movs	r3, r4
 800b232:	3c01      	subs	r4, #1
 800b234:	7822      	ldrb	r2, [r4, #0]
 800b236:	2a30      	cmp	r2, #48	@ 0x30
 800b238:	d0fa      	beq.n	800b230 <_dtoa_r+0x650>
 800b23a:	001c      	movs	r4, r3
 800b23c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	e042      	b.n	800b2c8 <_dtoa_r+0x6e8>
 800b242:	2200      	movs	r2, #0
 800b244:	4b2b      	ldr	r3, [pc, #172]	@ (800b2f4 <_dtoa_r+0x714>)
 800b246:	f7f6 fc97 	bl	8001b78 <__aeabi_dmul>
 800b24a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b24c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b24e:	e7b8      	b.n	800b1c2 <_dtoa_r+0x5e2>
 800b250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b252:	9d08      	ldr	r5, [sp, #32]
 800b254:	3b01      	subs	r3, #1
 800b256:	195b      	adds	r3, r3, r5
 800b258:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b25a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b25c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b25e:	9a06      	ldr	r2, [sp, #24]
 800b260:	9b07      	ldr	r3, [sp, #28]
 800b262:	0030      	movs	r0, r6
 800b264:	0039      	movs	r1, r7
 800b266:	f7f6 f84d 	bl	8001304 <__aeabi_ddiv>
 800b26a:	f7f7 fb97 	bl	800299c <__aeabi_d2iz>
 800b26e:	9009      	str	r0, [sp, #36]	@ 0x24
 800b270:	f7f7 fbd0 	bl	8002a14 <__aeabi_i2d>
 800b274:	9a06      	ldr	r2, [sp, #24]
 800b276:	9b07      	ldr	r3, [sp, #28]
 800b278:	f7f6 fc7e 	bl	8001b78 <__aeabi_dmul>
 800b27c:	0002      	movs	r2, r0
 800b27e:	000b      	movs	r3, r1
 800b280:	0030      	movs	r0, r6
 800b282:	0039      	movs	r1, r7
 800b284:	f7f6 ff5e 	bl	8002144 <__aeabi_dsub>
 800b288:	002b      	movs	r3, r5
 800b28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b28c:	3501      	adds	r5, #1
 800b28e:	3230      	adds	r2, #48	@ 0x30
 800b290:	701a      	strb	r2, [r3, #0]
 800b292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b294:	002c      	movs	r4, r5
 800b296:	429a      	cmp	r2, r3
 800b298:	d14b      	bne.n	800b332 <_dtoa_r+0x752>
 800b29a:	0002      	movs	r2, r0
 800b29c:	000b      	movs	r3, r1
 800b29e:	f7f5 fc6b 	bl	8000b78 <__aeabi_dadd>
 800b2a2:	9a06      	ldr	r2, [sp, #24]
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	0006      	movs	r6, r0
 800b2a8:	000f      	movs	r7, r1
 800b2aa:	f7f5 f8e9 	bl	8000480 <__aeabi_dcmpgt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d12a      	bne.n	800b308 <_dtoa_r+0x728>
 800b2b2:	9a06      	ldr	r2, [sp, #24]
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	0030      	movs	r0, r6
 800b2b8:	0039      	movs	r1, r7
 800b2ba:	f7f5 f8c7 	bl	800044c <__aeabi_dcmpeq>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d002      	beq.n	800b2c8 <_dtoa_r+0x6e8>
 800b2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c4:	07dd      	lsls	r5, r3, #31
 800b2c6:	d41f      	bmi.n	800b308 <_dtoa_r+0x728>
 800b2c8:	9905      	ldr	r1, [sp, #20]
 800b2ca:	9803      	ldr	r0, [sp, #12]
 800b2cc:	f000 fbc2 	bl	800ba54 <_Bfree>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	7023      	strb	r3, [r4, #0]
 800b2d4:	9b04      	ldr	r3, [sp, #16]
 800b2d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b2d8:	3301      	adds	r3, #1
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d100      	bne.n	800b2e4 <_dtoa_r+0x704>
 800b2e2:	e4c7      	b.n	800ac74 <_dtoa_r+0x94>
 800b2e4:	601c      	str	r4, [r3, #0]
 800b2e6:	e4c5      	b.n	800ac74 <_dtoa_r+0x94>
 800b2e8:	0800cf70 	.word	0x0800cf70
 800b2ec:	0800cf48 	.word	0x0800cf48
 800b2f0:	3ff00000 	.word	0x3ff00000
 800b2f4:	40240000 	.word	0x40240000
 800b2f8:	401c0000 	.word	0x401c0000
 800b2fc:	fcc00000 	.word	0xfcc00000
 800b300:	40140000 	.word	0x40140000
 800b304:	3fe00000 	.word	0x3fe00000
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b30c:	0023      	movs	r3, r4
 800b30e:	001c      	movs	r4, r3
 800b310:	3b01      	subs	r3, #1
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	2a39      	cmp	r2, #57	@ 0x39
 800b316:	d108      	bne.n	800b32a <_dtoa_r+0x74a>
 800b318:	9a08      	ldr	r2, [sp, #32]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d1f7      	bne.n	800b30e <_dtoa_r+0x72e>
 800b31e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b320:	9908      	ldr	r1, [sp, #32]
 800b322:	3201      	adds	r2, #1
 800b324:	920c      	str	r2, [sp, #48]	@ 0x30
 800b326:	2230      	movs	r2, #48	@ 0x30
 800b328:	700a      	strb	r2, [r1, #0]
 800b32a:	781a      	ldrb	r2, [r3, #0]
 800b32c:	3201      	adds	r2, #1
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	e784      	b.n	800b23c <_dtoa_r+0x65c>
 800b332:	2200      	movs	r2, #0
 800b334:	4bc6      	ldr	r3, [pc, #792]	@ (800b650 <_dtoa_r+0xa70>)
 800b336:	f7f6 fc1f 	bl	8001b78 <__aeabi_dmul>
 800b33a:	2200      	movs	r2, #0
 800b33c:	2300      	movs	r3, #0
 800b33e:	0006      	movs	r6, r0
 800b340:	000f      	movs	r7, r1
 800b342:	f7f5 f883 	bl	800044c <__aeabi_dcmpeq>
 800b346:	2800      	cmp	r0, #0
 800b348:	d089      	beq.n	800b25e <_dtoa_r+0x67e>
 800b34a:	e7bd      	b.n	800b2c8 <_dtoa_r+0x6e8>
 800b34c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b34e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b350:	9c06      	ldr	r4, [sp, #24]
 800b352:	2f00      	cmp	r7, #0
 800b354:	d014      	beq.n	800b380 <_dtoa_r+0x7a0>
 800b356:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b358:	2a01      	cmp	r2, #1
 800b35a:	dd00      	ble.n	800b35e <_dtoa_r+0x77e>
 800b35c:	e0e4      	b.n	800b528 <_dtoa_r+0x948>
 800b35e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b360:	2a00      	cmp	r2, #0
 800b362:	d100      	bne.n	800b366 <_dtoa_r+0x786>
 800b364:	e0da      	b.n	800b51c <_dtoa_r+0x93c>
 800b366:	4abb      	ldr	r2, [pc, #748]	@ (800b654 <_dtoa_r+0xa74>)
 800b368:	189b      	adds	r3, r3, r2
 800b36a:	9a06      	ldr	r2, [sp, #24]
 800b36c:	2101      	movs	r1, #1
 800b36e:	18d2      	adds	r2, r2, r3
 800b370:	9206      	str	r2, [sp, #24]
 800b372:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b374:	9803      	ldr	r0, [sp, #12]
 800b376:	18d3      	adds	r3, r2, r3
 800b378:	930d      	str	r3, [sp, #52]	@ 0x34
 800b37a:	f000 fc23 	bl	800bbc4 <__i2b>
 800b37e:	0007      	movs	r7, r0
 800b380:	2c00      	cmp	r4, #0
 800b382:	d00e      	beq.n	800b3a2 <_dtoa_r+0x7c2>
 800b384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd0b      	ble.n	800b3a2 <_dtoa_r+0x7c2>
 800b38a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b38c:	0023      	movs	r3, r4
 800b38e:	4294      	cmp	r4, r2
 800b390:	dd00      	ble.n	800b394 <_dtoa_r+0x7b4>
 800b392:	0013      	movs	r3, r2
 800b394:	9a06      	ldr	r2, [sp, #24]
 800b396:	1ae4      	subs	r4, r4, r3
 800b398:	1ad2      	subs	r2, r2, r3
 800b39a:	9206      	str	r2, [sp, #24]
 800b39c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	930d      	str	r3, [sp, #52]	@ 0x34
 800b3a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d021      	beq.n	800b3ec <_dtoa_r+0x80c>
 800b3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d100      	bne.n	800b3b0 <_dtoa_r+0x7d0>
 800b3ae:	e0d3      	b.n	800b558 <_dtoa_r+0x978>
 800b3b0:	9e05      	ldr	r6, [sp, #20]
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	d014      	beq.n	800b3e0 <_dtoa_r+0x800>
 800b3b6:	0039      	movs	r1, r7
 800b3b8:	002a      	movs	r2, r5
 800b3ba:	9803      	ldr	r0, [sp, #12]
 800b3bc:	f000 fcc4 	bl	800bd48 <__pow5mult>
 800b3c0:	9a05      	ldr	r2, [sp, #20]
 800b3c2:	0001      	movs	r1, r0
 800b3c4:	0007      	movs	r7, r0
 800b3c6:	9803      	ldr	r0, [sp, #12]
 800b3c8:	f000 fc14 	bl	800bbf4 <__multiply>
 800b3cc:	0006      	movs	r6, r0
 800b3ce:	9905      	ldr	r1, [sp, #20]
 800b3d0:	9803      	ldr	r0, [sp, #12]
 800b3d2:	f000 fb3f 	bl	800ba54 <_Bfree>
 800b3d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d8:	9605      	str	r6, [sp, #20]
 800b3da:	1b5b      	subs	r3, r3, r5
 800b3dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3de:	d005      	beq.n	800b3ec <_dtoa_r+0x80c>
 800b3e0:	0031      	movs	r1, r6
 800b3e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3e4:	9803      	ldr	r0, [sp, #12]
 800b3e6:	f000 fcaf 	bl	800bd48 <__pow5mult>
 800b3ea:	9005      	str	r0, [sp, #20]
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	9803      	ldr	r0, [sp, #12]
 800b3f0:	f000 fbe8 	bl	800bbc4 <__i2b>
 800b3f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3f6:	0006      	movs	r6, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d100      	bne.n	800b3fe <_dtoa_r+0x81e>
 800b3fc:	e1bc      	b.n	800b778 <_dtoa_r+0xb98>
 800b3fe:	001a      	movs	r2, r3
 800b400:	0001      	movs	r1, r0
 800b402:	9803      	ldr	r0, [sp, #12]
 800b404:	f000 fca0 	bl	800bd48 <__pow5mult>
 800b408:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b40a:	0006      	movs	r6, r0
 800b40c:	2500      	movs	r5, #0
 800b40e:	2b01      	cmp	r3, #1
 800b410:	dc16      	bgt.n	800b440 <_dtoa_r+0x860>
 800b412:	2500      	movs	r5, #0
 800b414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b416:	42ab      	cmp	r3, r5
 800b418:	d10e      	bne.n	800b438 <_dtoa_r+0x858>
 800b41a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b41c:	031b      	lsls	r3, r3, #12
 800b41e:	42ab      	cmp	r3, r5
 800b420:	d10a      	bne.n	800b438 <_dtoa_r+0x858>
 800b422:	4b8d      	ldr	r3, [pc, #564]	@ (800b658 <_dtoa_r+0xa78>)
 800b424:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b426:	4213      	tst	r3, r2
 800b428:	d006      	beq.n	800b438 <_dtoa_r+0x858>
 800b42a:	9b06      	ldr	r3, [sp, #24]
 800b42c:	3501      	adds	r5, #1
 800b42e:	3301      	adds	r3, #1
 800b430:	9306      	str	r3, [sp, #24]
 800b432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b434:	3301      	adds	r3, #1
 800b436:	930d      	str	r3, [sp, #52]	@ 0x34
 800b438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b43a:	2001      	movs	r0, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <_dtoa_r+0x872>
 800b440:	6933      	ldr	r3, [r6, #16]
 800b442:	3303      	adds	r3, #3
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	18f3      	adds	r3, r6, r3
 800b448:	6858      	ldr	r0, [r3, #4]
 800b44a:	f000 fb6b 	bl	800bb24 <__hi0bits>
 800b44e:	2320      	movs	r3, #32
 800b450:	1a18      	subs	r0, r3, r0
 800b452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b454:	1818      	adds	r0, r3, r0
 800b456:	0002      	movs	r2, r0
 800b458:	231f      	movs	r3, #31
 800b45a:	401a      	ands	r2, r3
 800b45c:	4218      	tst	r0, r3
 800b45e:	d100      	bne.n	800b462 <_dtoa_r+0x882>
 800b460:	e081      	b.n	800b566 <_dtoa_r+0x986>
 800b462:	3301      	adds	r3, #1
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	2b04      	cmp	r3, #4
 800b468:	dd79      	ble.n	800b55e <_dtoa_r+0x97e>
 800b46a:	231c      	movs	r3, #28
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	9a06      	ldr	r2, [sp, #24]
 800b470:	18e4      	adds	r4, r4, r3
 800b472:	18d2      	adds	r2, r2, r3
 800b474:	9206      	str	r2, [sp, #24]
 800b476:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b478:	18d3      	adds	r3, r2, r3
 800b47a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd05      	ble.n	800b48e <_dtoa_r+0x8ae>
 800b482:	001a      	movs	r2, r3
 800b484:	9905      	ldr	r1, [sp, #20]
 800b486:	9803      	ldr	r0, [sp, #12]
 800b488:	f000 fcba 	bl	800be00 <__lshift>
 800b48c:	9005      	str	r0, [sp, #20]
 800b48e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b490:	2b00      	cmp	r3, #0
 800b492:	dd05      	ble.n	800b4a0 <_dtoa_r+0x8c0>
 800b494:	0031      	movs	r1, r6
 800b496:	001a      	movs	r2, r3
 800b498:	9803      	ldr	r0, [sp, #12]
 800b49a:	f000 fcb1 	bl	800be00 <__lshift>
 800b49e:	0006      	movs	r6, r0
 800b4a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d061      	beq.n	800b56a <_dtoa_r+0x98a>
 800b4a6:	0031      	movs	r1, r6
 800b4a8:	9805      	ldr	r0, [sp, #20]
 800b4aa:	f000 fd15 	bl	800bed8 <__mcmp>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	da5b      	bge.n	800b56a <_dtoa_r+0x98a>
 800b4b2:	9b04      	ldr	r3, [sp, #16]
 800b4b4:	220a      	movs	r2, #10
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4ba:	9905      	ldr	r1, [sp, #20]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9803      	ldr	r0, [sp, #12]
 800b4c0:	f000 faec 	bl	800ba9c <__multadd>
 800b4c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4c6:	9005      	str	r0, [sp, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d100      	bne.n	800b4ce <_dtoa_r+0x8ee>
 800b4cc:	e15b      	b.n	800b786 <_dtoa_r+0xba6>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	0039      	movs	r1, r7
 800b4d2:	220a      	movs	r2, #10
 800b4d4:	9803      	ldr	r0, [sp, #12]
 800b4d6:	f000 fae1 	bl	800ba9c <__multadd>
 800b4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4dc:	0007      	movs	r7, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	dc4d      	bgt.n	800b57e <_dtoa_r+0x99e>
 800b4e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	dd46      	ble.n	800b576 <_dtoa_r+0x996>
 800b4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d000      	beq.n	800b4f0 <_dtoa_r+0x910>
 800b4ee:	e5db      	b.n	800b0a8 <_dtoa_r+0x4c8>
 800b4f0:	0031      	movs	r1, r6
 800b4f2:	2205      	movs	r2, #5
 800b4f4:	9803      	ldr	r0, [sp, #12]
 800b4f6:	f000 fad1 	bl	800ba9c <__multadd>
 800b4fa:	0006      	movs	r6, r0
 800b4fc:	0001      	movs	r1, r0
 800b4fe:	9805      	ldr	r0, [sp, #20]
 800b500:	f000 fcea 	bl	800bed8 <__mcmp>
 800b504:	2800      	cmp	r0, #0
 800b506:	dc00      	bgt.n	800b50a <_dtoa_r+0x92a>
 800b508:	e5ce      	b.n	800b0a8 <_dtoa_r+0x4c8>
 800b50a:	9b08      	ldr	r3, [sp, #32]
 800b50c:	9a08      	ldr	r2, [sp, #32]
 800b50e:	1c5c      	adds	r4, r3, #1
 800b510:	2331      	movs	r3, #49	@ 0x31
 800b512:	7013      	strb	r3, [r2, #0]
 800b514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b516:	3301      	adds	r3, #1
 800b518:	930c      	str	r3, [sp, #48]	@ 0x30
 800b51a:	e5c9      	b.n	800b0b0 <_dtoa_r+0x4d0>
 800b51c:	2336      	movs	r3, #54	@ 0x36
 800b51e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b520:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b522:	1a9b      	subs	r3, r3, r2
 800b524:	9c06      	ldr	r4, [sp, #24]
 800b526:	e720      	b.n	800b36a <_dtoa_r+0x78a>
 800b528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52a:	1e5d      	subs	r5, r3, #1
 800b52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b52e:	42ab      	cmp	r3, r5
 800b530:	db08      	blt.n	800b544 <_dtoa_r+0x964>
 800b532:	1b5d      	subs	r5, r3, r5
 800b534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	daf4      	bge.n	800b524 <_dtoa_r+0x944>
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b53e:	1a9c      	subs	r4, r3, r2
 800b540:	2300      	movs	r3, #0
 800b542:	e712      	b.n	800b36a <_dtoa_r+0x78a>
 800b544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b546:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b548:	1aeb      	subs	r3, r5, r3
 800b54a:	18d3      	adds	r3, r2, r3
 800b54c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b54e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b550:	9c06      	ldr	r4, [sp, #24]
 800b552:	2500      	movs	r5, #0
 800b554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b556:	e708      	b.n	800b36a <_dtoa_r+0x78a>
 800b558:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b55a:	9905      	ldr	r1, [sp, #20]
 800b55c:	e742      	b.n	800b3e4 <_dtoa_r+0x804>
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d08c      	beq.n	800b47c <_dtoa_r+0x89c>
 800b562:	331c      	adds	r3, #28
 800b564:	e783      	b.n	800b46e <_dtoa_r+0x88e>
 800b566:	0013      	movs	r3, r2
 800b568:	e7fb      	b.n	800b562 <_dtoa_r+0x982>
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b570:	930e      	str	r3, [sp, #56]	@ 0x38
 800b572:	2b00      	cmp	r3, #0
 800b574:	ddb5      	ble.n	800b4e2 <_dtoa_r+0x902>
 800b576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d100      	bne.n	800b57e <_dtoa_r+0x99e>
 800b57c:	e107      	b.n	800b78e <_dtoa_r+0xbae>
 800b57e:	2c00      	cmp	r4, #0
 800b580:	dd05      	ble.n	800b58e <_dtoa_r+0x9ae>
 800b582:	0039      	movs	r1, r7
 800b584:	0022      	movs	r2, r4
 800b586:	9803      	ldr	r0, [sp, #12]
 800b588:	f000 fc3a 	bl	800be00 <__lshift>
 800b58c:	0007      	movs	r7, r0
 800b58e:	9704      	str	r7, [sp, #16]
 800b590:	2d00      	cmp	r5, #0
 800b592:	d020      	beq.n	800b5d6 <_dtoa_r+0x9f6>
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	9803      	ldr	r0, [sp, #12]
 800b598:	f000 fa18 	bl	800b9cc <_Balloc>
 800b59c:	1e04      	subs	r4, r0, #0
 800b59e:	d10c      	bne.n	800b5ba <_dtoa_r+0x9da>
 800b5a0:	0022      	movs	r2, r4
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	@ (800b65c <_dtoa_r+0xa7c>)
 800b5a4:	482e      	ldr	r0, [pc, #184]	@ (800b660 <_dtoa_r+0xa80>)
 800b5a6:	492f      	ldr	r1, [pc, #188]	@ (800b664 <_dtoa_r+0xa84>)
 800b5a8:	f7ff fb2f 	bl	800ac0a <_dtoa_r+0x2a>
 800b5ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b5ae:	0037      	movs	r7, r6
 800b5b0:	e7ab      	b.n	800b50a <_dtoa_r+0x92a>
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b5b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5b8:	e7f9      	b.n	800b5ae <_dtoa_r+0x9ce>
 800b5ba:	0039      	movs	r1, r7
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	310c      	adds	r1, #12
 800b5c0:	3202      	adds	r2, #2
 800b5c2:	0092      	lsls	r2, r2, #2
 800b5c4:	300c      	adds	r0, #12
 800b5c6:	f000 ffd1 	bl	800c56c <memcpy>
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	0021      	movs	r1, r4
 800b5ce:	9803      	ldr	r0, [sp, #12]
 800b5d0:	f000 fc16 	bl	800be00 <__lshift>
 800b5d4:	9004      	str	r0, [sp, #16]
 800b5d6:	9b08      	ldr	r3, [sp, #32]
 800b5d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5da:	9306      	str	r3, [sp, #24]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	189b      	adds	r3, r3, r2
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5ea:	0031      	movs	r1, r6
 800b5ec:	9805      	ldr	r0, [sp, #20]
 800b5ee:	f7ff fa71 	bl	800aad4 <quorem>
 800b5f2:	0039      	movs	r1, r7
 800b5f4:	0005      	movs	r5, r0
 800b5f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5f8:	9805      	ldr	r0, [sp, #20]
 800b5fa:	f000 fc6d 	bl	800bed8 <__mcmp>
 800b5fe:	9a04      	ldr	r2, [sp, #16]
 800b600:	900d      	str	r0, [sp, #52]	@ 0x34
 800b602:	0031      	movs	r1, r6
 800b604:	9803      	ldr	r0, [sp, #12]
 800b606:	f000 fc83 	bl	800bf10 <__mdiff>
 800b60a:	2201      	movs	r2, #1
 800b60c:	68c3      	ldr	r3, [r0, #12]
 800b60e:	0004      	movs	r4, r0
 800b610:	3530      	adds	r5, #48	@ 0x30
 800b612:	9209      	str	r2, [sp, #36]	@ 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <_dtoa_r+0xa42>
 800b618:	0001      	movs	r1, r0
 800b61a:	9805      	ldr	r0, [sp, #20]
 800b61c:	f000 fc5c 	bl	800bed8 <__mcmp>
 800b620:	9009      	str	r0, [sp, #36]	@ 0x24
 800b622:	0021      	movs	r1, r4
 800b624:	9803      	ldr	r0, [sp, #12]
 800b626:	f000 fa15 	bl	800ba54 <_Bfree>
 800b62a:	9b06      	ldr	r3, [sp, #24]
 800b62c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b62e:	1c5c      	adds	r4, r3, #1
 800b630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b632:	4313      	orrs	r3, r2
 800b634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b636:	4313      	orrs	r3, r2
 800b638:	d116      	bne.n	800b668 <_dtoa_r+0xa88>
 800b63a:	2d39      	cmp	r5, #57	@ 0x39
 800b63c:	d02f      	beq.n	800b69e <_dtoa_r+0xabe>
 800b63e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b640:	2b00      	cmp	r3, #0
 800b642:	dd01      	ble.n	800b648 <_dtoa_r+0xa68>
 800b644:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b646:	3531      	adds	r5, #49	@ 0x31
 800b648:	9b06      	ldr	r3, [sp, #24]
 800b64a:	701d      	strb	r5, [r3, #0]
 800b64c:	e532      	b.n	800b0b4 <_dtoa_r+0x4d4>
 800b64e:	46c0      	nop			@ (mov r8, r8)
 800b650:	40240000 	.word	0x40240000
 800b654:	00000433 	.word	0x00000433
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	0800ce78 	.word	0x0800ce78
 800b660:	0800ce20 	.word	0x0800ce20
 800b664:	000002ef 	.word	0x000002ef
 800b668:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	db04      	blt.n	800b678 <_dtoa_r+0xa98>
 800b66e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b670:	4313      	orrs	r3, r2
 800b672:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b674:	4313      	orrs	r3, r2
 800b676:	d11e      	bne.n	800b6b6 <_dtoa_r+0xad6>
 800b678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dde4      	ble.n	800b648 <_dtoa_r+0xa68>
 800b67e:	9905      	ldr	r1, [sp, #20]
 800b680:	2201      	movs	r2, #1
 800b682:	9803      	ldr	r0, [sp, #12]
 800b684:	f000 fbbc 	bl	800be00 <__lshift>
 800b688:	0031      	movs	r1, r6
 800b68a:	9005      	str	r0, [sp, #20]
 800b68c:	f000 fc24 	bl	800bed8 <__mcmp>
 800b690:	2800      	cmp	r0, #0
 800b692:	dc02      	bgt.n	800b69a <_dtoa_r+0xaba>
 800b694:	d1d8      	bne.n	800b648 <_dtoa_r+0xa68>
 800b696:	07eb      	lsls	r3, r5, #31
 800b698:	d5d6      	bpl.n	800b648 <_dtoa_r+0xa68>
 800b69a:	2d39      	cmp	r5, #57	@ 0x39
 800b69c:	d1d2      	bne.n	800b644 <_dtoa_r+0xa64>
 800b69e:	2339      	movs	r3, #57	@ 0x39
 800b6a0:	9a06      	ldr	r2, [sp, #24]
 800b6a2:	7013      	strb	r3, [r2, #0]
 800b6a4:	0023      	movs	r3, r4
 800b6a6:	001c      	movs	r4, r3
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	781a      	ldrb	r2, [r3, #0]
 800b6ac:	2a39      	cmp	r2, #57	@ 0x39
 800b6ae:	d050      	beq.n	800b752 <_dtoa_r+0xb72>
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	e4fe      	b.n	800b0b4 <_dtoa_r+0x4d4>
 800b6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dd03      	ble.n	800b6c4 <_dtoa_r+0xae4>
 800b6bc:	2d39      	cmp	r5, #57	@ 0x39
 800b6be:	d0ee      	beq.n	800b69e <_dtoa_r+0xabe>
 800b6c0:	3501      	adds	r5, #1
 800b6c2:	e7c1      	b.n	800b648 <_dtoa_r+0xa68>
 800b6c4:	9b06      	ldr	r3, [sp, #24]
 800b6c6:	9a06      	ldr	r2, [sp, #24]
 800b6c8:	701d      	strb	r5, [r3, #0]
 800b6ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d02b      	beq.n	800b728 <_dtoa_r+0xb48>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	220a      	movs	r2, #10
 800b6d4:	9905      	ldr	r1, [sp, #20]
 800b6d6:	9803      	ldr	r0, [sp, #12]
 800b6d8:	f000 f9e0 	bl	800ba9c <__multadd>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	9005      	str	r0, [sp, #20]
 800b6e0:	429f      	cmp	r7, r3
 800b6e2:	d109      	bne.n	800b6f8 <_dtoa_r+0xb18>
 800b6e4:	0039      	movs	r1, r7
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	9803      	ldr	r0, [sp, #12]
 800b6ec:	f000 f9d6 	bl	800ba9c <__multadd>
 800b6f0:	0007      	movs	r7, r0
 800b6f2:	9004      	str	r0, [sp, #16]
 800b6f4:	9406      	str	r4, [sp, #24]
 800b6f6:	e778      	b.n	800b5ea <_dtoa_r+0xa0a>
 800b6f8:	0039      	movs	r1, r7
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	9803      	ldr	r0, [sp, #12]
 800b700:	f000 f9cc 	bl	800ba9c <__multadd>
 800b704:	2300      	movs	r3, #0
 800b706:	0007      	movs	r7, r0
 800b708:	220a      	movs	r2, #10
 800b70a:	9904      	ldr	r1, [sp, #16]
 800b70c:	9803      	ldr	r0, [sp, #12]
 800b70e:	f000 f9c5 	bl	800ba9c <__multadd>
 800b712:	9004      	str	r0, [sp, #16]
 800b714:	e7ee      	b.n	800b6f4 <_dtoa_r+0xb14>
 800b716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b718:	2401      	movs	r4, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd00      	ble.n	800b720 <_dtoa_r+0xb40>
 800b71e:	001c      	movs	r4, r3
 800b720:	9704      	str	r7, [sp, #16]
 800b722:	2700      	movs	r7, #0
 800b724:	9b08      	ldr	r3, [sp, #32]
 800b726:	191c      	adds	r4, r3, r4
 800b728:	9905      	ldr	r1, [sp, #20]
 800b72a:	2201      	movs	r2, #1
 800b72c:	9803      	ldr	r0, [sp, #12]
 800b72e:	f000 fb67 	bl	800be00 <__lshift>
 800b732:	0031      	movs	r1, r6
 800b734:	9005      	str	r0, [sp, #20]
 800b736:	f000 fbcf 	bl	800bed8 <__mcmp>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	dcb2      	bgt.n	800b6a4 <_dtoa_r+0xac4>
 800b73e:	d101      	bne.n	800b744 <_dtoa_r+0xb64>
 800b740:	07ed      	lsls	r5, r5, #31
 800b742:	d4af      	bmi.n	800b6a4 <_dtoa_r+0xac4>
 800b744:	0023      	movs	r3, r4
 800b746:	001c      	movs	r4, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	2a30      	cmp	r2, #48	@ 0x30
 800b74e:	d0fa      	beq.n	800b746 <_dtoa_r+0xb66>
 800b750:	e4b0      	b.n	800b0b4 <_dtoa_r+0x4d4>
 800b752:	9a08      	ldr	r2, [sp, #32]
 800b754:	429a      	cmp	r2, r3
 800b756:	d1a6      	bne.n	800b6a6 <_dtoa_r+0xac6>
 800b758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b75a:	3301      	adds	r3, #1
 800b75c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b75e:	2331      	movs	r3, #49	@ 0x31
 800b760:	7013      	strb	r3, [r2, #0]
 800b762:	e4a7      	b.n	800b0b4 <_dtoa_r+0x4d4>
 800b764:	4b14      	ldr	r3, [pc, #80]	@ (800b7b8 <_dtoa_r+0xbd8>)
 800b766:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b768:	9308      	str	r3, [sp, #32]
 800b76a:	4b14      	ldr	r3, [pc, #80]	@ (800b7bc <_dtoa_r+0xbdc>)
 800b76c:	2a00      	cmp	r2, #0
 800b76e:	d001      	beq.n	800b774 <_dtoa_r+0xb94>
 800b770:	f7ff fa7e 	bl	800ac70 <_dtoa_r+0x90>
 800b774:	f7ff fa7e 	bl	800ac74 <_dtoa_r+0x94>
 800b778:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	dc00      	bgt.n	800b780 <_dtoa_r+0xba0>
 800b77e:	e648      	b.n	800b412 <_dtoa_r+0x832>
 800b780:	2001      	movs	r0, #1
 800b782:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b784:	e665      	b.n	800b452 <_dtoa_r+0x872>
 800b786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b788:	2b00      	cmp	r3, #0
 800b78a:	dc00      	bgt.n	800b78e <_dtoa_r+0xbae>
 800b78c:	e6a9      	b.n	800b4e2 <_dtoa_r+0x902>
 800b78e:	2400      	movs	r4, #0
 800b790:	0031      	movs	r1, r6
 800b792:	9805      	ldr	r0, [sp, #20]
 800b794:	f7ff f99e 	bl	800aad4 <quorem>
 800b798:	9b08      	ldr	r3, [sp, #32]
 800b79a:	3030      	adds	r0, #48	@ 0x30
 800b79c:	5518      	strb	r0, [r3, r4]
 800b79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	0005      	movs	r5, r0
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	ddb6      	ble.n	800b716 <_dtoa_r+0xb36>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	220a      	movs	r2, #10
 800b7ac:	9905      	ldr	r1, [sp, #20]
 800b7ae:	9803      	ldr	r0, [sp, #12]
 800b7b0:	f000 f974 	bl	800ba9c <__multadd>
 800b7b4:	9005      	str	r0, [sp, #20]
 800b7b6:	e7eb      	b.n	800b790 <_dtoa_r+0xbb0>
 800b7b8:	0800cdfc 	.word	0x0800cdfc
 800b7bc:	0800ce04 	.word	0x0800ce04

0800b7c0 <_free_r>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	0005      	movs	r5, r0
 800b7c4:	1e0c      	subs	r4, r1, #0
 800b7c6:	d010      	beq.n	800b7ea <_free_r+0x2a>
 800b7c8:	3c04      	subs	r4, #4
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	da00      	bge.n	800b7d2 <_free_r+0x12>
 800b7d0:	18e4      	adds	r4, r4, r3
 800b7d2:	0028      	movs	r0, r5
 800b7d4:	f000 f8ea 	bl	800b9ac <__malloc_lock>
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b850 <_free_r+0x90>)
 800b7da:	6813      	ldr	r3, [r2, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <_free_r+0x2c>
 800b7e0:	6063      	str	r3, [r4, #4]
 800b7e2:	6014      	str	r4, [r2, #0]
 800b7e4:	0028      	movs	r0, r5
 800b7e6:	f000 f8e9 	bl	800b9bc <__malloc_unlock>
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	d908      	bls.n	800b802 <_free_r+0x42>
 800b7f0:	6820      	ldr	r0, [r4, #0]
 800b7f2:	1821      	adds	r1, r4, r0
 800b7f4:	428b      	cmp	r3, r1
 800b7f6:	d1f3      	bne.n	800b7e0 <_free_r+0x20>
 800b7f8:	6819      	ldr	r1, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	1809      	adds	r1, r1, r0
 800b7fe:	6021      	str	r1, [r4, #0]
 800b800:	e7ee      	b.n	800b7e0 <_free_r+0x20>
 800b802:	001a      	movs	r2, r3
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <_free_r+0x4e>
 800b80a:	42a3      	cmp	r3, r4
 800b80c:	d9f9      	bls.n	800b802 <_free_r+0x42>
 800b80e:	6811      	ldr	r1, [r2, #0]
 800b810:	1850      	adds	r0, r2, r1
 800b812:	42a0      	cmp	r0, r4
 800b814:	d10b      	bne.n	800b82e <_free_r+0x6e>
 800b816:	6820      	ldr	r0, [r4, #0]
 800b818:	1809      	adds	r1, r1, r0
 800b81a:	1850      	adds	r0, r2, r1
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	4283      	cmp	r3, r0
 800b820:	d1e0      	bne.n	800b7e4 <_free_r+0x24>
 800b822:	6818      	ldr	r0, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	1841      	adds	r1, r0, r1
 800b828:	6011      	str	r1, [r2, #0]
 800b82a:	6053      	str	r3, [r2, #4]
 800b82c:	e7da      	b.n	800b7e4 <_free_r+0x24>
 800b82e:	42a0      	cmp	r0, r4
 800b830:	d902      	bls.n	800b838 <_free_r+0x78>
 800b832:	230c      	movs	r3, #12
 800b834:	602b      	str	r3, [r5, #0]
 800b836:	e7d5      	b.n	800b7e4 <_free_r+0x24>
 800b838:	6820      	ldr	r0, [r4, #0]
 800b83a:	1821      	adds	r1, r4, r0
 800b83c:	428b      	cmp	r3, r1
 800b83e:	d103      	bne.n	800b848 <_free_r+0x88>
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	1809      	adds	r1, r1, r0
 800b846:	6021      	str	r1, [r4, #0]
 800b848:	6063      	str	r3, [r4, #4]
 800b84a:	6054      	str	r4, [r2, #4]
 800b84c:	e7ca      	b.n	800b7e4 <_free_r+0x24>
 800b84e:	46c0      	nop			@ (mov r8, r8)
 800b850:	20000630 	.word	0x20000630

0800b854 <malloc>:
 800b854:	b510      	push	{r4, lr}
 800b856:	4b03      	ldr	r3, [pc, #12]	@ (800b864 <malloc+0x10>)
 800b858:	0001      	movs	r1, r0
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	f000 f826 	bl	800b8ac <_malloc_r>
 800b860:	bd10      	pop	{r4, pc}
 800b862:	46c0      	nop			@ (mov r8, r8)
 800b864:	20000018 	.word	0x20000018

0800b868 <sbrk_aligned>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4e0f      	ldr	r6, [pc, #60]	@ (800b8a8 <sbrk_aligned+0x40>)
 800b86c:	000d      	movs	r5, r1
 800b86e:	6831      	ldr	r1, [r6, #0]
 800b870:	0004      	movs	r4, r0
 800b872:	2900      	cmp	r1, #0
 800b874:	d102      	bne.n	800b87c <sbrk_aligned+0x14>
 800b876:	f000 fe67 	bl	800c548 <_sbrk_r>
 800b87a:	6030      	str	r0, [r6, #0]
 800b87c:	0029      	movs	r1, r5
 800b87e:	0020      	movs	r0, r4
 800b880:	f000 fe62 	bl	800c548 <_sbrk_r>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d103      	bne.n	800b890 <sbrk_aligned+0x28>
 800b888:	2501      	movs	r5, #1
 800b88a:	426d      	negs	r5, r5
 800b88c:	0028      	movs	r0, r5
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	2303      	movs	r3, #3
 800b892:	1cc5      	adds	r5, r0, #3
 800b894:	439d      	bics	r5, r3
 800b896:	42a8      	cmp	r0, r5
 800b898:	d0f8      	beq.n	800b88c <sbrk_aligned+0x24>
 800b89a:	1a29      	subs	r1, r5, r0
 800b89c:	0020      	movs	r0, r4
 800b89e:	f000 fe53 	bl	800c548 <_sbrk_r>
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	d1f2      	bne.n	800b88c <sbrk_aligned+0x24>
 800b8a6:	e7ef      	b.n	800b888 <sbrk_aligned+0x20>
 800b8a8:	2000062c 	.word	0x2000062c

0800b8ac <_malloc_r>:
 800b8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ae:	2203      	movs	r2, #3
 800b8b0:	1ccb      	adds	r3, r1, #3
 800b8b2:	4393      	bics	r3, r2
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	0005      	movs	r5, r0
 800b8b8:	001f      	movs	r7, r3
 800b8ba:	2b0c      	cmp	r3, #12
 800b8bc:	d234      	bcs.n	800b928 <_malloc_r+0x7c>
 800b8be:	270c      	movs	r7, #12
 800b8c0:	42b9      	cmp	r1, r7
 800b8c2:	d833      	bhi.n	800b92c <_malloc_r+0x80>
 800b8c4:	0028      	movs	r0, r5
 800b8c6:	f000 f871 	bl	800b9ac <__malloc_lock>
 800b8ca:	4e37      	ldr	r6, [pc, #220]	@ (800b9a8 <_malloc_r+0xfc>)
 800b8cc:	6833      	ldr	r3, [r6, #0]
 800b8ce:	001c      	movs	r4, r3
 800b8d0:	2c00      	cmp	r4, #0
 800b8d2:	d12f      	bne.n	800b934 <_malloc_r+0x88>
 800b8d4:	0039      	movs	r1, r7
 800b8d6:	0028      	movs	r0, r5
 800b8d8:	f7ff ffc6 	bl	800b868 <sbrk_aligned>
 800b8dc:	0004      	movs	r4, r0
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d15f      	bne.n	800b9a2 <_malloc_r+0xf6>
 800b8e2:	6834      	ldr	r4, [r6, #0]
 800b8e4:	9400      	str	r4, [sp, #0]
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d14a      	bne.n	800b982 <_malloc_r+0xd6>
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	d052      	beq.n	800b996 <_malloc_r+0xea>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	0028      	movs	r0, r5
 800b8f4:	18e3      	adds	r3, r4, r3
 800b8f6:	9900      	ldr	r1, [sp, #0]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f000 fe25 	bl	800c548 <_sbrk_r>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	4283      	cmp	r3, r0
 800b902:	d148      	bne.n	800b996 <_malloc_r+0xea>
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	0028      	movs	r0, r5
 800b908:	1aff      	subs	r7, r7, r3
 800b90a:	0039      	movs	r1, r7
 800b90c:	f7ff ffac 	bl	800b868 <sbrk_aligned>
 800b910:	3001      	adds	r0, #1
 800b912:	d040      	beq.n	800b996 <_malloc_r+0xea>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	19db      	adds	r3, r3, r7
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	6833      	ldr	r3, [r6, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	2a00      	cmp	r2, #0
 800b920:	d133      	bne.n	800b98a <_malloc_r+0xde>
 800b922:	9b00      	ldr	r3, [sp, #0]
 800b924:	6033      	str	r3, [r6, #0]
 800b926:	e019      	b.n	800b95c <_malloc_r+0xb0>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dac9      	bge.n	800b8c0 <_malloc_r+0x14>
 800b92c:	230c      	movs	r3, #12
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	2000      	movs	r0, #0
 800b932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b934:	6821      	ldr	r1, [r4, #0]
 800b936:	1bc9      	subs	r1, r1, r7
 800b938:	d420      	bmi.n	800b97c <_malloc_r+0xd0>
 800b93a:	290b      	cmp	r1, #11
 800b93c:	d90a      	bls.n	800b954 <_malloc_r+0xa8>
 800b93e:	19e2      	adds	r2, r4, r7
 800b940:	6027      	str	r7, [r4, #0]
 800b942:	42a3      	cmp	r3, r4
 800b944:	d104      	bne.n	800b950 <_malloc_r+0xa4>
 800b946:	6032      	str	r2, [r6, #0]
 800b948:	6863      	ldr	r3, [r4, #4]
 800b94a:	6011      	str	r1, [r2, #0]
 800b94c:	6053      	str	r3, [r2, #4]
 800b94e:	e005      	b.n	800b95c <_malloc_r+0xb0>
 800b950:	605a      	str	r2, [r3, #4]
 800b952:	e7f9      	b.n	800b948 <_malloc_r+0x9c>
 800b954:	6862      	ldr	r2, [r4, #4]
 800b956:	42a3      	cmp	r3, r4
 800b958:	d10e      	bne.n	800b978 <_malloc_r+0xcc>
 800b95a:	6032      	str	r2, [r6, #0]
 800b95c:	0028      	movs	r0, r5
 800b95e:	f000 f82d 	bl	800b9bc <__malloc_unlock>
 800b962:	0020      	movs	r0, r4
 800b964:	2207      	movs	r2, #7
 800b966:	300b      	adds	r0, #11
 800b968:	1d23      	adds	r3, r4, #4
 800b96a:	4390      	bics	r0, r2
 800b96c:	1ac2      	subs	r2, r0, r3
 800b96e:	4298      	cmp	r0, r3
 800b970:	d0df      	beq.n	800b932 <_malloc_r+0x86>
 800b972:	1a1b      	subs	r3, r3, r0
 800b974:	50a3      	str	r3, [r4, r2]
 800b976:	e7dc      	b.n	800b932 <_malloc_r+0x86>
 800b978:	605a      	str	r2, [r3, #4]
 800b97a:	e7ef      	b.n	800b95c <_malloc_r+0xb0>
 800b97c:	0023      	movs	r3, r4
 800b97e:	6864      	ldr	r4, [r4, #4]
 800b980:	e7a6      	b.n	800b8d0 <_malloc_r+0x24>
 800b982:	9c00      	ldr	r4, [sp, #0]
 800b984:	6863      	ldr	r3, [r4, #4]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	e7ad      	b.n	800b8e6 <_malloc_r+0x3a>
 800b98a:	001a      	movs	r2, r3
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	42a3      	cmp	r3, r4
 800b990:	d1fb      	bne.n	800b98a <_malloc_r+0xde>
 800b992:	2300      	movs	r3, #0
 800b994:	e7da      	b.n	800b94c <_malloc_r+0xa0>
 800b996:	230c      	movs	r3, #12
 800b998:	0028      	movs	r0, r5
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f000 f80e 	bl	800b9bc <__malloc_unlock>
 800b9a0:	e7c6      	b.n	800b930 <_malloc_r+0x84>
 800b9a2:	6007      	str	r7, [r0, #0]
 800b9a4:	e7da      	b.n	800b95c <_malloc_r+0xb0>
 800b9a6:	46c0      	nop			@ (mov r8, r8)
 800b9a8:	20000630 	.word	0x20000630

0800b9ac <__malloc_lock>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	4802      	ldr	r0, [pc, #8]	@ (800b9b8 <__malloc_lock+0xc>)
 800b9b0:	f7ff f883 	bl	800aaba <__retarget_lock_acquire_recursive>
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	20000628 	.word	0x20000628

0800b9bc <__malloc_unlock>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4802      	ldr	r0, [pc, #8]	@ (800b9c8 <__malloc_unlock+0xc>)
 800b9c0:	f7ff f87c 	bl	800aabc <__retarget_lock_release_recursive>
 800b9c4:	bd10      	pop	{r4, pc}
 800b9c6:	46c0      	nop			@ (mov r8, r8)
 800b9c8:	20000628 	.word	0x20000628

0800b9cc <_Balloc>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	69c5      	ldr	r5, [r0, #28]
 800b9d0:	0006      	movs	r6, r0
 800b9d2:	000c      	movs	r4, r1
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	d10e      	bne.n	800b9f6 <_Balloc+0x2a>
 800b9d8:	2010      	movs	r0, #16
 800b9da:	f7ff ff3b 	bl	800b854 <malloc>
 800b9de:	1e02      	subs	r2, r0, #0
 800b9e0:	61f0      	str	r0, [r6, #28]
 800b9e2:	d104      	bne.n	800b9ee <_Balloc+0x22>
 800b9e4:	216b      	movs	r1, #107	@ 0x6b
 800b9e6:	4b19      	ldr	r3, [pc, #100]	@ (800ba4c <_Balloc+0x80>)
 800b9e8:	4819      	ldr	r0, [pc, #100]	@ (800ba50 <_Balloc+0x84>)
 800b9ea:	f000 fdc9 	bl	800c580 <__assert_func>
 800b9ee:	6045      	str	r5, [r0, #4]
 800b9f0:	6085      	str	r5, [r0, #8]
 800b9f2:	6005      	str	r5, [r0, #0]
 800b9f4:	60c5      	str	r5, [r0, #12]
 800b9f6:	69f5      	ldr	r5, [r6, #28]
 800b9f8:	68eb      	ldr	r3, [r5, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d013      	beq.n	800ba26 <_Balloc+0x5a>
 800b9fe:	69f3      	ldr	r3, [r6, #28]
 800ba00:	00a2      	lsls	r2, r4, #2
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	189b      	adds	r3, r3, r2
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d118      	bne.n	800ba3e <_Balloc+0x72>
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	000d      	movs	r5, r1
 800ba10:	40a5      	lsls	r5, r4
 800ba12:	1d6a      	adds	r2, r5, #5
 800ba14:	0030      	movs	r0, r6
 800ba16:	0092      	lsls	r2, r2, #2
 800ba18:	f000 fdd0 	bl	800c5bc <_calloc_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d00c      	beq.n	800ba3a <_Balloc+0x6e>
 800ba20:	6044      	str	r4, [r0, #4]
 800ba22:	6085      	str	r5, [r0, #8]
 800ba24:	e00d      	b.n	800ba42 <_Balloc+0x76>
 800ba26:	2221      	movs	r2, #33	@ 0x21
 800ba28:	2104      	movs	r1, #4
 800ba2a:	0030      	movs	r0, r6
 800ba2c:	f000 fdc6 	bl	800c5bc <_calloc_r>
 800ba30:	69f3      	ldr	r3, [r6, #28]
 800ba32:	60e8      	str	r0, [r5, #12]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e1      	bne.n	800b9fe <_Balloc+0x32>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	6802      	ldr	r2, [r0, #0]
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	2300      	movs	r3, #0
 800ba44:	6103      	str	r3, [r0, #16]
 800ba46:	60c3      	str	r3, [r0, #12]
 800ba48:	e7f8      	b.n	800ba3c <_Balloc+0x70>
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	0800ce09 	.word	0x0800ce09
 800ba50:	0800ce89 	.word	0x0800ce89

0800ba54 <_Bfree>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	69c6      	ldr	r6, [r0, #28]
 800ba58:	0005      	movs	r5, r0
 800ba5a:	000c      	movs	r4, r1
 800ba5c:	2e00      	cmp	r6, #0
 800ba5e:	d10e      	bne.n	800ba7e <_Bfree+0x2a>
 800ba60:	2010      	movs	r0, #16
 800ba62:	f7ff fef7 	bl	800b854 <malloc>
 800ba66:	1e02      	subs	r2, r0, #0
 800ba68:	61e8      	str	r0, [r5, #28]
 800ba6a:	d104      	bne.n	800ba76 <_Bfree+0x22>
 800ba6c:	218f      	movs	r1, #143	@ 0x8f
 800ba6e:	4b09      	ldr	r3, [pc, #36]	@ (800ba94 <_Bfree+0x40>)
 800ba70:	4809      	ldr	r0, [pc, #36]	@ (800ba98 <_Bfree+0x44>)
 800ba72:	f000 fd85 	bl	800c580 <__assert_func>
 800ba76:	6046      	str	r6, [r0, #4]
 800ba78:	6086      	str	r6, [r0, #8]
 800ba7a:	6006      	str	r6, [r0, #0]
 800ba7c:	60c6      	str	r6, [r0, #12]
 800ba7e:	2c00      	cmp	r4, #0
 800ba80:	d007      	beq.n	800ba92 <_Bfree+0x3e>
 800ba82:	69eb      	ldr	r3, [r5, #28]
 800ba84:	6862      	ldr	r2, [r4, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	0092      	lsls	r2, r2, #2
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6022      	str	r2, [r4, #0]
 800ba90:	601c      	str	r4, [r3, #0]
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	0800ce09 	.word	0x0800ce09
 800ba98:	0800ce89 	.word	0x0800ce89

0800ba9c <__multadd>:
 800ba9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba9e:	000f      	movs	r7, r1
 800baa0:	9001      	str	r0, [sp, #4]
 800baa2:	000c      	movs	r4, r1
 800baa4:	001e      	movs	r6, r3
 800baa6:	2000      	movs	r0, #0
 800baa8:	690d      	ldr	r5, [r1, #16]
 800baaa:	3714      	adds	r7, #20
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	3001      	adds	r0, #1
 800bab0:	b299      	uxth	r1, r3
 800bab2:	4351      	muls	r1, r2
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	4353      	muls	r3, r2
 800bab8:	1989      	adds	r1, r1, r6
 800baba:	0c0e      	lsrs	r6, r1, #16
 800babc:	199b      	adds	r3, r3, r6
 800babe:	0c1e      	lsrs	r6, r3, #16
 800bac0:	b289      	uxth	r1, r1
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	185b      	adds	r3, r3, r1
 800bac6:	c708      	stmia	r7!, {r3}
 800bac8:	4285      	cmp	r5, r0
 800baca:	dcef      	bgt.n	800baac <__multadd+0x10>
 800bacc:	2e00      	cmp	r6, #0
 800bace:	d022      	beq.n	800bb16 <__multadd+0x7a>
 800bad0:	68a3      	ldr	r3, [r4, #8]
 800bad2:	42ab      	cmp	r3, r5
 800bad4:	dc19      	bgt.n	800bb0a <__multadd+0x6e>
 800bad6:	6861      	ldr	r1, [r4, #4]
 800bad8:	9801      	ldr	r0, [sp, #4]
 800bada:	3101      	adds	r1, #1
 800badc:	f7ff ff76 	bl	800b9cc <_Balloc>
 800bae0:	1e07      	subs	r7, r0, #0
 800bae2:	d105      	bne.n	800baf0 <__multadd+0x54>
 800bae4:	003a      	movs	r2, r7
 800bae6:	21ba      	movs	r1, #186	@ 0xba
 800bae8:	4b0c      	ldr	r3, [pc, #48]	@ (800bb1c <__multadd+0x80>)
 800baea:	480d      	ldr	r0, [pc, #52]	@ (800bb20 <__multadd+0x84>)
 800baec:	f000 fd48 	bl	800c580 <__assert_func>
 800baf0:	0021      	movs	r1, r4
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	310c      	adds	r1, #12
 800baf6:	3202      	adds	r2, #2
 800baf8:	0092      	lsls	r2, r2, #2
 800bafa:	300c      	adds	r0, #12
 800bafc:	f000 fd36 	bl	800c56c <memcpy>
 800bb00:	0021      	movs	r1, r4
 800bb02:	9801      	ldr	r0, [sp, #4]
 800bb04:	f7ff ffa6 	bl	800ba54 <_Bfree>
 800bb08:	003c      	movs	r4, r7
 800bb0a:	1d2b      	adds	r3, r5, #4
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	18e3      	adds	r3, r4, r3
 800bb10:	3501      	adds	r5, #1
 800bb12:	605e      	str	r6, [r3, #4]
 800bb14:	6125      	str	r5, [r4, #16]
 800bb16:	0020      	movs	r0, r4
 800bb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	0800ce78 	.word	0x0800ce78
 800bb20:	0800ce89 	.word	0x0800ce89

0800bb24 <__hi0bits>:
 800bb24:	2280      	movs	r2, #128	@ 0x80
 800bb26:	0003      	movs	r3, r0
 800bb28:	0252      	lsls	r2, r2, #9
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d201      	bcs.n	800bb34 <__hi0bits+0x10>
 800bb30:	041b      	lsls	r3, r3, #16
 800bb32:	3010      	adds	r0, #16
 800bb34:	2280      	movs	r2, #128	@ 0x80
 800bb36:	0452      	lsls	r2, r2, #17
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d201      	bcs.n	800bb40 <__hi0bits+0x1c>
 800bb3c:	3008      	adds	r0, #8
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	2280      	movs	r2, #128	@ 0x80
 800bb42:	0552      	lsls	r2, r2, #21
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d201      	bcs.n	800bb4c <__hi0bits+0x28>
 800bb48:	3004      	adds	r0, #4
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	2280      	movs	r2, #128	@ 0x80
 800bb4e:	05d2      	lsls	r2, r2, #23
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d201      	bcs.n	800bb58 <__hi0bits+0x34>
 800bb54:	3002      	adds	r0, #2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	db03      	blt.n	800bb64 <__hi0bits+0x40>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	4213      	tst	r3, r2
 800bb60:	d100      	bne.n	800bb64 <__hi0bits+0x40>
 800bb62:	2020      	movs	r0, #32
 800bb64:	4770      	bx	lr

0800bb66 <__lo0bits>:
 800bb66:	6803      	ldr	r3, [r0, #0]
 800bb68:	0001      	movs	r1, r0
 800bb6a:	2207      	movs	r2, #7
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	4010      	ands	r0, r2
 800bb70:	4213      	tst	r3, r2
 800bb72:	d00d      	beq.n	800bb90 <__lo0bits+0x2a>
 800bb74:	3a06      	subs	r2, #6
 800bb76:	2000      	movs	r0, #0
 800bb78:	4213      	tst	r3, r2
 800bb7a:	d105      	bne.n	800bb88 <__lo0bits+0x22>
 800bb7c:	3002      	adds	r0, #2
 800bb7e:	4203      	tst	r3, r0
 800bb80:	d003      	beq.n	800bb8a <__lo0bits+0x24>
 800bb82:	40d3      	lsrs	r3, r2
 800bb84:	0010      	movs	r0, r2
 800bb86:	600b      	str	r3, [r1, #0]
 800bb88:	4770      	bx	lr
 800bb8a:	089b      	lsrs	r3, r3, #2
 800bb8c:	600b      	str	r3, [r1, #0]
 800bb8e:	e7fb      	b.n	800bb88 <__lo0bits+0x22>
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	d101      	bne.n	800bb9a <__lo0bits+0x34>
 800bb96:	2010      	movs	r0, #16
 800bb98:	0c1b      	lsrs	r3, r3, #16
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	d101      	bne.n	800bba4 <__lo0bits+0x3e>
 800bba0:	3008      	adds	r0, #8
 800bba2:	0a1b      	lsrs	r3, r3, #8
 800bba4:	071a      	lsls	r2, r3, #28
 800bba6:	d101      	bne.n	800bbac <__lo0bits+0x46>
 800bba8:	3004      	adds	r0, #4
 800bbaa:	091b      	lsrs	r3, r3, #4
 800bbac:	079a      	lsls	r2, r3, #30
 800bbae:	d101      	bne.n	800bbb4 <__lo0bits+0x4e>
 800bbb0:	3002      	adds	r0, #2
 800bbb2:	089b      	lsrs	r3, r3, #2
 800bbb4:	07da      	lsls	r2, r3, #31
 800bbb6:	d4e9      	bmi.n	800bb8c <__lo0bits+0x26>
 800bbb8:	3001      	adds	r0, #1
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	d1e6      	bne.n	800bb8c <__lo0bits+0x26>
 800bbbe:	2020      	movs	r0, #32
 800bbc0:	e7e2      	b.n	800bb88 <__lo0bits+0x22>
	...

0800bbc4 <__i2b>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	000c      	movs	r4, r1
 800bbc8:	2101      	movs	r1, #1
 800bbca:	f7ff feff 	bl	800b9cc <_Balloc>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d107      	bne.n	800bbe2 <__i2b+0x1e>
 800bbd2:	2146      	movs	r1, #70	@ 0x46
 800bbd4:	4c05      	ldr	r4, [pc, #20]	@ (800bbec <__i2b+0x28>)
 800bbd6:	0002      	movs	r2, r0
 800bbd8:	4b05      	ldr	r3, [pc, #20]	@ (800bbf0 <__i2b+0x2c>)
 800bbda:	0020      	movs	r0, r4
 800bbdc:	31ff      	adds	r1, #255	@ 0xff
 800bbde:	f000 fccf 	bl	800c580 <__assert_func>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	6144      	str	r4, [r0, #20]
 800bbe6:	6103      	str	r3, [r0, #16]
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	0800ce89 	.word	0x0800ce89
 800bbf0:	0800ce78 	.word	0x0800ce78

0800bbf4 <__multiply>:
 800bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf6:	0014      	movs	r4, r2
 800bbf8:	690a      	ldr	r2, [r1, #16]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	000d      	movs	r5, r1
 800bbfe:	b089      	sub	sp, #36	@ 0x24
 800bc00:	429a      	cmp	r2, r3
 800bc02:	db02      	blt.n	800bc0a <__multiply+0x16>
 800bc04:	0023      	movs	r3, r4
 800bc06:	000c      	movs	r4, r1
 800bc08:	001d      	movs	r5, r3
 800bc0a:	6927      	ldr	r7, [r4, #16]
 800bc0c:	692e      	ldr	r6, [r5, #16]
 800bc0e:	6861      	ldr	r1, [r4, #4]
 800bc10:	19bb      	adds	r3, r7, r6
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	19ba      	adds	r2, r7, r6
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	da00      	bge.n	800bc1e <__multiply+0x2a>
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	f7ff fed5 	bl	800b9cc <_Balloc>
 800bc22:	4684      	mov	ip, r0
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d106      	bne.n	800bc36 <__multiply+0x42>
 800bc28:	21b1      	movs	r1, #177	@ 0xb1
 800bc2a:	4662      	mov	r2, ip
 800bc2c:	4b44      	ldr	r3, [pc, #272]	@ (800bd40 <__multiply+0x14c>)
 800bc2e:	4845      	ldr	r0, [pc, #276]	@ (800bd44 <__multiply+0x150>)
 800bc30:	0049      	lsls	r1, r1, #1
 800bc32:	f000 fca5 	bl	800c580 <__assert_func>
 800bc36:	0002      	movs	r2, r0
 800bc38:	19bb      	adds	r3, r7, r6
 800bc3a:	3214      	adds	r2, #20
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	18d3      	adds	r3, r2, r3
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	2100      	movs	r1, #0
 800bc44:	0013      	movs	r3, r2
 800bc46:	9801      	ldr	r0, [sp, #4]
 800bc48:	4283      	cmp	r3, r0
 800bc4a:	d328      	bcc.n	800bc9e <__multiply+0xaa>
 800bc4c:	0023      	movs	r3, r4
 800bc4e:	00bf      	lsls	r7, r7, #2
 800bc50:	3314      	adds	r3, #20
 800bc52:	9304      	str	r3, [sp, #16]
 800bc54:	3514      	adds	r5, #20
 800bc56:	19db      	adds	r3, r3, r7
 800bc58:	00b6      	lsls	r6, r6, #2
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	19ab      	adds	r3, r5, r6
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	2304      	movs	r3, #4
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	0023      	movs	r3, r4
 800bc66:	9902      	ldr	r1, [sp, #8]
 800bc68:	3315      	adds	r3, #21
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d305      	bcc.n	800bc7a <__multiply+0x86>
 800bc6e:	1b0c      	subs	r4, r1, r4
 800bc70:	3c15      	subs	r4, #21
 800bc72:	08a4      	lsrs	r4, r4, #2
 800bc74:	3401      	adds	r4, #1
 800bc76:	00a3      	lsls	r3, r4, #2
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	429d      	cmp	r5, r3
 800bc7e:	d310      	bcc.n	800bca2 <__multiply+0xae>
 800bc80:	9b00      	ldr	r3, [sp, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dd05      	ble.n	800bc92 <__multiply+0x9e>
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	3b04      	subs	r3, #4
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d052      	beq.n	800bd38 <__multiply+0x144>
 800bc92:	4663      	mov	r3, ip
 800bc94:	4660      	mov	r0, ip
 800bc96:	9a00      	ldr	r2, [sp, #0]
 800bc98:	611a      	str	r2, [r3, #16]
 800bc9a:	b009      	add	sp, #36	@ 0x24
 800bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc9e:	c302      	stmia	r3!, {r1}
 800bca0:	e7d1      	b.n	800bc46 <__multiply+0x52>
 800bca2:	682c      	ldr	r4, [r5, #0]
 800bca4:	b2a4      	uxth	r4, r4
 800bca6:	2c00      	cmp	r4, #0
 800bca8:	d01f      	beq.n	800bcea <__multiply+0xf6>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	0017      	movs	r7, r2
 800bcae:	9e04      	ldr	r6, [sp, #16]
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	ce08      	ldmia	r6!, {r3}
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	9306      	str	r3, [sp, #24]
 800bcb8:	466b      	mov	r3, sp
 800bcba:	8b1b      	ldrh	r3, [r3, #24]
 800bcbc:	b288      	uxth	r0, r1
 800bcbe:	4363      	muls	r3, r4
 800bcc0:	181b      	adds	r3, r3, r0
 800bcc2:	9803      	ldr	r0, [sp, #12]
 800bcc4:	0c09      	lsrs	r1, r1, #16
 800bcc6:	181b      	adds	r3, r3, r0
 800bcc8:	9806      	ldr	r0, [sp, #24]
 800bcca:	0c00      	lsrs	r0, r0, #16
 800bccc:	4360      	muls	r0, r4
 800bcce:	1840      	adds	r0, r0, r1
 800bcd0:	0c19      	lsrs	r1, r3, #16
 800bcd2:	1841      	adds	r1, r0, r1
 800bcd4:	0c08      	lsrs	r0, r1, #16
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	0409      	lsls	r1, r1, #16
 800bcda:	4319      	orrs	r1, r3
 800bcdc:	9b02      	ldr	r3, [sp, #8]
 800bcde:	9003      	str	r0, [sp, #12]
 800bce0:	c702      	stmia	r7!, {r1}
 800bce2:	42b3      	cmp	r3, r6
 800bce4:	d8e5      	bhi.n	800bcb2 <__multiply+0xbe>
 800bce6:	9b05      	ldr	r3, [sp, #20]
 800bce8:	50d0      	str	r0, [r2, r3]
 800bcea:	682c      	ldr	r4, [r5, #0]
 800bcec:	0c24      	lsrs	r4, r4, #16
 800bcee:	d020      	beq.n	800bd32 <__multiply+0x13e>
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	0010      	movs	r0, r2
 800bcf4:	6813      	ldr	r3, [r2, #0]
 800bcf6:	9e04      	ldr	r6, [sp, #16]
 800bcf8:	9103      	str	r1, [sp, #12]
 800bcfa:	6831      	ldr	r1, [r6, #0]
 800bcfc:	6807      	ldr	r7, [r0, #0]
 800bcfe:	b289      	uxth	r1, r1
 800bd00:	4361      	muls	r1, r4
 800bd02:	0c3f      	lsrs	r7, r7, #16
 800bd04:	19c9      	adds	r1, r1, r7
 800bd06:	9f03      	ldr	r7, [sp, #12]
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	19c9      	adds	r1, r1, r7
 800bd0c:	040f      	lsls	r7, r1, #16
 800bd0e:	431f      	orrs	r7, r3
 800bd10:	6007      	str	r7, [r0, #0]
 800bd12:	ce80      	ldmia	r6!, {r7}
 800bd14:	6843      	ldr	r3, [r0, #4]
 800bd16:	0c3f      	lsrs	r7, r7, #16
 800bd18:	4367      	muls	r7, r4
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	0c09      	lsrs	r1, r1, #16
 800bd1e:	18fb      	adds	r3, r7, r3
 800bd20:	185b      	adds	r3, r3, r1
 800bd22:	0c19      	lsrs	r1, r3, #16
 800bd24:	9103      	str	r1, [sp, #12]
 800bd26:	9902      	ldr	r1, [sp, #8]
 800bd28:	3004      	adds	r0, #4
 800bd2a:	42b1      	cmp	r1, r6
 800bd2c:	d8e5      	bhi.n	800bcfa <__multiply+0x106>
 800bd2e:	9905      	ldr	r1, [sp, #20]
 800bd30:	5053      	str	r3, [r2, r1]
 800bd32:	3504      	adds	r5, #4
 800bd34:	3204      	adds	r2, #4
 800bd36:	e7a0      	b.n	800bc7a <__multiply+0x86>
 800bd38:	9b00      	ldr	r3, [sp, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	e79f      	b.n	800bc80 <__multiply+0x8c>
 800bd40:	0800ce78 	.word	0x0800ce78
 800bd44:	0800ce89 	.word	0x0800ce89

0800bd48 <__pow5mult>:
 800bd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	0015      	movs	r5, r2
 800bd4e:	0007      	movs	r7, r0
 800bd50:	000e      	movs	r6, r1
 800bd52:	401a      	ands	r2, r3
 800bd54:	421d      	tst	r5, r3
 800bd56:	d008      	beq.n	800bd6a <__pow5mult+0x22>
 800bd58:	4925      	ldr	r1, [pc, #148]	@ (800bdf0 <__pow5mult+0xa8>)
 800bd5a:	3a01      	subs	r2, #1
 800bd5c:	0092      	lsls	r2, r2, #2
 800bd5e:	5852      	ldr	r2, [r2, r1]
 800bd60:	2300      	movs	r3, #0
 800bd62:	0031      	movs	r1, r6
 800bd64:	f7ff fe9a 	bl	800ba9c <__multadd>
 800bd68:	0006      	movs	r6, r0
 800bd6a:	10ad      	asrs	r5, r5, #2
 800bd6c:	d03d      	beq.n	800bdea <__pow5mult+0xa2>
 800bd6e:	69fc      	ldr	r4, [r7, #28]
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	d10f      	bne.n	800bd94 <__pow5mult+0x4c>
 800bd74:	2010      	movs	r0, #16
 800bd76:	f7ff fd6d 	bl	800b854 <malloc>
 800bd7a:	1e02      	subs	r2, r0, #0
 800bd7c:	61f8      	str	r0, [r7, #28]
 800bd7e:	d105      	bne.n	800bd8c <__pow5mult+0x44>
 800bd80:	21b4      	movs	r1, #180	@ 0xb4
 800bd82:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf4 <__pow5mult+0xac>)
 800bd84:	481c      	ldr	r0, [pc, #112]	@ (800bdf8 <__pow5mult+0xb0>)
 800bd86:	31ff      	adds	r1, #255	@ 0xff
 800bd88:	f000 fbfa 	bl	800c580 <__assert_func>
 800bd8c:	6044      	str	r4, [r0, #4]
 800bd8e:	6084      	str	r4, [r0, #8]
 800bd90:	6004      	str	r4, [r0, #0]
 800bd92:	60c4      	str	r4, [r0, #12]
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	689c      	ldr	r4, [r3, #8]
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	2c00      	cmp	r4, #0
 800bd9c:	d108      	bne.n	800bdb0 <__pow5mult+0x68>
 800bd9e:	0038      	movs	r0, r7
 800bda0:	4916      	ldr	r1, [pc, #88]	@ (800bdfc <__pow5mult+0xb4>)
 800bda2:	f7ff ff0f 	bl	800bbc4 <__i2b>
 800bda6:	9b01      	ldr	r3, [sp, #4]
 800bda8:	0004      	movs	r4, r0
 800bdaa:	6098      	str	r0, [r3, #8]
 800bdac:	2300      	movs	r3, #0
 800bdae:	6003      	str	r3, [r0, #0]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	421d      	tst	r5, r3
 800bdb4:	d00a      	beq.n	800bdcc <__pow5mult+0x84>
 800bdb6:	0031      	movs	r1, r6
 800bdb8:	0022      	movs	r2, r4
 800bdba:	0038      	movs	r0, r7
 800bdbc:	f7ff ff1a 	bl	800bbf4 <__multiply>
 800bdc0:	0031      	movs	r1, r6
 800bdc2:	9001      	str	r0, [sp, #4]
 800bdc4:	0038      	movs	r0, r7
 800bdc6:	f7ff fe45 	bl	800ba54 <_Bfree>
 800bdca:	9e01      	ldr	r6, [sp, #4]
 800bdcc:	106d      	asrs	r5, r5, #1
 800bdce:	d00c      	beq.n	800bdea <__pow5mult+0xa2>
 800bdd0:	6820      	ldr	r0, [r4, #0]
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d107      	bne.n	800bde6 <__pow5mult+0x9e>
 800bdd6:	0022      	movs	r2, r4
 800bdd8:	0021      	movs	r1, r4
 800bdda:	0038      	movs	r0, r7
 800bddc:	f7ff ff0a 	bl	800bbf4 <__multiply>
 800bde0:	2300      	movs	r3, #0
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	6003      	str	r3, [r0, #0]
 800bde6:	0004      	movs	r4, r0
 800bde8:	e7e2      	b.n	800bdb0 <__pow5mult+0x68>
 800bdea:	0030      	movs	r0, r6
 800bdec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	0800cf3c 	.word	0x0800cf3c
 800bdf4:	0800ce09 	.word	0x0800ce09
 800bdf8:	0800ce89 	.word	0x0800ce89
 800bdfc:	00000271 	.word	0x00000271

0800be00 <__lshift>:
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	000c      	movs	r4, r1
 800be04:	0016      	movs	r6, r2
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	1157      	asrs	r7, r2, #5
 800be0a:	b085      	sub	sp, #20
 800be0c:	18fb      	adds	r3, r7, r3
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	3301      	adds	r3, #1
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	6849      	ldr	r1, [r1, #4]
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	9002      	str	r0, [sp, #8]
 800be1a:	9a00      	ldr	r2, [sp, #0]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	db10      	blt.n	800be42 <__lshift+0x42>
 800be20:	9802      	ldr	r0, [sp, #8]
 800be22:	f7ff fdd3 	bl	800b9cc <_Balloc>
 800be26:	2300      	movs	r3, #0
 800be28:	0001      	movs	r1, r0
 800be2a:	0005      	movs	r5, r0
 800be2c:	001a      	movs	r2, r3
 800be2e:	3114      	adds	r1, #20
 800be30:	4298      	cmp	r0, r3
 800be32:	d10c      	bne.n	800be4e <__lshift+0x4e>
 800be34:	21ef      	movs	r1, #239	@ 0xef
 800be36:	002a      	movs	r2, r5
 800be38:	4b25      	ldr	r3, [pc, #148]	@ (800bed0 <__lshift+0xd0>)
 800be3a:	4826      	ldr	r0, [pc, #152]	@ (800bed4 <__lshift+0xd4>)
 800be3c:	0049      	lsls	r1, r1, #1
 800be3e:	f000 fb9f 	bl	800c580 <__assert_func>
 800be42:	3101      	adds	r1, #1
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	e7e8      	b.n	800be1a <__lshift+0x1a>
 800be48:	0098      	lsls	r0, r3, #2
 800be4a:	500a      	str	r2, [r1, r0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	42bb      	cmp	r3, r7
 800be50:	dbfa      	blt.n	800be48 <__lshift+0x48>
 800be52:	43fb      	mvns	r3, r7
 800be54:	17db      	asrs	r3, r3, #31
 800be56:	401f      	ands	r7, r3
 800be58:	00bf      	lsls	r7, r7, #2
 800be5a:	0023      	movs	r3, r4
 800be5c:	201f      	movs	r0, #31
 800be5e:	19c9      	adds	r1, r1, r7
 800be60:	0037      	movs	r7, r6
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	3314      	adds	r3, #20
 800be66:	0092      	lsls	r2, r2, #2
 800be68:	189a      	adds	r2, r3, r2
 800be6a:	4007      	ands	r7, r0
 800be6c:	4206      	tst	r6, r0
 800be6e:	d029      	beq.n	800bec4 <__lshift+0xc4>
 800be70:	3001      	adds	r0, #1
 800be72:	1bc0      	subs	r0, r0, r7
 800be74:	9003      	str	r0, [sp, #12]
 800be76:	468c      	mov	ip, r1
 800be78:	2000      	movs	r0, #0
 800be7a:	681e      	ldr	r6, [r3, #0]
 800be7c:	40be      	lsls	r6, r7
 800be7e:	4306      	orrs	r6, r0
 800be80:	4660      	mov	r0, ip
 800be82:	c040      	stmia	r0!, {r6}
 800be84:	4684      	mov	ip, r0
 800be86:	9e03      	ldr	r6, [sp, #12]
 800be88:	cb01      	ldmia	r3!, {r0}
 800be8a:	40f0      	lsrs	r0, r6
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d8f4      	bhi.n	800be7a <__lshift+0x7a>
 800be90:	0026      	movs	r6, r4
 800be92:	3615      	adds	r6, #21
 800be94:	2304      	movs	r3, #4
 800be96:	42b2      	cmp	r2, r6
 800be98:	d304      	bcc.n	800bea4 <__lshift+0xa4>
 800be9a:	1b13      	subs	r3, r2, r4
 800be9c:	3b15      	subs	r3, #21
 800be9e:	089b      	lsrs	r3, r3, #2
 800bea0:	3301      	adds	r3, #1
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	50c8      	str	r0, [r1, r3]
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d002      	beq.n	800beb0 <__lshift+0xb0>
 800beaa:	9b01      	ldr	r3, [sp, #4]
 800beac:	3302      	adds	r3, #2
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	9802      	ldr	r0, [sp, #8]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	0021      	movs	r1, r4
 800beb8:	612b      	str	r3, [r5, #16]
 800beba:	f7ff fdcb 	bl	800ba54 <_Bfree>
 800bebe:	0028      	movs	r0, r5
 800bec0:	b005      	add	sp, #20
 800bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec4:	cb01      	ldmia	r3!, {r0}
 800bec6:	c101      	stmia	r1!, {r0}
 800bec8:	429a      	cmp	r2, r3
 800beca:	d8fb      	bhi.n	800bec4 <__lshift+0xc4>
 800becc:	e7f0      	b.n	800beb0 <__lshift+0xb0>
 800bece:	46c0      	nop			@ (mov r8, r8)
 800bed0:	0800ce78 	.word	0x0800ce78
 800bed4:	0800ce89 	.word	0x0800ce89

0800bed8 <__mcmp>:
 800bed8:	b530      	push	{r4, r5, lr}
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	6904      	ldr	r4, [r0, #16]
 800bede:	0002      	movs	r2, r0
 800bee0:	1ae0      	subs	r0, r4, r3
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d10f      	bne.n	800bf06 <__mcmp+0x2e>
 800bee6:	3214      	adds	r2, #20
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	3114      	adds	r1, #20
 800beec:	0014      	movs	r4, r2
 800beee:	18c9      	adds	r1, r1, r3
 800bef0:	18d2      	adds	r2, r2, r3
 800bef2:	3a04      	subs	r2, #4
 800bef4:	3904      	subs	r1, #4
 800bef6:	6815      	ldr	r5, [r2, #0]
 800bef8:	680b      	ldr	r3, [r1, #0]
 800befa:	429d      	cmp	r5, r3
 800befc:	d004      	beq.n	800bf08 <__mcmp+0x30>
 800befe:	2001      	movs	r0, #1
 800bf00:	429d      	cmp	r5, r3
 800bf02:	d200      	bcs.n	800bf06 <__mcmp+0x2e>
 800bf04:	3802      	subs	r0, #2
 800bf06:	bd30      	pop	{r4, r5, pc}
 800bf08:	4294      	cmp	r4, r2
 800bf0a:	d3f2      	bcc.n	800bef2 <__mcmp+0x1a>
 800bf0c:	e7fb      	b.n	800bf06 <__mcmp+0x2e>
	...

0800bf10 <__mdiff>:
 800bf10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf12:	000c      	movs	r4, r1
 800bf14:	b087      	sub	sp, #28
 800bf16:	9000      	str	r0, [sp, #0]
 800bf18:	0011      	movs	r1, r2
 800bf1a:	0020      	movs	r0, r4
 800bf1c:	0017      	movs	r7, r2
 800bf1e:	f7ff ffdb 	bl	800bed8 <__mcmp>
 800bf22:	1e05      	subs	r5, r0, #0
 800bf24:	d110      	bne.n	800bf48 <__mdiff+0x38>
 800bf26:	0001      	movs	r1, r0
 800bf28:	9800      	ldr	r0, [sp, #0]
 800bf2a:	f7ff fd4f 	bl	800b9cc <_Balloc>
 800bf2e:	1e02      	subs	r2, r0, #0
 800bf30:	d104      	bne.n	800bf3c <__mdiff+0x2c>
 800bf32:	4b40      	ldr	r3, [pc, #256]	@ (800c034 <__mdiff+0x124>)
 800bf34:	4840      	ldr	r0, [pc, #256]	@ (800c038 <__mdiff+0x128>)
 800bf36:	4941      	ldr	r1, [pc, #260]	@ (800c03c <__mdiff+0x12c>)
 800bf38:	f000 fb22 	bl	800c580 <__assert_func>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	6145      	str	r5, [r0, #20]
 800bf40:	6103      	str	r3, [r0, #16]
 800bf42:	0010      	movs	r0, r2
 800bf44:	b007      	add	sp, #28
 800bf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf48:	2600      	movs	r6, #0
 800bf4a:	42b0      	cmp	r0, r6
 800bf4c:	da03      	bge.n	800bf56 <__mdiff+0x46>
 800bf4e:	0023      	movs	r3, r4
 800bf50:	003c      	movs	r4, r7
 800bf52:	001f      	movs	r7, r3
 800bf54:	3601      	adds	r6, #1
 800bf56:	6861      	ldr	r1, [r4, #4]
 800bf58:	9800      	ldr	r0, [sp, #0]
 800bf5a:	f7ff fd37 	bl	800b9cc <_Balloc>
 800bf5e:	1e02      	subs	r2, r0, #0
 800bf60:	d103      	bne.n	800bf6a <__mdiff+0x5a>
 800bf62:	4b34      	ldr	r3, [pc, #208]	@ (800c034 <__mdiff+0x124>)
 800bf64:	4834      	ldr	r0, [pc, #208]	@ (800c038 <__mdiff+0x128>)
 800bf66:	4936      	ldr	r1, [pc, #216]	@ (800c040 <__mdiff+0x130>)
 800bf68:	e7e6      	b.n	800bf38 <__mdiff+0x28>
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	3414      	adds	r4, #20
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	18e3      	adds	r3, r4, r3
 800bf74:	0021      	movs	r1, r4
 800bf76:	9401      	str	r4, [sp, #4]
 800bf78:	003c      	movs	r4, r7
 800bf7a:	9302      	str	r3, [sp, #8]
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	3414      	adds	r4, #20
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	18e3      	adds	r3, r4, r3
 800bf84:	9303      	str	r3, [sp, #12]
 800bf86:	0003      	movs	r3, r0
 800bf88:	60c6      	str	r6, [r0, #12]
 800bf8a:	468c      	mov	ip, r1
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	3314      	adds	r3, #20
 800bf90:	9304      	str	r3, [sp, #16]
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	4663      	mov	r3, ip
 800bf96:	cb20      	ldmia	r3!, {r5}
 800bf98:	b2a9      	uxth	r1, r5
 800bf9a:	000e      	movs	r6, r1
 800bf9c:	469c      	mov	ip, r3
 800bf9e:	cc08      	ldmia	r4!, {r3}
 800bfa0:	0c2d      	lsrs	r5, r5, #16
 800bfa2:	b299      	uxth	r1, r3
 800bfa4:	1a71      	subs	r1, r6, r1
 800bfa6:	1809      	adds	r1, r1, r0
 800bfa8:	0c1b      	lsrs	r3, r3, #16
 800bfaa:	1408      	asrs	r0, r1, #16
 800bfac:	1aeb      	subs	r3, r5, r3
 800bfae:	181b      	adds	r3, r3, r0
 800bfb0:	1418      	asrs	r0, r3, #16
 800bfb2:	b289      	uxth	r1, r1
 800bfb4:	041b      	lsls	r3, r3, #16
 800bfb6:	4319      	orrs	r1, r3
 800bfb8:	9b05      	ldr	r3, [sp, #20]
 800bfba:	c302      	stmia	r3!, {r1}
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	d8e7      	bhi.n	800bf94 <__mdiff+0x84>
 800bfc4:	0039      	movs	r1, r7
 800bfc6:	9c03      	ldr	r4, [sp, #12]
 800bfc8:	3115      	adds	r1, #21
 800bfca:	2304      	movs	r3, #4
 800bfcc:	428c      	cmp	r4, r1
 800bfce:	d304      	bcc.n	800bfda <__mdiff+0xca>
 800bfd0:	1be3      	subs	r3, r4, r7
 800bfd2:	3b15      	subs	r3, #21
 800bfd4:	089b      	lsrs	r3, r3, #2
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	9901      	ldr	r1, [sp, #4]
 800bfdc:	18cd      	adds	r5, r1, r3
 800bfde:	9904      	ldr	r1, [sp, #16]
 800bfe0:	002e      	movs	r6, r5
 800bfe2:	18cb      	adds	r3, r1, r3
 800bfe4:	001f      	movs	r7, r3
 800bfe6:	9902      	ldr	r1, [sp, #8]
 800bfe8:	428e      	cmp	r6, r1
 800bfea:	d311      	bcc.n	800c010 <__mdiff+0x100>
 800bfec:	9c02      	ldr	r4, [sp, #8]
 800bfee:	1ee9      	subs	r1, r5, #3
 800bff0:	2000      	movs	r0, #0
 800bff2:	428c      	cmp	r4, r1
 800bff4:	d304      	bcc.n	800c000 <__mdiff+0xf0>
 800bff6:	0021      	movs	r1, r4
 800bff8:	3103      	adds	r1, #3
 800bffa:	1b49      	subs	r1, r1, r5
 800bffc:	0889      	lsrs	r1, r1, #2
 800bffe:	0088      	lsls	r0, r1, #2
 800c000:	181b      	adds	r3, r3, r0
 800c002:	3b04      	subs	r3, #4
 800c004:	6819      	ldr	r1, [r3, #0]
 800c006:	2900      	cmp	r1, #0
 800c008:	d010      	beq.n	800c02c <__mdiff+0x11c>
 800c00a:	9b00      	ldr	r3, [sp, #0]
 800c00c:	6113      	str	r3, [r2, #16]
 800c00e:	e798      	b.n	800bf42 <__mdiff+0x32>
 800c010:	4684      	mov	ip, r0
 800c012:	ce02      	ldmia	r6!, {r1}
 800c014:	b288      	uxth	r0, r1
 800c016:	4460      	add	r0, ip
 800c018:	1400      	asrs	r0, r0, #16
 800c01a:	0c0c      	lsrs	r4, r1, #16
 800c01c:	1904      	adds	r4, r0, r4
 800c01e:	4461      	add	r1, ip
 800c020:	1420      	asrs	r0, r4, #16
 800c022:	b289      	uxth	r1, r1
 800c024:	0424      	lsls	r4, r4, #16
 800c026:	4321      	orrs	r1, r4
 800c028:	c702      	stmia	r7!, {r1}
 800c02a:	e7dc      	b.n	800bfe6 <__mdiff+0xd6>
 800c02c:	9900      	ldr	r1, [sp, #0]
 800c02e:	3901      	subs	r1, #1
 800c030:	9100      	str	r1, [sp, #0]
 800c032:	e7e6      	b.n	800c002 <__mdiff+0xf2>
 800c034:	0800ce78 	.word	0x0800ce78
 800c038:	0800ce89 	.word	0x0800ce89
 800c03c:	00000237 	.word	0x00000237
 800c040:	00000245 	.word	0x00000245

0800c044 <__d2b>:
 800c044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c046:	2101      	movs	r1, #1
 800c048:	0016      	movs	r6, r2
 800c04a:	001f      	movs	r7, r3
 800c04c:	f7ff fcbe 	bl	800b9cc <_Balloc>
 800c050:	1e04      	subs	r4, r0, #0
 800c052:	d105      	bne.n	800c060 <__d2b+0x1c>
 800c054:	0022      	movs	r2, r4
 800c056:	4b25      	ldr	r3, [pc, #148]	@ (800c0ec <__d2b+0xa8>)
 800c058:	4825      	ldr	r0, [pc, #148]	@ (800c0f0 <__d2b+0xac>)
 800c05a:	4926      	ldr	r1, [pc, #152]	@ (800c0f4 <__d2b+0xb0>)
 800c05c:	f000 fa90 	bl	800c580 <__assert_func>
 800c060:	033b      	lsls	r3, r7, #12
 800c062:	007d      	lsls	r5, r7, #1
 800c064:	0b1b      	lsrs	r3, r3, #12
 800c066:	0d6d      	lsrs	r5, r5, #21
 800c068:	d002      	beq.n	800c070 <__d2b+0x2c>
 800c06a:	2280      	movs	r2, #128	@ 0x80
 800c06c:	0352      	lsls	r2, r2, #13
 800c06e:	4313      	orrs	r3, r2
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	2e00      	cmp	r6, #0
 800c074:	d025      	beq.n	800c0c2 <__d2b+0x7e>
 800c076:	4668      	mov	r0, sp
 800c078:	9600      	str	r6, [sp, #0]
 800c07a:	f7ff fd74 	bl	800bb66 <__lo0bits>
 800c07e:	9b01      	ldr	r3, [sp, #4]
 800c080:	9900      	ldr	r1, [sp, #0]
 800c082:	2800      	cmp	r0, #0
 800c084:	d01b      	beq.n	800c0be <__d2b+0x7a>
 800c086:	2220      	movs	r2, #32
 800c088:	001e      	movs	r6, r3
 800c08a:	1a12      	subs	r2, r2, r0
 800c08c:	4096      	lsls	r6, r2
 800c08e:	0032      	movs	r2, r6
 800c090:	40c3      	lsrs	r3, r0
 800c092:	430a      	orrs	r2, r1
 800c094:	6162      	str	r2, [r4, #20]
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	9e01      	ldr	r6, [sp, #4]
 800c09a:	61a6      	str	r6, [r4, #24]
 800c09c:	1e73      	subs	r3, r6, #1
 800c09e:	419e      	sbcs	r6, r3
 800c0a0:	3601      	adds	r6, #1
 800c0a2:	6126      	str	r6, [r4, #16]
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	d014      	beq.n	800c0d2 <__d2b+0x8e>
 800c0a8:	2635      	movs	r6, #53	@ 0x35
 800c0aa:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <__d2b+0xb4>)
 800c0ac:	18ed      	adds	r5, r5, r3
 800c0ae:	9b08      	ldr	r3, [sp, #32]
 800c0b0:	182d      	adds	r5, r5, r0
 800c0b2:	601d      	str	r5, [r3, #0]
 800c0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b6:	1a36      	subs	r6, r6, r0
 800c0b8:	601e      	str	r6, [r3, #0]
 800c0ba:	0020      	movs	r0, r4
 800c0bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0be:	6161      	str	r1, [r4, #20]
 800c0c0:	e7ea      	b.n	800c098 <__d2b+0x54>
 800c0c2:	a801      	add	r0, sp, #4
 800c0c4:	f7ff fd4f 	bl	800bb66 <__lo0bits>
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	2601      	movs	r6, #1
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	3020      	adds	r0, #32
 800c0d0:	e7e7      	b.n	800c0a2 <__d2b+0x5e>
 800c0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0fc <__d2b+0xb8>)
 800c0d4:	18c0      	adds	r0, r0, r3
 800c0d6:	9b08      	ldr	r3, [sp, #32]
 800c0d8:	6018      	str	r0, [r3, #0]
 800c0da:	4b09      	ldr	r3, [pc, #36]	@ (800c100 <__d2b+0xbc>)
 800c0dc:	18f3      	adds	r3, r6, r3
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	18e3      	adds	r3, r4, r3
 800c0e2:	6958      	ldr	r0, [r3, #20]
 800c0e4:	f7ff fd1e 	bl	800bb24 <__hi0bits>
 800c0e8:	0176      	lsls	r6, r6, #5
 800c0ea:	e7e3      	b.n	800c0b4 <__d2b+0x70>
 800c0ec:	0800ce78 	.word	0x0800ce78
 800c0f0:	0800ce89 	.word	0x0800ce89
 800c0f4:	0000030f 	.word	0x0000030f
 800c0f8:	fffffbcd 	.word	0xfffffbcd
 800c0fc:	fffffbce 	.word	0xfffffbce
 800c100:	3fffffff 	.word	0x3fffffff

0800c104 <__ssputs_r>:
 800c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c106:	688e      	ldr	r6, [r1, #8]
 800c108:	b085      	sub	sp, #20
 800c10a:	001f      	movs	r7, r3
 800c10c:	000c      	movs	r4, r1
 800c10e:	680b      	ldr	r3, [r1, #0]
 800c110:	9002      	str	r0, [sp, #8]
 800c112:	9203      	str	r2, [sp, #12]
 800c114:	42be      	cmp	r6, r7
 800c116:	d830      	bhi.n	800c17a <__ssputs_r+0x76>
 800c118:	210c      	movs	r1, #12
 800c11a:	5e62      	ldrsh	r2, [r4, r1]
 800c11c:	2190      	movs	r1, #144	@ 0x90
 800c11e:	00c9      	lsls	r1, r1, #3
 800c120:	420a      	tst	r2, r1
 800c122:	d028      	beq.n	800c176 <__ssputs_r+0x72>
 800c124:	2003      	movs	r0, #3
 800c126:	6921      	ldr	r1, [r4, #16]
 800c128:	1a5b      	subs	r3, r3, r1
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	6963      	ldr	r3, [r4, #20]
 800c12e:	4343      	muls	r3, r0
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	0fdd      	lsrs	r5, r3, #31
 800c134:	18ed      	adds	r5, r5, r3
 800c136:	1c7b      	adds	r3, r7, #1
 800c138:	181b      	adds	r3, r3, r0
 800c13a:	106d      	asrs	r5, r5, #1
 800c13c:	42ab      	cmp	r3, r5
 800c13e:	d900      	bls.n	800c142 <__ssputs_r+0x3e>
 800c140:	001d      	movs	r5, r3
 800c142:	0552      	lsls	r2, r2, #21
 800c144:	d528      	bpl.n	800c198 <__ssputs_r+0x94>
 800c146:	0029      	movs	r1, r5
 800c148:	9802      	ldr	r0, [sp, #8]
 800c14a:	f7ff fbaf 	bl	800b8ac <_malloc_r>
 800c14e:	1e06      	subs	r6, r0, #0
 800c150:	d02c      	beq.n	800c1ac <__ssputs_r+0xa8>
 800c152:	9a01      	ldr	r2, [sp, #4]
 800c154:	6921      	ldr	r1, [r4, #16]
 800c156:	f000 fa09 	bl	800c56c <memcpy>
 800c15a:	89a2      	ldrh	r2, [r4, #12]
 800c15c:	4b18      	ldr	r3, [pc, #96]	@ (800c1c0 <__ssputs_r+0xbc>)
 800c15e:	401a      	ands	r2, r3
 800c160:	2380      	movs	r3, #128	@ 0x80
 800c162:	4313      	orrs	r3, r2
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	6126      	str	r6, [r4, #16]
 800c16a:	18f6      	adds	r6, r6, r3
 800c16c:	6026      	str	r6, [r4, #0]
 800c16e:	003e      	movs	r6, r7
 800c170:	6165      	str	r5, [r4, #20]
 800c172:	1aed      	subs	r5, r5, r3
 800c174:	60a5      	str	r5, [r4, #8]
 800c176:	42be      	cmp	r6, r7
 800c178:	d900      	bls.n	800c17c <__ssputs_r+0x78>
 800c17a:	003e      	movs	r6, r7
 800c17c:	0032      	movs	r2, r6
 800c17e:	9903      	ldr	r1, [sp, #12]
 800c180:	6820      	ldr	r0, [r4, #0]
 800c182:	f000 f9ce 	bl	800c522 <memmove>
 800c186:	2000      	movs	r0, #0
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	1b9b      	subs	r3, r3, r6
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	199b      	adds	r3, r3, r6
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	b005      	add	sp, #20
 800c196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c198:	002a      	movs	r2, r5
 800c19a:	9802      	ldr	r0, [sp, #8]
 800c19c:	f000 fa4d 	bl	800c63a <_realloc_r>
 800c1a0:	1e06      	subs	r6, r0, #0
 800c1a2:	d1e0      	bne.n	800c166 <__ssputs_r+0x62>
 800c1a4:	6921      	ldr	r1, [r4, #16]
 800c1a6:	9802      	ldr	r0, [sp, #8]
 800c1a8:	f7ff fb0a 	bl	800b7c0 <_free_r>
 800c1ac:	230c      	movs	r3, #12
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	9a02      	ldr	r2, [sp, #8]
 800c1b2:	4240      	negs	r0, r0
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	89a2      	ldrh	r2, [r4, #12]
 800c1b8:	3334      	adds	r3, #52	@ 0x34
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	e7e9      	b.n	800c194 <__ssputs_r+0x90>
 800c1c0:	fffffb7f 	.word	0xfffffb7f

0800c1c4 <_svfiprintf_r>:
 800c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1c6:	b0a1      	sub	sp, #132	@ 0x84
 800c1c8:	9003      	str	r0, [sp, #12]
 800c1ca:	001d      	movs	r5, r3
 800c1cc:	898b      	ldrh	r3, [r1, #12]
 800c1ce:	000f      	movs	r7, r1
 800c1d0:	0016      	movs	r6, r2
 800c1d2:	061b      	lsls	r3, r3, #24
 800c1d4:	d511      	bpl.n	800c1fa <_svfiprintf_r+0x36>
 800c1d6:	690b      	ldr	r3, [r1, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10e      	bne.n	800c1fa <_svfiprintf_r+0x36>
 800c1dc:	2140      	movs	r1, #64	@ 0x40
 800c1de:	f7ff fb65 	bl	800b8ac <_malloc_r>
 800c1e2:	6038      	str	r0, [r7, #0]
 800c1e4:	6138      	str	r0, [r7, #16]
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d105      	bne.n	800c1f6 <_svfiprintf_r+0x32>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	9a03      	ldr	r2, [sp, #12]
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	4240      	negs	r0, r0
 800c1f4:	e0cf      	b.n	800c396 <_svfiprintf_r+0x1d2>
 800c1f6:	2340      	movs	r3, #64	@ 0x40
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	ac08      	add	r4, sp, #32
 800c1fe:	6163      	str	r3, [r4, #20]
 800c200:	3320      	adds	r3, #32
 800c202:	7663      	strb	r3, [r4, #25]
 800c204:	3310      	adds	r3, #16
 800c206:	76a3      	strb	r3, [r4, #26]
 800c208:	9507      	str	r5, [sp, #28]
 800c20a:	0035      	movs	r5, r6
 800c20c:	782b      	ldrb	r3, [r5, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <_svfiprintf_r+0x52>
 800c212:	2b25      	cmp	r3, #37	@ 0x25
 800c214:	d148      	bne.n	800c2a8 <_svfiprintf_r+0xe4>
 800c216:	1bab      	subs	r3, r5, r6
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	42b5      	cmp	r5, r6
 800c21c:	d00b      	beq.n	800c236 <_svfiprintf_r+0x72>
 800c21e:	0032      	movs	r2, r6
 800c220:	0039      	movs	r1, r7
 800c222:	9803      	ldr	r0, [sp, #12]
 800c224:	f7ff ff6e 	bl	800c104 <__ssputs_r>
 800c228:	3001      	adds	r0, #1
 800c22a:	d100      	bne.n	800c22e <_svfiprintf_r+0x6a>
 800c22c:	e0ae      	b.n	800c38c <_svfiprintf_r+0x1c8>
 800c22e:	6963      	ldr	r3, [r4, #20]
 800c230:	9a05      	ldr	r2, [sp, #20]
 800c232:	189b      	adds	r3, r3, r2
 800c234:	6163      	str	r3, [r4, #20]
 800c236:	782b      	ldrb	r3, [r5, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d100      	bne.n	800c23e <_svfiprintf_r+0x7a>
 800c23c:	e0a6      	b.n	800c38c <_svfiprintf_r+0x1c8>
 800c23e:	2201      	movs	r2, #1
 800c240:	2300      	movs	r3, #0
 800c242:	4252      	negs	r2, r2
 800c244:	6062      	str	r2, [r4, #4]
 800c246:	a904      	add	r1, sp, #16
 800c248:	3254      	adds	r2, #84	@ 0x54
 800c24a:	1852      	adds	r2, r2, r1
 800c24c:	1c6e      	adds	r6, r5, #1
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	60e3      	str	r3, [r4, #12]
 800c252:	60a3      	str	r3, [r4, #8]
 800c254:	7013      	strb	r3, [r2, #0]
 800c256:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c258:	4b54      	ldr	r3, [pc, #336]	@ (800c3ac <_svfiprintf_r+0x1e8>)
 800c25a:	2205      	movs	r2, #5
 800c25c:	0018      	movs	r0, r3
 800c25e:	7831      	ldrb	r1, [r6, #0]
 800c260:	9305      	str	r3, [sp, #20]
 800c262:	f7fe fc2c 	bl	800aabe <memchr>
 800c266:	1c75      	adds	r5, r6, #1
 800c268:	2800      	cmp	r0, #0
 800c26a:	d11f      	bne.n	800c2ac <_svfiprintf_r+0xe8>
 800c26c:	6822      	ldr	r2, [r4, #0]
 800c26e:	06d3      	lsls	r3, r2, #27
 800c270:	d504      	bpl.n	800c27c <_svfiprintf_r+0xb8>
 800c272:	2353      	movs	r3, #83	@ 0x53
 800c274:	a904      	add	r1, sp, #16
 800c276:	185b      	adds	r3, r3, r1
 800c278:	2120      	movs	r1, #32
 800c27a:	7019      	strb	r1, [r3, #0]
 800c27c:	0713      	lsls	r3, r2, #28
 800c27e:	d504      	bpl.n	800c28a <_svfiprintf_r+0xc6>
 800c280:	2353      	movs	r3, #83	@ 0x53
 800c282:	a904      	add	r1, sp, #16
 800c284:	185b      	adds	r3, r3, r1
 800c286:	212b      	movs	r1, #43	@ 0x2b
 800c288:	7019      	strb	r1, [r3, #0]
 800c28a:	7833      	ldrb	r3, [r6, #0]
 800c28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c28e:	d016      	beq.n	800c2be <_svfiprintf_r+0xfa>
 800c290:	0035      	movs	r5, r6
 800c292:	2100      	movs	r1, #0
 800c294:	200a      	movs	r0, #10
 800c296:	68e3      	ldr	r3, [r4, #12]
 800c298:	782a      	ldrb	r2, [r5, #0]
 800c29a:	1c6e      	adds	r6, r5, #1
 800c29c:	3a30      	subs	r2, #48	@ 0x30
 800c29e:	2a09      	cmp	r2, #9
 800c2a0:	d950      	bls.n	800c344 <_svfiprintf_r+0x180>
 800c2a2:	2900      	cmp	r1, #0
 800c2a4:	d111      	bne.n	800c2ca <_svfiprintf_r+0x106>
 800c2a6:	e017      	b.n	800c2d8 <_svfiprintf_r+0x114>
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	e7af      	b.n	800c20c <_svfiprintf_r+0x48>
 800c2ac:	9b05      	ldr	r3, [sp, #20]
 800c2ae:	6822      	ldr	r2, [r4, #0]
 800c2b0:	1ac0      	subs	r0, r0, r3
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	4083      	lsls	r3, r0
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	002e      	movs	r6, r5
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	e7cc      	b.n	800c258 <_svfiprintf_r+0x94>
 800c2be:	9b07      	ldr	r3, [sp, #28]
 800c2c0:	1d19      	adds	r1, r3, #4
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	9107      	str	r1, [sp, #28]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	db01      	blt.n	800c2ce <_svfiprintf_r+0x10a>
 800c2ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2cc:	e004      	b.n	800c2d8 <_svfiprintf_r+0x114>
 800c2ce:	425b      	negs	r3, r3
 800c2d0:	60e3      	str	r3, [r4, #12]
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	782b      	ldrb	r3, [r5, #0]
 800c2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2dc:	d10c      	bne.n	800c2f8 <_svfiprintf_r+0x134>
 800c2de:	786b      	ldrb	r3, [r5, #1]
 800c2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2e2:	d134      	bne.n	800c34e <_svfiprintf_r+0x18a>
 800c2e4:	9b07      	ldr	r3, [sp, #28]
 800c2e6:	3502      	adds	r5, #2
 800c2e8:	1d1a      	adds	r2, r3, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	9207      	str	r2, [sp, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	da01      	bge.n	800c2f6 <_svfiprintf_r+0x132>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	425b      	negs	r3, r3
 800c2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f8:	4e2d      	ldr	r6, [pc, #180]	@ (800c3b0 <_svfiprintf_r+0x1ec>)
 800c2fa:	2203      	movs	r2, #3
 800c2fc:	0030      	movs	r0, r6
 800c2fe:	7829      	ldrb	r1, [r5, #0]
 800c300:	f7fe fbdd 	bl	800aabe <memchr>
 800c304:	2800      	cmp	r0, #0
 800c306:	d006      	beq.n	800c316 <_svfiprintf_r+0x152>
 800c308:	2340      	movs	r3, #64	@ 0x40
 800c30a:	1b80      	subs	r0, r0, r6
 800c30c:	4083      	lsls	r3, r0
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	3501      	adds	r5, #1
 800c312:	4313      	orrs	r3, r2
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	7829      	ldrb	r1, [r5, #0]
 800c318:	2206      	movs	r2, #6
 800c31a:	4826      	ldr	r0, [pc, #152]	@ (800c3b4 <_svfiprintf_r+0x1f0>)
 800c31c:	1c6e      	adds	r6, r5, #1
 800c31e:	7621      	strb	r1, [r4, #24]
 800c320:	f7fe fbcd 	bl	800aabe <memchr>
 800c324:	2800      	cmp	r0, #0
 800c326:	d038      	beq.n	800c39a <_svfiprintf_r+0x1d6>
 800c328:	4b23      	ldr	r3, [pc, #140]	@ (800c3b8 <_svfiprintf_r+0x1f4>)
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d122      	bne.n	800c374 <_svfiprintf_r+0x1b0>
 800c32e:	2207      	movs	r2, #7
 800c330:	9b07      	ldr	r3, [sp, #28]
 800c332:	3307      	adds	r3, #7
 800c334:	4393      	bics	r3, r2
 800c336:	3308      	adds	r3, #8
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	6963      	ldr	r3, [r4, #20]
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	189b      	adds	r3, r3, r2
 800c340:	6163      	str	r3, [r4, #20]
 800c342:	e762      	b.n	800c20a <_svfiprintf_r+0x46>
 800c344:	4343      	muls	r3, r0
 800c346:	0035      	movs	r5, r6
 800c348:	2101      	movs	r1, #1
 800c34a:	189b      	adds	r3, r3, r2
 800c34c:	e7a4      	b.n	800c298 <_svfiprintf_r+0xd4>
 800c34e:	2300      	movs	r3, #0
 800c350:	200a      	movs	r0, #10
 800c352:	0019      	movs	r1, r3
 800c354:	3501      	adds	r5, #1
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	782a      	ldrb	r2, [r5, #0]
 800c35a:	1c6e      	adds	r6, r5, #1
 800c35c:	3a30      	subs	r2, #48	@ 0x30
 800c35e:	2a09      	cmp	r2, #9
 800c360:	d903      	bls.n	800c36a <_svfiprintf_r+0x1a6>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c8      	beq.n	800c2f8 <_svfiprintf_r+0x134>
 800c366:	9109      	str	r1, [sp, #36]	@ 0x24
 800c368:	e7c6      	b.n	800c2f8 <_svfiprintf_r+0x134>
 800c36a:	4341      	muls	r1, r0
 800c36c:	0035      	movs	r5, r6
 800c36e:	2301      	movs	r3, #1
 800c370:	1889      	adds	r1, r1, r2
 800c372:	e7f1      	b.n	800c358 <_svfiprintf_r+0x194>
 800c374:	aa07      	add	r2, sp, #28
 800c376:	9200      	str	r2, [sp, #0]
 800c378:	0021      	movs	r1, r4
 800c37a:	003a      	movs	r2, r7
 800c37c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3bc <_svfiprintf_r+0x1f8>)
 800c37e:	9803      	ldr	r0, [sp, #12]
 800c380:	f7fd fe2a 	bl	8009fd8 <_printf_float>
 800c384:	9004      	str	r0, [sp, #16]
 800c386:	9b04      	ldr	r3, [sp, #16]
 800c388:	3301      	adds	r3, #1
 800c38a:	d1d6      	bne.n	800c33a <_svfiprintf_r+0x176>
 800c38c:	89bb      	ldrh	r3, [r7, #12]
 800c38e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c390:	065b      	lsls	r3, r3, #25
 800c392:	d500      	bpl.n	800c396 <_svfiprintf_r+0x1d2>
 800c394:	e72c      	b.n	800c1f0 <_svfiprintf_r+0x2c>
 800c396:	b021      	add	sp, #132	@ 0x84
 800c398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c39a:	aa07      	add	r2, sp, #28
 800c39c:	9200      	str	r2, [sp, #0]
 800c39e:	0021      	movs	r1, r4
 800c3a0:	003a      	movs	r2, r7
 800c3a2:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <_svfiprintf_r+0x1f8>)
 800c3a4:	9803      	ldr	r0, [sp, #12]
 800c3a6:	f7fe f8c5 	bl	800a534 <_printf_i>
 800c3aa:	e7eb      	b.n	800c384 <_svfiprintf_r+0x1c0>
 800c3ac:	0800cee2 	.word	0x0800cee2
 800c3b0:	0800cee8 	.word	0x0800cee8
 800c3b4:	0800ceec 	.word	0x0800ceec
 800c3b8:	08009fd9 	.word	0x08009fd9
 800c3bc:	0800c105 	.word	0x0800c105

0800c3c0 <__sflush_r>:
 800c3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c2:	220c      	movs	r2, #12
 800c3c4:	5e8b      	ldrsh	r3, [r1, r2]
 800c3c6:	0005      	movs	r5, r0
 800c3c8:	000c      	movs	r4, r1
 800c3ca:	071a      	lsls	r2, r3, #28
 800c3cc:	d456      	bmi.n	800c47c <__sflush_r+0xbc>
 800c3ce:	684a      	ldr	r2, [r1, #4]
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	dc02      	bgt.n	800c3da <__sflush_r+0x1a>
 800c3d4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	dd4e      	ble.n	800c478 <__sflush_r+0xb8>
 800c3da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c3dc:	2f00      	cmp	r7, #0
 800c3de:	d04b      	beq.n	800c478 <__sflush_r+0xb8>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2080      	movs	r0, #128	@ 0x80
 800c3e4:	682e      	ldr	r6, [r5, #0]
 800c3e6:	602a      	str	r2, [r5, #0]
 800c3e8:	001a      	movs	r2, r3
 800c3ea:	0140      	lsls	r0, r0, #5
 800c3ec:	6a21      	ldr	r1, [r4, #32]
 800c3ee:	4002      	ands	r2, r0
 800c3f0:	4203      	tst	r3, r0
 800c3f2:	d033      	beq.n	800c45c <__sflush_r+0x9c>
 800c3f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3f6:	89a3      	ldrh	r3, [r4, #12]
 800c3f8:	075b      	lsls	r3, r3, #29
 800c3fa:	d506      	bpl.n	800c40a <__sflush_r+0x4a>
 800c3fc:	6863      	ldr	r3, [r4, #4]
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <__sflush_r+0x4a>
 800c406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c408:	1ad2      	subs	r2, r2, r3
 800c40a:	2300      	movs	r3, #0
 800c40c:	0028      	movs	r0, r5
 800c40e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	47b8      	blx	r7
 800c414:	89a2      	ldrh	r2, [r4, #12]
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	d106      	bne.n	800c428 <__sflush_r+0x68>
 800c41a:	6829      	ldr	r1, [r5, #0]
 800c41c:	291d      	cmp	r1, #29
 800c41e:	d846      	bhi.n	800c4ae <__sflush_r+0xee>
 800c420:	4b29      	ldr	r3, [pc, #164]	@ (800c4c8 <__sflush_r+0x108>)
 800c422:	40cb      	lsrs	r3, r1
 800c424:	07db      	lsls	r3, r3, #31
 800c426:	d542      	bpl.n	800c4ae <__sflush_r+0xee>
 800c428:	2300      	movs	r3, #0
 800c42a:	6063      	str	r3, [r4, #4]
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	04d2      	lsls	r2, r2, #19
 800c432:	d505      	bpl.n	800c440 <__sflush_r+0x80>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <__sflush_r+0x7e>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d100      	bne.n	800c440 <__sflush_r+0x80>
 800c43e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c442:	602e      	str	r6, [r5, #0]
 800c444:	2900      	cmp	r1, #0
 800c446:	d017      	beq.n	800c478 <__sflush_r+0xb8>
 800c448:	0023      	movs	r3, r4
 800c44a:	3344      	adds	r3, #68	@ 0x44
 800c44c:	4299      	cmp	r1, r3
 800c44e:	d002      	beq.n	800c456 <__sflush_r+0x96>
 800c450:	0028      	movs	r0, r5
 800c452:	f7ff f9b5 	bl	800b7c0 <_free_r>
 800c456:	2300      	movs	r3, #0
 800c458:	6363      	str	r3, [r4, #52]	@ 0x34
 800c45a:	e00d      	b.n	800c478 <__sflush_r+0xb8>
 800c45c:	2301      	movs	r3, #1
 800c45e:	0028      	movs	r0, r5
 800c460:	47b8      	blx	r7
 800c462:	0002      	movs	r2, r0
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d1c6      	bne.n	800c3f6 <__sflush_r+0x36>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0c3      	beq.n	800c3f6 <__sflush_r+0x36>
 800c46e:	2b1d      	cmp	r3, #29
 800c470:	d001      	beq.n	800c476 <__sflush_r+0xb6>
 800c472:	2b16      	cmp	r3, #22
 800c474:	d11a      	bne.n	800c4ac <__sflush_r+0xec>
 800c476:	602e      	str	r6, [r5, #0]
 800c478:	2000      	movs	r0, #0
 800c47a:	e01e      	b.n	800c4ba <__sflush_r+0xfa>
 800c47c:	690e      	ldr	r6, [r1, #16]
 800c47e:	2e00      	cmp	r6, #0
 800c480:	d0fa      	beq.n	800c478 <__sflush_r+0xb8>
 800c482:	680f      	ldr	r7, [r1, #0]
 800c484:	600e      	str	r6, [r1, #0]
 800c486:	1bba      	subs	r2, r7, r6
 800c488:	9201      	str	r2, [sp, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	079b      	lsls	r3, r3, #30
 800c48e:	d100      	bne.n	800c492 <__sflush_r+0xd2>
 800c490:	694a      	ldr	r2, [r1, #20]
 800c492:	60a2      	str	r2, [r4, #8]
 800c494:	9b01      	ldr	r3, [sp, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	ddee      	ble.n	800c478 <__sflush_r+0xb8>
 800c49a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c49c:	0032      	movs	r2, r6
 800c49e:	001f      	movs	r7, r3
 800c4a0:	0028      	movs	r0, r5
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	6a21      	ldr	r1, [r4, #32]
 800c4a6:	47b8      	blx	r7
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dc07      	bgt.n	800c4bc <__sflush_r+0xfc>
 800c4ac:	89a2      	ldrh	r2, [r4, #12]
 800c4ae:	2340      	movs	r3, #64	@ 0x40
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	b21b      	sxth	r3, r3
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	4240      	negs	r0, r0
 800c4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	1836      	adds	r6, r6, r0
 800c4c0:	1a1b      	subs	r3, r3, r0
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	e7e6      	b.n	800c494 <__sflush_r+0xd4>
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	20400001 	.word	0x20400001

0800c4cc <_fflush_r>:
 800c4cc:	690b      	ldr	r3, [r1, #16]
 800c4ce:	b570      	push	{r4, r5, r6, lr}
 800c4d0:	0005      	movs	r5, r0
 800c4d2:	000c      	movs	r4, r1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d102      	bne.n	800c4de <_fflush_r+0x12>
 800c4d8:	2500      	movs	r5, #0
 800c4da:	0028      	movs	r0, r5
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d004      	beq.n	800c4ec <_fflush_r+0x20>
 800c4e2:	6a03      	ldr	r3, [r0, #32]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <_fflush_r+0x20>
 800c4e8:	f7fe f9c0 	bl	800a86c <__sinit>
 800c4ec:	220c      	movs	r2, #12
 800c4ee:	5ea3      	ldrsh	r3, [r4, r2]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0f1      	beq.n	800c4d8 <_fflush_r+0xc>
 800c4f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4f6:	07d2      	lsls	r2, r2, #31
 800c4f8:	d404      	bmi.n	800c504 <_fflush_r+0x38>
 800c4fa:	059b      	lsls	r3, r3, #22
 800c4fc:	d402      	bmi.n	800c504 <_fflush_r+0x38>
 800c4fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c500:	f7fe fadb 	bl	800aaba <__retarget_lock_acquire_recursive>
 800c504:	0028      	movs	r0, r5
 800c506:	0021      	movs	r1, r4
 800c508:	f7ff ff5a 	bl	800c3c0 <__sflush_r>
 800c50c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c50e:	0005      	movs	r5, r0
 800c510:	07db      	lsls	r3, r3, #31
 800c512:	d4e2      	bmi.n	800c4da <_fflush_r+0xe>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	059b      	lsls	r3, r3, #22
 800c518:	d4df      	bmi.n	800c4da <_fflush_r+0xe>
 800c51a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c51c:	f7fe face 	bl	800aabc <__retarget_lock_release_recursive>
 800c520:	e7db      	b.n	800c4da <_fflush_r+0xe>

0800c522 <memmove>:
 800c522:	b510      	push	{r4, lr}
 800c524:	4288      	cmp	r0, r1
 800c526:	d902      	bls.n	800c52e <memmove+0xc>
 800c528:	188b      	adds	r3, r1, r2
 800c52a:	4298      	cmp	r0, r3
 800c52c:	d308      	bcc.n	800c540 <memmove+0x1e>
 800c52e:	2300      	movs	r3, #0
 800c530:	429a      	cmp	r2, r3
 800c532:	d007      	beq.n	800c544 <memmove+0x22>
 800c534:	5ccc      	ldrb	r4, [r1, r3]
 800c536:	54c4      	strb	r4, [r0, r3]
 800c538:	3301      	adds	r3, #1
 800c53a:	e7f9      	b.n	800c530 <memmove+0xe>
 800c53c:	5c8b      	ldrb	r3, [r1, r2]
 800c53e:	5483      	strb	r3, [r0, r2]
 800c540:	3a01      	subs	r2, #1
 800c542:	d2fb      	bcs.n	800c53c <memmove+0x1a>
 800c544:	bd10      	pop	{r4, pc}
	...

0800c548 <_sbrk_r>:
 800c548:	2300      	movs	r3, #0
 800c54a:	b570      	push	{r4, r5, r6, lr}
 800c54c:	4d06      	ldr	r5, [pc, #24]	@ (800c568 <_sbrk_r+0x20>)
 800c54e:	0004      	movs	r4, r0
 800c550:	0008      	movs	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f8 f9ba 	bl	80048cc <_sbrk>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d103      	bne.n	800c564 <_sbrk_r+0x1c>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d000      	beq.n	800c564 <_sbrk_r+0x1c>
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	bd70      	pop	{r4, r5, r6, pc}
 800c566:	46c0      	nop			@ (mov r8, r8)
 800c568:	20000624 	.word	0x20000624

0800c56c <memcpy>:
 800c56c:	2300      	movs	r3, #0
 800c56e:	b510      	push	{r4, lr}
 800c570:	429a      	cmp	r2, r3
 800c572:	d100      	bne.n	800c576 <memcpy+0xa>
 800c574:	bd10      	pop	{r4, pc}
 800c576:	5ccc      	ldrb	r4, [r1, r3]
 800c578:	54c4      	strb	r4, [r0, r3]
 800c57a:	3301      	adds	r3, #1
 800c57c:	e7f8      	b.n	800c570 <memcpy+0x4>
	...

0800c580 <__assert_func>:
 800c580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c582:	0014      	movs	r4, r2
 800c584:	001a      	movs	r2, r3
 800c586:	4b09      	ldr	r3, [pc, #36]	@ (800c5ac <__assert_func+0x2c>)
 800c588:	0005      	movs	r5, r0
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	000e      	movs	r6, r1
 800c58e:	68d8      	ldr	r0, [r3, #12]
 800c590:	4b07      	ldr	r3, [pc, #28]	@ (800c5b0 <__assert_func+0x30>)
 800c592:	2c00      	cmp	r4, #0
 800c594:	d101      	bne.n	800c59a <__assert_func+0x1a>
 800c596:	4b07      	ldr	r3, [pc, #28]	@ (800c5b4 <__assert_func+0x34>)
 800c598:	001c      	movs	r4, r3
 800c59a:	4907      	ldr	r1, [pc, #28]	@ (800c5b8 <__assert_func+0x38>)
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	9402      	str	r4, [sp, #8]
 800c5a0:	002b      	movs	r3, r5
 800c5a2:	9600      	str	r6, [sp, #0]
 800c5a4:	f000 f886 	bl	800c6b4 <fiprintf>
 800c5a8:	f000 f894 	bl	800c6d4 <abort>
 800c5ac:	20000018 	.word	0x20000018
 800c5b0:	0800cefd 	.word	0x0800cefd
 800c5b4:	0800cf38 	.word	0x0800cf38
 800c5b8:	0800cf0a 	.word	0x0800cf0a

0800c5bc <_calloc_r>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	0c0b      	lsrs	r3, r1, #16
 800c5c0:	0c15      	lsrs	r5, r2, #16
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d11e      	bne.n	800c604 <_calloc_r+0x48>
 800c5c6:	2d00      	cmp	r5, #0
 800c5c8:	d10c      	bne.n	800c5e4 <_calloc_r+0x28>
 800c5ca:	b289      	uxth	r1, r1
 800c5cc:	b294      	uxth	r4, r2
 800c5ce:	434c      	muls	r4, r1
 800c5d0:	0021      	movs	r1, r4
 800c5d2:	f7ff f96b 	bl	800b8ac <_malloc_r>
 800c5d6:	1e05      	subs	r5, r0, #0
 800c5d8:	d01b      	beq.n	800c612 <_calloc_r+0x56>
 800c5da:	0022      	movs	r2, r4
 800c5dc:	2100      	movs	r1, #0
 800c5de:	f7fe f9e7 	bl	800a9b0 <memset>
 800c5e2:	e016      	b.n	800c612 <_calloc_r+0x56>
 800c5e4:	1c2b      	adds	r3, r5, #0
 800c5e6:	1c0c      	adds	r4, r1, #0
 800c5e8:	b289      	uxth	r1, r1
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	434a      	muls	r2, r1
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	b2a1      	uxth	r1, r4
 800c5f2:	4359      	muls	r1, r3
 800c5f4:	0c14      	lsrs	r4, r2, #16
 800c5f6:	190c      	adds	r4, r1, r4
 800c5f8:	0c23      	lsrs	r3, r4, #16
 800c5fa:	d107      	bne.n	800c60c <_calloc_r+0x50>
 800c5fc:	0424      	lsls	r4, r4, #16
 800c5fe:	b292      	uxth	r2, r2
 800c600:	4314      	orrs	r4, r2
 800c602:	e7e5      	b.n	800c5d0 <_calloc_r+0x14>
 800c604:	2d00      	cmp	r5, #0
 800c606:	d101      	bne.n	800c60c <_calloc_r+0x50>
 800c608:	1c14      	adds	r4, r2, #0
 800c60a:	e7ed      	b.n	800c5e8 <_calloc_r+0x2c>
 800c60c:	230c      	movs	r3, #12
 800c60e:	2500      	movs	r5, #0
 800c610:	6003      	str	r3, [r0, #0]
 800c612:	0028      	movs	r0, r5
 800c614:	bd70      	pop	{r4, r5, r6, pc}

0800c616 <__ascii_mbtowc>:
 800c616:	b082      	sub	sp, #8
 800c618:	2900      	cmp	r1, #0
 800c61a:	d100      	bne.n	800c61e <__ascii_mbtowc+0x8>
 800c61c:	a901      	add	r1, sp, #4
 800c61e:	1e10      	subs	r0, r2, #0
 800c620:	d006      	beq.n	800c630 <__ascii_mbtowc+0x1a>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d006      	beq.n	800c634 <__ascii_mbtowc+0x1e>
 800c626:	7813      	ldrb	r3, [r2, #0]
 800c628:	600b      	str	r3, [r1, #0]
 800c62a:	7810      	ldrb	r0, [r2, #0]
 800c62c:	1e43      	subs	r3, r0, #1
 800c62e:	4198      	sbcs	r0, r3
 800c630:	b002      	add	sp, #8
 800c632:	4770      	bx	lr
 800c634:	2002      	movs	r0, #2
 800c636:	4240      	negs	r0, r0
 800c638:	e7fa      	b.n	800c630 <__ascii_mbtowc+0x1a>

0800c63a <_realloc_r>:
 800c63a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c63c:	0006      	movs	r6, r0
 800c63e:	000c      	movs	r4, r1
 800c640:	0015      	movs	r5, r2
 800c642:	2900      	cmp	r1, #0
 800c644:	d105      	bne.n	800c652 <_realloc_r+0x18>
 800c646:	0011      	movs	r1, r2
 800c648:	f7ff f930 	bl	800b8ac <_malloc_r>
 800c64c:	0004      	movs	r4, r0
 800c64e:	0020      	movs	r0, r4
 800c650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c652:	2a00      	cmp	r2, #0
 800c654:	d103      	bne.n	800c65e <_realloc_r+0x24>
 800c656:	f7ff f8b3 	bl	800b7c0 <_free_r>
 800c65a:	002c      	movs	r4, r5
 800c65c:	e7f7      	b.n	800c64e <_realloc_r+0x14>
 800c65e:	f000 f840 	bl	800c6e2 <_malloc_usable_size_r>
 800c662:	0007      	movs	r7, r0
 800c664:	4285      	cmp	r5, r0
 800c666:	d802      	bhi.n	800c66e <_realloc_r+0x34>
 800c668:	0843      	lsrs	r3, r0, #1
 800c66a:	42ab      	cmp	r3, r5
 800c66c:	d3ef      	bcc.n	800c64e <_realloc_r+0x14>
 800c66e:	0029      	movs	r1, r5
 800c670:	0030      	movs	r0, r6
 800c672:	f7ff f91b 	bl	800b8ac <_malloc_r>
 800c676:	9001      	str	r0, [sp, #4]
 800c678:	2800      	cmp	r0, #0
 800c67a:	d101      	bne.n	800c680 <_realloc_r+0x46>
 800c67c:	9c01      	ldr	r4, [sp, #4]
 800c67e:	e7e6      	b.n	800c64e <_realloc_r+0x14>
 800c680:	002a      	movs	r2, r5
 800c682:	42bd      	cmp	r5, r7
 800c684:	d900      	bls.n	800c688 <_realloc_r+0x4e>
 800c686:	003a      	movs	r2, r7
 800c688:	0021      	movs	r1, r4
 800c68a:	9801      	ldr	r0, [sp, #4]
 800c68c:	f7ff ff6e 	bl	800c56c <memcpy>
 800c690:	0021      	movs	r1, r4
 800c692:	0030      	movs	r0, r6
 800c694:	f7ff f894 	bl	800b7c0 <_free_r>
 800c698:	e7f0      	b.n	800c67c <_realloc_r+0x42>

0800c69a <__ascii_wctomb>:
 800c69a:	0003      	movs	r3, r0
 800c69c:	1e08      	subs	r0, r1, #0
 800c69e:	d005      	beq.n	800c6ac <__ascii_wctomb+0x12>
 800c6a0:	2aff      	cmp	r2, #255	@ 0xff
 800c6a2:	d904      	bls.n	800c6ae <__ascii_wctomb+0x14>
 800c6a4:	228a      	movs	r2, #138	@ 0x8a
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4240      	negs	r0, r0
 800c6ac:	4770      	bx	lr
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	700a      	strb	r2, [r1, #0]
 800c6b2:	e7fb      	b.n	800c6ac <__ascii_wctomb+0x12>

0800c6b4 <fiprintf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b517      	push	{r0, r1, r2, r4, lr}
 800c6b8:	4c05      	ldr	r4, [pc, #20]	@ (800c6d0 <fiprintf+0x1c>)
 800c6ba:	ab05      	add	r3, sp, #20
 800c6bc:	cb04      	ldmia	r3!, {r2}
 800c6be:	0001      	movs	r1, r0
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	f000 f83c 	bl	800c740 <_vfiprintf_r>
 800c6c8:	bc1e      	pop	{r1, r2, r3, r4}
 800c6ca:	bc08      	pop	{r3}
 800c6cc:	b003      	add	sp, #12
 800c6ce:	4718      	bx	r3
 800c6d0:	20000018 	.word	0x20000018

0800c6d4 <abort>:
 800c6d4:	2006      	movs	r0, #6
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	f000 fa18 	bl	800cb0c <raise>
 800c6dc:	2001      	movs	r0, #1
 800c6de:	f7f8 f883 	bl	80047e8 <_exit>

0800c6e2 <_malloc_usable_size_r>:
 800c6e2:	1f0b      	subs	r3, r1, #4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	1f18      	subs	r0, r3, #4
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da01      	bge.n	800c6f0 <_malloc_usable_size_r+0xe>
 800c6ec:	580b      	ldr	r3, [r1, r0]
 800c6ee:	18c0      	adds	r0, r0, r3
 800c6f0:	4770      	bx	lr

0800c6f2 <__sfputc_r>:
 800c6f2:	6893      	ldr	r3, [r2, #8]
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	6093      	str	r3, [r2, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da04      	bge.n	800c708 <__sfputc_r+0x16>
 800c6fe:	6994      	ldr	r4, [r2, #24]
 800c700:	42a3      	cmp	r3, r4
 800c702:	db07      	blt.n	800c714 <__sfputc_r+0x22>
 800c704:	290a      	cmp	r1, #10
 800c706:	d005      	beq.n	800c714 <__sfputc_r+0x22>
 800c708:	6813      	ldr	r3, [r2, #0]
 800c70a:	1c58      	adds	r0, r3, #1
 800c70c:	6010      	str	r0, [r2, #0]
 800c70e:	7019      	strb	r1, [r3, #0]
 800c710:	0008      	movs	r0, r1
 800c712:	bd10      	pop	{r4, pc}
 800c714:	f000 f930 	bl	800c978 <__swbuf_r>
 800c718:	0001      	movs	r1, r0
 800c71a:	e7f9      	b.n	800c710 <__sfputc_r+0x1e>

0800c71c <__sfputs_r>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	0006      	movs	r6, r0
 800c720:	000f      	movs	r7, r1
 800c722:	0014      	movs	r4, r2
 800c724:	18d5      	adds	r5, r2, r3
 800c726:	42ac      	cmp	r4, r5
 800c728:	d101      	bne.n	800c72e <__sfputs_r+0x12>
 800c72a:	2000      	movs	r0, #0
 800c72c:	e007      	b.n	800c73e <__sfputs_r+0x22>
 800c72e:	7821      	ldrb	r1, [r4, #0]
 800c730:	003a      	movs	r2, r7
 800c732:	0030      	movs	r0, r6
 800c734:	f7ff ffdd 	bl	800c6f2 <__sfputc_r>
 800c738:	3401      	adds	r4, #1
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d1f3      	bne.n	800c726 <__sfputs_r+0xa>
 800c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c740 <_vfiprintf_r>:
 800c740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c742:	b0a1      	sub	sp, #132	@ 0x84
 800c744:	000f      	movs	r7, r1
 800c746:	0015      	movs	r5, r2
 800c748:	001e      	movs	r6, r3
 800c74a:	9003      	str	r0, [sp, #12]
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d004      	beq.n	800c75a <_vfiprintf_r+0x1a>
 800c750:	6a03      	ldr	r3, [r0, #32]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <_vfiprintf_r+0x1a>
 800c756:	f7fe f889 	bl	800a86c <__sinit>
 800c75a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c75c:	07db      	lsls	r3, r3, #31
 800c75e:	d405      	bmi.n	800c76c <_vfiprintf_r+0x2c>
 800c760:	89bb      	ldrh	r3, [r7, #12]
 800c762:	059b      	lsls	r3, r3, #22
 800c764:	d402      	bmi.n	800c76c <_vfiprintf_r+0x2c>
 800c766:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c768:	f7fe f9a7 	bl	800aaba <__retarget_lock_acquire_recursive>
 800c76c:	89bb      	ldrh	r3, [r7, #12]
 800c76e:	071b      	lsls	r3, r3, #28
 800c770:	d502      	bpl.n	800c778 <_vfiprintf_r+0x38>
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d113      	bne.n	800c7a0 <_vfiprintf_r+0x60>
 800c778:	0039      	movs	r1, r7
 800c77a:	9803      	ldr	r0, [sp, #12]
 800c77c:	f000 f93e 	bl	800c9fc <__swsetup_r>
 800c780:	2800      	cmp	r0, #0
 800c782:	d00d      	beq.n	800c7a0 <_vfiprintf_r+0x60>
 800c784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c786:	07db      	lsls	r3, r3, #31
 800c788:	d503      	bpl.n	800c792 <_vfiprintf_r+0x52>
 800c78a:	2001      	movs	r0, #1
 800c78c:	4240      	negs	r0, r0
 800c78e:	b021      	add	sp, #132	@ 0x84
 800c790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c792:	89bb      	ldrh	r3, [r7, #12]
 800c794:	059b      	lsls	r3, r3, #22
 800c796:	d4f8      	bmi.n	800c78a <_vfiprintf_r+0x4a>
 800c798:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c79a:	f7fe f98f 	bl	800aabc <__retarget_lock_release_recursive>
 800c79e:	e7f4      	b.n	800c78a <_vfiprintf_r+0x4a>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	ac08      	add	r4, sp, #32
 800c7a4:	6163      	str	r3, [r4, #20]
 800c7a6:	3320      	adds	r3, #32
 800c7a8:	7663      	strb	r3, [r4, #25]
 800c7aa:	3310      	adds	r3, #16
 800c7ac:	76a3      	strb	r3, [r4, #26]
 800c7ae:	9607      	str	r6, [sp, #28]
 800c7b0:	002e      	movs	r6, r5
 800c7b2:	7833      	ldrb	r3, [r6, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <_vfiprintf_r+0x7c>
 800c7b8:	2b25      	cmp	r3, #37	@ 0x25
 800c7ba:	d148      	bne.n	800c84e <_vfiprintf_r+0x10e>
 800c7bc:	1b73      	subs	r3, r6, r5
 800c7be:	9305      	str	r3, [sp, #20]
 800c7c0:	42ae      	cmp	r6, r5
 800c7c2:	d00b      	beq.n	800c7dc <_vfiprintf_r+0x9c>
 800c7c4:	002a      	movs	r2, r5
 800c7c6:	0039      	movs	r1, r7
 800c7c8:	9803      	ldr	r0, [sp, #12]
 800c7ca:	f7ff ffa7 	bl	800c71c <__sfputs_r>
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d100      	bne.n	800c7d4 <_vfiprintf_r+0x94>
 800c7d2:	e0ae      	b.n	800c932 <_vfiprintf_r+0x1f2>
 800c7d4:	6963      	ldr	r3, [r4, #20]
 800c7d6:	9a05      	ldr	r2, [sp, #20]
 800c7d8:	189b      	adds	r3, r3, r2
 800c7da:	6163      	str	r3, [r4, #20]
 800c7dc:	7833      	ldrb	r3, [r6, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d100      	bne.n	800c7e4 <_vfiprintf_r+0xa4>
 800c7e2:	e0a6      	b.n	800c932 <_vfiprintf_r+0x1f2>
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	4252      	negs	r2, r2
 800c7ea:	6062      	str	r2, [r4, #4]
 800c7ec:	a904      	add	r1, sp, #16
 800c7ee:	3254      	adds	r2, #84	@ 0x54
 800c7f0:	1852      	adds	r2, r2, r1
 800c7f2:	1c75      	adds	r5, r6, #1
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	60e3      	str	r3, [r4, #12]
 800c7f8:	60a3      	str	r3, [r4, #8]
 800c7fa:	7013      	strb	r3, [r2, #0]
 800c7fc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c7fe:	4b59      	ldr	r3, [pc, #356]	@ (800c964 <_vfiprintf_r+0x224>)
 800c800:	2205      	movs	r2, #5
 800c802:	0018      	movs	r0, r3
 800c804:	7829      	ldrb	r1, [r5, #0]
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	f7fe f959 	bl	800aabe <memchr>
 800c80c:	1c6e      	adds	r6, r5, #1
 800c80e:	2800      	cmp	r0, #0
 800c810:	d11f      	bne.n	800c852 <_vfiprintf_r+0x112>
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	06d3      	lsls	r3, r2, #27
 800c816:	d504      	bpl.n	800c822 <_vfiprintf_r+0xe2>
 800c818:	2353      	movs	r3, #83	@ 0x53
 800c81a:	a904      	add	r1, sp, #16
 800c81c:	185b      	adds	r3, r3, r1
 800c81e:	2120      	movs	r1, #32
 800c820:	7019      	strb	r1, [r3, #0]
 800c822:	0713      	lsls	r3, r2, #28
 800c824:	d504      	bpl.n	800c830 <_vfiprintf_r+0xf0>
 800c826:	2353      	movs	r3, #83	@ 0x53
 800c828:	a904      	add	r1, sp, #16
 800c82a:	185b      	adds	r3, r3, r1
 800c82c:	212b      	movs	r1, #43	@ 0x2b
 800c82e:	7019      	strb	r1, [r3, #0]
 800c830:	782b      	ldrb	r3, [r5, #0]
 800c832:	2b2a      	cmp	r3, #42	@ 0x2a
 800c834:	d016      	beq.n	800c864 <_vfiprintf_r+0x124>
 800c836:	002e      	movs	r6, r5
 800c838:	2100      	movs	r1, #0
 800c83a:	200a      	movs	r0, #10
 800c83c:	68e3      	ldr	r3, [r4, #12]
 800c83e:	7832      	ldrb	r2, [r6, #0]
 800c840:	1c75      	adds	r5, r6, #1
 800c842:	3a30      	subs	r2, #48	@ 0x30
 800c844:	2a09      	cmp	r2, #9
 800c846:	d950      	bls.n	800c8ea <_vfiprintf_r+0x1aa>
 800c848:	2900      	cmp	r1, #0
 800c84a:	d111      	bne.n	800c870 <_vfiprintf_r+0x130>
 800c84c:	e017      	b.n	800c87e <_vfiprintf_r+0x13e>
 800c84e:	3601      	adds	r6, #1
 800c850:	e7af      	b.n	800c7b2 <_vfiprintf_r+0x72>
 800c852:	9b05      	ldr	r3, [sp, #20]
 800c854:	6822      	ldr	r2, [r4, #0]
 800c856:	1ac0      	subs	r0, r0, r3
 800c858:	2301      	movs	r3, #1
 800c85a:	4083      	lsls	r3, r0
 800c85c:	4313      	orrs	r3, r2
 800c85e:	0035      	movs	r5, r6
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	e7cc      	b.n	800c7fe <_vfiprintf_r+0xbe>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	1d19      	adds	r1, r3, #4
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	9107      	str	r1, [sp, #28]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	db01      	blt.n	800c874 <_vfiprintf_r+0x134>
 800c870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c872:	e004      	b.n	800c87e <_vfiprintf_r+0x13e>
 800c874:	425b      	negs	r3, r3
 800c876:	60e3      	str	r3, [r4, #12]
 800c878:	2302      	movs	r3, #2
 800c87a:	4313      	orrs	r3, r2
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	7833      	ldrb	r3, [r6, #0]
 800c880:	2b2e      	cmp	r3, #46	@ 0x2e
 800c882:	d10c      	bne.n	800c89e <_vfiprintf_r+0x15e>
 800c884:	7873      	ldrb	r3, [r6, #1]
 800c886:	2b2a      	cmp	r3, #42	@ 0x2a
 800c888:	d134      	bne.n	800c8f4 <_vfiprintf_r+0x1b4>
 800c88a:	9b07      	ldr	r3, [sp, #28]
 800c88c:	3602      	adds	r6, #2
 800c88e:	1d1a      	adds	r2, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	2b00      	cmp	r3, #0
 800c896:	da01      	bge.n	800c89c <_vfiprintf_r+0x15c>
 800c898:	2301      	movs	r3, #1
 800c89a:	425b      	negs	r3, r3
 800c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89e:	4d32      	ldr	r5, [pc, #200]	@ (800c968 <_vfiprintf_r+0x228>)
 800c8a0:	2203      	movs	r2, #3
 800c8a2:	0028      	movs	r0, r5
 800c8a4:	7831      	ldrb	r1, [r6, #0]
 800c8a6:	f7fe f90a 	bl	800aabe <memchr>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d006      	beq.n	800c8bc <_vfiprintf_r+0x17c>
 800c8ae:	2340      	movs	r3, #64	@ 0x40
 800c8b0:	1b40      	subs	r0, r0, r5
 800c8b2:	4083      	lsls	r3, r0
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	3601      	adds	r6, #1
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	7831      	ldrb	r1, [r6, #0]
 800c8be:	2206      	movs	r2, #6
 800c8c0:	482a      	ldr	r0, [pc, #168]	@ (800c96c <_vfiprintf_r+0x22c>)
 800c8c2:	1c75      	adds	r5, r6, #1
 800c8c4:	7621      	strb	r1, [r4, #24]
 800c8c6:	f7fe f8fa 	bl	800aabe <memchr>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d040      	beq.n	800c950 <_vfiprintf_r+0x210>
 800c8ce:	4b28      	ldr	r3, [pc, #160]	@ (800c970 <_vfiprintf_r+0x230>)
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d122      	bne.n	800c91a <_vfiprintf_r+0x1da>
 800c8d4:	2207      	movs	r2, #7
 800c8d6:	9b07      	ldr	r3, [sp, #28]
 800c8d8:	3307      	adds	r3, #7
 800c8da:	4393      	bics	r3, r2
 800c8dc:	3308      	adds	r3, #8
 800c8de:	9307      	str	r3, [sp, #28]
 800c8e0:	6963      	ldr	r3, [r4, #20]
 800c8e2:	9a04      	ldr	r2, [sp, #16]
 800c8e4:	189b      	adds	r3, r3, r2
 800c8e6:	6163      	str	r3, [r4, #20]
 800c8e8:	e762      	b.n	800c7b0 <_vfiprintf_r+0x70>
 800c8ea:	4343      	muls	r3, r0
 800c8ec:	002e      	movs	r6, r5
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	189b      	adds	r3, r3, r2
 800c8f2:	e7a4      	b.n	800c83e <_vfiprintf_r+0xfe>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	200a      	movs	r0, #10
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	3601      	adds	r6, #1
 800c8fc:	6063      	str	r3, [r4, #4]
 800c8fe:	7832      	ldrb	r2, [r6, #0]
 800c900:	1c75      	adds	r5, r6, #1
 800c902:	3a30      	subs	r2, #48	@ 0x30
 800c904:	2a09      	cmp	r2, #9
 800c906:	d903      	bls.n	800c910 <_vfiprintf_r+0x1d0>
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d0c8      	beq.n	800c89e <_vfiprintf_r+0x15e>
 800c90c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c90e:	e7c6      	b.n	800c89e <_vfiprintf_r+0x15e>
 800c910:	4341      	muls	r1, r0
 800c912:	002e      	movs	r6, r5
 800c914:	2301      	movs	r3, #1
 800c916:	1889      	adds	r1, r1, r2
 800c918:	e7f1      	b.n	800c8fe <_vfiprintf_r+0x1be>
 800c91a:	aa07      	add	r2, sp, #28
 800c91c:	9200      	str	r2, [sp, #0]
 800c91e:	0021      	movs	r1, r4
 800c920:	003a      	movs	r2, r7
 800c922:	4b14      	ldr	r3, [pc, #80]	@ (800c974 <_vfiprintf_r+0x234>)
 800c924:	9803      	ldr	r0, [sp, #12]
 800c926:	f7fd fb57 	bl	8009fd8 <_printf_float>
 800c92a:	9004      	str	r0, [sp, #16]
 800c92c:	9b04      	ldr	r3, [sp, #16]
 800c92e:	3301      	adds	r3, #1
 800c930:	d1d6      	bne.n	800c8e0 <_vfiprintf_r+0x1a0>
 800c932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c934:	07db      	lsls	r3, r3, #31
 800c936:	d405      	bmi.n	800c944 <_vfiprintf_r+0x204>
 800c938:	89bb      	ldrh	r3, [r7, #12]
 800c93a:	059b      	lsls	r3, r3, #22
 800c93c:	d402      	bmi.n	800c944 <_vfiprintf_r+0x204>
 800c93e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c940:	f7fe f8bc 	bl	800aabc <__retarget_lock_release_recursive>
 800c944:	89bb      	ldrh	r3, [r7, #12]
 800c946:	065b      	lsls	r3, r3, #25
 800c948:	d500      	bpl.n	800c94c <_vfiprintf_r+0x20c>
 800c94a:	e71e      	b.n	800c78a <_vfiprintf_r+0x4a>
 800c94c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c94e:	e71e      	b.n	800c78e <_vfiprintf_r+0x4e>
 800c950:	aa07      	add	r2, sp, #28
 800c952:	9200      	str	r2, [sp, #0]
 800c954:	0021      	movs	r1, r4
 800c956:	003a      	movs	r2, r7
 800c958:	4b06      	ldr	r3, [pc, #24]	@ (800c974 <_vfiprintf_r+0x234>)
 800c95a:	9803      	ldr	r0, [sp, #12]
 800c95c:	f7fd fdea 	bl	800a534 <_printf_i>
 800c960:	e7e3      	b.n	800c92a <_vfiprintf_r+0x1ea>
 800c962:	46c0      	nop			@ (mov r8, r8)
 800c964:	0800cee2 	.word	0x0800cee2
 800c968:	0800cee8 	.word	0x0800cee8
 800c96c:	0800ceec 	.word	0x0800ceec
 800c970:	08009fd9 	.word	0x08009fd9
 800c974:	0800c71d 	.word	0x0800c71d

0800c978 <__swbuf_r>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	0006      	movs	r6, r0
 800c97c:	000d      	movs	r5, r1
 800c97e:	0014      	movs	r4, r2
 800c980:	2800      	cmp	r0, #0
 800c982:	d004      	beq.n	800c98e <__swbuf_r+0x16>
 800c984:	6a03      	ldr	r3, [r0, #32]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <__swbuf_r+0x16>
 800c98a:	f7fd ff6f 	bl	800a86c <__sinit>
 800c98e:	69a3      	ldr	r3, [r4, #24]
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	071b      	lsls	r3, r3, #28
 800c996:	d502      	bpl.n	800c99e <__swbuf_r+0x26>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d109      	bne.n	800c9b2 <__swbuf_r+0x3a>
 800c99e:	0021      	movs	r1, r4
 800c9a0:	0030      	movs	r0, r6
 800c9a2:	f000 f82b 	bl	800c9fc <__swsetup_r>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d003      	beq.n	800c9b2 <__swbuf_r+0x3a>
 800c9aa:	2501      	movs	r5, #1
 800c9ac:	426d      	negs	r5, r5
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	6820      	ldr	r0, [r4, #0]
 800c9b6:	b2ef      	uxtb	r7, r5
 800c9b8:	1ac0      	subs	r0, r0, r3
 800c9ba:	6963      	ldr	r3, [r4, #20]
 800c9bc:	b2ed      	uxtb	r5, r5
 800c9be:	4283      	cmp	r3, r0
 800c9c0:	dc05      	bgt.n	800c9ce <__swbuf_r+0x56>
 800c9c2:	0021      	movs	r1, r4
 800c9c4:	0030      	movs	r0, r6
 800c9c6:	f7ff fd81 	bl	800c4cc <_fflush_r>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d1ed      	bne.n	800c9aa <__swbuf_r+0x32>
 800c9ce:	68a3      	ldr	r3, [r4, #8]
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	60a3      	str	r3, [r4, #8]
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	1c5a      	adds	r2, r3, #1
 800c9da:	6022      	str	r2, [r4, #0]
 800c9dc:	701f      	strb	r7, [r3, #0]
 800c9de:	6963      	ldr	r3, [r4, #20]
 800c9e0:	4283      	cmp	r3, r0
 800c9e2:	d004      	beq.n	800c9ee <__swbuf_r+0x76>
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	07db      	lsls	r3, r3, #31
 800c9e8:	d5e1      	bpl.n	800c9ae <__swbuf_r+0x36>
 800c9ea:	2d0a      	cmp	r5, #10
 800c9ec:	d1df      	bne.n	800c9ae <__swbuf_r+0x36>
 800c9ee:	0021      	movs	r1, r4
 800c9f0:	0030      	movs	r0, r6
 800c9f2:	f7ff fd6b 	bl	800c4cc <_fflush_r>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0d9      	beq.n	800c9ae <__swbuf_r+0x36>
 800c9fa:	e7d6      	b.n	800c9aa <__swbuf_r+0x32>

0800c9fc <__swsetup_r>:
 800c9fc:	4b2d      	ldr	r3, [pc, #180]	@ (800cab4 <__swsetup_r+0xb8>)
 800c9fe:	b570      	push	{r4, r5, r6, lr}
 800ca00:	0005      	movs	r5, r0
 800ca02:	6818      	ldr	r0, [r3, #0]
 800ca04:	000c      	movs	r4, r1
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d004      	beq.n	800ca14 <__swsetup_r+0x18>
 800ca0a:	6a03      	ldr	r3, [r0, #32]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <__swsetup_r+0x18>
 800ca10:	f7fd ff2c 	bl	800a86c <__sinit>
 800ca14:	220c      	movs	r2, #12
 800ca16:	5ea3      	ldrsh	r3, [r4, r2]
 800ca18:	071a      	lsls	r2, r3, #28
 800ca1a:	d423      	bmi.n	800ca64 <__swsetup_r+0x68>
 800ca1c:	06da      	lsls	r2, r3, #27
 800ca1e:	d407      	bmi.n	800ca30 <__swsetup_r+0x34>
 800ca20:	2209      	movs	r2, #9
 800ca22:	602a      	str	r2, [r5, #0]
 800ca24:	2240      	movs	r2, #64	@ 0x40
 800ca26:	2001      	movs	r0, #1
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	4240      	negs	r0, r0
 800ca2e:	e03a      	b.n	800caa6 <__swsetup_r+0xaa>
 800ca30:	075b      	lsls	r3, r3, #29
 800ca32:	d513      	bpl.n	800ca5c <__swsetup_r+0x60>
 800ca34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca36:	2900      	cmp	r1, #0
 800ca38:	d008      	beq.n	800ca4c <__swsetup_r+0x50>
 800ca3a:	0023      	movs	r3, r4
 800ca3c:	3344      	adds	r3, #68	@ 0x44
 800ca3e:	4299      	cmp	r1, r3
 800ca40:	d002      	beq.n	800ca48 <__swsetup_r+0x4c>
 800ca42:	0028      	movs	r0, r5
 800ca44:	f7fe febc 	bl	800b7c0 <_free_r>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca4c:	2224      	movs	r2, #36	@ 0x24
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	4393      	bics	r3, r2
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	2300      	movs	r3, #0
 800ca56:	6063      	str	r3, [r4, #4]
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	6023      	str	r3, [r4, #0]
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	89a2      	ldrh	r2, [r4, #12]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10b      	bne.n	800ca82 <__swsetup_r+0x86>
 800ca6a:	21a0      	movs	r1, #160	@ 0xa0
 800ca6c:	2280      	movs	r2, #128	@ 0x80
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	0089      	lsls	r1, r1, #2
 800ca72:	0092      	lsls	r2, r2, #2
 800ca74:	400b      	ands	r3, r1
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d003      	beq.n	800ca82 <__swsetup_r+0x86>
 800ca7a:	0021      	movs	r1, r4
 800ca7c:	0028      	movs	r0, r5
 800ca7e:	f000 f88f 	bl	800cba0 <__smakebuf_r>
 800ca82:	220c      	movs	r2, #12
 800ca84:	5ea3      	ldrsh	r3, [r4, r2]
 800ca86:	2101      	movs	r1, #1
 800ca88:	001a      	movs	r2, r3
 800ca8a:	400a      	ands	r2, r1
 800ca8c:	420b      	tst	r3, r1
 800ca8e:	d00b      	beq.n	800caa8 <__swsetup_r+0xac>
 800ca90:	2200      	movs	r2, #0
 800ca92:	60a2      	str	r2, [r4, #8]
 800ca94:	6962      	ldr	r2, [r4, #20]
 800ca96:	4252      	negs	r2, r2
 800ca98:	61a2      	str	r2, [r4, #24]
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	6922      	ldr	r2, [r4, #16]
 800ca9e:	4282      	cmp	r2, r0
 800caa0:	d101      	bne.n	800caa6 <__swsetup_r+0xaa>
 800caa2:	061a      	lsls	r2, r3, #24
 800caa4:	d4be      	bmi.n	800ca24 <__swsetup_r+0x28>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	0799      	lsls	r1, r3, #30
 800caaa:	d400      	bmi.n	800caae <__swsetup_r+0xb2>
 800caac:	6962      	ldr	r2, [r4, #20]
 800caae:	60a2      	str	r2, [r4, #8]
 800cab0:	e7f3      	b.n	800ca9a <__swsetup_r+0x9e>
 800cab2:	46c0      	nop			@ (mov r8, r8)
 800cab4:	20000018 	.word	0x20000018

0800cab8 <_raise_r>:
 800cab8:	b570      	push	{r4, r5, r6, lr}
 800caba:	0004      	movs	r4, r0
 800cabc:	000d      	movs	r5, r1
 800cabe:	291f      	cmp	r1, #31
 800cac0:	d904      	bls.n	800cacc <_raise_r+0x14>
 800cac2:	2316      	movs	r3, #22
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	2001      	movs	r0, #1
 800cac8:	4240      	negs	r0, r0
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d004      	beq.n	800cadc <_raise_r+0x24>
 800cad2:	008a      	lsls	r2, r1, #2
 800cad4:	189b      	adds	r3, r3, r2
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	2a00      	cmp	r2, #0
 800cada:	d108      	bne.n	800caee <_raise_r+0x36>
 800cadc:	0020      	movs	r0, r4
 800cade:	f000 f831 	bl	800cb44 <_getpid_r>
 800cae2:	002a      	movs	r2, r5
 800cae4:	0001      	movs	r1, r0
 800cae6:	0020      	movs	r0, r4
 800cae8:	f000 f81a 	bl	800cb20 <_kill_r>
 800caec:	e7ed      	b.n	800caca <_raise_r+0x12>
 800caee:	2a01      	cmp	r2, #1
 800caf0:	d009      	beq.n	800cb06 <_raise_r+0x4e>
 800caf2:	1c51      	adds	r1, r2, #1
 800caf4:	d103      	bne.n	800cafe <_raise_r+0x46>
 800caf6:	2316      	movs	r3, #22
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	2001      	movs	r0, #1
 800cafc:	e7e5      	b.n	800caca <_raise_r+0x12>
 800cafe:	2100      	movs	r1, #0
 800cb00:	0028      	movs	r0, r5
 800cb02:	6019      	str	r1, [r3, #0]
 800cb04:	4790      	blx	r2
 800cb06:	2000      	movs	r0, #0
 800cb08:	e7df      	b.n	800caca <_raise_r+0x12>
	...

0800cb0c <raise>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	4b03      	ldr	r3, [pc, #12]	@ (800cb1c <raise+0x10>)
 800cb10:	0001      	movs	r1, r0
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	f7ff ffd0 	bl	800cab8 <_raise_r>
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	46c0      	nop			@ (mov r8, r8)
 800cb1c:	20000018 	.word	0x20000018

0800cb20 <_kill_r>:
 800cb20:	2300      	movs	r3, #0
 800cb22:	b570      	push	{r4, r5, r6, lr}
 800cb24:	4d06      	ldr	r5, [pc, #24]	@ (800cb40 <_kill_r+0x20>)
 800cb26:	0004      	movs	r4, r0
 800cb28:	0008      	movs	r0, r1
 800cb2a:	0011      	movs	r1, r2
 800cb2c:	602b      	str	r3, [r5, #0]
 800cb2e:	f7f7 fe4b 	bl	80047c8 <_kill>
 800cb32:	1c43      	adds	r3, r0, #1
 800cb34:	d103      	bne.n	800cb3e <_kill_r+0x1e>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d000      	beq.n	800cb3e <_kill_r+0x1e>
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	20000624 	.word	0x20000624

0800cb44 <_getpid_r>:
 800cb44:	b510      	push	{r4, lr}
 800cb46:	f7f7 fe39 	bl	80047bc <_getpid>
 800cb4a:	bd10      	pop	{r4, pc}

0800cb4c <__swhatbuf_r>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	000e      	movs	r6, r1
 800cb50:	001d      	movs	r5, r3
 800cb52:	230e      	movs	r3, #14
 800cb54:	5ec9      	ldrsh	r1, [r1, r3]
 800cb56:	0014      	movs	r4, r2
 800cb58:	b096      	sub	sp, #88	@ 0x58
 800cb5a:	2900      	cmp	r1, #0
 800cb5c:	da0c      	bge.n	800cb78 <__swhatbuf_r+0x2c>
 800cb5e:	89b2      	ldrh	r2, [r6, #12]
 800cb60:	2380      	movs	r3, #128	@ 0x80
 800cb62:	0011      	movs	r1, r2
 800cb64:	4019      	ands	r1, r3
 800cb66:	421a      	tst	r2, r3
 800cb68:	d114      	bne.n	800cb94 <__swhatbuf_r+0x48>
 800cb6a:	2380      	movs	r3, #128	@ 0x80
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	2000      	movs	r0, #0
 800cb70:	6029      	str	r1, [r5, #0]
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	b016      	add	sp, #88	@ 0x58
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	466a      	mov	r2, sp
 800cb7a:	f000 f853 	bl	800cc24 <_fstat_r>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	dbed      	blt.n	800cb5e <__swhatbuf_r+0x12>
 800cb82:	23f0      	movs	r3, #240	@ 0xf0
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	021b      	lsls	r3, r3, #8
 800cb88:	4019      	ands	r1, r3
 800cb8a:	4b04      	ldr	r3, [pc, #16]	@ (800cb9c <__swhatbuf_r+0x50>)
 800cb8c:	18c9      	adds	r1, r1, r3
 800cb8e:	424b      	negs	r3, r1
 800cb90:	4159      	adcs	r1, r3
 800cb92:	e7ea      	b.n	800cb6a <__swhatbuf_r+0x1e>
 800cb94:	2100      	movs	r1, #0
 800cb96:	2340      	movs	r3, #64	@ 0x40
 800cb98:	e7e9      	b.n	800cb6e <__swhatbuf_r+0x22>
 800cb9a:	46c0      	nop			@ (mov r8, r8)
 800cb9c:	ffffe000 	.word	0xffffe000

0800cba0 <__smakebuf_r>:
 800cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cba2:	2602      	movs	r6, #2
 800cba4:	898b      	ldrh	r3, [r1, #12]
 800cba6:	0005      	movs	r5, r0
 800cba8:	000c      	movs	r4, r1
 800cbaa:	b085      	sub	sp, #20
 800cbac:	4233      	tst	r3, r6
 800cbae:	d007      	beq.n	800cbc0 <__smakebuf_r+0x20>
 800cbb0:	0023      	movs	r3, r4
 800cbb2:	3347      	adds	r3, #71	@ 0x47
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	2301      	movs	r3, #1
 800cbba:	6163      	str	r3, [r4, #20]
 800cbbc:	b005      	add	sp, #20
 800cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc0:	ab03      	add	r3, sp, #12
 800cbc2:	aa02      	add	r2, sp, #8
 800cbc4:	f7ff ffc2 	bl	800cb4c <__swhatbuf_r>
 800cbc8:	9f02      	ldr	r7, [sp, #8]
 800cbca:	9001      	str	r0, [sp, #4]
 800cbcc:	0039      	movs	r1, r7
 800cbce:	0028      	movs	r0, r5
 800cbd0:	f7fe fe6c 	bl	800b8ac <_malloc_r>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d108      	bne.n	800cbea <__smakebuf_r+0x4a>
 800cbd8:	220c      	movs	r2, #12
 800cbda:	5ea3      	ldrsh	r3, [r4, r2]
 800cbdc:	059a      	lsls	r2, r3, #22
 800cbde:	d4ed      	bmi.n	800cbbc <__smakebuf_r+0x1c>
 800cbe0:	2203      	movs	r2, #3
 800cbe2:	4393      	bics	r3, r2
 800cbe4:	431e      	orrs	r6, r3
 800cbe6:	81a6      	strh	r6, [r4, #12]
 800cbe8:	e7e2      	b.n	800cbb0 <__smakebuf_r+0x10>
 800cbea:	2380      	movs	r3, #128	@ 0x80
 800cbec:	89a2      	ldrh	r2, [r4, #12]
 800cbee:	6020      	str	r0, [r4, #0]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	6120      	str	r0, [r4, #16]
 800cbf8:	6167      	str	r7, [r4, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00c      	beq.n	800cc18 <__smakebuf_r+0x78>
 800cbfe:	0028      	movs	r0, r5
 800cc00:	230e      	movs	r3, #14
 800cc02:	5ee1      	ldrsh	r1, [r4, r3]
 800cc04:	f000 f820 	bl	800cc48 <_isatty_r>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d005      	beq.n	800cc18 <__smakebuf_r+0x78>
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	89a2      	ldrh	r2, [r4, #12]
 800cc10:	439a      	bics	r2, r3
 800cc12:	3b02      	subs	r3, #2
 800cc14:	4313      	orrs	r3, r2
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	e7cc      	b.n	800cbbc <__smakebuf_r+0x1c>
	...

0800cc24 <_fstat_r>:
 800cc24:	2300      	movs	r3, #0
 800cc26:	b570      	push	{r4, r5, r6, lr}
 800cc28:	4d06      	ldr	r5, [pc, #24]	@ (800cc44 <_fstat_r+0x20>)
 800cc2a:	0004      	movs	r4, r0
 800cc2c:	0008      	movs	r0, r1
 800cc2e:	0011      	movs	r1, r2
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	f7f7 fe29 	bl	8004888 <_fstat>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d103      	bne.n	800cc42 <_fstat_r+0x1e>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d000      	beq.n	800cc42 <_fstat_r+0x1e>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
 800cc44:	20000624 	.word	0x20000624

0800cc48 <_isatty_r>:
 800cc48:	2300      	movs	r3, #0
 800cc4a:	b570      	push	{r4, r5, r6, lr}
 800cc4c:	4d06      	ldr	r5, [pc, #24]	@ (800cc68 <_isatty_r+0x20>)
 800cc4e:	0004      	movs	r4, r0
 800cc50:	0008      	movs	r0, r1
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	f7f7 fe26 	bl	80048a4 <_isatty>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d103      	bne.n	800cc64 <_isatty_r+0x1c>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d000      	beq.n	800cc64 <_isatty_r+0x1c>
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	20000624 	.word	0x20000624

0800cc6c <_init>:
 800cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc72:	bc08      	pop	{r3}
 800cc74:	469e      	mov	lr, r3
 800cc76:	4770      	bx	lr

0800cc78 <_fini>:
 800cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7a:	46c0      	nop			@ (mov r8, r8)
 800cc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7e:	bc08      	pop	{r3}
 800cc80:	469e      	mov	lr, r3
 800cc82:	4770      	bx	lr
