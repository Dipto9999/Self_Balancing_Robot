
ExtraFeatures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008da0  08008da0  00018da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091bc  080091bc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c4  080091c4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080091cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001d4  080093a0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080093a0  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d82  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272b  00000000  00000000  00031fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d41  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033c6  00000000  00000000  00036521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ecb  00000000  00000000  000398e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077d76  00000000  00000000  0004e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d78  00000000  00000000  000c6528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000cb2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008d88 	.word	0x08008d88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08008d88 	.word	0x08008d88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f843 	bl	80014c8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff93 	bl	8001378 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f835 	bl	80014c8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f82b 	bl	80014c8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffbb 	bl	80013fc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffb1 	bl	80013fc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 ff20 	bl	80023a8 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 ff1b 	bl	80023a8 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0004      	movs	r4, r0
 80006e6:	b5c0      	push	{r6, r7, lr}
 80006e8:	001f      	movs	r7, r3
 80006ea:	030b      	lsls	r3, r1, #12
 80006ec:	0010      	movs	r0, r2
 80006ee:	004e      	lsls	r6, r1, #1
 80006f0:	0a5b      	lsrs	r3, r3, #9
 80006f2:	0fcd      	lsrs	r5, r1, #31
 80006f4:	0f61      	lsrs	r1, r4, #29
 80006f6:	007a      	lsls	r2, r7, #1
 80006f8:	4319      	orrs	r1, r3
 80006fa:	00e3      	lsls	r3, r4, #3
 80006fc:	033c      	lsls	r4, r7, #12
 80006fe:	0fff      	lsrs	r7, r7, #31
 8000700:	46bc      	mov	ip, r7
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	0f47      	lsrs	r7, r0, #29
 8000706:	4327      	orrs	r7, r4
 8000708:	0d76      	lsrs	r6, r6, #21
 800070a:	0d52      	lsrs	r2, r2, #21
 800070c:	00c0      	lsls	r0, r0, #3
 800070e:	46b9      	mov	r9, r7
 8000710:	4680      	mov	r8, r0
 8000712:	1ab7      	subs	r7, r6, r2
 8000714:	4565      	cmp	r5, ip
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x3e>
 8000718:	e09b      	b.n	8000852 <__aeabi_dadd+0x176>
 800071a:	2f00      	cmp	r7, #0
 800071c:	dc00      	bgt.n	8000720 <__aeabi_dadd+0x44>
 800071e:	e084      	b.n	800082a <__aeabi_dadd+0x14e>
 8000720:	2a00      	cmp	r2, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x4a>
 8000724:	e0be      	b.n	80008a4 <__aeabi_dadd+0x1c8>
 8000726:	4ac8      	ldr	r2, [pc, #800]	; (8000a48 <__aeabi_dadd+0x36c>)
 8000728:	4296      	cmp	r6, r2
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e124      	b.n	8000978 <__aeabi_dadd+0x29c>
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	464c      	mov	r4, r9
 8000732:	0412      	lsls	r2, r2, #16
 8000734:	4314      	orrs	r4, r2
 8000736:	46a1      	mov	r9, r4
 8000738:	2f38      	cmp	r7, #56	; 0x38
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x62>
 800073c:	e167      	b.n	8000a0e <__aeabi_dadd+0x332>
 800073e:	2f1f      	cmp	r7, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0x68>
 8000742:	e1d6      	b.n	8000af2 <__aeabi_dadd+0x416>
 8000744:	2220      	movs	r2, #32
 8000746:	464c      	mov	r4, r9
 8000748:	1bd2      	subs	r2, r2, r7
 800074a:	4094      	lsls	r4, r2
 800074c:	46a2      	mov	sl, r4
 800074e:	4644      	mov	r4, r8
 8000750:	40fc      	lsrs	r4, r7
 8000752:	0020      	movs	r0, r4
 8000754:	4654      	mov	r4, sl
 8000756:	4304      	orrs	r4, r0
 8000758:	4640      	mov	r0, r8
 800075a:	4090      	lsls	r0, r2
 800075c:	1e42      	subs	r2, r0, #1
 800075e:	4190      	sbcs	r0, r2
 8000760:	464a      	mov	r2, r9
 8000762:	40fa      	lsrs	r2, r7
 8000764:	4304      	orrs	r4, r0
 8000766:	1a89      	subs	r1, r1, r2
 8000768:	1b1c      	subs	r4, r3, r4
 800076a:	42a3      	cmp	r3, r4
 800076c:	4192      	sbcs	r2, r2
 800076e:	4252      	negs	r2, r2
 8000770:	1a8b      	subs	r3, r1, r2
 8000772:	469a      	mov	sl, r3
 8000774:	4653      	mov	r3, sl
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	d400      	bmi.n	800077c <__aeabi_dadd+0xa0>
 800077a:	e0d4      	b.n	8000926 <__aeabi_dadd+0x24a>
 800077c:	4653      	mov	r3, sl
 800077e:	025a      	lsls	r2, r3, #9
 8000780:	0a53      	lsrs	r3, r2, #9
 8000782:	469a      	mov	sl, r3
 8000784:	4653      	mov	r3, sl
 8000786:	2b00      	cmp	r3, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0xb0>
 800078a:	e104      	b.n	8000996 <__aeabi_dadd+0x2ba>
 800078c:	4650      	mov	r0, sl
 800078e:	f001 fded 	bl	800236c <__clzsi2>
 8000792:	0003      	movs	r3, r0
 8000794:	3b08      	subs	r3, #8
 8000796:	2220      	movs	r2, #32
 8000798:	0020      	movs	r0, r4
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	4651      	mov	r1, sl
 800079e:	40d0      	lsrs	r0, r2
 80007a0:	4099      	lsls	r1, r3
 80007a2:	0002      	movs	r2, r0
 80007a4:	409c      	lsls	r4, r3
 80007a6:	430a      	orrs	r2, r1
 80007a8:	42b3      	cmp	r3, r6
 80007aa:	da00      	bge.n	80007ae <__aeabi_dadd+0xd2>
 80007ac:	e102      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 80007ae:	1b9b      	subs	r3, r3, r6
 80007b0:	1c59      	adds	r1, r3, #1
 80007b2:	291f      	cmp	r1, #31
 80007b4:	dd00      	ble.n	80007b8 <__aeabi_dadd+0xdc>
 80007b6:	e0a7      	b.n	8000908 <__aeabi_dadd+0x22c>
 80007b8:	2320      	movs	r3, #32
 80007ba:	0010      	movs	r0, r2
 80007bc:	0026      	movs	r6, r4
 80007be:	1a5b      	subs	r3, r3, r1
 80007c0:	409c      	lsls	r4, r3
 80007c2:	4098      	lsls	r0, r3
 80007c4:	40ce      	lsrs	r6, r1
 80007c6:	40ca      	lsrs	r2, r1
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	4330      	orrs	r0, r6
 80007ce:	4692      	mov	sl, r2
 80007d0:	2600      	movs	r6, #0
 80007d2:	4304      	orrs	r4, r0
 80007d4:	0763      	lsls	r3, r4, #29
 80007d6:	d009      	beq.n	80007ec <__aeabi_dadd+0x110>
 80007d8:	230f      	movs	r3, #15
 80007da:	4023      	ands	r3, r4
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d005      	beq.n	80007ec <__aeabi_dadd+0x110>
 80007e0:	1d23      	adds	r3, r4, #4
 80007e2:	42a3      	cmp	r3, r4
 80007e4:	41a4      	sbcs	r4, r4
 80007e6:	4264      	negs	r4, r4
 80007e8:	44a2      	add	sl, r4
 80007ea:	001c      	movs	r4, r3
 80007ec:	4653      	mov	r3, sl
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	d400      	bmi.n	80007f4 <__aeabi_dadd+0x118>
 80007f2:	e09b      	b.n	800092c <__aeabi_dadd+0x250>
 80007f4:	4b94      	ldr	r3, [pc, #592]	; (8000a48 <__aeabi_dadd+0x36c>)
 80007f6:	3601      	adds	r6, #1
 80007f8:	429e      	cmp	r6, r3
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x122>
 80007fc:	e0b8      	b.n	8000970 <__aeabi_dadd+0x294>
 80007fe:	4653      	mov	r3, sl
 8000800:	4992      	ldr	r1, [pc, #584]	; (8000a4c <__aeabi_dadd+0x370>)
 8000802:	08e4      	lsrs	r4, r4, #3
 8000804:	400b      	ands	r3, r1
 8000806:	0019      	movs	r1, r3
 8000808:	075b      	lsls	r3, r3, #29
 800080a:	4323      	orrs	r3, r4
 800080c:	0572      	lsls	r2, r6, #21
 800080e:	024c      	lsls	r4, r1, #9
 8000810:	0b24      	lsrs	r4, r4, #12
 8000812:	0d52      	lsrs	r2, r2, #21
 8000814:	0512      	lsls	r2, r2, #20
 8000816:	07ed      	lsls	r5, r5, #31
 8000818:	4322      	orrs	r2, r4
 800081a:	432a      	orrs	r2, r5
 800081c:	0018      	movs	r0, r3
 800081e:	0011      	movs	r1, r2
 8000820:	bce0      	pop	{r5, r6, r7}
 8000822:	46ba      	mov	sl, r7
 8000824:	46b1      	mov	r9, r6
 8000826:	46a8      	mov	r8, r5
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	2f00      	cmp	r7, #0
 800082c:	d048      	beq.n	80008c0 <__aeabi_dadd+0x1e4>
 800082e:	1b97      	subs	r7, r2, r6
 8000830:	2e00      	cmp	r6, #0
 8000832:	d000      	beq.n	8000836 <__aeabi_dadd+0x15a>
 8000834:	e10e      	b.n	8000a54 <__aeabi_dadd+0x378>
 8000836:	000c      	movs	r4, r1
 8000838:	431c      	orrs	r4, r3
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x162>
 800083c:	e1b7      	b.n	8000bae <__aeabi_dadd+0x4d2>
 800083e:	1e7c      	subs	r4, r7, #1
 8000840:	2f01      	cmp	r7, #1
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x16a>
 8000844:	e226      	b.n	8000c94 <__aeabi_dadd+0x5b8>
 8000846:	4d80      	ldr	r5, [pc, #512]	; (8000a48 <__aeabi_dadd+0x36c>)
 8000848:	42af      	cmp	r7, r5
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x172>
 800084c:	e1d5      	b.n	8000bfa <__aeabi_dadd+0x51e>
 800084e:	0027      	movs	r7, r4
 8000850:	e107      	b.n	8000a62 <__aeabi_dadd+0x386>
 8000852:	2f00      	cmp	r7, #0
 8000854:	dc00      	bgt.n	8000858 <__aeabi_dadd+0x17c>
 8000856:	e0b2      	b.n	80009be <__aeabi_dadd+0x2e2>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d047      	beq.n	80008ec <__aeabi_dadd+0x210>
 800085c:	4a7a      	ldr	r2, [pc, #488]	; (8000a48 <__aeabi_dadd+0x36c>)
 800085e:	4296      	cmp	r6, r2
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x188>
 8000862:	e089      	b.n	8000978 <__aeabi_dadd+0x29c>
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	464c      	mov	r4, r9
 8000868:	0412      	lsls	r2, r2, #16
 800086a:	4314      	orrs	r4, r2
 800086c:	46a1      	mov	r9, r4
 800086e:	2f38      	cmp	r7, #56	; 0x38
 8000870:	dc6b      	bgt.n	800094a <__aeabi_dadd+0x26e>
 8000872:	2f1f      	cmp	r7, #31
 8000874:	dc00      	bgt.n	8000878 <__aeabi_dadd+0x19c>
 8000876:	e16e      	b.n	8000b56 <__aeabi_dadd+0x47a>
 8000878:	003a      	movs	r2, r7
 800087a:	4648      	mov	r0, r9
 800087c:	3a20      	subs	r2, #32
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4684      	mov	ip, r0
 8000882:	2f20      	cmp	r7, #32
 8000884:	d007      	beq.n	8000896 <__aeabi_dadd+0x1ba>
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	4648      	mov	r0, r9
 800088a:	1bd2      	subs	r2, r2, r7
 800088c:	4090      	lsls	r0, r2
 800088e:	0002      	movs	r2, r0
 8000890:	4640      	mov	r0, r8
 8000892:	4310      	orrs	r0, r2
 8000894:	4680      	mov	r8, r0
 8000896:	4640      	mov	r0, r8
 8000898:	1e42      	subs	r2, r0, #1
 800089a:	4190      	sbcs	r0, r2
 800089c:	4662      	mov	r2, ip
 800089e:	0004      	movs	r4, r0
 80008a0:	4314      	orrs	r4, r2
 80008a2:	e057      	b.n	8000954 <__aeabi_dadd+0x278>
 80008a4:	464a      	mov	r2, r9
 80008a6:	4302      	orrs	r2, r0
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x1d0>
 80008aa:	e103      	b.n	8000ab4 <__aeabi_dadd+0x3d8>
 80008ac:	1e7a      	subs	r2, r7, #1
 80008ae:	2f01      	cmp	r7, #1
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x1d8>
 80008b2:	e193      	b.n	8000bdc <__aeabi_dadd+0x500>
 80008b4:	4c64      	ldr	r4, [pc, #400]	; (8000a48 <__aeabi_dadd+0x36c>)
 80008b6:	42a7      	cmp	r7, r4
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x1e0>
 80008ba:	e18a      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008bc:	0017      	movs	r7, r2
 80008be:	e73b      	b.n	8000738 <__aeabi_dadd+0x5c>
 80008c0:	4c63      	ldr	r4, [pc, #396]	; (8000a50 <__aeabi_dadd+0x374>)
 80008c2:	1c72      	adds	r2, r6, #1
 80008c4:	4222      	tst	r2, r4
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x1ee>
 80008c8:	e0e0      	b.n	8000a8c <__aeabi_dadd+0x3b0>
 80008ca:	000a      	movs	r2, r1
 80008cc:	431a      	orrs	r2, r3
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x1f8>
 80008d2:	e174      	b.n	8000bbe <__aeabi_dadd+0x4e2>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x1fe>
 80008d8:	e1d0      	b.n	8000c7c <__aeabi_dadd+0x5a0>
 80008da:	464a      	mov	r2, r9
 80008dc:	4302      	orrs	r2, r0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x206>
 80008e0:	e1e3      	b.n	8000caa <__aeabi_dadd+0x5ce>
 80008e2:	074a      	lsls	r2, r1, #29
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	08c9      	lsrs	r1, r1, #3
 80008ea:	e029      	b.n	8000940 <__aeabi_dadd+0x264>
 80008ec:	464a      	mov	r2, r9
 80008ee:	4302      	orrs	r2, r0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x218>
 80008f2:	e17d      	b.n	8000bf0 <__aeabi_dadd+0x514>
 80008f4:	1e7a      	subs	r2, r7, #1
 80008f6:	2f01      	cmp	r7, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x220>
 80008fa:	e0e0      	b.n	8000abe <__aeabi_dadd+0x3e2>
 80008fc:	4c52      	ldr	r4, [pc, #328]	; (8000a48 <__aeabi_dadd+0x36c>)
 80008fe:	42a7      	cmp	r7, r4
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x228>
 8000902:	e166      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 8000904:	0017      	movs	r7, r2
 8000906:	e7b2      	b.n	800086e <__aeabi_dadd+0x192>
 8000908:	0010      	movs	r0, r2
 800090a:	3b1f      	subs	r3, #31
 800090c:	40d8      	lsrs	r0, r3
 800090e:	2920      	cmp	r1, #32
 8000910:	d003      	beq.n	800091a <__aeabi_dadd+0x23e>
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	409a      	lsls	r2, r3
 8000918:	4314      	orrs	r4, r2
 800091a:	1e63      	subs	r3, r4, #1
 800091c:	419c      	sbcs	r4, r3
 800091e:	2300      	movs	r3, #0
 8000920:	2600      	movs	r6, #0
 8000922:	469a      	mov	sl, r3
 8000924:	4304      	orrs	r4, r0
 8000926:	0763      	lsls	r3, r4, #29
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x250>
 800092a:	e755      	b.n	80007d8 <__aeabi_dadd+0xfc>
 800092c:	4652      	mov	r2, sl
 800092e:	08e3      	lsrs	r3, r4, #3
 8000930:	0752      	lsls	r2, r2, #29
 8000932:	4313      	orrs	r3, r2
 8000934:	4652      	mov	r2, sl
 8000936:	0037      	movs	r7, r6
 8000938:	08d1      	lsrs	r1, r2, #3
 800093a:	4a43      	ldr	r2, [pc, #268]	; (8000a48 <__aeabi_dadd+0x36c>)
 800093c:	4297      	cmp	r7, r2
 800093e:	d01f      	beq.n	8000980 <__aeabi_dadd+0x2a4>
 8000940:	0309      	lsls	r1, r1, #12
 8000942:	057a      	lsls	r2, r7, #21
 8000944:	0b0c      	lsrs	r4, r1, #12
 8000946:	0d52      	lsrs	r2, r2, #21
 8000948:	e764      	b.n	8000814 <__aeabi_dadd+0x138>
 800094a:	4642      	mov	r2, r8
 800094c:	464c      	mov	r4, r9
 800094e:	4314      	orrs	r4, r2
 8000950:	1e62      	subs	r2, r4, #1
 8000952:	4194      	sbcs	r4, r2
 8000954:	18e4      	adds	r4, r4, r3
 8000956:	429c      	cmp	r4, r3
 8000958:	4192      	sbcs	r2, r2
 800095a:	4252      	negs	r2, r2
 800095c:	4692      	mov	sl, r2
 800095e:	448a      	add	sl, r1
 8000960:	4653      	mov	r3, sl
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	d5df      	bpl.n	8000926 <__aeabi_dadd+0x24a>
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <__aeabi_dadd+0x36c>)
 8000968:	3601      	adds	r6, #1
 800096a:	429e      	cmp	r6, r3
 800096c:	d000      	beq.n	8000970 <__aeabi_dadd+0x294>
 800096e:	e0b3      	b.n	8000ad8 <__aeabi_dadd+0x3fc>
 8000970:	0032      	movs	r2, r6
 8000972:	2400      	movs	r4, #0
 8000974:	2300      	movs	r3, #0
 8000976:	e74d      	b.n	8000814 <__aeabi_dadd+0x138>
 8000978:	074a      	lsls	r2, r1, #29
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	4313      	orrs	r3, r2
 800097e:	08c9      	lsrs	r1, r1, #3
 8000980:	001a      	movs	r2, r3
 8000982:	430a      	orrs	r2, r1
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x2ac>
 8000986:	e200      	b.n	8000d8a <__aeabi_dadd+0x6ae>
 8000988:	2480      	movs	r4, #128	; 0x80
 800098a:	0324      	lsls	r4, r4, #12
 800098c:	430c      	orrs	r4, r1
 800098e:	0324      	lsls	r4, r4, #12
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <__aeabi_dadd+0x36c>)
 8000992:	0b24      	lsrs	r4, r4, #12
 8000994:	e73e      	b.n	8000814 <__aeabi_dadd+0x138>
 8000996:	0020      	movs	r0, r4
 8000998:	f001 fce8 	bl	800236c <__clzsi2>
 800099c:	0003      	movs	r3, r0
 800099e:	3318      	adds	r3, #24
 80009a0:	2b1f      	cmp	r3, #31
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_dadd+0x2ca>
 80009a4:	e6f7      	b.n	8000796 <__aeabi_dadd+0xba>
 80009a6:	0022      	movs	r2, r4
 80009a8:	3808      	subs	r0, #8
 80009aa:	4082      	lsls	r2, r0
 80009ac:	2400      	movs	r4, #0
 80009ae:	42b3      	cmp	r3, r6
 80009b0:	db00      	blt.n	80009b4 <__aeabi_dadd+0x2d8>
 80009b2:	e6fc      	b.n	80007ae <__aeabi_dadd+0xd2>
 80009b4:	1af6      	subs	r6, r6, r3
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <__aeabi_dadd+0x370>)
 80009b8:	401a      	ands	r2, r3
 80009ba:	4692      	mov	sl, r2
 80009bc:	e70a      	b.n	80007d4 <__aeabi_dadd+0xf8>
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d02b      	beq.n	8000a1a <__aeabi_dadd+0x33e>
 80009c2:	1b97      	subs	r7, r2, r6
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x2ee>
 80009c8:	e0b8      	b.n	8000b3c <__aeabi_dadd+0x460>
 80009ca:	4c1f      	ldr	r4, [pc, #124]	; (8000a48 <__aeabi_dadd+0x36c>)
 80009cc:	42a2      	cmp	r2, r4
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x2f6>
 80009d0:	e11c      	b.n	8000c0c <__aeabi_dadd+0x530>
 80009d2:	2480      	movs	r4, #128	; 0x80
 80009d4:	0424      	lsls	r4, r4, #16
 80009d6:	4321      	orrs	r1, r4
 80009d8:	2f38      	cmp	r7, #56	; 0x38
 80009da:	dd00      	ble.n	80009de <__aeabi_dadd+0x302>
 80009dc:	e11e      	b.n	8000c1c <__aeabi_dadd+0x540>
 80009de:	2f1f      	cmp	r7, #31
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_dadd+0x308>
 80009e2:	e19e      	b.n	8000d22 <__aeabi_dadd+0x646>
 80009e4:	2620      	movs	r6, #32
 80009e6:	000c      	movs	r4, r1
 80009e8:	1bf6      	subs	r6, r6, r7
 80009ea:	0018      	movs	r0, r3
 80009ec:	40b3      	lsls	r3, r6
 80009ee:	40b4      	lsls	r4, r6
 80009f0:	40f8      	lsrs	r0, r7
 80009f2:	1e5e      	subs	r6, r3, #1
 80009f4:	41b3      	sbcs	r3, r6
 80009f6:	40f9      	lsrs	r1, r7
 80009f8:	4304      	orrs	r4, r0
 80009fa:	431c      	orrs	r4, r3
 80009fc:	4489      	add	r9, r1
 80009fe:	4444      	add	r4, r8
 8000a00:	4544      	cmp	r4, r8
 8000a02:	419b      	sbcs	r3, r3
 8000a04:	425b      	negs	r3, r3
 8000a06:	444b      	add	r3, r9
 8000a08:	469a      	mov	sl, r3
 8000a0a:	0016      	movs	r6, r2
 8000a0c:	e7a8      	b.n	8000960 <__aeabi_dadd+0x284>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	464c      	mov	r4, r9
 8000a12:	4314      	orrs	r4, r2
 8000a14:	1e62      	subs	r2, r4, #1
 8000a16:	4194      	sbcs	r4, r2
 8000a18:	e6a6      	b.n	8000768 <__aeabi_dadd+0x8c>
 8000a1a:	4c0d      	ldr	r4, [pc, #52]	; (8000a50 <__aeabi_dadd+0x374>)
 8000a1c:	1c72      	adds	r2, r6, #1
 8000a1e:	4222      	tst	r2, r4
 8000a20:	d000      	beq.n	8000a24 <__aeabi_dadd+0x348>
 8000a22:	e0a8      	b.n	8000b76 <__aeabi_dadd+0x49a>
 8000a24:	000a      	movs	r2, r1
 8000a26:	431a      	orrs	r2, r3
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_dadd+0x352>
 8000a2c:	e10a      	b.n	8000c44 <__aeabi_dadd+0x568>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x358>
 8000a32:	e15e      	b.n	8000cf2 <__aeabi_dadd+0x616>
 8000a34:	464a      	mov	r2, r9
 8000a36:	4302      	orrs	r2, r0
 8000a38:	d000      	beq.n	8000a3c <__aeabi_dadd+0x360>
 8000a3a:	e161      	b.n	8000d00 <__aeabi_dadd+0x624>
 8000a3c:	074a      	lsls	r2, r1, #29
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	e77c      	b.n	8000940 <__aeabi_dadd+0x264>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	4ccf      	ldr	r4, [pc, #828]	; (8000d94 <__aeabi_dadd+0x6b8>)
 8000a56:	42a2      	cmp	r2, r4
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x380>
 8000a5a:	e0ce      	b.n	8000bfa <__aeabi_dadd+0x51e>
 8000a5c:	2480      	movs	r4, #128	; 0x80
 8000a5e:	0424      	lsls	r4, r4, #16
 8000a60:	4321      	orrs	r1, r4
 8000a62:	2f38      	cmp	r7, #56	; 0x38
 8000a64:	dc5b      	bgt.n	8000b1e <__aeabi_dadd+0x442>
 8000a66:	2f1f      	cmp	r7, #31
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_dadd+0x390>
 8000a6a:	e0dc      	b.n	8000c26 <__aeabi_dadd+0x54a>
 8000a6c:	2520      	movs	r5, #32
 8000a6e:	000c      	movs	r4, r1
 8000a70:	1bed      	subs	r5, r5, r7
 8000a72:	001e      	movs	r6, r3
 8000a74:	40ab      	lsls	r3, r5
 8000a76:	40ac      	lsls	r4, r5
 8000a78:	40fe      	lsrs	r6, r7
 8000a7a:	1e5d      	subs	r5, r3, #1
 8000a7c:	41ab      	sbcs	r3, r5
 8000a7e:	4334      	orrs	r4, r6
 8000a80:	40f9      	lsrs	r1, r7
 8000a82:	431c      	orrs	r4, r3
 8000a84:	464b      	mov	r3, r9
 8000a86:	1a5b      	subs	r3, r3, r1
 8000a88:	4699      	mov	r9, r3
 8000a8a:	e04c      	b.n	8000b26 <__aeabi_dadd+0x44a>
 8000a8c:	464a      	mov	r2, r9
 8000a8e:	1a1c      	subs	r4, r3, r0
 8000a90:	1a88      	subs	r0, r1, r2
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	4192      	sbcs	r2, r2
 8000a96:	4252      	negs	r2, r2
 8000a98:	4692      	mov	sl, r2
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4650      	mov	r0, sl
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	4692      	mov	sl, r2
 8000aa2:	0212      	lsls	r2, r2, #8
 8000aa4:	d478      	bmi.n	8000b98 <__aeabi_dadd+0x4bc>
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x3d2>
 8000aac:	e66a      	b.n	8000784 <__aeabi_dadd+0xa8>
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	e745      	b.n	8000940 <__aeabi_dadd+0x264>
 8000ab4:	074a      	lsls	r2, r1, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	e73d      	b.n	800093a <__aeabi_dadd+0x25e>
 8000abe:	181c      	adds	r4, r3, r0
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	419b      	sbcs	r3, r3
 8000ac4:	4449      	add	r1, r9
 8000ac6:	468a      	mov	sl, r1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	449a      	add	sl, r3
 8000acc:	4653      	mov	r3, sl
 8000ace:	2601      	movs	r6, #1
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x3fa>
 8000ad4:	e727      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000ad6:	2602      	movs	r6, #2
 8000ad8:	4652      	mov	r2, sl
 8000ada:	4baf      	ldr	r3, [pc, #700]	; (8000d98 <__aeabi_dadd+0x6bc>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	401a      	ands	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	4021      	ands	r1, r4
 8000ae4:	0862      	lsrs	r2, r4, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	07dc      	lsls	r4, r3, #31
 8000aea:	085b      	lsrs	r3, r3, #1
 8000aec:	469a      	mov	sl, r3
 8000aee:	4314      	orrs	r4, r2
 8000af0:	e670      	b.n	80007d4 <__aeabi_dadd+0xf8>
 8000af2:	003a      	movs	r2, r7
 8000af4:	464c      	mov	r4, r9
 8000af6:	3a20      	subs	r2, #32
 8000af8:	40d4      	lsrs	r4, r2
 8000afa:	46a4      	mov	ip, r4
 8000afc:	2f20      	cmp	r7, #32
 8000afe:	d007      	beq.n	8000b10 <__aeabi_dadd+0x434>
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	4648      	mov	r0, r9
 8000b04:	1bd2      	subs	r2, r2, r7
 8000b06:	4090      	lsls	r0, r2
 8000b08:	0002      	movs	r2, r0
 8000b0a:	4640      	mov	r0, r8
 8000b0c:	4310      	orrs	r0, r2
 8000b0e:	4680      	mov	r8, r0
 8000b10:	4640      	mov	r0, r8
 8000b12:	1e42      	subs	r2, r0, #1
 8000b14:	4190      	sbcs	r0, r2
 8000b16:	4662      	mov	r2, ip
 8000b18:	0004      	movs	r4, r0
 8000b1a:	4314      	orrs	r4, r2
 8000b1c:	e624      	b.n	8000768 <__aeabi_dadd+0x8c>
 8000b1e:	4319      	orrs	r1, r3
 8000b20:	000c      	movs	r4, r1
 8000b22:	1e63      	subs	r3, r4, #1
 8000b24:	419c      	sbcs	r4, r3
 8000b26:	4643      	mov	r3, r8
 8000b28:	1b1c      	subs	r4, r3, r4
 8000b2a:	45a0      	cmp	r8, r4
 8000b2c:	419b      	sbcs	r3, r3
 8000b2e:	4649      	mov	r1, r9
 8000b30:	425b      	negs	r3, r3
 8000b32:	1acb      	subs	r3, r1, r3
 8000b34:	469a      	mov	sl, r3
 8000b36:	4665      	mov	r5, ip
 8000b38:	0016      	movs	r6, r2
 8000b3a:	e61b      	b.n	8000774 <__aeabi_dadd+0x98>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	431c      	orrs	r4, r3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x468>
 8000b42:	e0c7      	b.n	8000cd4 <__aeabi_dadd+0x5f8>
 8000b44:	1e7c      	subs	r4, r7, #1
 8000b46:	2f01      	cmp	r7, #1
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x470>
 8000b4a:	e0f9      	b.n	8000d40 <__aeabi_dadd+0x664>
 8000b4c:	4e91      	ldr	r6, [pc, #580]	; (8000d94 <__aeabi_dadd+0x6b8>)
 8000b4e:	42b7      	cmp	r7, r6
 8000b50:	d05c      	beq.n	8000c0c <__aeabi_dadd+0x530>
 8000b52:	0027      	movs	r7, r4
 8000b54:	e740      	b.n	80009d8 <__aeabi_dadd+0x2fc>
 8000b56:	2220      	movs	r2, #32
 8000b58:	464c      	mov	r4, r9
 8000b5a:	4640      	mov	r0, r8
 8000b5c:	1bd2      	subs	r2, r2, r7
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	40f8      	lsrs	r0, r7
 8000b62:	4304      	orrs	r4, r0
 8000b64:	4640      	mov	r0, r8
 8000b66:	4090      	lsls	r0, r2
 8000b68:	1e42      	subs	r2, r0, #1
 8000b6a:	4190      	sbcs	r0, r2
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	40fa      	lsrs	r2, r7
 8000b70:	4304      	orrs	r4, r0
 8000b72:	1889      	adds	r1, r1, r2
 8000b74:	e6ee      	b.n	8000954 <__aeabi_dadd+0x278>
 8000b76:	4c87      	ldr	r4, [pc, #540]	; (8000d94 <__aeabi_dadd+0x6b8>)
 8000b78:	42a2      	cmp	r2, r4
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x4a2>
 8000b7c:	e6f9      	b.n	8000972 <__aeabi_dadd+0x296>
 8000b7e:	1818      	adds	r0, r3, r0
 8000b80:	4298      	cmp	r0, r3
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	4449      	add	r1, r9
 8000b86:	425b      	negs	r3, r3
 8000b88:	18cb      	adds	r3, r1, r3
 8000b8a:	07dc      	lsls	r4, r3, #31
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	469a      	mov	sl, r3
 8000b92:	0016      	movs	r6, r2
 8000b94:	4304      	orrs	r4, r0
 8000b96:	e6c6      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000b98:	4642      	mov	r2, r8
 8000b9a:	1ad4      	subs	r4, r2, r3
 8000b9c:	45a0      	cmp	r8, r4
 8000b9e:	4180      	sbcs	r0, r0
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	1a59      	subs	r1, r3, r1
 8000ba6:	1a0b      	subs	r3, r1, r0
 8000ba8:	469a      	mov	sl, r3
 8000baa:	4665      	mov	r5, ip
 8000bac:	e5ea      	b.n	8000784 <__aeabi_dadd+0xa8>
 8000bae:	464b      	mov	r3, r9
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	08c0      	lsrs	r0, r0, #3
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	08d1      	lsrs	r1, r2, #3
 8000bbc:	e6bd      	b.n	800093a <__aeabi_dadd+0x25e>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_dadd+0x4e8>
 8000bc2:	e08e      	b.n	8000ce2 <__aeabi_dadd+0x606>
 8000bc4:	464b      	mov	r3, r9
 8000bc6:	4303      	orrs	r3, r0
 8000bc8:	d117      	bne.n	8000bfa <__aeabi_dadd+0x51e>
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	2500      	movs	r5, #0
 8000bce:	0309      	lsls	r1, r1, #12
 8000bd0:	e6da      	b.n	8000988 <__aeabi_dadd+0x2ac>
 8000bd2:	074a      	lsls	r2, r1, #29
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	08c9      	lsrs	r1, r1, #3
 8000bda:	e6d1      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000bdc:	1a1c      	subs	r4, r3, r0
 8000bde:	464a      	mov	r2, r9
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	419b      	sbcs	r3, r3
 8000be4:	1a89      	subs	r1, r1, r2
 8000be6:	425b      	negs	r3, r3
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	469a      	mov	sl, r3
 8000bec:	2601      	movs	r6, #1
 8000bee:	e5c1      	b.n	8000774 <__aeabi_dadd+0x98>
 8000bf0:	074a      	lsls	r2, r1, #29
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	e69f      	b.n	800093a <__aeabi_dadd+0x25e>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	08d8      	lsrs	r0, r3, #3
 8000bfe:	464b      	mov	r3, r9
 8000c00:	464a      	mov	r2, r9
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4665      	mov	r5, ip
 8000c06:	4303      	orrs	r3, r0
 8000c08:	08d1      	lsrs	r1, r2, #3
 8000c0a:	e6b9      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	08d8      	lsrs	r0, r3, #3
 8000c10:	464b      	mov	r3, r9
 8000c12:	464a      	mov	r2, r9
 8000c14:	075b      	lsls	r3, r3, #29
 8000c16:	4303      	orrs	r3, r0
 8000c18:	08d1      	lsrs	r1, r2, #3
 8000c1a:	e6b1      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	000c      	movs	r4, r1
 8000c20:	1e63      	subs	r3, r4, #1
 8000c22:	419c      	sbcs	r4, r3
 8000c24:	e6eb      	b.n	80009fe <__aeabi_dadd+0x322>
 8000c26:	003c      	movs	r4, r7
 8000c28:	000d      	movs	r5, r1
 8000c2a:	3c20      	subs	r4, #32
 8000c2c:	40e5      	lsrs	r5, r4
 8000c2e:	2f20      	cmp	r7, #32
 8000c30:	d003      	beq.n	8000c3a <__aeabi_dadd+0x55e>
 8000c32:	2440      	movs	r4, #64	; 0x40
 8000c34:	1be4      	subs	r4, r4, r7
 8000c36:	40a1      	lsls	r1, r4
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	1e63      	subs	r3, r4, #1
 8000c3e:	419c      	sbcs	r4, r3
 8000c40:	432c      	orrs	r4, r5
 8000c42:	e770      	b.n	8000b26 <__aeabi_dadd+0x44a>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d0e1      	beq.n	8000c0c <__aeabi_dadd+0x530>
 8000c48:	464a      	mov	r2, r9
 8000c4a:	4302      	orrs	r2, r0
 8000c4c:	d0c1      	beq.n	8000bd2 <__aeabi_dadd+0x4f6>
 8000c4e:	074a      	lsls	r2, r1, #29
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	08c9      	lsrs	r1, r1, #3
 8000c58:	0312      	lsls	r2, r2, #12
 8000c5a:	4211      	tst	r1, r2
 8000c5c:	d008      	beq.n	8000c70 <__aeabi_dadd+0x594>
 8000c5e:	4648      	mov	r0, r9
 8000c60:	08c4      	lsrs	r4, r0, #3
 8000c62:	4214      	tst	r4, r2
 8000c64:	d104      	bne.n	8000c70 <__aeabi_dadd+0x594>
 8000c66:	4643      	mov	r3, r8
 8000c68:	0021      	movs	r1, r4
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	0742      	lsls	r2, r0, #29
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	0f5a      	lsrs	r2, r3, #29
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	0752      	lsls	r2, r2, #29
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	e681      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x5a8>
 8000c82:	e714      	b.n	8000aae <__aeabi_dadd+0x3d2>
 8000c84:	464b      	mov	r3, r9
 8000c86:	464a      	mov	r2, r9
 8000c88:	08c0      	lsrs	r0, r0, #3
 8000c8a:	075b      	lsls	r3, r3, #29
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	4303      	orrs	r3, r0
 8000c90:	08d1      	lsrs	r1, r2, #3
 8000c92:	e655      	b.n	8000940 <__aeabi_dadd+0x264>
 8000c94:	1ac4      	subs	r4, r0, r3
 8000c96:	45a0      	cmp	r8, r4
 8000c98:	4180      	sbcs	r0, r0
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	4240      	negs	r0, r0
 8000c9e:	1a59      	subs	r1, r3, r1
 8000ca0:	1a0b      	subs	r3, r1, r0
 8000ca2:	469a      	mov	sl, r3
 8000ca4:	4665      	mov	r5, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	e564      	b.n	8000774 <__aeabi_dadd+0x98>
 8000caa:	1a1c      	subs	r4, r3, r0
 8000cac:	464a      	mov	r2, r9
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	4180      	sbcs	r0, r0
 8000cb2:	1a8a      	subs	r2, r1, r2
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	1a12      	subs	r2, r2, r0
 8000cb8:	4692      	mov	sl, r2
 8000cba:	0212      	lsls	r2, r2, #8
 8000cbc:	d549      	bpl.n	8000d52 <__aeabi_dadd+0x676>
 8000cbe:	4642      	mov	r2, r8
 8000cc0:	1ad4      	subs	r4, r2, r3
 8000cc2:	45a0      	cmp	r8, r4
 8000cc4:	4180      	sbcs	r0, r0
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	4240      	negs	r0, r0
 8000cca:	1a59      	subs	r1, r3, r1
 8000ccc:	1a0b      	subs	r3, r1, r0
 8000cce:	469a      	mov	sl, r3
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	e57f      	b.n	80007d4 <__aeabi_dadd+0xf8>
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	08c0      	lsrs	r0, r0, #3
 8000cda:	075b      	lsls	r3, r3, #29
 8000cdc:	4303      	orrs	r3, r0
 8000cde:	08d1      	lsrs	r1, r2, #3
 8000ce0:	e62b      	b.n	800093a <__aeabi_dadd+0x25e>
 8000ce2:	464a      	mov	r2, r9
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	4302      	orrs	r2, r0
 8000ce8:	d138      	bne.n	8000d5c <__aeabi_dadd+0x680>
 8000cea:	074a      	lsls	r2, r1, #29
 8000cec:	4313      	orrs	r3, r2
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	e646      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	08c0      	lsrs	r0, r0, #3
 8000cf8:	075b      	lsls	r3, r3, #29
 8000cfa:	4303      	orrs	r3, r0
 8000cfc:	08d1      	lsrs	r1, r2, #3
 8000cfe:	e61f      	b.n	8000940 <__aeabi_dadd+0x264>
 8000d00:	181c      	adds	r4, r3, r0
 8000d02:	429c      	cmp	r4, r3
 8000d04:	419b      	sbcs	r3, r3
 8000d06:	4449      	add	r1, r9
 8000d08:	468a      	mov	sl, r1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	449a      	add	sl, r3
 8000d0e:	4653      	mov	r3, sl
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	d400      	bmi.n	8000d16 <__aeabi_dadd+0x63a>
 8000d14:	e607      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d16:	4652      	mov	r2, sl
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <__aeabi_dadd+0x6bc>)
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	4692      	mov	sl, r2
 8000d20:	e601      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d22:	003c      	movs	r4, r7
 8000d24:	000e      	movs	r6, r1
 8000d26:	3c20      	subs	r4, #32
 8000d28:	40e6      	lsrs	r6, r4
 8000d2a:	2f20      	cmp	r7, #32
 8000d2c:	d003      	beq.n	8000d36 <__aeabi_dadd+0x65a>
 8000d2e:	2440      	movs	r4, #64	; 0x40
 8000d30:	1be4      	subs	r4, r4, r7
 8000d32:	40a1      	lsls	r1, r4
 8000d34:	430b      	orrs	r3, r1
 8000d36:	001c      	movs	r4, r3
 8000d38:	1e63      	subs	r3, r4, #1
 8000d3a:	419c      	sbcs	r4, r3
 8000d3c:	4334      	orrs	r4, r6
 8000d3e:	e65e      	b.n	80009fe <__aeabi_dadd+0x322>
 8000d40:	4443      	add	r3, r8
 8000d42:	4283      	cmp	r3, r0
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	4449      	add	r1, r9
 8000d48:	468a      	mov	sl, r1
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	001c      	movs	r4, r3
 8000d4e:	4482      	add	sl, r0
 8000d50:	e6bc      	b.n	8000acc <__aeabi_dadd+0x3f0>
 8000d52:	4653      	mov	r3, sl
 8000d54:	4323      	orrs	r3, r4
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x67e>
 8000d58:	e6a9      	b.n	8000aae <__aeabi_dadd+0x3d2>
 8000d5a:	e5e4      	b.n	8000926 <__aeabi_dadd+0x24a>
 8000d5c:	074a      	lsls	r2, r1, #29
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	08c9      	lsrs	r1, r1, #3
 8000d64:	0312      	lsls	r2, r2, #12
 8000d66:	4211      	tst	r1, r2
 8000d68:	d009      	beq.n	8000d7e <__aeabi_dadd+0x6a2>
 8000d6a:	4648      	mov	r0, r9
 8000d6c:	08c4      	lsrs	r4, r0, #3
 8000d6e:	4214      	tst	r4, r2
 8000d70:	d105      	bne.n	8000d7e <__aeabi_dadd+0x6a2>
 8000d72:	4643      	mov	r3, r8
 8000d74:	4665      	mov	r5, ip
 8000d76:	0021      	movs	r1, r4
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	0742      	lsls	r2, r0, #29
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	0f5a      	lsrs	r2, r3, #29
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	0752      	lsls	r2, r2, #29
 8000d86:	4313      	orrs	r3, r2
 8000d88:	e5fa      	b.n	8000980 <__aeabi_dadd+0x2a4>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	4a01      	ldr	r2, [pc, #4]	; (8000d94 <__aeabi_dadd+0x6b8>)
 8000d8e:	001c      	movs	r4, r3
 8000d90:	e540      	b.n	8000814 <__aeabi_dadd+0x138>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	000007ff 	.word	0x000007ff
 8000d98:	ff7fffff 	.word	0xff7fffff

08000d9c <__aeabi_ddiv>:
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	4657      	mov	r7, sl
 8000da0:	464e      	mov	r6, r9
 8000da2:	4645      	mov	r5, r8
 8000da4:	46de      	mov	lr, fp
 8000da6:	b5e0      	push	{r5, r6, r7, lr}
 8000da8:	030c      	lsls	r4, r1, #12
 8000daa:	001f      	movs	r7, r3
 8000dac:	004b      	lsls	r3, r1, #1
 8000dae:	4681      	mov	r9, r0
 8000db0:	4692      	mov	sl, r2
 8000db2:	0005      	movs	r5, r0
 8000db4:	b085      	sub	sp, #20
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	0fce      	lsrs	r6, r1, #31
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x26>
 8000dc0:	e152      	b.n	8001068 <__aeabi_ddiv+0x2cc>
 8000dc2:	4ad2      	ldr	r2, [pc, #840]	; (800110c <__aeabi_ddiv+0x370>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2e>
 8000dc8:	e16e      	b.n	80010a8 <__aeabi_ddiv+0x30c>
 8000dca:	0f42      	lsrs	r2, r0, #29
 8000dcc:	00e4      	lsls	r4, r4, #3
 8000dce:	4314      	orrs	r4, r2
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	4322      	orrs	r2, r4
 8000dd6:	4690      	mov	r8, r2
 8000dd8:	4acd      	ldr	r2, [pc, #820]	; (8001110 <__aeabi_ddiv+0x374>)
 8000dda:	00c5      	lsls	r5, r0, #3
 8000ddc:	4693      	mov	fp, r2
 8000dde:	449b      	add	fp, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	4699      	mov	r9, r3
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	033c      	lsls	r4, r7, #12
 8000de8:	007b      	lsls	r3, r7, #1
 8000dea:	4650      	mov	r0, sl
 8000dec:	0b24      	lsrs	r4, r4, #12
 8000dee:	0d5b      	lsrs	r3, r3, #21
 8000df0:	0fff      	lsrs	r7, r7, #31
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x5c>
 8000df6:	e11a      	b.n	800102e <__aeabi_ddiv+0x292>
 8000df8:	4ac4      	ldr	r2, [pc, #784]	; (800110c <__aeabi_ddiv+0x370>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x64>
 8000dfe:	e15e      	b.n	80010be <__aeabi_ddiv+0x322>
 8000e00:	0f42      	lsrs	r2, r0, #29
 8000e02:	00e4      	lsls	r4, r4, #3
 8000e04:	4322      	orrs	r2, r4
 8000e06:	2480      	movs	r4, #128	; 0x80
 8000e08:	0424      	lsls	r4, r4, #16
 8000e0a:	4314      	orrs	r4, r2
 8000e0c:	4ac0      	ldr	r2, [pc, #768]	; (8001110 <__aeabi_ddiv+0x374>)
 8000e0e:	00c1      	lsls	r1, r0, #3
 8000e10:	4694      	mov	ip, r2
 8000e12:	465a      	mov	r2, fp
 8000e14:	4463      	add	r3, ip
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	469b      	mov	fp, r3
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	0033      	movs	r3, r6
 8000e1e:	407b      	eors	r3, r7
 8000e20:	469a      	mov	sl, r3
 8000e22:	464b      	mov	r3, r9
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d827      	bhi.n	8000e78 <__aeabi_ddiv+0xdc>
 8000e28:	4aba      	ldr	r2, [pc, #744]	; (8001114 <__aeabi_ddiv+0x378>)
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	58d3      	ldr	r3, [r2, r3]
 8000e2e:	469f      	mov	pc, r3
 8000e30:	46b2      	mov	sl, r6
 8000e32:	9b00      	ldr	r3, [sp, #0]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d016      	beq.n	8000e66 <__aeabi_ddiv+0xca>
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_ddiv+0xa2>
 8000e3c:	e287      	b.n	800134e <__aeabi_ddiv+0x5b2>
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0xa8>
 8000e42:	e0d5      	b.n	8000ff0 <__aeabi_ddiv+0x254>
 8000e44:	2300      	movs	r3, #0
 8000e46:	2200      	movs	r2, #0
 8000e48:	2500      	movs	r5, #0
 8000e4a:	051b      	lsls	r3, r3, #20
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	4652      	mov	r2, sl
 8000e50:	07d2      	lsls	r2, r2, #31
 8000e52:	4313      	orrs	r3, r2
 8000e54:	0028      	movs	r0, r5
 8000e56:	0019      	movs	r1, r3
 8000e58:	b005      	add	sp, #20
 8000e5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e5c:	46bb      	mov	fp, r7
 8000e5e:	46b2      	mov	sl, r6
 8000e60:	46a9      	mov	r9, r5
 8000e62:	46a0      	mov	r8, r4
 8000e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e66:	2200      	movs	r2, #0
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4ba8      	ldr	r3, [pc, #672]	; (800110c <__aeabi_ddiv+0x370>)
 8000e6c:	e7ed      	b.n	8000e4a <__aeabi_ddiv+0xae>
 8000e6e:	46ba      	mov	sl, r7
 8000e70:	46a0      	mov	r8, r4
 8000e72:	000d      	movs	r5, r1
 8000e74:	9000      	str	r0, [sp, #0]
 8000e76:	e7dc      	b.n	8000e32 <__aeabi_ddiv+0x96>
 8000e78:	4544      	cmp	r4, r8
 8000e7a:	d200      	bcs.n	8000e7e <__aeabi_ddiv+0xe2>
 8000e7c:	e1c4      	b.n	8001208 <__aeabi_ddiv+0x46c>
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_ddiv+0xe6>
 8000e80:	e1bf      	b.n	8001202 <__aeabi_ddiv+0x466>
 8000e82:	2301      	movs	r3, #1
 8000e84:	425b      	negs	r3, r3
 8000e86:	469c      	mov	ip, r3
 8000e88:	002e      	movs	r6, r5
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	44e3      	add	fp, ip
 8000e90:	0223      	lsls	r3, r4, #8
 8000e92:	0e0c      	lsrs	r4, r1, #24
 8000e94:	431c      	orrs	r4, r3
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	4699      	mov	r9, r3
 8000e9a:	0423      	lsls	r3, r4, #16
 8000e9c:	020a      	lsls	r2, r1, #8
 8000e9e:	0c1f      	lsrs	r7, r3, #16
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	9200      	str	r2, [sp, #0]
 8000ea4:	9701      	str	r7, [sp, #4]
 8000ea6:	f7ff f9d1 	bl	800024c <__aeabi_uidivmod>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	437a      	muls	r2, r7
 8000eae:	040b      	lsls	r3, r1, #16
 8000eb0:	0c31      	lsrs	r1, r6, #16
 8000eb2:	4680      	mov	r8, r0
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	d907      	bls.n	8000eca <__aeabi_ddiv+0x12e>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	1909      	adds	r1, r1, r4
 8000ec2:	44e0      	add	r8, ip
 8000ec4:	428c      	cmp	r4, r1
 8000ec6:	d800      	bhi.n	8000eca <__aeabi_ddiv+0x12e>
 8000ec8:	e201      	b.n	80012ce <__aeabi_ddiv+0x532>
 8000eca:	1a88      	subs	r0, r1, r2
 8000ecc:	4649      	mov	r1, r9
 8000ece:	f7ff f9bd 	bl	800024c <__aeabi_uidivmod>
 8000ed2:	9a01      	ldr	r2, [sp, #4]
 8000ed4:	0436      	lsls	r6, r6, #16
 8000ed6:	4342      	muls	r2, r0
 8000ed8:	0409      	lsls	r1, r1, #16
 8000eda:	0c36      	lsrs	r6, r6, #16
 8000edc:	0003      	movs	r3, r0
 8000ede:	430e      	orrs	r6, r1
 8000ee0:	42b2      	cmp	r2, r6
 8000ee2:	d904      	bls.n	8000eee <__aeabi_ddiv+0x152>
 8000ee4:	1936      	adds	r6, r6, r4
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	42b4      	cmp	r4, r6
 8000eea:	d800      	bhi.n	8000eee <__aeabi_ddiv+0x152>
 8000eec:	e1e9      	b.n	80012c2 <__aeabi_ddiv+0x526>
 8000eee:	1ab0      	subs	r0, r6, r2
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	9e00      	ldr	r6, [sp, #0]
 8000ef4:	0412      	lsls	r2, r2, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	0c33      	lsrs	r3, r6, #16
 8000efa:	001f      	movs	r7, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	4690      	mov	r8, r2
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	0413      	lsls	r3, r2, #16
 8000f04:	0432      	lsls	r2, r6, #16
 8000f06:	0c16      	lsrs	r6, r2, #16
 8000f08:	0032      	movs	r2, r6
 8000f0a:	0c1b      	lsrs	r3, r3, #16
 8000f0c:	435a      	muls	r2, r3
 8000f0e:	9603      	str	r6, [sp, #12]
 8000f10:	437b      	muls	r3, r7
 8000f12:	434e      	muls	r6, r1
 8000f14:	4379      	muls	r1, r7
 8000f16:	0c17      	lsrs	r7, r2, #16
 8000f18:	46bc      	mov	ip, r7
 8000f1a:	199b      	adds	r3, r3, r6
 8000f1c:	4463      	add	r3, ip
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	d903      	bls.n	8000f2a <__aeabi_ddiv+0x18e>
 8000f22:	2680      	movs	r6, #128	; 0x80
 8000f24:	0276      	lsls	r6, r6, #9
 8000f26:	46b4      	mov	ip, r6
 8000f28:	4461      	add	r1, ip
 8000f2a:	0c1e      	lsrs	r6, r3, #16
 8000f2c:	1871      	adds	r1, r6, r1
 8000f2e:	0416      	lsls	r6, r2, #16
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	0c36      	lsrs	r6, r6, #16
 8000f34:	199e      	adds	r6, r3, r6
 8000f36:	4288      	cmp	r0, r1
 8000f38:	d302      	bcc.n	8000f40 <__aeabi_ddiv+0x1a4>
 8000f3a:	d112      	bne.n	8000f62 <__aeabi_ddiv+0x1c6>
 8000f3c:	42b5      	cmp	r5, r6
 8000f3e:	d210      	bcs.n	8000f62 <__aeabi_ddiv+0x1c6>
 8000f40:	4643      	mov	r3, r8
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	9b00      	ldr	r3, [sp, #0]
 8000f46:	469c      	mov	ip, r3
 8000f48:	4465      	add	r5, ip
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	429d      	cmp	r5, r3
 8000f4e:	419b      	sbcs	r3, r3
 8000f50:	425b      	negs	r3, r3
 8000f52:	191b      	adds	r3, r3, r4
 8000f54:	18c0      	adds	r0, r0, r3
 8000f56:	4284      	cmp	r4, r0
 8000f58:	d200      	bcs.n	8000f5c <__aeabi_ddiv+0x1c0>
 8000f5a:	e19e      	b.n	800129a <__aeabi_ddiv+0x4fe>
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x1c4>
 8000f5e:	e199      	b.n	8001294 <__aeabi_ddiv+0x4f8>
 8000f60:	4690      	mov	r8, r2
 8000f62:	1bae      	subs	r6, r5, r6
 8000f64:	42b5      	cmp	r5, r6
 8000f66:	41ad      	sbcs	r5, r5
 8000f68:	1a40      	subs	r0, r0, r1
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	1b40      	subs	r0, r0, r5
 8000f6e:	4284      	cmp	r4, r0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x1d8>
 8000f72:	e1d2      	b.n	800131a <__aeabi_ddiv+0x57e>
 8000f74:	4649      	mov	r1, r9
 8000f76:	f7ff f969 	bl	800024c <__aeabi_uidivmod>
 8000f7a:	9a01      	ldr	r2, [sp, #4]
 8000f7c:	040b      	lsls	r3, r1, #16
 8000f7e:	4342      	muls	r2, r0
 8000f80:	0c31      	lsrs	r1, r6, #16
 8000f82:	0005      	movs	r5, r0
 8000f84:	4319      	orrs	r1, r3
 8000f86:	428a      	cmp	r2, r1
 8000f88:	d900      	bls.n	8000f8c <__aeabi_ddiv+0x1f0>
 8000f8a:	e16c      	b.n	8001266 <__aeabi_ddiv+0x4ca>
 8000f8c:	1a88      	subs	r0, r1, r2
 8000f8e:	4649      	mov	r1, r9
 8000f90:	f7ff f95c 	bl	800024c <__aeabi_uidivmod>
 8000f94:	9a01      	ldr	r2, [sp, #4]
 8000f96:	0436      	lsls	r6, r6, #16
 8000f98:	4342      	muls	r2, r0
 8000f9a:	0409      	lsls	r1, r1, #16
 8000f9c:	0c36      	lsrs	r6, r6, #16
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	430e      	orrs	r6, r1
 8000fa2:	42b2      	cmp	r2, r6
 8000fa4:	d900      	bls.n	8000fa8 <__aeabi_ddiv+0x20c>
 8000fa6:	e153      	b.n	8001250 <__aeabi_ddiv+0x4b4>
 8000fa8:	9803      	ldr	r0, [sp, #12]
 8000faa:	1ab6      	subs	r6, r6, r2
 8000fac:	0002      	movs	r2, r0
 8000fae:	042d      	lsls	r5, r5, #16
 8000fb0:	431d      	orrs	r5, r3
 8000fb2:	9f02      	ldr	r7, [sp, #8]
 8000fb4:	042b      	lsls	r3, r5, #16
 8000fb6:	0c1b      	lsrs	r3, r3, #16
 8000fb8:	435a      	muls	r2, r3
 8000fba:	437b      	muls	r3, r7
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	0c29      	lsrs	r1, r5, #16
 8000fc0:	4348      	muls	r0, r1
 8000fc2:	0c13      	lsrs	r3, r2, #16
 8000fc4:	4484      	add	ip, r0
 8000fc6:	4463      	add	r3, ip
 8000fc8:	4379      	muls	r1, r7
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d903      	bls.n	8000fd6 <__aeabi_ddiv+0x23a>
 8000fce:	2080      	movs	r0, #128	; 0x80
 8000fd0:	0240      	lsls	r0, r0, #9
 8000fd2:	4684      	mov	ip, r0
 8000fd4:	4461      	add	r1, ip
 8000fd6:	0c18      	lsrs	r0, r3, #16
 8000fd8:	0412      	lsls	r2, r2, #16
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	0c12      	lsrs	r2, r2, #16
 8000fde:	1840      	adds	r0, r0, r1
 8000fe0:	189b      	adds	r3, r3, r2
 8000fe2:	4286      	cmp	r6, r0
 8000fe4:	d200      	bcs.n	8000fe8 <__aeabi_ddiv+0x24c>
 8000fe6:	e100      	b.n	80011ea <__aeabi_ddiv+0x44e>
 8000fe8:	d100      	bne.n	8000fec <__aeabi_ddiv+0x250>
 8000fea:	e0fb      	b.n	80011e4 <__aeabi_ddiv+0x448>
 8000fec:	2301      	movs	r3, #1
 8000fee:	431d      	orrs	r5, r3
 8000ff0:	4b49      	ldr	r3, [pc, #292]	; (8001118 <__aeabi_ddiv+0x37c>)
 8000ff2:	445b      	add	r3, fp
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dc00      	bgt.n	8000ffa <__aeabi_ddiv+0x25e>
 8000ff8:	e0aa      	b.n	8001150 <__aeabi_ddiv+0x3b4>
 8000ffa:	076a      	lsls	r2, r5, #29
 8000ffc:	d000      	beq.n	8001000 <__aeabi_ddiv+0x264>
 8000ffe:	e13d      	b.n	800127c <__aeabi_ddiv+0x4e0>
 8001000:	08e9      	lsrs	r1, r5, #3
 8001002:	4642      	mov	r2, r8
 8001004:	01d2      	lsls	r2, r2, #7
 8001006:	d506      	bpl.n	8001016 <__aeabi_ddiv+0x27a>
 8001008:	4642      	mov	r2, r8
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <__aeabi_ddiv+0x380>)
 800100c:	401a      	ands	r2, r3
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	4690      	mov	r8, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	445b      	add	r3, fp
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <__aeabi_ddiv+0x384>)
 8001018:	4293      	cmp	r3, r2
 800101a:	dd00      	ble.n	800101e <__aeabi_ddiv+0x282>
 800101c:	e723      	b.n	8000e66 <__aeabi_ddiv+0xca>
 800101e:	4642      	mov	r2, r8
 8001020:	055b      	lsls	r3, r3, #21
 8001022:	0755      	lsls	r5, r2, #29
 8001024:	0252      	lsls	r2, r2, #9
 8001026:	430d      	orrs	r5, r1
 8001028:	0b12      	lsrs	r2, r2, #12
 800102a:	0d5b      	lsrs	r3, r3, #21
 800102c:	e70d      	b.n	8000e4a <__aeabi_ddiv+0xae>
 800102e:	4651      	mov	r1, sl
 8001030:	4321      	orrs	r1, r4
 8001032:	d100      	bne.n	8001036 <__aeabi_ddiv+0x29a>
 8001034:	e07c      	b.n	8001130 <__aeabi_ddiv+0x394>
 8001036:	2c00      	cmp	r4, #0
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x2a0>
 800103a:	e0fb      	b.n	8001234 <__aeabi_ddiv+0x498>
 800103c:	0020      	movs	r0, r4
 800103e:	f001 f995 	bl	800236c <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	3a0b      	subs	r2, #11
 8001046:	231d      	movs	r3, #29
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	4652      	mov	r2, sl
 800104c:	0001      	movs	r1, r0
 800104e:	40da      	lsrs	r2, r3
 8001050:	4653      	mov	r3, sl
 8001052:	3908      	subs	r1, #8
 8001054:	408b      	lsls	r3, r1
 8001056:	408c      	lsls	r4, r1
 8001058:	0019      	movs	r1, r3
 800105a:	4314      	orrs	r4, r2
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <__aeabi_ddiv+0x388>)
 800105e:	4458      	add	r0, fp
 8001060:	469b      	mov	fp, r3
 8001062:	4483      	add	fp, r0
 8001064:	2000      	movs	r0, #0
 8001066:	e6d9      	b.n	8000e1c <__aeabi_ddiv+0x80>
 8001068:	0003      	movs	r3, r0
 800106a:	4323      	orrs	r3, r4
 800106c:	4698      	mov	r8, r3
 800106e:	d044      	beq.n	80010fa <__aeabi_ddiv+0x35e>
 8001070:	2c00      	cmp	r4, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_ddiv+0x2da>
 8001074:	e0cf      	b.n	8001216 <__aeabi_ddiv+0x47a>
 8001076:	0020      	movs	r0, r4
 8001078:	f001 f978 	bl	800236c <__clzsi2>
 800107c:	0001      	movs	r1, r0
 800107e:	0002      	movs	r2, r0
 8001080:	390b      	subs	r1, #11
 8001082:	231d      	movs	r3, #29
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	4649      	mov	r1, r9
 8001088:	0010      	movs	r0, r2
 800108a:	40d9      	lsrs	r1, r3
 800108c:	3808      	subs	r0, #8
 800108e:	4084      	lsls	r4, r0
 8001090:	000b      	movs	r3, r1
 8001092:	464d      	mov	r5, r9
 8001094:	4323      	orrs	r3, r4
 8001096:	4698      	mov	r8, r3
 8001098:	4085      	lsls	r5, r0
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <__aeabi_ddiv+0x38c>)
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	469b      	mov	fp, r3
 80010a0:	2300      	movs	r3, #0
 80010a2:	4699      	mov	r9, r3
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	e69e      	b.n	8000de6 <__aeabi_ddiv+0x4a>
 80010a8:	0002      	movs	r2, r0
 80010aa:	4322      	orrs	r2, r4
 80010ac:	4690      	mov	r8, r2
 80010ae:	d11d      	bne.n	80010ec <__aeabi_ddiv+0x350>
 80010b0:	2208      	movs	r2, #8
 80010b2:	469b      	mov	fp, r3
 80010b4:	2302      	movs	r3, #2
 80010b6:	2500      	movs	r5, #0
 80010b8:	4691      	mov	r9, r2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	e693      	b.n	8000de6 <__aeabi_ddiv+0x4a>
 80010be:	4651      	mov	r1, sl
 80010c0:	4321      	orrs	r1, r4
 80010c2:	d109      	bne.n	80010d8 <__aeabi_ddiv+0x33c>
 80010c4:	2302      	movs	r3, #2
 80010c6:	464a      	mov	r2, r9
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <__aeabi_ddiv+0x390>)
 80010cc:	4691      	mov	r9, r2
 80010ce:	469c      	mov	ip, r3
 80010d0:	2400      	movs	r4, #0
 80010d2:	2002      	movs	r0, #2
 80010d4:	44e3      	add	fp, ip
 80010d6:	e6a1      	b.n	8000e1c <__aeabi_ddiv+0x80>
 80010d8:	2303      	movs	r3, #3
 80010da:	464a      	mov	r2, r9
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <__aeabi_ddiv+0x390>)
 80010e0:	4691      	mov	r9, r2
 80010e2:	469c      	mov	ip, r3
 80010e4:	4651      	mov	r1, sl
 80010e6:	2003      	movs	r0, #3
 80010e8:	44e3      	add	fp, ip
 80010ea:	e697      	b.n	8000e1c <__aeabi_ddiv+0x80>
 80010ec:	220c      	movs	r2, #12
 80010ee:	469b      	mov	fp, r3
 80010f0:	2303      	movs	r3, #3
 80010f2:	46a0      	mov	r8, r4
 80010f4:	4691      	mov	r9, r2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	e675      	b.n	8000de6 <__aeabi_ddiv+0x4a>
 80010fa:	2304      	movs	r3, #4
 80010fc:	4699      	mov	r9, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	469b      	mov	fp, r3
 8001102:	3301      	adds	r3, #1
 8001104:	2500      	movs	r5, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	e66d      	b.n	8000de6 <__aeabi_ddiv+0x4a>
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	000007ff 	.word	0x000007ff
 8001110:	fffffc01 	.word	0xfffffc01
 8001114:	08008da0 	.word	0x08008da0
 8001118:	000003ff 	.word	0x000003ff
 800111c:	feffffff 	.word	0xfeffffff
 8001120:	000007fe 	.word	0x000007fe
 8001124:	000003f3 	.word	0x000003f3
 8001128:	fffffc0d 	.word	0xfffffc0d
 800112c:	fffff801 	.word	0xfffff801
 8001130:	464a      	mov	r2, r9
 8001132:	2301      	movs	r3, #1
 8001134:	431a      	orrs	r2, r3
 8001136:	4691      	mov	r9, r2
 8001138:	2400      	movs	r4, #0
 800113a:	2001      	movs	r0, #1
 800113c:	e66e      	b.n	8000e1c <__aeabi_ddiv+0x80>
 800113e:	2300      	movs	r3, #0
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	469a      	mov	sl, r3
 8001144:	2500      	movs	r5, #0
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <__aeabi_ddiv+0x5cc>)
 8001148:	0312      	lsls	r2, r2, #12
 800114a:	e67e      	b.n	8000e4a <__aeabi_ddiv+0xae>
 800114c:	2501      	movs	r5, #1
 800114e:	426d      	negs	r5, r5
 8001150:	2201      	movs	r2, #1
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	2a38      	cmp	r2, #56	; 0x38
 8001156:	dd00      	ble.n	800115a <__aeabi_ddiv+0x3be>
 8001158:	e674      	b.n	8000e44 <__aeabi_ddiv+0xa8>
 800115a:	2a1f      	cmp	r2, #31
 800115c:	dc00      	bgt.n	8001160 <__aeabi_ddiv+0x3c4>
 800115e:	e0bd      	b.n	80012dc <__aeabi_ddiv+0x540>
 8001160:	211f      	movs	r1, #31
 8001162:	4249      	negs	r1, r1
 8001164:	1acb      	subs	r3, r1, r3
 8001166:	4641      	mov	r1, r8
 8001168:	40d9      	lsrs	r1, r3
 800116a:	000b      	movs	r3, r1
 800116c:	2a20      	cmp	r2, #32
 800116e:	d004      	beq.n	800117a <__aeabi_ddiv+0x3de>
 8001170:	4641      	mov	r1, r8
 8001172:	4a7e      	ldr	r2, [pc, #504]	; (800136c <__aeabi_ddiv+0x5d0>)
 8001174:	445a      	add	r2, fp
 8001176:	4091      	lsls	r1, r2
 8001178:	430d      	orrs	r5, r1
 800117a:	0029      	movs	r1, r5
 800117c:	1e4a      	subs	r2, r1, #1
 800117e:	4191      	sbcs	r1, r2
 8001180:	4319      	orrs	r1, r3
 8001182:	2307      	movs	r3, #7
 8001184:	001d      	movs	r5, r3
 8001186:	2200      	movs	r2, #0
 8001188:	400d      	ands	r5, r1
 800118a:	420b      	tst	r3, r1
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x3f4>
 800118e:	e0d0      	b.n	8001332 <__aeabi_ddiv+0x596>
 8001190:	220f      	movs	r2, #15
 8001192:	2300      	movs	r3, #0
 8001194:	400a      	ands	r2, r1
 8001196:	2a04      	cmp	r2, #4
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x400>
 800119a:	e0c7      	b.n	800132c <__aeabi_ddiv+0x590>
 800119c:	1d0a      	adds	r2, r1, #4
 800119e:	428a      	cmp	r2, r1
 80011a0:	4189      	sbcs	r1, r1
 80011a2:	4249      	negs	r1, r1
 80011a4:	185b      	adds	r3, r3, r1
 80011a6:	0011      	movs	r1, r2
 80011a8:	021a      	lsls	r2, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_ddiv+0x412>
 80011ac:	e0be      	b.n	800132c <__aeabi_ddiv+0x590>
 80011ae:	2301      	movs	r3, #1
 80011b0:	2200      	movs	r2, #0
 80011b2:	2500      	movs	r5, #0
 80011b4:	e649      	b.n	8000e4a <__aeabi_ddiv+0xae>
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	4643      	mov	r3, r8
 80011ba:	0312      	lsls	r2, r2, #12
 80011bc:	4213      	tst	r3, r2
 80011be:	d008      	beq.n	80011d2 <__aeabi_ddiv+0x436>
 80011c0:	4214      	tst	r4, r2
 80011c2:	d106      	bne.n	80011d2 <__aeabi_ddiv+0x436>
 80011c4:	4322      	orrs	r2, r4
 80011c6:	0312      	lsls	r2, r2, #12
 80011c8:	46ba      	mov	sl, r7
 80011ca:	000d      	movs	r5, r1
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <__aeabi_ddiv+0x5cc>)
 80011ce:	0b12      	lsrs	r2, r2, #12
 80011d0:	e63b      	b.n	8000e4a <__aeabi_ddiv+0xae>
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	4643      	mov	r3, r8
 80011d6:	0312      	lsls	r2, r2, #12
 80011d8:	431a      	orrs	r2, r3
 80011da:	0312      	lsls	r2, r2, #12
 80011dc:	46b2      	mov	sl, r6
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <__aeabi_ddiv+0x5cc>)
 80011e0:	0b12      	lsrs	r2, r2, #12
 80011e2:	e632      	b.n	8000e4a <__aeabi_ddiv+0xae>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x44e>
 80011e8:	e702      	b.n	8000ff0 <__aeabi_ddiv+0x254>
 80011ea:	19a6      	adds	r6, r4, r6
 80011ec:	1e6a      	subs	r2, r5, #1
 80011ee:	42a6      	cmp	r6, r4
 80011f0:	d200      	bcs.n	80011f4 <__aeabi_ddiv+0x458>
 80011f2:	e089      	b.n	8001308 <__aeabi_ddiv+0x56c>
 80011f4:	4286      	cmp	r6, r0
 80011f6:	d200      	bcs.n	80011fa <__aeabi_ddiv+0x45e>
 80011f8:	e09f      	b.n	800133a <__aeabi_ddiv+0x59e>
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x462>
 80011fc:	e0af      	b.n	800135e <__aeabi_ddiv+0x5c2>
 80011fe:	0015      	movs	r5, r2
 8001200:	e6f4      	b.n	8000fec <__aeabi_ddiv+0x250>
 8001202:	42a9      	cmp	r1, r5
 8001204:	d900      	bls.n	8001208 <__aeabi_ddiv+0x46c>
 8001206:	e63c      	b.n	8000e82 <__aeabi_ddiv+0xe6>
 8001208:	4643      	mov	r3, r8
 800120a:	07de      	lsls	r6, r3, #31
 800120c:	0858      	lsrs	r0, r3, #1
 800120e:	086b      	lsrs	r3, r5, #1
 8001210:	431e      	orrs	r6, r3
 8001212:	07ed      	lsls	r5, r5, #31
 8001214:	e63c      	b.n	8000e90 <__aeabi_ddiv+0xf4>
 8001216:	f001 f8a9 	bl	800236c <__clzsi2>
 800121a:	0001      	movs	r1, r0
 800121c:	0002      	movs	r2, r0
 800121e:	3115      	adds	r1, #21
 8001220:	3220      	adds	r2, #32
 8001222:	291c      	cmp	r1, #28
 8001224:	dc00      	bgt.n	8001228 <__aeabi_ddiv+0x48c>
 8001226:	e72c      	b.n	8001082 <__aeabi_ddiv+0x2e6>
 8001228:	464b      	mov	r3, r9
 800122a:	3808      	subs	r0, #8
 800122c:	4083      	lsls	r3, r0
 800122e:	2500      	movs	r5, #0
 8001230:	4698      	mov	r8, r3
 8001232:	e732      	b.n	800109a <__aeabi_ddiv+0x2fe>
 8001234:	f001 f89a 	bl	800236c <__clzsi2>
 8001238:	0003      	movs	r3, r0
 800123a:	001a      	movs	r2, r3
 800123c:	3215      	adds	r2, #21
 800123e:	3020      	adds	r0, #32
 8001240:	2a1c      	cmp	r2, #28
 8001242:	dc00      	bgt.n	8001246 <__aeabi_ddiv+0x4aa>
 8001244:	e6ff      	b.n	8001046 <__aeabi_ddiv+0x2aa>
 8001246:	4654      	mov	r4, sl
 8001248:	3b08      	subs	r3, #8
 800124a:	2100      	movs	r1, #0
 800124c:	409c      	lsls	r4, r3
 800124e:	e705      	b.n	800105c <__aeabi_ddiv+0x2c0>
 8001250:	1936      	adds	r6, r6, r4
 8001252:	3b01      	subs	r3, #1
 8001254:	42b4      	cmp	r4, r6
 8001256:	d900      	bls.n	800125a <__aeabi_ddiv+0x4be>
 8001258:	e6a6      	b.n	8000fa8 <__aeabi_ddiv+0x20c>
 800125a:	42b2      	cmp	r2, r6
 800125c:	d800      	bhi.n	8001260 <__aeabi_ddiv+0x4c4>
 800125e:	e6a3      	b.n	8000fa8 <__aeabi_ddiv+0x20c>
 8001260:	1e83      	subs	r3, r0, #2
 8001262:	1936      	adds	r6, r6, r4
 8001264:	e6a0      	b.n	8000fa8 <__aeabi_ddiv+0x20c>
 8001266:	1909      	adds	r1, r1, r4
 8001268:	3d01      	subs	r5, #1
 800126a:	428c      	cmp	r4, r1
 800126c:	d900      	bls.n	8001270 <__aeabi_ddiv+0x4d4>
 800126e:	e68d      	b.n	8000f8c <__aeabi_ddiv+0x1f0>
 8001270:	428a      	cmp	r2, r1
 8001272:	d800      	bhi.n	8001276 <__aeabi_ddiv+0x4da>
 8001274:	e68a      	b.n	8000f8c <__aeabi_ddiv+0x1f0>
 8001276:	1e85      	subs	r5, r0, #2
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e687      	b.n	8000f8c <__aeabi_ddiv+0x1f0>
 800127c:	220f      	movs	r2, #15
 800127e:	402a      	ands	r2, r5
 8001280:	2a04      	cmp	r2, #4
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x4ea>
 8001284:	e6bc      	b.n	8001000 <__aeabi_ddiv+0x264>
 8001286:	1d29      	adds	r1, r5, #4
 8001288:	42a9      	cmp	r1, r5
 800128a:	41ad      	sbcs	r5, r5
 800128c:	426d      	negs	r5, r5
 800128e:	08c9      	lsrs	r1, r1, #3
 8001290:	44a8      	add	r8, r5
 8001292:	e6b6      	b.n	8001002 <__aeabi_ddiv+0x266>
 8001294:	42af      	cmp	r7, r5
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x4fe>
 8001298:	e662      	b.n	8000f60 <__aeabi_ddiv+0x1c4>
 800129a:	4281      	cmp	r1, r0
 800129c:	d804      	bhi.n	80012a8 <__aeabi_ddiv+0x50c>
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x506>
 80012a0:	e65e      	b.n	8000f60 <__aeabi_ddiv+0x1c4>
 80012a2:	42ae      	cmp	r6, r5
 80012a4:	d800      	bhi.n	80012a8 <__aeabi_ddiv+0x50c>
 80012a6:	e65b      	b.n	8000f60 <__aeabi_ddiv+0x1c4>
 80012a8:	2302      	movs	r3, #2
 80012aa:	425b      	negs	r3, r3
 80012ac:	469c      	mov	ip, r3
 80012ae:	9b00      	ldr	r3, [sp, #0]
 80012b0:	44e0      	add	r8, ip
 80012b2:	469c      	mov	ip, r3
 80012b4:	4465      	add	r5, ip
 80012b6:	429d      	cmp	r5, r3
 80012b8:	419b      	sbcs	r3, r3
 80012ba:	425b      	negs	r3, r3
 80012bc:	191b      	adds	r3, r3, r4
 80012be:	18c0      	adds	r0, r0, r3
 80012c0:	e64f      	b.n	8000f62 <__aeabi_ddiv+0x1c6>
 80012c2:	42b2      	cmp	r2, r6
 80012c4:	d800      	bhi.n	80012c8 <__aeabi_ddiv+0x52c>
 80012c6:	e612      	b.n	8000eee <__aeabi_ddiv+0x152>
 80012c8:	1e83      	subs	r3, r0, #2
 80012ca:	1936      	adds	r6, r6, r4
 80012cc:	e60f      	b.n	8000eee <__aeabi_ddiv+0x152>
 80012ce:	428a      	cmp	r2, r1
 80012d0:	d800      	bhi.n	80012d4 <__aeabi_ddiv+0x538>
 80012d2:	e5fa      	b.n	8000eca <__aeabi_ddiv+0x12e>
 80012d4:	1e83      	subs	r3, r0, #2
 80012d6:	4698      	mov	r8, r3
 80012d8:	1909      	adds	r1, r1, r4
 80012da:	e5f6      	b.n	8000eca <__aeabi_ddiv+0x12e>
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <__aeabi_ddiv+0x5d4>)
 80012de:	0028      	movs	r0, r5
 80012e0:	445b      	add	r3, fp
 80012e2:	4641      	mov	r1, r8
 80012e4:	409d      	lsls	r5, r3
 80012e6:	4099      	lsls	r1, r3
 80012e8:	40d0      	lsrs	r0, r2
 80012ea:	1e6b      	subs	r3, r5, #1
 80012ec:	419d      	sbcs	r5, r3
 80012ee:	4643      	mov	r3, r8
 80012f0:	4301      	orrs	r1, r0
 80012f2:	4329      	orrs	r1, r5
 80012f4:	40d3      	lsrs	r3, r2
 80012f6:	074a      	lsls	r2, r1, #29
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x560>
 80012fa:	e755      	b.n	80011a8 <__aeabi_ddiv+0x40c>
 80012fc:	220f      	movs	r2, #15
 80012fe:	400a      	ands	r2, r1
 8001300:	2a04      	cmp	r2, #4
 8001302:	d000      	beq.n	8001306 <__aeabi_ddiv+0x56a>
 8001304:	e74a      	b.n	800119c <__aeabi_ddiv+0x400>
 8001306:	e74f      	b.n	80011a8 <__aeabi_ddiv+0x40c>
 8001308:	0015      	movs	r5, r2
 800130a:	4286      	cmp	r6, r0
 800130c:	d000      	beq.n	8001310 <__aeabi_ddiv+0x574>
 800130e:	e66d      	b.n	8000fec <__aeabi_ddiv+0x250>
 8001310:	9a00      	ldr	r2, [sp, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d000      	beq.n	8001318 <__aeabi_ddiv+0x57c>
 8001316:	e669      	b.n	8000fec <__aeabi_ddiv+0x250>
 8001318:	e66a      	b.n	8000ff0 <__aeabi_ddiv+0x254>
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <__aeabi_ddiv+0x5d8>)
 800131c:	445b      	add	r3, fp
 800131e:	2b00      	cmp	r3, #0
 8001320:	dc00      	bgt.n	8001324 <__aeabi_ddiv+0x588>
 8001322:	e713      	b.n	800114c <__aeabi_ddiv+0x3b0>
 8001324:	2501      	movs	r5, #1
 8001326:	2100      	movs	r1, #0
 8001328:	44a8      	add	r8, r5
 800132a:	e66a      	b.n	8001002 <__aeabi_ddiv+0x266>
 800132c:	075d      	lsls	r5, r3, #29
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	0b1a      	lsrs	r2, r3, #12
 8001332:	08c9      	lsrs	r1, r1, #3
 8001334:	2300      	movs	r3, #0
 8001336:	430d      	orrs	r5, r1
 8001338:	e587      	b.n	8000e4a <__aeabi_ddiv+0xae>
 800133a:	9900      	ldr	r1, [sp, #0]
 800133c:	3d02      	subs	r5, #2
 800133e:	004a      	lsls	r2, r1, #1
 8001340:	428a      	cmp	r2, r1
 8001342:	41bf      	sbcs	r7, r7
 8001344:	427f      	negs	r7, r7
 8001346:	193f      	adds	r7, r7, r4
 8001348:	19f6      	adds	r6, r6, r7
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	e7dd      	b.n	800130a <__aeabi_ddiv+0x56e>
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	4643      	mov	r3, r8
 8001352:	0312      	lsls	r2, r2, #12
 8001354:	431a      	orrs	r2, r3
 8001356:	0312      	lsls	r2, r2, #12
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <__aeabi_ddiv+0x5cc>)
 800135a:	0b12      	lsrs	r2, r2, #12
 800135c:	e575      	b.n	8000e4a <__aeabi_ddiv+0xae>
 800135e:	9900      	ldr	r1, [sp, #0]
 8001360:	4299      	cmp	r1, r3
 8001362:	d3ea      	bcc.n	800133a <__aeabi_ddiv+0x59e>
 8001364:	0015      	movs	r5, r2
 8001366:	e7d3      	b.n	8001310 <__aeabi_ddiv+0x574>
 8001368:	000007ff 	.word	0x000007ff
 800136c:	0000043e 	.word	0x0000043e
 8001370:	0000041e 	.word	0x0000041e
 8001374:	000003ff 	.word	0x000003ff

08001378 <__eqdf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464e      	mov	r6, r9
 800137c:	4645      	mov	r5, r8
 800137e:	46de      	mov	lr, fp
 8001380:	4657      	mov	r7, sl
 8001382:	4690      	mov	r8, r2
 8001384:	b5e0      	push	{r5, r6, r7, lr}
 8001386:	0017      	movs	r7, r2
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	0b12      	lsrs	r2, r2, #12
 800138c:	0005      	movs	r5, r0
 800138e:	4684      	mov	ip, r0
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <__eqdf2+0x80>)
 8001392:	030e      	lsls	r6, r1, #12
 8001394:	004c      	lsls	r4, r1, #1
 8001396:	4691      	mov	r9, r2
 8001398:	005a      	lsls	r2, r3, #1
 800139a:	0fdb      	lsrs	r3, r3, #31
 800139c:	469b      	mov	fp, r3
 800139e:	0b36      	lsrs	r6, r6, #12
 80013a0:	0d64      	lsrs	r4, r4, #21
 80013a2:	0fc9      	lsrs	r1, r1, #31
 80013a4:	0d52      	lsrs	r2, r2, #21
 80013a6:	4284      	cmp	r4, r0
 80013a8:	d019      	beq.n	80013de <__eqdf2+0x66>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	d010      	beq.n	80013d0 <__eqdf2+0x58>
 80013ae:	2001      	movs	r0, #1
 80013b0:	4294      	cmp	r4, r2
 80013b2:	d10e      	bne.n	80013d2 <__eqdf2+0x5a>
 80013b4:	454e      	cmp	r6, r9
 80013b6:	d10c      	bne.n	80013d2 <__eqdf2+0x5a>
 80013b8:	2001      	movs	r0, #1
 80013ba:	45c4      	cmp	ip, r8
 80013bc:	d109      	bne.n	80013d2 <__eqdf2+0x5a>
 80013be:	4559      	cmp	r1, fp
 80013c0:	d017      	beq.n	80013f2 <__eqdf2+0x7a>
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d105      	bne.n	80013d2 <__eqdf2+0x5a>
 80013c6:	0030      	movs	r0, r6
 80013c8:	4328      	orrs	r0, r5
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
 80013ce:	e000      	b.n	80013d2 <__eqdf2+0x5a>
 80013d0:	2001      	movs	r0, #1
 80013d2:	bcf0      	pop	{r4, r5, r6, r7}
 80013d4:	46bb      	mov	fp, r7
 80013d6:	46b2      	mov	sl, r6
 80013d8:	46a9      	mov	r9, r5
 80013da:	46a0      	mov	r8, r4
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	0033      	movs	r3, r6
 80013e0:	2001      	movs	r0, #1
 80013e2:	432b      	orrs	r3, r5
 80013e4:	d1f5      	bne.n	80013d2 <__eqdf2+0x5a>
 80013e6:	42a2      	cmp	r2, r4
 80013e8:	d1f3      	bne.n	80013d2 <__eqdf2+0x5a>
 80013ea:	464b      	mov	r3, r9
 80013ec:	433b      	orrs	r3, r7
 80013ee:	d1f0      	bne.n	80013d2 <__eqdf2+0x5a>
 80013f0:	e7e2      	b.n	80013b8 <__eqdf2+0x40>
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7ed      	b.n	80013d2 <__eqdf2+0x5a>
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	000007ff 	.word	0x000007ff

080013fc <__gedf2>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	4647      	mov	r7, r8
 8001400:	46ce      	mov	lr, r9
 8001402:	0004      	movs	r4, r0
 8001404:	0018      	movs	r0, r3
 8001406:	0016      	movs	r6, r2
 8001408:	031b      	lsls	r3, r3, #12
 800140a:	0b1b      	lsrs	r3, r3, #12
 800140c:	4d2d      	ldr	r5, [pc, #180]	; (80014c4 <__gedf2+0xc8>)
 800140e:	004a      	lsls	r2, r1, #1
 8001410:	4699      	mov	r9, r3
 8001412:	b580      	push	{r7, lr}
 8001414:	0043      	lsls	r3, r0, #1
 8001416:	030f      	lsls	r7, r1, #12
 8001418:	46a4      	mov	ip, r4
 800141a:	46b0      	mov	r8, r6
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d52      	lsrs	r2, r2, #21
 8001420:	0fc9      	lsrs	r1, r1, #31
 8001422:	0d5b      	lsrs	r3, r3, #21
 8001424:	0fc0      	lsrs	r0, r0, #31
 8001426:	42aa      	cmp	r2, r5
 8001428:	d021      	beq.n	800146e <__gedf2+0x72>
 800142a:	42ab      	cmp	r3, r5
 800142c:	d013      	beq.n	8001456 <__gedf2+0x5a>
 800142e:	2a00      	cmp	r2, #0
 8001430:	d122      	bne.n	8001478 <__gedf2+0x7c>
 8001432:	433c      	orrs	r4, r7
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <__gedf2+0x42>
 8001438:	464d      	mov	r5, r9
 800143a:	432e      	orrs	r6, r5
 800143c:	d022      	beq.n	8001484 <__gedf2+0x88>
 800143e:	2c00      	cmp	r4, #0
 8001440:	d010      	beq.n	8001464 <__gedf2+0x68>
 8001442:	4281      	cmp	r1, r0
 8001444:	d022      	beq.n	800148c <__gedf2+0x90>
 8001446:	2002      	movs	r0, #2
 8001448:	3901      	subs	r1, #1
 800144a:	4008      	ands	r0, r1
 800144c:	3801      	subs	r0, #1
 800144e:	bcc0      	pop	{r6, r7}
 8001450:	46b9      	mov	r9, r7
 8001452:	46b0      	mov	r8, r6
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	464d      	mov	r5, r9
 8001458:	432e      	orrs	r6, r5
 800145a:	d129      	bne.n	80014b0 <__gedf2+0xb4>
 800145c:	2a00      	cmp	r2, #0
 800145e:	d1f0      	bne.n	8001442 <__gedf2+0x46>
 8001460:	433c      	orrs	r4, r7
 8001462:	d1ee      	bne.n	8001442 <__gedf2+0x46>
 8001464:	2800      	cmp	r0, #0
 8001466:	d1f2      	bne.n	800144e <__gedf2+0x52>
 8001468:	2001      	movs	r0, #1
 800146a:	4240      	negs	r0, r0
 800146c:	e7ef      	b.n	800144e <__gedf2+0x52>
 800146e:	003d      	movs	r5, r7
 8001470:	4325      	orrs	r5, r4
 8001472:	d11d      	bne.n	80014b0 <__gedf2+0xb4>
 8001474:	4293      	cmp	r3, r2
 8001476:	d0ee      	beq.n	8001456 <__gedf2+0x5a>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e2      	bne.n	8001442 <__gedf2+0x46>
 800147c:	464c      	mov	r4, r9
 800147e:	4326      	orrs	r6, r4
 8001480:	d1df      	bne.n	8001442 <__gedf2+0x46>
 8001482:	e7e0      	b.n	8001446 <__gedf2+0x4a>
 8001484:	2000      	movs	r0, #0
 8001486:	2c00      	cmp	r4, #0
 8001488:	d0e1      	beq.n	800144e <__gedf2+0x52>
 800148a:	e7dc      	b.n	8001446 <__gedf2+0x4a>
 800148c:	429a      	cmp	r2, r3
 800148e:	dc0a      	bgt.n	80014a6 <__gedf2+0xaa>
 8001490:	dbe8      	blt.n	8001464 <__gedf2+0x68>
 8001492:	454f      	cmp	r7, r9
 8001494:	d8d7      	bhi.n	8001446 <__gedf2+0x4a>
 8001496:	d00e      	beq.n	80014b6 <__gedf2+0xba>
 8001498:	2000      	movs	r0, #0
 800149a:	454f      	cmp	r7, r9
 800149c:	d2d7      	bcs.n	800144e <__gedf2+0x52>
 800149e:	2900      	cmp	r1, #0
 80014a0:	d0e2      	beq.n	8001468 <__gedf2+0x6c>
 80014a2:	0008      	movs	r0, r1
 80014a4:	e7d3      	b.n	800144e <__gedf2+0x52>
 80014a6:	4243      	negs	r3, r0
 80014a8:	4158      	adcs	r0, r3
 80014aa:	0040      	lsls	r0, r0, #1
 80014ac:	3801      	subs	r0, #1
 80014ae:	e7ce      	b.n	800144e <__gedf2+0x52>
 80014b0:	2002      	movs	r0, #2
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7cb      	b.n	800144e <__gedf2+0x52>
 80014b6:	45c4      	cmp	ip, r8
 80014b8:	d8c5      	bhi.n	8001446 <__gedf2+0x4a>
 80014ba:	2000      	movs	r0, #0
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d2c6      	bcs.n	800144e <__gedf2+0x52>
 80014c0:	e7ed      	b.n	800149e <__gedf2+0xa2>
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	000007ff 	.word	0x000007ff

080014c8 <__ledf2>:
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	4647      	mov	r7, r8
 80014cc:	46ce      	mov	lr, r9
 80014ce:	0004      	movs	r4, r0
 80014d0:	0018      	movs	r0, r3
 80014d2:	0016      	movs	r6, r2
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	0b1b      	lsrs	r3, r3, #12
 80014d8:	4d2c      	ldr	r5, [pc, #176]	; (800158c <__ledf2+0xc4>)
 80014da:	004a      	lsls	r2, r1, #1
 80014dc:	4699      	mov	r9, r3
 80014de:	b580      	push	{r7, lr}
 80014e0:	0043      	lsls	r3, r0, #1
 80014e2:	030f      	lsls	r7, r1, #12
 80014e4:	46a4      	mov	ip, r4
 80014e6:	46b0      	mov	r8, r6
 80014e8:	0b3f      	lsrs	r7, r7, #12
 80014ea:	0d52      	lsrs	r2, r2, #21
 80014ec:	0fc9      	lsrs	r1, r1, #31
 80014ee:	0d5b      	lsrs	r3, r3, #21
 80014f0:	0fc0      	lsrs	r0, r0, #31
 80014f2:	42aa      	cmp	r2, r5
 80014f4:	d00d      	beq.n	8001512 <__ledf2+0x4a>
 80014f6:	42ab      	cmp	r3, r5
 80014f8:	d010      	beq.n	800151c <__ledf2+0x54>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d127      	bne.n	800154e <__ledf2+0x86>
 80014fe:	433c      	orrs	r4, r7
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <__ledf2+0x60>
 8001504:	464d      	mov	r5, r9
 8001506:	432e      	orrs	r6, r5
 8001508:	d10e      	bne.n	8001528 <__ledf2+0x60>
 800150a:	2000      	movs	r0, #0
 800150c:	2c00      	cmp	r4, #0
 800150e:	d015      	beq.n	800153c <__ledf2+0x74>
 8001510:	e00e      	b.n	8001530 <__ledf2+0x68>
 8001512:	003d      	movs	r5, r7
 8001514:	4325      	orrs	r5, r4
 8001516:	d110      	bne.n	800153a <__ledf2+0x72>
 8001518:	4293      	cmp	r3, r2
 800151a:	d118      	bne.n	800154e <__ledf2+0x86>
 800151c:	464d      	mov	r5, r9
 800151e:	432e      	orrs	r6, r5
 8001520:	d10b      	bne.n	800153a <__ledf2+0x72>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <__ledf2+0x64>
 8001526:	433c      	orrs	r4, r7
 8001528:	2c00      	cmp	r4, #0
 800152a:	d00b      	beq.n	8001544 <__ledf2+0x7c>
 800152c:	4281      	cmp	r1, r0
 800152e:	d014      	beq.n	800155a <__ledf2+0x92>
 8001530:	2002      	movs	r0, #2
 8001532:	3901      	subs	r1, #1
 8001534:	4008      	ands	r0, r1
 8001536:	3801      	subs	r0, #1
 8001538:	e000      	b.n	800153c <__ledf2+0x74>
 800153a:	2002      	movs	r0, #2
 800153c:	bcc0      	pop	{r6, r7}
 800153e:	46b9      	mov	r9, r7
 8001540:	46b0      	mov	r8, r6
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f9      	bne.n	800153c <__ledf2+0x74>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7f6      	b.n	800153c <__ledf2+0x74>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ec      	bne.n	800152c <__ledf2+0x64>
 8001552:	464c      	mov	r4, r9
 8001554:	4326      	orrs	r6, r4
 8001556:	d1e9      	bne.n	800152c <__ledf2+0x64>
 8001558:	e7ea      	b.n	8001530 <__ledf2+0x68>
 800155a:	429a      	cmp	r2, r3
 800155c:	dd04      	ble.n	8001568 <__ledf2+0xa0>
 800155e:	4243      	negs	r3, r0
 8001560:	4158      	adcs	r0, r3
 8001562:	0040      	lsls	r0, r0, #1
 8001564:	3801      	subs	r0, #1
 8001566:	e7e9      	b.n	800153c <__ledf2+0x74>
 8001568:	429a      	cmp	r2, r3
 800156a:	dbeb      	blt.n	8001544 <__ledf2+0x7c>
 800156c:	454f      	cmp	r7, r9
 800156e:	d8df      	bhi.n	8001530 <__ledf2+0x68>
 8001570:	d006      	beq.n	8001580 <__ledf2+0xb8>
 8001572:	2000      	movs	r0, #0
 8001574:	454f      	cmp	r7, r9
 8001576:	d2e1      	bcs.n	800153c <__ledf2+0x74>
 8001578:	2900      	cmp	r1, #0
 800157a:	d0e5      	beq.n	8001548 <__ledf2+0x80>
 800157c:	0008      	movs	r0, r1
 800157e:	e7dd      	b.n	800153c <__ledf2+0x74>
 8001580:	45c4      	cmp	ip, r8
 8001582:	d8d5      	bhi.n	8001530 <__ledf2+0x68>
 8001584:	2000      	movs	r0, #0
 8001586:	45c4      	cmp	ip, r8
 8001588:	d2d8      	bcs.n	800153c <__ledf2+0x74>
 800158a:	e7f5      	b.n	8001578 <__ledf2+0xb0>
 800158c:	000007ff 	.word	0x000007ff

08001590 <__aeabi_dmul>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	4645      	mov	r5, r8
 8001594:	46de      	mov	lr, fp
 8001596:	4657      	mov	r7, sl
 8001598:	464e      	mov	r6, r9
 800159a:	b5e0      	push	{r5, r6, r7, lr}
 800159c:	001f      	movs	r7, r3
 800159e:	030b      	lsls	r3, r1, #12
 80015a0:	0b1b      	lsrs	r3, r3, #12
 80015a2:	469b      	mov	fp, r3
 80015a4:	004d      	lsls	r5, r1, #1
 80015a6:	0fcb      	lsrs	r3, r1, #31
 80015a8:	0004      	movs	r4, r0
 80015aa:	4691      	mov	r9, r2
 80015ac:	4698      	mov	r8, r3
 80015ae:	b087      	sub	sp, #28
 80015b0:	0d6d      	lsrs	r5, r5, #21
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0x26>
 80015b4:	e1cd      	b.n	8001952 <__aeabi_dmul+0x3c2>
 80015b6:	4bce      	ldr	r3, [pc, #824]	; (80018f0 <__aeabi_dmul+0x360>)
 80015b8:	429d      	cmp	r5, r3
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x2e>
 80015bc:	e1e9      	b.n	8001992 <__aeabi_dmul+0x402>
 80015be:	465a      	mov	r2, fp
 80015c0:	0f43      	lsrs	r3, r0, #29
 80015c2:	00d2      	lsls	r2, r2, #3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	0412      	lsls	r2, r2, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	00c3      	lsls	r3, r0, #3
 80015ce:	469a      	mov	sl, r3
 80015d0:	4bc8      	ldr	r3, [pc, #800]	; (80018f4 <__aeabi_dmul+0x364>)
 80015d2:	4693      	mov	fp, r2
 80015d4:	469c      	mov	ip, r3
 80015d6:	2300      	movs	r3, #0
 80015d8:	2600      	movs	r6, #0
 80015da:	4465      	add	r5, ip
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	033c      	lsls	r4, r7, #12
 80015e0:	007b      	lsls	r3, r7, #1
 80015e2:	4648      	mov	r0, r9
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	0d5b      	lsrs	r3, r3, #21
 80015e8:	0fff      	lsrs	r7, r7, #31
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dmul+0x60>
 80015ee:	e189      	b.n	8001904 <__aeabi_dmul+0x374>
 80015f0:	4abf      	ldr	r2, [pc, #764]	; (80018f0 <__aeabi_dmul+0x360>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <__aeabi_dmul+0x9a>
 80015f6:	0f42      	lsrs	r2, r0, #29
 80015f8:	00e4      	lsls	r4, r4, #3
 80015fa:	4322      	orrs	r2, r4
 80015fc:	2480      	movs	r4, #128	; 0x80
 80015fe:	0424      	lsls	r4, r4, #16
 8001600:	4314      	orrs	r4, r2
 8001602:	4abc      	ldr	r2, [pc, #752]	; (80018f4 <__aeabi_dmul+0x364>)
 8001604:	2100      	movs	r1, #0
 8001606:	4694      	mov	ip, r2
 8001608:	4642      	mov	r2, r8
 800160a:	4463      	add	r3, ip
 800160c:	195b      	adds	r3, r3, r5
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	407a      	eors	r2, r7
 8001614:	3301      	adds	r3, #1
 8001616:	00c0      	lsls	r0, r0, #3
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	9302      	str	r3, [sp, #8]
 800161c:	2e0a      	cmp	r6, #10
 800161e:	dd1c      	ble.n	800165a <__aeabi_dmul+0xca>
 8001620:	003a      	movs	r2, r7
 8001622:	2e0b      	cmp	r6, #11
 8001624:	d05e      	beq.n	80016e4 <__aeabi_dmul+0x154>
 8001626:	4647      	mov	r7, r8
 8001628:	e056      	b.n	80016d8 <__aeabi_dmul+0x148>
 800162a:	4649      	mov	r1, r9
 800162c:	4bb0      	ldr	r3, [pc, #704]	; (80018f0 <__aeabi_dmul+0x360>)
 800162e:	4321      	orrs	r1, r4
 8001630:	18eb      	adds	r3, r5, r3
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2900      	cmp	r1, #0
 8001636:	d12a      	bne.n	800168e <__aeabi_dmul+0xfe>
 8001638:	2080      	movs	r0, #128	; 0x80
 800163a:	2202      	movs	r2, #2
 800163c:	0100      	lsls	r0, r0, #4
 800163e:	002b      	movs	r3, r5
 8001640:	4684      	mov	ip, r0
 8001642:	4316      	orrs	r6, r2
 8001644:	4642      	mov	r2, r8
 8001646:	4463      	add	r3, ip
 8001648:	407a      	eors	r2, r7
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2e0a      	cmp	r6, #10
 8001650:	dd00      	ble.n	8001654 <__aeabi_dmul+0xc4>
 8001652:	e231      	b.n	8001ab8 <__aeabi_dmul+0x528>
 8001654:	2000      	movs	r0, #0
 8001656:	2400      	movs	r4, #0
 8001658:	2102      	movs	r1, #2
 800165a:	2e02      	cmp	r6, #2
 800165c:	dc26      	bgt.n	80016ac <__aeabi_dmul+0x11c>
 800165e:	3e01      	subs	r6, #1
 8001660:	2e01      	cmp	r6, #1
 8001662:	d852      	bhi.n	800170a <__aeabi_dmul+0x17a>
 8001664:	2902      	cmp	r1, #2
 8001666:	d04c      	beq.n	8001702 <__aeabi_dmul+0x172>
 8001668:	2901      	cmp	r1, #1
 800166a:	d000      	beq.n	800166e <__aeabi_dmul+0xde>
 800166c:	e118      	b.n	80018a0 <__aeabi_dmul+0x310>
 800166e:	2300      	movs	r3, #0
 8001670:	2400      	movs	r4, #0
 8001672:	2500      	movs	r5, #0
 8001674:	051b      	lsls	r3, r3, #20
 8001676:	4323      	orrs	r3, r4
 8001678:	07d2      	lsls	r2, r2, #31
 800167a:	4313      	orrs	r3, r2
 800167c:	0028      	movs	r0, r5
 800167e:	0019      	movs	r1, r3
 8001680:	b007      	add	sp, #28
 8001682:	bcf0      	pop	{r4, r5, r6, r7}
 8001684:	46bb      	mov	fp, r7
 8001686:	46b2      	mov	sl, r6
 8001688:	46a9      	mov	r9, r5
 800168a:	46a0      	mov	r8, r4
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	2203      	movs	r2, #3
 8001692:	0109      	lsls	r1, r1, #4
 8001694:	002b      	movs	r3, r5
 8001696:	468c      	mov	ip, r1
 8001698:	4316      	orrs	r6, r2
 800169a:	4642      	mov	r2, r8
 800169c:	4463      	add	r3, ip
 800169e:	407a      	eors	r2, r7
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2e0a      	cmp	r6, #10
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dmul+0x11a>
 80016a8:	e228      	b.n	8001afc <__aeabi_dmul+0x56c>
 80016aa:	2103      	movs	r1, #3
 80016ac:	2501      	movs	r5, #1
 80016ae:	40b5      	lsls	r5, r6
 80016b0:	46ac      	mov	ip, r5
 80016b2:	26a6      	movs	r6, #166	; 0xa6
 80016b4:	4663      	mov	r3, ip
 80016b6:	00f6      	lsls	r6, r6, #3
 80016b8:	4035      	ands	r5, r6
 80016ba:	4233      	tst	r3, r6
 80016bc:	d10b      	bne.n	80016d6 <__aeabi_dmul+0x146>
 80016be:	2690      	movs	r6, #144	; 0x90
 80016c0:	00b6      	lsls	r6, r6, #2
 80016c2:	4233      	tst	r3, r6
 80016c4:	d118      	bne.n	80016f8 <__aeabi_dmul+0x168>
 80016c6:	3eb9      	subs	r6, #185	; 0xb9
 80016c8:	3eff      	subs	r6, #255	; 0xff
 80016ca:	421e      	tst	r6, r3
 80016cc:	d01d      	beq.n	800170a <__aeabi_dmul+0x17a>
 80016ce:	46a3      	mov	fp, r4
 80016d0:	4682      	mov	sl, r0
 80016d2:	9100      	str	r1, [sp, #0]
 80016d4:	e000      	b.n	80016d8 <__aeabi_dmul+0x148>
 80016d6:	0017      	movs	r7, r2
 80016d8:	9900      	ldr	r1, [sp, #0]
 80016da:	003a      	movs	r2, r7
 80016dc:	2902      	cmp	r1, #2
 80016de:	d010      	beq.n	8001702 <__aeabi_dmul+0x172>
 80016e0:	465c      	mov	r4, fp
 80016e2:	4650      	mov	r0, sl
 80016e4:	2903      	cmp	r1, #3
 80016e6:	d1bf      	bne.n	8001668 <__aeabi_dmul+0xd8>
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	031b      	lsls	r3, r3, #12
 80016ec:	431c      	orrs	r4, r3
 80016ee:	0324      	lsls	r4, r4, #12
 80016f0:	0005      	movs	r5, r0
 80016f2:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <__aeabi_dmul+0x360>)
 80016f4:	0b24      	lsrs	r4, r4, #12
 80016f6:	e7bd      	b.n	8001674 <__aeabi_dmul+0xe4>
 80016f8:	2480      	movs	r4, #128	; 0x80
 80016fa:	2200      	movs	r2, #0
 80016fc:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <__aeabi_dmul+0x360>)
 80016fe:	0324      	lsls	r4, r4, #12
 8001700:	e7b8      	b.n	8001674 <__aeabi_dmul+0xe4>
 8001702:	2400      	movs	r4, #0
 8001704:	2500      	movs	r5, #0
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <__aeabi_dmul+0x360>)
 8001708:	e7b4      	b.n	8001674 <__aeabi_dmul+0xe4>
 800170a:	4653      	mov	r3, sl
 800170c:	041e      	lsls	r6, r3, #16
 800170e:	0c36      	lsrs	r6, r6, #16
 8001710:	0c1f      	lsrs	r7, r3, #16
 8001712:	0033      	movs	r3, r6
 8001714:	0c01      	lsrs	r1, r0, #16
 8001716:	0400      	lsls	r0, r0, #16
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	4343      	muls	r3, r0
 800171c:	4698      	mov	r8, r3
 800171e:	0003      	movs	r3, r0
 8001720:	437b      	muls	r3, r7
 8001722:	4699      	mov	r9, r3
 8001724:	0033      	movs	r3, r6
 8001726:	434b      	muls	r3, r1
 8001728:	469c      	mov	ip, r3
 800172a:	4643      	mov	r3, r8
 800172c:	000d      	movs	r5, r1
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	469a      	mov	sl, r3
 8001732:	437d      	muls	r5, r7
 8001734:	44cc      	add	ip, r9
 8001736:	44d4      	add	ip, sl
 8001738:	9500      	str	r5, [sp, #0]
 800173a:	45e1      	cmp	r9, ip
 800173c:	d904      	bls.n	8001748 <__aeabi_dmul+0x1b8>
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	4699      	mov	r9, r3
 8001744:	444d      	add	r5, r9
 8001746:	9500      	str	r5, [sp, #0]
 8001748:	4663      	mov	r3, ip
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	001d      	movs	r5, r3
 800174e:	4663      	mov	r3, ip
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	4643      	mov	r3, r8
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	4698      	mov	r8, r3
 800175c:	4663      	mov	r3, ip
 800175e:	4443      	add	r3, r8
 8001760:	9303      	str	r3, [sp, #12]
 8001762:	0c23      	lsrs	r3, r4, #16
 8001764:	4698      	mov	r8, r3
 8001766:	0033      	movs	r3, r6
 8001768:	0424      	lsls	r4, r4, #16
 800176a:	0c24      	lsrs	r4, r4, #16
 800176c:	4363      	muls	r3, r4
 800176e:	469c      	mov	ip, r3
 8001770:	0023      	movs	r3, r4
 8001772:	437b      	muls	r3, r7
 8001774:	4699      	mov	r9, r3
 8001776:	4643      	mov	r3, r8
 8001778:	435e      	muls	r6, r3
 800177a:	435f      	muls	r7, r3
 800177c:	444e      	add	r6, r9
 800177e:	4663      	mov	r3, ip
 8001780:	46b2      	mov	sl, r6
 8001782:	0c1e      	lsrs	r6, r3, #16
 8001784:	4456      	add	r6, sl
 8001786:	45b1      	cmp	r9, r6
 8001788:	d903      	bls.n	8001792 <__aeabi_dmul+0x202>
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	4699      	mov	r9, r3
 8001790:	444f      	add	r7, r9
 8001792:	0c33      	lsrs	r3, r6, #16
 8001794:	4699      	mov	r9, r3
 8001796:	003b      	movs	r3, r7
 8001798:	444b      	add	r3, r9
 800179a:	9305      	str	r3, [sp, #20]
 800179c:	4663      	mov	r3, ip
 800179e:	46ac      	mov	ip, r5
 80017a0:	041f      	lsls	r7, r3, #16
 80017a2:	0c3f      	lsrs	r7, r7, #16
 80017a4:	0436      	lsls	r6, r6, #16
 80017a6:	19f6      	adds	r6, r6, r7
 80017a8:	44b4      	add	ip, r6
 80017aa:	4663      	mov	r3, ip
 80017ac:	9304      	str	r3, [sp, #16]
 80017ae:	465b      	mov	r3, fp
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	469c      	mov	ip, r3
 80017b4:	465b      	mov	r3, fp
 80017b6:	041f      	lsls	r7, r3, #16
 80017b8:	0c3f      	lsrs	r7, r7, #16
 80017ba:	003b      	movs	r3, r7
 80017bc:	4343      	muls	r3, r0
 80017be:	4699      	mov	r9, r3
 80017c0:	4663      	mov	r3, ip
 80017c2:	4343      	muls	r3, r0
 80017c4:	469a      	mov	sl, r3
 80017c6:	464b      	mov	r3, r9
 80017c8:	4660      	mov	r0, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	469b      	mov	fp, r3
 80017ce:	4348      	muls	r0, r1
 80017d0:	4379      	muls	r1, r7
 80017d2:	4451      	add	r1, sl
 80017d4:	4459      	add	r1, fp
 80017d6:	458a      	cmp	sl, r1
 80017d8:	d903      	bls.n	80017e2 <__aeabi_dmul+0x252>
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	469a      	mov	sl, r3
 80017e0:	4450      	add	r0, sl
 80017e2:	0c0b      	lsrs	r3, r1, #16
 80017e4:	469a      	mov	sl, r3
 80017e6:	464b      	mov	r3, r9
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	4699      	mov	r9, r3
 80017ee:	003b      	movs	r3, r7
 80017f0:	4363      	muls	r3, r4
 80017f2:	0409      	lsls	r1, r1, #16
 80017f4:	4645      	mov	r5, r8
 80017f6:	4449      	add	r1, r9
 80017f8:	4699      	mov	r9, r3
 80017fa:	4663      	mov	r3, ip
 80017fc:	435c      	muls	r4, r3
 80017fe:	436b      	muls	r3, r5
 8001800:	469c      	mov	ip, r3
 8001802:	464b      	mov	r3, r9
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	4698      	mov	r8, r3
 8001808:	436f      	muls	r7, r5
 800180a:	193f      	adds	r7, r7, r4
 800180c:	4447      	add	r7, r8
 800180e:	4450      	add	r0, sl
 8001810:	42bc      	cmp	r4, r7
 8001812:	d903      	bls.n	800181c <__aeabi_dmul+0x28c>
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	4698      	mov	r8, r3
 800181a:	44c4      	add	ip, r8
 800181c:	9b04      	ldr	r3, [sp, #16]
 800181e:	9d00      	ldr	r5, [sp, #0]
 8001820:	4698      	mov	r8, r3
 8001822:	4445      	add	r5, r8
 8001824:	42b5      	cmp	r5, r6
 8001826:	41b6      	sbcs	r6, r6
 8001828:	4273      	negs	r3, r6
 800182a:	4698      	mov	r8, r3
 800182c:	464b      	mov	r3, r9
 800182e:	041e      	lsls	r6, r3, #16
 8001830:	9b05      	ldr	r3, [sp, #20]
 8001832:	043c      	lsls	r4, r7, #16
 8001834:	4699      	mov	r9, r3
 8001836:	0c36      	lsrs	r6, r6, #16
 8001838:	19a4      	adds	r4, r4, r6
 800183a:	444c      	add	r4, r9
 800183c:	46a1      	mov	r9, r4
 800183e:	4683      	mov	fp, r0
 8001840:	186e      	adds	r6, r5, r1
 8001842:	44c1      	add	r9, r8
 8001844:	428e      	cmp	r6, r1
 8001846:	4189      	sbcs	r1, r1
 8001848:	44cb      	add	fp, r9
 800184a:	465d      	mov	r5, fp
 800184c:	4249      	negs	r1, r1
 800184e:	186d      	adds	r5, r5, r1
 8001850:	429c      	cmp	r4, r3
 8001852:	41a4      	sbcs	r4, r4
 8001854:	45c1      	cmp	r9, r8
 8001856:	419b      	sbcs	r3, r3
 8001858:	4583      	cmp	fp, r0
 800185a:	4180      	sbcs	r0, r0
 800185c:	428d      	cmp	r5, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	425b      	negs	r3, r3
 8001862:	4264      	negs	r4, r4
 8001864:	431c      	orrs	r4, r3
 8001866:	4240      	negs	r0, r0
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	4249      	negs	r1, r1
 800186c:	4301      	orrs	r1, r0
 800186e:	0270      	lsls	r0, r6, #9
 8001870:	0c3f      	lsrs	r7, r7, #16
 8001872:	4318      	orrs	r0, r3
 8001874:	19e4      	adds	r4, r4, r7
 8001876:	1e47      	subs	r7, r0, #1
 8001878:	41b8      	sbcs	r0, r7
 800187a:	1864      	adds	r4, r4, r1
 800187c:	4464      	add	r4, ip
 800187e:	0df6      	lsrs	r6, r6, #23
 8001880:	0261      	lsls	r1, r4, #9
 8001882:	4330      	orrs	r0, r6
 8001884:	0dec      	lsrs	r4, r5, #23
 8001886:	026e      	lsls	r6, r5, #9
 8001888:	430c      	orrs	r4, r1
 800188a:	4330      	orrs	r0, r6
 800188c:	01c9      	lsls	r1, r1, #7
 800188e:	d400      	bmi.n	8001892 <__aeabi_dmul+0x302>
 8001890:	e0f1      	b.n	8001a76 <__aeabi_dmul+0x4e6>
 8001892:	2101      	movs	r1, #1
 8001894:	0843      	lsrs	r3, r0, #1
 8001896:	4001      	ands	r1, r0
 8001898:	430b      	orrs	r3, r1
 800189a:	07e0      	lsls	r0, r4, #31
 800189c:	4318      	orrs	r0, r3
 800189e:	0864      	lsrs	r4, r4, #1
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <__aeabi_dmul+0x368>)
 80018a2:	9b02      	ldr	r3, [sp, #8]
 80018a4:	468c      	mov	ip, r1
 80018a6:	4463      	add	r3, ip
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dc00      	bgt.n	80018ae <__aeabi_dmul+0x31e>
 80018ac:	e097      	b.n	80019de <__aeabi_dmul+0x44e>
 80018ae:	0741      	lsls	r1, r0, #29
 80018b0:	d009      	beq.n	80018c6 <__aeabi_dmul+0x336>
 80018b2:	210f      	movs	r1, #15
 80018b4:	4001      	ands	r1, r0
 80018b6:	2904      	cmp	r1, #4
 80018b8:	d005      	beq.n	80018c6 <__aeabi_dmul+0x336>
 80018ba:	1d01      	adds	r1, r0, #4
 80018bc:	4281      	cmp	r1, r0
 80018be:	4180      	sbcs	r0, r0
 80018c0:	4240      	negs	r0, r0
 80018c2:	1824      	adds	r4, r4, r0
 80018c4:	0008      	movs	r0, r1
 80018c6:	01e1      	lsls	r1, r4, #7
 80018c8:	d506      	bpl.n	80018d8 <__aeabi_dmul+0x348>
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	00c9      	lsls	r1, r1, #3
 80018ce:	468c      	mov	ip, r1
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <__aeabi_dmul+0x36c>)
 80018d2:	401c      	ands	r4, r3
 80018d4:	9b02      	ldr	r3, [sp, #8]
 80018d6:	4463      	add	r3, ip
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <__aeabi_dmul+0x370>)
 80018da:	428b      	cmp	r3, r1
 80018dc:	dd00      	ble.n	80018e0 <__aeabi_dmul+0x350>
 80018de:	e710      	b.n	8001702 <__aeabi_dmul+0x172>
 80018e0:	0761      	lsls	r1, r4, #29
 80018e2:	08c5      	lsrs	r5, r0, #3
 80018e4:	0264      	lsls	r4, r4, #9
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	430d      	orrs	r5, r1
 80018ea:	0b24      	lsrs	r4, r4, #12
 80018ec:	0d5b      	lsrs	r3, r3, #21
 80018ee:	e6c1      	b.n	8001674 <__aeabi_dmul+0xe4>
 80018f0:	000007ff 	.word	0x000007ff
 80018f4:	fffffc01 	.word	0xfffffc01
 80018f8:	000003ff 	.word	0x000003ff
 80018fc:	feffffff 	.word	0xfeffffff
 8001900:	000007fe 	.word	0x000007fe
 8001904:	464b      	mov	r3, r9
 8001906:	4323      	orrs	r3, r4
 8001908:	d059      	beq.n	80019be <__aeabi_dmul+0x42e>
 800190a:	2c00      	cmp	r4, #0
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0x380>
 800190e:	e0a3      	b.n	8001a58 <__aeabi_dmul+0x4c8>
 8001910:	0020      	movs	r0, r4
 8001912:	f000 fd2b 	bl	800236c <__clzsi2>
 8001916:	0001      	movs	r1, r0
 8001918:	0003      	movs	r3, r0
 800191a:	390b      	subs	r1, #11
 800191c:	221d      	movs	r2, #29
 800191e:	1a52      	subs	r2, r2, r1
 8001920:	4649      	mov	r1, r9
 8001922:	0018      	movs	r0, r3
 8001924:	40d1      	lsrs	r1, r2
 8001926:	464a      	mov	r2, r9
 8001928:	3808      	subs	r0, #8
 800192a:	4082      	lsls	r2, r0
 800192c:	4084      	lsls	r4, r0
 800192e:	0010      	movs	r0, r2
 8001930:	430c      	orrs	r4, r1
 8001932:	4a74      	ldr	r2, [pc, #464]	; (8001b04 <__aeabi_dmul+0x574>)
 8001934:	1aeb      	subs	r3, r5, r3
 8001936:	4694      	mov	ip, r2
 8001938:	4642      	mov	r2, r8
 800193a:	4463      	add	r3, ip
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	407a      	eors	r2, r7
 8001942:	3301      	adds	r3, #1
 8001944:	2100      	movs	r1, #0
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	9302      	str	r3, [sp, #8]
 800194a:	2e0a      	cmp	r6, #10
 800194c:	dd00      	ble.n	8001950 <__aeabi_dmul+0x3c0>
 800194e:	e667      	b.n	8001620 <__aeabi_dmul+0x90>
 8001950:	e683      	b.n	800165a <__aeabi_dmul+0xca>
 8001952:	465b      	mov	r3, fp
 8001954:	4303      	orrs	r3, r0
 8001956:	469a      	mov	sl, r3
 8001958:	d02a      	beq.n	80019b0 <__aeabi_dmul+0x420>
 800195a:	465b      	mov	r3, fp
 800195c:	2b00      	cmp	r3, #0
 800195e:	d06d      	beq.n	8001a3c <__aeabi_dmul+0x4ac>
 8001960:	4658      	mov	r0, fp
 8001962:	f000 fd03 	bl	800236c <__clzsi2>
 8001966:	0001      	movs	r1, r0
 8001968:	0003      	movs	r3, r0
 800196a:	390b      	subs	r1, #11
 800196c:	221d      	movs	r2, #29
 800196e:	1a52      	subs	r2, r2, r1
 8001970:	0021      	movs	r1, r4
 8001972:	0018      	movs	r0, r3
 8001974:	465d      	mov	r5, fp
 8001976:	40d1      	lsrs	r1, r2
 8001978:	3808      	subs	r0, #8
 800197a:	4085      	lsls	r5, r0
 800197c:	000a      	movs	r2, r1
 800197e:	4084      	lsls	r4, r0
 8001980:	432a      	orrs	r2, r5
 8001982:	4693      	mov	fp, r2
 8001984:	46a2      	mov	sl, r4
 8001986:	4d5f      	ldr	r5, [pc, #380]	; (8001b04 <__aeabi_dmul+0x574>)
 8001988:	2600      	movs	r6, #0
 800198a:	1aed      	subs	r5, r5, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	e625      	b.n	80015de <__aeabi_dmul+0x4e>
 8001992:	465b      	mov	r3, fp
 8001994:	4303      	orrs	r3, r0
 8001996:	469a      	mov	sl, r3
 8001998:	d105      	bne.n	80019a6 <__aeabi_dmul+0x416>
 800199a:	2300      	movs	r3, #0
 800199c:	469b      	mov	fp, r3
 800199e:	3302      	adds	r3, #2
 80019a0:	2608      	movs	r6, #8
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	e61b      	b.n	80015de <__aeabi_dmul+0x4e>
 80019a6:	2303      	movs	r3, #3
 80019a8:	4682      	mov	sl, r0
 80019aa:	260c      	movs	r6, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	e616      	b.n	80015de <__aeabi_dmul+0x4e>
 80019b0:	2300      	movs	r3, #0
 80019b2:	469b      	mov	fp, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	2604      	movs	r6, #4
 80019b8:	2500      	movs	r5, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	e60f      	b.n	80015de <__aeabi_dmul+0x4e>
 80019be:	4642      	mov	r2, r8
 80019c0:	3301      	adds	r3, #1
 80019c2:	9501      	str	r5, [sp, #4]
 80019c4:	431e      	orrs	r6, r3
 80019c6:	9b01      	ldr	r3, [sp, #4]
 80019c8:	407a      	eors	r2, r7
 80019ca:	3301      	adds	r3, #1
 80019cc:	2400      	movs	r4, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	2101      	movs	r1, #1
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2e0a      	cmp	r6, #10
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dmul+0x44c>
 80019da:	e621      	b.n	8001620 <__aeabi_dmul+0x90>
 80019dc:	e63d      	b.n	800165a <__aeabi_dmul+0xca>
 80019de:	2101      	movs	r1, #1
 80019e0:	1ac9      	subs	r1, r1, r3
 80019e2:	2938      	cmp	r1, #56	; 0x38
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dmul+0x458>
 80019e6:	e642      	b.n	800166e <__aeabi_dmul+0xde>
 80019e8:	291f      	cmp	r1, #31
 80019ea:	dd47      	ble.n	8001a7c <__aeabi_dmul+0x4ec>
 80019ec:	261f      	movs	r6, #31
 80019ee:	0025      	movs	r5, r4
 80019f0:	4276      	negs	r6, r6
 80019f2:	1af3      	subs	r3, r6, r3
 80019f4:	40dd      	lsrs	r5, r3
 80019f6:	002b      	movs	r3, r5
 80019f8:	2920      	cmp	r1, #32
 80019fa:	d005      	beq.n	8001a08 <__aeabi_dmul+0x478>
 80019fc:	4942      	ldr	r1, [pc, #264]	; (8001b08 <__aeabi_dmul+0x578>)
 80019fe:	9d02      	ldr	r5, [sp, #8]
 8001a00:	468c      	mov	ip, r1
 8001a02:	4465      	add	r5, ip
 8001a04:	40ac      	lsls	r4, r5
 8001a06:	4320      	orrs	r0, r4
 8001a08:	1e41      	subs	r1, r0, #1
 8001a0a:	4188      	sbcs	r0, r1
 8001a0c:	4318      	orrs	r0, r3
 8001a0e:	2307      	movs	r3, #7
 8001a10:	001d      	movs	r5, r3
 8001a12:	2400      	movs	r4, #0
 8001a14:	4005      	ands	r5, r0
 8001a16:	4203      	tst	r3, r0
 8001a18:	d04a      	beq.n	8001ab0 <__aeabi_dmul+0x520>
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	4003      	ands	r3, r0
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d042      	beq.n	8001aaa <__aeabi_dmul+0x51a>
 8001a24:	1d03      	adds	r3, r0, #4
 8001a26:	4283      	cmp	r3, r0
 8001a28:	4180      	sbcs	r0, r0
 8001a2a:	4240      	negs	r0, r0
 8001a2c:	1824      	adds	r4, r4, r0
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0223      	lsls	r3, r4, #8
 8001a32:	d53a      	bpl.n	8001aaa <__aeabi_dmul+0x51a>
 8001a34:	2301      	movs	r3, #1
 8001a36:	2400      	movs	r4, #0
 8001a38:	2500      	movs	r5, #0
 8001a3a:	e61b      	b.n	8001674 <__aeabi_dmul+0xe4>
 8001a3c:	f000 fc96 	bl	800236c <__clzsi2>
 8001a40:	0001      	movs	r1, r0
 8001a42:	0003      	movs	r3, r0
 8001a44:	3115      	adds	r1, #21
 8001a46:	3320      	adds	r3, #32
 8001a48:	291c      	cmp	r1, #28
 8001a4a:	dd8f      	ble.n	800196c <__aeabi_dmul+0x3dc>
 8001a4c:	3808      	subs	r0, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4084      	lsls	r4, r0
 8001a52:	4692      	mov	sl, r2
 8001a54:	46a3      	mov	fp, r4
 8001a56:	e796      	b.n	8001986 <__aeabi_dmul+0x3f6>
 8001a58:	f000 fc88 	bl	800236c <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	0003      	movs	r3, r0
 8001a60:	3115      	adds	r1, #21
 8001a62:	3320      	adds	r3, #32
 8001a64:	291c      	cmp	r1, #28
 8001a66:	dc00      	bgt.n	8001a6a <__aeabi_dmul+0x4da>
 8001a68:	e758      	b.n	800191c <__aeabi_dmul+0x38c>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	464c      	mov	r4, r9
 8001a6e:	3a08      	subs	r2, #8
 8001a70:	2000      	movs	r0, #0
 8001a72:	4094      	lsls	r4, r2
 8001a74:	e75d      	b.n	8001932 <__aeabi_dmul+0x3a2>
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e711      	b.n	80018a0 <__aeabi_dmul+0x310>
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <__aeabi_dmul+0x57c>)
 8001a7e:	0026      	movs	r6, r4
 8001a80:	469c      	mov	ip, r3
 8001a82:	0003      	movs	r3, r0
 8001a84:	9d02      	ldr	r5, [sp, #8]
 8001a86:	40cb      	lsrs	r3, r1
 8001a88:	4465      	add	r5, ip
 8001a8a:	40ae      	lsls	r6, r5
 8001a8c:	431e      	orrs	r6, r3
 8001a8e:	0003      	movs	r3, r0
 8001a90:	40ab      	lsls	r3, r5
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	4183      	sbcs	r3, r0
 8001a96:	0030      	movs	r0, r6
 8001a98:	4318      	orrs	r0, r3
 8001a9a:	40cc      	lsrs	r4, r1
 8001a9c:	0743      	lsls	r3, r0, #29
 8001a9e:	d0c7      	beq.n	8001a30 <__aeabi_dmul+0x4a0>
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	4003      	ands	r3, r0
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d1bd      	bne.n	8001a24 <__aeabi_dmul+0x494>
 8001aa8:	e7c2      	b.n	8001a30 <__aeabi_dmul+0x4a0>
 8001aaa:	0765      	lsls	r5, r4, #29
 8001aac:	0264      	lsls	r4, r4, #9
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	08c0      	lsrs	r0, r0, #3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	4305      	orrs	r5, r0
 8001ab6:	e5dd      	b.n	8001674 <__aeabi_dmul+0xe4>
 8001ab8:	2500      	movs	r5, #0
 8001aba:	2302      	movs	r3, #2
 8001abc:	2e0f      	cmp	r6, #15
 8001abe:	d10c      	bne.n	8001ada <__aeabi_dmul+0x54a>
 8001ac0:	2480      	movs	r4, #128	; 0x80
 8001ac2:	465b      	mov	r3, fp
 8001ac4:	0324      	lsls	r4, r4, #12
 8001ac6:	4223      	tst	r3, r4
 8001ac8:	d00e      	beq.n	8001ae8 <__aeabi_dmul+0x558>
 8001aca:	4221      	tst	r1, r4
 8001acc:	d10c      	bne.n	8001ae8 <__aeabi_dmul+0x558>
 8001ace:	430c      	orrs	r4, r1
 8001ad0:	0324      	lsls	r4, r4, #12
 8001ad2:	003a      	movs	r2, r7
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <__aeabi_dmul+0x580>)
 8001ad6:	0b24      	lsrs	r4, r4, #12
 8001ad8:	e5cc      	b.n	8001674 <__aeabi_dmul+0xe4>
 8001ada:	2e0b      	cmp	r6, #11
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dmul+0x550>
 8001ade:	e5a2      	b.n	8001626 <__aeabi_dmul+0x96>
 8001ae0:	468b      	mov	fp, r1
 8001ae2:	46aa      	mov	sl, r5
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	e5f7      	b.n	80016d8 <__aeabi_dmul+0x148>
 8001ae8:	2480      	movs	r4, #128	; 0x80
 8001aea:	465b      	mov	r3, fp
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	431c      	orrs	r4, r3
 8001af0:	0324      	lsls	r4, r4, #12
 8001af2:	4642      	mov	r2, r8
 8001af4:	4655      	mov	r5, sl
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <__aeabi_dmul+0x580>)
 8001af8:	0b24      	lsrs	r4, r4, #12
 8001afa:	e5bb      	b.n	8001674 <__aeabi_dmul+0xe4>
 8001afc:	464d      	mov	r5, r9
 8001afe:	0021      	movs	r1, r4
 8001b00:	2303      	movs	r3, #3
 8001b02:	e7db      	b.n	8001abc <__aeabi_dmul+0x52c>
 8001b04:	fffffc0d 	.word	0xfffffc0d
 8001b08:	0000043e 	.word	0x0000043e
 8001b0c:	0000041e 	.word	0x0000041e
 8001b10:	000007ff 	.word	0x000007ff

08001b14 <__aeabi_dsub>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	4657      	mov	r7, sl
 8001b18:	464e      	mov	r6, r9
 8001b1a:	4645      	mov	r5, r8
 8001b1c:	46de      	mov	lr, fp
 8001b1e:	b5e0      	push	{r5, r6, r7, lr}
 8001b20:	000d      	movs	r5, r1
 8001b22:	0004      	movs	r4, r0
 8001b24:	0019      	movs	r1, r3
 8001b26:	0010      	movs	r0, r2
 8001b28:	032b      	lsls	r3, r5, #12
 8001b2a:	0a5b      	lsrs	r3, r3, #9
 8001b2c:	0f62      	lsrs	r2, r4, #29
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	00e3      	lsls	r3, r4, #3
 8001b32:	030c      	lsls	r4, r1, #12
 8001b34:	0a64      	lsrs	r4, r4, #9
 8001b36:	0f47      	lsrs	r7, r0, #29
 8001b38:	4327      	orrs	r7, r4
 8001b3a:	4cd0      	ldr	r4, [pc, #832]	; (8001e7c <__aeabi_dsub+0x368>)
 8001b3c:	006e      	lsls	r6, r5, #1
 8001b3e:	4691      	mov	r9, r2
 8001b40:	b083      	sub	sp, #12
 8001b42:	004a      	lsls	r2, r1, #1
 8001b44:	00c0      	lsls	r0, r0, #3
 8001b46:	4698      	mov	r8, r3
 8001b48:	46a2      	mov	sl, r4
 8001b4a:	0d76      	lsrs	r6, r6, #21
 8001b4c:	0fed      	lsrs	r5, r5, #31
 8001b4e:	0d52      	lsrs	r2, r2, #21
 8001b50:	0fc9      	lsrs	r1, r1, #31
 8001b52:	9001      	str	r0, [sp, #4]
 8001b54:	42a2      	cmp	r2, r4
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x46>
 8001b58:	e0b9      	b.n	8001cce <__aeabi_dsub+0x1ba>
 8001b5a:	2401      	movs	r4, #1
 8001b5c:	4061      	eors	r1, r4
 8001b5e:	468b      	mov	fp, r1
 8001b60:	428d      	cmp	r5, r1
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x52>
 8001b64:	e08d      	b.n	8001c82 <__aeabi_dsub+0x16e>
 8001b66:	1ab4      	subs	r4, r6, r2
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	dc00      	bgt.n	8001b70 <__aeabi_dsub+0x5c>
 8001b6e:	e0b7      	b.n	8001ce0 <__aeabi_dsub+0x1cc>
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x62>
 8001b74:	e0cb      	b.n	8001d0e <__aeabi_dsub+0x1fa>
 8001b76:	4ac1      	ldr	r2, [pc, #772]	; (8001e7c <__aeabi_dsub+0x368>)
 8001b78:	4296      	cmp	r6, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x6a>
 8001b7c:	e186      	b.n	8001e8c <__aeabi_dsub+0x378>
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	0412      	lsls	r2, r2, #16
 8001b82:	4317      	orrs	r7, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	2a38      	cmp	r2, #56	; 0x38
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0x78>
 8001b8a:	e1a4      	b.n	8001ed6 <__aeabi_dsub+0x3c2>
 8001b8c:	2a1f      	cmp	r2, #31
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_dsub+0x7e>
 8001b90:	e21d      	b.n	8001fce <__aeabi_dsub+0x4ba>
 8001b92:	4661      	mov	r1, ip
 8001b94:	2220      	movs	r2, #32
 8001b96:	003c      	movs	r4, r7
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	4090      	lsls	r0, r2
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	1e42      	subs	r2, r0, #1
 8001ba2:	4190      	sbcs	r0, r2
 8001ba4:	4662      	mov	r2, ip
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	4664      	mov	r4, ip
 8001baa:	40d7      	lsrs	r7, r2
 8001bac:	464a      	mov	r2, r9
 8001bae:	40e1      	lsrs	r1, r4
 8001bb0:	4644      	mov	r4, r8
 8001bb2:	1bd2      	subs	r2, r2, r7
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	4304      	orrs	r4, r0
 8001bba:	1b1c      	subs	r4, r3, r4
 8001bbc:	42a3      	cmp	r3, r4
 8001bbe:	4192      	sbcs	r2, r2
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	4252      	negs	r2, r2
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	469a      	mov	sl, r3
 8001bc8:	4653      	mov	r3, sl
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	d400      	bmi.n	8001bd0 <__aeabi_dsub+0xbc>
 8001bce:	e12b      	b.n	8001e28 <__aeabi_dsub+0x314>
 8001bd0:	4653      	mov	r3, sl
 8001bd2:	025a      	lsls	r2, r3, #9
 8001bd4:	0a53      	lsrs	r3, r2, #9
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	4653      	mov	r3, sl
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0xcc>
 8001bde:	e166      	b.n	8001eae <__aeabi_dsub+0x39a>
 8001be0:	4650      	mov	r0, sl
 8001be2:	f000 fbc3 	bl	800236c <__clzsi2>
 8001be6:	0003      	movs	r3, r0
 8001be8:	3b08      	subs	r3, #8
 8001bea:	2220      	movs	r2, #32
 8001bec:	0020      	movs	r0, r4
 8001bee:	1ad2      	subs	r2, r2, r3
 8001bf0:	4651      	mov	r1, sl
 8001bf2:	40d0      	lsrs	r0, r2
 8001bf4:	4099      	lsls	r1, r3
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	409c      	lsls	r4, r3
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	429e      	cmp	r6, r3
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0xee>
 8001c00:	e164      	b.n	8001ecc <__aeabi_dsub+0x3b8>
 8001c02:	1b9b      	subs	r3, r3, r6
 8001c04:	1c59      	adds	r1, r3, #1
 8001c06:	291f      	cmp	r1, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0xf8>
 8001c0a:	e0fe      	b.n	8001e0a <__aeabi_dsub+0x2f6>
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	0010      	movs	r0, r2
 8001c10:	0026      	movs	r6, r4
 8001c12:	1a5b      	subs	r3, r3, r1
 8001c14:	409c      	lsls	r4, r3
 8001c16:	4098      	lsls	r0, r3
 8001c18:	40ce      	lsrs	r6, r1
 8001c1a:	40ca      	lsrs	r2, r1
 8001c1c:	1e63      	subs	r3, r4, #1
 8001c1e:	419c      	sbcs	r4, r3
 8001c20:	4330      	orrs	r0, r6
 8001c22:	4692      	mov	sl, r2
 8001c24:	2600      	movs	r6, #0
 8001c26:	4304      	orrs	r4, r0
 8001c28:	0763      	lsls	r3, r4, #29
 8001c2a:	d009      	beq.n	8001c40 <__aeabi_dsub+0x12c>
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	4023      	ands	r3, r4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d005      	beq.n	8001c40 <__aeabi_dsub+0x12c>
 8001c34:	1d23      	adds	r3, r4, #4
 8001c36:	42a3      	cmp	r3, r4
 8001c38:	41a4      	sbcs	r4, r4
 8001c3a:	4264      	negs	r4, r4
 8001c3c:	44a2      	add	sl, r4
 8001c3e:	001c      	movs	r4, r3
 8001c40:	4653      	mov	r3, sl
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	d400      	bmi.n	8001c48 <__aeabi_dsub+0x134>
 8001c46:	e0f2      	b.n	8001e2e <__aeabi_dsub+0x31a>
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <__aeabi_dsub+0x368>)
 8001c4a:	3601      	adds	r6, #1
 8001c4c:	429e      	cmp	r6, r3
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x13e>
 8001c50:	e10f      	b.n	8001e72 <__aeabi_dsub+0x35e>
 8001c52:	4653      	mov	r3, sl
 8001c54:	498a      	ldr	r1, [pc, #552]	; (8001e80 <__aeabi_dsub+0x36c>)
 8001c56:	08e4      	lsrs	r4, r4, #3
 8001c58:	400b      	ands	r3, r1
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	075b      	lsls	r3, r3, #29
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	0572      	lsls	r2, r6, #21
 8001c62:	024c      	lsls	r4, r1, #9
 8001c64:	0b24      	lsrs	r4, r4, #12
 8001c66:	0d52      	lsrs	r2, r2, #21
 8001c68:	0512      	lsls	r2, r2, #20
 8001c6a:	4322      	orrs	r2, r4
 8001c6c:	07ed      	lsls	r5, r5, #31
 8001c6e:	432a      	orrs	r2, r5
 8001c70:	0018      	movs	r0, r3
 8001c72:	0011      	movs	r1, r2
 8001c74:	b003      	add	sp, #12
 8001c76:	bcf0      	pop	{r4, r5, r6, r7}
 8001c78:	46bb      	mov	fp, r7
 8001c7a:	46b2      	mov	sl, r6
 8001c7c:	46a9      	mov	r9, r5
 8001c7e:	46a0      	mov	r8, r4
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	1ab4      	subs	r4, r6, r2
 8001c84:	46a4      	mov	ip, r4
 8001c86:	2c00      	cmp	r4, #0
 8001c88:	dd59      	ble.n	8001d3e <__aeabi_dsub+0x22a>
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x17c>
 8001c8e:	e0b0      	b.n	8001df2 <__aeabi_dsub+0x2de>
 8001c90:	4556      	cmp	r6, sl
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x182>
 8001c94:	e0fa      	b.n	8001e8c <__aeabi_dsub+0x378>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	4317      	orrs	r7, r2
 8001c9c:	4662      	mov	r2, ip
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dd00      	ble.n	8001ca4 <__aeabi_dsub+0x190>
 8001ca2:	e0d4      	b.n	8001e4e <__aeabi_dsub+0x33a>
 8001ca4:	2a1f      	cmp	r2, #31
 8001ca6:	dc00      	bgt.n	8001caa <__aeabi_dsub+0x196>
 8001ca8:	e1c0      	b.n	800202c <__aeabi_dsub+0x518>
 8001caa:	0039      	movs	r1, r7
 8001cac:	3a20      	subs	r2, #32
 8001cae:	40d1      	lsrs	r1, r2
 8001cb0:	4662      	mov	r2, ip
 8001cb2:	2a20      	cmp	r2, #32
 8001cb4:	d006      	beq.n	8001cc4 <__aeabi_dsub+0x1b0>
 8001cb6:	4664      	mov	r4, ip
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	1b12      	subs	r2, r2, r4
 8001cbc:	003c      	movs	r4, r7
 8001cbe:	4094      	lsls	r4, r2
 8001cc0:	4304      	orrs	r4, r0
 8001cc2:	9401      	str	r4, [sp, #4]
 8001cc4:	9c01      	ldr	r4, [sp, #4]
 8001cc6:	1e62      	subs	r2, r4, #1
 8001cc8:	4194      	sbcs	r4, r2
 8001cca:	430c      	orrs	r4, r1
 8001ccc:	e0c3      	b.n	8001e56 <__aeabi_dsub+0x342>
 8001cce:	003c      	movs	r4, r7
 8001cd0:	4304      	orrs	r4, r0
 8001cd2:	d02b      	beq.n	8001d2c <__aeabi_dsub+0x218>
 8001cd4:	468b      	mov	fp, r1
 8001cd6:	428d      	cmp	r5, r1
 8001cd8:	d02e      	beq.n	8001d38 <__aeabi_dsub+0x224>
 8001cda:	4c6a      	ldr	r4, [pc, #424]	; (8001e84 <__aeabi_dsub+0x370>)
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	44b4      	add	ip, r6
 8001ce0:	4664      	mov	r4, ip
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	d05f      	beq.n	8001da6 <__aeabi_dsub+0x292>
 8001ce6:	1b94      	subs	r4, r2, r6
 8001ce8:	46a4      	mov	ip, r4
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_dsub+0x1dc>
 8001cee:	e120      	b.n	8001f32 <__aeabi_dsub+0x41e>
 8001cf0:	464c      	mov	r4, r9
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x1e4>
 8001cf6:	e1c7      	b.n	8002088 <__aeabi_dsub+0x574>
 8001cf8:	4661      	mov	r1, ip
 8001cfa:	1e4c      	subs	r4, r1, #1
 8001cfc:	2901      	cmp	r1, #1
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x1ee>
 8001d00:	e223      	b.n	800214a <__aeabi_dsub+0x636>
 8001d02:	4d5e      	ldr	r5, [pc, #376]	; (8001e7c <__aeabi_dsub+0x368>)
 8001d04:	45ac      	cmp	ip, r5
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x1f6>
 8001d08:	e1d8      	b.n	80020bc <__aeabi_dsub+0x5a8>
 8001d0a:	46a4      	mov	ip, r4
 8001d0c:	e11a      	b.n	8001f44 <__aeabi_dsub+0x430>
 8001d0e:	003a      	movs	r2, r7
 8001d10:	4302      	orrs	r2, r0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x202>
 8001d14:	e0e4      	b.n	8001ee0 <__aeabi_dsub+0x3cc>
 8001d16:	0022      	movs	r2, r4
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	2c01      	cmp	r4, #1
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x20c>
 8001d1e:	e1c3      	b.n	80020a8 <__aeabi_dsub+0x594>
 8001d20:	4956      	ldr	r1, [pc, #344]	; (8001e7c <__aeabi_dsub+0x368>)
 8001d22:	428c      	cmp	r4, r1
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x214>
 8001d26:	e0b1      	b.n	8001e8c <__aeabi_dsub+0x378>
 8001d28:	4694      	mov	ip, r2
 8001d2a:	e72b      	b.n	8001b84 <__aeabi_dsub+0x70>
 8001d2c:	2401      	movs	r4, #1
 8001d2e:	4061      	eors	r1, r4
 8001d30:	468b      	mov	fp, r1
 8001d32:	428d      	cmp	r5, r1
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x224>
 8001d36:	e716      	b.n	8001b66 <__aeabi_dsub+0x52>
 8001d38:	4952      	ldr	r1, [pc, #328]	; (8001e84 <__aeabi_dsub+0x370>)
 8001d3a:	468c      	mov	ip, r1
 8001d3c:	44b4      	add	ip, r6
 8001d3e:	4664      	mov	r4, ip
 8001d40:	2c00      	cmp	r4, #0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x232>
 8001d44:	e0d3      	b.n	8001eee <__aeabi_dsub+0x3da>
 8001d46:	1b91      	subs	r1, r2, r6
 8001d48:	468c      	mov	ip, r1
 8001d4a:	2e00      	cmp	r6, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x23c>
 8001d4e:	e15e      	b.n	800200e <__aeabi_dsub+0x4fa>
 8001d50:	494a      	ldr	r1, [pc, #296]	; (8001e7c <__aeabi_dsub+0x368>)
 8001d52:	428a      	cmp	r2, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x244>
 8001d56:	e1be      	b.n	80020d6 <__aeabi_dsub+0x5c2>
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	464c      	mov	r4, r9
 8001d5c:	0409      	lsls	r1, r1, #16
 8001d5e:	430c      	orrs	r4, r1
 8001d60:	46a1      	mov	r9, r4
 8001d62:	4661      	mov	r1, ip
 8001d64:	2938      	cmp	r1, #56	; 0x38
 8001d66:	dd00      	ble.n	8001d6a <__aeabi_dsub+0x256>
 8001d68:	e1ba      	b.n	80020e0 <__aeabi_dsub+0x5cc>
 8001d6a:	291f      	cmp	r1, #31
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dsub+0x25c>
 8001d6e:	e227      	b.n	80021c0 <__aeabi_dsub+0x6ac>
 8001d70:	2420      	movs	r4, #32
 8001d72:	1a64      	subs	r4, r4, r1
 8001d74:	4649      	mov	r1, r9
 8001d76:	40a1      	lsls	r1, r4
 8001d78:	001e      	movs	r6, r3
 8001d7a:	4688      	mov	r8, r1
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	40a3      	lsls	r3, r4
 8001d80:	40ce      	lsrs	r6, r1
 8001d82:	4641      	mov	r1, r8
 8001d84:	1e5c      	subs	r4, r3, #1
 8001d86:	41a3      	sbcs	r3, r4
 8001d88:	4331      	orrs	r1, r6
 8001d8a:	4319      	orrs	r1, r3
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	4663      	mov	r3, ip
 8001d90:	4649      	mov	r1, r9
 8001d92:	40d9      	lsrs	r1, r3
 8001d94:	187f      	adds	r7, r7, r1
 8001d96:	1824      	adds	r4, r4, r0
 8001d98:	4284      	cmp	r4, r0
 8001d9a:	419b      	sbcs	r3, r3
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	469a      	mov	sl, r3
 8001da0:	0016      	movs	r6, r2
 8001da2:	44ba      	add	sl, r7
 8001da4:	e05d      	b.n	8001e62 <__aeabi_dsub+0x34e>
 8001da6:	4c38      	ldr	r4, [pc, #224]	; (8001e88 <__aeabi_dsub+0x374>)
 8001da8:	1c72      	adds	r2, r6, #1
 8001daa:	4222      	tst	r2, r4
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x29c>
 8001dae:	e0df      	b.n	8001f70 <__aeabi_dsub+0x45c>
 8001db0:	464a      	mov	r2, r9
 8001db2:	431a      	orrs	r2, r3
 8001db4:	2e00      	cmp	r6, #0
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x2a6>
 8001db8:	e15c      	b.n	8002074 <__aeabi_dsub+0x560>
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x2ac>
 8001dbe:	e1cf      	b.n	8002160 <__aeabi_dsub+0x64c>
 8001dc0:	003a      	movs	r2, r7
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x2b4>
 8001dc6:	e17f      	b.n	80020c8 <__aeabi_dsub+0x5b4>
 8001dc8:	1a1c      	subs	r4, r3, r0
 8001dca:	464a      	mov	r2, r9
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	4189      	sbcs	r1, r1
 8001dd0:	1bd2      	subs	r2, r2, r7
 8001dd2:	4249      	negs	r1, r1
 8001dd4:	1a52      	subs	r2, r2, r1
 8001dd6:	4692      	mov	sl, r2
 8001dd8:	0212      	lsls	r2, r2, #8
 8001dda:	d400      	bmi.n	8001dde <__aeabi_dsub+0x2ca>
 8001ddc:	e20a      	b.n	80021f4 <__aeabi_dsub+0x6e0>
 8001dde:	1ac4      	subs	r4, r0, r3
 8001de0:	42a0      	cmp	r0, r4
 8001de2:	4180      	sbcs	r0, r0
 8001de4:	464b      	mov	r3, r9
 8001de6:	4240      	negs	r0, r0
 8001de8:	1aff      	subs	r7, r7, r3
 8001dea:	1a3b      	subs	r3, r7, r0
 8001dec:	469a      	mov	sl, r3
 8001dee:	465d      	mov	r5, fp
 8001df0:	e71a      	b.n	8001c28 <__aeabi_dsub+0x114>
 8001df2:	003a      	movs	r2, r7
 8001df4:	4302      	orrs	r2, r0
 8001df6:	d073      	beq.n	8001ee0 <__aeabi_dsub+0x3cc>
 8001df8:	0022      	movs	r2, r4
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	2c01      	cmp	r4, #1
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x2ee>
 8001e00:	e0cb      	b.n	8001f9a <__aeabi_dsub+0x486>
 8001e02:	4554      	cmp	r4, sl
 8001e04:	d042      	beq.n	8001e8c <__aeabi_dsub+0x378>
 8001e06:	4694      	mov	ip, r2
 8001e08:	e748      	b.n	8001c9c <__aeabi_dsub+0x188>
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	3b1f      	subs	r3, #31
 8001e0e:	40d8      	lsrs	r0, r3
 8001e10:	2920      	cmp	r1, #32
 8001e12:	d003      	beq.n	8001e1c <__aeabi_dsub+0x308>
 8001e14:	2340      	movs	r3, #64	; 0x40
 8001e16:	1a5b      	subs	r3, r3, r1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	4314      	orrs	r4, r2
 8001e1c:	1e63      	subs	r3, r4, #1
 8001e1e:	419c      	sbcs	r4, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	2600      	movs	r6, #0
 8001e24:	469a      	mov	sl, r3
 8001e26:	4304      	orrs	r4, r0
 8001e28:	0763      	lsls	r3, r4, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x31a>
 8001e2c:	e6fe      	b.n	8001c2c <__aeabi_dsub+0x118>
 8001e2e:	4652      	mov	r2, sl
 8001e30:	08e3      	lsrs	r3, r4, #3
 8001e32:	0752      	lsls	r2, r2, #29
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4652      	mov	r2, sl
 8001e38:	46b4      	mov	ip, r6
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	490f      	ldr	r1, [pc, #60]	; (8001e7c <__aeabi_dsub+0x368>)
 8001e3e:	458c      	cmp	ip, r1
 8001e40:	d02a      	beq.n	8001e98 <__aeabi_dsub+0x384>
 8001e42:	0312      	lsls	r2, r2, #12
 8001e44:	0b14      	lsrs	r4, r2, #12
 8001e46:	4662      	mov	r2, ip
 8001e48:	0552      	lsls	r2, r2, #21
 8001e4a:	0d52      	lsrs	r2, r2, #21
 8001e4c:	e70c      	b.n	8001c68 <__aeabi_dsub+0x154>
 8001e4e:	003c      	movs	r4, r7
 8001e50:	4304      	orrs	r4, r0
 8001e52:	1e62      	subs	r2, r4, #1
 8001e54:	4194      	sbcs	r4, r2
 8001e56:	18e4      	adds	r4, r4, r3
 8001e58:	429c      	cmp	r4, r3
 8001e5a:	4192      	sbcs	r2, r2
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	444a      	add	r2, r9
 8001e60:	4692      	mov	sl, r2
 8001e62:	4653      	mov	r3, sl
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	d5df      	bpl.n	8001e28 <__aeabi_dsub+0x314>
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__aeabi_dsub+0x368>)
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	429e      	cmp	r6, r3
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x35e>
 8001e70:	e0a0      	b.n	8001fb4 <__aeabi_dsub+0x4a0>
 8001e72:	0032      	movs	r2, r6
 8001e74:	2400      	movs	r4, #0
 8001e76:	2300      	movs	r3, #0
 8001e78:	e6f6      	b.n	8001c68 <__aeabi_dsub+0x154>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	ff7fffff 	.word	0xff7fffff
 8001e84:	fffff801 	.word	0xfffff801
 8001e88:	000007fe 	.word	0x000007fe
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	464a      	mov	r2, r9
 8001e90:	0752      	lsls	r2, r2, #29
 8001e92:	4313      	orrs	r3, r2
 8001e94:	464a      	mov	r2, r9
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	0019      	movs	r1, r3
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x38c>
 8001e9e:	e1b5      	b.n	800220c <__aeabi_dsub+0x6f8>
 8001ea0:	2480      	movs	r4, #128	; 0x80
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4314      	orrs	r4, r2
 8001ea6:	0324      	lsls	r4, r4, #12
 8001ea8:	4ad5      	ldr	r2, [pc, #852]	; (8002200 <__aeabi_dsub+0x6ec>)
 8001eaa:	0b24      	lsrs	r4, r4, #12
 8001eac:	e6dc      	b.n	8001c68 <__aeabi_dsub+0x154>
 8001eae:	0020      	movs	r0, r4
 8001eb0:	f000 fa5c 	bl	800236c <__clzsi2>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_dsub+0x3aa>
 8001ebc:	e695      	b.n	8001bea <__aeabi_dsub+0xd6>
 8001ebe:	0022      	movs	r2, r4
 8001ec0:	3808      	subs	r0, #8
 8001ec2:	4082      	lsls	r2, r0
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	429e      	cmp	r6, r3
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x3b8>
 8001eca:	e69a      	b.n	8001c02 <__aeabi_dsub+0xee>
 8001ecc:	1af6      	subs	r6, r6, r3
 8001ece:	4bcd      	ldr	r3, [pc, #820]	; (8002204 <__aeabi_dsub+0x6f0>)
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	4692      	mov	sl, r2
 8001ed4:	e6a8      	b.n	8001c28 <__aeabi_dsub+0x114>
 8001ed6:	003c      	movs	r4, r7
 8001ed8:	4304      	orrs	r4, r0
 8001eda:	1e62      	subs	r2, r4, #1
 8001edc:	4194      	sbcs	r4, r2
 8001ede:	e66c      	b.n	8001bba <__aeabi_dsub+0xa6>
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	0752      	lsls	r2, r2, #29
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	464a      	mov	r2, r9
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	e7a6      	b.n	8001e3c <__aeabi_dsub+0x328>
 8001eee:	4cc6      	ldr	r4, [pc, #792]	; (8002208 <__aeabi_dsub+0x6f4>)
 8001ef0:	1c72      	adds	r2, r6, #1
 8001ef2:	4222      	tst	r2, r4
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_dsub+0x3e4>
 8001ef6:	e0ac      	b.n	8002052 <__aeabi_dsub+0x53e>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	431a      	orrs	r2, r3
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	d000      	beq.n	8001f02 <__aeabi_dsub+0x3ee>
 8001f00:	e105      	b.n	800210e <__aeabi_dsub+0x5fa>
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x3f4>
 8001f06:	e156      	b.n	80021b6 <__aeabi_dsub+0x6a2>
 8001f08:	003a      	movs	r2, r7
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x3fc>
 8001f0e:	e0db      	b.n	80020c8 <__aeabi_dsub+0x5b4>
 8001f10:	181c      	adds	r4, r3, r0
 8001f12:	429c      	cmp	r4, r3
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	444f      	add	r7, r9
 8001f18:	46ba      	mov	sl, r7
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	449a      	add	sl, r3
 8001f1e:	4653      	mov	r3, sl
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	d400      	bmi.n	8001f26 <__aeabi_dsub+0x412>
 8001f24:	e780      	b.n	8001e28 <__aeabi_dsub+0x314>
 8001f26:	4652      	mov	r2, sl
 8001f28:	4bb6      	ldr	r3, [pc, #728]	; (8002204 <__aeabi_dsub+0x6f0>)
 8001f2a:	2601      	movs	r6, #1
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	4692      	mov	sl, r2
 8001f30:	e77a      	b.n	8001e28 <__aeabi_dsub+0x314>
 8001f32:	4cb3      	ldr	r4, [pc, #716]	; (8002200 <__aeabi_dsub+0x6ec>)
 8001f34:	42a2      	cmp	r2, r4
 8001f36:	d100      	bne.n	8001f3a <__aeabi_dsub+0x426>
 8001f38:	e0c0      	b.n	80020bc <__aeabi_dsub+0x5a8>
 8001f3a:	2480      	movs	r4, #128	; 0x80
 8001f3c:	464d      	mov	r5, r9
 8001f3e:	0424      	lsls	r4, r4, #16
 8001f40:	4325      	orrs	r5, r4
 8001f42:	46a9      	mov	r9, r5
 8001f44:	4664      	mov	r4, ip
 8001f46:	2c38      	cmp	r4, #56	; 0x38
 8001f48:	dc53      	bgt.n	8001ff2 <__aeabi_dsub+0x4de>
 8001f4a:	4661      	mov	r1, ip
 8001f4c:	2c1f      	cmp	r4, #31
 8001f4e:	dd00      	ble.n	8001f52 <__aeabi_dsub+0x43e>
 8001f50:	e0cd      	b.n	80020ee <__aeabi_dsub+0x5da>
 8001f52:	2520      	movs	r5, #32
 8001f54:	001e      	movs	r6, r3
 8001f56:	1b2d      	subs	r5, r5, r4
 8001f58:	464c      	mov	r4, r9
 8001f5a:	40ab      	lsls	r3, r5
 8001f5c:	40ac      	lsls	r4, r5
 8001f5e:	40ce      	lsrs	r6, r1
 8001f60:	1e5d      	subs	r5, r3, #1
 8001f62:	41ab      	sbcs	r3, r5
 8001f64:	4334      	orrs	r4, r6
 8001f66:	4323      	orrs	r3, r4
 8001f68:	464c      	mov	r4, r9
 8001f6a:	40cc      	lsrs	r4, r1
 8001f6c:	1b3f      	subs	r7, r7, r4
 8001f6e:	e045      	b.n	8001ffc <__aeabi_dsub+0x4e8>
 8001f70:	464a      	mov	r2, r9
 8001f72:	1a1c      	subs	r4, r3, r0
 8001f74:	1bd1      	subs	r1, r2, r7
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	4252      	negs	r2, r2
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	000a      	movs	r2, r1
 8001f80:	4651      	mov	r1, sl
 8001f82:	1a52      	subs	r2, r2, r1
 8001f84:	4692      	mov	sl, r2
 8001f86:	0212      	lsls	r2, r2, #8
 8001f88:	d500      	bpl.n	8001f8c <__aeabi_dsub+0x478>
 8001f8a:	e083      	b.n	8002094 <__aeabi_dsub+0x580>
 8001f8c:	4653      	mov	r3, sl
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x480>
 8001f92:	e621      	b.n	8001bd8 <__aeabi_dsub+0xc4>
 8001f94:	2200      	movs	r2, #0
 8001f96:	2500      	movs	r5, #0
 8001f98:	e753      	b.n	8001e42 <__aeabi_dsub+0x32e>
 8001f9a:	181c      	adds	r4, r3, r0
 8001f9c:	429c      	cmp	r4, r3
 8001f9e:	419b      	sbcs	r3, r3
 8001fa0:	444f      	add	r7, r9
 8001fa2:	46ba      	mov	sl, r7
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	449a      	add	sl, r3
 8001fa8:	4653      	mov	r3, sl
 8001faa:	2601      	movs	r6, #1
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	d400      	bmi.n	8001fb2 <__aeabi_dsub+0x49e>
 8001fb0:	e73a      	b.n	8001e28 <__aeabi_dsub+0x314>
 8001fb2:	2602      	movs	r6, #2
 8001fb4:	4652      	mov	r2, sl
 8001fb6:	4b93      	ldr	r3, [pc, #588]	; (8002204 <__aeabi_dsub+0x6f0>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	401a      	ands	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	4021      	ands	r1, r4
 8001fc0:	0862      	lsrs	r2, r4, #1
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	07dc      	lsls	r4, r3, #31
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	469a      	mov	sl, r3
 8001fca:	4314      	orrs	r4, r2
 8001fcc:	e62c      	b.n	8001c28 <__aeabi_dsub+0x114>
 8001fce:	0039      	movs	r1, r7
 8001fd0:	3a20      	subs	r2, #32
 8001fd2:	40d1      	lsrs	r1, r2
 8001fd4:	4662      	mov	r2, ip
 8001fd6:	2a20      	cmp	r2, #32
 8001fd8:	d006      	beq.n	8001fe8 <__aeabi_dsub+0x4d4>
 8001fda:	4664      	mov	r4, ip
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	1b12      	subs	r2, r2, r4
 8001fe0:	003c      	movs	r4, r7
 8001fe2:	4094      	lsls	r4, r2
 8001fe4:	4304      	orrs	r4, r0
 8001fe6:	9401      	str	r4, [sp, #4]
 8001fe8:	9c01      	ldr	r4, [sp, #4]
 8001fea:	1e62      	subs	r2, r4, #1
 8001fec:	4194      	sbcs	r4, r2
 8001fee:	430c      	orrs	r4, r1
 8001ff0:	e5e3      	b.n	8001bba <__aeabi_dsub+0xa6>
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	4319      	orrs	r1, r3
 8001ff6:	000b      	movs	r3, r1
 8001ff8:	1e5c      	subs	r4, r3, #1
 8001ffa:	41a3      	sbcs	r3, r4
 8001ffc:	1ac4      	subs	r4, r0, r3
 8001ffe:	42a0      	cmp	r0, r4
 8002000:	419b      	sbcs	r3, r3
 8002002:	425b      	negs	r3, r3
 8002004:	1afb      	subs	r3, r7, r3
 8002006:	469a      	mov	sl, r3
 8002008:	465d      	mov	r5, fp
 800200a:	0016      	movs	r6, r2
 800200c:	e5dc      	b.n	8001bc8 <__aeabi_dsub+0xb4>
 800200e:	4649      	mov	r1, r9
 8002010:	4319      	orrs	r1, r3
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x502>
 8002014:	e0ae      	b.n	8002174 <__aeabi_dsub+0x660>
 8002016:	4661      	mov	r1, ip
 8002018:	4664      	mov	r4, ip
 800201a:	3901      	subs	r1, #1
 800201c:	2c01      	cmp	r4, #1
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x50e>
 8002020:	e0e0      	b.n	80021e4 <__aeabi_dsub+0x6d0>
 8002022:	4c77      	ldr	r4, [pc, #476]	; (8002200 <__aeabi_dsub+0x6ec>)
 8002024:	45a4      	cmp	ip, r4
 8002026:	d056      	beq.n	80020d6 <__aeabi_dsub+0x5c2>
 8002028:	468c      	mov	ip, r1
 800202a:	e69a      	b.n	8001d62 <__aeabi_dsub+0x24e>
 800202c:	4661      	mov	r1, ip
 800202e:	2220      	movs	r2, #32
 8002030:	003c      	movs	r4, r7
 8002032:	1a52      	subs	r2, r2, r1
 8002034:	4094      	lsls	r4, r2
 8002036:	0001      	movs	r1, r0
 8002038:	4090      	lsls	r0, r2
 800203a:	46a0      	mov	r8, r4
 800203c:	4664      	mov	r4, ip
 800203e:	1e42      	subs	r2, r0, #1
 8002040:	4190      	sbcs	r0, r2
 8002042:	4662      	mov	r2, ip
 8002044:	40e1      	lsrs	r1, r4
 8002046:	4644      	mov	r4, r8
 8002048:	40d7      	lsrs	r7, r2
 800204a:	430c      	orrs	r4, r1
 800204c:	4304      	orrs	r4, r0
 800204e:	44b9      	add	r9, r7
 8002050:	e701      	b.n	8001e56 <__aeabi_dsub+0x342>
 8002052:	496b      	ldr	r1, [pc, #428]	; (8002200 <__aeabi_dsub+0x6ec>)
 8002054:	428a      	cmp	r2, r1
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x546>
 8002058:	e70c      	b.n	8001e74 <__aeabi_dsub+0x360>
 800205a:	1818      	adds	r0, r3, r0
 800205c:	4298      	cmp	r0, r3
 800205e:	419b      	sbcs	r3, r3
 8002060:	444f      	add	r7, r9
 8002062:	425b      	negs	r3, r3
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	07dc      	lsls	r4, r3, #31
 8002068:	0840      	lsrs	r0, r0, #1
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	469a      	mov	sl, r3
 800206e:	0016      	movs	r6, r2
 8002070:	4304      	orrs	r4, r0
 8002072:	e6d9      	b.n	8001e28 <__aeabi_dsub+0x314>
 8002074:	2a00      	cmp	r2, #0
 8002076:	d000      	beq.n	800207a <__aeabi_dsub+0x566>
 8002078:	e081      	b.n	800217e <__aeabi_dsub+0x66a>
 800207a:	003b      	movs	r3, r7
 800207c:	4303      	orrs	r3, r0
 800207e:	d11d      	bne.n	80020bc <__aeabi_dsub+0x5a8>
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	2500      	movs	r5, #0
 8002084:	0312      	lsls	r2, r2, #12
 8002086:	e70b      	b.n	8001ea0 <__aeabi_dsub+0x38c>
 8002088:	08c0      	lsrs	r0, r0, #3
 800208a:	077b      	lsls	r3, r7, #29
 800208c:	465d      	mov	r5, fp
 800208e:	4303      	orrs	r3, r0
 8002090:	08fa      	lsrs	r2, r7, #3
 8002092:	e6d3      	b.n	8001e3c <__aeabi_dsub+0x328>
 8002094:	1ac4      	subs	r4, r0, r3
 8002096:	42a0      	cmp	r0, r4
 8002098:	4180      	sbcs	r0, r0
 800209a:	464b      	mov	r3, r9
 800209c:	4240      	negs	r0, r0
 800209e:	1aff      	subs	r7, r7, r3
 80020a0:	1a3b      	subs	r3, r7, r0
 80020a2:	469a      	mov	sl, r3
 80020a4:	465d      	mov	r5, fp
 80020a6:	e597      	b.n	8001bd8 <__aeabi_dsub+0xc4>
 80020a8:	1a1c      	subs	r4, r3, r0
 80020aa:	464a      	mov	r2, r9
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	419b      	sbcs	r3, r3
 80020b0:	1bd7      	subs	r7, r2, r7
 80020b2:	425b      	negs	r3, r3
 80020b4:	1afb      	subs	r3, r7, r3
 80020b6:	469a      	mov	sl, r3
 80020b8:	2601      	movs	r6, #1
 80020ba:	e585      	b.n	8001bc8 <__aeabi_dsub+0xb4>
 80020bc:	08c0      	lsrs	r0, r0, #3
 80020be:	077b      	lsls	r3, r7, #29
 80020c0:	465d      	mov	r5, fp
 80020c2:	4303      	orrs	r3, r0
 80020c4:	08fa      	lsrs	r2, r7, #3
 80020c6:	e6e7      	b.n	8001e98 <__aeabi_dsub+0x384>
 80020c8:	464a      	mov	r2, r9
 80020ca:	08db      	lsrs	r3, r3, #3
 80020cc:	0752      	lsls	r2, r2, #29
 80020ce:	4313      	orrs	r3, r2
 80020d0:	464a      	mov	r2, r9
 80020d2:	08d2      	lsrs	r2, r2, #3
 80020d4:	e6b5      	b.n	8001e42 <__aeabi_dsub+0x32e>
 80020d6:	08c0      	lsrs	r0, r0, #3
 80020d8:	077b      	lsls	r3, r7, #29
 80020da:	4303      	orrs	r3, r0
 80020dc:	08fa      	lsrs	r2, r7, #3
 80020de:	e6db      	b.n	8001e98 <__aeabi_dsub+0x384>
 80020e0:	4649      	mov	r1, r9
 80020e2:	4319      	orrs	r1, r3
 80020e4:	000b      	movs	r3, r1
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	418b      	sbcs	r3, r1
 80020ea:	001c      	movs	r4, r3
 80020ec:	e653      	b.n	8001d96 <__aeabi_dsub+0x282>
 80020ee:	464d      	mov	r5, r9
 80020f0:	3c20      	subs	r4, #32
 80020f2:	40e5      	lsrs	r5, r4
 80020f4:	2920      	cmp	r1, #32
 80020f6:	d005      	beq.n	8002104 <__aeabi_dsub+0x5f0>
 80020f8:	2440      	movs	r4, #64	; 0x40
 80020fa:	1a64      	subs	r4, r4, r1
 80020fc:	4649      	mov	r1, r9
 80020fe:	40a1      	lsls	r1, r4
 8002100:	430b      	orrs	r3, r1
 8002102:	4698      	mov	r8, r3
 8002104:	4643      	mov	r3, r8
 8002106:	1e5c      	subs	r4, r3, #1
 8002108:	41a3      	sbcs	r3, r4
 800210a:	432b      	orrs	r3, r5
 800210c:	e776      	b.n	8001ffc <__aeabi_dsub+0x4e8>
 800210e:	2a00      	cmp	r2, #0
 8002110:	d0e1      	beq.n	80020d6 <__aeabi_dsub+0x5c2>
 8002112:	003a      	movs	r2, r7
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	4302      	orrs	r2, r0
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x608>
 800211a:	e6b8      	b.n	8001e8e <__aeabi_dsub+0x37a>
 800211c:	464a      	mov	r2, r9
 800211e:	0752      	lsls	r2, r2, #29
 8002120:	2480      	movs	r4, #128	; 0x80
 8002122:	4313      	orrs	r3, r2
 8002124:	464a      	mov	r2, r9
 8002126:	0324      	lsls	r4, r4, #12
 8002128:	08d2      	lsrs	r2, r2, #3
 800212a:	4222      	tst	r2, r4
 800212c:	d007      	beq.n	800213e <__aeabi_dsub+0x62a>
 800212e:	08fe      	lsrs	r6, r7, #3
 8002130:	4226      	tst	r6, r4
 8002132:	d104      	bne.n	800213e <__aeabi_dsub+0x62a>
 8002134:	465d      	mov	r5, fp
 8002136:	0032      	movs	r2, r6
 8002138:	08c3      	lsrs	r3, r0, #3
 800213a:	077f      	lsls	r7, r7, #29
 800213c:	433b      	orrs	r3, r7
 800213e:	0f59      	lsrs	r1, r3, #29
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	0749      	lsls	r1, r1, #29
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	430b      	orrs	r3, r1
 8002148:	e6a6      	b.n	8001e98 <__aeabi_dsub+0x384>
 800214a:	1ac4      	subs	r4, r0, r3
 800214c:	42a0      	cmp	r0, r4
 800214e:	4180      	sbcs	r0, r0
 8002150:	464b      	mov	r3, r9
 8002152:	4240      	negs	r0, r0
 8002154:	1aff      	subs	r7, r7, r3
 8002156:	1a3b      	subs	r3, r7, r0
 8002158:	469a      	mov	sl, r3
 800215a:	465d      	mov	r5, fp
 800215c:	2601      	movs	r6, #1
 800215e:	e533      	b.n	8001bc8 <__aeabi_dsub+0xb4>
 8002160:	003b      	movs	r3, r7
 8002162:	4303      	orrs	r3, r0
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x654>
 8002166:	e715      	b.n	8001f94 <__aeabi_dsub+0x480>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e666      	b.n	8001e42 <__aeabi_dsub+0x32e>
 8002174:	08c0      	lsrs	r0, r0, #3
 8002176:	077b      	lsls	r3, r7, #29
 8002178:	4303      	orrs	r3, r0
 800217a:	08fa      	lsrs	r2, r7, #3
 800217c:	e65e      	b.n	8001e3c <__aeabi_dsub+0x328>
 800217e:	003a      	movs	r2, r7
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	4302      	orrs	r2, r0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x674>
 8002186:	e682      	b.n	8001e8e <__aeabi_dsub+0x37a>
 8002188:	464a      	mov	r2, r9
 800218a:	0752      	lsls	r2, r2, #29
 800218c:	2480      	movs	r4, #128	; 0x80
 800218e:	4313      	orrs	r3, r2
 8002190:	464a      	mov	r2, r9
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	08d2      	lsrs	r2, r2, #3
 8002196:	4222      	tst	r2, r4
 8002198:	d007      	beq.n	80021aa <__aeabi_dsub+0x696>
 800219a:	08fe      	lsrs	r6, r7, #3
 800219c:	4226      	tst	r6, r4
 800219e:	d104      	bne.n	80021aa <__aeabi_dsub+0x696>
 80021a0:	465d      	mov	r5, fp
 80021a2:	0032      	movs	r2, r6
 80021a4:	08c3      	lsrs	r3, r0, #3
 80021a6:	077f      	lsls	r7, r7, #29
 80021a8:	433b      	orrs	r3, r7
 80021aa:	0f59      	lsrs	r1, r3, #29
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	0749      	lsls	r1, r1, #29
 80021b2:	430b      	orrs	r3, r1
 80021b4:	e670      	b.n	8001e98 <__aeabi_dsub+0x384>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e640      	b.n	8001e42 <__aeabi_dsub+0x32e>
 80021c0:	464c      	mov	r4, r9
 80021c2:	3920      	subs	r1, #32
 80021c4:	40cc      	lsrs	r4, r1
 80021c6:	4661      	mov	r1, ip
 80021c8:	2920      	cmp	r1, #32
 80021ca:	d006      	beq.n	80021da <__aeabi_dsub+0x6c6>
 80021cc:	4666      	mov	r6, ip
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	1b89      	subs	r1, r1, r6
 80021d2:	464e      	mov	r6, r9
 80021d4:	408e      	lsls	r6, r1
 80021d6:	4333      	orrs	r3, r6
 80021d8:	4698      	mov	r8, r3
 80021da:	4643      	mov	r3, r8
 80021dc:	1e59      	subs	r1, r3, #1
 80021de:	418b      	sbcs	r3, r1
 80021e0:	431c      	orrs	r4, r3
 80021e2:	e5d8      	b.n	8001d96 <__aeabi_dsub+0x282>
 80021e4:	181c      	adds	r4, r3, r0
 80021e6:	4284      	cmp	r4, r0
 80021e8:	4180      	sbcs	r0, r0
 80021ea:	444f      	add	r7, r9
 80021ec:	46ba      	mov	sl, r7
 80021ee:	4240      	negs	r0, r0
 80021f0:	4482      	add	sl, r0
 80021f2:	e6d9      	b.n	8001fa8 <__aeabi_dsub+0x494>
 80021f4:	4653      	mov	r3, sl
 80021f6:	4323      	orrs	r3, r4
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x6e8>
 80021fa:	e6cb      	b.n	8001f94 <__aeabi_dsub+0x480>
 80021fc:	e614      	b.n	8001e28 <__aeabi_dsub+0x314>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	ff7fffff 	.word	0xff7fffff
 8002208:	000007fe 	.word	0x000007fe
 800220c:	2300      	movs	r3, #0
 800220e:	4a01      	ldr	r2, [pc, #4]	; (8002214 <__aeabi_dsub+0x700>)
 8002210:	001c      	movs	r4, r3
 8002212:	e529      	b.n	8001c68 <__aeabi_dsub+0x154>
 8002214:	000007ff 	.word	0x000007ff

08002218 <__aeabi_dcmpun>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	0005      	movs	r5, r0
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <__aeabi_dcmpun+0x38>)
 800221e:	031c      	lsls	r4, r3, #12
 8002220:	0016      	movs	r6, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	030a      	lsls	r2, r1, #12
 8002226:	0049      	lsls	r1, r1, #1
 8002228:	0b12      	lsrs	r2, r2, #12
 800222a:	0d49      	lsrs	r1, r1, #21
 800222c:	0b24      	lsrs	r4, r4, #12
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	4281      	cmp	r1, r0
 8002232:	d008      	beq.n	8002246 <__aeabi_dcmpun+0x2e>
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <__aeabi_dcmpun+0x38>)
 8002236:	2000      	movs	r0, #0
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <__aeabi_dcmpun+0x2c>
 800223c:	0020      	movs	r0, r4
 800223e:	4330      	orrs	r0, r6
 8002240:	1e43      	subs	r3, r0, #1
 8002242:	4198      	sbcs	r0, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	2001      	movs	r0, #1
 8002248:	432a      	orrs	r2, r5
 800224a:	d1fb      	bne.n	8002244 <__aeabi_dcmpun+0x2c>
 800224c:	e7f2      	b.n	8002234 <__aeabi_dcmpun+0x1c>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	000007ff 	.word	0x000007ff

08002254 <__aeabi_d2iz>:
 8002254:	000a      	movs	r2, r1
 8002256:	b530      	push	{r4, r5, lr}
 8002258:	4c13      	ldr	r4, [pc, #76]	; (80022a8 <__aeabi_d2iz+0x54>)
 800225a:	0053      	lsls	r3, r2, #1
 800225c:	0309      	lsls	r1, r1, #12
 800225e:	0005      	movs	r5, r0
 8002260:	0b09      	lsrs	r1, r1, #12
 8002262:	2000      	movs	r0, #0
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	0fd2      	lsrs	r2, r2, #31
 8002268:	42a3      	cmp	r3, r4
 800226a:	dd04      	ble.n	8002276 <__aeabi_d2iz+0x22>
 800226c:	480f      	ldr	r0, [pc, #60]	; (80022ac <__aeabi_d2iz+0x58>)
 800226e:	4283      	cmp	r3, r0
 8002270:	dd02      	ble.n	8002278 <__aeabi_d2iz+0x24>
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <__aeabi_d2iz+0x5c>)
 8002274:	18d0      	adds	r0, r2, r3
 8002276:	bd30      	pop	{r4, r5, pc}
 8002278:	2080      	movs	r0, #128	; 0x80
 800227a:	0340      	lsls	r0, r0, #13
 800227c:	4301      	orrs	r1, r0
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <__aeabi_d2iz+0x60>)
 8002280:	1ac0      	subs	r0, r0, r3
 8002282:	281f      	cmp	r0, #31
 8002284:	dd08      	ble.n	8002298 <__aeabi_d2iz+0x44>
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <__aeabi_d2iz+0x64>)
 8002288:	1ac3      	subs	r3, r0, r3
 800228a:	40d9      	lsrs	r1, r3
 800228c:	000b      	movs	r3, r1
 800228e:	4258      	negs	r0, r3
 8002290:	2a00      	cmp	r2, #0
 8002292:	d1f0      	bne.n	8002276 <__aeabi_d2iz+0x22>
 8002294:	0018      	movs	r0, r3
 8002296:	e7ee      	b.n	8002276 <__aeabi_d2iz+0x22>
 8002298:	4c08      	ldr	r4, [pc, #32]	; (80022bc <__aeabi_d2iz+0x68>)
 800229a:	40c5      	lsrs	r5, r0
 800229c:	46a4      	mov	ip, r4
 800229e:	4463      	add	r3, ip
 80022a0:	4099      	lsls	r1, r3
 80022a2:	000b      	movs	r3, r1
 80022a4:	432b      	orrs	r3, r5
 80022a6:	e7f2      	b.n	800228e <__aeabi_d2iz+0x3a>
 80022a8:	000003fe 	.word	0x000003fe
 80022ac:	0000041d 	.word	0x0000041d
 80022b0:	7fffffff 	.word	0x7fffffff
 80022b4:	00000433 	.word	0x00000433
 80022b8:	00000413 	.word	0x00000413
 80022bc:	fffffbed 	.word	0xfffffbed

080022c0 <__aeabi_i2d>:
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d016      	beq.n	80022f4 <__aeabi_i2d+0x34>
 80022c6:	17c3      	asrs	r3, r0, #31
 80022c8:	18c5      	adds	r5, r0, r3
 80022ca:	405d      	eors	r5, r3
 80022cc:	0fc4      	lsrs	r4, r0, #31
 80022ce:	0028      	movs	r0, r5
 80022d0:	f000 f84c 	bl	800236c <__clzsi2>
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <__aeabi_i2d+0x5c>)
 80022d6:	1a1b      	subs	r3, r3, r0
 80022d8:	280a      	cmp	r0, #10
 80022da:	dc16      	bgt.n	800230a <__aeabi_i2d+0x4a>
 80022dc:	0002      	movs	r2, r0
 80022de:	002e      	movs	r6, r5
 80022e0:	3215      	adds	r2, #21
 80022e2:	4096      	lsls	r6, r2
 80022e4:	220b      	movs	r2, #11
 80022e6:	1a12      	subs	r2, r2, r0
 80022e8:	40d5      	lsrs	r5, r2
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	032d      	lsls	r5, r5, #12
 80022ee:	0b2d      	lsrs	r5, r5, #12
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	e003      	b.n	80022fc <__aeabi_i2d+0x3c>
 80022f4:	2400      	movs	r4, #0
 80022f6:	2300      	movs	r3, #0
 80022f8:	2500      	movs	r5, #0
 80022fa:	2600      	movs	r6, #0
 80022fc:	051b      	lsls	r3, r3, #20
 80022fe:	432b      	orrs	r3, r5
 8002300:	07e4      	lsls	r4, r4, #31
 8002302:	4323      	orrs	r3, r4
 8002304:	0030      	movs	r0, r6
 8002306:	0019      	movs	r1, r3
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	380b      	subs	r0, #11
 800230c:	4085      	lsls	r5, r0
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	032d      	lsls	r5, r5, #12
 8002312:	2600      	movs	r6, #0
 8002314:	0b2d      	lsrs	r5, r5, #12
 8002316:	0d5b      	lsrs	r3, r3, #21
 8002318:	e7f0      	b.n	80022fc <__aeabi_i2d+0x3c>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	0000041e 	.word	0x0000041e

08002320 <__aeabi_ui2d>:
 8002320:	b510      	push	{r4, lr}
 8002322:	1e04      	subs	r4, r0, #0
 8002324:	d010      	beq.n	8002348 <__aeabi_ui2d+0x28>
 8002326:	f000 f821 	bl	800236c <__clzsi2>
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <__aeabi_ui2d+0x48>)
 800232c:	1a1b      	subs	r3, r3, r0
 800232e:	280a      	cmp	r0, #10
 8002330:	dc11      	bgt.n	8002356 <__aeabi_ui2d+0x36>
 8002332:	220b      	movs	r2, #11
 8002334:	0021      	movs	r1, r4
 8002336:	1a12      	subs	r2, r2, r0
 8002338:	40d1      	lsrs	r1, r2
 800233a:	3015      	adds	r0, #21
 800233c:	030a      	lsls	r2, r1, #12
 800233e:	055b      	lsls	r3, r3, #21
 8002340:	4084      	lsls	r4, r0
 8002342:	0b12      	lsrs	r2, r2, #12
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	e001      	b.n	800234c <__aeabi_ui2d+0x2c>
 8002348:	2300      	movs	r3, #0
 800234a:	2200      	movs	r2, #0
 800234c:	051b      	lsls	r3, r3, #20
 800234e:	4313      	orrs	r3, r2
 8002350:	0020      	movs	r0, r4
 8002352:	0019      	movs	r1, r3
 8002354:	bd10      	pop	{r4, pc}
 8002356:	0022      	movs	r2, r4
 8002358:	380b      	subs	r0, #11
 800235a:	4082      	lsls	r2, r0
 800235c:	055b      	lsls	r3, r3, #21
 800235e:	0312      	lsls	r2, r2, #12
 8002360:	2400      	movs	r4, #0
 8002362:	0b12      	lsrs	r2, r2, #12
 8002364:	0d5b      	lsrs	r3, r3, #21
 8002366:	e7f1      	b.n	800234c <__aeabi_ui2d+0x2c>
 8002368:	0000041e 	.word	0x0000041e

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <__clzdi2>:
 80023a8:	b510      	push	{r4, lr}
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d103      	bne.n	80023b6 <__clzdi2+0xe>
 80023ae:	f7ff ffdd 	bl	800236c <__clzsi2>
 80023b2:	3020      	adds	r0, #32
 80023b4:	e002      	b.n	80023bc <__clzdi2+0x14>
 80023b6:	0008      	movs	r0, r1
 80023b8:	f7ff ffd8 	bl	800236c <__clzsi2>
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			; (mov r8, r8)

080023c0 <DistanceSensor_InputCaptureInterrupt>:
{
	HAL_TIM_IC_Stop_IT(sensor->timer, sensor->icTimerChannel);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	if (__HAL_TIM_GET_FLAG(sensor->timer, sensor->captureCompareFlag))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	7b92      	ldrb	r2, [r2, #14]
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	7b92      	ldrb	r2, [r2, #14]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13e      	bne.n	800245c <DistanceSensor_InputCaptureInterrupt+0x9c>
	{



		if (sensor->risingEdge) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7bdb      	ldrb	r3, [r3, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00f      	beq.n	8002406 <DistanceSensor_InputCaptureInterrupt+0x46>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, sensor->icTimerChannel); // First rising edge
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7b1b      	ldrb	r3, [r3, #12]
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f002 fe77 	bl	80050e4 <HAL_TIM_ReadCapturedValue>
 80023f6:	0003      	movs	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	809a      	strh	r2, [r3, #4]
			sensor->risingEdge = false;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	73da      	strb	r2, [r3, #15]
 8002404:	e02a      	b.n	800245c <DistanceSensor_InputCaptureInterrupt+0x9c>
		}
		else
		{
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, sensor->icTimerChannel); // Second rising edge
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7b1b      	ldrb	r3, [r3, #12]
 800240e:	0019      	movs	r1, r3
 8002410:	0010      	movs	r0, r2
 8002412:	f002 fe67 	bl	80050e4 <HAL_TIM_ReadCapturedValue>
 8002416:	0003      	movs	r3, r0
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	88da      	ldrh	r2, [r3, #6]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d909      	bls.n	800243e <DistanceSensor_InputCaptureInterrupt+0x7e>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	88db      	ldrh	r3, [r3, #6]
 800242e:	001a      	movs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	001a      	movs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e00b      	b.n	8002456 <DistanceSensor_InputCaptureInterrupt+0x96>
			}
			else {
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	889b      	ldrh	r3, [r3, #4]
 8002442:	001a      	movs	r2, r3
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	88d2      	ldrh	r2, [r2, #6]
 800244e:	189b      	adds	r3, r3, r2
 8002450:	001a      	movs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	609a      	str	r2, [r3, #8]
			}
			sensor->risingEdge = true;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	73da      	strb	r2, [r3, #15]
		}
	}

	HAL_TIM_OnePulse_Start(sensor->timer, sensor->ocTimerChannel);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7b5b      	ldrb	r3, [r3, #13]
 8002464:	0019      	movs	r1, r3
 8002466:	0010      	movs	r0, r2
 8002468:	f002 fb4d 	bl	8004b06 <HAL_TIM_OnePulse_Start>
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	05db      	lsls	r3, r3, #23
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_TIM_IC_CaptureCallback+0x24>
    {
    	DistanceSensor_InputCaptureInterrupt(&FrontDistanceSensor);
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff ff98 	bl	80023c0 <DistanceSensor_InputCaptureInterrupt>
    	DistanceSensor_InputCaptureInterrupt(&BackDistanceSensor);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x30>)
 8002492:	0018      	movs	r0, r3
 8002494:	f7ff ff94 	bl	80023c0 <DistanceSensor_InputCaptureInterrupt>
    }
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200003f4 	.word	0x200003f4
 80024a4:	20000404 	.word	0x20000404

080024a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ac:	f000 fd54 	bl	8002f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b0:	f000 f812 	bl	80024d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b4:	f000 fa04 	bl	80028c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024b8:	f000 f9e4 	bl	8002884 <MX_DMA_Init>
  MX_I2C1_Init();
 80024bc:	f000 f876 	bl	80025ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80024c0:	f000 f8b4 	bl	800262c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80024c4:	f000 f9ae 	bl	8002824 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024c8:	f000 f8e8 	bl	800269c <MX_TIM2_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  while (1)
  {
	  //sprintf(Data, "%u\r\n", 51);
	  //HAL_UART_Transmit(&huart1, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
	  HAL_Delay(500);
 80024cc:	23fa      	movs	r3, #250	; 0xfa
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 fdb1 	bl	8003038 <HAL_Delay>
 80024d6:	e7f9      	b.n	80024cc <main+0x24>

080024d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b09b      	sub	sp, #108	; 0x6c
 80024dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024de:	2434      	movs	r4, #52	; 0x34
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	0018      	movs	r0, r3
 80024e4:	2334      	movs	r3, #52	; 0x34
 80024e6:	001a      	movs	r2, r3
 80024e8:	2100      	movs	r1, #0
 80024ea:	f004 fc6b 	bl	8006dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ee:	2320      	movs	r3, #32
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	0018      	movs	r0, r3
 80024f4:	2314      	movs	r3, #20
 80024f6:	001a      	movs	r2, r3
 80024f8:	2100      	movs	r1, #0
 80024fa:	f004 fc63 	bl	8006dc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	0018      	movs	r0, r3
 8002502:	231c      	movs	r3, #28
 8002504:	001a      	movs	r2, r3
 8002506:	2100      	movs	r1, #0
 8002508:	f004 fc5c 	bl	8006dc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <SystemClock_Config+0xcc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <SystemClock_Config+0xd0>)
 8002512:	401a      	ands	r2, r3
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <SystemClock_Config+0xcc>)
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	0109      	lsls	r1, r1, #4
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251e:	0021      	movs	r1, r4
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2201      	movs	r2, #1
 800252a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2210      	movs	r2, #16
 8002530:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002538:	187b      	adds	r3, r7, r1
 800253a:	0018      	movs	r0, r3
 800253c:	f001 fa66 	bl	8003a0c <HAL_RCC_OscConfig>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002544:	f000 fa1c 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002548:	2120      	movs	r1, #32
 800254a:	187b      	adds	r3, r7, r1
 800254c:	220f      	movs	r2, #15
 800254e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2201      	movs	r2, #1
 8002554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2100      	movs	r1, #0
 800256c:	0018      	movs	r0, r3
 800256e:	f001 fdb7 	bl	80040e0 <HAL_RCC_ClockConfig>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d001      	beq.n	800257a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002576:	f000 fa03 	bl	8002980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2209      	movs	r2, #9
 800257e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	0018      	movs	r0, r3
 8002590:	f001 ffca 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d001      	beq.n	800259c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002598:	f000 f9f2 	bl	8002980 <Error_Handler>
  }
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b01b      	add	sp, #108	; 0x6c
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	40007000 	.word	0x40007000
 80025a8:	ffffe7ff 	.word	0xffffe7ff

080025ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <MX_I2C1_Init+0x74>)
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <MX_I2C1_Init+0x78>)
 80025b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <MX_I2C1_Init+0x74>)
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <MX_I2C1_Init+0x7c>)
 80025ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <MX_I2C1_Init+0x74>)
 80025be:	2220      	movs	r2, #32
 80025c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <MX_I2C1_Init+0x74>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_I2C1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <MX_I2C1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_I2C1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_I2C1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <MX_I2C1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_I2C1_Init+0x74>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f001 f8e1 	bl	80037b0 <HAL_I2C_Init>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025f2:	f000 f9c5 	bl	8002980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <MX_I2C1_Init+0x74>)
 80025f8:	2100      	movs	r1, #0
 80025fa:	0018      	movs	r0, r3
 80025fc:	f001 f96e 	bl	80038dc <HAL_I2CEx_ConfigAnalogFilter>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002604:	f000 f9bc 	bl	8002980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <MX_I2C1_Init+0x74>)
 800260a:	2100      	movs	r1, #0
 800260c:	0018      	movs	r0, r3
 800260e:	f001 f9b1 	bl	8003974 <HAL_I2CEx_ConfigDigitalFilter>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d001      	beq.n	800261a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002616:	f000 f9b3 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200001f0 	.word	0x200001f0
 8002624:	40005400 	.word	0x40005400
 8002628:	0010061a 	.word	0x0010061a

0800262c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_SPI1_Init+0x68>)
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <MX_SPI1_Init+0x6c>)
 8002634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_SPI1_Init+0x68>)
 8002638:	2282      	movs	r2, #130	; 0x82
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_SPI1_Init+0x68>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_SPI1_Init+0x68>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_SPI1_Init+0x68>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_SPI1_Init+0x68>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_SPI1_Init+0x68>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	02d2      	lsls	r2, r2, #11
 800265c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <MX_SPI1_Init+0x68>)
 8002660:	2210      	movs	r2, #16
 8002662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_SPI1_Init+0x68>)
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <MX_SPI1_Init+0x68>)
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_SPI1_Init+0x68>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <MX_SPI1_Init+0x68>)
 8002678:	2207      	movs	r2, #7
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <MX_SPI1_Init+0x68>)
 800267e:	0018      	movs	r0, r3
 8002680:	f002 f88c 	bl	800479c <HAL_SPI_Init>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002688:	f000 f97a 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	2000028c 	.word	0x2000028c
 8002698:	40013000 	.word	0x40013000

0800269c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a2:	2328      	movs	r3, #40	; 0x28
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	0018      	movs	r0, r3
 80026a8:	2310      	movs	r3, #16
 80026aa:	001a      	movs	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	f004 fb89 	bl	8006dc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b2:	2320      	movs	r3, #32
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	0018      	movs	r0, r3
 80026b8:	2308      	movs	r3, #8
 80026ba:	001a      	movs	r2, r3
 80026bc:	2100      	movs	r1, #0
 80026be:	f004 fb81 	bl	8006dc4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026c2:	2310      	movs	r3, #16
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	0018      	movs	r0, r3
 80026c8:	2310      	movs	r3, #16
 80026ca:	001a      	movs	r2, r3
 80026cc:	2100      	movs	r1, #0
 80026ce:	f004 fb79 	bl	8006dc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d2:	003b      	movs	r3, r7
 80026d4:	0018      	movs	r0, r3
 80026d6:	2310      	movs	r3, #16
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f004 fb72 	bl	8006dc4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e0:	4b4e      	ldr	r3, [pc, #312]	; (800281c <MX_TIM2_Init+0x180>)
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	05d2      	lsls	r2, r2, #23
 80026e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <MX_TIM2_Init+0x180>)
 80026ea:	221f      	movs	r2, #31
 80026ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <MX_TIM2_Init+0x180>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80026f4:	4b49      	ldr	r3, [pc, #292]	; (800281c <MX_TIM2_Init+0x180>)
 80026f6:	4a4a      	ldr	r2, [pc, #296]	; (8002820 <MX_TIM2_Init+0x184>)
 80026f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fa:	4b48      	ldr	r3, [pc, #288]	; (800281c <MX_TIM2_Init+0x180>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <MX_TIM2_Init+0x180>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002706:	4b45      	ldr	r3, [pc, #276]	; (800281c <MX_TIM2_Init+0x180>)
 8002708:	0018      	movs	r0, r3
 800270a:	f002 f8db 	bl	80048c4 <HAL_TIM_Base_Init>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002712:	f000 f935 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002716:	2128      	movs	r1, #40	; 0x28
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0152      	lsls	r2, r2, #5
 800271e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002720:	187a      	adds	r2, r7, r1
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <MX_TIM2_Init+0x180>)
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f002 fc08 	bl	8004f3c <HAL_TIM_ConfigClockSource>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002730:	f000 f926 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <MX_TIM2_Init+0x180>)
 8002736:	0018      	movs	r0, r3
 8002738:	f002 f94c 	bl	80049d4 <HAL_TIM_IC_Init>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002740:	f000 f91e 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <MX_TIM2_Init+0x180>)
 8002746:	0018      	movs	r0, r3
 8002748:	f002 f8fc 	bl	8004944 <HAL_TIM_OC_Init>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002750:	f000 f916 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <MX_TIM2_Init+0x180>)
 8002756:	2108      	movs	r1, #8
 8002758:	0018      	movs	r0, r3
 800275a:	f002 f983 	bl	8004a64 <HAL_TIM_OnePulse_Init>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002762:	f000 f90d 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002766:	2120      	movs	r1, #32
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002774:	187a      	adds	r2, r7, r1
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <MX_TIM2_Init+0x180>)
 8002778:	0011      	movs	r1, r2
 800277a:	0018      	movs	r0, r3
 800277c:	f003 f83a 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8002784:	f000 f8fc 	bl	8002980 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002788:	2110      	movs	r1, #16
 800278a:	187b      	adds	r3, r7, r1
 800278c:	220a      	movs	r2, #10
 800278e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2201      	movs	r2, #1
 8002794:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027a2:	1879      	adds	r1, r7, r1
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_TIM2_Init+0x180>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	0018      	movs	r0, r3
 80027aa:	f002 fb23 	bl	8004df4 <HAL_TIM_IC_ConfigChannel>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80027b2:	f000 f8e5 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80027b6:	003b      	movs	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027bc:	003b      	movs	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c2:	003b      	movs	r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c8:	003b      	movs	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ce:	0039      	movs	r1, r7
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_TIM2_Init+0x180>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	0018      	movs	r0, r3
 80027d6:	f002 fab4 	bl	8004d42 <HAL_TIM_OC_ConfigChannel>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM2_Init+0x146>
  {
    Error_Handler();
 80027de:	f000 f8cf 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80027e2:	2310      	movs	r3, #16
 80027e4:	18f9      	adds	r1, r7, r3
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <MX_TIM2_Init+0x180>)
 80027e8:	2208      	movs	r2, #8
 80027ea:	0018      	movs	r0, r3
 80027ec:	f002 fb02 	bl	8004df4 <HAL_TIM_IC_ConfigChannel>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM2_Init+0x15c>
  {
    Error_Handler();
 80027f4:	f000 f8c4 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027f8:	0039      	movs	r1, r7
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_TIM2_Init+0x180>)
 80027fc:	220c      	movs	r2, #12
 80027fe:	0018      	movs	r0, r3
 8002800:	f002 fa9f 	bl	8004d42 <HAL_TIM_OC_ConfigChannel>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <MX_TIM2_Init+0x170>
  {
    Error_Handler();
 8002808:	f000 f8ba 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <MX_TIM2_Init+0x180>)
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f9fe 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b00e      	add	sp, #56	; 0x38
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000032c 	.word	0x2000032c
 8002820:	0000ffff 	.word	0x0000ffff

08002824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_USART1_UART_Init+0x58>)
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <MX_USART1_UART_Init+0x5c>)
 800282c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002830:	22e1      	movs	r2, #225	; 0xe1
 8002832:	0252      	lsls	r2, r2, #9
 8002834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_USART1_UART_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_USART1_UART_Init+0x58>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_USART1_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <MX_USART1_UART_Init+0x58>)
 8002868:	0018      	movs	r0, r3
 800286a:	f003 f81b 	bl	80058a4 <HAL_UART_Init>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002872:	f000 f885 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000036c 	.word	0x2000036c
 8002880:	40013800 	.word	0x40013800

08002884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_DMA_Init+0x38>)
 800288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_DMA_Init+0x38>)
 8002890:	2101      	movs	r1, #1
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_DMA_Init+0x38>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	2201      	movs	r2, #1
 800289c:	4013      	ands	r3, r2
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	200a      	movs	r0, #10
 80028a8:	f000 fc96 	bl	80031d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80028ac:	200a      	movs	r0, #10
 80028ae:	f000 fca8 	bl	8003202 <HAL_NVIC_EnableIRQ>

}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40021000 	.word	0x40021000

080028c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c6:	240c      	movs	r4, #12
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	0018      	movs	r0, r3
 80028cc:	2314      	movs	r3, #20
 80028ce:	001a      	movs	r2, r3
 80028d0:	2100      	movs	r1, #0
 80028d2:	f004 fa77 	bl	8006dc4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e2:	4b25      	ldr	r3, [pc, #148]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	2201      	movs	r2, #1
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028f4:	2102      	movs	r1, #2
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <MX_GPIO_Init+0xb8>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <MX_GPIO_Init+0xbc>)
 8002908:	2200      	movs	r2, #0
 800290a:	210a      	movs	r1, #10
 800290c:	0018      	movs	r0, r3
 800290e:	f000 ff31 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 8002912:	2399      	movs	r3, #153	; 0x99
 8002914:	0219      	lsls	r1, r3, #8
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	2200      	movs	r2, #0
 800291c:	0018      	movs	r0, r3
 800291e:	f000 ff29 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D7_Pin;
 8002922:	193b      	adds	r3, r7, r4
 8002924:	220a      	movs	r2, #10
 8002926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	193b      	adds	r3, r7, r4
 800292a:	2201      	movs	r2, #1
 800292c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	193b      	adds	r3, r7, r4
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <MX_GPIO_Init+0xbc>)
 800293e:	0019      	movs	r1, r3
 8002940:	0010      	movs	r0, r2
 8002942:	f000 fda1 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin;
 8002946:	0021      	movs	r1, r4
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2299      	movs	r2, #153	; 0x99
 800294c:	0212      	lsls	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2201      	movs	r2, #1
 8002954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	187a      	adds	r2, r7, r1
 8002964:	23a0      	movs	r3, #160	; 0xa0
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fd8c 	bl	8003488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b009      	add	sp, #36	; 0x24
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	50000400 	.word	0x50000400

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	e7fe      	b.n	8002988 <Error_Handler+0x8>
	...

0800298c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_MspInit+0x24>)
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_MspInit+0x24>)
 8002996:	2101      	movs	r1, #1
 8002998:	430a      	orrs	r2, r1
 800299a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_MspInit+0x24>)
 800299e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_MspInit+0x24>)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0549      	lsls	r1, r1, #21
 80029a6:	430a      	orrs	r2, r1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	240c      	movs	r4, #12
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2314      	movs	r3, #20
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f004 f9fc 	bl	8006dc4 <memset>
  if(hi2c->Instance==I2C1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_I2C_MspInit+0xd4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d154      	bne.n	8002a80 <HAL_I2C_MspInit+0xcc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_I2C_MspInit+0xd8>)
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_I2C_MspInit+0xd8>)
 80029dc:	2102      	movs	r1, #2
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_I2C_MspInit+0xd8>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ee:	0021      	movs	r1, r4
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	22c0      	movs	r2, #192	; 0xc0
 80029f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2212      	movs	r2, #18
 80029fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2203      	movs	r2, #3
 8002a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_I2C_MspInit+0xdc>)
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f000 fd37 	bl	8003488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_I2C_MspInit+0xd8>)
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_I2C_MspInit+0xd8>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0389      	lsls	r1, r1, #14
 8002a24:	430a      	orrs	r2, r1
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_I2C_MspInit+0xe4>)
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a30:	2206      	movs	r2, #6
 8002a32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	0052      	lsls	r2, r2, #1
 8002a4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	00d2      	lsls	r2, r2, #3
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0192      	lsls	r2, r2, #6
 8002a62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fbe8 	bl	800323c <HAL_DMA_Init>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8002a70:	f7ff ff86 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_I2C_MspInit+0xe0>)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b009      	add	sp, #36	; 0x24
 8002a86:	bd90      	pop	{r4, r7, pc}
 8002a88:	40005400 	.word	0x40005400
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	50000400 	.word	0x50000400
 8002a94:	20000244 	.word	0x20000244
 8002a98:	40020030 	.word	0x40020030

08002a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	240c      	movs	r4, #12
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	2314      	movs	r3, #20
 8002aac:	001a      	movs	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f004 f988 	bl	8006dc4 <memset>
  if(hspi->Instance==SPI1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2c      	ldr	r2, [pc, #176]	; (8002b6c <HAL_SPI_MspInit+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d152      	bne.n	8002b64 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_SPI_MspInit+0xd4>)
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_SPI_MspInit+0xd4>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	0149      	lsls	r1, r1, #5
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_SPI_MspInit+0xd4>)
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_SPI_MspInit+0xd4>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_SPI_MspInit+0xd4>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ae4:	0021      	movs	r1, r4
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	22f0      	movs	r2, #240	; 0xf0
 8002aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2202      	movs	r2, #2
 8002af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2203      	movs	r2, #3
 8002afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	187a      	adds	r2, r7, r1
 8002b06:	23a0      	movs	r3, #160	; 0xa0
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fcbb 	bl	8003488 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_SPI_MspInit+0xdc>)
 8002b16:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fb76 	bl	800323c <HAL_DMA_Init>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002b54:	f7ff ff14 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_SPI_MspInit+0xd8>)
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b009      	add	sp, #36	; 0x24
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	200002e4 	.word	0x200002e4
 8002b78:	4002001c 	.word	0x4002001c

08002b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	240c      	movs	r4, #12
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	0018      	movs	r0, r3
 8002b8a:	2314      	movs	r3, #20
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f004 f918 	bl	8006dc4 <memset>
  if(htim_base->Instance==TIM2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	05db      	lsls	r3, r3, #23
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d130      	bne.n	8002c02 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_TIM_Base_MspInit+0x90>)
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_TIM_Base_MspInit+0x90>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_TIM_Base_MspInit+0x90>)
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_TIM_Base_MspInit+0x90>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_TIM_Base_MspInit+0x90>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin|DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8002bc4:	0021      	movs	r1, r4
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2205      	movs	r2, #5
 8002bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2202      	movs	r2, #2
 8002bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2202      	movs	r2, #2
 8002be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	187a      	adds	r2, r7, r1
 8002be6:	23a0      	movs	r3, #160	; 0xa0
 8002be8:	05db      	lsls	r3, r3, #23
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fc4b 	bl	8003488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	200f      	movs	r0, #15
 8002bf8:	f000 faee 	bl	80031d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bfc:	200f      	movs	r0, #15
 8002bfe:	f000 fb00 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b009      	add	sp, #36	; 0x24
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	240c      	movs	r4, #12
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	2314      	movs	r3, #20
 8002c20:	001a      	movs	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	f004 f8ce 	bl	8006dc4 <memset>
  if(htim->Instance==TIM2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	05db      	lsls	r3, r3, #23
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d122      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <HAL_TIM_MspPostInit+0x74>)
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_TIM_MspPostInit+0x74>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_TIM_MspPostInit+0x74>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin|DISTANCE_SENSOR_BACK_PULSE_Pin;
 8002c4c:	0021      	movs	r1, r4
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	220a      	movs	r2, #10
 8002c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2202      	movs	r2, #2
 8002c58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2202      	movs	r2, #2
 8002c6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	187a      	adds	r2, r7, r1
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fc07 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b009      	add	sp, #36	; 0x24
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	240c      	movs	r4, #12
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	0018      	movs	r0, r3
 8002c96:	2314      	movs	r3, #20
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f004 f892 	bl	8006dc4 <memset>
  if(huart->Instance==USART1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_UART_MspInit+0x80>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12a      	bne.n	8002d00 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_UART_MspInit+0x84>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_UART_MspInit+0x84>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	01c9      	lsls	r1, r1, #7
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <HAL_UART_MspInit+0x84>)
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <HAL_UART_MspInit+0x84>)
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_UART_MspInit+0x84>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	22c0      	movs	r2, #192	; 0xc0
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	0021      	movs	r1, r4
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2202      	movs	r2, #2
 8002cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2204      	movs	r2, #4
 8002cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	187a      	adds	r2, r7, r1
 8002cf4:	23a0      	movs	r3, #160	; 0xa0
 8002cf6:	05db      	lsls	r3, r3, #23
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 fbc4 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b009      	add	sp, #36	; 0x24
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d14:	e7fe      	b.n	8002d14 <NMI_Handler+0x4>

08002d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <HardFault_Handler+0x4>

08002d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d34:	f000 f964 	bl	8003000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 faf0 	bl	800332c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 faec 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	200002e4 	.word	0x200002e4
 8002d60:	20000244 	.word	0x20000244

08002d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <TIM2_IRQHandler+0x14>)
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f001 ff01 	bl	8004b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	2000032c 	.word	0x2000032c

08002d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_kill>:

int _kill(int pid, int sig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d92:	f004 f871 	bl	8006e78 <__errno>
 8002d96:	0003      	movs	r3, r0
 8002d98:	2216      	movs	r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	425b      	negs	r3, r3
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_exit>:

void _exit (int status)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db0:	2301      	movs	r3, #1
 8002db2:	425a      	negs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff ffe5 	bl	8002d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dbe:	e7fe      	b.n	8002dbe <_exit+0x16>

08002dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e00a      	b.n	8002de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd2:	e000      	b.n	8002dd6 <_read+0x16>
 8002dd4:	bf00      	nop
 8002dd6:	0001      	movs	r1, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	60ba      	str	r2, [r7, #8]
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf0      	blt.n	8002dd2 <_read+0x12>
  }

  return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b006      	add	sp, #24
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e009      	b.n	8002e20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	60ba      	str	r2, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	0018      	movs	r0, r3
 8002e16:	e000      	b.n	8002e1a <_write+0x20>
 8002e18:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf1      	blt.n	8002e0c <_write+0x12>
  }
  return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b006      	add	sp, #24
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_close>:

int _close(int file)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	425b      	negs	r3, r3
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	0192      	lsls	r2, r2, #6
 8002e56:	605a      	str	r2, [r3, #4]
  return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_isatty>:

int _isatty(int file)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <_sbrk+0x5c>)
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <_sbrk+0x60>)
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <_sbrk+0x64>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <_sbrk+0x68>)
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d207      	bcs.n	8002ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ebc:	f003 ffdc 	bl	8006e78 <__errno>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	425b      	negs	r3, r3
 8002eca:	e009      	b.n	8002ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	18d2      	adds	r2, r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <_sbrk+0x64>)
 8002edc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20002000 	.word	0x20002000
 8002eec:	00000400 	.word	0x00000400
 8002ef0:	20000414 	.word	0x20000414
 8002ef4:	20000568 	.word	0x20000568

08002ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002f06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f08:	f7ff fff6 	bl	8002ef8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <LoopForever+0xe>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f24:	4c0a      	ldr	r4, [pc, #40]	; (8002f50 <LoopForever+0x16>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f32:	f003 ffa7 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f36:	f7ff fab7 	bl	80024a8 <main>

08002f3a <LoopForever>:

LoopForever:
    b LoopForever
 8002f3a:	e7fe      	b.n	8002f3a <LoopForever>
   ldr   r0, =_estack
 8002f3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002f48:	080091cc 	.word	0x080091cc
  ldr r2, =_sbss
 8002f4c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002f50:	20000568 	.word	0x20000568

08002f54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC1_COMP_IRQHandler>
	...

08002f58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x3c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_Init+0x3c>)
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 f811 	bl	8002f98 <HAL_InitTick>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e001      	b.n	8002f86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f82:	f7ff fd03 	bl	800298c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_InitTick+0x5c>)
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_InitTick+0x60>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	0019      	movs	r1, r3
 8002faa:	23fa      	movs	r3, #250	; 0xfa
 8002fac:	0098      	lsls	r0, r3, #2
 8002fae:	f7fd f8c7 	bl	8000140 <__udivsi3>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f7fd f8c2 	bl	8000140 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f92f 	bl	8003222 <HAL_SYSTICK_Config>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e00f      	b.n	8002fec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d80b      	bhi.n	8002fea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f8fc 	bl	80031d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_InitTick+0x64>)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b003      	add	sp, #12
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_IncTick+0x1c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	001a      	movs	r2, r3
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_IncTick+0x20>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	18d2      	adds	r2, r2, r3
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_IncTick+0x20>)
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000008 	.word	0x20000008
 8003020:	20000418 	.word	0x20000418

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_GetTick+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000418 	.word	0x20000418

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fff0 	bl	8003024 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	001a      	movs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	189b      	adds	r3, r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	f7ff ffe0 	bl	8003024 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	20000008 	.word	0x20000008

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	0002      	movs	r2, r0
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b7f      	cmp	r3, #127	; 0x7f
 8003092:	d809      	bhi.n	80030a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	001a      	movs	r2, r3
 800309a:	231f      	movs	r3, #31
 800309c:	401a      	ands	r2, r3
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__NVIC_EnableIRQ+0x30>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	4091      	lsls	r1, r2
 80030a4:	000a      	movs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
  }
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	0002      	movs	r2, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b7f      	cmp	r3, #127	; 0x7f
 80030c8:	d828      	bhi.n	800311c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ca:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <__NVIC_SetPriority+0xd4>)
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	33c0      	adds	r3, #192	; 0xc0
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	589b      	ldr	r3, [r3, r2]
 80030da:	1dfa      	adds	r2, r7, #7
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	0011      	movs	r1, r2
 80030e0:	2203      	movs	r2, #3
 80030e2:	400a      	ands	r2, r1
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	21ff      	movs	r1, #255	; 0xff
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	22ff      	movs	r2, #255	; 0xff
 80030f8:	401a      	ands	r2, r3
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0018      	movs	r0, r3
 8003100:	2303      	movs	r3, #3
 8003102:	4003      	ands	r3, r0
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <__NVIC_SetPriority+0xd4>)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b25b      	sxtb	r3, r3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	430a      	orrs	r2, r1
 8003114:	33c0      	adds	r3, #192	; 0xc0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800311a:	e031      	b.n	8003180 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <__NVIC_SetPriority+0xd8>)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	0019      	movs	r1, r3
 8003124:	230f      	movs	r3, #15
 8003126:	400b      	ands	r3, r1
 8003128:	3b08      	subs	r3, #8
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3306      	adds	r3, #6
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1dfa      	adds	r2, r7, #7
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	0011      	movs	r1, r2
 800313c:	2203      	movs	r2, #3
 800313e:	400a      	ands	r2, r1
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	21ff      	movs	r1, #255	; 0xff
 8003144:	4091      	lsls	r1, r2
 8003146:	000a      	movs	r2, r1
 8003148:	43d2      	mvns	r2, r2
 800314a:	401a      	ands	r2, r3
 800314c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	401a      	ands	r2, r3
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	2303      	movs	r3, #3
 800315e:	4003      	ands	r3, r0
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003164:	4809      	ldr	r0, [pc, #36]	; (800318c <__NVIC_SetPriority+0xd8>)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	001c      	movs	r4, r3
 800316c:	230f      	movs	r3, #15
 800316e:	4023      	ands	r3, r4
 8003170:	3b08      	subs	r3, #8
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	430a      	orrs	r2, r1
 8003176:	3306      	adds	r3, #6
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	18c3      	adds	r3, r0, r3
 800317c:	3304      	adds	r3, #4
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b003      	add	sp, #12
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	045b      	lsls	r3, r3, #17
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d301      	bcc.n	80031a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a4:	2301      	movs	r3, #1
 80031a6:	e010      	b.n	80031ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <SysTick_Config+0x44>)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	3a01      	subs	r2, #1
 80031ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b0:	2301      	movs	r3, #1
 80031b2:	425b      	negs	r3, r3
 80031b4:	2103      	movs	r1, #3
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff ff7c 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x44>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x44>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	210f      	movs	r1, #15
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	1c02      	adds	r2, r0, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	0002      	movs	r2, r0
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b25b      	sxtb	r3, r3
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff ff33 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff ffaf 	bl	8003190 <SysTick_Config>
 8003232:	0003      	movs	r3, r0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e061      	b.n	8003312 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_DMA_Init+0xe0>)
 8003254:	4694      	mov	ip, r2
 8003256:	4463      	add	r3, ip
 8003258:	2114      	movs	r1, #20
 800325a:	0018      	movs	r0, r3
 800325c:	f7fc ff70 	bl	8000140 <__udivsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <HAL_DMA_Init+0xe4>)
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2225      	movs	r2, #37	; 0x25
 8003272:	2102      	movs	r1, #2
 8003274:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_DMA_Init+0xe8>)
 8003282:	4013      	ands	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	01db      	lsls	r3, r3, #7
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_DMA_Init+0xec>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	211c      	movs	r1, #28
 80032d2:	400b      	ands	r3, r1
 80032d4:	210f      	movs	r1, #15
 80032d6:	4099      	lsls	r1, r3
 80032d8:	000b      	movs	r3, r1
 80032da:	43d9      	mvns	r1, r3
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_DMA_Init+0xec>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_DMA_Init+0xec>)
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	201c      	movs	r0, #28
 80032f0:	4003      	ands	r3, r0
 80032f2:	409a      	lsls	r2, r3
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_DMA_Init+0xec>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2225      	movs	r2, #37	; 0x25
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	bffdfff8 	.word	0xbffdfff8
 8003320:	40020000 	.word	0x40020000
 8003324:	ffff800f 	.word	0xffff800f
 8003328:	400200a8 	.word	0x400200a8

0800332c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	221c      	movs	r2, #28
 800334a:	4013      	ands	r3, r2
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	0013      	movs	r3, r2
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	d026      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x7a>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	4013      	ands	r3, r2
 800336a:	d107      	bne.n	800337c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2104      	movs	r1, #4
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	221c      	movs	r2, #28
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2104      	movs	r1, #4
 800338a:	4091      	lsls	r1, r2
 800338c:	000a      	movs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b00      	cmp	r3, #0
 8003396:	d100      	bne.n	800339a <HAL_DMA_IRQHandler+0x6e>
 8003398:	e071      	b.n	800347e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	0010      	movs	r0, r2
 80033a2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80033a4:	e06b      	b.n	800347e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	221c      	movs	r2, #28
 80033ac:	4013      	ands	r3, r2
 80033ae:	2202      	movs	r2, #2
 80033b0:	409a      	lsls	r2, r3
 80033b2:	0013      	movs	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	d02d      	beq.n	8003416 <HAL_DMA_IRQHandler+0xea>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d029      	beq.n	8003416 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	4013      	ands	r3, r2
 80033cc:	d10b      	bne.n	80033e6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	210a      	movs	r1, #10
 80033da:	438a      	bics	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2225      	movs	r2, #37	; 0x25
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	221c      	movs	r2, #28
 80033ec:	401a      	ands	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2102      	movs	r1, #2
 80033f4:	4091      	lsls	r1, r2
 80033f6:	000a      	movs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2224      	movs	r2, #36	; 0x24
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d039      	beq.n	800347e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	0010      	movs	r0, r2
 8003412:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003414:	e033      	b.n	800347e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	221c      	movs	r2, #28
 800341c:	4013      	ands	r3, r2
 800341e:	2208      	movs	r2, #8
 8003420:	409a      	lsls	r2, r3
 8003422:	0013      	movs	r3, r2
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	d02a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x154>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2208      	movs	r2, #8
 800342e:	4013      	ands	r3, r2
 8003430:	d026      	beq.n	8003480 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	210e      	movs	r1, #14
 800343e:	438a      	bics	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	221c      	movs	r2, #28
 8003448:	401a      	ands	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2101      	movs	r1, #1
 8003450:	4091      	lsls	r1, r2
 8003452:	000a      	movs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2225      	movs	r2, #37	; 0x25
 8003460:	2101      	movs	r1, #1
 8003462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	0010      	movs	r0, r2
 800347c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46c0      	nop			; (mov r8, r8)
}
 8003482:	46bd      	mov	sp, r7
 8003484:	b004      	add	sp, #16
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800349e:	e14f      	b.n	8003740 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4091      	lsls	r1, r2
 80034aa:	000a      	movs	r2, r1
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <HAL_GPIO_Init+0x30>
 80034b6:	e140      	b.n	800373a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	4013      	ands	r3, r2
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d005      	beq.n	80034d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d130      	bne.n	8003532 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	43da      	mvns	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	0013      	movs	r3, r2
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003506:	2201      	movs	r2, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
 800350c:	0013      	movs	r3, r2
 800350e:	43da      	mvns	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	2201      	movs	r2, #1
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
 8003524:	0013      	movs	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2203      	movs	r2, #3
 8003538:	4013      	ands	r3, r2
 800353a:	2b03      	cmp	r3, #3
 800353c:	d017      	beq.n	800356e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	409a      	lsls	r2, r3
 800354c:	0013      	movs	r3, r2
 800354e:	43da      	mvns	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	409a      	lsls	r2, r3
 8003560:	0013      	movs	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	4013      	ands	r3, r2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d123      	bne.n	80035c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	08da      	lsrs	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3208      	adds	r2, #8
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	58d3      	ldr	r3, [r2, r3]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	43da      	mvns	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2107      	movs	r1, #7
 80035a6:	400b      	ands	r3, r1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	08da      	lsrs	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3208      	adds	r2, #8
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	6939      	ldr	r1, [r7, #16]
 80035c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2203      	movs	r2, #3
 80035e0:	401a      	ands	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	0013      	movs	r3, r2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	23c0      	movs	r3, #192	; 0xc0
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	4013      	ands	r3, r2
 8003600:	d100      	bne.n	8003604 <HAL_GPIO_Init+0x17c>
 8003602:	e09a      	b.n	800373a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003604:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_GPIO_Init+0x2d0>)
 8003606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_GPIO_Init+0x2d0>)
 800360a:	2101      	movs	r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_GPIO_Init+0x2d4>)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	589b      	ldr	r3, [r3, r2]
 800361c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2203      	movs	r2, #3
 8003622:	4013      	ands	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	43da      	mvns	r2, r3
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	23a0      	movs	r3, #160	; 0xa0
 8003638:	05db      	lsls	r3, r3, #23
 800363a:	429a      	cmp	r2, r3
 800363c:	d019      	beq.n	8003672 <HAL_GPIO_Init+0x1ea>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a47      	ldr	r2, [pc, #284]	; (8003760 <HAL_GPIO_Init+0x2d8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_Init+0x1e6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_GPIO_Init+0x2dc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00d      	beq.n	800366a <HAL_GPIO_Init+0x1e2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a45      	ldr	r2, [pc, #276]	; (8003768 <HAL_GPIO_Init+0x2e0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_Init+0x1de>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a44      	ldr	r2, [pc, #272]	; (800376c <HAL_GPIO_Init+0x2e4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_GPIO_Init+0x1da>
 800365e:	2305      	movs	r3, #5
 8003660:	e008      	b.n	8003674 <HAL_GPIO_Init+0x1ec>
 8003662:	2306      	movs	r3, #6
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x1ec>
 8003666:	2303      	movs	r3, #3
 8003668:	e004      	b.n	8003674 <HAL_GPIO_Init+0x1ec>
 800366a:	2302      	movs	r3, #2
 800366c:	e002      	b.n	8003674 <HAL_GPIO_Init+0x1ec>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x1ec>
 8003672:	2300      	movs	r3, #0
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	2103      	movs	r1, #3
 8003678:	400a      	ands	r2, r1
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	4093      	lsls	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003684:	4935      	ldr	r1, [pc, #212]	; (800375c <HAL_GPIO_Init+0x2d4>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43da      	mvns	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	035b      	lsls	r3, r3, #13
 80036aa:	4013      	ands	r3, r2
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	039b      	lsls	r3, r3, #14
 80036d4:	4013      	ands	r3, r2
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	4013      	ands	r3, r2
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003710:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43da      	mvns	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	025b      	lsls	r3, r3, #9
 8003728:	4013      	ands	r3, r2
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_GPIO_Init+0x2e8>)
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	40da      	lsrs	r2, r3
 8003748:	1e13      	subs	r3, r2, #0
 800374a:	d000      	beq.n	800374e <HAL_GPIO_Init+0x2c6>
 800374c:	e6a8      	b.n	80034a0 <HAL_GPIO_Init+0x18>
  }
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b006      	add	sp, #24
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	40010000 	.word	0x40010000
 8003760:	50000400 	.word	0x50000400
 8003764:	50000800 	.word	0x50000800
 8003768:	50000c00 	.word	0x50000c00
 800376c:	50001c00 	.word	0x50001c00
 8003770:	40010400 	.word	0x40010400

08003774 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	0008      	movs	r0, r1
 800377e:	0011      	movs	r1, r2
 8003780:	1cbb      	adds	r3, r7, #2
 8003782:	1c02      	adds	r2, r0, #0
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	1c7b      	adds	r3, r7, #1
 8003788:	1c0a      	adds	r2, r1, #0
 800378a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800378c:	1c7b      	adds	r3, r7, #1
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003794:	1cbb      	adds	r3, r7, #2
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800379c:	e003      	b.n	80037a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800379e:	1cbb      	adds	r3, r7, #2
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e082      	b.n	80038c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2241      	movs	r2, #65	; 0x41
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2240      	movs	r2, #64	; 0x40
 80037d2:	2100      	movs	r1, #0
 80037d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f7ff f8eb 	bl	80029b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2241      	movs	r2, #65	; 0x41
 80037e2:	2124      	movs	r1, #36	; 0x24
 80037e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2101      	movs	r1, #1
 80037f2:	438a      	bics	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_I2C_Init+0x120>)
 8003800:	400a      	ands	r2, r1
 8003802:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4931      	ldr	r1, [pc, #196]	; (80038d4 <HAL_I2C_Init+0x124>)
 8003810:	400a      	ands	r2, r1
 8003812:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d108      	bne.n	800382e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0209      	lsls	r1, r1, #8
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e007      	b.n	800383e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2184      	movs	r1, #132	; 0x84
 8003838:	0209      	lsls	r1, r1, #8
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d104      	bne.n	8003850 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	491f      	ldr	r1, [pc, #124]	; (80038d8 <HAL_I2C_Init+0x128>)
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	491a      	ldr	r1, [pc, #104]	; (80038d4 <HAL_I2C_Init+0x124>)
 800386c:	400a      	ands	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	431a      	orrs	r2, r3
 800387a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69d9      	ldr	r1, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1a      	ldr	r2, [r3, #32]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2101      	movs	r1, #1
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2241      	movs	r2, #65	; 0x41
 80038b4:	2120      	movs	r1, #32
 80038b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2242      	movs	r2, #66	; 0x42
 80038c2:	2100      	movs	r1, #0
 80038c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	f0ffffff 	.word	0xf0ffffff
 80038d4:	ffff7fff 	.word	0xffff7fff
 80038d8:	02008000 	.word	0x02008000

080038dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2241      	movs	r2, #65	; 0x41
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d138      	bne.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2240      	movs	r2, #64	; 0x40
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e032      	b.n	8003966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	2101      	movs	r1, #1
 8003906:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2241      	movs	r2, #65	; 0x41
 800390c:	2124      	movs	r1, #36	; 0x24
 800390e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	438a      	bics	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4911      	ldr	r1, [pc, #68]	; (8003970 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800392c:	400a      	ands	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2101      	movs	r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2241      	movs	r2, #65	; 0x41
 8003954:	2120      	movs	r1, #32
 8003956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	ffffefff 	.word	0xffffefff

08003974 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2241      	movs	r2, #65	; 0x41
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	d139      	bne.n	80039fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003994:	2302      	movs	r3, #2
 8003996:	e033      	b.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2241      	movs	r2, #65	; 0x41
 80039a4:	2124      	movs	r1, #36	; 0x24
 80039a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2101      	movs	r1, #1
 80039b4:	438a      	bics	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2241      	movs	r2, #65	; 0x41
 80039ee:	2120      	movs	r1, #32
 80039f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2240      	movs	r2, #64	; 0x40
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fffff0ff 	.word	0xfffff0ff

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f000 fb5a 	bl	80040d4 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a20:	4bce      	ldr	r3, [pc, #824]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	220c      	movs	r2, #12
 8003a26:	4013      	ands	r3, r2
 8003a28:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2a:	4bcc      	ldr	r3, [pc, #816]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	4013      	ands	r3, r2
 8003a34:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <HAL_RCC_OscConfig+0x36>
 8003a40:	e07c      	b.n	8003b3c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d007      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d111      	bne.n	8003a72 <HAL_RCC_OscConfig+0x66>
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	025b      	lsls	r3, r3, #9
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	4bc0      	ldr	r3, [pc, #768]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	4013      	ands	r3, r2
 8003a62:	d100      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5a>
 8003a64:	e069      	b.n	8003b3a <HAL_RCC_OscConfig+0x12e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d165      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e330      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_OscConfig+0x82>
 8003a7e:	4bb7      	ldr	r3, [pc, #732]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4bb6      	ldr	r3, [pc, #728]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0249      	lsls	r1, r1, #9
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e027      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	23a0      	movs	r3, #160	; 0xa0
 8003a94:	02db      	lsls	r3, r3, #11
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10e      	bne.n	8003ab8 <HAL_RCC_OscConfig+0xac>
 8003a9a:	4bb0      	ldr	r3, [pc, #704]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4baf      	ldr	r3, [pc, #700]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	02c9      	lsls	r1, r1, #11
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4bac      	ldr	r3, [pc, #688]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4bab      	ldr	r3, [pc, #684]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	0249      	lsls	r1, r1, #9
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e012      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
 8003ab8:	4ba8      	ldr	r3, [pc, #672]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4ba7      	ldr	r3, [pc, #668]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003abe:	49a8      	ldr	r1, [pc, #672]	; (8003d60 <HAL_RCC_OscConfig+0x354>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4ba5      	ldr	r3, [pc, #660]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4ba2      	ldr	r3, [pc, #648]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4ba1      	ldr	r3, [pc, #644]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003ad8:	49a2      	ldr	r1, [pc, #648]	; (8003d64 <HAL_RCC_OscConfig+0x358>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d014      	beq.n	8003b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7ff fa9d 	bl	8003024 <HAL_GetTick>
 8003aea:	0003      	movs	r3, r0
 8003aec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7ff fa98 	bl	8003024 <HAL_GetTick>
 8003af4:	0002      	movs	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e2e8      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b02:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe4>
 8003b0e:	e015      	b.n	8003b3c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7ff fa88 	bl	8003024 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1a:	f7ff fa83 	bl	8003024 <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e2d3      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2c:	4b8b      	ldr	r3, [pc, #556]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	4013      	ands	r3, r2
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x10e>
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d100      	bne.n	8003b48 <HAL_RCC_OscConfig+0x13c>
 8003b46:	e08b      	b.n	8003c60 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d13e      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1cc>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b60:	4b7e      	ldr	r3, [pc, #504]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2204      	movs	r2, #4
 8003b66:	4013      	ands	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_RCC_OscConfig+0x168>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e2af      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a7b      	ldr	r2, [pc, #492]	; (8003d68 <HAL_RCC_OscConfig+0x35c>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b8a:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2209      	movs	r2, #9
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	4b71      	ldr	r3, [pc, #452]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9c:	f000 fbe8 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8003ba0:	0001      	movs	r1, r0
 8003ba2:	4b6e      	ldr	r3, [pc, #440]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	220f      	movs	r2, #15
 8003baa:	4013      	ands	r3, r2
 8003bac:	4a6f      	ldr	r2, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x360>)
 8003bae:	5cd3      	ldrb	r3, [r2, r3]
 8003bb0:	000a      	movs	r2, r1
 8003bb2:	40da      	lsrs	r2, r3
 8003bb4:	4b6e      	ldr	r3, [pc, #440]	; (8003d70 <HAL_RCC_OscConfig+0x364>)
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003bb8:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <HAL_RCC_OscConfig+0x368>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2513      	movs	r5, #19
 8003bbe:	197c      	adds	r4, r7, r5
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff f9e9 	bl	8002f98 <HAL_InitTick>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003bca:	197b      	adds	r3, r7, r5
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d046      	beq.n	8003c60 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8003bd2:	197b      	adds	r3, r7, r5
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	e27d      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d027      	beq.n	8003c2e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2209      	movs	r2, #9
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	4b5c      	ldr	r3, [pc, #368]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7ff fa18 	bl	8003024 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7ff fa13 	bl	8003024 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e263      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	d0f1      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b51      	ldr	r3, [pc, #324]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a53      	ldr	r2, [pc, #332]	; (8003d68 <HAL_RCC_OscConfig+0x35c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	4b4d      	ldr	r3, [pc, #308]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	e018      	b.n	8003c60 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b4b      	ldr	r3, [pc, #300]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c34:	2101      	movs	r1, #1
 8003c36:	438a      	bics	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7ff f9f3 	bl	8003024 <HAL_GetTick>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c44:	f7ff f9ee 	bl	8003024 <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e23e      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d1f1      	bne.n	8003c44 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	4013      	ands	r3, r2
 8003c68:	d100      	bne.n	8003c6c <HAL_RCC_OscConfig+0x260>
 8003c6a:	e0a1      	b.n	8003db0 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d140      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c72:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x27e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e224      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8a:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x36c>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	0a19      	lsrs	r1, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	061a      	lsls	r2, r3, #24
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	0b5b      	lsrs	r3, r3, #13
 8003cb8:	3301      	adds	r3, #1
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	0212      	lsls	r2, r2, #8
 8003cbe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	400b      	ands	r3, r1
 8003cca:	4928      	ldr	r1, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x360>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x364>)
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003cd4:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <HAL_RCC_OscConfig+0x368>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2513      	movs	r5, #19
 8003cda:	197c      	adds	r4, r7, r5
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff f95b 	bl	8002f98 <HAL_InitTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003ce6:	197b      	adds	r3, r7, r5
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d060      	beq.n	8003db0 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8003cee:	197b      	adds	r3, r7, r5
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	e1ef      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03f      	beq.n	8003d7c <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	0049      	lsls	r1, r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7ff f98b 	bl	8003024 <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d14:	f7ff f986 	bl	8003024 <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1d6      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x36c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	0a19      	lsrs	r1, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	061a      	lsls	r2, r3, #24
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <HAL_RCC_OscConfig+0x350>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	e029      	b.n	8003db0 <HAL_RCC_OscConfig+0x3a4>
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	fffeffff 	.word	0xfffeffff
 8003d64:	fffbffff 	.word	0xfffbffff
 8003d68:	ffffe0ff 	.word	0xffffe0ff
 8003d6c:	08008de0 	.word	0x08008de0
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004
 8003d78:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d7c:	4bbe      	ldr	r3, [pc, #760]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4bbd      	ldr	r3, [pc, #756]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003d82:	49be      	ldr	r1, [pc, #760]	; (800407c <HAL_RCC_OscConfig+0x670>)
 8003d84:	400a      	ands	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7ff f94c 	bl	8003024 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d92:	f7ff f947 	bl	8003024 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e197      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003da4:	4bb4      	ldr	r3, [pc, #720]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2208      	movs	r2, #8
 8003db6:	4013      	ands	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4bad      	ldr	r3, [pc, #692]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc6:	4bac      	ldr	r3, [pc, #688]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dce:	f7ff f929 	bl	8003024 <HAL_GetTick>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7ff f924 	bl	8003024 <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e174      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dea:	4ba3      	ldr	r3, [pc, #652]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	2202      	movs	r2, #2
 8003df0:	4013      	ands	r3, r2
 8003df2:	d0f1      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x3cc>
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4ba0      	ldr	r3, [pc, #640]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dfa:	4b9f      	ldr	r3, [pc, #636]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	438a      	bics	r2, r1
 8003e00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7ff f90f 	bl	8003024 <HAL_GetTick>
 8003e06:	0003      	movs	r3, r0
 8003e08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7ff f90a 	bl	8003024 <HAL_GetTick>
 8003e10:	0002      	movs	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e15a      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e1e:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	2202      	movs	r2, #2
 8003e24:	4013      	ands	r3, r2
 8003e26:	d1f1      	bne.n	8003e0c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d100      	bne.n	8003e34 <HAL_RCC_OscConfig+0x428>
 8003e32:	e0ae      	b.n	8003f92 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e34:	2027      	movs	r0, #39	; 0x27
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3c:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	055b      	lsls	r3, r3, #21
 8003e44:	4013      	ands	r3, r2
 8003e46:	d109      	bne.n	8003e5c <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	4b8b      	ldr	r3, [pc, #556]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	4b8a      	ldr	r3, [pc, #552]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0549      	lsls	r1, r1, #21
 8003e52:	430a      	orrs	r2, r1
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x674>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4013      	ands	r3, r2
 8003e66:	d11a      	bne.n	8003e9e <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e68:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_RCC_OscConfig+0x674>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b84      	ldr	r3, [pc, #528]	; (8004080 <HAL_RCC_OscConfig+0x674>)
 8003e6e:	2180      	movs	r1, #128	; 0x80
 8003e70:	0049      	lsls	r1, r1, #1
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7ff f8d5 	bl	8003024 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e80:	f7ff f8d0 	bl	8003024 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e120      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCC_OscConfig+0x674>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_OscConfig+0x4ae>
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	0049      	lsls	r1, r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb8:	e031      	b.n	8003f1e <HAL_RCC_OscConfig+0x512>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x4d0>
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec6:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ec8:	496c      	ldr	r1, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x670>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ed2:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ed4:	496b      	ldr	r1, [pc, #428]	; (8004084 <HAL_RCC_OscConfig+0x678>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eda:	e020      	b.n	8003f1e <HAL_RCC_OscConfig+0x512>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	23a0      	movs	r3, #160	; 0xa0
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d10e      	bne.n	8003f06 <HAL_RCC_OscConfig+0x4fa>
 8003ee8:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eec:	4b62      	ldr	r3, [pc, #392]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	00c9      	lsls	r1, r1, #3
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8003ef6:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	0049      	lsls	r1, r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50
 8003f04:	e00b      	b.n	8003f1e <HAL_RCC_OscConfig+0x512>
 8003f06:	4b5c      	ldr	r3, [pc, #368]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f0c:	495b      	ldr	r1, [pc, #364]	; (800407c <HAL_RCC_OscConfig+0x670>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	651a      	str	r2, [r3, #80]	; 0x50
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f16:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f18:	495a      	ldr	r1, [pc, #360]	; (8004084 <HAL_RCC_OscConfig+0x678>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7ff f87d 	bl	8003024 <HAL_GetTick>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f2e:	e009      	b.n	8003f44 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7ff f878 	bl	8003024 <HAL_GetTick>
 8003f34:	0002      	movs	r2, r0
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	4a53      	ldr	r2, [pc, #332]	; (8004088 <HAL_RCC_OscConfig+0x67c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0c7      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d0ef      	beq.n	8003f30 <HAL_RCC_OscConfig+0x524>
 8003f50:	e014      	b.n	8003f7c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7ff f867 	bl	8003024 <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f5a:	e009      	b.n	8003f70 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7ff f862 	bl	8003024 <HAL_GetTick>
 8003f60:	0002      	movs	r2, r0
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	4a48      	ldr	r2, [pc, #288]	; (8004088 <HAL_RCC_OscConfig+0x67c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0b1      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d1ef      	bne.n	8003f5c <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f7c:	2327      	movs	r3, #39	; 0x27
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f86:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003f8c:	493f      	ldr	r1, [pc, #252]	; (800408c <HAL_RCC_OscConfig+0x680>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d100      	bne.n	8003f9c <HAL_RCC_OscConfig+0x590>
 8003f9a:	e09a      	b.n	80040d2 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d064      	beq.n	800406c <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d145      	bne.n	8004036 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b33      	ldr	r3, [pc, #204]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003fb0:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x684>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7ff f835 	bl	8003024 <HAL_GetTick>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7ff f830 	bl	8003024 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e080      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fd2:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	049b      	lsls	r3, r3, #18
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <HAL_RCC_OscConfig+0x688>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0449      	lsls	r1, r1, #17
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7ff f80a 	bl	8003024 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7ff f805 	bl	8003024 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e055      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	049b      	lsls	r3, r3, #18
 8004030:	4013      	ands	r3, r2
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x60a>
 8004034:	e04d      	b.n	80040d2 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 800403c:	4914      	ldr	r1, [pc, #80]	; (8004090 <HAL_RCC_OscConfig+0x684>)
 800403e:	400a      	ands	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fe ffef 	bl	8003024 <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe ffea 	bl	8003024 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e03a      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x66c>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	049b      	lsls	r3, r3, #18
 8004066:	4013      	ands	r3, r2
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x640>
 800406a:	e032      	b.n	80040d2 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b01      	cmp	r3, #1
 8004072:	d111      	bne.n	8004098 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e02d      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
 8004078:	40021000 	.word	0x40021000
 800407c:	fffffeff 	.word	0xfffffeff
 8004080:	40007000 	.word	0x40007000
 8004084:	fffffbff 	.word	0xfffffbff
 8004088:	00001388 	.word	0x00001388
 800408c:	efffffff 	.word	0xefffffff
 8004090:	feffffff 	.word	0xfeffffff
 8004094:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004098:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_RCC_OscConfig+0x6d0>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	401a      	ands	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d10f      	bne.n	80040ce <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	23f0      	movs	r3, #240	; 0xf0
 80040b2:	039b      	lsls	r3, r3, #14
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	23c0      	movs	r3, #192	; 0xc0
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b00a      	add	sp, #40	; 0x28
 80040da:	bdb0      	pop	{r4, r5, r7, pc}
 80040dc:	40021000 	.word	0x40021000

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e128      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b96      	ldr	r3, [pc, #600]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d91e      	bls.n	8004140 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b93      	ldr	r3, [pc, #588]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2201      	movs	r2, #1
 8004108:	4393      	bics	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	4b90      	ldr	r3, [pc, #576]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004114:	f7fe ff86 	bl	8003024 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411c:	e009      	b.n	8004132 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411e:	f7fe ff81 	bl	8003024 <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	4a8a      	ldr	r2, [pc, #552]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e109      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b87      	ldr	r3, [pc, #540]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	4013      	ands	r3, r2
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2202      	movs	r2, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	22f0      	movs	r2, #240	; 0xf0
 8004150:	4393      	bics	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b7f      	ldr	r3, [pc, #508]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 800415a:	430a      	orrs	r2, r1
 800415c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d100      	bne.n	800416a <HAL_RCC_ClockConfig+0x8a>
 8004168:	e089      	b.n	800427e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004172:	4b79      	ldr	r3, [pc, #484]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	029b      	lsls	r3, r3, #10
 800417a:	4013      	ands	r3, r2
 800417c:	d120      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0e1      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800418a:	4b73      	ldr	r3, [pc, #460]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	049b      	lsls	r3, r3, #18
 8004192:	4013      	ands	r3, r2
 8004194:	d114      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0d5      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2204      	movs	r2, #4
 80041a8:	4013      	ands	r3, r2
 80041aa:	d109      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0ca      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c2      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c0:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2203      	movs	r2, #3
 80041c6:	4393      	bics	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4b62      	ldr	r3, [pc, #392]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80041d0:	430a      	orrs	r2, r1
 80041d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fe ff26 	bl	8003024 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d111      	bne.n	8004208 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7fe ff1d 	bl	8003024 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0a5      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fa:	4b57      	ldr	r3, [pc, #348]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	220c      	movs	r2, #12
 8004200:	4013      	ands	r3, r2
 8004202:	2b08      	cmp	r3, #8
 8004204:	d1ef      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x106>
 8004206:	e03a      	b.n	800427e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d111      	bne.n	8004234 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004210:	e009      	b.n	8004226 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004212:	f7fe ff07 	bl	8003024 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4a4d      	ldr	r2, [pc, #308]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e08f      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004226:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	220c      	movs	r2, #12
 800422c:	4013      	ands	r3, r2
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d1ef      	bne.n	8004212 <HAL_RCC_ClockConfig+0x132>
 8004232:	e024      	b.n	800427e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d11b      	bne.n	8004274 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800423c:	e009      	b.n	8004252 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423e:	f7fe fef1 	bl	8003024 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	4a42      	ldr	r2, [pc, #264]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e079      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	220c      	movs	r2, #12
 8004258:	4013      	ands	r3, r2
 800425a:	2b04      	cmp	r3, #4
 800425c:	d1ef      	bne.n	800423e <HAL_RCC_ClockConfig+0x15e>
 800425e:	e00e      	b.n	800427e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fe fee0 	bl	8003024 <HAL_GetTick>
 8004264:	0002      	movs	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e068      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004274:	4b38      	ldr	r3, [pc, #224]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	220c      	movs	r2, #12
 800427a:	4013      	ands	r3, r2
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	4013      	ands	r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d21e      	bcs.n	80042ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	4393      	bics	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800429e:	f7fe fec1 	bl	8003024 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	e009      	b.n	80042bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fe febc 	bl	8003024 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a28      	ldr	r2, [pc, #160]	; (8004354 <HAL_RCC_ClockConfig+0x274>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e044      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d1ee      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2204      	movs	r2, #4
 80042d0:	4013      	ands	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_RCC_ClockConfig+0x27c>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2208      	movs	r2, #8
 80042ee:	4013      	ands	r3, r2
 80042f0:	d00a      	beq.n	8004308 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_RCC_ClockConfig+0x280>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00da      	lsls	r2, r3, #3
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004304:	430a      	orrs	r2, r1
 8004306:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004308:	f000 f832 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800430c:	0001      	movs	r1, r0
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	220f      	movs	r2, #15
 8004316:	4013      	ands	r3, r2
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <HAL_RCC_ClockConfig+0x284>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	000a      	movs	r2, r1
 800431e:	40da      	lsrs	r2, r3
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x288>)
 8004322:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCC_ClockConfig+0x28c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	250b      	movs	r5, #11
 800432a:	197c      	adds	r4, r7, r5
 800432c:	0018      	movs	r0, r3
 800432e:	f7fe fe33 	bl	8002f98 <HAL_InitTick>
 8004332:	0003      	movs	r3, r0
 8004334:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004336:	197b      	adds	r3, r7, r5
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800433e:	197b      	adds	r3, r7, r5
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	e000      	b.n	8004346 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b004      	add	sp, #16
 800434c:	bdb0      	pop	{r4, r5, r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	40022000 	.word	0x40022000
 8004354:	00001388 	.word	0x00001388
 8004358:	40021000 	.word	0x40021000
 800435c:	fffff8ff 	.word	0xfffff8ff
 8004360:	ffffc7ff 	.word	0xffffc7ff
 8004364:	08008de0 	.word	0x08008de0
 8004368:	20000000 	.word	0x20000000
 800436c:	20000004 	.word	0x20000004

08004370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004376:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800437c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437e:	230c      	movs	r3, #12
 8004380:	4013      	ands	r3, r2
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d014      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004386:	d900      	bls.n	800438a <HAL_RCC_GetSysClockFreq+0x1a>
 8004388:	e07b      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x112>
 800438a:	2b04      	cmp	r3, #4
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x24>
 800438e:	2b08      	cmp	r3, #8
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x3a>
 8004392:	e076      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004394:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2210      	movs	r2, #16
 800439a:	4013      	ands	r3, r2
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043a2:	e07c      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80043a4:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80043a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043a8:	e079      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043ae:	e076      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	0c9a      	lsrs	r2, r3, #18
 80043b4:	230f      	movs	r3, #15
 80043b6:	401a      	ands	r2, r3
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	0d9a      	lsrs	r2, r3, #22
 80043c2:	2303      	movs	r3, #3
 80043c4:	4013      	ands	r3, r2
 80043c6:	3301      	adds	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	025b      	lsls	r3, r3, #9
 80043d2:	4013      	ands	r3, r2
 80043d4:	d01a      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80043e0:	2300      	movs	r3, #0
 80043e2:	69b8      	ldr	r0, [r7, #24]
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	f7fc f87f 	bl	80004e8 <__aeabi_lmul>
 80043ea:	0002      	movs	r2, r0
 80043ec:	000b      	movs	r3, r1
 80043ee:	0010      	movs	r0, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f7fc f853 	bl	80004a8 <__aeabi_uldivmod>
 8004402:	0002      	movs	r2, r0
 8004404:	000b      	movs	r3, r1
 8004406:	0013      	movs	r3, r2
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
 800440a:	e037      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800440c:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2210      	movs	r2, #16
 8004412:	4013      	ands	r3, r2
 8004414:	d01a      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8004420:	2300      	movs	r3, #0
 8004422:	68b8      	ldr	r0, [r7, #8]
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	f7fc f85f 	bl	80004e8 <__aeabi_lmul>
 800442a:	0002      	movs	r2, r0
 800442c:	000b      	movs	r3, r1
 800442e:	0010      	movs	r0, r2
 8004430:	0019      	movs	r1, r3
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f7fc f833 	bl	80004a8 <__aeabi_uldivmod>
 8004442:	0002      	movs	r2, r0
 8004444:	000b      	movs	r3, r1
 8004446:	0013      	movs	r3, r2
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
 800444a:	e017      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	0018      	movs	r0, r3
 8004450:	2300      	movs	r3, #0
 8004452:	0019      	movs	r1, r3
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8004456:	2300      	movs	r3, #0
 8004458:	f7fc f846 	bl	80004e8 <__aeabi_lmul>
 800445c:	0002      	movs	r2, r0
 800445e:	000b      	movs	r3, r1
 8004460:	0010      	movs	r0, r2
 8004462:	0019      	movs	r1, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	001c      	movs	r4, r3
 8004468:	2300      	movs	r3, #0
 800446a:	001d      	movs	r5, r3
 800446c:	0022      	movs	r2, r4
 800446e:	002b      	movs	r3, r5
 8004470:	f7fc f81a 	bl	80004a8 <__aeabi_uldivmod>
 8004474:	0002      	movs	r2, r0
 8004476:	000b      	movs	r3, r1
 8004478:	0013      	movs	r3, r2
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004480:	e00d      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	2207      	movs	r2, #7
 800448a:	4013      	ands	r3, r2
 800448c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	3301      	adds	r3, #1
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	0212      	lsls	r2, r2, #8
 8004496:	409a      	lsls	r2, r3
 8004498:	0013      	movs	r3, r2
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800449c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b00e      	add	sp, #56	; 0x38
 80044a6:	bdb0      	pop	{r4, r5, r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	003d0900 	.word	0x003d0900
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200
 80044b8:	08008df8 	.word	0x08008df8

080044bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <HAL_RCC_GetHCLKFreq+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff2 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 80044d8:	0001      	movs	r1, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	2207      	movs	r2, #7
 80044e2:	4013      	ands	r3, r2
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	40d9      	lsrs	r1, r3
 80044ea:	000b      	movs	r3, r1
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08008df0 	.word	0x08008df0

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004500:	f7ff ffdc 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 8004504:	0001      	movs	r1, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	2207      	movs	r2, #7
 800450e:	4013      	ands	r3, r2
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5cd3      	ldrb	r3, [r2, r3]
 8004514:	40d9      	lsrs	r1, r3
 8004516:	000b      	movs	r3, r1
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	08008df0 	.word	0x08008df0

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004530:	2017      	movs	r0, #23
 8004532:	183b      	adds	r3, r7, r0
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2220      	movs	r2, #32
 800453e:	4013      	ands	r3, r2
 8004540:	d100      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004542:	e0c7      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004544:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	4013      	ands	r3, r2
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0549      	lsls	r1, r1, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800455e:	183b      	adds	r3, r7, r0
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	4b84      	ldr	r3, [pc, #528]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4013      	ands	r3, r2
 800456e:	d11a      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004570:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b80      	ldr	r3, [pc, #512]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	0049      	lsls	r1, r1, #1
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457e:	f7fe fd51 	bl	8003024 <HAL_GetTick>
 8004582:	0003      	movs	r3, r0
 8004584:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	e008      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004588:	f7fe fd4c 	bl	8003024 <HAL_GetTick>
 800458c:	0002      	movs	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0e8      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b77      	ldr	r3, [pc, #476]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045a6:	4b73      	ldr	r3, [pc, #460]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	23c0      	movs	r3, #192	; 0xc0
 80045ac:	039b      	lsls	r3, r3, #14
 80045ae:	4013      	ands	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	23c0      	movs	r3, #192	; 0xc0
 80045b8:	039b      	lsls	r3, r3, #14
 80045ba:	4013      	ands	r3, r2
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d013      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	23c0      	movs	r3, #192	; 0xc0
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	401a      	ands	r2, r3
 80045cc:	23c0      	movs	r3, #192	; 0xc0
 80045ce:	029b      	lsls	r3, r3, #10
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045d4:	4b67      	ldr	r3, [pc, #412]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	401a      	ands	r2, r3
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0c0      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80045ea:	4b62      	ldr	r3, [pc, #392]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80045ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ee:	23c0      	movs	r3, #192	; 0xc0
 80045f0:	029b      	lsls	r3, r3, #10
 80045f2:	4013      	ands	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03b      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	4013      	ands	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d033      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2220      	movs	r2, #32
 8004612:	4013      	ands	r3, r2
 8004614:	d02e      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004616:	4b57      	ldr	r3, [pc, #348]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004620:	4b54      	ldr	r3, [pc, #336]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	0309      	lsls	r1, r1, #12
 800462a:	430a      	orrs	r2, r1
 800462c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462e:	4b51      	ldr	r3, [pc, #324]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004632:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004634:	4952      	ldr	r1, [pc, #328]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004636:	400a      	ands	r2, r1
 8004638:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800463a:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d014      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fe fceb 	bl	8003024 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe fce6 	bl	8003024 <HAL_GetTick>
 8004658:	0002      	movs	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	4a49      	ldr	r2, [pc, #292]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e081      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800466a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4013      	ands	r3, r2
 8004672:	d0ef      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	4013      	ands	r3, r2
 800467c:	d01f      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	23c0      	movs	r3, #192	; 0xc0
 8004684:	029b      	lsls	r3, r3, #10
 8004686:	401a      	ands	r2, r3
 8004688:	23c0      	movs	r3, #192	; 0xc0
 800468a:	029b      	lsls	r3, r3, #10
 800468c:	429a      	cmp	r2, r3
 800468e:	d10c      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3c      	ldr	r2, [pc, #240]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	23c0      	movs	r3, #192	; 0xc0
 80046a0:	039b      	lsls	r3, r3, #14
 80046a2:	401a      	ands	r2, r3
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	4b32      	ldr	r3, [pc, #200]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	401a      	ands	r2, r3
 80046b8:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046be:	2317      	movs	r3, #23
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ce:	492f      	ldr	r1, [pc, #188]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	2203      	movs	r2, #3
 80046e4:	4393      	bics	r3, r2
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ee:	430a      	orrs	r2, r1
 80046f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	220c      	movs	r2, #12
 8004702:	4393      	bics	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800470c:	430a      	orrs	r2, r1
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2204      	movs	r2, #4
 8004716:	4013      	ands	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800472a:	430a      	orrs	r2, r1
 800472c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2208      	movs	r2, #8
 8004734:	4013      	ands	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004748:	430a      	orrs	r2, r1
 800474a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	4013      	ands	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004766:	430a      	orrs	r2, r1
 8004768:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b006      	add	sp, #24
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	40007000 	.word	0x40007000
 800477c:	fffcffff 	.word	0xfffcffff
 8004780:	fff7ffff 	.word	0xfff7ffff
 8004784:	00001388 	.word	0x00001388
 8004788:	ffcfffff 	.word	0xffcfffff
 800478c:	efffffff 	.word	0xefffffff
 8004790:	fffff3ff 	.word	0xfffff3ff
 8004794:	ffffcfff 	.word	0xffffcfff
 8004798:	fff3ffff 	.word	0xfff3ffff

0800479c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e083      	b.n	80048b6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2382      	movs	r3, #130	; 0x82
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	429a      	cmp	r2, r3
 80047c0:	d009      	beq.n	80047d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
 80047c8:	e005      	b.n	80047d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2251      	movs	r2, #81	; 0x51
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2250      	movs	r2, #80	; 0x50
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7fe f952 	bl	8002a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2251      	movs	r2, #81	; 0x51
 80047fc:	2102      	movs	r1, #2
 80047fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	2382      	movs	r3, #130	; 0x82
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	401a      	ands	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	2384      	movs	r3, #132	; 0x84
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	400b      	ands	r3, r1
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	400b      	ands	r3, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2102      	movs	r1, #2
 8004838:	400b      	ands	r3, r1
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	2101      	movs	r1, #1
 8004842:	400b      	ands	r3, r1
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6999      	ldr	r1, [r3, #24]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	400b      	ands	r3, r1
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2138      	movs	r1, #56	; 0x38
 8004858:	400b      	ands	r3, r1
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	400b      	ands	r3, r1
 8004864:	431a      	orrs	r2, r3
 8004866:	0011      	movs	r1, r2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	401a      	ands	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2210      	movs	r2, #16
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4907      	ldr	r1, [pc, #28]	; (80048c0 <HAL_SPI_Init+0x124>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2251      	movs	r2, #81	; 0x51
 80048b0:	2101      	movs	r1, #1
 80048b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	fffff7ff 	.word	0xfffff7ff

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e032      	b.n	800493c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2239      	movs	r2, #57	; 0x39
 80048da:	5c9b      	ldrb	r3, [r3, r2]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2238      	movs	r2, #56	; 0x38
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fe f945 	bl	8002b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2239      	movs	r2, #57	; 0x39
 80048f6:	2102      	movs	r1, #2
 80048f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3304      	adds	r3, #4
 8004902:	0019      	movs	r1, r3
 8004904:	0010      	movs	r0, r2
 8004906:	f000 fc41 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	223e      	movs	r2, #62	; 0x3e
 800490e:	2101      	movs	r1, #1
 8004910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	223a      	movs	r2, #58	; 0x3a
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	223b      	movs	r2, #59	; 0x3b
 800491e:	2101      	movs	r1, #1
 8004920:	5499      	strb	r1, [r3, r2]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223c      	movs	r2, #60	; 0x3c
 8004926:	2101      	movs	r1, #1
 8004928:	5499      	strb	r1, [r3, r2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223d      	movs	r2, #61	; 0x3d
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2239      	movs	r2, #57	; 0x39
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b002      	add	sp, #8
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e032      	b.n	80049bc <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2239      	movs	r2, #57	; 0x39
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2238      	movs	r2, #56	; 0x38
 8004966:	2100      	movs	r1, #0
 8004968:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f829 	bl	80049c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2239      	movs	r2, #57	; 0x39
 8004976:	2102      	movs	r1, #2
 8004978:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	0019      	movs	r1, r3
 8004984:	0010      	movs	r0, r2
 8004986:	f000 fc01 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	223e      	movs	r2, #62	; 0x3e
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	223a      	movs	r2, #58	; 0x3a
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	223b      	movs	r2, #59	; 0x3b
 800499e:	2101      	movs	r1, #1
 80049a0:	5499      	strb	r1, [r3, r2]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	223c      	movs	r2, #60	; 0x3c
 80049a6:	2101      	movs	r1, #1
 80049a8:	5499      	strb	r1, [r3, r2]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223d      	movs	r2, #61	; 0x3d
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2239      	movs	r2, #57	; 0x39
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e032      	b.n	8004a4c <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2239      	movs	r2, #57	; 0x39
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2238      	movs	r2, #56	; 0x38
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f829 	bl	8004a54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2239      	movs	r2, #57	; 0x39
 8004a06:	2102      	movs	r1, #2
 8004a08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3304      	adds	r3, #4
 8004a12:	0019      	movs	r1, r3
 8004a14:	0010      	movs	r0, r2
 8004a16:	f000 fbb9 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	223e      	movs	r2, #62	; 0x3e
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	223a      	movs	r2, #58	; 0x3a
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223b      	movs	r2, #59	; 0x3b
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223c      	movs	r2, #60	; 0x3c
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223d      	movs	r2, #61	; 0x3d
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2239      	movs	r2, #57	; 0x39
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e03a      	b.n	8004aee <HAL_TIM_OnePulse_Init+0x8a>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2239      	movs	r2, #57	; 0x39
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2238      	movs	r2, #56	; 0x38
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 f831 	bl	8004af6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2239      	movs	r2, #57	; 0x39
 8004a98:	2102      	movs	r1, #2
 8004a9a:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	f000 fb70 	bl	800518c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2108      	movs	r1, #8
 8004ab8:	438a      	bics	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	223e      	movs	r2, #62	; 0x3e
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223a      	movs	r2, #58	; 0x3a
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223b      	movs	r2, #59	; 0x3b
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2239      	movs	r2, #57	; 0x39
 8004ae8:	2101      	movs	r1, #1
 8004aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004b06:	b590      	push	{r4, r7, lr}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b10:	200f      	movs	r0, #15
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	213a      	movs	r1, #58	; 0x3a
 8004b18:	5c52      	ldrb	r2, [r2, r1]
 8004b1a:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b1c:	240e      	movs	r4, #14
 8004b1e:	193b      	adds	r3, r7, r4
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	213b      	movs	r1, #59	; 0x3b
 8004b24:	5c52      	ldrb	r2, [r2, r1]
 8004b26:	701a      	strb	r2, [r3, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b28:	183b      	adds	r3, r7, r0
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d103      	bne.n	8004b38 <HAL_TIM_OnePulse_Start+0x32>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b30:	193b      	adds	r3, r7, r4
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_OnePulse_Start+0x36>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e016      	b.n	8004b6a <HAL_TIM_OnePulse_Start+0x64>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	223a      	movs	r2, #58	; 0x3a
 8004b40:	2102      	movs	r1, #2
 8004b42:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	223b      	movs	r2, #59	; 0x3b
 8004b48:	2102      	movs	r1, #2
 8004b4a:	5499      	strb	r1, [r3, r2]
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2201      	movs	r2, #1
 8004b52:	2100      	movs	r1, #0
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 fe29 	bl	80057ac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	2104      	movs	r1, #4
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 fe22 	bl	80057ac <TIM_CCxChannelCmd>

  /* Return function status */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b005      	add	sp, #20
 8004b70:	bd90      	pop	{r4, r7, pc}

08004b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2202      	movs	r2, #2
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d124      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d11d      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4252      	negs	r2, r2
 8004b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2203      	movs	r2, #3
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fd fc5d 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 facc 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fad0 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d125      	bne.n	8004c2c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d11e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2205      	movs	r2, #5
 8004bf4:	4252      	negs	r2, r2
 8004bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fd fc30 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e007      	b.n	8004c26 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fa9f 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 faa3 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2208      	movs	r2, #8
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d124      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2208      	movs	r2, #8
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d11d      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2209      	movs	r2, #9
 8004c4e:	4252      	negs	r2, r2
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2204      	movs	r2, #4
 8004c56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4013      	ands	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7fd fc04 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e007      	b.n	8004c7e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 fa73 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 fa77 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d125      	bne.n	8004cde <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d11e      	bne.n	8004cde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2211      	movs	r2, #17
 8004ca6:	4252      	negs	r2, r2
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2208      	movs	r2, #8
 8004cae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	23c0      	movs	r3, #192	; 0xc0
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7fd fbd7 	bl	8002474 <HAL_TIM_IC_CaptureCallback>
 8004cc6:	e007      	b.n	8004cd8 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fa46 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 fa4a 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10f      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d108      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4252      	negs	r2, r2
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 fa20 	bl	800514c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10f      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d108      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2241      	movs	r2, #65	; 0x41
 8004d2e:	4252      	negs	r2, r2
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 fa21 	bl	800517c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2317      	movs	r3, #23
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2238      	movs	r2, #56	; 0x38
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIM_OC_ConfigChannel+0x22>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e042      	b.n	8004dea <HAL_TIM_OC_ConfigChannel+0xa8>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2238      	movs	r2, #56	; 0x38
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d027      	beq.n	8004dc2 <HAL_TIM_OC_ConfigChannel+0x80>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d82c      	bhi.n	8004dd2 <HAL_TIM_OC_ConfigChannel+0x90>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d019      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x70>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d826      	bhi.n	8004dd2 <HAL_TIM_OC_ConfigChannel+0x90>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_OC_ConfigChannel+0x50>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d008      	beq.n	8004da2 <HAL_TIM_OC_ConfigChannel+0x60>
 8004d90:	e01f      	b.n	8004dd2 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 fa4a 	bl	8005234 <TIM_OC1_SetConfig>
      break;
 8004da0:	e01c      	b.n	8004ddc <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f000 fa7e 	bl	80052ac <TIM_OC2_SetConfig>
      break;
 8004db0:	e014      	b.n	8004ddc <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 fab8 	bl	8005330 <TIM_OC3_SetConfig>
      break;
 8004dc0:	e00c      	b.n	8004ddc <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	0011      	movs	r1, r2
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 faf0 	bl	80053b0 <TIM_OC4_SetConfig>
      break;
 8004dd0:	e004      	b.n	8004ddc <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8004dd2:	2317      	movs	r3, #23
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
      break;
 8004dda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2238      	movs	r2, #56	; 0x38
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]

  return status;
 8004de4:	2317      	movs	r3, #23
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	781b      	ldrb	r3, [r3, #0]
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b006      	add	sp, #24
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2317      	movs	r3, #23
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2238      	movs	r2, #56	; 0x38
 8004e0c:	5c9b      	ldrb	r3, [r3, r2]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_IC_ConfigChannel+0x22>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e08c      	b.n	8004f30 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2238      	movs	r2, #56	; 0x38
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004e34:	f000 fb02 	bl	800543c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	210c      	movs	r1, #12
 8004e44:	438a      	bics	r2, r1
 8004e46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6999      	ldr	r1, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	619a      	str	r2, [r3, #24]
 8004e5a:	e062      	b.n	8004f22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d11c      	bne.n	8004e9c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004e72:	f000 fb67 	bl	8005544 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	492d      	ldr	r1, [pc, #180]	; (8004f38 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6999      	ldr	r1, [r3, #24]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	e042      	b.n	8004f22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d11b      	bne.n	8004eda <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004eb2:	f000 fbbb 	bl	800562c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	210c      	movs	r1, #12
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
 8004ed8:	e023      	b.n	8004f22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d11c      	bne.n	8004f1a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ef0:	f000 fbdc 	bl	80056ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	490e      	ldr	r1, [pc, #56]	; (8004f38 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004f00:	400a      	ands	r2, r1
 8004f02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69d9      	ldr	r1, [r3, #28]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	61da      	str	r2, [r3, #28]
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004f1a:	2317      	movs	r3, #23
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2238      	movs	r2, #56	; 0x38
 8004f26:	2100      	movs	r1, #0
 8004f28:	5499      	strb	r1, [r3, r2]

  return status;
 8004f2a:	2317      	movs	r3, #23
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	fffff3ff 	.word	0xfffff3ff

08004f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	230f      	movs	r3, #15
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2238      	movs	r2, #56	; 0x38
 8004f52:	5c9b      	ldrb	r3, [r3, r2]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_ConfigClockSource+0x20>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0bc      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x19a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2238      	movs	r2, #56	; 0x38
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2239      	movs	r2, #57	; 0x39
 8004f68:	2102      	movs	r1, #2
 8004f6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2277      	movs	r2, #119	; 0x77
 8004f78:	4393      	bics	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	0192      	lsls	r2, r2, #6
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d040      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xde>
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	0192      	lsls	r2, r2, #6
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d900      	bls.n	8004fa2 <HAL_TIM_ConfigClockSource+0x66>
 8004fa0:	e088      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	0152      	lsls	r2, r2, #5
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d100      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x70>
 8004faa:	e088      	b.n	80050be <HAL_TIM_ConfigClockSource+0x182>
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	0152      	lsls	r2, r2, #5
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d900      	bls.n	8004fb6 <HAL_TIM_ConfigClockSource+0x7a>
 8004fb4:	e07e      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fb6:	2b70      	cmp	r3, #112	; 0x70
 8004fb8:	d018      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xb0>
 8004fba:	d900      	bls.n	8004fbe <HAL_TIM_ConfigClockSource+0x82>
 8004fbc:	e07a      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fbe:	2b60      	cmp	r3, #96	; 0x60
 8004fc0:	d04f      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x126>
 8004fc2:	d900      	bls.n	8004fc6 <HAL_TIM_ConfigClockSource+0x8a>
 8004fc4:	e076      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fc6:	2b50      	cmp	r3, #80	; 0x50
 8004fc8:	d03b      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x106>
 8004fca:	d900      	bls.n	8004fce <HAL_TIM_ConfigClockSource+0x92>
 8004fcc:	e072      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d057      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x146>
 8004fd2:	d900      	bls.n	8004fd6 <HAL_TIM_ConfigClockSource+0x9a>
 8004fd4:	e06e      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fd6:	2b30      	cmp	r3, #48	; 0x30
 8004fd8:	d063      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x166>
 8004fda:	d86b      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d060      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x166>
 8004fe0:	d868      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d05d      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x166>
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d05b      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x166>
 8004fea:	e063      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ffc:	f000 fbb6 	bl	800576c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2277      	movs	r2, #119	; 0x77
 800500c:	4313      	orrs	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
      break;
 8005018:	e052      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	f000 fb9f 	bl	800576c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	01c9      	lsls	r1, r1, #7
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
      break;
 8005040:	e03e      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	001a      	movs	r2, r3
 8005050:	f000 fa4a 	bl	80054e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2150      	movs	r1, #80	; 0x50
 800505a:	0018      	movs	r0, r3
 800505c:	f000 fb6c 	bl	8005738 <TIM_ITRx_SetConfig>
      break;
 8005060:	e02e      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800506e:	001a      	movs	r2, r3
 8005070:	f000 faaa 	bl	80055c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2160      	movs	r1, #96	; 0x60
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fb5c 	bl	8005738 <TIM_ITRx_SetConfig>
      break;
 8005080:	e01e      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	001a      	movs	r2, r3
 8005090:	f000 fa2a 	bl	80054e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	0018      	movs	r0, r3
 800509c:	f000 fb4c 	bl	8005738 <TIM_ITRx_SetConfig>
      break;
 80050a0:	e00e      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0019      	movs	r1, r3
 80050ac:	0010      	movs	r0, r2
 80050ae:	f000 fb43 	bl	8005738 <TIM_ITRx_SetConfig>
      break;
 80050b2:	e005      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80050be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2239      	movs	r2, #57	; 0x39
 80050c4:	2101      	movs	r1, #1
 80050c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2238      	movs	r2, #56	; 0x38
 80050cc:	2100      	movs	r1, #0
 80050ce:	5499      	strb	r1, [r3, r2]

  return status;
 80050d0:	230f      	movs	r3, #15
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	781b      	ldrb	r3, [r3, #0]
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	ffff00ff 	.word	0xffff00ff

080050e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d01e      	beq.n	8005136 <HAL_TIM_ReadCapturedValue+0x52>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d820      	bhi.n	8005140 <HAL_TIM_ReadCapturedValue+0x5c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d013      	beq.n	800512c <HAL_TIM_ReadCapturedValue+0x48>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d81a      	bhi.n	8005140 <HAL_TIM_ReadCapturedValue+0x5c>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_TIM_ReadCapturedValue+0x34>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d005      	beq.n	8005122 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005116:	e013      	b.n	8005140 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	60fb      	str	r3, [r7, #12]
      break;
 8005120:	e00f      	b.n	8005142 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	60fb      	str	r3, [r7, #12]
      break;
 800512a:	e00a      	b.n	8005142 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	60fb      	str	r3, [r7, #12]
      break;
 8005134:	e005      	b.n	8005142 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	60fb      	str	r3, [r7, #12]
      break;
 800513e:	e000      	b.n	8005142 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005140:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8005142:	68fb      	ldr	r3, [r7, #12]
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b004      	add	sp, #16
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b002      	add	sp, #8
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}

0800518c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	05db      	lsls	r3, r3, #23
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0x2a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <TIM_Base_SetConfig+0x9c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0x2a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <TIM_Base_SetConfig+0xa0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2270      	movs	r2, #112	; 0x70
 80051ba:	4393      	bics	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	05db      	lsls	r3, r3, #23
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0x56>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <TIM_Base_SetConfig+0x9c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0x56>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <TIM_Base_SetConfig+0xa0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a12      	ldr	r2, [pc, #72]	; (8005230 <TIM_Base_SetConfig+0xa4>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	4393      	bics	r3, r2
 80051fa:	001a      	movs	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	615a      	str	r2, [r3, #20]
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b004      	add	sp, #16
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40010800 	.word	0x40010800
 800522c:	40011400 	.word	0x40011400
 8005230:	fffffcff 	.word	0xfffffcff

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	2201      	movs	r2, #1
 8005244:	4393      	bics	r3, r2
 8005246:	001a      	movs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2270      	movs	r2, #112	; 0x70
 8005262:	4393      	bics	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2203      	movs	r2, #3
 800526a:	4393      	bics	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2202      	movs	r2, #2
 800527c:	4393      	bics	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b006      	add	sp, #24
 80052aa:	bd80      	pop	{r7, pc}

080052ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	2210      	movs	r2, #16
 80052bc:	4393      	bics	r3, r2
 80052be:	001a      	movs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <TIM_OC2_SetConfig+0x7c>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a12      	ldr	r2, [pc, #72]	; (800532c <TIM_OC2_SetConfig+0x80>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2220      	movs	r2, #32
 80052f6:	4393      	bics	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b006      	add	sp, #24
 8005326:	bd80      	pop	{r7, pc}
 8005328:	ffff8fff 	.word	0xffff8fff
 800532c:	fffffcff 	.word	0xfffffcff

08005330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <TIM_OC3_SetConfig+0x78>)
 8005340:	401a      	ands	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2270      	movs	r2, #112	; 0x70
 800535c:	4393      	bics	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2203      	movs	r2, #3
 8005364:	4393      	bics	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4a0d      	ldr	r2, [pc, #52]	; (80053ac <TIM_OC3_SetConfig+0x7c>)
 8005376:	4013      	ands	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b006      	add	sp, #24
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	fffffeff 	.word	0xfffffeff
 80053ac:	fffffdff 	.word	0xfffffdff

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <TIM_OC4_SetConfig+0x7c>)
 80053c0:	401a      	ands	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <TIM_OC4_SetConfig+0x80>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <TIM_OC4_SetConfig+0x84>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <TIM_OC4_SetConfig+0x88>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b006      	add	sp, #24
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	ffffefff 	.word	0xffffefff
 8005430:	ffff8fff 	.word	0xffff8fff
 8005434:	fffffcff 	.word	0xfffffcff
 8005438:	ffffdfff 	.word	0xffffdfff

0800543c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	2201      	movs	r2, #1
 8005450:	4393      	bics	r3, r2
 8005452:	001a      	movs	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	05db      	lsls	r3, r3, #23
 800546a:	429a      	cmp	r2, r3
 800546c:	d007      	beq.n	800547e <TIM_TI1_SetConfig+0x42>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <TIM_TI1_SetConfig+0xa4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_TI1_SetConfig+0x42>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <TIM_TI1_SetConfig+0xa8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <TIM_TI1_SetConfig+0x46>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <TIM_TI1_SetConfig+0x48>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2203      	movs	r2, #3
 800548c:	4393      	bics	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e003      	b.n	80054a2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2201      	movs	r2, #1
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	22f0      	movs	r2, #240	; 0xf0
 80054a6:	4393      	bics	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	4013      	ands	r3, r2
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	220a      	movs	r2, #10
 80054bc:	4393      	bics	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	220a      	movs	r2, #10
 80054c4:	4013      	ands	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b006      	add	sp, #24
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40010800 	.word	0x40010800
 80054e4:	40011400 	.word	0x40011400

080054e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2201      	movs	r2, #1
 8005500:	4393      	bics	r3, r2
 8005502:	001a      	movs	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	22f0      	movs	r2, #240	; 0xf0
 8005512:	4393      	bics	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	220a      	movs	r2, #10
 8005524:	4393      	bics	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	621a      	str	r2, [r3, #32]
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b006      	add	sp, #24
 8005542:	bd80      	pop	{r7, pc}

08005544 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	2210      	movs	r2, #16
 8005558:	4393      	bics	r3, r2
 800555a:	001a      	movs	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <TIM_TI2_SetConfig+0x7c>)
 8005570:	4013      	ands	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <TIM_TI2_SetConfig+0x80>)
 8005582:	4013      	ands	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	22a0      	movs	r2, #160	; 0xa0
 8005598:	4393      	bics	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	22a0      	movs	r2, #160	; 0xa0
 80055a2:	4013      	ands	r3, r2
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b006      	add	sp, #24
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	fffffcff 	.word	0xfffffcff
 80055c4:	ffff0fff 	.word	0xffff0fff

080055c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	2210      	movs	r2, #16
 80055da:	4393      	bics	r3, r2
 80055dc:	001a      	movs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <TIM_TI2_ConfigInputStage+0x60>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	031b      	lsls	r3, r3, #12
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	22a0      	movs	r2, #160	; 0xa0
 8005604:	4393      	bics	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	46bd      	mov	sp, r7
 8005622:	b006      	add	sp, #24
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	ffff0fff 	.word	0xffff0fff

0800562c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <TIM_TI3_SetConfig+0x78>)
 8005640:	401a      	ands	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2203      	movs	r2, #3
 8005656:	4393      	bics	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	22f0      	movs	r2, #240	; 0xf0
 8005666:	4393      	bics	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	22ff      	movs	r2, #255	; 0xff
 8005670:	4013      	ands	r3, r2
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <TIM_TI3_SetConfig+0x7c>)
 800567c:	4013      	ands	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	23a0      	movs	r3, #160	; 0xa0
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	4013      	ands	r3, r2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b006      	add	sp, #24
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	fffffeff 	.word	0xfffffeff
 80056a8:	fffff5ff 	.word	0xfffff5ff

080056ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <TIM_TI4_SetConfig+0x7c>)
 80056c0:	401a      	ands	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4a15      	ldr	r2, [pc, #84]	; (800572c <TIM_TI4_SetConfig+0x80>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <TIM_TI4_SetConfig+0x84>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	031b      	lsls	r3, r3, #12
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <TIM_TI4_SetConfig+0x88>)
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	031a      	lsls	r2, r3, #12
 8005706:	23a0      	movs	r3, #160	; 0xa0
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	4013      	ands	r3, r2
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b006      	add	sp, #24
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	ffffefff 	.word	0xffffefff
 800572c:	fffffcff 	.word	0xfffffcff
 8005730:	ffff0fff 	.word	0xffff0fff
 8005734:	ffff5fff 	.word	0xffff5fff

08005738 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2270      	movs	r2, #112	; 0x70
 800574c:	4393      	bics	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	2207      	movs	r2, #7
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	609a      	str	r2, [r3, #8]
}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	b004      	add	sp, #16
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <TIM_ETR_SetConfig+0x3c>)
 8005784:	4013      	ands	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	021a      	lsls	r2, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	431a      	orrs	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b006      	add	sp, #24
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	ffff00ff 	.word	0xffff00ff

080057ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	221f      	movs	r2, #31
 80057bc:	4013      	ands	r3, r2
 80057be:	2201      	movs	r2, #1
 80057c0:	409a      	lsls	r2, r3
 80057c2:	0013      	movs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	43d2      	mvns	r2, r2
 80057ce:	401a      	ands	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	211f      	movs	r1, #31
 80057dc:	400b      	ands	r3, r1
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4099      	lsls	r1, r3
 80057e2:	000b      	movs	r3, r1
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2238      	movs	r2, #56	; 0x38
 8005802:	5c9b      	ldrb	r3, [r3, r2]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005808:	2302      	movs	r3, #2
 800580a:	e042      	b.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2238      	movs	r2, #56	; 0x38
 8005810:	2101      	movs	r1, #1
 8005812:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2239      	movs	r2, #57	; 0x39
 8005818:	2102      	movs	r1, #2
 800581a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2270      	movs	r2, #112	; 0x70
 8005830:	4393      	bics	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	05db      	lsls	r3, r3, #23
 800584e:	429a      	cmp	r2, r3
 8005850:	d009      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a11      	ldr	r2, [pc, #68]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0f      	ldr	r2, [pc, #60]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10c      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	4393      	bics	r3, r2
 800586c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4313      	orrs	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2239      	movs	r2, #57	; 0x39
 8005884:	2101      	movs	r1, #1
 8005886:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2238      	movs	r2, #56	; 0x38
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b004      	add	sp, #16
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	40010800 	.word	0x40010800
 80058a0:	40011400 	.word	0x40011400

080058a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e044      	b.n	8005940 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2278      	movs	r2, #120	; 0x78
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fd f9dd 	bl	8002c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2224      	movs	r2, #36	; 0x24
 80058d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	438a      	bics	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 f830 	bl	800594c <UART_SetConfig>
 80058ec:	0003      	movs	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e024      	b.n	8005940 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 faa7 	bl	8005e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	490d      	ldr	r1, [pc, #52]	; (8005948 <HAL_UART_Init+0xa4>)
 8005912:	400a      	ands	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	212a      	movs	r1, #42	; 0x2a
 8005922:	438a      	bics	r2, r1
 8005924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2101      	movs	r1, #1
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	0018      	movs	r0, r3
 800593a:	f000 fb3f 	bl	8005fbc <UART_CheckIdleState>
 800593e:	0003      	movs	r3, r0
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}
 8005948:	ffffb7ff 	.word	0xffffb7ff

0800594c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800594c:	b5b0      	push	{r4, r5, r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005954:	231a      	movs	r3, #26
 8005956:	2218      	movs	r2, #24
 8005958:	189b      	adds	r3, r3, r2
 800595a:	19db      	adds	r3, r3, r7
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4313      	orrs	r3, r2
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4ac6      	ldr	r2, [pc, #792]	; (8005c98 <UART_SetConfig+0x34c>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800598a:	430a      	orrs	r2, r1
 800598c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4ac1      	ldr	r2, [pc, #772]	; (8005c9c <UART_SetConfig+0x350>)
 8005996:	4013      	ands	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4abb      	ldr	r2, [pc, #748]	; (8005ca0 <UART_SetConfig+0x354>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059bc:	4313      	orrs	r3, r2
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	4ab7      	ldr	r2, [pc, #732]	; (8005ca4 <UART_SetConfig+0x358>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	0019      	movs	r1, r3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4ab3      	ldr	r2, [pc, #716]	; (8005ca8 <UART_SetConfig+0x35c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d131      	bne.n	8005a44 <UART_SetConfig+0xf8>
 80059e0:	4bb2      	ldr	r3, [pc, #712]	; (8005cac <UART_SetConfig+0x360>)
 80059e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e4:	2203      	movs	r2, #3
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d01d      	beq.n	8005a28 <UART_SetConfig+0xdc>
 80059ec:	d823      	bhi.n	8005a36 <UART_SetConfig+0xea>
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d00c      	beq.n	8005a0c <UART_SetConfig+0xc0>
 80059f2:	d820      	bhi.n	8005a36 <UART_SetConfig+0xea>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <UART_SetConfig+0xb2>
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d00e      	beq.n	8005a1a <UART_SetConfig+0xce>
 80059fc:	e01b      	b.n	8005a36 <UART_SetConfig+0xea>
 80059fe:	231b      	movs	r3, #27
 8005a00:	2218      	movs	r2, #24
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	19db      	adds	r3, r3, r7
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e09c      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a0c:	231b      	movs	r3, #27
 8005a0e:	2218      	movs	r2, #24
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	19db      	adds	r3, r3, r7
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e095      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a1a:	231b      	movs	r3, #27
 8005a1c:	2218      	movs	r2, #24
 8005a1e:	189b      	adds	r3, r3, r2
 8005a20:	19db      	adds	r3, r3, r7
 8005a22:	2204      	movs	r2, #4
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e08e      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a28:	231b      	movs	r3, #27
 8005a2a:	2218      	movs	r2, #24
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	19db      	adds	r3, r3, r7
 8005a30:	2208      	movs	r2, #8
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e087      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a36:	231b      	movs	r3, #27
 8005a38:	2218      	movs	r2, #24
 8005a3a:	189b      	adds	r3, r3, r2
 8005a3c:	19db      	adds	r3, r3, r7
 8005a3e:	2210      	movs	r2, #16
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e080      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a99      	ldr	r2, [pc, #612]	; (8005cb0 <UART_SetConfig+0x364>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d131      	bne.n	8005ab2 <UART_SetConfig+0x166>
 8005a4e:	4b97      	ldr	r3, [pc, #604]	; (8005cac <UART_SetConfig+0x360>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	220c      	movs	r2, #12
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d01d      	beq.n	8005a96 <UART_SetConfig+0x14a>
 8005a5a:	d823      	bhi.n	8005aa4 <UART_SetConfig+0x158>
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00c      	beq.n	8005a7a <UART_SetConfig+0x12e>
 8005a60:	d820      	bhi.n	8005aa4 <UART_SetConfig+0x158>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <UART_SetConfig+0x120>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d00e      	beq.n	8005a88 <UART_SetConfig+0x13c>
 8005a6a:	e01b      	b.n	8005aa4 <UART_SetConfig+0x158>
 8005a6c:	231b      	movs	r3, #27
 8005a6e:	2218      	movs	r2, #24
 8005a70:	189b      	adds	r3, r3, r2
 8005a72:	19db      	adds	r3, r3, r7
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e065      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a7a:	231b      	movs	r3, #27
 8005a7c:	2218      	movs	r2, #24
 8005a7e:	189b      	adds	r3, r3, r2
 8005a80:	19db      	adds	r3, r3, r7
 8005a82:	2202      	movs	r2, #2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e05e      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a88:	231b      	movs	r3, #27
 8005a8a:	2218      	movs	r2, #24
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	19db      	adds	r3, r3, r7
 8005a90:	2204      	movs	r2, #4
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e057      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005a96:	231b      	movs	r3, #27
 8005a98:	2218      	movs	r2, #24
 8005a9a:	189b      	adds	r3, r3, r2
 8005a9c:	19db      	adds	r3, r3, r7
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e050      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005aa4:	231b      	movs	r3, #27
 8005aa6:	2218      	movs	r2, #24
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	19db      	adds	r3, r3, r7
 8005aac:	2210      	movs	r2, #16
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e049      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7a      	ldr	r2, [pc, #488]	; (8005ca0 <UART_SetConfig+0x354>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d13e      	bne.n	8005b3a <UART_SetConfig+0x1ee>
 8005abc:	4b7b      	ldr	r3, [pc, #492]	; (8005cac <UART_SetConfig+0x360>)
 8005abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac0:	23c0      	movs	r3, #192	; 0xc0
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	22c0      	movs	r2, #192	; 0xc0
 8005ac8:	0112      	lsls	r2, r2, #4
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d027      	beq.n	8005b1e <UART_SetConfig+0x1d2>
 8005ace:	22c0      	movs	r2, #192	; 0xc0
 8005ad0:	0112      	lsls	r2, r2, #4
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d82a      	bhi.n	8005b2c <UART_SetConfig+0x1e0>
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d011      	beq.n	8005b02 <UART_SetConfig+0x1b6>
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d822      	bhi.n	8005b2c <UART_SetConfig+0x1e0>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <UART_SetConfig+0x1a8>
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	00d2      	lsls	r2, r2, #3
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <UART_SetConfig+0x1c4>
 8005af2:	e01b      	b.n	8005b2c <UART_SetConfig+0x1e0>
 8005af4:	231b      	movs	r3, #27
 8005af6:	2218      	movs	r2, #24
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	19db      	adds	r3, r3, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e021      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005b02:	231b      	movs	r3, #27
 8005b04:	2218      	movs	r2, #24
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e01a      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005b10:	231b      	movs	r3, #27
 8005b12:	2218      	movs	r2, #24
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2204      	movs	r2, #4
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e013      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005b1e:	231b      	movs	r3, #27
 8005b20:	2218      	movs	r2, #24
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	19db      	adds	r3, r3, r7
 8005b26:	2208      	movs	r2, #8
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e00c      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005b2c:	231b      	movs	r3, #27
 8005b2e:	2218      	movs	r2, #24
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	19db      	adds	r3, r3, r7
 8005b34:	2210      	movs	r2, #16
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e005      	b.n	8005b46 <UART_SetConfig+0x1fa>
 8005b3a:	231b      	movs	r3, #27
 8005b3c:	2218      	movs	r2, #24
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	19db      	adds	r3, r3, r7
 8005b42:	2210      	movs	r2, #16
 8005b44:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a55      	ldr	r2, [pc, #340]	; (8005ca0 <UART_SetConfig+0x354>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d000      	beq.n	8005b52 <UART_SetConfig+0x206>
 8005b50:	e084      	b.n	8005c5c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b52:	231b      	movs	r3, #27
 8005b54:	2218      	movs	r2, #24
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d01d      	beq.n	8005b9c <UART_SetConfig+0x250>
 8005b60:	dc20      	bgt.n	8005ba4 <UART_SetConfig+0x258>
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d015      	beq.n	8005b92 <UART_SetConfig+0x246>
 8005b66:	dc1d      	bgt.n	8005ba4 <UART_SetConfig+0x258>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <UART_SetConfig+0x226>
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d005      	beq.n	8005b7c <UART_SetConfig+0x230>
 8005b70:	e018      	b.n	8005ba4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b72:	f7fe fcad 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005b76:	0003      	movs	r3, r0
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b7a:	e01c      	b.n	8005bb6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <UART_SetConfig+0x360>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2210      	movs	r2, #16
 8005b82:	4013      	ands	r3, r2
 8005b84:	d002      	beq.n	8005b8c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b86:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <UART_SetConfig+0x368>)
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b8a:	e014      	b.n	8005bb6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b4a      	ldr	r3, [pc, #296]	; (8005cb8 <UART_SetConfig+0x36c>)
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b90:	e011      	b.n	8005bb6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fe fbed 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005b96:	0003      	movs	r3, r0
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9a:	e00c      	b.n	8005bb6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ba2:	e008      	b.n	8005bb6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ba8:	231a      	movs	r3, #26
 8005baa:	2218      	movs	r2, #24
 8005bac:	189b      	adds	r3, r3, r2
 8005bae:	19db      	adds	r3, r3, r7
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
        break;
 8005bb4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d100      	bne.n	8005bbe <UART_SetConfig+0x272>
 8005bbc:	e132      	b.n	8005e24 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d305      	bcc.n	8005bda <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d906      	bls.n	8005be8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005bda:	231a      	movs	r3, #26
 8005bdc:	2218      	movs	r2, #24
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e11d      	b.n	8005e24 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	6939      	ldr	r1, [r7, #16]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	000b      	movs	r3, r1
 8005bf6:	0e1b      	lsrs	r3, r3, #24
 8005bf8:	0010      	movs	r0, r2
 8005bfa:	0205      	lsls	r5, r0, #8
 8005bfc:	431d      	orrs	r5, r3
 8005bfe:	000b      	movs	r3, r1
 8005c00:	021c      	lsls	r4, r3, #8
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68b8      	ldr	r0, [r7, #8]
 8005c10:	68f9      	ldr	r1, [r7, #12]
 8005c12:	1900      	adds	r0, r0, r4
 8005c14:	4169      	adcs	r1, r5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f7fa fc40 	bl	80004a8 <__aeabi_uldivmod>
 8005c28:	0002      	movs	r2, r0
 8005c2a:	000b      	movs	r3, r1
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c32:	23c0      	movs	r3, #192	; 0xc0
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d309      	bcc.n	8005c4e <UART_SetConfig+0x302>
 8005c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	035b      	lsls	r3, r3, #13
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d204      	bcs.n	8005c4e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4a:	60da      	str	r2, [r3, #12]
 8005c4c:	e0ea      	b.n	8005e24 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c4e:	231a      	movs	r3, #26
 8005c50:	2218      	movs	r2, #24
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	19db      	adds	r3, r3, r7
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	e0e3      	b.n	8005e24 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d000      	beq.n	8005c6a <UART_SetConfig+0x31e>
 8005c68:	e085      	b.n	8005d76 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8005c6a:	231b      	movs	r3, #27
 8005c6c:	2218      	movs	r2, #24
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	19db      	adds	r3, r3, r7
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d837      	bhi.n	8005ce8 <UART_SetConfig+0x39c>
 8005c78:	009a      	lsls	r2, r3, #2
 8005c7a:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <UART_SetConfig+0x370>)
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fe fc25 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005c86:	0003      	movs	r3, r0
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c8a:	e036      	b.n	8005cfa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c8c:	f7fe fc36 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005c90:	0003      	movs	r3, r0
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c94:	e031      	b.n	8005cfa <UART_SetConfig+0x3ae>
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	efff69f3 	.word	0xefff69f3
 8005c9c:	ffffcfff 	.word	0xffffcfff
 8005ca0:	40004800 	.word	0x40004800
 8005ca4:	fffff4ff 	.word	0xfffff4ff
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40004400 	.word	0x40004400
 8005cb4:	003d0900 	.word	0x003d0900
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	08008e04 	.word	0x08008e04
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc0:	4b60      	ldr	r3, [pc, #384]	; (8005e44 <UART_SetConfig+0x4f8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d002      	beq.n	8005cd0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005cca:	4b5f      	ldr	r3, [pc, #380]	; (8005e48 <UART_SetConfig+0x4fc>)
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cce:	e014      	b.n	8005cfa <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b5e      	ldr	r3, [pc, #376]	; (8005e4c <UART_SetConfig+0x500>)
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd4:	e011      	b.n	8005cfa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe fb4b 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cde:	e00c      	b.n	8005cfa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce6:	e008      	b.n	8005cfa <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cec:	231a      	movs	r3, #26
 8005cee:	2218      	movs	r2, #24
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	19db      	adds	r3, r3, r7
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
        break;
 8005cf8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d100      	bne.n	8005d02 <UART_SetConfig+0x3b6>
 8005d00:	e090      	b.n	8005e24 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	005a      	lsls	r2, r3, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	18d2      	adds	r2, r2, r3
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	0019      	movs	r1, r3
 8005d14:	0010      	movs	r0, r2
 8005d16:	f7fa fa13 	bl	8000140 <__udivsi3>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d921      	bls.n	8005d68 <UART_SetConfig+0x41c>
 8005d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	025b      	lsls	r3, r3, #9
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d21c      	bcs.n	8005d68 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	200e      	movs	r0, #14
 8005d34:	2418      	movs	r4, #24
 8005d36:	1903      	adds	r3, r0, r4
 8005d38:	19db      	adds	r3, r3, r7
 8005d3a:	210f      	movs	r1, #15
 8005d3c:	438a      	bics	r2, r1
 8005d3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2207      	movs	r2, #7
 8005d48:	4013      	ands	r3, r2
 8005d4a:	b299      	uxth	r1, r3
 8005d4c:	1903      	adds	r3, r0, r4
 8005d4e:	19db      	adds	r3, r3, r7
 8005d50:	1902      	adds	r2, r0, r4
 8005d52:	19d2      	adds	r2, r2, r7
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	1902      	adds	r2, r0, r4
 8005d60:	19d2      	adds	r2, r2, r7
 8005d62:	8812      	ldrh	r2, [r2, #0]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e05d      	b.n	8005e24 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d68:	231a      	movs	r3, #26
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e056      	b.n	8005e24 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d76:	231b      	movs	r3, #27
 8005d78:	2218      	movs	r2, #24
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	19db      	adds	r3, r3, r7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d822      	bhi.n	8005dca <UART_SetConfig+0x47e>
 8005d84:	009a      	lsls	r2, r3, #2
 8005d86:	4b32      	ldr	r3, [pc, #200]	; (8005e50 <UART_SetConfig+0x504>)
 8005d88:	18d3      	adds	r3, r2, r3
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d8e:	f7fe fb9f 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005d92:	0003      	movs	r3, r0
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d96:	e021      	b.n	8005ddc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fe fbb0 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005d9c:	0003      	movs	r3, r0
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005da0:	e01c      	b.n	8005ddc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da2:	4b28      	ldr	r3, [pc, #160]	; (8005e44 <UART_SetConfig+0x4f8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2210      	movs	r2, #16
 8005da8:	4013      	ands	r3, r2
 8005daa:	d002      	beq.n	8005db2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005dac:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <UART_SetConfig+0x4fc>)
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db0:	e014      	b.n	8005ddc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <UART_SetConfig+0x500>)
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db6:	e011      	b.n	8005ddc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db8:	f7fe fada 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc0:	e00c      	b.n	8005ddc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc8:	e008      	b.n	8005ddc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005dce:	231a      	movs	r3, #26
 8005dd0:	2218      	movs	r2, #24
 8005dd2:	189b      	adds	r3, r3, r2
 8005dd4:	19db      	adds	r3, r3, r7
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
        break;
 8005dda:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d020      	beq.n	8005e24 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085a      	lsrs	r2, r3, #1
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	18d2      	adds	r2, r2, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	0019      	movs	r1, r3
 8005df2:	0010      	movs	r0, r2
 8005df4:	f7fa f9a4 	bl	8000140 <__udivsi3>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	2b0f      	cmp	r3, #15
 8005e00:	d90a      	bls.n	8005e18 <UART_SetConfig+0x4cc>
 8005e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	025b      	lsls	r3, r3, #9
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d205      	bcs.n	8005e18 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60da      	str	r2, [r3, #12]
 8005e16:	e005      	b.n	8005e24 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e18:	231a      	movs	r3, #26
 8005e1a:	2218      	movs	r2, #24
 8005e1c:	189b      	adds	r3, r3, r2
 8005e1e:	19db      	adds	r3, r3, r7
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2200      	movs	r2, #0
 8005e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e30:	231a      	movs	r3, #26
 8005e32:	2218      	movs	r2, #24
 8005e34:	189b      	adds	r3, r3, r2
 8005e36:	19db      	adds	r3, r3, r7
 8005e38:	781b      	ldrb	r3, [r3, #0]
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b00e      	add	sp, #56	; 0x38
 8005e40:	bdb0      	pop	{r4, r5, r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	40021000 	.word	0x40021000
 8005e48:	003d0900 	.word	0x003d0900
 8005e4c:	00f42400 	.word	0x00f42400
 8005e50:	08008e28 	.word	0x08008e28

08005e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <UART_AdvFeatureConfig+0x144>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2202      	movs	r2, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a43      	ldr	r2, [pc, #268]	; (8005f9c <UART_AdvFeatureConfig+0x148>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <UART_AdvFeatureConfig+0x14c>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a34      	ldr	r2, [pc, #208]	; (8005fa4 <UART_AdvFeatureConfig+0x150>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2210      	movs	r2, #16
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <UART_AdvFeatureConfig+0x154>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a25      	ldr	r2, [pc, #148]	; (8005fac <UART_AdvFeatureConfig+0x158>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <UART_AdvFeatureConfig+0x15c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	035b      	lsls	r3, r3, #13
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d10b      	bne.n	8005f6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <UART_AdvFeatureConfig+0x160>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	4013      	ands	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <UART_AdvFeatureConfig+0x164>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	fffdffff 	.word	0xfffdffff
 8005f9c:	fffeffff 	.word	0xfffeffff
 8005fa0:	fffbffff 	.word	0xfffbffff
 8005fa4:	ffff7fff 	.word	0xffff7fff
 8005fa8:	ffffefff 	.word	0xffffefff
 8005fac:	ffffdfff 	.word	0xffffdfff
 8005fb0:	ffefffff 	.word	0xffefffff
 8005fb4:	ff9fffff 	.word	0xff9fffff
 8005fb8:	fff7ffff 	.word	0xfff7ffff

08005fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b092      	sub	sp, #72	; 0x48
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2284      	movs	r2, #132	; 0x84
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fcc:	f7fd f82a 	bl	8003024 <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d12c      	bne.n	800603c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	0391      	lsls	r1, r2, #14
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4a46      	ldr	r2, [pc, #280]	; (8006104 <UART_CheckIdleState+0x148>)
 8005fec:	9200      	str	r2, [sp, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f000 f88c 	bl	800610c <UART_WaitOnFlagUntilTimeout>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d021      	beq.n	800603c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
 8006002:	2301      	movs	r3, #1
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f383 8810 	msr	PRIMASK, r3
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	438a      	bics	r2, r1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2278      	movs	r2, #120	; 0x78
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e05f      	b.n	80060fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2204      	movs	r2, #4
 8006044:	4013      	ands	r3, r2
 8006046:	2b04      	cmp	r3, #4
 8006048:	d146      	bne.n	80060d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604c:	2280      	movs	r2, #128	; 0x80
 800604e:	03d1      	lsls	r1, r2, #15
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <UART_CheckIdleState+0x148>)
 8006054:	9200      	str	r2, [sp, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	f000 f858 	bl	800610c <UART_WaitOnFlagUntilTimeout>
 800605c:	1e03      	subs	r3, r0, #0
 800605e:	d03b      	beq.n	80060d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006060:	f3ef 8310 	mrs	r3, PRIMASK
 8006064:	60fb      	str	r3, [r7, #12]
  return(result);
 8006066:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
 800606a:	2301      	movs	r3, #1
 800606c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4921      	ldr	r1, [pc, #132]	; (8006108 <UART_CheckIdleState+0x14c>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006092:	f3ef 8310 	mrs	r3, PRIMASK
 8006096:	61bb      	str	r3, [r7, #24]
  return(result);
 8006098:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
 800609c:	2301      	movs	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2101      	movs	r1, #1
 80060b4:	438a      	bics	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	2120      	movs	r1, #32
 80060ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2278      	movs	r2, #120	; 0x78
 80060d0:	2100      	movs	r1, #0
 80060d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e011      	b.n	80060fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	2120      	movs	r1, #32
 80060e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2278      	movs	r2, #120	; 0x78
 80060f6:	2100      	movs	r1, #0
 80060f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b010      	add	sp, #64	; 0x40
 8006102:	bd80      	pop	{r7, pc}
 8006104:	01ffffff 	.word	0x01ffffff
 8006108:	fffffedf 	.word	0xfffffedf

0800610c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	1dfb      	adds	r3, r7, #7
 800611a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	e04b      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	3301      	adds	r3, #1
 8006122:	d048      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006124:	f7fc ff7e 	bl	8003024 <HAL_GetTick>
 8006128:	0002      	movs	r2, r0
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e04b      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2204      	movs	r2, #4
 8006146:	4013      	ands	r3, r2
 8006148:	d035      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	2208      	movs	r2, #8
 8006152:	4013      	ands	r3, r2
 8006154:	2b08      	cmp	r3, #8
 8006156:	d111      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2208      	movs	r2, #8
 800615e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	0018      	movs	r0, r3
 8006164:	f000 f83c 	bl	80061e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2284      	movs	r2, #132	; 0x84
 800616c:	2108      	movs	r1, #8
 800616e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2278      	movs	r2, #120	; 0x78
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e02c      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	401a      	ands	r2, r3
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	429a      	cmp	r2, r3
 800618e:	d112      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	0112      	lsls	r2, r2, #4
 8006198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f81f 	bl	80061e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2284      	movs	r2, #132	; 0x84
 80061a6:	2120      	movs	r1, #32
 80061a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2278      	movs	r2, #120	; 0x78
 80061ae:	2100      	movs	r1, #0
 80061b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e00f      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	425a      	negs	r2, r3
 80061c6:	4153      	adcs	r3, r2
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	001a      	movs	r2, r3
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d0a4      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b004      	add	sp, #16
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	; 0x38
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ec:	617b      	str	r3, [r7, #20]
  return(result);
 80061ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	2301      	movs	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			; (mov r8, r8)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4926      	ldr	r1, [pc, #152]	; (80062a4 <UART_EndRxTransfer+0xc4>)
 800620a:	400a      	ands	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621a:	f3ef 8310 	mrs	r3, PRIMASK
 800621e:	623b      	str	r3, [r7, #32]
  return(result);
 8006220:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	633b      	str	r3, [r7, #48]	; 0x30
 8006224:	2301      	movs	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2101      	movs	r1, #1
 800623c:	438a      	bics	r2, r1
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f383 8810 	msr	PRIMASK, r3
}
 800624a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006250:	2b01      	cmp	r3, #1
 8006252:	d118      	bne.n	8006286 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006254:	f3ef 8310 	mrs	r3, PRIMASK
 8006258:	60bb      	str	r3, [r7, #8]
  return(result);
 800625a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625e:	2301      	movs	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f383 8810 	msr	PRIMASK, r3
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2110      	movs	r1, #16
 8006276:	438a      	bics	r2, r1
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2280      	movs	r2, #128	; 0x80
 800628a:	2120      	movs	r1, #32
 800628c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	669a      	str	r2, [r3, #104]	; 0x68
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	b00e      	add	sp, #56	; 0x38
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	fffffedf 	.word	0xfffffedf

080062a8 <__cvt>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	001e      	movs	r6, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	0014      	movs	r4, r2
 80062b0:	b08b      	sub	sp, #44	; 0x2c
 80062b2:	429e      	cmp	r6, r3
 80062b4:	da04      	bge.n	80062c0 <__cvt+0x18>
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	0609      	lsls	r1, r1, #24
 80062ba:	1873      	adds	r3, r6, r1
 80062bc:	001e      	movs	r6, r3
 80062be:	232d      	movs	r3, #45	; 0x2d
 80062c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062c4:	7013      	strb	r3, [r2, #0]
 80062c6:	2320      	movs	r3, #32
 80062c8:	2203      	movs	r2, #3
 80062ca:	439f      	bics	r7, r3
 80062cc:	2f46      	cmp	r7, #70	; 0x46
 80062ce:	d007      	beq.n	80062e0 <__cvt+0x38>
 80062d0:	003b      	movs	r3, r7
 80062d2:	3b45      	subs	r3, #69	; 0x45
 80062d4:	4259      	negs	r1, r3
 80062d6:	414b      	adcs	r3, r1
 80062d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80062da:	3a01      	subs	r2, #1
 80062dc:	18cb      	adds	r3, r1, r3
 80062de:	9310      	str	r3, [sp, #64]	; 0x40
 80062e0:	ab09      	add	r3, sp, #36	; 0x24
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	ab08      	add	r3, sp, #32
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ea:	9200      	str	r2, [sp, #0]
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f0:	0022      	movs	r2, r4
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	0033      	movs	r3, r6
 80062f6:	f000 fe87 	bl	8007008 <_dtoa_r>
 80062fa:	0005      	movs	r5, r0
 80062fc:	2f47      	cmp	r7, #71	; 0x47
 80062fe:	d102      	bne.n	8006306 <__cvt+0x5e>
 8006300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006302:	07db      	lsls	r3, r3, #31
 8006304:	d528      	bpl.n	8006358 <__cvt+0xb0>
 8006306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006308:	18eb      	adds	r3, r5, r3
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	2f46      	cmp	r7, #70	; 0x46
 800630e:	d114      	bne.n	800633a <__cvt+0x92>
 8006310:	782b      	ldrb	r3, [r5, #0]
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d10c      	bne.n	8006330 <__cvt+0x88>
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	0020      	movs	r0, r4
 800631c:	0031      	movs	r1, r6
 800631e:	f7fa f895 	bl	800044c <__aeabi_dcmpeq>
 8006322:	2800      	cmp	r0, #0
 8006324:	d104      	bne.n	8006330 <__cvt+0x88>
 8006326:	2301      	movs	r3, #1
 8006328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	9307      	str	r3, [sp, #28]
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	0020      	movs	r0, r4
 8006340:	0031      	movs	r1, r6
 8006342:	f7fa f883 	bl	800044c <__aeabi_dcmpeq>
 8006346:	2800      	cmp	r0, #0
 8006348:	d001      	beq.n	800634e <__cvt+0xa6>
 800634a:	9b07      	ldr	r3, [sp, #28]
 800634c:	9309      	str	r3, [sp, #36]	; 0x24
 800634e:	2230      	movs	r2, #48	; 0x30
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	9907      	ldr	r1, [sp, #28]
 8006354:	428b      	cmp	r3, r1
 8006356:	d306      	bcc.n	8006366 <__cvt+0xbe>
 8006358:	0028      	movs	r0, r5
 800635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800635e:	1b5b      	subs	r3, r3, r5
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	b00b      	add	sp, #44	; 0x2c
 8006364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	9109      	str	r1, [sp, #36]	; 0x24
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e7f0      	b.n	8006350 <__cvt+0xa8>

0800636e <__exponent>:
 800636e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006370:	1c83      	adds	r3, r0, #2
 8006372:	b087      	sub	sp, #28
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	0005      	movs	r5, r0
 8006378:	000c      	movs	r4, r1
 800637a:	232b      	movs	r3, #43	; 0x2b
 800637c:	7002      	strb	r2, [r0, #0]
 800637e:	2900      	cmp	r1, #0
 8006380:	da01      	bge.n	8006386 <__exponent+0x18>
 8006382:	424c      	negs	r4, r1
 8006384:	3302      	adds	r3, #2
 8006386:	706b      	strb	r3, [r5, #1]
 8006388:	2c09      	cmp	r4, #9
 800638a:	dd2f      	ble.n	80063ec <__exponent+0x7e>
 800638c:	270a      	movs	r7, #10
 800638e:	ab04      	add	r3, sp, #16
 8006390:	1dde      	adds	r6, r3, #7
 8006392:	0020      	movs	r0, r4
 8006394:	0039      	movs	r1, r7
 8006396:	9601      	str	r6, [sp, #4]
 8006398:	f7fa f842 	bl	8000420 <__aeabi_idivmod>
 800639c:	3e01      	subs	r6, #1
 800639e:	3130      	adds	r1, #48	; 0x30
 80063a0:	0020      	movs	r0, r4
 80063a2:	7031      	strb	r1, [r6, #0]
 80063a4:	0039      	movs	r1, r7
 80063a6:	9402      	str	r4, [sp, #8]
 80063a8:	f7f9 ff54 	bl	8000254 <__divsi3>
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	0004      	movs	r4, r0
 80063b0:	2b63      	cmp	r3, #99	; 0x63
 80063b2:	dcee      	bgt.n	8006392 <__exponent+0x24>
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	3430      	adds	r4, #48	; 0x30
 80063b8:	1e9a      	subs	r2, r3, #2
 80063ba:	0013      	movs	r3, r2
 80063bc:	9903      	ldr	r1, [sp, #12]
 80063be:	7014      	strb	r4, [r2, #0]
 80063c0:	a804      	add	r0, sp, #16
 80063c2:	3007      	adds	r0, #7
 80063c4:	4298      	cmp	r0, r3
 80063c6:	d80c      	bhi.n	80063e2 <__exponent+0x74>
 80063c8:	2300      	movs	r3, #0
 80063ca:	4282      	cmp	r2, r0
 80063cc:	d804      	bhi.n	80063d8 <__exponent+0x6a>
 80063ce:	aa04      	add	r2, sp, #16
 80063d0:	3309      	adds	r3, #9
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	9a01      	ldr	r2, [sp, #4]
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	9a03      	ldr	r2, [sp, #12]
 80063da:	18d3      	adds	r3, r2, r3
 80063dc:	1b58      	subs	r0, r3, r5
 80063de:	b007      	add	sp, #28
 80063e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e2:	7818      	ldrb	r0, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	7008      	strb	r0, [r1, #0]
 80063e8:	3101      	adds	r1, #1
 80063ea:	e7e9      	b.n	80063c0 <__exponent+0x52>
 80063ec:	2330      	movs	r3, #48	; 0x30
 80063ee:	3430      	adds	r4, #48	; 0x30
 80063f0:	70ab      	strb	r3, [r5, #2]
 80063f2:	70ec      	strb	r4, [r5, #3]
 80063f4:	1d2b      	adds	r3, r5, #4
 80063f6:	e7f1      	b.n	80063dc <__exponent+0x6e>

080063f8 <_printf_float>:
 80063f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fa:	b095      	sub	sp, #84	; 0x54
 80063fc:	000c      	movs	r4, r1
 80063fe:	9208      	str	r2, [sp, #32]
 8006400:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006402:	9309      	str	r3, [sp, #36]	; 0x24
 8006404:	0007      	movs	r7, r0
 8006406:	f000 fce5 	bl	8006dd4 <_localeconv_r>
 800640a:	6803      	ldr	r3, [r0, #0]
 800640c:	0018      	movs	r0, r3
 800640e:	930c      	str	r3, [sp, #48]	; 0x30
 8006410:	f7f9 fe7a 	bl	8000108 <strlen>
 8006414:	2300      	movs	r3, #0
 8006416:	9312      	str	r3, [sp, #72]	; 0x48
 8006418:	7e23      	ldrb	r3, [r4, #24]
 800641a:	2207      	movs	r2, #7
 800641c:	930a      	str	r3, [sp, #40]	; 0x28
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	900d      	str	r0, [sp, #52]	; 0x34
 8006422:	930b      	str	r3, [sp, #44]	; 0x2c
 8006424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006426:	682b      	ldr	r3, [r5, #0]
 8006428:	05c9      	lsls	r1, r1, #23
 800642a:	d547      	bpl.n	80064bc <_printf_float+0xc4>
 800642c:	189b      	adds	r3, r3, r2
 800642e:	4393      	bics	r3, r2
 8006430:	001a      	movs	r2, r3
 8006432:	3208      	adds	r2, #8
 8006434:	602a      	str	r2, [r5, #0]
 8006436:	681e      	ldr	r6, [r3, #0]
 8006438:	685d      	ldr	r5, [r3, #4]
 800643a:	0032      	movs	r2, r6
 800643c:	002b      	movs	r3, r5
 800643e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006440:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006442:	2201      	movs	r2, #1
 8006444:	006b      	lsls	r3, r5, #1
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	930e      	str	r3, [sp, #56]	; 0x38
 800644a:	0030      	movs	r0, r6
 800644c:	4bab      	ldr	r3, [pc, #684]	; (80066fc <_printf_float+0x304>)
 800644e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006450:	4252      	negs	r2, r2
 8006452:	f7fb fee1 	bl	8002218 <__aeabi_dcmpun>
 8006456:	2800      	cmp	r0, #0
 8006458:	d132      	bne.n	80064c0 <_printf_float+0xc8>
 800645a:	2201      	movs	r2, #1
 800645c:	0030      	movs	r0, r6
 800645e:	4ba7      	ldr	r3, [pc, #668]	; (80066fc <_printf_float+0x304>)
 8006460:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006462:	4252      	negs	r2, r2
 8006464:	f7fa f802 	bl	800046c <__aeabi_dcmple>
 8006468:	2800      	cmp	r0, #0
 800646a:	d129      	bne.n	80064c0 <_printf_float+0xc8>
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	0030      	movs	r0, r6
 8006472:	0029      	movs	r1, r5
 8006474:	f7f9 fff0 	bl	8000458 <__aeabi_dcmplt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d003      	beq.n	8006484 <_printf_float+0x8c>
 800647c:	0023      	movs	r3, r4
 800647e:	222d      	movs	r2, #45	; 0x2d
 8006480:	3343      	adds	r3, #67	; 0x43
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006486:	4d9e      	ldr	r5, [pc, #632]	; (8006700 <_printf_float+0x308>)
 8006488:	2b47      	cmp	r3, #71	; 0x47
 800648a:	d900      	bls.n	800648e <_printf_float+0x96>
 800648c:	4d9d      	ldr	r5, [pc, #628]	; (8006704 <_printf_float+0x30c>)
 800648e:	2303      	movs	r3, #3
 8006490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	3301      	adds	r3, #1
 8006496:	439a      	bics	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6022      	str	r2, [r4, #0]
 800649c:	930b      	str	r3, [sp, #44]	; 0x2c
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	0021      	movs	r1, r4
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	0038      	movs	r0, r7
 80064a6:	9b08      	ldr	r3, [sp, #32]
 80064a8:	aa13      	add	r2, sp, #76	; 0x4c
 80064aa:	f000 f9fb 	bl	80068a4 <_printf_common>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d000      	beq.n	80064b4 <_printf_float+0xbc>
 80064b2:	e0a3      	b.n	80065fc <_printf_float+0x204>
 80064b4:	2001      	movs	r0, #1
 80064b6:	4240      	negs	r0, r0
 80064b8:	b015      	add	sp, #84	; 0x54
 80064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064bc:	3307      	adds	r3, #7
 80064be:	e7b6      	b.n	800642e <_printf_float+0x36>
 80064c0:	0032      	movs	r2, r6
 80064c2:	002b      	movs	r3, r5
 80064c4:	0030      	movs	r0, r6
 80064c6:	0029      	movs	r1, r5
 80064c8:	f7fb fea6 	bl	8002218 <__aeabi_dcmpun>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d00b      	beq.n	80064e8 <_printf_float+0xf0>
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	da03      	bge.n	80064dc <_printf_float+0xe4>
 80064d4:	0023      	movs	r3, r4
 80064d6:	222d      	movs	r2, #45	; 0x2d
 80064d8:	3343      	adds	r3, #67	; 0x43
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	4d8a      	ldr	r5, [pc, #552]	; (8006708 <_printf_float+0x310>)
 80064e0:	2b47      	cmp	r3, #71	; 0x47
 80064e2:	d9d4      	bls.n	800648e <_printf_float+0x96>
 80064e4:	4d89      	ldr	r5, [pc, #548]	; (800670c <_printf_float+0x314>)
 80064e6:	e7d2      	b.n	800648e <_printf_float+0x96>
 80064e8:	2220      	movs	r2, #32
 80064ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	4391      	bics	r1, r2
 80064f0:	910e      	str	r1, [sp, #56]	; 0x38
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	d14a      	bne.n	800658c <_printf_float+0x194>
 80064f6:	3307      	adds	r3, #7
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4313      	orrs	r3, r2
 8006502:	2200      	movs	r2, #0
 8006504:	9206      	str	r2, [sp, #24]
 8006506:	aa12      	add	r2, sp, #72	; 0x48
 8006508:	9205      	str	r2, [sp, #20]
 800650a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	9204      	str	r2, [sp, #16]
 8006510:	aa11      	add	r2, sp, #68	; 0x44
 8006512:	9203      	str	r2, [sp, #12]
 8006514:	2223      	movs	r2, #35	; 0x23
 8006516:	a908      	add	r1, sp, #32
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	6863      	ldr	r3, [r4, #4]
 800651c:	1852      	adds	r2, r2, r1
 800651e:	9202      	str	r2, [sp, #8]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	0032      	movs	r2, r6
 8006524:	002b      	movs	r3, r5
 8006526:	0038      	movs	r0, r7
 8006528:	f7ff febe 	bl	80062a8 <__cvt>
 800652c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800652e:	0005      	movs	r5, r0
 8006530:	2b47      	cmp	r3, #71	; 0x47
 8006532:	d109      	bne.n	8006548 <_printf_float+0x150>
 8006534:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006536:	1cda      	adds	r2, r3, #3
 8006538:	db02      	blt.n	8006540 <_printf_float+0x148>
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	4293      	cmp	r3, r2
 800653e:	dd49      	ble.n	80065d4 <_printf_float+0x1dc>
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	3b02      	subs	r3, #2
 8006544:	b2db      	uxtb	r3, r3
 8006546:	930a      	str	r3, [sp, #40]	; 0x28
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800654c:	2b65      	cmp	r3, #101	; 0x65
 800654e:	d824      	bhi.n	800659a <_printf_float+0x1a2>
 8006550:	0020      	movs	r0, r4
 8006552:	001a      	movs	r2, r3
 8006554:	3901      	subs	r1, #1
 8006556:	3050      	adds	r0, #80	; 0x50
 8006558:	9111      	str	r1, [sp, #68]	; 0x44
 800655a:	f7ff ff08 	bl	800636e <__exponent>
 800655e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006560:	900b      	str	r0, [sp, #44]	; 0x2c
 8006562:	1813      	adds	r3, r2, r0
 8006564:	6123      	str	r3, [r4, #16]
 8006566:	2a01      	cmp	r2, #1
 8006568:	dc02      	bgt.n	8006570 <_printf_float+0x178>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	07d2      	lsls	r2, r2, #31
 800656e:	d501      	bpl.n	8006574 <_printf_float+0x17c>
 8006570:	3301      	adds	r3, #1
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	2323      	movs	r3, #35	; 0x23
 8006576:	aa08      	add	r2, sp, #32
 8006578:	189b      	adds	r3, r3, r2
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d100      	bne.n	8006582 <_printf_float+0x18a>
 8006580:	e78d      	b.n	800649e <_printf_float+0xa6>
 8006582:	0023      	movs	r3, r4
 8006584:	222d      	movs	r2, #45	; 0x2d
 8006586:	3343      	adds	r3, #67	; 0x43
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e788      	b.n	800649e <_printf_float+0xa6>
 800658c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800658e:	2a47      	cmp	r2, #71	; 0x47
 8006590:	d1b3      	bne.n	80064fa <_printf_float+0x102>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1b1      	bne.n	80064fa <_printf_float+0x102>
 8006596:	3301      	adds	r3, #1
 8006598:	e7ae      	b.n	80064f8 <_printf_float+0x100>
 800659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659c:	2b66      	cmp	r3, #102	; 0x66
 800659e:	d11b      	bne.n	80065d8 <_printf_float+0x1e0>
 80065a0:	6863      	ldr	r3, [r4, #4]
 80065a2:	2900      	cmp	r1, #0
 80065a4:	dd09      	ble.n	80065ba <_printf_float+0x1c2>
 80065a6:	6121      	str	r1, [r4, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <_printf_float+0x1ba>
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	07d2      	lsls	r2, r2, #31
 80065b0:	d50b      	bpl.n	80065ca <_printf_float+0x1d2>
 80065b2:	3301      	adds	r3, #1
 80065b4:	185b      	adds	r3, r3, r1
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	e007      	b.n	80065ca <_printf_float+0x1d2>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <_printf_float+0x1ce>
 80065be:	2201      	movs	r2, #1
 80065c0:	6821      	ldr	r1, [r4, #0]
 80065c2:	4211      	tst	r1, r2
 80065c4:	d000      	beq.n	80065c8 <_printf_float+0x1d0>
 80065c6:	1c9a      	adds	r2, r3, #2
 80065c8:	6122      	str	r2, [r4, #16]
 80065ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80065ce:	2300      	movs	r3, #0
 80065d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d2:	e7cf      	b.n	8006574 <_printf_float+0x17c>
 80065d4:	2367      	movs	r3, #103	; 0x67
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065dc:	4299      	cmp	r1, r3
 80065de:	db06      	blt.n	80065ee <_printf_float+0x1f6>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	6121      	str	r1, [r4, #16]
 80065e4:	07db      	lsls	r3, r3, #31
 80065e6:	d5f0      	bpl.n	80065ca <_printf_float+0x1d2>
 80065e8:	3101      	adds	r1, #1
 80065ea:	6121      	str	r1, [r4, #16]
 80065ec:	e7ed      	b.n	80065ca <_printf_float+0x1d2>
 80065ee:	2201      	movs	r2, #1
 80065f0:	2900      	cmp	r1, #0
 80065f2:	dc01      	bgt.n	80065f8 <_printf_float+0x200>
 80065f4:	1892      	adds	r2, r2, r2
 80065f6:	1a52      	subs	r2, r2, r1
 80065f8:	189b      	adds	r3, r3, r2
 80065fa:	e7dc      	b.n	80065b6 <_printf_float+0x1be>
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	0553      	lsls	r3, r2, #21
 8006600:	d408      	bmi.n	8006614 <_printf_float+0x21c>
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	002a      	movs	r2, r5
 8006606:	0038      	movs	r0, r7
 8006608:	9908      	ldr	r1, [sp, #32]
 800660a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800660c:	47a8      	blx	r5
 800660e:	3001      	adds	r0, #1
 8006610:	d12a      	bne.n	8006668 <_printf_float+0x270>
 8006612:	e74f      	b.n	80064b4 <_printf_float+0xbc>
 8006614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006616:	2b65      	cmp	r3, #101	; 0x65
 8006618:	d800      	bhi.n	800661c <_printf_float+0x224>
 800661a:	e0ec      	b.n	80067f6 <_printf_float+0x3fe>
 800661c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800661e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7f9 ff12 	bl	800044c <__aeabi_dcmpeq>
 8006628:	2800      	cmp	r0, #0
 800662a:	d034      	beq.n	8006696 <_printf_float+0x29e>
 800662c:	2301      	movs	r3, #1
 800662e:	0038      	movs	r0, r7
 8006630:	4a37      	ldr	r2, [pc, #220]	; (8006710 <_printf_float+0x318>)
 8006632:	9908      	ldr	r1, [sp, #32]
 8006634:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006636:	47a8      	blx	r5
 8006638:	3001      	adds	r0, #1
 800663a:	d100      	bne.n	800663e <_printf_float+0x246>
 800663c:	e73a      	b.n	80064b4 <_printf_float+0xbc>
 800663e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006642:	429a      	cmp	r2, r3
 8006644:	db02      	blt.n	800664c <_printf_float+0x254>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	07db      	lsls	r3, r3, #31
 800664a:	d50d      	bpl.n	8006668 <_printf_float+0x270>
 800664c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800664e:	0038      	movs	r0, r7
 8006650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006654:	9908      	ldr	r1, [sp, #32]
 8006656:	47a8      	blx	r5
 8006658:	2500      	movs	r5, #0
 800665a:	3001      	adds	r0, #1
 800665c:	d100      	bne.n	8006660 <_printf_float+0x268>
 800665e:	e729      	b.n	80064b4 <_printf_float+0xbc>
 8006660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006662:	3b01      	subs	r3, #1
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc0a      	bgt.n	800667e <_printf_float+0x286>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d500      	bpl.n	8006670 <_printf_float+0x278>
 800666e:	e116      	b.n	800689e <_printf_float+0x4a6>
 8006670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006672:	68e0      	ldr	r0, [r4, #12]
 8006674:	4298      	cmp	r0, r3
 8006676:	db00      	blt.n	800667a <_printf_float+0x282>
 8006678:	e71e      	b.n	80064b8 <_printf_float+0xc0>
 800667a:	0018      	movs	r0, r3
 800667c:	e71c      	b.n	80064b8 <_printf_float+0xc0>
 800667e:	0022      	movs	r2, r4
 8006680:	2301      	movs	r3, #1
 8006682:	0038      	movs	r0, r7
 8006684:	9908      	ldr	r1, [sp, #32]
 8006686:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006688:	321a      	adds	r2, #26
 800668a:	47b0      	blx	r6
 800668c:	3001      	adds	r0, #1
 800668e:	d100      	bne.n	8006692 <_printf_float+0x29a>
 8006690:	e710      	b.n	80064b4 <_printf_float+0xbc>
 8006692:	3501      	adds	r5, #1
 8006694:	e7e4      	b.n	8006660 <_printf_float+0x268>
 8006696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc3b      	bgt.n	8006714 <_printf_float+0x31c>
 800669c:	2301      	movs	r3, #1
 800669e:	0038      	movs	r0, r7
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <_printf_float+0x318>)
 80066a2:	9908      	ldr	r1, [sp, #32]
 80066a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066a6:	47b0      	blx	r6
 80066a8:	3001      	adds	r0, #1
 80066aa:	d100      	bne.n	80066ae <_printf_float+0x2b6>
 80066ac:	e702      	b.n	80064b4 <_printf_float+0xbc>
 80066ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b2:	4313      	orrs	r3, r2
 80066b4:	d102      	bne.n	80066bc <_printf_float+0x2c4>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07db      	lsls	r3, r3, #31
 80066ba:	d5d5      	bpl.n	8006668 <_printf_float+0x270>
 80066bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066be:	0038      	movs	r0, r7
 80066c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066c2:	9908      	ldr	r1, [sp, #32]
 80066c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066c6:	47b0      	blx	r6
 80066c8:	2300      	movs	r3, #0
 80066ca:	3001      	adds	r0, #1
 80066cc:	d100      	bne.n	80066d0 <_printf_float+0x2d8>
 80066ce:	e6f1      	b.n	80064b4 <_printf_float+0xbc>
 80066d0:	930a      	str	r3, [sp, #40]	; 0x28
 80066d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d6:	425b      	negs	r3, r3
 80066d8:	4293      	cmp	r3, r2
 80066da:	dc01      	bgt.n	80066e0 <_printf_float+0x2e8>
 80066dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066de:	e791      	b.n	8006604 <_printf_float+0x20c>
 80066e0:	0022      	movs	r2, r4
 80066e2:	2301      	movs	r3, #1
 80066e4:	0038      	movs	r0, r7
 80066e6:	9908      	ldr	r1, [sp, #32]
 80066e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066ea:	321a      	adds	r2, #26
 80066ec:	47b0      	blx	r6
 80066ee:	3001      	adds	r0, #1
 80066f0:	d100      	bne.n	80066f4 <_printf_float+0x2fc>
 80066f2:	e6df      	b.n	80064b4 <_printf_float+0xbc>
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	3301      	adds	r3, #1
 80066f8:	e7ea      	b.n	80066d0 <_printf_float+0x2d8>
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	7fefffff 	.word	0x7fefffff
 8006700:	08008e4c 	.word	0x08008e4c
 8006704:	08008e50 	.word	0x08008e50
 8006708:	08008e54 	.word	0x08008e54
 800670c:	08008e58 	.word	0x08008e58
 8006710:	08008e5c 	.word	0x08008e5c
 8006714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006718:	920a      	str	r2, [sp, #40]	; 0x28
 800671a:	429a      	cmp	r2, r3
 800671c:	dd00      	ble.n	8006720 <_printf_float+0x328>
 800671e:	930a      	str	r3, [sp, #40]	; 0x28
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc3d      	bgt.n	80067a2 <_printf_float+0x3aa>
 8006726:	2300      	movs	r3, #0
 8006728:	930e      	str	r3, [sp, #56]	; 0x38
 800672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672c:	43db      	mvns	r3, r3
 800672e:	17db      	asrs	r3, r3, #31
 8006730:	930f      	str	r3, [sp, #60]	; 0x3c
 8006732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800673a:	4013      	ands	r3, r2
 800673c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006742:	4293      	cmp	r3, r2
 8006744:	dc36      	bgt.n	80067b4 <_printf_float+0x3bc>
 8006746:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800674a:	429a      	cmp	r2, r3
 800674c:	db40      	blt.n	80067d0 <_printf_float+0x3d8>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07db      	lsls	r3, r3, #31
 8006752:	d43d      	bmi.n	80067d0 <_printf_float+0x3d8>
 8006754:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006756:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675a:	1af3      	subs	r3, r6, r3
 800675c:	1ab6      	subs	r6, r6, r2
 800675e:	429e      	cmp	r6, r3
 8006760:	dd00      	ble.n	8006764 <_printf_float+0x36c>
 8006762:	001e      	movs	r6, r3
 8006764:	2e00      	cmp	r6, #0
 8006766:	dc3c      	bgt.n	80067e2 <_printf_float+0x3ea>
 8006768:	2300      	movs	r3, #0
 800676a:	930a      	str	r3, [sp, #40]	; 0x28
 800676c:	43f3      	mvns	r3, r6
 800676e:	17db      	asrs	r3, r3, #31
 8006770:	930b      	str	r3, [sp, #44]	; 0x2c
 8006772:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800677a:	4032      	ands	r2, r6
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	4293      	cmp	r3, r2
 8006782:	dc00      	bgt.n	8006786 <_printf_float+0x38e>
 8006784:	e770      	b.n	8006668 <_printf_float+0x270>
 8006786:	0022      	movs	r2, r4
 8006788:	2301      	movs	r3, #1
 800678a:	0038      	movs	r0, r7
 800678c:	9908      	ldr	r1, [sp, #32]
 800678e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006790:	321a      	adds	r2, #26
 8006792:	47a8      	blx	r5
 8006794:	3001      	adds	r0, #1
 8006796:	d100      	bne.n	800679a <_printf_float+0x3a2>
 8006798:	e68c      	b.n	80064b4 <_printf_float+0xbc>
 800679a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679c:	3301      	adds	r3, #1
 800679e:	930a      	str	r3, [sp, #40]	; 0x28
 80067a0:	e7e7      	b.n	8006772 <_printf_float+0x37a>
 80067a2:	002a      	movs	r2, r5
 80067a4:	0038      	movs	r0, r7
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	9908      	ldr	r1, [sp, #32]
 80067aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067ac:	47b0      	blx	r6
 80067ae:	3001      	adds	r0, #1
 80067b0:	d1b9      	bne.n	8006726 <_printf_float+0x32e>
 80067b2:	e67f      	b.n	80064b4 <_printf_float+0xbc>
 80067b4:	0022      	movs	r2, r4
 80067b6:	2301      	movs	r3, #1
 80067b8:	0038      	movs	r0, r7
 80067ba:	9908      	ldr	r1, [sp, #32]
 80067bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067be:	321a      	adds	r2, #26
 80067c0:	47b0      	blx	r6
 80067c2:	3001      	adds	r0, #1
 80067c4:	d100      	bne.n	80067c8 <_printf_float+0x3d0>
 80067c6:	e675      	b.n	80064b4 <_printf_float+0xbc>
 80067c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ca:	3301      	adds	r3, #1
 80067cc:	930e      	str	r3, [sp, #56]	; 0x38
 80067ce:	e7b0      	b.n	8006732 <_printf_float+0x33a>
 80067d0:	0038      	movs	r0, r7
 80067d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d6:	9908      	ldr	r1, [sp, #32]
 80067d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067da:	47b0      	blx	r6
 80067dc:	3001      	adds	r0, #1
 80067de:	d1b9      	bne.n	8006754 <_printf_float+0x35c>
 80067e0:	e668      	b.n	80064b4 <_printf_float+0xbc>
 80067e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e4:	0038      	movs	r0, r7
 80067e6:	18ea      	adds	r2, r5, r3
 80067e8:	9908      	ldr	r1, [sp, #32]
 80067ea:	0033      	movs	r3, r6
 80067ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067ee:	47a8      	blx	r5
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1b9      	bne.n	8006768 <_printf_float+0x370>
 80067f4:	e65e      	b.n	80064b4 <_printf_float+0xbc>
 80067f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	dc02      	bgt.n	8006802 <_printf_float+0x40a>
 80067fc:	2301      	movs	r3, #1
 80067fe:	421a      	tst	r2, r3
 8006800:	d03a      	beq.n	8006878 <_printf_float+0x480>
 8006802:	2301      	movs	r3, #1
 8006804:	002a      	movs	r2, r5
 8006806:	0038      	movs	r0, r7
 8006808:	9908      	ldr	r1, [sp, #32]
 800680a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800680c:	47b0      	blx	r6
 800680e:	3001      	adds	r0, #1
 8006810:	d100      	bne.n	8006814 <_printf_float+0x41c>
 8006812:	e64f      	b.n	80064b4 <_printf_float+0xbc>
 8006814:	0038      	movs	r0, r7
 8006816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800681a:	9908      	ldr	r1, [sp, #32]
 800681c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800681e:	47b0      	blx	r6
 8006820:	3001      	adds	r0, #1
 8006822:	d100      	bne.n	8006826 <_printf_float+0x42e>
 8006824:	e646      	b.n	80064b4 <_printf_float+0xbc>
 8006826:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006828:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800682a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800682c:	2200      	movs	r2, #0
 800682e:	001e      	movs	r6, r3
 8006830:	2300      	movs	r3, #0
 8006832:	f7f9 fe0b 	bl	800044c <__aeabi_dcmpeq>
 8006836:	2800      	cmp	r0, #0
 8006838:	d11c      	bne.n	8006874 <_printf_float+0x47c>
 800683a:	0033      	movs	r3, r6
 800683c:	1c6a      	adds	r2, r5, #1
 800683e:	3b01      	subs	r3, #1
 8006840:	0038      	movs	r0, r7
 8006842:	9908      	ldr	r1, [sp, #32]
 8006844:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006846:	47a8      	blx	r5
 8006848:	3001      	adds	r0, #1
 800684a:	d10f      	bne.n	800686c <_printf_float+0x474>
 800684c:	e632      	b.n	80064b4 <_printf_float+0xbc>
 800684e:	0022      	movs	r2, r4
 8006850:	2301      	movs	r3, #1
 8006852:	0038      	movs	r0, r7
 8006854:	9908      	ldr	r1, [sp, #32]
 8006856:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006858:	321a      	adds	r2, #26
 800685a:	47b0      	blx	r6
 800685c:	3001      	adds	r0, #1
 800685e:	d100      	bne.n	8006862 <_printf_float+0x46a>
 8006860:	e628      	b.n	80064b4 <_printf_float+0xbc>
 8006862:	3501      	adds	r5, #1
 8006864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006866:	3b01      	subs	r3, #1
 8006868:	42ab      	cmp	r3, r5
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x456>
 800686c:	0022      	movs	r2, r4
 800686e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006870:	3250      	adds	r2, #80	; 0x50
 8006872:	e6c8      	b.n	8006606 <_printf_float+0x20e>
 8006874:	2500      	movs	r5, #0
 8006876:	e7f5      	b.n	8006864 <_printf_float+0x46c>
 8006878:	002a      	movs	r2, r5
 800687a:	e7e1      	b.n	8006840 <_printf_float+0x448>
 800687c:	0022      	movs	r2, r4
 800687e:	2301      	movs	r3, #1
 8006880:	0038      	movs	r0, r7
 8006882:	9908      	ldr	r1, [sp, #32]
 8006884:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006886:	3219      	adds	r2, #25
 8006888:	47b0      	blx	r6
 800688a:	3001      	adds	r0, #1
 800688c:	d100      	bne.n	8006890 <_printf_float+0x498>
 800688e:	e611      	b.n	80064b4 <_printf_float+0xbc>
 8006890:	3501      	adds	r5, #1
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	42ab      	cmp	r3, r5
 800689a:	dcef      	bgt.n	800687c <_printf_float+0x484>
 800689c:	e6e8      	b.n	8006670 <_printf_float+0x278>
 800689e:	2500      	movs	r5, #0
 80068a0:	e7f7      	b.n	8006892 <_printf_float+0x49a>
 80068a2:	46c0      	nop			; (mov r8, r8)

080068a4 <_printf_common>:
 80068a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a6:	0016      	movs	r6, r2
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	688a      	ldr	r2, [r1, #8]
 80068ac:	690b      	ldr	r3, [r1, #16]
 80068ae:	000c      	movs	r4, r1
 80068b0:	9000      	str	r0, [sp, #0]
 80068b2:	4293      	cmp	r3, r2
 80068b4:	da00      	bge.n	80068b8 <_printf_common+0x14>
 80068b6:	0013      	movs	r3, r2
 80068b8:	0022      	movs	r2, r4
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	3243      	adds	r2, #67	; 0x43
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	d001      	beq.n	80068c8 <_printf_common+0x24>
 80068c4:	3301      	adds	r3, #1
 80068c6:	6033      	str	r3, [r6, #0]
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	069b      	lsls	r3, r3, #26
 80068cc:	d502      	bpl.n	80068d4 <_printf_common+0x30>
 80068ce:	6833      	ldr	r3, [r6, #0]
 80068d0:	3302      	adds	r3, #2
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	2306      	movs	r3, #6
 80068d8:	0015      	movs	r5, r2
 80068da:	401d      	ands	r5, r3
 80068dc:	421a      	tst	r2, r3
 80068de:	d027      	beq.n	8006930 <_printf_common+0x8c>
 80068e0:	0023      	movs	r3, r4
 80068e2:	3343      	adds	r3, #67	; 0x43
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	4193      	sbcs	r3, r2
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d430      	bmi.n	8006952 <_printf_common+0xae>
 80068f0:	0022      	movs	r2, r4
 80068f2:	9901      	ldr	r1, [sp, #4]
 80068f4:	9800      	ldr	r0, [sp, #0]
 80068f6:	9d08      	ldr	r5, [sp, #32]
 80068f8:	3243      	adds	r2, #67	; 0x43
 80068fa:	47a8      	blx	r5
 80068fc:	3001      	adds	r0, #1
 80068fe:	d025      	beq.n	800694c <_printf_common+0xa8>
 8006900:	2206      	movs	r2, #6
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	2500      	movs	r5, #0
 8006906:	4013      	ands	r3, r2
 8006908:	2b04      	cmp	r3, #4
 800690a:	d105      	bne.n	8006918 <_printf_common+0x74>
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	68e5      	ldr	r5, [r4, #12]
 8006910:	1aed      	subs	r5, r5, r3
 8006912:	43eb      	mvns	r3, r5
 8006914:	17db      	asrs	r3, r3, #31
 8006916:	401d      	ands	r5, r3
 8006918:	68a3      	ldr	r3, [r4, #8]
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	4293      	cmp	r3, r2
 800691e:	dd01      	ble.n	8006924 <_printf_common+0x80>
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	18ed      	adds	r5, r5, r3
 8006924:	2600      	movs	r6, #0
 8006926:	42b5      	cmp	r5, r6
 8006928:	d120      	bne.n	800696c <_printf_common+0xc8>
 800692a:	2000      	movs	r0, #0
 800692c:	e010      	b.n	8006950 <_printf_common+0xac>
 800692e:	3501      	adds	r5, #1
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	6832      	ldr	r2, [r6, #0]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	42ab      	cmp	r3, r5
 8006938:	ddd2      	ble.n	80068e0 <_printf_common+0x3c>
 800693a:	0022      	movs	r2, r4
 800693c:	2301      	movs	r3, #1
 800693e:	9901      	ldr	r1, [sp, #4]
 8006940:	9800      	ldr	r0, [sp, #0]
 8006942:	9f08      	ldr	r7, [sp, #32]
 8006944:	3219      	adds	r2, #25
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	d1f0      	bne.n	800692e <_printf_common+0x8a>
 800694c:	2001      	movs	r0, #1
 800694e:	4240      	negs	r0, r0
 8006950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006952:	2030      	movs	r0, #48	; 0x30
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	3143      	adds	r1, #67	; 0x43
 8006958:	7008      	strb	r0, [r1, #0]
 800695a:	0021      	movs	r1, r4
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	3145      	adds	r1, #69	; 0x45
 8006960:	7809      	ldrb	r1, [r1, #0]
 8006962:	18a2      	adds	r2, r4, r2
 8006964:	3243      	adds	r2, #67	; 0x43
 8006966:	3302      	adds	r3, #2
 8006968:	7011      	strb	r1, [r2, #0]
 800696a:	e7c1      	b.n	80068f0 <_printf_common+0x4c>
 800696c:	0022      	movs	r2, r4
 800696e:	2301      	movs	r3, #1
 8006970:	9901      	ldr	r1, [sp, #4]
 8006972:	9800      	ldr	r0, [sp, #0]
 8006974:	9f08      	ldr	r7, [sp, #32]
 8006976:	321a      	adds	r2, #26
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	d0e6      	beq.n	800694c <_printf_common+0xa8>
 800697e:	3601      	adds	r6, #1
 8006980:	e7d1      	b.n	8006926 <_printf_common+0x82>
	...

08006984 <_printf_i>:
 8006984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006986:	b08b      	sub	sp, #44	; 0x2c
 8006988:	9206      	str	r2, [sp, #24]
 800698a:	000a      	movs	r2, r1
 800698c:	3243      	adds	r2, #67	; 0x43
 800698e:	9307      	str	r3, [sp, #28]
 8006990:	9005      	str	r0, [sp, #20]
 8006992:	9204      	str	r2, [sp, #16]
 8006994:	7e0a      	ldrb	r2, [r1, #24]
 8006996:	000c      	movs	r4, r1
 8006998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800699a:	2a78      	cmp	r2, #120	; 0x78
 800699c:	d809      	bhi.n	80069b2 <_printf_i+0x2e>
 800699e:	2a62      	cmp	r2, #98	; 0x62
 80069a0:	d80b      	bhi.n	80069ba <_printf_i+0x36>
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	d100      	bne.n	80069a8 <_printf_i+0x24>
 80069a6:	e0be      	b.n	8006b26 <_printf_i+0x1a2>
 80069a8:	497c      	ldr	r1, [pc, #496]	; (8006b9c <_printf_i+0x218>)
 80069aa:	9103      	str	r1, [sp, #12]
 80069ac:	2a58      	cmp	r2, #88	; 0x58
 80069ae:	d100      	bne.n	80069b2 <_printf_i+0x2e>
 80069b0:	e093      	b.n	8006ada <_printf_i+0x156>
 80069b2:	0026      	movs	r6, r4
 80069b4:	3642      	adds	r6, #66	; 0x42
 80069b6:	7032      	strb	r2, [r6, #0]
 80069b8:	e022      	b.n	8006a00 <_printf_i+0x7c>
 80069ba:	0010      	movs	r0, r2
 80069bc:	3863      	subs	r0, #99	; 0x63
 80069be:	2815      	cmp	r0, #21
 80069c0:	d8f7      	bhi.n	80069b2 <_printf_i+0x2e>
 80069c2:	f7f9 fbb3 	bl	800012c <__gnu_thumb1_case_shi>
 80069c6:	0016      	.short	0x0016
 80069c8:	fff6001f 	.word	0xfff6001f
 80069cc:	fff6fff6 	.word	0xfff6fff6
 80069d0:	001ffff6 	.word	0x001ffff6
 80069d4:	fff6fff6 	.word	0xfff6fff6
 80069d8:	fff6fff6 	.word	0xfff6fff6
 80069dc:	003600a3 	.word	0x003600a3
 80069e0:	fff60083 	.word	0xfff60083
 80069e4:	00b4fff6 	.word	0x00b4fff6
 80069e8:	0036fff6 	.word	0x0036fff6
 80069ec:	fff6fff6 	.word	0xfff6fff6
 80069f0:	0087      	.short	0x0087
 80069f2:	0026      	movs	r6, r4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	3642      	adds	r6, #66	; 0x42
 80069f8:	1d11      	adds	r1, r2, #4
 80069fa:	6019      	str	r1, [r3, #0]
 80069fc:	6813      	ldr	r3, [r2, #0]
 80069fe:	7033      	strb	r3, [r6, #0]
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0a2      	b.n	8006b4a <_printf_i+0x1c6>
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	6809      	ldr	r1, [r1, #0]
 8006a08:	1d02      	adds	r2, r0, #4
 8006a0a:	060d      	lsls	r5, r1, #24
 8006a0c:	d50b      	bpl.n	8006a26 <_printf_i+0xa2>
 8006a0e:	6805      	ldr	r5, [r0, #0]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	da03      	bge.n	8006a1e <_printf_i+0x9a>
 8006a16:	232d      	movs	r3, #45	; 0x2d
 8006a18:	9a04      	ldr	r2, [sp, #16]
 8006a1a:	426d      	negs	r5, r5
 8006a1c:	7013      	strb	r3, [r2, #0]
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <_printf_i+0x218>)
 8006a20:	270a      	movs	r7, #10
 8006a22:	9303      	str	r3, [sp, #12]
 8006a24:	e01b      	b.n	8006a5e <_printf_i+0xda>
 8006a26:	6805      	ldr	r5, [r0, #0]
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	0649      	lsls	r1, r1, #25
 8006a2c:	d5f1      	bpl.n	8006a12 <_printf_i+0x8e>
 8006a2e:	b22d      	sxth	r5, r5
 8006a30:	e7ef      	b.n	8006a12 <_printf_i+0x8e>
 8006a32:	680d      	ldr	r5, [r1, #0]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	1d08      	adds	r0, r1, #4
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	062e      	lsls	r6, r5, #24
 8006a3c:	d501      	bpl.n	8006a42 <_printf_i+0xbe>
 8006a3e:	680d      	ldr	r5, [r1, #0]
 8006a40:	e003      	b.n	8006a4a <_printf_i+0xc6>
 8006a42:	066d      	lsls	r5, r5, #25
 8006a44:	d5fb      	bpl.n	8006a3e <_printf_i+0xba>
 8006a46:	680d      	ldr	r5, [r1, #0]
 8006a48:	b2ad      	uxth	r5, r5
 8006a4a:	4b54      	ldr	r3, [pc, #336]	; (8006b9c <_printf_i+0x218>)
 8006a4c:	2708      	movs	r7, #8
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	2a6f      	cmp	r2, #111	; 0x6f
 8006a52:	d000      	beq.n	8006a56 <_printf_i+0xd2>
 8006a54:	3702      	adds	r7, #2
 8006a56:	0023      	movs	r3, r4
 8006a58:	2200      	movs	r2, #0
 8006a5a:	3343      	adds	r3, #67	; 0x43
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	db03      	blt.n	8006a6e <_printf_i+0xea>
 8006a66:	2104      	movs	r1, #4
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	438a      	bics	r2, r1
 8006a6c:	6022      	str	r2, [r4, #0]
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	d102      	bne.n	8006a78 <_printf_i+0xf4>
 8006a72:	9e04      	ldr	r6, [sp, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <_printf_i+0x10e>
 8006a78:	9e04      	ldr	r6, [sp, #16]
 8006a7a:	0028      	movs	r0, r5
 8006a7c:	0039      	movs	r1, r7
 8006a7e:	f7f9 fbe5 	bl	800024c <__aeabi_uidivmod>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	3e01      	subs	r6, #1
 8006a86:	5c5b      	ldrb	r3, [r3, r1]
 8006a88:	7033      	strb	r3, [r6, #0]
 8006a8a:	002b      	movs	r3, r5
 8006a8c:	0005      	movs	r5, r0
 8006a8e:	429f      	cmp	r7, r3
 8006a90:	d9f3      	bls.n	8006a7a <_printf_i+0xf6>
 8006a92:	2f08      	cmp	r7, #8
 8006a94:	d109      	bne.n	8006aaa <_printf_i+0x126>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	07db      	lsls	r3, r3, #31
 8006a9a:	d506      	bpl.n	8006aaa <_printf_i+0x126>
 8006a9c:	6862      	ldr	r2, [r4, #4]
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	dc02      	bgt.n	8006aaa <_printf_i+0x126>
 8006aa4:	2330      	movs	r3, #48	; 0x30
 8006aa6:	3e01      	subs	r6, #1
 8006aa8:	7033      	strb	r3, [r6, #0]
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	1b9b      	subs	r3, r3, r6
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	9b07      	ldr	r3, [sp, #28]
 8006ab2:	0021      	movs	r1, r4
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	9805      	ldr	r0, [sp, #20]
 8006ab8:	9b06      	ldr	r3, [sp, #24]
 8006aba:	aa09      	add	r2, sp, #36	; 0x24
 8006abc:	f7ff fef2 	bl	80068a4 <_printf_common>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d147      	bne.n	8006b54 <_printf_i+0x1d0>
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	4240      	negs	r0, r0
 8006ac8:	b00b      	add	sp, #44	; 0x2c
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006acc:	2220      	movs	r2, #32
 8006ace:	6809      	ldr	r1, [r1, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	2278      	movs	r2, #120	; 0x78
 8006ad6:	4932      	ldr	r1, [pc, #200]	; (8006ba0 <_printf_i+0x21c>)
 8006ad8:	9103      	str	r1, [sp, #12]
 8006ada:	0021      	movs	r1, r4
 8006adc:	3145      	adds	r1, #69	; 0x45
 8006ade:	700a      	strb	r2, [r1, #0]
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	c920      	ldmia	r1!, {r5}
 8006ae6:	0610      	lsls	r0, r2, #24
 8006ae8:	d402      	bmi.n	8006af0 <_printf_i+0x16c>
 8006aea:	0650      	lsls	r0, r2, #25
 8006aec:	d500      	bpl.n	8006af0 <_printf_i+0x16c>
 8006aee:	b2ad      	uxth	r5, r5
 8006af0:	6019      	str	r1, [r3, #0]
 8006af2:	07d3      	lsls	r3, r2, #31
 8006af4:	d502      	bpl.n	8006afc <_printf_i+0x178>
 8006af6:	2320      	movs	r3, #32
 8006af8:	4313      	orrs	r3, r2
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	2710      	movs	r7, #16
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	d1a9      	bne.n	8006a56 <_printf_i+0xd2>
 8006b02:	2220      	movs	r2, #32
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	4393      	bics	r3, r2
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	e7a4      	b.n	8006a56 <_printf_i+0xd2>
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	680d      	ldr	r5, [r1, #0]
 8006b10:	1d10      	adds	r0, r2, #4
 8006b12:	6949      	ldr	r1, [r1, #20]
 8006b14:	6018      	str	r0, [r3, #0]
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	062e      	lsls	r6, r5, #24
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x19c>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1a2>
 8006b20:	066d      	lsls	r5, r5, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x198>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	9e04      	ldr	r6, [sp, #16]
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	e7c0      	b.n	8006ab0 <_printf_i+0x12c>
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	1d11      	adds	r1, r2, #4
 8006b32:	6019      	str	r1, [r3, #0]
 8006b34:	6816      	ldr	r6, [r2, #0]
 8006b36:	2100      	movs	r1, #0
 8006b38:	0030      	movs	r0, r6
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	f000 f9c9 	bl	8006ed2 <memchr>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d001      	beq.n	8006b48 <_printf_i+0x1c4>
 8006b44:	1b80      	subs	r0, r0, r6
 8006b46:	6060      	str	r0, [r4, #4]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	7013      	strb	r3, [r2, #0]
 8006b52:	e7ad      	b.n	8006ab0 <_printf_i+0x12c>
 8006b54:	0032      	movs	r2, r6
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	9906      	ldr	r1, [sp, #24]
 8006b5a:	9805      	ldr	r0, [sp, #20]
 8006b5c:	9d07      	ldr	r5, [sp, #28]
 8006b5e:	47a8      	blx	r5
 8006b60:	3001      	adds	r0, #1
 8006b62:	d0af      	beq.n	8006ac4 <_printf_i+0x140>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	079b      	lsls	r3, r3, #30
 8006b68:	d415      	bmi.n	8006b96 <_printf_i+0x212>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	68e0      	ldr	r0, [r4, #12]
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	daaa      	bge.n	8006ac8 <_printf_i+0x144>
 8006b72:	0018      	movs	r0, r3
 8006b74:	e7a8      	b.n	8006ac8 <_printf_i+0x144>
 8006b76:	0022      	movs	r2, r4
 8006b78:	2301      	movs	r3, #1
 8006b7a:	9906      	ldr	r1, [sp, #24]
 8006b7c:	9805      	ldr	r0, [sp, #20]
 8006b7e:	9e07      	ldr	r6, [sp, #28]
 8006b80:	3219      	adds	r2, #25
 8006b82:	47b0      	blx	r6
 8006b84:	3001      	adds	r0, #1
 8006b86:	d09d      	beq.n	8006ac4 <_printf_i+0x140>
 8006b88:	3501      	adds	r5, #1
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dcf0      	bgt.n	8006b76 <_printf_i+0x1f2>
 8006b94:	e7e9      	b.n	8006b6a <_printf_i+0x1e6>
 8006b96:	2500      	movs	r5, #0
 8006b98:	e7f7      	b.n	8006b8a <_printf_i+0x206>
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	08008e5e 	.word	0x08008e5e
 8006ba0:	08008e6f 	.word	0x08008e6f

08006ba4 <std>:
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	0004      	movs	r4, r0
 8006baa:	6003      	str	r3, [r0, #0]
 8006bac:	6043      	str	r3, [r0, #4]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6103      	str	r3, [r0, #16]
 8006bb8:	6143      	str	r3, [r0, #20]
 8006bba:	6183      	str	r3, [r0, #24]
 8006bbc:	0019      	movs	r1, r3
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	305c      	adds	r0, #92	; 0x5c
 8006bc2:	f000 f8ff 	bl	8006dc4 <memset>
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <std+0x50>)
 8006bc8:	6224      	str	r4, [r4, #32]
 8006bca:	6263      	str	r3, [r4, #36]	; 0x24
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <std+0x54>)
 8006bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <std+0x58>)
 8006bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <std+0x5c>)
 8006bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <std+0x60>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d005      	beq.n	8006bea <std+0x46>
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <std+0x64>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	d002      	beq.n	8006bea <std+0x46>
 8006be4:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <std+0x68>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d103      	bne.n	8006bf2 <std+0x4e>
 8006bea:	0020      	movs	r0, r4
 8006bec:	3058      	adds	r0, #88	; 0x58
 8006bee:	f000 f96d 	bl	8006ecc <__retarget_lock_init_recursive>
 8006bf2:	bd10      	pop	{r4, pc}
 8006bf4:	08006d2d 	.word	0x08006d2d
 8006bf8:	08006d55 	.word	0x08006d55
 8006bfc:	08006d8d 	.word	0x08006d8d
 8006c00:	08006db9 	.word	0x08006db9
 8006c04:	2000041c 	.word	0x2000041c
 8006c08:	20000484 	.word	0x20000484
 8006c0c:	200004ec 	.word	0x200004ec

08006c10 <stdio_exit_handler>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4a03      	ldr	r2, [pc, #12]	; (8006c20 <stdio_exit_handler+0x10>)
 8006c14:	4903      	ldr	r1, [pc, #12]	; (8006c24 <stdio_exit_handler+0x14>)
 8006c16:	4804      	ldr	r0, [pc, #16]	; (8006c28 <stdio_exit_handler+0x18>)
 8006c18:	f000 f86c 	bl	8006cf4 <_fwalk_sglue>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	2000000c 	.word	0x2000000c
 8006c24:	0800867d 	.word	0x0800867d
 8006c28:	20000018 	.word	0x20000018

08006c2c <cleanup_stdio>:
 8006c2c:	6841      	ldr	r1, [r0, #4]
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <cleanup_stdio+0x30>)
 8006c30:	b510      	push	{r4, lr}
 8006c32:	0004      	movs	r4, r0
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d001      	beq.n	8006c3c <cleanup_stdio+0x10>
 8006c38:	f001 fd20 	bl	800867c <_fflush_r>
 8006c3c:	68a1      	ldr	r1, [r4, #8]
 8006c3e:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <cleanup_stdio+0x34>)
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d002      	beq.n	8006c4a <cleanup_stdio+0x1e>
 8006c44:	0020      	movs	r0, r4
 8006c46:	f001 fd19 	bl	800867c <_fflush_r>
 8006c4a:	68e1      	ldr	r1, [r4, #12]
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <cleanup_stdio+0x38>)
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	d002      	beq.n	8006c58 <cleanup_stdio+0x2c>
 8006c52:	0020      	movs	r0, r4
 8006c54:	f001 fd12 	bl	800867c <_fflush_r>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	2000041c 	.word	0x2000041c
 8006c60:	20000484 	.word	0x20000484
 8006c64:	200004ec 	.word	0x200004ec

08006c68 <global_stdio_init.part.0>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <global_stdio_init.part.0+0x28>)
 8006c6c:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <global_stdio_init.part.0+0x2c>)
 8006c6e:	2104      	movs	r1, #4
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4809      	ldr	r0, [pc, #36]	; (8006c98 <global_stdio_init.part.0+0x30>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	f7ff ff95 	bl	8006ba4 <std>
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2109      	movs	r1, #9
 8006c7e:	4807      	ldr	r0, [pc, #28]	; (8006c9c <global_stdio_init.part.0+0x34>)
 8006c80:	f7ff ff90 	bl	8006ba4 <std>
 8006c84:	2202      	movs	r2, #2
 8006c86:	2112      	movs	r1, #18
 8006c88:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <global_stdio_init.part.0+0x38>)
 8006c8a:	f7ff ff8b 	bl	8006ba4 <std>
 8006c8e:	bd10      	pop	{r4, pc}
 8006c90:	20000554 	.word	0x20000554
 8006c94:	08006c11 	.word	0x08006c11
 8006c98:	2000041c 	.word	0x2000041c
 8006c9c:	20000484 	.word	0x20000484
 8006ca0:	200004ec 	.word	0x200004ec

08006ca4 <__sfp_lock_acquire>:
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	4802      	ldr	r0, [pc, #8]	; (8006cb0 <__sfp_lock_acquire+0xc>)
 8006ca8:	f000 f911 	bl	8006ece <__retarget_lock_acquire_recursive>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	2000055d 	.word	0x2000055d

08006cb4 <__sfp_lock_release>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4802      	ldr	r0, [pc, #8]	; (8006cc0 <__sfp_lock_release+0xc>)
 8006cb8:	f000 f90a 	bl	8006ed0 <__retarget_lock_release_recursive>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	2000055d 	.word	0x2000055d

08006cc4 <__sinit>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	0004      	movs	r4, r0
 8006cc8:	f7ff ffec 	bl	8006ca4 <__sfp_lock_acquire>
 8006ccc:	6a23      	ldr	r3, [r4, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <__sinit+0x14>
 8006cd2:	f7ff ffef 	bl	8006cb4 <__sfp_lock_release>
 8006cd6:	bd10      	pop	{r4, pc}
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <__sinit+0x28>)
 8006cda:	6223      	str	r3, [r4, #32]
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <__sinit+0x2c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f6      	bne.n	8006cd2 <__sinit+0xe>
 8006ce4:	f7ff ffc0 	bl	8006c68 <global_stdio_init.part.0>
 8006ce8:	e7f3      	b.n	8006cd2 <__sinit+0xe>
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	08006c2d 	.word	0x08006c2d
 8006cf0:	20000554 	.word	0x20000554

08006cf4 <_fwalk_sglue>:
 8006cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf6:	0014      	movs	r4, r2
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	9000      	str	r0, [sp, #0]
 8006cfc:	9101      	str	r1, [sp, #4]
 8006cfe:	68a5      	ldr	r5, [r4, #8]
 8006d00:	6867      	ldr	r7, [r4, #4]
 8006d02:	3f01      	subs	r7, #1
 8006d04:	d504      	bpl.n	8006d10 <_fwalk_sglue+0x1c>
 8006d06:	6824      	ldr	r4, [r4, #0]
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	d1f8      	bne.n	8006cfe <_fwalk_sglue+0xa>
 8006d0c:	0030      	movs	r0, r6
 8006d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d10:	89ab      	ldrh	r3, [r5, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d908      	bls.n	8006d28 <_fwalk_sglue+0x34>
 8006d16:	220e      	movs	r2, #14
 8006d18:	5eab      	ldrsh	r3, [r5, r2]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	d004      	beq.n	8006d28 <_fwalk_sglue+0x34>
 8006d1e:	0029      	movs	r1, r5
 8006d20:	9800      	ldr	r0, [sp, #0]
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	4798      	blx	r3
 8006d26:	4306      	orrs	r6, r0
 8006d28:	3568      	adds	r5, #104	; 0x68
 8006d2a:	e7ea      	b.n	8006d02 <_fwalk_sglue+0xe>

08006d2c <__sread>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	000c      	movs	r4, r1
 8006d30:	250e      	movs	r5, #14
 8006d32:	5f49      	ldrsh	r1, [r1, r5]
 8006d34:	f000 f878 	bl	8006e28 <_read_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	db03      	blt.n	8006d44 <__sread+0x18>
 8006d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d3e:	181b      	adds	r3, r3, r0
 8006d40:	6563      	str	r3, [r4, #84]	; 0x54
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	4a02      	ldr	r2, [pc, #8]	; (8006d50 <__sread+0x24>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	e7f9      	b.n	8006d42 <__sread+0x16>
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	ffffefff 	.word	0xffffefff

08006d54 <__swrite>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	001f      	movs	r7, r3
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	0005      	movs	r5, r0
 8006d5c:	000c      	movs	r4, r1
 8006d5e:	0016      	movs	r6, r2
 8006d60:	05db      	lsls	r3, r3, #23
 8006d62:	d505      	bpl.n	8006d70 <__swrite+0x1c>
 8006d64:	230e      	movs	r3, #14
 8006d66:	5ec9      	ldrsh	r1, [r1, r3]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	f000 f848 	bl	8006e00 <_lseek_r>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <__swrite+0x34>)
 8006d74:	0028      	movs	r0, r5
 8006d76:	4013      	ands	r3, r2
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	0032      	movs	r2, r6
 8006d7c:	230e      	movs	r3, #14
 8006d7e:	5ee1      	ldrsh	r1, [r4, r3]
 8006d80:	003b      	movs	r3, r7
 8006d82:	f000 f865 	bl	8006e50 <_write_r>
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	ffffefff 	.word	0xffffefff

08006d8c <__sseek>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	000c      	movs	r4, r1
 8006d90:	250e      	movs	r5, #14
 8006d92:	5f49      	ldrsh	r1, [r1, r5]
 8006d94:	f000 f834 	bl	8006e00 <_lseek_r>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	1c42      	adds	r2, r0, #1
 8006d9c:	d103      	bne.n	8006da6 <__sseek+0x1a>
 8006d9e:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <__sseek+0x28>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
 8006da6:	2280      	movs	r2, #128	; 0x80
 8006da8:	0152      	lsls	r2, r2, #5
 8006daa:	4313      	orrs	r3, r2
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	6560      	str	r0, [r4, #84]	; 0x54
 8006db0:	e7f8      	b.n	8006da4 <__sseek+0x18>
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	ffffefff 	.word	0xffffefff

08006db8 <__sclose>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	230e      	movs	r3, #14
 8006dbc:	5ec9      	ldrsh	r1, [r1, r3]
 8006dbe:	f000 f80d 	bl	8006ddc <_close_r>
 8006dc2:	bd10      	pop	{r4, pc}

08006dc4 <memset>:
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	1882      	adds	r2, r0, r2
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d100      	bne.n	8006dce <memset+0xa>
 8006dcc:	4770      	bx	lr
 8006dce:	7019      	strb	r1, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	e7f9      	b.n	8006dc8 <memset+0x4>

08006dd4 <_localeconv_r>:
 8006dd4:	4800      	ldr	r0, [pc, #0]	; (8006dd8 <_localeconv_r+0x4>)
 8006dd6:	4770      	bx	lr
 8006dd8:	20000158 	.word	0x20000158

08006ddc <_close_r>:
 8006ddc:	2300      	movs	r3, #0
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	4d06      	ldr	r5, [pc, #24]	; (8006dfc <_close_r+0x20>)
 8006de2:	0004      	movs	r4, r0
 8006de4:	0008      	movs	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fc f823 	bl	8002e32 <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d103      	bne.n	8006df8 <_close_r+0x1c>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d000      	beq.n	8006df8 <_close_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	20000558 	.word	0x20000558

08006e00 <_lseek_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	0004      	movs	r4, r0
 8006e04:	0008      	movs	r0, r1
 8006e06:	0011      	movs	r1, r2
 8006e08:	001a      	movs	r2, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4d05      	ldr	r5, [pc, #20]	; (8006e24 <_lseek_r+0x24>)
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fc f830 	bl	8002e74 <_lseek>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d103      	bne.n	8006e20 <_lseek_r+0x20>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d000      	beq.n	8006e20 <_lseek_r+0x20>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	20000558 	.word	0x20000558

08006e28 <_read_r>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	0004      	movs	r4, r0
 8006e2c:	0008      	movs	r0, r1
 8006e2e:	0011      	movs	r1, r2
 8006e30:	001a      	movs	r2, r3
 8006e32:	2300      	movs	r3, #0
 8006e34:	4d05      	ldr	r5, [pc, #20]	; (8006e4c <_read_r+0x24>)
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fb ffc2 	bl	8002dc0 <_read>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d103      	bne.n	8006e48 <_read_r+0x20>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d000      	beq.n	8006e48 <_read_r+0x20>
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	20000558 	.word	0x20000558

08006e50 <_write_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	0004      	movs	r4, r0
 8006e54:	0008      	movs	r0, r1
 8006e56:	0011      	movs	r1, r2
 8006e58:	001a      	movs	r2, r3
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4d05      	ldr	r5, [pc, #20]	; (8006e74 <_write_r+0x24>)
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fb ffcb 	bl	8002dfa <_write>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d103      	bne.n	8006e70 <_write_r+0x20>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d000      	beq.n	8006e70 <_write_r+0x20>
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	20000558 	.word	0x20000558

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	; (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	20000064 	.word	0x20000064

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	2600      	movs	r6, #0
 8006e88:	4c0c      	ldr	r4, [pc, #48]	; (8006ebc <__libc_init_array+0x38>)
 8006e8a:	4d0d      	ldr	r5, [pc, #52]	; (8006ec0 <__libc_init_array+0x3c>)
 8006e8c:	1b64      	subs	r4, r4, r5
 8006e8e:	10a4      	asrs	r4, r4, #2
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	2600      	movs	r6, #0
 8006e96:	f001 ff77 	bl	8008d88 <_init>
 8006e9a:	4c0a      	ldr	r4, [pc, #40]	; (8006ec4 <__libc_init_array+0x40>)
 8006e9c:	4d0a      	ldr	r5, [pc, #40]	; (8006ec8 <__libc_init_array+0x44>)
 8006e9e:	1b64      	subs	r4, r4, r5
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	00b3      	lsls	r3, r6, #2
 8006eaa:	58eb      	ldr	r3, [r5, r3]
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	00b3      	lsls	r3, r6, #2
 8006eb4:	58eb      	ldr	r3, [r5, r3]
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	080091c4 	.word	0x080091c4
 8006ec0:	080091c4 	.word	0x080091c4
 8006ec4:	080091c8 	.word	0x080091c8
 8006ec8:	080091c4 	.word	0x080091c4

08006ecc <__retarget_lock_init_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <__retarget_lock_acquire_recursive>:
 8006ece:	4770      	bx	lr

08006ed0 <__retarget_lock_release_recursive>:
 8006ed0:	4770      	bx	lr

08006ed2 <memchr>:
 8006ed2:	b2c9      	uxtb	r1, r1
 8006ed4:	1882      	adds	r2, r0, r2
 8006ed6:	4290      	cmp	r0, r2
 8006ed8:	d101      	bne.n	8006ede <memchr+0xc>
 8006eda:	2000      	movs	r0, #0
 8006edc:	4770      	bx	lr
 8006ede:	7803      	ldrb	r3, [r0, #0]
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	d0fb      	beq.n	8006edc <memchr+0xa>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	e7f6      	b.n	8006ed6 <memchr+0x4>

08006ee8 <quorem>:
 8006ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eea:	6902      	ldr	r2, [r0, #16]
 8006eec:	690b      	ldr	r3, [r1, #16]
 8006eee:	b089      	sub	sp, #36	; 0x24
 8006ef0:	0007      	movs	r7, r0
 8006ef2:	9104      	str	r1, [sp, #16]
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	db69      	blt.n	8006fce <quorem+0xe6>
 8006efa:	3b01      	subs	r3, #1
 8006efc:	009c      	lsls	r4, r3, #2
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	000b      	movs	r3, r1
 8006f02:	3314      	adds	r3, #20
 8006f04:	9306      	str	r3, [sp, #24]
 8006f06:	191b      	adds	r3, r3, r4
 8006f08:	9305      	str	r3, [sp, #20]
 8006f0a:	003b      	movs	r3, r7
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	191c      	adds	r4, r3, r4
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	6826      	ldr	r6, [r4, #0]
 8006f16:	681d      	ldr	r5, [r3, #0]
 8006f18:	0030      	movs	r0, r6
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	0029      	movs	r1, r5
 8006f1e:	f7f9 f90f 	bl	8000140 <__udivsi3>
 8006f22:	9002      	str	r0, [sp, #8]
 8006f24:	42ae      	cmp	r6, r5
 8006f26:	d329      	bcc.n	8006f7c <quorem+0x94>
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	469c      	mov	ip, r3
 8006f2e:	9d03      	ldr	r5, [sp, #12]
 8006f30:	9606      	str	r6, [sp, #24]
 8006f32:	4662      	mov	r2, ip
 8006f34:	ca08      	ldmia	r2!, {r3}
 8006f36:	6828      	ldr	r0, [r5, #0]
 8006f38:	4694      	mov	ip, r2
 8006f3a:	9a02      	ldr	r2, [sp, #8]
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	4351      	muls	r1, r2
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	4353      	muls	r3, r2
 8006f44:	1989      	adds	r1, r1, r6
 8006f46:	0c0a      	lsrs	r2, r1, #16
 8006f48:	189b      	adds	r3, r3, r2
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	0c1e      	lsrs	r6, r3, #16
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	b282      	uxth	r2, r0
 8006f52:	18d2      	adds	r2, r2, r3
 8006f54:	466b      	mov	r3, sp
 8006f56:	b289      	uxth	r1, r1
 8006f58:	8b9b      	ldrh	r3, [r3, #28]
 8006f5a:	1a52      	subs	r2, r2, r1
 8006f5c:	0c01      	lsrs	r1, r0, #16
 8006f5e:	1ac9      	subs	r1, r1, r3
 8006f60:	1413      	asrs	r3, r2, #16
 8006f62:	18cb      	adds	r3, r1, r3
 8006f64:	1419      	asrs	r1, r3, #16
 8006f66:	b292      	uxth	r2, r2
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	c508      	stmia	r5!, {r3}
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	9106      	str	r1, [sp, #24]
 8006f72:	4563      	cmp	r3, ip
 8006f74:	d2dd      	bcs.n	8006f32 <quorem+0x4a>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d030      	beq.n	8006fde <quorem+0xf6>
 8006f7c:	0038      	movs	r0, r7
 8006f7e:	9904      	ldr	r1, [sp, #16]
 8006f80:	f001 f9de 	bl	8008340 <__mcmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	db21      	blt.n	8006fcc <quorem+0xe4>
 8006f88:	0038      	movs	r0, r7
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	9c04      	ldr	r4, [sp, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	3014      	adds	r0, #20
 8006f96:	3414      	adds	r4, #20
 8006f98:	6803      	ldr	r3, [r0, #0]
 8006f9a:	cc02      	ldmia	r4!, {r1}
 8006f9c:	b29d      	uxth	r5, r3
 8006f9e:	19ad      	adds	r5, r5, r6
 8006fa0:	b28a      	uxth	r2, r1
 8006fa2:	1aaa      	subs	r2, r5, r2
 8006fa4:	0c09      	lsrs	r1, r1, #16
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	1a5b      	subs	r3, r3, r1
 8006faa:	1411      	asrs	r1, r2, #16
 8006fac:	185b      	adds	r3, r3, r1
 8006fae:	141e      	asrs	r6, r3, #16
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	c008      	stmia	r0!, {r3}
 8006fb8:	9b05      	ldr	r3, [sp, #20]
 8006fba:	42a3      	cmp	r3, r4
 8006fbc:	d2ec      	bcs.n	8006f98 <quorem+0xb0>
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	9a03      	ldr	r2, [sp, #12]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	18d3      	adds	r3, r2, r3
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d015      	beq.n	8006ff8 <quorem+0x110>
 8006fcc:	9802      	ldr	r0, [sp, #8]
 8006fce:	b009      	add	sp, #36	; 0x24
 8006fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <quorem+0xfe>
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3c04      	subs	r4, #4
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	d3f5      	bcc.n	8006fd2 <quorem+0xea>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	e7c7      	b.n	8006f7c <quorem+0x94>
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d106      	bne.n	8007000 <quorem+0x118>
 8006ff2:	9a01      	ldr	r2, [sp, #4]
 8006ff4:	3a01      	subs	r2, #1
 8006ff6:	9201      	str	r2, [sp, #4]
 8006ff8:	9a03      	ldr	r2, [sp, #12]
 8006ffa:	3b04      	subs	r3, #4
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d3f5      	bcc.n	8006fec <quorem+0x104>
 8007000:	9b01      	ldr	r3, [sp, #4]
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	e7e2      	b.n	8006fcc <quorem+0xe4>
	...

08007008 <_dtoa_r>:
 8007008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700a:	0014      	movs	r4, r2
 800700c:	001d      	movs	r5, r3
 800700e:	69c6      	ldr	r6, [r0, #28]
 8007010:	b09d      	sub	sp, #116	; 0x74
 8007012:	9408      	str	r4, [sp, #32]
 8007014:	9509      	str	r5, [sp, #36]	; 0x24
 8007016:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007018:	9004      	str	r0, [sp, #16]
 800701a:	2e00      	cmp	r6, #0
 800701c:	d10f      	bne.n	800703e <_dtoa_r+0x36>
 800701e:	2010      	movs	r0, #16
 8007020:	f000 fe4a 	bl	8007cb8 <malloc>
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	1e02      	subs	r2, r0, #0
 8007028:	61d8      	str	r0, [r3, #28]
 800702a:	d104      	bne.n	8007036 <_dtoa_r+0x2e>
 800702c:	21ef      	movs	r1, #239	; 0xef
 800702e:	4bc6      	ldr	r3, [pc, #792]	; (8007348 <_dtoa_r+0x340>)
 8007030:	48c6      	ldr	r0, [pc, #792]	; (800734c <_dtoa_r+0x344>)
 8007032:	f001 fb6b 	bl	800870c <__assert_func>
 8007036:	6046      	str	r6, [r0, #4]
 8007038:	6086      	str	r6, [r0, #8]
 800703a:	6006      	str	r6, [r0, #0]
 800703c:	60c6      	str	r6, [r0, #12]
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	2900      	cmp	r1, #0
 8007046:	d00b      	beq.n	8007060 <_dtoa_r+0x58>
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	2301      	movs	r3, #1
 800704c:	4093      	lsls	r3, r2
 800704e:	604a      	str	r2, [r1, #4]
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	9804      	ldr	r0, [sp, #16]
 8007054:	f000 ff32 	bl	8007ebc <_Bfree>
 8007058:	2200      	movs	r2, #0
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	2d00      	cmp	r5, #0
 8007062:	da1e      	bge.n	80070a2 <_dtoa_r+0x9a>
 8007064:	2301      	movs	r3, #1
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	006b      	lsls	r3, r5, #1
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007070:	4bb7      	ldr	r3, [pc, #732]	; (8007350 <_dtoa_r+0x348>)
 8007072:	4ab7      	ldr	r2, [pc, #732]	; (8007350 <_dtoa_r+0x348>)
 8007074:	403b      	ands	r3, r7
 8007076:	4293      	cmp	r3, r2
 8007078:	d116      	bne.n	80070a8 <_dtoa_r+0xa0>
 800707a:	4bb6      	ldr	r3, [pc, #728]	; (8007354 <_dtoa_r+0x34c>)
 800707c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	033b      	lsls	r3, r7, #12
 8007082:	0b1b      	lsrs	r3, r3, #12
 8007084:	4323      	orrs	r3, r4
 8007086:	d101      	bne.n	800708c <_dtoa_r+0x84>
 8007088:	f000 fdb5 	bl	8007bf6 <_dtoa_r+0xbee>
 800708c:	4bb2      	ldr	r3, [pc, #712]	; (8007358 <_dtoa_r+0x350>)
 800708e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007090:	9306      	str	r3, [sp, #24]
 8007092:	2a00      	cmp	r2, #0
 8007094:	d002      	beq.n	800709c <_dtoa_r+0x94>
 8007096:	4bb1      	ldr	r3, [pc, #708]	; (800735c <_dtoa_r+0x354>)
 8007098:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	9806      	ldr	r0, [sp, #24]
 800709e:	b01d      	add	sp, #116	; 0x74
 80070a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a2:	2300      	movs	r3, #0
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	e7e2      	b.n	800706e <_dtoa_r+0x66>
 80070a8:	9a08      	ldr	r2, [sp, #32]
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	9210      	str	r2, [sp, #64]	; 0x40
 80070ae:	9311      	str	r3, [sp, #68]	; 0x44
 80070b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80070b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070b4:	2200      	movs	r2, #0
 80070b6:	2300      	movs	r3, #0
 80070b8:	f7f9 f9c8 	bl	800044c <__aeabi_dcmpeq>
 80070bc:	1e06      	subs	r6, r0, #0
 80070be:	d009      	beq.n	80070d4 <_dtoa_r+0xcc>
 80070c0:	2301      	movs	r3, #1
 80070c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4ba6      	ldr	r3, [pc, #664]	; (8007360 <_dtoa_r+0x358>)
 80070c8:	9306      	str	r3, [sp, #24]
 80070ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0e5      	beq.n	800709c <_dtoa_r+0x94>
 80070d0:	4ba4      	ldr	r3, [pc, #656]	; (8007364 <_dtoa_r+0x35c>)
 80070d2:	e7e1      	b.n	8007098 <_dtoa_r+0x90>
 80070d4:	ab1a      	add	r3, sp, #104	; 0x68
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	ab1b      	add	r3, sp, #108	; 0x6c
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	9804      	ldr	r0, [sp, #16]
 80070de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070e2:	f001 f9e1 	bl	80084a8 <__d2b>
 80070e6:	007a      	lsls	r2, r7, #1
 80070e8:	9005      	str	r0, [sp, #20]
 80070ea:	0d52      	lsrs	r2, r2, #21
 80070ec:	d100      	bne.n	80070f0 <_dtoa_r+0xe8>
 80070ee:	e07b      	b.n	80071e8 <_dtoa_r+0x1e0>
 80070f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070f2:	9617      	str	r6, [sp, #92]	; 0x5c
 80070f4:	0319      	lsls	r1, r3, #12
 80070f6:	4b9c      	ldr	r3, [pc, #624]	; (8007368 <_dtoa_r+0x360>)
 80070f8:	0b09      	lsrs	r1, r1, #12
 80070fa:	430b      	orrs	r3, r1
 80070fc:	499b      	ldr	r1, [pc, #620]	; (800736c <_dtoa_r+0x364>)
 80070fe:	1857      	adds	r7, r2, r1
 8007100:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007102:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007104:	0019      	movs	r1, r3
 8007106:	2200      	movs	r2, #0
 8007108:	4b99      	ldr	r3, [pc, #612]	; (8007370 <_dtoa_r+0x368>)
 800710a:	f7fa fd03 	bl	8001b14 <__aeabi_dsub>
 800710e:	4a99      	ldr	r2, [pc, #612]	; (8007374 <_dtoa_r+0x36c>)
 8007110:	4b99      	ldr	r3, [pc, #612]	; (8007378 <_dtoa_r+0x370>)
 8007112:	f7fa fa3d 	bl	8001590 <__aeabi_dmul>
 8007116:	4a99      	ldr	r2, [pc, #612]	; (800737c <_dtoa_r+0x374>)
 8007118:	4b99      	ldr	r3, [pc, #612]	; (8007380 <_dtoa_r+0x378>)
 800711a:	f7f9 fadf 	bl	80006dc <__aeabi_dadd>
 800711e:	0004      	movs	r4, r0
 8007120:	0038      	movs	r0, r7
 8007122:	000d      	movs	r5, r1
 8007124:	f7fb f8cc 	bl	80022c0 <__aeabi_i2d>
 8007128:	4a96      	ldr	r2, [pc, #600]	; (8007384 <_dtoa_r+0x37c>)
 800712a:	4b97      	ldr	r3, [pc, #604]	; (8007388 <_dtoa_r+0x380>)
 800712c:	f7fa fa30 	bl	8001590 <__aeabi_dmul>
 8007130:	0002      	movs	r2, r0
 8007132:	000b      	movs	r3, r1
 8007134:	0020      	movs	r0, r4
 8007136:	0029      	movs	r1, r5
 8007138:	f7f9 fad0 	bl	80006dc <__aeabi_dadd>
 800713c:	0004      	movs	r4, r0
 800713e:	000d      	movs	r5, r1
 8007140:	f7fb f888 	bl	8002254 <__aeabi_d2iz>
 8007144:	2200      	movs	r2, #0
 8007146:	9003      	str	r0, [sp, #12]
 8007148:	2300      	movs	r3, #0
 800714a:	0020      	movs	r0, r4
 800714c:	0029      	movs	r1, r5
 800714e:	f7f9 f983 	bl	8000458 <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d00b      	beq.n	800716e <_dtoa_r+0x166>
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f7fb f8b2 	bl	80022c0 <__aeabi_i2d>
 800715c:	002b      	movs	r3, r5
 800715e:	0022      	movs	r2, r4
 8007160:	f7f9 f974 	bl	800044c <__aeabi_dcmpeq>
 8007164:	4243      	negs	r3, r0
 8007166:	4158      	adcs	r0, r3
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	1a1b      	subs	r3, r3, r0
 800716c:	9303      	str	r3, [sp, #12]
 800716e:	2301      	movs	r3, #1
 8007170:	9316      	str	r3, [sp, #88]	; 0x58
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	2b16      	cmp	r3, #22
 8007176:	d810      	bhi.n	800719a <_dtoa_r+0x192>
 8007178:	9810      	ldr	r0, [sp, #64]	; 0x40
 800717a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800717c:	9a03      	ldr	r2, [sp, #12]
 800717e:	4b83      	ldr	r3, [pc, #524]	; (800738c <_dtoa_r+0x384>)
 8007180:	00d2      	lsls	r2, r2, #3
 8007182:	189b      	adds	r3, r3, r2
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f7f9 f966 	bl	8000458 <__aeabi_dcmplt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d047      	beq.n	8007220 <_dtoa_r+0x218>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3b01      	subs	r3, #1
 8007194:	9303      	str	r3, [sp, #12]
 8007196:	2300      	movs	r3, #0
 8007198:	9316      	str	r3, [sp, #88]	; 0x58
 800719a:	2200      	movs	r2, #0
 800719c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800719e:	920a      	str	r2, [sp, #40]	; 0x28
 80071a0:	1bdb      	subs	r3, r3, r7
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	d53e      	bpl.n	8007224 <_dtoa_r+0x21c>
 80071a6:	2201      	movs	r2, #1
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	930a      	str	r3, [sp, #40]	; 0x28
 80071ac:	2300      	movs	r3, #0
 80071ae:	930c      	str	r3, [sp, #48]	; 0x30
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	db38      	blt.n	8007228 <_dtoa_r+0x220>
 80071b6:	9a03      	ldr	r2, [sp, #12]
 80071b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ba:	4694      	mov	ip, r2
 80071bc:	4463      	add	r3, ip
 80071be:	930c      	str	r3, [sp, #48]	; 0x30
 80071c0:	2300      	movs	r3, #0
 80071c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80071c4:	930d      	str	r3, [sp, #52]	; 0x34
 80071c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c8:	2401      	movs	r4, #1
 80071ca:	2b09      	cmp	r3, #9
 80071cc:	d867      	bhi.n	800729e <_dtoa_r+0x296>
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	dd02      	ble.n	80071d8 <_dtoa_r+0x1d0>
 80071d2:	2400      	movs	r4, #0
 80071d4:	3b04      	subs	r3, #4
 80071d6:	9322      	str	r3, [sp, #136]	; 0x88
 80071d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071da:	1e98      	subs	r0, r3, #2
 80071dc:	2803      	cmp	r0, #3
 80071de:	d867      	bhi.n	80072b0 <_dtoa_r+0x2a8>
 80071e0:	f7f8 ff9a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80071e4:	5b383a2b 	.word	0x5b383a2b
 80071e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80071ec:	18f6      	adds	r6, r6, r3
 80071ee:	4b68      	ldr	r3, [pc, #416]	; (8007390 <_dtoa_r+0x388>)
 80071f0:	18f2      	adds	r2, r6, r3
 80071f2:	2a20      	cmp	r2, #32
 80071f4:	dd0f      	ble.n	8007216 <_dtoa_r+0x20e>
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	409f      	lsls	r7, r3
 80071fc:	4b65      	ldr	r3, [pc, #404]	; (8007394 <_dtoa_r+0x38c>)
 80071fe:	0038      	movs	r0, r7
 8007200:	18f3      	adds	r3, r6, r3
 8007202:	40dc      	lsrs	r4, r3
 8007204:	4320      	orrs	r0, r4
 8007206:	f7fb f88b 	bl	8002320 <__aeabi_ui2d>
 800720a:	2201      	movs	r2, #1
 800720c:	4b62      	ldr	r3, [pc, #392]	; (8007398 <_dtoa_r+0x390>)
 800720e:	1e77      	subs	r7, r6, #1
 8007210:	18cb      	adds	r3, r1, r3
 8007212:	9217      	str	r2, [sp, #92]	; 0x5c
 8007214:	e776      	b.n	8007104 <_dtoa_r+0xfc>
 8007216:	2320      	movs	r3, #32
 8007218:	0020      	movs	r0, r4
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	4098      	lsls	r0, r3
 800721e:	e7f2      	b.n	8007206 <_dtoa_r+0x1fe>
 8007220:	9016      	str	r0, [sp, #88]	; 0x58
 8007222:	e7ba      	b.n	800719a <_dtoa_r+0x192>
 8007224:	920c      	str	r2, [sp, #48]	; 0x30
 8007226:	e7c3      	b.n	80071b0 <_dtoa_r+0x1a8>
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	9a03      	ldr	r2, [sp, #12]
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	930a      	str	r3, [sp, #40]	; 0x28
 8007230:	4253      	negs	r3, r2
 8007232:	930d      	str	r3, [sp, #52]	; 0x34
 8007234:	2300      	movs	r3, #0
 8007236:	9313      	str	r3, [sp, #76]	; 0x4c
 8007238:	e7c5      	b.n	80071c6 <_dtoa_r+0x1be>
 800723a:	2300      	movs	r3, #0
 800723c:	930f      	str	r3, [sp, #60]	; 0x3c
 800723e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007240:	930b      	str	r3, [sp, #44]	; 0x2c
 8007242:	9307      	str	r3, [sp, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dc13      	bgt.n	8007270 <_dtoa_r+0x268>
 8007248:	2301      	movs	r3, #1
 800724a:	001a      	movs	r2, r3
 800724c:	930b      	str	r3, [sp, #44]	; 0x2c
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	9223      	str	r2, [sp, #140]	; 0x8c
 8007252:	e00d      	b.n	8007270 <_dtoa_r+0x268>
 8007254:	2301      	movs	r3, #1
 8007256:	e7f1      	b.n	800723c <_dtoa_r+0x234>
 8007258:	2300      	movs	r3, #0
 800725a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800725c:	930f      	str	r3, [sp, #60]	; 0x3c
 800725e:	4694      	mov	ip, r2
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	4463      	add	r3, ip
 8007264:	930b      	str	r3, [sp, #44]	; 0x2c
 8007266:	3301      	adds	r3, #1
 8007268:	9307      	str	r3, [sp, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	dc00      	bgt.n	8007270 <_dtoa_r+0x268>
 800726e:	2301      	movs	r3, #1
 8007270:	9a04      	ldr	r2, [sp, #16]
 8007272:	2100      	movs	r1, #0
 8007274:	69d0      	ldr	r0, [r2, #28]
 8007276:	2204      	movs	r2, #4
 8007278:	0015      	movs	r5, r2
 800727a:	3514      	adds	r5, #20
 800727c:	429d      	cmp	r5, r3
 800727e:	d91b      	bls.n	80072b8 <_dtoa_r+0x2b0>
 8007280:	6041      	str	r1, [r0, #4]
 8007282:	9804      	ldr	r0, [sp, #16]
 8007284:	f000 fdd6 	bl	8007e34 <_Balloc>
 8007288:	9006      	str	r0, [sp, #24]
 800728a:	2800      	cmp	r0, #0
 800728c:	d117      	bne.n	80072be <_dtoa_r+0x2b6>
 800728e:	21b0      	movs	r1, #176	; 0xb0
 8007290:	4b42      	ldr	r3, [pc, #264]	; (800739c <_dtoa_r+0x394>)
 8007292:	482e      	ldr	r0, [pc, #184]	; (800734c <_dtoa_r+0x344>)
 8007294:	9a06      	ldr	r2, [sp, #24]
 8007296:	31ff      	adds	r1, #255	; 0xff
 8007298:	e6cb      	b.n	8007032 <_dtoa_r+0x2a>
 800729a:	2301      	movs	r3, #1
 800729c:	e7dd      	b.n	800725a <_dtoa_r+0x252>
 800729e:	2300      	movs	r3, #0
 80072a0:	940f      	str	r4, [sp, #60]	; 0x3c
 80072a2:	9322      	str	r3, [sp, #136]	; 0x88
 80072a4:	3b01      	subs	r3, #1
 80072a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	2200      	movs	r2, #0
 80072ac:	3313      	adds	r3, #19
 80072ae:	e7cf      	b.n	8007250 <_dtoa_r+0x248>
 80072b0:	2301      	movs	r3, #1
 80072b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80072b4:	3b02      	subs	r3, #2
 80072b6:	e7f6      	b.n	80072a6 <_dtoa_r+0x29e>
 80072b8:	3101      	adds	r1, #1
 80072ba:	0052      	lsls	r2, r2, #1
 80072bc:	e7dc      	b.n	8007278 <_dtoa_r+0x270>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	9a06      	ldr	r2, [sp, #24]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	2b0e      	cmp	r3, #14
 80072ca:	d900      	bls.n	80072ce <_dtoa_r+0x2c6>
 80072cc:	e0e5      	b.n	800749a <_dtoa_r+0x492>
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	d100      	bne.n	80072d4 <_dtoa_r+0x2cc>
 80072d2:	e0e2      	b.n	800749a <_dtoa_r+0x492>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dd64      	ble.n	80073a4 <_dtoa_r+0x39c>
 80072da:	210f      	movs	r1, #15
 80072dc:	9a03      	ldr	r2, [sp, #12]
 80072de:	4b2b      	ldr	r3, [pc, #172]	; (800738c <_dtoa_r+0x384>)
 80072e0:	400a      	ands	r2, r1
 80072e2:	00d2      	lsls	r2, r2, #3
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	681e      	ldr	r6, [r3, #0]
 80072e8:	685f      	ldr	r7, [r3, #4]
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	2402      	movs	r4, #2
 80072ee:	111d      	asrs	r5, r3, #4
 80072f0:	05db      	lsls	r3, r3, #23
 80072f2:	d50a      	bpl.n	800730a <_dtoa_r+0x302>
 80072f4:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <_dtoa_r+0x398>)
 80072f6:	400d      	ands	r5, r1
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80072fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007300:	f7f9 fd4c 	bl	8000d9c <__aeabi_ddiv>
 8007304:	9008      	str	r0, [sp, #32]
 8007306:	9109      	str	r1, [sp, #36]	; 0x24
 8007308:	3401      	adds	r4, #1
 800730a:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <_dtoa_r+0x398>)
 800730c:	930e      	str	r3, [sp, #56]	; 0x38
 800730e:	2d00      	cmp	r5, #0
 8007310:	d108      	bne.n	8007324 <_dtoa_r+0x31c>
 8007312:	9808      	ldr	r0, [sp, #32]
 8007314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007316:	0032      	movs	r2, r6
 8007318:	003b      	movs	r3, r7
 800731a:	f7f9 fd3f 	bl	8000d9c <__aeabi_ddiv>
 800731e:	9008      	str	r0, [sp, #32]
 8007320:	9109      	str	r1, [sp, #36]	; 0x24
 8007322:	e05a      	b.n	80073da <_dtoa_r+0x3d2>
 8007324:	2301      	movs	r3, #1
 8007326:	421d      	tst	r5, r3
 8007328:	d009      	beq.n	800733e <_dtoa_r+0x336>
 800732a:	18e4      	adds	r4, r4, r3
 800732c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800732e:	0030      	movs	r0, r6
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	0039      	movs	r1, r7
 8007336:	f7fa f92b 	bl	8001590 <__aeabi_dmul>
 800733a:	0006      	movs	r6, r0
 800733c:	000f      	movs	r7, r1
 800733e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007340:	106d      	asrs	r5, r5, #1
 8007342:	3308      	adds	r3, #8
 8007344:	e7e2      	b.n	800730c <_dtoa_r+0x304>
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	08008e8d 	.word	0x08008e8d
 800734c:	08008ea4 	.word	0x08008ea4
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	0000270f 	.word	0x0000270f
 8007358:	08008e89 	.word	0x08008e89
 800735c:	08008e8c 	.word	0x08008e8c
 8007360:	08008e5c 	.word	0x08008e5c
 8007364:	08008e5d 	.word	0x08008e5d
 8007368:	3ff00000 	.word	0x3ff00000
 800736c:	fffffc01 	.word	0xfffffc01
 8007370:	3ff80000 	.word	0x3ff80000
 8007374:	636f4361 	.word	0x636f4361
 8007378:	3fd287a7 	.word	0x3fd287a7
 800737c:	8b60c8b3 	.word	0x8b60c8b3
 8007380:	3fc68a28 	.word	0x3fc68a28
 8007384:	509f79fb 	.word	0x509f79fb
 8007388:	3fd34413 	.word	0x3fd34413
 800738c:	08008f90 	.word	0x08008f90
 8007390:	00000432 	.word	0x00000432
 8007394:	00000412 	.word	0x00000412
 8007398:	fe100000 	.word	0xfe100000
 800739c:	08008efc 	.word	0x08008efc
 80073a0:	08008f68 	.word	0x08008f68
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	2402      	movs	r4, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <_dtoa_r+0x3d2>
 80073ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80073b0:	220f      	movs	r2, #15
 80073b2:	425d      	negs	r5, r3
 80073b4:	402a      	ands	r2, r5
 80073b6:	4bdd      	ldr	r3, [pc, #884]	; (800772c <_dtoa_r+0x724>)
 80073b8:	00d2      	lsls	r2, r2, #3
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f7fa f8e6 	bl	8001590 <__aeabi_dmul>
 80073c4:	2701      	movs	r7, #1
 80073c6:	2300      	movs	r3, #0
 80073c8:	9008      	str	r0, [sp, #32]
 80073ca:	9109      	str	r1, [sp, #36]	; 0x24
 80073cc:	4ed8      	ldr	r6, [pc, #864]	; (8007730 <_dtoa_r+0x728>)
 80073ce:	112d      	asrs	r5, r5, #4
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d000      	beq.n	80073d6 <_dtoa_r+0x3ce>
 80073d4:	e091      	b.n	80074fa <_dtoa_r+0x4f2>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1a1      	bne.n	800731e <_dtoa_r+0x316>
 80073da:	9e08      	ldr	r6, [sp, #32]
 80073dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d100      	bne.n	80073e6 <_dtoa_r+0x3de>
 80073e4:	e094      	b.n	8007510 <_dtoa_r+0x508>
 80073e6:	2200      	movs	r2, #0
 80073e8:	0030      	movs	r0, r6
 80073ea:	0039      	movs	r1, r7
 80073ec:	4bd1      	ldr	r3, [pc, #836]	; (8007734 <_dtoa_r+0x72c>)
 80073ee:	f7f9 f833 	bl	8000458 <__aeabi_dcmplt>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d100      	bne.n	80073f8 <_dtoa_r+0x3f0>
 80073f6:	e08b      	b.n	8007510 <_dtoa_r+0x508>
 80073f8:	9b07      	ldr	r3, [sp, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d100      	bne.n	8007400 <_dtoa_r+0x3f8>
 80073fe:	e087      	b.n	8007510 <_dtoa_r+0x508>
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd45      	ble.n	8007492 <_dtoa_r+0x48a>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	3b01      	subs	r3, #1
 800740c:	930e      	str	r3, [sp, #56]	; 0x38
 800740e:	0030      	movs	r0, r6
 8007410:	4bc9      	ldr	r3, [pc, #804]	; (8007738 <_dtoa_r+0x730>)
 8007412:	0039      	movs	r1, r7
 8007414:	f7fa f8bc 	bl	8001590 <__aeabi_dmul>
 8007418:	9008      	str	r0, [sp, #32]
 800741a:	9109      	str	r1, [sp, #36]	; 0x24
 800741c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741e:	3401      	adds	r4, #1
 8007420:	0020      	movs	r0, r4
 8007422:	9e08      	ldr	r6, [sp, #32]
 8007424:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007426:	9312      	str	r3, [sp, #72]	; 0x48
 8007428:	f7fa ff4a 	bl	80022c0 <__aeabi_i2d>
 800742c:	0032      	movs	r2, r6
 800742e:	003b      	movs	r3, r7
 8007430:	f7fa f8ae 	bl	8001590 <__aeabi_dmul>
 8007434:	2200      	movs	r2, #0
 8007436:	4bc1      	ldr	r3, [pc, #772]	; (800773c <_dtoa_r+0x734>)
 8007438:	f7f9 f950 	bl	80006dc <__aeabi_dadd>
 800743c:	4ac0      	ldr	r2, [pc, #768]	; (8007740 <_dtoa_r+0x738>)
 800743e:	9014      	str	r0, [sp, #80]	; 0x50
 8007440:	9115      	str	r1, [sp, #84]	; 0x54
 8007442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007444:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007446:	4694      	mov	ip, r2
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	9409      	str	r4, [sp, #36]	; 0x24
 800744c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800744e:	4463      	add	r3, ip
 8007450:	9318      	str	r3, [sp, #96]	; 0x60
 8007452:	9309      	str	r3, [sp, #36]	; 0x24
 8007454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007456:	2b00      	cmp	r3, #0
 8007458:	d15e      	bne.n	8007518 <_dtoa_r+0x510>
 800745a:	2200      	movs	r2, #0
 800745c:	4bb9      	ldr	r3, [pc, #740]	; (8007744 <_dtoa_r+0x73c>)
 800745e:	0030      	movs	r0, r6
 8007460:	0039      	movs	r1, r7
 8007462:	f7fa fb57 	bl	8001b14 <__aeabi_dsub>
 8007466:	9a08      	ldr	r2, [sp, #32]
 8007468:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800746a:	0004      	movs	r4, r0
 800746c:	000d      	movs	r5, r1
 800746e:	f7f9 f807 	bl	8000480 <__aeabi_dcmpgt>
 8007472:	2800      	cmp	r0, #0
 8007474:	d000      	beq.n	8007478 <_dtoa_r+0x470>
 8007476:	e2b3      	b.n	80079e0 <_dtoa_r+0x9d8>
 8007478:	48b3      	ldr	r0, [pc, #716]	; (8007748 <_dtoa_r+0x740>)
 800747a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800747c:	4684      	mov	ip, r0
 800747e:	4461      	add	r1, ip
 8007480:	000b      	movs	r3, r1
 8007482:	0020      	movs	r0, r4
 8007484:	0029      	movs	r1, r5
 8007486:	9a08      	ldr	r2, [sp, #32]
 8007488:	f7f8 ffe6 	bl	8000458 <__aeabi_dcmplt>
 800748c:	2800      	cmp	r0, #0
 800748e:	d000      	beq.n	8007492 <_dtoa_r+0x48a>
 8007490:	e2a3      	b.n	80079da <_dtoa_r+0x9d2>
 8007492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007494:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007496:	9308      	str	r3, [sp, #32]
 8007498:	9409      	str	r4, [sp, #36]	; 0x24
 800749a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800749c:	2b00      	cmp	r3, #0
 800749e:	da00      	bge.n	80074a2 <_dtoa_r+0x49a>
 80074a0:	e179      	b.n	8007796 <_dtoa_r+0x78e>
 80074a2:	9a03      	ldr	r2, [sp, #12]
 80074a4:	2a0e      	cmp	r2, #14
 80074a6:	dd00      	ble.n	80074aa <_dtoa_r+0x4a2>
 80074a8:	e175      	b.n	8007796 <_dtoa_r+0x78e>
 80074aa:	4ba0      	ldr	r3, [pc, #640]	; (800772c <_dtoa_r+0x724>)
 80074ac:	00d2      	lsls	r2, r2, #3
 80074ae:	189b      	adds	r3, r3, r2
 80074b0:	681e      	ldr	r6, [r3, #0]
 80074b2:	685f      	ldr	r7, [r3, #4]
 80074b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	db00      	blt.n	80074bc <_dtoa_r+0x4b4>
 80074ba:	e0e5      	b.n	8007688 <_dtoa_r+0x680>
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd00      	ble.n	80074c4 <_dtoa_r+0x4bc>
 80074c2:	e0e1      	b.n	8007688 <_dtoa_r+0x680>
 80074c4:	d000      	beq.n	80074c8 <_dtoa_r+0x4c0>
 80074c6:	e288      	b.n	80079da <_dtoa_r+0x9d2>
 80074c8:	2200      	movs	r2, #0
 80074ca:	0030      	movs	r0, r6
 80074cc:	0039      	movs	r1, r7
 80074ce:	4b9d      	ldr	r3, [pc, #628]	; (8007744 <_dtoa_r+0x73c>)
 80074d0:	f7fa f85e 	bl	8001590 <__aeabi_dmul>
 80074d4:	9a08      	ldr	r2, [sp, #32]
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	f7f8 ffdc 	bl	8000494 <__aeabi_dcmpge>
 80074dc:	9e07      	ldr	r6, [sp, #28]
 80074de:	0037      	movs	r7, r6
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d000      	beq.n	80074e6 <_dtoa_r+0x4de>
 80074e4:	e25f      	b.n	80079a6 <_dtoa_r+0x99e>
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	9a06      	ldr	r2, [sp, #24]
 80074ea:	3301      	adds	r3, #1
 80074ec:	9308      	str	r3, [sp, #32]
 80074ee:	2331      	movs	r3, #49	; 0x31
 80074f0:	7013      	strb	r3, [r2, #0]
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	9303      	str	r3, [sp, #12]
 80074f8:	e25a      	b.n	80079b0 <_dtoa_r+0x9a8>
 80074fa:	423d      	tst	r5, r7
 80074fc:	d005      	beq.n	800750a <_dtoa_r+0x502>
 80074fe:	6832      	ldr	r2, [r6, #0]
 8007500:	6873      	ldr	r3, [r6, #4]
 8007502:	f7fa f845 	bl	8001590 <__aeabi_dmul>
 8007506:	003b      	movs	r3, r7
 8007508:	3401      	adds	r4, #1
 800750a:	106d      	asrs	r5, r5, #1
 800750c:	3608      	adds	r6, #8
 800750e:	e75f      	b.n	80073d0 <_dtoa_r+0x3c8>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	930e      	str	r3, [sp, #56]	; 0x38
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	e783      	b.n	8007420 <_dtoa_r+0x418>
 8007518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800751a:	4b84      	ldr	r3, [pc, #528]	; (800772c <_dtoa_r+0x724>)
 800751c:	3a01      	subs	r2, #1
 800751e:	00d2      	lsls	r2, r2, #3
 8007520:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007522:	189b      	adds	r3, r3, r2
 8007524:	9c08      	ldr	r4, [sp, #32]
 8007526:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2900      	cmp	r1, #0
 800752e:	d051      	beq.n	80075d4 <_dtoa_r+0x5cc>
 8007530:	2000      	movs	r0, #0
 8007532:	4986      	ldr	r1, [pc, #536]	; (800774c <_dtoa_r+0x744>)
 8007534:	f7f9 fc32 	bl	8000d9c <__aeabi_ddiv>
 8007538:	0022      	movs	r2, r4
 800753a:	002b      	movs	r3, r5
 800753c:	f7fa faea 	bl	8001b14 <__aeabi_dsub>
 8007540:	9a06      	ldr	r2, [sp, #24]
 8007542:	0004      	movs	r4, r0
 8007544:	4694      	mov	ip, r2
 8007546:	000d      	movs	r5, r1
 8007548:	9b06      	ldr	r3, [sp, #24]
 800754a:	9314      	str	r3, [sp, #80]	; 0x50
 800754c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800754e:	4463      	add	r3, ip
 8007550:	9318      	str	r3, [sp, #96]	; 0x60
 8007552:	0039      	movs	r1, r7
 8007554:	0030      	movs	r0, r6
 8007556:	f7fa fe7d 	bl	8002254 <__aeabi_d2iz>
 800755a:	9012      	str	r0, [sp, #72]	; 0x48
 800755c:	f7fa feb0 	bl	80022c0 <__aeabi_i2d>
 8007560:	0002      	movs	r2, r0
 8007562:	000b      	movs	r3, r1
 8007564:	0030      	movs	r0, r6
 8007566:	0039      	movs	r1, r7
 8007568:	f7fa fad4 	bl	8001b14 <__aeabi_dsub>
 800756c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800756e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007570:	3301      	adds	r3, #1
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007576:	0006      	movs	r6, r0
 8007578:	3330      	adds	r3, #48	; 0x30
 800757a:	7013      	strb	r3, [r2, #0]
 800757c:	0022      	movs	r2, r4
 800757e:	002b      	movs	r3, r5
 8007580:	000f      	movs	r7, r1
 8007582:	f7f8 ff69 	bl	8000458 <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d174      	bne.n	8007674 <_dtoa_r+0x66c>
 800758a:	0032      	movs	r2, r6
 800758c:	003b      	movs	r3, r7
 800758e:	2000      	movs	r0, #0
 8007590:	4968      	ldr	r1, [pc, #416]	; (8007734 <_dtoa_r+0x72c>)
 8007592:	f7fa fabf 	bl	8001b14 <__aeabi_dsub>
 8007596:	0022      	movs	r2, r4
 8007598:	002b      	movs	r3, r5
 800759a:	f7f8 ff5d 	bl	8000458 <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d000      	beq.n	80075a4 <_dtoa_r+0x59c>
 80075a2:	e0d7      	b.n	8007754 <_dtoa_r+0x74c>
 80075a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80075a6:	9a08      	ldr	r2, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d100      	bne.n	80075ae <_dtoa_r+0x5a6>
 80075ac:	e771      	b.n	8007492 <_dtoa_r+0x48a>
 80075ae:	2200      	movs	r2, #0
 80075b0:	0020      	movs	r0, r4
 80075b2:	0029      	movs	r1, r5
 80075b4:	4b60      	ldr	r3, [pc, #384]	; (8007738 <_dtoa_r+0x730>)
 80075b6:	f7f9 ffeb 	bl	8001590 <__aeabi_dmul>
 80075ba:	4b5f      	ldr	r3, [pc, #380]	; (8007738 <_dtoa_r+0x730>)
 80075bc:	0004      	movs	r4, r0
 80075be:	000d      	movs	r5, r1
 80075c0:	0030      	movs	r0, r6
 80075c2:	0039      	movs	r1, r7
 80075c4:	2200      	movs	r2, #0
 80075c6:	f7f9 ffe3 	bl	8001590 <__aeabi_dmul>
 80075ca:	9b08      	ldr	r3, [sp, #32]
 80075cc:	0006      	movs	r6, r0
 80075ce:	000f      	movs	r7, r1
 80075d0:	9314      	str	r3, [sp, #80]	; 0x50
 80075d2:	e7be      	b.n	8007552 <_dtoa_r+0x54a>
 80075d4:	0020      	movs	r0, r4
 80075d6:	0029      	movs	r1, r5
 80075d8:	f7f9 ffda 	bl	8001590 <__aeabi_dmul>
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	4694      	mov	ip, r2
 80075e2:	9308      	str	r3, [sp, #32]
 80075e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e6:	9014      	str	r0, [sp, #80]	; 0x50
 80075e8:	9115      	str	r1, [sp, #84]	; 0x54
 80075ea:	4463      	add	r3, ip
 80075ec:	9319      	str	r3, [sp, #100]	; 0x64
 80075ee:	0030      	movs	r0, r6
 80075f0:	0039      	movs	r1, r7
 80075f2:	f7fa fe2f 	bl	8002254 <__aeabi_d2iz>
 80075f6:	9018      	str	r0, [sp, #96]	; 0x60
 80075f8:	f7fa fe62 	bl	80022c0 <__aeabi_i2d>
 80075fc:	0002      	movs	r2, r0
 80075fe:	000b      	movs	r3, r1
 8007600:	0030      	movs	r0, r6
 8007602:	0039      	movs	r1, r7
 8007604:	f7fa fa86 	bl	8001b14 <__aeabi_dsub>
 8007608:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	3630      	adds	r6, #48	; 0x30
 800760e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007610:	701e      	strb	r6, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	0004      	movs	r4, r0
 8007616:	000d      	movs	r5, r1
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	4293      	cmp	r3, r2
 800761c:	d12d      	bne.n	800767a <_dtoa_r+0x672>
 800761e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007620:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007622:	9a06      	ldr	r2, [sp, #24]
 8007624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007626:	4694      	mov	ip, r2
 8007628:	4463      	add	r3, ip
 800762a:	2200      	movs	r2, #0
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	4b47      	ldr	r3, [pc, #284]	; (800774c <_dtoa_r+0x744>)
 8007630:	f7f9 f854 	bl	80006dc <__aeabi_dadd>
 8007634:	0002      	movs	r2, r0
 8007636:	000b      	movs	r3, r1
 8007638:	0020      	movs	r0, r4
 800763a:	0029      	movs	r1, r5
 800763c:	f7f8 ff20 	bl	8000480 <__aeabi_dcmpgt>
 8007640:	2800      	cmp	r0, #0
 8007642:	d000      	beq.n	8007646 <_dtoa_r+0x63e>
 8007644:	e086      	b.n	8007754 <_dtoa_r+0x74c>
 8007646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800764a:	2000      	movs	r0, #0
 800764c:	493f      	ldr	r1, [pc, #252]	; (800774c <_dtoa_r+0x744>)
 800764e:	f7fa fa61 	bl	8001b14 <__aeabi_dsub>
 8007652:	0002      	movs	r2, r0
 8007654:	000b      	movs	r3, r1
 8007656:	0020      	movs	r0, r4
 8007658:	0029      	movs	r1, r5
 800765a:	f7f8 fefd 	bl	8000458 <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d100      	bne.n	8007664 <_dtoa_r+0x65c>
 8007662:	e716      	b.n	8007492 <_dtoa_r+0x48a>
 8007664:	9b08      	ldr	r3, [sp, #32]
 8007666:	001a      	movs	r2, r3
 8007668:	3a01      	subs	r2, #1
 800766a:	9208      	str	r2, [sp, #32]
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	2a30      	cmp	r2, #48	; 0x30
 8007670:	d0f8      	beq.n	8007664 <_dtoa_r+0x65c>
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	e046      	b.n	8007708 <_dtoa_r+0x700>
 800767a:	2200      	movs	r2, #0
 800767c:	4b2e      	ldr	r3, [pc, #184]	; (8007738 <_dtoa_r+0x730>)
 800767e:	f7f9 ff87 	bl	8001590 <__aeabi_dmul>
 8007682:	0006      	movs	r6, r0
 8007684:	000f      	movs	r7, r1
 8007686:	e7b2      	b.n	80075ee <_dtoa_r+0x5e6>
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	9a06      	ldr	r2, [sp, #24]
 800768c:	930a      	str	r3, [sp, #40]	; 0x28
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	9c08      	ldr	r4, [sp, #32]
 8007692:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007694:	3b01      	subs	r3, #1
 8007696:	189b      	adds	r3, r3, r2
 8007698:	930b      	str	r3, [sp, #44]	; 0x2c
 800769a:	0032      	movs	r2, r6
 800769c:	003b      	movs	r3, r7
 800769e:	0020      	movs	r0, r4
 80076a0:	0029      	movs	r1, r5
 80076a2:	f7f9 fb7b 	bl	8000d9c <__aeabi_ddiv>
 80076a6:	f7fa fdd5 	bl	8002254 <__aeabi_d2iz>
 80076aa:	9007      	str	r0, [sp, #28]
 80076ac:	f7fa fe08 	bl	80022c0 <__aeabi_i2d>
 80076b0:	0032      	movs	r2, r6
 80076b2:	003b      	movs	r3, r7
 80076b4:	f7f9 ff6c 	bl	8001590 <__aeabi_dmul>
 80076b8:	0002      	movs	r2, r0
 80076ba:	000b      	movs	r3, r1
 80076bc:	0020      	movs	r0, r4
 80076be:	0029      	movs	r1, r5
 80076c0:	f7fa fa28 	bl	8001b14 <__aeabi_dsub>
 80076c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c6:	001a      	movs	r2, r3
 80076c8:	3201      	adds	r2, #1
 80076ca:	920a      	str	r2, [sp, #40]	; 0x28
 80076cc:	9208      	str	r2, [sp, #32]
 80076ce:	9a07      	ldr	r2, [sp, #28]
 80076d0:	3230      	adds	r2, #48	; 0x30
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d14f      	bne.n	800777a <_dtoa_r+0x772>
 80076da:	0002      	movs	r2, r0
 80076dc:	000b      	movs	r3, r1
 80076de:	f7f8 fffd 	bl	80006dc <__aeabi_dadd>
 80076e2:	0032      	movs	r2, r6
 80076e4:	003b      	movs	r3, r7
 80076e6:	0004      	movs	r4, r0
 80076e8:	000d      	movs	r5, r1
 80076ea:	f7f8 fec9 	bl	8000480 <__aeabi_dcmpgt>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d12e      	bne.n	8007750 <_dtoa_r+0x748>
 80076f2:	0032      	movs	r2, r6
 80076f4:	003b      	movs	r3, r7
 80076f6:	0020      	movs	r0, r4
 80076f8:	0029      	movs	r1, r5
 80076fa:	f7f8 fea7 	bl	800044c <__aeabi_dcmpeq>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d002      	beq.n	8007708 <_dtoa_r+0x700>
 8007702:	9b07      	ldr	r3, [sp, #28]
 8007704:	07de      	lsls	r6, r3, #31
 8007706:	d423      	bmi.n	8007750 <_dtoa_r+0x748>
 8007708:	9905      	ldr	r1, [sp, #20]
 800770a:	9804      	ldr	r0, [sp, #16]
 800770c:	f000 fbd6 	bl	8007ebc <_Bfree>
 8007710:	2300      	movs	r3, #0
 8007712:	9a08      	ldr	r2, [sp, #32]
 8007714:	7013      	strb	r3, [r2, #0]
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800771a:	3301      	adds	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007720:	2b00      	cmp	r3, #0
 8007722:	d100      	bne.n	8007726 <_dtoa_r+0x71e>
 8007724:	e4ba      	b.n	800709c <_dtoa_r+0x94>
 8007726:	9a08      	ldr	r2, [sp, #32]
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e4b7      	b.n	800709c <_dtoa_r+0x94>
 800772c:	08008f90 	.word	0x08008f90
 8007730:	08008f68 	.word	0x08008f68
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	40240000 	.word	0x40240000
 800773c:	401c0000 	.word	0x401c0000
 8007740:	fcc00000 	.word	0xfcc00000
 8007744:	40140000 	.word	0x40140000
 8007748:	7cc00000 	.word	0x7cc00000
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	930e      	str	r3, [sp, #56]	; 0x38
 8007754:	9b08      	ldr	r3, [sp, #32]
 8007756:	9308      	str	r3, [sp, #32]
 8007758:	3b01      	subs	r3, #1
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	2a39      	cmp	r2, #57	; 0x39
 800775e:	d108      	bne.n	8007772 <_dtoa_r+0x76a>
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d1f7      	bne.n	8007756 <_dtoa_r+0x74e>
 8007766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007768:	9906      	ldr	r1, [sp, #24]
 800776a:	3201      	adds	r2, #1
 800776c:	920e      	str	r2, [sp, #56]	; 0x38
 800776e:	2230      	movs	r2, #48	; 0x30
 8007770:	700a      	strb	r2, [r1, #0]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	3201      	adds	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e77c      	b.n	8007674 <_dtoa_r+0x66c>
 800777a:	2200      	movs	r2, #0
 800777c:	4ba9      	ldr	r3, [pc, #676]	; (8007a24 <_dtoa_r+0xa1c>)
 800777e:	f7f9 ff07 	bl	8001590 <__aeabi_dmul>
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	0004      	movs	r4, r0
 8007788:	000d      	movs	r5, r1
 800778a:	f7f8 fe5f 	bl	800044c <__aeabi_dcmpeq>
 800778e:	2800      	cmp	r0, #0
 8007790:	d100      	bne.n	8007794 <_dtoa_r+0x78c>
 8007792:	e782      	b.n	800769a <_dtoa_r+0x692>
 8007794:	e7b8      	b.n	8007708 <_dtoa_r+0x700>
 8007796:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007798:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800779a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800779c:	2f00      	cmp	r7, #0
 800779e:	d012      	beq.n	80077c6 <_dtoa_r+0x7be>
 80077a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077a2:	2a01      	cmp	r2, #1
 80077a4:	dc6e      	bgt.n	8007884 <_dtoa_r+0x87c>
 80077a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d065      	beq.n	8007878 <_dtoa_r+0x870>
 80077ac:	4a9e      	ldr	r2, [pc, #632]	; (8007a28 <_dtoa_r+0xa20>)
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b2:	2101      	movs	r1, #1
 80077b4:	18d2      	adds	r2, r2, r3
 80077b6:	920a      	str	r2, [sp, #40]	; 0x28
 80077b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ba:	9804      	ldr	r0, [sp, #16]
 80077bc:	18d3      	adds	r3, r2, r3
 80077be:	930c      	str	r3, [sp, #48]	; 0x30
 80077c0:	f000 fc2c 	bl	800801c <__i2b>
 80077c4:	0007      	movs	r7, r0
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	d00e      	beq.n	80077e8 <_dtoa_r+0x7e0>
 80077ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd0b      	ble.n	80077e8 <_dtoa_r+0x7e0>
 80077d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d2:	0023      	movs	r3, r4
 80077d4:	4294      	cmp	r4, r2
 80077d6:	dd00      	ble.n	80077da <_dtoa_r+0x7d2>
 80077d8:	0013      	movs	r3, r2
 80077da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077dc:	1ae4      	subs	r4, r4, r3
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	920a      	str	r2, [sp, #40]	; 0x28
 80077e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	930c      	str	r3, [sp, #48]	; 0x30
 80077e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d01e      	beq.n	800782c <_dtoa_r+0x824>
 80077ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d05c      	beq.n	80078ae <_dtoa_r+0x8a6>
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	dd10      	ble.n	800781a <_dtoa_r+0x812>
 80077f8:	0039      	movs	r1, r7
 80077fa:	002a      	movs	r2, r5
 80077fc:	9804      	ldr	r0, [sp, #16]
 80077fe:	f000 fcd5 	bl	80081ac <__pow5mult>
 8007802:	9a05      	ldr	r2, [sp, #20]
 8007804:	0001      	movs	r1, r0
 8007806:	0007      	movs	r7, r0
 8007808:	9804      	ldr	r0, [sp, #16]
 800780a:	f000 fc1f 	bl	800804c <__multiply>
 800780e:	0006      	movs	r6, r0
 8007810:	9905      	ldr	r1, [sp, #20]
 8007812:	9804      	ldr	r0, [sp, #16]
 8007814:	f000 fb52 	bl	8007ebc <_Bfree>
 8007818:	9605      	str	r6, [sp, #20]
 800781a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800781c:	1b5a      	subs	r2, r3, r5
 800781e:	42ab      	cmp	r3, r5
 8007820:	d004      	beq.n	800782c <_dtoa_r+0x824>
 8007822:	9905      	ldr	r1, [sp, #20]
 8007824:	9804      	ldr	r0, [sp, #16]
 8007826:	f000 fcc1 	bl	80081ac <__pow5mult>
 800782a:	9005      	str	r0, [sp, #20]
 800782c:	2101      	movs	r1, #1
 800782e:	9804      	ldr	r0, [sp, #16]
 8007830:	f000 fbf4 	bl	800801c <__i2b>
 8007834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007836:	0006      	movs	r6, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	dd3a      	ble.n	80078b2 <_dtoa_r+0x8aa>
 800783c:	001a      	movs	r2, r3
 800783e:	0001      	movs	r1, r0
 8007840:	9804      	ldr	r0, [sp, #16]
 8007842:	f000 fcb3 	bl	80081ac <__pow5mult>
 8007846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007848:	0006      	movs	r6, r0
 800784a:	2500      	movs	r5, #0
 800784c:	2b01      	cmp	r3, #1
 800784e:	dc38      	bgt.n	80078c2 <_dtoa_r+0x8ba>
 8007850:	2500      	movs	r5, #0
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	42ab      	cmp	r3, r5
 8007856:	d130      	bne.n	80078ba <_dtoa_r+0x8b2>
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	031b      	lsls	r3, r3, #12
 800785c:	42ab      	cmp	r3, r5
 800785e:	d12c      	bne.n	80078ba <_dtoa_r+0x8b2>
 8007860:	4b72      	ldr	r3, [pc, #456]	; (8007a2c <_dtoa_r+0xa24>)
 8007862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007864:	4213      	tst	r3, r2
 8007866:	d028      	beq.n	80078ba <_dtoa_r+0x8b2>
 8007868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786a:	3501      	adds	r5, #1
 800786c:	3301      	adds	r3, #1
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007872:	3301      	adds	r3, #1
 8007874:	930c      	str	r3, [sp, #48]	; 0x30
 8007876:	e020      	b.n	80078ba <_dtoa_r+0x8b2>
 8007878:	2336      	movs	r3, #54	; 0x36
 800787a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800787c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800787e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	e795      	b.n	80077b0 <_dtoa_r+0x7a8>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	1e5d      	subs	r5, r3, #1
 8007888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800788a:	42ab      	cmp	r3, r5
 800788c:	db07      	blt.n	800789e <_dtoa_r+0x896>
 800788e:	1b5d      	subs	r5, r3, r5
 8007890:	9b07      	ldr	r3, [sp, #28]
 8007892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007894:	2b00      	cmp	r3, #0
 8007896:	da8b      	bge.n	80077b0 <_dtoa_r+0x7a8>
 8007898:	1ae4      	subs	r4, r4, r3
 800789a:	2300      	movs	r3, #0
 800789c:	e788      	b.n	80077b0 <_dtoa_r+0x7a8>
 800789e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078a2:	1aeb      	subs	r3, r5, r3
 80078a4:	18d3      	adds	r3, r2, r3
 80078a6:	950d      	str	r5, [sp, #52]	; 0x34
 80078a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80078aa:	2500      	movs	r5, #0
 80078ac:	e7f0      	b.n	8007890 <_dtoa_r+0x888>
 80078ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078b0:	e7b7      	b.n	8007822 <_dtoa_r+0x81a>
 80078b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b4:	2500      	movs	r5, #0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	ddca      	ble.n	8007850 <_dtoa_r+0x848>
 80078ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078bc:	2001      	movs	r0, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <_dtoa_r+0x8cc>
 80078c2:	6933      	ldr	r3, [r6, #16]
 80078c4:	3303      	adds	r3, #3
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	18f3      	adds	r3, r6, r3
 80078ca:	6858      	ldr	r0, [r3, #4]
 80078cc:	f000 fb5e 	bl	8007f8c <__hi0bits>
 80078d0:	2320      	movs	r3, #32
 80078d2:	1a18      	subs	r0, r3, r0
 80078d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d6:	1818      	adds	r0, r3, r0
 80078d8:	0002      	movs	r2, r0
 80078da:	231f      	movs	r3, #31
 80078dc:	401a      	ands	r2, r3
 80078de:	4218      	tst	r0, r3
 80078e0:	d047      	beq.n	8007972 <_dtoa_r+0x96a>
 80078e2:	3301      	adds	r3, #1
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	dd3f      	ble.n	800796a <_dtoa_r+0x962>
 80078ea:	231c      	movs	r3, #28
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f0:	18e4      	adds	r4, r4, r3
 80078f2:	18d2      	adds	r2, r2, r3
 80078f4:	920a      	str	r2, [sp, #40]	; 0x28
 80078f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	930c      	str	r3, [sp, #48]	; 0x30
 80078fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dd05      	ble.n	800790e <_dtoa_r+0x906>
 8007902:	001a      	movs	r2, r3
 8007904:	9905      	ldr	r1, [sp, #20]
 8007906:	9804      	ldr	r0, [sp, #16]
 8007908:	f000 fcac 	bl	8008264 <__lshift>
 800790c:	9005      	str	r0, [sp, #20]
 800790e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007910:	2b00      	cmp	r3, #0
 8007912:	dd05      	ble.n	8007920 <_dtoa_r+0x918>
 8007914:	0031      	movs	r1, r6
 8007916:	001a      	movs	r2, r3
 8007918:	9804      	ldr	r0, [sp, #16]
 800791a:	f000 fca3 	bl	8008264 <__lshift>
 800791e:	0006      	movs	r6, r0
 8007920:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007922:	2b00      	cmp	r3, #0
 8007924:	d027      	beq.n	8007976 <_dtoa_r+0x96e>
 8007926:	0031      	movs	r1, r6
 8007928:	9805      	ldr	r0, [sp, #20]
 800792a:	f000 fd09 	bl	8008340 <__mcmp>
 800792e:	2800      	cmp	r0, #0
 8007930:	da21      	bge.n	8007976 <_dtoa_r+0x96e>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	220a      	movs	r2, #10
 8007936:	3b01      	subs	r3, #1
 8007938:	9303      	str	r3, [sp, #12]
 800793a:	9905      	ldr	r1, [sp, #20]
 800793c:	2300      	movs	r3, #0
 800793e:	9804      	ldr	r0, [sp, #16]
 8007940:	f000 fae0 	bl	8007f04 <__multadd>
 8007944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007946:	9005      	str	r0, [sp, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d100      	bne.n	800794e <_dtoa_r+0x946>
 800794c:	e15d      	b.n	8007c0a <_dtoa_r+0xc02>
 800794e:	2300      	movs	r3, #0
 8007950:	0039      	movs	r1, r7
 8007952:	220a      	movs	r2, #10
 8007954:	9804      	ldr	r0, [sp, #16]
 8007956:	f000 fad5 	bl	8007f04 <__multadd>
 800795a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795c:	0007      	movs	r7, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc49      	bgt.n	80079f6 <_dtoa_r+0x9ee>
 8007962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007964:	2b02      	cmp	r3, #2
 8007966:	dc0e      	bgt.n	8007986 <_dtoa_r+0x97e>
 8007968:	e045      	b.n	80079f6 <_dtoa_r+0x9ee>
 800796a:	2b04      	cmp	r3, #4
 800796c:	d0c6      	beq.n	80078fc <_dtoa_r+0x8f4>
 800796e:	331c      	adds	r3, #28
 8007970:	e7bd      	b.n	80078ee <_dtoa_r+0x8e6>
 8007972:	0013      	movs	r3, r2
 8007974:	e7fb      	b.n	800796e <_dtoa_r+0x966>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc36      	bgt.n	80079ea <_dtoa_r+0x9e2>
 800797c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797e:	2b02      	cmp	r3, #2
 8007980:	dd33      	ble.n	80079ea <_dtoa_r+0x9e2>
 8007982:	9b07      	ldr	r3, [sp, #28]
 8007984:	930b      	str	r3, [sp, #44]	; 0x2c
 8007986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10c      	bne.n	80079a6 <_dtoa_r+0x99e>
 800798c:	0031      	movs	r1, r6
 800798e:	2205      	movs	r2, #5
 8007990:	9804      	ldr	r0, [sp, #16]
 8007992:	f000 fab7 	bl	8007f04 <__multadd>
 8007996:	0006      	movs	r6, r0
 8007998:	0001      	movs	r1, r0
 800799a:	9805      	ldr	r0, [sp, #20]
 800799c:	f000 fcd0 	bl	8008340 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dd00      	ble.n	80079a6 <_dtoa_r+0x99e>
 80079a4:	e59f      	b.n	80074e6 <_dtoa_r+0x4de>
 80079a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079a8:	43db      	mvns	r3, r3
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	9b06      	ldr	r3, [sp, #24]
 80079ae:	9308      	str	r3, [sp, #32]
 80079b0:	2500      	movs	r5, #0
 80079b2:	0031      	movs	r1, r6
 80079b4:	9804      	ldr	r0, [sp, #16]
 80079b6:	f000 fa81 	bl	8007ebc <_Bfree>
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d100      	bne.n	80079c0 <_dtoa_r+0x9b8>
 80079be:	e6a3      	b.n	8007708 <_dtoa_r+0x700>
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	d005      	beq.n	80079d0 <_dtoa_r+0x9c8>
 80079c4:	42bd      	cmp	r5, r7
 80079c6:	d003      	beq.n	80079d0 <_dtoa_r+0x9c8>
 80079c8:	0029      	movs	r1, r5
 80079ca:	9804      	ldr	r0, [sp, #16]
 80079cc:	f000 fa76 	bl	8007ebc <_Bfree>
 80079d0:	0039      	movs	r1, r7
 80079d2:	9804      	ldr	r0, [sp, #16]
 80079d4:	f000 fa72 	bl	8007ebc <_Bfree>
 80079d8:	e696      	b.n	8007708 <_dtoa_r+0x700>
 80079da:	2600      	movs	r6, #0
 80079dc:	0037      	movs	r7, r6
 80079de:	e7e2      	b.n	80079a6 <_dtoa_r+0x99e>
 80079e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	0037      	movs	r7, r6
 80079e8:	e57d      	b.n	80074e6 <_dtoa_r+0x4de>
 80079ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d100      	bne.n	80079f2 <_dtoa_r+0x9ea>
 80079f0:	e0c3      	b.n	8007b7a <_dtoa_r+0xb72>
 80079f2:	9b07      	ldr	r3, [sp, #28]
 80079f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80079f6:	2c00      	cmp	r4, #0
 80079f8:	dd05      	ble.n	8007a06 <_dtoa_r+0x9fe>
 80079fa:	0039      	movs	r1, r7
 80079fc:	0022      	movs	r2, r4
 80079fe:	9804      	ldr	r0, [sp, #16]
 8007a00:	f000 fc30 	bl	8008264 <__lshift>
 8007a04:	0007      	movs	r7, r0
 8007a06:	0038      	movs	r0, r7
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	d024      	beq.n	8007a56 <_dtoa_r+0xa4e>
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	9804      	ldr	r0, [sp, #16]
 8007a10:	f000 fa10 	bl	8007e34 <_Balloc>
 8007a14:	1e04      	subs	r4, r0, #0
 8007a16:	d111      	bne.n	8007a3c <_dtoa_r+0xa34>
 8007a18:	0022      	movs	r2, r4
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <_dtoa_r+0xa28>)
 8007a1c:	4805      	ldr	r0, [pc, #20]	; (8007a34 <_dtoa_r+0xa2c>)
 8007a1e:	4906      	ldr	r1, [pc, #24]	; (8007a38 <_dtoa_r+0xa30>)
 8007a20:	f7ff fb07 	bl	8007032 <_dtoa_r+0x2a>
 8007a24:	40240000 	.word	0x40240000
 8007a28:	00000433 	.word	0x00000433
 8007a2c:	7ff00000 	.word	0x7ff00000
 8007a30:	08008efc 	.word	0x08008efc
 8007a34:	08008ea4 	.word	0x08008ea4
 8007a38:	000002ef 	.word	0x000002ef
 8007a3c:	0039      	movs	r1, r7
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	310c      	adds	r1, #12
 8007a42:	3202      	adds	r2, #2
 8007a44:	0092      	lsls	r2, r2, #2
 8007a46:	300c      	adds	r0, #12
 8007a48:	f000 fe56 	bl	80086f8 <memcpy>
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	0021      	movs	r1, r4
 8007a50:	9804      	ldr	r0, [sp, #16]
 8007a52:	f000 fc07 	bl	8008264 <__lshift>
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a5a:	9307      	str	r3, [sp, #28]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	189b      	adds	r3, r3, r2
 8007a60:	2201      	movs	r2, #1
 8007a62:	003d      	movs	r5, r7
 8007a64:	0007      	movs	r7, r0
 8007a66:	930e      	str	r3, [sp, #56]	; 0x38
 8007a68:	9b08      	ldr	r3, [sp, #32]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a6e:	0031      	movs	r1, r6
 8007a70:	9805      	ldr	r0, [sp, #20]
 8007a72:	f7ff fa39 	bl	8006ee8 <quorem>
 8007a76:	0029      	movs	r1, r5
 8007a78:	0004      	movs	r4, r0
 8007a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a7c:	9805      	ldr	r0, [sp, #20]
 8007a7e:	f000 fc5f 	bl	8008340 <__mcmp>
 8007a82:	003a      	movs	r2, r7
 8007a84:	900c      	str	r0, [sp, #48]	; 0x30
 8007a86:	0031      	movs	r1, r6
 8007a88:	9804      	ldr	r0, [sp, #16]
 8007a8a:	f000 fc75 	bl	8008378 <__mdiff>
 8007a8e:	2201      	movs	r2, #1
 8007a90:	68c3      	ldr	r3, [r0, #12]
 8007a92:	3430      	adds	r4, #48	; 0x30
 8007a94:	9008      	str	r0, [sp, #32]
 8007a96:	920a      	str	r2, [sp, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <_dtoa_r+0xa9e>
 8007a9c:	0001      	movs	r1, r0
 8007a9e:	9805      	ldr	r0, [sp, #20]
 8007aa0:	f000 fc4e 	bl	8008340 <__mcmp>
 8007aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8007aa6:	9908      	ldr	r1, [sp, #32]
 8007aa8:	9804      	ldr	r0, [sp, #16]
 8007aaa:	f000 fa07 	bl	8007ebc <_Bfree>
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	9308      	str	r3, [sp, #32]
 8007ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d109      	bne.n	8007ad4 <_dtoa_r+0xacc>
 8007ac0:	2c39      	cmp	r4, #57	; 0x39
 8007ac2:	d022      	beq.n	8007b0a <_dtoa_r+0xb02>
 8007ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd01      	ble.n	8007ace <_dtoa_r+0xac6>
 8007aca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007acc:	3431      	adds	r4, #49	; 0x31
 8007ace:	9b07      	ldr	r3, [sp, #28]
 8007ad0:	701c      	strb	r4, [r3, #0]
 8007ad2:	e76e      	b.n	80079b2 <_dtoa_r+0x9aa>
 8007ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db04      	blt.n	8007ae4 <_dtoa_r+0xadc>
 8007ada:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007adc:	4313      	orrs	r3, r2
 8007ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d11e      	bne.n	8007b22 <_dtoa_r+0xb1a>
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	ddf1      	ble.n	8007ace <_dtoa_r+0xac6>
 8007aea:	9905      	ldr	r1, [sp, #20]
 8007aec:	2201      	movs	r2, #1
 8007aee:	9804      	ldr	r0, [sp, #16]
 8007af0:	f000 fbb8 	bl	8008264 <__lshift>
 8007af4:	0031      	movs	r1, r6
 8007af6:	9005      	str	r0, [sp, #20]
 8007af8:	f000 fc22 	bl	8008340 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	dc02      	bgt.n	8007b06 <_dtoa_r+0xafe>
 8007b00:	d1e5      	bne.n	8007ace <_dtoa_r+0xac6>
 8007b02:	07e3      	lsls	r3, r4, #31
 8007b04:	d5e3      	bpl.n	8007ace <_dtoa_r+0xac6>
 8007b06:	2c39      	cmp	r4, #57	; 0x39
 8007b08:	d1df      	bne.n	8007aca <_dtoa_r+0xac2>
 8007b0a:	2339      	movs	r3, #57	; 0x39
 8007b0c:	9a07      	ldr	r2, [sp, #28]
 8007b0e:	7013      	strb	r3, [r2, #0]
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	9308      	str	r3, [sp, #32]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	2a39      	cmp	r2, #57	; 0x39
 8007b1a:	d063      	beq.n	8007be4 <_dtoa_r+0xbdc>
 8007b1c:	3201      	adds	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e747      	b.n	80079b2 <_dtoa_r+0x9aa>
 8007b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd03      	ble.n	8007b30 <_dtoa_r+0xb28>
 8007b28:	2c39      	cmp	r4, #57	; 0x39
 8007b2a:	d0ee      	beq.n	8007b0a <_dtoa_r+0xb02>
 8007b2c:	3401      	adds	r4, #1
 8007b2e:	e7ce      	b.n	8007ace <_dtoa_r+0xac6>
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	9a07      	ldr	r2, [sp, #28]
 8007b34:	701c      	strb	r4, [r3, #0]
 8007b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d03e      	beq.n	8007bba <_dtoa_r+0xbb2>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	220a      	movs	r2, #10
 8007b40:	9905      	ldr	r1, [sp, #20]
 8007b42:	9804      	ldr	r0, [sp, #16]
 8007b44:	f000 f9de 	bl	8007f04 <__multadd>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9005      	str	r0, [sp, #20]
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	0029      	movs	r1, r5
 8007b50:	9804      	ldr	r0, [sp, #16]
 8007b52:	42bd      	cmp	r5, r7
 8007b54:	d106      	bne.n	8007b64 <_dtoa_r+0xb5c>
 8007b56:	f000 f9d5 	bl	8007f04 <__multadd>
 8007b5a:	0005      	movs	r5, r0
 8007b5c:	0007      	movs	r7, r0
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	e784      	b.n	8007a6e <_dtoa_r+0xa66>
 8007b64:	f000 f9ce 	bl	8007f04 <__multadd>
 8007b68:	0039      	movs	r1, r7
 8007b6a:	0005      	movs	r5, r0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	220a      	movs	r2, #10
 8007b70:	9804      	ldr	r0, [sp, #16]
 8007b72:	f000 f9c7 	bl	8007f04 <__multadd>
 8007b76:	0007      	movs	r7, r0
 8007b78:	e7f1      	b.n	8007b5e <_dtoa_r+0xb56>
 8007b7a:	9b07      	ldr	r3, [sp, #28]
 8007b7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b7e:	2500      	movs	r5, #0
 8007b80:	0031      	movs	r1, r6
 8007b82:	9805      	ldr	r0, [sp, #20]
 8007b84:	f7ff f9b0 	bl	8006ee8 <quorem>
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	3030      	adds	r0, #48	; 0x30
 8007b8c:	5558      	strb	r0, [r3, r5]
 8007b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b90:	3501      	adds	r5, #1
 8007b92:	0004      	movs	r4, r0
 8007b94:	42ab      	cmp	r3, r5
 8007b96:	dd07      	ble.n	8007ba8 <_dtoa_r+0xba0>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	9905      	ldr	r1, [sp, #20]
 8007b9e:	9804      	ldr	r0, [sp, #16]
 8007ba0:	f000 f9b0 	bl	8007f04 <__multadd>
 8007ba4:	9005      	str	r0, [sp, #20]
 8007ba6:	e7eb      	b.n	8007b80 <_dtoa_r+0xb78>
 8007ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007baa:	2301      	movs	r3, #1
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	dd00      	ble.n	8007bb2 <_dtoa_r+0xbaa>
 8007bb0:	0013      	movs	r3, r2
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	18d3      	adds	r3, r2, r3
 8007bb8:	9308      	str	r3, [sp, #32]
 8007bba:	9905      	ldr	r1, [sp, #20]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	9804      	ldr	r0, [sp, #16]
 8007bc0:	f000 fb50 	bl	8008264 <__lshift>
 8007bc4:	0031      	movs	r1, r6
 8007bc6:	9005      	str	r0, [sp, #20]
 8007bc8:	f000 fbba 	bl	8008340 <__mcmp>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	dc9f      	bgt.n	8007b10 <_dtoa_r+0xb08>
 8007bd0:	d101      	bne.n	8007bd6 <_dtoa_r+0xbce>
 8007bd2:	07e4      	lsls	r4, r4, #31
 8007bd4:	d49c      	bmi.n	8007b10 <_dtoa_r+0xb08>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	2a30      	cmp	r2, #48	; 0x30
 8007be0:	d0fa      	beq.n	8007bd8 <_dtoa_r+0xbd0>
 8007be2:	e6e6      	b.n	80079b2 <_dtoa_r+0x9aa>
 8007be4:	9a06      	ldr	r2, [sp, #24]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d193      	bne.n	8007b12 <_dtoa_r+0xb0a>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	2331      	movs	r3, #49	; 0x31
 8007bf2:	7013      	strb	r3, [r2, #0]
 8007bf4:	e6dd      	b.n	80079b2 <_dtoa_r+0x9aa>
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <_dtoa_r+0xc14>)
 8007bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <_dtoa_r+0xc18>)
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d001      	beq.n	8007c06 <_dtoa_r+0xbfe>
 8007c02:	f7ff fa49 	bl	8007098 <_dtoa_r+0x90>
 8007c06:	f7ff fa49 	bl	800709c <_dtoa_r+0x94>
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dcb6      	bgt.n	8007b7e <_dtoa_r+0xb76>
 8007c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	dd00      	ble.n	8007c18 <_dtoa_r+0xc10>
 8007c16:	e6b6      	b.n	8007986 <_dtoa_r+0x97e>
 8007c18:	e7b1      	b.n	8007b7e <_dtoa_r+0xb76>
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	08008e80 	.word	0x08008e80
 8007c20:	08008e88 	.word	0x08008e88

08007c24 <_free_r>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	0005      	movs	r5, r0
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d010      	beq.n	8007c4e <_free_r+0x2a>
 8007c2c:	1f0c      	subs	r4, r1, #4
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da00      	bge.n	8007c36 <_free_r+0x12>
 8007c34:	18e4      	adds	r4, r4, r3
 8007c36:	0028      	movs	r0, r5
 8007c38:	f000 f8ec 	bl	8007e14 <__malloc_lock>
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <_free_r+0x90>)
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <_free_r+0x2c>
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6014      	str	r4, [r2, #0]
 8007c48:	0028      	movs	r0, r5
 8007c4a:	f000 f8eb 	bl	8007e24 <__malloc_unlock>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d908      	bls.n	8007c66 <_free_r+0x42>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	d1f3      	bne.n	8007c44 <_free_r+0x20>
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	1809      	adds	r1, r1, r0
 8007c62:	6021      	str	r1, [r4, #0]
 8007c64:	e7ee      	b.n	8007c44 <_free_r+0x20>
 8007c66:	001a      	movs	r2, r3
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <_free_r+0x4e>
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	d9f9      	bls.n	8007c66 <_free_r+0x42>
 8007c72:	6811      	ldr	r1, [r2, #0]
 8007c74:	1850      	adds	r0, r2, r1
 8007c76:	42a0      	cmp	r0, r4
 8007c78:	d10b      	bne.n	8007c92 <_free_r+0x6e>
 8007c7a:	6820      	ldr	r0, [r4, #0]
 8007c7c:	1809      	adds	r1, r1, r0
 8007c7e:	1850      	adds	r0, r2, r1
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	4283      	cmp	r3, r0
 8007c84:	d1e0      	bne.n	8007c48 <_free_r+0x24>
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	1841      	adds	r1, r0, r1
 8007c8c:	6011      	str	r1, [r2, #0]
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e7da      	b.n	8007c48 <_free_r+0x24>
 8007c92:	42a0      	cmp	r0, r4
 8007c94:	d902      	bls.n	8007c9c <_free_r+0x78>
 8007c96:	230c      	movs	r3, #12
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	e7d5      	b.n	8007c48 <_free_r+0x24>
 8007c9c:	6820      	ldr	r0, [r4, #0]
 8007c9e:	1821      	adds	r1, r4, r0
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	d103      	bne.n	8007cac <_free_r+0x88>
 8007ca4:	6819      	ldr	r1, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	1809      	adds	r1, r1, r0
 8007caa:	6021      	str	r1, [r4, #0]
 8007cac:	6063      	str	r3, [r4, #4]
 8007cae:	6054      	str	r4, [r2, #4]
 8007cb0:	e7ca      	b.n	8007c48 <_free_r+0x24>
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	20000560 	.word	0x20000560

08007cb8 <malloc>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <malloc+0x10>)
 8007cbc:	0001      	movs	r1, r0
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	f000 f826 	bl	8007d10 <_malloc_r>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	20000064 	.word	0x20000064

08007ccc <sbrk_aligned>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	4e0f      	ldr	r6, [pc, #60]	; (8007d0c <sbrk_aligned+0x40>)
 8007cd0:	000d      	movs	r5, r1
 8007cd2:	6831      	ldr	r1, [r6, #0]
 8007cd4:	0004      	movs	r4, r0
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d102      	bne.n	8007ce0 <sbrk_aligned+0x14>
 8007cda:	f000 fcfb 	bl	80086d4 <_sbrk_r>
 8007cde:	6030      	str	r0, [r6, #0]
 8007ce0:	0029      	movs	r1, r5
 8007ce2:	0020      	movs	r0, r4
 8007ce4:	f000 fcf6 	bl	80086d4 <_sbrk_r>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d00a      	beq.n	8007d02 <sbrk_aligned+0x36>
 8007cec:	2303      	movs	r3, #3
 8007cee:	1cc5      	adds	r5, r0, #3
 8007cf0:	439d      	bics	r5, r3
 8007cf2:	42a8      	cmp	r0, r5
 8007cf4:	d007      	beq.n	8007d06 <sbrk_aligned+0x3a>
 8007cf6:	1a29      	subs	r1, r5, r0
 8007cf8:	0020      	movs	r0, r4
 8007cfa:	f000 fceb 	bl	80086d4 <_sbrk_r>
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d101      	bne.n	8007d06 <sbrk_aligned+0x3a>
 8007d02:	2501      	movs	r5, #1
 8007d04:	426d      	negs	r5, r5
 8007d06:	0028      	movs	r0, r5
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	20000564 	.word	0x20000564

08007d10 <_malloc_r>:
 8007d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d12:	2203      	movs	r2, #3
 8007d14:	1ccb      	adds	r3, r1, #3
 8007d16:	4393      	bics	r3, r2
 8007d18:	3308      	adds	r3, #8
 8007d1a:	0006      	movs	r6, r0
 8007d1c:	001f      	movs	r7, r3
 8007d1e:	2b0c      	cmp	r3, #12
 8007d20:	d238      	bcs.n	8007d94 <_malloc_r+0x84>
 8007d22:	270c      	movs	r7, #12
 8007d24:	42b9      	cmp	r1, r7
 8007d26:	d837      	bhi.n	8007d98 <_malloc_r+0x88>
 8007d28:	0030      	movs	r0, r6
 8007d2a:	f000 f873 	bl	8007e14 <__malloc_lock>
 8007d2e:	4b38      	ldr	r3, [pc, #224]	; (8007e10 <_malloc_r+0x100>)
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	001c      	movs	r4, r3
 8007d36:	2c00      	cmp	r4, #0
 8007d38:	d133      	bne.n	8007da2 <_malloc_r+0x92>
 8007d3a:	0039      	movs	r1, r7
 8007d3c:	0030      	movs	r0, r6
 8007d3e:	f7ff ffc5 	bl	8007ccc <sbrk_aligned>
 8007d42:	0004      	movs	r4, r0
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d15e      	bne.n	8007e06 <_malloc_r+0xf6>
 8007d48:	9b00      	ldr	r3, [sp, #0]
 8007d4a:	681c      	ldr	r4, [r3, #0]
 8007d4c:	0025      	movs	r5, r4
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	d14e      	bne.n	8007df0 <_malloc_r+0xe0>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d051      	beq.n	8007dfa <_malloc_r+0xea>
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	0029      	movs	r1, r5
 8007d5a:	18e3      	adds	r3, r4, r3
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	f000 fcb8 	bl	80086d4 <_sbrk_r>
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	4283      	cmp	r3, r0
 8007d68:	d147      	bne.n	8007dfa <_malloc_r+0xea>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	0030      	movs	r0, r6
 8007d6e:	1aff      	subs	r7, r7, r3
 8007d70:	0039      	movs	r1, r7
 8007d72:	f7ff ffab 	bl	8007ccc <sbrk_aligned>
 8007d76:	3001      	adds	r0, #1
 8007d78:	d03f      	beq.n	8007dfa <_malloc_r+0xea>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	19db      	adds	r3, r3, r7
 8007d7e:	6023      	str	r3, [r4, #0]
 8007d80:	9b00      	ldr	r3, [sp, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d040      	beq.n	8007e0a <_malloc_r+0xfa>
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	42a2      	cmp	r2, r4
 8007d8c:	d133      	bne.n	8007df6 <_malloc_r+0xe6>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	e014      	b.n	8007dbe <_malloc_r+0xae>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dac5      	bge.n	8007d24 <_malloc_r+0x14>
 8007d98:	230c      	movs	r3, #12
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	0028      	movs	r0, r5
 8007da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007da2:	6821      	ldr	r1, [r4, #0]
 8007da4:	1bc9      	subs	r1, r1, r7
 8007da6:	d420      	bmi.n	8007dea <_malloc_r+0xda>
 8007da8:	290b      	cmp	r1, #11
 8007daa:	d918      	bls.n	8007dde <_malloc_r+0xce>
 8007dac:	19e2      	adds	r2, r4, r7
 8007dae:	6027      	str	r7, [r4, #0]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d112      	bne.n	8007dda <_malloc_r+0xca>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	6863      	ldr	r3, [r4, #4]
 8007dba:	6011      	str	r1, [r2, #0]
 8007dbc:	6053      	str	r3, [r2, #4]
 8007dbe:	0030      	movs	r0, r6
 8007dc0:	0025      	movs	r5, r4
 8007dc2:	f000 f82f 	bl	8007e24 <__malloc_unlock>
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	350b      	adds	r5, #11
 8007dca:	1d23      	adds	r3, r4, #4
 8007dcc:	4395      	bics	r5, r2
 8007dce:	1aea      	subs	r2, r5, r3
 8007dd0:	429d      	cmp	r5, r3
 8007dd2:	d0e4      	beq.n	8007d9e <_malloc_r+0x8e>
 8007dd4:	1b5b      	subs	r3, r3, r5
 8007dd6:	50a3      	str	r3, [r4, r2]
 8007dd8:	e7e1      	b.n	8007d9e <_malloc_r+0x8e>
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	e7ec      	b.n	8007db8 <_malloc_r+0xa8>
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d1d5      	bne.n	8007d90 <_malloc_r+0x80>
 8007de4:	9b00      	ldr	r3, [sp, #0]
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e7e9      	b.n	8007dbe <_malloc_r+0xae>
 8007dea:	0023      	movs	r3, r4
 8007dec:	6864      	ldr	r4, [r4, #4]
 8007dee:	e7a2      	b.n	8007d36 <_malloc_r+0x26>
 8007df0:	002c      	movs	r4, r5
 8007df2:	686d      	ldr	r5, [r5, #4]
 8007df4:	e7ab      	b.n	8007d4e <_malloc_r+0x3e>
 8007df6:	0013      	movs	r3, r2
 8007df8:	e7c4      	b.n	8007d84 <_malloc_r+0x74>
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	0030      	movs	r0, r6
 8007dfe:	6033      	str	r3, [r6, #0]
 8007e00:	f000 f810 	bl	8007e24 <__malloc_unlock>
 8007e04:	e7cb      	b.n	8007d9e <_malloc_r+0x8e>
 8007e06:	6027      	str	r7, [r4, #0]
 8007e08:	e7d9      	b.n	8007dbe <_malloc_r+0xae>
 8007e0a:	605b      	str	r3, [r3, #4]
 8007e0c:	deff      	udf	#255	; 0xff
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	20000560 	.word	0x20000560

08007e14 <__malloc_lock>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4802      	ldr	r0, [pc, #8]	; (8007e20 <__malloc_lock+0xc>)
 8007e18:	f7ff f859 	bl	8006ece <__retarget_lock_acquire_recursive>
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	2000055c 	.word	0x2000055c

08007e24 <__malloc_unlock>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4802      	ldr	r0, [pc, #8]	; (8007e30 <__malloc_unlock+0xc>)
 8007e28:	f7ff f852 	bl	8006ed0 <__retarget_lock_release_recursive>
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	2000055c 	.word	0x2000055c

08007e34 <_Balloc>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	69c5      	ldr	r5, [r0, #28]
 8007e38:	0006      	movs	r6, r0
 8007e3a:	000c      	movs	r4, r1
 8007e3c:	2d00      	cmp	r5, #0
 8007e3e:	d10e      	bne.n	8007e5e <_Balloc+0x2a>
 8007e40:	2010      	movs	r0, #16
 8007e42:	f7ff ff39 	bl	8007cb8 <malloc>
 8007e46:	1e02      	subs	r2, r0, #0
 8007e48:	61f0      	str	r0, [r6, #28]
 8007e4a:	d104      	bne.n	8007e56 <_Balloc+0x22>
 8007e4c:	216b      	movs	r1, #107	; 0x6b
 8007e4e:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <_Balloc+0x80>)
 8007e50:	4819      	ldr	r0, [pc, #100]	; (8007eb8 <_Balloc+0x84>)
 8007e52:	f000 fc5b 	bl	800870c <__assert_func>
 8007e56:	6045      	str	r5, [r0, #4]
 8007e58:	6085      	str	r5, [r0, #8]
 8007e5a:	6005      	str	r5, [r0, #0]
 8007e5c:	60c5      	str	r5, [r0, #12]
 8007e5e:	69f5      	ldr	r5, [r6, #28]
 8007e60:	68eb      	ldr	r3, [r5, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d013      	beq.n	8007e8e <_Balloc+0x5a>
 8007e66:	69f3      	ldr	r3, [r6, #28]
 8007e68:	00a2      	lsls	r2, r4, #2
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	189b      	adds	r3, r3, r2
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d118      	bne.n	8007ea6 <_Balloc+0x72>
 8007e74:	2101      	movs	r1, #1
 8007e76:	000d      	movs	r5, r1
 8007e78:	40a5      	lsls	r5, r4
 8007e7a:	1d6a      	adds	r2, r5, #5
 8007e7c:	0030      	movs	r0, r6
 8007e7e:	0092      	lsls	r2, r2, #2
 8007e80:	f000 fc62 	bl	8008748 <_calloc_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d00c      	beq.n	8007ea2 <_Balloc+0x6e>
 8007e88:	6044      	str	r4, [r0, #4]
 8007e8a:	6085      	str	r5, [r0, #8]
 8007e8c:	e00d      	b.n	8007eaa <_Balloc+0x76>
 8007e8e:	2221      	movs	r2, #33	; 0x21
 8007e90:	2104      	movs	r1, #4
 8007e92:	0030      	movs	r0, r6
 8007e94:	f000 fc58 	bl	8008748 <_calloc_r>
 8007e98:	69f3      	ldr	r3, [r6, #28]
 8007e9a:	60e8      	str	r0, [r5, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e1      	bne.n	8007e66 <_Balloc+0x32>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	6802      	ldr	r2, [r0, #0]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6103      	str	r3, [r0, #16]
 8007eae:	60c3      	str	r3, [r0, #12]
 8007eb0:	e7f8      	b.n	8007ea4 <_Balloc+0x70>
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	08008e8d 	.word	0x08008e8d
 8007eb8:	08008f0d 	.word	0x08008f0d

08007ebc <_Bfree>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	69c6      	ldr	r6, [r0, #28]
 8007ec0:	0005      	movs	r5, r0
 8007ec2:	000c      	movs	r4, r1
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	d10e      	bne.n	8007ee6 <_Bfree+0x2a>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f7ff fef5 	bl	8007cb8 <malloc>
 8007ece:	1e02      	subs	r2, r0, #0
 8007ed0:	61e8      	str	r0, [r5, #28]
 8007ed2:	d104      	bne.n	8007ede <_Bfree+0x22>
 8007ed4:	218f      	movs	r1, #143	; 0x8f
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <_Bfree+0x40>)
 8007ed8:	4809      	ldr	r0, [pc, #36]	; (8007f00 <_Bfree+0x44>)
 8007eda:	f000 fc17 	bl	800870c <__assert_func>
 8007ede:	6046      	str	r6, [r0, #4]
 8007ee0:	6086      	str	r6, [r0, #8]
 8007ee2:	6006      	str	r6, [r0, #0]
 8007ee4:	60c6      	str	r6, [r0, #12]
 8007ee6:	2c00      	cmp	r4, #0
 8007ee8:	d007      	beq.n	8007efa <_Bfree+0x3e>
 8007eea:	69eb      	ldr	r3, [r5, #28]
 8007eec:	6862      	ldr	r2, [r4, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	6022      	str	r2, [r4, #0]
 8007ef8:	601c      	str	r4, [r3, #0]
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	08008e8d 	.word	0x08008e8d
 8007f00:	08008f0d 	.word	0x08008f0d

08007f04 <__multadd>:
 8007f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f06:	000e      	movs	r6, r1
 8007f08:	9001      	str	r0, [sp, #4]
 8007f0a:	000c      	movs	r4, r1
 8007f0c:	001d      	movs	r5, r3
 8007f0e:	2000      	movs	r0, #0
 8007f10:	690f      	ldr	r7, [r1, #16]
 8007f12:	3614      	adds	r6, #20
 8007f14:	6833      	ldr	r3, [r6, #0]
 8007f16:	3001      	adds	r0, #1
 8007f18:	b299      	uxth	r1, r3
 8007f1a:	4351      	muls	r1, r2
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	4353      	muls	r3, r2
 8007f20:	1949      	adds	r1, r1, r5
 8007f22:	0c0d      	lsrs	r5, r1, #16
 8007f24:	195b      	adds	r3, r3, r5
 8007f26:	0c1d      	lsrs	r5, r3, #16
 8007f28:	b289      	uxth	r1, r1
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	185b      	adds	r3, r3, r1
 8007f2e:	c608      	stmia	r6!, {r3}
 8007f30:	4287      	cmp	r7, r0
 8007f32:	dcef      	bgt.n	8007f14 <__multadd+0x10>
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d022      	beq.n	8007f7e <__multadd+0x7a>
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	42bb      	cmp	r3, r7
 8007f3c:	dc19      	bgt.n	8007f72 <__multadd+0x6e>
 8007f3e:	6861      	ldr	r1, [r4, #4]
 8007f40:	9801      	ldr	r0, [sp, #4]
 8007f42:	3101      	adds	r1, #1
 8007f44:	f7ff ff76 	bl	8007e34 <_Balloc>
 8007f48:	1e06      	subs	r6, r0, #0
 8007f4a:	d105      	bne.n	8007f58 <__multadd+0x54>
 8007f4c:	0032      	movs	r2, r6
 8007f4e:	21ba      	movs	r1, #186	; 0xba
 8007f50:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <__multadd+0x80>)
 8007f52:	480d      	ldr	r0, [pc, #52]	; (8007f88 <__multadd+0x84>)
 8007f54:	f000 fbda 	bl	800870c <__assert_func>
 8007f58:	0021      	movs	r1, r4
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	310c      	adds	r1, #12
 8007f5e:	3202      	adds	r2, #2
 8007f60:	0092      	lsls	r2, r2, #2
 8007f62:	300c      	adds	r0, #12
 8007f64:	f000 fbc8 	bl	80086f8 <memcpy>
 8007f68:	0021      	movs	r1, r4
 8007f6a:	9801      	ldr	r0, [sp, #4]
 8007f6c:	f7ff ffa6 	bl	8007ebc <_Bfree>
 8007f70:	0034      	movs	r4, r6
 8007f72:	1d3b      	adds	r3, r7, #4
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	18e3      	adds	r3, r4, r3
 8007f78:	605d      	str	r5, [r3, #4]
 8007f7a:	1c7b      	adds	r3, r7, #1
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	0020      	movs	r0, r4
 8007f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	08008efc 	.word	0x08008efc
 8007f88:	08008f0d 	.word	0x08008f0d

08007f8c <__hi0bits>:
 8007f8c:	0003      	movs	r3, r0
 8007f8e:	0c02      	lsrs	r2, r0, #16
 8007f90:	2000      	movs	r0, #0
 8007f92:	4282      	cmp	r2, r0
 8007f94:	d101      	bne.n	8007f9a <__hi0bits+0xe>
 8007f96:	041b      	lsls	r3, r3, #16
 8007f98:	3010      	adds	r0, #16
 8007f9a:	0e1a      	lsrs	r2, r3, #24
 8007f9c:	d101      	bne.n	8007fa2 <__hi0bits+0x16>
 8007f9e:	3008      	adds	r0, #8
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	0f1a      	lsrs	r2, r3, #28
 8007fa4:	d101      	bne.n	8007faa <__hi0bits+0x1e>
 8007fa6:	3004      	adds	r0, #4
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	0f9a      	lsrs	r2, r3, #30
 8007fac:	d101      	bne.n	8007fb2 <__hi0bits+0x26>
 8007fae:	3002      	adds	r0, #2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	db03      	blt.n	8007fbe <__hi0bits+0x32>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	d400      	bmi.n	8007fbe <__hi0bits+0x32>
 8007fbc:	2020      	movs	r0, #32
 8007fbe:	4770      	bx	lr

08007fc0 <__lo0bits>:
 8007fc0:	6803      	ldr	r3, [r0, #0]
 8007fc2:	0001      	movs	r1, r0
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	4010      	ands	r0, r2
 8007fca:	4213      	tst	r3, r2
 8007fcc:	d00d      	beq.n	8007fea <__lo0bits+0x2a>
 8007fce:	3a06      	subs	r2, #6
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4213      	tst	r3, r2
 8007fd4:	d105      	bne.n	8007fe2 <__lo0bits+0x22>
 8007fd6:	3002      	adds	r0, #2
 8007fd8:	4203      	tst	r3, r0
 8007fda:	d003      	beq.n	8007fe4 <__lo0bits+0x24>
 8007fdc:	40d3      	lsrs	r3, r2
 8007fde:	0010      	movs	r0, r2
 8007fe0:	600b      	str	r3, [r1, #0]
 8007fe2:	4770      	bx	lr
 8007fe4:	089b      	lsrs	r3, r3, #2
 8007fe6:	600b      	str	r3, [r1, #0]
 8007fe8:	e7fb      	b.n	8007fe2 <__lo0bits+0x22>
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d101      	bne.n	8007ff4 <__lo0bits+0x34>
 8007ff0:	2010      	movs	r0, #16
 8007ff2:	0c1b      	lsrs	r3, r3, #16
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d101      	bne.n	8007ffe <__lo0bits+0x3e>
 8007ffa:	3008      	adds	r0, #8
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	071a      	lsls	r2, r3, #28
 8008000:	d101      	bne.n	8008006 <__lo0bits+0x46>
 8008002:	3004      	adds	r0, #4
 8008004:	091b      	lsrs	r3, r3, #4
 8008006:	079a      	lsls	r2, r3, #30
 8008008:	d101      	bne.n	800800e <__lo0bits+0x4e>
 800800a:	3002      	adds	r0, #2
 800800c:	089b      	lsrs	r3, r3, #2
 800800e:	07da      	lsls	r2, r3, #31
 8008010:	d4e9      	bmi.n	8007fe6 <__lo0bits+0x26>
 8008012:	3001      	adds	r0, #1
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	d1e6      	bne.n	8007fe6 <__lo0bits+0x26>
 8008018:	2020      	movs	r0, #32
 800801a:	e7e2      	b.n	8007fe2 <__lo0bits+0x22>

0800801c <__i2b>:
 800801c:	b510      	push	{r4, lr}
 800801e:	000c      	movs	r4, r1
 8008020:	2101      	movs	r1, #1
 8008022:	f7ff ff07 	bl	8007e34 <_Balloc>
 8008026:	2800      	cmp	r0, #0
 8008028:	d107      	bne.n	800803a <__i2b+0x1e>
 800802a:	2146      	movs	r1, #70	; 0x46
 800802c:	4c05      	ldr	r4, [pc, #20]	; (8008044 <__i2b+0x28>)
 800802e:	0002      	movs	r2, r0
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <__i2b+0x2c>)
 8008032:	0020      	movs	r0, r4
 8008034:	31ff      	adds	r1, #255	; 0xff
 8008036:	f000 fb69 	bl	800870c <__assert_func>
 800803a:	2301      	movs	r3, #1
 800803c:	6144      	str	r4, [r0, #20]
 800803e:	6103      	str	r3, [r0, #16]
 8008040:	bd10      	pop	{r4, pc}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	08008f0d 	.word	0x08008f0d
 8008048:	08008efc 	.word	0x08008efc

0800804c <__multiply>:
 800804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804e:	0015      	movs	r5, r2
 8008050:	690a      	ldr	r2, [r1, #16]
 8008052:	692b      	ldr	r3, [r5, #16]
 8008054:	000c      	movs	r4, r1
 8008056:	b08b      	sub	sp, #44	; 0x2c
 8008058:	429a      	cmp	r2, r3
 800805a:	da01      	bge.n	8008060 <__multiply+0x14>
 800805c:	002c      	movs	r4, r5
 800805e:	000d      	movs	r5, r1
 8008060:	6927      	ldr	r7, [r4, #16]
 8008062:	692e      	ldr	r6, [r5, #16]
 8008064:	6861      	ldr	r1, [r4, #4]
 8008066:	19bb      	adds	r3, r7, r6
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	19ba      	adds	r2, r7, r6
 800806e:	4293      	cmp	r3, r2
 8008070:	da00      	bge.n	8008074 <__multiply+0x28>
 8008072:	3101      	adds	r1, #1
 8008074:	f7ff fede 	bl	8007e34 <_Balloc>
 8008078:	9002      	str	r0, [sp, #8]
 800807a:	2800      	cmp	r0, #0
 800807c:	d106      	bne.n	800808c <__multiply+0x40>
 800807e:	21b1      	movs	r1, #177	; 0xb1
 8008080:	4b48      	ldr	r3, [pc, #288]	; (80081a4 <__multiply+0x158>)
 8008082:	4849      	ldr	r0, [pc, #292]	; (80081a8 <__multiply+0x15c>)
 8008084:	9a02      	ldr	r2, [sp, #8]
 8008086:	0049      	lsls	r1, r1, #1
 8008088:	f000 fb40 	bl	800870c <__assert_func>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	3314      	adds	r3, #20
 8008092:	469c      	mov	ip, r3
 8008094:	19bb      	adds	r3, r7, r6
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4463      	add	r3, ip
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	4663      	mov	r3, ip
 800809e:	9904      	ldr	r1, [sp, #16]
 80080a0:	428b      	cmp	r3, r1
 80080a2:	d32a      	bcc.n	80080fa <__multiply+0xae>
 80080a4:	0023      	movs	r3, r4
 80080a6:	00bf      	lsls	r7, r7, #2
 80080a8:	3314      	adds	r3, #20
 80080aa:	3514      	adds	r5, #20
 80080ac:	9308      	str	r3, [sp, #32]
 80080ae:	00b6      	lsls	r6, r6, #2
 80080b0:	19db      	adds	r3, r3, r7
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	19ab      	adds	r3, r5, r6
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	2304      	movs	r3, #4
 80080ba:	9306      	str	r3, [sp, #24]
 80080bc:	0023      	movs	r3, r4
 80080be:	9a05      	ldr	r2, [sp, #20]
 80080c0:	3315      	adds	r3, #21
 80080c2:	9501      	str	r5, [sp, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d305      	bcc.n	80080d4 <__multiply+0x88>
 80080c8:	1b13      	subs	r3, r2, r4
 80080ca:	3b15      	subs	r3, #21
 80080cc:	089b      	lsrs	r3, r3, #2
 80080ce:	3301      	adds	r3, #1
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	9b01      	ldr	r3, [sp, #4]
 80080d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d8:	4293      	cmp	r3, r2
 80080da:	d310      	bcc.n	80080fe <__multiply+0xb2>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dd05      	ble.n	80080ee <__multiply+0xa2>
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d056      	beq.n	800819c <__multiply+0x150>
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	9a03      	ldr	r2, [sp, #12]
 80080f2:	0018      	movs	r0, r3
 80080f4:	611a      	str	r2, [r3, #16]
 80080f6:	b00b      	add	sp, #44	; 0x2c
 80080f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fa:	c304      	stmia	r3!, {r2}
 80080fc:	e7cf      	b.n	800809e <__multiply+0x52>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	b280      	uxth	r0, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	d01e      	beq.n	8008146 <__multiply+0xfa>
 8008108:	4667      	mov	r7, ip
 800810a:	2500      	movs	r5, #0
 800810c:	9e08      	ldr	r6, [sp, #32]
 800810e:	ce02      	ldmia	r6!, {r1}
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	b28b      	uxth	r3, r1
 8008116:	4343      	muls	r3, r0
 8008118:	001a      	movs	r2, r3
 800811a:	466b      	mov	r3, sp
 800811c:	8b9b      	ldrh	r3, [r3, #28]
 800811e:	18d3      	adds	r3, r2, r3
 8008120:	195b      	adds	r3, r3, r5
 8008122:	0c0d      	lsrs	r5, r1, #16
 8008124:	4345      	muls	r5, r0
 8008126:	9a07      	ldr	r2, [sp, #28]
 8008128:	0c11      	lsrs	r1, r2, #16
 800812a:	1869      	adds	r1, r5, r1
 800812c:	0c1a      	lsrs	r2, r3, #16
 800812e:	188a      	adds	r2, r1, r2
 8008130:	b29b      	uxth	r3, r3
 8008132:	0c15      	lsrs	r5, r2, #16
 8008134:	0412      	lsls	r2, r2, #16
 8008136:	431a      	orrs	r2, r3
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	c704      	stmia	r7!, {r2}
 800813c:	42b3      	cmp	r3, r6
 800813e:	d8e6      	bhi.n	800810e <__multiply+0xc2>
 8008140:	4663      	mov	r3, ip
 8008142:	9a06      	ldr	r2, [sp, #24]
 8008144:	509d      	str	r5, [r3, r2]
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	0c00      	lsrs	r0, r0, #16
 800814c:	d020      	beq.n	8008190 <__multiply+0x144>
 800814e:	4663      	mov	r3, ip
 8008150:	0025      	movs	r5, r4
 8008152:	4661      	mov	r1, ip
 8008154:	2700      	movs	r7, #0
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3514      	adds	r5, #20
 800815a:	682a      	ldr	r2, [r5, #0]
 800815c:	680e      	ldr	r6, [r1, #0]
 800815e:	b292      	uxth	r2, r2
 8008160:	4342      	muls	r2, r0
 8008162:	0c36      	lsrs	r6, r6, #16
 8008164:	1992      	adds	r2, r2, r6
 8008166:	19d2      	adds	r2, r2, r7
 8008168:	0416      	lsls	r6, r2, #16
 800816a:	b29b      	uxth	r3, r3
 800816c:	431e      	orrs	r6, r3
 800816e:	600e      	str	r6, [r1, #0]
 8008170:	cd40      	ldmia	r5!, {r6}
 8008172:	684b      	ldr	r3, [r1, #4]
 8008174:	0c36      	lsrs	r6, r6, #16
 8008176:	4346      	muls	r6, r0
 8008178:	b29b      	uxth	r3, r3
 800817a:	0c12      	lsrs	r2, r2, #16
 800817c:	18f3      	adds	r3, r6, r3
 800817e:	189b      	adds	r3, r3, r2
 8008180:	9a05      	ldr	r2, [sp, #20]
 8008182:	0c1f      	lsrs	r7, r3, #16
 8008184:	3104      	adds	r1, #4
 8008186:	42aa      	cmp	r2, r5
 8008188:	d8e7      	bhi.n	800815a <__multiply+0x10e>
 800818a:	4662      	mov	r2, ip
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	5053      	str	r3, [r2, r1]
 8008190:	9b01      	ldr	r3, [sp, #4]
 8008192:	3304      	adds	r3, #4
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	2304      	movs	r3, #4
 8008198:	449c      	add	ip, r3
 800819a:	e79b      	b.n	80080d4 <__multiply+0x88>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	e79b      	b.n	80080dc <__multiply+0x90>
 80081a4:	08008efc 	.word	0x08008efc
 80081a8:	08008f0d 	.word	0x08008f0d

080081ac <__pow5mult>:
 80081ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ae:	2303      	movs	r3, #3
 80081b0:	0015      	movs	r5, r2
 80081b2:	0007      	movs	r7, r0
 80081b4:	000e      	movs	r6, r1
 80081b6:	401a      	ands	r2, r3
 80081b8:	421d      	tst	r5, r3
 80081ba:	d008      	beq.n	80081ce <__pow5mult+0x22>
 80081bc:	4925      	ldr	r1, [pc, #148]	; (8008254 <__pow5mult+0xa8>)
 80081be:	3a01      	subs	r2, #1
 80081c0:	0092      	lsls	r2, r2, #2
 80081c2:	5852      	ldr	r2, [r2, r1]
 80081c4:	2300      	movs	r3, #0
 80081c6:	0031      	movs	r1, r6
 80081c8:	f7ff fe9c 	bl	8007f04 <__multadd>
 80081cc:	0006      	movs	r6, r0
 80081ce:	10ad      	asrs	r5, r5, #2
 80081d0:	d03d      	beq.n	800824e <__pow5mult+0xa2>
 80081d2:	69fc      	ldr	r4, [r7, #28]
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	d10f      	bne.n	80081f8 <__pow5mult+0x4c>
 80081d8:	2010      	movs	r0, #16
 80081da:	f7ff fd6d 	bl	8007cb8 <malloc>
 80081de:	1e02      	subs	r2, r0, #0
 80081e0:	61f8      	str	r0, [r7, #28]
 80081e2:	d105      	bne.n	80081f0 <__pow5mult+0x44>
 80081e4:	21b4      	movs	r1, #180	; 0xb4
 80081e6:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <__pow5mult+0xac>)
 80081e8:	481c      	ldr	r0, [pc, #112]	; (800825c <__pow5mult+0xb0>)
 80081ea:	31ff      	adds	r1, #255	; 0xff
 80081ec:	f000 fa8e 	bl	800870c <__assert_func>
 80081f0:	6044      	str	r4, [r0, #4]
 80081f2:	6084      	str	r4, [r0, #8]
 80081f4:	6004      	str	r4, [r0, #0]
 80081f6:	60c4      	str	r4, [r0, #12]
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	689c      	ldr	r4, [r3, #8]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d108      	bne.n	8008214 <__pow5mult+0x68>
 8008202:	0038      	movs	r0, r7
 8008204:	4916      	ldr	r1, [pc, #88]	; (8008260 <__pow5mult+0xb4>)
 8008206:	f7ff ff09 	bl	800801c <__i2b>
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	0004      	movs	r4, r0
 800820e:	6098      	str	r0, [r3, #8]
 8008210:	2300      	movs	r3, #0
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	2301      	movs	r3, #1
 8008216:	421d      	tst	r5, r3
 8008218:	d00a      	beq.n	8008230 <__pow5mult+0x84>
 800821a:	0031      	movs	r1, r6
 800821c:	0022      	movs	r2, r4
 800821e:	0038      	movs	r0, r7
 8008220:	f7ff ff14 	bl	800804c <__multiply>
 8008224:	0031      	movs	r1, r6
 8008226:	9001      	str	r0, [sp, #4]
 8008228:	0038      	movs	r0, r7
 800822a:	f7ff fe47 	bl	8007ebc <_Bfree>
 800822e:	9e01      	ldr	r6, [sp, #4]
 8008230:	106d      	asrs	r5, r5, #1
 8008232:	d00c      	beq.n	800824e <__pow5mult+0xa2>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	2800      	cmp	r0, #0
 8008238:	d107      	bne.n	800824a <__pow5mult+0x9e>
 800823a:	0022      	movs	r2, r4
 800823c:	0021      	movs	r1, r4
 800823e:	0038      	movs	r0, r7
 8008240:	f7ff ff04 	bl	800804c <__multiply>
 8008244:	2300      	movs	r3, #0
 8008246:	6020      	str	r0, [r4, #0]
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	0004      	movs	r4, r0
 800824c:	e7e2      	b.n	8008214 <__pow5mult+0x68>
 800824e:	0030      	movs	r0, r6
 8008250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008252:	46c0      	nop			; (mov r8, r8)
 8008254:	08009058 	.word	0x08009058
 8008258:	08008e8d 	.word	0x08008e8d
 800825c:	08008f0d 	.word	0x08008f0d
 8008260:	00000271 	.word	0x00000271

08008264 <__lshift>:
 8008264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008266:	000c      	movs	r4, r1
 8008268:	0017      	movs	r7, r2
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	1155      	asrs	r5, r2, #5
 800826e:	b087      	sub	sp, #28
 8008270:	18eb      	adds	r3, r5, r3
 8008272:	9302      	str	r3, [sp, #8]
 8008274:	3301      	adds	r3, #1
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	6849      	ldr	r1, [r1, #4]
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	9004      	str	r0, [sp, #16]
 800827e:	9a01      	ldr	r2, [sp, #4]
 8008280:	4293      	cmp	r3, r2
 8008282:	db10      	blt.n	80082a6 <__lshift+0x42>
 8008284:	9804      	ldr	r0, [sp, #16]
 8008286:	f7ff fdd5 	bl	8007e34 <_Balloc>
 800828a:	2300      	movs	r3, #0
 800828c:	0002      	movs	r2, r0
 800828e:	0006      	movs	r6, r0
 8008290:	0019      	movs	r1, r3
 8008292:	3214      	adds	r2, #20
 8008294:	4298      	cmp	r0, r3
 8008296:	d10c      	bne.n	80082b2 <__lshift+0x4e>
 8008298:	31df      	adds	r1, #223	; 0xdf
 800829a:	0032      	movs	r2, r6
 800829c:	4b26      	ldr	r3, [pc, #152]	; (8008338 <__lshift+0xd4>)
 800829e:	4827      	ldr	r0, [pc, #156]	; (800833c <__lshift+0xd8>)
 80082a0:	31ff      	adds	r1, #255	; 0xff
 80082a2:	f000 fa33 	bl	800870c <__assert_func>
 80082a6:	3101      	adds	r1, #1
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	e7e8      	b.n	800827e <__lshift+0x1a>
 80082ac:	0098      	lsls	r0, r3, #2
 80082ae:	5011      	str	r1, [r2, r0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	42ab      	cmp	r3, r5
 80082b4:	dbfa      	blt.n	80082ac <__lshift+0x48>
 80082b6:	43eb      	mvns	r3, r5
 80082b8:	17db      	asrs	r3, r3, #31
 80082ba:	401d      	ands	r5, r3
 80082bc:	211f      	movs	r1, #31
 80082be:	0023      	movs	r3, r4
 80082c0:	0038      	movs	r0, r7
 80082c2:	00ad      	lsls	r5, r5, #2
 80082c4:	1955      	adds	r5, r2, r5
 80082c6:	6922      	ldr	r2, [r4, #16]
 80082c8:	3314      	adds	r3, #20
 80082ca:	0092      	lsls	r2, r2, #2
 80082cc:	4008      	ands	r0, r1
 80082ce:	4684      	mov	ip, r0
 80082d0:	189a      	adds	r2, r3, r2
 80082d2:	420f      	tst	r7, r1
 80082d4:	d02a      	beq.n	800832c <__lshift+0xc8>
 80082d6:	3101      	adds	r1, #1
 80082d8:	1a09      	subs	r1, r1, r0
 80082da:	9105      	str	r1, [sp, #20]
 80082dc:	2100      	movs	r1, #0
 80082de:	9503      	str	r5, [sp, #12]
 80082e0:	4667      	mov	r7, ip
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	40b8      	lsls	r0, r7
 80082e6:	4308      	orrs	r0, r1
 80082e8:	9903      	ldr	r1, [sp, #12]
 80082ea:	c101      	stmia	r1!, {r0}
 80082ec:	9103      	str	r1, [sp, #12]
 80082ee:	9805      	ldr	r0, [sp, #20]
 80082f0:	cb02      	ldmia	r3!, {r1}
 80082f2:	40c1      	lsrs	r1, r0
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d8f3      	bhi.n	80082e0 <__lshift+0x7c>
 80082f8:	0020      	movs	r0, r4
 80082fa:	3015      	adds	r0, #21
 80082fc:	2304      	movs	r3, #4
 80082fe:	4282      	cmp	r2, r0
 8008300:	d304      	bcc.n	800830c <__lshift+0xa8>
 8008302:	1b13      	subs	r3, r2, r4
 8008304:	3b15      	subs	r3, #21
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	3301      	adds	r3, #1
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	50e9      	str	r1, [r5, r3]
 800830e:	2900      	cmp	r1, #0
 8008310:	d002      	beq.n	8008318 <__lshift+0xb4>
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	3302      	adds	r3, #2
 8008316:	9301      	str	r3, [sp, #4]
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	9804      	ldr	r0, [sp, #16]
 800831c:	3b01      	subs	r3, #1
 800831e:	0021      	movs	r1, r4
 8008320:	6133      	str	r3, [r6, #16]
 8008322:	f7ff fdcb 	bl	8007ebc <_Bfree>
 8008326:	0030      	movs	r0, r6
 8008328:	b007      	add	sp, #28
 800832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832c:	cb02      	ldmia	r3!, {r1}
 800832e:	c502      	stmia	r5!, {r1}
 8008330:	429a      	cmp	r2, r3
 8008332:	d8fb      	bhi.n	800832c <__lshift+0xc8>
 8008334:	e7f0      	b.n	8008318 <__lshift+0xb4>
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	08008efc 	.word	0x08008efc
 800833c:	08008f0d 	.word	0x08008f0d

08008340 <__mcmp>:
 8008340:	b530      	push	{r4, r5, lr}
 8008342:	690b      	ldr	r3, [r1, #16]
 8008344:	6904      	ldr	r4, [r0, #16]
 8008346:	0002      	movs	r2, r0
 8008348:	1ae0      	subs	r0, r4, r3
 800834a:	429c      	cmp	r4, r3
 800834c:	d10e      	bne.n	800836c <__mcmp+0x2c>
 800834e:	3214      	adds	r2, #20
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	3114      	adds	r1, #20
 8008354:	0014      	movs	r4, r2
 8008356:	18c9      	adds	r1, r1, r3
 8008358:	18d2      	adds	r2, r2, r3
 800835a:	3a04      	subs	r2, #4
 800835c:	3904      	subs	r1, #4
 800835e:	6815      	ldr	r5, [r2, #0]
 8008360:	680b      	ldr	r3, [r1, #0]
 8008362:	429d      	cmp	r5, r3
 8008364:	d003      	beq.n	800836e <__mcmp+0x2e>
 8008366:	2001      	movs	r0, #1
 8008368:	429d      	cmp	r5, r3
 800836a:	d303      	bcc.n	8008374 <__mcmp+0x34>
 800836c:	bd30      	pop	{r4, r5, pc}
 800836e:	4294      	cmp	r4, r2
 8008370:	d3f3      	bcc.n	800835a <__mcmp+0x1a>
 8008372:	e7fb      	b.n	800836c <__mcmp+0x2c>
 8008374:	4240      	negs	r0, r0
 8008376:	e7f9      	b.n	800836c <__mcmp+0x2c>

08008378 <__mdiff>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	000e      	movs	r6, r1
 800837c:	0007      	movs	r7, r0
 800837e:	0011      	movs	r1, r2
 8008380:	0030      	movs	r0, r6
 8008382:	b087      	sub	sp, #28
 8008384:	0014      	movs	r4, r2
 8008386:	f7ff ffdb 	bl	8008340 <__mcmp>
 800838a:	1e05      	subs	r5, r0, #0
 800838c:	d110      	bne.n	80083b0 <__mdiff+0x38>
 800838e:	0001      	movs	r1, r0
 8008390:	0038      	movs	r0, r7
 8008392:	f7ff fd4f 	bl	8007e34 <_Balloc>
 8008396:	1e02      	subs	r2, r0, #0
 8008398:	d104      	bne.n	80083a4 <__mdiff+0x2c>
 800839a:	4b3f      	ldr	r3, [pc, #252]	; (8008498 <__mdiff+0x120>)
 800839c:	483f      	ldr	r0, [pc, #252]	; (800849c <__mdiff+0x124>)
 800839e:	4940      	ldr	r1, [pc, #256]	; (80084a0 <__mdiff+0x128>)
 80083a0:	f000 f9b4 	bl	800870c <__assert_func>
 80083a4:	2301      	movs	r3, #1
 80083a6:	6145      	str	r5, [r0, #20]
 80083a8:	6103      	str	r3, [r0, #16]
 80083aa:	0010      	movs	r0, r2
 80083ac:	b007      	add	sp, #28
 80083ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b0:	2301      	movs	r3, #1
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	2800      	cmp	r0, #0
 80083b6:	db04      	blt.n	80083c2 <__mdiff+0x4a>
 80083b8:	0023      	movs	r3, r4
 80083ba:	0034      	movs	r4, r6
 80083bc:	001e      	movs	r6, r3
 80083be:	2300      	movs	r3, #0
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	0038      	movs	r0, r7
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	f7ff fd35 	bl	8007e34 <_Balloc>
 80083ca:	1e02      	subs	r2, r0, #0
 80083cc:	d103      	bne.n	80083d6 <__mdiff+0x5e>
 80083ce:	4b32      	ldr	r3, [pc, #200]	; (8008498 <__mdiff+0x120>)
 80083d0:	4832      	ldr	r0, [pc, #200]	; (800849c <__mdiff+0x124>)
 80083d2:	4934      	ldr	r1, [pc, #208]	; (80084a4 <__mdiff+0x12c>)
 80083d4:	e7e4      	b.n	80083a0 <__mdiff+0x28>
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	2700      	movs	r7, #0
 80083da:	60c3      	str	r3, [r0, #12]
 80083dc:	6920      	ldr	r0, [r4, #16]
 80083de:	3414      	adds	r4, #20
 80083e0:	0083      	lsls	r3, r0, #2
 80083e2:	18e3      	adds	r3, r4, r3
 80083e4:	0021      	movs	r1, r4
 80083e6:	9401      	str	r4, [sp, #4]
 80083e8:	0034      	movs	r4, r6
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	6933      	ldr	r3, [r6, #16]
 80083ee:	3414      	adds	r4, #20
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	18e3      	adds	r3, r4, r3
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	0013      	movs	r3, r2
 80083f8:	3314      	adds	r3, #20
 80083fa:	469c      	mov	ip, r3
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	9104      	str	r1, [sp, #16]
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	cc02      	ldmia	r4!, {r1}
 8008404:	cb20      	ldmia	r3!, {r5}
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	b2ab      	uxth	r3, r5
 800840a:	19df      	adds	r7, r3, r7
 800840c:	b28b      	uxth	r3, r1
 800840e:	1afb      	subs	r3, r7, r3
 8008410:	0c09      	lsrs	r1, r1, #16
 8008412:	0c2d      	lsrs	r5, r5, #16
 8008414:	1a6d      	subs	r5, r5, r1
 8008416:	1419      	asrs	r1, r3, #16
 8008418:	1869      	adds	r1, r5, r1
 800841a:	b29b      	uxth	r3, r3
 800841c:	140f      	asrs	r7, r1, #16
 800841e:	0409      	lsls	r1, r1, #16
 8008420:	4319      	orrs	r1, r3
 8008422:	4663      	mov	r3, ip
 8008424:	c302      	stmia	r3!, {r1}
 8008426:	469c      	mov	ip, r3
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	42a3      	cmp	r3, r4
 800842c:	d8e8      	bhi.n	8008400 <__mdiff+0x88>
 800842e:	0031      	movs	r1, r6
 8008430:	9c03      	ldr	r4, [sp, #12]
 8008432:	3115      	adds	r1, #21
 8008434:	2304      	movs	r3, #4
 8008436:	428c      	cmp	r4, r1
 8008438:	d304      	bcc.n	8008444 <__mdiff+0xcc>
 800843a:	1ba3      	subs	r3, r4, r6
 800843c:	3b15      	subs	r3, #21
 800843e:	089b      	lsrs	r3, r3, #2
 8008440:	3301      	adds	r3, #1
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	9901      	ldr	r1, [sp, #4]
 8008446:	18cd      	adds	r5, r1, r3
 8008448:	9905      	ldr	r1, [sp, #20]
 800844a:	002e      	movs	r6, r5
 800844c:	18cb      	adds	r3, r1, r3
 800844e:	469c      	mov	ip, r3
 8008450:	9902      	ldr	r1, [sp, #8]
 8008452:	428e      	cmp	r6, r1
 8008454:	d310      	bcc.n	8008478 <__mdiff+0x100>
 8008456:	9e02      	ldr	r6, [sp, #8]
 8008458:	1ee9      	subs	r1, r5, #3
 800845a:	2400      	movs	r4, #0
 800845c:	428e      	cmp	r6, r1
 800845e:	d304      	bcc.n	800846a <__mdiff+0xf2>
 8008460:	0031      	movs	r1, r6
 8008462:	3103      	adds	r1, #3
 8008464:	1b49      	subs	r1, r1, r5
 8008466:	0889      	lsrs	r1, r1, #2
 8008468:	008c      	lsls	r4, r1, #2
 800846a:	191b      	adds	r3, r3, r4
 800846c:	3b04      	subs	r3, #4
 800846e:	6819      	ldr	r1, [r3, #0]
 8008470:	2900      	cmp	r1, #0
 8008472:	d00f      	beq.n	8008494 <__mdiff+0x11c>
 8008474:	6110      	str	r0, [r2, #16]
 8008476:	e798      	b.n	80083aa <__mdiff+0x32>
 8008478:	ce02      	ldmia	r6!, {r1}
 800847a:	b28c      	uxth	r4, r1
 800847c:	19e4      	adds	r4, r4, r7
 800847e:	0c0f      	lsrs	r7, r1, #16
 8008480:	1421      	asrs	r1, r4, #16
 8008482:	1879      	adds	r1, r7, r1
 8008484:	b2a4      	uxth	r4, r4
 8008486:	140f      	asrs	r7, r1, #16
 8008488:	0409      	lsls	r1, r1, #16
 800848a:	4321      	orrs	r1, r4
 800848c:	4664      	mov	r4, ip
 800848e:	c402      	stmia	r4!, {r1}
 8008490:	46a4      	mov	ip, r4
 8008492:	e7dd      	b.n	8008450 <__mdiff+0xd8>
 8008494:	3801      	subs	r0, #1
 8008496:	e7e9      	b.n	800846c <__mdiff+0xf4>
 8008498:	08008efc 	.word	0x08008efc
 800849c:	08008f0d 	.word	0x08008f0d
 80084a0:	00000237 	.word	0x00000237
 80084a4:	00000245 	.word	0x00000245

080084a8 <__d2b>:
 80084a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084aa:	2101      	movs	r1, #1
 80084ac:	0014      	movs	r4, r2
 80084ae:	001d      	movs	r5, r3
 80084b0:	9f08      	ldr	r7, [sp, #32]
 80084b2:	f7ff fcbf 	bl	8007e34 <_Balloc>
 80084b6:	1e06      	subs	r6, r0, #0
 80084b8:	d105      	bne.n	80084c6 <__d2b+0x1e>
 80084ba:	0032      	movs	r2, r6
 80084bc:	4b24      	ldr	r3, [pc, #144]	; (8008550 <__d2b+0xa8>)
 80084be:	4825      	ldr	r0, [pc, #148]	; (8008554 <__d2b+0xac>)
 80084c0:	4925      	ldr	r1, [pc, #148]	; (8008558 <__d2b+0xb0>)
 80084c2:	f000 f923 	bl	800870c <__assert_func>
 80084c6:	032b      	lsls	r3, r5, #12
 80084c8:	006d      	lsls	r5, r5, #1
 80084ca:	0b1b      	lsrs	r3, r3, #12
 80084cc:	0d6d      	lsrs	r5, r5, #21
 80084ce:	d125      	bne.n	800851c <__d2b+0x74>
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	d028      	beq.n	8008528 <__d2b+0x80>
 80084d6:	4668      	mov	r0, sp
 80084d8:	9400      	str	r4, [sp, #0]
 80084da:	f7ff fd71 	bl	8007fc0 <__lo0bits>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	9900      	ldr	r1, [sp, #0]
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d01e      	beq.n	8008524 <__d2b+0x7c>
 80084e6:	2220      	movs	r2, #32
 80084e8:	001c      	movs	r4, r3
 80084ea:	1a12      	subs	r2, r2, r0
 80084ec:	4094      	lsls	r4, r2
 80084ee:	0022      	movs	r2, r4
 80084f0:	40c3      	lsrs	r3, r0
 80084f2:	430a      	orrs	r2, r1
 80084f4:	6172      	str	r2, [r6, #20]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	9c01      	ldr	r4, [sp, #4]
 80084fa:	61b4      	str	r4, [r6, #24]
 80084fc:	1e63      	subs	r3, r4, #1
 80084fe:	419c      	sbcs	r4, r3
 8008500:	3401      	adds	r4, #1
 8008502:	6134      	str	r4, [r6, #16]
 8008504:	2d00      	cmp	r5, #0
 8008506:	d017      	beq.n	8008538 <__d2b+0x90>
 8008508:	2435      	movs	r4, #53	; 0x35
 800850a:	4b14      	ldr	r3, [pc, #80]	; (800855c <__d2b+0xb4>)
 800850c:	18ed      	adds	r5, r5, r3
 800850e:	182d      	adds	r5, r5, r0
 8008510:	603d      	str	r5, [r7, #0]
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	1a24      	subs	r4, r4, r0
 8008516:	601c      	str	r4, [r3, #0]
 8008518:	0030      	movs	r0, r6
 800851a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800851c:	2280      	movs	r2, #128	; 0x80
 800851e:	0352      	lsls	r2, r2, #13
 8008520:	4313      	orrs	r3, r2
 8008522:	e7d5      	b.n	80084d0 <__d2b+0x28>
 8008524:	6171      	str	r1, [r6, #20]
 8008526:	e7e7      	b.n	80084f8 <__d2b+0x50>
 8008528:	a801      	add	r0, sp, #4
 800852a:	f7ff fd49 	bl	8007fc0 <__lo0bits>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	2401      	movs	r4, #1
 8008532:	6173      	str	r3, [r6, #20]
 8008534:	3020      	adds	r0, #32
 8008536:	e7e4      	b.n	8008502 <__d2b+0x5a>
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <__d2b+0xb8>)
 800853a:	18c0      	adds	r0, r0, r3
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <__d2b+0xbc>)
 800853e:	6038      	str	r0, [r7, #0]
 8008540:	18e3      	adds	r3, r4, r3
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	18f3      	adds	r3, r6, r3
 8008546:	6958      	ldr	r0, [r3, #20]
 8008548:	f7ff fd20 	bl	8007f8c <__hi0bits>
 800854c:	0164      	lsls	r4, r4, #5
 800854e:	e7e0      	b.n	8008512 <__d2b+0x6a>
 8008550:	08008efc 	.word	0x08008efc
 8008554:	08008f0d 	.word	0x08008f0d
 8008558:	0000030f 	.word	0x0000030f
 800855c:	fffffbcd 	.word	0xfffffbcd
 8008560:	fffffbce 	.word	0xfffffbce
 8008564:	3fffffff 	.word	0x3fffffff

08008568 <__sflush_r>:
 8008568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800856a:	898b      	ldrh	r3, [r1, #12]
 800856c:	0005      	movs	r5, r0
 800856e:	000c      	movs	r4, r1
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	d45c      	bmi.n	800862e <__sflush_r+0xc6>
 8008574:	684a      	ldr	r2, [r1, #4]
 8008576:	2a00      	cmp	r2, #0
 8008578:	dc04      	bgt.n	8008584 <__sflush_r+0x1c>
 800857a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800857c:	2a00      	cmp	r2, #0
 800857e:	dc01      	bgt.n	8008584 <__sflush_r+0x1c>
 8008580:	2000      	movs	r0, #0
 8008582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008584:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008586:	2f00      	cmp	r7, #0
 8008588:	d0fa      	beq.n	8008580 <__sflush_r+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	2080      	movs	r0, #128	; 0x80
 800858e:	682e      	ldr	r6, [r5, #0]
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	001a      	movs	r2, r3
 8008594:	0140      	lsls	r0, r0, #5
 8008596:	6a21      	ldr	r1, [r4, #32]
 8008598:	4002      	ands	r2, r0
 800859a:	4203      	tst	r3, r0
 800859c:	d034      	beq.n	8008608 <__sflush_r+0xa0>
 800859e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	075b      	lsls	r3, r3, #29
 80085a4:	d506      	bpl.n	80085b4 <__sflush_r+0x4c>
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	1ac0      	subs	r0, r0, r3
 80085aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <__sflush_r+0x4c>
 80085b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085b2:	1ac0      	subs	r0, r0, r3
 80085b4:	0002      	movs	r2, r0
 80085b6:	2300      	movs	r3, #0
 80085b8:	0028      	movs	r0, r5
 80085ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80085bc:	6a21      	ldr	r1, [r4, #32]
 80085be:	47b8      	blx	r7
 80085c0:	89a2      	ldrh	r2, [r4, #12]
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d106      	bne.n	80085d4 <__sflush_r+0x6c>
 80085c6:	6829      	ldr	r1, [r5, #0]
 80085c8:	291d      	cmp	r1, #29
 80085ca:	d82c      	bhi.n	8008626 <__sflush_r+0xbe>
 80085cc:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <__sflush_r+0x110>)
 80085ce:	410b      	asrs	r3, r1
 80085d0:	07db      	lsls	r3, r3, #31
 80085d2:	d428      	bmi.n	8008626 <__sflush_r+0xbe>
 80085d4:	2300      	movs	r3, #0
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	04d2      	lsls	r2, r2, #19
 80085de:	d505      	bpl.n	80085ec <__sflush_r+0x84>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <__sflush_r+0x82>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d100      	bne.n	80085ec <__sflush_r+0x84>
 80085ea:	6560      	str	r0, [r4, #84]	; 0x54
 80085ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ee:	602e      	str	r6, [r5, #0]
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d0c5      	beq.n	8008580 <__sflush_r+0x18>
 80085f4:	0023      	movs	r3, r4
 80085f6:	3344      	adds	r3, #68	; 0x44
 80085f8:	4299      	cmp	r1, r3
 80085fa:	d002      	beq.n	8008602 <__sflush_r+0x9a>
 80085fc:	0028      	movs	r0, r5
 80085fe:	f7ff fb11 	bl	8007c24 <_free_r>
 8008602:	2000      	movs	r0, #0
 8008604:	6360      	str	r0, [r4, #52]	; 0x34
 8008606:	e7bc      	b.n	8008582 <__sflush_r+0x1a>
 8008608:	2301      	movs	r3, #1
 800860a:	0028      	movs	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d1c6      	bne.n	80085a0 <__sflush_r+0x38>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0c3      	beq.n	80085a0 <__sflush_r+0x38>
 8008618:	2b1d      	cmp	r3, #29
 800861a:	d001      	beq.n	8008620 <__sflush_r+0xb8>
 800861c:	2b16      	cmp	r3, #22
 800861e:	d101      	bne.n	8008624 <__sflush_r+0xbc>
 8008620:	602e      	str	r6, [r5, #0]
 8008622:	e7ad      	b.n	8008580 <__sflush_r+0x18>
 8008624:	89a2      	ldrh	r2, [r4, #12]
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	4313      	orrs	r3, r2
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	e7a9      	b.n	8008582 <__sflush_r+0x1a>
 800862e:	690e      	ldr	r6, [r1, #16]
 8008630:	2e00      	cmp	r6, #0
 8008632:	d0a5      	beq.n	8008580 <__sflush_r+0x18>
 8008634:	680f      	ldr	r7, [r1, #0]
 8008636:	600e      	str	r6, [r1, #0]
 8008638:	1bba      	subs	r2, r7, r6
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	079b      	lsls	r3, r3, #30
 8008640:	d100      	bne.n	8008644 <__sflush_r+0xdc>
 8008642:	694a      	ldr	r2, [r1, #20]
 8008644:	60a2      	str	r2, [r4, #8]
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	dd99      	ble.n	8008580 <__sflush_r+0x18>
 800864c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800864e:	0032      	movs	r2, r6
 8008650:	001f      	movs	r7, r3
 8008652:	0028      	movs	r0, r5
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	6a21      	ldr	r1, [r4, #32]
 8008658:	47b8      	blx	r7
 800865a:	2800      	cmp	r0, #0
 800865c:	dc06      	bgt.n	800866c <__sflush_r+0x104>
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	2001      	movs	r0, #1
 8008662:	89a2      	ldrh	r2, [r4, #12]
 8008664:	4240      	negs	r0, r0
 8008666:	4313      	orrs	r3, r2
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	e78a      	b.n	8008582 <__sflush_r+0x1a>
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	1836      	adds	r6, r6, r0
 8008670:	1a1b      	subs	r3, r3, r0
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	e7e7      	b.n	8008646 <__sflush_r+0xde>
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	dfbffffe 	.word	0xdfbffffe

0800867c <_fflush_r>:
 800867c:	690b      	ldr	r3, [r1, #16]
 800867e:	b570      	push	{r4, r5, r6, lr}
 8008680:	0005      	movs	r5, r0
 8008682:	000c      	movs	r4, r1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <_fflush_r+0x12>
 8008688:	2500      	movs	r5, #0
 800868a:	0028      	movs	r0, r5
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	2800      	cmp	r0, #0
 8008690:	d004      	beq.n	800869c <_fflush_r+0x20>
 8008692:	6a03      	ldr	r3, [r0, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <_fflush_r+0x20>
 8008698:	f7fe fb14 	bl	8006cc4 <__sinit>
 800869c:	220c      	movs	r2, #12
 800869e:	5ea3      	ldrsh	r3, [r4, r2]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0f1      	beq.n	8008688 <_fflush_r+0xc>
 80086a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086a6:	07d2      	lsls	r2, r2, #31
 80086a8:	d404      	bmi.n	80086b4 <_fflush_r+0x38>
 80086aa:	059b      	lsls	r3, r3, #22
 80086ac:	d402      	bmi.n	80086b4 <_fflush_r+0x38>
 80086ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086b0:	f7fe fc0d 	bl	8006ece <__retarget_lock_acquire_recursive>
 80086b4:	0028      	movs	r0, r5
 80086b6:	0021      	movs	r1, r4
 80086b8:	f7ff ff56 	bl	8008568 <__sflush_r>
 80086bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086be:	0005      	movs	r5, r0
 80086c0:	07db      	lsls	r3, r3, #31
 80086c2:	d4e2      	bmi.n	800868a <_fflush_r+0xe>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	059b      	lsls	r3, r3, #22
 80086c8:	d4df      	bmi.n	800868a <_fflush_r+0xe>
 80086ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086cc:	f7fe fc00 	bl	8006ed0 <__retarget_lock_release_recursive>
 80086d0:	e7db      	b.n	800868a <_fflush_r+0xe>
	...

080086d4 <_sbrk_r>:
 80086d4:	2300      	movs	r3, #0
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_sbrk_r+0x20>)
 80086da:	0004      	movs	r4, r0
 80086dc:	0008      	movs	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7fa fbd4 	bl	8002e8c <_sbrk>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d103      	bne.n	80086f0 <_sbrk_r+0x1c>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d000      	beq.n	80086f0 <_sbrk_r+0x1c>
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	20000558 	.word	0x20000558

080086f8 <memcpy>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d100      	bne.n	8008702 <memcpy+0xa>
 8008700:	bd10      	pop	{r4, pc}
 8008702:	5ccc      	ldrb	r4, [r1, r3]
 8008704:	54c4      	strb	r4, [r0, r3]
 8008706:	3301      	adds	r3, #1
 8008708:	e7f8      	b.n	80086fc <memcpy+0x4>
	...

0800870c <__assert_func>:
 800870c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800870e:	0014      	movs	r4, r2
 8008710:	001a      	movs	r2, r3
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__assert_func+0x2c>)
 8008714:	0005      	movs	r5, r0
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	000e      	movs	r6, r1
 800871a:	68d8      	ldr	r0, [r3, #12]
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <__assert_func+0x30>)
 800871e:	2c00      	cmp	r4, #0
 8008720:	d101      	bne.n	8008726 <__assert_func+0x1a>
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <__assert_func+0x34>)
 8008724:	001c      	movs	r4, r3
 8008726:	4907      	ldr	r1, [pc, #28]	; (8008744 <__assert_func+0x38>)
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	9402      	str	r4, [sp, #8]
 800872c:	002b      	movs	r3, r5
 800872e:	9600      	str	r6, [sp, #0]
 8008730:	f000 f856 	bl	80087e0 <fiprintf>
 8008734:	f000 f864 	bl	8008800 <abort>
 8008738:	20000064 	.word	0x20000064
 800873c:	0800906e 	.word	0x0800906e
 8008740:	080090a9 	.word	0x080090a9
 8008744:	0800907b 	.word	0x0800907b

08008748 <_calloc_r>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	0c0b      	lsrs	r3, r1, #16
 800874c:	0c15      	lsrs	r5, r2, #16
 800874e:	2b00      	cmp	r3, #0
 8008750:	d11e      	bne.n	8008790 <_calloc_r+0x48>
 8008752:	2d00      	cmp	r5, #0
 8008754:	d10c      	bne.n	8008770 <_calloc_r+0x28>
 8008756:	b289      	uxth	r1, r1
 8008758:	b294      	uxth	r4, r2
 800875a:	434c      	muls	r4, r1
 800875c:	0021      	movs	r1, r4
 800875e:	f7ff fad7 	bl	8007d10 <_malloc_r>
 8008762:	1e05      	subs	r5, r0, #0
 8008764:	d01b      	beq.n	800879e <_calloc_r+0x56>
 8008766:	0022      	movs	r2, r4
 8008768:	2100      	movs	r1, #0
 800876a:	f7fe fb2b 	bl	8006dc4 <memset>
 800876e:	e016      	b.n	800879e <_calloc_r+0x56>
 8008770:	1c2b      	adds	r3, r5, #0
 8008772:	1c0c      	adds	r4, r1, #0
 8008774:	b289      	uxth	r1, r1
 8008776:	b292      	uxth	r2, r2
 8008778:	434a      	muls	r2, r1
 800877a:	b2a1      	uxth	r1, r4
 800877c:	b29c      	uxth	r4, r3
 800877e:	434c      	muls	r4, r1
 8008780:	0c13      	lsrs	r3, r2, #16
 8008782:	18e4      	adds	r4, r4, r3
 8008784:	0c23      	lsrs	r3, r4, #16
 8008786:	d107      	bne.n	8008798 <_calloc_r+0x50>
 8008788:	0424      	lsls	r4, r4, #16
 800878a:	b292      	uxth	r2, r2
 800878c:	4314      	orrs	r4, r2
 800878e:	e7e5      	b.n	800875c <_calloc_r+0x14>
 8008790:	2d00      	cmp	r5, #0
 8008792:	d101      	bne.n	8008798 <_calloc_r+0x50>
 8008794:	1c14      	adds	r4, r2, #0
 8008796:	e7ed      	b.n	8008774 <_calloc_r+0x2c>
 8008798:	230c      	movs	r3, #12
 800879a:	2500      	movs	r5, #0
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	0028      	movs	r0, r5
 80087a0:	bd70      	pop	{r4, r5, r6, pc}

080087a2 <__ascii_mbtowc>:
 80087a2:	b082      	sub	sp, #8
 80087a4:	2900      	cmp	r1, #0
 80087a6:	d100      	bne.n	80087aa <__ascii_mbtowc+0x8>
 80087a8:	a901      	add	r1, sp, #4
 80087aa:	1e10      	subs	r0, r2, #0
 80087ac:	d006      	beq.n	80087bc <__ascii_mbtowc+0x1a>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d006      	beq.n	80087c0 <__ascii_mbtowc+0x1e>
 80087b2:	7813      	ldrb	r3, [r2, #0]
 80087b4:	600b      	str	r3, [r1, #0]
 80087b6:	7810      	ldrb	r0, [r2, #0]
 80087b8:	1e43      	subs	r3, r0, #1
 80087ba:	4198      	sbcs	r0, r3
 80087bc:	b002      	add	sp, #8
 80087be:	4770      	bx	lr
 80087c0:	2002      	movs	r0, #2
 80087c2:	4240      	negs	r0, r0
 80087c4:	e7fa      	b.n	80087bc <__ascii_mbtowc+0x1a>

080087c6 <__ascii_wctomb>:
 80087c6:	0003      	movs	r3, r0
 80087c8:	1e08      	subs	r0, r1, #0
 80087ca:	d005      	beq.n	80087d8 <__ascii_wctomb+0x12>
 80087cc:	2aff      	cmp	r2, #255	; 0xff
 80087ce:	d904      	bls.n	80087da <__ascii_wctomb+0x14>
 80087d0:	228a      	movs	r2, #138	; 0x8a
 80087d2:	2001      	movs	r0, #1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	4240      	negs	r0, r0
 80087d8:	4770      	bx	lr
 80087da:	2001      	movs	r0, #1
 80087dc:	700a      	strb	r2, [r1, #0]
 80087de:	e7fb      	b.n	80087d8 <__ascii_wctomb+0x12>

080087e0 <fiprintf>:
 80087e0:	b40e      	push	{r1, r2, r3}
 80087e2:	b517      	push	{r0, r1, r2, r4, lr}
 80087e4:	4c05      	ldr	r4, [pc, #20]	; (80087fc <fiprintf+0x1c>)
 80087e6:	ab05      	add	r3, sp, #20
 80087e8:	cb04      	ldmia	r3!, {r2}
 80087ea:	0001      	movs	r1, r0
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	f000 f834 	bl	800885c <_vfiprintf_r>
 80087f4:	bc1e      	pop	{r1, r2, r3, r4}
 80087f6:	bc08      	pop	{r3}
 80087f8:	b003      	add	sp, #12
 80087fa:	4718      	bx	r3
 80087fc:	20000064 	.word	0x20000064

08008800 <abort>:
 8008800:	2006      	movs	r0, #6
 8008802:	b510      	push	{r4, lr}
 8008804:	f000 fa16 	bl	8008c34 <raise>
 8008808:	2001      	movs	r0, #1
 800880a:	f7fa facd 	bl	8002da8 <_exit>

0800880e <__sfputc_r>:
 800880e:	6893      	ldr	r3, [r2, #8]
 8008810:	b510      	push	{r4, lr}
 8008812:	3b01      	subs	r3, #1
 8008814:	6093      	str	r3, [r2, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	da04      	bge.n	8008824 <__sfputc_r+0x16>
 800881a:	6994      	ldr	r4, [r2, #24]
 800881c:	42a3      	cmp	r3, r4
 800881e:	db07      	blt.n	8008830 <__sfputc_r+0x22>
 8008820:	290a      	cmp	r1, #10
 8008822:	d005      	beq.n	8008830 <__sfputc_r+0x22>
 8008824:	6813      	ldr	r3, [r2, #0]
 8008826:	1c58      	adds	r0, r3, #1
 8008828:	6010      	str	r0, [r2, #0]
 800882a:	7019      	strb	r1, [r3, #0]
 800882c:	0008      	movs	r0, r1
 800882e:	bd10      	pop	{r4, pc}
 8008830:	f000 f930 	bl	8008a94 <__swbuf_r>
 8008834:	0001      	movs	r1, r0
 8008836:	e7f9      	b.n	800882c <__sfputc_r+0x1e>

08008838 <__sfputs_r>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	0006      	movs	r6, r0
 800883c:	000f      	movs	r7, r1
 800883e:	0014      	movs	r4, r2
 8008840:	18d5      	adds	r5, r2, r3
 8008842:	42ac      	cmp	r4, r5
 8008844:	d101      	bne.n	800884a <__sfputs_r+0x12>
 8008846:	2000      	movs	r0, #0
 8008848:	e007      	b.n	800885a <__sfputs_r+0x22>
 800884a:	7821      	ldrb	r1, [r4, #0]
 800884c:	003a      	movs	r2, r7
 800884e:	0030      	movs	r0, r6
 8008850:	f7ff ffdd 	bl	800880e <__sfputc_r>
 8008854:	3401      	adds	r4, #1
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	d1f3      	bne.n	8008842 <__sfputs_r+0xa>
 800885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800885c <_vfiprintf_r>:
 800885c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885e:	b0a1      	sub	sp, #132	; 0x84
 8008860:	000f      	movs	r7, r1
 8008862:	0015      	movs	r5, r2
 8008864:	001e      	movs	r6, r3
 8008866:	9003      	str	r0, [sp, #12]
 8008868:	2800      	cmp	r0, #0
 800886a:	d004      	beq.n	8008876 <_vfiprintf_r+0x1a>
 800886c:	6a03      	ldr	r3, [r0, #32]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <_vfiprintf_r+0x1a>
 8008872:	f7fe fa27 	bl	8006cc4 <__sinit>
 8008876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008878:	07db      	lsls	r3, r3, #31
 800887a:	d405      	bmi.n	8008888 <_vfiprintf_r+0x2c>
 800887c:	89bb      	ldrh	r3, [r7, #12]
 800887e:	059b      	lsls	r3, r3, #22
 8008880:	d402      	bmi.n	8008888 <_vfiprintf_r+0x2c>
 8008882:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008884:	f7fe fb23 	bl	8006ece <__retarget_lock_acquire_recursive>
 8008888:	89bb      	ldrh	r3, [r7, #12]
 800888a:	071b      	lsls	r3, r3, #28
 800888c:	d502      	bpl.n	8008894 <_vfiprintf_r+0x38>
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d113      	bne.n	80088bc <_vfiprintf_r+0x60>
 8008894:	0039      	movs	r1, r7
 8008896:	9803      	ldr	r0, [sp, #12]
 8008898:	f000 f93e 	bl	8008b18 <__swsetup_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	d00d      	beq.n	80088bc <_vfiprintf_r+0x60>
 80088a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a2:	07db      	lsls	r3, r3, #31
 80088a4:	d503      	bpl.n	80088ae <_vfiprintf_r+0x52>
 80088a6:	2001      	movs	r0, #1
 80088a8:	4240      	negs	r0, r0
 80088aa:	b021      	add	sp, #132	; 0x84
 80088ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ae:	89bb      	ldrh	r3, [r7, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d4f8      	bmi.n	80088a6 <_vfiprintf_r+0x4a>
 80088b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088b6:	f7fe fb0b 	bl	8006ed0 <__retarget_lock_release_recursive>
 80088ba:	e7f4      	b.n	80088a6 <_vfiprintf_r+0x4a>
 80088bc:	2300      	movs	r3, #0
 80088be:	ac08      	add	r4, sp, #32
 80088c0:	6163      	str	r3, [r4, #20]
 80088c2:	3320      	adds	r3, #32
 80088c4:	7663      	strb	r3, [r4, #25]
 80088c6:	3310      	adds	r3, #16
 80088c8:	76a3      	strb	r3, [r4, #26]
 80088ca:	9607      	str	r6, [sp, #28]
 80088cc:	002e      	movs	r6, r5
 80088ce:	7833      	ldrb	r3, [r6, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <_vfiprintf_r+0x7c>
 80088d4:	2b25      	cmp	r3, #37	; 0x25
 80088d6:	d148      	bne.n	800896a <_vfiprintf_r+0x10e>
 80088d8:	1b73      	subs	r3, r6, r5
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	42ae      	cmp	r6, r5
 80088de:	d00b      	beq.n	80088f8 <_vfiprintf_r+0x9c>
 80088e0:	002a      	movs	r2, r5
 80088e2:	0039      	movs	r1, r7
 80088e4:	9803      	ldr	r0, [sp, #12]
 80088e6:	f7ff ffa7 	bl	8008838 <__sfputs_r>
 80088ea:	3001      	adds	r0, #1
 80088ec:	d100      	bne.n	80088f0 <_vfiprintf_r+0x94>
 80088ee:	e0af      	b.n	8008a50 <_vfiprintf_r+0x1f4>
 80088f0:	6963      	ldr	r3, [r4, #20]
 80088f2:	9a05      	ldr	r2, [sp, #20]
 80088f4:	189b      	adds	r3, r3, r2
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	7833      	ldrb	r3, [r6, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d100      	bne.n	8008900 <_vfiprintf_r+0xa4>
 80088fe:	e0a7      	b.n	8008a50 <_vfiprintf_r+0x1f4>
 8008900:	2201      	movs	r2, #1
 8008902:	2300      	movs	r3, #0
 8008904:	4252      	negs	r2, r2
 8008906:	6062      	str	r2, [r4, #4]
 8008908:	a904      	add	r1, sp, #16
 800890a:	3254      	adds	r2, #84	; 0x54
 800890c:	1852      	adds	r2, r2, r1
 800890e:	1c75      	adds	r5, r6, #1
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	60e3      	str	r3, [r4, #12]
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	7013      	strb	r3, [r2, #0]
 8008918:	65a3      	str	r3, [r4, #88]	; 0x58
 800891a:	4b59      	ldr	r3, [pc, #356]	; (8008a80 <_vfiprintf_r+0x224>)
 800891c:	2205      	movs	r2, #5
 800891e:	0018      	movs	r0, r3
 8008920:	7829      	ldrb	r1, [r5, #0]
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	f7fe fad5 	bl	8006ed2 <memchr>
 8008928:	1c6e      	adds	r6, r5, #1
 800892a:	2800      	cmp	r0, #0
 800892c:	d11f      	bne.n	800896e <_vfiprintf_r+0x112>
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	06d3      	lsls	r3, r2, #27
 8008932:	d504      	bpl.n	800893e <_vfiprintf_r+0xe2>
 8008934:	2353      	movs	r3, #83	; 0x53
 8008936:	a904      	add	r1, sp, #16
 8008938:	185b      	adds	r3, r3, r1
 800893a:	2120      	movs	r1, #32
 800893c:	7019      	strb	r1, [r3, #0]
 800893e:	0713      	lsls	r3, r2, #28
 8008940:	d504      	bpl.n	800894c <_vfiprintf_r+0xf0>
 8008942:	2353      	movs	r3, #83	; 0x53
 8008944:	a904      	add	r1, sp, #16
 8008946:	185b      	adds	r3, r3, r1
 8008948:	212b      	movs	r1, #43	; 0x2b
 800894a:	7019      	strb	r1, [r3, #0]
 800894c:	782b      	ldrb	r3, [r5, #0]
 800894e:	2b2a      	cmp	r3, #42	; 0x2a
 8008950:	d016      	beq.n	8008980 <_vfiprintf_r+0x124>
 8008952:	002e      	movs	r6, r5
 8008954:	2100      	movs	r1, #0
 8008956:	200a      	movs	r0, #10
 8008958:	68e3      	ldr	r3, [r4, #12]
 800895a:	7832      	ldrb	r2, [r6, #0]
 800895c:	1c75      	adds	r5, r6, #1
 800895e:	3a30      	subs	r2, #48	; 0x30
 8008960:	2a09      	cmp	r2, #9
 8008962:	d94e      	bls.n	8008a02 <_vfiprintf_r+0x1a6>
 8008964:	2900      	cmp	r1, #0
 8008966:	d111      	bne.n	800898c <_vfiprintf_r+0x130>
 8008968:	e017      	b.n	800899a <_vfiprintf_r+0x13e>
 800896a:	3601      	adds	r6, #1
 800896c:	e7af      	b.n	80088ce <_vfiprintf_r+0x72>
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	1ac0      	subs	r0, r0, r3
 8008974:	2301      	movs	r3, #1
 8008976:	4083      	lsls	r3, r0
 8008978:	4313      	orrs	r3, r2
 800897a:	0035      	movs	r5, r6
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	e7cc      	b.n	800891a <_vfiprintf_r+0xbe>
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	1d19      	adds	r1, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9107      	str	r1, [sp, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	db01      	blt.n	8008990 <_vfiprintf_r+0x134>
 800898c:	930b      	str	r3, [sp, #44]	; 0x2c
 800898e:	e004      	b.n	800899a <_vfiprintf_r+0x13e>
 8008990:	425b      	negs	r3, r3
 8008992:	60e3      	str	r3, [r4, #12]
 8008994:	2302      	movs	r3, #2
 8008996:	4313      	orrs	r3, r2
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	7833      	ldrb	r3, [r6, #0]
 800899c:	2b2e      	cmp	r3, #46	; 0x2e
 800899e:	d10a      	bne.n	80089b6 <_vfiprintf_r+0x15a>
 80089a0:	7873      	ldrb	r3, [r6, #1]
 80089a2:	2b2a      	cmp	r3, #42	; 0x2a
 80089a4:	d135      	bne.n	8008a12 <_vfiprintf_r+0x1b6>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	3602      	adds	r6, #2
 80089aa:	1d1a      	adds	r2, r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	9207      	str	r2, [sp, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	db2b      	blt.n	8008a0c <_vfiprintf_r+0x1b0>
 80089b4:	9309      	str	r3, [sp, #36]	; 0x24
 80089b6:	4d33      	ldr	r5, [pc, #204]	; (8008a84 <_vfiprintf_r+0x228>)
 80089b8:	2203      	movs	r2, #3
 80089ba:	0028      	movs	r0, r5
 80089bc:	7831      	ldrb	r1, [r6, #0]
 80089be:	f7fe fa88 	bl	8006ed2 <memchr>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d006      	beq.n	80089d4 <_vfiprintf_r+0x178>
 80089c6:	2340      	movs	r3, #64	; 0x40
 80089c8:	1b40      	subs	r0, r0, r5
 80089ca:	4083      	lsls	r3, r0
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	3601      	adds	r6, #1
 80089d0:	4313      	orrs	r3, r2
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	7831      	ldrb	r1, [r6, #0]
 80089d6:	2206      	movs	r2, #6
 80089d8:	482b      	ldr	r0, [pc, #172]	; (8008a88 <_vfiprintf_r+0x22c>)
 80089da:	1c75      	adds	r5, r6, #1
 80089dc:	7621      	strb	r1, [r4, #24]
 80089de:	f7fe fa78 	bl	8006ed2 <memchr>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d043      	beq.n	8008a6e <_vfiprintf_r+0x212>
 80089e6:	4b29      	ldr	r3, [pc, #164]	; (8008a8c <_vfiprintf_r+0x230>)
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d125      	bne.n	8008a38 <_vfiprintf_r+0x1dc>
 80089ec:	2207      	movs	r2, #7
 80089ee:	9b07      	ldr	r3, [sp, #28]
 80089f0:	3307      	adds	r3, #7
 80089f2:	4393      	bics	r3, r2
 80089f4:	3308      	adds	r3, #8
 80089f6:	9307      	str	r3, [sp, #28]
 80089f8:	6963      	ldr	r3, [r4, #20]
 80089fa:	9a04      	ldr	r2, [sp, #16]
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	6163      	str	r3, [r4, #20]
 8008a00:	e764      	b.n	80088cc <_vfiprintf_r+0x70>
 8008a02:	4343      	muls	r3, r0
 8008a04:	002e      	movs	r6, r5
 8008a06:	2101      	movs	r1, #1
 8008a08:	189b      	adds	r3, r3, r2
 8008a0a:	e7a6      	b.n	800895a <_vfiprintf_r+0xfe>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	425b      	negs	r3, r3
 8008a10:	e7d0      	b.n	80089b4 <_vfiprintf_r+0x158>
 8008a12:	2300      	movs	r3, #0
 8008a14:	200a      	movs	r0, #10
 8008a16:	001a      	movs	r2, r3
 8008a18:	3601      	adds	r6, #1
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	7831      	ldrb	r1, [r6, #0]
 8008a1e:	1c75      	adds	r5, r6, #1
 8008a20:	3930      	subs	r1, #48	; 0x30
 8008a22:	2909      	cmp	r1, #9
 8008a24:	d903      	bls.n	8008a2e <_vfiprintf_r+0x1d2>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0c5      	beq.n	80089b6 <_vfiprintf_r+0x15a>
 8008a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a2c:	e7c3      	b.n	80089b6 <_vfiprintf_r+0x15a>
 8008a2e:	4342      	muls	r2, r0
 8008a30:	002e      	movs	r6, r5
 8008a32:	2301      	movs	r3, #1
 8008a34:	1852      	adds	r2, r2, r1
 8008a36:	e7f1      	b.n	8008a1c <_vfiprintf_r+0x1c0>
 8008a38:	aa07      	add	r2, sp, #28
 8008a3a:	9200      	str	r2, [sp, #0]
 8008a3c:	0021      	movs	r1, r4
 8008a3e:	003a      	movs	r2, r7
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <_vfiprintf_r+0x234>)
 8008a42:	9803      	ldr	r0, [sp, #12]
 8008a44:	f7fd fcd8 	bl	80063f8 <_printf_float>
 8008a48:	9004      	str	r0, [sp, #16]
 8008a4a:	9b04      	ldr	r3, [sp, #16]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	d1d3      	bne.n	80089f8 <_vfiprintf_r+0x19c>
 8008a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a52:	07db      	lsls	r3, r3, #31
 8008a54:	d405      	bmi.n	8008a62 <_vfiprintf_r+0x206>
 8008a56:	89bb      	ldrh	r3, [r7, #12]
 8008a58:	059b      	lsls	r3, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_vfiprintf_r+0x206>
 8008a5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a5e:	f7fe fa37 	bl	8006ed0 <__retarget_lock_release_recursive>
 8008a62:	89bb      	ldrh	r3, [r7, #12]
 8008a64:	065b      	lsls	r3, r3, #25
 8008a66:	d500      	bpl.n	8008a6a <_vfiprintf_r+0x20e>
 8008a68:	e71d      	b.n	80088a6 <_vfiprintf_r+0x4a>
 8008a6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a6c:	e71d      	b.n	80088aa <_vfiprintf_r+0x4e>
 8008a6e:	aa07      	add	r2, sp, #28
 8008a70:	9200      	str	r2, [sp, #0]
 8008a72:	0021      	movs	r1, r4
 8008a74:	003a      	movs	r2, r7
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <_vfiprintf_r+0x234>)
 8008a78:	9803      	ldr	r0, [sp, #12]
 8008a7a:	f7fd ff83 	bl	8006984 <_printf_i>
 8008a7e:	e7e3      	b.n	8008a48 <_vfiprintf_r+0x1ec>
 8008a80:	080091ab 	.word	0x080091ab
 8008a84:	080091b1 	.word	0x080091b1
 8008a88:	080091b5 	.word	0x080091b5
 8008a8c:	080063f9 	.word	0x080063f9
 8008a90:	08008839 	.word	0x08008839

08008a94 <__swbuf_r>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	0006      	movs	r6, r0
 8008a98:	000d      	movs	r5, r1
 8008a9a:	0014      	movs	r4, r2
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d004      	beq.n	8008aaa <__swbuf_r+0x16>
 8008aa0:	6a03      	ldr	r3, [r0, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <__swbuf_r+0x16>
 8008aa6:	f7fe f90d 	bl	8006cc4 <__sinit>
 8008aaa:	69a3      	ldr	r3, [r4, #24]
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	071b      	lsls	r3, r3, #28
 8008ab2:	d528      	bpl.n	8008b06 <__swbuf_r+0x72>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d025      	beq.n	8008b06 <__swbuf_r+0x72>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	b2ef      	uxtb	r7, r5
 8008ac0:	1ac0      	subs	r0, r0, r3
 8008ac2:	6963      	ldr	r3, [r4, #20]
 8008ac4:	b2ed      	uxtb	r5, r5
 8008ac6:	4283      	cmp	r3, r0
 8008ac8:	dc05      	bgt.n	8008ad6 <__swbuf_r+0x42>
 8008aca:	0021      	movs	r1, r4
 8008acc:	0030      	movs	r0, r6
 8008ace:	f7ff fdd5 	bl	800867c <_fflush_r>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d11d      	bne.n	8008b12 <__swbuf_r+0x7e>
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	3001      	adds	r0, #1
 8008ada:	3b01      	subs	r3, #1
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	701f      	strb	r7, [r3, #0]
 8008ae6:	6963      	ldr	r3, [r4, #20]
 8008ae8:	4283      	cmp	r3, r0
 8008aea:	d004      	beq.n	8008af6 <__swbuf_r+0x62>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	07db      	lsls	r3, r3, #31
 8008af0:	d507      	bpl.n	8008b02 <__swbuf_r+0x6e>
 8008af2:	2d0a      	cmp	r5, #10
 8008af4:	d105      	bne.n	8008b02 <__swbuf_r+0x6e>
 8008af6:	0021      	movs	r1, r4
 8008af8:	0030      	movs	r0, r6
 8008afa:	f7ff fdbf 	bl	800867c <_fflush_r>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d107      	bne.n	8008b12 <__swbuf_r+0x7e>
 8008b02:	0028      	movs	r0, r5
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b06:	0021      	movs	r1, r4
 8008b08:	0030      	movs	r0, r6
 8008b0a:	f000 f805 	bl	8008b18 <__swsetup_r>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0d3      	beq.n	8008aba <__swbuf_r+0x26>
 8008b12:	2501      	movs	r5, #1
 8008b14:	426d      	negs	r5, r5
 8008b16:	e7f4      	b.n	8008b02 <__swbuf_r+0x6e>

08008b18 <__swsetup_r>:
 8008b18:	4b30      	ldr	r3, [pc, #192]	; (8008bdc <__swsetup_r+0xc4>)
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	0005      	movs	r5, r0
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	000c      	movs	r4, r1
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d004      	beq.n	8008b30 <__swsetup_r+0x18>
 8008b26:	6a03      	ldr	r3, [r0, #32]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <__swsetup_r+0x18>
 8008b2c:	f7fe f8ca 	bl	8006cc4 <__sinit>
 8008b30:	230c      	movs	r3, #12
 8008b32:	5ee2      	ldrsh	r2, [r4, r3]
 8008b34:	b293      	uxth	r3, r2
 8008b36:	0711      	lsls	r1, r2, #28
 8008b38:	d423      	bmi.n	8008b82 <__swsetup_r+0x6a>
 8008b3a:	06d9      	lsls	r1, r3, #27
 8008b3c:	d407      	bmi.n	8008b4e <__swsetup_r+0x36>
 8008b3e:	2309      	movs	r3, #9
 8008b40:	2001      	movs	r0, #1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	3337      	adds	r3, #55	; 0x37
 8008b46:	4313      	orrs	r3, r2
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	4240      	negs	r0, r0
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
 8008b4e:	075b      	lsls	r3, r3, #29
 8008b50:	d513      	bpl.n	8008b7a <__swsetup_r+0x62>
 8008b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d008      	beq.n	8008b6a <__swsetup_r+0x52>
 8008b58:	0023      	movs	r3, r4
 8008b5a:	3344      	adds	r3, #68	; 0x44
 8008b5c:	4299      	cmp	r1, r3
 8008b5e:	d002      	beq.n	8008b66 <__swsetup_r+0x4e>
 8008b60:	0028      	movs	r0, r5
 8008b62:	f7ff f85f 	bl	8007c24 <_free_r>
 8008b66:	2300      	movs	r3, #0
 8008b68:	6363      	str	r3, [r4, #52]	; 0x34
 8008b6a:	2224      	movs	r2, #36	; 0x24
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	4393      	bics	r3, r2
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	2300      	movs	r3, #0
 8008b74:	6063      	str	r3, [r4, #4]
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	89a2      	ldrh	r2, [r4, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <__swsetup_r+0x88>
 8008b88:	21a0      	movs	r1, #160	; 0xa0
 8008b8a:	2280      	movs	r2, #128	; 0x80
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	0089      	lsls	r1, r1, #2
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	400b      	ands	r3, r1
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <__swsetup_r+0x88>
 8008b98:	0021      	movs	r1, r4
 8008b9a:	0028      	movs	r0, r5
 8008b9c:	f000 f892 	bl	8008cc4 <__smakebuf_r>
 8008ba0:	220c      	movs	r2, #12
 8008ba2:	5ea3      	ldrsh	r3, [r4, r2]
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	001a      	movs	r2, r3
 8008ba8:	b299      	uxth	r1, r3
 8008baa:	4002      	ands	r2, r0
 8008bac:	4203      	tst	r3, r0
 8008bae:	d00f      	beq.n	8008bd0 <__swsetup_r+0xb8>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	60a2      	str	r2, [r4, #8]
 8008bb4:	6962      	ldr	r2, [r4, #20]
 8008bb6:	4252      	negs	r2, r2
 8008bb8:	61a2      	str	r2, [r4, #24]
 8008bba:	2000      	movs	r0, #0
 8008bbc:	6922      	ldr	r2, [r4, #16]
 8008bbe:	4282      	cmp	r2, r0
 8008bc0:	d1c4      	bne.n	8008b4c <__swsetup_r+0x34>
 8008bc2:	0609      	lsls	r1, r1, #24
 8008bc4:	d5c2      	bpl.n	8008b4c <__swsetup_r+0x34>
 8008bc6:	2240      	movs	r2, #64	; 0x40
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	3801      	subs	r0, #1
 8008bce:	e7bd      	b.n	8008b4c <__swsetup_r+0x34>
 8008bd0:	0788      	lsls	r0, r1, #30
 8008bd2:	d400      	bmi.n	8008bd6 <__swsetup_r+0xbe>
 8008bd4:	6962      	ldr	r2, [r4, #20]
 8008bd6:	60a2      	str	r2, [r4, #8]
 8008bd8:	e7ef      	b.n	8008bba <__swsetup_r+0xa2>
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	20000064 	.word	0x20000064

08008be0 <_raise_r>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	0004      	movs	r4, r0
 8008be4:	000d      	movs	r5, r1
 8008be6:	291f      	cmp	r1, #31
 8008be8:	d904      	bls.n	8008bf4 <_raise_r+0x14>
 8008bea:	2316      	movs	r3, #22
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	4240      	negs	r0, r0
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <_raise_r+0x24>
 8008bfa:	008a      	lsls	r2, r1, #2
 8008bfc:	189b      	adds	r3, r3, r2
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	d108      	bne.n	8008c16 <_raise_r+0x36>
 8008c04:	0020      	movs	r0, r4
 8008c06:	f000 f831 	bl	8008c6c <_getpid_r>
 8008c0a:	002a      	movs	r2, r5
 8008c0c:	0001      	movs	r1, r0
 8008c0e:	0020      	movs	r0, r4
 8008c10:	f000 f81a 	bl	8008c48 <_kill_r>
 8008c14:	e7ed      	b.n	8008bf2 <_raise_r+0x12>
 8008c16:	2000      	movs	r0, #0
 8008c18:	2a01      	cmp	r2, #1
 8008c1a:	d0ea      	beq.n	8008bf2 <_raise_r+0x12>
 8008c1c:	1c51      	adds	r1, r2, #1
 8008c1e:	d103      	bne.n	8008c28 <_raise_r+0x48>
 8008c20:	2316      	movs	r3, #22
 8008c22:	3001      	adds	r0, #1
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	e7e4      	b.n	8008bf2 <_raise_r+0x12>
 8008c28:	2400      	movs	r4, #0
 8008c2a:	0028      	movs	r0, r5
 8008c2c:	601c      	str	r4, [r3, #0]
 8008c2e:	4790      	blx	r2
 8008c30:	0020      	movs	r0, r4
 8008c32:	e7de      	b.n	8008bf2 <_raise_r+0x12>

08008c34 <raise>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <raise+0x10>)
 8008c38:	0001      	movs	r1, r0
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	f7ff ffd0 	bl	8008be0 <_raise_r>
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	20000064 	.word	0x20000064

08008c48 <_kill_r>:
 8008c48:	2300      	movs	r3, #0
 8008c4a:	b570      	push	{r4, r5, r6, lr}
 8008c4c:	4d06      	ldr	r5, [pc, #24]	; (8008c68 <_kill_r+0x20>)
 8008c4e:	0004      	movs	r4, r0
 8008c50:	0008      	movs	r0, r1
 8008c52:	0011      	movs	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7fa f897 	bl	8002d88 <_kill>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d103      	bne.n	8008c66 <_kill_r+0x1e>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d000      	beq.n	8008c66 <_kill_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	20000558 	.word	0x20000558

08008c6c <_getpid_r>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	f7fa f885 	bl	8002d7c <_getpid>
 8008c72:	bd10      	pop	{r4, pc}

08008c74 <__swhatbuf_r>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	000e      	movs	r6, r1
 8008c78:	001d      	movs	r5, r3
 8008c7a:	230e      	movs	r3, #14
 8008c7c:	5ec9      	ldrsh	r1, [r1, r3]
 8008c7e:	0014      	movs	r4, r2
 8008c80:	b096      	sub	sp, #88	; 0x58
 8008c82:	2900      	cmp	r1, #0
 8008c84:	da0c      	bge.n	8008ca0 <__swhatbuf_r+0x2c>
 8008c86:	89b2      	ldrh	r2, [r6, #12]
 8008c88:	2380      	movs	r3, #128	; 0x80
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	4019      	ands	r1, r3
 8008c8e:	421a      	tst	r2, r3
 8008c90:	d013      	beq.n	8008cba <__swhatbuf_r+0x46>
 8008c92:	2100      	movs	r1, #0
 8008c94:	3b40      	subs	r3, #64	; 0x40
 8008c96:	2000      	movs	r0, #0
 8008c98:	6029      	str	r1, [r5, #0]
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	b016      	add	sp, #88	; 0x58
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	466a      	mov	r2, sp
 8008ca2:	f000 f84d 	bl	8008d40 <_fstat_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	dbed      	blt.n	8008c86 <__swhatbuf_r+0x12>
 8008caa:	23f0      	movs	r3, #240	; 0xf0
 8008cac:	9901      	ldr	r1, [sp, #4]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	4019      	ands	r1, r3
 8008cb2:	4b03      	ldr	r3, [pc, #12]	; (8008cc0 <__swhatbuf_r+0x4c>)
 8008cb4:	18c9      	adds	r1, r1, r3
 8008cb6:	424b      	negs	r3, r1
 8008cb8:	4159      	adcs	r1, r3
 8008cba:	2380      	movs	r3, #128	; 0x80
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	e7ea      	b.n	8008c96 <__swhatbuf_r+0x22>
 8008cc0:	ffffe000 	.word	0xffffe000

08008cc4 <__smakebuf_r>:
 8008cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cc6:	2602      	movs	r6, #2
 8008cc8:	898b      	ldrh	r3, [r1, #12]
 8008cca:	0005      	movs	r5, r0
 8008ccc:	000c      	movs	r4, r1
 8008cce:	4233      	tst	r3, r6
 8008cd0:	d006      	beq.n	8008ce0 <__smakebuf_r+0x1c>
 8008cd2:	0023      	movs	r3, r4
 8008cd4:	3347      	adds	r3, #71	; 0x47
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	6123      	str	r3, [r4, #16]
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6163      	str	r3, [r4, #20]
 8008cde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008ce0:	466a      	mov	r2, sp
 8008ce2:	ab01      	add	r3, sp, #4
 8008ce4:	f7ff ffc6 	bl	8008c74 <__swhatbuf_r>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	0007      	movs	r7, r0
 8008cec:	0028      	movs	r0, r5
 8008cee:	f7ff f80f 	bl	8007d10 <_malloc_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d108      	bne.n	8008d08 <__smakebuf_r+0x44>
 8008cf6:	220c      	movs	r2, #12
 8008cf8:	5ea3      	ldrsh	r3, [r4, r2]
 8008cfa:	059a      	lsls	r2, r3, #22
 8008cfc:	d4ef      	bmi.n	8008cde <__smakebuf_r+0x1a>
 8008cfe:	2203      	movs	r2, #3
 8008d00:	4393      	bics	r3, r2
 8008d02:	431e      	orrs	r6, r3
 8008d04:	81a6      	strh	r6, [r4, #12]
 8008d06:	e7e4      	b.n	8008cd2 <__smakebuf_r+0xe>
 8008d08:	2380      	movs	r3, #128	; 0x80
 8008d0a:	89a2      	ldrh	r2, [r4, #12]
 8008d0c:	6020      	str	r0, [r4, #0]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	9b00      	ldr	r3, [sp, #0]
 8008d14:	6120      	str	r0, [r4, #16]
 8008d16:	6163      	str	r3, [r4, #20]
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <__smakebuf_r+0x74>
 8008d1e:	0028      	movs	r0, r5
 8008d20:	230e      	movs	r3, #14
 8008d22:	5ee1      	ldrsh	r1, [r4, r3]
 8008d24:	f000 f81e 	bl	8008d64 <_isatty_r>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d005      	beq.n	8008d38 <__smakebuf_r+0x74>
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	89a2      	ldrh	r2, [r4, #12]
 8008d30:	439a      	bics	r2, r3
 8008d32:	3b02      	subs	r3, #2
 8008d34:	4313      	orrs	r3, r2
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	433b      	orrs	r3, r7
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	e7ce      	b.n	8008cde <__smakebuf_r+0x1a>

08008d40 <_fstat_r>:
 8008d40:	2300      	movs	r3, #0
 8008d42:	b570      	push	{r4, r5, r6, lr}
 8008d44:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_fstat_r+0x20>)
 8008d46:	0004      	movs	r4, r0
 8008d48:	0008      	movs	r0, r1
 8008d4a:	0011      	movs	r1, r2
 8008d4c:	602b      	str	r3, [r5, #0]
 8008d4e:	f7fa f87a 	bl	8002e46 <_fstat>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	d103      	bne.n	8008d5e <_fstat_r+0x1e>
 8008d56:	682b      	ldr	r3, [r5, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d000      	beq.n	8008d5e <_fstat_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	20000558 	.word	0x20000558

08008d64 <_isatty_r>:
 8008d64:	2300      	movs	r3, #0
 8008d66:	b570      	push	{r4, r5, r6, lr}
 8008d68:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_isatty_r+0x20>)
 8008d6a:	0004      	movs	r4, r0
 8008d6c:	0008      	movs	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7fa f877 	bl	8002e62 <_isatty>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d103      	bne.n	8008d80 <_isatty_r+0x1c>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d000      	beq.n	8008d80 <_isatty_r+0x1c>
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	20000558 	.word	0x20000558

08008d88 <_init>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr

08008d94 <_fini>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr
