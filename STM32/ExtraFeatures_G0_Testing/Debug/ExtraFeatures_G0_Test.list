
ExtraFeatures_G0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b680  0800b680  0001b680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb84  0800bb84  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb84  0800bb84  0001bb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb8c  0800bb8c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb90  0800bb90  0001bb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bb94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001d4  0800bd68  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800bd68  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f87  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de6  00000000  00000000  000361c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e99  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ef6  00000000  00000000  0003b0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018057  00000000  00000000  00053fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ae5d  00000000  00000000  0006c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005560  00000000  00000000  00106e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0010c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b664 	.word	0x0800b664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800b664 	.word	0x0800b664

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa61 	bl	8001904 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b1 	bl	80017b4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa53 	bl	8001904 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa49 	bl	8001904 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9d9 	bl	8001838 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9cf 	bl	8001838 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 faa5 	bl	8000a00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa31 	bl	8000928 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa97 	bl	8000a00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fa8d 	bl	8000a00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa3d 	bl	8000974 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa33 	bl	8000974 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f806 	bl	800055c <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__udivmoddi4>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	4657      	mov	r7, sl
 8000560:	464e      	mov	r6, r9
 8000562:	4645      	mov	r5, r8
 8000564:	46de      	mov	lr, fp
 8000566:	b5e0      	push	{r5, r6, r7, lr}
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	4692      	mov	sl, r2
 800056e:	4699      	mov	r9, r3
 8000570:	b083      	sub	sp, #12
 8000572:	428b      	cmp	r3, r1
 8000574:	d830      	bhi.n	80005d8 <__udivmoddi4+0x7c>
 8000576:	d02d      	beq.n	80005d4 <__udivmoddi4+0x78>
 8000578:	4649      	mov	r1, r9
 800057a:	4650      	mov	r0, sl
 800057c:	f002 f97a 	bl	8002874 <__clzdi2>
 8000580:	0029      	movs	r1, r5
 8000582:	0006      	movs	r6, r0
 8000584:	0020      	movs	r0, r4
 8000586:	f002 f975 	bl	8002874 <__clzdi2>
 800058a:	1a33      	subs	r3, r6, r0
 800058c:	4698      	mov	r8, r3
 800058e:	3b20      	subs	r3, #32
 8000590:	d434      	bmi.n	80005fc <__udivmoddi4+0xa0>
 8000592:	469b      	mov	fp, r3
 8000594:	4653      	mov	r3, sl
 8000596:	465a      	mov	r2, fp
 8000598:	4093      	lsls	r3, r2
 800059a:	4642      	mov	r2, r8
 800059c:	001f      	movs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d83b      	bhi.n	8000620 <__udivmoddi4+0xc4>
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d100      	bne.n	80005ae <__udivmoddi4+0x52>
 80005ac:	e079      	b.n	80006a2 <__udivmoddi4+0x146>
 80005ae:	465b      	mov	r3, fp
 80005b0:	1ba4      	subs	r4, r4, r6
 80005b2:	41bd      	sbcs	r5, r7
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da00      	bge.n	80005ba <__udivmoddi4+0x5e>
 80005b8:	e076      	b.n	80006a8 <__udivmoddi4+0x14c>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	465a      	mov	r2, fp
 80005c6:	4093      	lsls	r3, r2
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4642      	mov	r2, r8
 80005ce:	4093      	lsls	r3, r2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	e029      	b.n	8000628 <__udivmoddi4+0xcc>
 80005d4:	4282      	cmp	r2, r0
 80005d6:	d9cf      	bls.n	8000578 <__udivmoddi4+0x1c>
 80005d8:	2200      	movs	r2, #0
 80005da:	2300      	movs	r3, #0
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <__udivmoddi4+0x8e>
 80005e6:	601c      	str	r4, [r3, #0]
 80005e8:	605d      	str	r5, [r3, #4]
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	b003      	add	sp, #12
 80005f0:	bcf0      	pop	{r4, r5, r6, r7}
 80005f2:	46bb      	mov	fp, r7
 80005f4:	46b2      	mov	sl, r6
 80005f6:	46a9      	mov	r9, r5
 80005f8:	46a0      	mov	r8, r4
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	4642      	mov	r2, r8
 80005fe:	469b      	mov	fp, r3
 8000600:	2320      	movs	r3, #32
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	4652      	mov	r2, sl
 8000606:	40da      	lsrs	r2, r3
 8000608:	4641      	mov	r1, r8
 800060a:	0013      	movs	r3, r2
 800060c:	464a      	mov	r2, r9
 800060e:	408a      	lsls	r2, r1
 8000610:	0017      	movs	r7, r2
 8000612:	4642      	mov	r2, r8
 8000614:	431f      	orrs	r7, r3
 8000616:	4653      	mov	r3, sl
 8000618:	4093      	lsls	r3, r2
 800061a:	001e      	movs	r6, r3
 800061c:	42af      	cmp	r7, r5
 800061e:	d9c3      	bls.n	80005a8 <__udivmoddi4+0x4c>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	4643      	mov	r3, r8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0d8      	beq.n	80005e0 <__udivmoddi4+0x84>
 800062e:	07fb      	lsls	r3, r7, #31
 8000630:	0872      	lsrs	r2, r6, #1
 8000632:	431a      	orrs	r2, r3
 8000634:	4646      	mov	r6, r8
 8000636:	087b      	lsrs	r3, r7, #1
 8000638:	e00e      	b.n	8000658 <__udivmoddi4+0xfc>
 800063a:	42ab      	cmp	r3, r5
 800063c:	d101      	bne.n	8000642 <__udivmoddi4+0xe6>
 800063e:	42a2      	cmp	r2, r4
 8000640:	d80c      	bhi.n	800065c <__udivmoddi4+0x100>
 8000642:	1aa4      	subs	r4, r4, r2
 8000644:	419d      	sbcs	r5, r3
 8000646:	2001      	movs	r0, #1
 8000648:	1924      	adds	r4, r4, r4
 800064a:	416d      	adcs	r5, r5
 800064c:	2100      	movs	r1, #0
 800064e:	3e01      	subs	r6, #1
 8000650:	1824      	adds	r4, r4, r0
 8000652:	414d      	adcs	r5, r1
 8000654:	2e00      	cmp	r6, #0
 8000656:	d006      	beq.n	8000666 <__udivmoddi4+0x10a>
 8000658:	42ab      	cmp	r3, r5
 800065a:	d9ee      	bls.n	800063a <__udivmoddi4+0xde>
 800065c:	3e01      	subs	r6, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2e00      	cmp	r6, #0
 8000664:	d1f8      	bne.n	8000658 <__udivmoddi4+0xfc>
 8000666:	9800      	ldr	r0, [sp, #0]
 8000668:	9901      	ldr	r1, [sp, #4]
 800066a:	465b      	mov	r3, fp
 800066c:	1900      	adds	r0, r0, r4
 800066e:	4169      	adcs	r1, r5
 8000670:	2b00      	cmp	r3, #0
 8000672:	db24      	blt.n	80006be <__udivmoddi4+0x162>
 8000674:	002b      	movs	r3, r5
 8000676:	465a      	mov	r2, fp
 8000678:	4644      	mov	r4, r8
 800067a:	40d3      	lsrs	r3, r2
 800067c:	002a      	movs	r2, r5
 800067e:	40e2      	lsrs	r2, r4
 8000680:	001c      	movs	r4, r3
 8000682:	465b      	mov	r3, fp
 8000684:	0015      	movs	r5, r2
 8000686:	2b00      	cmp	r3, #0
 8000688:	db2a      	blt.n	80006e0 <__udivmoddi4+0x184>
 800068a:	0026      	movs	r6, r4
 800068c:	409e      	lsls	r6, r3
 800068e:	0033      	movs	r3, r6
 8000690:	0026      	movs	r6, r4
 8000692:	4647      	mov	r7, r8
 8000694:	40be      	lsls	r6, r7
 8000696:	0032      	movs	r2, r6
 8000698:	1a80      	subs	r0, r0, r2
 800069a:	4199      	sbcs	r1, r3
 800069c:	9000      	str	r0, [sp, #0]
 800069e:	9101      	str	r1, [sp, #4]
 80006a0:	e79e      	b.n	80005e0 <__udivmoddi4+0x84>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d8bc      	bhi.n	8000620 <__udivmoddi4+0xc4>
 80006a6:	e782      	b.n	80005ae <__udivmoddi4+0x52>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	9100      	str	r1, [sp, #0]
 80006b4:	9201      	str	r2, [sp, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	40da      	lsrs	r2, r3
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	e785      	b.n	80005ca <__udivmoddi4+0x6e>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	4646      	mov	r6, r8
 80006c8:	409a      	lsls	r2, r3
 80006ca:	0023      	movs	r3, r4
 80006cc:	40f3      	lsrs	r3, r6
 80006ce:	4644      	mov	r4, r8
 80006d0:	4313      	orrs	r3, r2
 80006d2:	002a      	movs	r2, r5
 80006d4:	40e2      	lsrs	r2, r4
 80006d6:	001c      	movs	r4, r3
 80006d8:	465b      	mov	r3, fp
 80006da:	0015      	movs	r5, r2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	dad4      	bge.n	800068a <__udivmoddi4+0x12e>
 80006e0:	4642      	mov	r2, r8
 80006e2:	002f      	movs	r7, r5
 80006e4:	2320      	movs	r3, #32
 80006e6:	0026      	movs	r6, r4
 80006e8:	4097      	lsls	r7, r2
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	40de      	lsrs	r6, r3
 80006ee:	003b      	movs	r3, r7
 80006f0:	4333      	orrs	r3, r6
 80006f2:	e7cd      	b.n	8000690 <__udivmoddi4+0x134>

080006f4 <__aeabi_fdiv>:
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	4646      	mov	r6, r8
 80006fa:	46d6      	mov	lr, sl
 80006fc:	0245      	lsls	r5, r0, #9
 80006fe:	b5c0      	push	{r6, r7, lr}
 8000700:	0047      	lsls	r7, r0, #1
 8000702:	1c0c      	adds	r4, r1, #0
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	0e3f      	lsrs	r7, r7, #24
 8000708:	0fc6      	lsrs	r6, r0, #31
 800070a:	2f00      	cmp	r7, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fdiv+0x1c>
 800070e:	e06f      	b.n	80007f0 <__aeabi_fdiv+0xfc>
 8000710:	2fff      	cmp	r7, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fdiv+0x22>
 8000714:	e074      	b.n	8000800 <__aeabi_fdiv+0x10c>
 8000716:	2300      	movs	r3, #0
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	4699      	mov	r9, r3
 800071c:	469a      	mov	sl, r3
 800071e:	00ed      	lsls	r5, r5, #3
 8000720:	04d2      	lsls	r2, r2, #19
 8000722:	4315      	orrs	r5, r2
 8000724:	3f7f      	subs	r7, #127	; 0x7f
 8000726:	0263      	lsls	r3, r4, #9
 8000728:	0a5b      	lsrs	r3, r3, #9
 800072a:	4698      	mov	r8, r3
 800072c:	0063      	lsls	r3, r4, #1
 800072e:	0e1b      	lsrs	r3, r3, #24
 8000730:	0fe4      	lsrs	r4, r4, #31
 8000732:	2b00      	cmp	r3, #0
 8000734:	d04d      	beq.n	80007d2 <__aeabi_fdiv+0xde>
 8000736:	2bff      	cmp	r3, #255	; 0xff
 8000738:	d045      	beq.n	80007c6 <__aeabi_fdiv+0xd2>
 800073a:	4642      	mov	r2, r8
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	04c9      	lsls	r1, r1, #19
 8000742:	4311      	orrs	r1, r2
 8000744:	4688      	mov	r8, r1
 8000746:	2200      	movs	r2, #0
 8000748:	3b7f      	subs	r3, #127	; 0x7f
 800074a:	0031      	movs	r1, r6
 800074c:	1aff      	subs	r7, r7, r3
 800074e:	464b      	mov	r3, r9
 8000750:	4061      	eors	r1, r4
 8000752:	b2c9      	uxtb	r1, r1
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d900      	bls.n	800075a <__aeabi_fdiv+0x66>
 8000758:	e0b8      	b.n	80008cc <__aeabi_fdiv+0x1d8>
 800075a:	4870      	ldr	r0, [pc, #448]	; (800091c <__aeabi_fdiv+0x228>)
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	58c3      	ldr	r3, [r0, r3]
 8000760:	469f      	mov	pc, r3
 8000762:	2300      	movs	r3, #0
 8000764:	4698      	mov	r8, r3
 8000766:	0026      	movs	r6, r4
 8000768:	4645      	mov	r5, r8
 800076a:	4692      	mov	sl, r2
 800076c:	4653      	mov	r3, sl
 800076e:	2b02      	cmp	r3, #2
 8000770:	d100      	bne.n	8000774 <__aeabi_fdiv+0x80>
 8000772:	e08d      	b.n	8000890 <__aeabi_fdiv+0x19c>
 8000774:	2b03      	cmp	r3, #3
 8000776:	d100      	bne.n	800077a <__aeabi_fdiv+0x86>
 8000778:	e0a1      	b.n	80008be <__aeabi_fdiv+0x1ca>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d018      	beq.n	80007b0 <__aeabi_fdiv+0xbc>
 800077e:	003b      	movs	r3, r7
 8000780:	337f      	adds	r3, #127	; 0x7f
 8000782:	2b00      	cmp	r3, #0
 8000784:	dd6d      	ble.n	8000862 <__aeabi_fdiv+0x16e>
 8000786:	076a      	lsls	r2, r5, #29
 8000788:	d004      	beq.n	8000794 <__aeabi_fdiv+0xa0>
 800078a:	220f      	movs	r2, #15
 800078c:	402a      	ands	r2, r5
 800078e:	2a04      	cmp	r2, #4
 8000790:	d000      	beq.n	8000794 <__aeabi_fdiv+0xa0>
 8000792:	3504      	adds	r5, #4
 8000794:	012a      	lsls	r2, r5, #4
 8000796:	d503      	bpl.n	80007a0 <__aeabi_fdiv+0xac>
 8000798:	4b61      	ldr	r3, [pc, #388]	; (8000920 <__aeabi_fdiv+0x22c>)
 800079a:	401d      	ands	r5, r3
 800079c:	003b      	movs	r3, r7
 800079e:	3380      	adds	r3, #128	; 0x80
 80007a0:	2bfe      	cmp	r3, #254	; 0xfe
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_fdiv+0xb2>
 80007a4:	e074      	b.n	8000890 <__aeabi_fdiv+0x19c>
 80007a6:	01aa      	lsls	r2, r5, #6
 80007a8:	0a52      	lsrs	r2, r2, #9
 80007aa:	b2d8      	uxtb	r0, r3
 80007ac:	e002      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 80007ae:	000e      	movs	r6, r1
 80007b0:	2000      	movs	r0, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	05c0      	lsls	r0, r0, #23
 80007b6:	07f6      	lsls	r6, r6, #31
 80007b8:	4310      	orrs	r0, r2
 80007ba:	4330      	orrs	r0, r6
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	4643      	mov	r3, r8
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d13f      	bne.n	800084c <__aeabi_fdiv+0x158>
 80007cc:	2202      	movs	r2, #2
 80007ce:	3fff      	subs	r7, #255	; 0xff
 80007d0:	e003      	b.n	80007da <__aeabi_fdiv+0xe6>
 80007d2:	4643      	mov	r3, r8
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d12d      	bne.n	8000834 <__aeabi_fdiv+0x140>
 80007d8:	2201      	movs	r2, #1
 80007da:	0031      	movs	r1, r6
 80007dc:	464b      	mov	r3, r9
 80007de:	4061      	eors	r1, r4
 80007e0:	b2c9      	uxtb	r1, r1
 80007e2:	4313      	orrs	r3, r2
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d838      	bhi.n	800085a <__aeabi_fdiv+0x166>
 80007e8:	484e      	ldr	r0, [pc, #312]	; (8000924 <__aeabi_fdiv+0x230>)
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	58c3      	ldr	r3, [r0, r3]
 80007ee:	469f      	mov	pc, r3
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d113      	bne.n	800081c <__aeabi_fdiv+0x128>
 80007f4:	2304      	movs	r3, #4
 80007f6:	4699      	mov	r9, r3
 80007f8:	3b03      	subs	r3, #3
 80007fa:	2700      	movs	r7, #0
 80007fc:	469a      	mov	sl, r3
 80007fe:	e792      	b.n	8000726 <__aeabi_fdiv+0x32>
 8000800:	2d00      	cmp	r5, #0
 8000802:	d105      	bne.n	8000810 <__aeabi_fdiv+0x11c>
 8000804:	2308      	movs	r3, #8
 8000806:	4699      	mov	r9, r3
 8000808:	3b06      	subs	r3, #6
 800080a:	27ff      	movs	r7, #255	; 0xff
 800080c:	469a      	mov	sl, r3
 800080e:	e78a      	b.n	8000726 <__aeabi_fdiv+0x32>
 8000810:	230c      	movs	r3, #12
 8000812:	4699      	mov	r9, r3
 8000814:	3b09      	subs	r3, #9
 8000816:	27ff      	movs	r7, #255	; 0xff
 8000818:	469a      	mov	sl, r3
 800081a:	e784      	b.n	8000726 <__aeabi_fdiv+0x32>
 800081c:	0028      	movs	r0, r5
 800081e:	f002 f80b 	bl	8002838 <__clzsi2>
 8000822:	2776      	movs	r7, #118	; 0x76
 8000824:	1f43      	subs	r3, r0, #5
 8000826:	409d      	lsls	r5, r3
 8000828:	2300      	movs	r3, #0
 800082a:	427f      	negs	r7, r7
 800082c:	4699      	mov	r9, r3
 800082e:	469a      	mov	sl, r3
 8000830:	1a3f      	subs	r7, r7, r0
 8000832:	e778      	b.n	8000726 <__aeabi_fdiv+0x32>
 8000834:	4640      	mov	r0, r8
 8000836:	f001 ffff 	bl	8002838 <__clzsi2>
 800083a:	4642      	mov	r2, r8
 800083c:	1f43      	subs	r3, r0, #5
 800083e:	409a      	lsls	r2, r3
 8000840:	2376      	movs	r3, #118	; 0x76
 8000842:	425b      	negs	r3, r3
 8000844:	4690      	mov	r8, r2
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	2200      	movs	r2, #0
 800084a:	e77e      	b.n	800074a <__aeabi_fdiv+0x56>
 800084c:	2303      	movs	r3, #3
 800084e:	464a      	mov	r2, r9
 8000850:	431a      	orrs	r2, r3
 8000852:	4691      	mov	r9, r2
 8000854:	33fc      	adds	r3, #252	; 0xfc
 8000856:	2203      	movs	r2, #3
 8000858:	e777      	b.n	800074a <__aeabi_fdiv+0x56>
 800085a:	000e      	movs	r6, r1
 800085c:	20ff      	movs	r0, #255	; 0xff
 800085e:	2200      	movs	r2, #0
 8000860:	e7a8      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 8000862:	2201      	movs	r2, #1
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	2b1b      	cmp	r3, #27
 8000868:	dca2      	bgt.n	80007b0 <__aeabi_fdiv+0xbc>
 800086a:	379e      	adds	r7, #158	; 0x9e
 800086c:	002a      	movs	r2, r5
 800086e:	40bd      	lsls	r5, r7
 8000870:	40da      	lsrs	r2, r3
 8000872:	1e6b      	subs	r3, r5, #1
 8000874:	419d      	sbcs	r5, r3
 8000876:	4315      	orrs	r5, r2
 8000878:	076a      	lsls	r2, r5, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0x192>
 800087c:	220f      	movs	r2, #15
 800087e:	402a      	ands	r2, r5
 8000880:	2a04      	cmp	r2, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0x192>
 8000884:	3504      	adds	r5, #4
 8000886:	016a      	lsls	r2, r5, #5
 8000888:	d544      	bpl.n	8000914 <__aeabi_fdiv+0x220>
 800088a:	2001      	movs	r0, #1
 800088c:	2200      	movs	r2, #0
 800088e:	e791      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 8000890:	20ff      	movs	r0, #255	; 0xff
 8000892:	2200      	movs	r2, #0
 8000894:	e78e      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	2600      	movs	r6, #0
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	e789      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 80008a0:	2300      	movs	r3, #0
 80008a2:	4698      	mov	r8, r3
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	03d2      	lsls	r2, r2, #15
 80008a8:	4215      	tst	r5, r2
 80008aa:	d008      	beq.n	80008be <__aeabi_fdiv+0x1ca>
 80008ac:	4643      	mov	r3, r8
 80008ae:	4213      	tst	r3, r2
 80008b0:	d105      	bne.n	80008be <__aeabi_fdiv+0x1ca>
 80008b2:	431a      	orrs	r2, r3
 80008b4:	0252      	lsls	r2, r2, #9
 80008b6:	0026      	movs	r6, r4
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	0a52      	lsrs	r2, r2, #9
 80008bc:	e77a      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	432a      	orrs	r2, r5
 80008c4:	0252      	lsls	r2, r2, #9
 80008c6:	20ff      	movs	r0, #255	; 0xff
 80008c8:	0a52      	lsrs	r2, r2, #9
 80008ca:	e773      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 80008cc:	4642      	mov	r2, r8
 80008ce:	016b      	lsls	r3, r5, #5
 80008d0:	0155      	lsls	r5, r2, #5
 80008d2:	42ab      	cmp	r3, r5
 80008d4:	d21a      	bcs.n	800090c <__aeabi_fdiv+0x218>
 80008d6:	201b      	movs	r0, #27
 80008d8:	2200      	movs	r2, #0
 80008da:	3f01      	subs	r7, #1
 80008dc:	2601      	movs	r6, #1
 80008de:	001c      	movs	r4, r3
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	db01      	blt.n	80008ec <__aeabi_fdiv+0x1f8>
 80008e8:	429d      	cmp	r5, r3
 80008ea:	d801      	bhi.n	80008f0 <__aeabi_fdiv+0x1fc>
 80008ec:	1b5b      	subs	r3, r3, r5
 80008ee:	4332      	orrs	r2, r6
 80008f0:	3801      	subs	r0, #1
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d1f3      	bne.n	80008de <__aeabi_fdiv+0x1ea>
 80008f6:	1e58      	subs	r0, r3, #1
 80008f8:	4183      	sbcs	r3, r0
 80008fa:	4313      	orrs	r3, r2
 80008fc:	001d      	movs	r5, r3
 80008fe:	003b      	movs	r3, r7
 8000900:	337f      	adds	r3, #127	; 0x7f
 8000902:	000e      	movs	r6, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	dd00      	ble.n	800090a <__aeabi_fdiv+0x216>
 8000908:	e73d      	b.n	8000786 <__aeabi_fdiv+0x92>
 800090a:	e7aa      	b.n	8000862 <__aeabi_fdiv+0x16e>
 800090c:	201a      	movs	r0, #26
 800090e:	2201      	movs	r2, #1
 8000910:	1b5b      	subs	r3, r3, r5
 8000912:	e7e3      	b.n	80008dc <__aeabi_fdiv+0x1e8>
 8000914:	01aa      	lsls	r2, r5, #6
 8000916:	2000      	movs	r0, #0
 8000918:	0a52      	lsrs	r2, r2, #9
 800091a:	e74b      	b.n	80007b4 <__aeabi_fdiv+0xc0>
 800091c:	0800b688 	.word	0x0800b688
 8000920:	f7ffffff 	.word	0xf7ffffff
 8000924:	0800b6c8 	.word	0x0800b6c8

08000928 <__eqsf2>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	0042      	lsls	r2, r0, #1
 800092c:	0245      	lsls	r5, r0, #9
 800092e:	024e      	lsls	r6, r1, #9
 8000930:	004c      	lsls	r4, r1, #1
 8000932:	0fc3      	lsrs	r3, r0, #31
 8000934:	0a6d      	lsrs	r5, r5, #9
 8000936:	2001      	movs	r0, #1
 8000938:	0e12      	lsrs	r2, r2, #24
 800093a:	0a76      	lsrs	r6, r6, #9
 800093c:	0e24      	lsrs	r4, r4, #24
 800093e:	0fc9      	lsrs	r1, r1, #31
 8000940:	2aff      	cmp	r2, #255	; 0xff
 8000942:	d006      	beq.n	8000952 <__eqsf2+0x2a>
 8000944:	2cff      	cmp	r4, #255	; 0xff
 8000946:	d003      	beq.n	8000950 <__eqsf2+0x28>
 8000948:	42a2      	cmp	r2, r4
 800094a:	d101      	bne.n	8000950 <__eqsf2+0x28>
 800094c:	42b5      	cmp	r5, r6
 800094e:	d006      	beq.n	800095e <__eqsf2+0x36>
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	2d00      	cmp	r5, #0
 8000954:	d1fc      	bne.n	8000950 <__eqsf2+0x28>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d1fa      	bne.n	8000950 <__eqsf2+0x28>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d1f8      	bne.n	8000950 <__eqsf2+0x28>
 800095e:	428b      	cmp	r3, r1
 8000960:	d006      	beq.n	8000970 <__eqsf2+0x48>
 8000962:	2001      	movs	r0, #1
 8000964:	2a00      	cmp	r2, #0
 8000966:	d1f3      	bne.n	8000950 <__eqsf2+0x28>
 8000968:	0028      	movs	r0, r5
 800096a:	1e43      	subs	r3, r0, #1
 800096c:	4198      	sbcs	r0, r3
 800096e:	e7ef      	b.n	8000950 <__eqsf2+0x28>
 8000970:	2000      	movs	r0, #0
 8000972:	e7ed      	b.n	8000950 <__eqsf2+0x28>

08000974 <__gesf2>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	0042      	lsls	r2, r0, #1
 8000978:	0245      	lsls	r5, r0, #9
 800097a:	024e      	lsls	r6, r1, #9
 800097c:	004c      	lsls	r4, r1, #1
 800097e:	0fc3      	lsrs	r3, r0, #31
 8000980:	0a6d      	lsrs	r5, r5, #9
 8000982:	0e12      	lsrs	r2, r2, #24
 8000984:	0a76      	lsrs	r6, r6, #9
 8000986:	0e24      	lsrs	r4, r4, #24
 8000988:	0fc8      	lsrs	r0, r1, #31
 800098a:	2aff      	cmp	r2, #255	; 0xff
 800098c:	d01b      	beq.n	80009c6 <__gesf2+0x52>
 800098e:	2cff      	cmp	r4, #255	; 0xff
 8000990:	d00e      	beq.n	80009b0 <__gesf2+0x3c>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d11b      	bne.n	80009ce <__gesf2+0x5a>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d101      	bne.n	800099e <__gesf2+0x2a>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d01c      	beq.n	80009d8 <__gesf2+0x64>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d00c      	beq.n	80009bc <__gesf2+0x48>
 80009a2:	4283      	cmp	r3, r0
 80009a4:	d01c      	beq.n	80009e0 <__gesf2+0x6c>
 80009a6:	2102      	movs	r1, #2
 80009a8:	1e58      	subs	r0, r3, #1
 80009aa:	4008      	ands	r0, r1
 80009ac:	3801      	subs	r0, #1
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d122      	bne.n	80009fa <__gesf2+0x86>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d1f4      	bne.n	80009a2 <__gesf2+0x2e>
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d1f2      	bne.n	80009a2 <__gesf2+0x2e>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d1f6      	bne.n	80009ae <__gesf2+0x3a>
 80009c0:	2001      	movs	r0, #1
 80009c2:	4240      	negs	r0, r0
 80009c4:	e7f3      	b.n	80009ae <__gesf2+0x3a>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	d117      	bne.n	80009fa <__gesf2+0x86>
 80009ca:	2cff      	cmp	r4, #255	; 0xff
 80009cc:	d0f0      	beq.n	80009b0 <__gesf2+0x3c>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d1e7      	bne.n	80009a2 <__gesf2+0x2e>
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d1e5      	bne.n	80009a2 <__gesf2+0x2e>
 80009d6:	e7e6      	b.n	80009a6 <__gesf2+0x32>
 80009d8:	2000      	movs	r0, #0
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e7      	beq.n	80009ae <__gesf2+0x3a>
 80009de:	e7e2      	b.n	80009a6 <__gesf2+0x32>
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	dc05      	bgt.n	80009f0 <__gesf2+0x7c>
 80009e4:	dbea      	blt.n	80009bc <__gesf2+0x48>
 80009e6:	42b5      	cmp	r5, r6
 80009e8:	d802      	bhi.n	80009f0 <__gesf2+0x7c>
 80009ea:	d3e7      	bcc.n	80009bc <__gesf2+0x48>
 80009ec:	2000      	movs	r0, #0
 80009ee:	e7de      	b.n	80009ae <__gesf2+0x3a>
 80009f0:	4243      	negs	r3, r0
 80009f2:	4158      	adcs	r0, r3
 80009f4:	0040      	lsls	r0, r0, #1
 80009f6:	3801      	subs	r0, #1
 80009f8:	e7d9      	b.n	80009ae <__gesf2+0x3a>
 80009fa:	2002      	movs	r0, #2
 80009fc:	4240      	negs	r0, r0
 80009fe:	e7d6      	b.n	80009ae <__gesf2+0x3a>

08000a00 <__lesf2>:
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	0042      	lsls	r2, r0, #1
 8000a04:	0245      	lsls	r5, r0, #9
 8000a06:	024e      	lsls	r6, r1, #9
 8000a08:	004c      	lsls	r4, r1, #1
 8000a0a:	0fc3      	lsrs	r3, r0, #31
 8000a0c:	0a6d      	lsrs	r5, r5, #9
 8000a0e:	0e12      	lsrs	r2, r2, #24
 8000a10:	0a76      	lsrs	r6, r6, #9
 8000a12:	0e24      	lsrs	r4, r4, #24
 8000a14:	0fc8      	lsrs	r0, r1, #31
 8000a16:	2aff      	cmp	r2, #255	; 0xff
 8000a18:	d00b      	beq.n	8000a32 <__lesf2+0x32>
 8000a1a:	2cff      	cmp	r4, #255	; 0xff
 8000a1c:	d00d      	beq.n	8000a3a <__lesf2+0x3a>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d11f      	bne.n	8000a62 <__lesf2+0x62>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d116      	bne.n	8000a54 <__lesf2+0x54>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d114      	bne.n	8000a54 <__lesf2+0x54>
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d010      	beq.n	8000a52 <__lesf2+0x52>
 8000a30:	e009      	b.n	8000a46 <__lesf2+0x46>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d10c      	bne.n	8000a50 <__lesf2+0x50>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d113      	bne.n	8000a62 <__lesf2+0x62>
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d108      	bne.n	8000a50 <__lesf2+0x50>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d008      	beq.n	8000a54 <__lesf2+0x54>
 8000a42:	4283      	cmp	r3, r0
 8000a44:	d012      	beq.n	8000a6c <__lesf2+0x6c>
 8000a46:	2102      	movs	r1, #2
 8000a48:	1e58      	subs	r0, r3, #1
 8000a4a:	4008      	ands	r0, r1
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	e000      	b.n	8000a52 <__lesf2+0x52>
 8000a50:	2002      	movs	r0, #2
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d1f4      	bne.n	8000a42 <__lesf2+0x42>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d1fa      	bne.n	8000a52 <__lesf2+0x52>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	4240      	negs	r0, r0
 8000a60:	e7f7      	b.n	8000a52 <__lesf2+0x52>
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d1ed      	bne.n	8000a42 <__lesf2+0x42>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d1eb      	bne.n	8000a42 <__lesf2+0x42>
 8000a6a:	e7ec      	b.n	8000a46 <__lesf2+0x46>
 8000a6c:	42a2      	cmp	r2, r4
 8000a6e:	dc05      	bgt.n	8000a7c <__lesf2+0x7c>
 8000a70:	dbf2      	blt.n	8000a58 <__lesf2+0x58>
 8000a72:	42b5      	cmp	r5, r6
 8000a74:	d802      	bhi.n	8000a7c <__lesf2+0x7c>
 8000a76:	d3ef      	bcc.n	8000a58 <__lesf2+0x58>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e7ea      	b.n	8000a52 <__lesf2+0x52>
 8000a7c:	4243      	negs	r3, r0
 8000a7e:	4158      	adcs	r0, r3
 8000a80:	0040      	lsls	r0, r0, #1
 8000a82:	3801      	subs	r0, #1
 8000a84:	e7e5      	b.n	8000a52 <__lesf2+0x52>
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <__aeabi_ui2f>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	1e04      	subs	r4, r0, #0
 8000a8c:	d00e      	beq.n	8000aac <__aeabi_ui2f+0x24>
 8000a8e:	f001 fed3 	bl	8002838 <__clzsi2>
 8000a92:	239e      	movs	r3, #158	; 0x9e
 8000a94:	0001      	movs	r1, r0
 8000a96:	1a1b      	subs	r3, r3, r0
 8000a98:	2b96      	cmp	r3, #150	; 0x96
 8000a9a:	dc0c      	bgt.n	8000ab6 <__aeabi_ui2f+0x2e>
 8000a9c:	2808      	cmp	r0, #8
 8000a9e:	d02c      	beq.n	8000afa <__aeabi_ui2f+0x72>
 8000aa0:	3908      	subs	r1, #8
 8000aa2:	408c      	lsls	r4, r1
 8000aa4:	0264      	lsls	r4, r4, #9
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e001      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2400      	movs	r4, #0
 8000ab0:	05c0      	lsls	r0, r0, #23
 8000ab2:	4320      	orrs	r0, r4
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	2b99      	cmp	r3, #153	; 0x99
 8000ab8:	dd0a      	ble.n	8000ad0 <__aeabi_ui2f+0x48>
 8000aba:	0002      	movs	r2, r0
 8000abc:	0020      	movs	r0, r4
 8000abe:	321b      	adds	r2, #27
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	1e50      	subs	r0, r2, #1
 8000ac6:	4182      	sbcs	r2, r0
 8000ac8:	2005      	movs	r0, #5
 8000aca:	1a40      	subs	r0, r0, r1
 8000acc:	40c4      	lsrs	r4, r0
 8000ace:	4314      	orrs	r4, r2
 8000ad0:	2905      	cmp	r1, #5
 8000ad2:	dc16      	bgt.n	8000b02 <__aeabi_ui2f+0x7a>
 8000ad4:	0022      	movs	r2, r4
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <__aeabi_ui2f+0x8c>)
 8000ad8:	4002      	ands	r2, r0
 8000ada:	0765      	lsls	r5, r4, #29
 8000adc:	d009      	beq.n	8000af2 <__aeabi_ui2f+0x6a>
 8000ade:	250f      	movs	r5, #15
 8000ae0:	402c      	ands	r4, r5
 8000ae2:	2c04      	cmp	r4, #4
 8000ae4:	d005      	beq.n	8000af2 <__aeabi_ui2f+0x6a>
 8000ae6:	3204      	adds	r2, #4
 8000ae8:	0154      	lsls	r4, r2, #5
 8000aea:	d502      	bpl.n	8000af2 <__aeabi_ui2f+0x6a>
 8000aec:	239f      	movs	r3, #159	; 0x9f
 8000aee:	4002      	ands	r2, r0
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	0192      	lsls	r2, r2, #6
 8000af4:	0a54      	lsrs	r4, r2, #9
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	e7da      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000afa:	0264      	lsls	r4, r4, #9
 8000afc:	2096      	movs	r0, #150	; 0x96
 8000afe:	0a64      	lsrs	r4, r4, #9
 8000b00:	e7d6      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000b02:	1f4a      	subs	r2, r1, #5
 8000b04:	4094      	lsls	r4, r2
 8000b06:	0022      	movs	r2, r4
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <__aeabi_ui2f+0x8c>)
 8000b0a:	4002      	ands	r2, r0
 8000b0c:	0765      	lsls	r5, r4, #29
 8000b0e:	d0f0      	beq.n	8000af2 <__aeabi_ui2f+0x6a>
 8000b10:	e7e5      	b.n	8000ade <__aeabi_ui2f+0x56>
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	fbffffff 	.word	0xfbffffff

08000b18 <__aeabi_dadd>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	464f      	mov	r7, r9
 8000b1c:	4646      	mov	r6, r8
 8000b1e:	46d6      	mov	lr, sl
 8000b20:	0004      	movs	r4, r0
 8000b22:	b5c0      	push	{r6, r7, lr}
 8000b24:	001f      	movs	r7, r3
 8000b26:	030b      	lsls	r3, r1, #12
 8000b28:	0010      	movs	r0, r2
 8000b2a:	004e      	lsls	r6, r1, #1
 8000b2c:	0a5b      	lsrs	r3, r3, #9
 8000b2e:	0fcd      	lsrs	r5, r1, #31
 8000b30:	0f61      	lsrs	r1, r4, #29
 8000b32:	007a      	lsls	r2, r7, #1
 8000b34:	4319      	orrs	r1, r3
 8000b36:	00e3      	lsls	r3, r4, #3
 8000b38:	033c      	lsls	r4, r7, #12
 8000b3a:	0fff      	lsrs	r7, r7, #31
 8000b3c:	46bc      	mov	ip, r7
 8000b3e:	0a64      	lsrs	r4, r4, #9
 8000b40:	0f47      	lsrs	r7, r0, #29
 8000b42:	4327      	orrs	r7, r4
 8000b44:	0d76      	lsrs	r6, r6, #21
 8000b46:	0d52      	lsrs	r2, r2, #21
 8000b48:	00c0      	lsls	r0, r0, #3
 8000b4a:	46b9      	mov	r9, r7
 8000b4c:	4680      	mov	r8, r0
 8000b4e:	1ab7      	subs	r7, r6, r2
 8000b50:	4565      	cmp	r5, ip
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x3e>
 8000b54:	e09b      	b.n	8000c8e <__aeabi_dadd+0x176>
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	dc00      	bgt.n	8000b5c <__aeabi_dadd+0x44>
 8000b5a:	e084      	b.n	8000c66 <__aeabi_dadd+0x14e>
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x4a>
 8000b60:	e0be      	b.n	8000ce0 <__aeabi_dadd+0x1c8>
 8000b62:	4ac8      	ldr	r2, [pc, #800]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000b64:	4296      	cmp	r6, r2
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x52>
 8000b68:	e124      	b.n	8000db4 <__aeabi_dadd+0x29c>
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	464c      	mov	r4, r9
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	4314      	orrs	r4, r2
 8000b72:	46a1      	mov	r9, r4
 8000b74:	2f38      	cmp	r7, #56	; 0x38
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_dadd+0x62>
 8000b78:	e167      	b.n	8000e4a <__aeabi_dadd+0x332>
 8000b7a:	2f1f      	cmp	r7, #31
 8000b7c:	dd00      	ble.n	8000b80 <__aeabi_dadd+0x68>
 8000b7e:	e1d6      	b.n	8000f2e <__aeabi_dadd+0x416>
 8000b80:	2220      	movs	r2, #32
 8000b82:	464c      	mov	r4, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4094      	lsls	r4, r2
 8000b88:	46a2      	mov	sl, r4
 8000b8a:	4644      	mov	r4, r8
 8000b8c:	40fc      	lsrs	r4, r7
 8000b8e:	0020      	movs	r0, r4
 8000b90:	4654      	mov	r4, sl
 8000b92:	4304      	orrs	r4, r0
 8000b94:	4640      	mov	r0, r8
 8000b96:	4090      	lsls	r0, r2
 8000b98:	1e42      	subs	r2, r0, #1
 8000b9a:	4190      	sbcs	r0, r2
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	40fa      	lsrs	r2, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1a89      	subs	r1, r1, r2
 8000ba4:	1b1c      	subs	r4, r3, r4
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	4192      	sbcs	r2, r2
 8000baa:	4252      	negs	r2, r2
 8000bac:	1a8b      	subs	r3, r1, r2
 8000bae:	469a      	mov	sl, r3
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0xa0>
 8000bb6:	e0d4      	b.n	8000d62 <__aeabi_dadd+0x24a>
 8000bb8:	4653      	mov	r3, sl
 8000bba:	025a      	lsls	r2, r3, #9
 8000bbc:	0a53      	lsrs	r3, r2, #9
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	4653      	mov	r3, sl
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0xb0>
 8000bc6:	e104      	b.n	8000dd2 <__aeabi_dadd+0x2ba>
 8000bc8:	4650      	mov	r0, sl
 8000bca:	f001 fe35 	bl	8002838 <__clzsi2>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	0020      	movs	r0, r4
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	4651      	mov	r1, sl
 8000bda:	40d0      	lsrs	r0, r2
 8000bdc:	4099      	lsls	r1, r3
 8000bde:	0002      	movs	r2, r0
 8000be0:	409c      	lsls	r4, r3
 8000be2:	430a      	orrs	r2, r1
 8000be4:	42b3      	cmp	r3, r6
 8000be6:	da00      	bge.n	8000bea <__aeabi_dadd+0xd2>
 8000be8:	e102      	b.n	8000df0 <__aeabi_dadd+0x2d8>
 8000bea:	1b9b      	subs	r3, r3, r6
 8000bec:	1c59      	adds	r1, r3, #1
 8000bee:	291f      	cmp	r1, #31
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dadd+0xdc>
 8000bf2:	e0a7      	b.n	8000d44 <__aeabi_dadd+0x22c>
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	0026      	movs	r6, r4
 8000bfa:	1a5b      	subs	r3, r3, r1
 8000bfc:	409c      	lsls	r4, r3
 8000bfe:	4098      	lsls	r0, r3
 8000c00:	40ce      	lsrs	r6, r1
 8000c02:	40ca      	lsrs	r2, r1
 8000c04:	1e63      	subs	r3, r4, #1
 8000c06:	419c      	sbcs	r4, r3
 8000c08:	4330      	orrs	r0, r6
 8000c0a:	4692      	mov	sl, r2
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	4304      	orrs	r4, r0
 8000c10:	0763      	lsls	r3, r4, #29
 8000c12:	d009      	beq.n	8000c28 <__aeabi_dadd+0x110>
 8000c14:	230f      	movs	r3, #15
 8000c16:	4023      	ands	r3, r4
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dadd+0x110>
 8000c1c:	1d23      	adds	r3, r4, #4
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	41a4      	sbcs	r4, r4
 8000c22:	4264      	negs	r4, r4
 8000c24:	44a2      	add	sl, r4
 8000c26:	001c      	movs	r4, r3
 8000c28:	4653      	mov	r3, sl
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	d400      	bmi.n	8000c30 <__aeabi_dadd+0x118>
 8000c2e:	e09b      	b.n	8000d68 <__aeabi_dadd+0x250>
 8000c30:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000c32:	3601      	adds	r6, #1
 8000c34:	429e      	cmp	r6, r3
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x122>
 8000c38:	e0b8      	b.n	8000dac <__aeabi_dadd+0x294>
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	4992      	ldr	r1, [pc, #584]	; (8000e88 <__aeabi_dadd+0x370>)
 8000c3e:	08e4      	lsrs	r4, r4, #3
 8000c40:	400b      	ands	r3, r1
 8000c42:	0019      	movs	r1, r3
 8000c44:	075b      	lsls	r3, r3, #29
 8000c46:	4323      	orrs	r3, r4
 8000c48:	0572      	lsls	r2, r6, #21
 8000c4a:	024c      	lsls	r4, r1, #9
 8000c4c:	0b24      	lsrs	r4, r4, #12
 8000c4e:	0d52      	lsrs	r2, r2, #21
 8000c50:	0512      	lsls	r2, r2, #20
 8000c52:	07ed      	lsls	r5, r5, #31
 8000c54:	4322      	orrs	r2, r4
 8000c56:	432a      	orrs	r2, r5
 8000c58:	0018      	movs	r0, r3
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	bce0      	pop	{r5, r6, r7}
 8000c5e:	46ba      	mov	sl, r7
 8000c60:	46b1      	mov	r9, r6
 8000c62:	46a8      	mov	r8, r5
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d048      	beq.n	8000cfc <__aeabi_dadd+0x1e4>
 8000c6a:	1b97      	subs	r7, r2, r6
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x15a>
 8000c70:	e10e      	b.n	8000e90 <__aeabi_dadd+0x378>
 8000c72:	000c      	movs	r4, r1
 8000c74:	431c      	orrs	r4, r3
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0x162>
 8000c78:	e1b7      	b.n	8000fea <__aeabi_dadd+0x4d2>
 8000c7a:	1e7c      	subs	r4, r7, #1
 8000c7c:	2f01      	cmp	r7, #1
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x16a>
 8000c80:	e226      	b.n	80010d0 <__aeabi_dadd+0x5b8>
 8000c82:	4d80      	ldr	r5, [pc, #512]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000c84:	42af      	cmp	r7, r5
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x172>
 8000c88:	e1d5      	b.n	8001036 <__aeabi_dadd+0x51e>
 8000c8a:	0027      	movs	r7, r4
 8000c8c:	e107      	b.n	8000e9e <__aeabi_dadd+0x386>
 8000c8e:	2f00      	cmp	r7, #0
 8000c90:	dc00      	bgt.n	8000c94 <__aeabi_dadd+0x17c>
 8000c92:	e0b2      	b.n	8000dfa <__aeabi_dadd+0x2e2>
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	d047      	beq.n	8000d28 <__aeabi_dadd+0x210>
 8000c98:	4a7a      	ldr	r2, [pc, #488]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000c9a:	4296      	cmp	r6, r2
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x188>
 8000c9e:	e089      	b.n	8000db4 <__aeabi_dadd+0x29c>
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	464c      	mov	r4, r9
 8000ca4:	0412      	lsls	r2, r2, #16
 8000ca6:	4314      	orrs	r4, r2
 8000ca8:	46a1      	mov	r9, r4
 8000caa:	2f38      	cmp	r7, #56	; 0x38
 8000cac:	dc6b      	bgt.n	8000d86 <__aeabi_dadd+0x26e>
 8000cae:	2f1f      	cmp	r7, #31
 8000cb0:	dc00      	bgt.n	8000cb4 <__aeabi_dadd+0x19c>
 8000cb2:	e16e      	b.n	8000f92 <__aeabi_dadd+0x47a>
 8000cb4:	003a      	movs	r2, r7
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	3a20      	subs	r2, #32
 8000cba:	40d0      	lsrs	r0, r2
 8000cbc:	4684      	mov	ip, r0
 8000cbe:	2f20      	cmp	r7, #32
 8000cc0:	d007      	beq.n	8000cd2 <__aeabi_dadd+0x1ba>
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	4648      	mov	r0, r9
 8000cc6:	1bd2      	subs	r2, r2, r7
 8000cc8:	4090      	lsls	r0, r2
 8000cca:	0002      	movs	r2, r0
 8000ccc:	4640      	mov	r0, r8
 8000cce:	4310      	orrs	r0, r2
 8000cd0:	4680      	mov	r8, r0
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	1e42      	subs	r2, r0, #1
 8000cd6:	4190      	sbcs	r0, r2
 8000cd8:	4662      	mov	r2, ip
 8000cda:	0004      	movs	r4, r0
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	e057      	b.n	8000d90 <__aeabi_dadd+0x278>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dadd+0x1d0>
 8000ce6:	e103      	b.n	8000ef0 <__aeabi_dadd+0x3d8>
 8000ce8:	1e7a      	subs	r2, r7, #1
 8000cea:	2f01      	cmp	r7, #1
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dadd+0x1d8>
 8000cee:	e193      	b.n	8001018 <__aeabi_dadd+0x500>
 8000cf0:	4c64      	ldr	r4, [pc, #400]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000cf2:	42a7      	cmp	r7, r4
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x1e0>
 8000cf6:	e18a      	b.n	800100e <__aeabi_dadd+0x4f6>
 8000cf8:	0017      	movs	r7, r2
 8000cfa:	e73b      	b.n	8000b74 <__aeabi_dadd+0x5c>
 8000cfc:	4c63      	ldr	r4, [pc, #396]	; (8000e8c <__aeabi_dadd+0x374>)
 8000cfe:	1c72      	adds	r2, r6, #1
 8000d00:	4222      	tst	r2, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x1ee>
 8000d04:	e0e0      	b.n	8000ec8 <__aeabi_dadd+0x3b0>
 8000d06:	000a      	movs	r2, r1
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dadd+0x1f8>
 8000d0e:	e174      	b.n	8000ffa <__aeabi_dadd+0x4e2>
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x1fe>
 8000d14:	e1d0      	b.n	80010b8 <__aeabi_dadd+0x5a0>
 8000d16:	464a      	mov	r2, r9
 8000d18:	4302      	orrs	r2, r0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x206>
 8000d1c:	e1e3      	b.n	80010e6 <__aeabi_dadd+0x5ce>
 8000d1e:	074a      	lsls	r2, r1, #29
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	08c9      	lsrs	r1, r1, #3
 8000d26:	e029      	b.n	8000d7c <__aeabi_dadd+0x264>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dadd+0x218>
 8000d2e:	e17d      	b.n	800102c <__aeabi_dadd+0x514>
 8000d30:	1e7a      	subs	r2, r7, #1
 8000d32:	2f01      	cmp	r7, #1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x220>
 8000d36:	e0e0      	b.n	8000efa <__aeabi_dadd+0x3e2>
 8000d38:	4c52      	ldr	r4, [pc, #328]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000d3a:	42a7      	cmp	r7, r4
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x228>
 8000d3e:	e166      	b.n	800100e <__aeabi_dadd+0x4f6>
 8000d40:	0017      	movs	r7, r2
 8000d42:	e7b2      	b.n	8000caa <__aeabi_dadd+0x192>
 8000d44:	0010      	movs	r0, r2
 8000d46:	3b1f      	subs	r3, #31
 8000d48:	40d8      	lsrs	r0, r3
 8000d4a:	2920      	cmp	r1, #32
 8000d4c:	d003      	beq.n	8000d56 <__aeabi_dadd+0x23e>
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	4314      	orrs	r4, r2
 8000d56:	1e63      	subs	r3, r4, #1
 8000d58:	419c      	sbcs	r4, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	469a      	mov	sl, r3
 8000d60:	4304      	orrs	r4, r0
 8000d62:	0763      	lsls	r3, r4, #29
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dadd+0x250>
 8000d66:	e755      	b.n	8000c14 <__aeabi_dadd+0xfc>
 8000d68:	4652      	mov	r2, sl
 8000d6a:	08e3      	lsrs	r3, r4, #3
 8000d6c:	0752      	lsls	r2, r2, #29
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	4652      	mov	r2, sl
 8000d72:	0037      	movs	r7, r6
 8000d74:	08d1      	lsrs	r1, r2, #3
 8000d76:	4a43      	ldr	r2, [pc, #268]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000d78:	4297      	cmp	r7, r2
 8000d7a:	d01f      	beq.n	8000dbc <__aeabi_dadd+0x2a4>
 8000d7c:	0309      	lsls	r1, r1, #12
 8000d7e:	057a      	lsls	r2, r7, #21
 8000d80:	0b0c      	lsrs	r4, r1, #12
 8000d82:	0d52      	lsrs	r2, r2, #21
 8000d84:	e764      	b.n	8000c50 <__aeabi_dadd+0x138>
 8000d86:	4642      	mov	r2, r8
 8000d88:	464c      	mov	r4, r9
 8000d8a:	4314      	orrs	r4, r2
 8000d8c:	1e62      	subs	r2, r4, #1
 8000d8e:	4194      	sbcs	r4, r2
 8000d90:	18e4      	adds	r4, r4, r3
 8000d92:	429c      	cmp	r4, r3
 8000d94:	4192      	sbcs	r2, r2
 8000d96:	4252      	negs	r2, r2
 8000d98:	4692      	mov	sl, r2
 8000d9a:	448a      	add	sl, r1
 8000d9c:	4653      	mov	r3, sl
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	d5df      	bpl.n	8000d62 <__aeabi_dadd+0x24a>
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000da4:	3601      	adds	r6, #1
 8000da6:	429e      	cmp	r6, r3
 8000da8:	d000      	beq.n	8000dac <__aeabi_dadd+0x294>
 8000daa:	e0b3      	b.n	8000f14 <__aeabi_dadd+0x3fc>
 8000dac:	0032      	movs	r2, r6
 8000dae:	2400      	movs	r4, #0
 8000db0:	2300      	movs	r3, #0
 8000db2:	e74d      	b.n	8000c50 <__aeabi_dadd+0x138>
 8000db4:	074a      	lsls	r2, r1, #29
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	08c9      	lsrs	r1, r1, #3
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x2ac>
 8000dc2:	e200      	b.n	80011c6 <__aeabi_dadd+0x6ae>
 8000dc4:	2480      	movs	r4, #128	; 0x80
 8000dc6:	0324      	lsls	r4, r4, #12
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	0324      	lsls	r4, r4, #12
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000dce:	0b24      	lsrs	r4, r4, #12
 8000dd0:	e73e      	b.n	8000c50 <__aeabi_dadd+0x138>
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f001 fd30 	bl	8002838 <__clzsi2>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	3318      	adds	r3, #24
 8000ddc:	2b1f      	cmp	r3, #31
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_dadd+0x2ca>
 8000de0:	e6f7      	b.n	8000bd2 <__aeabi_dadd+0xba>
 8000de2:	0022      	movs	r2, r4
 8000de4:	3808      	subs	r0, #8
 8000de6:	4082      	lsls	r2, r0
 8000de8:	2400      	movs	r4, #0
 8000dea:	42b3      	cmp	r3, r6
 8000dec:	db00      	blt.n	8000df0 <__aeabi_dadd+0x2d8>
 8000dee:	e6fc      	b.n	8000bea <__aeabi_dadd+0xd2>
 8000df0:	1af6      	subs	r6, r6, r3
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <__aeabi_dadd+0x370>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	4692      	mov	sl, r2
 8000df8:	e70a      	b.n	8000c10 <__aeabi_dadd+0xf8>
 8000dfa:	2f00      	cmp	r7, #0
 8000dfc:	d02b      	beq.n	8000e56 <__aeabi_dadd+0x33e>
 8000dfe:	1b97      	subs	r7, r2, r6
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x2ee>
 8000e04:	e0b8      	b.n	8000f78 <__aeabi_dadd+0x460>
 8000e06:	4c1f      	ldr	r4, [pc, #124]	; (8000e84 <__aeabi_dadd+0x36c>)
 8000e08:	42a2      	cmp	r2, r4
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x2f6>
 8000e0c:	e11c      	b.n	8001048 <__aeabi_dadd+0x530>
 8000e0e:	2480      	movs	r4, #128	; 0x80
 8000e10:	0424      	lsls	r4, r4, #16
 8000e12:	4321      	orrs	r1, r4
 8000e14:	2f38      	cmp	r7, #56	; 0x38
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dadd+0x302>
 8000e18:	e11e      	b.n	8001058 <__aeabi_dadd+0x540>
 8000e1a:	2f1f      	cmp	r7, #31
 8000e1c:	dd00      	ble.n	8000e20 <__aeabi_dadd+0x308>
 8000e1e:	e19e      	b.n	800115e <__aeabi_dadd+0x646>
 8000e20:	2620      	movs	r6, #32
 8000e22:	000c      	movs	r4, r1
 8000e24:	1bf6      	subs	r6, r6, r7
 8000e26:	0018      	movs	r0, r3
 8000e28:	40b3      	lsls	r3, r6
 8000e2a:	40b4      	lsls	r4, r6
 8000e2c:	40f8      	lsrs	r0, r7
 8000e2e:	1e5e      	subs	r6, r3, #1
 8000e30:	41b3      	sbcs	r3, r6
 8000e32:	40f9      	lsrs	r1, r7
 8000e34:	4304      	orrs	r4, r0
 8000e36:	431c      	orrs	r4, r3
 8000e38:	4489      	add	r9, r1
 8000e3a:	4444      	add	r4, r8
 8000e3c:	4544      	cmp	r4, r8
 8000e3e:	419b      	sbcs	r3, r3
 8000e40:	425b      	negs	r3, r3
 8000e42:	444b      	add	r3, r9
 8000e44:	469a      	mov	sl, r3
 8000e46:	0016      	movs	r6, r2
 8000e48:	e7a8      	b.n	8000d9c <__aeabi_dadd+0x284>
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	464c      	mov	r4, r9
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	1e62      	subs	r2, r4, #1
 8000e52:	4194      	sbcs	r4, r2
 8000e54:	e6a6      	b.n	8000ba4 <__aeabi_dadd+0x8c>
 8000e56:	4c0d      	ldr	r4, [pc, #52]	; (8000e8c <__aeabi_dadd+0x374>)
 8000e58:	1c72      	adds	r2, r6, #1
 8000e5a:	4222      	tst	r2, r4
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_dadd+0x348>
 8000e5e:	e0a8      	b.n	8000fb2 <__aeabi_dadd+0x49a>
 8000e60:	000a      	movs	r2, r1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d000      	beq.n	8000e6a <__aeabi_dadd+0x352>
 8000e68:	e10a      	b.n	8001080 <__aeabi_dadd+0x568>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0x358>
 8000e6e:	e15e      	b.n	800112e <__aeabi_dadd+0x616>
 8000e70:	464a      	mov	r2, r9
 8000e72:	4302      	orrs	r2, r0
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x360>
 8000e76:	e161      	b.n	800113c <__aeabi_dadd+0x624>
 8000e78:	074a      	lsls	r2, r1, #29
 8000e7a:	08db      	lsrs	r3, r3, #3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	08c9      	lsrs	r1, r1, #3
 8000e80:	e77c      	b.n	8000d7c <__aeabi_dadd+0x264>
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	000007ff 	.word	0x000007ff
 8000e88:	ff7fffff 	.word	0xff7fffff
 8000e8c:	000007fe 	.word	0x000007fe
 8000e90:	4ccf      	ldr	r4, [pc, #828]	; (80011d0 <__aeabi_dadd+0x6b8>)
 8000e92:	42a2      	cmp	r2, r4
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dadd+0x380>
 8000e96:	e0ce      	b.n	8001036 <__aeabi_dadd+0x51e>
 8000e98:	2480      	movs	r4, #128	; 0x80
 8000e9a:	0424      	lsls	r4, r4, #16
 8000e9c:	4321      	orrs	r1, r4
 8000e9e:	2f38      	cmp	r7, #56	; 0x38
 8000ea0:	dc5b      	bgt.n	8000f5a <__aeabi_dadd+0x442>
 8000ea2:	2f1f      	cmp	r7, #31
 8000ea4:	dd00      	ble.n	8000ea8 <__aeabi_dadd+0x390>
 8000ea6:	e0dc      	b.n	8001062 <__aeabi_dadd+0x54a>
 8000ea8:	2520      	movs	r5, #32
 8000eaa:	000c      	movs	r4, r1
 8000eac:	1bed      	subs	r5, r5, r7
 8000eae:	001e      	movs	r6, r3
 8000eb0:	40ab      	lsls	r3, r5
 8000eb2:	40ac      	lsls	r4, r5
 8000eb4:	40fe      	lsrs	r6, r7
 8000eb6:	1e5d      	subs	r5, r3, #1
 8000eb8:	41ab      	sbcs	r3, r5
 8000eba:	4334      	orrs	r4, r6
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	464b      	mov	r3, r9
 8000ec2:	1a5b      	subs	r3, r3, r1
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	e04c      	b.n	8000f62 <__aeabi_dadd+0x44a>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1a1c      	subs	r4, r3, r0
 8000ecc:	1a88      	subs	r0, r1, r2
 8000ece:	42a3      	cmp	r3, r4
 8000ed0:	4192      	sbcs	r2, r2
 8000ed2:	4252      	negs	r2, r2
 8000ed4:	4692      	mov	sl, r2
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	4650      	mov	r0, sl
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	4692      	mov	sl, r2
 8000ede:	0212      	lsls	r2, r2, #8
 8000ee0:	d478      	bmi.n	8000fd4 <__aeabi_dadd+0x4bc>
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4323      	orrs	r3, r4
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x3d2>
 8000ee8:	e66a      	b.n	8000bc0 <__aeabi_dadd+0xa8>
 8000eea:	2100      	movs	r1, #0
 8000eec:	2500      	movs	r5, #0
 8000eee:	e745      	b.n	8000d7c <__aeabi_dadd+0x264>
 8000ef0:	074a      	lsls	r2, r1, #29
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	08c9      	lsrs	r1, r1, #3
 8000ef8:	e73d      	b.n	8000d76 <__aeabi_dadd+0x25e>
 8000efa:	181c      	adds	r4, r3, r0
 8000efc:	429c      	cmp	r4, r3
 8000efe:	419b      	sbcs	r3, r3
 8000f00:	4449      	add	r1, r9
 8000f02:	468a      	mov	sl, r1
 8000f04:	425b      	negs	r3, r3
 8000f06:	449a      	add	sl, r3
 8000f08:	4653      	mov	r3, sl
 8000f0a:	2601      	movs	r6, #1
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	d400      	bmi.n	8000f12 <__aeabi_dadd+0x3fa>
 8000f10:	e727      	b.n	8000d62 <__aeabi_dadd+0x24a>
 8000f12:	2602      	movs	r6, #2
 8000f14:	4652      	mov	r2, sl
 8000f16:	4baf      	ldr	r3, [pc, #700]	; (80011d4 <__aeabi_dadd+0x6bc>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	4021      	ands	r1, r4
 8000f20:	0862      	lsrs	r2, r4, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	07dc      	lsls	r4, r3, #31
 8000f26:	085b      	lsrs	r3, r3, #1
 8000f28:	469a      	mov	sl, r3
 8000f2a:	4314      	orrs	r4, r2
 8000f2c:	e670      	b.n	8000c10 <__aeabi_dadd+0xf8>
 8000f2e:	003a      	movs	r2, r7
 8000f30:	464c      	mov	r4, r9
 8000f32:	3a20      	subs	r2, #32
 8000f34:	40d4      	lsrs	r4, r2
 8000f36:	46a4      	mov	ip, r4
 8000f38:	2f20      	cmp	r7, #32
 8000f3a:	d007      	beq.n	8000f4c <__aeabi_dadd+0x434>
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	4648      	mov	r0, r9
 8000f40:	1bd2      	subs	r2, r2, r7
 8000f42:	4090      	lsls	r0, r2
 8000f44:	0002      	movs	r2, r0
 8000f46:	4640      	mov	r0, r8
 8000f48:	4310      	orrs	r0, r2
 8000f4a:	4680      	mov	r8, r0
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	1e42      	subs	r2, r0, #1
 8000f50:	4190      	sbcs	r0, r2
 8000f52:	4662      	mov	r2, ip
 8000f54:	0004      	movs	r4, r0
 8000f56:	4314      	orrs	r4, r2
 8000f58:	e624      	b.n	8000ba4 <__aeabi_dadd+0x8c>
 8000f5a:	4319      	orrs	r1, r3
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	1e63      	subs	r3, r4, #1
 8000f60:	419c      	sbcs	r4, r3
 8000f62:	4643      	mov	r3, r8
 8000f64:	1b1c      	subs	r4, r3, r4
 8000f66:	45a0      	cmp	r8, r4
 8000f68:	419b      	sbcs	r3, r3
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	469a      	mov	sl, r3
 8000f72:	4665      	mov	r5, ip
 8000f74:	0016      	movs	r6, r2
 8000f76:	e61b      	b.n	8000bb0 <__aeabi_dadd+0x98>
 8000f78:	000c      	movs	r4, r1
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x468>
 8000f7e:	e0c7      	b.n	8001110 <__aeabi_dadd+0x5f8>
 8000f80:	1e7c      	subs	r4, r7, #1
 8000f82:	2f01      	cmp	r7, #1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_dadd+0x470>
 8000f86:	e0f9      	b.n	800117c <__aeabi_dadd+0x664>
 8000f88:	4e91      	ldr	r6, [pc, #580]	; (80011d0 <__aeabi_dadd+0x6b8>)
 8000f8a:	42b7      	cmp	r7, r6
 8000f8c:	d05c      	beq.n	8001048 <__aeabi_dadd+0x530>
 8000f8e:	0027      	movs	r7, r4
 8000f90:	e740      	b.n	8000e14 <__aeabi_dadd+0x2fc>
 8000f92:	2220      	movs	r2, #32
 8000f94:	464c      	mov	r4, r9
 8000f96:	4640      	mov	r0, r8
 8000f98:	1bd2      	subs	r2, r2, r7
 8000f9a:	4094      	lsls	r4, r2
 8000f9c:	40f8      	lsrs	r0, r7
 8000f9e:	4304      	orrs	r4, r0
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	4090      	lsls	r0, r2
 8000fa4:	1e42      	subs	r2, r0, #1
 8000fa6:	4190      	sbcs	r0, r2
 8000fa8:	464a      	mov	r2, r9
 8000faa:	40fa      	lsrs	r2, r7
 8000fac:	4304      	orrs	r4, r0
 8000fae:	1889      	adds	r1, r1, r2
 8000fb0:	e6ee      	b.n	8000d90 <__aeabi_dadd+0x278>
 8000fb2:	4c87      	ldr	r4, [pc, #540]	; (80011d0 <__aeabi_dadd+0x6b8>)
 8000fb4:	42a2      	cmp	r2, r4
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x4a2>
 8000fb8:	e6f9      	b.n	8000dae <__aeabi_dadd+0x296>
 8000fba:	1818      	adds	r0, r3, r0
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	419b      	sbcs	r3, r3
 8000fc0:	4449      	add	r1, r9
 8000fc2:	425b      	negs	r3, r3
 8000fc4:	18cb      	adds	r3, r1, r3
 8000fc6:	07dc      	lsls	r4, r3, #31
 8000fc8:	0840      	lsrs	r0, r0, #1
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	469a      	mov	sl, r3
 8000fce:	0016      	movs	r6, r2
 8000fd0:	4304      	orrs	r4, r0
 8000fd2:	e6c6      	b.n	8000d62 <__aeabi_dadd+0x24a>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1ad4      	subs	r4, r2, r3
 8000fd8:	45a0      	cmp	r8, r4
 8000fda:	4180      	sbcs	r0, r0
 8000fdc:	464b      	mov	r3, r9
 8000fde:	4240      	negs	r0, r0
 8000fe0:	1a59      	subs	r1, r3, r1
 8000fe2:	1a0b      	subs	r3, r1, r0
 8000fe4:	469a      	mov	sl, r3
 8000fe6:	4665      	mov	r5, ip
 8000fe8:	e5ea      	b.n	8000bc0 <__aeabi_dadd+0xa8>
 8000fea:	464b      	mov	r3, r9
 8000fec:	464a      	mov	r2, r9
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	075b      	lsls	r3, r3, #29
 8000ff2:	4665      	mov	r5, ip
 8000ff4:	4303      	orrs	r3, r0
 8000ff6:	08d1      	lsrs	r1, r2, #3
 8000ff8:	e6bd      	b.n	8000d76 <__aeabi_dadd+0x25e>
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dadd+0x4e8>
 8000ffe:	e08e      	b.n	800111e <__aeabi_dadd+0x606>
 8001000:	464b      	mov	r3, r9
 8001002:	4303      	orrs	r3, r0
 8001004:	d117      	bne.n	8001036 <__aeabi_dadd+0x51e>
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	2500      	movs	r5, #0
 800100a:	0309      	lsls	r1, r1, #12
 800100c:	e6da      	b.n	8000dc4 <__aeabi_dadd+0x2ac>
 800100e:	074a      	lsls	r2, r1, #29
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	4313      	orrs	r3, r2
 8001014:	08c9      	lsrs	r1, r1, #3
 8001016:	e6d1      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 8001018:	1a1c      	subs	r4, r3, r0
 800101a:	464a      	mov	r2, r9
 800101c:	42a3      	cmp	r3, r4
 800101e:	419b      	sbcs	r3, r3
 8001020:	1a89      	subs	r1, r1, r2
 8001022:	425b      	negs	r3, r3
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	469a      	mov	sl, r3
 8001028:	2601      	movs	r6, #1
 800102a:	e5c1      	b.n	8000bb0 <__aeabi_dadd+0x98>
 800102c:	074a      	lsls	r2, r1, #29
 800102e:	08db      	lsrs	r3, r3, #3
 8001030:	4313      	orrs	r3, r2
 8001032:	08c9      	lsrs	r1, r1, #3
 8001034:	e69f      	b.n	8000d76 <__aeabi_dadd+0x25e>
 8001036:	4643      	mov	r3, r8
 8001038:	08d8      	lsrs	r0, r3, #3
 800103a:	464b      	mov	r3, r9
 800103c:	464a      	mov	r2, r9
 800103e:	075b      	lsls	r3, r3, #29
 8001040:	4665      	mov	r5, ip
 8001042:	4303      	orrs	r3, r0
 8001044:	08d1      	lsrs	r1, r2, #3
 8001046:	e6b9      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 8001048:	4643      	mov	r3, r8
 800104a:	08d8      	lsrs	r0, r3, #3
 800104c:	464b      	mov	r3, r9
 800104e:	464a      	mov	r2, r9
 8001050:	075b      	lsls	r3, r3, #29
 8001052:	4303      	orrs	r3, r0
 8001054:	08d1      	lsrs	r1, r2, #3
 8001056:	e6b1      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 8001058:	4319      	orrs	r1, r3
 800105a:	000c      	movs	r4, r1
 800105c:	1e63      	subs	r3, r4, #1
 800105e:	419c      	sbcs	r4, r3
 8001060:	e6eb      	b.n	8000e3a <__aeabi_dadd+0x322>
 8001062:	003c      	movs	r4, r7
 8001064:	000d      	movs	r5, r1
 8001066:	3c20      	subs	r4, #32
 8001068:	40e5      	lsrs	r5, r4
 800106a:	2f20      	cmp	r7, #32
 800106c:	d003      	beq.n	8001076 <__aeabi_dadd+0x55e>
 800106e:	2440      	movs	r4, #64	; 0x40
 8001070:	1be4      	subs	r4, r4, r7
 8001072:	40a1      	lsls	r1, r4
 8001074:	430b      	orrs	r3, r1
 8001076:	001c      	movs	r4, r3
 8001078:	1e63      	subs	r3, r4, #1
 800107a:	419c      	sbcs	r4, r3
 800107c:	432c      	orrs	r4, r5
 800107e:	e770      	b.n	8000f62 <__aeabi_dadd+0x44a>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d0e1      	beq.n	8001048 <__aeabi_dadd+0x530>
 8001084:	464a      	mov	r2, r9
 8001086:	4302      	orrs	r2, r0
 8001088:	d0c1      	beq.n	800100e <__aeabi_dadd+0x4f6>
 800108a:	074a      	lsls	r2, r1, #29
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	4313      	orrs	r3, r2
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	0312      	lsls	r2, r2, #12
 8001096:	4211      	tst	r1, r2
 8001098:	d008      	beq.n	80010ac <__aeabi_dadd+0x594>
 800109a:	4648      	mov	r0, r9
 800109c:	08c4      	lsrs	r4, r0, #3
 800109e:	4214      	tst	r4, r2
 80010a0:	d104      	bne.n	80010ac <__aeabi_dadd+0x594>
 80010a2:	4643      	mov	r3, r8
 80010a4:	0021      	movs	r1, r4
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	0742      	lsls	r2, r0, #29
 80010aa:	4313      	orrs	r3, r2
 80010ac:	0f5a      	lsrs	r2, r3, #29
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	0752      	lsls	r2, r2, #29
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	e681      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 80010b8:	464b      	mov	r3, r9
 80010ba:	4303      	orrs	r3, r0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x5a8>
 80010be:	e714      	b.n	8000eea <__aeabi_dadd+0x3d2>
 80010c0:	464b      	mov	r3, r9
 80010c2:	464a      	mov	r2, r9
 80010c4:	08c0      	lsrs	r0, r0, #3
 80010c6:	075b      	lsls	r3, r3, #29
 80010c8:	4665      	mov	r5, ip
 80010ca:	4303      	orrs	r3, r0
 80010cc:	08d1      	lsrs	r1, r2, #3
 80010ce:	e655      	b.n	8000d7c <__aeabi_dadd+0x264>
 80010d0:	1ac4      	subs	r4, r0, r3
 80010d2:	45a0      	cmp	r8, r4
 80010d4:	4180      	sbcs	r0, r0
 80010d6:	464b      	mov	r3, r9
 80010d8:	4240      	negs	r0, r0
 80010da:	1a59      	subs	r1, r3, r1
 80010dc:	1a0b      	subs	r3, r1, r0
 80010de:	469a      	mov	sl, r3
 80010e0:	4665      	mov	r5, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	e564      	b.n	8000bb0 <__aeabi_dadd+0x98>
 80010e6:	1a1c      	subs	r4, r3, r0
 80010e8:	464a      	mov	r2, r9
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4180      	sbcs	r0, r0
 80010ee:	1a8a      	subs	r2, r1, r2
 80010f0:	4240      	negs	r0, r0
 80010f2:	1a12      	subs	r2, r2, r0
 80010f4:	4692      	mov	sl, r2
 80010f6:	0212      	lsls	r2, r2, #8
 80010f8:	d549      	bpl.n	800118e <__aeabi_dadd+0x676>
 80010fa:	4642      	mov	r2, r8
 80010fc:	1ad4      	subs	r4, r2, r3
 80010fe:	45a0      	cmp	r8, r4
 8001100:	4180      	sbcs	r0, r0
 8001102:	464b      	mov	r3, r9
 8001104:	4240      	negs	r0, r0
 8001106:	1a59      	subs	r1, r3, r1
 8001108:	1a0b      	subs	r3, r1, r0
 800110a:	469a      	mov	sl, r3
 800110c:	4665      	mov	r5, ip
 800110e:	e57f      	b.n	8000c10 <__aeabi_dadd+0xf8>
 8001110:	464b      	mov	r3, r9
 8001112:	464a      	mov	r2, r9
 8001114:	08c0      	lsrs	r0, r0, #3
 8001116:	075b      	lsls	r3, r3, #29
 8001118:	4303      	orrs	r3, r0
 800111a:	08d1      	lsrs	r1, r2, #3
 800111c:	e62b      	b.n	8000d76 <__aeabi_dadd+0x25e>
 800111e:	464a      	mov	r2, r9
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	4302      	orrs	r2, r0
 8001124:	d138      	bne.n	8001198 <__aeabi_dadd+0x680>
 8001126:	074a      	lsls	r2, r1, #29
 8001128:	4313      	orrs	r3, r2
 800112a:	08c9      	lsrs	r1, r1, #3
 800112c:	e646      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 800112e:	464b      	mov	r3, r9
 8001130:	464a      	mov	r2, r9
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	4303      	orrs	r3, r0
 8001138:	08d1      	lsrs	r1, r2, #3
 800113a:	e61f      	b.n	8000d7c <__aeabi_dadd+0x264>
 800113c:	181c      	adds	r4, r3, r0
 800113e:	429c      	cmp	r4, r3
 8001140:	419b      	sbcs	r3, r3
 8001142:	4449      	add	r1, r9
 8001144:	468a      	mov	sl, r1
 8001146:	425b      	negs	r3, r3
 8001148:	449a      	add	sl, r3
 800114a:	4653      	mov	r3, sl
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x63a>
 8001150:	e607      	b.n	8000d62 <__aeabi_dadd+0x24a>
 8001152:	4652      	mov	r2, sl
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <__aeabi_dadd+0x6bc>)
 8001156:	2601      	movs	r6, #1
 8001158:	401a      	ands	r2, r3
 800115a:	4692      	mov	sl, r2
 800115c:	e601      	b.n	8000d62 <__aeabi_dadd+0x24a>
 800115e:	003c      	movs	r4, r7
 8001160:	000e      	movs	r6, r1
 8001162:	3c20      	subs	r4, #32
 8001164:	40e6      	lsrs	r6, r4
 8001166:	2f20      	cmp	r7, #32
 8001168:	d003      	beq.n	8001172 <__aeabi_dadd+0x65a>
 800116a:	2440      	movs	r4, #64	; 0x40
 800116c:	1be4      	subs	r4, r4, r7
 800116e:	40a1      	lsls	r1, r4
 8001170:	430b      	orrs	r3, r1
 8001172:	001c      	movs	r4, r3
 8001174:	1e63      	subs	r3, r4, #1
 8001176:	419c      	sbcs	r4, r3
 8001178:	4334      	orrs	r4, r6
 800117a:	e65e      	b.n	8000e3a <__aeabi_dadd+0x322>
 800117c:	4443      	add	r3, r8
 800117e:	4283      	cmp	r3, r0
 8001180:	4180      	sbcs	r0, r0
 8001182:	4449      	add	r1, r9
 8001184:	468a      	mov	sl, r1
 8001186:	4240      	negs	r0, r0
 8001188:	001c      	movs	r4, r3
 800118a:	4482      	add	sl, r0
 800118c:	e6bc      	b.n	8000f08 <__aeabi_dadd+0x3f0>
 800118e:	4653      	mov	r3, sl
 8001190:	4323      	orrs	r3, r4
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x67e>
 8001194:	e6a9      	b.n	8000eea <__aeabi_dadd+0x3d2>
 8001196:	e5e4      	b.n	8000d62 <__aeabi_dadd+0x24a>
 8001198:	074a      	lsls	r2, r1, #29
 800119a:	4313      	orrs	r3, r2
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	08c9      	lsrs	r1, r1, #3
 80011a0:	0312      	lsls	r2, r2, #12
 80011a2:	4211      	tst	r1, r2
 80011a4:	d009      	beq.n	80011ba <__aeabi_dadd+0x6a2>
 80011a6:	4648      	mov	r0, r9
 80011a8:	08c4      	lsrs	r4, r0, #3
 80011aa:	4214      	tst	r4, r2
 80011ac:	d105      	bne.n	80011ba <__aeabi_dadd+0x6a2>
 80011ae:	4643      	mov	r3, r8
 80011b0:	4665      	mov	r5, ip
 80011b2:	0021      	movs	r1, r4
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	0742      	lsls	r2, r0, #29
 80011b8:	4313      	orrs	r3, r2
 80011ba:	0f5a      	lsrs	r2, r3, #29
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	0752      	lsls	r2, r2, #29
 80011c2:	4313      	orrs	r3, r2
 80011c4:	e5fa      	b.n	8000dbc <__aeabi_dadd+0x2a4>
 80011c6:	2300      	movs	r3, #0
 80011c8:	4a01      	ldr	r2, [pc, #4]	; (80011d0 <__aeabi_dadd+0x6b8>)
 80011ca:	001c      	movs	r4, r3
 80011cc:	e540      	b.n	8000c50 <__aeabi_dadd+0x138>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	000007ff 	.word	0x000007ff
 80011d4:	ff7fffff 	.word	0xff7fffff

080011d8 <__aeabi_ddiv>:
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	4657      	mov	r7, sl
 80011dc:	464e      	mov	r6, r9
 80011de:	4645      	mov	r5, r8
 80011e0:	46de      	mov	lr, fp
 80011e2:	b5e0      	push	{r5, r6, r7, lr}
 80011e4:	030c      	lsls	r4, r1, #12
 80011e6:	001f      	movs	r7, r3
 80011e8:	004b      	lsls	r3, r1, #1
 80011ea:	4681      	mov	r9, r0
 80011ec:	4692      	mov	sl, r2
 80011ee:	0005      	movs	r5, r0
 80011f0:	b085      	sub	sp, #20
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	0d5b      	lsrs	r3, r3, #21
 80011f6:	0fce      	lsrs	r6, r1, #31
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0x26>
 80011fc:	e152      	b.n	80014a4 <__aeabi_ddiv+0x2cc>
 80011fe:	4ad2      	ldr	r2, [pc, #840]	; (8001548 <__aeabi_ddiv+0x370>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0x2e>
 8001204:	e16e      	b.n	80014e4 <__aeabi_ddiv+0x30c>
 8001206:	0f42      	lsrs	r2, r0, #29
 8001208:	00e4      	lsls	r4, r4, #3
 800120a:	4314      	orrs	r4, r2
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	0412      	lsls	r2, r2, #16
 8001210:	4322      	orrs	r2, r4
 8001212:	4690      	mov	r8, r2
 8001214:	4acd      	ldr	r2, [pc, #820]	; (800154c <__aeabi_ddiv+0x374>)
 8001216:	00c5      	lsls	r5, r0, #3
 8001218:	4693      	mov	fp, r2
 800121a:	449b      	add	fp, r3
 800121c:	2300      	movs	r3, #0
 800121e:	4699      	mov	r9, r3
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	033c      	lsls	r4, r7, #12
 8001224:	007b      	lsls	r3, r7, #1
 8001226:	4650      	mov	r0, sl
 8001228:	0b24      	lsrs	r4, r4, #12
 800122a:	0d5b      	lsrs	r3, r3, #21
 800122c:	0fff      	lsrs	r7, r7, #31
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_ddiv+0x5c>
 8001232:	e11a      	b.n	800146a <__aeabi_ddiv+0x292>
 8001234:	4ac4      	ldr	r2, [pc, #784]	; (8001548 <__aeabi_ddiv+0x370>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x64>
 800123a:	e15e      	b.n	80014fa <__aeabi_ddiv+0x322>
 800123c:	0f42      	lsrs	r2, r0, #29
 800123e:	00e4      	lsls	r4, r4, #3
 8001240:	4322      	orrs	r2, r4
 8001242:	2480      	movs	r4, #128	; 0x80
 8001244:	0424      	lsls	r4, r4, #16
 8001246:	4314      	orrs	r4, r2
 8001248:	4ac0      	ldr	r2, [pc, #768]	; (800154c <__aeabi_ddiv+0x374>)
 800124a:	00c1      	lsls	r1, r0, #3
 800124c:	4694      	mov	ip, r2
 800124e:	465a      	mov	r2, fp
 8001250:	4463      	add	r3, ip
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	469b      	mov	fp, r3
 8001256:	2000      	movs	r0, #0
 8001258:	0033      	movs	r3, r6
 800125a:	407b      	eors	r3, r7
 800125c:	469a      	mov	sl, r3
 800125e:	464b      	mov	r3, r9
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d827      	bhi.n	80012b4 <__aeabi_ddiv+0xdc>
 8001264:	4aba      	ldr	r2, [pc, #744]	; (8001550 <__aeabi_ddiv+0x378>)
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	58d3      	ldr	r3, [r2, r3]
 800126a:	469f      	mov	pc, r3
 800126c:	46b2      	mov	sl, r6
 800126e:	9b00      	ldr	r3, [sp, #0]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d016      	beq.n	80012a2 <__aeabi_ddiv+0xca>
 8001274:	2b03      	cmp	r3, #3
 8001276:	d100      	bne.n	800127a <__aeabi_ddiv+0xa2>
 8001278:	e287      	b.n	800178a <__aeabi_ddiv+0x5b2>
 800127a:	2b01      	cmp	r3, #1
 800127c:	d000      	beq.n	8001280 <__aeabi_ddiv+0xa8>
 800127e:	e0d5      	b.n	800142c <__aeabi_ddiv+0x254>
 8001280:	2300      	movs	r3, #0
 8001282:	2200      	movs	r2, #0
 8001284:	2500      	movs	r5, #0
 8001286:	051b      	lsls	r3, r3, #20
 8001288:	4313      	orrs	r3, r2
 800128a:	4652      	mov	r2, sl
 800128c:	07d2      	lsls	r2, r2, #31
 800128e:	4313      	orrs	r3, r2
 8001290:	0028      	movs	r0, r5
 8001292:	0019      	movs	r1, r3
 8001294:	b005      	add	sp, #20
 8001296:	bcf0      	pop	{r4, r5, r6, r7}
 8001298:	46bb      	mov	fp, r7
 800129a:	46b2      	mov	sl, r6
 800129c:	46a9      	mov	r9, r5
 800129e:	46a0      	mov	r8, r4
 80012a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a2:	2200      	movs	r2, #0
 80012a4:	2500      	movs	r5, #0
 80012a6:	4ba8      	ldr	r3, [pc, #672]	; (8001548 <__aeabi_ddiv+0x370>)
 80012a8:	e7ed      	b.n	8001286 <__aeabi_ddiv+0xae>
 80012aa:	46ba      	mov	sl, r7
 80012ac:	46a0      	mov	r8, r4
 80012ae:	000d      	movs	r5, r1
 80012b0:	9000      	str	r0, [sp, #0]
 80012b2:	e7dc      	b.n	800126e <__aeabi_ddiv+0x96>
 80012b4:	4544      	cmp	r4, r8
 80012b6:	d200      	bcs.n	80012ba <__aeabi_ddiv+0xe2>
 80012b8:	e1c4      	b.n	8001644 <__aeabi_ddiv+0x46c>
 80012ba:	d100      	bne.n	80012be <__aeabi_ddiv+0xe6>
 80012bc:	e1bf      	b.n	800163e <__aeabi_ddiv+0x466>
 80012be:	2301      	movs	r3, #1
 80012c0:	425b      	negs	r3, r3
 80012c2:	469c      	mov	ip, r3
 80012c4:	002e      	movs	r6, r5
 80012c6:	4640      	mov	r0, r8
 80012c8:	2500      	movs	r5, #0
 80012ca:	44e3      	add	fp, ip
 80012cc:	0223      	lsls	r3, r4, #8
 80012ce:	0e0c      	lsrs	r4, r1, #24
 80012d0:	431c      	orrs	r4, r3
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	4699      	mov	r9, r3
 80012d6:	0423      	lsls	r3, r4, #16
 80012d8:	020a      	lsls	r2, r1, #8
 80012da:	0c1f      	lsrs	r7, r3, #16
 80012dc:	4649      	mov	r1, r9
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	9701      	str	r7, [sp, #4]
 80012e2:	f7fe ffb3 	bl	800024c <__aeabi_uidivmod>
 80012e6:	0002      	movs	r2, r0
 80012e8:	437a      	muls	r2, r7
 80012ea:	040b      	lsls	r3, r1, #16
 80012ec:	0c31      	lsrs	r1, r6, #16
 80012ee:	4680      	mov	r8, r0
 80012f0:	4319      	orrs	r1, r3
 80012f2:	428a      	cmp	r2, r1
 80012f4:	d907      	bls.n	8001306 <__aeabi_ddiv+0x12e>
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	469c      	mov	ip, r3
 80012fc:	1909      	adds	r1, r1, r4
 80012fe:	44e0      	add	r8, ip
 8001300:	428c      	cmp	r4, r1
 8001302:	d800      	bhi.n	8001306 <__aeabi_ddiv+0x12e>
 8001304:	e201      	b.n	800170a <__aeabi_ddiv+0x532>
 8001306:	1a88      	subs	r0, r1, r2
 8001308:	4649      	mov	r1, r9
 800130a:	f7fe ff9f 	bl	800024c <__aeabi_uidivmod>
 800130e:	9a01      	ldr	r2, [sp, #4]
 8001310:	0436      	lsls	r6, r6, #16
 8001312:	4342      	muls	r2, r0
 8001314:	0409      	lsls	r1, r1, #16
 8001316:	0c36      	lsrs	r6, r6, #16
 8001318:	0003      	movs	r3, r0
 800131a:	430e      	orrs	r6, r1
 800131c:	42b2      	cmp	r2, r6
 800131e:	d904      	bls.n	800132a <__aeabi_ddiv+0x152>
 8001320:	1936      	adds	r6, r6, r4
 8001322:	3b01      	subs	r3, #1
 8001324:	42b4      	cmp	r4, r6
 8001326:	d800      	bhi.n	800132a <__aeabi_ddiv+0x152>
 8001328:	e1e9      	b.n	80016fe <__aeabi_ddiv+0x526>
 800132a:	1ab0      	subs	r0, r6, r2
 800132c:	4642      	mov	r2, r8
 800132e:	9e00      	ldr	r6, [sp, #0]
 8001330:	0412      	lsls	r2, r2, #16
 8001332:	431a      	orrs	r2, r3
 8001334:	0c33      	lsrs	r3, r6, #16
 8001336:	001f      	movs	r7, r3
 8001338:	0c11      	lsrs	r1, r2, #16
 800133a:	4690      	mov	r8, r2
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	0413      	lsls	r3, r2, #16
 8001340:	0432      	lsls	r2, r6, #16
 8001342:	0c16      	lsrs	r6, r2, #16
 8001344:	0032      	movs	r2, r6
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	435a      	muls	r2, r3
 800134a:	9603      	str	r6, [sp, #12]
 800134c:	437b      	muls	r3, r7
 800134e:	434e      	muls	r6, r1
 8001350:	4379      	muls	r1, r7
 8001352:	0c17      	lsrs	r7, r2, #16
 8001354:	46bc      	mov	ip, r7
 8001356:	199b      	adds	r3, r3, r6
 8001358:	4463      	add	r3, ip
 800135a:	429e      	cmp	r6, r3
 800135c:	d903      	bls.n	8001366 <__aeabi_ddiv+0x18e>
 800135e:	2680      	movs	r6, #128	; 0x80
 8001360:	0276      	lsls	r6, r6, #9
 8001362:	46b4      	mov	ip, r6
 8001364:	4461      	add	r1, ip
 8001366:	0c1e      	lsrs	r6, r3, #16
 8001368:	1871      	adds	r1, r6, r1
 800136a:	0416      	lsls	r6, r2, #16
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	0c36      	lsrs	r6, r6, #16
 8001370:	199e      	adds	r6, r3, r6
 8001372:	4288      	cmp	r0, r1
 8001374:	d302      	bcc.n	800137c <__aeabi_ddiv+0x1a4>
 8001376:	d112      	bne.n	800139e <__aeabi_ddiv+0x1c6>
 8001378:	42b5      	cmp	r5, r6
 800137a:	d210      	bcs.n	800139e <__aeabi_ddiv+0x1c6>
 800137c:	4643      	mov	r3, r8
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	9b00      	ldr	r3, [sp, #0]
 8001382:	469c      	mov	ip, r3
 8001384:	4465      	add	r5, ip
 8001386:	001f      	movs	r7, r3
 8001388:	429d      	cmp	r5, r3
 800138a:	419b      	sbcs	r3, r3
 800138c:	425b      	negs	r3, r3
 800138e:	191b      	adds	r3, r3, r4
 8001390:	18c0      	adds	r0, r0, r3
 8001392:	4284      	cmp	r4, r0
 8001394:	d200      	bcs.n	8001398 <__aeabi_ddiv+0x1c0>
 8001396:	e19e      	b.n	80016d6 <__aeabi_ddiv+0x4fe>
 8001398:	d100      	bne.n	800139c <__aeabi_ddiv+0x1c4>
 800139a:	e199      	b.n	80016d0 <__aeabi_ddiv+0x4f8>
 800139c:	4690      	mov	r8, r2
 800139e:	1bae      	subs	r6, r5, r6
 80013a0:	42b5      	cmp	r5, r6
 80013a2:	41ad      	sbcs	r5, r5
 80013a4:	1a40      	subs	r0, r0, r1
 80013a6:	426d      	negs	r5, r5
 80013a8:	1b40      	subs	r0, r0, r5
 80013aa:	4284      	cmp	r4, r0
 80013ac:	d100      	bne.n	80013b0 <__aeabi_ddiv+0x1d8>
 80013ae:	e1d2      	b.n	8001756 <__aeabi_ddiv+0x57e>
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7fe ff4b 	bl	800024c <__aeabi_uidivmod>
 80013b6:	9a01      	ldr	r2, [sp, #4]
 80013b8:	040b      	lsls	r3, r1, #16
 80013ba:	4342      	muls	r2, r0
 80013bc:	0c31      	lsrs	r1, r6, #16
 80013be:	0005      	movs	r5, r0
 80013c0:	4319      	orrs	r1, r3
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d900      	bls.n	80013c8 <__aeabi_ddiv+0x1f0>
 80013c6:	e16c      	b.n	80016a2 <__aeabi_ddiv+0x4ca>
 80013c8:	1a88      	subs	r0, r1, r2
 80013ca:	4649      	mov	r1, r9
 80013cc:	f7fe ff3e 	bl	800024c <__aeabi_uidivmod>
 80013d0:	9a01      	ldr	r2, [sp, #4]
 80013d2:	0436      	lsls	r6, r6, #16
 80013d4:	4342      	muls	r2, r0
 80013d6:	0409      	lsls	r1, r1, #16
 80013d8:	0c36      	lsrs	r6, r6, #16
 80013da:	0003      	movs	r3, r0
 80013dc:	430e      	orrs	r6, r1
 80013de:	42b2      	cmp	r2, r6
 80013e0:	d900      	bls.n	80013e4 <__aeabi_ddiv+0x20c>
 80013e2:	e153      	b.n	800168c <__aeabi_ddiv+0x4b4>
 80013e4:	9803      	ldr	r0, [sp, #12]
 80013e6:	1ab6      	subs	r6, r6, r2
 80013e8:	0002      	movs	r2, r0
 80013ea:	042d      	lsls	r5, r5, #16
 80013ec:	431d      	orrs	r5, r3
 80013ee:	9f02      	ldr	r7, [sp, #8]
 80013f0:	042b      	lsls	r3, r5, #16
 80013f2:	0c1b      	lsrs	r3, r3, #16
 80013f4:	435a      	muls	r2, r3
 80013f6:	437b      	muls	r3, r7
 80013f8:	469c      	mov	ip, r3
 80013fa:	0c29      	lsrs	r1, r5, #16
 80013fc:	4348      	muls	r0, r1
 80013fe:	0c13      	lsrs	r3, r2, #16
 8001400:	4484      	add	ip, r0
 8001402:	4463      	add	r3, ip
 8001404:	4379      	muls	r1, r7
 8001406:	4298      	cmp	r0, r3
 8001408:	d903      	bls.n	8001412 <__aeabi_ddiv+0x23a>
 800140a:	2080      	movs	r0, #128	; 0x80
 800140c:	0240      	lsls	r0, r0, #9
 800140e:	4684      	mov	ip, r0
 8001410:	4461      	add	r1, ip
 8001412:	0c18      	lsrs	r0, r3, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	0c12      	lsrs	r2, r2, #16
 800141a:	1840      	adds	r0, r0, r1
 800141c:	189b      	adds	r3, r3, r2
 800141e:	4286      	cmp	r6, r0
 8001420:	d200      	bcs.n	8001424 <__aeabi_ddiv+0x24c>
 8001422:	e100      	b.n	8001626 <__aeabi_ddiv+0x44e>
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x250>
 8001426:	e0fb      	b.n	8001620 <__aeabi_ddiv+0x448>
 8001428:	2301      	movs	r3, #1
 800142a:	431d      	orrs	r5, r3
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <__aeabi_ddiv+0x37c>)
 800142e:	445b      	add	r3, fp
 8001430:	2b00      	cmp	r3, #0
 8001432:	dc00      	bgt.n	8001436 <__aeabi_ddiv+0x25e>
 8001434:	e0aa      	b.n	800158c <__aeabi_ddiv+0x3b4>
 8001436:	076a      	lsls	r2, r5, #29
 8001438:	d000      	beq.n	800143c <__aeabi_ddiv+0x264>
 800143a:	e13d      	b.n	80016b8 <__aeabi_ddiv+0x4e0>
 800143c:	08e9      	lsrs	r1, r5, #3
 800143e:	4642      	mov	r2, r8
 8001440:	01d2      	lsls	r2, r2, #7
 8001442:	d506      	bpl.n	8001452 <__aeabi_ddiv+0x27a>
 8001444:	4642      	mov	r2, r8
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <__aeabi_ddiv+0x380>)
 8001448:	401a      	ands	r2, r3
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	4690      	mov	r8, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	445b      	add	r3, fp
 8001452:	4a42      	ldr	r2, [pc, #264]	; (800155c <__aeabi_ddiv+0x384>)
 8001454:	4293      	cmp	r3, r2
 8001456:	dd00      	ble.n	800145a <__aeabi_ddiv+0x282>
 8001458:	e723      	b.n	80012a2 <__aeabi_ddiv+0xca>
 800145a:	4642      	mov	r2, r8
 800145c:	055b      	lsls	r3, r3, #21
 800145e:	0755      	lsls	r5, r2, #29
 8001460:	0252      	lsls	r2, r2, #9
 8001462:	430d      	orrs	r5, r1
 8001464:	0b12      	lsrs	r2, r2, #12
 8001466:	0d5b      	lsrs	r3, r3, #21
 8001468:	e70d      	b.n	8001286 <__aeabi_ddiv+0xae>
 800146a:	4651      	mov	r1, sl
 800146c:	4321      	orrs	r1, r4
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x29a>
 8001470:	e07c      	b.n	800156c <__aeabi_ddiv+0x394>
 8001472:	2c00      	cmp	r4, #0
 8001474:	d100      	bne.n	8001478 <__aeabi_ddiv+0x2a0>
 8001476:	e0fb      	b.n	8001670 <__aeabi_ddiv+0x498>
 8001478:	0020      	movs	r0, r4
 800147a:	f001 f9dd 	bl	8002838 <__clzsi2>
 800147e:	0002      	movs	r2, r0
 8001480:	3a0b      	subs	r2, #11
 8001482:	231d      	movs	r3, #29
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	4652      	mov	r2, sl
 8001488:	0001      	movs	r1, r0
 800148a:	40da      	lsrs	r2, r3
 800148c:	4653      	mov	r3, sl
 800148e:	3908      	subs	r1, #8
 8001490:	408b      	lsls	r3, r1
 8001492:	408c      	lsls	r4, r1
 8001494:	0019      	movs	r1, r3
 8001496:	4314      	orrs	r4, r2
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <__aeabi_ddiv+0x388>)
 800149a:	4458      	add	r0, fp
 800149c:	469b      	mov	fp, r3
 800149e:	4483      	add	fp, r0
 80014a0:	2000      	movs	r0, #0
 80014a2:	e6d9      	b.n	8001258 <__aeabi_ddiv+0x80>
 80014a4:	0003      	movs	r3, r0
 80014a6:	4323      	orrs	r3, r4
 80014a8:	4698      	mov	r8, r3
 80014aa:	d044      	beq.n	8001536 <__aeabi_ddiv+0x35e>
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x2da>
 80014b0:	e0cf      	b.n	8001652 <__aeabi_ddiv+0x47a>
 80014b2:	0020      	movs	r0, r4
 80014b4:	f001 f9c0 	bl	8002838 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	0002      	movs	r2, r0
 80014bc:	390b      	subs	r1, #11
 80014be:	231d      	movs	r3, #29
 80014c0:	1a5b      	subs	r3, r3, r1
 80014c2:	4649      	mov	r1, r9
 80014c4:	0010      	movs	r0, r2
 80014c6:	40d9      	lsrs	r1, r3
 80014c8:	3808      	subs	r0, #8
 80014ca:	4084      	lsls	r4, r0
 80014cc:	000b      	movs	r3, r1
 80014ce:	464d      	mov	r5, r9
 80014d0:	4323      	orrs	r3, r4
 80014d2:	4698      	mov	r8, r3
 80014d4:	4085      	lsls	r5, r0
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <__aeabi_ddiv+0x38c>)
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	469b      	mov	fp, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	4699      	mov	r9, r3
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	e69e      	b.n	8001222 <__aeabi_ddiv+0x4a>
 80014e4:	0002      	movs	r2, r0
 80014e6:	4322      	orrs	r2, r4
 80014e8:	4690      	mov	r8, r2
 80014ea:	d11d      	bne.n	8001528 <__aeabi_ddiv+0x350>
 80014ec:	2208      	movs	r2, #8
 80014ee:	469b      	mov	fp, r3
 80014f0:	2302      	movs	r3, #2
 80014f2:	2500      	movs	r5, #0
 80014f4:	4691      	mov	r9, r2
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	e693      	b.n	8001222 <__aeabi_ddiv+0x4a>
 80014fa:	4651      	mov	r1, sl
 80014fc:	4321      	orrs	r1, r4
 80014fe:	d109      	bne.n	8001514 <__aeabi_ddiv+0x33c>
 8001500:	2302      	movs	r3, #2
 8001502:	464a      	mov	r2, r9
 8001504:	431a      	orrs	r2, r3
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <__aeabi_ddiv+0x390>)
 8001508:	4691      	mov	r9, r2
 800150a:	469c      	mov	ip, r3
 800150c:	2400      	movs	r4, #0
 800150e:	2002      	movs	r0, #2
 8001510:	44e3      	add	fp, ip
 8001512:	e6a1      	b.n	8001258 <__aeabi_ddiv+0x80>
 8001514:	2303      	movs	r3, #3
 8001516:	464a      	mov	r2, r9
 8001518:	431a      	orrs	r2, r3
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <__aeabi_ddiv+0x390>)
 800151c:	4691      	mov	r9, r2
 800151e:	469c      	mov	ip, r3
 8001520:	4651      	mov	r1, sl
 8001522:	2003      	movs	r0, #3
 8001524:	44e3      	add	fp, ip
 8001526:	e697      	b.n	8001258 <__aeabi_ddiv+0x80>
 8001528:	220c      	movs	r2, #12
 800152a:	469b      	mov	fp, r3
 800152c:	2303      	movs	r3, #3
 800152e:	46a0      	mov	r8, r4
 8001530:	4691      	mov	r9, r2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	e675      	b.n	8001222 <__aeabi_ddiv+0x4a>
 8001536:	2304      	movs	r3, #4
 8001538:	4699      	mov	r9, r3
 800153a:	2300      	movs	r3, #0
 800153c:	469b      	mov	fp, r3
 800153e:	3301      	adds	r3, #1
 8001540:	2500      	movs	r5, #0
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	e66d      	b.n	8001222 <__aeabi_ddiv+0x4a>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	000007ff 	.word	0x000007ff
 800154c:	fffffc01 	.word	0xfffffc01
 8001550:	0800b708 	.word	0x0800b708
 8001554:	000003ff 	.word	0x000003ff
 8001558:	feffffff 	.word	0xfeffffff
 800155c:	000007fe 	.word	0x000007fe
 8001560:	000003f3 	.word	0x000003f3
 8001564:	fffffc0d 	.word	0xfffffc0d
 8001568:	fffff801 	.word	0xfffff801
 800156c:	464a      	mov	r2, r9
 800156e:	2301      	movs	r3, #1
 8001570:	431a      	orrs	r2, r3
 8001572:	4691      	mov	r9, r2
 8001574:	2400      	movs	r4, #0
 8001576:	2001      	movs	r0, #1
 8001578:	e66e      	b.n	8001258 <__aeabi_ddiv+0x80>
 800157a:	2300      	movs	r3, #0
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	469a      	mov	sl, r3
 8001580:	2500      	movs	r5, #0
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <__aeabi_ddiv+0x5cc>)
 8001584:	0312      	lsls	r2, r2, #12
 8001586:	e67e      	b.n	8001286 <__aeabi_ddiv+0xae>
 8001588:	2501      	movs	r5, #1
 800158a:	426d      	negs	r5, r5
 800158c:	2201      	movs	r2, #1
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	2a38      	cmp	r2, #56	; 0x38
 8001592:	dd00      	ble.n	8001596 <__aeabi_ddiv+0x3be>
 8001594:	e674      	b.n	8001280 <__aeabi_ddiv+0xa8>
 8001596:	2a1f      	cmp	r2, #31
 8001598:	dc00      	bgt.n	800159c <__aeabi_ddiv+0x3c4>
 800159a:	e0bd      	b.n	8001718 <__aeabi_ddiv+0x540>
 800159c:	211f      	movs	r1, #31
 800159e:	4249      	negs	r1, r1
 80015a0:	1acb      	subs	r3, r1, r3
 80015a2:	4641      	mov	r1, r8
 80015a4:	40d9      	lsrs	r1, r3
 80015a6:	000b      	movs	r3, r1
 80015a8:	2a20      	cmp	r2, #32
 80015aa:	d004      	beq.n	80015b6 <__aeabi_ddiv+0x3de>
 80015ac:	4641      	mov	r1, r8
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <__aeabi_ddiv+0x5d0>)
 80015b0:	445a      	add	r2, fp
 80015b2:	4091      	lsls	r1, r2
 80015b4:	430d      	orrs	r5, r1
 80015b6:	0029      	movs	r1, r5
 80015b8:	1e4a      	subs	r2, r1, #1
 80015ba:	4191      	sbcs	r1, r2
 80015bc:	4319      	orrs	r1, r3
 80015be:	2307      	movs	r3, #7
 80015c0:	001d      	movs	r5, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	400d      	ands	r5, r1
 80015c6:	420b      	tst	r3, r1
 80015c8:	d100      	bne.n	80015cc <__aeabi_ddiv+0x3f4>
 80015ca:	e0d0      	b.n	800176e <__aeabi_ddiv+0x596>
 80015cc:	220f      	movs	r2, #15
 80015ce:	2300      	movs	r3, #0
 80015d0:	400a      	ands	r2, r1
 80015d2:	2a04      	cmp	r2, #4
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x400>
 80015d6:	e0c7      	b.n	8001768 <__aeabi_ddiv+0x590>
 80015d8:	1d0a      	adds	r2, r1, #4
 80015da:	428a      	cmp	r2, r1
 80015dc:	4189      	sbcs	r1, r1
 80015de:	4249      	negs	r1, r1
 80015e0:	185b      	adds	r3, r3, r1
 80015e2:	0011      	movs	r1, r2
 80015e4:	021a      	lsls	r2, r3, #8
 80015e6:	d400      	bmi.n	80015ea <__aeabi_ddiv+0x412>
 80015e8:	e0be      	b.n	8001768 <__aeabi_ddiv+0x590>
 80015ea:	2301      	movs	r3, #1
 80015ec:	2200      	movs	r2, #0
 80015ee:	2500      	movs	r5, #0
 80015f0:	e649      	b.n	8001286 <__aeabi_ddiv+0xae>
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	4643      	mov	r3, r8
 80015f6:	0312      	lsls	r2, r2, #12
 80015f8:	4213      	tst	r3, r2
 80015fa:	d008      	beq.n	800160e <__aeabi_ddiv+0x436>
 80015fc:	4214      	tst	r4, r2
 80015fe:	d106      	bne.n	800160e <__aeabi_ddiv+0x436>
 8001600:	4322      	orrs	r2, r4
 8001602:	0312      	lsls	r2, r2, #12
 8001604:	46ba      	mov	sl, r7
 8001606:	000d      	movs	r5, r1
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <__aeabi_ddiv+0x5cc>)
 800160a:	0b12      	lsrs	r2, r2, #12
 800160c:	e63b      	b.n	8001286 <__aeabi_ddiv+0xae>
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	4643      	mov	r3, r8
 8001612:	0312      	lsls	r2, r2, #12
 8001614:	431a      	orrs	r2, r3
 8001616:	0312      	lsls	r2, r2, #12
 8001618:	46b2      	mov	sl, r6
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <__aeabi_ddiv+0x5cc>)
 800161c:	0b12      	lsrs	r2, r2, #12
 800161e:	e632      	b.n	8001286 <__aeabi_ddiv+0xae>
 8001620:	2b00      	cmp	r3, #0
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0x44e>
 8001624:	e702      	b.n	800142c <__aeabi_ddiv+0x254>
 8001626:	19a6      	adds	r6, r4, r6
 8001628:	1e6a      	subs	r2, r5, #1
 800162a:	42a6      	cmp	r6, r4
 800162c:	d200      	bcs.n	8001630 <__aeabi_ddiv+0x458>
 800162e:	e089      	b.n	8001744 <__aeabi_ddiv+0x56c>
 8001630:	4286      	cmp	r6, r0
 8001632:	d200      	bcs.n	8001636 <__aeabi_ddiv+0x45e>
 8001634:	e09f      	b.n	8001776 <__aeabi_ddiv+0x59e>
 8001636:	d100      	bne.n	800163a <__aeabi_ddiv+0x462>
 8001638:	e0af      	b.n	800179a <__aeabi_ddiv+0x5c2>
 800163a:	0015      	movs	r5, r2
 800163c:	e6f4      	b.n	8001428 <__aeabi_ddiv+0x250>
 800163e:	42a9      	cmp	r1, r5
 8001640:	d900      	bls.n	8001644 <__aeabi_ddiv+0x46c>
 8001642:	e63c      	b.n	80012be <__aeabi_ddiv+0xe6>
 8001644:	4643      	mov	r3, r8
 8001646:	07de      	lsls	r6, r3, #31
 8001648:	0858      	lsrs	r0, r3, #1
 800164a:	086b      	lsrs	r3, r5, #1
 800164c:	431e      	orrs	r6, r3
 800164e:	07ed      	lsls	r5, r5, #31
 8001650:	e63c      	b.n	80012cc <__aeabi_ddiv+0xf4>
 8001652:	f001 f8f1 	bl	8002838 <__clzsi2>
 8001656:	0001      	movs	r1, r0
 8001658:	0002      	movs	r2, r0
 800165a:	3115      	adds	r1, #21
 800165c:	3220      	adds	r2, #32
 800165e:	291c      	cmp	r1, #28
 8001660:	dc00      	bgt.n	8001664 <__aeabi_ddiv+0x48c>
 8001662:	e72c      	b.n	80014be <__aeabi_ddiv+0x2e6>
 8001664:	464b      	mov	r3, r9
 8001666:	3808      	subs	r0, #8
 8001668:	4083      	lsls	r3, r0
 800166a:	2500      	movs	r5, #0
 800166c:	4698      	mov	r8, r3
 800166e:	e732      	b.n	80014d6 <__aeabi_ddiv+0x2fe>
 8001670:	f001 f8e2 	bl	8002838 <__clzsi2>
 8001674:	0003      	movs	r3, r0
 8001676:	001a      	movs	r2, r3
 8001678:	3215      	adds	r2, #21
 800167a:	3020      	adds	r0, #32
 800167c:	2a1c      	cmp	r2, #28
 800167e:	dc00      	bgt.n	8001682 <__aeabi_ddiv+0x4aa>
 8001680:	e6ff      	b.n	8001482 <__aeabi_ddiv+0x2aa>
 8001682:	4654      	mov	r4, sl
 8001684:	3b08      	subs	r3, #8
 8001686:	2100      	movs	r1, #0
 8001688:	409c      	lsls	r4, r3
 800168a:	e705      	b.n	8001498 <__aeabi_ddiv+0x2c0>
 800168c:	1936      	adds	r6, r6, r4
 800168e:	3b01      	subs	r3, #1
 8001690:	42b4      	cmp	r4, r6
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x4be>
 8001694:	e6a6      	b.n	80013e4 <__aeabi_ddiv+0x20c>
 8001696:	42b2      	cmp	r2, r6
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x4c4>
 800169a:	e6a3      	b.n	80013e4 <__aeabi_ddiv+0x20c>
 800169c:	1e83      	subs	r3, r0, #2
 800169e:	1936      	adds	r6, r6, r4
 80016a0:	e6a0      	b.n	80013e4 <__aeabi_ddiv+0x20c>
 80016a2:	1909      	adds	r1, r1, r4
 80016a4:	3d01      	subs	r5, #1
 80016a6:	428c      	cmp	r4, r1
 80016a8:	d900      	bls.n	80016ac <__aeabi_ddiv+0x4d4>
 80016aa:	e68d      	b.n	80013c8 <__aeabi_ddiv+0x1f0>
 80016ac:	428a      	cmp	r2, r1
 80016ae:	d800      	bhi.n	80016b2 <__aeabi_ddiv+0x4da>
 80016b0:	e68a      	b.n	80013c8 <__aeabi_ddiv+0x1f0>
 80016b2:	1e85      	subs	r5, r0, #2
 80016b4:	1909      	adds	r1, r1, r4
 80016b6:	e687      	b.n	80013c8 <__aeabi_ddiv+0x1f0>
 80016b8:	220f      	movs	r2, #15
 80016ba:	402a      	ands	r2, r5
 80016bc:	2a04      	cmp	r2, #4
 80016be:	d100      	bne.n	80016c2 <__aeabi_ddiv+0x4ea>
 80016c0:	e6bc      	b.n	800143c <__aeabi_ddiv+0x264>
 80016c2:	1d29      	adds	r1, r5, #4
 80016c4:	42a9      	cmp	r1, r5
 80016c6:	41ad      	sbcs	r5, r5
 80016c8:	426d      	negs	r5, r5
 80016ca:	08c9      	lsrs	r1, r1, #3
 80016cc:	44a8      	add	r8, r5
 80016ce:	e6b6      	b.n	800143e <__aeabi_ddiv+0x266>
 80016d0:	42af      	cmp	r7, r5
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x4fe>
 80016d4:	e662      	b.n	800139c <__aeabi_ddiv+0x1c4>
 80016d6:	4281      	cmp	r1, r0
 80016d8:	d804      	bhi.n	80016e4 <__aeabi_ddiv+0x50c>
 80016da:	d000      	beq.n	80016de <__aeabi_ddiv+0x506>
 80016dc:	e65e      	b.n	800139c <__aeabi_ddiv+0x1c4>
 80016de:	42ae      	cmp	r6, r5
 80016e0:	d800      	bhi.n	80016e4 <__aeabi_ddiv+0x50c>
 80016e2:	e65b      	b.n	800139c <__aeabi_ddiv+0x1c4>
 80016e4:	2302      	movs	r3, #2
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	9b00      	ldr	r3, [sp, #0]
 80016ec:	44e0      	add	r8, ip
 80016ee:	469c      	mov	ip, r3
 80016f0:	4465      	add	r5, ip
 80016f2:	429d      	cmp	r5, r3
 80016f4:	419b      	sbcs	r3, r3
 80016f6:	425b      	negs	r3, r3
 80016f8:	191b      	adds	r3, r3, r4
 80016fa:	18c0      	adds	r0, r0, r3
 80016fc:	e64f      	b.n	800139e <__aeabi_ddiv+0x1c6>
 80016fe:	42b2      	cmp	r2, r6
 8001700:	d800      	bhi.n	8001704 <__aeabi_ddiv+0x52c>
 8001702:	e612      	b.n	800132a <__aeabi_ddiv+0x152>
 8001704:	1e83      	subs	r3, r0, #2
 8001706:	1936      	adds	r6, r6, r4
 8001708:	e60f      	b.n	800132a <__aeabi_ddiv+0x152>
 800170a:	428a      	cmp	r2, r1
 800170c:	d800      	bhi.n	8001710 <__aeabi_ddiv+0x538>
 800170e:	e5fa      	b.n	8001306 <__aeabi_ddiv+0x12e>
 8001710:	1e83      	subs	r3, r0, #2
 8001712:	4698      	mov	r8, r3
 8001714:	1909      	adds	r1, r1, r4
 8001716:	e5f6      	b.n	8001306 <__aeabi_ddiv+0x12e>
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <__aeabi_ddiv+0x5d4>)
 800171a:	0028      	movs	r0, r5
 800171c:	445b      	add	r3, fp
 800171e:	4641      	mov	r1, r8
 8001720:	409d      	lsls	r5, r3
 8001722:	4099      	lsls	r1, r3
 8001724:	40d0      	lsrs	r0, r2
 8001726:	1e6b      	subs	r3, r5, #1
 8001728:	419d      	sbcs	r5, r3
 800172a:	4643      	mov	r3, r8
 800172c:	4301      	orrs	r1, r0
 800172e:	4329      	orrs	r1, r5
 8001730:	40d3      	lsrs	r3, r2
 8001732:	074a      	lsls	r2, r1, #29
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0x560>
 8001736:	e755      	b.n	80015e4 <__aeabi_ddiv+0x40c>
 8001738:	220f      	movs	r2, #15
 800173a:	400a      	ands	r2, r1
 800173c:	2a04      	cmp	r2, #4
 800173e:	d000      	beq.n	8001742 <__aeabi_ddiv+0x56a>
 8001740:	e74a      	b.n	80015d8 <__aeabi_ddiv+0x400>
 8001742:	e74f      	b.n	80015e4 <__aeabi_ddiv+0x40c>
 8001744:	0015      	movs	r5, r2
 8001746:	4286      	cmp	r6, r0
 8001748:	d000      	beq.n	800174c <__aeabi_ddiv+0x574>
 800174a:	e66d      	b.n	8001428 <__aeabi_ddiv+0x250>
 800174c:	9a00      	ldr	r2, [sp, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d000      	beq.n	8001754 <__aeabi_ddiv+0x57c>
 8001752:	e669      	b.n	8001428 <__aeabi_ddiv+0x250>
 8001754:	e66a      	b.n	800142c <__aeabi_ddiv+0x254>
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <__aeabi_ddiv+0x5d8>)
 8001758:	445b      	add	r3, fp
 800175a:	2b00      	cmp	r3, #0
 800175c:	dc00      	bgt.n	8001760 <__aeabi_ddiv+0x588>
 800175e:	e713      	b.n	8001588 <__aeabi_ddiv+0x3b0>
 8001760:	2501      	movs	r5, #1
 8001762:	2100      	movs	r1, #0
 8001764:	44a8      	add	r8, r5
 8001766:	e66a      	b.n	800143e <__aeabi_ddiv+0x266>
 8001768:	075d      	lsls	r5, r3, #29
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	0b1a      	lsrs	r2, r3, #12
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	2300      	movs	r3, #0
 8001772:	430d      	orrs	r5, r1
 8001774:	e587      	b.n	8001286 <__aeabi_ddiv+0xae>
 8001776:	9900      	ldr	r1, [sp, #0]
 8001778:	3d02      	subs	r5, #2
 800177a:	004a      	lsls	r2, r1, #1
 800177c:	428a      	cmp	r2, r1
 800177e:	41bf      	sbcs	r7, r7
 8001780:	427f      	negs	r7, r7
 8001782:	193f      	adds	r7, r7, r4
 8001784:	19f6      	adds	r6, r6, r7
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	e7dd      	b.n	8001746 <__aeabi_ddiv+0x56e>
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	4643      	mov	r3, r8
 800178e:	0312      	lsls	r2, r2, #12
 8001790:	431a      	orrs	r2, r3
 8001792:	0312      	lsls	r2, r2, #12
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <__aeabi_ddiv+0x5cc>)
 8001796:	0b12      	lsrs	r2, r2, #12
 8001798:	e575      	b.n	8001286 <__aeabi_ddiv+0xae>
 800179a:	9900      	ldr	r1, [sp, #0]
 800179c:	4299      	cmp	r1, r3
 800179e:	d3ea      	bcc.n	8001776 <__aeabi_ddiv+0x59e>
 80017a0:	0015      	movs	r5, r2
 80017a2:	e7d3      	b.n	800174c <__aeabi_ddiv+0x574>
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	0000043e 	.word	0x0000043e
 80017ac:	0000041e 	.word	0x0000041e
 80017b0:	000003ff 	.word	0x000003ff

080017b4 <__eqdf2>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	464e      	mov	r6, r9
 80017b8:	4645      	mov	r5, r8
 80017ba:	46de      	mov	lr, fp
 80017bc:	4657      	mov	r7, sl
 80017be:	4690      	mov	r8, r2
 80017c0:	b5e0      	push	{r5, r6, r7, lr}
 80017c2:	0017      	movs	r7, r2
 80017c4:	031a      	lsls	r2, r3, #12
 80017c6:	0b12      	lsrs	r2, r2, #12
 80017c8:	0005      	movs	r5, r0
 80017ca:	4684      	mov	ip, r0
 80017cc:	4819      	ldr	r0, [pc, #100]	; (8001834 <__eqdf2+0x80>)
 80017ce:	030e      	lsls	r6, r1, #12
 80017d0:	004c      	lsls	r4, r1, #1
 80017d2:	4691      	mov	r9, r2
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	0fdb      	lsrs	r3, r3, #31
 80017d8:	469b      	mov	fp, r3
 80017da:	0b36      	lsrs	r6, r6, #12
 80017dc:	0d64      	lsrs	r4, r4, #21
 80017de:	0fc9      	lsrs	r1, r1, #31
 80017e0:	0d52      	lsrs	r2, r2, #21
 80017e2:	4284      	cmp	r4, r0
 80017e4:	d019      	beq.n	800181a <__eqdf2+0x66>
 80017e6:	4282      	cmp	r2, r0
 80017e8:	d010      	beq.n	800180c <__eqdf2+0x58>
 80017ea:	2001      	movs	r0, #1
 80017ec:	4294      	cmp	r4, r2
 80017ee:	d10e      	bne.n	800180e <__eqdf2+0x5a>
 80017f0:	454e      	cmp	r6, r9
 80017f2:	d10c      	bne.n	800180e <__eqdf2+0x5a>
 80017f4:	2001      	movs	r0, #1
 80017f6:	45c4      	cmp	ip, r8
 80017f8:	d109      	bne.n	800180e <__eqdf2+0x5a>
 80017fa:	4559      	cmp	r1, fp
 80017fc:	d017      	beq.n	800182e <__eqdf2+0x7a>
 80017fe:	2c00      	cmp	r4, #0
 8001800:	d105      	bne.n	800180e <__eqdf2+0x5a>
 8001802:	0030      	movs	r0, r6
 8001804:	4328      	orrs	r0, r5
 8001806:	1e43      	subs	r3, r0, #1
 8001808:	4198      	sbcs	r0, r3
 800180a:	e000      	b.n	800180e <__eqdf2+0x5a>
 800180c:	2001      	movs	r0, #1
 800180e:	bcf0      	pop	{r4, r5, r6, r7}
 8001810:	46bb      	mov	fp, r7
 8001812:	46b2      	mov	sl, r6
 8001814:	46a9      	mov	r9, r5
 8001816:	46a0      	mov	r8, r4
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181a:	0033      	movs	r3, r6
 800181c:	2001      	movs	r0, #1
 800181e:	432b      	orrs	r3, r5
 8001820:	d1f5      	bne.n	800180e <__eqdf2+0x5a>
 8001822:	42a2      	cmp	r2, r4
 8001824:	d1f3      	bne.n	800180e <__eqdf2+0x5a>
 8001826:	464b      	mov	r3, r9
 8001828:	433b      	orrs	r3, r7
 800182a:	d1f0      	bne.n	800180e <__eqdf2+0x5a>
 800182c:	e7e2      	b.n	80017f4 <__eqdf2+0x40>
 800182e:	2000      	movs	r0, #0
 8001830:	e7ed      	b.n	800180e <__eqdf2+0x5a>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	000007ff 	.word	0x000007ff

08001838 <__gedf2>:
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	4647      	mov	r7, r8
 800183c:	46ce      	mov	lr, r9
 800183e:	0004      	movs	r4, r0
 8001840:	0018      	movs	r0, r3
 8001842:	0016      	movs	r6, r2
 8001844:	031b      	lsls	r3, r3, #12
 8001846:	0b1b      	lsrs	r3, r3, #12
 8001848:	4d2d      	ldr	r5, [pc, #180]	; (8001900 <__gedf2+0xc8>)
 800184a:	004a      	lsls	r2, r1, #1
 800184c:	4699      	mov	r9, r3
 800184e:	b580      	push	{r7, lr}
 8001850:	0043      	lsls	r3, r0, #1
 8001852:	030f      	lsls	r7, r1, #12
 8001854:	46a4      	mov	ip, r4
 8001856:	46b0      	mov	r8, r6
 8001858:	0b3f      	lsrs	r7, r7, #12
 800185a:	0d52      	lsrs	r2, r2, #21
 800185c:	0fc9      	lsrs	r1, r1, #31
 800185e:	0d5b      	lsrs	r3, r3, #21
 8001860:	0fc0      	lsrs	r0, r0, #31
 8001862:	42aa      	cmp	r2, r5
 8001864:	d021      	beq.n	80018aa <__gedf2+0x72>
 8001866:	42ab      	cmp	r3, r5
 8001868:	d013      	beq.n	8001892 <__gedf2+0x5a>
 800186a:	2a00      	cmp	r2, #0
 800186c:	d122      	bne.n	80018b4 <__gedf2+0x7c>
 800186e:	433c      	orrs	r4, r7
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <__gedf2+0x42>
 8001874:	464d      	mov	r5, r9
 8001876:	432e      	orrs	r6, r5
 8001878:	d022      	beq.n	80018c0 <__gedf2+0x88>
 800187a:	2c00      	cmp	r4, #0
 800187c:	d010      	beq.n	80018a0 <__gedf2+0x68>
 800187e:	4281      	cmp	r1, r0
 8001880:	d022      	beq.n	80018c8 <__gedf2+0x90>
 8001882:	2002      	movs	r0, #2
 8001884:	3901      	subs	r1, #1
 8001886:	4008      	ands	r0, r1
 8001888:	3801      	subs	r0, #1
 800188a:	bcc0      	pop	{r6, r7}
 800188c:	46b9      	mov	r9, r7
 800188e:	46b0      	mov	r8, r6
 8001890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001892:	464d      	mov	r5, r9
 8001894:	432e      	orrs	r6, r5
 8001896:	d129      	bne.n	80018ec <__gedf2+0xb4>
 8001898:	2a00      	cmp	r2, #0
 800189a:	d1f0      	bne.n	800187e <__gedf2+0x46>
 800189c:	433c      	orrs	r4, r7
 800189e:	d1ee      	bne.n	800187e <__gedf2+0x46>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d1f2      	bne.n	800188a <__gedf2+0x52>
 80018a4:	2001      	movs	r0, #1
 80018a6:	4240      	negs	r0, r0
 80018a8:	e7ef      	b.n	800188a <__gedf2+0x52>
 80018aa:	003d      	movs	r5, r7
 80018ac:	4325      	orrs	r5, r4
 80018ae:	d11d      	bne.n	80018ec <__gedf2+0xb4>
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d0ee      	beq.n	8001892 <__gedf2+0x5a>
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e2      	bne.n	800187e <__gedf2+0x46>
 80018b8:	464c      	mov	r4, r9
 80018ba:	4326      	orrs	r6, r4
 80018bc:	d1df      	bne.n	800187e <__gedf2+0x46>
 80018be:	e7e0      	b.n	8001882 <__gedf2+0x4a>
 80018c0:	2000      	movs	r0, #0
 80018c2:	2c00      	cmp	r4, #0
 80018c4:	d0e1      	beq.n	800188a <__gedf2+0x52>
 80018c6:	e7dc      	b.n	8001882 <__gedf2+0x4a>
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dc0a      	bgt.n	80018e2 <__gedf2+0xaa>
 80018cc:	dbe8      	blt.n	80018a0 <__gedf2+0x68>
 80018ce:	454f      	cmp	r7, r9
 80018d0:	d8d7      	bhi.n	8001882 <__gedf2+0x4a>
 80018d2:	d00e      	beq.n	80018f2 <__gedf2+0xba>
 80018d4:	2000      	movs	r0, #0
 80018d6:	454f      	cmp	r7, r9
 80018d8:	d2d7      	bcs.n	800188a <__gedf2+0x52>
 80018da:	2900      	cmp	r1, #0
 80018dc:	d0e2      	beq.n	80018a4 <__gedf2+0x6c>
 80018de:	0008      	movs	r0, r1
 80018e0:	e7d3      	b.n	800188a <__gedf2+0x52>
 80018e2:	4243      	negs	r3, r0
 80018e4:	4158      	adcs	r0, r3
 80018e6:	0040      	lsls	r0, r0, #1
 80018e8:	3801      	subs	r0, #1
 80018ea:	e7ce      	b.n	800188a <__gedf2+0x52>
 80018ec:	2002      	movs	r0, #2
 80018ee:	4240      	negs	r0, r0
 80018f0:	e7cb      	b.n	800188a <__gedf2+0x52>
 80018f2:	45c4      	cmp	ip, r8
 80018f4:	d8c5      	bhi.n	8001882 <__gedf2+0x4a>
 80018f6:	2000      	movs	r0, #0
 80018f8:	45c4      	cmp	ip, r8
 80018fa:	d2c6      	bcs.n	800188a <__gedf2+0x52>
 80018fc:	e7ed      	b.n	80018da <__gedf2+0xa2>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	000007ff 	.word	0x000007ff

08001904 <__ledf2>:
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4647      	mov	r7, r8
 8001908:	46ce      	mov	lr, r9
 800190a:	0004      	movs	r4, r0
 800190c:	0018      	movs	r0, r3
 800190e:	0016      	movs	r6, r2
 8001910:	031b      	lsls	r3, r3, #12
 8001912:	0b1b      	lsrs	r3, r3, #12
 8001914:	4d2c      	ldr	r5, [pc, #176]	; (80019c8 <__ledf2+0xc4>)
 8001916:	004a      	lsls	r2, r1, #1
 8001918:	4699      	mov	r9, r3
 800191a:	b580      	push	{r7, lr}
 800191c:	0043      	lsls	r3, r0, #1
 800191e:	030f      	lsls	r7, r1, #12
 8001920:	46a4      	mov	ip, r4
 8001922:	46b0      	mov	r8, r6
 8001924:	0b3f      	lsrs	r7, r7, #12
 8001926:	0d52      	lsrs	r2, r2, #21
 8001928:	0fc9      	lsrs	r1, r1, #31
 800192a:	0d5b      	lsrs	r3, r3, #21
 800192c:	0fc0      	lsrs	r0, r0, #31
 800192e:	42aa      	cmp	r2, r5
 8001930:	d00d      	beq.n	800194e <__ledf2+0x4a>
 8001932:	42ab      	cmp	r3, r5
 8001934:	d010      	beq.n	8001958 <__ledf2+0x54>
 8001936:	2a00      	cmp	r2, #0
 8001938:	d127      	bne.n	800198a <__ledf2+0x86>
 800193a:	433c      	orrs	r4, r7
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <__ledf2+0x60>
 8001940:	464d      	mov	r5, r9
 8001942:	432e      	orrs	r6, r5
 8001944:	d10e      	bne.n	8001964 <__ledf2+0x60>
 8001946:	2000      	movs	r0, #0
 8001948:	2c00      	cmp	r4, #0
 800194a:	d015      	beq.n	8001978 <__ledf2+0x74>
 800194c:	e00e      	b.n	800196c <__ledf2+0x68>
 800194e:	003d      	movs	r5, r7
 8001950:	4325      	orrs	r5, r4
 8001952:	d110      	bne.n	8001976 <__ledf2+0x72>
 8001954:	4293      	cmp	r3, r2
 8001956:	d118      	bne.n	800198a <__ledf2+0x86>
 8001958:	464d      	mov	r5, r9
 800195a:	432e      	orrs	r6, r5
 800195c:	d10b      	bne.n	8001976 <__ledf2+0x72>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d102      	bne.n	8001968 <__ledf2+0x64>
 8001962:	433c      	orrs	r4, r7
 8001964:	2c00      	cmp	r4, #0
 8001966:	d00b      	beq.n	8001980 <__ledf2+0x7c>
 8001968:	4281      	cmp	r1, r0
 800196a:	d014      	beq.n	8001996 <__ledf2+0x92>
 800196c:	2002      	movs	r0, #2
 800196e:	3901      	subs	r1, #1
 8001970:	4008      	ands	r0, r1
 8001972:	3801      	subs	r0, #1
 8001974:	e000      	b.n	8001978 <__ledf2+0x74>
 8001976:	2002      	movs	r0, #2
 8001978:	bcc0      	pop	{r6, r7}
 800197a:	46b9      	mov	r9, r7
 800197c:	46b0      	mov	r8, r6
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001980:	2800      	cmp	r0, #0
 8001982:	d1f9      	bne.n	8001978 <__ledf2+0x74>
 8001984:	2001      	movs	r0, #1
 8001986:	4240      	negs	r0, r0
 8001988:	e7f6      	b.n	8001978 <__ledf2+0x74>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ec      	bne.n	8001968 <__ledf2+0x64>
 800198e:	464c      	mov	r4, r9
 8001990:	4326      	orrs	r6, r4
 8001992:	d1e9      	bne.n	8001968 <__ledf2+0x64>
 8001994:	e7ea      	b.n	800196c <__ledf2+0x68>
 8001996:	429a      	cmp	r2, r3
 8001998:	dd04      	ble.n	80019a4 <__ledf2+0xa0>
 800199a:	4243      	negs	r3, r0
 800199c:	4158      	adcs	r0, r3
 800199e:	0040      	lsls	r0, r0, #1
 80019a0:	3801      	subs	r0, #1
 80019a2:	e7e9      	b.n	8001978 <__ledf2+0x74>
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbeb      	blt.n	8001980 <__ledf2+0x7c>
 80019a8:	454f      	cmp	r7, r9
 80019aa:	d8df      	bhi.n	800196c <__ledf2+0x68>
 80019ac:	d006      	beq.n	80019bc <__ledf2+0xb8>
 80019ae:	2000      	movs	r0, #0
 80019b0:	454f      	cmp	r7, r9
 80019b2:	d2e1      	bcs.n	8001978 <__ledf2+0x74>
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d0e5      	beq.n	8001984 <__ledf2+0x80>
 80019b8:	0008      	movs	r0, r1
 80019ba:	e7dd      	b.n	8001978 <__ledf2+0x74>
 80019bc:	45c4      	cmp	ip, r8
 80019be:	d8d5      	bhi.n	800196c <__ledf2+0x68>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d2d8      	bcs.n	8001978 <__ledf2+0x74>
 80019c6:	e7f5      	b.n	80019b4 <__ledf2+0xb0>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dmul>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4645      	mov	r5, r8
 80019d0:	46de      	mov	lr, fp
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	001f      	movs	r7, r3
 80019da:	030b      	lsls	r3, r1, #12
 80019dc:	0b1b      	lsrs	r3, r3, #12
 80019de:	469b      	mov	fp, r3
 80019e0:	004d      	lsls	r5, r1, #1
 80019e2:	0fcb      	lsrs	r3, r1, #31
 80019e4:	0004      	movs	r4, r0
 80019e6:	4691      	mov	r9, r2
 80019e8:	4698      	mov	r8, r3
 80019ea:	b087      	sub	sp, #28
 80019ec:	0d6d      	lsrs	r5, r5, #21
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dmul+0x26>
 80019f0:	e1cd      	b.n	8001d8e <__aeabi_dmul+0x3c2>
 80019f2:	4bce      	ldr	r3, [pc, #824]	; (8001d2c <__aeabi_dmul+0x360>)
 80019f4:	429d      	cmp	r5, r3
 80019f6:	d100      	bne.n	80019fa <__aeabi_dmul+0x2e>
 80019f8:	e1e9      	b.n	8001dce <__aeabi_dmul+0x402>
 80019fa:	465a      	mov	r2, fp
 80019fc:	0f43      	lsrs	r3, r0, #29
 80019fe:	00d2      	lsls	r2, r2, #3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	00c3      	lsls	r3, r0, #3
 8001a0a:	469a      	mov	sl, r3
 8001a0c:	4bc8      	ldr	r3, [pc, #800]	; (8001d30 <__aeabi_dmul+0x364>)
 8001a0e:	4693      	mov	fp, r2
 8001a10:	469c      	mov	ip, r3
 8001a12:	2300      	movs	r3, #0
 8001a14:	2600      	movs	r6, #0
 8001a16:	4465      	add	r5, ip
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	033c      	lsls	r4, r7, #12
 8001a1c:	007b      	lsls	r3, r7, #1
 8001a1e:	4648      	mov	r0, r9
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	0d5b      	lsrs	r3, r3, #21
 8001a24:	0fff      	lsrs	r7, r7, #31
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dmul+0x60>
 8001a2a:	e189      	b.n	8001d40 <__aeabi_dmul+0x374>
 8001a2c:	4abf      	ldr	r2, [pc, #764]	; (8001d2c <__aeabi_dmul+0x360>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <__aeabi_dmul+0x9a>
 8001a32:	0f42      	lsrs	r2, r0, #29
 8001a34:	00e4      	lsls	r4, r4, #3
 8001a36:	4322      	orrs	r2, r4
 8001a38:	2480      	movs	r4, #128	; 0x80
 8001a3a:	0424      	lsls	r4, r4, #16
 8001a3c:	4314      	orrs	r4, r2
 8001a3e:	4abc      	ldr	r2, [pc, #752]	; (8001d30 <__aeabi_dmul+0x364>)
 8001a40:	2100      	movs	r1, #0
 8001a42:	4694      	mov	ip, r2
 8001a44:	4642      	mov	r2, r8
 8001a46:	4463      	add	r3, ip
 8001a48:	195b      	adds	r3, r3, r5
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	407a      	eors	r2, r7
 8001a50:	3301      	adds	r3, #1
 8001a52:	00c0      	lsls	r0, r0, #3
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2e0a      	cmp	r6, #10
 8001a5a:	dd1c      	ble.n	8001a96 <__aeabi_dmul+0xca>
 8001a5c:	003a      	movs	r2, r7
 8001a5e:	2e0b      	cmp	r6, #11
 8001a60:	d05e      	beq.n	8001b20 <__aeabi_dmul+0x154>
 8001a62:	4647      	mov	r7, r8
 8001a64:	e056      	b.n	8001b14 <__aeabi_dmul+0x148>
 8001a66:	4649      	mov	r1, r9
 8001a68:	4bb0      	ldr	r3, [pc, #704]	; (8001d2c <__aeabi_dmul+0x360>)
 8001a6a:	4321      	orrs	r1, r4
 8001a6c:	18eb      	adds	r3, r5, r3
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2900      	cmp	r1, #0
 8001a72:	d12a      	bne.n	8001aca <__aeabi_dmul+0xfe>
 8001a74:	2080      	movs	r0, #128	; 0x80
 8001a76:	2202      	movs	r2, #2
 8001a78:	0100      	lsls	r0, r0, #4
 8001a7a:	002b      	movs	r3, r5
 8001a7c:	4684      	mov	ip, r0
 8001a7e:	4316      	orrs	r6, r2
 8001a80:	4642      	mov	r2, r8
 8001a82:	4463      	add	r3, ip
 8001a84:	407a      	eors	r2, r7
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2e0a      	cmp	r6, #10
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dmul+0xc4>
 8001a8e:	e231      	b.n	8001ef4 <__aeabi_dmul+0x528>
 8001a90:	2000      	movs	r0, #0
 8001a92:	2400      	movs	r4, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	2e02      	cmp	r6, #2
 8001a98:	dc26      	bgt.n	8001ae8 <__aeabi_dmul+0x11c>
 8001a9a:	3e01      	subs	r6, #1
 8001a9c:	2e01      	cmp	r6, #1
 8001a9e:	d852      	bhi.n	8001b46 <__aeabi_dmul+0x17a>
 8001aa0:	2902      	cmp	r1, #2
 8001aa2:	d04c      	beq.n	8001b3e <__aeabi_dmul+0x172>
 8001aa4:	2901      	cmp	r1, #1
 8001aa6:	d000      	beq.n	8001aaa <__aeabi_dmul+0xde>
 8001aa8:	e118      	b.n	8001cdc <__aeabi_dmul+0x310>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2400      	movs	r4, #0
 8001aae:	2500      	movs	r5, #0
 8001ab0:	051b      	lsls	r3, r3, #20
 8001ab2:	4323      	orrs	r3, r4
 8001ab4:	07d2      	lsls	r2, r2, #31
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	0028      	movs	r0, r5
 8001aba:	0019      	movs	r1, r3
 8001abc:	b007      	add	sp, #28
 8001abe:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac0:	46bb      	mov	fp, r7
 8001ac2:	46b2      	mov	sl, r6
 8001ac4:	46a9      	mov	r9, r5
 8001ac6:	46a0      	mov	r8, r4
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	2203      	movs	r2, #3
 8001ace:	0109      	lsls	r1, r1, #4
 8001ad0:	002b      	movs	r3, r5
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	4316      	orrs	r6, r2
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	4463      	add	r3, ip
 8001ada:	407a      	eors	r2, r7
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2e0a      	cmp	r6, #10
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dmul+0x11a>
 8001ae4:	e228      	b.n	8001f38 <__aeabi_dmul+0x56c>
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	2501      	movs	r5, #1
 8001aea:	40b5      	lsls	r5, r6
 8001aec:	46ac      	mov	ip, r5
 8001aee:	26a6      	movs	r6, #166	; 0xa6
 8001af0:	4663      	mov	r3, ip
 8001af2:	00f6      	lsls	r6, r6, #3
 8001af4:	4035      	ands	r5, r6
 8001af6:	4233      	tst	r3, r6
 8001af8:	d10b      	bne.n	8001b12 <__aeabi_dmul+0x146>
 8001afa:	2690      	movs	r6, #144	; 0x90
 8001afc:	00b6      	lsls	r6, r6, #2
 8001afe:	4233      	tst	r3, r6
 8001b00:	d118      	bne.n	8001b34 <__aeabi_dmul+0x168>
 8001b02:	3eb9      	subs	r6, #185	; 0xb9
 8001b04:	3eff      	subs	r6, #255	; 0xff
 8001b06:	421e      	tst	r6, r3
 8001b08:	d01d      	beq.n	8001b46 <__aeabi_dmul+0x17a>
 8001b0a:	46a3      	mov	fp, r4
 8001b0c:	4682      	mov	sl, r0
 8001b0e:	9100      	str	r1, [sp, #0]
 8001b10:	e000      	b.n	8001b14 <__aeabi_dmul+0x148>
 8001b12:	0017      	movs	r7, r2
 8001b14:	9900      	ldr	r1, [sp, #0]
 8001b16:	003a      	movs	r2, r7
 8001b18:	2902      	cmp	r1, #2
 8001b1a:	d010      	beq.n	8001b3e <__aeabi_dmul+0x172>
 8001b1c:	465c      	mov	r4, fp
 8001b1e:	4650      	mov	r0, sl
 8001b20:	2903      	cmp	r1, #3
 8001b22:	d1bf      	bne.n	8001aa4 <__aeabi_dmul+0xd8>
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	031b      	lsls	r3, r3, #12
 8001b28:	431c      	orrs	r4, r3
 8001b2a:	0324      	lsls	r4, r4, #12
 8001b2c:	0005      	movs	r5, r0
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <__aeabi_dmul+0x360>)
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e7bd      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001b34:	2480      	movs	r4, #128	; 0x80
 8001b36:	2200      	movs	r2, #0
 8001b38:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <__aeabi_dmul+0x360>)
 8001b3a:	0324      	lsls	r4, r4, #12
 8001b3c:	e7b8      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001b3e:	2400      	movs	r4, #0
 8001b40:	2500      	movs	r5, #0
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <__aeabi_dmul+0x360>)
 8001b44:	e7b4      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001b46:	4653      	mov	r3, sl
 8001b48:	041e      	lsls	r6, r3, #16
 8001b4a:	0c36      	lsrs	r6, r6, #16
 8001b4c:	0c1f      	lsrs	r7, r3, #16
 8001b4e:	0033      	movs	r3, r6
 8001b50:	0c01      	lsrs	r1, r0, #16
 8001b52:	0400      	lsls	r0, r0, #16
 8001b54:	0c00      	lsrs	r0, r0, #16
 8001b56:	4343      	muls	r3, r0
 8001b58:	4698      	mov	r8, r3
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	437b      	muls	r3, r7
 8001b5e:	4699      	mov	r9, r3
 8001b60:	0033      	movs	r3, r6
 8001b62:	434b      	muls	r3, r1
 8001b64:	469c      	mov	ip, r3
 8001b66:	4643      	mov	r3, r8
 8001b68:	000d      	movs	r5, r1
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	469a      	mov	sl, r3
 8001b6e:	437d      	muls	r5, r7
 8001b70:	44cc      	add	ip, r9
 8001b72:	44d4      	add	ip, sl
 8001b74:	9500      	str	r5, [sp, #0]
 8001b76:	45e1      	cmp	r9, ip
 8001b78:	d904      	bls.n	8001b84 <__aeabi_dmul+0x1b8>
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4699      	mov	r9, r3
 8001b80:	444d      	add	r5, r9
 8001b82:	9500      	str	r5, [sp, #0]
 8001b84:	4663      	mov	r3, ip
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	001d      	movs	r5, r3
 8001b8a:	4663      	mov	r3, ip
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	469c      	mov	ip, r3
 8001b90:	4643      	mov	r3, r8
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	4698      	mov	r8, r3
 8001b98:	4663      	mov	r3, ip
 8001b9a:	4443      	add	r3, r8
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	0c23      	lsrs	r3, r4, #16
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	0033      	movs	r3, r6
 8001ba4:	0424      	lsls	r4, r4, #16
 8001ba6:	0c24      	lsrs	r4, r4, #16
 8001ba8:	4363      	muls	r3, r4
 8001baa:	469c      	mov	ip, r3
 8001bac:	0023      	movs	r3, r4
 8001bae:	437b      	muls	r3, r7
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	4643      	mov	r3, r8
 8001bb4:	435e      	muls	r6, r3
 8001bb6:	435f      	muls	r7, r3
 8001bb8:	444e      	add	r6, r9
 8001bba:	4663      	mov	r3, ip
 8001bbc:	46b2      	mov	sl, r6
 8001bbe:	0c1e      	lsrs	r6, r3, #16
 8001bc0:	4456      	add	r6, sl
 8001bc2:	45b1      	cmp	r9, r6
 8001bc4:	d903      	bls.n	8001bce <__aeabi_dmul+0x202>
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	4699      	mov	r9, r3
 8001bcc:	444f      	add	r7, r9
 8001bce:	0c33      	lsrs	r3, r6, #16
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	003b      	movs	r3, r7
 8001bd4:	444b      	add	r3, r9
 8001bd6:	9305      	str	r3, [sp, #20]
 8001bd8:	4663      	mov	r3, ip
 8001bda:	46ac      	mov	ip, r5
 8001bdc:	041f      	lsls	r7, r3, #16
 8001bde:	0c3f      	lsrs	r7, r7, #16
 8001be0:	0436      	lsls	r6, r6, #16
 8001be2:	19f6      	adds	r6, r6, r7
 8001be4:	44b4      	add	ip, r6
 8001be6:	4663      	mov	r3, ip
 8001be8:	9304      	str	r3, [sp, #16]
 8001bea:	465b      	mov	r3, fp
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	469c      	mov	ip, r3
 8001bf0:	465b      	mov	r3, fp
 8001bf2:	041f      	lsls	r7, r3, #16
 8001bf4:	0c3f      	lsrs	r7, r7, #16
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	4343      	muls	r3, r0
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	4343      	muls	r3, r0
 8001c00:	469a      	mov	sl, r3
 8001c02:	464b      	mov	r3, r9
 8001c04:	4660      	mov	r0, ip
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	469b      	mov	fp, r3
 8001c0a:	4348      	muls	r0, r1
 8001c0c:	4379      	muls	r1, r7
 8001c0e:	4451      	add	r1, sl
 8001c10:	4459      	add	r1, fp
 8001c12:	458a      	cmp	sl, r1
 8001c14:	d903      	bls.n	8001c1e <__aeabi_dmul+0x252>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	469a      	mov	sl, r3
 8001c1c:	4450      	add	r0, sl
 8001c1e:	0c0b      	lsrs	r3, r1, #16
 8001c20:	469a      	mov	sl, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	4699      	mov	r9, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4363      	muls	r3, r4
 8001c2e:	0409      	lsls	r1, r1, #16
 8001c30:	4645      	mov	r5, r8
 8001c32:	4449      	add	r1, r9
 8001c34:	4699      	mov	r9, r3
 8001c36:	4663      	mov	r3, ip
 8001c38:	435c      	muls	r4, r3
 8001c3a:	436b      	muls	r3, r5
 8001c3c:	469c      	mov	ip, r3
 8001c3e:	464b      	mov	r3, r9
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	4698      	mov	r8, r3
 8001c44:	436f      	muls	r7, r5
 8001c46:	193f      	adds	r7, r7, r4
 8001c48:	4447      	add	r7, r8
 8001c4a:	4450      	add	r0, sl
 8001c4c:	42bc      	cmp	r4, r7
 8001c4e:	d903      	bls.n	8001c58 <__aeabi_dmul+0x28c>
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	4698      	mov	r8, r3
 8001c56:	44c4      	add	ip, r8
 8001c58:	9b04      	ldr	r3, [sp, #16]
 8001c5a:	9d00      	ldr	r5, [sp, #0]
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	4445      	add	r5, r8
 8001c60:	42b5      	cmp	r5, r6
 8001c62:	41b6      	sbcs	r6, r6
 8001c64:	4273      	negs	r3, r6
 8001c66:	4698      	mov	r8, r3
 8001c68:	464b      	mov	r3, r9
 8001c6a:	041e      	lsls	r6, r3, #16
 8001c6c:	9b05      	ldr	r3, [sp, #20]
 8001c6e:	043c      	lsls	r4, r7, #16
 8001c70:	4699      	mov	r9, r3
 8001c72:	0c36      	lsrs	r6, r6, #16
 8001c74:	19a4      	adds	r4, r4, r6
 8001c76:	444c      	add	r4, r9
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	4683      	mov	fp, r0
 8001c7c:	186e      	adds	r6, r5, r1
 8001c7e:	44c1      	add	r9, r8
 8001c80:	428e      	cmp	r6, r1
 8001c82:	4189      	sbcs	r1, r1
 8001c84:	44cb      	add	fp, r9
 8001c86:	465d      	mov	r5, fp
 8001c88:	4249      	negs	r1, r1
 8001c8a:	186d      	adds	r5, r5, r1
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	41a4      	sbcs	r4, r4
 8001c90:	45c1      	cmp	r9, r8
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	4583      	cmp	fp, r0
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	428d      	cmp	r5, r1
 8001c9a:	4189      	sbcs	r1, r1
 8001c9c:	425b      	negs	r3, r3
 8001c9e:	4264      	negs	r4, r4
 8001ca0:	431c      	orrs	r4, r3
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	4249      	negs	r1, r1
 8001ca8:	4301      	orrs	r1, r0
 8001caa:	0270      	lsls	r0, r6, #9
 8001cac:	0c3f      	lsrs	r7, r7, #16
 8001cae:	4318      	orrs	r0, r3
 8001cb0:	19e4      	adds	r4, r4, r7
 8001cb2:	1e47      	subs	r7, r0, #1
 8001cb4:	41b8      	sbcs	r0, r7
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	4464      	add	r4, ip
 8001cba:	0df6      	lsrs	r6, r6, #23
 8001cbc:	0261      	lsls	r1, r4, #9
 8001cbe:	4330      	orrs	r0, r6
 8001cc0:	0dec      	lsrs	r4, r5, #23
 8001cc2:	026e      	lsls	r6, r5, #9
 8001cc4:	430c      	orrs	r4, r1
 8001cc6:	4330      	orrs	r0, r6
 8001cc8:	01c9      	lsls	r1, r1, #7
 8001cca:	d400      	bmi.n	8001cce <__aeabi_dmul+0x302>
 8001ccc:	e0f1      	b.n	8001eb2 <__aeabi_dmul+0x4e6>
 8001cce:	2101      	movs	r1, #1
 8001cd0:	0843      	lsrs	r3, r0, #1
 8001cd2:	4001      	ands	r1, r0
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	07e0      	lsls	r0, r4, #31
 8001cd8:	4318      	orrs	r0, r3
 8001cda:	0864      	lsrs	r4, r4, #1
 8001cdc:	4915      	ldr	r1, [pc, #84]	; (8001d34 <__aeabi_dmul+0x368>)
 8001cde:	9b02      	ldr	r3, [sp, #8]
 8001ce0:	468c      	mov	ip, r1
 8001ce2:	4463      	add	r3, ip
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dmul+0x31e>
 8001ce8:	e097      	b.n	8001e1a <__aeabi_dmul+0x44e>
 8001cea:	0741      	lsls	r1, r0, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dmul+0x336>
 8001cee:	210f      	movs	r1, #15
 8001cf0:	4001      	ands	r1, r0
 8001cf2:	2904      	cmp	r1, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dmul+0x336>
 8001cf6:	1d01      	adds	r1, r0, #4
 8001cf8:	4281      	cmp	r1, r0
 8001cfa:	4180      	sbcs	r0, r0
 8001cfc:	4240      	negs	r0, r0
 8001cfe:	1824      	adds	r4, r4, r0
 8001d00:	0008      	movs	r0, r1
 8001d02:	01e1      	lsls	r1, r4, #7
 8001d04:	d506      	bpl.n	8001d14 <__aeabi_dmul+0x348>
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	00c9      	lsls	r1, r1, #3
 8001d0a:	468c      	mov	ip, r1
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <__aeabi_dmul+0x36c>)
 8001d0e:	401c      	ands	r4, r3
 8001d10:	9b02      	ldr	r3, [sp, #8]
 8001d12:	4463      	add	r3, ip
 8001d14:	4909      	ldr	r1, [pc, #36]	; (8001d3c <__aeabi_dmul+0x370>)
 8001d16:	428b      	cmp	r3, r1
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dmul+0x350>
 8001d1a:	e710      	b.n	8001b3e <__aeabi_dmul+0x172>
 8001d1c:	0761      	lsls	r1, r4, #29
 8001d1e:	08c5      	lsrs	r5, r0, #3
 8001d20:	0264      	lsls	r4, r4, #9
 8001d22:	055b      	lsls	r3, r3, #21
 8001d24:	430d      	orrs	r5, r1
 8001d26:	0b24      	lsrs	r4, r4, #12
 8001d28:	0d5b      	lsrs	r3, r3, #21
 8001d2a:	e6c1      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001d2c:	000007ff 	.word	0x000007ff
 8001d30:	fffffc01 	.word	0xfffffc01
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	464b      	mov	r3, r9
 8001d42:	4323      	orrs	r3, r4
 8001d44:	d059      	beq.n	8001dfa <__aeabi_dmul+0x42e>
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dmul+0x380>
 8001d4a:	e0a3      	b.n	8001e94 <__aeabi_dmul+0x4c8>
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	f000 fd73 	bl	8002838 <__clzsi2>
 8001d52:	0001      	movs	r1, r0
 8001d54:	0003      	movs	r3, r0
 8001d56:	390b      	subs	r1, #11
 8001d58:	221d      	movs	r2, #29
 8001d5a:	1a52      	subs	r2, r2, r1
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	0018      	movs	r0, r3
 8001d60:	40d1      	lsrs	r1, r2
 8001d62:	464a      	mov	r2, r9
 8001d64:	3808      	subs	r0, #8
 8001d66:	4082      	lsls	r2, r0
 8001d68:	4084      	lsls	r4, r0
 8001d6a:	0010      	movs	r0, r2
 8001d6c:	430c      	orrs	r4, r1
 8001d6e:	4a74      	ldr	r2, [pc, #464]	; (8001f40 <__aeabi_dmul+0x574>)
 8001d70:	1aeb      	subs	r3, r5, r3
 8001d72:	4694      	mov	ip, r2
 8001d74:	4642      	mov	r2, r8
 8001d76:	4463      	add	r3, ip
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	407a      	eors	r2, r7
 8001d7e:	3301      	adds	r3, #1
 8001d80:	2100      	movs	r1, #0
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	2e0a      	cmp	r6, #10
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dmul+0x3c0>
 8001d8a:	e667      	b.n	8001a5c <__aeabi_dmul+0x90>
 8001d8c:	e683      	b.n	8001a96 <__aeabi_dmul+0xca>
 8001d8e:	465b      	mov	r3, fp
 8001d90:	4303      	orrs	r3, r0
 8001d92:	469a      	mov	sl, r3
 8001d94:	d02a      	beq.n	8001dec <__aeabi_dmul+0x420>
 8001d96:	465b      	mov	r3, fp
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d06d      	beq.n	8001e78 <__aeabi_dmul+0x4ac>
 8001d9c:	4658      	mov	r0, fp
 8001d9e:	f000 fd4b 	bl	8002838 <__clzsi2>
 8001da2:	0001      	movs	r1, r0
 8001da4:	0003      	movs	r3, r0
 8001da6:	390b      	subs	r1, #11
 8001da8:	221d      	movs	r2, #29
 8001daa:	1a52      	subs	r2, r2, r1
 8001dac:	0021      	movs	r1, r4
 8001dae:	0018      	movs	r0, r3
 8001db0:	465d      	mov	r5, fp
 8001db2:	40d1      	lsrs	r1, r2
 8001db4:	3808      	subs	r0, #8
 8001db6:	4085      	lsls	r5, r0
 8001db8:	000a      	movs	r2, r1
 8001dba:	4084      	lsls	r4, r0
 8001dbc:	432a      	orrs	r2, r5
 8001dbe:	4693      	mov	fp, r2
 8001dc0:	46a2      	mov	sl, r4
 8001dc2:	4d5f      	ldr	r5, [pc, #380]	; (8001f40 <__aeabi_dmul+0x574>)
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	1aed      	subs	r5, r5, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	e625      	b.n	8001a1a <__aeabi_dmul+0x4e>
 8001dce:	465b      	mov	r3, fp
 8001dd0:	4303      	orrs	r3, r0
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	d105      	bne.n	8001de2 <__aeabi_dmul+0x416>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	469b      	mov	fp, r3
 8001dda:	3302      	adds	r3, #2
 8001ddc:	2608      	movs	r6, #8
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	e61b      	b.n	8001a1a <__aeabi_dmul+0x4e>
 8001de2:	2303      	movs	r3, #3
 8001de4:	4682      	mov	sl, r0
 8001de6:	260c      	movs	r6, #12
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e616      	b.n	8001a1a <__aeabi_dmul+0x4e>
 8001dec:	2300      	movs	r3, #0
 8001dee:	469b      	mov	fp, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	2604      	movs	r6, #4
 8001df4:	2500      	movs	r5, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	e60f      	b.n	8001a1a <__aeabi_dmul+0x4e>
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	9501      	str	r5, [sp, #4]
 8001e00:	431e      	orrs	r6, r3
 8001e02:	9b01      	ldr	r3, [sp, #4]
 8001e04:	407a      	eors	r2, r7
 8001e06:	3301      	adds	r3, #1
 8001e08:	2400      	movs	r4, #0
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2e0a      	cmp	r6, #10
 8001e14:	dd00      	ble.n	8001e18 <__aeabi_dmul+0x44c>
 8001e16:	e621      	b.n	8001a5c <__aeabi_dmul+0x90>
 8001e18:	e63d      	b.n	8001a96 <__aeabi_dmul+0xca>
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	1ac9      	subs	r1, r1, r3
 8001e1e:	2938      	cmp	r1, #56	; 0x38
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dmul+0x458>
 8001e22:	e642      	b.n	8001aaa <__aeabi_dmul+0xde>
 8001e24:	291f      	cmp	r1, #31
 8001e26:	dd47      	ble.n	8001eb8 <__aeabi_dmul+0x4ec>
 8001e28:	261f      	movs	r6, #31
 8001e2a:	0025      	movs	r5, r4
 8001e2c:	4276      	negs	r6, r6
 8001e2e:	1af3      	subs	r3, r6, r3
 8001e30:	40dd      	lsrs	r5, r3
 8001e32:	002b      	movs	r3, r5
 8001e34:	2920      	cmp	r1, #32
 8001e36:	d005      	beq.n	8001e44 <__aeabi_dmul+0x478>
 8001e38:	4942      	ldr	r1, [pc, #264]	; (8001f44 <__aeabi_dmul+0x578>)
 8001e3a:	9d02      	ldr	r5, [sp, #8]
 8001e3c:	468c      	mov	ip, r1
 8001e3e:	4465      	add	r5, ip
 8001e40:	40ac      	lsls	r4, r5
 8001e42:	4320      	orrs	r0, r4
 8001e44:	1e41      	subs	r1, r0, #1
 8001e46:	4188      	sbcs	r0, r1
 8001e48:	4318      	orrs	r0, r3
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	2400      	movs	r4, #0
 8001e50:	4005      	ands	r5, r0
 8001e52:	4203      	tst	r3, r0
 8001e54:	d04a      	beq.n	8001eec <__aeabi_dmul+0x520>
 8001e56:	230f      	movs	r3, #15
 8001e58:	2400      	movs	r4, #0
 8001e5a:	4003      	ands	r3, r0
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d042      	beq.n	8001ee6 <__aeabi_dmul+0x51a>
 8001e60:	1d03      	adds	r3, r0, #4
 8001e62:	4283      	cmp	r3, r0
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	4240      	negs	r0, r0
 8001e68:	1824      	adds	r4, r4, r0
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	0223      	lsls	r3, r4, #8
 8001e6e:	d53a      	bpl.n	8001ee6 <__aeabi_dmul+0x51a>
 8001e70:	2301      	movs	r3, #1
 8001e72:	2400      	movs	r4, #0
 8001e74:	2500      	movs	r5, #0
 8001e76:	e61b      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001e78:	f000 fcde 	bl	8002838 <__clzsi2>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	0003      	movs	r3, r0
 8001e80:	3115      	adds	r1, #21
 8001e82:	3320      	adds	r3, #32
 8001e84:	291c      	cmp	r1, #28
 8001e86:	dd8f      	ble.n	8001da8 <__aeabi_dmul+0x3dc>
 8001e88:	3808      	subs	r0, #8
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4084      	lsls	r4, r0
 8001e8e:	4692      	mov	sl, r2
 8001e90:	46a3      	mov	fp, r4
 8001e92:	e796      	b.n	8001dc2 <__aeabi_dmul+0x3f6>
 8001e94:	f000 fcd0 	bl	8002838 <__clzsi2>
 8001e98:	0001      	movs	r1, r0
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	3115      	adds	r1, #21
 8001e9e:	3320      	adds	r3, #32
 8001ea0:	291c      	cmp	r1, #28
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_dmul+0x4da>
 8001ea4:	e758      	b.n	8001d58 <__aeabi_dmul+0x38c>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	464c      	mov	r4, r9
 8001eaa:	3a08      	subs	r2, #8
 8001eac:	2000      	movs	r0, #0
 8001eae:	4094      	lsls	r4, r2
 8001eb0:	e75d      	b.n	8001d6e <__aeabi_dmul+0x3a2>
 8001eb2:	9b01      	ldr	r3, [sp, #4]
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	e711      	b.n	8001cdc <__aeabi_dmul+0x310>
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <__aeabi_dmul+0x57c>)
 8001eba:	0026      	movs	r6, r4
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	9d02      	ldr	r5, [sp, #8]
 8001ec2:	40cb      	lsrs	r3, r1
 8001ec4:	4465      	add	r5, ip
 8001ec6:	40ae      	lsls	r6, r5
 8001ec8:	431e      	orrs	r6, r3
 8001eca:	0003      	movs	r3, r0
 8001ecc:	40ab      	lsls	r3, r5
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	4183      	sbcs	r3, r0
 8001ed2:	0030      	movs	r0, r6
 8001ed4:	4318      	orrs	r0, r3
 8001ed6:	40cc      	lsrs	r4, r1
 8001ed8:	0743      	lsls	r3, r0, #29
 8001eda:	d0c7      	beq.n	8001e6c <__aeabi_dmul+0x4a0>
 8001edc:	230f      	movs	r3, #15
 8001ede:	4003      	ands	r3, r0
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d1bd      	bne.n	8001e60 <__aeabi_dmul+0x494>
 8001ee4:	e7c2      	b.n	8001e6c <__aeabi_dmul+0x4a0>
 8001ee6:	0765      	lsls	r5, r4, #29
 8001ee8:	0264      	lsls	r4, r4, #9
 8001eea:	0b24      	lsrs	r4, r4, #12
 8001eec:	08c0      	lsrs	r0, r0, #3
 8001eee:	2300      	movs	r3, #0
 8001ef0:	4305      	orrs	r5, r0
 8001ef2:	e5dd      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	2e0f      	cmp	r6, #15
 8001efa:	d10c      	bne.n	8001f16 <__aeabi_dmul+0x54a>
 8001efc:	2480      	movs	r4, #128	; 0x80
 8001efe:	465b      	mov	r3, fp
 8001f00:	0324      	lsls	r4, r4, #12
 8001f02:	4223      	tst	r3, r4
 8001f04:	d00e      	beq.n	8001f24 <__aeabi_dmul+0x558>
 8001f06:	4221      	tst	r1, r4
 8001f08:	d10c      	bne.n	8001f24 <__aeabi_dmul+0x558>
 8001f0a:	430c      	orrs	r4, r1
 8001f0c:	0324      	lsls	r4, r4, #12
 8001f0e:	003a      	movs	r2, r7
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <__aeabi_dmul+0x580>)
 8001f12:	0b24      	lsrs	r4, r4, #12
 8001f14:	e5cc      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001f16:	2e0b      	cmp	r6, #11
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dmul+0x550>
 8001f1a:	e5a2      	b.n	8001a62 <__aeabi_dmul+0x96>
 8001f1c:	468b      	mov	fp, r1
 8001f1e:	46aa      	mov	sl, r5
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	e5f7      	b.n	8001b14 <__aeabi_dmul+0x148>
 8001f24:	2480      	movs	r4, #128	; 0x80
 8001f26:	465b      	mov	r3, fp
 8001f28:	0324      	lsls	r4, r4, #12
 8001f2a:	431c      	orrs	r4, r3
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	4642      	mov	r2, r8
 8001f30:	4655      	mov	r5, sl
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <__aeabi_dmul+0x580>)
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	e5bb      	b.n	8001ab0 <__aeabi_dmul+0xe4>
 8001f38:	464d      	mov	r5, r9
 8001f3a:	0021      	movs	r1, r4
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e7db      	b.n	8001ef8 <__aeabi_dmul+0x52c>
 8001f40:	fffffc0d 	.word	0xfffffc0d
 8001f44:	0000043e 	.word	0x0000043e
 8001f48:	0000041e 	.word	0x0000041e
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__aeabi_dsub>:
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	4657      	mov	r7, sl
 8001f54:	464e      	mov	r6, r9
 8001f56:	4645      	mov	r5, r8
 8001f58:	46de      	mov	lr, fp
 8001f5a:	b5e0      	push	{r5, r6, r7, lr}
 8001f5c:	000d      	movs	r5, r1
 8001f5e:	0004      	movs	r4, r0
 8001f60:	0019      	movs	r1, r3
 8001f62:	0010      	movs	r0, r2
 8001f64:	032b      	lsls	r3, r5, #12
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	0f62      	lsrs	r2, r4, #29
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	00e3      	lsls	r3, r4, #3
 8001f6e:	030c      	lsls	r4, r1, #12
 8001f70:	0a64      	lsrs	r4, r4, #9
 8001f72:	0f47      	lsrs	r7, r0, #29
 8001f74:	4327      	orrs	r7, r4
 8001f76:	4cd0      	ldr	r4, [pc, #832]	; (80022b8 <__aeabi_dsub+0x368>)
 8001f78:	006e      	lsls	r6, r5, #1
 8001f7a:	4691      	mov	r9, r2
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	004a      	lsls	r2, r1, #1
 8001f80:	00c0      	lsls	r0, r0, #3
 8001f82:	4698      	mov	r8, r3
 8001f84:	46a2      	mov	sl, r4
 8001f86:	0d76      	lsrs	r6, r6, #21
 8001f88:	0fed      	lsrs	r5, r5, #31
 8001f8a:	0d52      	lsrs	r2, r2, #21
 8001f8c:	0fc9      	lsrs	r1, r1, #31
 8001f8e:	9001      	str	r0, [sp, #4]
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x46>
 8001f94:	e0b9      	b.n	800210a <__aeabi_dsub+0x1ba>
 8001f96:	2401      	movs	r4, #1
 8001f98:	4061      	eors	r1, r4
 8001f9a:	468b      	mov	fp, r1
 8001f9c:	428d      	cmp	r5, r1
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dsub+0x52>
 8001fa0:	e08d      	b.n	80020be <__aeabi_dsub+0x16e>
 8001fa2:	1ab4      	subs	r4, r6, r2
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x5c>
 8001faa:	e0b7      	b.n	800211c <__aeabi_dsub+0x1cc>
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x62>
 8001fb0:	e0cb      	b.n	800214a <__aeabi_dsub+0x1fa>
 8001fb2:	4ac1      	ldr	r2, [pc, #772]	; (80022b8 <__aeabi_dsub+0x368>)
 8001fb4:	4296      	cmp	r6, r2
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x6a>
 8001fb8:	e186      	b.n	80022c8 <__aeabi_dsub+0x378>
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	4317      	orrs	r7, r2
 8001fc0:	4662      	mov	r2, ip
 8001fc2:	2a38      	cmp	r2, #56	; 0x38
 8001fc4:	dd00      	ble.n	8001fc8 <__aeabi_dsub+0x78>
 8001fc6:	e1a4      	b.n	8002312 <__aeabi_dsub+0x3c2>
 8001fc8:	2a1f      	cmp	r2, #31
 8001fca:	dd00      	ble.n	8001fce <__aeabi_dsub+0x7e>
 8001fcc:	e21d      	b.n	800240a <__aeabi_dsub+0x4ba>
 8001fce:	4661      	mov	r1, ip
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	003c      	movs	r4, r7
 8001fd4:	1a52      	subs	r2, r2, r1
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	4094      	lsls	r4, r2
 8001fdc:	1e42      	subs	r2, r0, #1
 8001fde:	4190      	sbcs	r0, r2
 8001fe0:	4662      	mov	r2, ip
 8001fe2:	46a0      	mov	r8, r4
 8001fe4:	4664      	mov	r4, ip
 8001fe6:	40d7      	lsrs	r7, r2
 8001fe8:	464a      	mov	r2, r9
 8001fea:	40e1      	lsrs	r1, r4
 8001fec:	4644      	mov	r4, r8
 8001fee:	1bd2      	subs	r2, r2, r7
 8001ff0:	4691      	mov	r9, r2
 8001ff2:	430c      	orrs	r4, r1
 8001ff4:	4304      	orrs	r4, r0
 8001ff6:	1b1c      	subs	r4, r3, r4
 8001ff8:	42a3      	cmp	r3, r4
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4252      	negs	r2, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	469a      	mov	sl, r3
 8002004:	4653      	mov	r3, sl
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	d400      	bmi.n	800200c <__aeabi_dsub+0xbc>
 800200a:	e12b      	b.n	8002264 <__aeabi_dsub+0x314>
 800200c:	4653      	mov	r3, sl
 800200e:	025a      	lsls	r2, r3, #9
 8002010:	0a53      	lsrs	r3, r2, #9
 8002012:	469a      	mov	sl, r3
 8002014:	4653      	mov	r3, sl
 8002016:	2b00      	cmp	r3, #0
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0xcc>
 800201a:	e166      	b.n	80022ea <__aeabi_dsub+0x39a>
 800201c:	4650      	mov	r0, sl
 800201e:	f000 fc0b 	bl	8002838 <__clzsi2>
 8002022:	0003      	movs	r3, r0
 8002024:	3b08      	subs	r3, #8
 8002026:	2220      	movs	r2, #32
 8002028:	0020      	movs	r0, r4
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	4651      	mov	r1, sl
 800202e:	40d0      	lsrs	r0, r2
 8002030:	4099      	lsls	r1, r3
 8002032:	0002      	movs	r2, r0
 8002034:	409c      	lsls	r4, r3
 8002036:	430a      	orrs	r2, r1
 8002038:	429e      	cmp	r6, r3
 800203a:	dd00      	ble.n	800203e <__aeabi_dsub+0xee>
 800203c:	e164      	b.n	8002308 <__aeabi_dsub+0x3b8>
 800203e:	1b9b      	subs	r3, r3, r6
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	291f      	cmp	r1, #31
 8002044:	dd00      	ble.n	8002048 <__aeabi_dsub+0xf8>
 8002046:	e0fe      	b.n	8002246 <__aeabi_dsub+0x2f6>
 8002048:	2320      	movs	r3, #32
 800204a:	0010      	movs	r0, r2
 800204c:	0026      	movs	r6, r4
 800204e:	1a5b      	subs	r3, r3, r1
 8002050:	409c      	lsls	r4, r3
 8002052:	4098      	lsls	r0, r3
 8002054:	40ce      	lsrs	r6, r1
 8002056:	40ca      	lsrs	r2, r1
 8002058:	1e63      	subs	r3, r4, #1
 800205a:	419c      	sbcs	r4, r3
 800205c:	4330      	orrs	r0, r6
 800205e:	4692      	mov	sl, r2
 8002060:	2600      	movs	r6, #0
 8002062:	4304      	orrs	r4, r0
 8002064:	0763      	lsls	r3, r4, #29
 8002066:	d009      	beq.n	800207c <__aeabi_dsub+0x12c>
 8002068:	230f      	movs	r3, #15
 800206a:	4023      	ands	r3, r4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d005      	beq.n	800207c <__aeabi_dsub+0x12c>
 8002070:	1d23      	adds	r3, r4, #4
 8002072:	42a3      	cmp	r3, r4
 8002074:	41a4      	sbcs	r4, r4
 8002076:	4264      	negs	r4, r4
 8002078:	44a2      	add	sl, r4
 800207a:	001c      	movs	r4, r3
 800207c:	4653      	mov	r3, sl
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	d400      	bmi.n	8002084 <__aeabi_dsub+0x134>
 8002082:	e0f2      	b.n	800226a <__aeabi_dsub+0x31a>
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <__aeabi_dsub+0x368>)
 8002086:	3601      	adds	r6, #1
 8002088:	429e      	cmp	r6, r3
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x13e>
 800208c:	e10f      	b.n	80022ae <__aeabi_dsub+0x35e>
 800208e:	4653      	mov	r3, sl
 8002090:	498a      	ldr	r1, [pc, #552]	; (80022bc <__aeabi_dsub+0x36c>)
 8002092:	08e4      	lsrs	r4, r4, #3
 8002094:	400b      	ands	r3, r1
 8002096:	0019      	movs	r1, r3
 8002098:	075b      	lsls	r3, r3, #29
 800209a:	4323      	orrs	r3, r4
 800209c:	0572      	lsls	r2, r6, #21
 800209e:	024c      	lsls	r4, r1, #9
 80020a0:	0b24      	lsrs	r4, r4, #12
 80020a2:	0d52      	lsrs	r2, r2, #21
 80020a4:	0512      	lsls	r2, r2, #20
 80020a6:	4322      	orrs	r2, r4
 80020a8:	07ed      	lsls	r5, r5, #31
 80020aa:	432a      	orrs	r2, r5
 80020ac:	0018      	movs	r0, r3
 80020ae:	0011      	movs	r1, r2
 80020b0:	b003      	add	sp, #12
 80020b2:	bcf0      	pop	{r4, r5, r6, r7}
 80020b4:	46bb      	mov	fp, r7
 80020b6:	46b2      	mov	sl, r6
 80020b8:	46a9      	mov	r9, r5
 80020ba:	46a0      	mov	r8, r4
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020be:	1ab4      	subs	r4, r6, r2
 80020c0:	46a4      	mov	ip, r4
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	dd59      	ble.n	800217a <__aeabi_dsub+0x22a>
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x17c>
 80020ca:	e0b0      	b.n	800222e <__aeabi_dsub+0x2de>
 80020cc:	4556      	cmp	r6, sl
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x182>
 80020d0:	e0fa      	b.n	80022c8 <__aeabi_dsub+0x378>
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	0412      	lsls	r2, r2, #16
 80020d6:	4317      	orrs	r7, r2
 80020d8:	4662      	mov	r2, ip
 80020da:	2a38      	cmp	r2, #56	; 0x38
 80020dc:	dd00      	ble.n	80020e0 <__aeabi_dsub+0x190>
 80020de:	e0d4      	b.n	800228a <__aeabi_dsub+0x33a>
 80020e0:	2a1f      	cmp	r2, #31
 80020e2:	dc00      	bgt.n	80020e6 <__aeabi_dsub+0x196>
 80020e4:	e1c0      	b.n	8002468 <__aeabi_dsub+0x518>
 80020e6:	0039      	movs	r1, r7
 80020e8:	3a20      	subs	r2, #32
 80020ea:	40d1      	lsrs	r1, r2
 80020ec:	4662      	mov	r2, ip
 80020ee:	2a20      	cmp	r2, #32
 80020f0:	d006      	beq.n	8002100 <__aeabi_dsub+0x1b0>
 80020f2:	4664      	mov	r4, ip
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	1b12      	subs	r2, r2, r4
 80020f8:	003c      	movs	r4, r7
 80020fa:	4094      	lsls	r4, r2
 80020fc:	4304      	orrs	r4, r0
 80020fe:	9401      	str	r4, [sp, #4]
 8002100:	9c01      	ldr	r4, [sp, #4]
 8002102:	1e62      	subs	r2, r4, #1
 8002104:	4194      	sbcs	r4, r2
 8002106:	430c      	orrs	r4, r1
 8002108:	e0c3      	b.n	8002292 <__aeabi_dsub+0x342>
 800210a:	003c      	movs	r4, r7
 800210c:	4304      	orrs	r4, r0
 800210e:	d02b      	beq.n	8002168 <__aeabi_dsub+0x218>
 8002110:	468b      	mov	fp, r1
 8002112:	428d      	cmp	r5, r1
 8002114:	d02e      	beq.n	8002174 <__aeabi_dsub+0x224>
 8002116:	4c6a      	ldr	r4, [pc, #424]	; (80022c0 <__aeabi_dsub+0x370>)
 8002118:	46a4      	mov	ip, r4
 800211a:	44b4      	add	ip, r6
 800211c:	4664      	mov	r4, ip
 800211e:	2c00      	cmp	r4, #0
 8002120:	d05f      	beq.n	80021e2 <__aeabi_dsub+0x292>
 8002122:	1b94      	subs	r4, r2, r6
 8002124:	46a4      	mov	ip, r4
 8002126:	2e00      	cmp	r6, #0
 8002128:	d000      	beq.n	800212c <__aeabi_dsub+0x1dc>
 800212a:	e120      	b.n	800236e <__aeabi_dsub+0x41e>
 800212c:	464c      	mov	r4, r9
 800212e:	431c      	orrs	r4, r3
 8002130:	d100      	bne.n	8002134 <__aeabi_dsub+0x1e4>
 8002132:	e1c7      	b.n	80024c4 <__aeabi_dsub+0x574>
 8002134:	4661      	mov	r1, ip
 8002136:	1e4c      	subs	r4, r1, #1
 8002138:	2901      	cmp	r1, #1
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x1ee>
 800213c:	e223      	b.n	8002586 <__aeabi_dsub+0x636>
 800213e:	4d5e      	ldr	r5, [pc, #376]	; (80022b8 <__aeabi_dsub+0x368>)
 8002140:	45ac      	cmp	ip, r5
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x1f6>
 8002144:	e1d8      	b.n	80024f8 <__aeabi_dsub+0x5a8>
 8002146:	46a4      	mov	ip, r4
 8002148:	e11a      	b.n	8002380 <__aeabi_dsub+0x430>
 800214a:	003a      	movs	r2, r7
 800214c:	4302      	orrs	r2, r0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x202>
 8002150:	e0e4      	b.n	800231c <__aeabi_dsub+0x3cc>
 8002152:	0022      	movs	r2, r4
 8002154:	3a01      	subs	r2, #1
 8002156:	2c01      	cmp	r4, #1
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x20c>
 800215a:	e1c3      	b.n	80024e4 <__aeabi_dsub+0x594>
 800215c:	4956      	ldr	r1, [pc, #344]	; (80022b8 <__aeabi_dsub+0x368>)
 800215e:	428c      	cmp	r4, r1
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x214>
 8002162:	e0b1      	b.n	80022c8 <__aeabi_dsub+0x378>
 8002164:	4694      	mov	ip, r2
 8002166:	e72b      	b.n	8001fc0 <__aeabi_dsub+0x70>
 8002168:	2401      	movs	r4, #1
 800216a:	4061      	eors	r1, r4
 800216c:	468b      	mov	fp, r1
 800216e:	428d      	cmp	r5, r1
 8002170:	d000      	beq.n	8002174 <__aeabi_dsub+0x224>
 8002172:	e716      	b.n	8001fa2 <__aeabi_dsub+0x52>
 8002174:	4952      	ldr	r1, [pc, #328]	; (80022c0 <__aeabi_dsub+0x370>)
 8002176:	468c      	mov	ip, r1
 8002178:	44b4      	add	ip, r6
 800217a:	4664      	mov	r4, ip
 800217c:	2c00      	cmp	r4, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x232>
 8002180:	e0d3      	b.n	800232a <__aeabi_dsub+0x3da>
 8002182:	1b91      	subs	r1, r2, r6
 8002184:	468c      	mov	ip, r1
 8002186:	2e00      	cmp	r6, #0
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x23c>
 800218a:	e15e      	b.n	800244a <__aeabi_dsub+0x4fa>
 800218c:	494a      	ldr	r1, [pc, #296]	; (80022b8 <__aeabi_dsub+0x368>)
 800218e:	428a      	cmp	r2, r1
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x244>
 8002192:	e1be      	b.n	8002512 <__aeabi_dsub+0x5c2>
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	464c      	mov	r4, r9
 8002198:	0409      	lsls	r1, r1, #16
 800219a:	430c      	orrs	r4, r1
 800219c:	46a1      	mov	r9, r4
 800219e:	4661      	mov	r1, ip
 80021a0:	2938      	cmp	r1, #56	; 0x38
 80021a2:	dd00      	ble.n	80021a6 <__aeabi_dsub+0x256>
 80021a4:	e1ba      	b.n	800251c <__aeabi_dsub+0x5cc>
 80021a6:	291f      	cmp	r1, #31
 80021a8:	dd00      	ble.n	80021ac <__aeabi_dsub+0x25c>
 80021aa:	e227      	b.n	80025fc <__aeabi_dsub+0x6ac>
 80021ac:	2420      	movs	r4, #32
 80021ae:	1a64      	subs	r4, r4, r1
 80021b0:	4649      	mov	r1, r9
 80021b2:	40a1      	lsls	r1, r4
 80021b4:	001e      	movs	r6, r3
 80021b6:	4688      	mov	r8, r1
 80021b8:	4661      	mov	r1, ip
 80021ba:	40a3      	lsls	r3, r4
 80021bc:	40ce      	lsrs	r6, r1
 80021be:	4641      	mov	r1, r8
 80021c0:	1e5c      	subs	r4, r3, #1
 80021c2:	41a3      	sbcs	r3, r4
 80021c4:	4331      	orrs	r1, r6
 80021c6:	4319      	orrs	r1, r3
 80021c8:	000c      	movs	r4, r1
 80021ca:	4663      	mov	r3, ip
 80021cc:	4649      	mov	r1, r9
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	187f      	adds	r7, r7, r1
 80021d2:	1824      	adds	r4, r4, r0
 80021d4:	4284      	cmp	r4, r0
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	425b      	negs	r3, r3
 80021da:	469a      	mov	sl, r3
 80021dc:	0016      	movs	r6, r2
 80021de:	44ba      	add	sl, r7
 80021e0:	e05d      	b.n	800229e <__aeabi_dsub+0x34e>
 80021e2:	4c38      	ldr	r4, [pc, #224]	; (80022c4 <__aeabi_dsub+0x374>)
 80021e4:	1c72      	adds	r2, r6, #1
 80021e6:	4222      	tst	r2, r4
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x29c>
 80021ea:	e0df      	b.n	80023ac <__aeabi_dsub+0x45c>
 80021ec:	464a      	mov	r2, r9
 80021ee:	431a      	orrs	r2, r3
 80021f0:	2e00      	cmp	r6, #0
 80021f2:	d000      	beq.n	80021f6 <__aeabi_dsub+0x2a6>
 80021f4:	e15c      	b.n	80024b0 <__aeabi_dsub+0x560>
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x2ac>
 80021fa:	e1cf      	b.n	800259c <__aeabi_dsub+0x64c>
 80021fc:	003a      	movs	r2, r7
 80021fe:	4302      	orrs	r2, r0
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x2b4>
 8002202:	e17f      	b.n	8002504 <__aeabi_dsub+0x5b4>
 8002204:	1a1c      	subs	r4, r3, r0
 8002206:	464a      	mov	r2, r9
 8002208:	42a3      	cmp	r3, r4
 800220a:	4189      	sbcs	r1, r1
 800220c:	1bd2      	subs	r2, r2, r7
 800220e:	4249      	negs	r1, r1
 8002210:	1a52      	subs	r2, r2, r1
 8002212:	4692      	mov	sl, r2
 8002214:	0212      	lsls	r2, r2, #8
 8002216:	d400      	bmi.n	800221a <__aeabi_dsub+0x2ca>
 8002218:	e20a      	b.n	8002630 <__aeabi_dsub+0x6e0>
 800221a:	1ac4      	subs	r4, r0, r3
 800221c:	42a0      	cmp	r0, r4
 800221e:	4180      	sbcs	r0, r0
 8002220:	464b      	mov	r3, r9
 8002222:	4240      	negs	r0, r0
 8002224:	1aff      	subs	r7, r7, r3
 8002226:	1a3b      	subs	r3, r7, r0
 8002228:	469a      	mov	sl, r3
 800222a:	465d      	mov	r5, fp
 800222c:	e71a      	b.n	8002064 <__aeabi_dsub+0x114>
 800222e:	003a      	movs	r2, r7
 8002230:	4302      	orrs	r2, r0
 8002232:	d073      	beq.n	800231c <__aeabi_dsub+0x3cc>
 8002234:	0022      	movs	r2, r4
 8002236:	3a01      	subs	r2, #1
 8002238:	2c01      	cmp	r4, #1
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x2ee>
 800223c:	e0cb      	b.n	80023d6 <__aeabi_dsub+0x486>
 800223e:	4554      	cmp	r4, sl
 8002240:	d042      	beq.n	80022c8 <__aeabi_dsub+0x378>
 8002242:	4694      	mov	ip, r2
 8002244:	e748      	b.n	80020d8 <__aeabi_dsub+0x188>
 8002246:	0010      	movs	r0, r2
 8002248:	3b1f      	subs	r3, #31
 800224a:	40d8      	lsrs	r0, r3
 800224c:	2920      	cmp	r1, #32
 800224e:	d003      	beq.n	8002258 <__aeabi_dsub+0x308>
 8002250:	2340      	movs	r3, #64	; 0x40
 8002252:	1a5b      	subs	r3, r3, r1
 8002254:	409a      	lsls	r2, r3
 8002256:	4314      	orrs	r4, r2
 8002258:	1e63      	subs	r3, r4, #1
 800225a:	419c      	sbcs	r4, r3
 800225c:	2300      	movs	r3, #0
 800225e:	2600      	movs	r6, #0
 8002260:	469a      	mov	sl, r3
 8002262:	4304      	orrs	r4, r0
 8002264:	0763      	lsls	r3, r4, #29
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x31a>
 8002268:	e6fe      	b.n	8002068 <__aeabi_dsub+0x118>
 800226a:	4652      	mov	r2, sl
 800226c:	08e3      	lsrs	r3, r4, #3
 800226e:	0752      	lsls	r2, r2, #29
 8002270:	4313      	orrs	r3, r2
 8002272:	4652      	mov	r2, sl
 8002274:	46b4      	mov	ip, r6
 8002276:	08d2      	lsrs	r2, r2, #3
 8002278:	490f      	ldr	r1, [pc, #60]	; (80022b8 <__aeabi_dsub+0x368>)
 800227a:	458c      	cmp	ip, r1
 800227c:	d02a      	beq.n	80022d4 <__aeabi_dsub+0x384>
 800227e:	0312      	lsls	r2, r2, #12
 8002280:	0b14      	lsrs	r4, r2, #12
 8002282:	4662      	mov	r2, ip
 8002284:	0552      	lsls	r2, r2, #21
 8002286:	0d52      	lsrs	r2, r2, #21
 8002288:	e70c      	b.n	80020a4 <__aeabi_dsub+0x154>
 800228a:	003c      	movs	r4, r7
 800228c:	4304      	orrs	r4, r0
 800228e:	1e62      	subs	r2, r4, #1
 8002290:	4194      	sbcs	r4, r2
 8002292:	18e4      	adds	r4, r4, r3
 8002294:	429c      	cmp	r4, r3
 8002296:	4192      	sbcs	r2, r2
 8002298:	4252      	negs	r2, r2
 800229a:	444a      	add	r2, r9
 800229c:	4692      	mov	sl, r2
 800229e:	4653      	mov	r3, sl
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	d5df      	bpl.n	8002264 <__aeabi_dsub+0x314>
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__aeabi_dsub+0x368>)
 80022a6:	3601      	adds	r6, #1
 80022a8:	429e      	cmp	r6, r3
 80022aa:	d000      	beq.n	80022ae <__aeabi_dsub+0x35e>
 80022ac:	e0a0      	b.n	80023f0 <__aeabi_dsub+0x4a0>
 80022ae:	0032      	movs	r2, r6
 80022b0:	2400      	movs	r4, #0
 80022b2:	2300      	movs	r3, #0
 80022b4:	e6f6      	b.n	80020a4 <__aeabi_dsub+0x154>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	ff7fffff 	.word	0xff7fffff
 80022c0:	fffff801 	.word	0xfffff801
 80022c4:	000007fe 	.word	0x000007fe
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	464a      	mov	r2, r9
 80022cc:	0752      	lsls	r2, r2, #29
 80022ce:	4313      	orrs	r3, r2
 80022d0:	464a      	mov	r2, r9
 80022d2:	08d2      	lsrs	r2, r2, #3
 80022d4:	0019      	movs	r1, r3
 80022d6:	4311      	orrs	r1, r2
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x38c>
 80022da:	e1b5      	b.n	8002648 <__aeabi_dsub+0x6f8>
 80022dc:	2480      	movs	r4, #128	; 0x80
 80022de:	0324      	lsls	r4, r4, #12
 80022e0:	4314      	orrs	r4, r2
 80022e2:	0324      	lsls	r4, r4, #12
 80022e4:	4ad5      	ldr	r2, [pc, #852]	; (800263c <__aeabi_dsub+0x6ec>)
 80022e6:	0b24      	lsrs	r4, r4, #12
 80022e8:	e6dc      	b.n	80020a4 <__aeabi_dsub+0x154>
 80022ea:	0020      	movs	r0, r4
 80022ec:	f000 faa4 	bl	8002838 <__clzsi2>
 80022f0:	0003      	movs	r3, r0
 80022f2:	3318      	adds	r3, #24
 80022f4:	2b1f      	cmp	r3, #31
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x3aa>
 80022f8:	e695      	b.n	8002026 <__aeabi_dsub+0xd6>
 80022fa:	0022      	movs	r2, r4
 80022fc:	3808      	subs	r0, #8
 80022fe:	4082      	lsls	r2, r0
 8002300:	2400      	movs	r4, #0
 8002302:	429e      	cmp	r6, r3
 8002304:	dc00      	bgt.n	8002308 <__aeabi_dsub+0x3b8>
 8002306:	e69a      	b.n	800203e <__aeabi_dsub+0xee>
 8002308:	1af6      	subs	r6, r6, r3
 800230a:	4bcd      	ldr	r3, [pc, #820]	; (8002640 <__aeabi_dsub+0x6f0>)
 800230c:	401a      	ands	r2, r3
 800230e:	4692      	mov	sl, r2
 8002310:	e6a8      	b.n	8002064 <__aeabi_dsub+0x114>
 8002312:	003c      	movs	r4, r7
 8002314:	4304      	orrs	r4, r0
 8002316:	1e62      	subs	r2, r4, #1
 8002318:	4194      	sbcs	r4, r2
 800231a:	e66c      	b.n	8001ff6 <__aeabi_dsub+0xa6>
 800231c:	464a      	mov	r2, r9
 800231e:	08db      	lsrs	r3, r3, #3
 8002320:	0752      	lsls	r2, r2, #29
 8002322:	4313      	orrs	r3, r2
 8002324:	464a      	mov	r2, r9
 8002326:	08d2      	lsrs	r2, r2, #3
 8002328:	e7a6      	b.n	8002278 <__aeabi_dsub+0x328>
 800232a:	4cc6      	ldr	r4, [pc, #792]	; (8002644 <__aeabi_dsub+0x6f4>)
 800232c:	1c72      	adds	r2, r6, #1
 800232e:	4222      	tst	r2, r4
 8002330:	d000      	beq.n	8002334 <__aeabi_dsub+0x3e4>
 8002332:	e0ac      	b.n	800248e <__aeabi_dsub+0x53e>
 8002334:	464a      	mov	r2, r9
 8002336:	431a      	orrs	r2, r3
 8002338:	2e00      	cmp	r6, #0
 800233a:	d000      	beq.n	800233e <__aeabi_dsub+0x3ee>
 800233c:	e105      	b.n	800254a <__aeabi_dsub+0x5fa>
 800233e:	2a00      	cmp	r2, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x3f4>
 8002342:	e156      	b.n	80025f2 <__aeabi_dsub+0x6a2>
 8002344:	003a      	movs	r2, r7
 8002346:	4302      	orrs	r2, r0
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x3fc>
 800234a:	e0db      	b.n	8002504 <__aeabi_dsub+0x5b4>
 800234c:	181c      	adds	r4, r3, r0
 800234e:	429c      	cmp	r4, r3
 8002350:	419b      	sbcs	r3, r3
 8002352:	444f      	add	r7, r9
 8002354:	46ba      	mov	sl, r7
 8002356:	425b      	negs	r3, r3
 8002358:	449a      	add	sl, r3
 800235a:	4653      	mov	r3, sl
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	d400      	bmi.n	8002362 <__aeabi_dsub+0x412>
 8002360:	e780      	b.n	8002264 <__aeabi_dsub+0x314>
 8002362:	4652      	mov	r2, sl
 8002364:	4bb6      	ldr	r3, [pc, #728]	; (8002640 <__aeabi_dsub+0x6f0>)
 8002366:	2601      	movs	r6, #1
 8002368:	401a      	ands	r2, r3
 800236a:	4692      	mov	sl, r2
 800236c:	e77a      	b.n	8002264 <__aeabi_dsub+0x314>
 800236e:	4cb3      	ldr	r4, [pc, #716]	; (800263c <__aeabi_dsub+0x6ec>)
 8002370:	42a2      	cmp	r2, r4
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x426>
 8002374:	e0c0      	b.n	80024f8 <__aeabi_dsub+0x5a8>
 8002376:	2480      	movs	r4, #128	; 0x80
 8002378:	464d      	mov	r5, r9
 800237a:	0424      	lsls	r4, r4, #16
 800237c:	4325      	orrs	r5, r4
 800237e:	46a9      	mov	r9, r5
 8002380:	4664      	mov	r4, ip
 8002382:	2c38      	cmp	r4, #56	; 0x38
 8002384:	dc53      	bgt.n	800242e <__aeabi_dsub+0x4de>
 8002386:	4661      	mov	r1, ip
 8002388:	2c1f      	cmp	r4, #31
 800238a:	dd00      	ble.n	800238e <__aeabi_dsub+0x43e>
 800238c:	e0cd      	b.n	800252a <__aeabi_dsub+0x5da>
 800238e:	2520      	movs	r5, #32
 8002390:	001e      	movs	r6, r3
 8002392:	1b2d      	subs	r5, r5, r4
 8002394:	464c      	mov	r4, r9
 8002396:	40ab      	lsls	r3, r5
 8002398:	40ac      	lsls	r4, r5
 800239a:	40ce      	lsrs	r6, r1
 800239c:	1e5d      	subs	r5, r3, #1
 800239e:	41ab      	sbcs	r3, r5
 80023a0:	4334      	orrs	r4, r6
 80023a2:	4323      	orrs	r3, r4
 80023a4:	464c      	mov	r4, r9
 80023a6:	40cc      	lsrs	r4, r1
 80023a8:	1b3f      	subs	r7, r7, r4
 80023aa:	e045      	b.n	8002438 <__aeabi_dsub+0x4e8>
 80023ac:	464a      	mov	r2, r9
 80023ae:	1a1c      	subs	r4, r3, r0
 80023b0:	1bd1      	subs	r1, r2, r7
 80023b2:	42a3      	cmp	r3, r4
 80023b4:	4192      	sbcs	r2, r2
 80023b6:	4252      	negs	r2, r2
 80023b8:	4692      	mov	sl, r2
 80023ba:	000a      	movs	r2, r1
 80023bc:	4651      	mov	r1, sl
 80023be:	1a52      	subs	r2, r2, r1
 80023c0:	4692      	mov	sl, r2
 80023c2:	0212      	lsls	r2, r2, #8
 80023c4:	d500      	bpl.n	80023c8 <__aeabi_dsub+0x478>
 80023c6:	e083      	b.n	80024d0 <__aeabi_dsub+0x580>
 80023c8:	4653      	mov	r3, sl
 80023ca:	4323      	orrs	r3, r4
 80023cc:	d000      	beq.n	80023d0 <__aeabi_dsub+0x480>
 80023ce:	e621      	b.n	8002014 <__aeabi_dsub+0xc4>
 80023d0:	2200      	movs	r2, #0
 80023d2:	2500      	movs	r5, #0
 80023d4:	e753      	b.n	800227e <__aeabi_dsub+0x32e>
 80023d6:	181c      	adds	r4, r3, r0
 80023d8:	429c      	cmp	r4, r3
 80023da:	419b      	sbcs	r3, r3
 80023dc:	444f      	add	r7, r9
 80023de:	46ba      	mov	sl, r7
 80023e0:	425b      	negs	r3, r3
 80023e2:	449a      	add	sl, r3
 80023e4:	4653      	mov	r3, sl
 80023e6:	2601      	movs	r6, #1
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	d400      	bmi.n	80023ee <__aeabi_dsub+0x49e>
 80023ec:	e73a      	b.n	8002264 <__aeabi_dsub+0x314>
 80023ee:	2602      	movs	r6, #2
 80023f0:	4652      	mov	r2, sl
 80023f2:	4b93      	ldr	r3, [pc, #588]	; (8002640 <__aeabi_dsub+0x6f0>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	401a      	ands	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	4021      	ands	r1, r4
 80023fc:	0862      	lsrs	r2, r4, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	07dc      	lsls	r4, r3, #31
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	469a      	mov	sl, r3
 8002406:	4314      	orrs	r4, r2
 8002408:	e62c      	b.n	8002064 <__aeabi_dsub+0x114>
 800240a:	0039      	movs	r1, r7
 800240c:	3a20      	subs	r2, #32
 800240e:	40d1      	lsrs	r1, r2
 8002410:	4662      	mov	r2, ip
 8002412:	2a20      	cmp	r2, #32
 8002414:	d006      	beq.n	8002424 <__aeabi_dsub+0x4d4>
 8002416:	4664      	mov	r4, ip
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	1b12      	subs	r2, r2, r4
 800241c:	003c      	movs	r4, r7
 800241e:	4094      	lsls	r4, r2
 8002420:	4304      	orrs	r4, r0
 8002422:	9401      	str	r4, [sp, #4]
 8002424:	9c01      	ldr	r4, [sp, #4]
 8002426:	1e62      	subs	r2, r4, #1
 8002428:	4194      	sbcs	r4, r2
 800242a:	430c      	orrs	r4, r1
 800242c:	e5e3      	b.n	8001ff6 <__aeabi_dsub+0xa6>
 800242e:	4649      	mov	r1, r9
 8002430:	4319      	orrs	r1, r3
 8002432:	000b      	movs	r3, r1
 8002434:	1e5c      	subs	r4, r3, #1
 8002436:	41a3      	sbcs	r3, r4
 8002438:	1ac4      	subs	r4, r0, r3
 800243a:	42a0      	cmp	r0, r4
 800243c:	419b      	sbcs	r3, r3
 800243e:	425b      	negs	r3, r3
 8002440:	1afb      	subs	r3, r7, r3
 8002442:	469a      	mov	sl, r3
 8002444:	465d      	mov	r5, fp
 8002446:	0016      	movs	r6, r2
 8002448:	e5dc      	b.n	8002004 <__aeabi_dsub+0xb4>
 800244a:	4649      	mov	r1, r9
 800244c:	4319      	orrs	r1, r3
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x502>
 8002450:	e0ae      	b.n	80025b0 <__aeabi_dsub+0x660>
 8002452:	4661      	mov	r1, ip
 8002454:	4664      	mov	r4, ip
 8002456:	3901      	subs	r1, #1
 8002458:	2c01      	cmp	r4, #1
 800245a:	d100      	bne.n	800245e <__aeabi_dsub+0x50e>
 800245c:	e0e0      	b.n	8002620 <__aeabi_dsub+0x6d0>
 800245e:	4c77      	ldr	r4, [pc, #476]	; (800263c <__aeabi_dsub+0x6ec>)
 8002460:	45a4      	cmp	ip, r4
 8002462:	d056      	beq.n	8002512 <__aeabi_dsub+0x5c2>
 8002464:	468c      	mov	ip, r1
 8002466:	e69a      	b.n	800219e <__aeabi_dsub+0x24e>
 8002468:	4661      	mov	r1, ip
 800246a:	2220      	movs	r2, #32
 800246c:	003c      	movs	r4, r7
 800246e:	1a52      	subs	r2, r2, r1
 8002470:	4094      	lsls	r4, r2
 8002472:	0001      	movs	r1, r0
 8002474:	4090      	lsls	r0, r2
 8002476:	46a0      	mov	r8, r4
 8002478:	4664      	mov	r4, ip
 800247a:	1e42      	subs	r2, r0, #1
 800247c:	4190      	sbcs	r0, r2
 800247e:	4662      	mov	r2, ip
 8002480:	40e1      	lsrs	r1, r4
 8002482:	4644      	mov	r4, r8
 8002484:	40d7      	lsrs	r7, r2
 8002486:	430c      	orrs	r4, r1
 8002488:	4304      	orrs	r4, r0
 800248a:	44b9      	add	r9, r7
 800248c:	e701      	b.n	8002292 <__aeabi_dsub+0x342>
 800248e:	496b      	ldr	r1, [pc, #428]	; (800263c <__aeabi_dsub+0x6ec>)
 8002490:	428a      	cmp	r2, r1
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x546>
 8002494:	e70c      	b.n	80022b0 <__aeabi_dsub+0x360>
 8002496:	1818      	adds	r0, r3, r0
 8002498:	4298      	cmp	r0, r3
 800249a:	419b      	sbcs	r3, r3
 800249c:	444f      	add	r7, r9
 800249e:	425b      	negs	r3, r3
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	07dc      	lsls	r4, r3, #31
 80024a4:	0840      	lsrs	r0, r0, #1
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	469a      	mov	sl, r3
 80024aa:	0016      	movs	r6, r2
 80024ac:	4304      	orrs	r4, r0
 80024ae:	e6d9      	b.n	8002264 <__aeabi_dsub+0x314>
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d000      	beq.n	80024b6 <__aeabi_dsub+0x566>
 80024b4:	e081      	b.n	80025ba <__aeabi_dsub+0x66a>
 80024b6:	003b      	movs	r3, r7
 80024b8:	4303      	orrs	r3, r0
 80024ba:	d11d      	bne.n	80024f8 <__aeabi_dsub+0x5a8>
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	2500      	movs	r5, #0
 80024c0:	0312      	lsls	r2, r2, #12
 80024c2:	e70b      	b.n	80022dc <__aeabi_dsub+0x38c>
 80024c4:	08c0      	lsrs	r0, r0, #3
 80024c6:	077b      	lsls	r3, r7, #29
 80024c8:	465d      	mov	r5, fp
 80024ca:	4303      	orrs	r3, r0
 80024cc:	08fa      	lsrs	r2, r7, #3
 80024ce:	e6d3      	b.n	8002278 <__aeabi_dsub+0x328>
 80024d0:	1ac4      	subs	r4, r0, r3
 80024d2:	42a0      	cmp	r0, r4
 80024d4:	4180      	sbcs	r0, r0
 80024d6:	464b      	mov	r3, r9
 80024d8:	4240      	negs	r0, r0
 80024da:	1aff      	subs	r7, r7, r3
 80024dc:	1a3b      	subs	r3, r7, r0
 80024de:	469a      	mov	sl, r3
 80024e0:	465d      	mov	r5, fp
 80024e2:	e597      	b.n	8002014 <__aeabi_dsub+0xc4>
 80024e4:	1a1c      	subs	r4, r3, r0
 80024e6:	464a      	mov	r2, r9
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	419b      	sbcs	r3, r3
 80024ec:	1bd7      	subs	r7, r2, r7
 80024ee:	425b      	negs	r3, r3
 80024f0:	1afb      	subs	r3, r7, r3
 80024f2:	469a      	mov	sl, r3
 80024f4:	2601      	movs	r6, #1
 80024f6:	e585      	b.n	8002004 <__aeabi_dsub+0xb4>
 80024f8:	08c0      	lsrs	r0, r0, #3
 80024fa:	077b      	lsls	r3, r7, #29
 80024fc:	465d      	mov	r5, fp
 80024fe:	4303      	orrs	r3, r0
 8002500:	08fa      	lsrs	r2, r7, #3
 8002502:	e6e7      	b.n	80022d4 <__aeabi_dsub+0x384>
 8002504:	464a      	mov	r2, r9
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	0752      	lsls	r2, r2, #29
 800250a:	4313      	orrs	r3, r2
 800250c:	464a      	mov	r2, r9
 800250e:	08d2      	lsrs	r2, r2, #3
 8002510:	e6b5      	b.n	800227e <__aeabi_dsub+0x32e>
 8002512:	08c0      	lsrs	r0, r0, #3
 8002514:	077b      	lsls	r3, r7, #29
 8002516:	4303      	orrs	r3, r0
 8002518:	08fa      	lsrs	r2, r7, #3
 800251a:	e6db      	b.n	80022d4 <__aeabi_dsub+0x384>
 800251c:	4649      	mov	r1, r9
 800251e:	4319      	orrs	r1, r3
 8002520:	000b      	movs	r3, r1
 8002522:	1e59      	subs	r1, r3, #1
 8002524:	418b      	sbcs	r3, r1
 8002526:	001c      	movs	r4, r3
 8002528:	e653      	b.n	80021d2 <__aeabi_dsub+0x282>
 800252a:	464d      	mov	r5, r9
 800252c:	3c20      	subs	r4, #32
 800252e:	40e5      	lsrs	r5, r4
 8002530:	2920      	cmp	r1, #32
 8002532:	d005      	beq.n	8002540 <__aeabi_dsub+0x5f0>
 8002534:	2440      	movs	r4, #64	; 0x40
 8002536:	1a64      	subs	r4, r4, r1
 8002538:	4649      	mov	r1, r9
 800253a:	40a1      	lsls	r1, r4
 800253c:	430b      	orrs	r3, r1
 800253e:	4698      	mov	r8, r3
 8002540:	4643      	mov	r3, r8
 8002542:	1e5c      	subs	r4, r3, #1
 8002544:	41a3      	sbcs	r3, r4
 8002546:	432b      	orrs	r3, r5
 8002548:	e776      	b.n	8002438 <__aeabi_dsub+0x4e8>
 800254a:	2a00      	cmp	r2, #0
 800254c:	d0e1      	beq.n	8002512 <__aeabi_dsub+0x5c2>
 800254e:	003a      	movs	r2, r7
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	4302      	orrs	r2, r0
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x608>
 8002556:	e6b8      	b.n	80022ca <__aeabi_dsub+0x37a>
 8002558:	464a      	mov	r2, r9
 800255a:	0752      	lsls	r2, r2, #29
 800255c:	2480      	movs	r4, #128	; 0x80
 800255e:	4313      	orrs	r3, r2
 8002560:	464a      	mov	r2, r9
 8002562:	0324      	lsls	r4, r4, #12
 8002564:	08d2      	lsrs	r2, r2, #3
 8002566:	4222      	tst	r2, r4
 8002568:	d007      	beq.n	800257a <__aeabi_dsub+0x62a>
 800256a:	08fe      	lsrs	r6, r7, #3
 800256c:	4226      	tst	r6, r4
 800256e:	d104      	bne.n	800257a <__aeabi_dsub+0x62a>
 8002570:	465d      	mov	r5, fp
 8002572:	0032      	movs	r2, r6
 8002574:	08c3      	lsrs	r3, r0, #3
 8002576:	077f      	lsls	r7, r7, #29
 8002578:	433b      	orrs	r3, r7
 800257a:	0f59      	lsrs	r1, r3, #29
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	0749      	lsls	r1, r1, #29
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	430b      	orrs	r3, r1
 8002584:	e6a6      	b.n	80022d4 <__aeabi_dsub+0x384>
 8002586:	1ac4      	subs	r4, r0, r3
 8002588:	42a0      	cmp	r0, r4
 800258a:	4180      	sbcs	r0, r0
 800258c:	464b      	mov	r3, r9
 800258e:	4240      	negs	r0, r0
 8002590:	1aff      	subs	r7, r7, r3
 8002592:	1a3b      	subs	r3, r7, r0
 8002594:	469a      	mov	sl, r3
 8002596:	465d      	mov	r5, fp
 8002598:	2601      	movs	r6, #1
 800259a:	e533      	b.n	8002004 <__aeabi_dsub+0xb4>
 800259c:	003b      	movs	r3, r7
 800259e:	4303      	orrs	r3, r0
 80025a0:	d100      	bne.n	80025a4 <__aeabi_dsub+0x654>
 80025a2:	e715      	b.n	80023d0 <__aeabi_dsub+0x480>
 80025a4:	08c0      	lsrs	r0, r0, #3
 80025a6:	077b      	lsls	r3, r7, #29
 80025a8:	465d      	mov	r5, fp
 80025aa:	4303      	orrs	r3, r0
 80025ac:	08fa      	lsrs	r2, r7, #3
 80025ae:	e666      	b.n	800227e <__aeabi_dsub+0x32e>
 80025b0:	08c0      	lsrs	r0, r0, #3
 80025b2:	077b      	lsls	r3, r7, #29
 80025b4:	4303      	orrs	r3, r0
 80025b6:	08fa      	lsrs	r2, r7, #3
 80025b8:	e65e      	b.n	8002278 <__aeabi_dsub+0x328>
 80025ba:	003a      	movs	r2, r7
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	4302      	orrs	r2, r0
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x674>
 80025c2:	e682      	b.n	80022ca <__aeabi_dsub+0x37a>
 80025c4:	464a      	mov	r2, r9
 80025c6:	0752      	lsls	r2, r2, #29
 80025c8:	2480      	movs	r4, #128	; 0x80
 80025ca:	4313      	orrs	r3, r2
 80025cc:	464a      	mov	r2, r9
 80025ce:	0324      	lsls	r4, r4, #12
 80025d0:	08d2      	lsrs	r2, r2, #3
 80025d2:	4222      	tst	r2, r4
 80025d4:	d007      	beq.n	80025e6 <__aeabi_dsub+0x696>
 80025d6:	08fe      	lsrs	r6, r7, #3
 80025d8:	4226      	tst	r6, r4
 80025da:	d104      	bne.n	80025e6 <__aeabi_dsub+0x696>
 80025dc:	465d      	mov	r5, fp
 80025de:	0032      	movs	r2, r6
 80025e0:	08c3      	lsrs	r3, r0, #3
 80025e2:	077f      	lsls	r7, r7, #29
 80025e4:	433b      	orrs	r3, r7
 80025e6:	0f59      	lsrs	r1, r3, #29
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	0749      	lsls	r1, r1, #29
 80025ee:	430b      	orrs	r3, r1
 80025f0:	e670      	b.n	80022d4 <__aeabi_dsub+0x384>
 80025f2:	08c0      	lsrs	r0, r0, #3
 80025f4:	077b      	lsls	r3, r7, #29
 80025f6:	4303      	orrs	r3, r0
 80025f8:	08fa      	lsrs	r2, r7, #3
 80025fa:	e640      	b.n	800227e <__aeabi_dsub+0x32e>
 80025fc:	464c      	mov	r4, r9
 80025fe:	3920      	subs	r1, #32
 8002600:	40cc      	lsrs	r4, r1
 8002602:	4661      	mov	r1, ip
 8002604:	2920      	cmp	r1, #32
 8002606:	d006      	beq.n	8002616 <__aeabi_dsub+0x6c6>
 8002608:	4666      	mov	r6, ip
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	1b89      	subs	r1, r1, r6
 800260e:	464e      	mov	r6, r9
 8002610:	408e      	lsls	r6, r1
 8002612:	4333      	orrs	r3, r6
 8002614:	4698      	mov	r8, r3
 8002616:	4643      	mov	r3, r8
 8002618:	1e59      	subs	r1, r3, #1
 800261a:	418b      	sbcs	r3, r1
 800261c:	431c      	orrs	r4, r3
 800261e:	e5d8      	b.n	80021d2 <__aeabi_dsub+0x282>
 8002620:	181c      	adds	r4, r3, r0
 8002622:	4284      	cmp	r4, r0
 8002624:	4180      	sbcs	r0, r0
 8002626:	444f      	add	r7, r9
 8002628:	46ba      	mov	sl, r7
 800262a:	4240      	negs	r0, r0
 800262c:	4482      	add	sl, r0
 800262e:	e6d9      	b.n	80023e4 <__aeabi_dsub+0x494>
 8002630:	4653      	mov	r3, sl
 8002632:	4323      	orrs	r3, r4
 8002634:	d100      	bne.n	8002638 <__aeabi_dsub+0x6e8>
 8002636:	e6cb      	b.n	80023d0 <__aeabi_dsub+0x480>
 8002638:	e614      	b.n	8002264 <__aeabi_dsub+0x314>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	000007ff 	.word	0x000007ff
 8002640:	ff7fffff 	.word	0xff7fffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	2300      	movs	r3, #0
 800264a:	4a01      	ldr	r2, [pc, #4]	; (8002650 <__aeabi_dsub+0x700>)
 800264c:	001c      	movs	r4, r3
 800264e:	e529      	b.n	80020a4 <__aeabi_dsub+0x154>
 8002650:	000007ff 	.word	0x000007ff

08002654 <__aeabi_dcmpun>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	0005      	movs	r5, r0
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <__aeabi_dcmpun+0x38>)
 800265a:	031c      	lsls	r4, r3, #12
 800265c:	0016      	movs	r6, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	030a      	lsls	r2, r1, #12
 8002662:	0049      	lsls	r1, r1, #1
 8002664:	0b12      	lsrs	r2, r2, #12
 8002666:	0d49      	lsrs	r1, r1, #21
 8002668:	0b24      	lsrs	r4, r4, #12
 800266a:	0d5b      	lsrs	r3, r3, #21
 800266c:	4281      	cmp	r1, r0
 800266e:	d008      	beq.n	8002682 <__aeabi_dcmpun+0x2e>
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <__aeabi_dcmpun+0x38>)
 8002672:	2000      	movs	r0, #0
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <__aeabi_dcmpun+0x2c>
 8002678:	0020      	movs	r0, r4
 800267a:	4330      	orrs	r0, r6
 800267c:	1e43      	subs	r3, r0, #1
 800267e:	4198      	sbcs	r0, r3
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	2001      	movs	r0, #1
 8002684:	432a      	orrs	r2, r5
 8002686:	d1fb      	bne.n	8002680 <__aeabi_dcmpun+0x2c>
 8002688:	e7f2      	b.n	8002670 <__aeabi_dcmpun+0x1c>
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	000007ff 	.word	0x000007ff

08002690 <__aeabi_d2iz>:
 8002690:	000a      	movs	r2, r1
 8002692:	b530      	push	{r4, r5, lr}
 8002694:	4c13      	ldr	r4, [pc, #76]	; (80026e4 <__aeabi_d2iz+0x54>)
 8002696:	0053      	lsls	r3, r2, #1
 8002698:	0309      	lsls	r1, r1, #12
 800269a:	0005      	movs	r5, r0
 800269c:	0b09      	lsrs	r1, r1, #12
 800269e:	2000      	movs	r0, #0
 80026a0:	0d5b      	lsrs	r3, r3, #21
 80026a2:	0fd2      	lsrs	r2, r2, #31
 80026a4:	42a3      	cmp	r3, r4
 80026a6:	dd04      	ble.n	80026b2 <__aeabi_d2iz+0x22>
 80026a8:	480f      	ldr	r0, [pc, #60]	; (80026e8 <__aeabi_d2iz+0x58>)
 80026aa:	4283      	cmp	r3, r0
 80026ac:	dd02      	ble.n	80026b4 <__aeabi_d2iz+0x24>
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <__aeabi_d2iz+0x5c>)
 80026b0:	18d0      	adds	r0, r2, r3
 80026b2:	bd30      	pop	{r4, r5, pc}
 80026b4:	2080      	movs	r0, #128	; 0x80
 80026b6:	0340      	lsls	r0, r0, #13
 80026b8:	4301      	orrs	r1, r0
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <__aeabi_d2iz+0x60>)
 80026bc:	1ac0      	subs	r0, r0, r3
 80026be:	281f      	cmp	r0, #31
 80026c0:	dd08      	ble.n	80026d4 <__aeabi_d2iz+0x44>
 80026c2:	480c      	ldr	r0, [pc, #48]	; (80026f4 <__aeabi_d2iz+0x64>)
 80026c4:	1ac3      	subs	r3, r0, r3
 80026c6:	40d9      	lsrs	r1, r3
 80026c8:	000b      	movs	r3, r1
 80026ca:	4258      	negs	r0, r3
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	d1f0      	bne.n	80026b2 <__aeabi_d2iz+0x22>
 80026d0:	0018      	movs	r0, r3
 80026d2:	e7ee      	b.n	80026b2 <__aeabi_d2iz+0x22>
 80026d4:	4c08      	ldr	r4, [pc, #32]	; (80026f8 <__aeabi_d2iz+0x68>)
 80026d6:	40c5      	lsrs	r5, r0
 80026d8:	46a4      	mov	ip, r4
 80026da:	4463      	add	r3, ip
 80026dc:	4099      	lsls	r1, r3
 80026de:	000b      	movs	r3, r1
 80026e0:	432b      	orrs	r3, r5
 80026e2:	e7f2      	b.n	80026ca <__aeabi_d2iz+0x3a>
 80026e4:	000003fe 	.word	0x000003fe
 80026e8:	0000041d 	.word	0x0000041d
 80026ec:	7fffffff 	.word	0x7fffffff
 80026f0:	00000433 	.word	0x00000433
 80026f4:	00000413 	.word	0x00000413
 80026f8:	fffffbed 	.word	0xfffffbed

080026fc <__aeabi_i2d>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	2800      	cmp	r0, #0
 8002700:	d016      	beq.n	8002730 <__aeabi_i2d+0x34>
 8002702:	17c3      	asrs	r3, r0, #31
 8002704:	18c5      	adds	r5, r0, r3
 8002706:	405d      	eors	r5, r3
 8002708:	0fc4      	lsrs	r4, r0, #31
 800270a:	0028      	movs	r0, r5
 800270c:	f000 f894 	bl	8002838 <__clzsi2>
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <__aeabi_i2d+0x5c>)
 8002712:	1a1b      	subs	r3, r3, r0
 8002714:	280a      	cmp	r0, #10
 8002716:	dc16      	bgt.n	8002746 <__aeabi_i2d+0x4a>
 8002718:	0002      	movs	r2, r0
 800271a:	002e      	movs	r6, r5
 800271c:	3215      	adds	r2, #21
 800271e:	4096      	lsls	r6, r2
 8002720:	220b      	movs	r2, #11
 8002722:	1a12      	subs	r2, r2, r0
 8002724:	40d5      	lsrs	r5, r2
 8002726:	055b      	lsls	r3, r3, #21
 8002728:	032d      	lsls	r5, r5, #12
 800272a:	0b2d      	lsrs	r5, r5, #12
 800272c:	0d5b      	lsrs	r3, r3, #21
 800272e:	e003      	b.n	8002738 <__aeabi_i2d+0x3c>
 8002730:	2400      	movs	r4, #0
 8002732:	2300      	movs	r3, #0
 8002734:	2500      	movs	r5, #0
 8002736:	2600      	movs	r6, #0
 8002738:	051b      	lsls	r3, r3, #20
 800273a:	432b      	orrs	r3, r5
 800273c:	07e4      	lsls	r4, r4, #31
 800273e:	4323      	orrs	r3, r4
 8002740:	0030      	movs	r0, r6
 8002742:	0019      	movs	r1, r3
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	380b      	subs	r0, #11
 8002748:	4085      	lsls	r5, r0
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	032d      	lsls	r5, r5, #12
 800274e:	2600      	movs	r6, #0
 8002750:	0b2d      	lsrs	r5, r5, #12
 8002752:	0d5b      	lsrs	r3, r3, #21
 8002754:	e7f0      	b.n	8002738 <__aeabi_i2d+0x3c>
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	0000041e 	.word	0x0000041e

0800275c <__aeabi_ui2d>:
 800275c:	b510      	push	{r4, lr}
 800275e:	1e04      	subs	r4, r0, #0
 8002760:	d010      	beq.n	8002784 <__aeabi_ui2d+0x28>
 8002762:	f000 f869 	bl	8002838 <__clzsi2>
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <__aeabi_ui2d+0x48>)
 8002768:	1a1b      	subs	r3, r3, r0
 800276a:	280a      	cmp	r0, #10
 800276c:	dc11      	bgt.n	8002792 <__aeabi_ui2d+0x36>
 800276e:	220b      	movs	r2, #11
 8002770:	0021      	movs	r1, r4
 8002772:	1a12      	subs	r2, r2, r0
 8002774:	40d1      	lsrs	r1, r2
 8002776:	3015      	adds	r0, #21
 8002778:	030a      	lsls	r2, r1, #12
 800277a:	055b      	lsls	r3, r3, #21
 800277c:	4084      	lsls	r4, r0
 800277e:	0b12      	lsrs	r2, r2, #12
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	e001      	b.n	8002788 <__aeabi_ui2d+0x2c>
 8002784:	2300      	movs	r3, #0
 8002786:	2200      	movs	r2, #0
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	4313      	orrs	r3, r2
 800278c:	0020      	movs	r0, r4
 800278e:	0019      	movs	r1, r3
 8002790:	bd10      	pop	{r4, pc}
 8002792:	0022      	movs	r2, r4
 8002794:	380b      	subs	r0, #11
 8002796:	4082      	lsls	r2, r0
 8002798:	055b      	lsls	r3, r3, #21
 800279a:	0312      	lsls	r2, r2, #12
 800279c:	2400      	movs	r4, #0
 800279e:	0b12      	lsrs	r2, r2, #12
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	e7f1      	b.n	8002788 <__aeabi_ui2d+0x2c>
 80027a4:	0000041e 	.word	0x0000041e

080027a8 <__aeabi_f2d>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	0242      	lsls	r2, r0, #9
 80027ac:	0043      	lsls	r3, r0, #1
 80027ae:	0fc4      	lsrs	r4, r0, #31
 80027b0:	20fe      	movs	r0, #254	; 0xfe
 80027b2:	0e1b      	lsrs	r3, r3, #24
 80027b4:	1c59      	adds	r1, r3, #1
 80027b6:	0a55      	lsrs	r5, r2, #9
 80027b8:	4208      	tst	r0, r1
 80027ba:	d00c      	beq.n	80027d6 <__aeabi_f2d+0x2e>
 80027bc:	21e0      	movs	r1, #224	; 0xe0
 80027be:	0089      	lsls	r1, r1, #2
 80027c0:	468c      	mov	ip, r1
 80027c2:	076d      	lsls	r5, r5, #29
 80027c4:	0b12      	lsrs	r2, r2, #12
 80027c6:	4463      	add	r3, ip
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	4313      	orrs	r3, r2
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4323      	orrs	r3, r4
 80027d0:	0028      	movs	r0, r5
 80027d2:	0019      	movs	r1, r3
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d114      	bne.n	8002804 <__aeabi_f2d+0x5c>
 80027da:	2d00      	cmp	r5, #0
 80027dc:	d01b      	beq.n	8002816 <__aeabi_f2d+0x6e>
 80027de:	0028      	movs	r0, r5
 80027e0:	f000 f82a 	bl	8002838 <__clzsi2>
 80027e4:	280a      	cmp	r0, #10
 80027e6:	dc1c      	bgt.n	8002822 <__aeabi_f2d+0x7a>
 80027e8:	230b      	movs	r3, #11
 80027ea:	002a      	movs	r2, r5
 80027ec:	1a1b      	subs	r3, r3, r0
 80027ee:	40da      	lsrs	r2, r3
 80027f0:	0003      	movs	r3, r0
 80027f2:	3315      	adds	r3, #21
 80027f4:	409d      	lsls	r5, r3
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <__aeabi_f2d+0x88>)
 80027f8:	0312      	lsls	r2, r2, #12
 80027fa:	1a1b      	subs	r3, r3, r0
 80027fc:	055b      	lsls	r3, r3, #21
 80027fe:	0b12      	lsrs	r2, r2, #12
 8002800:	0d5b      	lsrs	r3, r3, #21
 8002802:	e7e1      	b.n	80027c8 <__aeabi_f2d+0x20>
 8002804:	2d00      	cmp	r5, #0
 8002806:	d009      	beq.n	800281c <__aeabi_f2d+0x74>
 8002808:	0b13      	lsrs	r3, r2, #12
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0312      	lsls	r2, r2, #12
 800280e:	431a      	orrs	r2, r3
 8002810:	076d      	lsls	r5, r5, #29
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <__aeabi_f2d+0x8c>)
 8002814:	e7d8      	b.n	80027c8 <__aeabi_f2d+0x20>
 8002816:	2300      	movs	r3, #0
 8002818:	2200      	movs	r2, #0
 800281a:	e7d5      	b.n	80027c8 <__aeabi_f2d+0x20>
 800281c:	2200      	movs	r2, #0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <__aeabi_f2d+0x8c>)
 8002820:	e7d2      	b.n	80027c8 <__aeabi_f2d+0x20>
 8002822:	0003      	movs	r3, r0
 8002824:	002a      	movs	r2, r5
 8002826:	3b0b      	subs	r3, #11
 8002828:	409a      	lsls	r2, r3
 800282a:	2500      	movs	r5, #0
 800282c:	e7e3      	b.n	80027f6 <__aeabi_f2d+0x4e>
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	00000389 	.word	0x00000389
 8002834:	000007ff 	.word	0x000007ff

08002838 <__clzsi2>:
 8002838:	211c      	movs	r1, #28
 800283a:	2301      	movs	r3, #1
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	4298      	cmp	r0, r3
 8002840:	d301      	bcc.n	8002846 <__clzsi2+0xe>
 8002842:	0c00      	lsrs	r0, r0, #16
 8002844:	3910      	subs	r1, #16
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	4298      	cmp	r0, r3
 800284a:	d301      	bcc.n	8002850 <__clzsi2+0x18>
 800284c:	0a00      	lsrs	r0, r0, #8
 800284e:	3908      	subs	r1, #8
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	4298      	cmp	r0, r3
 8002854:	d301      	bcc.n	800285a <__clzsi2+0x22>
 8002856:	0900      	lsrs	r0, r0, #4
 8002858:	3904      	subs	r1, #4
 800285a:	a202      	add	r2, pc, #8	; (adr r2, 8002864 <__clzsi2+0x2c>)
 800285c:	5c10      	ldrb	r0, [r2, r0]
 800285e:	1840      	adds	r0, r0, r1
 8002860:	4770      	bx	lr
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	02020304 	.word	0x02020304
 8002868:	01010101 	.word	0x01010101
	...

08002874 <__clzdi2>:
 8002874:	b510      	push	{r4, lr}
 8002876:	2900      	cmp	r1, #0
 8002878:	d103      	bne.n	8002882 <__clzdi2+0xe>
 800287a:	f7ff ffdd 	bl	8002838 <__clzsi2>
 800287e:	3020      	adds	r0, #32
 8002880:	e002      	b.n	8002888 <__clzdi2+0x14>
 8002882:	0008      	movs	r0, r1
 8002884:	f7ff ffd8 	bl	8002838 <__clzsi2>
 8002888:	bd10      	pop	{r4, pc}
 800288a:	46c0      	nop			; (mov r8, r8)

0800288c <ColorSensor_Init>:
#include "colorsensor.h"

extern speaker Speaker;

void ColorSensor_Init(colorsensor* sensor, I2C_HandleTypeDef* i2c_handle, uint8_t slave_addr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	701a      	strb	r2, [r3, #0]
    sensor->i2c = i2c_handle;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	601a      	str	r2, [r3, #0]
    sensor->slave_address = slave_addr;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1dfa      	adds	r2, r7, #7
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	711a      	strb	r2, [r3, #4]

    // Manually initialize arrays since they cannot be initialized in the struct
    sensor->i2c_commands[0] = 0x05;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2205      	movs	r2, #5
 80028ac:	731a      	strb	r2, [r3, #12]
    sensor->i2c_commands[1] = 0x06;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2206      	movs	r2, #6
 80028b2:	735a      	strb	r2, [r3, #13]
    sensor->i2c_commands[2] = 0x07;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2207      	movs	r2, #7
 80028b8:	739a      	strb	r2, [r3, #14]

    sensor->current_channel = 0;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	73da      	strb	r2, [r3, #15]
    sensor->enabled = false;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	741a      	strb	r2, [r3, #16]
}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}

080028ce <DistanceSensor_Init>:
#define MIN_DISTANCE 10

extern speaker Speaker;

void DistanceSensor_Init(distancesensor* sensor, TIM_HandleTypeDef* timer, feature_id ID, GPIO_TypeDef* icGPIOPort, uint8_t icGPIOPin, GPIO_TypeDef* statusGPIOPort, uint8_t statusGPIOPin)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	701a      	strb	r2, [r3, #0]
	sensor->timer = timer;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	601a      	str	r2, [r3, #0]

	sensor->timeDifference = 0;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
	sensor->countAtMaxDistance = 0;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	731a      	strb	r2, [r3, #12]

	sensor->ID = ID;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1dfa      	adds	r2, r7, #7
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	735a      	strb	r2, [r3, #13]

	sensor->icGPIOPort = icGPIOPort;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	611a      	str	r2, [r3, #16]
	sensor->icGPIOPin = icGPIOPin;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	2318      	movs	r3, #24
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	7513      	strb	r3, [r2, #20]

	sensor->statusGPIOPort = statusGPIOPort;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	619a      	str	r2, [r3, #24]
	sensor->statusGPIOPin = statusGPIOPin;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	18ba      	adds	r2, r7, r2
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	771a      	strb	r2, [r3, #28]


}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}

08002920 <DistanceSensor_Start>:

void DistanceSensor_Start(distancesensor* sensor)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2104      	movs	r1, #4
 800292e:	0018      	movs	r0, r3
 8002930:	f003 fce2 	bl	80062f8 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(sensor->timer, TIM_CHANNEL_1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2100      	movs	r1, #0
 800293a:	0018      	movs	r0, r3
 800293c:	f003 fea0 	bl	8006680 <HAL_TIM_IC_Start_IT>
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7d1b      	ldrb	r3, [r3, #20]
 8002958:	b29b      	uxth	r3, r3
 800295a:	0019      	movs	r1, r3
 800295c:	0010      	movs	r0, r2
 800295e:	f001 fd8f 	bl	8004480 <HAL_GPIO_ReadPin>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d010      	beq.n	8002988 <DistanceSensor_InputCaptureInterrupt+0x40>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	0018      	movs	r0, r3
 800296e:	f004 fb39 	bl	8006fe4 <HAL_TIM_ReadCapturedValue>
 8002972:	0003      	movs	r3, r0
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2104      	movs	r1, #4
 8002980:	0018      	movs	r0, r3
 8002982:	f003 fd97 	bl	80064b4 <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002986:	e034      	b.n	80029f2 <DistanceSensor_InputCaptureInterrupt+0xaa>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2100      	movs	r1, #0
 800298e:	0018      	movs	r0, r3
 8002990:	f004 fb28 	bl	8006fe4 <HAL_TIM_ReadCapturedValue>
 8002994:	0003      	movs	r3, r0
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	88da      	ldrh	r2, [r3, #6]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d909      	bls.n	80029bc <DistanceSensor_InputCaptureInterrupt+0x74>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	88db      	ldrh	r3, [r3, #6]
 80029ac:	001a      	movs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	889b      	ldrh	r3, [r3, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	001a      	movs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	e00b      	b.n	80029d4 <DistanceSensor_InputCaptureInterrupt+0x8c>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	889b      	ldrh	r3, [r3, #4]
 80029c0:	001a      	movs	r2, r3
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	88d2      	ldrh	r2, [r2, #6]
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	001a      	movs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2104      	movs	r1, #4
 80029da:	0018      	movs	r0, r3
 80029dc:	f003 fc8c 	bl	80062f8 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <DistanceSensor_InputCaptureInterrupt+0xb4>)
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
			DistanceSensor_Handle(sensor);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 f81d 	bl	8002a2c <DistanceSensor_Handle>
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b002      	add	sp, #8
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	0000ffff 	.word	0x0000ffff

08002a00 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fe f83b 	bl	8000a88 <__aeabi_ui2f>
 8002a12:	1c03      	adds	r3, r0, #0
 8002a14:	4904      	ldr	r1, [pc, #16]	; (8002a28 <DistanceSensor_GetDistance+0x28>)
 8002a16:	1c18      	adds	r0, r3, #0
 8002a18:	f7fd fe6c 	bl	80006f4 <__aeabi_fdiv>
 8002a1c:	1c03      	adds	r3, r0, #0
}
 8002a1e:	1c18      	adds	r0, r3, #0
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	42680000 	.word	0x42680000

08002a2c <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff ffe2 	bl	8002a00 <DistanceSensor_GetDistance>
 8002a3c:	1c03      	adds	r3, r0, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
	if (sensor->countAtMaxDistance > 5)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7b1b      	ldrb	r3, [r3, #12]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d918      	bls.n	8002a7a <DistanceSensor_Handle+0x4e>
	{
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6998      	ldr	r0, [r3, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f1b      	ldrb	r3, [r3, #28]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2201      	movs	r2, #1
 8002a54:	0019      	movs	r1, r3
 8002a56:	f001 fd30 	bl	80044ba <HAL_GPIO_WritePin>

		if (!Speaker.isActive) Speaker_Start(&Speaker, sensor->ID);
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2201      	movs	r2, #1
 8002a62:	4053      	eors	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02c      	beq.n	8002ac4 <DistanceSensor_Handle+0x98>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7b5a      	ldrb	r2, [r3, #13]
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002a70:	0011      	movs	r1, r2
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fc2d 	bl	80032d2 <Speaker_Start>
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);

		if (Speaker.isActive) Speaker_Stop(&Speaker, sensor->ID);

	}
}
 8002a78:	e024      	b.n	8002ac4 <DistanceSensor_Handle+0x98>
	else if (distance < MIN_DISTANCE)
 8002a7a:	4915      	ldr	r1, [pc, #84]	; (8002ad0 <DistanceSensor_Handle+0xa4>)
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7fd fd25 	bl	80004cc <__aeabi_fcmplt>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d006      	beq.n	8002a94 <DistanceSensor_Handle+0x68>
		sensor->countAtMaxDistance++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7b1b      	ldrb	r3, [r3, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	731a      	strb	r2, [r3, #12]
}
 8002a92:	e017      	b.n	8002ac4 <DistanceSensor_Handle+0x98>
		sensor->countAtMaxDistance = 0;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	731a      	strb	r2, [r3, #12]
		HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6998      	ldr	r0, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	f001 fd07 	bl	80044ba <HAL_GPIO_WritePin>
		if (Speaker.isActive) Speaker_Stop(&Speaker, sensor->ID);
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <DistanceSensor_Handle+0x98>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7b5a      	ldrb	r2, [r3, #13]
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <DistanceSensor_Handle+0xa0>)
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fc35 	bl	800332e <Speaker_Stop>
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000458 	.word	0x20000458
 8002ad0:	41200000 	.word	0x41200000

08002ad4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_TIM_IC_CaptureCallback+0x38>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d104      	bne.n	8002af0 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff2d 	bl	8002948 <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM2) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 8002aee:	e009      	b.n	8002b04 <HAL_TIM_IC_CaptureCallback+0x30>
	else if (htim->Instance == TIM2) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	05db      	lsls	r3, r3, #23
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <HAL_TIM_IC_CaptureCallback+0x30>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff ff22 	bl	8002948 <DistanceSensor_InputCaptureInterrupt>
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	20000418 	.word	0x20000418
 8002b14:	20000438 	.word	0x20000438

08002b18 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
	{
		//Front.risingEdge = true;
	}
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
	{
		//DistanceSensor_StopPWM(&Front);
	}
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b3e:	f000 ffb1 	bl	8003aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b42:	f000 f881 	bl	8002c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b46:	f000 fb47 	bl	80031d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b4a:	f000 fb27 	bl	800319c <MX_DMA_Init>
  MX_TIM3_Init();
 8002b4e:	f000 f9bf 	bl	8002ed0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002b52:	f000 faef 	bl	8003134 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002b56:	f000 f915 	bl	8002d84 <MX_TIM2_Init>
  MX_TIM17_Init();
 8002b5a:	f000 fa61 	bl	8003020 <MX_TIM17_Init>
  MX_I2C1_Init();
 8002b5e:	f000 f8d1 	bl	8002d04 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Speaker_Init(&Speaker, &htim17);
 8002b62:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <main+0xe0>)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <main+0xe4>)
 8002b66:	0011      	movs	r1, r2
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fb8c 	bl	8003286 <Speaker_Init>
  DistanceSensor_Init(&Front, &htim3, DISTANCE_SENSOR_FRONT_ID, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_FRONT_STATUS_GPIO_Port, DISTANCE_SENSOR_FRONT_STATUS_Pin);
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	492b      	ldr	r1, [pc, #172]	; (8002c20 <main+0xe8>)
 8002b74:	482b      	ldr	r0, [pc, #172]	; (8002c24 <main+0xec>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <main+0xf0>)
 8002b7c:	9201      	str	r2, [sp, #4]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	9200      	str	r2, [sp, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f7ff fea3 	bl	80028ce <DistanceSensor_Init>
  DistanceSensor_Init(&Back, &htim2, DISTANCE_SENSOR_BACK_ID, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin, DISTANCE_SENSOR_BACK_STATUS_GPIO_Port, DISTANCE_SENSOR_BACK_STATUS_Pin);
 8002b88:	23a0      	movs	r3, #160	; 0xa0
 8002b8a:	05db      	lsls	r3, r3, #23
 8002b8c:	4927      	ldr	r1, [pc, #156]	; (8002c2c <main+0xf4>)
 8002b8e:	4828      	ldr	r0, [pc, #160]	; (8002c30 <main+0xf8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	9202      	str	r2, [sp, #8]
 8002b94:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <main+0xf0>)
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	9200      	str	r2, [sp, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f7ff fe96 	bl	80028ce <DistanceSensor_Init>
  ColorSensor_Init(&ColorSensor, &hi2c1, 0x10);
 8002ba2:	4924      	ldr	r1, [pc, #144]	; (8002c34 <main+0xfc>)
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <main+0x100>)
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff fe6f 	bl	800288c <ColorSensor_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //DistanceSensor_Start(&FrontDistanceSensor);
  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
  //DistanceSensor_Start(&Front);
  DistanceSensor_Start(&Front);
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <main+0xec>)
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff feb5 	bl	8002920 <DistanceSensor_Start>
  DistanceSensor_Start(&Back);
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <main+0xf8>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff feb1 	bl	8002920 <DistanceSensor_Start>
  while (1)
  {
	  sprintf(Data, "%f %f\r\n", DistanceSensor_GetDistance(&Front), DistanceSensor_GetDistance(&Back));
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <main+0xec>)
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff ff1d 	bl	8002a00 <DistanceSensor_GetDistance>
 8002bc6:	1c03      	adds	r3, r0, #0
 8002bc8:	1c18      	adds	r0, r3, #0
 8002bca:	f7ff fded 	bl	80027a8 <__aeabi_f2d>
 8002bce:	0004      	movs	r4, r0
 8002bd0:	000d      	movs	r5, r1
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <main+0xf8>)
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff ff13 	bl	8002a00 <DistanceSensor_GetDistance>
 8002bda:	1c03      	adds	r3, r0, #0
 8002bdc:	1c18      	adds	r0, r3, #0
 8002bde:	f7ff fde3 	bl	80027a8 <__aeabi_f2d>
 8002be2:	0002      	movs	r2, r0
 8002be4:	000b      	movs	r3, r1
 8002be6:	4915      	ldr	r1, [pc, #84]	; (8002c3c <main+0x104>)
 8002be8:	4815      	ldr	r0, [pc, #84]	; (8002c40 <main+0x108>)
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	0022      	movs	r2, r4
 8002bf0:	002b      	movs	r3, r5
 8002bf2:	f006 fb3d 	bl	8009270 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <main+0x108>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fd fa85 	bl	8000108 <strlen>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	425b      	negs	r3, r3
 8002c06:	490e      	ldr	r1, [pc, #56]	; (8002c40 <main+0x108>)
 8002c08:	480e      	ldr	r0, [pc, #56]	; (8002c44 <main+0x10c>)
 8002c0a:	f005 f89f 	bl	8007d4c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002c0e:	2064      	movs	r0, #100	; 0x64
 8002c10:	f000 ffce 	bl	8003bb0 <HAL_Delay>
	  sprintf(Data, "%f %f\r\n", DistanceSensor_GetDistance(&Front), DistanceSensor_GetDistance(&Back));
 8002c14:	e7d3      	b.n	8002bbe <main+0x86>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000338 	.word	0x20000338
 8002c1c:	20000458 	.word	0x20000458
 8002c20:	200002ec 	.word	0x200002ec
 8002c24:	20000418 	.word	0x20000418
 8002c28:	50000800 	.word	0x50000800
 8002c2c:	200002a0 	.word	0x200002a0
 8002c30:	20000438 	.word	0x20000438
 8002c34:	200001f0 	.word	0x200001f0
 8002c38:	20000464 	.word	0x20000464
 8002c3c:	0800b680 	.word	0x0800b680
 8002c40:	20000478 	.word	0x20000478
 8002c44:	20000384 	.word	0x20000384

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b093      	sub	sp, #76	; 0x4c
 8002c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	2410      	movs	r4, #16
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	0018      	movs	r0, r3
 8002c54:	2338      	movs	r3, #56	; 0x38
 8002c56:	001a      	movs	r2, r3
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f006 fb75 	bl	8009348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5e:	003b      	movs	r3, r7
 8002c60:	0018      	movs	r0, r3
 8002c62:	2310      	movs	r3, #16
 8002c64:	001a      	movs	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f006 fb6e 	bl	8009348 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 fbe1 	bl	8005438 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2202      	movs	r2, #2
 8002c7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	0052      	lsls	r2, r2, #1
 8002c82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c84:	0021      	movs	r1, r4
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2202      	movs	r2, #2
 8002c96:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002caa:	187b      	adds	r3, r7, r1
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0292      	lsls	r2, r2, #10
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0492      	lsls	r2, r2, #18
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	0592      	lsls	r2, r2, #22
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 fc03 	bl	80054d0 <HAL_RCC_OscConfig>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002cce:	f000 fad5 	bl	800327c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd8:	003b      	movs	r3, r7
 8002cda:	2202      	movs	r2, #2
 8002cdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cde:	003b      	movs	r3, r7
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce4:	003b      	movs	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cea:	003b      	movs	r3, r7
 8002cec:	2102      	movs	r1, #2
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f002 ff08 	bl	8005b04 <HAL_RCC_ClockConfig>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002cf8:	f000 fac0 	bl	800327c <Error_Handler>
  }
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b013      	add	sp, #76	; 0x4c
 8002d02:	bd90      	pop	{r4, r7, pc}

08002d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <MX_I2C1_Init+0x78>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <MX_I2C1_Init+0x7c>)
 8002d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d40:	0018      	movs	r0, r3
 8002d42:	f001 fbd7 	bl	80044f4 <HAL_I2C_Init>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d4a:	f000 fa97 	bl	800327c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d50:	2100      	movs	r1, #0
 8002d52:	0018      	movs	r0, r3
 8002d54:	f002 fad8 	bl	8005308 <HAL_I2CEx_ConfigAnalogFilter>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d5c:	f000 fa8e 	bl	800327c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <MX_I2C1_Init+0x74>)
 8002d62:	2100      	movs	r1, #0
 8002d64:	0018      	movs	r0, r3
 8002d66:	f002 fb1b 	bl	80053a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d6e:	f000 fa85 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200001f0 	.word	0x200001f0
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	00602173 	.word	0x00602173

08002d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b092      	sub	sp, #72	; 0x48
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8a:	2338      	movs	r3, #56	; 0x38
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	0018      	movs	r0, r3
 8002d90:	2310      	movs	r3, #16
 8002d92:	001a      	movs	r2, r3
 8002d94:	2100      	movs	r1, #0
 8002d96:	f006 fad7 	bl	8009348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9a:	232c      	movs	r3, #44	; 0x2c
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	0018      	movs	r0, r3
 8002da0:	230c      	movs	r3, #12
 8002da2:	001a      	movs	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f006 facf 	bl	8009348 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002daa:	231c      	movs	r3, #28
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	0018      	movs	r0, r3
 8002db0:	2310      	movs	r3, #16
 8002db2:	001a      	movs	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	f006 fac7 	bl	8009348 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dba:	003b      	movs	r3, r7
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	231c      	movs	r3, #28
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f006 fac0 	bl	8009348 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	05d2      	lsls	r2, r2, #23
 8002dce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002dd2:	223f      	movs	r2, #63	; 0x3f
 8002dd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <MX_TIM2_Init+0x148>)
 8002de0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de8:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f003 f9c9 	bl	8006188 <HAL_TIM_Base_Init>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002dfa:	f000 fa3f 	bl	800327c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfe:	2138      	movs	r1, #56	; 0x38
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	0152      	lsls	r2, r2, #5
 8002e06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e08:	187a      	adds	r2, r7, r1
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f004 f812 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002e18:	f000 fa30 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f003 fbce 	bl	80065c0 <HAL_TIM_IC_Init>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002e28:	f000 fa28 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f003 fa02 	bl	8006238 <HAL_TIM_PWM_Init>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002e38:	f000 fa20 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e4a:	187a      	adds	r2, r7, r1
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f004 fe09 	bl	8007a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e5a:	f000 fa0f 	bl	800327c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002e5e:	211c      	movs	r1, #28
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	220a      	movs	r2, #10
 8002e64:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2201      	movs	r2, #1
 8002e6a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e78:	1879      	adds	r1, r7, r1
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f003 fe36 	bl	8006af0 <HAL_TIM_IC_ConfigChannel>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002e88:	f000 f9f8 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	2260      	movs	r2, #96	; 0x60
 8002e90:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002e92:	003b      	movs	r3, r7
 8002e94:	220a      	movs	r2, #10
 8002e96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e98:	003b      	movs	r3, r7
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea4:	0039      	movs	r1, r7
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 fec4 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8002eb4:	f000 f9e2 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <MX_TIM2_Init+0x144>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fbd4 	bl	8003668 <HAL_TIM_MspPostInit>

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b012      	add	sp, #72	; 0x48
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200002a0 	.word	0x200002a0
 8002ecc:	0000ffff 	.word	0x0000ffff

08002ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b092      	sub	sp, #72	; 0x48
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed6:	2338      	movs	r3, #56	; 0x38
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	0018      	movs	r0, r3
 8002edc:	2310      	movs	r3, #16
 8002ede:	001a      	movs	r2, r3
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	f006 fa31 	bl	8009348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee6:	232c      	movs	r3, #44	; 0x2c
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	0018      	movs	r0, r3
 8002eec:	230c      	movs	r3, #12
 8002eee:	001a      	movs	r2, r3
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f006 fa29 	bl	8009348 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ef6:	231c      	movs	r3, #28
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	0018      	movs	r0, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	001a      	movs	r2, r3
 8002f00:	2100      	movs	r1, #0
 8002f02:	f006 fa21 	bl	8009348 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f06:	003b      	movs	r3, r7
 8002f08:	0018      	movs	r0, r3
 8002f0a:	231c      	movs	r3, #28
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	2100      	movs	r1, #0
 8002f10:	f006 fa1a 	bl	8009348 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <MX_TIM3_Init+0x148>)
 8002f18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f1c:	223f      	movs	r2, #63	; 0x3f
 8002f1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f28:	4a3c      	ldr	r2, [pc, #240]	; (800301c <MX_TIM3_Init+0x14c>)
 8002f2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f003 f924 	bl	8006188 <HAL_TIM_Base_Init>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002f44:	f000 f99a 	bl	800327c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f48:	2138      	movs	r1, #56	; 0x38
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	0152      	lsls	r2, r2, #5
 8002f50:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f52:	187a      	adds	r2, r7, r1
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f56:	0011      	movs	r1, r2
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f003 ff6d 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002f62:	f000 f98b 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f003 fb29 	bl	80065c0 <HAL_TIM_IC_Init>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002f72:	f000 f983 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f003 f95d 	bl	8006238 <HAL_TIM_PWM_Init>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002f82:	f000 f97b 	bl	800327c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	187b      	adds	r3, r7, r1
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f94:	187a      	adds	r2, r7, r1
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <MX_TIM3_Init+0x144>)
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f004 fd64 	bl	8007a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002fa4:	f000 f96a 	bl	800327c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002fa8:	211c      	movs	r1, #28
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	220a      	movs	r2, #10
 8002fae:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fc2:	1879      	adds	r1, r7, r1
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_TIM3_Init+0x144>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f003 fd91 	bl	8006af0 <HAL_TIM_IC_ConfigChannel>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002fd2:	f000 f953 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd6:	003b      	movs	r3, r7
 8002fd8:	2260      	movs	r2, #96	; 0x60
 8002fda:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8002fdc:	003b      	movs	r3, r7
 8002fde:	220a      	movs	r2, #10
 8002fe0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe2:	003b      	movs	r3, r7
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe8:	003b      	movs	r3, r7
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fee:	0039      	movs	r1, r7
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_TIM3_Init+0x144>)
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f003 fe1f 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM3_Init+0x132>
  {
    Error_Handler();
 8002ffe:	f000 f93d 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <MX_TIM3_Init+0x144>)
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fb2f 	bl	8003668 <HAL_TIM_MspPostInit>

}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b012      	add	sp, #72	; 0x48
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	200002ec 	.word	0x200002ec
 8003018:	40000400 	.word	0x40000400
 800301c:	0000ffff 	.word	0x0000ffff

08003020 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b094      	sub	sp, #80	; 0x50
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003026:	2334      	movs	r3, #52	; 0x34
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	0018      	movs	r0, r3
 800302c:	231c      	movs	r3, #28
 800302e:	001a      	movs	r2, r3
 8003030:	2100      	movs	r1, #0
 8003032:	f006 f989 	bl	8009348 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003036:	003b      	movs	r3, r7
 8003038:	0018      	movs	r0, r3
 800303a:	2334      	movs	r3, #52	; 0x34
 800303c:	001a      	movs	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f006 f982 	bl	8009348 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003044:	4b37      	ldr	r3, [pc, #220]	; (8003124 <MX_TIM17_Init+0x104>)
 8003046:	4a38      	ldr	r2, [pc, #224]	; (8003128 <MX_TIM17_Init+0x108>)
 8003048:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <MX_TIM17_Init+0x104>)
 800304c:	223f      	movs	r2, #63	; 0x3f
 800304e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <MX_TIM17_Init+0x104>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2273;
 8003056:	4b33      	ldr	r3, [pc, #204]	; (8003124 <MX_TIM17_Init+0x104>)
 8003058:	4a34      	ldr	r2, [pc, #208]	; (800312c <MX_TIM17_Init+0x10c>)
 800305a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <MX_TIM17_Init+0x104>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <MX_TIM17_Init+0x104>)
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <MX_TIM17_Init+0x104>)
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <MX_TIM17_Init+0x104>)
 8003070:	0018      	movs	r0, r3
 8003072:	f003 f889 	bl	8006188 <HAL_TIM_Base_Init>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800307a:	f000 f8ff 	bl	800327c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <MX_TIM17_Init+0x104>)
 8003080:	0018      	movs	r0, r3
 8003082:	f003 f8d9 	bl	8006238 <HAL_TIM_PWM_Init>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d001      	beq.n	800308e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800308a:	f000 f8f7 	bl	800327c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308e:	2134      	movs	r1, #52	; 0x34
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2260      	movs	r2, #96	; 0x60
 8003094:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1137;
 8003096:	187b      	adds	r3, r7, r1
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <MX_TIM17_Init+0x110>)
 800309a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309c:	187b      	adds	r3, r7, r1
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	2200      	movs	r2, #0
 80030a6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2200      	movs	r2, #0
 80030b2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ba:	1879      	adds	r1, r7, r1
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_TIM17_Init+0x104>)
 80030be:	2200      	movs	r2, #0
 80030c0:	0018      	movs	r0, r3
 80030c2:	f003 fdb9 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80030ca:	f000 f8d7 	bl	800327c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030ce:	003b      	movs	r3, r7
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030d4:	003b      	movs	r3, r7
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030da:	003b      	movs	r3, r7
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030e0:	003b      	movs	r3, r7
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030e6:	003b      	movs	r3, r7
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030ec:	003b      	movs	r3, r7
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	0192      	lsls	r2, r2, #6
 80030f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030f4:	003b      	movs	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030fa:	003b      	movs	r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003100:	003a      	movs	r2, r7
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <MX_TIM17_Init+0x104>)
 8003104:	0011      	movs	r1, r2
 8003106:	0018      	movs	r0, r3
 8003108:	f004 fd16 	bl	8007b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003110:	f000 f8b4 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <MX_TIM17_Init+0x104>)
 8003116:	0018      	movs	r0, r3
 8003118:	f000 faa6 	bl	8003668 <HAL_TIM_MspPostInit>

}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b014      	add	sp, #80	; 0x50
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000338 	.word	0x20000338
 8003128:	40014800 	.word	0x40014800
 800312c:	000008e1 	.word	0x000008e1
 8003130:	00000471 	.word	0x00000471

08003134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <MX_USART2_UART_Init+0x60>)
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <MX_USART2_UART_Init+0x64>)
 800313c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003140:	22e1      	movs	r2, #225	; 0xe1
 8003142:	0252      	lsls	r2, r2, #9
 8003144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <MX_USART2_UART_Init+0x60>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <MX_USART2_UART_Init+0x60>)
 800315a:	220c      	movs	r2, #12
 800315c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <MX_USART2_UART_Init+0x60>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <MX_USART2_UART_Init+0x60>)
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <MX_USART2_UART_Init+0x60>)
 800317e:	0018      	movs	r0, r3
 8003180:	f004 fd8e 	bl	8007ca0 <HAL_UART_Init>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d001      	beq.n	800318c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003188:	f000 f878 	bl	800327c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	20000384 	.word	0x20000384
 8003198:	40004400 	.word	0x40004400

0800319c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_DMA_Init+0x38>)
 80031a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <MX_DMA_Init+0x38>)
 80031a8:	2101      	movs	r1, #1
 80031aa:	430a      	orrs	r2, r1
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_DMA_Init+0x38>)
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2201      	movs	r2, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2009      	movs	r0, #9
 80031c0:	f000 fdc6 	bl	8003d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031c4:	2009      	movs	r0, #9
 80031c6:	f000 fdd8 	bl	8003d7a <HAL_NVIC_EnableIRQ>

}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000

080031d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031de:	240c      	movs	r4, #12
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	0018      	movs	r0, r3
 80031e4:	2314      	movs	r3, #20
 80031e6:	001a      	movs	r2, r3
 80031e8:	2100      	movs	r1, #0
 80031ea:	f006 f8ad 	bl	8009348 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <MX_GPIO_Init+0x9c>)
 80031f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <MX_GPIO_Init+0x9c>)
 80031f4:	2104      	movs	r1, #4
 80031f6:	430a      	orrs	r2, r1
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <MX_GPIO_Init+0x9c>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <MX_GPIO_Init+0x9c>)
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <MX_GPIO_Init+0x9c>)
 800320c:	2101      	movs	r1, #1
 800320e:	430a      	orrs	r2, r1
 8003210:	635a      	str	r2, [r3, #52]	; 0x34
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <MX_GPIO_Init+0x9c>)
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	2201      	movs	r2, #1
 8003218:	4013      	ands	r3, r2
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <MX_GPIO_Init+0x9c>)
 8003220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <MX_GPIO_Init+0x9c>)
 8003224:	2108      	movs	r1, #8
 8003226:	430a      	orrs	r2, r1
 8003228:	635a      	str	r2, [r3, #52]	; 0x34
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <MX_GPIO_Init+0x9c>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2208      	movs	r2, #8
 8003230:	4013      	ands	r3, r2
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISTANCE_SENSOR_FRONT_STATUS_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	01db      	lsls	r3, r3, #7
 800323a:	480f      	ldr	r0, [pc, #60]	; (8003278 <MX_GPIO_Init+0xa0>)
 800323c:	2200      	movs	r2, #0
 800323e:	0019      	movs	r1, r3
 8003240:	f001 f93b 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISTANCE_SENSOR_FRONT_STATUS_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_STATUS_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 8003244:	193b      	adds	r3, r7, r4
 8003246:	22c0      	movs	r2, #192	; 0xc0
 8003248:	01d2      	lsls	r2, r2, #7
 800324a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	2201      	movs	r2, #1
 8003250:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	193b      	adds	r3, r7, r4
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	193b      	adds	r3, r7, r4
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325e:	193b      	adds	r3, r7, r4
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <MX_GPIO_Init+0xa0>)
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f000 ffa7 	bl	80041b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b009      	add	sp, #36	; 0x24
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	40021000 	.word	0x40021000
 8003278:	50000800 	.word	0x50000800

0800327c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
}
 8003282:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003284:	e7fe      	b.n	8003284 <Error_Handler+0x8>

08003286 <Speaker_Init>:
#include "speaker.h"

void Speaker_Init(speaker* speaker, TIM_HandleTypeDef* timer)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
	speaker->timer = timer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	601a      	str	r2, [r3, #0]
	speaker->isActive = true;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	711a      	strb	r2, [r3, #4]

	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e00b      	b.n	80032be <Speaker_Init+0x38>
	{
		speaker->featureFault[i] = false;
 80032a6:	210f      	movs	r1, #15
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	18d3      	adds	r3, r2, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < sizeof(speaker->featureFault) / sizeof(speaker->featureFault[0]); i++)
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	3201      	adds	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	230f      	movs	r3, #15
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d9ee      	bls.n	80032a6 <Speaker_Init+0x20>
	}


}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <Speaker_Start>:

void Speaker_Start(speaker* speaker, uint8_t ID)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	000a      	movs	r2, r1
 80032dc:	1cfb      	adds	r3, r7, #3
 80032de:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = true;
 80032e0:	1cfb      	adds	r3, r7, #3
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	2201      	movs	r2, #1
 80032ea:	715a      	strb	r2, [r3, #5]
	if (speaker->featureFault[0] && speaker->featureFault[1] && speaker->featureFault[2] && speaker->featureFault[3])
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	795b      	ldrb	r3, [r3, #5]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <Speaker_Start+0x54>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	799b      	ldrb	r3, [r3, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <Speaker_Start+0x54>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	79db      	ldrb	r3, [r3, #7]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <Speaker_Start+0x54>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7a1b      	ldrb	r3, [r3, #8]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <Speaker_Start+0x54>
	{
		speaker->isActive = true;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	711a      	strb	r2, [r3, #4]
		HAL_TIM_PWM_Start(speaker->timer, TIM_CHANNEL_1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	0018      	movs	r0, r3
 8003322:	f002 ffe9 	bl	80062f8 <HAL_TIM_PWM_Start>
	}

}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}

0800332e <Speaker_Stop>:

void Speaker_Stop(speaker* speaker, uint8_t ID)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	000a      	movs	r2, r1
 8003338:	1cfb      	adds	r3, r7, #3
 800333a:	701a      	strb	r2, [r3, #0]
	speaker->featureFault[ID] = false;
 800333c:	1cfb      	adds	r3, r7, #3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	18d3      	adds	r3, r2, r3
 8003344:	2200      	movs	r2, #0
 8003346:	715a      	strb	r2, [r3, #5]
	if (!(speaker->featureFault[0] || speaker->featureFault[1] || speaker->featureFault[2] || speaker->featureFault[3]))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	795b      	ldrb	r3, [r3, #5]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2201      	movs	r2, #1
 8003350:	4053      	eors	r3, r2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <Speaker_Stop+0x6c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	799b      	ldrb	r3, [r3, #6]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2201      	movs	r2, #1
 8003360:	4053      	eors	r3, r2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <Speaker_Stop+0x6c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	79db      	ldrb	r3, [r3, #7]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2201      	movs	r2, #1
 8003370:	4053      	eors	r3, r2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <Speaker_Stop+0x6c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7a1b      	ldrb	r3, [r3, #8]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2201      	movs	r2, #1
 8003380:	4053      	eors	r3, r2
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <Speaker_Stop+0x6c>
	{
		speaker->isActive = false;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	711a      	strb	r2, [r3, #4]
		HAL_TIM_PWM_Stop(speaker->timer, TIM_CHANNEL_1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2100      	movs	r1, #0
 8003394:	0018      	movs	r0, r3
 8003396:	f003 f88d 	bl	80064b4 <HAL_TIM_PWM_Stop>
	}
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_MspInit+0x44>)
 80033ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_MspInit+0x44>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_MspInit+0x44>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_MspInit+0x44>)
 80033c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_MspInit+0x44>)
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	0549      	lsls	r1, r1, #21
 80033cc:	430a      	orrs	r2, r1
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_MspInit+0x44>)
 80033d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	055b      	lsls	r3, r3, #21
 80033d8:	4013      	ands	r3, r2
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b095      	sub	sp, #84	; 0x54
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	233c      	movs	r3, #60	; 0x3c
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f005 ffa2 	bl	8009348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003404:	2410      	movs	r4, #16
 8003406:	193b      	adds	r3, r7, r4
 8003408:	0018      	movs	r0, r3
 800340a:	232c      	movs	r3, #44	; 0x2c
 800340c:	001a      	movs	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	f005 ff9a 	bl	8009348 <memset>
  if(hi2c->Instance==I2C1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3d      	ldr	r2, [pc, #244]	; (8003510 <HAL_I2C_MspInit+0x124>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d173      	bne.n	8003506 <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	2220      	movs	r2, #32
 8003422:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003424:	193b      	adds	r3, r7, r4
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800342a:	193b      	adds	r3, r7, r4
 800342c:	0018      	movs	r0, r3
 800342e:	f002 fd13 	bl	8005e58 <HAL_RCCEx_PeriphCLKConfig>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003436:	f7ff ff21 	bl	800327c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_I2C_MspInit+0x128>)
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_I2C_MspInit+0x128>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_I2C_MspInit+0x128>)
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003452:	213c      	movs	r1, #60	; 0x3c
 8003454:	187b      	adds	r3, r7, r1
 8003456:	22c0      	movs	r2, #192	; 0xc0
 8003458:	00d2      	lsls	r2, r2, #3
 800345a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2212      	movs	r2, #18
 8003460:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2206      	movs	r2, #6
 8003472:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003474:	187a      	adds	r2, r7, r1
 8003476:	23a0      	movs	r3, #160	; 0xa0
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fe9b 	bl	80041b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_I2C_MspInit+0x128>)
 8003484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_I2C_MspInit+0x128>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0389      	lsls	r1, r1, #14
 800348c:	430a      	orrs	r2, r1
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_I2C_MspInit+0x128>)
 8003492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	039b      	lsls	r3, r3, #14
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034a0:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_I2C_MspInit+0x130>)
 80034a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034a6:	220a      	movs	r2, #10
 80034a8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0052      	lsls	r2, r2, #1
 80034c2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	0152      	lsls	r2, r2, #5
 80034d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 fc69 	bl	8003db4 <HAL_DMA_Init>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 80034e6:	f7ff fec9 	bl	800327c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_I2C_MspInit+0x12c>)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	2017      	movs	r0, #23
 80034fc:	f000 fc28 	bl	8003d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003500:	2017      	movs	r0, #23
 8003502:	f000 fc3a 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b015      	add	sp, #84	; 0x54
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40005400 	.word	0x40005400
 8003514:	40021000 	.word	0x40021000
 8003518:	20000244 	.word	0x20000244
 800351c:	40020008 	.word	0x40020008

08003520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b08d      	sub	sp, #52	; 0x34
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	241c      	movs	r4, #28
 800352a:	193b      	adds	r3, r7, r4
 800352c:	0018      	movs	r0, r3
 800352e:	2314      	movs	r3, #20
 8003530:	001a      	movs	r2, r3
 8003532:	2100      	movs	r1, #0
 8003534:	f005 ff08 	bl	8009348 <memset>
  if(htim_base->Instance==TIM2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	429a      	cmp	r2, r3
 8003542:	d137      	bne.n	80035b4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 8003546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003548:	4b44      	ldr	r3, [pc, #272]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 800354a:	2101      	movs	r1, #1
 800354c:	430a      	orrs	r2, r1
 800354e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 8003562:	2101      	movs	r1, #1
 8003564:	430a      	orrs	r2, r1
 8003566:	635a      	str	r2, [r3, #52]	; 0x34
 8003568:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2201      	movs	r2, #1
 800356e:	4013      	ands	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003574:	0021      	movs	r1, r4
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2202      	movs	r2, #2
 8003580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2202      	movs	r2, #2
 8003592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003594:	187a      	adds	r2, r7, r1
 8003596:	23a0      	movs	r3, #160	; 0xa0
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fe0b 	bl	80041b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	200f      	movs	r0, #15
 80035a8:	f000 fbd2 	bl	8003d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035ac:	200f      	movs	r0, #15
 80035ae:	f000 fbe4 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80035b2:	e04f      	b.n	8003654 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a29      	ldr	r2, [pc, #164]	; (8003660 <HAL_TIM_Base_MspInit+0x140>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d137      	bne.n	800362e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035c4:	2102      	movs	r1, #2
 80035c6:	430a      	orrs	r2, r1
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2202      	movs	r2, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035dc:	2101      	movs	r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	2201      	movs	r2, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 80035ee:	211c      	movs	r1, #28
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2240      	movs	r2, #64	; 0x40
 80035f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2202      	movs	r2, #2
 80035fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2201      	movs	r2, #1
 800360c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 800360e:	187a      	adds	r2, r7, r1
 8003610:	23a0      	movs	r3, #160	; 0xa0
 8003612:	05db      	lsls	r3, r3, #23
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f000 fdce 	bl	80041b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	2010      	movs	r0, #16
 8003622:	f000 fb95 	bl	8003d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003626:	2010      	movs	r0, #16
 8003628:	f000 fba7 	bl	8003d7a <HAL_NVIC_EnableIRQ>
}
 800362c:	e012      	b.n	8003654 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM17)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_TIM_Base_MspInit+0x144>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10d      	bne.n	8003654 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	02c9      	lsls	r1, r1, #11
 8003642:	430a      	orrs	r2, r1
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_TIM_Base_MspInit+0x13c>)
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	02db      	lsls	r3, r3, #11
 800364e:	4013      	ands	r3, r2
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b00d      	add	sp, #52	; 0x34
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40000400 	.word	0x40000400
 8003664:	40014800 	.word	0x40014800

08003668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b08b      	sub	sp, #44	; 0x2c
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	2414      	movs	r4, #20
 8003672:	193b      	adds	r3, r7, r4
 8003674:	0018      	movs	r0, r3
 8003676:	2314      	movs	r3, #20
 8003678:	001a      	movs	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	f005 fe64 	bl	8009348 <memset>
  if(htim->Instance==TIM2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	05db      	lsls	r3, r3, #23
 8003688:	429a      	cmp	r2, r3
 800368a:	d123      	bne.n	80036d4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 8003692:	2101      	movs	r1, #1
 8003694:	430a      	orrs	r2, r1
 8003696:	635a      	str	r2, [r3, #52]	; 0x34
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	2201      	movs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 80036a4:	0021      	movs	r1, r4
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2202      	movs	r2, #2
 80036aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2202      	movs	r2, #2
 80036b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2202      	movs	r2, #2
 80036c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	23a0      	movs	r3, #160	; 0xa0
 80036c8:	05db      	lsls	r3, r3, #23
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 fd73 	bl	80041b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_TIM_MspPostInit+0x118>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d123      	bne.n	8003726 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 80036f6:	2114      	movs	r1, #20
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2202      	movs	r2, #2
 8003702:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2200      	movs	r2, #0
 800370e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2201      	movs	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003716:	187a      	adds	r2, r7, r1
 8003718:	23a0      	movs	r3, #160	; 0xa0
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	0011      	movs	r1, r2
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fd4a 	bl	80041b8 <HAL_GPIO_Init>
}
 8003724:	e026      	b.n	8003774 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM17)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_TIM_MspPostInit+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d121      	bne.n	8003774 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 8003736:	2108      	movs	r1, #8
 8003738:	430a      	orrs	r2, r1
 800373a:	635a      	str	r2, [r3, #52]	; 0x34
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_TIM_MspPostInit+0x114>)
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	2208      	movs	r2, #8
 8003742:	4013      	ands	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003748:	2114      	movs	r1, #20
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2202      	movs	r2, #2
 800374e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	2202      	movs	r2, #2
 8003754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2202      	movs	r2, #2
 8003766:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003768:	187b      	adds	r3, r7, r1
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <HAL_TIM_MspPostInit+0x120>)
 800376c:	0019      	movs	r1, r3
 800376e:	0010      	movs	r0, r2
 8003770:	f000 fd22 	bl	80041b8 <HAL_GPIO_Init>
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b00b      	add	sp, #44	; 0x2c
 800377a:	bd90      	pop	{r4, r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	40000400 	.word	0x40000400
 8003784:	40014800 	.word	0x40014800
 8003788:	50000c00 	.word	0x50000c00

0800378c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b08b      	sub	sp, #44	; 0x2c
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	2414      	movs	r4, #20
 8003796:	193b      	adds	r3, r7, r4
 8003798:	0018      	movs	r0, r3
 800379a:	2314      	movs	r3, #20
 800379c:	001a      	movs	r2, r3
 800379e:	2100      	movs	r1, #0
 80037a0:	f005 fdd2 	bl	8009348 <memset>
  if(huart->Instance==USART2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_UART_MspInit+0x8c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d130      	bne.n	8003810 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_UART_MspInit+0x90>)
 80037b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b2:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_UART_MspInit+0x90>)
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	0289      	lsls	r1, r1, #10
 80037b8:	430a      	orrs	r2, r1
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_UART_MspInit+0x90>)
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	029b      	lsls	r3, r3, #10
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_UART_MspInit+0x90>)
 80037cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_UART_MspInit+0x90>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_UART_MspInit+0x90>)
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037e2:	0021      	movs	r1, r4
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	220c      	movs	r2, #12
 80037e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	2202      	movs	r2, #2
 80037ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	2200      	movs	r2, #0
 80037fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2201      	movs	r2, #1
 8003800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003802:	187a      	adds	r2, r7, r1
 8003804:	23a0      	movs	r3, #160	; 0xa0
 8003806:	05db      	lsls	r3, r3, #23
 8003808:	0011      	movs	r1, r2
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fcd4 	bl	80041b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b00b      	add	sp, #44	; 0x2c
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	40004400 	.word	0x40004400
 800381c:	40021000 	.word	0x40021000

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003844:	f000 f998 	bl	8003b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <DMA1_Channel1_IRQHandler+0x14>)
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fba0 	bl	8003f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	20000244 	.word	0x20000244

08003868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <TIM2_IRQHandler+0x14>)
 800386e:	0018      	movs	r0, r3
 8003870:	f003 f836 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	200002a0 	.word	0x200002a0

08003880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <TIM3_IRQHandler+0x14>)
 8003886:	0018      	movs	r0, r3
 8003888:	f003 f82a 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	200002ec 	.word	0x200002ec

08003898 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <I2C1_IRQHandler+0x2c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	23e0      	movs	r3, #224	; 0xe0
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	d004      	beq.n	80038b4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <I2C1_IRQHandler+0x2c>)
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fee1 	bl	8004674 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80038b2:	e003      	b.n	80038bc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <I2C1_IRQHandler+0x2c>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fec2 	bl	8004640 <HAL_I2C_EV_IRQHandler>
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	200001f0 	.word	0x200001f0

080038c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  return 1;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_kill>:

int _kill(int pid, int sig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038de:	f005 fd8d 	bl	80093fc <__errno>
 80038e2:	0003      	movs	r3, r0
 80038e4:	2216      	movs	r2, #22
 80038e6:	601a      	str	r2, [r3, #0]
  return -1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	425b      	negs	r3, r3
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_exit>:

void _exit (int status)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038fc:	2301      	movs	r3, #1
 80038fe:	425a      	negs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	0011      	movs	r1, r2
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff ffe5 	bl	80038d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800390a:	e7fe      	b.n	800390a <_exit+0x16>

0800390c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e00a      	b.n	8003934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800391e:	e000      	b.n	8003922 <_read+0x16>
 8003920:	bf00      	nop
 8003922:	0001      	movs	r1, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	60ba      	str	r2, [r7, #8]
 800392a:	b2ca      	uxtb	r2, r1
 800392c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3301      	adds	r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	dbf0      	blt.n	800391e <_read+0x12>
  }

  return len;
 800393c:	687b      	ldr	r3, [r7, #4]
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b006      	add	sp, #24
 8003944:	bd80      	pop	{r7, pc}

08003946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e009      	b.n	800396c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	60ba      	str	r2, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	0018      	movs	r0, r3
 8003962:	e000      	b.n	8003966 <_write+0x20>
 8003964:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	dbf1      	blt.n	8003958 <_write+0x12>
  }
  return len;
 8003974:	687b      	ldr	r3, [r7, #4]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}

0800397e <_close>:

int _close(int file)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003986:	2301      	movs	r3, #1
 8003988:	425b      	negs	r3, r3
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}

08003992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0192      	lsls	r2, r2, #6
 80039a2:	605a      	str	r2, [r3, #4]
  return 0;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_isatty>:

int _isatty(int file)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039b6:	2301      	movs	r3, #1
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <_sbrk+0x5c>)
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <_sbrk+0x60>)
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <_sbrk+0x64>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <_sbrk+0x64>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <_sbrk+0x68>)
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <_sbrk+0x64>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d207      	bcs.n	8003a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a08:	f005 fcf8 	bl	80093fc <__errno>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	220c      	movs	r2, #12
 8003a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	425b      	negs	r3, r3
 8003a16:	e009      	b.n	8003a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <_sbrk+0x64>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <_sbrk+0x64>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	18d2      	adds	r2, r2, r3
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_sbrk+0x64>)
 8003a28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b006      	add	sp, #24
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20002000 	.word	0x20002000
 8003a38:	00000400 	.word	0x00000400
 8003a3c:	200004b8 	.word	0x200004b8
 8003a40:	20000610 	.word	0x20000610

08003a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a54:	f7ff fff6 	bl	8003a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a5a:	490d      	ldr	r1, [pc, #52]	; (8003a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <LoopForever+0xe>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a60:	e002      	b.n	8003a68 <LoopCopyDataInit>

08003a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a66:	3304      	adds	r3, #4

08003a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a6c:	d3f9      	bcc.n	8003a62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a70:	4c0a      	ldr	r4, [pc, #40]	; (8003a9c <LoopForever+0x16>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a74:	e001      	b.n	8003a7a <LoopFillZerobss>

08003a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a78:	3204      	adds	r2, #4

08003a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a7c:	d3fb      	bcc.n	8003a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a7e:	f005 fcc3 	bl	8009408 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a82:	f7ff f859 	bl	8002b38 <main>

08003a86 <LoopForever>:

LoopForever:
  b LoopForever
 8003a86:	e7fe      	b.n	8003a86 <LoopForever>
  ldr   r0, =_estack
 8003a88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a90:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003a94:	0800bb94 	.word	0x0800bb94
  ldr r2, =_sbss
 8003a98:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003a9c:	2000060c 	.word	0x2000060c

08003aa0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC1_IRQHandler>
	...

08003aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_Init+0x3c>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_Init+0x3c>)
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	0049      	lsls	r1, r1, #1
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003abe:	2003      	movs	r0, #3
 8003ac0:	f000 f810 	bl	8003ae4 <HAL_InitTick>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e001      	b.n	8003ad4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7ff fc68 	bl	80033a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_InitTick+0x88>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02b      	beq.n	8003b54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_InitTick+0x8c>)
 8003afe:	681c      	ldr	r4, [r3, #0]
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_InitTick+0x88>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	0019      	movs	r1, r3
 8003b06:	23fa      	movs	r3, #250	; 0xfa
 8003b08:	0098      	lsls	r0, r3, #2
 8003b0a:	f7fc fb19 	bl	8000140 <__udivsi3>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	0019      	movs	r1, r3
 8003b12:	0020      	movs	r0, r4
 8003b14:	f7fc fb14 	bl	8000140 <__udivsi3>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f93d 	bl	8003d9a <HAL_SYSTICK_Config>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d112      	bne.n	8003b4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d80a      	bhi.n	8003b40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	425b      	negs	r3, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f90c 	bl	8003d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_InitTick+0x90>)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e00d      	b.n	8003b5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	e008      	b.n	8003b5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b4a:	230f      	movs	r3, #15
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e003      	b.n	8003b5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b54:	230f      	movs	r3, #15
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	781b      	ldrb	r3, [r3, #0]
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b005      	add	sp, #20
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	20000000 	.word	0x20000000
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_IncTick+0x1c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	001a      	movs	r2, r3
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_IncTick+0x20>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	18d2      	adds	r2, r2, r3
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_IncTick+0x20>)
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000008 	.word	0x20000008
 8003b98:	200004bc 	.word	0x200004bc

08003b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <HAL_GetTick+0x10>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	200004bc 	.word	0x200004bc

08003bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	d005      	beq.n	8003bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_Delay+0x44>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	001a      	movs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	f7ff ffe0 	bl	8003b9c <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d8f7      	bhi.n	8003bd8 <HAL_Delay+0x28>
  {
  }
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000008 	.word	0x20000008

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	0002      	movs	r2, r0
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0a:	d809      	bhi.n	8003c20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	001a      	movs	r2, r3
 8003c12:	231f      	movs	r3, #31
 8003c14:	401a      	ands	r2, r3
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <__NVIC_EnableIRQ+0x30>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4091      	lsls	r1, r2
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	0002      	movs	r2, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c40:	d828      	bhi.n	8003c94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c42:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <__NVIC_SetPriority+0xd4>)
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	33c0      	adds	r3, #192	; 0xc0
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	589b      	ldr	r3, [r3, r2]
 8003c52:	1dfa      	adds	r2, r7, #7
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	0011      	movs	r1, r2
 8003c58:	2203      	movs	r2, #3
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	00d2      	lsls	r2, r2, #3
 8003c5e:	21ff      	movs	r1, #255	; 0xff
 8003c60:	4091      	lsls	r1, r2
 8003c62:	000a      	movs	r2, r1
 8003c64:	43d2      	mvns	r2, r2
 8003c66:	401a      	ands	r2, r3
 8003c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	401a      	ands	r2, r3
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	2303      	movs	r3, #3
 8003c7a:	4003      	ands	r3, r0
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c80:	481f      	ldr	r0, [pc, #124]	; (8003d00 <__NVIC_SetPriority+0xd4>)
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	33c0      	adds	r3, #192	; 0xc0
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c92:	e031      	b.n	8003cf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <__NVIC_SetPriority+0xd8>)
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	3b08      	subs	r3, #8
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3306      	adds	r3, #6
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	18d3      	adds	r3, r2, r3
 8003caa:	3304      	adds	r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	1dfa      	adds	r2, r7, #7
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	0011      	movs	r1, r2
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	00d2      	lsls	r2, r2, #3
 8003cba:	21ff      	movs	r1, #255	; 0xff
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	43d2      	mvns	r2, r2
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	22ff      	movs	r2, #255	; 0xff
 8003ccc:	401a      	ands	r2, r3
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	4003      	ands	r3, r0
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cdc:	4809      	ldr	r0, [pc, #36]	; (8003d04 <__NVIC_SetPriority+0xd8>)
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	001c      	movs	r4, r3
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	4023      	ands	r3, r4
 8003ce8:	3b08      	subs	r3, #8
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	430a      	orrs	r2, r1
 8003cee:	3306      	adds	r3, #6
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	18c3      	adds	r3, r0, r3
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	e000e100 	.word	0xe000e100
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	045b      	lsls	r3, r3, #17
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d301      	bcc.n	8003d20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e010      	b.n	8003d42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <SysTick_Config+0x44>)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	3a01      	subs	r2, #1
 8003d26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d28:	2301      	movs	r3, #1
 8003d2a:	425b      	negs	r3, r3
 8003d2c:	2103      	movs	r1, #3
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff ff7c 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <SysTick_Config+0x44>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <SysTick_Config+0x44>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	e000e010 	.word	0xe000e010

08003d50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	1c02      	adds	r2, r0, #0
 8003d60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff ff5d 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	0002      	movs	r2, r0
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d86:	1dfb      	adds	r3, r7, #7
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ff33 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff ffaf 	bl	8003d08 <SysTick_Config>
 8003daa:	0003      	movs	r3, r0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e077      	b.n	8003eb6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a3d      	ldr	r2, [pc, #244]	; (8003ec0 <HAL_DMA_Init+0x10c>)
 8003dcc:	4694      	mov	ip, r2
 8003dce:	4463      	add	r3, ip
 8003dd0:	2114      	movs	r1, #20
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9b4 	bl	8000140 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2225      	movs	r2, #37	; 0x25
 8003de4:	2102      	movs	r1, #2
 8003de6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4934      	ldr	r1, [pc, #208]	; (8003ec4 <HAL_DMA_Init+0x110>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 f971 	bl	8004118 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	01db      	lsls	r3, r3, #7
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d102      	bne.n	8003e48 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	213f      	movs	r1, #63	; 0x3f
 8003e52:	400a      	ands	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e5e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <HAL_DMA_Init+0xd8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d80d      	bhi.n	8003e8c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f97c 	bl	8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e008      	b.n	8003e9e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2225      	movs	r2, #37	; 0x25
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	bffdfff8 	.word	0xbffdfff8
 8003ec4:	ffff800f 	.word	0xffff800f

08003ec8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	210f      	movs	r1, #15
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2225      	movs	r2, #37	; 0x25
 8003edc:	5c9b      	ldrb	r3, [r3, r2]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d006      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e049      	b.n	8003f86 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	210e      	movs	r1, #14
 8003efe:	438a      	bics	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	438a      	bics	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	491d      	ldr	r1, [pc, #116]	; (8003f94 <HAL_DMA_Abort_IT+0xcc>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_DMA_Abort_IT+0xd0>)
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	221c      	movs	r2, #28
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2201      	movs	r2, #1
 8003f30:	409a      	lsls	r2, r3
 8003f32:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_DMA_Abort_IT+0xd0>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	490f      	ldr	r1, [pc, #60]	; (8003f94 <HAL_DMA_Abort_IT+0xcc>)
 8003f56:	400a      	ands	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2225      	movs	r2, #37	; 0x25
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	2100      	movs	r1, #0
 8003f72:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	0010      	movs	r0, r2
 8003f84:	4798      	blx	r3
    }
  }
  return status;
 8003f86:	230f      	movs	r3, #15
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	fffffeff 	.word	0xfffffeff
 8003f98:	40020000 	.word	0x40020000

08003f9c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003fa4:	4b55      	ldr	r3, [pc, #340]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	221c      	movs	r2, #28
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2204      	movs	r2, #4
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0x7a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d023      	beq.n	8004016 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d107      	bne.n	8003fea <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	221c      	movs	r2, #28
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	4b40      	ldr	r3, [pc, #256]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d100      	bne.n	800400a <HAL_DMA_IRQHandler+0x6e>
 8004008:	e073      	b.n	80040f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	0010      	movs	r0, r2
 8004012:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004014:	e06d      	b.n	80040f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	221c      	movs	r2, #28
 800401c:	4013      	ands	r3, r2
 800401e:	2202      	movs	r2, #2
 8004020:	409a      	lsls	r2, r3
 8004022:	0013      	movs	r3, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	d02e      	beq.n	8004088 <HAL_DMA_IRQHandler+0xec>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2202      	movs	r2, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d02a      	beq.n	8004088 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	d10b      	bne.n	8004056 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	210a      	movs	r1, #10
 800404a:	438a      	bics	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2225      	movs	r2, #37	; 0x25
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	221c      	movs	r2, #28
 8004060:	4013      	ands	r3, r2
 8004062:	2202      	movs	r2, #2
 8004064:	409a      	lsls	r2, r3
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	2100      	movs	r1, #0
 8004072:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03a      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	0010      	movs	r0, r2
 8004084:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004086:	e034      	b.n	80040f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	221c      	movs	r2, #28
 800408e:	4013      	ands	r3, r2
 8004090:	2208      	movs	r2, #8
 8004092:	409a      	lsls	r2, r3
 8004094:	0013      	movs	r3, r2
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4013      	ands	r3, r2
 800409a:	d02b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x158>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2208      	movs	r2, #8
 80040a0:	4013      	ands	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	210e      	movs	r1, #14
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	221c      	movs	r2, #28
 80040be:	4013      	ands	r3, r2
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_DMA_IRQHandler+0x160>)
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2225      	movs	r2, #37	; 0x25
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	0010      	movs	r0, r2
 80040f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46c0      	nop			; (mov r8, r8)
}
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40020000 	.word	0x40020000

08004100 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2225      	movs	r2, #37	; 0x25
 800410c:	5c9b      	ldrb	r3, [r3, r2]
 800410e:	b2db      	uxtb	r3, r3
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004128:	4694      	mov	ip, r2
 800412a:	4463      	add	r3, ip
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	001a      	movs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	001a      	movs	r2, r3
 800413a:	23ff      	movs	r3, #255	; 0xff
 800413c:	4013      	ands	r3, r2
 800413e:	3b08      	subs	r3, #8
 8004140:	2114      	movs	r1, #20
 8004142:	0018      	movs	r0, r3
 8004144:	f7fb fffc 	bl	8000140 <__udivsi3>
 8004148:	0003      	movs	r3, r0
 800414a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004150:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	221f      	movs	r2, #31
 8004156:	4013      	ands	r3, r2
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b004      	add	sp, #16
 8004166:	bd80      	pop	{r7, pc}
 8004168:	10008200 	.word	0x10008200
 800416c:	40020880 	.word	0x40020880

08004170 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	223f      	movs	r2, #63	; 0x3f
 800417e:	4013      	ands	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004186:	4694      	mov	ip, r2
 8004188:	4463      	add	r3, ip
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	001a      	movs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004196:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	4013      	ands	r3, r2
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b004      	add	sp, #16
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	1000823f 	.word	0x1000823f
 80041b4:	40020940 	.word	0x40020940

080041b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c6:	e147      	b.n	8004458 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4091      	lsls	r1, r2
 80041d2:	000a      	movs	r2, r1
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d100      	bne.n	80041e0 <HAL_GPIO_Init+0x28>
 80041de:	e138      	b.n	8004452 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d005      	beq.n	80041f8 <HAL_GPIO_Init+0x40>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d130      	bne.n	800425a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	409a      	lsls	r2, r3
 8004206:	0013      	movs	r3, r2
 8004208:	43da      	mvns	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	0013      	movs	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800422e:	2201      	movs	r2, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	409a      	lsls	r2, r3
 8004234:	0013      	movs	r3, r2
 8004236:	43da      	mvns	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	2201      	movs	r2, #1
 8004246:	401a      	ands	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	4013      	ands	r3, r2
 8004262:	2b03      	cmp	r3, #3
 8004264:	d017      	beq.n	8004296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	409a      	lsls	r2, r3
 8004274:	0013      	movs	r3, r2
 8004276:	43da      	mvns	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	0013      	movs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	4013      	ands	r3, r2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d123      	bne.n	80042ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3208      	adds	r2, #8
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	58d3      	ldr	r3, [r2, r3]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2207      	movs	r2, #7
 80042b4:	4013      	ands	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	220f      	movs	r2, #15
 80042ba:	409a      	lsls	r2, r3
 80042bc:	0013      	movs	r3, r2
 80042be:	43da      	mvns	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2107      	movs	r1, #7
 80042ce:	400b      	ands	r3, r1
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	6939      	ldr	r1, [r7, #16]
 80042e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	2203      	movs	r2, #3
 80042f6:	409a      	lsls	r2, r3
 80042f8:	0013      	movs	r3, r2
 80042fa:	43da      	mvns	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2203      	movs	r2, #3
 8004308:	401a      	ands	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	0013      	movs	r3, r2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	23c0      	movs	r3, #192	; 0xc0
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	4013      	ands	r3, r2
 8004328:	d100      	bne.n	800432c <HAL_GPIO_Init+0x174>
 800432a:	e092      	b.n	8004452 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800432c:	4a50      	ldr	r2, [pc, #320]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	3318      	adds	r3, #24
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	589b      	ldr	r3, [r3, r2]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2203      	movs	r2, #3
 800433e:	4013      	ands	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	220f      	movs	r2, #15
 8004344:	409a      	lsls	r2, r3
 8004346:	0013      	movs	r3, r2
 8004348:	43da      	mvns	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	23a0      	movs	r3, #160	; 0xa0
 8004354:	05db      	lsls	r3, r3, #23
 8004356:	429a      	cmp	r2, r3
 8004358:	d013      	beq.n	8004382 <HAL_GPIO_Init+0x1ca>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a45      	ldr	r2, [pc, #276]	; (8004474 <HAL_GPIO_Init+0x2bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00d      	beq.n	800437e <HAL_GPIO_Init+0x1c6>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a44      	ldr	r2, [pc, #272]	; (8004478 <HAL_GPIO_Init+0x2c0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <HAL_GPIO_Init+0x1c2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a43      	ldr	r2, [pc, #268]	; (800447c <HAL_GPIO_Init+0x2c4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_GPIO_Init+0x1be>
 8004372:	2303      	movs	r3, #3
 8004374:	e006      	b.n	8004384 <HAL_GPIO_Init+0x1cc>
 8004376:	2305      	movs	r3, #5
 8004378:	e004      	b.n	8004384 <HAL_GPIO_Init+0x1cc>
 800437a:	2302      	movs	r3, #2
 800437c:	e002      	b.n	8004384 <HAL_GPIO_Init+0x1cc>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_GPIO_Init+0x1cc>
 8004382:	2300      	movs	r3, #0
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	2103      	movs	r1, #3
 8004388:	400a      	ands	r2, r1
 800438a:	00d2      	lsls	r2, r2, #3
 800438c:	4093      	lsls	r3, r2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004394:	4936      	ldr	r1, [pc, #216]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3318      	adds	r3, #24
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043a2:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	035b      	lsls	r3, r3, #13
 80043ba:	4013      	ands	r3, r2
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	039b      	lsls	r3, r3, #14
 80043e4:	4013      	ands	r3, r2
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80043f8:	2384      	movs	r3, #132	; 0x84
 80043fa:	58d3      	ldr	r3, [r2, r3]
 80043fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	43da      	mvns	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4013      	ands	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800441c:	4914      	ldr	r1, [pc, #80]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 800441e:	2284      	movs	r2, #132	; 0x84
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004424:	4a12      	ldr	r2, [pc, #72]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	58d3      	ldr	r3, [r2, r3]
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	43da      	mvns	r2, r3
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	025b      	lsls	r3, r3, #9
 800443e:	4013      	ands	r3, r2
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800444a:	4909      	ldr	r1, [pc, #36]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3301      	adds	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	40da      	lsrs	r2, r3
 8004460:	1e13      	subs	r3, r2, #0
 8004462:	d000      	beq.n	8004466 <HAL_GPIO_Init+0x2ae>
 8004464:	e6b0      	b.n	80041c8 <HAL_GPIO_Init+0x10>
  }
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b006      	add	sp, #24
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021800 	.word	0x40021800
 8004474:	50000400 	.word	0x50000400
 8004478:	50000800 	.word	0x50000800
 800447c:	50000c00 	.word	0x50000c00

08004480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	000a      	movs	r2, r1
 800448a:	1cbb      	adds	r3, r7, #2
 800448c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	1cba      	adds	r2, r7, #2
 8004494:	8812      	ldrh	r2, [r2, #0]
 8004496:	4013      	ands	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800449a:	230f      	movs	r3, #15
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e003      	b.n	80044ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044a4:	230f      	movs	r3, #15
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044ac:	230f      	movs	r3, #15
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	781b      	ldrb	r3, [r3, #0]
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	0008      	movs	r0, r1
 80044c4:	0011      	movs	r1, r2
 80044c6:	1cbb      	adds	r3, r7, #2
 80044c8:	1c02      	adds	r2, r0, #0
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	1c7b      	adds	r3, r7, #1
 80044ce:	1c0a      	adds	r2, r1, #0
 80044d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044d2:	1c7b      	adds	r3, r7, #1
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044da:	1cbb      	adds	r3, r7, #2
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e2:	e003      	b.n	80044ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e4:	1cbb      	adds	r3, r7, #2
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e08f      	b.n	8004626 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2241      	movs	r2, #65	; 0x41
 800450a:	5c9b      	ldrb	r3, [r3, r2]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2240      	movs	r2, #64	; 0x40
 8004516:	2100      	movs	r1, #0
 8004518:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f7fe ff65 	bl	80033ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2241      	movs	r2, #65	; 0x41
 8004526:	2124      	movs	r1, #36	; 0x24
 8004528:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	438a      	bics	r2, r1
 8004538:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	493b      	ldr	r1, [pc, #236]	; (8004630 <HAL_I2C_Init+0x13c>)
 8004544:	400a      	ands	r2, r1
 8004546:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4938      	ldr	r1, [pc, #224]	; (8004634 <HAL_I2C_Init+0x140>)
 8004554:	400a      	ands	r2, r1
 8004556:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d108      	bne.n	8004572 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	0209      	lsls	r1, r1, #8
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	e007      	b.n	8004582 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2184      	movs	r1, #132	; 0x84
 800457c:	0209      	lsls	r1, r1, #8
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d109      	bne.n	800459e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	0109      	lsls	r1, r1, #4
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	e007      	b.n	80045ae <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4923      	ldr	r1, [pc, #140]	; (8004638 <HAL_I2C_Init+0x144>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4920      	ldr	r1, [pc, #128]	; (800463c <HAL_I2C_Init+0x148>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	491a      	ldr	r1, [pc, #104]	; (8004634 <HAL_I2C_Init+0x140>)
 80045ca:	400a      	ands	r2, r1
 80045cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69d9      	ldr	r1, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2101      	movs	r1, #1
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2241      	movs	r2, #65	; 0x41
 8004612:	2120      	movs	r1, #32
 8004614:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2242      	movs	r2, #66	; 0x42
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	f0ffffff 	.word	0xf0ffffff
 8004634:	ffff7fff 	.word	0xffff7fff
 8004638:	fffff7ff 	.word	0xfffff7ff
 800463c:	02008000 	.word	0x02008000

08004640 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
  }
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b004      	add	sp, #16
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4013      	ands	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800469c:	d00a      	beq.n	80046b4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	2201      	movs	r2, #1
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	0052      	lsls	r2, r2, #1
 80046b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4013      	ands	r3, r2
 80046bc:	d00e      	beq.n	80046dc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046c4:	d00a      	beq.n	80046dc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	2208      	movs	r2, #8
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	00d2      	lsls	r2, r2, #3
 80046da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4013      	ands	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80046ec:	d00a      	beq.n	8004704 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	2202      	movs	r2, #2
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	220b      	movs	r2, #11
 800470e:	4013      	ands	r3, r2
 8004710:	d005      	beq.n	800471e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0011      	movs	r1, r2
 8004718:	0018      	movs	r0, r3
 800471a:	f000 fc25 	bl	8004f68 <I2C_ITError>
  }
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b006      	add	sp, #24
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	0008      	movs	r0, r1
 8004750:	0011      	movs	r1, r2
 8004752:	1cfb      	adds	r3, r7, #3
 8004754:	1c02      	adds	r2, r0, #0
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	003b      	movs	r3, r7
 800475a:	1c0a      	adds	r2, r1, #0
 800475c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2240      	movs	r2, #64	; 0x40
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <I2C_Slave_ISR_IT+0x24>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e0e7      	b.n	800498c <I2C_Slave_ISR_IT+0x1f4>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2240      	movs	r2, #64	; 0x40
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2220      	movs	r2, #32
 80047c8:	4013      	ands	r3, r2
 80047ca:	d00a      	beq.n	80047e2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047d2:	d006      	beq.n	80047e2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0011      	movs	r1, r2
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 f9e4 	bl	8004ba8 <I2C_ITSlaveCplt>
 80047e0:	e0cf      	b.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2210      	movs	r2, #16
 80047e6:	4013      	ands	r3, r2
 80047e8:	d052      	beq.n	8004890 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2210      	movs	r2, #16
 80047ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047f0:	d04e      	beq.n	8004890 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d12d      	bne.n	8004858 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2241      	movs	r2, #65	; 0x41
 8004800:	5c9b      	ldrb	r3, [r3, r2]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b28      	cmp	r3, #40	; 0x28
 8004806:	d10b      	bne.n	8004820 <I2C_Slave_ISR_IT+0x88>
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	049b      	lsls	r3, r3, #18
 800480e:	429a      	cmp	r2, r3
 8004810:	d106      	bne.n	8004820 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f000 fb4d 	bl	8004eb8 <I2C_ITListenCplt>
 800481e:	e036      	b.n	800488e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2241      	movs	r2, #65	; 0x41
 8004824:	5c9b      	ldrb	r3, [r3, r2]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b29      	cmp	r3, #41	; 0x29
 800482a:	d110      	bne.n	800484e <I2C_Slave_ISR_IT+0xb6>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4a59      	ldr	r2, [pc, #356]	; (8004994 <I2C_Slave_ISR_IT+0x1fc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00c      	beq.n	800484e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	0018      	movs	r0, r3
 8004840:	f000 fcbd 	bl	80051be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f94a 	bl	8004ae0 <I2C_ITSlaveSeqCplt>
 800484c:	e01f      	b.n	800488e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2210      	movs	r2, #16
 8004854:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004856:	e091      	b.n	800497c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2210      	movs	r2, #16
 800485e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	2204      	movs	r2, #4
 8004866:	431a      	orrs	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <I2C_Slave_ISR_IT+0xe6>
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	045b      	lsls	r3, r3, #17
 8004878:	429a      	cmp	r2, r3
 800487a:	d000      	beq.n	800487e <I2C_Slave_ISR_IT+0xe6>
 800487c:	e07e      	b.n	800497c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0011      	movs	r1, r2
 8004886:	0018      	movs	r0, r3
 8004888:	f000 fb6e 	bl	8004f68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800488c:	e076      	b.n	800497c <I2C_Slave_ISR_IT+0x1e4>
 800488e:	e075      	b.n	800497c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2204      	movs	r2, #4
 8004894:	4013      	ands	r3, r2
 8004896:	d02f      	beq.n	80048f8 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2204      	movs	r2, #4
 800489c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800489e:	d02b      	beq.n	80048f8 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d14c      	bne.n	8004980 <I2C_Slave_ISR_IT+0x1e8>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <I2C_Slave_ISR_IT+0x1fc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d048      	beq.n	8004980 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f8f5 	bl	8004ae0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80048f6:	e043      	b.n	8004980 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2208      	movs	r2, #8
 80048fc:	4013      	ands	r3, r2
 80048fe:	d00a      	beq.n	8004916 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2208      	movs	r2, #8
 8004904:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004906:	d006      	beq.n	8004916 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f000 f842 	bl	8004998 <I2C_ITAddrCplt>
 8004914:	e035      	b.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2202      	movs	r2, #2
 800491a:	4013      	ands	r3, r2
 800491c:	d031      	beq.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004924:	d02d      	beq.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d018      	beq.n	8004962 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004960:	e00f      	b.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	045b      	lsls	r3, r3, #17
 8004968:	429a      	cmp	r2, r3
 800496a:	d002      	beq.n	8004972 <I2C_Slave_ISR_IT+0x1da>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f8b3 	bl	8004ae0 <I2C_ITSlaveSeqCplt>
 800497a:	e002      	b.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	e000      	b.n	8004982 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004980:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2240      	movs	r2, #64	; 0x40
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}
 8004994:	ffff0000 	.word	0xffff0000

08004998 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	001a      	movs	r2, r3
 80049ac:	2328      	movs	r3, #40	; 0x28
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b28      	cmp	r3, #40	; 0x28
 80049b2:	d000      	beq.n	80049b6 <I2C_ITAddrCplt+0x1e>
 80049b4:	e088      	b.n	8004ac8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	250f      	movs	r5, #15
 80049c2:	197b      	adds	r3, r7, r5
 80049c4:	2101      	movs	r1, #1
 80049c6:	400a      	ands	r2, r1
 80049c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	200c      	movs	r0, #12
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	21fe      	movs	r1, #254	; 0xfe
 80049da:	400a      	ands	r2, r1
 80049dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	240a      	movs	r4, #10
 80049e8:	193b      	adds	r3, r7, r4
 80049ea:	0592      	lsls	r2, r2, #22
 80049ec:	0d92      	lsrs	r2, r2, #22
 80049ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	2308      	movs	r3, #8
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	21fe      	movs	r1, #254	; 0xfe
 80049fe:	400a      	ands	r2, r1
 8004a00:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d148      	bne.n	8004a9c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a0a:	0021      	movs	r1, r4
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	4053      	eors	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2306      	movs	r3, #6
 8004a20:	4013      	ands	r3, r2
 8004a22:	d120      	bne.n	8004a66 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004a24:	183b      	adds	r3, r7, r0
 8004a26:	187a      	adds	r2, r7, r1
 8004a28:	8812      	ldrh	r2, [r2, #0]
 8004a2a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d14c      	bne.n	8004ad8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a54:	183b      	adds	r3, r7, r0
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	197b      	adds	r3, r7, r5
 8004a5a:	7819      	ldrb	r1, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7ff fe71 	bl	8004746 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a64:	e038      	b.n	8004ad8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004a66:	240c      	movs	r4, #12
 8004a68:	193b      	adds	r3, r7, r4
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	18ba      	adds	r2, r7, r2
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	021a      	lsls	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fbe0 	bl	8005240 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	2100      	movs	r1, #0
 8004a86:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a88:	193b      	adds	r3, r7, r4
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	230f      	movs	r3, #15
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	7819      	ldrb	r1, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff fe56 	bl	8004746 <HAL_I2C_AddrCallback>
}
 8004a9a:	e01d      	b.n	8004ad8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 fbcb 	bl	8005240 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2240      	movs	r2, #64	; 0x40
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	230f      	movs	r3, #15
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	7819      	ldrb	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff fe40 	bl	8004746 <HAL_I2C_AddrCallback>
}
 8004ac6:	e007      	b.n	8004ad8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2208      	movs	r2, #8
 8004ace:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2240      	movs	r2, #64	; 0x40
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	5499      	strb	r1, [r3, r2]
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b004      	add	sp, #16
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}

08004ae0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2242      	movs	r2, #66	; 0x42
 8004af4:	2100      	movs	r1, #0
 8004af6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	4013      	ands	r3, r2
 8004b00:	d008      	beq.n	8004b14 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4924      	ldr	r1, [pc, #144]	; (8004ba0 <I2C_ITSlaveSeqCplt+0xc0>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e00c      	b.n	8004b2e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	491e      	ldr	r1, [pc, #120]	; (8004ba4 <I2C_ITSlaveSeqCplt+0xc4>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2241      	movs	r2, #65	; 0x41
 8004b32:	5c9b      	ldrb	r3, [r3, r2]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b29      	cmp	r3, #41	; 0x29
 8004b38:	d114      	bne.n	8004b64 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2241      	movs	r2, #65	; 0x41
 8004b3e:	2128      	movs	r1, #40	; 0x28
 8004b40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2221      	movs	r2, #33	; 0x21
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fb77 	bl	8005240 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2240      	movs	r2, #64	; 0x40
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff fde2 	bl	8004726 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b62:	e019      	b.n	8004b98 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2241      	movs	r2, #65	; 0x41
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6e:	d113      	bne.n	8004b98 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2241      	movs	r2, #65	; 0x41
 8004b74:	2128      	movs	r1, #40	; 0x28
 8004b76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2222      	movs	r2, #34	; 0x22
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2102      	movs	r1, #2
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fb5c 	bl	8005240 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7ff fdcf 	bl	8004736 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b004      	add	sp, #16
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	ffffbfff 	.word	0xffffbfff
 8004ba4:	ffff7fff 	.word	0xffff7fff

08004ba8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bc4:	200b      	movs	r0, #11
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	2141      	movs	r1, #65	; 0x41
 8004bcc:	5c52      	ldrb	r2, [r2, r1]
 8004bce:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bd8:	183b      	adds	r3, r7, r0
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b21      	cmp	r3, #33	; 0x21
 8004bde:	d003      	beq.n	8004be8 <I2C_ITSlaveCplt+0x40>
 8004be0:	183b      	adds	r3, r7, r0
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b29      	cmp	r3, #41	; 0x29
 8004be6:	d109      	bne.n	8004bfc <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004be8:	4aac      	ldr	r2, [pc, #688]	; (8004e9c <I2C_ITSlaveCplt+0x2f4>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	0011      	movs	r1, r2
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 fb26 	bl	8005240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfa:	e020      	b.n	8004c3e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bfc:	220b      	movs	r2, #11
 8004bfe:	18bb      	adds	r3, r7, r2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b22      	cmp	r3, #34	; 0x22
 8004c04:	d003      	beq.n	8004c0e <I2C_ITSlaveCplt+0x66>
 8004c06:	18bb      	adds	r3, r7, r2
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0c:	d109      	bne.n	8004c22 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c0e:	4aa4      	ldr	r2, [pc, #656]	; (8004ea0 <I2C_ITSlaveCplt+0x2f8>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0011      	movs	r1, r2
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fb13 	bl	8005240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2222      	movs	r2, #34	; 0x22
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c20:	e00d      	b.n	8004c3e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004c22:	230b      	movs	r3, #11
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b28      	cmp	r3, #40	; 0x28
 8004c2a:	d108      	bne.n	8004c3e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004c2c:	4a9d      	ldr	r2, [pc, #628]	; (8004ea4 <I2C_ITSlaveCplt+0x2fc>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 fb04 	bl	8005240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0209      	lsls	r1, r1, #8
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4993      	ldr	r1, [pc, #588]	; (8004ea8 <I2C_ITSlaveCplt+0x300>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 faab 	bl	80051be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	01db      	lsls	r3, r3, #7
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d013      	beq.n	8004c9a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	498b      	ldr	r1, [pc, #556]	; (8004eac <I2C_ITSlaveCplt+0x304>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01f      	beq.n	8004cca <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c98:	e017      	b.n	8004cca <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d012      	beq.n	8004cca <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4980      	ldr	r1, [pc, #512]	; (8004eb0 <I2C_ITSlaveCplt+0x308>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d020      	beq.n	8004d14 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	4393      	bics	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	2204      	movs	r2, #4
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d04f      	beq.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2210      	movs	r2, #16
 8004d36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d38:	d04b      	beq.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d12d      	bne.n	8004da0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2241      	movs	r2, #65	; 0x41
 8004d48:	5c9b      	ldrb	r3, [r3, r2]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b28      	cmp	r3, #40	; 0x28
 8004d4e:	d10b      	bne.n	8004d68 <I2C_ITSlaveCplt+0x1c0>
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	049b      	lsls	r3, r3, #18
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d106      	bne.n	8004d68 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f8a9 	bl	8004eb8 <I2C_ITListenCplt>
 8004d66:	e034      	b.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2241      	movs	r2, #65	; 0x41
 8004d6c:	5c9b      	ldrb	r3, [r3, r2]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b29      	cmp	r3, #41	; 0x29
 8004d72:	d110      	bne.n	8004d96 <I2C_ITSlaveCplt+0x1ee>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a4f      	ldr	r2, [pc, #316]	; (8004eb4 <I2C_ITSlaveCplt+0x30c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00c      	beq.n	8004d96 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	0018      	movs	r0, r3
 8004d88:	f000 fa19 	bl	80051be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f7ff fea6 	bl	8004ae0 <I2C_ITSlaveSeqCplt>
 8004d94:	e01d      	b.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	61da      	str	r2, [r3, #28]
 8004d9e:	e018      	b.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2210      	movs	r2, #16
 8004da6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	2204      	movs	r2, #4
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x21c>
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	045b      	lsls	r3, r3, #17
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d106      	bne.n	8004dd2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0011      	movs	r1, r2
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 f8cb 	bl	8004f68 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2242      	movs	r2, #66	; 0x42
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f8b9 	bl	8004f68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2241      	movs	r2, #65	; 0x41
 8004dfa:	5c9b      	ldrb	r3, [r3, r2]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b28      	cmp	r3, #40	; 0x28
 8004e00:	d147      	bne.n	8004e92 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0011      	movs	r1, r2
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 f855 	bl	8004eb8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e0e:	e040      	b.n	8004e92 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <I2C_ITSlaveCplt+0x30c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d016      	beq.n	8004e48 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7ff fe5f 	bl	8004ae0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <I2C_ITSlaveCplt+0x30c>)
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2241      	movs	r2, #65	; 0x41
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7ff fc90 	bl	8004766 <HAL_I2C_ListenCpltCallback>
}
 8004e46:	e024      	b.n	8004e92 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2241      	movs	r2, #65	; 0x41
 8004e4c:	5c9b      	ldrb	r3, [r3, r2]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b22      	cmp	r3, #34	; 0x22
 8004e52:	d10f      	bne.n	8004e74 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2241      	movs	r2, #65	; 0x41
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2240      	movs	r2, #64	; 0x40
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fc62 	bl	8004736 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e72:	e00e      	b.n	8004e92 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2241      	movs	r2, #65	; 0x41
 8004e78:	2120      	movs	r1, #32
 8004e7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2240      	movs	r2, #64	; 0x40
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff fc4a 	bl	8004726 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b006      	add	sp, #24
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	00008001 	.word	0x00008001
 8004ea0:	00008002 	.word	0x00008002
 8004ea4:	00008003 	.word	0x00008003
 8004ea8:	fe00e800 	.word	0xfe00e800
 8004eac:	ffffbfff 	.word	0xffffbfff
 8004eb0:	ffff7fff 	.word	0xffff7fff
 8004eb4:	ffff0000 	.word	0xffff0000

08004eb8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a26      	ldr	r2, [pc, #152]	; (8004f60 <I2C_ITListenCplt+0xa8>)
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2241      	movs	r2, #65	; 0x41
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2242      	movs	r2, #66	; 0x42
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d022      	beq.n	8004f32 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <I2C_ITListenCplt+0xac>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 f981 	bl	8005240 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2210      	movs	r2, #16
 8004f44:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff fc08 	bl	8004766 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	ffff0000 	.word	0xffff0000
 8004f64:	00008003 	.word	0x00008003

08004f68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f72:	200f      	movs	r0, #15
 8004f74:	183b      	adds	r3, r7, r0
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	2141      	movs	r1, #65	; 0x41
 8004f7a:	5c52      	ldrb	r2, [r2, r1]
 8004f7c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2242      	movs	r2, #66	; 0x42
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a72      	ldr	r2, [pc, #456]	; (8005154 <I2C_ITError+0x1ec>)
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f9e:	183b      	adds	r3, r7, r0
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b28      	cmp	r3, #40	; 0x28
 8004fa4:	d007      	beq.n	8004fb6 <I2C_ITError+0x4e>
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b29      	cmp	r3, #41	; 0x29
 8004fac:	d003      	beq.n	8004fb6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004fae:	183b      	adds	r3, r7, r0
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb4:	d10c      	bne.n	8004fd0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2103      	movs	r1, #3
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f940 	bl	8005240 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2241      	movs	r2, #65	; 0x41
 8004fc4:	2128      	movs	r1, #40	; 0x28
 8004fc6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a63      	ldr	r2, [pc, #396]	; (8005158 <I2C_ITError+0x1f0>)
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8004fce:	e032      	b.n	8005036 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fd0:	4a62      	ldr	r2, [pc, #392]	; (800515c <I2C_ITError+0x1f4>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0011      	movs	r1, r2
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 f932 	bl	8005240 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f000 f8ed 	bl	80051be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2241      	movs	r2, #65	; 0x41
 8004fe8:	5c9b      	ldrb	r3, [r3, r2]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d01f      	beq.n	8005030 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2241      	movs	r2, #65	; 0x41
 8004ff4:	2120      	movs	r1, #32
 8004ff6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2220      	movs	r2, #32
 8005000:	4013      	ands	r3, r2
 8005002:	2b20      	cmp	r3, #32
 8005004:	d114      	bne.n	8005030 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2210      	movs	r2, #16
 800500e:	4013      	ands	r3, r2
 8005010:	2b10      	cmp	r3, #16
 8005012:	d109      	bne.n	8005028 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2210      	movs	r2, #16
 800501a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	2204      	movs	r2, #4
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03b      	beq.n	80050bc <I2C_ITError+0x154>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b11      	cmp	r3, #17
 8005048:	d002      	beq.n	8005050 <I2C_ITError+0xe8>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b21      	cmp	r3, #33	; 0x21
 800504e:	d135      	bne.n	80050bc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	01db      	lsls	r3, r3, #7
 800505a:	401a      	ands	r2, r3
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	429a      	cmp	r2, r3
 8005062:	d107      	bne.n	8005074 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	493c      	ldr	r1, [pc, #240]	; (8005160 <I2C_ITError+0x1f8>)
 8005070:	400a      	ands	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff f841 	bl	8004100 <HAL_DMA_GetState>
 800507e:	0003      	movs	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d016      	beq.n	80050b2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <I2C_ITError+0x1fc>)
 800508a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	2100      	movs	r1, #0
 8005092:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	0018      	movs	r0, r3
 800509a:	f7fe ff15 	bl	8003ec8 <HAL_DMA_Abort_IT>
 800509e:	1e03      	subs	r3, r0, #0
 80050a0:	d051      	beq.n	8005146 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	0018      	movs	r0, r3
 80050ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050b0:	e049      	b.n	8005146 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 f859 	bl	800516c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ba:	e044      	b.n	8005146 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03b      	beq.n	800513c <I2C_ITError+0x1d4>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b12      	cmp	r3, #18
 80050c8:	d002      	beq.n	80050d0 <I2C_ITError+0x168>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b22      	cmp	r3, #34	; 0x22
 80050ce:	d135      	bne.n	800513c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	401a      	ands	r2, r3
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	491e      	ldr	r1, [pc, #120]	; (8005168 <I2C_ITError+0x200>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	0018      	movs	r0, r3
 80050fa:	f7ff f801 	bl	8004100 <HAL_DMA_GetState>
 80050fe:	0003      	movs	r3, r0
 8005100:	2b01      	cmp	r3, #1
 8005102:	d016      	beq.n	8005132 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	4a16      	ldr	r2, [pc, #88]	; (8005164 <I2C_ITError+0x1fc>)
 800510a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	0018      	movs	r0, r3
 800511a:	f7fe fed5 	bl	8003ec8 <HAL_DMA_Abort_IT>
 800511e:	1e03      	subs	r3, r0, #0
 8005120:	d013      	beq.n	800514a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	0018      	movs	r0, r3
 800512e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005130:	e00b      	b.n	800514a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f000 f819 	bl	800516c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800513a:	e006      	b.n	800514a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 f814 	bl	800516c <I2C_TreatErrorCallback>
  }
}
 8005144:	e002      	b.n	800514c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	e000      	b.n	800514c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800514a:	46c0      	nop			; (mov r8, r8)
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}
 8005154:	ffff0000 	.word	0xffff0000
 8005158:	08004799 	.word	0x08004799
 800515c:	00008003 	.word	0x00008003
 8005160:	ffffbfff 	.word	0xffffbfff
 8005164:	08005203 	.word	0x08005203
 8005168:	ffff7fff 	.word	0xffff7fff

0800516c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2241      	movs	r2, #65	; 0x41
 8005178:	5c9b      	ldrb	r3, [r3, r2]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d10f      	bne.n	80051a0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2241      	movs	r2, #65	; 0x41
 8005184:	2120      	movs	r1, #32
 8005186:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2240      	movs	r2, #64	; 0x40
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f7ff faf4 	bl	8004786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800519e:	e00a      	b.n	80051b6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2240      	movs	r2, #64	; 0x40
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7ff fae0 	bl	8004776 <HAL_I2C_ErrorCallback>
}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b002      	add	sp, #8
 80051bc:	bd80      	pop	{r7, pc}

080051be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2202      	movs	r2, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d103      	bne.n	80051dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2201      	movs	r2, #1
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d007      	beq.n	80051fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2101      	movs	r1, #1
 80051f6:	430a      	orrs	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]
  }
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b002      	add	sp, #8
 8005200:	bd80      	pop	{r7, pc}

08005202 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	2200      	movs	r2, #0
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	2200      	movs	r2, #0
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	0018      	movs	r0, r3
 8005234:	f7ff ff9a 	bl	800516c <I2C_TreatErrorCallback>
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b004      	add	sp, #16
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	000a      	movs	r2, r1
 800524a:	1cbb      	adds	r3, r7, #2
 800524c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005252:	1cbb      	adds	r3, r7, #2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	4013      	ands	r3, r2
 800525a:	d010      	beq.n	800527e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2242      	movs	r2, #66	; 0x42
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2241      	movs	r2, #65	; 0x41
 8005268:	5c9b      	ldrb	r3, [r3, r2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	001a      	movs	r2, r3
 800526e:	2328      	movs	r3, #40	; 0x28
 8005270:	4013      	ands	r3, r2
 8005272:	2b28      	cmp	r3, #40	; 0x28
 8005274:	d003      	beq.n	800527e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22b0      	movs	r2, #176	; 0xb0
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800527e:	1cbb      	adds	r3, r7, #2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	2202      	movs	r2, #2
 8005284:	4013      	ands	r3, r2
 8005286:	d010      	beq.n	80052aa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2244      	movs	r2, #68	; 0x44
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2241      	movs	r2, #65	; 0x41
 8005294:	5c9b      	ldrb	r3, [r3, r2]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	001a      	movs	r2, r3
 800529a:	2328      	movs	r3, #40	; 0x28
 800529c:	4013      	ands	r3, r2
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d003      	beq.n	80052aa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	22b0      	movs	r2, #176	; 0xb0
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052aa:	1cbb      	adds	r3, r7, #2
 80052ac:	2200      	movs	r2, #0
 80052ae:	5e9b      	ldrsh	r3, [r3, r2]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da03      	bge.n	80052bc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	22b8      	movs	r2, #184	; 0xb8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052bc:	1cbb      	adds	r3, r7, #2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d103      	bne.n	80052cc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2290      	movs	r2, #144	; 0x90
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052cc:	1cbb      	adds	r3, r7, #2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d103      	bne.n	80052dc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052dc:	1cbb      	adds	r3, r7, #2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d103      	bne.n	80052ec <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	43d9      	mvns	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	400a      	ands	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2241      	movs	r2, #65	; 0x41
 8005316:	5c9b      	ldrb	r3, [r3, r2]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b20      	cmp	r3, #32
 800531c:	d138      	bne.n	8005390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	5c9b      	ldrb	r3, [r3, r2]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005328:	2302      	movs	r3, #2
 800532a:	e032      	b.n	8005392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	2101      	movs	r1, #1
 8005332:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2241      	movs	r2, #65	; 0x41
 8005338:	2124      	movs	r1, #36	; 0x24
 800533a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4911      	ldr	r1, [pc, #68]	; (800539c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005358:	400a      	ands	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2101      	movs	r1, #1
 8005378:	430a      	orrs	r2, r1
 800537a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2241      	movs	r2, #65	; 0x41
 8005380:	2120      	movs	r1, #32
 8005382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	2100      	movs	r1, #0
 800538a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e000      	b.n	8005392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005390:	2302      	movs	r3, #2
  }
}
 8005392:	0018      	movs	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	ffffefff 	.word	0xffffefff

080053a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2241      	movs	r2, #65	; 0x41
 80053ae:	5c9b      	ldrb	r3, [r3, r2]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d139      	bne.n	800542a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2240      	movs	r2, #64	; 0x40
 80053ba:	5c9b      	ldrb	r3, [r3, r2]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e033      	b.n	800542c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	2101      	movs	r1, #1
 80053ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2241      	movs	r2, #65	; 0x41
 80053d0:	2124      	movs	r1, #36	; 0x24
 80053d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	438a      	bics	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2241      	movs	r2, #65	; 0x41
 800541a:	2120      	movs	r1, #32
 800541c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2240      	movs	r2, #64	; 0x40
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	fffff0ff 	.word	0xfffff0ff

08005438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005446:	4013      	ands	r3, r2
 8005448:	0019      	movs	r1, r3
 800544a:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d11f      	bne.n	800549c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	0013      	movs	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	189b      	adds	r3, r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4912      	ldr	r1, [pc, #72]	; (80054b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800546a:	0018      	movs	r0, r3
 800546c:	f7fa fe68 	bl	8000140 <__udivsi3>
 8005470:	0003      	movs	r3, r0
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005476:	e008      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3b01      	subs	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e001      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e009      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	401a      	ands	r2, r3
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	429a      	cmp	r2, r3
 800549a:	d0ed      	beq.n	8005478 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	40007000 	.word	0x40007000
 80054ac:	fffff9ff 	.word	0xfffff9ff
 80054b0:	20000000 	.word	0x20000000
 80054b4:	000f4240 	.word	0x000f4240

080054b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	23e0      	movs	r3, #224	; 0xe0
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	4013      	ands	r3, r2
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000

080054d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e2fe      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2201      	movs	r2, #1
 80054e8:	4013      	ands	r3, r2
 80054ea:	d100      	bne.n	80054ee <HAL_RCC_OscConfig+0x1e>
 80054ec:	e07c      	b.n	80055e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ee:	4bc3      	ldr	r3, [pc, #780]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2238      	movs	r2, #56	; 0x38
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054f8:	4bc0      	ldr	r3, [pc, #768]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2203      	movs	r2, #3
 80054fe:	4013      	ands	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b10      	cmp	r3, #16
 8005506:	d102      	bne.n	800550e <HAL_RCC_OscConfig+0x3e>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d002      	beq.n	8005514 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	4bb9      	ldr	r3, [pc, #740]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	4013      	ands	r3, r2
 800551e:	d062      	beq.n	80055e6 <HAL_RCC_OscConfig+0x116>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d15e      	bne.n	80055e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e2d9      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	025b      	lsls	r3, r3, #9
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x78>
 8005538:	4bb0      	ldr	r3, [pc, #704]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4baf      	ldr	r3, [pc, #700]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	0249      	lsls	r1, r1, #9
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e020      	b.n	800558a <HAL_RCC_OscConfig+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	23a0      	movs	r3, #160	; 0xa0
 800554e:	02db      	lsls	r3, r3, #11
 8005550:	429a      	cmp	r2, r3
 8005552:	d10e      	bne.n	8005572 <HAL_RCC_OscConfig+0xa2>
 8005554:	4ba9      	ldr	r3, [pc, #676]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4ba8      	ldr	r3, [pc, #672]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800555a:	2180      	movs	r1, #128	; 0x80
 800555c:	02c9      	lsls	r1, r1, #11
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4ba6      	ldr	r3, [pc, #664]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4ba5      	ldr	r3, [pc, #660]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	0249      	lsls	r1, r1, #9
 800556c:	430a      	orrs	r2, r1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e00b      	b.n	800558a <HAL_RCC_OscConfig+0xba>
 8005572:	4ba2      	ldr	r3, [pc, #648]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4ba1      	ldr	r3, [pc, #644]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005578:	49a1      	ldr	r1, [pc, #644]	; (8005800 <HAL_RCC_OscConfig+0x330>)
 800557a:	400a      	ands	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	4b9f      	ldr	r3, [pc, #636]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b9e      	ldr	r3, [pc, #632]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005584:	499f      	ldr	r1, [pc, #636]	; (8005804 <HAL_RCC_OscConfig+0x334>)
 8005586:	400a      	ands	r2, r1
 8005588:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d014      	beq.n	80055bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fe fb03 	bl	8003b9c <HAL_GetTick>
 8005596:	0003      	movs	r3, r0
 8005598:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559c:	f7fe fafe 	bl	8003b9c <HAL_GetTick>
 80055a0:	0002      	movs	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e298      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ae:	4b93      	ldr	r3, [pc, #588]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	029b      	lsls	r3, r3, #10
 80055b6:	4013      	ands	r3, r2
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0xcc>
 80055ba:	e015      	b.n	80055e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fe faee 	bl	8003b9c <HAL_GetTick>
 80055c0:	0003      	movs	r3, r0
 80055c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c6:	f7fe fae9 	bl	8003b9c <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b64      	cmp	r3, #100	; 0x64
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e283      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d8:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	4013      	ands	r3, r2
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCC_OscConfig+0xf6>
 80055e4:	e000      	b.n	80055e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2202      	movs	r2, #2
 80055ee:	4013      	ands	r3, r2
 80055f0:	d100      	bne.n	80055f4 <HAL_RCC_OscConfig+0x124>
 80055f2:	e099      	b.n	8005728 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f4:	4b81      	ldr	r3, [pc, #516]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2238      	movs	r2, #56	; 0x38
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055fe:	4b7f      	ldr	r3, [pc, #508]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2203      	movs	r2, #3
 8005604:	4013      	ands	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b10      	cmp	r3, #16
 800560c:	d102      	bne.n	8005614 <HAL_RCC_OscConfig+0x144>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d002      	beq.n	800561a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d135      	bne.n	8005686 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800561a:	4b78      	ldr	r3, [pc, #480]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4013      	ands	r3, r2
 8005624:	d005      	beq.n	8005632 <HAL_RCC_OscConfig+0x162>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e256      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005632:	4b72      	ldr	r3, [pc, #456]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_RCC_OscConfig+0x338>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	021a      	lsls	r2, r3, #8
 8005642:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d112      	bne.n	8005674 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800564e:	4b6b      	ldr	r3, [pc, #428]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6e      	ldr	r2, [pc, #440]	; (800580c <HAL_RCC_OscConfig+0x33c>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	4b67      	ldr	r3, [pc, #412]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005662:	4b66      	ldr	r3, [pc, #408]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	0adb      	lsrs	r3, r3, #11
 8005668:	2207      	movs	r2, #7
 800566a:	4013      	ands	r3, r2
 800566c:	4a68      	ldr	r2, [pc, #416]	; (8005810 <HAL_RCC_OscConfig+0x340>)
 800566e:	40da      	lsrs	r2, r3
 8005670:	4b68      	ldr	r3, [pc, #416]	; (8005814 <HAL_RCC_OscConfig+0x344>)
 8005672:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_RCC_OscConfig+0x348>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	0018      	movs	r0, r3
 800567a:	f7fe fa33 	bl	8003ae4 <HAL_InitTick>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d051      	beq.n	8005726 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e22c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d030      	beq.n	80056f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800568e:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a5e      	ldr	r2, [pc, #376]	; (800580c <HAL_RCC_OscConfig+0x33c>)
 8005694:	4013      	ands	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	4b57      	ldr	r3, [pc, #348]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80056a2:	4b56      	ldr	r3, [pc, #344]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b55      	ldr	r3, [pc, #340]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	0049      	lsls	r1, r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fe fa74 	bl	8003b9c <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fe fa6f 	bl	8003b9c <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e209      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4013      	ands	r3, r2
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b48      	ldr	r3, [pc, #288]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a4a      	ldr	r2, [pc, #296]	; (8005808 <HAL_RCC_OscConfig+0x338>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e01b      	b.n	8005728 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056f0:	4b42      	ldr	r3, [pc, #264]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80056f6:	4949      	ldr	r1, [pc, #292]	; (800581c <HAL_RCC_OscConfig+0x34c>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fe fa4e 	bl	8003b9c <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005706:	f7fe fa49 	bl	8003b9c <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e1e3      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4013      	ands	r3, r2
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x236>
 8005724:	e000      	b.n	8005728 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005726:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	4013      	ands	r3, r2
 8005730:	d047      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005732:	4b32      	ldr	r3, [pc, #200]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2238      	movs	r2, #56	; 0x38
 8005738:	4013      	ands	r3, r2
 800573a:	2b18      	cmp	r3, #24
 800573c:	d10a      	bne.n	8005754 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800573e:	4b2f      	ldr	r3, [pc, #188]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	2202      	movs	r2, #2
 8005744:	4013      	ands	r3, r2
 8005746:	d03c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2f2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d138      	bne.n	80057c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e1c5      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d019      	beq.n	8005790 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 800575e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005760:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005762:	2101      	movs	r1, #1
 8005764:	430a      	orrs	r2, r1
 8005766:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fe fa18 	bl	8003b9c <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005772:	f7fe fa13 	bl	8003b9c <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1ad      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	d0f1      	beq.n	8005772 <HAL_RCC_OscConfig+0x2a2>
 800578e:	e018      	b.n	80057c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005792:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fe f9fe 	bl	8003b9c <HAL_GetTick>
 80057a0:	0003      	movs	r3, r0
 80057a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fe f9f9 	bl	8003b9c <HAL_GetTick>
 80057aa:	0002      	movs	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e193      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80057ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d1f1      	bne.n	80057a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2204      	movs	r2, #4
 80057c8:	4013      	ands	r3, r2
 80057ca:	d100      	bne.n	80057ce <HAL_RCC_OscConfig+0x2fe>
 80057cc:	e0c6      	b.n	800595c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	231f      	movs	r3, #31
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2238      	movs	r2, #56	; 0x38
 80057dc:	4013      	ands	r3, r2
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d11e      	bne.n	8005820 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_RCC_OscConfig+0x32c>)
 80057e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e6:	2202      	movs	r2, #2
 80057e8:	4013      	ands	r3, r2
 80057ea:	d100      	bne.n	80057ee <HAL_RCC_OscConfig+0x31e>
 80057ec:	e0b6      	b.n	800595c <HAL_RCC_OscConfig+0x48c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d000      	beq.n	80057f8 <HAL_RCC_OscConfig+0x328>
 80057f6:	e0b1      	b.n	800595c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e171      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
 80057fc:	40021000 	.word	0x40021000
 8005800:	fffeffff 	.word	0xfffeffff
 8005804:	fffbffff 	.word	0xfffbffff
 8005808:	ffff80ff 	.word	0xffff80ff
 800580c:	ffffc7ff 	.word	0xffffc7ff
 8005810:	00f42400 	.word	0x00f42400
 8005814:	20000000 	.word	0x20000000
 8005818:	20000004 	.word	0x20000004
 800581c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005820:	4bb1      	ldr	r3, [pc, #708]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	055b      	lsls	r3, r3, #21
 8005828:	4013      	ands	r3, r2
 800582a:	d101      	bne.n	8005830 <HAL_RCC_OscConfig+0x360>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x362>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d011      	beq.n	800585a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005836:	4bac      	ldr	r3, [pc, #688]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583a:	4bab      	ldr	r3, [pc, #684]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	0549      	lsls	r1, r1, #21
 8005840:	430a      	orrs	r2, r1
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
 8005844:	4ba8      	ldr	r3, [pc, #672]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	055b      	lsls	r3, r3, #21
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005852:	231f      	movs	r3, #31
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585a:	4ba4      	ldr	r3, [pc, #656]	; (8005aec <HAL_RCC_OscConfig+0x61c>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4013      	ands	r3, r2
 8005864:	d11a      	bne.n	800589c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005866:	4ba1      	ldr	r3, [pc, #644]	; (8005aec <HAL_RCC_OscConfig+0x61c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4ba0      	ldr	r3, [pc, #640]	; (8005aec <HAL_RCC_OscConfig+0x61c>)
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0049      	lsls	r1, r1, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005874:	f7fe f992 	bl	8003b9c <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fe f98d 	bl	8003b9c <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e127      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005890:	4b96      	ldr	r3, [pc, #600]	; (8005aec <HAL_RCC_OscConfig+0x61c>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d106      	bne.n	80058b2 <HAL_RCC_OscConfig+0x3e2>
 80058a4:	4b90      	ldr	r3, [pc, #576]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a8:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058aa:	2101      	movs	r1, #1
 80058ac:	430a      	orrs	r2, r1
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b0:	e01c      	b.n	80058ec <HAL_RCC_OscConfig+0x41c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x404>
 80058ba:	4b8b      	ldr	r3, [pc, #556]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058be:	4b8a      	ldr	r3, [pc, #552]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058c0:	2104      	movs	r1, #4
 80058c2:	430a      	orrs	r2, r1
 80058c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ca:	4b87      	ldr	r3, [pc, #540]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058cc:	2101      	movs	r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0x41c>
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058d8:	4b83      	ldr	r3, [pc, #524]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058da:	2101      	movs	r1, #1
 80058dc:	438a      	bics	r2, r1
 80058de:	65da      	str	r2, [r3, #92]	; 0x5c
 80058e0:	4b81      	ldr	r3, [pc, #516]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80058e6:	2104      	movs	r1, #4
 80058e8:	438a      	bics	r2, r1
 80058ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d014      	beq.n	800591e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fe f952 	bl	8003b9c <HAL_GetTick>
 80058f8:	0003      	movs	r3, r0
 80058fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fc:	e009      	b.n	8005912 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fe f94d 	bl	8003b9c <HAL_GetTick>
 8005902:	0002      	movs	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	4a79      	ldr	r2, [pc, #484]	; (8005af0 <HAL_RCC_OscConfig+0x620>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0e6      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	4b75      	ldr	r3, [pc, #468]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	2202      	movs	r2, #2
 8005918:	4013      	ands	r3, r2
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x42e>
 800591c:	e013      	b.n	8005946 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fe f93d 	bl	8003b9c <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005926:	e009      	b.n	800593c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fe f938 	bl	8003b9c <HAL_GetTick>
 800592c:	0002      	movs	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	4a6f      	ldr	r2, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x620>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0d1      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800593c:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005946:	231f      	movs	r3, #31
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005954:	4b64      	ldr	r3, [pc, #400]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005956:	4967      	ldr	r1, [pc, #412]	; (8005af4 <HAL_RCC_OscConfig+0x624>)
 8005958:	400a      	ands	r2, r1
 800595a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d100      	bne.n	8005966 <HAL_RCC_OscConfig+0x496>
 8005964:	e0bb      	b.n	8005ade <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005966:	4b60      	ldr	r3, [pc, #384]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2238      	movs	r2, #56	; 0x38
 800596c:	4013      	ands	r3, r2
 800596e:	2b10      	cmp	r3, #16
 8005970:	d100      	bne.n	8005974 <HAL_RCC_OscConfig+0x4a4>
 8005972:	e07b      	b.n	8005a6c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d156      	bne.n	8005a2a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597c:	4b5a      	ldr	r3, [pc, #360]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005982:	495d      	ldr	r1, [pc, #372]	; (8005af8 <HAL_RCC_OscConfig+0x628>)
 8005984:	400a      	ands	r2, r1
 8005986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fe f908 	bl	8003b9c <HAL_GetTick>
 800598c:	0003      	movs	r3, r0
 800598e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005992:	f7fe f903 	bl	8003b9c <HAL_GetTick>
 8005996:	0002      	movs	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e09d      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	2380      	movs	r3, #128	; 0x80
 80059aa:	049b      	lsls	r3, r3, #18
 80059ac:	4013      	ands	r3, r2
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b0:	4b4d      	ldr	r3, [pc, #308]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a51      	ldr	r2, [pc, #324]	; (8005afc <HAL_RCC_OscConfig+0x62c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	431a      	orrs	r2, r3
 80059de:	4b42      	ldr	r3, [pc, #264]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e4:	4b40      	ldr	r3, [pc, #256]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059ea:	2180      	movs	r1, #128	; 0x80
 80059ec:	0449      	lsls	r1, r1, #17
 80059ee:	430a      	orrs	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059f2:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	4b3c      	ldr	r3, [pc, #240]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	0549      	lsls	r1, r1, #21
 80059fc:	430a      	orrs	r2, r1
 80059fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe f8cc 	bl	8003b9c <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fe f8c7 	bl	8003b9c <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e061      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1c:	4b32      	ldr	r3, [pc, #200]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	049b      	lsls	r3, r3, #18
 8005a24:	4013      	ands	r3, r2
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x53a>
 8005a28:	e059      	b.n	8005ade <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b2f      	ldr	r3, [pc, #188]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a30:	4931      	ldr	r1, [pc, #196]	; (8005af8 <HAL_RCC_OscConfig+0x628>)
 8005a32:	400a      	ands	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fe f8b1 	bl	8003b9c <HAL_GetTick>
 8005a3a:	0003      	movs	r3, r0
 8005a3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a40:	f7fe f8ac 	bl	8003b9c <HAL_GetTick>
 8005a44:	0002      	movs	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e046      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a52:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	049b      	lsls	r3, r3, #18
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005a5e:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a64:	4926      	ldr	r1, [pc, #152]	; (8005b00 <HAL_RCC_OscConfig+0x630>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	e038      	b.n	8005ade <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e033      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <HAL_RCC_OscConfig+0x618>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2203      	movs	r2, #3
 8005a82:	401a      	ands	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d126      	bne.n	8005ada <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2270      	movs	r2, #112	; 0x70
 8005a90:	401a      	ands	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d11f      	bne.n	8005ada <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	23fe      	movs	r3, #254	; 0xfe
 8005a9e:	01db      	lsls	r3, r3, #7
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d116      	bne.n	8005ada <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	23f8      	movs	r3, #248	; 0xf8
 8005ab0:	039b      	lsls	r3, r3, #14
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10e      	bne.n	8005ada <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	23e0      	movs	r3, #224	; 0xe0
 8005ac0:	051b      	lsls	r3, r3, #20
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d106      	bne.n	8005ada <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	0f5b      	lsrs	r3, r3, #29
 8005ad0:	075a      	lsls	r2, r3, #29
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d001      	beq.n	8005ade <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b008      	add	sp, #32
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40007000 	.word	0x40007000
 8005af0:	00001388 	.word	0x00001388
 8005af4:	efffffff 	.word	0xefffffff
 8005af8:	feffffff 	.word	0xfeffffff
 8005afc:	11c1808c 	.word	0x11c1808c
 8005b00:	eefefffc 	.word	0xeefefffc

08005b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0e9      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b18:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	4013      	ands	r3, r2
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d91e      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	4393      	bics	r3, r2
 8005b2e:	0019      	movs	r1, r3
 8005b30:	4b70      	ldr	r3, [pc, #448]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b38:	f7fe f830 	bl	8003b9c <HAL_GetTick>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b40:	e009      	b.n	8005b56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b42:	f7fe f82b 	bl	8003b9c <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	4a6a      	ldr	r2, [pc, #424]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e0ca      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b56:	4b67      	ldr	r3, [pc, #412]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d1ee      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d015      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2204      	movs	r2, #4
 8005b74:	4013      	ands	r3, r2
 8005b76:	d006      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b78:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005b7e:	21e0      	movs	r1, #224	; 0xe0
 8005b80:	01c9      	lsls	r1, r1, #7
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4a5d      	ldr	r2, [pc, #372]	; (8005d00 <HAL_RCC_ClockConfig+0x1fc>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	0019      	movs	r1, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d057      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bac:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d12b      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e097      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d107      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	049b      	lsls	r3, r3, #18
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d11f      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e08b      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bdc:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4013      	ands	r3, r2
 8005be6:	d113      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e07f      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e074      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	2202      	movs	r2, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e06d      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c10:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2207      	movs	r2, #7
 8005c16:	4393      	bics	r3, r2
 8005c18:	0019      	movs	r1, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c24:	f7fd ffba 	bl	8003b9c <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2c:	e009      	b.n	8005c42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c2e:	f7fd ffb5 	bl	8003b9c <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e054      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c42:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2238      	movs	r2, #56	; 0x38
 8005c48:	401a      	ands	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d1ec      	bne.n	8005c2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2207      	movs	r2, #7
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d21e      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2207      	movs	r2, #7
 8005c68:	4393      	bics	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c74:	f7fd ff92 	bl	8003b9c <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c7c:	e009      	b.n	8005c92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7e:	f7fd ff8d 	bl	8003b9c <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	4a1b      	ldr	r2, [pc, #108]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e02c      	b.n	8005cec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2207      	movs	r2, #7
 8005c98:	4013      	ands	r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1ee      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_RCC_ClockConfig+0x200>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005cbe:	f000 f829 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cc2:	0001      	movs	r1, r0
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	220f      	movs	r2, #15
 8005ccc:	401a      	ands	r2, r3
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <HAL_RCC_ClockConfig+0x204>)
 8005cd0:	0092      	lsls	r2, r2, #2
 8005cd2:	58d3      	ldr	r3, [r2, r3]
 8005cd4:	221f      	movs	r2, #31
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	000a      	movs	r2, r1
 8005cda:	40da      	lsrs	r2, r3
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_ClockConfig+0x208>)
 8005cde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x20c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7fd fefd 	bl	8003ae4 <HAL_InitTick>
 8005cea:	0003      	movs	r3, r0
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40022000 	.word	0x40022000
 8005cf8:	00001388 	.word	0x00001388
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	fffff0ff 	.word	0xfffff0ff
 8005d04:	ffff8fff 	.word	0xffff8fff
 8005d08:	0800b748 	.word	0x0800b748
 8005d0c:	20000000 	.word	0x20000000
 8005d10:	20000004 	.word	0x20000004

08005d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d1a:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2238      	movs	r2, #56	; 0x38
 8005d20:	4013      	ands	r3, r2
 8005d22:	d10f      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005d24:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0adb      	lsrs	r3, r3, #11
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2201      	movs	r2, #1
 8005d30:	409a      	lsls	r2, r3
 8005d32:	0013      	movs	r3, r2
 8005d34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	4835      	ldr	r0, [pc, #212]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d3a:	f7fa fa01 	bl	8000140 <__udivsi3>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	e05d      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d44:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2238      	movs	r2, #56	; 0x38
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	e054      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d56:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2238      	movs	r2, #56	; 0x38
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d138      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	2203      	movs	r2, #3
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	2207      	movs	r2, #7
 8005d74:	4013      	ands	r3, r2
 8005d76:	3301      	adds	r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d10d      	bne.n	8005d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4824      	ldr	r0, [pc, #144]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d84:	f7fa f9dc 	bl	8000140 <__udivsi3>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	227f      	movs	r2, #127	; 0x7f
 8005d94:	4013      	ands	r3, r2
 8005d96:	434b      	muls	r3, r1
 8005d98:	617b      	str	r3, [r7, #20]
        break;
 8005d9a:	e00d      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	481c      	ldr	r0, [pc, #112]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005da0:	f7fa f9ce 	bl	8000140 <__udivsi3>
 8005da4:	0003      	movs	r3, r0
 8005da6:	0019      	movs	r1, r3
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	227f      	movs	r2, #127	; 0x7f
 8005db0:	4013      	ands	r3, r2
 8005db2:	434b      	muls	r3, r1
 8005db4:	617b      	str	r3, [r7, #20]
        break;
 8005db6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	0f5b      	lsrs	r3, r3, #29
 8005dbe:	2207      	movs	r2, #7
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7fa f9b9 	bl	8000140 <__udivsi3>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e015      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2238      	movs	r2, #56	; 0x38
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d103      	bne.n	8005de8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e00b      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2238      	movs	r2, #56	; 0x38
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b18      	cmp	r3, #24
 8005df2:	d103      	bne.n	8005dfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005df4:	23fa      	movs	r3, #250	; 0xfa
 8005df6:	01db      	lsls	r3, r3, #7
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	e001      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e00:	693b      	ldr	r3, [r7, #16]
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b006      	add	sp, #24
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	007a1200 	.word	0x007a1200

08005e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20000000 	.word	0x20000000

08005e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e2c:	b5b0      	push	{r4, r5, r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e30:	f7ff fff2 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e34:	0004      	movs	r4, r0
 8005e36:	f7ff fb3f 	bl	80054b8 <LL_RCC_GetAPB1Prescaler>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	0b1a      	lsrs	r2, r3, #12
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	221f      	movs	r2, #31
 8005e46:	4013      	ands	r3, r2
 8005e48:	40dc      	lsrs	r4, r3
 8005e4a:	0023      	movs	r3, r4
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bdb0      	pop	{r4, r5, r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	0800b788 	.word	0x0800b788

08005e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e60:	2313      	movs	r3, #19
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e68:	2312      	movs	r3, #18
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e7c:	e0a3      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7e:	2011      	movs	r0, #17
 8005e80:	183b      	adds	r3, r7, r0
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e86:	4bb3      	ldr	r3, [pc, #716]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	055b      	lsls	r3, r3, #21
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d110      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e92:	4bb0      	ldr	r3, [pc, #704]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e96:	4baf      	ldr	r3, [pc, #700]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	0549      	lsls	r1, r1, #21
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ea0:	4bac      	ldr	r3, [pc, #688]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	055b      	lsls	r3, r3, #21
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb4:	4ba8      	ldr	r3, [pc, #672]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4ba7      	ldr	r3, [pc, #668]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0049      	lsls	r1, r1, #1
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec2:	f7fd fe6b 	bl	8003b9c <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ecc:	f7fd fe66 	bl	8003b9c <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d904      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005eda:	2313      	movs	r3, #19
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	2203      	movs	r2, #3
 8005ee0:	701a      	strb	r2, [r3, #0]
        break;
 8005ee2:	e005      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee4:	4b9c      	ldr	r3, [pc, #624]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4013      	ands	r3, r2
 8005eee:	d0ed      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ef0:	2313      	movs	r3, #19
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d154      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efa:	4b96      	ldr	r3, [pc, #600]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005efe:	23c0      	movs	r3, #192	; 0xc0
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4013      	ands	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d014      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f16:	4b8f      	ldr	r3, [pc, #572]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	4a90      	ldr	r2, [pc, #576]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f20:	4b8c      	ldr	r3, [pc, #560]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f24:	4b8b      	ldr	r3, [pc, #556]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	0249      	lsls	r1, r1, #9
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2e:	4b89      	ldr	r3, [pc, #548]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f32:	4b88      	ldr	r3, [pc, #544]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f34:	498a      	ldr	r1, [pc, #552]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f36:	400a      	ands	r2, r1
 8005f38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f3a:	4b86      	ldr	r3, [pc, #536]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4013      	ands	r3, r2
 8005f46:	d016      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd fe28 	bl	8003b9c <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	e00c      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fd fe23 	bl	8003b9c <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	4a81      	ldr	r2, [pc, #516]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d904      	bls.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f62:	2313      	movs	r3, #19
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	2203      	movs	r2, #3
 8005f68:	701a      	strb	r2, [r3, #0]
            break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6c:	4b79      	ldr	r3, [pc, #484]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0ed      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f76:	2313      	movs	r3, #19
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f80:	4b74      	ldr	r3, [pc, #464]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f84:	4a75      	ldr	r2, [pc, #468]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8e:	4b71      	ldr	r3, [pc, #452]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f90:	430a      	orrs	r2, r1
 8005f92:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f94:	e00c      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f96:	2312      	movs	r3, #18
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	2213      	movs	r2, #19
 8005f9c:	18ba      	adds	r2, r7, r2
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	2312      	movs	r3, #18
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2213      	movs	r2, #19
 8005faa:	18ba      	adds	r2, r7, r2
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb0:	2311      	movs	r3, #17
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4b66      	ldr	r3, [pc, #408]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbe:	4b65      	ldr	r3, [pc, #404]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005fc0:	4969      	ldr	r1, [pc, #420]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd0:	4b60      	ldr	r3, [pc, #384]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	4393      	bics	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4b5d      	ldr	r3, [pc, #372]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2210      	movs	r2, #16
 8005fea:	4013      	ands	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fee:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	4a5e      	ldr	r2, [pc, #376]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	4b55      	ldr	r3, [pc, #340]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ffe:	430a      	orrs	r2, r1
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	2380      	movs	r3, #128	; 0x80
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4013      	ands	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800600e:	4b51      	ldr	r3, [pc, #324]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	4a57      	ldr	r2, [pc, #348]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006014:	4013      	ands	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	4b4d      	ldr	r3, [pc, #308]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800601e:	430a      	orrs	r2, r1
 8006020:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4013      	ands	r3, r2
 800602c:	d009      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602e:	4b49      	ldr	r3, [pc, #292]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	4a50      	ldr	r2, [pc, #320]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006034:	4013      	ands	r3, r2
 8006036:	0019      	movs	r1, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	4b45      	ldr	r3, [pc, #276]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800603e:	430a      	orrs	r2, r1
 8006040:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2220      	movs	r2, #32
 8006048:	4013      	ands	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800604c:	4b41      	ldr	r3, [pc, #260]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	4a49      	ldr	r2, [pc, #292]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006052:	4013      	ands	r3, r2
 8006054:	0019      	movs	r1, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	4b3e      	ldr	r3, [pc, #248]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800605c:	430a      	orrs	r2, r1
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	02db      	lsls	r3, r3, #11
 8006068:	4013      	ands	r3, r2
 800606a:	d016      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800606c:	4b39      	ldr	r3, [pc, #228]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006072:	4013      	ands	r3, r2
 8006074:	0019      	movs	r1, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	4b36      	ldr	r3, [pc, #216]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800607c:	430a      	orrs	r2, r1
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	23c0      	movs	r3, #192	; 0xc0
 8006086:	051b      	lsls	r3, r3, #20
 8006088:	429a      	cmp	r2, r3
 800608a:	d106      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800608c:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	4b30      	ldr	r3, [pc, #192]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	0449      	lsls	r1, r1, #17
 8006096:	430a      	orrs	r2, r1
 8006098:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	2380      	movs	r3, #128	; 0x80
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4013      	ands	r3, r2
 80060a4:	d015      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	0899      	lsrs	r1, r3, #2
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060b4:	430a      	orrs	r2, r1
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	05db      	lsls	r3, r3, #23
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80060c4:	4b23      	ldr	r3, [pc, #140]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	0249      	lsls	r1, r1, #9
 80060ce:	430a      	orrs	r2, r1
 80060d0:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	039b      	lsls	r3, r3, #14
 80060da:	4013      	ands	r3, r2
 80060dc:	d016      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	4a27      	ldr	r2, [pc, #156]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060ee:	430a      	orrs	r2, r1
 80060f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	03db      	lsls	r3, r3, #15
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d106      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	0449      	lsls	r1, r1, #17
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	4013      	ands	r3, r2
 8006116:	d016      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800611e:	4013      	ands	r3, r2
 8006120:	0019      	movs	r1, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006128:	430a      	orrs	r2, r1
 800612a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	01db      	lsls	r3, r3, #7
 8006134:	429a      	cmp	r2, r3
 8006136:	d106      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	0249      	lsls	r1, r1, #9
 8006142:	430a      	orrs	r2, r1
 8006144:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006146:	2312      	movs	r3, #18
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	781b      	ldrb	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b006      	add	sp, #24
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	40007000 	.word	0x40007000
 800615c:	fffffcff 	.word	0xfffffcff
 8006160:	fffeffff 	.word	0xfffeffff
 8006164:	00001388 	.word	0x00001388
 8006168:	efffffff 	.word	0xefffffff
 800616c:	fffff3ff 	.word	0xfffff3ff
 8006170:	fff3ffff 	.word	0xfff3ffff
 8006174:	ffcfffff 	.word	0xffcfffff
 8006178:	ffffcfff 	.word	0xffffcfff
 800617c:	f3ffffff 	.word	0xf3ffffff
 8006180:	ffbfffff 	.word	0xffbfffff
 8006184:	ffff3fff 	.word	0xffff3fff

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e04a      	b.n	8006230 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	223d      	movs	r2, #61	; 0x3d
 800619e:	5c9b      	ldrb	r3, [r3, r2]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d107      	bne.n	80061b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	223c      	movs	r2, #60	; 0x3c
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7fd f9b5 	bl	8003520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	223d      	movs	r2, #61	; 0x3d
 80061ba:	2102      	movs	r1, #2
 80061bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3304      	adds	r3, #4
 80061c6:	0019      	movs	r1, r3
 80061c8:	0010      	movs	r0, r2
 80061ca:	f000 ff4f 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2248      	movs	r2, #72	; 0x48
 80061d2:	2101      	movs	r1, #1
 80061d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	223e      	movs	r2, #62	; 0x3e
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	223f      	movs	r2, #63	; 0x3f
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2240      	movs	r2, #64	; 0x40
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2241      	movs	r2, #65	; 0x41
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2242      	movs	r2, #66	; 0x42
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2243      	movs	r2, #67	; 0x43
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2244      	movs	r2, #68	; 0x44
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2245      	movs	r2, #69	; 0x45
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2246      	movs	r2, #70	; 0x46
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2247      	movs	r2, #71	; 0x47
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	223d      	movs	r2, #61	; 0x3d
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	0018      	movs	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e04a      	b.n	80062e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	223d      	movs	r2, #61	; 0x3d
 800624e:	5c9b      	ldrb	r3, [r3, r2]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	223c      	movs	r2, #60	; 0x3c
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f000 f841 	bl	80062e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	223d      	movs	r2, #61	; 0x3d
 800626a:	2102      	movs	r1, #2
 800626c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	0019      	movs	r1, r3
 8006278:	0010      	movs	r0, r2
 800627a:	f000 fef7 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2248      	movs	r2, #72	; 0x48
 8006282:	2101      	movs	r1, #1
 8006284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	223e      	movs	r2, #62	; 0x3e
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	223f      	movs	r2, #63	; 0x3f
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2240      	movs	r2, #64	; 0x40
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2241      	movs	r2, #65	; 0x41
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2242      	movs	r2, #66	; 0x42
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2243      	movs	r2, #67	; 0x43
 80062b2:	2101      	movs	r1, #1
 80062b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2244      	movs	r2, #68	; 0x44
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2245      	movs	r2, #69	; 0x45
 80062c2:	2101      	movs	r1, #1
 80062c4:	5499      	strb	r1, [r3, r2]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2246      	movs	r2, #70	; 0x46
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2247      	movs	r2, #71	; 0x47
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	223d      	movs	r2, #61	; 0x3d
 80062da:	2101      	movs	r1, #1
 80062dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b002      	add	sp, #8
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <HAL_TIM_PWM_Start+0x22>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	223e      	movs	r2, #62	; 0x3e
 800630c:	5c9b      	ldrb	r3, [r3, r2]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	1e5a      	subs	r2, r3, #1
 8006314:	4193      	sbcs	r3, r2
 8006316:	b2db      	uxtb	r3, r3
 8006318:	e037      	b.n	800638a <HAL_TIM_PWM_Start+0x92>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d108      	bne.n	8006332 <HAL_TIM_PWM_Start+0x3a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	223f      	movs	r2, #63	; 0x3f
 8006324:	5c9b      	ldrb	r3, [r3, r2]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	1e5a      	subs	r2, r3, #1
 800632c:	4193      	sbcs	r3, r2
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e02b      	b.n	800638a <HAL_TIM_PWM_Start+0x92>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d108      	bne.n	800634a <HAL_TIM_PWM_Start+0x52>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	4193      	sbcs	r3, r2
 8006346:	b2db      	uxtb	r3, r3
 8006348:	e01f      	b.n	800638a <HAL_TIM_PWM_Start+0x92>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b0c      	cmp	r3, #12
 800634e:	d108      	bne.n	8006362 <HAL_TIM_PWM_Start+0x6a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2241      	movs	r2, #65	; 0x41
 8006354:	5c9b      	ldrb	r3, [r3, r2]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	4193      	sbcs	r3, r2
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e013      	b.n	800638a <HAL_TIM_PWM_Start+0x92>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b10      	cmp	r3, #16
 8006366:	d108      	bne.n	800637a <HAL_TIM_PWM_Start+0x82>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2242      	movs	r2, #66	; 0x42
 800636c:	5c9b      	ldrb	r3, [r3, r2]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	1e5a      	subs	r2, r3, #1
 8006374:	4193      	sbcs	r3, r2
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e007      	b.n	800638a <HAL_TIM_PWM_Start+0x92>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2243      	movs	r2, #67	; 0x43
 800637e:	5c9b      	ldrb	r3, [r3, r2]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	4193      	sbcs	r3, r2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e081      	b.n	8006496 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0xaa>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	223e      	movs	r2, #62	; 0x3e
 800639c:	2102      	movs	r1, #2
 800639e:	5499      	strb	r1, [r3, r2]
 80063a0:	e023      	b.n	80063ea <HAL_TIM_PWM_Start+0xf2>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0xba>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	223f      	movs	r2, #63	; 0x3f
 80063ac:	2102      	movs	r1, #2
 80063ae:	5499      	strb	r1, [r3, r2]
 80063b0:	e01b      	b.n	80063ea <HAL_TIM_PWM_Start+0xf2>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0xca>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2240      	movs	r2, #64	; 0x40
 80063bc:	2102      	movs	r1, #2
 80063be:	5499      	strb	r1, [r3, r2]
 80063c0:	e013      	b.n	80063ea <HAL_TIM_PWM_Start+0xf2>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xda>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2241      	movs	r2, #65	; 0x41
 80063cc:	2102      	movs	r1, #2
 80063ce:	5499      	strb	r1, [r3, r2]
 80063d0:	e00b      	b.n	80063ea <HAL_TIM_PWM_Start+0xf2>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start+0xea>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2242      	movs	r2, #66	; 0x42
 80063dc:	2102      	movs	r1, #2
 80063de:	5499      	strb	r1, [r3, r2]
 80063e0:	e003      	b.n	80063ea <HAL_TIM_PWM_Start+0xf2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2243      	movs	r2, #67	; 0x43
 80063e6:	2102      	movs	r1, #2
 80063e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	0018      	movs	r0, r3
 80063f4:	f001 fb14 	bl	8007a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <HAL_TIM_PWM_Start+0x1a8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_TIM_PWM_Start+0x11e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <HAL_TIM_PWM_Start+0x1ac>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_TIM_PWM_Start+0x11e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <HAL_TIM_PWM_Start+0x1b0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <HAL_TIM_PWM_Start+0x122>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <HAL_TIM_PWM_Start+0x124>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	0209      	lsls	r1, r1, #8
 800642e:	430a      	orrs	r2, r1
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <HAL_TIM_PWM_Start+0x1a8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00a      	beq.n	8006452 <HAL_TIM_PWM_Start+0x15a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	05db      	lsls	r3, r3, #23
 8006444:	429a      	cmp	r2, r3
 8006446:	d004      	beq.n	8006452 <HAL_TIM_PWM_Start+0x15a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_TIM_PWM_Start+0x1b4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d116      	bne.n	8006480 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <HAL_TIM_PWM_Start+0x1b8>)
 800645a:	4013      	ands	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b06      	cmp	r3, #6
 8006462:	d016      	beq.n	8006492 <HAL_TIM_PWM_Start+0x19a>
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	025b      	lsls	r3, r3, #9
 800646a:	429a      	cmp	r2, r3
 800646c:	d011      	beq.n	8006492 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2101      	movs	r1, #1
 800647a:	430a      	orrs	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	e008      	b.n	8006492 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2101      	movs	r1, #1
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e000      	b.n	8006494 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006492:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	0018      	movs	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	b004      	add	sp, #16
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40014400 	.word	0x40014400
 80064a8:	40014800 	.word	0x40014800
 80064ac:	40000400 	.word	0x40000400
 80064b0:	00010007 	.word	0x00010007

080064b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	0018      	movs	r0, r3
 80064c8:	f001 faaa 	bl	8007a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a35      	ldr	r2, [pc, #212]	; (80065a8 <HAL_TIM_PWM_Stop+0xf4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIM_PWM_Stop+0x36>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a34      	ldr	r2, [pc, #208]	; (80065ac <HAL_TIM_PWM_Stop+0xf8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIM_PWM_Stop+0x36>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a32      	ldr	r2, [pc, #200]	; (80065b0 <HAL_TIM_PWM_Stop+0xfc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_PWM_Stop+0x3a>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <HAL_TIM_PWM_Stop+0x3c>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4a2e      	ldr	r2, [pc, #184]	; (80065b4 <HAL_TIM_PWM_Stop+0x100>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	d10d      	bne.n	800651c <HAL_TIM_PWM_Stop+0x68>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <HAL_TIM_PWM_Stop+0x104>)
 8006508:	4013      	ands	r3, r2
 800650a:	d107      	bne.n	800651c <HAL_TIM_PWM_Stop+0x68>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4929      	ldr	r1, [pc, #164]	; (80065bc <HAL_TIM_PWM_Stop+0x108>)
 8006518:	400a      	ands	r2, r1
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_TIM_PWM_Stop+0x100>)
 8006524:	4013      	ands	r3, r2
 8006526:	d10d      	bne.n	8006544 <HAL_TIM_PWM_Stop+0x90>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <HAL_TIM_PWM_Stop+0x104>)
 8006530:	4013      	ands	r3, r2
 8006532:	d107      	bne.n	8006544 <HAL_TIM_PWM_Stop+0x90>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2101      	movs	r1, #1
 8006540:	438a      	bics	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <HAL_TIM_PWM_Stop+0xa0>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	223e      	movs	r2, #62	; 0x3e
 800654e:	2101      	movs	r1, #1
 8006550:	5499      	strb	r1, [r3, r2]
 8006552:	e023      	b.n	800659c <HAL_TIM_PWM_Stop+0xe8>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d104      	bne.n	8006564 <HAL_TIM_PWM_Stop+0xb0>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	223f      	movs	r2, #63	; 0x3f
 800655e:	2101      	movs	r1, #1
 8006560:	5499      	strb	r1, [r3, r2]
 8006562:	e01b      	b.n	800659c <HAL_TIM_PWM_Stop+0xe8>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b08      	cmp	r3, #8
 8006568:	d104      	bne.n	8006574 <HAL_TIM_PWM_Stop+0xc0>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2240      	movs	r2, #64	; 0x40
 800656e:	2101      	movs	r1, #1
 8006570:	5499      	strb	r1, [r3, r2]
 8006572:	e013      	b.n	800659c <HAL_TIM_PWM_Stop+0xe8>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b0c      	cmp	r3, #12
 8006578:	d104      	bne.n	8006584 <HAL_TIM_PWM_Stop+0xd0>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2241      	movs	r2, #65	; 0x41
 800657e:	2101      	movs	r1, #1
 8006580:	5499      	strb	r1, [r3, r2]
 8006582:	e00b      	b.n	800659c <HAL_TIM_PWM_Stop+0xe8>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b10      	cmp	r3, #16
 8006588:	d104      	bne.n	8006594 <HAL_TIM_PWM_Stop+0xe0>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2242      	movs	r2, #66	; 0x42
 800658e:	2101      	movs	r1, #1
 8006590:	5499      	strb	r1, [r3, r2]
 8006592:	e003      	b.n	800659c <HAL_TIM_PWM_Stop+0xe8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2243      	movs	r2, #67	; 0x43
 8006598:	2101      	movs	r1, #1
 800659a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	0018      	movs	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b002      	add	sp, #8
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40014400 	.word	0x40014400
 80065b0:	40014800 	.word	0x40014800
 80065b4:	00001111 	.word	0x00001111
 80065b8:	00000444 	.word	0x00000444
 80065bc:	ffff7fff 	.word	0xffff7fff

080065c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e04a      	b.n	8006668 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	223d      	movs	r2, #61	; 0x3d
 80065d6:	5c9b      	ldrb	r3, [r3, r2]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	223c      	movs	r2, #60	; 0x3c
 80065e2:	2100      	movs	r1, #0
 80065e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f841 	bl	8006670 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	223d      	movs	r2, #61	; 0x3d
 80065f2:	2102      	movs	r1, #2
 80065f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	0019      	movs	r1, r3
 8006600:	0010      	movs	r0, r2
 8006602:	f000 fd33 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2248      	movs	r2, #72	; 0x48
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223e      	movs	r2, #62	; 0x3e
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	223f      	movs	r2, #63	; 0x3f
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2240      	movs	r2, #64	; 0x40
 8006622:	2101      	movs	r1, #1
 8006624:	5499      	strb	r1, [r3, r2]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2241      	movs	r2, #65	; 0x41
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2242      	movs	r2, #66	; 0x42
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2243      	movs	r2, #67	; 0x43
 800663a:	2101      	movs	r1, #1
 800663c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2244      	movs	r2, #68	; 0x44
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2245      	movs	r2, #69	; 0x45
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2246      	movs	r2, #70	; 0x46
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2247      	movs	r2, #71	; 0x47
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	223d      	movs	r2, #61	; 0x3d
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b002      	add	sp, #8
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b002      	add	sp, #8
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	230f      	movs	r3, #15
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_IC_Start_IT+0x22>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	223e      	movs	r2, #62	; 0x3e
 800669c:	5c9b      	ldrb	r3, [r3, r2]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e023      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x6a>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_IC_Start_IT+0x32>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	223f      	movs	r2, #63	; 0x3f
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	e01b      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x6a>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d104      	bne.n	80066c2 <HAL_TIM_IC_Start_IT+0x42>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	5c9b      	ldrb	r3, [r3, r2]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	e013      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x6a>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_IC_Start_IT+0x52>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2241      	movs	r2, #65	; 0x41
 80066cc:	5c9b      	ldrb	r3, [r3, r2]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	e00b      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x6a>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_IC_Start_IT+0x62>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2242      	movs	r2, #66	; 0x42
 80066dc:	5c9b      	ldrb	r3, [r3, r2]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	e003      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x6a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2243      	movs	r2, #67	; 0x43
 80066e6:	5c9b      	ldrb	r3, [r3, r2]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	220e      	movs	r2, #14
 80066ec:	18ba      	adds	r2, r7, r2
 80066ee:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <HAL_TIM_IC_Start_IT+0x80>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2244      	movs	r2, #68	; 0x44
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	e013      	b.n	8006728 <HAL_TIM_IC_Start_IT+0xa8>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b04      	cmp	r3, #4
 8006704:	d104      	bne.n	8006710 <HAL_TIM_IC_Start_IT+0x90>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2245      	movs	r2, #69	; 0x45
 800670a:	5c9b      	ldrb	r3, [r3, r2]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e00b      	b.n	8006728 <HAL_TIM_IC_Start_IT+0xa8>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b08      	cmp	r3, #8
 8006714:	d104      	bne.n	8006720 <HAL_TIM_IC_Start_IT+0xa0>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2246      	movs	r2, #70	; 0x46
 800671a:	5c9b      	ldrb	r3, [r3, r2]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e003      	b.n	8006728 <HAL_TIM_IC_Start_IT+0xa8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2247      	movs	r2, #71	; 0x47
 8006724:	5c9b      	ldrb	r3, [r3, r2]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	210d      	movs	r1, #13
 800672a:	187a      	adds	r2, r7, r1
 800672c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800672e:	230e      	movs	r3, #14
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d103      	bne.n	8006740 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006738:	187b      	adds	r3, r7, r1
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d001      	beq.n	8006744 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0c3      	b.n	80068cc <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_TIM_IC_Start_IT+0xd4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	223e      	movs	r2, #62	; 0x3e
 800674e:	2102      	movs	r1, #2
 8006750:	5499      	strb	r1, [r3, r2]
 8006752:	e023      	b.n	800679c <HAL_TIM_IC_Start_IT+0x11c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d104      	bne.n	8006764 <HAL_TIM_IC_Start_IT+0xe4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	223f      	movs	r2, #63	; 0x3f
 800675e:	2102      	movs	r1, #2
 8006760:	5499      	strb	r1, [r3, r2]
 8006762:	e01b      	b.n	800679c <HAL_TIM_IC_Start_IT+0x11c>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b08      	cmp	r3, #8
 8006768:	d104      	bne.n	8006774 <HAL_TIM_IC_Start_IT+0xf4>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2240      	movs	r2, #64	; 0x40
 800676e:	2102      	movs	r1, #2
 8006770:	5499      	strb	r1, [r3, r2]
 8006772:	e013      	b.n	800679c <HAL_TIM_IC_Start_IT+0x11c>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b0c      	cmp	r3, #12
 8006778:	d104      	bne.n	8006784 <HAL_TIM_IC_Start_IT+0x104>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2241      	movs	r2, #65	; 0x41
 800677e:	2102      	movs	r1, #2
 8006780:	5499      	strb	r1, [r3, r2]
 8006782:	e00b      	b.n	800679c <HAL_TIM_IC_Start_IT+0x11c>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b10      	cmp	r3, #16
 8006788:	d104      	bne.n	8006794 <HAL_TIM_IC_Start_IT+0x114>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2242      	movs	r2, #66	; 0x42
 800678e:	2102      	movs	r1, #2
 8006790:	5499      	strb	r1, [r3, r2]
 8006792:	e003      	b.n	800679c <HAL_TIM_IC_Start_IT+0x11c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2243      	movs	r2, #67	; 0x43
 8006798:	2102      	movs	r1, #2
 800679a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_TIM_IC_Start_IT+0x12c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2244      	movs	r2, #68	; 0x44
 80067a6:	2102      	movs	r1, #2
 80067a8:	5499      	strb	r1, [r3, r2]
 80067aa:	e013      	b.n	80067d4 <HAL_TIM_IC_Start_IT+0x154>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d104      	bne.n	80067bc <HAL_TIM_IC_Start_IT+0x13c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2245      	movs	r2, #69	; 0x45
 80067b6:	2102      	movs	r1, #2
 80067b8:	5499      	strb	r1, [r3, r2]
 80067ba:	e00b      	b.n	80067d4 <HAL_TIM_IC_Start_IT+0x154>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d104      	bne.n	80067cc <HAL_TIM_IC_Start_IT+0x14c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2246      	movs	r2, #70	; 0x46
 80067c6:	2102      	movs	r1, #2
 80067c8:	5499      	strb	r1, [r3, r2]
 80067ca:	e003      	b.n	80067d4 <HAL_TIM_IC_Start_IT+0x154>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2247      	movs	r2, #71	; 0x47
 80067d0:	2102      	movs	r1, #2
 80067d2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d02a      	beq.n	8006830 <HAL_TIM_IC_Start_IT+0x1b0>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d830      	bhi.n	8006842 <HAL_TIM_IC_Start_IT+0x1c2>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d01b      	beq.n	800681e <HAL_TIM_IC_Start_IT+0x19e>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d82a      	bhi.n	8006842 <HAL_TIM_IC_Start_IT+0x1c2>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IC_Start_IT+0x17a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d009      	beq.n	800680c <HAL_TIM_IC_Start_IT+0x18c>
 80067f8:	e023      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2102      	movs	r1, #2
 8006806:	430a      	orrs	r2, r1
 8006808:	60da      	str	r2, [r3, #12]
      break;
 800680a:	e01f      	b.n	800684c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2104      	movs	r1, #4
 8006818:	430a      	orrs	r2, r1
 800681a:	60da      	str	r2, [r3, #12]
      break;
 800681c:	e016      	b.n	800684c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2108      	movs	r1, #8
 800682a:	430a      	orrs	r2, r1
 800682c:	60da      	str	r2, [r3, #12]
      break;
 800682e:	e00d      	b.n	800684c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2110      	movs	r1, #16
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]
      break;
 8006840:	e004      	b.n	800684c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8006842:	230f      	movs	r3, #15
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
      break;
 800684a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800684c:	230f      	movs	r3, #15
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d137      	bne.n	80068c6 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	0018      	movs	r0, r3
 8006860:	f001 f8de 	bl	8007a20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <HAL_TIM_IC_Start_IT+0x254>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00a      	beq.n	8006884 <HAL_TIM_IC_Start_IT+0x204>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	05db      	lsls	r3, r3, #23
 8006876:	429a      	cmp	r2, r3
 8006878:	d004      	beq.n	8006884 <HAL_TIM_IC_Start_IT+0x204>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <HAL_TIM_IC_Start_IT+0x258>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d116      	bne.n	80068b2 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a14      	ldr	r2, [pc, #80]	; (80068dc <HAL_TIM_IC_Start_IT+0x25c>)
 800688c:	4013      	ands	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b06      	cmp	r3, #6
 8006894:	d016      	beq.n	80068c4 <HAL_TIM_IC_Start_IT+0x244>
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	025b      	lsls	r3, r3, #9
 800689c:	429a      	cmp	r2, r3
 800689e:	d011      	beq.n	80068c4 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2101      	movs	r1, #1
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b0:	e008      	b.n	80068c4 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2101      	movs	r1, #1
 80068be:	430a      	orrs	r2, r1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e000      	b.n	80068c6 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80068c6:	230f      	movs	r3, #15
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	781b      	ldrb	r3, [r3, #0]
}
 80068cc:	0018      	movs	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b004      	add	sp, #16
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40000400 	.word	0x40000400
 80068dc:	00010007 	.word	0x00010007

080068e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2202      	movs	r2, #2
 80068fc:	4013      	ands	r3, r2
 80068fe:	d021      	beq.n	8006944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2202      	movs	r2, #2
 8006904:	4013      	ands	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2203      	movs	r2, #3
 800690e:	4252      	negs	r2, r2
 8006910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	2203      	movs	r2, #3
 8006920:	4013      	ands	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f7fc f8d4 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 800692c:	e007      	b.n	800693e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fb8b 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0018      	movs	r0, r3
 800693a:	f7fc f8f5 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2204      	movs	r2, #4
 8006948:	4013      	ands	r3, r2
 800694a:	d022      	beq.n	8006992 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2204      	movs	r2, #4
 8006950:	4013      	ands	r3, r2
 8006952:	d01e      	beq.n	8006992 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2205      	movs	r2, #5
 800695a:	4252      	negs	r2, r2
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	23c0      	movs	r3, #192	; 0xc0
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4013      	ands	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f7fc f8ad 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 800697a:	e007      	b.n	800698c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	0018      	movs	r0, r3
 8006980:	f000 fb64 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0018      	movs	r0, r3
 8006988:	f7fc f8ce 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2208      	movs	r2, #8
 8006996:	4013      	ands	r3, r2
 8006998:	d021      	beq.n	80069de <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2208      	movs	r2, #8
 800699e:	4013      	ands	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2209      	movs	r2, #9
 80069a8:	4252      	negs	r2, r2
 80069aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2204      	movs	r2, #4
 80069b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	2203      	movs	r2, #3
 80069ba:	4013      	ands	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fc f887 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 80069c6:	e007      	b.n	80069d8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0018      	movs	r0, r3
 80069cc:	f000 fb3e 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7fc f8a8 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2210      	movs	r2, #16
 80069e2:	4013      	ands	r3, r2
 80069e4:	d022      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2210      	movs	r2, #16
 80069ea:	4013      	ands	r3, r2
 80069ec:	d01e      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2211      	movs	r2, #17
 80069f4:	4252      	negs	r2, r2
 80069f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2208      	movs	r2, #8
 80069fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	23c0      	movs	r3, #192	; 0xc0
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fc f860 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e007      	b.n	8006a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 fb17 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7fc f881 	bl	8002b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4013      	ands	r3, r2
 8006a32:	d00c      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d008      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4252      	negs	r2, r2
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7fc f865 	bl	8002b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2280      	movs	r2, #128	; 0x80
 8006a52:	4013      	ands	r3, r2
 8006a54:	d104      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	019b      	lsls	r3, r3, #6
 8006a5c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a5e:	d00b      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	4013      	ands	r3, r2
 8006a66:	d007      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIM_IRQHandler+0x208>)
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f001 f904 	bl	8007c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2280      	movs	r2, #128	; 0x80
 8006a86:	4013      	ands	r3, r2
 8006a88:	d007      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	; (8006aec <HAL_TIM_IRQHandler+0x20c>)
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	0018      	movs	r0, r3
 8006a96:	f001 f8fb 	bl	8007c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2240      	movs	r2, #64	; 0x40
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d00c      	beq.n	8006abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2240      	movs	r2, #64	; 0x40
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d008      	beq.n	8006abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2241      	movs	r2, #65	; 0x41
 8006ab0:	4252      	negs	r2, r2
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f000 fad0 	bl	800705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d00c      	beq.n	8006ade <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d008      	beq.n	8006ade <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2221      	movs	r2, #33	; 0x21
 8006ad2:	4252      	negs	r2, r2
 8006ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f001 f8c9 	bl	8007c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b004      	add	sp, #16
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	ffffdf7f 	.word	0xffffdf7f
 8006aec:	fffffeff 	.word	0xfffffeff

08006af0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2317      	movs	r3, #23
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	223c      	movs	r2, #60	; 0x3c
 8006b08:	5c9b      	ldrb	r3, [r3, r2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_IC_ConfigChannel+0x22>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e08c      	b.n	8006c2c <HAL_TIM_IC_ConfigChannel+0x13c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	223c      	movs	r2, #60	; 0x3c
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d11b      	bne.n	8006b58 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006b30:	f000 fdbc 	bl	80076ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	210c      	movs	r1, #12
 8006b40:	438a      	bics	r2, r1
 8006b42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6999      	ldr	r1, [r3, #24]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	619a      	str	r2, [r3, #24]
 8006b56:	e062      	b.n	8006c1e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d11c      	bne.n	8006b98 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006b6e:	f000 fe21 	bl	80077b4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	492d      	ldr	r1, [pc, #180]	; (8006c34 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006b7e:	400a      	ands	r2, r1
 8006b80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6999      	ldr	r1, [r3, #24]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	021a      	lsls	r2, r3, #8
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	619a      	str	r2, [r3, #24]
 8006b96:	e042      	b.n	8006c1e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d11b      	bne.n	8006bd6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006bae:	f000 fe75 	bl	800789c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	210c      	movs	r1, #12
 8006bbe:	438a      	bics	r2, r1
 8006bc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69d9      	ldr	r1, [r3, #28]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	61da      	str	r2, [r3, #28]
 8006bd4:	e023      	b.n	8006c1e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d11c      	bne.n	8006c16 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006bec:	f000 fe96 	bl	800791c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	490e      	ldr	r1, [pc, #56]	; (8006c34 <HAL_TIM_IC_ConfigChannel+0x144>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69d9      	ldr	r1, [r3, #28]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	021a      	lsls	r2, r3, #8
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	61da      	str	r2, [r3, #28]
 8006c14:	e003      	b.n	8006c1e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006c16:	2317      	movs	r3, #23
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	223c      	movs	r2, #60	; 0x3c
 8006c22:	2100      	movs	r1, #0
 8006c24:	5499      	strb	r1, [r3, r2]

  return status;
 8006c26:	2317      	movs	r3, #23
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	781b      	ldrb	r3, [r3, #0]
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b006      	add	sp, #24
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	fffff3ff 	.word	0xfffff3ff

08006c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2317      	movs	r3, #23
 8006c46:	18fb      	adds	r3, r7, r3
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	223c      	movs	r2, #60	; 0x3c
 8006c50:	5c9b      	ldrb	r3, [r3, r2]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0e5      	b.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	223c      	movs	r2, #60	; 0x3c
 8006c5e:	2101      	movs	r1, #1
 8006c60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b14      	cmp	r3, #20
 8006c66:	d900      	bls.n	8006c6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006c68:	e0d1      	b.n	8006e0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	009a      	lsls	r2, r3, #2
 8006c6e:	4b70      	ldr	r3, [pc, #448]	; (8006e30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006c70:	18d3      	adds	r3, r2, r3
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0011      	movs	r1, r2
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 fa78 	bl	8007174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2108      	movs	r1, #8
 8006c90:	430a      	orrs	r2, r1
 8006c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2104      	movs	r1, #4
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	619a      	str	r2, [r3, #24]
      break;
 8006cb6:	e0af      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	0011      	movs	r1, r2
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 fad7 	bl	8007274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	0109      	lsls	r1, r1, #4
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4954      	ldr	r1, [pc, #336]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006ce4:	400a      	ands	r2, r1
 8006ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	021a      	lsls	r2, r3, #8
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	619a      	str	r2, [r3, #24]
      break;
 8006cfc:	e08c      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0011      	movs	r1, r2
 8006d06:	0018      	movs	r0, r3
 8006d08:	f000 fb32 	bl	8007370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2108      	movs	r1, #8
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69da      	ldr	r2, [r3, #28]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2104      	movs	r1, #4
 8006d28:	438a      	bics	r2, r1
 8006d2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69d9      	ldr	r1, [r3, #28]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	61da      	str	r2, [r3, #28]
      break;
 8006d3e:	e06b      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	0011      	movs	r1, r2
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 fb93 	bl	8007474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2180      	movs	r1, #128	; 0x80
 8006d5a:	0109      	lsls	r1, r1, #4
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4932      	ldr	r1, [pc, #200]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69d9      	ldr	r1, [r3, #28]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	61da      	str	r2, [r3, #28]
      break;
 8006d84:	e048      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	0011      	movs	r1, r2
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 fbd4 	bl	800753c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2108      	movs	r1, #8
 8006da0:	430a      	orrs	r2, r1
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2104      	movs	r1, #4
 8006db0:	438a      	bics	r2, r1
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dc6:	e027      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	0011      	movs	r1, r2
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fc0d 	bl	80075f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2180      	movs	r1, #128	; 0x80
 8006de2:	0109      	lsls	r1, r1, #4
 8006de4:	430a      	orrs	r2, r1
 8006de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4910      	ldr	r1, [pc, #64]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e0c:	e004      	b.n	8006e18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006e0e:	2317      	movs	r3, #23
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	2201      	movs	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	223c      	movs	r2, #60	; 0x3c
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]

  return status;
 8006e20:	2317      	movs	r3, #23
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	781b      	ldrb	r3, [r3, #0]
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b006      	add	sp, #24
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	0800b7a8 	.word	0x0800b7a8
 8006e34:	fffffbff 	.word	0xfffffbff

08006e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	230f      	movs	r3, #15
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	223c      	movs	r2, #60	; 0x3c
 8006e4e:	5c9b      	ldrb	r3, [r3, r2]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_TIM_ConfigClockSource+0x20>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e0bc      	b.n	8006fd2 <HAL_TIM_ConfigClockSource+0x19a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	223c      	movs	r2, #60	; 0x3c
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	223d      	movs	r2, #61	; 0x3d
 8006e64:	2102      	movs	r1, #2
 8006e66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4a5a      	ldr	r2, [pc, #360]	; (8006fdc <HAL_TIM_ConfigClockSource+0x1a4>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4a59      	ldr	r2, [pc, #356]	; (8006fe0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	0192      	lsls	r2, r2, #6
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d040      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0xde>
 8006e94:	2280      	movs	r2, #128	; 0x80
 8006e96:	0192      	lsls	r2, r2, #6
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d900      	bls.n	8006e9e <HAL_TIM_ConfigClockSource+0x66>
 8006e9c:	e088      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006e9e:	2280      	movs	r2, #128	; 0x80
 8006ea0:	0152      	lsls	r2, r2, #5
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d100      	bne.n	8006ea8 <HAL_TIM_ConfigClockSource+0x70>
 8006ea6:	e088      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x182>
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	0152      	lsls	r2, r2, #5
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d900      	bls.n	8006eb2 <HAL_TIM_ConfigClockSource+0x7a>
 8006eb0:	e07e      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006eb2:	2b70      	cmp	r3, #112	; 0x70
 8006eb4:	d018      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0xb0>
 8006eb6:	d900      	bls.n	8006eba <HAL_TIM_ConfigClockSource+0x82>
 8006eb8:	e07a      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006eba:	2b60      	cmp	r3, #96	; 0x60
 8006ebc:	d04f      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x126>
 8006ebe:	d900      	bls.n	8006ec2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ec0:	e076      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006ec2:	2b50      	cmp	r3, #80	; 0x50
 8006ec4:	d03b      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x106>
 8006ec6:	d900      	bls.n	8006eca <HAL_TIM_ConfigClockSource+0x92>
 8006ec8:	e072      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d057      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x146>
 8006ece:	d900      	bls.n	8006ed2 <HAL_TIM_ConfigClockSource+0x9a>
 8006ed0:	e06e      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006ed2:	2b30      	cmp	r3, #48	; 0x30
 8006ed4:	d063      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x166>
 8006ed6:	d86b      	bhi.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d060      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x166>
 8006edc:	d868      	bhi.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d05d      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x166>
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d05b      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x166>
 8006ee6:	e063      	b.n	8006fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ef8:	f000 fd72 	bl	80079e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2277      	movs	r2, #119	; 0x77
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]
      break;
 8006f14:	e052      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f26:	f000 fd5b 	bl	80079e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2180      	movs	r1, #128	; 0x80
 8006f36:	01c9      	lsls	r1, r1, #7
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
      break;
 8006f3c:	e03e      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	001a      	movs	r2, r3
 8006f4c:	f000 fc04 	bl	8007758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2150      	movs	r1, #80	; 0x50
 8006f56:	0018      	movs	r0, r3
 8006f58:	f000 fd26 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8006f5c:	e02e      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6a:	001a      	movs	r2, r3
 8006f6c:	f000 fc64 	bl	8007838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2160      	movs	r1, #96	; 0x60
 8006f76:	0018      	movs	r0, r3
 8006f78:	f000 fd16 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8006f7c:	e01e      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	001a      	movs	r2, r3
 8006f8c:	f000 fbe4 	bl	8007758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2140      	movs	r1, #64	; 0x40
 8006f96:	0018      	movs	r0, r3
 8006f98:	f000 fd06 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e00e      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	0010      	movs	r0, r2
 8006faa:	f000 fcfd 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8006fae:	e005      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006fb0:	230f      	movs	r3, #15
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
      break;
 8006fb8:	e000      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006fba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	223d      	movs	r2, #61	; 0x3d
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	223c      	movs	r2, #60	; 0x3c
 8006fc8:	2100      	movs	r1, #0
 8006fca:	5499      	strb	r1, [r3, r2]

  return status;
 8006fcc:	230f      	movs	r3, #15
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	ffceff88 	.word	0xffceff88
 8006fe0:	ffff00ff 	.word	0xffff00ff

08006fe4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b0c      	cmp	r3, #12
 8006ff6:	d01e      	beq.n	8007036 <HAL_TIM_ReadCapturedValue+0x52>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d820      	bhi.n	8007040 <HAL_TIM_ReadCapturedValue+0x5c>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d013      	beq.n	800702c <HAL_TIM_ReadCapturedValue+0x48>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b08      	cmp	r3, #8
 8007008:	d81a      	bhi.n	8007040 <HAL_TIM_ReadCapturedValue+0x5c>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_TIM_ReadCapturedValue+0x34>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b04      	cmp	r3, #4
 8007014:	d005      	beq.n	8007022 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8007016:	e013      	b.n	8007040 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	60fb      	str	r3, [r7, #12]
      break;
 8007020:	e00f      	b.n	8007042 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	60fb      	str	r3, [r7, #12]
      break;
 800702a:	e00a      	b.n	8007042 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	60fb      	str	r3, [r7, #12]
      break;
 8007034:	e005      	b.n	8007042 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	60fb      	str	r3, [r7, #12]
      break;
 800703e:	e000      	b.n	8007042 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007040:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8007042:	68fb      	ldr	r3, [r7, #12]
}
 8007044:	0018      	movs	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	b004      	add	sp, #16
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007054:	46c0      	nop			; (mov r8, r8)
 8007056:	46bd      	mov	sp, r7
 8007058:	b002      	add	sp, #8
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	46bd      	mov	sp, r7
 8007068:	b002      	add	sp, #8
 800706a:	bd80      	pop	{r7, pc}

0800706c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a37      	ldr	r2, [pc, #220]	; (800715c <TIM_Base_SetConfig+0xf0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d008      	beq.n	8007096 <TIM_Base_SetConfig+0x2a>
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	05db      	lsls	r3, r3, #23
 800708a:	429a      	cmp	r2, r3
 800708c:	d003      	beq.n	8007096 <TIM_Base_SetConfig+0x2a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a33      	ldr	r2, [pc, #204]	; (8007160 <TIM_Base_SetConfig+0xf4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2270      	movs	r2, #112	; 0x70
 800709a:	4393      	bics	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	; (800715c <TIM_Base_SetConfig+0xf0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d014      	beq.n	80070da <TIM_Base_SetConfig+0x6e>
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	05db      	lsls	r3, r3, #23
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d00f      	beq.n	80070da <TIM_Base_SetConfig+0x6e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a28      	ldr	r2, [pc, #160]	; (8007160 <TIM_Base_SetConfig+0xf4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00b      	beq.n	80070da <TIM_Base_SetConfig+0x6e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a27      	ldr	r2, [pc, #156]	; (8007164 <TIM_Base_SetConfig+0xf8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d007      	beq.n	80070da <TIM_Base_SetConfig+0x6e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a26      	ldr	r2, [pc, #152]	; (8007168 <TIM_Base_SetConfig+0xfc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_Base_SetConfig+0x6e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a25      	ldr	r2, [pc, #148]	; (800716c <TIM_Base_SetConfig+0x100>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d108      	bne.n	80070ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <TIM_Base_SetConfig+0x104>)
 80070de:	4013      	ands	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2280      	movs	r2, #128	; 0x80
 80070f0:	4393      	bics	r3, r2
 80070f2:	001a      	movs	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a11      	ldr	r2, [pc, #68]	; (800715c <TIM_Base_SetConfig+0xf0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d007      	beq.n	800712a <TIM_Base_SetConfig+0xbe>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a12      	ldr	r2, [pc, #72]	; (8007168 <TIM_Base_SetConfig+0xfc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_Base_SetConfig+0xbe>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a11      	ldr	r2, [pc, #68]	; (800716c <TIM_Base_SetConfig+0x100>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d103      	bne.n	8007132 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2201      	movs	r2, #1
 800713e:	4013      	ands	r3, r2
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2201      	movs	r2, #1
 800714a:	4393      	bics	r3, r2
 800714c:	001a      	movs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]
  }
}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b004      	add	sp, #16
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40000400 	.word	0x40000400
 8007164:	40002000 	.word	0x40002000
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800
 8007170:	fffffcff 	.word	0xfffffcff

08007174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	2201      	movs	r2, #1
 800718a:	4393      	bics	r3, r2
 800718c:	001a      	movs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4a2e      	ldr	r2, [pc, #184]	; (800725c <TIM_OC1_SetConfig+0xe8>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2203      	movs	r2, #3
 80071aa:	4393      	bics	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2202      	movs	r2, #2
 80071bc:	4393      	bics	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a24      	ldr	r2, [pc, #144]	; (8007260 <TIM_OC1_SetConfig+0xec>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_OC1_SetConfig+0x6e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a23      	ldr	r2, [pc, #140]	; (8007264 <TIM_OC1_SetConfig+0xf0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC1_SetConfig+0x6e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a22      	ldr	r2, [pc, #136]	; (8007268 <TIM_OC1_SetConfig+0xf4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10c      	bne.n	80071fc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2208      	movs	r2, #8
 80071e6:	4393      	bics	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2204      	movs	r2, #4
 80071f8:	4393      	bics	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a18      	ldr	r2, [pc, #96]	; (8007260 <TIM_OC1_SetConfig+0xec>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d007      	beq.n	8007214 <TIM_OC1_SetConfig+0xa0>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a17      	ldr	r2, [pc, #92]	; (8007264 <TIM_OC1_SetConfig+0xf0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC1_SetConfig+0xa0>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a16      	ldr	r2, [pc, #88]	; (8007268 <TIM_OC1_SetConfig+0xf4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d111      	bne.n	8007238 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4a15      	ldr	r2, [pc, #84]	; (800726c <TIM_OC1_SetConfig+0xf8>)
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4a14      	ldr	r2, [pc, #80]	; (8007270 <TIM_OC1_SetConfig+0xfc>)
 8007220:	4013      	ands	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	b006      	add	sp, #24
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	fffeff8f 	.word	0xfffeff8f
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800
 800726c:	fffffeff 	.word	0xfffffeff
 8007270:	fffffdff 	.word	0xfffffdff

08007274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	2210      	movs	r2, #16
 800728a:	4393      	bics	r3, r2
 800728c:	001a      	movs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a2c      	ldr	r2, [pc, #176]	; (8007354 <TIM_OC2_SetConfig+0xe0>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <TIM_OC2_SetConfig+0xe4>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2220      	movs	r2, #32
 80072be:	4393      	bics	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a22      	ldr	r2, [pc, #136]	; (800735c <TIM_OC2_SetConfig+0xe8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d10d      	bne.n	80072f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2280      	movs	r2, #128	; 0x80
 80072da:	4393      	bics	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2240      	movs	r2, #64	; 0x40
 80072ee:	4393      	bics	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a19      	ldr	r2, [pc, #100]	; (800735c <TIM_OC2_SetConfig+0xe8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_OC2_SetConfig+0x96>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a18      	ldr	r2, [pc, #96]	; (8007360 <TIM_OC2_SetConfig+0xec>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC2_SetConfig+0x96>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC2_SetConfig+0xf0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d113      	bne.n	8007332 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4a16      	ldr	r2, [pc, #88]	; (8007368 <TIM_OC2_SetConfig+0xf4>)
 800730e:	4013      	ands	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4a15      	ldr	r2, [pc, #84]	; (800736c <TIM_OC2_SetConfig+0xf8>)
 8007316:	4013      	ands	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	b006      	add	sp, #24
 8007352:	bd80      	pop	{r7, pc}
 8007354:	feff8fff 	.word	0xfeff8fff
 8007358:	fffffcff 	.word	0xfffffcff
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40014400 	.word	0x40014400
 8007364:	40014800 	.word	0x40014800
 8007368:	fffffbff 	.word	0xfffffbff
 800736c:	fffff7ff 	.word	0xfffff7ff

08007370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	4a31      	ldr	r2, [pc, #196]	; (800744c <TIM_OC3_SetConfig+0xdc>)
 8007386:	401a      	ands	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <TIM_OC3_SetConfig+0xe0>)
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2203      	movs	r2, #3
 80073a4:	4393      	bics	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4a27      	ldr	r2, [pc, #156]	; (8007454 <TIM_OC3_SetConfig+0xe4>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a23      	ldr	r2, [pc, #140]	; (8007458 <TIM_OC3_SetConfig+0xe8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10d      	bne.n	80073ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <TIM_OC3_SetConfig+0xec>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <TIM_OC3_SetConfig+0xf0>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <TIM_OC3_SetConfig+0xe8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <TIM_OC3_SetConfig+0x92>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1b      	ldr	r2, [pc, #108]	; (8007464 <TIM_OC3_SetConfig+0xf4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC3_SetConfig+0x92>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <TIM_OC3_SetConfig+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d113      	bne.n	800742a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <TIM_OC3_SetConfig+0xfc>)
 8007406:	4013      	ands	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4a18      	ldr	r2, [pc, #96]	; (8007470 <TIM_OC3_SetConfig+0x100>)
 800740e:	4013      	ands	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	46c0      	nop			; (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b006      	add	sp, #24
 800744a:	bd80      	pop	{r7, pc}
 800744c:	fffffeff 	.word	0xfffffeff
 8007450:	fffeff8f 	.word	0xfffeff8f
 8007454:	fffffdff 	.word	0xfffffdff
 8007458:	40012c00 	.word	0x40012c00
 800745c:	fffff7ff 	.word	0xfffff7ff
 8007460:	fffffbff 	.word	0xfffffbff
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800
 800746c:	ffffefff 	.word	0xffffefff
 8007470:	ffffdfff 	.word	0xffffdfff

08007474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	4a24      	ldr	r2, [pc, #144]	; (800751c <TIM_OC4_SetConfig+0xa8>)
 800748a:	401a      	ands	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a20      	ldr	r2, [pc, #128]	; (8007520 <TIM_OC4_SetConfig+0xac>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a1f      	ldr	r2, [pc, #124]	; (8007524 <TIM_OC4_SetConfig+0xb0>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <TIM_OC4_SetConfig+0xb4>)
 80074bc:	4013      	ands	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	031b      	lsls	r3, r3, #12
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a17      	ldr	r2, [pc, #92]	; (800752c <TIM_OC4_SetConfig+0xb8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_OC4_SetConfig+0x70>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a16      	ldr	r2, [pc, #88]	; (8007530 <TIM_OC4_SetConfig+0xbc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_OC4_SetConfig+0x70>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <TIM_OC4_SetConfig+0xc0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d109      	bne.n	80074f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <TIM_OC4_SetConfig+0xc4>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	019b      	lsls	r3, r3, #6
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	46bd      	mov	sp, r7
 8007516:	b006      	add	sp, #24
 8007518:	bd80      	pop	{r7, pc}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	ffffefff 	.word	0xffffefff
 8007520:	feff8fff 	.word	0xfeff8fff
 8007524:	fffffcff 	.word	0xfffffcff
 8007528:	ffffdfff 	.word	0xffffdfff
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800
 8007538:	ffffbfff 	.word	0xffffbfff

0800753c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <TIM_OC5_SetConfig+0x9c>)
 8007552:	401a      	ands	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <TIM_OC5_SetConfig+0xa0>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <TIM_OC5_SetConfig+0xa4>)
 800757a:	4013      	ands	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	041b      	lsls	r3, r3, #16
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <TIM_OC5_SetConfig+0xa8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d007      	beq.n	80075a2 <TIM_OC5_SetConfig+0x66>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <TIM_OC5_SetConfig+0xac>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d003      	beq.n	80075a2 <TIM_OC5_SetConfig+0x66>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a13      	ldr	r2, [pc, #76]	; (80075ec <TIM_OC5_SetConfig+0xb0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d109      	bne.n	80075b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <TIM_OC5_SetConfig+0x9c>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	621a      	str	r2, [r3, #32]
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b006      	add	sp, #24
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	fffeffff 	.word	0xfffeffff
 80075dc:	fffeff8f 	.word	0xfffeff8f
 80075e0:	fffdffff 	.word	0xfffdffff
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800

080075f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <TIM_OC6_SetConfig+0xa0>)
 8007606:	401a      	ands	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <TIM_OC6_SetConfig+0xa4>)
 800761c:	4013      	ands	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	4a1a      	ldr	r2, [pc, #104]	; (8007698 <TIM_OC6_SetConfig+0xa8>)
 8007630:	4013      	ands	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	051b      	lsls	r3, r3, #20
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a16      	ldr	r2, [pc, #88]	; (800769c <TIM_OC6_SetConfig+0xac>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_OC6_SetConfig+0x68>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <TIM_OC6_SetConfig+0xb0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC6_SetConfig+0x68>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a14      	ldr	r2, [pc, #80]	; (80076a4 <TIM_OC6_SetConfig+0xb4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d109      	bne.n	800766c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4a13      	ldr	r2, [pc, #76]	; (80076a8 <TIM_OC6_SetConfig+0xb8>)
 800765c:	4013      	ands	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b006      	add	sp, #24
 800768c:	bd80      	pop	{r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	ffefffff 	.word	0xffefffff
 8007694:	feff8fff 	.word	0xfeff8fff
 8007698:	ffdfffff 	.word	0xffdfffff
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800
 80076a8:	fffbffff 	.word	0xfffbffff

080076ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	2201      	movs	r2, #1
 80076c6:	4393      	bics	r3, r2
 80076c8:	001a      	movs	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4a1e      	ldr	r2, [pc, #120]	; (8007750 <TIM_TI1_SetConfig+0xa4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d008      	beq.n	80076ee <TIM_TI1_SetConfig+0x42>
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	05db      	lsls	r3, r3, #23
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d003      	beq.n	80076ee <TIM_TI1_SetConfig+0x42>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <TIM_TI1_SetConfig+0xa8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <TIM_TI1_SetConfig+0x46>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <TIM_TI1_SetConfig+0x48>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2203      	movs	r2, #3
 80076fc:	4393      	bics	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e003      	b.n	8007712 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2201      	movs	r2, #1
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	22f0      	movs	r2, #240	; 0xf0
 8007716:	4393      	bics	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	4013      	ands	r3, r2
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	220a      	movs	r2, #10
 800772c:	4393      	bics	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	220a      	movs	r2, #10
 8007734:	4013      	ands	r3, r2
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	621a      	str	r2, [r3, #32]
}
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	46bd      	mov	sp, r7
 800774c:	b006      	add	sp, #24
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40012c00 	.word	0x40012c00
 8007754:	40000400 	.word	0x40000400

08007758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	2201      	movs	r2, #1
 8007770:	4393      	bics	r3, r2
 8007772:	001a      	movs	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	22f0      	movs	r2, #240	; 0xf0
 8007782:	4393      	bics	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	220a      	movs	r2, #10
 8007794:	4393      	bics	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	621a      	str	r2, [r3, #32]
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b006      	add	sp, #24
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	2210      	movs	r2, #16
 80077ce:	4393      	bics	r3, r2
 80077d0:	001a      	movs	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4a14      	ldr	r2, [pc, #80]	; (8007830 <TIM_TI2_SetConfig+0x7c>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4a10      	ldr	r2, [pc, #64]	; (8007834 <TIM_TI2_SetConfig+0x80>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	031b      	lsls	r3, r3, #12
 80077fa:	041b      	lsls	r3, r3, #16
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	22a0      	movs	r2, #160	; 0xa0
 8007808:	4393      	bics	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	22a0      	movs	r2, #160	; 0xa0
 8007812:	4013      	ands	r3, r2
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b006      	add	sp, #24
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	fffffcff 	.word	0xfffffcff
 8007834:	ffff0fff 	.word	0xffff0fff

08007838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	2210      	movs	r2, #16
 8007850:	4393      	bics	r3, r2
 8007852:	001a      	movs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4a0d      	ldr	r2, [pc, #52]	; (8007898 <TIM_TI2_ConfigInputStage+0x60>)
 8007862:	4013      	ands	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	031b      	lsls	r3, r3, #12
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	22a0      	movs	r2, #160	; 0xa0
 8007874:	4393      	bics	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	46bd      	mov	sp, r7
 8007892:	b006      	add	sp, #24
 8007894:	bd80      	pop	{r7, pc}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	ffff0fff 	.word	0xffff0fff

0800789c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	4a17      	ldr	r2, [pc, #92]	; (8007914 <TIM_TI3_SetConfig+0x78>)
 80078b6:	401a      	ands	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2203      	movs	r2, #3
 80078c6:	4393      	bics	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	22f0      	movs	r2, #240	; 0xf0
 80078d6:	4393      	bics	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	22ff      	movs	r2, #255	; 0xff
 80078e0:	4013      	ands	r3, r2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4a0b      	ldr	r2, [pc, #44]	; (8007918 <TIM_TI3_SetConfig+0x7c>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	021a      	lsls	r2, r3, #8
 80078f4:	23a0      	movs	r3, #160	; 0xa0
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4013      	ands	r3, r2
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	621a      	str	r2, [r3, #32]
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b006      	add	sp, #24
 8007912:	bd80      	pop	{r7, pc}
 8007914:	fffffeff 	.word	0xfffffeff
 8007918:	fffff5ff 	.word	0xfffff5ff

0800791c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	4a18      	ldr	r2, [pc, #96]	; (8007998 <TIM_TI4_SetConfig+0x7c>)
 8007936:	401a      	ands	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4a15      	ldr	r2, [pc, #84]	; (800799c <TIM_TI4_SetConfig+0x80>)
 8007946:	4013      	ands	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <TIM_TI4_SetConfig+0x84>)
 8007958:	4013      	ands	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	031b      	lsls	r3, r3, #12
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	0c1b      	lsrs	r3, r3, #16
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <TIM_TI4_SetConfig+0x88>)
 800796e:	4013      	ands	r3, r2
 8007970:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	031a      	lsls	r2, r3, #12
 8007976:	23a0      	movs	r3, #160	; 0xa0
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4013      	ands	r3, r2
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	46bd      	mov	sp, r7
 8007992:	b006      	add	sp, #24
 8007994:	bd80      	pop	{r7, pc}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	ffffefff 	.word	0xffffefff
 800799c:	fffffcff 	.word	0xfffffcff
 80079a0:	ffff0fff 	.word	0xffff0fff
 80079a4:	ffff5fff 	.word	0xffff5fff

080079a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4a08      	ldr	r2, [pc, #32]	; (80079dc <TIM_ITRx_SetConfig+0x34>)
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	2207      	movs	r2, #7
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	609a      	str	r2, [r3, #8]
}
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b004      	add	sp, #16
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	ffcfff8f 	.word	0xffcfff8f

080079e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <TIM_ETR_SetConfig+0x3c>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	021a      	lsls	r2, r3, #8
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	609a      	str	r2, [r3, #8]
}
 8007a14:	46c0      	nop			; (mov r8, r8)
 8007a16:	46bd      	mov	sp, r7
 8007a18:	b006      	add	sp, #24
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	ffff00ff 	.word	0xffff00ff

08007a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	221f      	movs	r2, #31
 8007a30:	4013      	ands	r3, r2
 8007a32:	2201      	movs	r2, #1
 8007a34:	409a      	lsls	r2, r3
 8007a36:	0013      	movs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	43d2      	mvns	r2, r2
 8007a42:	401a      	ands	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1a      	ldr	r2, [r3, #32]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	211f      	movs	r1, #31
 8007a50:	400b      	ands	r3, r1
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4099      	lsls	r1, r3
 8007a56:	000b      	movs	r3, r1
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b006      	add	sp, #24
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	223c      	movs	r2, #60	; 0x3c
 8007a76:	5c9b      	ldrb	r3, [r3, r2]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e050      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	223c      	movs	r2, #60	; 0x3c
 8007a84:	2101      	movs	r1, #1
 8007a86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	223d      	movs	r2, #61	; 0x3d
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d108      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2270      	movs	r2, #112	; 0x70
 8007ac0:	4393      	bics	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00a      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2380      	movs	r3, #128	; 0x80
 8007ae6:	05db      	lsls	r3, r3, #23
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a10      	ldr	r2, [pc, #64]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2280      	movs	r2, #128	; 0x80
 8007afa:	4393      	bics	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	223d      	movs	r2, #61	; 0x3d
 8007b14:	2101      	movs	r1, #1
 8007b16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	223c      	movs	r2, #60	; 0x3c
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	0018      	movs	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b004      	add	sp, #16
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	40012c00 	.word	0x40012c00
 8007b30:	ff0fffff 	.word	0xff0fffff
 8007b34:	40000400 	.word	0x40000400

08007b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	223c      	movs	r2, #60	; 0x3c
 8007b4a:	5c9b      	ldrb	r3, [r3, r2]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e06f      	b.n	8007c34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	223c      	movs	r2, #60	; 0x3c
 8007b58:	2101      	movs	r1, #1
 8007b5a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	22ff      	movs	r2, #255	; 0xff
 8007b60:	4393      	bics	r3, r2
 8007b62:	001a      	movs	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a33      	ldr	r2, [pc, #204]	; (8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007b70:	401a      	ands	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a30      	ldr	r2, [pc, #192]	; (8007c40 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007b7e:	401a      	ands	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a2e      	ldr	r2, [pc, #184]	; (8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8007b8c:	401a      	ands	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a2b      	ldr	r2, [pc, #172]	; (8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007b9a:	401a      	ands	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007ba8:	401a      	ands	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4a26      	ldr	r2, [pc, #152]	; (8007c50 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a24      	ldr	r2, [pc, #144]	; (8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007bc4:	401a      	ands	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007bd4:	401a      	ands	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d11c      	bne.n	8007c22 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007bec:	401a      	ands	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	051b      	lsls	r3, r3, #20
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007bfc:	401a      	ands	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007c0a:	401a      	ands	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007c18:	401a      	ands	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	223c      	movs	r2, #60	; 0x3c
 8007c2e:	2100      	movs	r1, #0
 8007c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	0018      	movs	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b004      	add	sp, #16
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	fffffcff 	.word	0xfffffcff
 8007c40:	fffffbff 	.word	0xfffffbff
 8007c44:	fffff7ff 	.word	0xfffff7ff
 8007c48:	ffffefff 	.word	0xffffefff
 8007c4c:	ffffdfff 	.word	0xffffdfff
 8007c50:	ffffbfff 	.word	0xffffbfff
 8007c54:	fff0ffff 	.word	0xfff0ffff
 8007c58:	efffffff 	.word	0xefffffff
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	ff0fffff 	.word	0xff0fffff
 8007c64:	feffffff 	.word	0xfeffffff
 8007c68:	fdffffff 	.word	0xfdffffff
 8007c6c:	dfffffff 	.word	0xdfffffff

08007c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c98:	46c0      	nop			; (mov r8, r8)
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b002      	add	sp, #8
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e046      	b.n	8007d40 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2288      	movs	r2, #136	; 0x88
 8007cb6:	589b      	ldr	r3, [r3, r2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d107      	bne.n	8007ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2284      	movs	r2, #132	; 0x84
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f7fb fd60 	bl	800378c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2288      	movs	r2, #136	; 0x88
 8007cd0:	2124      	movs	r1, #36	; 0x24
 8007cd2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	438a      	bics	r2, r1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f000 fb48 	bl	8008384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f000 f8cc 	bl	8007e94 <UART_SetConfig>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e01c      	b.n	8007d40 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	490d      	ldr	r1, [pc, #52]	; (8007d48 <HAL_UART_Init+0xa8>)
 8007d12:	400a      	ands	r2, r1
 8007d14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	212a      	movs	r1, #42	; 0x2a
 8007d22:	438a      	bics	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2101      	movs	r1, #1
 8007d32:	430a      	orrs	r2, r1
 8007d34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 fbd7 	bl	80084ec <UART_CheckIdleState>
 8007d3e:	0003      	movs	r3, r0
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	b002      	add	sp, #8
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	ffffb7ff 	.word	0xffffb7ff

08007d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	1dbb      	adds	r3, r7, #6
 8007d5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2288      	movs	r2, #136	; 0x88
 8007d60:	589b      	ldr	r3, [r3, r2]
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d000      	beq.n	8007d68 <HAL_UART_Transmit+0x1c>
 8007d66:	e090      	b.n	8007e8a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_UART_Transmit+0x2a>
 8007d6e:	1dbb      	adds	r3, r7, #6
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e088      	b.n	8007e8c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	015b      	lsls	r3, r3, #5
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d109      	bne.n	8007d9a <HAL_UART_Transmit+0x4e>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2201      	movs	r2, #1
 8007d92:	4013      	ands	r3, r2
 8007d94:	d001      	beq.n	8007d9a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e078      	b.n	8007e8c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2290      	movs	r2, #144	; 0x90
 8007d9e:	2100      	movs	r1, #0
 8007da0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2288      	movs	r2, #136	; 0x88
 8007da6:	2121      	movs	r1, #33	; 0x21
 8007da8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007daa:	f7fb fef7 	bl	8003b9c <HAL_GetTick>
 8007dae:	0003      	movs	r3, r0
 8007db0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1dba      	adds	r2, r7, #6
 8007db6:	2154      	movs	r1, #84	; 0x54
 8007db8:	8812      	ldrh	r2, [r2, #0]
 8007dba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1dba      	adds	r2, r7, #6
 8007dc0:	2156      	movs	r1, #86	; 0x56
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	015b      	lsls	r3, r3, #5
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d108      	bne.n	8007de4 <HAL_UART_Transmit+0x98>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e003      	b.n	8007dec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dec:	e030      	b.n	8007e50 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	0013      	movs	r3, r2
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	f000 fc20 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8007e00:	1e03      	subs	r3, r0, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2288      	movs	r2, #136	; 0x88
 8007e08:	2120      	movs	r1, #32
 8007e0a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e03d      	b.n	8007e8c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	05d2      	lsls	r2, r2, #23
 8007e22:	0dd2      	lsrs	r2, r2, #23
 8007e24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	3302      	adds	r3, #2
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	e007      	b.n	8007e3e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2256      	movs	r2, #86	; 0x56
 8007e42:	5a9b      	ldrh	r3, [r3, r2]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b299      	uxth	r1, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2256      	movs	r2, #86	; 0x56
 8007e4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2256      	movs	r2, #86	; 0x56
 8007e54:	5a9b      	ldrh	r3, [r3, r2]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1c8      	bne.n	8007dee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	0013      	movs	r3, r2
 8007e66:	2200      	movs	r2, #0
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	f000 fbe9 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8007e6e:	1e03      	subs	r3, r0, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2288      	movs	r2, #136	; 0x88
 8007e76:	2120      	movs	r1, #32
 8007e78:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e006      	b.n	8007e8c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2288      	movs	r2, #136	; 0x88
 8007e82:	2120      	movs	r1, #32
 8007e84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e000      	b.n	8007e8c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007e8a:	2302      	movs	r3, #2
  }
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b008      	add	sp, #32
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e94:	b5b0      	push	{r4, r5, r7, lr}
 8007e96:	b090      	sub	sp, #64	; 0x40
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e9c:	231a      	movs	r3, #26
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	189b      	adds	r3, r3, r2
 8007ea2:	19db      	adds	r3, r3, r7
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4ac4      	ldr	r2, [pc, #784]	; (80081d8 <UART_SetConfig+0x344>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	0019      	movs	r1, r3
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4abf      	ldr	r2, [pc, #764]	; (80081dc <UART_SetConfig+0x348>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	68d9      	ldr	r1, [r3, #12]
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	0003      	movs	r3, r0
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4ab9      	ldr	r2, [pc, #740]	; (80081e0 <UART_SetConfig+0x34c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f06:	4313      	orrs	r3, r2
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4ab4      	ldr	r2, [pc, #720]	; (80081e4 <UART_SetConfig+0x350>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	0019      	movs	r1, r3
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	220f      	movs	r2, #15
 8007f28:	4393      	bics	r3, r2
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	0003      	movs	r3, r0
 8007f36:	430b      	orrs	r3, r1
 8007f38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4aaa      	ldr	r2, [pc, #680]	; (80081e8 <UART_SetConfig+0x354>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d131      	bne.n	8007fa8 <UART_SetConfig+0x114>
 8007f44:	4ba9      	ldr	r3, [pc, #676]	; (80081ec <UART_SetConfig+0x358>)
 8007f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f48:	2203      	movs	r2, #3
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d01d      	beq.n	8007f8c <UART_SetConfig+0xf8>
 8007f50:	d823      	bhi.n	8007f9a <UART_SetConfig+0x106>
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d00c      	beq.n	8007f70 <UART_SetConfig+0xdc>
 8007f56:	d820      	bhi.n	8007f9a <UART_SetConfig+0x106>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <UART_SetConfig+0xce>
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d00e      	beq.n	8007f7e <UART_SetConfig+0xea>
 8007f60:	e01b      	b.n	8007f9a <UART_SetConfig+0x106>
 8007f62:	231b      	movs	r3, #27
 8007f64:	2220      	movs	r2, #32
 8007f66:	189b      	adds	r3, r3, r2
 8007f68:	19db      	adds	r3, r3, r7
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	e071      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007f70:	231b      	movs	r3, #27
 8007f72:	2220      	movs	r2, #32
 8007f74:	189b      	adds	r3, r3, r2
 8007f76:	19db      	adds	r3, r3, r7
 8007f78:	2202      	movs	r2, #2
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e06a      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007f7e:	231b      	movs	r3, #27
 8007f80:	2220      	movs	r2, #32
 8007f82:	189b      	adds	r3, r3, r2
 8007f84:	19db      	adds	r3, r3, r7
 8007f86:	2204      	movs	r2, #4
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	e063      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007f8c:	231b      	movs	r3, #27
 8007f8e:	2220      	movs	r2, #32
 8007f90:	189b      	adds	r3, r3, r2
 8007f92:	19db      	adds	r3, r3, r7
 8007f94:	2208      	movs	r2, #8
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	e05c      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007f9a:	231b      	movs	r3, #27
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	189b      	adds	r3, r3, r2
 8007fa0:	19db      	adds	r3, r3, r7
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e055      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a90      	ldr	r2, [pc, #576]	; (80081f0 <UART_SetConfig+0x35c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d106      	bne.n	8007fc0 <UART_SetConfig+0x12c>
 8007fb2:	231b      	movs	r3, #27
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	189b      	adds	r3, r3, r2
 8007fb8:	19db      	adds	r3, r3, r7
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e049      	b.n	8008054 <UART_SetConfig+0x1c0>
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a86      	ldr	r2, [pc, #536]	; (80081e0 <UART_SetConfig+0x34c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d13e      	bne.n	8008048 <UART_SetConfig+0x1b4>
 8007fca:	4b88      	ldr	r3, [pc, #544]	; (80081ec <UART_SetConfig+0x358>)
 8007fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fce:	23c0      	movs	r3, #192	; 0xc0
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	22c0      	movs	r2, #192	; 0xc0
 8007fd6:	0112      	lsls	r2, r2, #4
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d027      	beq.n	800802c <UART_SetConfig+0x198>
 8007fdc:	22c0      	movs	r2, #192	; 0xc0
 8007fde:	0112      	lsls	r2, r2, #4
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d82a      	bhi.n	800803a <UART_SetConfig+0x1a6>
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	0112      	lsls	r2, r2, #4
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d011      	beq.n	8008010 <UART_SetConfig+0x17c>
 8007fec:	2280      	movs	r2, #128	; 0x80
 8007fee:	0112      	lsls	r2, r2, #4
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d822      	bhi.n	800803a <UART_SetConfig+0x1a6>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <UART_SetConfig+0x16e>
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <UART_SetConfig+0x18a>
 8008000:	e01b      	b.n	800803a <UART_SetConfig+0x1a6>
 8008002:	231b      	movs	r3, #27
 8008004:	2220      	movs	r2, #32
 8008006:	189b      	adds	r3, r3, r2
 8008008:	19db      	adds	r3, r3, r7
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e021      	b.n	8008054 <UART_SetConfig+0x1c0>
 8008010:	231b      	movs	r3, #27
 8008012:	2220      	movs	r2, #32
 8008014:	189b      	adds	r3, r3, r2
 8008016:	19db      	adds	r3, r3, r7
 8008018:	2202      	movs	r2, #2
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	e01a      	b.n	8008054 <UART_SetConfig+0x1c0>
 800801e:	231b      	movs	r3, #27
 8008020:	2220      	movs	r2, #32
 8008022:	189b      	adds	r3, r3, r2
 8008024:	19db      	adds	r3, r3, r7
 8008026:	2204      	movs	r2, #4
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	e013      	b.n	8008054 <UART_SetConfig+0x1c0>
 800802c:	231b      	movs	r3, #27
 800802e:	2220      	movs	r2, #32
 8008030:	189b      	adds	r3, r3, r2
 8008032:	19db      	adds	r3, r3, r7
 8008034:	2208      	movs	r2, #8
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e00c      	b.n	8008054 <UART_SetConfig+0x1c0>
 800803a:	231b      	movs	r3, #27
 800803c:	2220      	movs	r2, #32
 800803e:	189b      	adds	r3, r3, r2
 8008040:	19db      	adds	r3, r3, r7
 8008042:	2210      	movs	r2, #16
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e005      	b.n	8008054 <UART_SetConfig+0x1c0>
 8008048:	231b      	movs	r3, #27
 800804a:	2220      	movs	r2, #32
 800804c:	189b      	adds	r3, r3, r2
 800804e:	19db      	adds	r3, r3, r7
 8008050:	2210      	movs	r2, #16
 8008052:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a61      	ldr	r2, [pc, #388]	; (80081e0 <UART_SetConfig+0x34c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d000      	beq.n	8008060 <UART_SetConfig+0x1cc>
 800805e:	e092      	b.n	8008186 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008060:	231b      	movs	r3, #27
 8008062:	2220      	movs	r2, #32
 8008064:	189b      	adds	r3, r3, r2
 8008066:	19db      	adds	r3, r3, r7
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b08      	cmp	r3, #8
 800806c:	d015      	beq.n	800809a <UART_SetConfig+0x206>
 800806e:	dc18      	bgt.n	80080a2 <UART_SetConfig+0x20e>
 8008070:	2b04      	cmp	r3, #4
 8008072:	d00d      	beq.n	8008090 <UART_SetConfig+0x1fc>
 8008074:	dc15      	bgt.n	80080a2 <UART_SetConfig+0x20e>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <UART_SetConfig+0x1ec>
 800807a:	2b02      	cmp	r3, #2
 800807c:	d005      	beq.n	800808a <UART_SetConfig+0x1f6>
 800807e:	e010      	b.n	80080a2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008080:	f7fd fed4 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 8008084:	0003      	movs	r3, r0
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008088:	e014      	b.n	80080b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800808a:	4b5a      	ldr	r3, [pc, #360]	; (80081f4 <UART_SetConfig+0x360>)
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800808e:	e011      	b.n	80080b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008090:	f7fd fe40 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8008094:	0003      	movs	r3, r0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008098:	e00c      	b.n	80080b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809a:	2380      	movs	r3, #128	; 0x80
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080a0:	e008      	b.n	80080b4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80080a6:	231a      	movs	r3, #26
 80080a8:	2220      	movs	r2, #32
 80080aa:	189b      	adds	r3, r3, r2
 80080ac:	19db      	adds	r3, r3, r7
 80080ae:	2201      	movs	r2, #1
 80080b0:	701a      	strb	r2, [r3, #0]
        break;
 80080b2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d100      	bne.n	80080bc <UART_SetConfig+0x228>
 80080ba:	e147      	b.n	800834c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c0:	4b4d      	ldr	r3, [pc, #308]	; (80081f8 <UART_SetConfig+0x364>)
 80080c2:	0052      	lsls	r2, r2, #1
 80080c4:	5ad3      	ldrh	r3, [r2, r3]
 80080c6:	0019      	movs	r1, r3
 80080c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080ca:	f7f8 f839 	bl	8000140 <__udivsi3>
 80080ce:	0003      	movs	r3, r0
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	0013      	movs	r3, r2
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080de:	429a      	cmp	r2, r3
 80080e0:	d305      	bcc.n	80080ee <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d906      	bls.n	80080fc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80080ee:	231a      	movs	r3, #26
 80080f0:	2220      	movs	r2, #32
 80080f2:	189b      	adds	r3, r3, r2
 80080f4:	19db      	adds	r3, r3, r7
 80080f6:	2201      	movs	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e127      	b.n	800834c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008108:	4b3b      	ldr	r3, [pc, #236]	; (80081f8 <UART_SetConfig+0x364>)
 800810a:	0052      	lsls	r2, r2, #1
 800810c:	5ad3      	ldrh	r3, [r2, r3]
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	69b8      	ldr	r0, [r7, #24]
 800811a:	69f9      	ldr	r1, [r7, #28]
 800811c:	f7f8 f9fe 	bl	800051c <__aeabi_uldivmod>
 8008120:	0002      	movs	r2, r0
 8008122:	000b      	movs	r3, r1
 8008124:	0e11      	lsrs	r1, r2, #24
 8008126:	021d      	lsls	r5, r3, #8
 8008128:	430d      	orrs	r5, r1
 800812a:	0214      	lsls	r4, r2, #8
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	60bb      	str	r3, [r7, #8]
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68b8      	ldr	r0, [r7, #8]
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	1900      	adds	r0, r0, r4
 800813e:	4169      	adcs	r1, r5
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	603b      	str	r3, [r7, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f7f8 f9e5 	bl	800051c <__aeabi_uldivmod>
 8008152:	0002      	movs	r2, r0
 8008154:	000b      	movs	r3, r1
 8008156:	0013      	movs	r3, r2
 8008158:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800815a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815c:	23c0      	movs	r3, #192	; 0xc0
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	429a      	cmp	r2, r3
 8008162:	d309      	bcc.n	8008178 <UART_SetConfig+0x2e4>
 8008164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	035b      	lsls	r3, r3, #13
 800816a:	429a      	cmp	r2, r3
 800816c:	d204      	bcs.n	8008178 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e0e9      	b.n	800834c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8008178:	231a      	movs	r3, #26
 800817a:	2220      	movs	r2, #32
 800817c:	189b      	adds	r3, r3, r2
 800817e:	19db      	adds	r3, r3, r7
 8008180:	2201      	movs	r2, #1
 8008182:	701a      	strb	r2, [r3, #0]
 8008184:	e0e2      	b.n	800834c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	69da      	ldr	r2, [r3, #28]
 800818a:	2380      	movs	r3, #128	; 0x80
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	429a      	cmp	r2, r3
 8008190:	d000      	beq.n	8008194 <UART_SetConfig+0x300>
 8008192:	e083      	b.n	800829c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008194:	231b      	movs	r3, #27
 8008196:	2220      	movs	r2, #32
 8008198:	189b      	adds	r3, r3, r2
 800819a:	19db      	adds	r3, r3, r7
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d015      	beq.n	80081ce <UART_SetConfig+0x33a>
 80081a2:	dc2b      	bgt.n	80081fc <UART_SetConfig+0x368>
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d00d      	beq.n	80081c4 <UART_SetConfig+0x330>
 80081a8:	dc28      	bgt.n	80081fc <UART_SetConfig+0x368>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <UART_SetConfig+0x320>
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d005      	beq.n	80081be <UART_SetConfig+0x32a>
 80081b2:	e023      	b.n	80081fc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b4:	f7fd fe3a 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 80081b8:	0003      	movs	r3, r0
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081bc:	e027      	b.n	800820e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <UART_SetConfig+0x360>)
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081c2:	e024      	b.n	800820e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081c4:	f7fd fda6 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 80081c8:	0003      	movs	r3, r0
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081cc:	e01f      	b.n	800820e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ce:	2380      	movs	r3, #128	; 0x80
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d4:	e01b      	b.n	800820e <UART_SetConfig+0x37a>
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	cfff69f3 	.word	0xcfff69f3
 80081dc:	ffffcfff 	.word	0xffffcfff
 80081e0:	40008000 	.word	0x40008000
 80081e4:	11fff4ff 	.word	0x11fff4ff
 80081e8:	40013800 	.word	0x40013800
 80081ec:	40021000 	.word	0x40021000
 80081f0:	40004400 	.word	0x40004400
 80081f4:	00f42400 	.word	0x00f42400
 80081f8:	0800b7fc 	.word	0x0800b7fc
      default:
        pclk = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008200:	231a      	movs	r3, #26
 8008202:	2220      	movs	r2, #32
 8008204:	189b      	adds	r3, r3, r2
 8008206:	19db      	adds	r3, r3, r7
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
        break;
 800820c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d100      	bne.n	8008216 <UART_SetConfig+0x382>
 8008214:	e09a      	b.n	800834c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800821a:	4b58      	ldr	r3, [pc, #352]	; (800837c <UART_SetConfig+0x4e8>)
 800821c:	0052      	lsls	r2, r2, #1
 800821e:	5ad3      	ldrh	r3, [r2, r3]
 8008220:	0019      	movs	r1, r3
 8008222:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008224:	f7f7 ff8c 	bl	8000140 <__udivsi3>
 8008228:	0003      	movs	r3, r0
 800822a:	005a      	lsls	r2, r3, #1
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	18d2      	adds	r2, r2, r3
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	0019      	movs	r1, r3
 800823a:	0010      	movs	r0, r2
 800823c:	f7f7 ff80 	bl	8000140 <__udivsi3>
 8008240:	0003      	movs	r3, r0
 8008242:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d921      	bls.n	800828e <UART_SetConfig+0x3fa>
 800824a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	025b      	lsls	r3, r3, #9
 8008250:	429a      	cmp	r2, r3
 8008252:	d21c      	bcs.n	800828e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	b29a      	uxth	r2, r3
 8008258:	200e      	movs	r0, #14
 800825a:	2420      	movs	r4, #32
 800825c:	1903      	adds	r3, r0, r4
 800825e:	19db      	adds	r3, r3, r7
 8008260:	210f      	movs	r1, #15
 8008262:	438a      	bics	r2, r1
 8008264:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	b29b      	uxth	r3, r3
 800826c:	2207      	movs	r2, #7
 800826e:	4013      	ands	r3, r2
 8008270:	b299      	uxth	r1, r3
 8008272:	1903      	adds	r3, r0, r4
 8008274:	19db      	adds	r3, r3, r7
 8008276:	1902      	adds	r2, r0, r4
 8008278:	19d2      	adds	r2, r2, r7
 800827a:	8812      	ldrh	r2, [r2, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	1902      	adds	r2, r0, r4
 8008286:	19d2      	adds	r2, r2, r7
 8008288:	8812      	ldrh	r2, [r2, #0]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	e05e      	b.n	800834c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800828e:	231a      	movs	r3, #26
 8008290:	2220      	movs	r2, #32
 8008292:	189b      	adds	r3, r3, r2
 8008294:	19db      	adds	r3, r3, r7
 8008296:	2201      	movs	r2, #1
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e057      	b.n	800834c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800829c:	231b      	movs	r3, #27
 800829e:	2220      	movs	r2, #32
 80082a0:	189b      	adds	r3, r3, r2
 80082a2:	19db      	adds	r3, r3, r7
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d015      	beq.n	80082d6 <UART_SetConfig+0x442>
 80082aa:	dc18      	bgt.n	80082de <UART_SetConfig+0x44a>
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d00d      	beq.n	80082cc <UART_SetConfig+0x438>
 80082b0:	dc15      	bgt.n	80082de <UART_SetConfig+0x44a>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <UART_SetConfig+0x428>
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d005      	beq.n	80082c6 <UART_SetConfig+0x432>
 80082ba:	e010      	b.n	80082de <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082bc:	f7fd fdb6 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 80082c0:	0003      	movs	r3, r0
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082c4:	e014      	b.n	80082f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c6:	4b2e      	ldr	r3, [pc, #184]	; (8008380 <UART_SetConfig+0x4ec>)
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082ca:	e011      	b.n	80082f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082cc:	f7fd fd22 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 80082d0:	0003      	movs	r3, r0
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d4:	e00c      	b.n	80082f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082dc:	e008      	b.n	80082f0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80082e2:	231a      	movs	r3, #26
 80082e4:	2220      	movs	r2, #32
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	19db      	adds	r3, r3, r7
 80082ea:	2201      	movs	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
        break;
 80082ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d02a      	beq.n	800834c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082fa:	4b20      	ldr	r3, [pc, #128]	; (800837c <UART_SetConfig+0x4e8>)
 80082fc:	0052      	lsls	r2, r2, #1
 80082fe:	5ad3      	ldrh	r3, [r2, r3]
 8008300:	0019      	movs	r1, r3
 8008302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008304:	f7f7 ff1c 	bl	8000140 <__udivsi3>
 8008308:	0003      	movs	r3, r0
 800830a:	001a      	movs	r2, r3
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	18d2      	adds	r2, r2, r3
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	0019      	movs	r1, r3
 800831a:	0010      	movs	r0, r2
 800831c:	f7f7 ff10 	bl	8000140 <__udivsi3>
 8008320:	0003      	movs	r3, r0
 8008322:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d90a      	bls.n	8008340 <UART_SetConfig+0x4ac>
 800832a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	025b      	lsls	r3, r3, #9
 8008330:	429a      	cmp	r2, r3
 8008332:	d205      	bcs.n	8008340 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	b29a      	uxth	r2, r3
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	e005      	b.n	800834c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008340:	231a      	movs	r3, #26
 8008342:	2220      	movs	r2, #32
 8008344:	189b      	adds	r3, r3, r2
 8008346:	19db      	adds	r3, r3, r7
 8008348:	2201      	movs	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	226a      	movs	r2, #106	; 0x6a
 8008350:	2101      	movs	r1, #1
 8008352:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	2268      	movs	r2, #104	; 0x68
 8008358:	2101      	movs	r1, #1
 800835a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	2200      	movs	r2, #0
 8008360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	2200      	movs	r2, #0
 8008366:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008368:	231a      	movs	r3, #26
 800836a:	2220      	movs	r2, #32
 800836c:	189b      	adds	r3, r3, r2
 800836e:	19db      	adds	r3, r3, r7
 8008370:	781b      	ldrb	r3, [r3, #0]
}
 8008372:	0018      	movs	r0, r3
 8008374:	46bd      	mov	sp, r7
 8008376:	b010      	add	sp, #64	; 0x40
 8008378:	bdb0      	pop	{r4, r5, r7, pc}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	0800b7fc 	.word	0x0800b7fc
 8008380:	00f42400 	.word	0x00f42400

08008384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008390:	2208      	movs	r2, #8
 8008392:	4013      	ands	r3, r2
 8008394:	d00b      	beq.n	80083ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4a4a      	ldr	r2, [pc, #296]	; (80084c8 <UART_AdvFeatureConfig+0x144>)
 800839e:	4013      	ands	r3, r2
 80083a0:	0019      	movs	r1, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	2201      	movs	r2, #1
 80083b4:	4013      	ands	r3, r2
 80083b6:	d00b      	beq.n	80083d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4a43      	ldr	r2, [pc, #268]	; (80084cc <UART_AdvFeatureConfig+0x148>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	0019      	movs	r1, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	2202      	movs	r2, #2
 80083d6:	4013      	ands	r3, r2
 80083d8:	d00b      	beq.n	80083f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4a3b      	ldr	r2, [pc, #236]	; (80084d0 <UART_AdvFeatureConfig+0x14c>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	0019      	movs	r1, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	2204      	movs	r2, #4
 80083f8:	4013      	ands	r3, r2
 80083fa:	d00b      	beq.n	8008414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	4a34      	ldr	r2, [pc, #208]	; (80084d4 <UART_AdvFeatureConfig+0x150>)
 8008404:	4013      	ands	r3, r2
 8008406:	0019      	movs	r1, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	2210      	movs	r2, #16
 800841a:	4013      	ands	r3, r2
 800841c:	d00b      	beq.n	8008436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	4a2c      	ldr	r2, [pc, #176]	; (80084d8 <UART_AdvFeatureConfig+0x154>)
 8008426:	4013      	ands	r3, r2
 8008428:	0019      	movs	r1, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	2220      	movs	r2, #32
 800843c:	4013      	ands	r3, r2
 800843e:	d00b      	beq.n	8008458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	4a25      	ldr	r2, [pc, #148]	; (80084dc <UART_AdvFeatureConfig+0x158>)
 8008448:	4013      	ands	r3, r2
 800844a:	0019      	movs	r1, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	2240      	movs	r2, #64	; 0x40
 800845e:	4013      	ands	r3, r2
 8008460:	d01d      	beq.n	800849e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a1d      	ldr	r2, [pc, #116]	; (80084e0 <UART_AdvFeatureConfig+0x15c>)
 800846a:	4013      	ands	r3, r2
 800846c:	0019      	movs	r1, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847e:	2380      	movs	r3, #128	; 0x80
 8008480:	035b      	lsls	r3, r3, #13
 8008482:	429a      	cmp	r2, r3
 8008484:	d10b      	bne.n	800849e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	4a15      	ldr	r2, [pc, #84]	; (80084e4 <UART_AdvFeatureConfig+0x160>)
 800848e:	4013      	ands	r3, r2
 8008490:	0019      	movs	r1, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	2280      	movs	r2, #128	; 0x80
 80084a4:	4013      	ands	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4a0e      	ldr	r2, [pc, #56]	; (80084e8 <UART_AdvFeatureConfig+0x164>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	0019      	movs	r1, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b002      	add	sp, #8
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	ffff7fff 	.word	0xffff7fff
 80084cc:	fffdffff 	.word	0xfffdffff
 80084d0:	fffeffff 	.word	0xfffeffff
 80084d4:	fffbffff 	.word	0xfffbffff
 80084d8:	ffffefff 	.word	0xffffefff
 80084dc:	ffffdfff 	.word	0xffffdfff
 80084e0:	ffefffff 	.word	0xffefffff
 80084e4:	ff9fffff 	.word	0xff9fffff
 80084e8:	fff7ffff 	.word	0xfff7ffff

080084ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b092      	sub	sp, #72	; 0x48
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2290      	movs	r2, #144	; 0x90
 80084f8:	2100      	movs	r1, #0
 80084fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084fc:	f7fb fb4e 	bl	8003b9c <HAL_GetTick>
 8008500:	0003      	movs	r3, r0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2208      	movs	r2, #8
 800850c:	4013      	ands	r3, r2
 800850e:	2b08      	cmp	r3, #8
 8008510:	d12d      	bne.n	800856e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	2280      	movs	r2, #128	; 0x80
 8008516:	0391      	lsls	r1, r2, #14
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4a47      	ldr	r2, [pc, #284]	; (8008638 <UART_CheckIdleState+0x14c>)
 800851c:	9200      	str	r2, [sp, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	f000 f88e 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8008524:	1e03      	subs	r3, r0, #0
 8008526:	d022      	beq.n	800856e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008528:	f3ef 8310 	mrs	r3, PRIMASK
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008530:	63bb      	str	r3, [r7, #56]	; 0x38
 8008532:	2301      	movs	r3, #1
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	f383 8810 	msr	PRIMASK, r3
}
 800853c:	46c0      	nop			; (mov r8, r8)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2180      	movs	r1, #128	; 0x80
 800854a:	438a      	bics	r2, r1
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	f383 8810 	msr	PRIMASK, r3
}
 8008558:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2288      	movs	r2, #136	; 0x88
 800855e:	2120      	movs	r1, #32
 8008560:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2284      	movs	r2, #132	; 0x84
 8008566:	2100      	movs	r1, #0
 8008568:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e060      	b.n	8008630 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2204      	movs	r2, #4
 8008576:	4013      	ands	r3, r2
 8008578:	2b04      	cmp	r3, #4
 800857a:	d146      	bne.n	800860a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	2280      	movs	r2, #128	; 0x80
 8008580:	03d1      	lsls	r1, r2, #15
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <UART_CheckIdleState+0x14c>)
 8008586:	9200      	str	r2, [sp, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	f000 f859 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 800858e:	1e03      	subs	r3, r0, #0
 8008590:	d03b      	beq.n	800860a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008592:	f3ef 8310 	mrs	r3, PRIMASK
 8008596:	60fb      	str	r3, [r7, #12]
  return(result);
 8008598:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
 800859c:	2301      	movs	r3, #1
 800859e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f383 8810 	msr	PRIMASK, r3
}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4922      	ldr	r1, [pc, #136]	; (800863c <UART_CheckIdleState+0x150>)
 80085b4:	400a      	ands	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f383 8810 	msr	PRIMASK, r3
}
 80085c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c4:	f3ef 8310 	mrs	r3, PRIMASK
 80085c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80085ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085cc:	633b      	str	r3, [r7, #48]	; 0x30
 80085ce:	2301      	movs	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f383 8810 	msr	PRIMASK, r3
}
 80085d8:	46c0      	nop			; (mov r8, r8)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2101      	movs	r1, #1
 80085e6:	438a      	bics	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f383 8810 	msr	PRIMASK, r3
}
 80085f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	228c      	movs	r2, #140	; 0x8c
 80085fa:	2120      	movs	r1, #32
 80085fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2284      	movs	r2, #132	; 0x84
 8008602:	2100      	movs	r1, #0
 8008604:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e012      	b.n	8008630 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2288      	movs	r2, #136	; 0x88
 800860e:	2120      	movs	r1, #32
 8008610:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	228c      	movs	r2, #140	; 0x8c
 8008616:	2120      	movs	r1, #32
 8008618:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2284      	movs	r2, #132	; 0x84
 800862a:	2100      	movs	r1, #0
 800862c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	b010      	add	sp, #64	; 0x40
 8008636:	bd80      	pop	{r7, pc}
 8008638:	01ffffff 	.word	0x01ffffff
 800863c:	fffffedf 	.word	0xfffffedf

08008640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	1dfb      	adds	r3, r7, #7
 800864e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008650:	e051      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	3301      	adds	r3, #1
 8008656:	d04e      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008658:	f7fb faa0 	bl	8003b9c <HAL_GetTick>
 800865c:	0002      	movs	r2, r0
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	d302      	bcc.n	800866e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e051      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2204      	movs	r2, #4
 800867a:	4013      	ands	r3, r2
 800867c:	d03b      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b80      	cmp	r3, #128	; 0x80
 8008682:	d038      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d035      	beq.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2208      	movs	r2, #8
 8008692:	4013      	ands	r3, r2
 8008694:	2b08      	cmp	r3, #8
 8008696:	d111      	bne.n	80086bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2208      	movs	r2, #8
 800869e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0018      	movs	r0, r3
 80086a4:	f000 f83c 	bl	8008720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2290      	movs	r2, #144	; 0x90
 80086ac:	2108      	movs	r1, #8
 80086ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2284      	movs	r2, #132	; 0x84
 80086b4:	2100      	movs	r1, #0
 80086b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e02c      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	401a      	ands	r2, r3
 80086c8:	2380      	movs	r3, #128	; 0x80
 80086ca:	011b      	lsls	r3, r3, #4
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d112      	bne.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2280      	movs	r2, #128	; 0x80
 80086d6:	0112      	lsls	r2, r2, #4
 80086d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	0018      	movs	r0, r3
 80086de:	f000 f81f 	bl	8008720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2290      	movs	r2, #144	; 0x90
 80086e6:	2120      	movs	r1, #32
 80086e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2284      	movs	r2, #132	; 0x84
 80086ee:	2100      	movs	r1, #0
 80086f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e00f      	b.n	8008716 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	4013      	ands	r3, r2
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	425a      	negs	r2, r3
 8008706:	4153      	adcs	r3, r2
 8008708:	b2db      	uxtb	r3, r3
 800870a:	001a      	movs	r2, r3
 800870c:	1dfb      	adds	r3, r7, #7
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d09e      	beq.n	8008652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	0018      	movs	r0, r3
 8008718:	46bd      	mov	sp, r7
 800871a:	b004      	add	sp, #16
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08e      	sub	sp, #56	; 0x38
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008728:	f3ef 8310 	mrs	r3, PRIMASK
 800872c:	617b      	str	r3, [r7, #20]
  return(result);
 800872e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
 8008732:	2301      	movs	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4926      	ldr	r1, [pc, #152]	; (80087e4 <UART_EndRxTransfer+0xc4>)
 800874a:	400a      	ands	r2, r1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f383 8810 	msr	PRIMASK, r3
}
 8008758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875a:	f3ef 8310 	mrs	r3, PRIMASK
 800875e:	623b      	str	r3, [r7, #32]
  return(result);
 8008760:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008762:	633b      	str	r3, [r7, #48]	; 0x30
 8008764:	2301      	movs	r3, #1
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f383 8810 	msr	PRIMASK, r3
}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	491b      	ldr	r1, [pc, #108]	; (80087e8 <UART_EndRxTransfer+0xc8>)
 800877c:	400a      	ands	r2, r1
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	f383 8810 	msr	PRIMASK, r3
}
 800878a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d118      	bne.n	80087c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008794:	f3ef 8310 	mrs	r3, PRIMASK
 8008798:	60bb      	str	r3, [r7, #8]
  return(result);
 800879a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800879e:	2301      	movs	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2110      	movs	r1, #16
 80087b6:	438a      	bics	r2, r1
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f383 8810 	msr	PRIMASK, r3
}
 80087c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	228c      	movs	r2, #140	; 0x8c
 80087ca:	2120      	movs	r1, #32
 80087cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	46bd      	mov	sp, r7
 80087de:	b00e      	add	sp, #56	; 0x38
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	fffffedf 	.word	0xfffffedf
 80087e8:	effffffe 	.word	0xeffffffe

080087ec <__cvt>:
 80087ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ee:	001e      	movs	r6, r3
 80087f0:	2300      	movs	r3, #0
 80087f2:	0014      	movs	r4, r2
 80087f4:	b08b      	sub	sp, #44	; 0x2c
 80087f6:	429e      	cmp	r6, r3
 80087f8:	da04      	bge.n	8008804 <__cvt+0x18>
 80087fa:	2180      	movs	r1, #128	; 0x80
 80087fc:	0609      	lsls	r1, r1, #24
 80087fe:	1873      	adds	r3, r6, r1
 8008800:	001e      	movs	r6, r3
 8008802:	232d      	movs	r3, #45	; 0x2d
 8008804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008806:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008808:	7013      	strb	r3, [r2, #0]
 800880a:	2320      	movs	r3, #32
 800880c:	2203      	movs	r2, #3
 800880e:	439f      	bics	r7, r3
 8008810:	2f46      	cmp	r7, #70	; 0x46
 8008812:	d007      	beq.n	8008824 <__cvt+0x38>
 8008814:	003b      	movs	r3, r7
 8008816:	3b45      	subs	r3, #69	; 0x45
 8008818:	4259      	negs	r1, r3
 800881a:	414b      	adcs	r3, r1
 800881c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800881e:	3a01      	subs	r2, #1
 8008820:	18cb      	adds	r3, r1, r3
 8008822:	9310      	str	r3, [sp, #64]	; 0x40
 8008824:	ab09      	add	r3, sp, #36	; 0x24
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	ab08      	add	r3, sp, #32
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800882e:	9200      	str	r2, [sp, #0]
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008834:	0022      	movs	r2, r4
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	0033      	movs	r3, r6
 800883a:	f000 fea7 	bl	800958c <_dtoa_r>
 800883e:	0005      	movs	r5, r0
 8008840:	2f47      	cmp	r7, #71	; 0x47
 8008842:	d102      	bne.n	800884a <__cvt+0x5e>
 8008844:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d528      	bpl.n	800889c <__cvt+0xb0>
 800884a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800884c:	18eb      	adds	r3, r5, r3
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	2f46      	cmp	r7, #70	; 0x46
 8008852:	d114      	bne.n	800887e <__cvt+0x92>
 8008854:	782b      	ldrb	r3, [r5, #0]
 8008856:	2b30      	cmp	r3, #48	; 0x30
 8008858:	d10c      	bne.n	8008874 <__cvt+0x88>
 800885a:	2200      	movs	r2, #0
 800885c:	2300      	movs	r3, #0
 800885e:	0020      	movs	r0, r4
 8008860:	0031      	movs	r1, r6
 8008862:	f7f7 fdf3 	bl	800044c <__aeabi_dcmpeq>
 8008866:	2800      	cmp	r0, #0
 8008868:	d104      	bne.n	8008874 <__cvt+0x88>
 800886a:	2301      	movs	r3, #1
 800886c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800886e:	1a9b      	subs	r3, r3, r2
 8008870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008876:	9a07      	ldr	r2, [sp, #28]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	18d3      	adds	r3, r2, r3
 800887c:	9307      	str	r3, [sp, #28]
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	0020      	movs	r0, r4
 8008884:	0031      	movs	r1, r6
 8008886:	f7f7 fde1 	bl	800044c <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d001      	beq.n	8008892 <__cvt+0xa6>
 800888e:	9b07      	ldr	r3, [sp, #28]
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	2230      	movs	r2, #48	; 0x30
 8008894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008896:	9907      	ldr	r1, [sp, #28]
 8008898:	428b      	cmp	r3, r1
 800889a:	d306      	bcc.n	80088aa <__cvt+0xbe>
 800889c:	0028      	movs	r0, r5
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088a2:	1b5b      	subs	r3, r3, r5
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	b00b      	add	sp, #44	; 0x2c
 80088a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	9109      	str	r1, [sp, #36]	; 0x24
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7f0      	b.n	8008894 <__cvt+0xa8>

080088b2 <__exponent>:
 80088b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b4:	1c83      	adds	r3, r0, #2
 80088b6:	b087      	sub	sp, #28
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	0005      	movs	r5, r0
 80088bc:	000c      	movs	r4, r1
 80088be:	232b      	movs	r3, #43	; 0x2b
 80088c0:	7002      	strb	r2, [r0, #0]
 80088c2:	2900      	cmp	r1, #0
 80088c4:	da01      	bge.n	80088ca <__exponent+0x18>
 80088c6:	424c      	negs	r4, r1
 80088c8:	3302      	adds	r3, #2
 80088ca:	706b      	strb	r3, [r5, #1]
 80088cc:	2c09      	cmp	r4, #9
 80088ce:	dd2f      	ble.n	8008930 <__exponent+0x7e>
 80088d0:	270a      	movs	r7, #10
 80088d2:	ab04      	add	r3, sp, #16
 80088d4:	1dde      	adds	r6, r3, #7
 80088d6:	0020      	movs	r0, r4
 80088d8:	0039      	movs	r1, r7
 80088da:	9601      	str	r6, [sp, #4]
 80088dc:	f7f7 fda0 	bl	8000420 <__aeabi_idivmod>
 80088e0:	3e01      	subs	r6, #1
 80088e2:	3130      	adds	r1, #48	; 0x30
 80088e4:	0020      	movs	r0, r4
 80088e6:	7031      	strb	r1, [r6, #0]
 80088e8:	0039      	movs	r1, r7
 80088ea:	9402      	str	r4, [sp, #8]
 80088ec:	f7f7 fcb2 	bl	8000254 <__divsi3>
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	0004      	movs	r4, r0
 80088f4:	2b63      	cmp	r3, #99	; 0x63
 80088f6:	dcee      	bgt.n	80088d6 <__exponent+0x24>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	3430      	adds	r4, #48	; 0x30
 80088fc:	1e9a      	subs	r2, r3, #2
 80088fe:	0013      	movs	r3, r2
 8008900:	9903      	ldr	r1, [sp, #12]
 8008902:	7014      	strb	r4, [r2, #0]
 8008904:	a804      	add	r0, sp, #16
 8008906:	3007      	adds	r0, #7
 8008908:	4298      	cmp	r0, r3
 800890a:	d80c      	bhi.n	8008926 <__exponent+0x74>
 800890c:	2300      	movs	r3, #0
 800890e:	4282      	cmp	r2, r0
 8008910:	d804      	bhi.n	800891c <__exponent+0x6a>
 8008912:	aa04      	add	r2, sp, #16
 8008914:	3309      	adds	r3, #9
 8008916:	189b      	adds	r3, r3, r2
 8008918:	9a01      	ldr	r2, [sp, #4]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	9a03      	ldr	r2, [sp, #12]
 800891e:	18d3      	adds	r3, r2, r3
 8008920:	1b58      	subs	r0, r3, r5
 8008922:	b007      	add	sp, #28
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008926:	7818      	ldrb	r0, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	7008      	strb	r0, [r1, #0]
 800892c:	3101      	adds	r1, #1
 800892e:	e7e9      	b.n	8008904 <__exponent+0x52>
 8008930:	2330      	movs	r3, #48	; 0x30
 8008932:	3430      	adds	r4, #48	; 0x30
 8008934:	70ab      	strb	r3, [r5, #2]
 8008936:	70ec      	strb	r4, [r5, #3]
 8008938:	1d2b      	adds	r3, r5, #4
 800893a:	e7f1      	b.n	8008920 <__exponent+0x6e>

0800893c <_printf_float>:
 800893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893e:	b095      	sub	sp, #84	; 0x54
 8008940:	000c      	movs	r4, r1
 8008942:	9208      	str	r2, [sp, #32]
 8008944:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008946:	9309      	str	r3, [sp, #36]	; 0x24
 8008948:	0007      	movs	r7, r0
 800894a:	f000 fd05 	bl	8009358 <_localeconv_r>
 800894e:	6803      	ldr	r3, [r0, #0]
 8008950:	0018      	movs	r0, r3
 8008952:	930c      	str	r3, [sp, #48]	; 0x30
 8008954:	f7f7 fbd8 	bl	8000108 <strlen>
 8008958:	2300      	movs	r3, #0
 800895a:	9312      	str	r3, [sp, #72]	; 0x48
 800895c:	7e23      	ldrb	r3, [r4, #24]
 800895e:	2207      	movs	r2, #7
 8008960:	930a      	str	r3, [sp, #40]	; 0x28
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	900d      	str	r0, [sp, #52]	; 0x34
 8008966:	930b      	str	r3, [sp, #44]	; 0x2c
 8008968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	05c9      	lsls	r1, r1, #23
 800896e:	d547      	bpl.n	8008a00 <_printf_float+0xc4>
 8008970:	189b      	adds	r3, r3, r2
 8008972:	4393      	bics	r3, r2
 8008974:	001a      	movs	r2, r3
 8008976:	3208      	adds	r2, #8
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	681e      	ldr	r6, [r3, #0]
 800897c:	685d      	ldr	r5, [r3, #4]
 800897e:	0032      	movs	r2, r6
 8008980:	002b      	movs	r3, r5
 8008982:	64a2      	str	r2, [r4, #72]	; 0x48
 8008984:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008986:	2201      	movs	r2, #1
 8008988:	006b      	lsls	r3, r5, #1
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	930e      	str	r3, [sp, #56]	; 0x38
 800898e:	0030      	movs	r0, r6
 8008990:	4bab      	ldr	r3, [pc, #684]	; (8008c40 <_printf_float+0x304>)
 8008992:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008994:	4252      	negs	r2, r2
 8008996:	f7f9 fe5d 	bl	8002654 <__aeabi_dcmpun>
 800899a:	2800      	cmp	r0, #0
 800899c:	d132      	bne.n	8008a04 <_printf_float+0xc8>
 800899e:	2201      	movs	r2, #1
 80089a0:	0030      	movs	r0, r6
 80089a2:	4ba7      	ldr	r3, [pc, #668]	; (8008c40 <_printf_float+0x304>)
 80089a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089a6:	4252      	negs	r2, r2
 80089a8:	f7f7 fd60 	bl	800046c <__aeabi_dcmple>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d129      	bne.n	8008a04 <_printf_float+0xc8>
 80089b0:	2200      	movs	r2, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	0030      	movs	r0, r6
 80089b6:	0029      	movs	r1, r5
 80089b8:	f7f7 fd4e 	bl	8000458 <__aeabi_dcmplt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d003      	beq.n	80089c8 <_printf_float+0x8c>
 80089c0:	0023      	movs	r3, r4
 80089c2:	222d      	movs	r2, #45	; 0x2d
 80089c4:	3343      	adds	r3, #67	; 0x43
 80089c6:	701a      	strb	r2, [r3, #0]
 80089c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ca:	4d9e      	ldr	r5, [pc, #632]	; (8008c44 <_printf_float+0x308>)
 80089cc:	2b47      	cmp	r3, #71	; 0x47
 80089ce:	d900      	bls.n	80089d2 <_printf_float+0x96>
 80089d0:	4d9d      	ldr	r5, [pc, #628]	; (8008c48 <_printf_float+0x30c>)
 80089d2:	2303      	movs	r3, #3
 80089d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	439a      	bics	r2, r3
 80089dc:	2300      	movs	r3, #0
 80089de:	6022      	str	r2, [r4, #0]
 80089e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e4:	0021      	movs	r1, r4
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	0038      	movs	r0, r7
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	aa13      	add	r2, sp, #76	; 0x4c
 80089ee:	f000 f9fb 	bl	8008de8 <_printf_common>
 80089f2:	3001      	adds	r0, #1
 80089f4:	d000      	beq.n	80089f8 <_printf_float+0xbc>
 80089f6:	e0a3      	b.n	8008b40 <_printf_float+0x204>
 80089f8:	2001      	movs	r0, #1
 80089fa:	4240      	negs	r0, r0
 80089fc:	b015      	add	sp, #84	; 0x54
 80089fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a00:	3307      	adds	r3, #7
 8008a02:	e7b6      	b.n	8008972 <_printf_float+0x36>
 8008a04:	0032      	movs	r2, r6
 8008a06:	002b      	movs	r3, r5
 8008a08:	0030      	movs	r0, r6
 8008a0a:	0029      	movs	r1, r5
 8008a0c:	f7f9 fe22 	bl	8002654 <__aeabi_dcmpun>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d00b      	beq.n	8008a2c <_printf_float+0xf0>
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	da03      	bge.n	8008a20 <_printf_float+0xe4>
 8008a18:	0023      	movs	r3, r4
 8008a1a:	222d      	movs	r2, #45	; 0x2d
 8008a1c:	3343      	adds	r3, #67	; 0x43
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a22:	4d8a      	ldr	r5, [pc, #552]	; (8008c4c <_printf_float+0x310>)
 8008a24:	2b47      	cmp	r3, #71	; 0x47
 8008a26:	d9d4      	bls.n	80089d2 <_printf_float+0x96>
 8008a28:	4d89      	ldr	r5, [pc, #548]	; (8008c50 <_printf_float+0x314>)
 8008a2a:	e7d2      	b.n	80089d2 <_printf_float+0x96>
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	4391      	bics	r1, r2
 8008a34:	910e      	str	r1, [sp, #56]	; 0x38
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	d14a      	bne.n	8008ad0 <_printf_float+0x194>
 8008a3a:	3307      	adds	r3, #7
 8008a3c:	6063      	str	r3, [r4, #4]
 8008a3e:	2380      	movs	r3, #128	; 0x80
 8008a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	9206      	str	r2, [sp, #24]
 8008a4a:	aa12      	add	r2, sp, #72	; 0x48
 8008a4c:	9205      	str	r2, [sp, #20]
 8008a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	9204      	str	r2, [sp, #16]
 8008a54:	aa11      	add	r2, sp, #68	; 0x44
 8008a56:	9203      	str	r2, [sp, #12]
 8008a58:	2223      	movs	r2, #35	; 0x23
 8008a5a:	a908      	add	r1, sp, #32
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	6863      	ldr	r3, [r4, #4]
 8008a60:	1852      	adds	r2, r2, r1
 8008a62:	9202      	str	r2, [sp, #8]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	0032      	movs	r2, r6
 8008a68:	002b      	movs	r3, r5
 8008a6a:	0038      	movs	r0, r7
 8008a6c:	f7ff febe 	bl	80087ec <__cvt>
 8008a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a72:	0005      	movs	r5, r0
 8008a74:	2b47      	cmp	r3, #71	; 0x47
 8008a76:	d109      	bne.n	8008a8c <_printf_float+0x150>
 8008a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a7a:	1cda      	adds	r2, r3, #3
 8008a7c:	db02      	blt.n	8008a84 <_printf_float+0x148>
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	4293      	cmp	r3, r2
 8008a82:	dd49      	ble.n	8008b18 <_printf_float+0x1dc>
 8008a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a86:	3b02      	subs	r3, #2
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a90:	2b65      	cmp	r3, #101	; 0x65
 8008a92:	d824      	bhi.n	8008ade <_printf_float+0x1a2>
 8008a94:	0020      	movs	r0, r4
 8008a96:	001a      	movs	r2, r3
 8008a98:	3901      	subs	r1, #1
 8008a9a:	3050      	adds	r0, #80	; 0x50
 8008a9c:	9111      	str	r1, [sp, #68]	; 0x44
 8008a9e:	f7ff ff08 	bl	80088b2 <__exponent>
 8008aa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008aa6:	1813      	adds	r3, r2, r0
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	dc02      	bgt.n	8008ab4 <_printf_float+0x178>
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	07d2      	lsls	r2, r2, #31
 8008ab2:	d501      	bpl.n	8008ab8 <_printf_float+0x17c>
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	2323      	movs	r3, #35	; 0x23
 8008aba:	aa08      	add	r2, sp, #32
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d100      	bne.n	8008ac6 <_printf_float+0x18a>
 8008ac4:	e78d      	b.n	80089e2 <_printf_float+0xa6>
 8008ac6:	0023      	movs	r3, r4
 8008ac8:	222d      	movs	r2, #45	; 0x2d
 8008aca:	3343      	adds	r3, #67	; 0x43
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e788      	b.n	80089e2 <_printf_float+0xa6>
 8008ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad2:	2a47      	cmp	r2, #71	; 0x47
 8008ad4:	d1b3      	bne.n	8008a3e <_printf_float+0x102>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1b1      	bne.n	8008a3e <_printf_float+0x102>
 8008ada:	3301      	adds	r3, #1
 8008adc:	e7ae      	b.n	8008a3c <_printf_float+0x100>
 8008ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae0:	2b66      	cmp	r3, #102	; 0x66
 8008ae2:	d11b      	bne.n	8008b1c <_printf_float+0x1e0>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	dd09      	ble.n	8008afe <_printf_float+0x1c2>
 8008aea:	6121      	str	r1, [r4, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d102      	bne.n	8008af6 <_printf_float+0x1ba>
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	07d2      	lsls	r2, r2, #31
 8008af4:	d50b      	bpl.n	8008b0e <_printf_float+0x1d2>
 8008af6:	3301      	adds	r3, #1
 8008af8:	185b      	adds	r3, r3, r1
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	e007      	b.n	8008b0e <_printf_float+0x1d2>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <_printf_float+0x1ce>
 8008b02:	2201      	movs	r2, #1
 8008b04:	6821      	ldr	r1, [r4, #0]
 8008b06:	4211      	tst	r1, r2
 8008b08:	d000      	beq.n	8008b0c <_printf_float+0x1d0>
 8008b0a:	1c9a      	adds	r2, r3, #2
 8008b0c:	6122      	str	r2, [r4, #16]
 8008b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b10:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b12:	2300      	movs	r3, #0
 8008b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b16:	e7cf      	b.n	8008ab8 <_printf_float+0x17c>
 8008b18:	2367      	movs	r3, #103	; 0x67
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b20:	4299      	cmp	r1, r3
 8008b22:	db06      	blt.n	8008b32 <_printf_float+0x1f6>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	6121      	str	r1, [r4, #16]
 8008b28:	07db      	lsls	r3, r3, #31
 8008b2a:	d5f0      	bpl.n	8008b0e <_printf_float+0x1d2>
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	6121      	str	r1, [r4, #16]
 8008b30:	e7ed      	b.n	8008b0e <_printf_float+0x1d2>
 8008b32:	2201      	movs	r2, #1
 8008b34:	2900      	cmp	r1, #0
 8008b36:	dc01      	bgt.n	8008b3c <_printf_float+0x200>
 8008b38:	1892      	adds	r2, r2, r2
 8008b3a:	1a52      	subs	r2, r2, r1
 8008b3c:	189b      	adds	r3, r3, r2
 8008b3e:	e7dc      	b.n	8008afa <_printf_float+0x1be>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	0553      	lsls	r3, r2, #21
 8008b44:	d408      	bmi.n	8008b58 <_printf_float+0x21c>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	002a      	movs	r2, r5
 8008b4a:	0038      	movs	r0, r7
 8008b4c:	9908      	ldr	r1, [sp, #32]
 8008b4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b50:	47a8      	blx	r5
 8008b52:	3001      	adds	r0, #1
 8008b54:	d12a      	bne.n	8008bac <_printf_float+0x270>
 8008b56:	e74f      	b.n	80089f8 <_printf_float+0xbc>
 8008b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5a:	2b65      	cmp	r3, #101	; 0x65
 8008b5c:	d800      	bhi.n	8008b60 <_printf_float+0x224>
 8008b5e:	e0ec      	b.n	8008d3a <_printf_float+0x3fe>
 8008b60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008b62:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 fc70 	bl	800044c <__aeabi_dcmpeq>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d034      	beq.n	8008bda <_printf_float+0x29e>
 8008b70:	2301      	movs	r3, #1
 8008b72:	0038      	movs	r0, r7
 8008b74:	4a37      	ldr	r2, [pc, #220]	; (8008c54 <_printf_float+0x318>)
 8008b76:	9908      	ldr	r1, [sp, #32]
 8008b78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b7a:	47a8      	blx	r5
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d100      	bne.n	8008b82 <_printf_float+0x246>
 8008b80:	e73a      	b.n	80089f8 <_printf_float+0xbc>
 8008b82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b86:	429a      	cmp	r2, r3
 8008b88:	db02      	blt.n	8008b90 <_printf_float+0x254>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	07db      	lsls	r3, r3, #31
 8008b8e:	d50d      	bpl.n	8008bac <_printf_float+0x270>
 8008b90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b92:	0038      	movs	r0, r7
 8008b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b98:	9908      	ldr	r1, [sp, #32]
 8008b9a:	47a8      	blx	r5
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d100      	bne.n	8008ba4 <_printf_float+0x268>
 8008ba2:	e729      	b.n	80089f8 <_printf_float+0xbc>
 8008ba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	dc0a      	bgt.n	8008bc2 <_printf_float+0x286>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	079b      	lsls	r3, r3, #30
 8008bb0:	d500      	bpl.n	8008bb4 <_printf_float+0x278>
 8008bb2:	e116      	b.n	8008de2 <_printf_float+0x4a6>
 8008bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bb6:	68e0      	ldr	r0, [r4, #12]
 8008bb8:	4298      	cmp	r0, r3
 8008bba:	db00      	blt.n	8008bbe <_printf_float+0x282>
 8008bbc:	e71e      	b.n	80089fc <_printf_float+0xc0>
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	e71c      	b.n	80089fc <_printf_float+0xc0>
 8008bc2:	0022      	movs	r2, r4
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	0038      	movs	r0, r7
 8008bc8:	9908      	ldr	r1, [sp, #32]
 8008bca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bcc:	321a      	adds	r2, #26
 8008bce:	47b0      	blx	r6
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d100      	bne.n	8008bd6 <_printf_float+0x29a>
 8008bd4:	e710      	b.n	80089f8 <_printf_float+0xbc>
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	e7e4      	b.n	8008ba4 <_printf_float+0x268>
 8008bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc3b      	bgt.n	8008c58 <_printf_float+0x31c>
 8008be0:	2301      	movs	r3, #1
 8008be2:	0038      	movs	r0, r7
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <_printf_float+0x318>)
 8008be6:	9908      	ldr	r1, [sp, #32]
 8008be8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bea:	47b0      	blx	r6
 8008bec:	3001      	adds	r0, #1
 8008bee:	d100      	bne.n	8008bf2 <_printf_float+0x2b6>
 8008bf0:	e702      	b.n	80089f8 <_printf_float+0xbc>
 8008bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	d102      	bne.n	8008c00 <_printf_float+0x2c4>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	07db      	lsls	r3, r3, #31
 8008bfe:	d5d5      	bpl.n	8008bac <_printf_float+0x270>
 8008c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c02:	0038      	movs	r0, r7
 8008c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c06:	9908      	ldr	r1, [sp, #32]
 8008c08:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c0a:	47b0      	blx	r6
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d100      	bne.n	8008c14 <_printf_float+0x2d8>
 8008c12:	e6f1      	b.n	80089f8 <_printf_float+0xbc>
 8008c14:	930a      	str	r3, [sp, #40]	; 0x28
 8008c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c1a:	425b      	negs	r3, r3
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	dc01      	bgt.n	8008c24 <_printf_float+0x2e8>
 8008c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c22:	e791      	b.n	8008b48 <_printf_float+0x20c>
 8008c24:	0022      	movs	r2, r4
 8008c26:	2301      	movs	r3, #1
 8008c28:	0038      	movs	r0, r7
 8008c2a:	9908      	ldr	r1, [sp, #32]
 8008c2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c2e:	321a      	adds	r2, #26
 8008c30:	47b0      	blx	r6
 8008c32:	3001      	adds	r0, #1
 8008c34:	d100      	bne.n	8008c38 <_printf_float+0x2fc>
 8008c36:	e6df      	b.n	80089f8 <_printf_float+0xbc>
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	e7ea      	b.n	8008c14 <_printf_float+0x2d8>
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	0800b814 	.word	0x0800b814
 8008c48:	0800b818 	.word	0x0800b818
 8008c4c:	0800b81c 	.word	0x0800b81c
 8008c50:	0800b820 	.word	0x0800b820
 8008c54:	0800b824 	.word	0x0800b824
 8008c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	dd00      	ble.n	8008c64 <_printf_float+0x328>
 8008c62:	930a      	str	r3, [sp, #40]	; 0x28
 8008c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dc3d      	bgt.n	8008ce6 <_printf_float+0x3aa>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	43db      	mvns	r3, r3
 8008c72:	17db      	asrs	r3, r3, #31
 8008c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c7e:	4013      	ands	r3, r2
 8008c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c86:	4293      	cmp	r3, r2
 8008c88:	dc36      	bgt.n	8008cf8 <_printf_float+0x3bc>
 8008c8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	db40      	blt.n	8008d14 <_printf_float+0x3d8>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d43d      	bmi.n	8008d14 <_printf_float+0x3d8>
 8008c98:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008c9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9e:	1af3      	subs	r3, r6, r3
 8008ca0:	1ab6      	subs	r6, r6, r2
 8008ca2:	429e      	cmp	r6, r3
 8008ca4:	dd00      	ble.n	8008ca8 <_printf_float+0x36c>
 8008ca6:	001e      	movs	r6, r3
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	dc3c      	bgt.n	8008d26 <_printf_float+0x3ea>
 8008cac:	2300      	movs	r3, #0
 8008cae:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb0:	43f3      	mvns	r3, r6
 8008cb2:	17db      	asrs	r3, r3, #31
 8008cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cba:	1a9b      	subs	r3, r3, r2
 8008cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cbe:	4032      	ands	r2, r6
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	dc00      	bgt.n	8008cca <_printf_float+0x38e>
 8008cc8:	e770      	b.n	8008bac <_printf_float+0x270>
 8008cca:	0022      	movs	r2, r4
 8008ccc:	2301      	movs	r3, #1
 8008cce:	0038      	movs	r0, r7
 8008cd0:	9908      	ldr	r1, [sp, #32]
 8008cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cd4:	321a      	adds	r2, #26
 8008cd6:	47a8      	blx	r5
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d100      	bne.n	8008cde <_printf_float+0x3a2>
 8008cdc:	e68c      	b.n	80089f8 <_printf_float+0xbc>
 8008cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce4:	e7e7      	b.n	8008cb6 <_printf_float+0x37a>
 8008ce6:	002a      	movs	r2, r5
 8008ce8:	0038      	movs	r0, r7
 8008cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cec:	9908      	ldr	r1, [sp, #32]
 8008cee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008cf0:	47b0      	blx	r6
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d1b9      	bne.n	8008c6a <_printf_float+0x32e>
 8008cf6:	e67f      	b.n	80089f8 <_printf_float+0xbc>
 8008cf8:	0022      	movs	r2, r4
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	0038      	movs	r0, r7
 8008cfe:	9908      	ldr	r1, [sp, #32]
 8008d00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d02:	321a      	adds	r2, #26
 8008d04:	47b0      	blx	r6
 8008d06:	3001      	adds	r0, #1
 8008d08:	d100      	bne.n	8008d0c <_printf_float+0x3d0>
 8008d0a:	e675      	b.n	80089f8 <_printf_float+0xbc>
 8008d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d0e:	3301      	adds	r3, #1
 8008d10:	930e      	str	r3, [sp, #56]	; 0x38
 8008d12:	e7b0      	b.n	8008c76 <_printf_float+0x33a>
 8008d14:	0038      	movs	r0, r7
 8008d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d1a:	9908      	ldr	r1, [sp, #32]
 8008d1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d1e:	47b0      	blx	r6
 8008d20:	3001      	adds	r0, #1
 8008d22:	d1b9      	bne.n	8008c98 <_printf_float+0x35c>
 8008d24:	e668      	b.n	80089f8 <_printf_float+0xbc>
 8008d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d28:	0038      	movs	r0, r7
 8008d2a:	18ea      	adds	r2, r5, r3
 8008d2c:	9908      	ldr	r1, [sp, #32]
 8008d2e:	0033      	movs	r3, r6
 8008d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d32:	47a8      	blx	r5
 8008d34:	3001      	adds	r0, #1
 8008d36:	d1b9      	bne.n	8008cac <_printf_float+0x370>
 8008d38:	e65e      	b.n	80089f8 <_printf_float+0xbc>
 8008d3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	dc02      	bgt.n	8008d46 <_printf_float+0x40a>
 8008d40:	2301      	movs	r3, #1
 8008d42:	421a      	tst	r2, r3
 8008d44:	d03a      	beq.n	8008dbc <_printf_float+0x480>
 8008d46:	2301      	movs	r3, #1
 8008d48:	002a      	movs	r2, r5
 8008d4a:	0038      	movs	r0, r7
 8008d4c:	9908      	ldr	r1, [sp, #32]
 8008d4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d50:	47b0      	blx	r6
 8008d52:	3001      	adds	r0, #1
 8008d54:	d100      	bne.n	8008d58 <_printf_float+0x41c>
 8008d56:	e64f      	b.n	80089f8 <_printf_float+0xbc>
 8008d58:	0038      	movs	r0, r7
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d5e:	9908      	ldr	r1, [sp, #32]
 8008d60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d62:	47b0      	blx	r6
 8008d64:	3001      	adds	r0, #1
 8008d66:	d100      	bne.n	8008d6a <_printf_float+0x42e>
 8008d68:	e646      	b.n	80089f8 <_printf_float+0xbc>
 8008d6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d70:	2200      	movs	r2, #0
 8008d72:	001e      	movs	r6, r3
 8008d74:	2300      	movs	r3, #0
 8008d76:	f7f7 fb69 	bl	800044c <__aeabi_dcmpeq>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d11c      	bne.n	8008db8 <_printf_float+0x47c>
 8008d7e:	0033      	movs	r3, r6
 8008d80:	1c6a      	adds	r2, r5, #1
 8008d82:	3b01      	subs	r3, #1
 8008d84:	0038      	movs	r0, r7
 8008d86:	9908      	ldr	r1, [sp, #32]
 8008d88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d8a:	47a8      	blx	r5
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d10f      	bne.n	8008db0 <_printf_float+0x474>
 8008d90:	e632      	b.n	80089f8 <_printf_float+0xbc>
 8008d92:	0022      	movs	r2, r4
 8008d94:	2301      	movs	r3, #1
 8008d96:	0038      	movs	r0, r7
 8008d98:	9908      	ldr	r1, [sp, #32]
 8008d9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d9c:	321a      	adds	r2, #26
 8008d9e:	47b0      	blx	r6
 8008da0:	3001      	adds	r0, #1
 8008da2:	d100      	bne.n	8008da6 <_printf_float+0x46a>
 8008da4:	e628      	b.n	80089f8 <_printf_float+0xbc>
 8008da6:	3501      	adds	r5, #1
 8008da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008daa:	3b01      	subs	r3, #1
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	dcf0      	bgt.n	8008d92 <_printf_float+0x456>
 8008db0:	0022      	movs	r2, r4
 8008db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db4:	3250      	adds	r2, #80	; 0x50
 8008db6:	e6c8      	b.n	8008b4a <_printf_float+0x20e>
 8008db8:	2500      	movs	r5, #0
 8008dba:	e7f5      	b.n	8008da8 <_printf_float+0x46c>
 8008dbc:	002a      	movs	r2, r5
 8008dbe:	e7e1      	b.n	8008d84 <_printf_float+0x448>
 8008dc0:	0022      	movs	r2, r4
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	0038      	movs	r0, r7
 8008dc6:	9908      	ldr	r1, [sp, #32]
 8008dc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dca:	3219      	adds	r2, #25
 8008dcc:	47b0      	blx	r6
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d100      	bne.n	8008dd4 <_printf_float+0x498>
 8008dd2:	e611      	b.n	80089f8 <_printf_float+0xbc>
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dcef      	bgt.n	8008dc0 <_printf_float+0x484>
 8008de0:	e6e8      	b.n	8008bb4 <_printf_float+0x278>
 8008de2:	2500      	movs	r5, #0
 8008de4:	e7f7      	b.n	8008dd6 <_printf_float+0x49a>
 8008de6:	46c0      	nop			; (mov r8, r8)

08008de8 <_printf_common>:
 8008de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dea:	0016      	movs	r6, r2
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	688a      	ldr	r2, [r1, #8]
 8008df0:	690b      	ldr	r3, [r1, #16]
 8008df2:	000c      	movs	r4, r1
 8008df4:	9000      	str	r0, [sp, #0]
 8008df6:	4293      	cmp	r3, r2
 8008df8:	da00      	bge.n	8008dfc <_printf_common+0x14>
 8008dfa:	0013      	movs	r3, r2
 8008dfc:	0022      	movs	r2, r4
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	3243      	adds	r2, #67	; 0x43
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	d001      	beq.n	8008e0c <_printf_common+0x24>
 8008e08:	3301      	adds	r3, #1
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	069b      	lsls	r3, r3, #26
 8008e10:	d502      	bpl.n	8008e18 <_printf_common+0x30>
 8008e12:	6833      	ldr	r3, [r6, #0]
 8008e14:	3302      	adds	r3, #2
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	6822      	ldr	r2, [r4, #0]
 8008e1a:	2306      	movs	r3, #6
 8008e1c:	0015      	movs	r5, r2
 8008e1e:	401d      	ands	r5, r3
 8008e20:	421a      	tst	r2, r3
 8008e22:	d027      	beq.n	8008e74 <_printf_common+0x8c>
 8008e24:	0023      	movs	r3, r4
 8008e26:	3343      	adds	r3, #67	; 0x43
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	1e5a      	subs	r2, r3, #1
 8008e2c:	4193      	sbcs	r3, r2
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	0692      	lsls	r2, r2, #26
 8008e32:	d430      	bmi.n	8008e96 <_printf_common+0xae>
 8008e34:	0022      	movs	r2, r4
 8008e36:	9901      	ldr	r1, [sp, #4]
 8008e38:	9800      	ldr	r0, [sp, #0]
 8008e3a:	9d08      	ldr	r5, [sp, #32]
 8008e3c:	3243      	adds	r2, #67	; 0x43
 8008e3e:	47a8      	blx	r5
 8008e40:	3001      	adds	r0, #1
 8008e42:	d025      	beq.n	8008e90 <_printf_common+0xa8>
 8008e44:	2206      	movs	r2, #6
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	2500      	movs	r5, #0
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d105      	bne.n	8008e5c <_printf_common+0x74>
 8008e50:	6833      	ldr	r3, [r6, #0]
 8008e52:	68e5      	ldr	r5, [r4, #12]
 8008e54:	1aed      	subs	r5, r5, r3
 8008e56:	43eb      	mvns	r3, r5
 8008e58:	17db      	asrs	r3, r3, #31
 8008e5a:	401d      	ands	r5, r3
 8008e5c:	68a3      	ldr	r3, [r4, #8]
 8008e5e:	6922      	ldr	r2, [r4, #16]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	dd01      	ble.n	8008e68 <_printf_common+0x80>
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	18ed      	adds	r5, r5, r3
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42b5      	cmp	r5, r6
 8008e6c:	d120      	bne.n	8008eb0 <_printf_common+0xc8>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e010      	b.n	8008e94 <_printf_common+0xac>
 8008e72:	3501      	adds	r5, #1
 8008e74:	68e3      	ldr	r3, [r4, #12]
 8008e76:	6832      	ldr	r2, [r6, #0]
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	42ab      	cmp	r3, r5
 8008e7c:	ddd2      	ble.n	8008e24 <_printf_common+0x3c>
 8008e7e:	0022      	movs	r2, r4
 8008e80:	2301      	movs	r3, #1
 8008e82:	9901      	ldr	r1, [sp, #4]
 8008e84:	9800      	ldr	r0, [sp, #0]
 8008e86:	9f08      	ldr	r7, [sp, #32]
 8008e88:	3219      	adds	r2, #25
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d1f0      	bne.n	8008e72 <_printf_common+0x8a>
 8008e90:	2001      	movs	r0, #1
 8008e92:	4240      	negs	r0, r0
 8008e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e96:	2030      	movs	r0, #48	; 0x30
 8008e98:	18e1      	adds	r1, r4, r3
 8008e9a:	3143      	adds	r1, #67	; 0x43
 8008e9c:	7008      	strb	r0, [r1, #0]
 8008e9e:	0021      	movs	r1, r4
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	3145      	adds	r1, #69	; 0x45
 8008ea4:	7809      	ldrb	r1, [r1, #0]
 8008ea6:	18a2      	adds	r2, r4, r2
 8008ea8:	3243      	adds	r2, #67	; 0x43
 8008eaa:	3302      	adds	r3, #2
 8008eac:	7011      	strb	r1, [r2, #0]
 8008eae:	e7c1      	b.n	8008e34 <_printf_common+0x4c>
 8008eb0:	0022      	movs	r2, r4
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9901      	ldr	r1, [sp, #4]
 8008eb6:	9800      	ldr	r0, [sp, #0]
 8008eb8:	9f08      	ldr	r7, [sp, #32]
 8008eba:	321a      	adds	r2, #26
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d0e6      	beq.n	8008e90 <_printf_common+0xa8>
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7d1      	b.n	8008e6a <_printf_common+0x82>
	...

08008ec8 <_printf_i>:
 8008ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eca:	b08b      	sub	sp, #44	; 0x2c
 8008ecc:	9206      	str	r2, [sp, #24]
 8008ece:	000a      	movs	r2, r1
 8008ed0:	3243      	adds	r2, #67	; 0x43
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	9005      	str	r0, [sp, #20]
 8008ed6:	9204      	str	r2, [sp, #16]
 8008ed8:	7e0a      	ldrb	r2, [r1, #24]
 8008eda:	000c      	movs	r4, r1
 8008edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ede:	2a78      	cmp	r2, #120	; 0x78
 8008ee0:	d809      	bhi.n	8008ef6 <_printf_i+0x2e>
 8008ee2:	2a62      	cmp	r2, #98	; 0x62
 8008ee4:	d80b      	bhi.n	8008efe <_printf_i+0x36>
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	d100      	bne.n	8008eec <_printf_i+0x24>
 8008eea:	e0be      	b.n	800906a <_printf_i+0x1a2>
 8008eec:	497c      	ldr	r1, [pc, #496]	; (80090e0 <_printf_i+0x218>)
 8008eee:	9103      	str	r1, [sp, #12]
 8008ef0:	2a58      	cmp	r2, #88	; 0x58
 8008ef2:	d100      	bne.n	8008ef6 <_printf_i+0x2e>
 8008ef4:	e093      	b.n	800901e <_printf_i+0x156>
 8008ef6:	0026      	movs	r6, r4
 8008ef8:	3642      	adds	r6, #66	; 0x42
 8008efa:	7032      	strb	r2, [r6, #0]
 8008efc:	e022      	b.n	8008f44 <_printf_i+0x7c>
 8008efe:	0010      	movs	r0, r2
 8008f00:	3863      	subs	r0, #99	; 0x63
 8008f02:	2815      	cmp	r0, #21
 8008f04:	d8f7      	bhi.n	8008ef6 <_printf_i+0x2e>
 8008f06:	f7f7 f911 	bl	800012c <__gnu_thumb1_case_shi>
 8008f0a:	0016      	.short	0x0016
 8008f0c:	fff6001f 	.word	0xfff6001f
 8008f10:	fff6fff6 	.word	0xfff6fff6
 8008f14:	001ffff6 	.word	0x001ffff6
 8008f18:	fff6fff6 	.word	0xfff6fff6
 8008f1c:	fff6fff6 	.word	0xfff6fff6
 8008f20:	003600a3 	.word	0x003600a3
 8008f24:	fff60083 	.word	0xfff60083
 8008f28:	00b4fff6 	.word	0x00b4fff6
 8008f2c:	0036fff6 	.word	0x0036fff6
 8008f30:	fff6fff6 	.word	0xfff6fff6
 8008f34:	0087      	.short	0x0087
 8008f36:	0026      	movs	r6, r4
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	3642      	adds	r6, #66	; 0x42
 8008f3c:	1d11      	adds	r1, r2, #4
 8008f3e:	6019      	str	r1, [r3, #0]
 8008f40:	6813      	ldr	r3, [r2, #0]
 8008f42:	7033      	strb	r3, [r6, #0]
 8008f44:	2301      	movs	r3, #1
 8008f46:	e0a2      	b.n	800908e <_printf_i+0x1c6>
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	6809      	ldr	r1, [r1, #0]
 8008f4c:	1d02      	adds	r2, r0, #4
 8008f4e:	060d      	lsls	r5, r1, #24
 8008f50:	d50b      	bpl.n	8008f6a <_printf_i+0xa2>
 8008f52:	6805      	ldr	r5, [r0, #0]
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	2d00      	cmp	r5, #0
 8008f58:	da03      	bge.n	8008f62 <_printf_i+0x9a>
 8008f5a:	232d      	movs	r3, #45	; 0x2d
 8008f5c:	9a04      	ldr	r2, [sp, #16]
 8008f5e:	426d      	negs	r5, r5
 8008f60:	7013      	strb	r3, [r2, #0]
 8008f62:	4b5f      	ldr	r3, [pc, #380]	; (80090e0 <_printf_i+0x218>)
 8008f64:	270a      	movs	r7, #10
 8008f66:	9303      	str	r3, [sp, #12]
 8008f68:	e01b      	b.n	8008fa2 <_printf_i+0xda>
 8008f6a:	6805      	ldr	r5, [r0, #0]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	0649      	lsls	r1, r1, #25
 8008f70:	d5f1      	bpl.n	8008f56 <_printf_i+0x8e>
 8008f72:	b22d      	sxth	r5, r5
 8008f74:	e7ef      	b.n	8008f56 <_printf_i+0x8e>
 8008f76:	680d      	ldr	r5, [r1, #0]
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	1d08      	adds	r0, r1, #4
 8008f7c:	6018      	str	r0, [r3, #0]
 8008f7e:	062e      	lsls	r6, r5, #24
 8008f80:	d501      	bpl.n	8008f86 <_printf_i+0xbe>
 8008f82:	680d      	ldr	r5, [r1, #0]
 8008f84:	e003      	b.n	8008f8e <_printf_i+0xc6>
 8008f86:	066d      	lsls	r5, r5, #25
 8008f88:	d5fb      	bpl.n	8008f82 <_printf_i+0xba>
 8008f8a:	680d      	ldr	r5, [r1, #0]
 8008f8c:	b2ad      	uxth	r5, r5
 8008f8e:	4b54      	ldr	r3, [pc, #336]	; (80090e0 <_printf_i+0x218>)
 8008f90:	2708      	movs	r7, #8
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	2a6f      	cmp	r2, #111	; 0x6f
 8008f96:	d000      	beq.n	8008f9a <_printf_i+0xd2>
 8008f98:	3702      	adds	r7, #2
 8008f9a:	0023      	movs	r3, r4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	3343      	adds	r3, #67	; 0x43
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	db03      	blt.n	8008fb2 <_printf_i+0xea>
 8008faa:	2104      	movs	r1, #4
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	438a      	bics	r2, r1
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	d102      	bne.n	8008fbc <_printf_i+0xf4>
 8008fb6:	9e04      	ldr	r6, [sp, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <_printf_i+0x10e>
 8008fbc:	9e04      	ldr	r6, [sp, #16]
 8008fbe:	0028      	movs	r0, r5
 8008fc0:	0039      	movs	r1, r7
 8008fc2:	f7f7 f943 	bl	800024c <__aeabi_uidivmod>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	3e01      	subs	r6, #1
 8008fca:	5c5b      	ldrb	r3, [r3, r1]
 8008fcc:	7033      	strb	r3, [r6, #0]
 8008fce:	002b      	movs	r3, r5
 8008fd0:	0005      	movs	r5, r0
 8008fd2:	429f      	cmp	r7, r3
 8008fd4:	d9f3      	bls.n	8008fbe <_printf_i+0xf6>
 8008fd6:	2f08      	cmp	r7, #8
 8008fd8:	d109      	bne.n	8008fee <_printf_i+0x126>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	07db      	lsls	r3, r3, #31
 8008fde:	d506      	bpl.n	8008fee <_printf_i+0x126>
 8008fe0:	6862      	ldr	r2, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	dc02      	bgt.n	8008fee <_printf_i+0x126>
 8008fe8:	2330      	movs	r3, #48	; 0x30
 8008fea:	3e01      	subs	r6, #1
 8008fec:	7033      	strb	r3, [r6, #0]
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	1b9b      	subs	r3, r3, r6
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	0021      	movs	r1, r4
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	9805      	ldr	r0, [sp, #20]
 8008ffc:	9b06      	ldr	r3, [sp, #24]
 8008ffe:	aa09      	add	r2, sp, #36	; 0x24
 8009000:	f7ff fef2 	bl	8008de8 <_printf_common>
 8009004:	3001      	adds	r0, #1
 8009006:	d147      	bne.n	8009098 <_printf_i+0x1d0>
 8009008:	2001      	movs	r0, #1
 800900a:	4240      	negs	r0, r0
 800900c:	b00b      	add	sp, #44	; 0x2c
 800900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009010:	2220      	movs	r2, #32
 8009012:	6809      	ldr	r1, [r1, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	2278      	movs	r2, #120	; 0x78
 800901a:	4932      	ldr	r1, [pc, #200]	; (80090e4 <_printf_i+0x21c>)
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	0021      	movs	r1, r4
 8009020:	3145      	adds	r1, #69	; 0x45
 8009022:	700a      	strb	r2, [r1, #0]
 8009024:	6819      	ldr	r1, [r3, #0]
 8009026:	6822      	ldr	r2, [r4, #0]
 8009028:	c920      	ldmia	r1!, {r5}
 800902a:	0610      	lsls	r0, r2, #24
 800902c:	d402      	bmi.n	8009034 <_printf_i+0x16c>
 800902e:	0650      	lsls	r0, r2, #25
 8009030:	d500      	bpl.n	8009034 <_printf_i+0x16c>
 8009032:	b2ad      	uxth	r5, r5
 8009034:	6019      	str	r1, [r3, #0]
 8009036:	07d3      	lsls	r3, r2, #31
 8009038:	d502      	bpl.n	8009040 <_printf_i+0x178>
 800903a:	2320      	movs	r3, #32
 800903c:	4313      	orrs	r3, r2
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	2710      	movs	r7, #16
 8009042:	2d00      	cmp	r5, #0
 8009044:	d1a9      	bne.n	8008f9a <_printf_i+0xd2>
 8009046:	2220      	movs	r2, #32
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	4393      	bics	r3, r2
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	e7a4      	b.n	8008f9a <_printf_i+0xd2>
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	680d      	ldr	r5, [r1, #0]
 8009054:	1d10      	adds	r0, r2, #4
 8009056:	6949      	ldr	r1, [r1, #20]
 8009058:	6018      	str	r0, [r3, #0]
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	062e      	lsls	r6, r5, #24
 800905e:	d501      	bpl.n	8009064 <_printf_i+0x19c>
 8009060:	6019      	str	r1, [r3, #0]
 8009062:	e002      	b.n	800906a <_printf_i+0x1a2>
 8009064:	066d      	lsls	r5, r5, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0x198>
 8009068:	8019      	strh	r1, [r3, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	9e04      	ldr	r6, [sp, #16]
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	e7c0      	b.n	8008ff4 <_printf_i+0x12c>
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	1d11      	adds	r1, r2, #4
 8009076:	6019      	str	r1, [r3, #0]
 8009078:	6816      	ldr	r6, [r2, #0]
 800907a:	2100      	movs	r1, #0
 800907c:	0030      	movs	r0, r6
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	f000 f9e9 	bl	8009456 <memchr>
 8009084:	2800      	cmp	r0, #0
 8009086:	d001      	beq.n	800908c <_printf_i+0x1c4>
 8009088:	1b80      	subs	r0, r0, r6
 800908a:	6060      	str	r0, [r4, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	2300      	movs	r3, #0
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	7013      	strb	r3, [r2, #0]
 8009096:	e7ad      	b.n	8008ff4 <_printf_i+0x12c>
 8009098:	0032      	movs	r2, r6
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	9906      	ldr	r1, [sp, #24]
 800909e:	9805      	ldr	r0, [sp, #20]
 80090a0:	9d07      	ldr	r5, [sp, #28]
 80090a2:	47a8      	blx	r5
 80090a4:	3001      	adds	r0, #1
 80090a6:	d0af      	beq.n	8009008 <_printf_i+0x140>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	079b      	lsls	r3, r3, #30
 80090ac:	d415      	bmi.n	80090da <_printf_i+0x212>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	4298      	cmp	r0, r3
 80090b4:	daaa      	bge.n	800900c <_printf_i+0x144>
 80090b6:	0018      	movs	r0, r3
 80090b8:	e7a8      	b.n	800900c <_printf_i+0x144>
 80090ba:	0022      	movs	r2, r4
 80090bc:	2301      	movs	r3, #1
 80090be:	9906      	ldr	r1, [sp, #24]
 80090c0:	9805      	ldr	r0, [sp, #20]
 80090c2:	9e07      	ldr	r6, [sp, #28]
 80090c4:	3219      	adds	r2, #25
 80090c6:	47b0      	blx	r6
 80090c8:	3001      	adds	r0, #1
 80090ca:	d09d      	beq.n	8009008 <_printf_i+0x140>
 80090cc:	3501      	adds	r5, #1
 80090ce:	68e3      	ldr	r3, [r4, #12]
 80090d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	dcf0      	bgt.n	80090ba <_printf_i+0x1f2>
 80090d8:	e7e9      	b.n	80090ae <_printf_i+0x1e6>
 80090da:	2500      	movs	r5, #0
 80090dc:	e7f7      	b.n	80090ce <_printf_i+0x206>
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	0800b826 	.word	0x0800b826
 80090e4:	0800b837 	.word	0x0800b837

080090e8 <std>:
 80090e8:	2300      	movs	r3, #0
 80090ea:	b510      	push	{r4, lr}
 80090ec:	0004      	movs	r4, r0
 80090ee:	6003      	str	r3, [r0, #0]
 80090f0:	6043      	str	r3, [r0, #4]
 80090f2:	6083      	str	r3, [r0, #8]
 80090f4:	8181      	strh	r1, [r0, #12]
 80090f6:	6643      	str	r3, [r0, #100]	; 0x64
 80090f8:	81c2      	strh	r2, [r0, #14]
 80090fa:	6103      	str	r3, [r0, #16]
 80090fc:	6143      	str	r3, [r0, #20]
 80090fe:	6183      	str	r3, [r0, #24]
 8009100:	0019      	movs	r1, r3
 8009102:	2208      	movs	r2, #8
 8009104:	305c      	adds	r0, #92	; 0x5c
 8009106:	f000 f91f 	bl	8009348 <memset>
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <std+0x50>)
 800910c:	6224      	str	r4, [r4, #32]
 800910e:	6263      	str	r3, [r4, #36]	; 0x24
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <std+0x54>)
 8009112:	62a3      	str	r3, [r4, #40]	; 0x28
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <std+0x58>)
 8009116:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <std+0x5c>)
 800911a:	6323      	str	r3, [r4, #48]	; 0x30
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <std+0x60>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d005      	beq.n	800912e <std+0x46>
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <std+0x64>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d002      	beq.n	800912e <std+0x46>
 8009128:	4b09      	ldr	r3, [pc, #36]	; (8009150 <std+0x68>)
 800912a:	429c      	cmp	r4, r3
 800912c:	d103      	bne.n	8009136 <std+0x4e>
 800912e:	0020      	movs	r0, r4
 8009130:	3058      	adds	r0, #88	; 0x58
 8009132:	f000 f98d 	bl	8009450 <__retarget_lock_init_recursive>
 8009136:	bd10      	pop	{r4, pc}
 8009138:	080092b1 	.word	0x080092b1
 800913c:	080092d9 	.word	0x080092d9
 8009140:	08009311 	.word	0x08009311
 8009144:	0800933d 	.word	0x0800933d
 8009148:	200004c0 	.word	0x200004c0
 800914c:	20000528 	.word	0x20000528
 8009150:	20000590 	.word	0x20000590

08009154 <stdio_exit_handler>:
 8009154:	b510      	push	{r4, lr}
 8009156:	4a03      	ldr	r2, [pc, #12]	; (8009164 <stdio_exit_handler+0x10>)
 8009158:	4903      	ldr	r1, [pc, #12]	; (8009168 <stdio_exit_handler+0x14>)
 800915a:	4804      	ldr	r0, [pc, #16]	; (800916c <stdio_exit_handler+0x18>)
 800915c:	f000 f86c 	bl	8009238 <_fwalk_sglue>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	2000000c 	.word	0x2000000c
 8009168:	0800aec5 	.word	0x0800aec5
 800916c:	20000018 	.word	0x20000018

08009170 <cleanup_stdio>:
 8009170:	6841      	ldr	r1, [r0, #4]
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <cleanup_stdio+0x30>)
 8009174:	b510      	push	{r4, lr}
 8009176:	0004      	movs	r4, r0
 8009178:	4299      	cmp	r1, r3
 800917a:	d001      	beq.n	8009180 <cleanup_stdio+0x10>
 800917c:	f001 fea2 	bl	800aec4 <_fflush_r>
 8009180:	68a1      	ldr	r1, [r4, #8]
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <cleanup_stdio+0x34>)
 8009184:	4299      	cmp	r1, r3
 8009186:	d002      	beq.n	800918e <cleanup_stdio+0x1e>
 8009188:	0020      	movs	r0, r4
 800918a:	f001 fe9b 	bl	800aec4 <_fflush_r>
 800918e:	68e1      	ldr	r1, [r4, #12]
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <cleanup_stdio+0x38>)
 8009192:	4299      	cmp	r1, r3
 8009194:	d002      	beq.n	800919c <cleanup_stdio+0x2c>
 8009196:	0020      	movs	r0, r4
 8009198:	f001 fe94 	bl	800aec4 <_fflush_r>
 800919c:	bd10      	pop	{r4, pc}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	200004c0 	.word	0x200004c0
 80091a4:	20000528 	.word	0x20000528
 80091a8:	20000590 	.word	0x20000590

080091ac <global_stdio_init.part.0>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <global_stdio_init.part.0+0x28>)
 80091b0:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <global_stdio_init.part.0+0x2c>)
 80091b2:	2104      	movs	r1, #4
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	4809      	ldr	r0, [pc, #36]	; (80091dc <global_stdio_init.part.0+0x30>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	f7ff ff95 	bl	80090e8 <std>
 80091be:	2201      	movs	r2, #1
 80091c0:	2109      	movs	r1, #9
 80091c2:	4807      	ldr	r0, [pc, #28]	; (80091e0 <global_stdio_init.part.0+0x34>)
 80091c4:	f7ff ff90 	bl	80090e8 <std>
 80091c8:	2202      	movs	r2, #2
 80091ca:	2112      	movs	r1, #18
 80091cc:	4805      	ldr	r0, [pc, #20]	; (80091e4 <global_stdio_init.part.0+0x38>)
 80091ce:	f7ff ff8b 	bl	80090e8 <std>
 80091d2:	bd10      	pop	{r4, pc}
 80091d4:	200005f8 	.word	0x200005f8
 80091d8:	08009155 	.word	0x08009155
 80091dc:	200004c0 	.word	0x200004c0
 80091e0:	20000528 	.word	0x20000528
 80091e4:	20000590 	.word	0x20000590

080091e8 <__sfp_lock_acquire>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	4802      	ldr	r0, [pc, #8]	; (80091f4 <__sfp_lock_acquire+0xc>)
 80091ec:	f000 f931 	bl	8009452 <__retarget_lock_acquire_recursive>
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	20000601 	.word	0x20000601

080091f8 <__sfp_lock_release>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	4802      	ldr	r0, [pc, #8]	; (8009204 <__sfp_lock_release+0xc>)
 80091fc:	f000 f92a 	bl	8009454 <__retarget_lock_release_recursive>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	20000601 	.word	0x20000601

08009208 <__sinit>:
 8009208:	b510      	push	{r4, lr}
 800920a:	0004      	movs	r4, r0
 800920c:	f7ff ffec 	bl	80091e8 <__sfp_lock_acquire>
 8009210:	6a23      	ldr	r3, [r4, #32]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <__sinit+0x14>
 8009216:	f7ff ffef 	bl	80091f8 <__sfp_lock_release>
 800921a:	bd10      	pop	{r4, pc}
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <__sinit+0x28>)
 800921e:	6223      	str	r3, [r4, #32]
 8009220:	4b04      	ldr	r3, [pc, #16]	; (8009234 <__sinit+0x2c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f6      	bne.n	8009216 <__sinit+0xe>
 8009228:	f7ff ffc0 	bl	80091ac <global_stdio_init.part.0>
 800922c:	e7f3      	b.n	8009216 <__sinit+0xe>
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	08009171 	.word	0x08009171
 8009234:	200005f8 	.word	0x200005f8

08009238 <_fwalk_sglue>:
 8009238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800923a:	0014      	movs	r4, r2
 800923c:	2600      	movs	r6, #0
 800923e:	9000      	str	r0, [sp, #0]
 8009240:	9101      	str	r1, [sp, #4]
 8009242:	68a5      	ldr	r5, [r4, #8]
 8009244:	6867      	ldr	r7, [r4, #4]
 8009246:	3f01      	subs	r7, #1
 8009248:	d504      	bpl.n	8009254 <_fwalk_sglue+0x1c>
 800924a:	6824      	ldr	r4, [r4, #0]
 800924c:	2c00      	cmp	r4, #0
 800924e:	d1f8      	bne.n	8009242 <_fwalk_sglue+0xa>
 8009250:	0030      	movs	r0, r6
 8009252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009254:	89ab      	ldrh	r3, [r5, #12]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d908      	bls.n	800926c <_fwalk_sglue+0x34>
 800925a:	220e      	movs	r2, #14
 800925c:	5eab      	ldrsh	r3, [r5, r2]
 800925e:	3301      	adds	r3, #1
 8009260:	d004      	beq.n	800926c <_fwalk_sglue+0x34>
 8009262:	0029      	movs	r1, r5
 8009264:	9800      	ldr	r0, [sp, #0]
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	4798      	blx	r3
 800926a:	4306      	orrs	r6, r0
 800926c:	3568      	adds	r5, #104	; 0x68
 800926e:	e7ea      	b.n	8009246 <_fwalk_sglue+0xe>

08009270 <siprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	b500      	push	{lr}
 8009274:	490b      	ldr	r1, [pc, #44]	; (80092a4 <siprintf+0x34>)
 8009276:	b09c      	sub	sp, #112	; 0x70
 8009278:	ab1d      	add	r3, sp, #116	; 0x74
 800927a:	9002      	str	r0, [sp, #8]
 800927c:	9006      	str	r0, [sp, #24]
 800927e:	9107      	str	r1, [sp, #28]
 8009280:	9104      	str	r1, [sp, #16]
 8009282:	4809      	ldr	r0, [pc, #36]	; (80092a8 <siprintf+0x38>)
 8009284:	4909      	ldr	r1, [pc, #36]	; (80092ac <siprintf+0x3c>)
 8009286:	cb04      	ldmia	r3!, {r2}
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	a902      	add	r1, sp, #8
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	f001 fc8e 	bl	800abb0 <_svfiprintf_r>
 8009294:	2200      	movs	r2, #0
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	b01c      	add	sp, #112	; 0x70
 800929c:	bc08      	pop	{r3}
 800929e:	b003      	add	sp, #12
 80092a0:	4718      	bx	r3
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	7fffffff 	.word	0x7fffffff
 80092a8:	20000064 	.word	0x20000064
 80092ac:	ffff0208 	.word	0xffff0208

080092b0 <__sread>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	000c      	movs	r4, r1
 80092b4:	250e      	movs	r5, #14
 80092b6:	5f49      	ldrsh	r1, [r1, r5]
 80092b8:	f000 f878 	bl	80093ac <_read_r>
 80092bc:	2800      	cmp	r0, #0
 80092be:	db03      	blt.n	80092c8 <__sread+0x18>
 80092c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092c2:	181b      	adds	r3, r3, r0
 80092c4:	6563      	str	r3, [r4, #84]	; 0x54
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	4a02      	ldr	r2, [pc, #8]	; (80092d4 <__sread+0x24>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	81a3      	strh	r3, [r4, #12]
 80092d0:	e7f9      	b.n	80092c6 <__sread+0x16>
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	ffffefff 	.word	0xffffefff

080092d8 <__swrite>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	001f      	movs	r7, r3
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	0005      	movs	r5, r0
 80092e0:	000c      	movs	r4, r1
 80092e2:	0016      	movs	r6, r2
 80092e4:	05db      	lsls	r3, r3, #23
 80092e6:	d505      	bpl.n	80092f4 <__swrite+0x1c>
 80092e8:	230e      	movs	r3, #14
 80092ea:	5ec9      	ldrsh	r1, [r1, r3]
 80092ec:	2200      	movs	r2, #0
 80092ee:	2302      	movs	r3, #2
 80092f0:	f000 f848 	bl	8009384 <_lseek_r>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	4a05      	ldr	r2, [pc, #20]	; (800930c <__swrite+0x34>)
 80092f8:	0028      	movs	r0, r5
 80092fa:	4013      	ands	r3, r2
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	0032      	movs	r2, r6
 8009300:	230e      	movs	r3, #14
 8009302:	5ee1      	ldrsh	r1, [r4, r3]
 8009304:	003b      	movs	r3, r7
 8009306:	f000 f865 	bl	80093d4 <_write_r>
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	ffffefff 	.word	0xffffefff

08009310 <__sseek>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	000c      	movs	r4, r1
 8009314:	250e      	movs	r5, #14
 8009316:	5f49      	ldrsh	r1, [r1, r5]
 8009318:	f000 f834 	bl	8009384 <_lseek_r>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	1c42      	adds	r2, r0, #1
 8009320:	d103      	bne.n	800932a <__sseek+0x1a>
 8009322:	4a05      	ldr	r2, [pc, #20]	; (8009338 <__sseek+0x28>)
 8009324:	4013      	ands	r3, r2
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	2280      	movs	r2, #128	; 0x80
 800932c:	0152      	lsls	r2, r2, #5
 800932e:	4313      	orrs	r3, r2
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	6560      	str	r0, [r4, #84]	; 0x54
 8009334:	e7f8      	b.n	8009328 <__sseek+0x18>
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	ffffefff 	.word	0xffffefff

0800933c <__sclose>:
 800933c:	b510      	push	{r4, lr}
 800933e:	230e      	movs	r3, #14
 8009340:	5ec9      	ldrsh	r1, [r1, r3]
 8009342:	f000 f80d 	bl	8009360 <_close_r>
 8009346:	bd10      	pop	{r4, pc}

08009348 <memset>:
 8009348:	0003      	movs	r3, r0
 800934a:	1882      	adds	r2, r0, r2
 800934c:	4293      	cmp	r3, r2
 800934e:	d100      	bne.n	8009352 <memset+0xa>
 8009350:	4770      	bx	lr
 8009352:	7019      	strb	r1, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	e7f9      	b.n	800934c <memset+0x4>

08009358 <_localeconv_r>:
 8009358:	4800      	ldr	r0, [pc, #0]	; (800935c <_localeconv_r+0x4>)
 800935a:	4770      	bx	lr
 800935c:	20000158 	.word	0x20000158

08009360 <_close_r>:
 8009360:	2300      	movs	r3, #0
 8009362:	b570      	push	{r4, r5, r6, lr}
 8009364:	4d06      	ldr	r5, [pc, #24]	; (8009380 <_close_r+0x20>)
 8009366:	0004      	movs	r4, r0
 8009368:	0008      	movs	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7fa fb07 	bl	800397e <_close>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d103      	bne.n	800937c <_close_r+0x1c>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d000      	beq.n	800937c <_close_r+0x1c>
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	200005fc 	.word	0x200005fc

08009384 <_lseek_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	0004      	movs	r4, r0
 8009388:	0008      	movs	r0, r1
 800938a:	0011      	movs	r1, r2
 800938c:	001a      	movs	r2, r3
 800938e:	2300      	movs	r3, #0
 8009390:	4d05      	ldr	r5, [pc, #20]	; (80093a8 <_lseek_r+0x24>)
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7fa fb14 	bl	80039c0 <_lseek>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d103      	bne.n	80093a4 <_lseek_r+0x20>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d000      	beq.n	80093a4 <_lseek_r+0x20>
 80093a2:	6023      	str	r3, [r4, #0]
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	200005fc 	.word	0x200005fc

080093ac <_read_r>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	0004      	movs	r4, r0
 80093b0:	0008      	movs	r0, r1
 80093b2:	0011      	movs	r1, r2
 80093b4:	001a      	movs	r2, r3
 80093b6:	2300      	movs	r3, #0
 80093b8:	4d05      	ldr	r5, [pc, #20]	; (80093d0 <_read_r+0x24>)
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7fa faa6 	bl	800390c <_read>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d103      	bne.n	80093cc <_read_r+0x20>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d000      	beq.n	80093cc <_read_r+0x20>
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	200005fc 	.word	0x200005fc

080093d4 <_write_r>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	0004      	movs	r4, r0
 80093d8:	0008      	movs	r0, r1
 80093da:	0011      	movs	r1, r2
 80093dc:	001a      	movs	r2, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	4d05      	ldr	r5, [pc, #20]	; (80093f8 <_write_r+0x24>)
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7fa faaf 	bl	8003946 <_write>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d103      	bne.n	80093f4 <_write_r+0x20>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <_write_r+0x20>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	200005fc 	.word	0x200005fc

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	; (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	20000064 	.word	0x20000064

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	2600      	movs	r6, #0
 800940c:	4c0c      	ldr	r4, [pc, #48]	; (8009440 <__libc_init_array+0x38>)
 800940e:	4d0d      	ldr	r5, [pc, #52]	; (8009444 <__libc_init_array+0x3c>)
 8009410:	1b64      	subs	r4, r4, r5
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	2600      	movs	r6, #0
 800941a:	f002 f923 	bl	800b664 <_init>
 800941e:	4c0a      	ldr	r4, [pc, #40]	; (8009448 <__libc_init_array+0x40>)
 8009420:	4d0a      	ldr	r5, [pc, #40]	; (800944c <__libc_init_array+0x44>)
 8009422:	1b64      	subs	r4, r4, r5
 8009424:	10a4      	asrs	r4, r4, #2
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	00b3      	lsls	r3, r6, #2
 800942e:	58eb      	ldr	r3, [r5, r3]
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	00b3      	lsls	r3, r6, #2
 8009438:	58eb      	ldr	r3, [r5, r3]
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800bb8c 	.word	0x0800bb8c
 8009444:	0800bb8c 	.word	0x0800bb8c
 8009448:	0800bb90 	.word	0x0800bb90
 800944c:	0800bb8c 	.word	0x0800bb8c

08009450 <__retarget_lock_init_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_acquire_recursive>:
 8009452:	4770      	bx	lr

08009454 <__retarget_lock_release_recursive>:
 8009454:	4770      	bx	lr

08009456 <memchr>:
 8009456:	b2c9      	uxtb	r1, r1
 8009458:	1882      	adds	r2, r0, r2
 800945a:	4290      	cmp	r0, r2
 800945c:	d101      	bne.n	8009462 <memchr+0xc>
 800945e:	2000      	movs	r0, #0
 8009460:	4770      	bx	lr
 8009462:	7803      	ldrb	r3, [r0, #0]
 8009464:	428b      	cmp	r3, r1
 8009466:	d0fb      	beq.n	8009460 <memchr+0xa>
 8009468:	3001      	adds	r0, #1
 800946a:	e7f6      	b.n	800945a <memchr+0x4>

0800946c <quorem>:
 800946c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800946e:	6902      	ldr	r2, [r0, #16]
 8009470:	690b      	ldr	r3, [r1, #16]
 8009472:	b089      	sub	sp, #36	; 0x24
 8009474:	0007      	movs	r7, r0
 8009476:	9104      	str	r1, [sp, #16]
 8009478:	2000      	movs	r0, #0
 800947a:	429a      	cmp	r2, r3
 800947c:	db69      	blt.n	8009552 <quorem+0xe6>
 800947e:	3b01      	subs	r3, #1
 8009480:	009c      	lsls	r4, r3, #2
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	000b      	movs	r3, r1
 8009486:	3314      	adds	r3, #20
 8009488:	9306      	str	r3, [sp, #24]
 800948a:	191b      	adds	r3, r3, r4
 800948c:	9305      	str	r3, [sp, #20]
 800948e:	003b      	movs	r3, r7
 8009490:	3314      	adds	r3, #20
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	191c      	adds	r4, r3, r4
 8009496:	9b05      	ldr	r3, [sp, #20]
 8009498:	6826      	ldr	r6, [r4, #0]
 800949a:	681d      	ldr	r5, [r3, #0]
 800949c:	0030      	movs	r0, r6
 800949e:	3501      	adds	r5, #1
 80094a0:	0029      	movs	r1, r5
 80094a2:	f7f6 fe4d 	bl	8000140 <__udivsi3>
 80094a6:	9002      	str	r0, [sp, #8]
 80094a8:	42ae      	cmp	r6, r5
 80094aa:	d329      	bcc.n	8009500 <quorem+0x94>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	2600      	movs	r6, #0
 80094b0:	469c      	mov	ip, r3
 80094b2:	9d03      	ldr	r5, [sp, #12]
 80094b4:	9606      	str	r6, [sp, #24]
 80094b6:	4662      	mov	r2, ip
 80094b8:	ca08      	ldmia	r2!, {r3}
 80094ba:	6828      	ldr	r0, [r5, #0]
 80094bc:	4694      	mov	ip, r2
 80094be:	9a02      	ldr	r2, [sp, #8]
 80094c0:	b299      	uxth	r1, r3
 80094c2:	4351      	muls	r1, r2
 80094c4:	0c1b      	lsrs	r3, r3, #16
 80094c6:	4353      	muls	r3, r2
 80094c8:	1989      	adds	r1, r1, r6
 80094ca:	0c0a      	lsrs	r2, r1, #16
 80094cc:	189b      	adds	r3, r3, r2
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	0c1e      	lsrs	r6, r3, #16
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	b282      	uxth	r2, r0
 80094d6:	18d2      	adds	r2, r2, r3
 80094d8:	466b      	mov	r3, sp
 80094da:	b289      	uxth	r1, r1
 80094dc:	8b9b      	ldrh	r3, [r3, #28]
 80094de:	1a52      	subs	r2, r2, r1
 80094e0:	0c01      	lsrs	r1, r0, #16
 80094e2:	1ac9      	subs	r1, r1, r3
 80094e4:	1413      	asrs	r3, r2, #16
 80094e6:	18cb      	adds	r3, r1, r3
 80094e8:	1419      	asrs	r1, r3, #16
 80094ea:	b292      	uxth	r2, r2
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	4313      	orrs	r3, r2
 80094f0:	c508      	stmia	r5!, {r3}
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	9106      	str	r1, [sp, #24]
 80094f6:	4563      	cmp	r3, ip
 80094f8:	d2dd      	bcs.n	80094b6 <quorem+0x4a>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d030      	beq.n	8009562 <quorem+0xf6>
 8009500:	0038      	movs	r0, r7
 8009502:	9904      	ldr	r1, [sp, #16]
 8009504:	f001 f9de 	bl	800a8c4 <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	db21      	blt.n	8009550 <quorem+0xe4>
 800950c:	0038      	movs	r0, r7
 800950e:	2600      	movs	r6, #0
 8009510:	9b02      	ldr	r3, [sp, #8]
 8009512:	9c04      	ldr	r4, [sp, #16]
 8009514:	3301      	adds	r3, #1
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	3014      	adds	r0, #20
 800951a:	3414      	adds	r4, #20
 800951c:	6803      	ldr	r3, [r0, #0]
 800951e:	cc02      	ldmia	r4!, {r1}
 8009520:	b29d      	uxth	r5, r3
 8009522:	19ad      	adds	r5, r5, r6
 8009524:	b28a      	uxth	r2, r1
 8009526:	1aaa      	subs	r2, r5, r2
 8009528:	0c09      	lsrs	r1, r1, #16
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	1a5b      	subs	r3, r3, r1
 800952e:	1411      	asrs	r1, r2, #16
 8009530:	185b      	adds	r3, r3, r1
 8009532:	141e      	asrs	r6, r3, #16
 8009534:	b292      	uxth	r2, r2
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	4313      	orrs	r3, r2
 800953a:	c008      	stmia	r0!, {r3}
 800953c:	9b05      	ldr	r3, [sp, #20]
 800953e:	42a3      	cmp	r3, r4
 8009540:	d2ec      	bcs.n	800951c <quorem+0xb0>
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	9a03      	ldr	r2, [sp, #12]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	18d3      	adds	r3, r2, r3
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	2a00      	cmp	r2, #0
 800954e:	d015      	beq.n	800957c <quorem+0x110>
 8009550:	9802      	ldr	r0, [sp, #8]
 8009552:	b009      	add	sp, #36	; 0x24
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <quorem+0xfe>
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	3b01      	subs	r3, #1
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	3c04      	subs	r4, #4
 8009566:	42a3      	cmp	r3, r4
 8009568:	d3f5      	bcc.n	8009556 <quorem+0xea>
 800956a:	9b01      	ldr	r3, [sp, #4]
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	e7c7      	b.n	8009500 <quorem+0x94>
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	2a00      	cmp	r2, #0
 8009574:	d106      	bne.n	8009584 <quorem+0x118>
 8009576:	9a01      	ldr	r2, [sp, #4]
 8009578:	3a01      	subs	r2, #1
 800957a:	9201      	str	r2, [sp, #4]
 800957c:	9a03      	ldr	r2, [sp, #12]
 800957e:	3b04      	subs	r3, #4
 8009580:	429a      	cmp	r2, r3
 8009582:	d3f5      	bcc.n	8009570 <quorem+0x104>
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	e7e2      	b.n	8009550 <quorem+0xe4>
	...

0800958c <_dtoa_r>:
 800958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958e:	0014      	movs	r4, r2
 8009590:	001d      	movs	r5, r3
 8009592:	69c6      	ldr	r6, [r0, #28]
 8009594:	b09d      	sub	sp, #116	; 0x74
 8009596:	9408      	str	r4, [sp, #32]
 8009598:	9509      	str	r5, [sp, #36]	; 0x24
 800959a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800959c:	9004      	str	r0, [sp, #16]
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d10f      	bne.n	80095c2 <_dtoa_r+0x36>
 80095a2:	2010      	movs	r0, #16
 80095a4:	f000 fe4a 	bl	800a23c <malloc>
 80095a8:	9b04      	ldr	r3, [sp, #16]
 80095aa:	1e02      	subs	r2, r0, #0
 80095ac:	61d8      	str	r0, [r3, #28]
 80095ae:	d104      	bne.n	80095ba <_dtoa_r+0x2e>
 80095b0:	21ef      	movs	r1, #239	; 0xef
 80095b2:	4bc6      	ldr	r3, [pc, #792]	; (80098cc <_dtoa_r+0x340>)
 80095b4:	48c6      	ldr	r0, [pc, #792]	; (80098d0 <_dtoa_r+0x344>)
 80095b6:	f001 fcdf 	bl	800af78 <__assert_func>
 80095ba:	6046      	str	r6, [r0, #4]
 80095bc:	6086      	str	r6, [r0, #8]
 80095be:	6006      	str	r6, [r0, #0]
 80095c0:	60c6      	str	r6, [r0, #12]
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	6819      	ldr	r1, [r3, #0]
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d00b      	beq.n	80095e4 <_dtoa_r+0x58>
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	2301      	movs	r3, #1
 80095d0:	4093      	lsls	r3, r2
 80095d2:	604a      	str	r2, [r1, #4]
 80095d4:	608b      	str	r3, [r1, #8]
 80095d6:	9804      	ldr	r0, [sp, #16]
 80095d8:	f000 ff32 	bl	800a440 <_Bfree>
 80095dc:	2200      	movs	r2, #0
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	da1e      	bge.n	8009626 <_dtoa_r+0x9a>
 80095e8:	2301      	movs	r3, #1
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	006b      	lsls	r3, r5, #1
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	9309      	str	r3, [sp, #36]	; 0x24
 80095f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095f4:	4bb7      	ldr	r3, [pc, #732]	; (80098d4 <_dtoa_r+0x348>)
 80095f6:	4ab7      	ldr	r2, [pc, #732]	; (80098d4 <_dtoa_r+0x348>)
 80095f8:	403b      	ands	r3, r7
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d116      	bne.n	800962c <_dtoa_r+0xa0>
 80095fe:	4bb6      	ldr	r3, [pc, #728]	; (80098d8 <_dtoa_r+0x34c>)
 8009600:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	033b      	lsls	r3, r7, #12
 8009606:	0b1b      	lsrs	r3, r3, #12
 8009608:	4323      	orrs	r3, r4
 800960a:	d101      	bne.n	8009610 <_dtoa_r+0x84>
 800960c:	f000 fdb5 	bl	800a17a <_dtoa_r+0xbee>
 8009610:	4bb2      	ldr	r3, [pc, #712]	; (80098dc <_dtoa_r+0x350>)
 8009612:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009614:	9306      	str	r3, [sp, #24]
 8009616:	2a00      	cmp	r2, #0
 8009618:	d002      	beq.n	8009620 <_dtoa_r+0x94>
 800961a:	4bb1      	ldr	r3, [pc, #708]	; (80098e0 <_dtoa_r+0x354>)
 800961c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	9806      	ldr	r0, [sp, #24]
 8009622:	b01d      	add	sp, #116	; 0x74
 8009624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009626:	2300      	movs	r3, #0
 8009628:	603b      	str	r3, [r7, #0]
 800962a:	e7e2      	b.n	80095f2 <_dtoa_r+0x66>
 800962c:	9a08      	ldr	r2, [sp, #32]
 800962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009630:	9210      	str	r2, [sp, #64]	; 0x40
 8009632:	9311      	str	r3, [sp, #68]	; 0x44
 8009634:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009636:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	f7f6 ff06 	bl	800044c <__aeabi_dcmpeq>
 8009640:	1e06      	subs	r6, r0, #0
 8009642:	d009      	beq.n	8009658 <_dtoa_r+0xcc>
 8009644:	2301      	movs	r3, #1
 8009646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	4ba6      	ldr	r3, [pc, #664]	; (80098e4 <_dtoa_r+0x358>)
 800964c:	9306      	str	r3, [sp, #24]
 800964e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0e5      	beq.n	8009620 <_dtoa_r+0x94>
 8009654:	4ba4      	ldr	r3, [pc, #656]	; (80098e8 <_dtoa_r+0x35c>)
 8009656:	e7e1      	b.n	800961c <_dtoa_r+0x90>
 8009658:	ab1a      	add	r3, sp, #104	; 0x68
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	ab1b      	add	r3, sp, #108	; 0x6c
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	9804      	ldr	r0, [sp, #16]
 8009662:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009666:	f001 f9e1 	bl	800aa2c <__d2b>
 800966a:	007a      	lsls	r2, r7, #1
 800966c:	9005      	str	r0, [sp, #20]
 800966e:	0d52      	lsrs	r2, r2, #21
 8009670:	d100      	bne.n	8009674 <_dtoa_r+0xe8>
 8009672:	e07b      	b.n	800976c <_dtoa_r+0x1e0>
 8009674:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009676:	9617      	str	r6, [sp, #92]	; 0x5c
 8009678:	0319      	lsls	r1, r3, #12
 800967a:	4b9c      	ldr	r3, [pc, #624]	; (80098ec <_dtoa_r+0x360>)
 800967c:	0b09      	lsrs	r1, r1, #12
 800967e:	430b      	orrs	r3, r1
 8009680:	499b      	ldr	r1, [pc, #620]	; (80098f0 <_dtoa_r+0x364>)
 8009682:	1857      	adds	r7, r2, r1
 8009684:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009686:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009688:	0019      	movs	r1, r3
 800968a:	2200      	movs	r2, #0
 800968c:	4b99      	ldr	r3, [pc, #612]	; (80098f4 <_dtoa_r+0x368>)
 800968e:	f7f8 fc5f 	bl	8001f50 <__aeabi_dsub>
 8009692:	4a99      	ldr	r2, [pc, #612]	; (80098f8 <_dtoa_r+0x36c>)
 8009694:	4b99      	ldr	r3, [pc, #612]	; (80098fc <_dtoa_r+0x370>)
 8009696:	f7f8 f999 	bl	80019cc <__aeabi_dmul>
 800969a:	4a99      	ldr	r2, [pc, #612]	; (8009900 <_dtoa_r+0x374>)
 800969c:	4b99      	ldr	r3, [pc, #612]	; (8009904 <_dtoa_r+0x378>)
 800969e:	f7f7 fa3b 	bl	8000b18 <__aeabi_dadd>
 80096a2:	0004      	movs	r4, r0
 80096a4:	0038      	movs	r0, r7
 80096a6:	000d      	movs	r5, r1
 80096a8:	f7f9 f828 	bl	80026fc <__aeabi_i2d>
 80096ac:	4a96      	ldr	r2, [pc, #600]	; (8009908 <_dtoa_r+0x37c>)
 80096ae:	4b97      	ldr	r3, [pc, #604]	; (800990c <_dtoa_r+0x380>)
 80096b0:	f7f8 f98c 	bl	80019cc <__aeabi_dmul>
 80096b4:	0002      	movs	r2, r0
 80096b6:	000b      	movs	r3, r1
 80096b8:	0020      	movs	r0, r4
 80096ba:	0029      	movs	r1, r5
 80096bc:	f7f7 fa2c 	bl	8000b18 <__aeabi_dadd>
 80096c0:	0004      	movs	r4, r0
 80096c2:	000d      	movs	r5, r1
 80096c4:	f7f8 ffe4 	bl	8002690 <__aeabi_d2iz>
 80096c8:	2200      	movs	r2, #0
 80096ca:	9003      	str	r0, [sp, #12]
 80096cc:	2300      	movs	r3, #0
 80096ce:	0020      	movs	r0, r4
 80096d0:	0029      	movs	r1, r5
 80096d2:	f7f6 fec1 	bl	8000458 <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d00b      	beq.n	80096f2 <_dtoa_r+0x166>
 80096da:	9803      	ldr	r0, [sp, #12]
 80096dc:	f7f9 f80e 	bl	80026fc <__aeabi_i2d>
 80096e0:	002b      	movs	r3, r5
 80096e2:	0022      	movs	r2, r4
 80096e4:	f7f6 feb2 	bl	800044c <__aeabi_dcmpeq>
 80096e8:	4243      	negs	r3, r0
 80096ea:	4158      	adcs	r0, r3
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1a1b      	subs	r3, r3, r0
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	2301      	movs	r3, #1
 80096f4:	9316      	str	r3, [sp, #88]	; 0x58
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	2b16      	cmp	r3, #22
 80096fa:	d810      	bhi.n	800971e <_dtoa_r+0x192>
 80096fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009700:	9a03      	ldr	r2, [sp, #12]
 8009702:	4b83      	ldr	r3, [pc, #524]	; (8009910 <_dtoa_r+0x384>)
 8009704:	00d2      	lsls	r2, r2, #3
 8009706:	189b      	adds	r3, r3, r2
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f7f6 fea4 	bl	8000458 <__aeabi_dcmplt>
 8009710:	2800      	cmp	r0, #0
 8009712:	d047      	beq.n	80097a4 <_dtoa_r+0x218>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	3b01      	subs	r3, #1
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	2300      	movs	r3, #0
 800971c:	9316      	str	r3, [sp, #88]	; 0x58
 800971e:	2200      	movs	r2, #0
 8009720:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009722:	920a      	str	r2, [sp, #40]	; 0x28
 8009724:	1bdb      	subs	r3, r3, r7
 8009726:	1e5a      	subs	r2, r3, #1
 8009728:	d53e      	bpl.n	80097a8 <_dtoa_r+0x21c>
 800972a:	2201      	movs	r2, #1
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	930a      	str	r3, [sp, #40]	; 0x28
 8009730:	2300      	movs	r3, #0
 8009732:	930c      	str	r3, [sp, #48]	; 0x30
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	db38      	blt.n	80097ac <_dtoa_r+0x220>
 800973a:	9a03      	ldr	r2, [sp, #12]
 800973c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800973e:	4694      	mov	ip, r2
 8009740:	4463      	add	r3, ip
 8009742:	930c      	str	r3, [sp, #48]	; 0x30
 8009744:	2300      	movs	r3, #0
 8009746:	9213      	str	r2, [sp, #76]	; 0x4c
 8009748:	930d      	str	r3, [sp, #52]	; 0x34
 800974a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800974c:	2401      	movs	r4, #1
 800974e:	2b09      	cmp	r3, #9
 8009750:	d867      	bhi.n	8009822 <_dtoa_r+0x296>
 8009752:	2b05      	cmp	r3, #5
 8009754:	dd02      	ble.n	800975c <_dtoa_r+0x1d0>
 8009756:	2400      	movs	r4, #0
 8009758:	3b04      	subs	r3, #4
 800975a:	9322      	str	r3, [sp, #136]	; 0x88
 800975c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800975e:	1e98      	subs	r0, r3, #2
 8009760:	2803      	cmp	r0, #3
 8009762:	d867      	bhi.n	8009834 <_dtoa_r+0x2a8>
 8009764:	f7f6 fcd8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009768:	5b383a2b 	.word	0x5b383a2b
 800976c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800976e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009770:	18f6      	adds	r6, r6, r3
 8009772:	4b68      	ldr	r3, [pc, #416]	; (8009914 <_dtoa_r+0x388>)
 8009774:	18f2      	adds	r2, r6, r3
 8009776:	2a20      	cmp	r2, #32
 8009778:	dd0f      	ble.n	800979a <_dtoa_r+0x20e>
 800977a:	2340      	movs	r3, #64	; 0x40
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	409f      	lsls	r7, r3
 8009780:	4b65      	ldr	r3, [pc, #404]	; (8009918 <_dtoa_r+0x38c>)
 8009782:	0038      	movs	r0, r7
 8009784:	18f3      	adds	r3, r6, r3
 8009786:	40dc      	lsrs	r4, r3
 8009788:	4320      	orrs	r0, r4
 800978a:	f7f8 ffe7 	bl	800275c <__aeabi_ui2d>
 800978e:	2201      	movs	r2, #1
 8009790:	4b62      	ldr	r3, [pc, #392]	; (800991c <_dtoa_r+0x390>)
 8009792:	1e77      	subs	r7, r6, #1
 8009794:	18cb      	adds	r3, r1, r3
 8009796:	9217      	str	r2, [sp, #92]	; 0x5c
 8009798:	e776      	b.n	8009688 <_dtoa_r+0xfc>
 800979a:	2320      	movs	r3, #32
 800979c:	0020      	movs	r0, r4
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	4098      	lsls	r0, r3
 80097a2:	e7f2      	b.n	800978a <_dtoa_r+0x1fe>
 80097a4:	9016      	str	r0, [sp, #88]	; 0x58
 80097a6:	e7ba      	b.n	800971e <_dtoa_r+0x192>
 80097a8:	920c      	str	r2, [sp, #48]	; 0x30
 80097aa:	e7c3      	b.n	8009734 <_dtoa_r+0x1a8>
 80097ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ae:	9a03      	ldr	r2, [sp, #12]
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	930a      	str	r3, [sp, #40]	; 0x28
 80097b4:	4253      	negs	r3, r2
 80097b6:	930d      	str	r3, [sp, #52]	; 0x34
 80097b8:	2300      	movs	r3, #0
 80097ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80097bc:	e7c5      	b.n	800974a <_dtoa_r+0x1be>
 80097be:	2300      	movs	r3, #0
 80097c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c6:	9307      	str	r3, [sp, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc13      	bgt.n	80097f4 <_dtoa_r+0x268>
 80097cc:	2301      	movs	r3, #1
 80097ce:	001a      	movs	r2, r3
 80097d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d2:	9307      	str	r3, [sp, #28]
 80097d4:	9223      	str	r2, [sp, #140]	; 0x8c
 80097d6:	e00d      	b.n	80097f4 <_dtoa_r+0x268>
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f1      	b.n	80097c0 <_dtoa_r+0x234>
 80097dc:	2300      	movs	r3, #0
 80097de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80097e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097e2:	4694      	mov	ip, r2
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	4463      	add	r3, ip
 80097e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ea:	3301      	adds	r3, #1
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc00      	bgt.n	80097f4 <_dtoa_r+0x268>
 80097f2:	2301      	movs	r3, #1
 80097f4:	9a04      	ldr	r2, [sp, #16]
 80097f6:	2100      	movs	r1, #0
 80097f8:	69d0      	ldr	r0, [r2, #28]
 80097fa:	2204      	movs	r2, #4
 80097fc:	0015      	movs	r5, r2
 80097fe:	3514      	adds	r5, #20
 8009800:	429d      	cmp	r5, r3
 8009802:	d91b      	bls.n	800983c <_dtoa_r+0x2b0>
 8009804:	6041      	str	r1, [r0, #4]
 8009806:	9804      	ldr	r0, [sp, #16]
 8009808:	f000 fdd6 	bl	800a3b8 <_Balloc>
 800980c:	9006      	str	r0, [sp, #24]
 800980e:	2800      	cmp	r0, #0
 8009810:	d117      	bne.n	8009842 <_dtoa_r+0x2b6>
 8009812:	21b0      	movs	r1, #176	; 0xb0
 8009814:	4b42      	ldr	r3, [pc, #264]	; (8009920 <_dtoa_r+0x394>)
 8009816:	482e      	ldr	r0, [pc, #184]	; (80098d0 <_dtoa_r+0x344>)
 8009818:	9a06      	ldr	r2, [sp, #24]
 800981a:	31ff      	adds	r1, #255	; 0xff
 800981c:	e6cb      	b.n	80095b6 <_dtoa_r+0x2a>
 800981e:	2301      	movs	r3, #1
 8009820:	e7dd      	b.n	80097de <_dtoa_r+0x252>
 8009822:	2300      	movs	r3, #0
 8009824:	940f      	str	r4, [sp, #60]	; 0x3c
 8009826:	9322      	str	r3, [sp, #136]	; 0x88
 8009828:	3b01      	subs	r3, #1
 800982a:	930b      	str	r3, [sp, #44]	; 0x2c
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	2200      	movs	r2, #0
 8009830:	3313      	adds	r3, #19
 8009832:	e7cf      	b.n	80097d4 <_dtoa_r+0x248>
 8009834:	2301      	movs	r3, #1
 8009836:	930f      	str	r3, [sp, #60]	; 0x3c
 8009838:	3b02      	subs	r3, #2
 800983a:	e7f6      	b.n	800982a <_dtoa_r+0x29e>
 800983c:	3101      	adds	r1, #1
 800983e:	0052      	lsls	r2, r2, #1
 8009840:	e7dc      	b.n	80097fc <_dtoa_r+0x270>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	9a06      	ldr	r2, [sp, #24]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	2b0e      	cmp	r3, #14
 800984e:	d900      	bls.n	8009852 <_dtoa_r+0x2c6>
 8009850:	e0e5      	b.n	8009a1e <_dtoa_r+0x492>
 8009852:	2c00      	cmp	r4, #0
 8009854:	d100      	bne.n	8009858 <_dtoa_r+0x2cc>
 8009856:	e0e2      	b.n	8009a1e <_dtoa_r+0x492>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd64      	ble.n	8009928 <_dtoa_r+0x39c>
 800985e:	210f      	movs	r1, #15
 8009860:	9a03      	ldr	r2, [sp, #12]
 8009862:	4b2b      	ldr	r3, [pc, #172]	; (8009910 <_dtoa_r+0x384>)
 8009864:	400a      	ands	r2, r1
 8009866:	00d2      	lsls	r2, r2, #3
 8009868:	189b      	adds	r3, r3, r2
 800986a:	681e      	ldr	r6, [r3, #0]
 800986c:	685f      	ldr	r7, [r3, #4]
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	2402      	movs	r4, #2
 8009872:	111d      	asrs	r5, r3, #4
 8009874:	05db      	lsls	r3, r3, #23
 8009876:	d50a      	bpl.n	800988e <_dtoa_r+0x302>
 8009878:	4b2a      	ldr	r3, [pc, #168]	; (8009924 <_dtoa_r+0x398>)
 800987a:	400d      	ands	r5, r1
 800987c:	6a1a      	ldr	r2, [r3, #32]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009882:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009884:	f7f7 fca8 	bl	80011d8 <__aeabi_ddiv>
 8009888:	9008      	str	r0, [sp, #32]
 800988a:	9109      	str	r1, [sp, #36]	; 0x24
 800988c:	3401      	adds	r4, #1
 800988e:	4b25      	ldr	r3, [pc, #148]	; (8009924 <_dtoa_r+0x398>)
 8009890:	930e      	str	r3, [sp, #56]	; 0x38
 8009892:	2d00      	cmp	r5, #0
 8009894:	d108      	bne.n	80098a8 <_dtoa_r+0x31c>
 8009896:	9808      	ldr	r0, [sp, #32]
 8009898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989a:	0032      	movs	r2, r6
 800989c:	003b      	movs	r3, r7
 800989e:	f7f7 fc9b 	bl	80011d8 <__aeabi_ddiv>
 80098a2:	9008      	str	r0, [sp, #32]
 80098a4:	9109      	str	r1, [sp, #36]	; 0x24
 80098a6:	e05a      	b.n	800995e <_dtoa_r+0x3d2>
 80098a8:	2301      	movs	r3, #1
 80098aa:	421d      	tst	r5, r3
 80098ac:	d009      	beq.n	80098c2 <_dtoa_r+0x336>
 80098ae:	18e4      	adds	r4, r4, r3
 80098b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098b2:	0030      	movs	r0, r6
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	0039      	movs	r1, r7
 80098ba:	f7f8 f887 	bl	80019cc <__aeabi_dmul>
 80098be:	0006      	movs	r6, r0
 80098c0:	000f      	movs	r7, r1
 80098c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	3308      	adds	r3, #8
 80098c8:	e7e2      	b.n	8009890 <_dtoa_r+0x304>
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	0800b855 	.word	0x0800b855
 80098d0:	0800b86c 	.word	0x0800b86c
 80098d4:	7ff00000 	.word	0x7ff00000
 80098d8:	0000270f 	.word	0x0000270f
 80098dc:	0800b851 	.word	0x0800b851
 80098e0:	0800b854 	.word	0x0800b854
 80098e4:	0800b824 	.word	0x0800b824
 80098e8:	0800b825 	.word	0x0800b825
 80098ec:	3ff00000 	.word	0x3ff00000
 80098f0:	fffffc01 	.word	0xfffffc01
 80098f4:	3ff80000 	.word	0x3ff80000
 80098f8:	636f4361 	.word	0x636f4361
 80098fc:	3fd287a7 	.word	0x3fd287a7
 8009900:	8b60c8b3 	.word	0x8b60c8b3
 8009904:	3fc68a28 	.word	0x3fc68a28
 8009908:	509f79fb 	.word	0x509f79fb
 800990c:	3fd34413 	.word	0x3fd34413
 8009910:	0800b958 	.word	0x0800b958
 8009914:	00000432 	.word	0x00000432
 8009918:	00000412 	.word	0x00000412
 800991c:	fe100000 	.word	0xfe100000
 8009920:	0800b8c4 	.word	0x0800b8c4
 8009924:	0800b930 	.word	0x0800b930
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	2402      	movs	r4, #2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d016      	beq.n	800995e <_dtoa_r+0x3d2>
 8009930:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009932:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009934:	220f      	movs	r2, #15
 8009936:	425d      	negs	r5, r3
 8009938:	402a      	ands	r2, r5
 800993a:	4bdd      	ldr	r3, [pc, #884]	; (8009cb0 <_dtoa_r+0x724>)
 800993c:	00d2      	lsls	r2, r2, #3
 800993e:	189b      	adds	r3, r3, r2
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f7f8 f842 	bl	80019cc <__aeabi_dmul>
 8009948:	2701      	movs	r7, #1
 800994a:	2300      	movs	r3, #0
 800994c:	9008      	str	r0, [sp, #32]
 800994e:	9109      	str	r1, [sp, #36]	; 0x24
 8009950:	4ed8      	ldr	r6, [pc, #864]	; (8009cb4 <_dtoa_r+0x728>)
 8009952:	112d      	asrs	r5, r5, #4
 8009954:	2d00      	cmp	r5, #0
 8009956:	d000      	beq.n	800995a <_dtoa_r+0x3ce>
 8009958:	e091      	b.n	8009a7e <_dtoa_r+0x4f2>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1a1      	bne.n	80098a2 <_dtoa_r+0x316>
 800995e:	9e08      	ldr	r6, [sp, #32]
 8009960:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009962:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009964:	2b00      	cmp	r3, #0
 8009966:	d100      	bne.n	800996a <_dtoa_r+0x3de>
 8009968:	e094      	b.n	8009a94 <_dtoa_r+0x508>
 800996a:	2200      	movs	r2, #0
 800996c:	0030      	movs	r0, r6
 800996e:	0039      	movs	r1, r7
 8009970:	4bd1      	ldr	r3, [pc, #836]	; (8009cb8 <_dtoa_r+0x72c>)
 8009972:	f7f6 fd71 	bl	8000458 <__aeabi_dcmplt>
 8009976:	2800      	cmp	r0, #0
 8009978:	d100      	bne.n	800997c <_dtoa_r+0x3f0>
 800997a:	e08b      	b.n	8009a94 <_dtoa_r+0x508>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d100      	bne.n	8009984 <_dtoa_r+0x3f8>
 8009982:	e087      	b.n	8009a94 <_dtoa_r+0x508>
 8009984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009986:	2b00      	cmp	r3, #0
 8009988:	dd45      	ble.n	8009a16 <_dtoa_r+0x48a>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	3b01      	subs	r3, #1
 8009990:	930e      	str	r3, [sp, #56]	; 0x38
 8009992:	0030      	movs	r0, r6
 8009994:	4bc9      	ldr	r3, [pc, #804]	; (8009cbc <_dtoa_r+0x730>)
 8009996:	0039      	movs	r1, r7
 8009998:	f7f8 f818 	bl	80019cc <__aeabi_dmul>
 800999c:	9008      	str	r0, [sp, #32]
 800999e:	9109      	str	r1, [sp, #36]	; 0x24
 80099a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a2:	3401      	adds	r4, #1
 80099a4:	0020      	movs	r0, r4
 80099a6:	9e08      	ldr	r6, [sp, #32]
 80099a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099aa:	9312      	str	r3, [sp, #72]	; 0x48
 80099ac:	f7f8 fea6 	bl	80026fc <__aeabi_i2d>
 80099b0:	0032      	movs	r2, r6
 80099b2:	003b      	movs	r3, r7
 80099b4:	f7f8 f80a 	bl	80019cc <__aeabi_dmul>
 80099b8:	2200      	movs	r2, #0
 80099ba:	4bc1      	ldr	r3, [pc, #772]	; (8009cc0 <_dtoa_r+0x734>)
 80099bc:	f7f7 f8ac 	bl	8000b18 <__aeabi_dadd>
 80099c0:	4ac0      	ldr	r2, [pc, #768]	; (8009cc4 <_dtoa_r+0x738>)
 80099c2:	9014      	str	r0, [sp, #80]	; 0x50
 80099c4:	9115      	str	r1, [sp, #84]	; 0x54
 80099c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80099ca:	4694      	mov	ip, r2
 80099cc:	9308      	str	r3, [sp, #32]
 80099ce:	9409      	str	r4, [sp, #36]	; 0x24
 80099d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099d2:	4463      	add	r3, ip
 80099d4:	9318      	str	r3, [sp, #96]	; 0x60
 80099d6:	9309      	str	r3, [sp, #36]	; 0x24
 80099d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d15e      	bne.n	8009a9c <_dtoa_r+0x510>
 80099de:	2200      	movs	r2, #0
 80099e0:	4bb9      	ldr	r3, [pc, #740]	; (8009cc8 <_dtoa_r+0x73c>)
 80099e2:	0030      	movs	r0, r6
 80099e4:	0039      	movs	r1, r7
 80099e6:	f7f8 fab3 	bl	8001f50 <__aeabi_dsub>
 80099ea:	9a08      	ldr	r2, [sp, #32]
 80099ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099ee:	0004      	movs	r4, r0
 80099f0:	000d      	movs	r5, r1
 80099f2:	f7f6 fd45 	bl	8000480 <__aeabi_dcmpgt>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d000      	beq.n	80099fc <_dtoa_r+0x470>
 80099fa:	e2b3      	b.n	8009f64 <_dtoa_r+0x9d8>
 80099fc:	48b3      	ldr	r0, [pc, #716]	; (8009ccc <_dtoa_r+0x740>)
 80099fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009a00:	4684      	mov	ip, r0
 8009a02:	4461      	add	r1, ip
 8009a04:	000b      	movs	r3, r1
 8009a06:	0020      	movs	r0, r4
 8009a08:	0029      	movs	r1, r5
 8009a0a:	9a08      	ldr	r2, [sp, #32]
 8009a0c:	f7f6 fd24 	bl	8000458 <__aeabi_dcmplt>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d000      	beq.n	8009a16 <_dtoa_r+0x48a>
 8009a14:	e2a3      	b.n	8009f5e <_dtoa_r+0x9d2>
 8009a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a18:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009a1a:	9308      	str	r3, [sp, #32]
 8009a1c:	9409      	str	r4, [sp, #36]	; 0x24
 8009a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da00      	bge.n	8009a26 <_dtoa_r+0x49a>
 8009a24:	e179      	b.n	8009d1a <_dtoa_r+0x78e>
 8009a26:	9a03      	ldr	r2, [sp, #12]
 8009a28:	2a0e      	cmp	r2, #14
 8009a2a:	dd00      	ble.n	8009a2e <_dtoa_r+0x4a2>
 8009a2c:	e175      	b.n	8009d1a <_dtoa_r+0x78e>
 8009a2e:	4ba0      	ldr	r3, [pc, #640]	; (8009cb0 <_dtoa_r+0x724>)
 8009a30:	00d2      	lsls	r2, r2, #3
 8009a32:	189b      	adds	r3, r3, r2
 8009a34:	681e      	ldr	r6, [r3, #0]
 8009a36:	685f      	ldr	r7, [r3, #4]
 8009a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	db00      	blt.n	8009a40 <_dtoa_r+0x4b4>
 8009a3e:	e0e5      	b.n	8009c0c <_dtoa_r+0x680>
 8009a40:	9b07      	ldr	r3, [sp, #28]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dd00      	ble.n	8009a48 <_dtoa_r+0x4bc>
 8009a46:	e0e1      	b.n	8009c0c <_dtoa_r+0x680>
 8009a48:	d000      	beq.n	8009a4c <_dtoa_r+0x4c0>
 8009a4a:	e288      	b.n	8009f5e <_dtoa_r+0x9d2>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	0030      	movs	r0, r6
 8009a50:	0039      	movs	r1, r7
 8009a52:	4b9d      	ldr	r3, [pc, #628]	; (8009cc8 <_dtoa_r+0x73c>)
 8009a54:	f7f7 ffba 	bl	80019cc <__aeabi_dmul>
 8009a58:	9a08      	ldr	r2, [sp, #32]
 8009a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5c:	f7f6 fd1a 	bl	8000494 <__aeabi_dcmpge>
 8009a60:	9e07      	ldr	r6, [sp, #28]
 8009a62:	0037      	movs	r7, r6
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d000      	beq.n	8009a6a <_dtoa_r+0x4de>
 8009a68:	e25f      	b.n	8009f2a <_dtoa_r+0x99e>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	2331      	movs	r3, #49	; 0x31
 8009a74:	7013      	strb	r3, [r2, #0]
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	9303      	str	r3, [sp, #12]
 8009a7c:	e25a      	b.n	8009f34 <_dtoa_r+0x9a8>
 8009a7e:	423d      	tst	r5, r7
 8009a80:	d005      	beq.n	8009a8e <_dtoa_r+0x502>
 8009a82:	6832      	ldr	r2, [r6, #0]
 8009a84:	6873      	ldr	r3, [r6, #4]
 8009a86:	f7f7 ffa1 	bl	80019cc <__aeabi_dmul>
 8009a8a:	003b      	movs	r3, r7
 8009a8c:	3401      	adds	r4, #1
 8009a8e:	106d      	asrs	r5, r5, #1
 8009a90:	3608      	adds	r6, #8
 8009a92:	e75f      	b.n	8009954 <_dtoa_r+0x3c8>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	930e      	str	r3, [sp, #56]	; 0x38
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	e783      	b.n	80099a4 <_dtoa_r+0x418>
 8009a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a9e:	4b84      	ldr	r3, [pc, #528]	; (8009cb0 <_dtoa_r+0x724>)
 8009aa0:	3a01      	subs	r2, #1
 8009aa2:	00d2      	lsls	r2, r2, #3
 8009aa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009aa6:	189b      	adds	r3, r3, r2
 8009aa8:	9c08      	ldr	r4, [sp, #32]
 8009aaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d051      	beq.n	8009b58 <_dtoa_r+0x5cc>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	4986      	ldr	r1, [pc, #536]	; (8009cd0 <_dtoa_r+0x744>)
 8009ab8:	f7f7 fb8e 	bl	80011d8 <__aeabi_ddiv>
 8009abc:	0022      	movs	r2, r4
 8009abe:	002b      	movs	r3, r5
 8009ac0:	f7f8 fa46 	bl	8001f50 <__aeabi_dsub>
 8009ac4:	9a06      	ldr	r2, [sp, #24]
 8009ac6:	0004      	movs	r4, r0
 8009ac8:	4694      	mov	ip, r2
 8009aca:	000d      	movs	r5, r1
 8009acc:	9b06      	ldr	r3, [sp, #24]
 8009ace:	9314      	str	r3, [sp, #80]	; 0x50
 8009ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad2:	4463      	add	r3, ip
 8009ad4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ad6:	0039      	movs	r1, r7
 8009ad8:	0030      	movs	r0, r6
 8009ada:	f7f8 fdd9 	bl	8002690 <__aeabi_d2iz>
 8009ade:	9012      	str	r0, [sp, #72]	; 0x48
 8009ae0:	f7f8 fe0c 	bl	80026fc <__aeabi_i2d>
 8009ae4:	0002      	movs	r2, r0
 8009ae6:	000b      	movs	r3, r1
 8009ae8:	0030      	movs	r0, r6
 8009aea:	0039      	movs	r1, r7
 8009aec:	f7f8 fa30 	bl	8001f50 <__aeabi_dsub>
 8009af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009af2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009af4:	3301      	adds	r3, #1
 8009af6:	9308      	str	r3, [sp, #32]
 8009af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009afa:	0006      	movs	r6, r0
 8009afc:	3330      	adds	r3, #48	; 0x30
 8009afe:	7013      	strb	r3, [r2, #0]
 8009b00:	0022      	movs	r2, r4
 8009b02:	002b      	movs	r3, r5
 8009b04:	000f      	movs	r7, r1
 8009b06:	f7f6 fca7 	bl	8000458 <__aeabi_dcmplt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d174      	bne.n	8009bf8 <_dtoa_r+0x66c>
 8009b0e:	0032      	movs	r2, r6
 8009b10:	003b      	movs	r3, r7
 8009b12:	2000      	movs	r0, #0
 8009b14:	4968      	ldr	r1, [pc, #416]	; (8009cb8 <_dtoa_r+0x72c>)
 8009b16:	f7f8 fa1b 	bl	8001f50 <__aeabi_dsub>
 8009b1a:	0022      	movs	r2, r4
 8009b1c:	002b      	movs	r3, r5
 8009b1e:	f7f6 fc9b 	bl	8000458 <__aeabi_dcmplt>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d000      	beq.n	8009b28 <_dtoa_r+0x59c>
 8009b26:	e0d7      	b.n	8009cd8 <_dtoa_r+0x74c>
 8009b28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009b2a:	9a08      	ldr	r2, [sp, #32]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d100      	bne.n	8009b32 <_dtoa_r+0x5a6>
 8009b30:	e771      	b.n	8009a16 <_dtoa_r+0x48a>
 8009b32:	2200      	movs	r2, #0
 8009b34:	0020      	movs	r0, r4
 8009b36:	0029      	movs	r1, r5
 8009b38:	4b60      	ldr	r3, [pc, #384]	; (8009cbc <_dtoa_r+0x730>)
 8009b3a:	f7f7 ff47 	bl	80019cc <__aeabi_dmul>
 8009b3e:	4b5f      	ldr	r3, [pc, #380]	; (8009cbc <_dtoa_r+0x730>)
 8009b40:	0004      	movs	r4, r0
 8009b42:	000d      	movs	r5, r1
 8009b44:	0030      	movs	r0, r6
 8009b46:	0039      	movs	r1, r7
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f7f7 ff3f 	bl	80019cc <__aeabi_dmul>
 8009b4e:	9b08      	ldr	r3, [sp, #32]
 8009b50:	0006      	movs	r6, r0
 8009b52:	000f      	movs	r7, r1
 8009b54:	9314      	str	r3, [sp, #80]	; 0x50
 8009b56:	e7be      	b.n	8009ad6 <_dtoa_r+0x54a>
 8009b58:	0020      	movs	r0, r4
 8009b5a:	0029      	movs	r1, r5
 8009b5c:	f7f7 ff36 	bl	80019cc <__aeabi_dmul>
 8009b60:	9a06      	ldr	r2, [sp, #24]
 8009b62:	9b06      	ldr	r3, [sp, #24]
 8009b64:	4694      	mov	ip, r2
 8009b66:	9308      	str	r3, [sp, #32]
 8009b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b6a:	9014      	str	r0, [sp, #80]	; 0x50
 8009b6c:	9115      	str	r1, [sp, #84]	; 0x54
 8009b6e:	4463      	add	r3, ip
 8009b70:	9319      	str	r3, [sp, #100]	; 0x64
 8009b72:	0030      	movs	r0, r6
 8009b74:	0039      	movs	r1, r7
 8009b76:	f7f8 fd8b 	bl	8002690 <__aeabi_d2iz>
 8009b7a:	9018      	str	r0, [sp, #96]	; 0x60
 8009b7c:	f7f8 fdbe 	bl	80026fc <__aeabi_i2d>
 8009b80:	0002      	movs	r2, r0
 8009b82:	000b      	movs	r3, r1
 8009b84:	0030      	movs	r0, r6
 8009b86:	0039      	movs	r1, r7
 8009b88:	f7f8 f9e2 	bl	8001f50 <__aeabi_dsub>
 8009b8c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	3630      	adds	r6, #48	; 0x30
 8009b92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b94:	701e      	strb	r6, [r3, #0]
 8009b96:	3301      	adds	r3, #1
 8009b98:	0004      	movs	r4, r0
 8009b9a:	000d      	movs	r5, r1
 8009b9c:	9308      	str	r3, [sp, #32]
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d12d      	bne.n	8009bfe <_dtoa_r+0x672>
 8009ba2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009ba4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009ba6:	9a06      	ldr	r2, [sp, #24]
 8009ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009baa:	4694      	mov	ip, r2
 8009bac:	4463      	add	r3, ip
 8009bae:	2200      	movs	r2, #0
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	4b47      	ldr	r3, [pc, #284]	; (8009cd0 <_dtoa_r+0x744>)
 8009bb4:	f7f6 ffb0 	bl	8000b18 <__aeabi_dadd>
 8009bb8:	0002      	movs	r2, r0
 8009bba:	000b      	movs	r3, r1
 8009bbc:	0020      	movs	r0, r4
 8009bbe:	0029      	movs	r1, r5
 8009bc0:	f7f6 fc5e 	bl	8000480 <__aeabi_dcmpgt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d000      	beq.n	8009bca <_dtoa_r+0x63e>
 8009bc8:	e086      	b.n	8009cd8 <_dtoa_r+0x74c>
 8009bca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bce:	2000      	movs	r0, #0
 8009bd0:	493f      	ldr	r1, [pc, #252]	; (8009cd0 <_dtoa_r+0x744>)
 8009bd2:	f7f8 f9bd 	bl	8001f50 <__aeabi_dsub>
 8009bd6:	0002      	movs	r2, r0
 8009bd8:	000b      	movs	r3, r1
 8009bda:	0020      	movs	r0, r4
 8009bdc:	0029      	movs	r1, r5
 8009bde:	f7f6 fc3b 	bl	8000458 <__aeabi_dcmplt>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d100      	bne.n	8009be8 <_dtoa_r+0x65c>
 8009be6:	e716      	b.n	8009a16 <_dtoa_r+0x48a>
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	001a      	movs	r2, r3
 8009bec:	3a01      	subs	r2, #1
 8009bee:	9208      	str	r2, [sp, #32]
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	2a30      	cmp	r2, #48	; 0x30
 8009bf4:	d0f8      	beq.n	8009be8 <_dtoa_r+0x65c>
 8009bf6:	9308      	str	r3, [sp, #32]
 8009bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	e046      	b.n	8009c8c <_dtoa_r+0x700>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4b2e      	ldr	r3, [pc, #184]	; (8009cbc <_dtoa_r+0x730>)
 8009c02:	f7f7 fee3 	bl	80019cc <__aeabi_dmul>
 8009c06:	0006      	movs	r6, r0
 8009c08:	000f      	movs	r7, r1
 8009c0a:	e7b2      	b.n	8009b72 <_dtoa_r+0x5e6>
 8009c0c:	9b06      	ldr	r3, [sp, #24]
 8009c0e:	9a06      	ldr	r2, [sp, #24]
 8009c10:	930a      	str	r3, [sp, #40]	; 0x28
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	9c08      	ldr	r4, [sp, #32]
 8009c16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	189b      	adds	r3, r3, r2
 8009c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c1e:	0032      	movs	r2, r6
 8009c20:	003b      	movs	r3, r7
 8009c22:	0020      	movs	r0, r4
 8009c24:	0029      	movs	r1, r5
 8009c26:	f7f7 fad7 	bl	80011d8 <__aeabi_ddiv>
 8009c2a:	f7f8 fd31 	bl	8002690 <__aeabi_d2iz>
 8009c2e:	9007      	str	r0, [sp, #28]
 8009c30:	f7f8 fd64 	bl	80026fc <__aeabi_i2d>
 8009c34:	0032      	movs	r2, r6
 8009c36:	003b      	movs	r3, r7
 8009c38:	f7f7 fec8 	bl	80019cc <__aeabi_dmul>
 8009c3c:	0002      	movs	r2, r0
 8009c3e:	000b      	movs	r3, r1
 8009c40:	0020      	movs	r0, r4
 8009c42:	0029      	movs	r1, r5
 8009c44:	f7f8 f984 	bl	8001f50 <__aeabi_dsub>
 8009c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4a:	001a      	movs	r2, r3
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	920a      	str	r2, [sp, #40]	; 0x28
 8009c50:	9208      	str	r2, [sp, #32]
 8009c52:	9a07      	ldr	r2, [sp, #28]
 8009c54:	3230      	adds	r2, #48	; 0x30
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d14f      	bne.n	8009cfe <_dtoa_r+0x772>
 8009c5e:	0002      	movs	r2, r0
 8009c60:	000b      	movs	r3, r1
 8009c62:	f7f6 ff59 	bl	8000b18 <__aeabi_dadd>
 8009c66:	0032      	movs	r2, r6
 8009c68:	003b      	movs	r3, r7
 8009c6a:	0004      	movs	r4, r0
 8009c6c:	000d      	movs	r5, r1
 8009c6e:	f7f6 fc07 	bl	8000480 <__aeabi_dcmpgt>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d12e      	bne.n	8009cd4 <_dtoa_r+0x748>
 8009c76:	0032      	movs	r2, r6
 8009c78:	003b      	movs	r3, r7
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	0029      	movs	r1, r5
 8009c7e:	f7f6 fbe5 	bl	800044c <__aeabi_dcmpeq>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d002      	beq.n	8009c8c <_dtoa_r+0x700>
 8009c86:	9b07      	ldr	r3, [sp, #28]
 8009c88:	07de      	lsls	r6, r3, #31
 8009c8a:	d423      	bmi.n	8009cd4 <_dtoa_r+0x748>
 8009c8c:	9905      	ldr	r1, [sp, #20]
 8009c8e:	9804      	ldr	r0, [sp, #16]
 8009c90:	f000 fbd6 	bl	800a440 <_Bfree>
 8009c94:	2300      	movs	r3, #0
 8009c96:	9a08      	ldr	r2, [sp, #32]
 8009c98:	7013      	strb	r3, [r2, #0]
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d100      	bne.n	8009caa <_dtoa_r+0x71e>
 8009ca8:	e4ba      	b.n	8009620 <_dtoa_r+0x94>
 8009caa:	9a08      	ldr	r2, [sp, #32]
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e4b7      	b.n	8009620 <_dtoa_r+0x94>
 8009cb0:	0800b958 	.word	0x0800b958
 8009cb4:	0800b930 	.word	0x0800b930
 8009cb8:	3ff00000 	.word	0x3ff00000
 8009cbc:	40240000 	.word	0x40240000
 8009cc0:	401c0000 	.word	0x401c0000
 8009cc4:	fcc00000 	.word	0xfcc00000
 8009cc8:	40140000 	.word	0x40140000
 8009ccc:	7cc00000 	.word	0x7cc00000
 8009cd0:	3fe00000 	.word	0x3fe00000
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	9308      	str	r3, [sp, #32]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	2a39      	cmp	r2, #57	; 0x39
 8009ce2:	d108      	bne.n	8009cf6 <_dtoa_r+0x76a>
 8009ce4:	9a06      	ldr	r2, [sp, #24]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d1f7      	bne.n	8009cda <_dtoa_r+0x74e>
 8009cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cec:	9906      	ldr	r1, [sp, #24]
 8009cee:	3201      	adds	r2, #1
 8009cf0:	920e      	str	r2, [sp, #56]	; 0x38
 8009cf2:	2230      	movs	r2, #48	; 0x30
 8009cf4:	700a      	strb	r2, [r1, #0]
 8009cf6:	781a      	ldrb	r2, [r3, #0]
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e77c      	b.n	8009bf8 <_dtoa_r+0x66c>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4ba9      	ldr	r3, [pc, #676]	; (8009fa8 <_dtoa_r+0xa1c>)
 8009d02:	f7f7 fe63 	bl	80019cc <__aeabi_dmul>
 8009d06:	2200      	movs	r2, #0
 8009d08:	2300      	movs	r3, #0
 8009d0a:	0004      	movs	r4, r0
 8009d0c:	000d      	movs	r5, r1
 8009d0e:	f7f6 fb9d 	bl	800044c <__aeabi_dcmpeq>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d100      	bne.n	8009d18 <_dtoa_r+0x78c>
 8009d16:	e782      	b.n	8009c1e <_dtoa_r+0x692>
 8009d18:	e7b8      	b.n	8009c8c <_dtoa_r+0x700>
 8009d1a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009d1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009d1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d20:	2f00      	cmp	r7, #0
 8009d22:	d012      	beq.n	8009d4a <_dtoa_r+0x7be>
 8009d24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d26:	2a01      	cmp	r2, #1
 8009d28:	dc6e      	bgt.n	8009e08 <_dtoa_r+0x87c>
 8009d2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d065      	beq.n	8009dfc <_dtoa_r+0x870>
 8009d30:	4a9e      	ldr	r2, [pc, #632]	; (8009fac <_dtoa_r+0xa20>)
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d36:	2101      	movs	r1, #1
 8009d38:	18d2      	adds	r2, r2, r3
 8009d3a:	920a      	str	r2, [sp, #40]	; 0x28
 8009d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d3e:	9804      	ldr	r0, [sp, #16]
 8009d40:	18d3      	adds	r3, r2, r3
 8009d42:	930c      	str	r3, [sp, #48]	; 0x30
 8009d44:	f000 fc2c 	bl	800a5a0 <__i2b>
 8009d48:	0007      	movs	r7, r0
 8009d4a:	2c00      	cmp	r4, #0
 8009d4c:	d00e      	beq.n	8009d6c <_dtoa_r+0x7e0>
 8009d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dd0b      	ble.n	8009d6c <_dtoa_r+0x7e0>
 8009d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d56:	0023      	movs	r3, r4
 8009d58:	4294      	cmp	r4, r2
 8009d5a:	dd00      	ble.n	8009d5e <_dtoa_r+0x7d2>
 8009d5c:	0013      	movs	r3, r2
 8009d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d60:	1ae4      	subs	r4, r4, r3
 8009d62:	1ad2      	subs	r2, r2, r3
 8009d64:	920a      	str	r2, [sp, #40]	; 0x28
 8009d66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01e      	beq.n	8009db0 <_dtoa_r+0x824>
 8009d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d05c      	beq.n	8009e32 <_dtoa_r+0x8a6>
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	dd10      	ble.n	8009d9e <_dtoa_r+0x812>
 8009d7c:	0039      	movs	r1, r7
 8009d7e:	002a      	movs	r2, r5
 8009d80:	9804      	ldr	r0, [sp, #16]
 8009d82:	f000 fcd5 	bl	800a730 <__pow5mult>
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	0001      	movs	r1, r0
 8009d8a:	0007      	movs	r7, r0
 8009d8c:	9804      	ldr	r0, [sp, #16]
 8009d8e:	f000 fc1f 	bl	800a5d0 <__multiply>
 8009d92:	0006      	movs	r6, r0
 8009d94:	9905      	ldr	r1, [sp, #20]
 8009d96:	9804      	ldr	r0, [sp, #16]
 8009d98:	f000 fb52 	bl	800a440 <_Bfree>
 8009d9c:	9605      	str	r6, [sp, #20]
 8009d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da0:	1b5a      	subs	r2, r3, r5
 8009da2:	42ab      	cmp	r3, r5
 8009da4:	d004      	beq.n	8009db0 <_dtoa_r+0x824>
 8009da6:	9905      	ldr	r1, [sp, #20]
 8009da8:	9804      	ldr	r0, [sp, #16]
 8009daa:	f000 fcc1 	bl	800a730 <__pow5mult>
 8009dae:	9005      	str	r0, [sp, #20]
 8009db0:	2101      	movs	r1, #1
 8009db2:	9804      	ldr	r0, [sp, #16]
 8009db4:	f000 fbf4 	bl	800a5a0 <__i2b>
 8009db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dba:	0006      	movs	r6, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd3a      	ble.n	8009e36 <_dtoa_r+0x8aa>
 8009dc0:	001a      	movs	r2, r3
 8009dc2:	0001      	movs	r1, r0
 8009dc4:	9804      	ldr	r0, [sp, #16]
 8009dc6:	f000 fcb3 	bl	800a730 <__pow5mult>
 8009dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dcc:	0006      	movs	r6, r0
 8009dce:	2500      	movs	r5, #0
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	dc38      	bgt.n	8009e46 <_dtoa_r+0x8ba>
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	9b08      	ldr	r3, [sp, #32]
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	d130      	bne.n	8009e3e <_dtoa_r+0x8b2>
 8009ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dde:	031b      	lsls	r3, r3, #12
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	d12c      	bne.n	8009e3e <_dtoa_r+0x8b2>
 8009de4:	4b72      	ldr	r3, [pc, #456]	; (8009fb0 <_dtoa_r+0xa24>)
 8009de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de8:	4213      	tst	r3, r2
 8009dea:	d028      	beq.n	8009e3e <_dtoa_r+0x8b2>
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	3501      	adds	r5, #1
 8009df0:	3301      	adds	r3, #1
 8009df2:	930a      	str	r3, [sp, #40]	; 0x28
 8009df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df6:	3301      	adds	r3, #1
 8009df8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dfa:	e020      	b.n	8009e3e <_dtoa_r+0x8b2>
 8009dfc:	2336      	movs	r3, #54	; 0x36
 8009dfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009e02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	e795      	b.n	8009d34 <_dtoa_r+0x7a8>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	1e5d      	subs	r5, r3, #1
 8009e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e0e:	42ab      	cmp	r3, r5
 8009e10:	db07      	blt.n	8009e22 <_dtoa_r+0x896>
 8009e12:	1b5d      	subs	r5, r3, r5
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da8b      	bge.n	8009d34 <_dtoa_r+0x7a8>
 8009e1c:	1ae4      	subs	r4, r4, r3
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e788      	b.n	8009d34 <_dtoa_r+0x7a8>
 8009e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e26:	1aeb      	subs	r3, r5, r3
 8009e28:	18d3      	adds	r3, r2, r3
 8009e2a:	950d      	str	r5, [sp, #52]	; 0x34
 8009e2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e2e:	2500      	movs	r5, #0
 8009e30:	e7f0      	b.n	8009e14 <_dtoa_r+0x888>
 8009e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e34:	e7b7      	b.n	8009da6 <_dtoa_r+0x81a>
 8009e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e38:	2500      	movs	r5, #0
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	ddca      	ble.n	8009dd4 <_dtoa_r+0x848>
 8009e3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e40:	2001      	movs	r0, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <_dtoa_r+0x8cc>
 8009e46:	6933      	ldr	r3, [r6, #16]
 8009e48:	3303      	adds	r3, #3
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	18f3      	adds	r3, r6, r3
 8009e4e:	6858      	ldr	r0, [r3, #4]
 8009e50:	f000 fb5e 	bl	800a510 <__hi0bits>
 8009e54:	2320      	movs	r3, #32
 8009e56:	1a18      	subs	r0, r3, r0
 8009e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e5a:	1818      	adds	r0, r3, r0
 8009e5c:	0002      	movs	r2, r0
 8009e5e:	231f      	movs	r3, #31
 8009e60:	401a      	ands	r2, r3
 8009e62:	4218      	tst	r0, r3
 8009e64:	d047      	beq.n	8009ef6 <_dtoa_r+0x96a>
 8009e66:	3301      	adds	r3, #1
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	dd3f      	ble.n	8009eee <_dtoa_r+0x962>
 8009e6e:	231c      	movs	r3, #28
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e74:	18e4      	adds	r4, r4, r3
 8009e76:	18d2      	adds	r2, r2, r3
 8009e78:	920a      	str	r2, [sp, #40]	; 0x28
 8009e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e7c:	18d3      	adds	r3, r2, r3
 8009e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd05      	ble.n	8009e92 <_dtoa_r+0x906>
 8009e86:	001a      	movs	r2, r3
 8009e88:	9905      	ldr	r1, [sp, #20]
 8009e8a:	9804      	ldr	r0, [sp, #16]
 8009e8c:	f000 fcac 	bl	800a7e8 <__lshift>
 8009e90:	9005      	str	r0, [sp, #20]
 8009e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd05      	ble.n	8009ea4 <_dtoa_r+0x918>
 8009e98:	0031      	movs	r1, r6
 8009e9a:	001a      	movs	r2, r3
 8009e9c:	9804      	ldr	r0, [sp, #16]
 8009e9e:	f000 fca3 	bl	800a7e8 <__lshift>
 8009ea2:	0006      	movs	r6, r0
 8009ea4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d027      	beq.n	8009efa <_dtoa_r+0x96e>
 8009eaa:	0031      	movs	r1, r6
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	f000 fd09 	bl	800a8c4 <__mcmp>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	da21      	bge.n	8009efa <_dtoa_r+0x96e>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	220a      	movs	r2, #10
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	9905      	ldr	r1, [sp, #20]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9804      	ldr	r0, [sp, #16]
 8009ec4:	f000 fae0 	bl	800a488 <__multadd>
 8009ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eca:	9005      	str	r0, [sp, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d100      	bne.n	8009ed2 <_dtoa_r+0x946>
 8009ed0:	e15d      	b.n	800a18e <_dtoa_r+0xc02>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	0039      	movs	r1, r7
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	9804      	ldr	r0, [sp, #16]
 8009eda:	f000 fad5 	bl	800a488 <__multadd>
 8009ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee0:	0007      	movs	r7, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc49      	bgt.n	8009f7a <_dtoa_r+0x9ee>
 8009ee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	dc0e      	bgt.n	8009f0a <_dtoa_r+0x97e>
 8009eec:	e045      	b.n	8009f7a <_dtoa_r+0x9ee>
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d0c6      	beq.n	8009e80 <_dtoa_r+0x8f4>
 8009ef2:	331c      	adds	r3, #28
 8009ef4:	e7bd      	b.n	8009e72 <_dtoa_r+0x8e6>
 8009ef6:	0013      	movs	r3, r2
 8009ef8:	e7fb      	b.n	8009ef2 <_dtoa_r+0x966>
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dc36      	bgt.n	8009f6e <_dtoa_r+0x9e2>
 8009f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	dd33      	ble.n	8009f6e <_dtoa_r+0x9e2>
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <_dtoa_r+0x99e>
 8009f10:	0031      	movs	r1, r6
 8009f12:	2205      	movs	r2, #5
 8009f14:	9804      	ldr	r0, [sp, #16]
 8009f16:	f000 fab7 	bl	800a488 <__multadd>
 8009f1a:	0006      	movs	r6, r0
 8009f1c:	0001      	movs	r1, r0
 8009f1e:	9805      	ldr	r0, [sp, #20]
 8009f20:	f000 fcd0 	bl	800a8c4 <__mcmp>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	dd00      	ble.n	8009f2a <_dtoa_r+0x99e>
 8009f28:	e59f      	b.n	8009a6a <_dtoa_r+0x4de>
 8009f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	9b06      	ldr	r3, [sp, #24]
 8009f32:	9308      	str	r3, [sp, #32]
 8009f34:	2500      	movs	r5, #0
 8009f36:	0031      	movs	r1, r6
 8009f38:	9804      	ldr	r0, [sp, #16]
 8009f3a:	f000 fa81 	bl	800a440 <_Bfree>
 8009f3e:	2f00      	cmp	r7, #0
 8009f40:	d100      	bne.n	8009f44 <_dtoa_r+0x9b8>
 8009f42:	e6a3      	b.n	8009c8c <_dtoa_r+0x700>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d005      	beq.n	8009f54 <_dtoa_r+0x9c8>
 8009f48:	42bd      	cmp	r5, r7
 8009f4a:	d003      	beq.n	8009f54 <_dtoa_r+0x9c8>
 8009f4c:	0029      	movs	r1, r5
 8009f4e:	9804      	ldr	r0, [sp, #16]
 8009f50:	f000 fa76 	bl	800a440 <_Bfree>
 8009f54:	0039      	movs	r1, r7
 8009f56:	9804      	ldr	r0, [sp, #16]
 8009f58:	f000 fa72 	bl	800a440 <_Bfree>
 8009f5c:	e696      	b.n	8009c8c <_dtoa_r+0x700>
 8009f5e:	2600      	movs	r6, #0
 8009f60:	0037      	movs	r7, r6
 8009f62:	e7e2      	b.n	8009f2a <_dtoa_r+0x99e>
 8009f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f66:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	0037      	movs	r7, r6
 8009f6c:	e57d      	b.n	8009a6a <_dtoa_r+0x4de>
 8009f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d100      	bne.n	8009f76 <_dtoa_r+0x9ea>
 8009f74:	e0c3      	b.n	800a0fe <_dtoa_r+0xb72>
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	dd05      	ble.n	8009f8a <_dtoa_r+0x9fe>
 8009f7e:	0039      	movs	r1, r7
 8009f80:	0022      	movs	r2, r4
 8009f82:	9804      	ldr	r0, [sp, #16]
 8009f84:	f000 fc30 	bl	800a7e8 <__lshift>
 8009f88:	0007      	movs	r7, r0
 8009f8a:	0038      	movs	r0, r7
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	d024      	beq.n	8009fda <_dtoa_r+0xa4e>
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	9804      	ldr	r0, [sp, #16]
 8009f94:	f000 fa10 	bl	800a3b8 <_Balloc>
 8009f98:	1e04      	subs	r4, r0, #0
 8009f9a:	d111      	bne.n	8009fc0 <_dtoa_r+0xa34>
 8009f9c:	0022      	movs	r2, r4
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <_dtoa_r+0xa28>)
 8009fa0:	4805      	ldr	r0, [pc, #20]	; (8009fb8 <_dtoa_r+0xa2c>)
 8009fa2:	4906      	ldr	r1, [pc, #24]	; (8009fbc <_dtoa_r+0xa30>)
 8009fa4:	f7ff fb07 	bl	80095b6 <_dtoa_r+0x2a>
 8009fa8:	40240000 	.word	0x40240000
 8009fac:	00000433 	.word	0x00000433
 8009fb0:	7ff00000 	.word	0x7ff00000
 8009fb4:	0800b8c4 	.word	0x0800b8c4
 8009fb8:	0800b86c 	.word	0x0800b86c
 8009fbc:	000002ef 	.word	0x000002ef
 8009fc0:	0039      	movs	r1, r7
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	310c      	adds	r1, #12
 8009fc6:	3202      	adds	r2, #2
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	300c      	adds	r0, #12
 8009fcc:	f000 ffca 	bl	800af64 <memcpy>
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	0021      	movs	r1, r4
 8009fd4:	9804      	ldr	r0, [sp, #16]
 8009fd6:	f000 fc07 	bl	800a7e8 <__lshift>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fde:	9307      	str	r3, [sp, #28]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	003d      	movs	r5, r7
 8009fe8:	0007      	movs	r7, r0
 8009fea:	930e      	str	r3, [sp, #56]	; 0x38
 8009fec:	9b08      	ldr	r3, [sp, #32]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff2:	0031      	movs	r1, r6
 8009ff4:	9805      	ldr	r0, [sp, #20]
 8009ff6:	f7ff fa39 	bl	800946c <quorem>
 8009ffa:	0029      	movs	r1, r5
 8009ffc:	0004      	movs	r4, r0
 8009ffe:	900b      	str	r0, [sp, #44]	; 0x2c
 800a000:	9805      	ldr	r0, [sp, #20]
 800a002:	f000 fc5f 	bl	800a8c4 <__mcmp>
 800a006:	003a      	movs	r2, r7
 800a008:	900c      	str	r0, [sp, #48]	; 0x30
 800a00a:	0031      	movs	r1, r6
 800a00c:	9804      	ldr	r0, [sp, #16]
 800a00e:	f000 fc75 	bl	800a8fc <__mdiff>
 800a012:	2201      	movs	r2, #1
 800a014:	68c3      	ldr	r3, [r0, #12]
 800a016:	3430      	adds	r4, #48	; 0x30
 800a018:	9008      	str	r0, [sp, #32]
 800a01a:	920a      	str	r2, [sp, #40]	; 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d104      	bne.n	800a02a <_dtoa_r+0xa9e>
 800a020:	0001      	movs	r1, r0
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	f000 fc4e 	bl	800a8c4 <__mcmp>
 800a028:	900a      	str	r0, [sp, #40]	; 0x28
 800a02a:	9908      	ldr	r1, [sp, #32]
 800a02c:	9804      	ldr	r0, [sp, #16]
 800a02e:	f000 fa07 	bl	800a440 <_Bfree>
 800a032:	9b07      	ldr	r3, [sp, #28]
 800a034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a036:	3301      	adds	r3, #1
 800a038:	9308      	str	r3, [sp, #32]
 800a03a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a03c:	4313      	orrs	r3, r2
 800a03e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a040:	4313      	orrs	r3, r2
 800a042:	d109      	bne.n	800a058 <_dtoa_r+0xacc>
 800a044:	2c39      	cmp	r4, #57	; 0x39
 800a046:	d022      	beq.n	800a08e <_dtoa_r+0xb02>
 800a048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd01      	ble.n	800a052 <_dtoa_r+0xac6>
 800a04e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a050:	3431      	adds	r4, #49	; 0x31
 800a052:	9b07      	ldr	r3, [sp, #28]
 800a054:	701c      	strb	r4, [r3, #0]
 800a056:	e76e      	b.n	8009f36 <_dtoa_r+0x9aa>
 800a058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	db04      	blt.n	800a068 <_dtoa_r+0xadc>
 800a05e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a060:	4313      	orrs	r3, r2
 800a062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a064:	4313      	orrs	r3, r2
 800a066:	d11e      	bne.n	800a0a6 <_dtoa_r+0xb1a>
 800a068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	ddf1      	ble.n	800a052 <_dtoa_r+0xac6>
 800a06e:	9905      	ldr	r1, [sp, #20]
 800a070:	2201      	movs	r2, #1
 800a072:	9804      	ldr	r0, [sp, #16]
 800a074:	f000 fbb8 	bl	800a7e8 <__lshift>
 800a078:	0031      	movs	r1, r6
 800a07a:	9005      	str	r0, [sp, #20]
 800a07c:	f000 fc22 	bl	800a8c4 <__mcmp>
 800a080:	2800      	cmp	r0, #0
 800a082:	dc02      	bgt.n	800a08a <_dtoa_r+0xafe>
 800a084:	d1e5      	bne.n	800a052 <_dtoa_r+0xac6>
 800a086:	07e3      	lsls	r3, r4, #31
 800a088:	d5e3      	bpl.n	800a052 <_dtoa_r+0xac6>
 800a08a:	2c39      	cmp	r4, #57	; 0x39
 800a08c:	d1df      	bne.n	800a04e <_dtoa_r+0xac2>
 800a08e:	2339      	movs	r3, #57	; 0x39
 800a090:	9a07      	ldr	r2, [sp, #28]
 800a092:	7013      	strb	r3, [r2, #0]
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	9308      	str	r3, [sp, #32]
 800a098:	3b01      	subs	r3, #1
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	2a39      	cmp	r2, #57	; 0x39
 800a09e:	d063      	beq.n	800a168 <_dtoa_r+0xbdc>
 800a0a0:	3201      	adds	r2, #1
 800a0a2:	701a      	strb	r2, [r3, #0]
 800a0a4:	e747      	b.n	8009f36 <_dtoa_r+0x9aa>
 800a0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd03      	ble.n	800a0b4 <_dtoa_r+0xb28>
 800a0ac:	2c39      	cmp	r4, #57	; 0x39
 800a0ae:	d0ee      	beq.n	800a08e <_dtoa_r+0xb02>
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	e7ce      	b.n	800a052 <_dtoa_r+0xac6>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	9a07      	ldr	r2, [sp, #28]
 800a0b8:	701c      	strb	r4, [r3, #0]
 800a0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d03e      	beq.n	800a13e <_dtoa_r+0xbb2>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	220a      	movs	r2, #10
 800a0c4:	9905      	ldr	r1, [sp, #20]
 800a0c6:	9804      	ldr	r0, [sp, #16]
 800a0c8:	f000 f9de 	bl	800a488 <__multadd>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9005      	str	r0, [sp, #20]
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	0029      	movs	r1, r5
 800a0d4:	9804      	ldr	r0, [sp, #16]
 800a0d6:	42bd      	cmp	r5, r7
 800a0d8:	d106      	bne.n	800a0e8 <_dtoa_r+0xb5c>
 800a0da:	f000 f9d5 	bl	800a488 <__multadd>
 800a0de:	0005      	movs	r5, r0
 800a0e0:	0007      	movs	r7, r0
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	9307      	str	r3, [sp, #28]
 800a0e6:	e784      	b.n	8009ff2 <_dtoa_r+0xa66>
 800a0e8:	f000 f9ce 	bl	800a488 <__multadd>
 800a0ec:	0039      	movs	r1, r7
 800a0ee:	0005      	movs	r5, r0
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	9804      	ldr	r0, [sp, #16]
 800a0f6:	f000 f9c7 	bl	800a488 <__multadd>
 800a0fa:	0007      	movs	r7, r0
 800a0fc:	e7f1      	b.n	800a0e2 <_dtoa_r+0xb56>
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	930b      	str	r3, [sp, #44]	; 0x2c
 800a102:	2500      	movs	r5, #0
 800a104:	0031      	movs	r1, r6
 800a106:	9805      	ldr	r0, [sp, #20]
 800a108:	f7ff f9b0 	bl	800946c <quorem>
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	3030      	adds	r0, #48	; 0x30
 800a110:	5558      	strb	r0, [r3, r5]
 800a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a114:	3501      	adds	r5, #1
 800a116:	0004      	movs	r4, r0
 800a118:	42ab      	cmp	r3, r5
 800a11a:	dd07      	ble.n	800a12c <_dtoa_r+0xba0>
 800a11c:	2300      	movs	r3, #0
 800a11e:	220a      	movs	r2, #10
 800a120:	9905      	ldr	r1, [sp, #20]
 800a122:	9804      	ldr	r0, [sp, #16]
 800a124:	f000 f9b0 	bl	800a488 <__multadd>
 800a128:	9005      	str	r0, [sp, #20]
 800a12a:	e7eb      	b.n	800a104 <_dtoa_r+0xb78>
 800a12c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a12e:	2301      	movs	r3, #1
 800a130:	2a00      	cmp	r2, #0
 800a132:	dd00      	ble.n	800a136 <_dtoa_r+0xbaa>
 800a134:	0013      	movs	r3, r2
 800a136:	2500      	movs	r5, #0
 800a138:	9a06      	ldr	r2, [sp, #24]
 800a13a:	18d3      	adds	r3, r2, r3
 800a13c:	9308      	str	r3, [sp, #32]
 800a13e:	9905      	ldr	r1, [sp, #20]
 800a140:	2201      	movs	r2, #1
 800a142:	9804      	ldr	r0, [sp, #16]
 800a144:	f000 fb50 	bl	800a7e8 <__lshift>
 800a148:	0031      	movs	r1, r6
 800a14a:	9005      	str	r0, [sp, #20]
 800a14c:	f000 fbba 	bl	800a8c4 <__mcmp>
 800a150:	2800      	cmp	r0, #0
 800a152:	dc9f      	bgt.n	800a094 <_dtoa_r+0xb08>
 800a154:	d101      	bne.n	800a15a <_dtoa_r+0xbce>
 800a156:	07e4      	lsls	r4, r4, #31
 800a158:	d49c      	bmi.n	800a094 <_dtoa_r+0xb08>
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	9308      	str	r3, [sp, #32]
 800a15e:	3b01      	subs	r3, #1
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	2a30      	cmp	r2, #48	; 0x30
 800a164:	d0fa      	beq.n	800a15c <_dtoa_r+0xbd0>
 800a166:	e6e6      	b.n	8009f36 <_dtoa_r+0x9aa>
 800a168:	9a06      	ldr	r2, [sp, #24]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d193      	bne.n	800a096 <_dtoa_r+0xb0a>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	9303      	str	r3, [sp, #12]
 800a174:	2331      	movs	r3, #49	; 0x31
 800a176:	7013      	strb	r3, [r2, #0]
 800a178:	e6dd      	b.n	8009f36 <_dtoa_r+0x9aa>
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <_dtoa_r+0xc14>)
 800a17c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a17e:	9306      	str	r3, [sp, #24]
 800a180:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <_dtoa_r+0xc18>)
 800a182:	2a00      	cmp	r2, #0
 800a184:	d001      	beq.n	800a18a <_dtoa_r+0xbfe>
 800a186:	f7ff fa49 	bl	800961c <_dtoa_r+0x90>
 800a18a:	f7ff fa49 	bl	8009620 <_dtoa_r+0x94>
 800a18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a190:	2b00      	cmp	r3, #0
 800a192:	dcb6      	bgt.n	800a102 <_dtoa_r+0xb76>
 800a194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a196:	2b02      	cmp	r3, #2
 800a198:	dd00      	ble.n	800a19c <_dtoa_r+0xc10>
 800a19a:	e6b6      	b.n	8009f0a <_dtoa_r+0x97e>
 800a19c:	e7b1      	b.n	800a102 <_dtoa_r+0xb76>
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	0800b848 	.word	0x0800b848
 800a1a4:	0800b850 	.word	0x0800b850

0800a1a8 <_free_r>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	0005      	movs	r5, r0
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d010      	beq.n	800a1d2 <_free_r+0x2a>
 800a1b0:	1f0c      	subs	r4, r1, #4
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da00      	bge.n	800a1ba <_free_r+0x12>
 800a1b8:	18e4      	adds	r4, r4, r3
 800a1ba:	0028      	movs	r0, r5
 800a1bc:	f000 f8ec 	bl	800a398 <__malloc_lock>
 800a1c0:	4a1d      	ldr	r2, [pc, #116]	; (800a238 <_free_r+0x90>)
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d105      	bne.n	800a1d4 <_free_r+0x2c>
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	6014      	str	r4, [r2, #0]
 800a1cc:	0028      	movs	r0, r5
 800a1ce:	f000 f8eb 	bl	800a3a8 <__malloc_unlock>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d908      	bls.n	800a1ea <_free_r+0x42>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	1821      	adds	r1, r4, r0
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	d1f3      	bne.n	800a1c8 <_free_r+0x20>
 800a1e0:	6819      	ldr	r1, [r3, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	1809      	adds	r1, r1, r0
 800a1e6:	6021      	str	r1, [r4, #0]
 800a1e8:	e7ee      	b.n	800a1c8 <_free_r+0x20>
 800a1ea:	001a      	movs	r2, r3
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <_free_r+0x4e>
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	d9f9      	bls.n	800a1ea <_free_r+0x42>
 800a1f6:	6811      	ldr	r1, [r2, #0]
 800a1f8:	1850      	adds	r0, r2, r1
 800a1fa:	42a0      	cmp	r0, r4
 800a1fc:	d10b      	bne.n	800a216 <_free_r+0x6e>
 800a1fe:	6820      	ldr	r0, [r4, #0]
 800a200:	1809      	adds	r1, r1, r0
 800a202:	1850      	adds	r0, r2, r1
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	4283      	cmp	r3, r0
 800a208:	d1e0      	bne.n	800a1cc <_free_r+0x24>
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	1841      	adds	r1, r0, r1
 800a210:	6011      	str	r1, [r2, #0]
 800a212:	6053      	str	r3, [r2, #4]
 800a214:	e7da      	b.n	800a1cc <_free_r+0x24>
 800a216:	42a0      	cmp	r0, r4
 800a218:	d902      	bls.n	800a220 <_free_r+0x78>
 800a21a:	230c      	movs	r3, #12
 800a21c:	602b      	str	r3, [r5, #0]
 800a21e:	e7d5      	b.n	800a1cc <_free_r+0x24>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	1821      	adds	r1, r4, r0
 800a224:	428b      	cmp	r3, r1
 800a226:	d103      	bne.n	800a230 <_free_r+0x88>
 800a228:	6819      	ldr	r1, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	1809      	adds	r1, r1, r0
 800a22e:	6021      	str	r1, [r4, #0]
 800a230:	6063      	str	r3, [r4, #4]
 800a232:	6054      	str	r4, [r2, #4]
 800a234:	e7ca      	b.n	800a1cc <_free_r+0x24>
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	20000604 	.word	0x20000604

0800a23c <malloc>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4b03      	ldr	r3, [pc, #12]	; (800a24c <malloc+0x10>)
 800a240:	0001      	movs	r1, r0
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	f000 f826 	bl	800a294 <_malloc_r>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	46c0      	nop			; (mov r8, r8)
 800a24c:	20000064 	.word	0x20000064

0800a250 <sbrk_aligned>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	4e0f      	ldr	r6, [pc, #60]	; (800a290 <sbrk_aligned+0x40>)
 800a254:	000d      	movs	r5, r1
 800a256:	6831      	ldr	r1, [r6, #0]
 800a258:	0004      	movs	r4, r0
 800a25a:	2900      	cmp	r1, #0
 800a25c:	d102      	bne.n	800a264 <sbrk_aligned+0x14>
 800a25e:	f000 fe6f 	bl	800af40 <_sbrk_r>
 800a262:	6030      	str	r0, [r6, #0]
 800a264:	0029      	movs	r1, r5
 800a266:	0020      	movs	r0, r4
 800a268:	f000 fe6a 	bl	800af40 <_sbrk_r>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d00a      	beq.n	800a286 <sbrk_aligned+0x36>
 800a270:	2303      	movs	r3, #3
 800a272:	1cc5      	adds	r5, r0, #3
 800a274:	439d      	bics	r5, r3
 800a276:	42a8      	cmp	r0, r5
 800a278:	d007      	beq.n	800a28a <sbrk_aligned+0x3a>
 800a27a:	1a29      	subs	r1, r5, r0
 800a27c:	0020      	movs	r0, r4
 800a27e:	f000 fe5f 	bl	800af40 <_sbrk_r>
 800a282:	3001      	adds	r0, #1
 800a284:	d101      	bne.n	800a28a <sbrk_aligned+0x3a>
 800a286:	2501      	movs	r5, #1
 800a288:	426d      	negs	r5, r5
 800a28a:	0028      	movs	r0, r5
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	20000608 	.word	0x20000608

0800a294 <_malloc_r>:
 800a294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a296:	2203      	movs	r2, #3
 800a298:	1ccb      	adds	r3, r1, #3
 800a29a:	4393      	bics	r3, r2
 800a29c:	3308      	adds	r3, #8
 800a29e:	0006      	movs	r6, r0
 800a2a0:	001f      	movs	r7, r3
 800a2a2:	2b0c      	cmp	r3, #12
 800a2a4:	d238      	bcs.n	800a318 <_malloc_r+0x84>
 800a2a6:	270c      	movs	r7, #12
 800a2a8:	42b9      	cmp	r1, r7
 800a2aa:	d837      	bhi.n	800a31c <_malloc_r+0x88>
 800a2ac:	0030      	movs	r0, r6
 800a2ae:	f000 f873 	bl	800a398 <__malloc_lock>
 800a2b2:	4b38      	ldr	r3, [pc, #224]	; (800a394 <_malloc_r+0x100>)
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	001c      	movs	r4, r3
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d133      	bne.n	800a326 <_malloc_r+0x92>
 800a2be:	0039      	movs	r1, r7
 800a2c0:	0030      	movs	r0, r6
 800a2c2:	f7ff ffc5 	bl	800a250 <sbrk_aligned>
 800a2c6:	0004      	movs	r4, r0
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d15e      	bne.n	800a38a <_malloc_r+0xf6>
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	681c      	ldr	r4, [r3, #0]
 800a2d0:	0025      	movs	r5, r4
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	d14e      	bne.n	800a374 <_malloc_r+0xe0>
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d051      	beq.n	800a37e <_malloc_r+0xea>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	0029      	movs	r1, r5
 800a2de:	18e3      	adds	r3, r4, r3
 800a2e0:	0030      	movs	r0, r6
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	f000 fe2c 	bl	800af40 <_sbrk_r>
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	4283      	cmp	r3, r0
 800a2ec:	d147      	bne.n	800a37e <_malloc_r+0xea>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0030      	movs	r0, r6
 800a2f2:	1aff      	subs	r7, r7, r3
 800a2f4:	0039      	movs	r1, r7
 800a2f6:	f7ff ffab 	bl	800a250 <sbrk_aligned>
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d03f      	beq.n	800a37e <_malloc_r+0xea>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	19db      	adds	r3, r3, r7
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	9b00      	ldr	r3, [sp, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d040      	beq.n	800a38e <_malloc_r+0xfa>
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	42a2      	cmp	r2, r4
 800a310:	d133      	bne.n	800a37a <_malloc_r+0xe6>
 800a312:	2200      	movs	r2, #0
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	e014      	b.n	800a342 <_malloc_r+0xae>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dac5      	bge.n	800a2a8 <_malloc_r+0x14>
 800a31c:	230c      	movs	r3, #12
 800a31e:	2500      	movs	r5, #0
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	0028      	movs	r0, r5
 800a324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a326:	6821      	ldr	r1, [r4, #0]
 800a328:	1bc9      	subs	r1, r1, r7
 800a32a:	d420      	bmi.n	800a36e <_malloc_r+0xda>
 800a32c:	290b      	cmp	r1, #11
 800a32e:	d918      	bls.n	800a362 <_malloc_r+0xce>
 800a330:	19e2      	adds	r2, r4, r7
 800a332:	6027      	str	r7, [r4, #0]
 800a334:	42a3      	cmp	r3, r4
 800a336:	d112      	bne.n	800a35e <_malloc_r+0xca>
 800a338:	9b00      	ldr	r3, [sp, #0]
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	6011      	str	r1, [r2, #0]
 800a340:	6053      	str	r3, [r2, #4]
 800a342:	0030      	movs	r0, r6
 800a344:	0025      	movs	r5, r4
 800a346:	f000 f82f 	bl	800a3a8 <__malloc_unlock>
 800a34a:	2207      	movs	r2, #7
 800a34c:	350b      	adds	r5, #11
 800a34e:	1d23      	adds	r3, r4, #4
 800a350:	4395      	bics	r5, r2
 800a352:	1aea      	subs	r2, r5, r3
 800a354:	429d      	cmp	r5, r3
 800a356:	d0e4      	beq.n	800a322 <_malloc_r+0x8e>
 800a358:	1b5b      	subs	r3, r3, r5
 800a35a:	50a3      	str	r3, [r4, r2]
 800a35c:	e7e1      	b.n	800a322 <_malloc_r+0x8e>
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	e7ec      	b.n	800a33c <_malloc_r+0xa8>
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	42a3      	cmp	r3, r4
 800a366:	d1d5      	bne.n	800a314 <_malloc_r+0x80>
 800a368:	9b00      	ldr	r3, [sp, #0]
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	e7e9      	b.n	800a342 <_malloc_r+0xae>
 800a36e:	0023      	movs	r3, r4
 800a370:	6864      	ldr	r4, [r4, #4]
 800a372:	e7a2      	b.n	800a2ba <_malloc_r+0x26>
 800a374:	002c      	movs	r4, r5
 800a376:	686d      	ldr	r5, [r5, #4]
 800a378:	e7ab      	b.n	800a2d2 <_malloc_r+0x3e>
 800a37a:	0013      	movs	r3, r2
 800a37c:	e7c4      	b.n	800a308 <_malloc_r+0x74>
 800a37e:	230c      	movs	r3, #12
 800a380:	0030      	movs	r0, r6
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f000 f810 	bl	800a3a8 <__malloc_unlock>
 800a388:	e7cb      	b.n	800a322 <_malloc_r+0x8e>
 800a38a:	6027      	str	r7, [r4, #0]
 800a38c:	e7d9      	b.n	800a342 <_malloc_r+0xae>
 800a38e:	605b      	str	r3, [r3, #4]
 800a390:	deff      	udf	#255	; 0xff
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	20000604 	.word	0x20000604

0800a398 <__malloc_lock>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	4802      	ldr	r0, [pc, #8]	; (800a3a4 <__malloc_lock+0xc>)
 800a39c:	f7ff f859 	bl	8009452 <__retarget_lock_acquire_recursive>
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	20000600 	.word	0x20000600

0800a3a8 <__malloc_unlock>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	4802      	ldr	r0, [pc, #8]	; (800a3b4 <__malloc_unlock+0xc>)
 800a3ac:	f7ff f852 	bl	8009454 <__retarget_lock_release_recursive>
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	20000600 	.word	0x20000600

0800a3b8 <_Balloc>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	69c5      	ldr	r5, [r0, #28]
 800a3bc:	0006      	movs	r6, r0
 800a3be:	000c      	movs	r4, r1
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	d10e      	bne.n	800a3e2 <_Balloc+0x2a>
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f7ff ff39 	bl	800a23c <malloc>
 800a3ca:	1e02      	subs	r2, r0, #0
 800a3cc:	61f0      	str	r0, [r6, #28]
 800a3ce:	d104      	bne.n	800a3da <_Balloc+0x22>
 800a3d0:	216b      	movs	r1, #107	; 0x6b
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <_Balloc+0x80>)
 800a3d4:	4819      	ldr	r0, [pc, #100]	; (800a43c <_Balloc+0x84>)
 800a3d6:	f000 fdcf 	bl	800af78 <__assert_func>
 800a3da:	6045      	str	r5, [r0, #4]
 800a3dc:	6085      	str	r5, [r0, #8]
 800a3de:	6005      	str	r5, [r0, #0]
 800a3e0:	60c5      	str	r5, [r0, #12]
 800a3e2:	69f5      	ldr	r5, [r6, #28]
 800a3e4:	68eb      	ldr	r3, [r5, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d013      	beq.n	800a412 <_Balloc+0x5a>
 800a3ea:	69f3      	ldr	r3, [r6, #28]
 800a3ec:	00a2      	lsls	r2, r4, #2
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	189b      	adds	r3, r3, r2
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d118      	bne.n	800a42a <_Balloc+0x72>
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	000d      	movs	r5, r1
 800a3fc:	40a5      	lsls	r5, r4
 800a3fe:	1d6a      	adds	r2, r5, #5
 800a400:	0030      	movs	r0, r6
 800a402:	0092      	lsls	r2, r2, #2
 800a404:	f000 fdd6 	bl	800afb4 <_calloc_r>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d00c      	beq.n	800a426 <_Balloc+0x6e>
 800a40c:	6044      	str	r4, [r0, #4]
 800a40e:	6085      	str	r5, [r0, #8]
 800a410:	e00d      	b.n	800a42e <_Balloc+0x76>
 800a412:	2221      	movs	r2, #33	; 0x21
 800a414:	2104      	movs	r1, #4
 800a416:	0030      	movs	r0, r6
 800a418:	f000 fdcc 	bl	800afb4 <_calloc_r>
 800a41c:	69f3      	ldr	r3, [r6, #28]
 800a41e:	60e8      	str	r0, [r5, #12]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e1      	bne.n	800a3ea <_Balloc+0x32>
 800a426:	2000      	movs	r0, #0
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	6802      	ldr	r2, [r0, #0]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	6103      	str	r3, [r0, #16]
 800a432:	60c3      	str	r3, [r0, #12]
 800a434:	e7f8      	b.n	800a428 <_Balloc+0x70>
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	0800b855 	.word	0x0800b855
 800a43c:	0800b8d5 	.word	0x0800b8d5

0800a440 <_Bfree>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	69c6      	ldr	r6, [r0, #28]
 800a444:	0005      	movs	r5, r0
 800a446:	000c      	movs	r4, r1
 800a448:	2e00      	cmp	r6, #0
 800a44a:	d10e      	bne.n	800a46a <_Bfree+0x2a>
 800a44c:	2010      	movs	r0, #16
 800a44e:	f7ff fef5 	bl	800a23c <malloc>
 800a452:	1e02      	subs	r2, r0, #0
 800a454:	61e8      	str	r0, [r5, #28]
 800a456:	d104      	bne.n	800a462 <_Bfree+0x22>
 800a458:	218f      	movs	r1, #143	; 0x8f
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <_Bfree+0x40>)
 800a45c:	4809      	ldr	r0, [pc, #36]	; (800a484 <_Bfree+0x44>)
 800a45e:	f000 fd8b 	bl	800af78 <__assert_func>
 800a462:	6046      	str	r6, [r0, #4]
 800a464:	6086      	str	r6, [r0, #8]
 800a466:	6006      	str	r6, [r0, #0]
 800a468:	60c6      	str	r6, [r0, #12]
 800a46a:	2c00      	cmp	r4, #0
 800a46c:	d007      	beq.n	800a47e <_Bfree+0x3e>
 800a46e:	69eb      	ldr	r3, [r5, #28]
 800a470:	6862      	ldr	r2, [r4, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	189b      	adds	r3, r3, r2
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	601c      	str	r4, [r3, #0]
 800a47e:	bd70      	pop	{r4, r5, r6, pc}
 800a480:	0800b855 	.word	0x0800b855
 800a484:	0800b8d5 	.word	0x0800b8d5

0800a488 <__multadd>:
 800a488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a48a:	000e      	movs	r6, r1
 800a48c:	9001      	str	r0, [sp, #4]
 800a48e:	000c      	movs	r4, r1
 800a490:	001d      	movs	r5, r3
 800a492:	2000      	movs	r0, #0
 800a494:	690f      	ldr	r7, [r1, #16]
 800a496:	3614      	adds	r6, #20
 800a498:	6833      	ldr	r3, [r6, #0]
 800a49a:	3001      	adds	r0, #1
 800a49c:	b299      	uxth	r1, r3
 800a49e:	4351      	muls	r1, r2
 800a4a0:	0c1b      	lsrs	r3, r3, #16
 800a4a2:	4353      	muls	r3, r2
 800a4a4:	1949      	adds	r1, r1, r5
 800a4a6:	0c0d      	lsrs	r5, r1, #16
 800a4a8:	195b      	adds	r3, r3, r5
 800a4aa:	0c1d      	lsrs	r5, r3, #16
 800a4ac:	b289      	uxth	r1, r1
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	185b      	adds	r3, r3, r1
 800a4b2:	c608      	stmia	r6!, {r3}
 800a4b4:	4287      	cmp	r7, r0
 800a4b6:	dcef      	bgt.n	800a498 <__multadd+0x10>
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	d022      	beq.n	800a502 <__multadd+0x7a>
 800a4bc:	68a3      	ldr	r3, [r4, #8]
 800a4be:	42bb      	cmp	r3, r7
 800a4c0:	dc19      	bgt.n	800a4f6 <__multadd+0x6e>
 800a4c2:	6861      	ldr	r1, [r4, #4]
 800a4c4:	9801      	ldr	r0, [sp, #4]
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	f7ff ff76 	bl	800a3b8 <_Balloc>
 800a4cc:	1e06      	subs	r6, r0, #0
 800a4ce:	d105      	bne.n	800a4dc <__multadd+0x54>
 800a4d0:	0032      	movs	r2, r6
 800a4d2:	21ba      	movs	r1, #186	; 0xba
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <__multadd+0x80>)
 800a4d6:	480d      	ldr	r0, [pc, #52]	; (800a50c <__multadd+0x84>)
 800a4d8:	f000 fd4e 	bl	800af78 <__assert_func>
 800a4dc:	0021      	movs	r1, r4
 800a4de:	6922      	ldr	r2, [r4, #16]
 800a4e0:	310c      	adds	r1, #12
 800a4e2:	3202      	adds	r2, #2
 800a4e4:	0092      	lsls	r2, r2, #2
 800a4e6:	300c      	adds	r0, #12
 800a4e8:	f000 fd3c 	bl	800af64 <memcpy>
 800a4ec:	0021      	movs	r1, r4
 800a4ee:	9801      	ldr	r0, [sp, #4]
 800a4f0:	f7ff ffa6 	bl	800a440 <_Bfree>
 800a4f4:	0034      	movs	r4, r6
 800a4f6:	1d3b      	adds	r3, r7, #4
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	18e3      	adds	r3, r4, r3
 800a4fc:	605d      	str	r5, [r3, #4]
 800a4fe:	1c7b      	adds	r3, r7, #1
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	0020      	movs	r0, r4
 800a504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	0800b8c4 	.word	0x0800b8c4
 800a50c:	0800b8d5 	.word	0x0800b8d5

0800a510 <__hi0bits>:
 800a510:	0003      	movs	r3, r0
 800a512:	0c02      	lsrs	r2, r0, #16
 800a514:	2000      	movs	r0, #0
 800a516:	4282      	cmp	r2, r0
 800a518:	d101      	bne.n	800a51e <__hi0bits+0xe>
 800a51a:	041b      	lsls	r3, r3, #16
 800a51c:	3010      	adds	r0, #16
 800a51e:	0e1a      	lsrs	r2, r3, #24
 800a520:	d101      	bne.n	800a526 <__hi0bits+0x16>
 800a522:	3008      	adds	r0, #8
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	0f1a      	lsrs	r2, r3, #28
 800a528:	d101      	bne.n	800a52e <__hi0bits+0x1e>
 800a52a:	3004      	adds	r0, #4
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	0f9a      	lsrs	r2, r3, #30
 800a530:	d101      	bne.n	800a536 <__hi0bits+0x26>
 800a532:	3002      	adds	r0, #2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	db03      	blt.n	800a542 <__hi0bits+0x32>
 800a53a:	3001      	adds	r0, #1
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	d400      	bmi.n	800a542 <__hi0bits+0x32>
 800a540:	2020      	movs	r0, #32
 800a542:	4770      	bx	lr

0800a544 <__lo0bits>:
 800a544:	6803      	ldr	r3, [r0, #0]
 800a546:	0001      	movs	r1, r0
 800a548:	2207      	movs	r2, #7
 800a54a:	0018      	movs	r0, r3
 800a54c:	4010      	ands	r0, r2
 800a54e:	4213      	tst	r3, r2
 800a550:	d00d      	beq.n	800a56e <__lo0bits+0x2a>
 800a552:	3a06      	subs	r2, #6
 800a554:	2000      	movs	r0, #0
 800a556:	4213      	tst	r3, r2
 800a558:	d105      	bne.n	800a566 <__lo0bits+0x22>
 800a55a:	3002      	adds	r0, #2
 800a55c:	4203      	tst	r3, r0
 800a55e:	d003      	beq.n	800a568 <__lo0bits+0x24>
 800a560:	40d3      	lsrs	r3, r2
 800a562:	0010      	movs	r0, r2
 800a564:	600b      	str	r3, [r1, #0]
 800a566:	4770      	bx	lr
 800a568:	089b      	lsrs	r3, r3, #2
 800a56a:	600b      	str	r3, [r1, #0]
 800a56c:	e7fb      	b.n	800a566 <__lo0bits+0x22>
 800a56e:	b29a      	uxth	r2, r3
 800a570:	2a00      	cmp	r2, #0
 800a572:	d101      	bne.n	800a578 <__lo0bits+0x34>
 800a574:	2010      	movs	r0, #16
 800a576:	0c1b      	lsrs	r3, r3, #16
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	d101      	bne.n	800a582 <__lo0bits+0x3e>
 800a57e:	3008      	adds	r0, #8
 800a580:	0a1b      	lsrs	r3, r3, #8
 800a582:	071a      	lsls	r2, r3, #28
 800a584:	d101      	bne.n	800a58a <__lo0bits+0x46>
 800a586:	3004      	adds	r0, #4
 800a588:	091b      	lsrs	r3, r3, #4
 800a58a:	079a      	lsls	r2, r3, #30
 800a58c:	d101      	bne.n	800a592 <__lo0bits+0x4e>
 800a58e:	3002      	adds	r0, #2
 800a590:	089b      	lsrs	r3, r3, #2
 800a592:	07da      	lsls	r2, r3, #31
 800a594:	d4e9      	bmi.n	800a56a <__lo0bits+0x26>
 800a596:	3001      	adds	r0, #1
 800a598:	085b      	lsrs	r3, r3, #1
 800a59a:	d1e6      	bne.n	800a56a <__lo0bits+0x26>
 800a59c:	2020      	movs	r0, #32
 800a59e:	e7e2      	b.n	800a566 <__lo0bits+0x22>

0800a5a0 <__i2b>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	000c      	movs	r4, r1
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	f7ff ff07 	bl	800a3b8 <_Balloc>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d107      	bne.n	800a5be <__i2b+0x1e>
 800a5ae:	2146      	movs	r1, #70	; 0x46
 800a5b0:	4c05      	ldr	r4, [pc, #20]	; (800a5c8 <__i2b+0x28>)
 800a5b2:	0002      	movs	r2, r0
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <__i2b+0x2c>)
 800a5b6:	0020      	movs	r0, r4
 800a5b8:	31ff      	adds	r1, #255	; 0xff
 800a5ba:	f000 fcdd 	bl	800af78 <__assert_func>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	6144      	str	r4, [r0, #20]
 800a5c2:	6103      	str	r3, [r0, #16]
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	0800b8d5 	.word	0x0800b8d5
 800a5cc:	0800b8c4 	.word	0x0800b8c4

0800a5d0 <__multiply>:
 800a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5d2:	0015      	movs	r5, r2
 800a5d4:	690a      	ldr	r2, [r1, #16]
 800a5d6:	692b      	ldr	r3, [r5, #16]
 800a5d8:	000c      	movs	r4, r1
 800a5da:	b08b      	sub	sp, #44	; 0x2c
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	da01      	bge.n	800a5e4 <__multiply+0x14>
 800a5e0:	002c      	movs	r4, r5
 800a5e2:	000d      	movs	r5, r1
 800a5e4:	6927      	ldr	r7, [r4, #16]
 800a5e6:	692e      	ldr	r6, [r5, #16]
 800a5e8:	6861      	ldr	r1, [r4, #4]
 800a5ea:	19bb      	adds	r3, r7, r6
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	19ba      	adds	r2, r7, r6
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	da00      	bge.n	800a5f8 <__multiply+0x28>
 800a5f6:	3101      	adds	r1, #1
 800a5f8:	f7ff fede 	bl	800a3b8 <_Balloc>
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d106      	bne.n	800a610 <__multiply+0x40>
 800a602:	21b1      	movs	r1, #177	; 0xb1
 800a604:	4b48      	ldr	r3, [pc, #288]	; (800a728 <__multiply+0x158>)
 800a606:	4849      	ldr	r0, [pc, #292]	; (800a72c <__multiply+0x15c>)
 800a608:	9a02      	ldr	r2, [sp, #8]
 800a60a:	0049      	lsls	r1, r1, #1
 800a60c:	f000 fcb4 	bl	800af78 <__assert_func>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	3314      	adds	r3, #20
 800a616:	469c      	mov	ip, r3
 800a618:	19bb      	adds	r3, r7, r6
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4463      	add	r3, ip
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	4663      	mov	r3, ip
 800a622:	9904      	ldr	r1, [sp, #16]
 800a624:	428b      	cmp	r3, r1
 800a626:	d32a      	bcc.n	800a67e <__multiply+0xae>
 800a628:	0023      	movs	r3, r4
 800a62a:	00bf      	lsls	r7, r7, #2
 800a62c:	3314      	adds	r3, #20
 800a62e:	3514      	adds	r5, #20
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	00b6      	lsls	r6, r6, #2
 800a634:	19db      	adds	r3, r3, r7
 800a636:	9305      	str	r3, [sp, #20]
 800a638:	19ab      	adds	r3, r5, r6
 800a63a:	9309      	str	r3, [sp, #36]	; 0x24
 800a63c:	2304      	movs	r3, #4
 800a63e:	9306      	str	r3, [sp, #24]
 800a640:	0023      	movs	r3, r4
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	3315      	adds	r3, #21
 800a646:	9501      	str	r5, [sp, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d305      	bcc.n	800a658 <__multiply+0x88>
 800a64c:	1b13      	subs	r3, r2, r4
 800a64e:	3b15      	subs	r3, #21
 800a650:	089b      	lsrs	r3, r3, #2
 800a652:	3301      	adds	r3, #1
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	9306      	str	r3, [sp, #24]
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d310      	bcc.n	800a682 <__multiply+0xb2>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	dd05      	ble.n	800a672 <__multiply+0xa2>
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	3b04      	subs	r3, #4
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d056      	beq.n	800a720 <__multiply+0x150>
 800a672:	9b02      	ldr	r3, [sp, #8]
 800a674:	9a03      	ldr	r2, [sp, #12]
 800a676:	0018      	movs	r0, r3
 800a678:	611a      	str	r2, [r3, #16]
 800a67a:	b00b      	add	sp, #44	; 0x2c
 800a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a67e:	c304      	stmia	r3!, {r2}
 800a680:	e7cf      	b.n	800a622 <__multiply+0x52>
 800a682:	9b01      	ldr	r3, [sp, #4]
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	b280      	uxth	r0, r0
 800a688:	2800      	cmp	r0, #0
 800a68a:	d01e      	beq.n	800a6ca <__multiply+0xfa>
 800a68c:	4667      	mov	r7, ip
 800a68e:	2500      	movs	r5, #0
 800a690:	9e08      	ldr	r6, [sp, #32]
 800a692:	ce02      	ldmia	r6!, {r1}
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	9307      	str	r3, [sp, #28]
 800a698:	b28b      	uxth	r3, r1
 800a69a:	4343      	muls	r3, r0
 800a69c:	001a      	movs	r2, r3
 800a69e:	466b      	mov	r3, sp
 800a6a0:	8b9b      	ldrh	r3, [r3, #28]
 800a6a2:	18d3      	adds	r3, r2, r3
 800a6a4:	195b      	adds	r3, r3, r5
 800a6a6:	0c0d      	lsrs	r5, r1, #16
 800a6a8:	4345      	muls	r5, r0
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	0c11      	lsrs	r1, r2, #16
 800a6ae:	1869      	adds	r1, r5, r1
 800a6b0:	0c1a      	lsrs	r2, r3, #16
 800a6b2:	188a      	adds	r2, r1, r2
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	0c15      	lsrs	r5, r2, #16
 800a6b8:	0412      	lsls	r2, r2, #16
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	9b05      	ldr	r3, [sp, #20]
 800a6be:	c704      	stmia	r7!, {r2}
 800a6c0:	42b3      	cmp	r3, r6
 800a6c2:	d8e6      	bhi.n	800a692 <__multiply+0xc2>
 800a6c4:	4663      	mov	r3, ip
 800a6c6:	9a06      	ldr	r2, [sp, #24]
 800a6c8:	509d      	str	r5, [r3, r2]
 800a6ca:	9b01      	ldr	r3, [sp, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	0c00      	lsrs	r0, r0, #16
 800a6d0:	d020      	beq.n	800a714 <__multiply+0x144>
 800a6d2:	4663      	mov	r3, ip
 800a6d4:	0025      	movs	r5, r4
 800a6d6:	4661      	mov	r1, ip
 800a6d8:	2700      	movs	r7, #0
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3514      	adds	r5, #20
 800a6de:	682a      	ldr	r2, [r5, #0]
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	4342      	muls	r2, r0
 800a6e6:	0c36      	lsrs	r6, r6, #16
 800a6e8:	1992      	adds	r2, r2, r6
 800a6ea:	19d2      	adds	r2, r2, r7
 800a6ec:	0416      	lsls	r6, r2, #16
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	431e      	orrs	r6, r3
 800a6f2:	600e      	str	r6, [r1, #0]
 800a6f4:	cd40      	ldmia	r5!, {r6}
 800a6f6:	684b      	ldr	r3, [r1, #4]
 800a6f8:	0c36      	lsrs	r6, r6, #16
 800a6fa:	4346      	muls	r6, r0
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	0c12      	lsrs	r2, r2, #16
 800a700:	18f3      	adds	r3, r6, r3
 800a702:	189b      	adds	r3, r3, r2
 800a704:	9a05      	ldr	r2, [sp, #20]
 800a706:	0c1f      	lsrs	r7, r3, #16
 800a708:	3104      	adds	r1, #4
 800a70a:	42aa      	cmp	r2, r5
 800a70c:	d8e7      	bhi.n	800a6de <__multiply+0x10e>
 800a70e:	4662      	mov	r2, ip
 800a710:	9906      	ldr	r1, [sp, #24]
 800a712:	5053      	str	r3, [r2, r1]
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	3304      	adds	r3, #4
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	2304      	movs	r3, #4
 800a71c:	449c      	add	ip, r3
 800a71e:	e79b      	b.n	800a658 <__multiply+0x88>
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	3b01      	subs	r3, #1
 800a724:	9303      	str	r3, [sp, #12]
 800a726:	e79b      	b.n	800a660 <__multiply+0x90>
 800a728:	0800b8c4 	.word	0x0800b8c4
 800a72c:	0800b8d5 	.word	0x0800b8d5

0800a730 <__pow5mult>:
 800a730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a732:	2303      	movs	r3, #3
 800a734:	0015      	movs	r5, r2
 800a736:	0007      	movs	r7, r0
 800a738:	000e      	movs	r6, r1
 800a73a:	401a      	ands	r2, r3
 800a73c:	421d      	tst	r5, r3
 800a73e:	d008      	beq.n	800a752 <__pow5mult+0x22>
 800a740:	4925      	ldr	r1, [pc, #148]	; (800a7d8 <__pow5mult+0xa8>)
 800a742:	3a01      	subs	r2, #1
 800a744:	0092      	lsls	r2, r2, #2
 800a746:	5852      	ldr	r2, [r2, r1]
 800a748:	2300      	movs	r3, #0
 800a74a:	0031      	movs	r1, r6
 800a74c:	f7ff fe9c 	bl	800a488 <__multadd>
 800a750:	0006      	movs	r6, r0
 800a752:	10ad      	asrs	r5, r5, #2
 800a754:	d03d      	beq.n	800a7d2 <__pow5mult+0xa2>
 800a756:	69fc      	ldr	r4, [r7, #28]
 800a758:	2c00      	cmp	r4, #0
 800a75a:	d10f      	bne.n	800a77c <__pow5mult+0x4c>
 800a75c:	2010      	movs	r0, #16
 800a75e:	f7ff fd6d 	bl	800a23c <malloc>
 800a762:	1e02      	subs	r2, r0, #0
 800a764:	61f8      	str	r0, [r7, #28]
 800a766:	d105      	bne.n	800a774 <__pow5mult+0x44>
 800a768:	21b4      	movs	r1, #180	; 0xb4
 800a76a:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <__pow5mult+0xac>)
 800a76c:	481c      	ldr	r0, [pc, #112]	; (800a7e0 <__pow5mult+0xb0>)
 800a76e:	31ff      	adds	r1, #255	; 0xff
 800a770:	f000 fc02 	bl	800af78 <__assert_func>
 800a774:	6044      	str	r4, [r0, #4]
 800a776:	6084      	str	r4, [r0, #8]
 800a778:	6004      	str	r4, [r0, #0]
 800a77a:	60c4      	str	r4, [r0, #12]
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	689c      	ldr	r4, [r3, #8]
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	2c00      	cmp	r4, #0
 800a784:	d108      	bne.n	800a798 <__pow5mult+0x68>
 800a786:	0038      	movs	r0, r7
 800a788:	4916      	ldr	r1, [pc, #88]	; (800a7e4 <__pow5mult+0xb4>)
 800a78a:	f7ff ff09 	bl	800a5a0 <__i2b>
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	0004      	movs	r4, r0
 800a792:	6098      	str	r0, [r3, #8]
 800a794:	2300      	movs	r3, #0
 800a796:	6003      	str	r3, [r0, #0]
 800a798:	2301      	movs	r3, #1
 800a79a:	421d      	tst	r5, r3
 800a79c:	d00a      	beq.n	800a7b4 <__pow5mult+0x84>
 800a79e:	0031      	movs	r1, r6
 800a7a0:	0022      	movs	r2, r4
 800a7a2:	0038      	movs	r0, r7
 800a7a4:	f7ff ff14 	bl	800a5d0 <__multiply>
 800a7a8:	0031      	movs	r1, r6
 800a7aa:	9001      	str	r0, [sp, #4]
 800a7ac:	0038      	movs	r0, r7
 800a7ae:	f7ff fe47 	bl	800a440 <_Bfree>
 800a7b2:	9e01      	ldr	r6, [sp, #4]
 800a7b4:	106d      	asrs	r5, r5, #1
 800a7b6:	d00c      	beq.n	800a7d2 <__pow5mult+0xa2>
 800a7b8:	6820      	ldr	r0, [r4, #0]
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d107      	bne.n	800a7ce <__pow5mult+0x9e>
 800a7be:	0022      	movs	r2, r4
 800a7c0:	0021      	movs	r1, r4
 800a7c2:	0038      	movs	r0, r7
 800a7c4:	f7ff ff04 	bl	800a5d0 <__multiply>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	6003      	str	r3, [r0, #0]
 800a7ce:	0004      	movs	r4, r0
 800a7d0:	e7e2      	b.n	800a798 <__pow5mult+0x68>
 800a7d2:	0030      	movs	r0, r6
 800a7d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	0800ba20 	.word	0x0800ba20
 800a7dc:	0800b855 	.word	0x0800b855
 800a7e0:	0800b8d5 	.word	0x0800b8d5
 800a7e4:	00000271 	.word	0x00000271

0800a7e8 <__lshift>:
 800a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ea:	000c      	movs	r4, r1
 800a7ec:	0017      	movs	r7, r2
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	1155      	asrs	r5, r2, #5
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	18eb      	adds	r3, r5, r3
 800a7f6:	9302      	str	r3, [sp, #8]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	6849      	ldr	r1, [r1, #4]
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	9004      	str	r0, [sp, #16]
 800a802:	9a01      	ldr	r2, [sp, #4]
 800a804:	4293      	cmp	r3, r2
 800a806:	db10      	blt.n	800a82a <__lshift+0x42>
 800a808:	9804      	ldr	r0, [sp, #16]
 800a80a:	f7ff fdd5 	bl	800a3b8 <_Balloc>
 800a80e:	2300      	movs	r3, #0
 800a810:	0002      	movs	r2, r0
 800a812:	0006      	movs	r6, r0
 800a814:	0019      	movs	r1, r3
 800a816:	3214      	adds	r2, #20
 800a818:	4298      	cmp	r0, r3
 800a81a:	d10c      	bne.n	800a836 <__lshift+0x4e>
 800a81c:	31df      	adds	r1, #223	; 0xdf
 800a81e:	0032      	movs	r2, r6
 800a820:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <__lshift+0xd4>)
 800a822:	4827      	ldr	r0, [pc, #156]	; (800a8c0 <__lshift+0xd8>)
 800a824:	31ff      	adds	r1, #255	; 0xff
 800a826:	f000 fba7 	bl	800af78 <__assert_func>
 800a82a:	3101      	adds	r1, #1
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	e7e8      	b.n	800a802 <__lshift+0x1a>
 800a830:	0098      	lsls	r0, r3, #2
 800a832:	5011      	str	r1, [r2, r0]
 800a834:	3301      	adds	r3, #1
 800a836:	42ab      	cmp	r3, r5
 800a838:	dbfa      	blt.n	800a830 <__lshift+0x48>
 800a83a:	43eb      	mvns	r3, r5
 800a83c:	17db      	asrs	r3, r3, #31
 800a83e:	401d      	ands	r5, r3
 800a840:	211f      	movs	r1, #31
 800a842:	0023      	movs	r3, r4
 800a844:	0038      	movs	r0, r7
 800a846:	00ad      	lsls	r5, r5, #2
 800a848:	1955      	adds	r5, r2, r5
 800a84a:	6922      	ldr	r2, [r4, #16]
 800a84c:	3314      	adds	r3, #20
 800a84e:	0092      	lsls	r2, r2, #2
 800a850:	4008      	ands	r0, r1
 800a852:	4684      	mov	ip, r0
 800a854:	189a      	adds	r2, r3, r2
 800a856:	420f      	tst	r7, r1
 800a858:	d02a      	beq.n	800a8b0 <__lshift+0xc8>
 800a85a:	3101      	adds	r1, #1
 800a85c:	1a09      	subs	r1, r1, r0
 800a85e:	9105      	str	r1, [sp, #20]
 800a860:	2100      	movs	r1, #0
 800a862:	9503      	str	r5, [sp, #12]
 800a864:	4667      	mov	r7, ip
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	40b8      	lsls	r0, r7
 800a86a:	4308      	orrs	r0, r1
 800a86c:	9903      	ldr	r1, [sp, #12]
 800a86e:	c101      	stmia	r1!, {r0}
 800a870:	9103      	str	r1, [sp, #12]
 800a872:	9805      	ldr	r0, [sp, #20]
 800a874:	cb02      	ldmia	r3!, {r1}
 800a876:	40c1      	lsrs	r1, r0
 800a878:	429a      	cmp	r2, r3
 800a87a:	d8f3      	bhi.n	800a864 <__lshift+0x7c>
 800a87c:	0020      	movs	r0, r4
 800a87e:	3015      	adds	r0, #21
 800a880:	2304      	movs	r3, #4
 800a882:	4282      	cmp	r2, r0
 800a884:	d304      	bcc.n	800a890 <__lshift+0xa8>
 800a886:	1b13      	subs	r3, r2, r4
 800a888:	3b15      	subs	r3, #21
 800a88a:	089b      	lsrs	r3, r3, #2
 800a88c:	3301      	adds	r3, #1
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	50e9      	str	r1, [r5, r3]
 800a892:	2900      	cmp	r1, #0
 800a894:	d002      	beq.n	800a89c <__lshift+0xb4>
 800a896:	9b02      	ldr	r3, [sp, #8]
 800a898:	3302      	adds	r3, #2
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	9804      	ldr	r0, [sp, #16]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	0021      	movs	r1, r4
 800a8a4:	6133      	str	r3, [r6, #16]
 800a8a6:	f7ff fdcb 	bl	800a440 <_Bfree>
 800a8aa:	0030      	movs	r0, r6
 800a8ac:	b007      	add	sp, #28
 800a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b0:	cb02      	ldmia	r3!, {r1}
 800a8b2:	c502      	stmia	r5!, {r1}
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d8fb      	bhi.n	800a8b0 <__lshift+0xc8>
 800a8b8:	e7f0      	b.n	800a89c <__lshift+0xb4>
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	0800b8c4 	.word	0x0800b8c4
 800a8c0:	0800b8d5 	.word	0x0800b8d5

0800a8c4 <__mcmp>:
 800a8c4:	b530      	push	{r4, r5, lr}
 800a8c6:	690b      	ldr	r3, [r1, #16]
 800a8c8:	6904      	ldr	r4, [r0, #16]
 800a8ca:	0002      	movs	r2, r0
 800a8cc:	1ae0      	subs	r0, r4, r3
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	d10e      	bne.n	800a8f0 <__mcmp+0x2c>
 800a8d2:	3214      	adds	r2, #20
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	3114      	adds	r1, #20
 800a8d8:	0014      	movs	r4, r2
 800a8da:	18c9      	adds	r1, r1, r3
 800a8dc:	18d2      	adds	r2, r2, r3
 800a8de:	3a04      	subs	r2, #4
 800a8e0:	3904      	subs	r1, #4
 800a8e2:	6815      	ldr	r5, [r2, #0]
 800a8e4:	680b      	ldr	r3, [r1, #0]
 800a8e6:	429d      	cmp	r5, r3
 800a8e8:	d003      	beq.n	800a8f2 <__mcmp+0x2e>
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	d303      	bcc.n	800a8f8 <__mcmp+0x34>
 800a8f0:	bd30      	pop	{r4, r5, pc}
 800a8f2:	4294      	cmp	r4, r2
 800a8f4:	d3f3      	bcc.n	800a8de <__mcmp+0x1a>
 800a8f6:	e7fb      	b.n	800a8f0 <__mcmp+0x2c>
 800a8f8:	4240      	negs	r0, r0
 800a8fa:	e7f9      	b.n	800a8f0 <__mcmp+0x2c>

0800a8fc <__mdiff>:
 800a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fe:	000e      	movs	r6, r1
 800a900:	0007      	movs	r7, r0
 800a902:	0011      	movs	r1, r2
 800a904:	0030      	movs	r0, r6
 800a906:	b087      	sub	sp, #28
 800a908:	0014      	movs	r4, r2
 800a90a:	f7ff ffdb 	bl	800a8c4 <__mcmp>
 800a90e:	1e05      	subs	r5, r0, #0
 800a910:	d110      	bne.n	800a934 <__mdiff+0x38>
 800a912:	0001      	movs	r1, r0
 800a914:	0038      	movs	r0, r7
 800a916:	f7ff fd4f 	bl	800a3b8 <_Balloc>
 800a91a:	1e02      	subs	r2, r0, #0
 800a91c:	d104      	bne.n	800a928 <__mdiff+0x2c>
 800a91e:	4b3f      	ldr	r3, [pc, #252]	; (800aa1c <__mdiff+0x120>)
 800a920:	483f      	ldr	r0, [pc, #252]	; (800aa20 <__mdiff+0x124>)
 800a922:	4940      	ldr	r1, [pc, #256]	; (800aa24 <__mdiff+0x128>)
 800a924:	f000 fb28 	bl	800af78 <__assert_func>
 800a928:	2301      	movs	r3, #1
 800a92a:	6145      	str	r5, [r0, #20]
 800a92c:	6103      	str	r3, [r0, #16]
 800a92e:	0010      	movs	r0, r2
 800a930:	b007      	add	sp, #28
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a934:	2301      	movs	r3, #1
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	2800      	cmp	r0, #0
 800a93a:	db04      	blt.n	800a946 <__mdiff+0x4a>
 800a93c:	0023      	movs	r3, r4
 800a93e:	0034      	movs	r4, r6
 800a940:	001e      	movs	r6, r3
 800a942:	2300      	movs	r3, #0
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	0038      	movs	r0, r7
 800a948:	6861      	ldr	r1, [r4, #4]
 800a94a:	f7ff fd35 	bl	800a3b8 <_Balloc>
 800a94e:	1e02      	subs	r2, r0, #0
 800a950:	d103      	bne.n	800a95a <__mdiff+0x5e>
 800a952:	4b32      	ldr	r3, [pc, #200]	; (800aa1c <__mdiff+0x120>)
 800a954:	4832      	ldr	r0, [pc, #200]	; (800aa20 <__mdiff+0x124>)
 800a956:	4934      	ldr	r1, [pc, #208]	; (800aa28 <__mdiff+0x12c>)
 800a958:	e7e4      	b.n	800a924 <__mdiff+0x28>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	2700      	movs	r7, #0
 800a95e:	60c3      	str	r3, [r0, #12]
 800a960:	6920      	ldr	r0, [r4, #16]
 800a962:	3414      	adds	r4, #20
 800a964:	0083      	lsls	r3, r0, #2
 800a966:	18e3      	adds	r3, r4, r3
 800a968:	0021      	movs	r1, r4
 800a96a:	9401      	str	r4, [sp, #4]
 800a96c:	0034      	movs	r4, r6
 800a96e:	9302      	str	r3, [sp, #8]
 800a970:	6933      	ldr	r3, [r6, #16]
 800a972:	3414      	adds	r4, #20
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	18e3      	adds	r3, r4, r3
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	0013      	movs	r3, r2
 800a97c:	3314      	adds	r3, #20
 800a97e:	469c      	mov	ip, r3
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	9104      	str	r1, [sp, #16]
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	cc02      	ldmia	r4!, {r1}
 800a988:	cb20      	ldmia	r3!, {r5}
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	b2ab      	uxth	r3, r5
 800a98e:	19df      	adds	r7, r3, r7
 800a990:	b28b      	uxth	r3, r1
 800a992:	1afb      	subs	r3, r7, r3
 800a994:	0c09      	lsrs	r1, r1, #16
 800a996:	0c2d      	lsrs	r5, r5, #16
 800a998:	1a6d      	subs	r5, r5, r1
 800a99a:	1419      	asrs	r1, r3, #16
 800a99c:	1869      	adds	r1, r5, r1
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	140f      	asrs	r7, r1, #16
 800a9a2:	0409      	lsls	r1, r1, #16
 800a9a4:	4319      	orrs	r1, r3
 800a9a6:	4663      	mov	r3, ip
 800a9a8:	c302      	stmia	r3!, {r1}
 800a9aa:	469c      	mov	ip, r3
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	d8e8      	bhi.n	800a984 <__mdiff+0x88>
 800a9b2:	0031      	movs	r1, r6
 800a9b4:	9c03      	ldr	r4, [sp, #12]
 800a9b6:	3115      	adds	r1, #21
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	428c      	cmp	r4, r1
 800a9bc:	d304      	bcc.n	800a9c8 <__mdiff+0xcc>
 800a9be:	1ba3      	subs	r3, r4, r6
 800a9c0:	3b15      	subs	r3, #21
 800a9c2:	089b      	lsrs	r3, r3, #2
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	9901      	ldr	r1, [sp, #4]
 800a9ca:	18cd      	adds	r5, r1, r3
 800a9cc:	9905      	ldr	r1, [sp, #20]
 800a9ce:	002e      	movs	r6, r5
 800a9d0:	18cb      	adds	r3, r1, r3
 800a9d2:	469c      	mov	ip, r3
 800a9d4:	9902      	ldr	r1, [sp, #8]
 800a9d6:	428e      	cmp	r6, r1
 800a9d8:	d310      	bcc.n	800a9fc <__mdiff+0x100>
 800a9da:	9e02      	ldr	r6, [sp, #8]
 800a9dc:	1ee9      	subs	r1, r5, #3
 800a9de:	2400      	movs	r4, #0
 800a9e0:	428e      	cmp	r6, r1
 800a9e2:	d304      	bcc.n	800a9ee <__mdiff+0xf2>
 800a9e4:	0031      	movs	r1, r6
 800a9e6:	3103      	adds	r1, #3
 800a9e8:	1b49      	subs	r1, r1, r5
 800a9ea:	0889      	lsrs	r1, r1, #2
 800a9ec:	008c      	lsls	r4, r1, #2
 800a9ee:	191b      	adds	r3, r3, r4
 800a9f0:	3b04      	subs	r3, #4
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d00f      	beq.n	800aa18 <__mdiff+0x11c>
 800a9f8:	6110      	str	r0, [r2, #16]
 800a9fa:	e798      	b.n	800a92e <__mdiff+0x32>
 800a9fc:	ce02      	ldmia	r6!, {r1}
 800a9fe:	b28c      	uxth	r4, r1
 800aa00:	19e4      	adds	r4, r4, r7
 800aa02:	0c0f      	lsrs	r7, r1, #16
 800aa04:	1421      	asrs	r1, r4, #16
 800aa06:	1879      	adds	r1, r7, r1
 800aa08:	b2a4      	uxth	r4, r4
 800aa0a:	140f      	asrs	r7, r1, #16
 800aa0c:	0409      	lsls	r1, r1, #16
 800aa0e:	4321      	orrs	r1, r4
 800aa10:	4664      	mov	r4, ip
 800aa12:	c402      	stmia	r4!, {r1}
 800aa14:	46a4      	mov	ip, r4
 800aa16:	e7dd      	b.n	800a9d4 <__mdiff+0xd8>
 800aa18:	3801      	subs	r0, #1
 800aa1a:	e7e9      	b.n	800a9f0 <__mdiff+0xf4>
 800aa1c:	0800b8c4 	.word	0x0800b8c4
 800aa20:	0800b8d5 	.word	0x0800b8d5
 800aa24:	00000237 	.word	0x00000237
 800aa28:	00000245 	.word	0x00000245

0800aa2c <__d2b>:
 800aa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa2e:	2101      	movs	r1, #1
 800aa30:	0014      	movs	r4, r2
 800aa32:	001d      	movs	r5, r3
 800aa34:	9f08      	ldr	r7, [sp, #32]
 800aa36:	f7ff fcbf 	bl	800a3b8 <_Balloc>
 800aa3a:	1e06      	subs	r6, r0, #0
 800aa3c:	d105      	bne.n	800aa4a <__d2b+0x1e>
 800aa3e:	0032      	movs	r2, r6
 800aa40:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <__d2b+0xa8>)
 800aa42:	4825      	ldr	r0, [pc, #148]	; (800aad8 <__d2b+0xac>)
 800aa44:	4925      	ldr	r1, [pc, #148]	; (800aadc <__d2b+0xb0>)
 800aa46:	f000 fa97 	bl	800af78 <__assert_func>
 800aa4a:	032b      	lsls	r3, r5, #12
 800aa4c:	006d      	lsls	r5, r5, #1
 800aa4e:	0b1b      	lsrs	r3, r3, #12
 800aa50:	0d6d      	lsrs	r5, r5, #21
 800aa52:	d125      	bne.n	800aaa0 <__d2b+0x74>
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	2c00      	cmp	r4, #0
 800aa58:	d028      	beq.n	800aaac <__d2b+0x80>
 800aa5a:	4668      	mov	r0, sp
 800aa5c:	9400      	str	r4, [sp, #0]
 800aa5e:	f7ff fd71 	bl	800a544 <__lo0bits>
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	9900      	ldr	r1, [sp, #0]
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d01e      	beq.n	800aaa8 <__d2b+0x7c>
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	001c      	movs	r4, r3
 800aa6e:	1a12      	subs	r2, r2, r0
 800aa70:	4094      	lsls	r4, r2
 800aa72:	0022      	movs	r2, r4
 800aa74:	40c3      	lsrs	r3, r0
 800aa76:	430a      	orrs	r2, r1
 800aa78:	6172      	str	r2, [r6, #20]
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	9c01      	ldr	r4, [sp, #4]
 800aa7e:	61b4      	str	r4, [r6, #24]
 800aa80:	1e63      	subs	r3, r4, #1
 800aa82:	419c      	sbcs	r4, r3
 800aa84:	3401      	adds	r4, #1
 800aa86:	6134      	str	r4, [r6, #16]
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	d017      	beq.n	800aabc <__d2b+0x90>
 800aa8c:	2435      	movs	r4, #53	; 0x35
 800aa8e:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <__d2b+0xb4>)
 800aa90:	18ed      	adds	r5, r5, r3
 800aa92:	182d      	adds	r5, r5, r0
 800aa94:	603d      	str	r5, [r7, #0]
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	1a24      	subs	r4, r4, r0
 800aa9a:	601c      	str	r4, [r3, #0]
 800aa9c:	0030      	movs	r0, r6
 800aa9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaa0:	2280      	movs	r2, #128	; 0x80
 800aaa2:	0352      	lsls	r2, r2, #13
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	e7d5      	b.n	800aa54 <__d2b+0x28>
 800aaa8:	6171      	str	r1, [r6, #20]
 800aaaa:	e7e7      	b.n	800aa7c <__d2b+0x50>
 800aaac:	a801      	add	r0, sp, #4
 800aaae:	f7ff fd49 	bl	800a544 <__lo0bits>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	2401      	movs	r4, #1
 800aab6:	6173      	str	r3, [r6, #20]
 800aab8:	3020      	adds	r0, #32
 800aaba:	e7e4      	b.n	800aa86 <__d2b+0x5a>
 800aabc:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <__d2b+0xb8>)
 800aabe:	18c0      	adds	r0, r0, r3
 800aac0:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <__d2b+0xbc>)
 800aac2:	6038      	str	r0, [r7, #0]
 800aac4:	18e3      	adds	r3, r4, r3
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	18f3      	adds	r3, r6, r3
 800aaca:	6958      	ldr	r0, [r3, #20]
 800aacc:	f7ff fd20 	bl	800a510 <__hi0bits>
 800aad0:	0164      	lsls	r4, r4, #5
 800aad2:	e7e0      	b.n	800aa96 <__d2b+0x6a>
 800aad4:	0800b8c4 	.word	0x0800b8c4
 800aad8:	0800b8d5 	.word	0x0800b8d5
 800aadc:	0000030f 	.word	0x0000030f
 800aae0:	fffffbcd 	.word	0xfffffbcd
 800aae4:	fffffbce 	.word	0xfffffbce
 800aae8:	3fffffff 	.word	0x3fffffff

0800aaec <__ssputs_r>:
 800aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	9203      	str	r2, [sp, #12]
 800aaf4:	688e      	ldr	r6, [r1, #8]
 800aaf6:	9a01      	ldr	r2, [sp, #4]
 800aaf8:	0007      	movs	r7, r0
 800aafa:	000c      	movs	r4, r1
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	4296      	cmp	r6, r2
 800ab00:	d831      	bhi.n	800ab66 <__ssputs_r+0x7a>
 800ab02:	898a      	ldrh	r2, [r1, #12]
 800ab04:	2190      	movs	r1, #144	; 0x90
 800ab06:	00c9      	lsls	r1, r1, #3
 800ab08:	420a      	tst	r2, r1
 800ab0a:	d029      	beq.n	800ab60 <__ssputs_r+0x74>
 800ab0c:	2003      	movs	r0, #3
 800ab0e:	6921      	ldr	r1, [r4, #16]
 800ab10:	1a5b      	subs	r3, r3, r1
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	6963      	ldr	r3, [r4, #20]
 800ab16:	4343      	muls	r3, r0
 800ab18:	0fdd      	lsrs	r5, r3, #31
 800ab1a:	18ed      	adds	r5, r5, r3
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	9802      	ldr	r0, [sp, #8]
 800ab20:	3301      	adds	r3, #1
 800ab22:	181b      	adds	r3, r3, r0
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	42ab      	cmp	r3, r5
 800ab28:	d900      	bls.n	800ab2c <__ssputs_r+0x40>
 800ab2a:	001d      	movs	r5, r3
 800ab2c:	0552      	lsls	r2, r2, #21
 800ab2e:	d529      	bpl.n	800ab84 <__ssputs_r+0x98>
 800ab30:	0029      	movs	r1, r5
 800ab32:	0038      	movs	r0, r7
 800ab34:	f7ff fbae 	bl	800a294 <_malloc_r>
 800ab38:	1e06      	subs	r6, r0, #0
 800ab3a:	d02d      	beq.n	800ab98 <__ssputs_r+0xac>
 800ab3c:	9a02      	ldr	r2, [sp, #8]
 800ab3e:	6921      	ldr	r1, [r4, #16]
 800ab40:	f000 fa10 	bl	800af64 <memcpy>
 800ab44:	89a2      	ldrh	r2, [r4, #12]
 800ab46:	4b19      	ldr	r3, [pc, #100]	; (800abac <__ssputs_r+0xc0>)
 800ab48:	401a      	ands	r2, r3
 800ab4a:	2380      	movs	r3, #128	; 0x80
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	81a3      	strh	r3, [r4, #12]
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	6126      	str	r6, [r4, #16]
 800ab54:	18f6      	adds	r6, r6, r3
 800ab56:	6026      	str	r6, [r4, #0]
 800ab58:	6165      	str	r5, [r4, #20]
 800ab5a:	9e01      	ldr	r6, [sp, #4]
 800ab5c:	1aed      	subs	r5, r5, r3
 800ab5e:	60a5      	str	r5, [r4, #8]
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	429e      	cmp	r6, r3
 800ab64:	d900      	bls.n	800ab68 <__ssputs_r+0x7c>
 800ab66:	9e01      	ldr	r6, [sp, #4]
 800ab68:	0032      	movs	r2, r6
 800ab6a:	9903      	ldr	r1, [sp, #12]
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	f000 f9d4 	bl	800af1a <memmove>
 800ab72:	2000      	movs	r0, #0
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	1b9b      	subs	r3, r3, r6
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	199b      	adds	r3, r3, r6
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	b005      	add	sp, #20
 800ab82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab84:	002a      	movs	r2, r5
 800ab86:	0038      	movs	r0, r7
 800ab88:	f000 fa53 	bl	800b032 <_realloc_r>
 800ab8c:	1e06      	subs	r6, r0, #0
 800ab8e:	d1df      	bne.n	800ab50 <__ssputs_r+0x64>
 800ab90:	0038      	movs	r0, r7
 800ab92:	6921      	ldr	r1, [r4, #16]
 800ab94:	f7ff fb08 	bl	800a1a8 <_free_r>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	89a2      	ldrh	r2, [r4, #12]
 800aba0:	3334      	adds	r3, #52	; 0x34
 800aba2:	4313      	orrs	r3, r2
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	4240      	negs	r0, r0
 800aba8:	e7ea      	b.n	800ab80 <__ssputs_r+0x94>
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	fffffb7f 	.word	0xfffffb7f

0800abb0 <_svfiprintf_r>:
 800abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb2:	b0a1      	sub	sp, #132	; 0x84
 800abb4:	9003      	str	r0, [sp, #12]
 800abb6:	001d      	movs	r5, r3
 800abb8:	898b      	ldrh	r3, [r1, #12]
 800abba:	000f      	movs	r7, r1
 800abbc:	0016      	movs	r6, r2
 800abbe:	061b      	lsls	r3, r3, #24
 800abc0:	d511      	bpl.n	800abe6 <_svfiprintf_r+0x36>
 800abc2:	690b      	ldr	r3, [r1, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10e      	bne.n	800abe6 <_svfiprintf_r+0x36>
 800abc8:	2140      	movs	r1, #64	; 0x40
 800abca:	f7ff fb63 	bl	800a294 <_malloc_r>
 800abce:	6038      	str	r0, [r7, #0]
 800abd0:	6138      	str	r0, [r7, #16]
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d105      	bne.n	800abe2 <_svfiprintf_r+0x32>
 800abd6:	230c      	movs	r3, #12
 800abd8:	9a03      	ldr	r2, [sp, #12]
 800abda:	3801      	subs	r0, #1
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	b021      	add	sp, #132	; 0x84
 800abe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe2:	2340      	movs	r3, #64	; 0x40
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	2300      	movs	r3, #0
 800abe8:	ac08      	add	r4, sp, #32
 800abea:	6163      	str	r3, [r4, #20]
 800abec:	3320      	adds	r3, #32
 800abee:	7663      	strb	r3, [r4, #25]
 800abf0:	3310      	adds	r3, #16
 800abf2:	76a3      	strb	r3, [r4, #26]
 800abf4:	9507      	str	r5, [sp, #28]
 800abf6:	0035      	movs	r5, r6
 800abf8:	782b      	ldrb	r3, [r5, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <_svfiprintf_r+0x52>
 800abfe:	2b25      	cmp	r3, #37	; 0x25
 800ac00:	d148      	bne.n	800ac94 <_svfiprintf_r+0xe4>
 800ac02:	1bab      	subs	r3, r5, r6
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	42b5      	cmp	r5, r6
 800ac08:	d00b      	beq.n	800ac22 <_svfiprintf_r+0x72>
 800ac0a:	0032      	movs	r2, r6
 800ac0c:	0039      	movs	r1, r7
 800ac0e:	9803      	ldr	r0, [sp, #12]
 800ac10:	f7ff ff6c 	bl	800aaec <__ssputs_r>
 800ac14:	3001      	adds	r0, #1
 800ac16:	d100      	bne.n	800ac1a <_svfiprintf_r+0x6a>
 800ac18:	e0af      	b.n	800ad7a <_svfiprintf_r+0x1ca>
 800ac1a:	6963      	ldr	r3, [r4, #20]
 800ac1c:	9a05      	ldr	r2, [sp, #20]
 800ac1e:	189b      	adds	r3, r3, r2
 800ac20:	6163      	str	r3, [r4, #20]
 800ac22:	782b      	ldrb	r3, [r5, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d100      	bne.n	800ac2a <_svfiprintf_r+0x7a>
 800ac28:	e0a7      	b.n	800ad7a <_svfiprintf_r+0x1ca>
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4252      	negs	r2, r2
 800ac30:	6062      	str	r2, [r4, #4]
 800ac32:	a904      	add	r1, sp, #16
 800ac34:	3254      	adds	r2, #84	; 0x54
 800ac36:	1852      	adds	r2, r2, r1
 800ac38:	1c6e      	adds	r6, r5, #1
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	60e3      	str	r3, [r4, #12]
 800ac3e:	60a3      	str	r3, [r4, #8]
 800ac40:	7013      	strb	r3, [r2, #0]
 800ac42:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac44:	4b55      	ldr	r3, [pc, #340]	; (800ad9c <_svfiprintf_r+0x1ec>)
 800ac46:	2205      	movs	r2, #5
 800ac48:	0018      	movs	r0, r3
 800ac4a:	7831      	ldrb	r1, [r6, #0]
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	f7fe fc02 	bl	8009456 <memchr>
 800ac52:	1c75      	adds	r5, r6, #1
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d11f      	bne.n	800ac98 <_svfiprintf_r+0xe8>
 800ac58:	6822      	ldr	r2, [r4, #0]
 800ac5a:	06d3      	lsls	r3, r2, #27
 800ac5c:	d504      	bpl.n	800ac68 <_svfiprintf_r+0xb8>
 800ac5e:	2353      	movs	r3, #83	; 0x53
 800ac60:	a904      	add	r1, sp, #16
 800ac62:	185b      	adds	r3, r3, r1
 800ac64:	2120      	movs	r1, #32
 800ac66:	7019      	strb	r1, [r3, #0]
 800ac68:	0713      	lsls	r3, r2, #28
 800ac6a:	d504      	bpl.n	800ac76 <_svfiprintf_r+0xc6>
 800ac6c:	2353      	movs	r3, #83	; 0x53
 800ac6e:	a904      	add	r1, sp, #16
 800ac70:	185b      	adds	r3, r3, r1
 800ac72:	212b      	movs	r1, #43	; 0x2b
 800ac74:	7019      	strb	r1, [r3, #0]
 800ac76:	7833      	ldrb	r3, [r6, #0]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d016      	beq.n	800acaa <_svfiprintf_r+0xfa>
 800ac7c:	0035      	movs	r5, r6
 800ac7e:	2100      	movs	r1, #0
 800ac80:	200a      	movs	r0, #10
 800ac82:	68e3      	ldr	r3, [r4, #12]
 800ac84:	782a      	ldrb	r2, [r5, #0]
 800ac86:	1c6e      	adds	r6, r5, #1
 800ac88:	3a30      	subs	r2, #48	; 0x30
 800ac8a:	2a09      	cmp	r2, #9
 800ac8c:	d94e      	bls.n	800ad2c <_svfiprintf_r+0x17c>
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	d111      	bne.n	800acb6 <_svfiprintf_r+0x106>
 800ac92:	e017      	b.n	800acc4 <_svfiprintf_r+0x114>
 800ac94:	3501      	adds	r5, #1
 800ac96:	e7af      	b.n	800abf8 <_svfiprintf_r+0x48>
 800ac98:	9b05      	ldr	r3, [sp, #20]
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	1ac0      	subs	r0, r0, r3
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4083      	lsls	r3, r0
 800aca2:	4313      	orrs	r3, r2
 800aca4:	002e      	movs	r6, r5
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	e7cc      	b.n	800ac44 <_svfiprintf_r+0x94>
 800acaa:	9b07      	ldr	r3, [sp, #28]
 800acac:	1d19      	adds	r1, r3, #4
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	9107      	str	r1, [sp, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	db01      	blt.n	800acba <_svfiprintf_r+0x10a>
 800acb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb8:	e004      	b.n	800acc4 <_svfiprintf_r+0x114>
 800acba:	425b      	negs	r3, r3
 800acbc:	60e3      	str	r3, [r4, #12]
 800acbe:	2302      	movs	r3, #2
 800acc0:	4313      	orrs	r3, r2
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	782b      	ldrb	r3, [r5, #0]
 800acc6:	2b2e      	cmp	r3, #46	; 0x2e
 800acc8:	d10a      	bne.n	800ace0 <_svfiprintf_r+0x130>
 800acca:	786b      	ldrb	r3, [r5, #1]
 800accc:	2b2a      	cmp	r3, #42	; 0x2a
 800acce:	d135      	bne.n	800ad3c <_svfiprintf_r+0x18c>
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	3502      	adds	r5, #2
 800acd4:	1d1a      	adds	r2, r3, #4
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	9207      	str	r2, [sp, #28]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	db2b      	blt.n	800ad36 <_svfiprintf_r+0x186>
 800acde:	9309      	str	r3, [sp, #36]	; 0x24
 800ace0:	4e2f      	ldr	r6, [pc, #188]	; (800ada0 <_svfiprintf_r+0x1f0>)
 800ace2:	2203      	movs	r2, #3
 800ace4:	0030      	movs	r0, r6
 800ace6:	7829      	ldrb	r1, [r5, #0]
 800ace8:	f7fe fbb5 	bl	8009456 <memchr>
 800acec:	2800      	cmp	r0, #0
 800acee:	d006      	beq.n	800acfe <_svfiprintf_r+0x14e>
 800acf0:	2340      	movs	r3, #64	; 0x40
 800acf2:	1b80      	subs	r0, r0, r6
 800acf4:	4083      	lsls	r3, r0
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	3501      	adds	r5, #1
 800acfa:	4313      	orrs	r3, r2
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	7829      	ldrb	r1, [r5, #0]
 800ad00:	2206      	movs	r2, #6
 800ad02:	4828      	ldr	r0, [pc, #160]	; (800ada4 <_svfiprintf_r+0x1f4>)
 800ad04:	1c6e      	adds	r6, r5, #1
 800ad06:	7621      	strb	r1, [r4, #24]
 800ad08:	f7fe fba5 	bl	8009456 <memchr>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d03c      	beq.n	800ad8a <_svfiprintf_r+0x1da>
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <_svfiprintf_r+0x1f8>)
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d125      	bne.n	800ad62 <_svfiprintf_r+0x1b2>
 800ad16:	2207      	movs	r2, #7
 800ad18:	9b07      	ldr	r3, [sp, #28]
 800ad1a:	3307      	adds	r3, #7
 800ad1c:	4393      	bics	r3, r2
 800ad1e:	3308      	adds	r3, #8
 800ad20:	9307      	str	r3, [sp, #28]
 800ad22:	6963      	ldr	r3, [r4, #20]
 800ad24:	9a04      	ldr	r2, [sp, #16]
 800ad26:	189b      	adds	r3, r3, r2
 800ad28:	6163      	str	r3, [r4, #20]
 800ad2a:	e764      	b.n	800abf6 <_svfiprintf_r+0x46>
 800ad2c:	4343      	muls	r3, r0
 800ad2e:	0035      	movs	r5, r6
 800ad30:	2101      	movs	r1, #1
 800ad32:	189b      	adds	r3, r3, r2
 800ad34:	e7a6      	b.n	800ac84 <_svfiprintf_r+0xd4>
 800ad36:	2301      	movs	r3, #1
 800ad38:	425b      	negs	r3, r3
 800ad3a:	e7d0      	b.n	800acde <_svfiprintf_r+0x12e>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	200a      	movs	r0, #10
 800ad40:	001a      	movs	r2, r3
 800ad42:	3501      	adds	r5, #1
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	7829      	ldrb	r1, [r5, #0]
 800ad48:	1c6e      	adds	r6, r5, #1
 800ad4a:	3930      	subs	r1, #48	; 0x30
 800ad4c:	2909      	cmp	r1, #9
 800ad4e:	d903      	bls.n	800ad58 <_svfiprintf_r+0x1a8>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0c5      	beq.n	800ace0 <_svfiprintf_r+0x130>
 800ad54:	9209      	str	r2, [sp, #36]	; 0x24
 800ad56:	e7c3      	b.n	800ace0 <_svfiprintf_r+0x130>
 800ad58:	4342      	muls	r2, r0
 800ad5a:	0035      	movs	r5, r6
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	1852      	adds	r2, r2, r1
 800ad60:	e7f1      	b.n	800ad46 <_svfiprintf_r+0x196>
 800ad62:	aa07      	add	r2, sp, #28
 800ad64:	9200      	str	r2, [sp, #0]
 800ad66:	0021      	movs	r1, r4
 800ad68:	003a      	movs	r2, r7
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <_svfiprintf_r+0x1fc>)
 800ad6c:	9803      	ldr	r0, [sp, #12]
 800ad6e:	f7fd fde5 	bl	800893c <_printf_float>
 800ad72:	9004      	str	r0, [sp, #16]
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	3301      	adds	r3, #1
 800ad78:	d1d3      	bne.n	800ad22 <_svfiprintf_r+0x172>
 800ad7a:	89bb      	ldrh	r3, [r7, #12]
 800ad7c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad7e:	065b      	lsls	r3, r3, #25
 800ad80:	d400      	bmi.n	800ad84 <_svfiprintf_r+0x1d4>
 800ad82:	e72c      	b.n	800abde <_svfiprintf_r+0x2e>
 800ad84:	2001      	movs	r0, #1
 800ad86:	4240      	negs	r0, r0
 800ad88:	e729      	b.n	800abde <_svfiprintf_r+0x2e>
 800ad8a:	aa07      	add	r2, sp, #28
 800ad8c:	9200      	str	r2, [sp, #0]
 800ad8e:	0021      	movs	r1, r4
 800ad90:	003a      	movs	r2, r7
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <_svfiprintf_r+0x1fc>)
 800ad94:	9803      	ldr	r0, [sp, #12]
 800ad96:	f7fe f897 	bl	8008ec8 <_printf_i>
 800ad9a:	e7ea      	b.n	800ad72 <_svfiprintf_r+0x1c2>
 800ad9c:	0800ba2c 	.word	0x0800ba2c
 800ada0:	0800ba32 	.word	0x0800ba32
 800ada4:	0800ba36 	.word	0x0800ba36
 800ada8:	0800893d 	.word	0x0800893d
 800adac:	0800aaed 	.word	0x0800aaed

0800adb0 <__sflush_r>:
 800adb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb2:	898b      	ldrh	r3, [r1, #12]
 800adb4:	0005      	movs	r5, r0
 800adb6:	000c      	movs	r4, r1
 800adb8:	071a      	lsls	r2, r3, #28
 800adba:	d45c      	bmi.n	800ae76 <__sflush_r+0xc6>
 800adbc:	684a      	ldr	r2, [r1, #4]
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	dc04      	bgt.n	800adcc <__sflush_r+0x1c>
 800adc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	dc01      	bgt.n	800adcc <__sflush_r+0x1c>
 800adc8:	2000      	movs	r0, #0
 800adca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800adce:	2f00      	cmp	r7, #0
 800add0:	d0fa      	beq.n	800adc8 <__sflush_r+0x18>
 800add2:	2200      	movs	r2, #0
 800add4:	2080      	movs	r0, #128	; 0x80
 800add6:	682e      	ldr	r6, [r5, #0]
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	001a      	movs	r2, r3
 800addc:	0140      	lsls	r0, r0, #5
 800adde:	6a21      	ldr	r1, [r4, #32]
 800ade0:	4002      	ands	r2, r0
 800ade2:	4203      	tst	r3, r0
 800ade4:	d034      	beq.n	800ae50 <__sflush_r+0xa0>
 800ade6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	075b      	lsls	r3, r3, #29
 800adec:	d506      	bpl.n	800adfc <__sflush_r+0x4c>
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	1ac0      	subs	r0, r0, r3
 800adf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <__sflush_r+0x4c>
 800adf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adfa:	1ac0      	subs	r0, r0, r3
 800adfc:	0002      	movs	r2, r0
 800adfe:	2300      	movs	r3, #0
 800ae00:	0028      	movs	r0, r5
 800ae02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ae04:	6a21      	ldr	r1, [r4, #32]
 800ae06:	47b8      	blx	r7
 800ae08:	89a2      	ldrh	r2, [r4, #12]
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	d106      	bne.n	800ae1c <__sflush_r+0x6c>
 800ae0e:	6829      	ldr	r1, [r5, #0]
 800ae10:	291d      	cmp	r1, #29
 800ae12:	d82c      	bhi.n	800ae6e <__sflush_r+0xbe>
 800ae14:	4b2a      	ldr	r3, [pc, #168]	; (800aec0 <__sflush_r+0x110>)
 800ae16:	410b      	asrs	r3, r1
 800ae18:	07db      	lsls	r3, r3, #31
 800ae1a:	d428      	bmi.n	800ae6e <__sflush_r+0xbe>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	04d2      	lsls	r2, r2, #19
 800ae26:	d505      	bpl.n	800ae34 <__sflush_r+0x84>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <__sflush_r+0x82>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d100      	bne.n	800ae34 <__sflush_r+0x84>
 800ae32:	6560      	str	r0, [r4, #84]	; 0x54
 800ae34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae36:	602e      	str	r6, [r5, #0]
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	d0c5      	beq.n	800adc8 <__sflush_r+0x18>
 800ae3c:	0023      	movs	r3, r4
 800ae3e:	3344      	adds	r3, #68	; 0x44
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d002      	beq.n	800ae4a <__sflush_r+0x9a>
 800ae44:	0028      	movs	r0, r5
 800ae46:	f7ff f9af 	bl	800a1a8 <_free_r>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae4e:	e7bc      	b.n	800adca <__sflush_r+0x1a>
 800ae50:	2301      	movs	r3, #1
 800ae52:	0028      	movs	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d1c6      	bne.n	800ade8 <__sflush_r+0x38>
 800ae5a:	682b      	ldr	r3, [r5, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0c3      	beq.n	800ade8 <__sflush_r+0x38>
 800ae60:	2b1d      	cmp	r3, #29
 800ae62:	d001      	beq.n	800ae68 <__sflush_r+0xb8>
 800ae64:	2b16      	cmp	r3, #22
 800ae66:	d101      	bne.n	800ae6c <__sflush_r+0xbc>
 800ae68:	602e      	str	r6, [r5, #0]
 800ae6a:	e7ad      	b.n	800adc8 <__sflush_r+0x18>
 800ae6c:	89a2      	ldrh	r2, [r4, #12]
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	4313      	orrs	r3, r2
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	e7a9      	b.n	800adca <__sflush_r+0x1a>
 800ae76:	690e      	ldr	r6, [r1, #16]
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	d0a5      	beq.n	800adc8 <__sflush_r+0x18>
 800ae7c:	680f      	ldr	r7, [r1, #0]
 800ae7e:	600e      	str	r6, [r1, #0]
 800ae80:	1bba      	subs	r2, r7, r6
 800ae82:	9201      	str	r2, [sp, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	d100      	bne.n	800ae8c <__sflush_r+0xdc>
 800ae8a:	694a      	ldr	r2, [r1, #20]
 800ae8c:	60a2      	str	r2, [r4, #8]
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dd99      	ble.n	800adc8 <__sflush_r+0x18>
 800ae94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae96:	0032      	movs	r2, r6
 800ae98:	001f      	movs	r7, r3
 800ae9a:	0028      	movs	r0, r5
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	6a21      	ldr	r1, [r4, #32]
 800aea0:	47b8      	blx	r7
 800aea2:	2800      	cmp	r0, #0
 800aea4:	dc06      	bgt.n	800aeb4 <__sflush_r+0x104>
 800aea6:	2340      	movs	r3, #64	; 0x40
 800aea8:	2001      	movs	r0, #1
 800aeaa:	89a2      	ldrh	r2, [r4, #12]
 800aeac:	4240      	negs	r0, r0
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	e78a      	b.n	800adca <__sflush_r+0x1a>
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	1836      	adds	r6, r6, r0
 800aeb8:	1a1b      	subs	r3, r3, r0
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	e7e7      	b.n	800ae8e <__sflush_r+0xde>
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	dfbffffe 	.word	0xdfbffffe

0800aec4 <_fflush_r>:
 800aec4:	690b      	ldr	r3, [r1, #16]
 800aec6:	b570      	push	{r4, r5, r6, lr}
 800aec8:	0005      	movs	r5, r0
 800aeca:	000c      	movs	r4, r1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <_fflush_r+0x12>
 800aed0:	2500      	movs	r5, #0
 800aed2:	0028      	movs	r0, r5
 800aed4:	bd70      	pop	{r4, r5, r6, pc}
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d004      	beq.n	800aee4 <_fflush_r+0x20>
 800aeda:	6a03      	ldr	r3, [r0, #32]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <_fflush_r+0x20>
 800aee0:	f7fe f992 	bl	8009208 <__sinit>
 800aee4:	220c      	movs	r2, #12
 800aee6:	5ea3      	ldrsh	r3, [r4, r2]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0f1      	beq.n	800aed0 <_fflush_r+0xc>
 800aeec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeee:	07d2      	lsls	r2, r2, #31
 800aef0:	d404      	bmi.n	800aefc <_fflush_r+0x38>
 800aef2:	059b      	lsls	r3, r3, #22
 800aef4:	d402      	bmi.n	800aefc <_fflush_r+0x38>
 800aef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aef8:	f7fe faab 	bl	8009452 <__retarget_lock_acquire_recursive>
 800aefc:	0028      	movs	r0, r5
 800aefe:	0021      	movs	r1, r4
 800af00:	f7ff ff56 	bl	800adb0 <__sflush_r>
 800af04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af06:	0005      	movs	r5, r0
 800af08:	07db      	lsls	r3, r3, #31
 800af0a:	d4e2      	bmi.n	800aed2 <_fflush_r+0xe>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	059b      	lsls	r3, r3, #22
 800af10:	d4df      	bmi.n	800aed2 <_fflush_r+0xe>
 800af12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af14:	f7fe fa9e 	bl	8009454 <__retarget_lock_release_recursive>
 800af18:	e7db      	b.n	800aed2 <_fflush_r+0xe>

0800af1a <memmove>:
 800af1a:	b510      	push	{r4, lr}
 800af1c:	4288      	cmp	r0, r1
 800af1e:	d902      	bls.n	800af26 <memmove+0xc>
 800af20:	188b      	adds	r3, r1, r2
 800af22:	4298      	cmp	r0, r3
 800af24:	d303      	bcc.n	800af2e <memmove+0x14>
 800af26:	2300      	movs	r3, #0
 800af28:	e007      	b.n	800af3a <memmove+0x20>
 800af2a:	5c8b      	ldrb	r3, [r1, r2]
 800af2c:	5483      	strb	r3, [r0, r2]
 800af2e:	3a01      	subs	r2, #1
 800af30:	d2fb      	bcs.n	800af2a <memmove+0x10>
 800af32:	bd10      	pop	{r4, pc}
 800af34:	5ccc      	ldrb	r4, [r1, r3]
 800af36:	54c4      	strb	r4, [r0, r3]
 800af38:	3301      	adds	r3, #1
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d1fa      	bne.n	800af34 <memmove+0x1a>
 800af3e:	e7f8      	b.n	800af32 <memmove+0x18>

0800af40 <_sbrk_r>:
 800af40:	2300      	movs	r3, #0
 800af42:	b570      	push	{r4, r5, r6, lr}
 800af44:	4d06      	ldr	r5, [pc, #24]	; (800af60 <_sbrk_r+0x20>)
 800af46:	0004      	movs	r4, r0
 800af48:	0008      	movs	r0, r1
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	f7f8 fd44 	bl	80039d8 <_sbrk>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d103      	bne.n	800af5c <_sbrk_r+0x1c>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d000      	beq.n	800af5c <_sbrk_r+0x1c>
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	200005fc 	.word	0x200005fc

0800af64 <memcpy>:
 800af64:	2300      	movs	r3, #0
 800af66:	b510      	push	{r4, lr}
 800af68:	429a      	cmp	r2, r3
 800af6a:	d100      	bne.n	800af6e <memcpy+0xa>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	5ccc      	ldrb	r4, [r1, r3]
 800af70:	54c4      	strb	r4, [r0, r3]
 800af72:	3301      	adds	r3, #1
 800af74:	e7f8      	b.n	800af68 <memcpy+0x4>
	...

0800af78 <__assert_func>:
 800af78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af7a:	0014      	movs	r4, r2
 800af7c:	001a      	movs	r2, r3
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <__assert_func+0x2c>)
 800af80:	0005      	movs	r5, r0
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	000e      	movs	r6, r1
 800af86:	68d8      	ldr	r0, [r3, #12]
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <__assert_func+0x30>)
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d101      	bne.n	800af92 <__assert_func+0x1a>
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <__assert_func+0x34>)
 800af90:	001c      	movs	r4, r3
 800af92:	4907      	ldr	r1, [pc, #28]	; (800afb0 <__assert_func+0x38>)
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	9402      	str	r4, [sp, #8]
 800af98:	002b      	movs	r3, r5
 800af9a:	9600      	str	r6, [sp, #0]
 800af9c:	f000 f886 	bl	800b0ac <fiprintf>
 800afa0:	f000 f894 	bl	800b0cc <abort>
 800afa4:	20000064 	.word	0x20000064
 800afa8:	0800ba47 	.word	0x0800ba47
 800afac:	0800ba82 	.word	0x0800ba82
 800afb0:	0800ba54 	.word	0x0800ba54

0800afb4 <_calloc_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	0c0b      	lsrs	r3, r1, #16
 800afb8:	0c15      	lsrs	r5, r2, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d11e      	bne.n	800affc <_calloc_r+0x48>
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	d10c      	bne.n	800afdc <_calloc_r+0x28>
 800afc2:	b289      	uxth	r1, r1
 800afc4:	b294      	uxth	r4, r2
 800afc6:	434c      	muls	r4, r1
 800afc8:	0021      	movs	r1, r4
 800afca:	f7ff f963 	bl	800a294 <_malloc_r>
 800afce:	1e05      	subs	r5, r0, #0
 800afd0:	d01b      	beq.n	800b00a <_calloc_r+0x56>
 800afd2:	0022      	movs	r2, r4
 800afd4:	2100      	movs	r1, #0
 800afd6:	f7fe f9b7 	bl	8009348 <memset>
 800afda:	e016      	b.n	800b00a <_calloc_r+0x56>
 800afdc:	1c2b      	adds	r3, r5, #0
 800afde:	1c0c      	adds	r4, r1, #0
 800afe0:	b289      	uxth	r1, r1
 800afe2:	b292      	uxth	r2, r2
 800afe4:	434a      	muls	r2, r1
 800afe6:	b2a1      	uxth	r1, r4
 800afe8:	b29c      	uxth	r4, r3
 800afea:	434c      	muls	r4, r1
 800afec:	0c13      	lsrs	r3, r2, #16
 800afee:	18e4      	adds	r4, r4, r3
 800aff0:	0c23      	lsrs	r3, r4, #16
 800aff2:	d107      	bne.n	800b004 <_calloc_r+0x50>
 800aff4:	0424      	lsls	r4, r4, #16
 800aff6:	b292      	uxth	r2, r2
 800aff8:	4314      	orrs	r4, r2
 800affa:	e7e5      	b.n	800afc8 <_calloc_r+0x14>
 800affc:	2d00      	cmp	r5, #0
 800affe:	d101      	bne.n	800b004 <_calloc_r+0x50>
 800b000:	1c14      	adds	r4, r2, #0
 800b002:	e7ed      	b.n	800afe0 <_calloc_r+0x2c>
 800b004:	230c      	movs	r3, #12
 800b006:	2500      	movs	r5, #0
 800b008:	6003      	str	r3, [r0, #0]
 800b00a:	0028      	movs	r0, r5
 800b00c:	bd70      	pop	{r4, r5, r6, pc}

0800b00e <__ascii_mbtowc>:
 800b00e:	b082      	sub	sp, #8
 800b010:	2900      	cmp	r1, #0
 800b012:	d100      	bne.n	800b016 <__ascii_mbtowc+0x8>
 800b014:	a901      	add	r1, sp, #4
 800b016:	1e10      	subs	r0, r2, #0
 800b018:	d006      	beq.n	800b028 <__ascii_mbtowc+0x1a>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d006      	beq.n	800b02c <__ascii_mbtowc+0x1e>
 800b01e:	7813      	ldrb	r3, [r2, #0]
 800b020:	600b      	str	r3, [r1, #0]
 800b022:	7810      	ldrb	r0, [r2, #0]
 800b024:	1e43      	subs	r3, r0, #1
 800b026:	4198      	sbcs	r0, r3
 800b028:	b002      	add	sp, #8
 800b02a:	4770      	bx	lr
 800b02c:	2002      	movs	r0, #2
 800b02e:	4240      	negs	r0, r0
 800b030:	e7fa      	b.n	800b028 <__ascii_mbtowc+0x1a>

0800b032 <_realloc_r>:
 800b032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b034:	0007      	movs	r7, r0
 800b036:	000e      	movs	r6, r1
 800b038:	0014      	movs	r4, r2
 800b03a:	2900      	cmp	r1, #0
 800b03c:	d105      	bne.n	800b04a <_realloc_r+0x18>
 800b03e:	0011      	movs	r1, r2
 800b040:	f7ff f928 	bl	800a294 <_malloc_r>
 800b044:	0005      	movs	r5, r0
 800b046:	0028      	movs	r0, r5
 800b048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b04a:	2a00      	cmp	r2, #0
 800b04c:	d103      	bne.n	800b056 <_realloc_r+0x24>
 800b04e:	f7ff f8ab 	bl	800a1a8 <_free_r>
 800b052:	0025      	movs	r5, r4
 800b054:	e7f7      	b.n	800b046 <_realloc_r+0x14>
 800b056:	f000 f840 	bl	800b0da <_malloc_usable_size_r>
 800b05a:	9001      	str	r0, [sp, #4]
 800b05c:	4284      	cmp	r4, r0
 800b05e:	d803      	bhi.n	800b068 <_realloc_r+0x36>
 800b060:	0035      	movs	r5, r6
 800b062:	0843      	lsrs	r3, r0, #1
 800b064:	42a3      	cmp	r3, r4
 800b066:	d3ee      	bcc.n	800b046 <_realloc_r+0x14>
 800b068:	0021      	movs	r1, r4
 800b06a:	0038      	movs	r0, r7
 800b06c:	f7ff f912 	bl	800a294 <_malloc_r>
 800b070:	1e05      	subs	r5, r0, #0
 800b072:	d0e8      	beq.n	800b046 <_realloc_r+0x14>
 800b074:	9b01      	ldr	r3, [sp, #4]
 800b076:	0022      	movs	r2, r4
 800b078:	429c      	cmp	r4, r3
 800b07a:	d900      	bls.n	800b07e <_realloc_r+0x4c>
 800b07c:	001a      	movs	r2, r3
 800b07e:	0031      	movs	r1, r6
 800b080:	0028      	movs	r0, r5
 800b082:	f7ff ff6f 	bl	800af64 <memcpy>
 800b086:	0031      	movs	r1, r6
 800b088:	0038      	movs	r0, r7
 800b08a:	f7ff f88d 	bl	800a1a8 <_free_r>
 800b08e:	e7da      	b.n	800b046 <_realloc_r+0x14>

0800b090 <__ascii_wctomb>:
 800b090:	0003      	movs	r3, r0
 800b092:	1e08      	subs	r0, r1, #0
 800b094:	d005      	beq.n	800b0a2 <__ascii_wctomb+0x12>
 800b096:	2aff      	cmp	r2, #255	; 0xff
 800b098:	d904      	bls.n	800b0a4 <__ascii_wctomb+0x14>
 800b09a:	228a      	movs	r2, #138	; 0x8a
 800b09c:	2001      	movs	r0, #1
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	4240      	negs	r0, r0
 800b0a2:	4770      	bx	lr
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	700a      	strb	r2, [r1, #0]
 800b0a8:	e7fb      	b.n	800b0a2 <__ascii_wctomb+0x12>
	...

0800b0ac <fiprintf>:
 800b0ac:	b40e      	push	{r1, r2, r3}
 800b0ae:	b517      	push	{r0, r1, r2, r4, lr}
 800b0b0:	4c05      	ldr	r4, [pc, #20]	; (800b0c8 <fiprintf+0x1c>)
 800b0b2:	ab05      	add	r3, sp, #20
 800b0b4:	cb04      	ldmia	r3!, {r2}
 800b0b6:	0001      	movs	r1, r0
 800b0b8:	6820      	ldr	r0, [r4, #0]
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	f000 f83c 	bl	800b138 <_vfiprintf_r>
 800b0c0:	bc1e      	pop	{r1, r2, r3, r4}
 800b0c2:	bc08      	pop	{r3}
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4718      	bx	r3
 800b0c8:	20000064 	.word	0x20000064

0800b0cc <abort>:
 800b0cc:	2006      	movs	r0, #6
 800b0ce:	b510      	push	{r4, lr}
 800b0d0:	f000 fa1e 	bl	800b510 <raise>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f7f8 fc0d 	bl	80038f4 <_exit>

0800b0da <_malloc_usable_size_r>:
 800b0da:	1f0b      	subs	r3, r1, #4
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	1f18      	subs	r0, r3, #4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	da01      	bge.n	800b0e8 <_malloc_usable_size_r+0xe>
 800b0e4:	580b      	ldr	r3, [r1, r0]
 800b0e6:	18c0      	adds	r0, r0, r3
 800b0e8:	4770      	bx	lr

0800b0ea <__sfputc_r>:
 800b0ea:	6893      	ldr	r3, [r2, #8]
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	6093      	str	r3, [r2, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da04      	bge.n	800b100 <__sfputc_r+0x16>
 800b0f6:	6994      	ldr	r4, [r2, #24]
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	db07      	blt.n	800b10c <__sfputc_r+0x22>
 800b0fc:	290a      	cmp	r1, #10
 800b0fe:	d005      	beq.n	800b10c <__sfputc_r+0x22>
 800b100:	6813      	ldr	r3, [r2, #0]
 800b102:	1c58      	adds	r0, r3, #1
 800b104:	6010      	str	r0, [r2, #0]
 800b106:	7019      	strb	r1, [r3, #0]
 800b108:	0008      	movs	r0, r1
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	f000 f930 	bl	800b370 <__swbuf_r>
 800b110:	0001      	movs	r1, r0
 800b112:	e7f9      	b.n	800b108 <__sfputc_r+0x1e>

0800b114 <__sfputs_r>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	0006      	movs	r6, r0
 800b118:	000f      	movs	r7, r1
 800b11a:	0014      	movs	r4, r2
 800b11c:	18d5      	adds	r5, r2, r3
 800b11e:	42ac      	cmp	r4, r5
 800b120:	d101      	bne.n	800b126 <__sfputs_r+0x12>
 800b122:	2000      	movs	r0, #0
 800b124:	e007      	b.n	800b136 <__sfputs_r+0x22>
 800b126:	7821      	ldrb	r1, [r4, #0]
 800b128:	003a      	movs	r2, r7
 800b12a:	0030      	movs	r0, r6
 800b12c:	f7ff ffdd 	bl	800b0ea <__sfputc_r>
 800b130:	3401      	adds	r4, #1
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d1f3      	bne.n	800b11e <__sfputs_r+0xa>
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b138 <_vfiprintf_r>:
 800b138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b13a:	b0a1      	sub	sp, #132	; 0x84
 800b13c:	000f      	movs	r7, r1
 800b13e:	0015      	movs	r5, r2
 800b140:	001e      	movs	r6, r3
 800b142:	9003      	str	r0, [sp, #12]
 800b144:	2800      	cmp	r0, #0
 800b146:	d004      	beq.n	800b152 <_vfiprintf_r+0x1a>
 800b148:	6a03      	ldr	r3, [r0, #32]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <_vfiprintf_r+0x1a>
 800b14e:	f7fe f85b 	bl	8009208 <__sinit>
 800b152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b154:	07db      	lsls	r3, r3, #31
 800b156:	d405      	bmi.n	800b164 <_vfiprintf_r+0x2c>
 800b158:	89bb      	ldrh	r3, [r7, #12]
 800b15a:	059b      	lsls	r3, r3, #22
 800b15c:	d402      	bmi.n	800b164 <_vfiprintf_r+0x2c>
 800b15e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b160:	f7fe f977 	bl	8009452 <__retarget_lock_acquire_recursive>
 800b164:	89bb      	ldrh	r3, [r7, #12]
 800b166:	071b      	lsls	r3, r3, #28
 800b168:	d502      	bpl.n	800b170 <_vfiprintf_r+0x38>
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d113      	bne.n	800b198 <_vfiprintf_r+0x60>
 800b170:	0039      	movs	r1, r7
 800b172:	9803      	ldr	r0, [sp, #12]
 800b174:	f000 f93e 	bl	800b3f4 <__swsetup_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d00d      	beq.n	800b198 <_vfiprintf_r+0x60>
 800b17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b17e:	07db      	lsls	r3, r3, #31
 800b180:	d503      	bpl.n	800b18a <_vfiprintf_r+0x52>
 800b182:	2001      	movs	r0, #1
 800b184:	4240      	negs	r0, r0
 800b186:	b021      	add	sp, #132	; 0x84
 800b188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18a:	89bb      	ldrh	r3, [r7, #12]
 800b18c:	059b      	lsls	r3, r3, #22
 800b18e:	d4f8      	bmi.n	800b182 <_vfiprintf_r+0x4a>
 800b190:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b192:	f7fe f95f 	bl	8009454 <__retarget_lock_release_recursive>
 800b196:	e7f4      	b.n	800b182 <_vfiprintf_r+0x4a>
 800b198:	2300      	movs	r3, #0
 800b19a:	ac08      	add	r4, sp, #32
 800b19c:	6163      	str	r3, [r4, #20]
 800b19e:	3320      	adds	r3, #32
 800b1a0:	7663      	strb	r3, [r4, #25]
 800b1a2:	3310      	adds	r3, #16
 800b1a4:	76a3      	strb	r3, [r4, #26]
 800b1a6:	9607      	str	r6, [sp, #28]
 800b1a8:	002e      	movs	r6, r5
 800b1aa:	7833      	ldrb	r3, [r6, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <_vfiprintf_r+0x7c>
 800b1b0:	2b25      	cmp	r3, #37	; 0x25
 800b1b2:	d148      	bne.n	800b246 <_vfiprintf_r+0x10e>
 800b1b4:	1b73      	subs	r3, r6, r5
 800b1b6:	9305      	str	r3, [sp, #20]
 800b1b8:	42ae      	cmp	r6, r5
 800b1ba:	d00b      	beq.n	800b1d4 <_vfiprintf_r+0x9c>
 800b1bc:	002a      	movs	r2, r5
 800b1be:	0039      	movs	r1, r7
 800b1c0:	9803      	ldr	r0, [sp, #12]
 800b1c2:	f7ff ffa7 	bl	800b114 <__sfputs_r>
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d100      	bne.n	800b1cc <_vfiprintf_r+0x94>
 800b1ca:	e0af      	b.n	800b32c <_vfiprintf_r+0x1f4>
 800b1cc:	6963      	ldr	r3, [r4, #20]
 800b1ce:	9a05      	ldr	r2, [sp, #20]
 800b1d0:	189b      	adds	r3, r3, r2
 800b1d2:	6163      	str	r3, [r4, #20]
 800b1d4:	7833      	ldrb	r3, [r6, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d100      	bne.n	800b1dc <_vfiprintf_r+0xa4>
 800b1da:	e0a7      	b.n	800b32c <_vfiprintf_r+0x1f4>
 800b1dc:	2201      	movs	r2, #1
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4252      	negs	r2, r2
 800b1e2:	6062      	str	r2, [r4, #4]
 800b1e4:	a904      	add	r1, sp, #16
 800b1e6:	3254      	adds	r2, #84	; 0x54
 800b1e8:	1852      	adds	r2, r2, r1
 800b1ea:	1c75      	adds	r5, r6, #1
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	60e3      	str	r3, [r4, #12]
 800b1f0:	60a3      	str	r3, [r4, #8]
 800b1f2:	7013      	strb	r3, [r2, #0]
 800b1f4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b1f6:	4b59      	ldr	r3, [pc, #356]	; (800b35c <_vfiprintf_r+0x224>)
 800b1f8:	2205      	movs	r2, #5
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	7829      	ldrb	r1, [r5, #0]
 800b1fe:	9305      	str	r3, [sp, #20]
 800b200:	f7fe f929 	bl	8009456 <memchr>
 800b204:	1c6e      	adds	r6, r5, #1
 800b206:	2800      	cmp	r0, #0
 800b208:	d11f      	bne.n	800b24a <_vfiprintf_r+0x112>
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	06d3      	lsls	r3, r2, #27
 800b20e:	d504      	bpl.n	800b21a <_vfiprintf_r+0xe2>
 800b210:	2353      	movs	r3, #83	; 0x53
 800b212:	a904      	add	r1, sp, #16
 800b214:	185b      	adds	r3, r3, r1
 800b216:	2120      	movs	r1, #32
 800b218:	7019      	strb	r1, [r3, #0]
 800b21a:	0713      	lsls	r3, r2, #28
 800b21c:	d504      	bpl.n	800b228 <_vfiprintf_r+0xf0>
 800b21e:	2353      	movs	r3, #83	; 0x53
 800b220:	a904      	add	r1, sp, #16
 800b222:	185b      	adds	r3, r3, r1
 800b224:	212b      	movs	r1, #43	; 0x2b
 800b226:	7019      	strb	r1, [r3, #0]
 800b228:	782b      	ldrb	r3, [r5, #0]
 800b22a:	2b2a      	cmp	r3, #42	; 0x2a
 800b22c:	d016      	beq.n	800b25c <_vfiprintf_r+0x124>
 800b22e:	002e      	movs	r6, r5
 800b230:	2100      	movs	r1, #0
 800b232:	200a      	movs	r0, #10
 800b234:	68e3      	ldr	r3, [r4, #12]
 800b236:	7832      	ldrb	r2, [r6, #0]
 800b238:	1c75      	adds	r5, r6, #1
 800b23a:	3a30      	subs	r2, #48	; 0x30
 800b23c:	2a09      	cmp	r2, #9
 800b23e:	d94e      	bls.n	800b2de <_vfiprintf_r+0x1a6>
 800b240:	2900      	cmp	r1, #0
 800b242:	d111      	bne.n	800b268 <_vfiprintf_r+0x130>
 800b244:	e017      	b.n	800b276 <_vfiprintf_r+0x13e>
 800b246:	3601      	adds	r6, #1
 800b248:	e7af      	b.n	800b1aa <_vfiprintf_r+0x72>
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	1ac0      	subs	r0, r0, r3
 800b250:	2301      	movs	r3, #1
 800b252:	4083      	lsls	r3, r0
 800b254:	4313      	orrs	r3, r2
 800b256:	0035      	movs	r5, r6
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	e7cc      	b.n	800b1f6 <_vfiprintf_r+0xbe>
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	1d19      	adds	r1, r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	9107      	str	r1, [sp, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	db01      	blt.n	800b26c <_vfiprintf_r+0x134>
 800b268:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26a:	e004      	b.n	800b276 <_vfiprintf_r+0x13e>
 800b26c:	425b      	negs	r3, r3
 800b26e:	60e3      	str	r3, [r4, #12]
 800b270:	2302      	movs	r3, #2
 800b272:	4313      	orrs	r3, r2
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	7833      	ldrb	r3, [r6, #0]
 800b278:	2b2e      	cmp	r3, #46	; 0x2e
 800b27a:	d10a      	bne.n	800b292 <_vfiprintf_r+0x15a>
 800b27c:	7873      	ldrb	r3, [r6, #1]
 800b27e:	2b2a      	cmp	r3, #42	; 0x2a
 800b280:	d135      	bne.n	800b2ee <_vfiprintf_r+0x1b6>
 800b282:	9b07      	ldr	r3, [sp, #28]
 800b284:	3602      	adds	r6, #2
 800b286:	1d1a      	adds	r2, r3, #4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	9207      	str	r2, [sp, #28]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	db2b      	blt.n	800b2e8 <_vfiprintf_r+0x1b0>
 800b290:	9309      	str	r3, [sp, #36]	; 0x24
 800b292:	4d33      	ldr	r5, [pc, #204]	; (800b360 <_vfiprintf_r+0x228>)
 800b294:	2203      	movs	r2, #3
 800b296:	0028      	movs	r0, r5
 800b298:	7831      	ldrb	r1, [r6, #0]
 800b29a:	f7fe f8dc 	bl	8009456 <memchr>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d006      	beq.n	800b2b0 <_vfiprintf_r+0x178>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	1b40      	subs	r0, r0, r5
 800b2a6:	4083      	lsls	r3, r0
 800b2a8:	6822      	ldr	r2, [r4, #0]
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	7831      	ldrb	r1, [r6, #0]
 800b2b2:	2206      	movs	r2, #6
 800b2b4:	482b      	ldr	r0, [pc, #172]	; (800b364 <_vfiprintf_r+0x22c>)
 800b2b6:	1c75      	adds	r5, r6, #1
 800b2b8:	7621      	strb	r1, [r4, #24]
 800b2ba:	f7fe f8cc 	bl	8009456 <memchr>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d043      	beq.n	800b34a <_vfiprintf_r+0x212>
 800b2c2:	4b29      	ldr	r3, [pc, #164]	; (800b368 <_vfiprintf_r+0x230>)
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d125      	bne.n	800b314 <_vfiprintf_r+0x1dc>
 800b2c8:	2207      	movs	r2, #7
 800b2ca:	9b07      	ldr	r3, [sp, #28]
 800b2cc:	3307      	adds	r3, #7
 800b2ce:	4393      	bics	r3, r2
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	9307      	str	r3, [sp, #28]
 800b2d4:	6963      	ldr	r3, [r4, #20]
 800b2d6:	9a04      	ldr	r2, [sp, #16]
 800b2d8:	189b      	adds	r3, r3, r2
 800b2da:	6163      	str	r3, [r4, #20]
 800b2dc:	e764      	b.n	800b1a8 <_vfiprintf_r+0x70>
 800b2de:	4343      	muls	r3, r0
 800b2e0:	002e      	movs	r6, r5
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	189b      	adds	r3, r3, r2
 800b2e6:	e7a6      	b.n	800b236 <_vfiprintf_r+0xfe>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	425b      	negs	r3, r3
 800b2ec:	e7d0      	b.n	800b290 <_vfiprintf_r+0x158>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	200a      	movs	r0, #10
 800b2f2:	001a      	movs	r2, r3
 800b2f4:	3601      	adds	r6, #1
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	7831      	ldrb	r1, [r6, #0]
 800b2fa:	1c75      	adds	r5, r6, #1
 800b2fc:	3930      	subs	r1, #48	; 0x30
 800b2fe:	2909      	cmp	r1, #9
 800b300:	d903      	bls.n	800b30a <_vfiprintf_r+0x1d2>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0c5      	beq.n	800b292 <_vfiprintf_r+0x15a>
 800b306:	9209      	str	r2, [sp, #36]	; 0x24
 800b308:	e7c3      	b.n	800b292 <_vfiprintf_r+0x15a>
 800b30a:	4342      	muls	r2, r0
 800b30c:	002e      	movs	r6, r5
 800b30e:	2301      	movs	r3, #1
 800b310:	1852      	adds	r2, r2, r1
 800b312:	e7f1      	b.n	800b2f8 <_vfiprintf_r+0x1c0>
 800b314:	aa07      	add	r2, sp, #28
 800b316:	9200      	str	r2, [sp, #0]
 800b318:	0021      	movs	r1, r4
 800b31a:	003a      	movs	r2, r7
 800b31c:	4b13      	ldr	r3, [pc, #76]	; (800b36c <_vfiprintf_r+0x234>)
 800b31e:	9803      	ldr	r0, [sp, #12]
 800b320:	f7fd fb0c 	bl	800893c <_printf_float>
 800b324:	9004      	str	r0, [sp, #16]
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	3301      	adds	r3, #1
 800b32a:	d1d3      	bne.n	800b2d4 <_vfiprintf_r+0x19c>
 800b32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32e:	07db      	lsls	r3, r3, #31
 800b330:	d405      	bmi.n	800b33e <_vfiprintf_r+0x206>
 800b332:	89bb      	ldrh	r3, [r7, #12]
 800b334:	059b      	lsls	r3, r3, #22
 800b336:	d402      	bmi.n	800b33e <_vfiprintf_r+0x206>
 800b338:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b33a:	f7fe f88b 	bl	8009454 <__retarget_lock_release_recursive>
 800b33e:	89bb      	ldrh	r3, [r7, #12]
 800b340:	065b      	lsls	r3, r3, #25
 800b342:	d500      	bpl.n	800b346 <_vfiprintf_r+0x20e>
 800b344:	e71d      	b.n	800b182 <_vfiprintf_r+0x4a>
 800b346:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b348:	e71d      	b.n	800b186 <_vfiprintf_r+0x4e>
 800b34a:	aa07      	add	r2, sp, #28
 800b34c:	9200      	str	r2, [sp, #0]
 800b34e:	0021      	movs	r1, r4
 800b350:	003a      	movs	r2, r7
 800b352:	4b06      	ldr	r3, [pc, #24]	; (800b36c <_vfiprintf_r+0x234>)
 800b354:	9803      	ldr	r0, [sp, #12]
 800b356:	f7fd fdb7 	bl	8008ec8 <_printf_i>
 800b35a:	e7e3      	b.n	800b324 <_vfiprintf_r+0x1ec>
 800b35c:	0800ba2c 	.word	0x0800ba2c
 800b360:	0800ba32 	.word	0x0800ba32
 800b364:	0800ba36 	.word	0x0800ba36
 800b368:	0800893d 	.word	0x0800893d
 800b36c:	0800b115 	.word	0x0800b115

0800b370 <__swbuf_r>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	0006      	movs	r6, r0
 800b374:	000d      	movs	r5, r1
 800b376:	0014      	movs	r4, r2
 800b378:	2800      	cmp	r0, #0
 800b37a:	d004      	beq.n	800b386 <__swbuf_r+0x16>
 800b37c:	6a03      	ldr	r3, [r0, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <__swbuf_r+0x16>
 800b382:	f7fd ff41 	bl	8009208 <__sinit>
 800b386:	69a3      	ldr	r3, [r4, #24]
 800b388:	60a3      	str	r3, [r4, #8]
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	071b      	lsls	r3, r3, #28
 800b38e:	d528      	bpl.n	800b3e2 <__swbuf_r+0x72>
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d025      	beq.n	800b3e2 <__swbuf_r+0x72>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	b2ef      	uxtb	r7, r5
 800b39c:	1ac0      	subs	r0, r0, r3
 800b39e:	6963      	ldr	r3, [r4, #20]
 800b3a0:	b2ed      	uxtb	r5, r5
 800b3a2:	4283      	cmp	r3, r0
 800b3a4:	dc05      	bgt.n	800b3b2 <__swbuf_r+0x42>
 800b3a6:	0021      	movs	r1, r4
 800b3a8:	0030      	movs	r0, r6
 800b3aa:	f7ff fd8b 	bl	800aec4 <_fflush_r>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d11d      	bne.n	800b3ee <__swbuf_r+0x7e>
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	6022      	str	r2, [r4, #0]
 800b3c0:	701f      	strb	r7, [r3, #0]
 800b3c2:	6963      	ldr	r3, [r4, #20]
 800b3c4:	4283      	cmp	r3, r0
 800b3c6:	d004      	beq.n	800b3d2 <__swbuf_r+0x62>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	07db      	lsls	r3, r3, #31
 800b3cc:	d507      	bpl.n	800b3de <__swbuf_r+0x6e>
 800b3ce:	2d0a      	cmp	r5, #10
 800b3d0:	d105      	bne.n	800b3de <__swbuf_r+0x6e>
 800b3d2:	0021      	movs	r1, r4
 800b3d4:	0030      	movs	r0, r6
 800b3d6:	f7ff fd75 	bl	800aec4 <_fflush_r>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d107      	bne.n	800b3ee <__swbuf_r+0x7e>
 800b3de:	0028      	movs	r0, r5
 800b3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e2:	0021      	movs	r1, r4
 800b3e4:	0030      	movs	r0, r6
 800b3e6:	f000 f805 	bl	800b3f4 <__swsetup_r>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0d3      	beq.n	800b396 <__swbuf_r+0x26>
 800b3ee:	2501      	movs	r5, #1
 800b3f0:	426d      	negs	r5, r5
 800b3f2:	e7f4      	b.n	800b3de <__swbuf_r+0x6e>

0800b3f4 <__swsetup_r>:
 800b3f4:	4b30      	ldr	r3, [pc, #192]	; (800b4b8 <__swsetup_r+0xc4>)
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	0005      	movs	r5, r0
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	000c      	movs	r4, r1
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d004      	beq.n	800b40c <__swsetup_r+0x18>
 800b402:	6a03      	ldr	r3, [r0, #32]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <__swsetup_r+0x18>
 800b408:	f7fd fefe 	bl	8009208 <__sinit>
 800b40c:	230c      	movs	r3, #12
 800b40e:	5ee2      	ldrsh	r2, [r4, r3]
 800b410:	b293      	uxth	r3, r2
 800b412:	0711      	lsls	r1, r2, #28
 800b414:	d423      	bmi.n	800b45e <__swsetup_r+0x6a>
 800b416:	06d9      	lsls	r1, r3, #27
 800b418:	d407      	bmi.n	800b42a <__swsetup_r+0x36>
 800b41a:	2309      	movs	r3, #9
 800b41c:	2001      	movs	r0, #1
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	3337      	adds	r3, #55	; 0x37
 800b422:	4313      	orrs	r3, r2
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	4240      	negs	r0, r0
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	075b      	lsls	r3, r3, #29
 800b42c:	d513      	bpl.n	800b456 <__swsetup_r+0x62>
 800b42e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b430:	2900      	cmp	r1, #0
 800b432:	d008      	beq.n	800b446 <__swsetup_r+0x52>
 800b434:	0023      	movs	r3, r4
 800b436:	3344      	adds	r3, #68	; 0x44
 800b438:	4299      	cmp	r1, r3
 800b43a:	d002      	beq.n	800b442 <__swsetup_r+0x4e>
 800b43c:	0028      	movs	r0, r5
 800b43e:	f7fe feb3 	bl	800a1a8 <_free_r>
 800b442:	2300      	movs	r3, #0
 800b444:	6363      	str	r3, [r4, #52]	; 0x34
 800b446:	2224      	movs	r2, #36	; 0x24
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	4393      	bics	r3, r2
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	2300      	movs	r3, #0
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	2308      	movs	r3, #8
 800b458:	89a2      	ldrh	r2, [r4, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10b      	bne.n	800b47c <__swsetup_r+0x88>
 800b464:	21a0      	movs	r1, #160	; 0xa0
 800b466:	2280      	movs	r2, #128	; 0x80
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	0089      	lsls	r1, r1, #2
 800b46c:	0092      	lsls	r2, r2, #2
 800b46e:	400b      	ands	r3, r1
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <__swsetup_r+0x88>
 800b474:	0021      	movs	r1, r4
 800b476:	0028      	movs	r0, r5
 800b478:	f000 f892 	bl	800b5a0 <__smakebuf_r>
 800b47c:	220c      	movs	r2, #12
 800b47e:	5ea3      	ldrsh	r3, [r4, r2]
 800b480:	2001      	movs	r0, #1
 800b482:	001a      	movs	r2, r3
 800b484:	b299      	uxth	r1, r3
 800b486:	4002      	ands	r2, r0
 800b488:	4203      	tst	r3, r0
 800b48a:	d00f      	beq.n	800b4ac <__swsetup_r+0xb8>
 800b48c:	2200      	movs	r2, #0
 800b48e:	60a2      	str	r2, [r4, #8]
 800b490:	6962      	ldr	r2, [r4, #20]
 800b492:	4252      	negs	r2, r2
 800b494:	61a2      	str	r2, [r4, #24]
 800b496:	2000      	movs	r0, #0
 800b498:	6922      	ldr	r2, [r4, #16]
 800b49a:	4282      	cmp	r2, r0
 800b49c:	d1c4      	bne.n	800b428 <__swsetup_r+0x34>
 800b49e:	0609      	lsls	r1, r1, #24
 800b4a0:	d5c2      	bpl.n	800b428 <__swsetup_r+0x34>
 800b4a2:	2240      	movs	r2, #64	; 0x40
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	81a3      	strh	r3, [r4, #12]
 800b4a8:	3801      	subs	r0, #1
 800b4aa:	e7bd      	b.n	800b428 <__swsetup_r+0x34>
 800b4ac:	0788      	lsls	r0, r1, #30
 800b4ae:	d400      	bmi.n	800b4b2 <__swsetup_r+0xbe>
 800b4b0:	6962      	ldr	r2, [r4, #20]
 800b4b2:	60a2      	str	r2, [r4, #8]
 800b4b4:	e7ef      	b.n	800b496 <__swsetup_r+0xa2>
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	20000064 	.word	0x20000064

0800b4bc <_raise_r>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	0004      	movs	r4, r0
 800b4c0:	000d      	movs	r5, r1
 800b4c2:	291f      	cmp	r1, #31
 800b4c4:	d904      	bls.n	800b4d0 <_raise_r+0x14>
 800b4c6:	2316      	movs	r3, #22
 800b4c8:	6003      	str	r3, [r0, #0]
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	4240      	negs	r0, r0
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d004      	beq.n	800b4e0 <_raise_r+0x24>
 800b4d6:	008a      	lsls	r2, r1, #2
 800b4d8:	189b      	adds	r3, r3, r2
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	d108      	bne.n	800b4f2 <_raise_r+0x36>
 800b4e0:	0020      	movs	r0, r4
 800b4e2:	f000 f831 	bl	800b548 <_getpid_r>
 800b4e6:	002a      	movs	r2, r5
 800b4e8:	0001      	movs	r1, r0
 800b4ea:	0020      	movs	r0, r4
 800b4ec:	f000 f81a 	bl	800b524 <_kill_r>
 800b4f0:	e7ed      	b.n	800b4ce <_raise_r+0x12>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	2a01      	cmp	r2, #1
 800b4f6:	d0ea      	beq.n	800b4ce <_raise_r+0x12>
 800b4f8:	1c51      	adds	r1, r2, #1
 800b4fa:	d103      	bne.n	800b504 <_raise_r+0x48>
 800b4fc:	2316      	movs	r3, #22
 800b4fe:	3001      	adds	r0, #1
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	e7e4      	b.n	800b4ce <_raise_r+0x12>
 800b504:	2400      	movs	r4, #0
 800b506:	0028      	movs	r0, r5
 800b508:	601c      	str	r4, [r3, #0]
 800b50a:	4790      	blx	r2
 800b50c:	0020      	movs	r0, r4
 800b50e:	e7de      	b.n	800b4ce <_raise_r+0x12>

0800b510 <raise>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4b03      	ldr	r3, [pc, #12]	; (800b520 <raise+0x10>)
 800b514:	0001      	movs	r1, r0
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	f7ff ffd0 	bl	800b4bc <_raise_r>
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	20000064 	.word	0x20000064

0800b524 <_kill_r>:
 800b524:	2300      	movs	r3, #0
 800b526:	b570      	push	{r4, r5, r6, lr}
 800b528:	4d06      	ldr	r5, [pc, #24]	; (800b544 <_kill_r+0x20>)
 800b52a:	0004      	movs	r4, r0
 800b52c:	0008      	movs	r0, r1
 800b52e:	0011      	movs	r1, r2
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	f7f8 f9cf 	bl	80038d4 <_kill>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d103      	bne.n	800b542 <_kill_r+0x1e>
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d000      	beq.n	800b542 <_kill_r+0x1e>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	200005fc 	.word	0x200005fc

0800b548 <_getpid_r>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	f7f8 f9bd 	bl	80038c8 <_getpid>
 800b54e:	bd10      	pop	{r4, pc}

0800b550 <__swhatbuf_r>:
 800b550:	b570      	push	{r4, r5, r6, lr}
 800b552:	000e      	movs	r6, r1
 800b554:	001d      	movs	r5, r3
 800b556:	230e      	movs	r3, #14
 800b558:	5ec9      	ldrsh	r1, [r1, r3]
 800b55a:	0014      	movs	r4, r2
 800b55c:	b096      	sub	sp, #88	; 0x58
 800b55e:	2900      	cmp	r1, #0
 800b560:	da0c      	bge.n	800b57c <__swhatbuf_r+0x2c>
 800b562:	89b2      	ldrh	r2, [r6, #12]
 800b564:	2380      	movs	r3, #128	; 0x80
 800b566:	0011      	movs	r1, r2
 800b568:	4019      	ands	r1, r3
 800b56a:	421a      	tst	r2, r3
 800b56c:	d013      	beq.n	800b596 <__swhatbuf_r+0x46>
 800b56e:	2100      	movs	r1, #0
 800b570:	3b40      	subs	r3, #64	; 0x40
 800b572:	2000      	movs	r0, #0
 800b574:	6029      	str	r1, [r5, #0]
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	b016      	add	sp, #88	; 0x58
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	466a      	mov	r2, sp
 800b57e:	f000 f84d 	bl	800b61c <_fstat_r>
 800b582:	2800      	cmp	r0, #0
 800b584:	dbed      	blt.n	800b562 <__swhatbuf_r+0x12>
 800b586:	23f0      	movs	r3, #240	; 0xf0
 800b588:	9901      	ldr	r1, [sp, #4]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	4019      	ands	r1, r3
 800b58e:	4b03      	ldr	r3, [pc, #12]	; (800b59c <__swhatbuf_r+0x4c>)
 800b590:	18c9      	adds	r1, r1, r3
 800b592:	424b      	negs	r3, r1
 800b594:	4159      	adcs	r1, r3
 800b596:	2380      	movs	r3, #128	; 0x80
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	e7ea      	b.n	800b572 <__swhatbuf_r+0x22>
 800b59c:	ffffe000 	.word	0xffffe000

0800b5a0 <__smakebuf_r>:
 800b5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a2:	2602      	movs	r6, #2
 800b5a4:	898b      	ldrh	r3, [r1, #12]
 800b5a6:	0005      	movs	r5, r0
 800b5a8:	000c      	movs	r4, r1
 800b5aa:	4233      	tst	r3, r6
 800b5ac:	d006      	beq.n	800b5bc <__smakebuf_r+0x1c>
 800b5ae:	0023      	movs	r3, r4
 800b5b0:	3347      	adds	r3, #71	; 0x47
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	6123      	str	r3, [r4, #16]
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	6163      	str	r3, [r4, #20]
 800b5ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b5bc:	466a      	mov	r2, sp
 800b5be:	ab01      	add	r3, sp, #4
 800b5c0:	f7ff ffc6 	bl	800b550 <__swhatbuf_r>
 800b5c4:	9900      	ldr	r1, [sp, #0]
 800b5c6:	0007      	movs	r7, r0
 800b5c8:	0028      	movs	r0, r5
 800b5ca:	f7fe fe63 	bl	800a294 <_malloc_r>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d108      	bne.n	800b5e4 <__smakebuf_r+0x44>
 800b5d2:	220c      	movs	r2, #12
 800b5d4:	5ea3      	ldrsh	r3, [r4, r2]
 800b5d6:	059a      	lsls	r2, r3, #22
 800b5d8:	d4ef      	bmi.n	800b5ba <__smakebuf_r+0x1a>
 800b5da:	2203      	movs	r2, #3
 800b5dc:	4393      	bics	r3, r2
 800b5de:	431e      	orrs	r6, r3
 800b5e0:	81a6      	strh	r6, [r4, #12]
 800b5e2:	e7e4      	b.n	800b5ae <__smakebuf_r+0xe>
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	89a2      	ldrh	r2, [r4, #12]
 800b5e8:	6020      	str	r0, [r4, #0]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	9b00      	ldr	r3, [sp, #0]
 800b5f0:	6120      	str	r0, [r4, #16]
 800b5f2:	6163      	str	r3, [r4, #20]
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00c      	beq.n	800b614 <__smakebuf_r+0x74>
 800b5fa:	0028      	movs	r0, r5
 800b5fc:	230e      	movs	r3, #14
 800b5fe:	5ee1      	ldrsh	r1, [r4, r3]
 800b600:	f000 f81e 	bl	800b640 <_isatty_r>
 800b604:	2800      	cmp	r0, #0
 800b606:	d005      	beq.n	800b614 <__smakebuf_r+0x74>
 800b608:	2303      	movs	r3, #3
 800b60a:	89a2      	ldrh	r2, [r4, #12]
 800b60c:	439a      	bics	r2, r3
 800b60e:	3b02      	subs	r3, #2
 800b610:	4313      	orrs	r3, r2
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	433b      	orrs	r3, r7
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	e7ce      	b.n	800b5ba <__smakebuf_r+0x1a>

0800b61c <_fstat_r>:
 800b61c:	2300      	movs	r3, #0
 800b61e:	b570      	push	{r4, r5, r6, lr}
 800b620:	4d06      	ldr	r5, [pc, #24]	; (800b63c <_fstat_r+0x20>)
 800b622:	0004      	movs	r4, r0
 800b624:	0008      	movs	r0, r1
 800b626:	0011      	movs	r1, r2
 800b628:	602b      	str	r3, [r5, #0]
 800b62a:	f7f8 f9b2 	bl	8003992 <_fstat>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d103      	bne.n	800b63a <_fstat_r+0x1e>
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d000      	beq.n	800b63a <_fstat_r+0x1e>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	200005fc 	.word	0x200005fc

0800b640 <_isatty_r>:
 800b640:	2300      	movs	r3, #0
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	4d06      	ldr	r5, [pc, #24]	; (800b660 <_isatty_r+0x20>)
 800b646:	0004      	movs	r4, r0
 800b648:	0008      	movs	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f8 f9af 	bl	80039ae <_isatty>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d103      	bne.n	800b65c <_isatty_r+0x1c>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d000      	beq.n	800b65c <_isatty_r+0x1c>
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	200005fc 	.word	0x200005fc

0800b664 <_init>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	46c0      	nop			; (mov r8, r8)
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr

0800b670 <_fini>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	46c0      	nop			; (mov r8, r8)
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr
