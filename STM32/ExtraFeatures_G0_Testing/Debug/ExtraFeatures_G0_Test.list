
ExtraFeatures_G0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800bc20  0800bc20  0000cc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c124  0800c124  0000d124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c12c  0800c12c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c130  0800c130  0000d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c134  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200001d4  0800c308  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800c308  0000e650  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166d8  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c21  00000000  00000000  000248d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  000274f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcf  00000000  00000000  000288f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041e9  00000000  00000000  000298c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ff0  00000000  00000000  0002dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0c2  00000000  00000000  00046aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3b62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b84  00000000  00000000  000e3ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e972c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bc04 	.word	0x0800bc04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800bc04 	.word	0x0800bc04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faff 	bl	8001a40 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa43 	bl	80018d8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 faf1 	bl	8001a40 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fae7 	bl	8001a40 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa6d 	bl	8001960 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa63 	bl	8001960 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 faa5 	bl	8000a00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fa2d 	bl	8000920 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa97 	bl	8000a00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fa8d 	bl	8000a00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa3b 	bl	8000970 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa31 	bl	8000970 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f806 	bl	800055c <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__udivmoddi4>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	4657      	mov	r7, sl
 8000560:	464e      	mov	r6, r9
 8000562:	4645      	mov	r5, r8
 8000564:	46de      	mov	lr, fp
 8000566:	b5e0      	push	{r5, r6, r7, lr}
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	4692      	mov	sl, r2
 800056e:	4699      	mov	r9, r3
 8000570:	b083      	sub	sp, #12
 8000572:	428b      	cmp	r3, r1
 8000574:	d830      	bhi.n	80005d8 <__udivmoddi4+0x7c>
 8000576:	d02d      	beq.n	80005d4 <__udivmoddi4+0x78>
 8000578:	4649      	mov	r1, r9
 800057a:	4650      	mov	r0, sl
 800057c:	f002 fad4 	bl	8002b28 <__clzdi2>
 8000580:	0029      	movs	r1, r5
 8000582:	0006      	movs	r6, r0
 8000584:	0020      	movs	r0, r4
 8000586:	f002 facf 	bl	8002b28 <__clzdi2>
 800058a:	1a33      	subs	r3, r6, r0
 800058c:	4698      	mov	r8, r3
 800058e:	3b20      	subs	r3, #32
 8000590:	d434      	bmi.n	80005fc <__udivmoddi4+0xa0>
 8000592:	469b      	mov	fp, r3
 8000594:	4653      	mov	r3, sl
 8000596:	465a      	mov	r2, fp
 8000598:	4093      	lsls	r3, r2
 800059a:	4642      	mov	r2, r8
 800059c:	001f      	movs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d83b      	bhi.n	8000620 <__udivmoddi4+0xc4>
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d100      	bne.n	80005ae <__udivmoddi4+0x52>
 80005ac:	e079      	b.n	80006a2 <__udivmoddi4+0x146>
 80005ae:	465b      	mov	r3, fp
 80005b0:	1ba4      	subs	r4, r4, r6
 80005b2:	41bd      	sbcs	r5, r7
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da00      	bge.n	80005ba <__udivmoddi4+0x5e>
 80005b8:	e076      	b.n	80006a8 <__udivmoddi4+0x14c>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	465a      	mov	r2, fp
 80005c6:	4093      	lsls	r3, r2
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4642      	mov	r2, r8
 80005ce:	4093      	lsls	r3, r2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	e029      	b.n	8000628 <__udivmoddi4+0xcc>
 80005d4:	4282      	cmp	r2, r0
 80005d6:	d9cf      	bls.n	8000578 <__udivmoddi4+0x1c>
 80005d8:	2200      	movs	r2, #0
 80005da:	2300      	movs	r3, #0
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <__udivmoddi4+0x8e>
 80005e6:	601c      	str	r4, [r3, #0]
 80005e8:	605d      	str	r5, [r3, #4]
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	b003      	add	sp, #12
 80005f0:	bcf0      	pop	{r4, r5, r6, r7}
 80005f2:	46bb      	mov	fp, r7
 80005f4:	46b2      	mov	sl, r6
 80005f6:	46a9      	mov	r9, r5
 80005f8:	46a0      	mov	r8, r4
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	4642      	mov	r2, r8
 80005fe:	469b      	mov	fp, r3
 8000600:	2320      	movs	r3, #32
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	4652      	mov	r2, sl
 8000606:	40da      	lsrs	r2, r3
 8000608:	4641      	mov	r1, r8
 800060a:	0013      	movs	r3, r2
 800060c:	464a      	mov	r2, r9
 800060e:	408a      	lsls	r2, r1
 8000610:	0017      	movs	r7, r2
 8000612:	4642      	mov	r2, r8
 8000614:	431f      	orrs	r7, r3
 8000616:	4653      	mov	r3, sl
 8000618:	4093      	lsls	r3, r2
 800061a:	001e      	movs	r6, r3
 800061c:	42af      	cmp	r7, r5
 800061e:	d9c3      	bls.n	80005a8 <__udivmoddi4+0x4c>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	4643      	mov	r3, r8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0d8      	beq.n	80005e0 <__udivmoddi4+0x84>
 800062e:	07fb      	lsls	r3, r7, #31
 8000630:	0872      	lsrs	r2, r6, #1
 8000632:	431a      	orrs	r2, r3
 8000634:	4646      	mov	r6, r8
 8000636:	087b      	lsrs	r3, r7, #1
 8000638:	e00e      	b.n	8000658 <__udivmoddi4+0xfc>
 800063a:	42ab      	cmp	r3, r5
 800063c:	d101      	bne.n	8000642 <__udivmoddi4+0xe6>
 800063e:	42a2      	cmp	r2, r4
 8000640:	d80c      	bhi.n	800065c <__udivmoddi4+0x100>
 8000642:	1aa4      	subs	r4, r4, r2
 8000644:	419d      	sbcs	r5, r3
 8000646:	2001      	movs	r0, #1
 8000648:	1924      	adds	r4, r4, r4
 800064a:	416d      	adcs	r5, r5
 800064c:	2100      	movs	r1, #0
 800064e:	3e01      	subs	r6, #1
 8000650:	1824      	adds	r4, r4, r0
 8000652:	414d      	adcs	r5, r1
 8000654:	2e00      	cmp	r6, #0
 8000656:	d006      	beq.n	8000666 <__udivmoddi4+0x10a>
 8000658:	42ab      	cmp	r3, r5
 800065a:	d9ee      	bls.n	800063a <__udivmoddi4+0xde>
 800065c:	3e01      	subs	r6, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2e00      	cmp	r6, #0
 8000664:	d1f8      	bne.n	8000658 <__udivmoddi4+0xfc>
 8000666:	9800      	ldr	r0, [sp, #0]
 8000668:	9901      	ldr	r1, [sp, #4]
 800066a:	465b      	mov	r3, fp
 800066c:	1900      	adds	r0, r0, r4
 800066e:	4169      	adcs	r1, r5
 8000670:	2b00      	cmp	r3, #0
 8000672:	db24      	blt.n	80006be <__udivmoddi4+0x162>
 8000674:	002b      	movs	r3, r5
 8000676:	465a      	mov	r2, fp
 8000678:	4644      	mov	r4, r8
 800067a:	40d3      	lsrs	r3, r2
 800067c:	002a      	movs	r2, r5
 800067e:	40e2      	lsrs	r2, r4
 8000680:	001c      	movs	r4, r3
 8000682:	465b      	mov	r3, fp
 8000684:	0015      	movs	r5, r2
 8000686:	2b00      	cmp	r3, #0
 8000688:	db2a      	blt.n	80006e0 <__udivmoddi4+0x184>
 800068a:	0026      	movs	r6, r4
 800068c:	409e      	lsls	r6, r3
 800068e:	0033      	movs	r3, r6
 8000690:	0026      	movs	r6, r4
 8000692:	4647      	mov	r7, r8
 8000694:	40be      	lsls	r6, r7
 8000696:	0032      	movs	r2, r6
 8000698:	1a80      	subs	r0, r0, r2
 800069a:	4199      	sbcs	r1, r3
 800069c:	9000      	str	r0, [sp, #0]
 800069e:	9101      	str	r1, [sp, #4]
 80006a0:	e79e      	b.n	80005e0 <__udivmoddi4+0x84>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d8bc      	bhi.n	8000620 <__udivmoddi4+0xc4>
 80006a6:	e782      	b.n	80005ae <__udivmoddi4+0x52>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	9100      	str	r1, [sp, #0]
 80006b4:	9201      	str	r2, [sp, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	40da      	lsrs	r2, r3
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	e785      	b.n	80005ca <__udivmoddi4+0x6e>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	4646      	mov	r6, r8
 80006c8:	409a      	lsls	r2, r3
 80006ca:	0023      	movs	r3, r4
 80006cc:	40f3      	lsrs	r3, r6
 80006ce:	4644      	mov	r4, r8
 80006d0:	4313      	orrs	r3, r2
 80006d2:	002a      	movs	r2, r5
 80006d4:	40e2      	lsrs	r2, r4
 80006d6:	001c      	movs	r4, r3
 80006d8:	465b      	mov	r3, fp
 80006da:	0015      	movs	r5, r2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	dad4      	bge.n	800068a <__udivmoddi4+0x12e>
 80006e0:	4642      	mov	r2, r8
 80006e2:	002f      	movs	r7, r5
 80006e4:	2320      	movs	r3, #32
 80006e6:	0026      	movs	r6, r4
 80006e8:	4097      	lsls	r7, r2
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	40de      	lsrs	r6, r3
 80006ee:	003b      	movs	r3, r7
 80006f0:	4333      	orrs	r3, r6
 80006f2:	e7cd      	b.n	8000690 <__udivmoddi4+0x134>

080006f4 <__aeabi_fdiv>:
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	4646      	mov	r6, r8
 80006f8:	464f      	mov	r7, r9
 80006fa:	46d6      	mov	lr, sl
 80006fc:	0245      	lsls	r5, r0, #9
 80006fe:	b5c0      	push	{r6, r7, lr}
 8000700:	0fc3      	lsrs	r3, r0, #31
 8000702:	0047      	lsls	r7, r0, #1
 8000704:	4698      	mov	r8, r3
 8000706:	1c0e      	adds	r6, r1, #0
 8000708:	0a6d      	lsrs	r5, r5, #9
 800070a:	0e3f      	lsrs	r7, r7, #24
 800070c:	d05b      	beq.n	80007c6 <__aeabi_fdiv+0xd2>
 800070e:	2fff      	cmp	r7, #255	@ 0xff
 8000710:	d021      	beq.n	8000756 <__aeabi_fdiv+0x62>
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	00ed      	lsls	r5, r5, #3
 8000716:	04db      	lsls	r3, r3, #19
 8000718:	431d      	orrs	r5, r3
 800071a:	2300      	movs	r3, #0
 800071c:	4699      	mov	r9, r3
 800071e:	469a      	mov	sl, r3
 8000720:	3f7f      	subs	r7, #127	@ 0x7f
 8000722:	0274      	lsls	r4, r6, #9
 8000724:	0073      	lsls	r3, r6, #1
 8000726:	0a64      	lsrs	r4, r4, #9
 8000728:	0e1b      	lsrs	r3, r3, #24
 800072a:	0ff6      	lsrs	r6, r6, #31
 800072c:	2b00      	cmp	r3, #0
 800072e:	d020      	beq.n	8000772 <__aeabi_fdiv+0x7e>
 8000730:	2bff      	cmp	r3, #255	@ 0xff
 8000732:	d043      	beq.n	80007bc <__aeabi_fdiv+0xc8>
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	2000      	movs	r0, #0
 8000738:	00e4      	lsls	r4, r4, #3
 800073a:	04d2      	lsls	r2, r2, #19
 800073c:	4314      	orrs	r4, r2
 800073e:	3b7f      	subs	r3, #127	@ 0x7f
 8000740:	4642      	mov	r2, r8
 8000742:	1aff      	subs	r7, r7, r3
 8000744:	464b      	mov	r3, r9
 8000746:	4072      	eors	r2, r6
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d900      	bls.n	800074e <__aeabi_fdiv+0x5a>
 800074c:	e09d      	b.n	800088a <__aeabi_fdiv+0x196>
 800074e:	4971      	ldr	r1, [pc, #452]	@ (8000914 <__aeabi_fdiv+0x220>)
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	58cb      	ldr	r3, [r1, r3]
 8000754:	469f      	mov	pc, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d15a      	bne.n	8000810 <__aeabi_fdiv+0x11c>
 800075a:	2308      	movs	r3, #8
 800075c:	4699      	mov	r9, r3
 800075e:	3b06      	subs	r3, #6
 8000760:	0274      	lsls	r4, r6, #9
 8000762:	469a      	mov	sl, r3
 8000764:	0073      	lsls	r3, r6, #1
 8000766:	27ff      	movs	r7, #255	@ 0xff
 8000768:	0a64      	lsrs	r4, r4, #9
 800076a:	0e1b      	lsrs	r3, r3, #24
 800076c:	0ff6      	lsrs	r6, r6, #31
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1de      	bne.n	8000730 <__aeabi_fdiv+0x3c>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d13b      	bne.n	80007ee <__aeabi_fdiv+0xfa>
 8000776:	2301      	movs	r3, #1
 8000778:	4642      	mov	r2, r8
 800077a:	4649      	mov	r1, r9
 800077c:	4072      	eors	r2, r6
 800077e:	4319      	orrs	r1, r3
 8000780:	290e      	cmp	r1, #14
 8000782:	d818      	bhi.n	80007b6 <__aeabi_fdiv+0xc2>
 8000784:	4864      	ldr	r0, [pc, #400]	@ (8000918 <__aeabi_fdiv+0x224>)
 8000786:	0089      	lsls	r1, r1, #2
 8000788:	5841      	ldr	r1, [r0, r1]
 800078a:	468f      	mov	pc, r1
 800078c:	4653      	mov	r3, sl
 800078e:	2b02      	cmp	r3, #2
 8000790:	d100      	bne.n	8000794 <__aeabi_fdiv+0xa0>
 8000792:	e0b8      	b.n	8000906 <__aeabi_fdiv+0x212>
 8000794:	2b03      	cmp	r3, #3
 8000796:	d06e      	beq.n	8000876 <__aeabi_fdiv+0x182>
 8000798:	4642      	mov	r2, r8
 800079a:	002c      	movs	r4, r5
 800079c:	2b01      	cmp	r3, #1
 800079e:	d140      	bne.n	8000822 <__aeabi_fdiv+0x12e>
 80007a0:	2000      	movs	r0, #0
 80007a2:	2400      	movs	r4, #0
 80007a4:	05c0      	lsls	r0, r0, #23
 80007a6:	4320      	orrs	r0, r4
 80007a8:	07d2      	lsls	r2, r2, #31
 80007aa:	4310      	orrs	r0, r2
 80007ac:	bce0      	pop	{r5, r6, r7}
 80007ae:	46ba      	mov	sl, r7
 80007b0:	46b1      	mov	r9, r6
 80007b2:	46a8      	mov	r8, r5
 80007b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b6:	20ff      	movs	r0, #255	@ 0xff
 80007b8:	2400      	movs	r4, #0
 80007ba:	e7f3      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d120      	bne.n	8000802 <__aeabi_fdiv+0x10e>
 80007c0:	2302      	movs	r3, #2
 80007c2:	3fff      	subs	r7, #255	@ 0xff
 80007c4:	e7d8      	b.n	8000778 <__aeabi_fdiv+0x84>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d105      	bne.n	80007d6 <__aeabi_fdiv+0xe2>
 80007ca:	2304      	movs	r3, #4
 80007cc:	4699      	mov	r9, r3
 80007ce:	3b03      	subs	r3, #3
 80007d0:	2700      	movs	r7, #0
 80007d2:	469a      	mov	sl, r3
 80007d4:	e7a5      	b.n	8000722 <__aeabi_fdiv+0x2e>
 80007d6:	0028      	movs	r0, r5
 80007d8:	f002 f988 	bl	8002aec <__clzsi2>
 80007dc:	2776      	movs	r7, #118	@ 0x76
 80007de:	1f43      	subs	r3, r0, #5
 80007e0:	409d      	lsls	r5, r3
 80007e2:	2300      	movs	r3, #0
 80007e4:	427f      	negs	r7, r7
 80007e6:	4699      	mov	r9, r3
 80007e8:	469a      	mov	sl, r3
 80007ea:	1a3f      	subs	r7, r7, r0
 80007ec:	e799      	b.n	8000722 <__aeabi_fdiv+0x2e>
 80007ee:	0020      	movs	r0, r4
 80007f0:	f002 f97c 	bl	8002aec <__clzsi2>
 80007f4:	1f43      	subs	r3, r0, #5
 80007f6:	409c      	lsls	r4, r3
 80007f8:	2376      	movs	r3, #118	@ 0x76
 80007fa:	425b      	negs	r3, r3
 80007fc:	1a1b      	subs	r3, r3, r0
 80007fe:	2000      	movs	r0, #0
 8000800:	e79e      	b.n	8000740 <__aeabi_fdiv+0x4c>
 8000802:	2303      	movs	r3, #3
 8000804:	464a      	mov	r2, r9
 8000806:	431a      	orrs	r2, r3
 8000808:	4691      	mov	r9, r2
 800080a:	2003      	movs	r0, #3
 800080c:	33fc      	adds	r3, #252	@ 0xfc
 800080e:	e797      	b.n	8000740 <__aeabi_fdiv+0x4c>
 8000810:	230c      	movs	r3, #12
 8000812:	4699      	mov	r9, r3
 8000814:	3b09      	subs	r3, #9
 8000816:	27ff      	movs	r7, #255	@ 0xff
 8000818:	469a      	mov	sl, r3
 800081a:	e782      	b.n	8000722 <__aeabi_fdiv+0x2e>
 800081c:	2803      	cmp	r0, #3
 800081e:	d02c      	beq.n	800087a <__aeabi_fdiv+0x186>
 8000820:	0032      	movs	r2, r6
 8000822:	0038      	movs	r0, r7
 8000824:	307f      	adds	r0, #127	@ 0x7f
 8000826:	2800      	cmp	r0, #0
 8000828:	dd47      	ble.n	80008ba <__aeabi_fdiv+0x1c6>
 800082a:	0763      	lsls	r3, r4, #29
 800082c:	d004      	beq.n	8000838 <__aeabi_fdiv+0x144>
 800082e:	230f      	movs	r3, #15
 8000830:	4023      	ands	r3, r4
 8000832:	2b04      	cmp	r3, #4
 8000834:	d000      	beq.n	8000838 <__aeabi_fdiv+0x144>
 8000836:	3404      	adds	r4, #4
 8000838:	0123      	lsls	r3, r4, #4
 800083a:	d503      	bpl.n	8000844 <__aeabi_fdiv+0x150>
 800083c:	0038      	movs	r0, r7
 800083e:	4b37      	ldr	r3, [pc, #220]	@ (800091c <__aeabi_fdiv+0x228>)
 8000840:	3080      	adds	r0, #128	@ 0x80
 8000842:	401c      	ands	r4, r3
 8000844:	28fe      	cmp	r0, #254	@ 0xfe
 8000846:	dcb6      	bgt.n	80007b6 <__aeabi_fdiv+0xc2>
 8000848:	01a4      	lsls	r4, r4, #6
 800084a:	0a64      	lsrs	r4, r4, #9
 800084c:	b2c0      	uxtb	r0, r0
 800084e:	e7a9      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 8000850:	2480      	movs	r4, #128	@ 0x80
 8000852:	2200      	movs	r2, #0
 8000854:	20ff      	movs	r0, #255	@ 0xff
 8000856:	03e4      	lsls	r4, r4, #15
 8000858:	e7a4      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 800085a:	2380      	movs	r3, #128	@ 0x80
 800085c:	03db      	lsls	r3, r3, #15
 800085e:	421d      	tst	r5, r3
 8000860:	d001      	beq.n	8000866 <__aeabi_fdiv+0x172>
 8000862:	421c      	tst	r4, r3
 8000864:	d00b      	beq.n	800087e <__aeabi_fdiv+0x18a>
 8000866:	2480      	movs	r4, #128	@ 0x80
 8000868:	03e4      	lsls	r4, r4, #15
 800086a:	432c      	orrs	r4, r5
 800086c:	0264      	lsls	r4, r4, #9
 800086e:	4642      	mov	r2, r8
 8000870:	20ff      	movs	r0, #255	@ 0xff
 8000872:	0a64      	lsrs	r4, r4, #9
 8000874:	e796      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 8000876:	4646      	mov	r6, r8
 8000878:	002c      	movs	r4, r5
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	03db      	lsls	r3, r3, #15
 800087e:	431c      	orrs	r4, r3
 8000880:	0264      	lsls	r4, r4, #9
 8000882:	0032      	movs	r2, r6
 8000884:	20ff      	movs	r0, #255	@ 0xff
 8000886:	0a64      	lsrs	r4, r4, #9
 8000888:	e78c      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 800088a:	016d      	lsls	r5, r5, #5
 800088c:	0160      	lsls	r0, r4, #5
 800088e:	4285      	cmp	r5, r0
 8000890:	d22d      	bcs.n	80008ee <__aeabi_fdiv+0x1fa>
 8000892:	231b      	movs	r3, #27
 8000894:	2400      	movs	r4, #0
 8000896:	3f01      	subs	r7, #1
 8000898:	2601      	movs	r6, #1
 800089a:	0029      	movs	r1, r5
 800089c:	0064      	lsls	r4, r4, #1
 800089e:	006d      	lsls	r5, r5, #1
 80008a0:	2900      	cmp	r1, #0
 80008a2:	db01      	blt.n	80008a8 <__aeabi_fdiv+0x1b4>
 80008a4:	4285      	cmp	r5, r0
 80008a6:	d301      	bcc.n	80008ac <__aeabi_fdiv+0x1b8>
 80008a8:	1a2d      	subs	r5, r5, r0
 80008aa:	4334      	orrs	r4, r6
 80008ac:	3b01      	subs	r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f3      	bne.n	800089a <__aeabi_fdiv+0x1a6>
 80008b2:	1e6b      	subs	r3, r5, #1
 80008b4:	419d      	sbcs	r5, r3
 80008b6:	432c      	orrs	r4, r5
 80008b8:	e7b3      	b.n	8000822 <__aeabi_fdiv+0x12e>
 80008ba:	2301      	movs	r3, #1
 80008bc:	1a1b      	subs	r3, r3, r0
 80008be:	2b1b      	cmp	r3, #27
 80008c0:	dd00      	ble.n	80008c4 <__aeabi_fdiv+0x1d0>
 80008c2:	e76d      	b.n	80007a0 <__aeabi_fdiv+0xac>
 80008c4:	0021      	movs	r1, r4
 80008c6:	379e      	adds	r7, #158	@ 0x9e
 80008c8:	40d9      	lsrs	r1, r3
 80008ca:	40bc      	lsls	r4, r7
 80008cc:	000b      	movs	r3, r1
 80008ce:	1e61      	subs	r1, r4, #1
 80008d0:	418c      	sbcs	r4, r1
 80008d2:	4323      	orrs	r3, r4
 80008d4:	0759      	lsls	r1, r3, #29
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fdiv+0x1ee>
 80008d8:	210f      	movs	r1, #15
 80008da:	4019      	ands	r1, r3
 80008dc:	2904      	cmp	r1, #4
 80008de:	d000      	beq.n	80008e2 <__aeabi_fdiv+0x1ee>
 80008e0:	3304      	adds	r3, #4
 80008e2:	0159      	lsls	r1, r3, #5
 80008e4:	d413      	bmi.n	800090e <__aeabi_fdiv+0x21a>
 80008e6:	019b      	lsls	r3, r3, #6
 80008e8:	2000      	movs	r0, #0
 80008ea:	0a5c      	lsrs	r4, r3, #9
 80008ec:	e75a      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 80008ee:	231a      	movs	r3, #26
 80008f0:	2401      	movs	r4, #1
 80008f2:	1a2d      	subs	r5, r5, r0
 80008f4:	e7d0      	b.n	8000898 <__aeabi_fdiv+0x1a4>
 80008f6:	1e98      	subs	r0, r3, #2
 80008f8:	4243      	negs	r3, r0
 80008fa:	4158      	adcs	r0, r3
 80008fc:	4240      	negs	r0, r0
 80008fe:	0032      	movs	r2, r6
 8000900:	2400      	movs	r4, #0
 8000902:	b2c0      	uxtb	r0, r0
 8000904:	e74e      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 8000906:	4642      	mov	r2, r8
 8000908:	20ff      	movs	r0, #255	@ 0xff
 800090a:	2400      	movs	r4, #0
 800090c:	e74a      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 800090e:	2001      	movs	r0, #1
 8000910:	2400      	movs	r4, #0
 8000912:	e747      	b.n	80007a4 <__aeabi_fdiv+0xb0>
 8000914:	0800bc28 	.word	0x0800bc28
 8000918:	0800bc68 	.word	0x0800bc68
 800091c:	f7ffffff 	.word	0xf7ffffff

08000920 <__eqsf2>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	0042      	lsls	r2, r0, #1
 8000924:	024e      	lsls	r6, r1, #9
 8000926:	004c      	lsls	r4, r1, #1
 8000928:	0245      	lsls	r5, r0, #9
 800092a:	0a6d      	lsrs	r5, r5, #9
 800092c:	0e12      	lsrs	r2, r2, #24
 800092e:	0fc3      	lsrs	r3, r0, #31
 8000930:	0a76      	lsrs	r6, r6, #9
 8000932:	0e24      	lsrs	r4, r4, #24
 8000934:	0fc9      	lsrs	r1, r1, #31
 8000936:	2aff      	cmp	r2, #255	@ 0xff
 8000938:	d010      	beq.n	800095c <__eqsf2+0x3c>
 800093a:	2cff      	cmp	r4, #255	@ 0xff
 800093c:	d00c      	beq.n	8000958 <__eqsf2+0x38>
 800093e:	2001      	movs	r0, #1
 8000940:	42a2      	cmp	r2, r4
 8000942:	d10a      	bne.n	800095a <__eqsf2+0x3a>
 8000944:	42b5      	cmp	r5, r6
 8000946:	d108      	bne.n	800095a <__eqsf2+0x3a>
 8000948:	428b      	cmp	r3, r1
 800094a:	d00f      	beq.n	800096c <__eqsf2+0x4c>
 800094c:	2a00      	cmp	r2, #0
 800094e:	d104      	bne.n	800095a <__eqsf2+0x3a>
 8000950:	0028      	movs	r0, r5
 8000952:	1e43      	subs	r3, r0, #1
 8000954:	4198      	sbcs	r0, r3
 8000956:	e000      	b.n	800095a <__eqsf2+0x3a>
 8000958:	2001      	movs	r0, #1
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	2001      	movs	r0, #1
 800095e:	2cff      	cmp	r4, #255	@ 0xff
 8000960:	d1fb      	bne.n	800095a <__eqsf2+0x3a>
 8000962:	4335      	orrs	r5, r6
 8000964:	d1f9      	bne.n	800095a <__eqsf2+0x3a>
 8000966:	404b      	eors	r3, r1
 8000968:	0018      	movs	r0, r3
 800096a:	e7f6      	b.n	800095a <__eqsf2+0x3a>
 800096c:	2000      	movs	r0, #0
 800096e:	e7f4      	b.n	800095a <__eqsf2+0x3a>

08000970 <__gesf2>:
 8000970:	b530      	push	{r4, r5, lr}
 8000972:	0042      	lsls	r2, r0, #1
 8000974:	0244      	lsls	r4, r0, #9
 8000976:	024d      	lsls	r5, r1, #9
 8000978:	0fc3      	lsrs	r3, r0, #31
 800097a:	0048      	lsls	r0, r1, #1
 800097c:	0a64      	lsrs	r4, r4, #9
 800097e:	0e12      	lsrs	r2, r2, #24
 8000980:	0a6d      	lsrs	r5, r5, #9
 8000982:	0e00      	lsrs	r0, r0, #24
 8000984:	0fc9      	lsrs	r1, r1, #31
 8000986:	2aff      	cmp	r2, #255	@ 0xff
 8000988:	d018      	beq.n	80009bc <__gesf2+0x4c>
 800098a:	28ff      	cmp	r0, #255	@ 0xff
 800098c:	d00a      	beq.n	80009a4 <__gesf2+0x34>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d11e      	bne.n	80009d0 <__gesf2+0x60>
 8000992:	2800      	cmp	r0, #0
 8000994:	d10a      	bne.n	80009ac <__gesf2+0x3c>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d029      	beq.n	80009ee <__gesf2+0x7e>
 800099a:	2c00      	cmp	r4, #0
 800099c:	d12d      	bne.n	80009fa <__gesf2+0x8a>
 800099e:	0048      	lsls	r0, r1, #1
 80009a0:	3801      	subs	r0, #1
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d125      	bne.n	80009f4 <__gesf2+0x84>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d101      	bne.n	80009b0 <__gesf2+0x40>
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d0f6      	beq.n	800099e <__gesf2+0x2e>
 80009b0:	428b      	cmp	r3, r1
 80009b2:	d019      	beq.n	80009e8 <__gesf2+0x78>
 80009b4:	2001      	movs	r0, #1
 80009b6:	425b      	negs	r3, r3
 80009b8:	4318      	orrs	r0, r3
 80009ba:	e7f2      	b.n	80009a2 <__gesf2+0x32>
 80009bc:	2c00      	cmp	r4, #0
 80009be:	d119      	bne.n	80009f4 <__gesf2+0x84>
 80009c0:	28ff      	cmp	r0, #255	@ 0xff
 80009c2:	d1f7      	bne.n	80009b4 <__gesf2+0x44>
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d115      	bne.n	80009f4 <__gesf2+0x84>
 80009c8:	2000      	movs	r0, #0
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d1f2      	bne.n	80009b4 <__gesf2+0x44>
 80009ce:	e7e8      	b.n	80009a2 <__gesf2+0x32>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d0ef      	beq.n	80009b4 <__gesf2+0x44>
 80009d4:	428b      	cmp	r3, r1
 80009d6:	d1ed      	bne.n	80009b4 <__gesf2+0x44>
 80009d8:	4282      	cmp	r2, r0
 80009da:	dceb      	bgt.n	80009b4 <__gesf2+0x44>
 80009dc:	db04      	blt.n	80009e8 <__gesf2+0x78>
 80009de:	42ac      	cmp	r4, r5
 80009e0:	d8e8      	bhi.n	80009b4 <__gesf2+0x44>
 80009e2:	2000      	movs	r0, #0
 80009e4:	42ac      	cmp	r4, r5
 80009e6:	d2dc      	bcs.n	80009a2 <__gesf2+0x32>
 80009e8:	0058      	lsls	r0, r3, #1
 80009ea:	3801      	subs	r0, #1
 80009ec:	e7d9      	b.n	80009a2 <__gesf2+0x32>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d0d7      	beq.n	80009a2 <__gesf2+0x32>
 80009f2:	e7df      	b.n	80009b4 <__gesf2+0x44>
 80009f4:	2002      	movs	r0, #2
 80009f6:	4240      	negs	r0, r0
 80009f8:	e7d3      	b.n	80009a2 <__gesf2+0x32>
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d1da      	bne.n	80009b4 <__gesf2+0x44>
 80009fe:	e7ee      	b.n	80009de <__gesf2+0x6e>

08000a00 <__lesf2>:
 8000a00:	b530      	push	{r4, r5, lr}
 8000a02:	0042      	lsls	r2, r0, #1
 8000a04:	0244      	lsls	r4, r0, #9
 8000a06:	024d      	lsls	r5, r1, #9
 8000a08:	0fc3      	lsrs	r3, r0, #31
 8000a0a:	0048      	lsls	r0, r1, #1
 8000a0c:	0a64      	lsrs	r4, r4, #9
 8000a0e:	0e12      	lsrs	r2, r2, #24
 8000a10:	0a6d      	lsrs	r5, r5, #9
 8000a12:	0e00      	lsrs	r0, r0, #24
 8000a14:	0fc9      	lsrs	r1, r1, #31
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d017      	beq.n	8000a4a <__lesf2+0x4a>
 8000a1a:	28ff      	cmp	r0, #255	@ 0xff
 8000a1c:	d00a      	beq.n	8000a34 <__lesf2+0x34>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d11b      	bne.n	8000a5a <__lesf2+0x5a>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d10a      	bne.n	8000a3c <__lesf2+0x3c>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d01d      	beq.n	8000a66 <__lesf2+0x66>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d12d      	bne.n	8000a8a <__lesf2+0x8a>
 8000a2e:	0048      	lsls	r0, r1, #1
 8000a30:	3801      	subs	r0, #1
 8000a32:	e011      	b.n	8000a58 <__lesf2+0x58>
 8000a34:	2d00      	cmp	r5, #0
 8000a36:	d10e      	bne.n	8000a56 <__lesf2+0x56>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d101      	bne.n	8000a40 <__lesf2+0x40>
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d0f6      	beq.n	8000a2e <__lesf2+0x2e>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d10c      	bne.n	8000a5e <__lesf2+0x5e>
 8000a44:	0058      	lsls	r0, r3, #1
 8000a46:	3801      	subs	r0, #1
 8000a48:	e006      	b.n	8000a58 <__lesf2+0x58>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d103      	bne.n	8000a56 <__lesf2+0x56>
 8000a4e:	28ff      	cmp	r0, #255	@ 0xff
 8000a50:	d105      	bne.n	8000a5e <__lesf2+0x5e>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d015      	beq.n	8000a82 <__lesf2+0x82>
 8000a56:	2002      	movs	r0, #2
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d106      	bne.n	8000a6c <__lesf2+0x6c>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	425b      	negs	r3, r3
 8000a62:	4318      	orrs	r0, r3
 8000a64:	e7f8      	b.n	8000a58 <__lesf2+0x58>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d0f6      	beq.n	8000a58 <__lesf2+0x58>
 8000a6a:	e7f8      	b.n	8000a5e <__lesf2+0x5e>
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d1f6      	bne.n	8000a5e <__lesf2+0x5e>
 8000a70:	4282      	cmp	r2, r0
 8000a72:	dcf4      	bgt.n	8000a5e <__lesf2+0x5e>
 8000a74:	dbe6      	blt.n	8000a44 <__lesf2+0x44>
 8000a76:	42ac      	cmp	r4, r5
 8000a78:	d8f1      	bhi.n	8000a5e <__lesf2+0x5e>
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	42ac      	cmp	r4, r5
 8000a7e:	d2eb      	bcs.n	8000a58 <__lesf2+0x58>
 8000a80:	e7e0      	b.n	8000a44 <__lesf2+0x44>
 8000a82:	2000      	movs	r0, #0
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1ea      	bne.n	8000a5e <__lesf2+0x5e>
 8000a88:	e7e6      	b.n	8000a58 <__lesf2+0x58>
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d1e7      	bne.n	8000a5e <__lesf2+0x5e>
 8000a8e:	e7f2      	b.n	8000a76 <__lesf2+0x76>

08000a90 <__aeabi_ui2f>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	1e04      	subs	r4, r0, #0
 8000a94:	d00d      	beq.n	8000ab2 <__aeabi_ui2f+0x22>
 8000a96:	f002 f829 	bl	8002aec <__clzsi2>
 8000a9a:	239e      	movs	r3, #158	@ 0x9e
 8000a9c:	1a1b      	subs	r3, r3, r0
 8000a9e:	2b96      	cmp	r3, #150	@ 0x96
 8000aa0:	dc0c      	bgt.n	8000abc <__aeabi_ui2f+0x2c>
 8000aa2:	2808      	cmp	r0, #8
 8000aa4:	d034      	beq.n	8000b10 <__aeabi_ui2f+0x80>
 8000aa6:	3808      	subs	r0, #8
 8000aa8:	4084      	lsls	r4, r0
 8000aaa:	0264      	lsls	r4, r4, #9
 8000aac:	0a64      	lsrs	r4, r4, #9
 8000aae:	b2d8      	uxtb	r0, r3
 8000ab0:	e001      	b.n	8000ab6 <__aeabi_ui2f+0x26>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	05c0      	lsls	r0, r0, #23
 8000ab8:	4320      	orrs	r0, r4
 8000aba:	bd10      	pop	{r4, pc}
 8000abc:	2b99      	cmp	r3, #153	@ 0x99
 8000abe:	dc13      	bgt.n	8000ae8 <__aeabi_ui2f+0x58>
 8000ac0:	1f42      	subs	r2, r0, #5
 8000ac2:	4094      	lsls	r4, r2
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <__aeabi_ui2f+0x88>)
 8000ac6:	4022      	ands	r2, r4
 8000ac8:	0761      	lsls	r1, r4, #29
 8000aca:	d01c      	beq.n	8000b06 <__aeabi_ui2f+0x76>
 8000acc:	210f      	movs	r1, #15
 8000ace:	4021      	ands	r1, r4
 8000ad0:	2904      	cmp	r1, #4
 8000ad2:	d018      	beq.n	8000b06 <__aeabi_ui2f+0x76>
 8000ad4:	3204      	adds	r2, #4
 8000ad6:	08d4      	lsrs	r4, r2, #3
 8000ad8:	0152      	lsls	r2, r2, #5
 8000ada:	d515      	bpl.n	8000b08 <__aeabi_ui2f+0x78>
 8000adc:	239f      	movs	r3, #159	@ 0x9f
 8000ade:	0264      	lsls	r4, r4, #9
 8000ae0:	1a18      	subs	r0, r3, r0
 8000ae2:	0a64      	lsrs	r4, r4, #9
 8000ae4:	b2c0      	uxtb	r0, r0
 8000ae6:	e7e6      	b.n	8000ab6 <__aeabi_ui2f+0x26>
 8000ae8:	0002      	movs	r2, r0
 8000aea:	0021      	movs	r1, r4
 8000aec:	321b      	adds	r2, #27
 8000aee:	4091      	lsls	r1, r2
 8000af0:	000a      	movs	r2, r1
 8000af2:	1e51      	subs	r1, r2, #1
 8000af4:	418a      	sbcs	r2, r1
 8000af6:	2105      	movs	r1, #5
 8000af8:	1a09      	subs	r1, r1, r0
 8000afa:	40cc      	lsrs	r4, r1
 8000afc:	4314      	orrs	r4, r2
 8000afe:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <__aeabi_ui2f+0x88>)
 8000b00:	4022      	ands	r2, r4
 8000b02:	0761      	lsls	r1, r4, #29
 8000b04:	d1e2      	bne.n	8000acc <__aeabi_ui2f+0x3c>
 8000b06:	08d4      	lsrs	r4, r2, #3
 8000b08:	0264      	lsls	r4, r4, #9
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	e7d2      	b.n	8000ab6 <__aeabi_ui2f+0x26>
 8000b10:	0264      	lsls	r4, r4, #9
 8000b12:	0a64      	lsrs	r4, r4, #9
 8000b14:	308e      	adds	r0, #142	@ 0x8e
 8000b16:	e7ce      	b.n	8000ab6 <__aeabi_ui2f+0x26>
 8000b18:	fbffffff 	.word	0xfbffffff

08000b1c <__aeabi_dadd>:
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	464f      	mov	r7, r9
 8000b20:	4646      	mov	r6, r8
 8000b22:	46d6      	mov	lr, sl
 8000b24:	b5c0      	push	{r6, r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	9000      	str	r0, [sp, #0]
 8000b2a:	9101      	str	r1, [sp, #4]
 8000b2c:	030e      	lsls	r6, r1, #12
 8000b2e:	004c      	lsls	r4, r1, #1
 8000b30:	0fcd      	lsrs	r5, r1, #31
 8000b32:	0a71      	lsrs	r1, r6, #9
 8000b34:	9e00      	ldr	r6, [sp, #0]
 8000b36:	005f      	lsls	r7, r3, #1
 8000b38:	0f76      	lsrs	r6, r6, #29
 8000b3a:	430e      	orrs	r6, r1
 8000b3c:	9900      	ldr	r1, [sp, #0]
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	00c9      	lsls	r1, r1, #3
 8000b44:	4689      	mov	r9, r1
 8000b46:	0319      	lsls	r1, r3, #12
 8000b48:	0d7b      	lsrs	r3, r7, #21
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	9b01      	ldr	r3, [sp, #4]
 8000b4e:	0a49      	lsrs	r1, r1, #9
 8000b50:	0fdb      	lsrs	r3, r3, #31
 8000b52:	469c      	mov	ip, r3
 8000b54:	9b00      	ldr	r3, [sp, #0]
 8000b56:	9a00      	ldr	r2, [sp, #0]
 8000b58:	0f5b      	lsrs	r3, r3, #29
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	4641      	mov	r1, r8
 8000b5e:	0d64      	lsrs	r4, r4, #21
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	1a61      	subs	r1, r4, r1
 8000b64:	4565      	cmp	r5, ip
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x4e>
 8000b68:	e0a6      	b.n	8000cb8 <__aeabi_dadd+0x19c>
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	dd72      	ble.n	8000c54 <__aeabi_dadd+0x138>
 8000b6e:	4647      	mov	r7, r8
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x5a>
 8000b74:	e0dd      	b.n	8000d32 <__aeabi_dadd+0x216>
 8000b76:	4fcc      	ldr	r7, [pc, #816]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000b78:	42bc      	cmp	r4, r7
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x62>
 8000b7c:	e19a      	b.n	8000eb4 <__aeabi_dadd+0x398>
 8000b7e:	2701      	movs	r7, #1
 8000b80:	2938      	cmp	r1, #56	@ 0x38
 8000b82:	dc17      	bgt.n	8000bb4 <__aeabi_dadd+0x98>
 8000b84:	2780      	movs	r7, #128	@ 0x80
 8000b86:	043f      	lsls	r7, r7, #16
 8000b88:	433b      	orrs	r3, r7
 8000b8a:	291f      	cmp	r1, #31
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_dadd+0x74>
 8000b8e:	e1dd      	b.n	8000f4c <__aeabi_dadd+0x430>
 8000b90:	2720      	movs	r7, #32
 8000b92:	1a78      	subs	r0, r7, r1
 8000b94:	001f      	movs	r7, r3
 8000b96:	4087      	lsls	r7, r0
 8000b98:	46ba      	mov	sl, r7
 8000b9a:	0017      	movs	r7, r2
 8000b9c:	40cf      	lsrs	r7, r1
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	4657      	mov	r7, sl
 8000ba4:	4307      	orrs	r7, r0
 8000ba6:	4660      	mov	r0, ip
 8000ba8:	4082      	lsls	r2, r0
 8000baa:	40cb      	lsrs	r3, r1
 8000bac:	1e50      	subs	r0, r2, #1
 8000bae:	4182      	sbcs	r2, r0
 8000bb0:	1af6      	subs	r6, r6, r3
 8000bb2:	4317      	orrs	r7, r2
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	1bdf      	subs	r7, r3, r7
 8000bb8:	45b9      	cmp	r9, r7
 8000bba:	4180      	sbcs	r0, r0
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	1a36      	subs	r6, r6, r0
 8000bc0:	0233      	lsls	r3, r6, #8
 8000bc2:	d400      	bmi.n	8000bc6 <__aeabi_dadd+0xaa>
 8000bc4:	e0ff      	b.n	8000dc6 <__aeabi_dadd+0x2aa>
 8000bc6:	0276      	lsls	r6, r6, #9
 8000bc8:	0a76      	lsrs	r6, r6, #9
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0xb4>
 8000bce:	e13c      	b.n	8000e4a <__aeabi_dadd+0x32e>
 8000bd0:	0030      	movs	r0, r6
 8000bd2:	f001 ff8b 	bl	8002aec <__clzsi2>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	2120      	movs	r1, #32
 8000bdc:	0038      	movs	r0, r7
 8000bde:	1aca      	subs	r2, r1, r3
 8000be0:	40d0      	lsrs	r0, r2
 8000be2:	409e      	lsls	r6, r3
 8000be4:	0002      	movs	r2, r0
 8000be6:	409f      	lsls	r7, r3
 8000be8:	4332      	orrs	r2, r6
 8000bea:	429c      	cmp	r4, r3
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_dadd+0xd4>
 8000bee:	e1a6      	b.n	8000f3e <__aeabi_dadd+0x422>
 8000bf0:	1b18      	subs	r0, r3, r4
 8000bf2:	3001      	adds	r0, #1
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	003e      	movs	r6, r7
 8000bf8:	408f      	lsls	r7, r1
 8000bfa:	40c6      	lsrs	r6, r0
 8000bfc:	1e7b      	subs	r3, r7, #1
 8000bfe:	419f      	sbcs	r7, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	408b      	lsls	r3, r1
 8000c04:	4337      	orrs	r7, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	40c2      	lsrs	r2, r0
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0016      	movs	r6, r2
 8000c0e:	2400      	movs	r4, #0
 8000c10:	4313      	orrs	r3, r2
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0xfa>
 8000c14:	e1df      	b.n	8000fd6 <__aeabi_dadd+0x4ba>
 8000c16:	077b      	lsls	r3, r7, #29
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x100>
 8000c1a:	e332      	b.n	8001282 <__aeabi_dadd+0x766>
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	003a      	movs	r2, r7
 8000c20:	403b      	ands	r3, r7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d004      	beq.n	8000c30 <__aeabi_dadd+0x114>
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	42ba      	cmp	r2, r7
 8000c2a:	41bf      	sbcs	r7, r7
 8000c2c:	427f      	negs	r7, r7
 8000c2e:	19f6      	adds	r6, r6, r7
 8000c30:	0233      	lsls	r3, r6, #8
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_dadd+0x11a>
 8000c34:	e323      	b.n	800127e <__aeabi_dadd+0x762>
 8000c36:	4b9c      	ldr	r3, [pc, #624]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000c38:	3401      	adds	r4, #1
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x124>
 8000c3e:	e0b4      	b.n	8000daa <__aeabi_dadd+0x28e>
 8000c40:	4b9a      	ldr	r3, [pc, #616]	@ (8000eac <__aeabi_dadd+0x390>)
 8000c42:	0564      	lsls	r4, r4, #21
 8000c44:	401e      	ands	r6, r3
 8000c46:	0d64      	lsrs	r4, r4, #21
 8000c48:	0777      	lsls	r7, r6, #29
 8000c4a:	08d2      	lsrs	r2, r2, #3
 8000c4c:	0276      	lsls	r6, r6, #9
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	0b36      	lsrs	r6, r6, #12
 8000c52:	e0ac      	b.n	8000dae <__aeabi_dadd+0x292>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x13e>
 8000c58:	e07e      	b.n	8000d58 <__aeabi_dadd+0x23c>
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	1b09      	subs	r1, r1, r4
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d000      	beq.n	8000c64 <__aeabi_dadd+0x148>
 8000c62:	e160      	b.n	8000f26 <__aeabi_dadd+0x40a>
 8000c64:	0034      	movs	r4, r6
 8000c66:	4648      	mov	r0, r9
 8000c68:	4304      	orrs	r4, r0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x152>
 8000c6c:	e1c9      	b.n	8001002 <__aeabi_dadd+0x4e6>
 8000c6e:	1e4c      	subs	r4, r1, #1
 8000c70:	2901      	cmp	r1, #1
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x15a>
 8000c74:	e22e      	b.n	80010d4 <__aeabi_dadd+0x5b8>
 8000c76:	4d8c      	ldr	r5, [pc, #560]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000c78:	42a9      	cmp	r1, r5
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x162>
 8000c7c:	e224      	b.n	80010c8 <__aeabi_dadd+0x5ac>
 8000c7e:	2701      	movs	r7, #1
 8000c80:	2c38      	cmp	r4, #56	@ 0x38
 8000c82:	dc11      	bgt.n	8000ca8 <__aeabi_dadd+0x18c>
 8000c84:	0021      	movs	r1, r4
 8000c86:	291f      	cmp	r1, #31
 8000c88:	dd00      	ble.n	8000c8c <__aeabi_dadd+0x170>
 8000c8a:	e20b      	b.n	80010a4 <__aeabi_dadd+0x588>
 8000c8c:	2420      	movs	r4, #32
 8000c8e:	0037      	movs	r7, r6
 8000c90:	4648      	mov	r0, r9
 8000c92:	1a64      	subs	r4, r4, r1
 8000c94:	40a7      	lsls	r7, r4
 8000c96:	40c8      	lsrs	r0, r1
 8000c98:	4307      	orrs	r7, r0
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	40a0      	lsls	r0, r4
 8000c9e:	40ce      	lsrs	r6, r1
 8000ca0:	1e44      	subs	r4, r0, #1
 8000ca2:	41a0      	sbcs	r0, r4
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	4307      	orrs	r7, r0
 8000ca8:	1bd7      	subs	r7, r2, r7
 8000caa:	42ba      	cmp	r2, r7
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	4252      	negs	r2, r2
 8000cb0:	4665      	mov	r5, ip
 8000cb2:	4644      	mov	r4, r8
 8000cb4:	1a9e      	subs	r6, r3, r2
 8000cb6:	e783      	b.n	8000bc0 <__aeabi_dadd+0xa4>
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	dc00      	bgt.n	8000cbe <__aeabi_dadd+0x1a2>
 8000cbc:	e09c      	b.n	8000df8 <__aeabi_dadd+0x2dc>
 8000cbe:	4647      	mov	r7, r8
 8000cc0:	2f00      	cmp	r7, #0
 8000cc2:	d167      	bne.n	8000d94 <__aeabi_dadd+0x278>
 8000cc4:	001f      	movs	r7, r3
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0x1b0>
 8000cca:	e0e4      	b.n	8000e96 <__aeabi_dadd+0x37a>
 8000ccc:	1e48      	subs	r0, r1, #1
 8000cce:	2901      	cmp	r1, #1
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x1b8>
 8000cd2:	e19b      	b.n	800100c <__aeabi_dadd+0x4f0>
 8000cd4:	4f74      	ldr	r7, [pc, #464]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000cd6:	42b9      	cmp	r1, r7
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x1c0>
 8000cda:	e0eb      	b.n	8000eb4 <__aeabi_dadd+0x398>
 8000cdc:	2701      	movs	r7, #1
 8000cde:	0001      	movs	r1, r0
 8000ce0:	2838      	cmp	r0, #56	@ 0x38
 8000ce2:	dc11      	bgt.n	8000d08 <__aeabi_dadd+0x1ec>
 8000ce4:	291f      	cmp	r1, #31
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_dadd+0x1ce>
 8000ce8:	e1c7      	b.n	800107a <__aeabi_dadd+0x55e>
 8000cea:	2720      	movs	r7, #32
 8000cec:	1a78      	subs	r0, r7, r1
 8000cee:	001f      	movs	r7, r3
 8000cf0:	4684      	mov	ip, r0
 8000cf2:	4087      	lsls	r7, r0
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	40c8      	lsrs	r0, r1
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	4082      	lsls	r2, r0
 8000cfe:	40cb      	lsrs	r3, r1
 8000d00:	1e50      	subs	r0, r2, #1
 8000d02:	4182      	sbcs	r2, r0
 8000d04:	18f6      	adds	r6, r6, r3
 8000d06:	4317      	orrs	r7, r2
 8000d08:	444f      	add	r7, r9
 8000d0a:	454f      	cmp	r7, r9
 8000d0c:	4180      	sbcs	r0, r0
 8000d0e:	4240      	negs	r0, r0
 8000d10:	1836      	adds	r6, r6, r0
 8000d12:	0233      	lsls	r3, r6, #8
 8000d14:	d557      	bpl.n	8000dc6 <__aeabi_dadd+0x2aa>
 8000d16:	4b64      	ldr	r3, [pc, #400]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000d18:	3401      	adds	r4, #1
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d045      	beq.n	8000daa <__aeabi_dadd+0x28e>
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4b62      	ldr	r3, [pc, #392]	@ (8000eac <__aeabi_dadd+0x390>)
 8000d22:	087a      	lsrs	r2, r7, #1
 8000d24:	401e      	ands	r6, r3
 8000d26:	4039      	ands	r1, r7
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	07f7      	lsls	r7, r6, #31
 8000d2c:	4317      	orrs	r7, r2
 8000d2e:	0876      	lsrs	r6, r6, #1
 8000d30:	e771      	b.n	8000c16 <__aeabi_dadd+0xfa>
 8000d32:	001f      	movs	r7, r3
 8000d34:	4317      	orrs	r7, r2
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x21e>
 8000d38:	e0ad      	b.n	8000e96 <__aeabi_dadd+0x37a>
 8000d3a:	1e4f      	subs	r7, r1, #1
 8000d3c:	46bc      	mov	ip, r7
 8000d3e:	2901      	cmp	r1, #1
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x228>
 8000d42:	e182      	b.n	800104a <__aeabi_dadd+0x52e>
 8000d44:	4f58      	ldr	r7, [pc, #352]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000d46:	42b9      	cmp	r1, r7
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dadd+0x230>
 8000d4a:	e190      	b.n	800106e <__aeabi_dadd+0x552>
 8000d4c:	4661      	mov	r1, ip
 8000d4e:	2701      	movs	r7, #1
 8000d50:	2938      	cmp	r1, #56	@ 0x38
 8000d52:	dd00      	ble.n	8000d56 <__aeabi_dadd+0x23a>
 8000d54:	e72e      	b.n	8000bb4 <__aeabi_dadd+0x98>
 8000d56:	e718      	b.n	8000b8a <__aeabi_dadd+0x6e>
 8000d58:	4f55      	ldr	r7, [pc, #340]	@ (8000eb0 <__aeabi_dadd+0x394>)
 8000d5a:	1c61      	adds	r1, r4, #1
 8000d5c:	4239      	tst	r1, r7
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dadd+0x246>
 8000d60:	e0d0      	b.n	8000f04 <__aeabi_dadd+0x3e8>
 8000d62:	0031      	movs	r1, r6
 8000d64:	4648      	mov	r0, r9
 8000d66:	001f      	movs	r7, r3
 8000d68:	4301      	orrs	r1, r0
 8000d6a:	4317      	orrs	r7, r2
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_dadd+0x256>
 8000d70:	e13d      	b.n	8000fee <__aeabi_dadd+0x4d2>
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x25c>
 8000d76:	e1bc      	b.n	80010f2 <__aeabi_dadd+0x5d6>
 8000d78:	2f00      	cmp	r7, #0
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_dadd+0x262>
 8000d7c:	e1bf      	b.n	80010fe <__aeabi_dadd+0x5e2>
 8000d7e:	464b      	mov	r3, r9
 8000d80:	2100      	movs	r1, #0
 8000d82:	08d8      	lsrs	r0, r3, #3
 8000d84:	0777      	lsls	r7, r6, #29
 8000d86:	4307      	orrs	r7, r0
 8000d88:	08f0      	lsrs	r0, r6, #3
 8000d8a:	0306      	lsls	r6, r0, #12
 8000d8c:	054c      	lsls	r4, r1, #21
 8000d8e:	0b36      	lsrs	r6, r6, #12
 8000d90:	0d64      	lsrs	r4, r4, #21
 8000d92:	e00c      	b.n	8000dae <__aeabi_dadd+0x292>
 8000d94:	4f44      	ldr	r7, [pc, #272]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000d96:	42bc      	cmp	r4, r7
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x280>
 8000d9a:	e08b      	b.n	8000eb4 <__aeabi_dadd+0x398>
 8000d9c:	2701      	movs	r7, #1
 8000d9e:	2938      	cmp	r1, #56	@ 0x38
 8000da0:	dcb2      	bgt.n	8000d08 <__aeabi_dadd+0x1ec>
 8000da2:	2780      	movs	r7, #128	@ 0x80
 8000da4:	043f      	lsls	r7, r7, #16
 8000da6:	433b      	orrs	r3, r7
 8000da8:	e79c      	b.n	8000ce4 <__aeabi_dadd+0x1c8>
 8000daa:	2600      	movs	r6, #0
 8000dac:	2700      	movs	r7, #0
 8000dae:	0524      	lsls	r4, r4, #20
 8000db0:	4334      	orrs	r4, r6
 8000db2:	07ed      	lsls	r5, r5, #31
 8000db4:	432c      	orrs	r4, r5
 8000db6:	0038      	movs	r0, r7
 8000db8:	0021      	movs	r1, r4
 8000dba:	b002      	add	sp, #8
 8000dbc:	bce0      	pop	{r5, r6, r7}
 8000dbe:	46ba      	mov	sl, r7
 8000dc0:	46b1      	mov	r9, r6
 8000dc2:	46a8      	mov	r8, r5
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	077b      	lsls	r3, r7, #29
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_dadd+0x2b8>
 8000dca:	230f      	movs	r3, #15
 8000dcc:	403b      	ands	r3, r7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_dadd+0x2b8>
 8000dd2:	e728      	b.n	8000c26 <__aeabi_dadd+0x10a>
 8000dd4:	08f8      	lsrs	r0, r7, #3
 8000dd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000dd8:	0777      	lsls	r7, r6, #29
 8000dda:	4307      	orrs	r7, r0
 8000ddc:	08f0      	lsrs	r0, r6, #3
 8000dde:	429c      	cmp	r4, r3
 8000de0:	d000      	beq.n	8000de4 <__aeabi_dadd+0x2c8>
 8000de2:	e24a      	b.n	800127a <__aeabi_dadd+0x75e>
 8000de4:	003b      	movs	r3, r7
 8000de6:	4303      	orrs	r3, r0
 8000de8:	d059      	beq.n	8000e9e <__aeabi_dadd+0x382>
 8000dea:	2680      	movs	r6, #128	@ 0x80
 8000dec:	0336      	lsls	r6, r6, #12
 8000dee:	4306      	orrs	r6, r0
 8000df0:	0336      	lsls	r6, r6, #12
 8000df2:	4c2d      	ldr	r4, [pc, #180]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000df4:	0b36      	lsrs	r6, r6, #12
 8000df6:	e7da      	b.n	8000dae <__aeabi_dadd+0x292>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d061      	beq.n	8000ec0 <__aeabi_dadd+0x3a4>
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	1b09      	subs	r1, r1, r4
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x2ea>
 8000e04:	e0b9      	b.n	8000f7a <__aeabi_dadd+0x45e>
 8000e06:	4c28      	ldr	r4, [pc, #160]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x2f2>
 8000e0c:	e1a5      	b.n	800115a <__aeabi_dadd+0x63e>
 8000e0e:	2701      	movs	r7, #1
 8000e10:	2938      	cmp	r1, #56	@ 0x38
 8000e12:	dc13      	bgt.n	8000e3c <__aeabi_dadd+0x320>
 8000e14:	2480      	movs	r4, #128	@ 0x80
 8000e16:	0424      	lsls	r4, r4, #16
 8000e18:	4326      	orrs	r6, r4
 8000e1a:	291f      	cmp	r1, #31
 8000e1c:	dd00      	ble.n	8000e20 <__aeabi_dadd+0x304>
 8000e1e:	e1c8      	b.n	80011b2 <__aeabi_dadd+0x696>
 8000e20:	2420      	movs	r4, #32
 8000e22:	0037      	movs	r7, r6
 8000e24:	4648      	mov	r0, r9
 8000e26:	1a64      	subs	r4, r4, r1
 8000e28:	40a7      	lsls	r7, r4
 8000e2a:	40c8      	lsrs	r0, r1
 8000e2c:	4307      	orrs	r7, r0
 8000e2e:	4648      	mov	r0, r9
 8000e30:	40a0      	lsls	r0, r4
 8000e32:	40ce      	lsrs	r6, r1
 8000e34:	1e44      	subs	r4, r0, #1
 8000e36:	41a0      	sbcs	r0, r4
 8000e38:	199b      	adds	r3, r3, r6
 8000e3a:	4307      	orrs	r7, r0
 8000e3c:	18bf      	adds	r7, r7, r2
 8000e3e:	4297      	cmp	r7, r2
 8000e40:	4192      	sbcs	r2, r2
 8000e42:	4252      	negs	r2, r2
 8000e44:	4644      	mov	r4, r8
 8000e46:	18d6      	adds	r6, r2, r3
 8000e48:	e763      	b.n	8000d12 <__aeabi_dadd+0x1f6>
 8000e4a:	0038      	movs	r0, r7
 8000e4c:	f001 fe4e 	bl	8002aec <__clzsi2>
 8000e50:	0003      	movs	r3, r0
 8000e52:	3318      	adds	r3, #24
 8000e54:	2b1f      	cmp	r3, #31
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_dadd+0x33e>
 8000e58:	e6bf      	b.n	8000bda <__aeabi_dadd+0xbe>
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	3808      	subs	r0, #8
 8000e5e:	4082      	lsls	r2, r0
 8000e60:	429c      	cmp	r4, r3
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dadd+0x34a>
 8000e64:	e083      	b.n	8000f6e <__aeabi_dadd+0x452>
 8000e66:	1b1b      	subs	r3, r3, r4
 8000e68:	1c58      	adds	r0, r3, #1
 8000e6a:	281f      	cmp	r0, #31
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x354>
 8000e6e:	e1b4      	b.n	80011da <__aeabi_dadd+0x6be>
 8000e70:	0017      	movs	r7, r2
 8000e72:	3b1f      	subs	r3, #31
 8000e74:	40df      	lsrs	r7, r3
 8000e76:	2820      	cmp	r0, #32
 8000e78:	d005      	beq.n	8000e86 <__aeabi_dadd+0x36a>
 8000e7a:	2340      	movs	r3, #64	@ 0x40
 8000e7c:	1a1b      	subs	r3, r3, r0
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	1e53      	subs	r3, r2, #1
 8000e82:	419a      	sbcs	r2, r3
 8000e84:	4317      	orrs	r7, r2
 8000e86:	2400      	movs	r4, #0
 8000e88:	2f00      	cmp	r7, #0
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_dadd+0x386>
 8000e8c:	077b      	lsls	r3, r7, #29
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x376>
 8000e90:	e6c4      	b.n	8000c1c <__aeabi_dadd+0x100>
 8000e92:	0026      	movs	r6, r4
 8000e94:	e79e      	b.n	8000dd4 <__aeabi_dadd+0x2b8>
 8000e96:	464b      	mov	r3, r9
 8000e98:	000c      	movs	r4, r1
 8000e9a:	08d8      	lsrs	r0, r3, #3
 8000e9c:	e79b      	b.n	8000dd6 <__aeabi_dadd+0x2ba>
 8000e9e:	2700      	movs	r7, #0
 8000ea0:	4c01      	ldr	r4, [pc, #4]	@ (8000ea8 <__aeabi_dadd+0x38c>)
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	e783      	b.n	8000dae <__aeabi_dadd+0x292>
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	ff7fffff 	.word	0xff7fffff
 8000eb0:	000007fe 	.word	0x000007fe
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	0777      	lsls	r7, r6, #29
 8000eb8:	08d8      	lsrs	r0, r3, #3
 8000eba:	4307      	orrs	r7, r0
 8000ebc:	08f0      	lsrs	r0, r6, #3
 8000ebe:	e791      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 8000ec0:	4fcd      	ldr	r7, [pc, #820]	@ (80011f8 <__aeabi_dadd+0x6dc>)
 8000ec2:	1c61      	adds	r1, r4, #1
 8000ec4:	4239      	tst	r1, r7
 8000ec6:	d16b      	bne.n	8000fa0 <__aeabi_dadd+0x484>
 8000ec8:	0031      	movs	r1, r6
 8000eca:	4648      	mov	r0, r9
 8000ecc:	4301      	orrs	r1, r0
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dadd+0x3b8>
 8000ed2:	e14b      	b.n	800116c <__aeabi_dadd+0x650>
 8000ed4:	001f      	movs	r7, r3
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x3c2>
 8000edc:	e181      	b.n	80011e2 <__aeabi_dadd+0x6c6>
 8000ede:	2f00      	cmp	r7, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x3c8>
 8000ee2:	e74c      	b.n	8000d7e <__aeabi_dadd+0x262>
 8000ee4:	444a      	add	r2, r9
 8000ee6:	454a      	cmp	r2, r9
 8000ee8:	4180      	sbcs	r0, r0
 8000eea:	18f6      	adds	r6, r6, r3
 8000eec:	4240      	negs	r0, r0
 8000eee:	1836      	adds	r6, r6, r0
 8000ef0:	0233      	lsls	r3, r6, #8
 8000ef2:	d500      	bpl.n	8000ef6 <__aeabi_dadd+0x3da>
 8000ef4:	e1b0      	b.n	8001258 <__aeabi_dadd+0x73c>
 8000ef6:	0017      	movs	r7, r2
 8000ef8:	4691      	mov	r9, r2
 8000efa:	4337      	orrs	r7, r6
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dadd+0x3e4>
 8000efe:	e73e      	b.n	8000d7e <__aeabi_dadd+0x262>
 8000f00:	2600      	movs	r6, #0
 8000f02:	e754      	b.n	8000dae <__aeabi_dadd+0x292>
 8000f04:	4649      	mov	r1, r9
 8000f06:	1a89      	subs	r1, r1, r2
 8000f08:	4688      	mov	r8, r1
 8000f0a:	45c1      	cmp	r9, r8
 8000f0c:	41bf      	sbcs	r7, r7
 8000f0e:	1af1      	subs	r1, r6, r3
 8000f10:	427f      	negs	r7, r7
 8000f12:	1bc9      	subs	r1, r1, r7
 8000f14:	020f      	lsls	r7, r1, #8
 8000f16:	d461      	bmi.n	8000fdc <__aeabi_dadd+0x4c0>
 8000f18:	4647      	mov	r7, r8
 8000f1a:	430f      	orrs	r7, r1
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x404>
 8000f1e:	e0bd      	b.n	800109c <__aeabi_dadd+0x580>
 8000f20:	000e      	movs	r6, r1
 8000f22:	4647      	mov	r7, r8
 8000f24:	e651      	b.n	8000bca <__aeabi_dadd+0xae>
 8000f26:	4cb5      	ldr	r4, [pc, #724]	@ (80011fc <__aeabi_dadd+0x6e0>)
 8000f28:	45a0      	cmp	r8, r4
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x412>
 8000f2c:	e100      	b.n	8001130 <__aeabi_dadd+0x614>
 8000f2e:	2701      	movs	r7, #1
 8000f30:	2938      	cmp	r1, #56	@ 0x38
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dadd+0x41a>
 8000f34:	e6b8      	b.n	8000ca8 <__aeabi_dadd+0x18c>
 8000f36:	2480      	movs	r4, #128	@ 0x80
 8000f38:	0424      	lsls	r4, r4, #16
 8000f3a:	4326      	orrs	r6, r4
 8000f3c:	e6a3      	b.n	8000c86 <__aeabi_dadd+0x16a>
 8000f3e:	4eb0      	ldr	r6, [pc, #704]	@ (8001200 <__aeabi_dadd+0x6e4>)
 8000f40:	1ae4      	subs	r4, r4, r3
 8000f42:	4016      	ands	r6, r2
 8000f44:	077b      	lsls	r3, r7, #29
 8000f46:	d000      	beq.n	8000f4a <__aeabi_dadd+0x42e>
 8000f48:	e73f      	b.n	8000dca <__aeabi_dadd+0x2ae>
 8000f4a:	e743      	b.n	8000dd4 <__aeabi_dadd+0x2b8>
 8000f4c:	000f      	movs	r7, r1
 8000f4e:	0018      	movs	r0, r3
 8000f50:	3f20      	subs	r7, #32
 8000f52:	40f8      	lsrs	r0, r7
 8000f54:	4684      	mov	ip, r0
 8000f56:	2920      	cmp	r1, #32
 8000f58:	d003      	beq.n	8000f62 <__aeabi_dadd+0x446>
 8000f5a:	2740      	movs	r7, #64	@ 0x40
 8000f5c:	1a79      	subs	r1, r7, r1
 8000f5e:	408b      	lsls	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	1e53      	subs	r3, r2, #1
 8000f64:	419a      	sbcs	r2, r3
 8000f66:	4663      	mov	r3, ip
 8000f68:	0017      	movs	r7, r2
 8000f6a:	431f      	orrs	r7, r3
 8000f6c:	e622      	b.n	8000bb4 <__aeabi_dadd+0x98>
 8000f6e:	48a4      	ldr	r0, [pc, #656]	@ (8001200 <__aeabi_dadd+0x6e4>)
 8000f70:	1ae1      	subs	r1, r4, r3
 8000f72:	4010      	ands	r0, r2
 8000f74:	0747      	lsls	r7, r0, #29
 8000f76:	08c0      	lsrs	r0, r0, #3
 8000f78:	e707      	b.n	8000d8a <__aeabi_dadd+0x26e>
 8000f7a:	0034      	movs	r4, r6
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	4304      	orrs	r4, r0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x468>
 8000f82:	e0fa      	b.n	800117a <__aeabi_dadd+0x65e>
 8000f84:	1e4c      	subs	r4, r1, #1
 8000f86:	2901      	cmp	r1, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dadd+0x470>
 8000f8a:	e0d7      	b.n	800113c <__aeabi_dadd+0x620>
 8000f8c:	4f9b      	ldr	r7, [pc, #620]	@ (80011fc <__aeabi_dadd+0x6e0>)
 8000f8e:	42b9      	cmp	r1, r7
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x478>
 8000f92:	e0e2      	b.n	800115a <__aeabi_dadd+0x63e>
 8000f94:	2701      	movs	r7, #1
 8000f96:	2c38      	cmp	r4, #56	@ 0x38
 8000f98:	dd00      	ble.n	8000f9c <__aeabi_dadd+0x480>
 8000f9a:	e74f      	b.n	8000e3c <__aeabi_dadd+0x320>
 8000f9c:	0021      	movs	r1, r4
 8000f9e:	e73c      	b.n	8000e1a <__aeabi_dadd+0x2fe>
 8000fa0:	4c96      	ldr	r4, [pc, #600]	@ (80011fc <__aeabi_dadd+0x6e0>)
 8000fa2:	42a1      	cmp	r1, r4
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_dadd+0x48c>
 8000fa6:	e0dd      	b.n	8001164 <__aeabi_dadd+0x648>
 8000fa8:	444a      	add	r2, r9
 8000faa:	454a      	cmp	r2, r9
 8000fac:	4180      	sbcs	r0, r0
 8000fae:	18f3      	adds	r3, r6, r3
 8000fb0:	4240      	negs	r0, r0
 8000fb2:	1818      	adds	r0, r3, r0
 8000fb4:	07c7      	lsls	r7, r0, #31
 8000fb6:	0852      	lsrs	r2, r2, #1
 8000fb8:	4317      	orrs	r7, r2
 8000fba:	0846      	lsrs	r6, r0, #1
 8000fbc:	0752      	lsls	r2, r2, #29
 8000fbe:	d005      	beq.n	8000fcc <__aeabi_dadd+0x4b0>
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	403a      	ands	r2, r7
 8000fc6:	2a04      	cmp	r2, #4
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dadd+0x4b0>
 8000fca:	e62c      	b.n	8000c26 <__aeabi_dadd+0x10a>
 8000fcc:	0776      	lsls	r6, r6, #29
 8000fce:	08ff      	lsrs	r7, r7, #3
 8000fd0:	4337      	orrs	r7, r6
 8000fd2:	0900      	lsrs	r0, r0, #4
 8000fd4:	e6d9      	b.n	8000d8a <__aeabi_dadd+0x26e>
 8000fd6:	2700      	movs	r7, #0
 8000fd8:	2600      	movs	r6, #0
 8000fda:	e6e8      	b.n	8000dae <__aeabi_dadd+0x292>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	1a57      	subs	r7, r2, r1
 8000fe0:	42ba      	cmp	r2, r7
 8000fe2:	4192      	sbcs	r2, r2
 8000fe4:	1b9e      	subs	r6, r3, r6
 8000fe6:	4252      	negs	r2, r2
 8000fe8:	4665      	mov	r5, ip
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	e5ed      	b.n	8000bca <__aeabi_dadd+0xae>
 8000fee:	2900      	cmp	r1, #0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_dadd+0x4d8>
 8000ff2:	e0c6      	b.n	8001182 <__aeabi_dadd+0x666>
 8000ff4:	2f00      	cmp	r7, #0
 8000ff6:	d167      	bne.n	80010c8 <__aeabi_dadd+0x5ac>
 8000ff8:	2680      	movs	r6, #128	@ 0x80
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4c7f      	ldr	r4, [pc, #508]	@ (80011fc <__aeabi_dadd+0x6e0>)
 8000ffe:	0336      	lsls	r6, r6, #12
 8001000:	e6d5      	b.n	8000dae <__aeabi_dadd+0x292>
 8001002:	4665      	mov	r5, ip
 8001004:	000c      	movs	r4, r1
 8001006:	001e      	movs	r6, r3
 8001008:	08d0      	lsrs	r0, r2, #3
 800100a:	e6e4      	b.n	8000dd6 <__aeabi_dadd+0x2ba>
 800100c:	444a      	add	r2, r9
 800100e:	454a      	cmp	r2, r9
 8001010:	4180      	sbcs	r0, r0
 8001012:	18f3      	adds	r3, r6, r3
 8001014:	4240      	negs	r0, r0
 8001016:	1818      	adds	r0, r3, r0
 8001018:	0011      	movs	r1, r2
 800101a:	0203      	lsls	r3, r0, #8
 800101c:	d400      	bmi.n	8001020 <__aeabi_dadd+0x504>
 800101e:	e096      	b.n	800114e <__aeabi_dadd+0x632>
 8001020:	4b77      	ldr	r3, [pc, #476]	@ (8001200 <__aeabi_dadd+0x6e4>)
 8001022:	0849      	lsrs	r1, r1, #1
 8001024:	4018      	ands	r0, r3
 8001026:	07c3      	lsls	r3, r0, #31
 8001028:	430b      	orrs	r3, r1
 800102a:	0844      	lsrs	r4, r0, #1
 800102c:	0749      	lsls	r1, r1, #29
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x516>
 8001030:	e129      	b.n	8001286 <__aeabi_dadd+0x76a>
 8001032:	220f      	movs	r2, #15
 8001034:	401a      	ands	r2, r3
 8001036:	2a04      	cmp	r2, #4
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x520>
 800103a:	e0ea      	b.n	8001212 <__aeabi_dadd+0x6f6>
 800103c:	1d1f      	adds	r7, r3, #4
 800103e:	429f      	cmp	r7, r3
 8001040:	41b6      	sbcs	r6, r6
 8001042:	4276      	negs	r6, r6
 8001044:	1936      	adds	r6, r6, r4
 8001046:	2402      	movs	r4, #2
 8001048:	e6c4      	b.n	8000dd4 <__aeabi_dadd+0x2b8>
 800104a:	4649      	mov	r1, r9
 800104c:	1a8f      	subs	r7, r1, r2
 800104e:	45b9      	cmp	r9, r7
 8001050:	4180      	sbcs	r0, r0
 8001052:	1af6      	subs	r6, r6, r3
 8001054:	4240      	negs	r0, r0
 8001056:	1a36      	subs	r6, r6, r0
 8001058:	0233      	lsls	r3, r6, #8
 800105a:	d406      	bmi.n	800106a <__aeabi_dadd+0x54e>
 800105c:	0773      	lsls	r3, r6, #29
 800105e:	08ff      	lsrs	r7, r7, #3
 8001060:	2101      	movs	r1, #1
 8001062:	431f      	orrs	r7, r3
 8001064:	08f0      	lsrs	r0, r6, #3
 8001066:	e690      	b.n	8000d8a <__aeabi_dadd+0x26e>
 8001068:	4665      	mov	r5, ip
 800106a:	2401      	movs	r4, #1
 800106c:	e5ab      	b.n	8000bc6 <__aeabi_dadd+0xaa>
 800106e:	464b      	mov	r3, r9
 8001070:	0777      	lsls	r7, r6, #29
 8001072:	08d8      	lsrs	r0, r3, #3
 8001074:	4307      	orrs	r7, r0
 8001076:	08f0      	lsrs	r0, r6, #3
 8001078:	e6b4      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 800107a:	000f      	movs	r7, r1
 800107c:	0018      	movs	r0, r3
 800107e:	3f20      	subs	r7, #32
 8001080:	40f8      	lsrs	r0, r7
 8001082:	4684      	mov	ip, r0
 8001084:	2920      	cmp	r1, #32
 8001086:	d003      	beq.n	8001090 <__aeabi_dadd+0x574>
 8001088:	2740      	movs	r7, #64	@ 0x40
 800108a:	1a79      	subs	r1, r7, r1
 800108c:	408b      	lsls	r3, r1
 800108e:	431a      	orrs	r2, r3
 8001090:	1e53      	subs	r3, r2, #1
 8001092:	419a      	sbcs	r2, r3
 8001094:	4663      	mov	r3, ip
 8001096:	0017      	movs	r7, r2
 8001098:	431f      	orrs	r7, r3
 800109a:	e635      	b.n	8000d08 <__aeabi_dadd+0x1ec>
 800109c:	2500      	movs	r5, #0
 800109e:	2400      	movs	r4, #0
 80010a0:	2600      	movs	r6, #0
 80010a2:	e684      	b.n	8000dae <__aeabi_dadd+0x292>
 80010a4:	000c      	movs	r4, r1
 80010a6:	0035      	movs	r5, r6
 80010a8:	3c20      	subs	r4, #32
 80010aa:	40e5      	lsrs	r5, r4
 80010ac:	2920      	cmp	r1, #32
 80010ae:	d005      	beq.n	80010bc <__aeabi_dadd+0x5a0>
 80010b0:	2440      	movs	r4, #64	@ 0x40
 80010b2:	1a61      	subs	r1, r4, r1
 80010b4:	408e      	lsls	r6, r1
 80010b6:	4649      	mov	r1, r9
 80010b8:	4331      	orrs	r1, r6
 80010ba:	4689      	mov	r9, r1
 80010bc:	4648      	mov	r0, r9
 80010be:	1e41      	subs	r1, r0, #1
 80010c0:	4188      	sbcs	r0, r1
 80010c2:	0007      	movs	r7, r0
 80010c4:	432f      	orrs	r7, r5
 80010c6:	e5ef      	b.n	8000ca8 <__aeabi_dadd+0x18c>
 80010c8:	08d2      	lsrs	r2, r2, #3
 80010ca:	075f      	lsls	r7, r3, #29
 80010cc:	4665      	mov	r5, ip
 80010ce:	4317      	orrs	r7, r2
 80010d0:	08d8      	lsrs	r0, r3, #3
 80010d2:	e687      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 80010d4:	1a17      	subs	r7, r2, r0
 80010d6:	42ba      	cmp	r2, r7
 80010d8:	4192      	sbcs	r2, r2
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	4252      	negs	r2, r2
 80010de:	1ab6      	subs	r6, r6, r2
 80010e0:	0233      	lsls	r3, r6, #8
 80010e2:	d4c1      	bmi.n	8001068 <__aeabi_dadd+0x54c>
 80010e4:	0773      	lsls	r3, r6, #29
 80010e6:	08ff      	lsrs	r7, r7, #3
 80010e8:	4665      	mov	r5, ip
 80010ea:	2101      	movs	r1, #1
 80010ec:	431f      	orrs	r7, r3
 80010ee:	08f0      	lsrs	r0, r6, #3
 80010f0:	e64b      	b.n	8000d8a <__aeabi_dadd+0x26e>
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	d07b      	beq.n	80011ee <__aeabi_dadd+0x6d2>
 80010f6:	4665      	mov	r5, ip
 80010f8:	001e      	movs	r6, r3
 80010fa:	4691      	mov	r9, r2
 80010fc:	e63f      	b.n	8000d7e <__aeabi_dadd+0x262>
 80010fe:	1a81      	subs	r1, r0, r2
 8001100:	4688      	mov	r8, r1
 8001102:	45c1      	cmp	r9, r8
 8001104:	41a4      	sbcs	r4, r4
 8001106:	1af1      	subs	r1, r6, r3
 8001108:	4264      	negs	r4, r4
 800110a:	1b09      	subs	r1, r1, r4
 800110c:	2480      	movs	r4, #128	@ 0x80
 800110e:	0424      	lsls	r4, r4, #16
 8001110:	4221      	tst	r1, r4
 8001112:	d077      	beq.n	8001204 <__aeabi_dadd+0x6e8>
 8001114:	1a10      	subs	r0, r2, r0
 8001116:	4282      	cmp	r2, r0
 8001118:	4192      	sbcs	r2, r2
 800111a:	0007      	movs	r7, r0
 800111c:	1b9e      	subs	r6, r3, r6
 800111e:	4252      	negs	r2, r2
 8001120:	1ab6      	subs	r6, r6, r2
 8001122:	4337      	orrs	r7, r6
 8001124:	d000      	beq.n	8001128 <__aeabi_dadd+0x60c>
 8001126:	e0a0      	b.n	800126a <__aeabi_dadd+0x74e>
 8001128:	4665      	mov	r5, ip
 800112a:	2400      	movs	r4, #0
 800112c:	2600      	movs	r6, #0
 800112e:	e63e      	b.n	8000dae <__aeabi_dadd+0x292>
 8001130:	075f      	lsls	r7, r3, #29
 8001132:	08d2      	lsrs	r2, r2, #3
 8001134:	4665      	mov	r5, ip
 8001136:	4317      	orrs	r7, r2
 8001138:	08d8      	lsrs	r0, r3, #3
 800113a:	e653      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 800113c:	1881      	adds	r1, r0, r2
 800113e:	4291      	cmp	r1, r2
 8001140:	4192      	sbcs	r2, r2
 8001142:	18f0      	adds	r0, r6, r3
 8001144:	4252      	negs	r2, r2
 8001146:	1880      	adds	r0, r0, r2
 8001148:	0203      	lsls	r3, r0, #8
 800114a:	d500      	bpl.n	800114e <__aeabi_dadd+0x632>
 800114c:	e768      	b.n	8001020 <__aeabi_dadd+0x504>
 800114e:	0747      	lsls	r7, r0, #29
 8001150:	08c9      	lsrs	r1, r1, #3
 8001152:	430f      	orrs	r7, r1
 8001154:	08c0      	lsrs	r0, r0, #3
 8001156:	2101      	movs	r1, #1
 8001158:	e617      	b.n	8000d8a <__aeabi_dadd+0x26e>
 800115a:	08d2      	lsrs	r2, r2, #3
 800115c:	075f      	lsls	r7, r3, #29
 800115e:	4317      	orrs	r7, r2
 8001160:	08d8      	lsrs	r0, r3, #3
 8001162:	e63f      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 8001164:	000c      	movs	r4, r1
 8001166:	2600      	movs	r6, #0
 8001168:	2700      	movs	r7, #0
 800116a:	e620      	b.n	8000dae <__aeabi_dadd+0x292>
 800116c:	2900      	cmp	r1, #0
 800116e:	d156      	bne.n	800121e <__aeabi_dadd+0x702>
 8001170:	075f      	lsls	r7, r3, #29
 8001172:	08d2      	lsrs	r2, r2, #3
 8001174:	4317      	orrs	r7, r2
 8001176:	08d8      	lsrs	r0, r3, #3
 8001178:	e634      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 800117a:	000c      	movs	r4, r1
 800117c:	001e      	movs	r6, r3
 800117e:	08d0      	lsrs	r0, r2, #3
 8001180:	e629      	b.n	8000dd6 <__aeabi_dadd+0x2ba>
 8001182:	08c1      	lsrs	r1, r0, #3
 8001184:	0770      	lsls	r0, r6, #29
 8001186:	4301      	orrs	r1, r0
 8001188:	08f0      	lsrs	r0, r6, #3
 800118a:	2f00      	cmp	r7, #0
 800118c:	d062      	beq.n	8001254 <__aeabi_dadd+0x738>
 800118e:	2480      	movs	r4, #128	@ 0x80
 8001190:	0324      	lsls	r4, r4, #12
 8001192:	4220      	tst	r0, r4
 8001194:	d007      	beq.n	80011a6 <__aeabi_dadd+0x68a>
 8001196:	08de      	lsrs	r6, r3, #3
 8001198:	4226      	tst	r6, r4
 800119a:	d104      	bne.n	80011a6 <__aeabi_dadd+0x68a>
 800119c:	4665      	mov	r5, ip
 800119e:	0030      	movs	r0, r6
 80011a0:	08d1      	lsrs	r1, r2, #3
 80011a2:	075b      	lsls	r3, r3, #29
 80011a4:	4319      	orrs	r1, r3
 80011a6:	0f4f      	lsrs	r7, r1, #29
 80011a8:	00c9      	lsls	r1, r1, #3
 80011aa:	08c9      	lsrs	r1, r1, #3
 80011ac:	077f      	lsls	r7, r7, #29
 80011ae:	430f      	orrs	r7, r1
 80011b0:	e618      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 80011b2:	000c      	movs	r4, r1
 80011b4:	0030      	movs	r0, r6
 80011b6:	3c20      	subs	r4, #32
 80011b8:	40e0      	lsrs	r0, r4
 80011ba:	4684      	mov	ip, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d005      	beq.n	80011cc <__aeabi_dadd+0x6b0>
 80011c0:	2440      	movs	r4, #64	@ 0x40
 80011c2:	1a61      	subs	r1, r4, r1
 80011c4:	408e      	lsls	r6, r1
 80011c6:	4649      	mov	r1, r9
 80011c8:	4331      	orrs	r1, r6
 80011ca:	4689      	mov	r9, r1
 80011cc:	4648      	mov	r0, r9
 80011ce:	1e41      	subs	r1, r0, #1
 80011d0:	4188      	sbcs	r0, r1
 80011d2:	4661      	mov	r1, ip
 80011d4:	0007      	movs	r7, r0
 80011d6:	430f      	orrs	r7, r1
 80011d8:	e630      	b.n	8000e3c <__aeabi_dadd+0x320>
 80011da:	2120      	movs	r1, #32
 80011dc:	2700      	movs	r7, #0
 80011de:	1a09      	subs	r1, r1, r0
 80011e0:	e50e      	b.n	8000c00 <__aeabi_dadd+0xe4>
 80011e2:	001e      	movs	r6, r3
 80011e4:	2f00      	cmp	r7, #0
 80011e6:	d000      	beq.n	80011ea <__aeabi_dadd+0x6ce>
 80011e8:	e522      	b.n	8000c30 <__aeabi_dadd+0x114>
 80011ea:	2400      	movs	r4, #0
 80011ec:	e758      	b.n	80010a0 <__aeabi_dadd+0x584>
 80011ee:	2500      	movs	r5, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	2600      	movs	r6, #0
 80011f4:	e5db      	b.n	8000dae <__aeabi_dadd+0x292>
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	000007fe 	.word	0x000007fe
 80011fc:	000007ff 	.word	0x000007ff
 8001200:	ff7fffff 	.word	0xff7fffff
 8001204:	4647      	mov	r7, r8
 8001206:	430f      	orrs	r7, r1
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x6f0>
 800120a:	e747      	b.n	800109c <__aeabi_dadd+0x580>
 800120c:	000e      	movs	r6, r1
 800120e:	46c1      	mov	r9, r8
 8001210:	e5b5      	b.n	8000d7e <__aeabi_dadd+0x262>
 8001212:	08df      	lsrs	r7, r3, #3
 8001214:	0764      	lsls	r4, r4, #29
 8001216:	2102      	movs	r1, #2
 8001218:	4327      	orrs	r7, r4
 800121a:	0900      	lsrs	r0, r0, #4
 800121c:	e5b5      	b.n	8000d8a <__aeabi_dadd+0x26e>
 800121e:	0019      	movs	r1, r3
 8001220:	08c0      	lsrs	r0, r0, #3
 8001222:	0777      	lsls	r7, r6, #29
 8001224:	4307      	orrs	r7, r0
 8001226:	4311      	orrs	r1, r2
 8001228:	08f0      	lsrs	r0, r6, #3
 800122a:	2900      	cmp	r1, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x714>
 800122e:	e5d9      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	0309      	lsls	r1, r1, #12
 8001234:	4208      	tst	r0, r1
 8001236:	d007      	beq.n	8001248 <__aeabi_dadd+0x72c>
 8001238:	08dc      	lsrs	r4, r3, #3
 800123a:	420c      	tst	r4, r1
 800123c:	d104      	bne.n	8001248 <__aeabi_dadd+0x72c>
 800123e:	08d2      	lsrs	r2, r2, #3
 8001240:	075b      	lsls	r3, r3, #29
 8001242:	431a      	orrs	r2, r3
 8001244:	0017      	movs	r7, r2
 8001246:	0020      	movs	r0, r4
 8001248:	0f7b      	lsrs	r3, r7, #29
 800124a:	00ff      	lsls	r7, r7, #3
 800124c:	08ff      	lsrs	r7, r7, #3
 800124e:	075b      	lsls	r3, r3, #29
 8001250:	431f      	orrs	r7, r3
 8001252:	e5c7      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 8001254:	000f      	movs	r7, r1
 8001256:	e5c5      	b.n	8000de4 <__aeabi_dadd+0x2c8>
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <__aeabi_dadd+0x788>)
 800125a:	08d2      	lsrs	r2, r2, #3
 800125c:	4033      	ands	r3, r6
 800125e:	075f      	lsls	r7, r3, #29
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	2401      	movs	r4, #1
 8001264:	4317      	orrs	r7, r2
 8001266:	0b1e      	lsrs	r6, r3, #12
 8001268:	e5a1      	b.n	8000dae <__aeabi_dadd+0x292>
 800126a:	4226      	tst	r6, r4
 800126c:	d012      	beq.n	8001294 <__aeabi_dadd+0x778>
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <__aeabi_dadd+0x788>)
 8001270:	4665      	mov	r5, ip
 8001272:	0002      	movs	r2, r0
 8001274:	2401      	movs	r4, #1
 8001276:	401e      	ands	r6, r3
 8001278:	e4e6      	b.n	8000c48 <__aeabi_dadd+0x12c>
 800127a:	0021      	movs	r1, r4
 800127c:	e585      	b.n	8000d8a <__aeabi_dadd+0x26e>
 800127e:	0017      	movs	r7, r2
 8001280:	e5a8      	b.n	8000dd4 <__aeabi_dadd+0x2b8>
 8001282:	003a      	movs	r2, r7
 8001284:	e4d4      	b.n	8000c30 <__aeabi_dadd+0x114>
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	0764      	lsls	r4, r4, #29
 800128a:	431c      	orrs	r4, r3
 800128c:	0027      	movs	r7, r4
 800128e:	2102      	movs	r1, #2
 8001290:	0900      	lsrs	r0, r0, #4
 8001292:	e57a      	b.n	8000d8a <__aeabi_dadd+0x26e>
 8001294:	08c0      	lsrs	r0, r0, #3
 8001296:	0777      	lsls	r7, r6, #29
 8001298:	4307      	orrs	r7, r0
 800129a:	4665      	mov	r5, ip
 800129c:	2100      	movs	r1, #0
 800129e:	08f0      	lsrs	r0, r6, #3
 80012a0:	e573      	b.n	8000d8a <__aeabi_dadd+0x26e>
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	ff7fffff 	.word	0xff7fffff

080012a8 <__aeabi_ddiv>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	46de      	mov	lr, fp
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	464e      	mov	r6, r9
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	b087      	sub	sp, #28
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	030b      	lsls	r3, r1, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	469b      	mov	fp, r3
 80012c0:	0fca      	lsrs	r2, r1, #31
 80012c2:	004b      	lsls	r3, r1, #1
 80012c4:	0004      	movs	r4, r0
 80012c6:	4680      	mov	r8, r0
 80012c8:	0d5b      	lsrs	r3, r3, #21
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	d100      	bne.n	80012d0 <__aeabi_ddiv+0x28>
 80012ce:	e098      	b.n	8001402 <__aeabi_ddiv+0x15a>
 80012d0:	4a7c      	ldr	r2, [pc, #496]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d037      	beq.n	8001346 <__aeabi_ddiv+0x9e>
 80012d6:	4659      	mov	r1, fp
 80012d8:	0f42      	lsrs	r2, r0, #29
 80012da:	00c9      	lsls	r1, r1, #3
 80012dc:	430a      	orrs	r2, r1
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	0409      	lsls	r1, r1, #16
 80012e2:	4311      	orrs	r1, r2
 80012e4:	00c2      	lsls	r2, r0, #3
 80012e6:	4690      	mov	r8, r2
 80012e8:	4a77      	ldr	r2, [pc, #476]	@ (80014c8 <__aeabi_ddiv+0x220>)
 80012ea:	4689      	mov	r9, r1
 80012ec:	4692      	mov	sl, r2
 80012ee:	449a      	add	sl, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	2400      	movs	r4, #0
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	9e00      	ldr	r6, [sp, #0]
 80012f8:	9f01      	ldr	r7, [sp, #4]
 80012fa:	033b      	lsls	r3, r7, #12
 80012fc:	0b1b      	lsrs	r3, r3, #12
 80012fe:	469b      	mov	fp, r3
 8001300:	007b      	lsls	r3, r7, #1
 8001302:	0030      	movs	r0, r6
 8001304:	0d5b      	lsrs	r3, r3, #21
 8001306:	0ffd      	lsrs	r5, r7, #31
 8001308:	2b00      	cmp	r3, #0
 800130a:	d059      	beq.n	80013c0 <__aeabi_ddiv+0x118>
 800130c:	4a6d      	ldr	r2, [pc, #436]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d048      	beq.n	80013a4 <__aeabi_ddiv+0xfc>
 8001312:	4659      	mov	r1, fp
 8001314:	0f72      	lsrs	r2, r6, #29
 8001316:	00c9      	lsls	r1, r1, #3
 8001318:	430a      	orrs	r2, r1
 800131a:	2180      	movs	r1, #128	@ 0x80
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	4311      	orrs	r1, r2
 8001320:	468b      	mov	fp, r1
 8001322:	4969      	ldr	r1, [pc, #420]	@ (80014c8 <__aeabi_ddiv+0x220>)
 8001324:	00f2      	lsls	r2, r6, #3
 8001326:	468c      	mov	ip, r1
 8001328:	4651      	mov	r1, sl
 800132a:	4463      	add	r3, ip
 800132c:	1acb      	subs	r3, r1, r3
 800132e:	469a      	mov	sl, r3
 8001330:	2100      	movs	r1, #0
 8001332:	9e02      	ldr	r6, [sp, #8]
 8001334:	406e      	eors	r6, r5
 8001336:	b2f6      	uxtb	r6, r6
 8001338:	2c0f      	cmp	r4, #15
 800133a:	d900      	bls.n	800133e <__aeabi_ddiv+0x96>
 800133c:	e0ce      	b.n	80014dc <__aeabi_ddiv+0x234>
 800133e:	4b63      	ldr	r3, [pc, #396]	@ (80014cc <__aeabi_ddiv+0x224>)
 8001340:	00a4      	lsls	r4, r4, #2
 8001342:	591b      	ldr	r3, [r3, r4]
 8001344:	469f      	mov	pc, r3
 8001346:	465a      	mov	r2, fp
 8001348:	4302      	orrs	r2, r0
 800134a:	4691      	mov	r9, r2
 800134c:	d000      	beq.n	8001350 <__aeabi_ddiv+0xa8>
 800134e:	e090      	b.n	8001472 <__aeabi_ddiv+0x1ca>
 8001350:	469a      	mov	sl, r3
 8001352:	2302      	movs	r3, #2
 8001354:	4690      	mov	r8, r2
 8001356:	2408      	movs	r4, #8
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	e7cc      	b.n	80012f6 <__aeabi_ddiv+0x4e>
 800135c:	46cb      	mov	fp, r9
 800135e:	4642      	mov	r2, r8
 8001360:	9d02      	ldr	r5, [sp, #8]
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	2902      	cmp	r1, #2
 8001366:	d100      	bne.n	800136a <__aeabi_ddiv+0xc2>
 8001368:	e1de      	b.n	8001728 <__aeabi_ddiv+0x480>
 800136a:	2903      	cmp	r1, #3
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0xc8>
 800136e:	e08d      	b.n	800148c <__aeabi_ddiv+0x1e4>
 8001370:	2901      	cmp	r1, #1
 8001372:	d000      	beq.n	8001376 <__aeabi_ddiv+0xce>
 8001374:	e179      	b.n	800166a <__aeabi_ddiv+0x3c2>
 8001376:	002e      	movs	r6, r5
 8001378:	2200      	movs	r2, #0
 800137a:	2300      	movs	r3, #0
 800137c:	2400      	movs	r4, #0
 800137e:	4690      	mov	r8, r2
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	4323      	orrs	r3, r4
 8001384:	07f6      	lsls	r6, r6, #31
 8001386:	4333      	orrs	r3, r6
 8001388:	4640      	mov	r0, r8
 800138a:	0019      	movs	r1, r3
 800138c:	b007      	add	sp, #28
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2200      	movs	r2, #0
 800139c:	2400      	movs	r4, #0
 800139e:	4690      	mov	r8, r2
 80013a0:	4b48      	ldr	r3, [pc, #288]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 80013a2:	e7ed      	b.n	8001380 <__aeabi_ddiv+0xd8>
 80013a4:	465a      	mov	r2, fp
 80013a6:	9b00      	ldr	r3, [sp, #0]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	4b49      	ldr	r3, [pc, #292]	@ (80014d0 <__aeabi_ddiv+0x228>)
 80013ac:	469c      	mov	ip, r3
 80013ae:	44e2      	add	sl, ip
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d159      	bne.n	8001468 <__aeabi_ddiv+0x1c0>
 80013b4:	2302      	movs	r3, #2
 80013b6:	431c      	orrs	r4, r3
 80013b8:	2300      	movs	r3, #0
 80013ba:	2102      	movs	r1, #2
 80013bc:	469b      	mov	fp, r3
 80013be:	e7b8      	b.n	8001332 <__aeabi_ddiv+0x8a>
 80013c0:	465a      	mov	r2, fp
 80013c2:	9b00      	ldr	r3, [sp, #0]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	d049      	beq.n	800145c <__aeabi_ddiv+0x1b4>
 80013c8:	465b      	mov	r3, fp
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x128>
 80013ce:	e19c      	b.n	800170a <__aeabi_ddiv+0x462>
 80013d0:	4658      	mov	r0, fp
 80013d2:	f001 fb8b 	bl	8002aec <__clzsi2>
 80013d6:	0002      	movs	r2, r0
 80013d8:	0003      	movs	r3, r0
 80013da:	3a0b      	subs	r2, #11
 80013dc:	271d      	movs	r7, #29
 80013de:	9e00      	ldr	r6, [sp, #0]
 80013e0:	1aba      	subs	r2, r7, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	4658      	mov	r0, fp
 80013e6:	40d6      	lsrs	r6, r2
 80013e8:	3908      	subs	r1, #8
 80013ea:	4088      	lsls	r0, r1
 80013ec:	0032      	movs	r2, r6
 80013ee:	4302      	orrs	r2, r0
 80013f0:	4693      	mov	fp, r2
 80013f2:	9a00      	ldr	r2, [sp, #0]
 80013f4:	408a      	lsls	r2, r1
 80013f6:	4937      	ldr	r1, [pc, #220]	@ (80014d4 <__aeabi_ddiv+0x22c>)
 80013f8:	4453      	add	r3, sl
 80013fa:	468a      	mov	sl, r1
 80013fc:	2100      	movs	r1, #0
 80013fe:	449a      	add	sl, r3
 8001400:	e797      	b.n	8001332 <__aeabi_ddiv+0x8a>
 8001402:	465b      	mov	r3, fp
 8001404:	4303      	orrs	r3, r0
 8001406:	4699      	mov	r9, r3
 8001408:	d021      	beq.n	800144e <__aeabi_ddiv+0x1a6>
 800140a:	465b      	mov	r3, fp
 800140c:	2b00      	cmp	r3, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x16a>
 8001410:	e169      	b.n	80016e6 <__aeabi_ddiv+0x43e>
 8001412:	4658      	mov	r0, fp
 8001414:	f001 fb6a 	bl	8002aec <__clzsi2>
 8001418:	230b      	movs	r3, #11
 800141a:	425b      	negs	r3, r3
 800141c:	469c      	mov	ip, r3
 800141e:	0002      	movs	r2, r0
 8001420:	4484      	add	ip, r0
 8001422:	4666      	mov	r6, ip
 8001424:	231d      	movs	r3, #29
 8001426:	1b9b      	subs	r3, r3, r6
 8001428:	0026      	movs	r6, r4
 800142a:	0011      	movs	r1, r2
 800142c:	4658      	mov	r0, fp
 800142e:	40de      	lsrs	r6, r3
 8001430:	3908      	subs	r1, #8
 8001432:	4088      	lsls	r0, r1
 8001434:	0033      	movs	r3, r6
 8001436:	4303      	orrs	r3, r0
 8001438:	4699      	mov	r9, r3
 800143a:	0023      	movs	r3, r4
 800143c:	408b      	lsls	r3, r1
 800143e:	4698      	mov	r8, r3
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <__aeabi_ddiv+0x230>)
 8001442:	2400      	movs	r4, #0
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	469a      	mov	sl, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9303      	str	r3, [sp, #12]
 800144c:	e753      	b.n	80012f6 <__aeabi_ddiv+0x4e>
 800144e:	2300      	movs	r3, #0
 8001450:	4698      	mov	r8, r3
 8001452:	469a      	mov	sl, r3
 8001454:	3301      	adds	r3, #1
 8001456:	2404      	movs	r4, #4
 8001458:	9303      	str	r3, [sp, #12]
 800145a:	e74c      	b.n	80012f6 <__aeabi_ddiv+0x4e>
 800145c:	2301      	movs	r3, #1
 800145e:	431c      	orrs	r4, r3
 8001460:	2300      	movs	r3, #0
 8001462:	2101      	movs	r1, #1
 8001464:	469b      	mov	fp, r3
 8001466:	e764      	b.n	8001332 <__aeabi_ddiv+0x8a>
 8001468:	2303      	movs	r3, #3
 800146a:	0032      	movs	r2, r6
 800146c:	2103      	movs	r1, #3
 800146e:	431c      	orrs	r4, r3
 8001470:	e75f      	b.n	8001332 <__aeabi_ddiv+0x8a>
 8001472:	469a      	mov	sl, r3
 8001474:	2303      	movs	r3, #3
 8001476:	46d9      	mov	r9, fp
 8001478:	240c      	movs	r4, #12
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	e73b      	b.n	80012f6 <__aeabi_ddiv+0x4e>
 800147e:	2300      	movs	r3, #0
 8001480:	2480      	movs	r4, #128	@ 0x80
 8001482:	4698      	mov	r8, r3
 8001484:	2600      	movs	r6, #0
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 8001488:	0324      	lsls	r4, r4, #12
 800148a:	e779      	b.n	8001380 <__aeabi_ddiv+0xd8>
 800148c:	2480      	movs	r4, #128	@ 0x80
 800148e:	465b      	mov	r3, fp
 8001490:	0324      	lsls	r4, r4, #12
 8001492:	431c      	orrs	r4, r3
 8001494:	0324      	lsls	r4, r4, #12
 8001496:	002e      	movs	r6, r5
 8001498:	4690      	mov	r8, r2
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 800149c:	0b24      	lsrs	r4, r4, #12
 800149e:	e76f      	b.n	8001380 <__aeabi_ddiv+0xd8>
 80014a0:	2480      	movs	r4, #128	@ 0x80
 80014a2:	464b      	mov	r3, r9
 80014a4:	0324      	lsls	r4, r4, #12
 80014a6:	4223      	tst	r3, r4
 80014a8:	d002      	beq.n	80014b0 <__aeabi_ddiv+0x208>
 80014aa:	465b      	mov	r3, fp
 80014ac:	4223      	tst	r3, r4
 80014ae:	d0f0      	beq.n	8001492 <__aeabi_ddiv+0x1ea>
 80014b0:	2480      	movs	r4, #128	@ 0x80
 80014b2:	464b      	mov	r3, r9
 80014b4:	0324      	lsls	r4, r4, #12
 80014b6:	431c      	orrs	r4, r3
 80014b8:	0324      	lsls	r4, r4, #12
 80014ba:	9e02      	ldr	r6, [sp, #8]
 80014bc:	4b01      	ldr	r3, [pc, #4]	@ (80014c4 <__aeabi_ddiv+0x21c>)
 80014be:	0b24      	lsrs	r4, r4, #12
 80014c0:	e75e      	b.n	8001380 <__aeabi_ddiv+0xd8>
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	000007ff 	.word	0x000007ff
 80014c8:	fffffc01 	.word	0xfffffc01
 80014cc:	0800bca4 	.word	0x0800bca4
 80014d0:	fffff801 	.word	0xfffff801
 80014d4:	000003f3 	.word	0x000003f3
 80014d8:	fffffc0d 	.word	0xfffffc0d
 80014dc:	45cb      	cmp	fp, r9
 80014de:	d200      	bcs.n	80014e2 <__aeabi_ddiv+0x23a>
 80014e0:	e0f8      	b.n	80016d4 <__aeabi_ddiv+0x42c>
 80014e2:	d100      	bne.n	80014e6 <__aeabi_ddiv+0x23e>
 80014e4:	e0f3      	b.n	80016ce <__aeabi_ddiv+0x426>
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
 80014ea:	469c      	mov	ip, r3
 80014ec:	4644      	mov	r4, r8
 80014ee:	4648      	mov	r0, r9
 80014f0:	2500      	movs	r5, #0
 80014f2:	44e2      	add	sl, ip
 80014f4:	465b      	mov	r3, fp
 80014f6:	0e17      	lsrs	r7, r2, #24
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	431f      	orrs	r7, r3
 80014fc:	0c19      	lsrs	r1, r3, #16
 80014fe:	043b      	lsls	r3, r7, #16
 8001500:	0212      	lsls	r2, r2, #8
 8001502:	9700      	str	r7, [sp, #0]
 8001504:	0c1f      	lsrs	r7, r3, #16
 8001506:	4691      	mov	r9, r2
 8001508:	9102      	str	r1, [sp, #8]
 800150a:	9703      	str	r7, [sp, #12]
 800150c:	f7fe fe9e 	bl	800024c <__aeabi_uidivmod>
 8001510:	0002      	movs	r2, r0
 8001512:	437a      	muls	r2, r7
 8001514:	040b      	lsls	r3, r1, #16
 8001516:	0c21      	lsrs	r1, r4, #16
 8001518:	4680      	mov	r8, r0
 800151a:	4319      	orrs	r1, r3
 800151c:	428a      	cmp	r2, r1
 800151e:	d909      	bls.n	8001534 <__aeabi_ddiv+0x28c>
 8001520:	9f00      	ldr	r7, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	46bc      	mov	ip, r7
 8001526:	425b      	negs	r3, r3
 8001528:	4461      	add	r1, ip
 800152a:	469c      	mov	ip, r3
 800152c:	44e0      	add	r8, ip
 800152e:	428f      	cmp	r7, r1
 8001530:	d800      	bhi.n	8001534 <__aeabi_ddiv+0x28c>
 8001532:	e15c      	b.n	80017ee <__aeabi_ddiv+0x546>
 8001534:	1a88      	subs	r0, r1, r2
 8001536:	9902      	ldr	r1, [sp, #8]
 8001538:	f7fe fe88 	bl	800024c <__aeabi_uidivmod>
 800153c:	9a03      	ldr	r2, [sp, #12]
 800153e:	0424      	lsls	r4, r4, #16
 8001540:	4342      	muls	r2, r0
 8001542:	0409      	lsls	r1, r1, #16
 8001544:	0c24      	lsrs	r4, r4, #16
 8001546:	0003      	movs	r3, r0
 8001548:	430c      	orrs	r4, r1
 800154a:	42a2      	cmp	r2, r4
 800154c:	d906      	bls.n	800155c <__aeabi_ddiv+0x2b4>
 800154e:	9900      	ldr	r1, [sp, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	468c      	mov	ip, r1
 8001554:	4464      	add	r4, ip
 8001556:	42a1      	cmp	r1, r4
 8001558:	d800      	bhi.n	800155c <__aeabi_ddiv+0x2b4>
 800155a:	e142      	b.n	80017e2 <__aeabi_ddiv+0x53a>
 800155c:	1aa0      	subs	r0, r4, r2
 800155e:	4642      	mov	r2, r8
 8001560:	0412      	lsls	r2, r2, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	4693      	mov	fp, r2
 8001566:	464b      	mov	r3, r9
 8001568:	4659      	mov	r1, fp
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	001f      	movs	r7, r3
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	040b      	lsls	r3, r1, #16
 8001572:	4649      	mov	r1, r9
 8001574:	0409      	lsls	r1, r1, #16
 8001576:	0c09      	lsrs	r1, r1, #16
 8001578:	000c      	movs	r4, r1
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	435c      	muls	r4, r3
 800157e:	0c12      	lsrs	r2, r2, #16
 8001580:	437b      	muls	r3, r7
 8001582:	4688      	mov	r8, r1
 8001584:	4351      	muls	r1, r2
 8001586:	437a      	muls	r2, r7
 8001588:	0c27      	lsrs	r7, r4, #16
 800158a:	46bc      	mov	ip, r7
 800158c:	185b      	adds	r3, r3, r1
 800158e:	4463      	add	r3, ip
 8001590:	4299      	cmp	r1, r3
 8001592:	d903      	bls.n	800159c <__aeabi_ddiv+0x2f4>
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0249      	lsls	r1, r1, #9
 8001598:	468c      	mov	ip, r1
 800159a:	4462      	add	r2, ip
 800159c:	0c19      	lsrs	r1, r3, #16
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c24      	lsrs	r4, r4, #16
 80015a4:	188a      	adds	r2, r1, r2
 80015a6:	191c      	adds	r4, r3, r4
 80015a8:	4290      	cmp	r0, r2
 80015aa:	d302      	bcc.n	80015b2 <__aeabi_ddiv+0x30a>
 80015ac:	d116      	bne.n	80015dc <__aeabi_ddiv+0x334>
 80015ae:	42a5      	cmp	r5, r4
 80015b0:	d214      	bcs.n	80015dc <__aeabi_ddiv+0x334>
 80015b2:	465b      	mov	r3, fp
 80015b4:	9f00      	ldr	r7, [sp, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	444d      	add	r5, r9
 80015ba:	9305      	str	r3, [sp, #20]
 80015bc:	454d      	cmp	r5, r9
 80015be:	419b      	sbcs	r3, r3
 80015c0:	46bc      	mov	ip, r7
 80015c2:	425b      	negs	r3, r3
 80015c4:	4463      	add	r3, ip
 80015c6:	18c0      	adds	r0, r0, r3
 80015c8:	4287      	cmp	r7, r0
 80015ca:	d300      	bcc.n	80015ce <__aeabi_ddiv+0x326>
 80015cc:	e102      	b.n	80017d4 <__aeabi_ddiv+0x52c>
 80015ce:	4282      	cmp	r2, r0
 80015d0:	d900      	bls.n	80015d4 <__aeabi_ddiv+0x32c>
 80015d2:	e129      	b.n	8001828 <__aeabi_ddiv+0x580>
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x330>
 80015d6:	e124      	b.n	8001822 <__aeabi_ddiv+0x57a>
 80015d8:	9b05      	ldr	r3, [sp, #20]
 80015da:	469b      	mov	fp, r3
 80015dc:	1b2c      	subs	r4, r5, r4
 80015de:	42a5      	cmp	r5, r4
 80015e0:	41ad      	sbcs	r5, r5
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	1a80      	subs	r0, r0, r2
 80015e6:	426d      	negs	r5, r5
 80015e8:	1b40      	subs	r0, r0, r5
 80015ea:	4283      	cmp	r3, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_ddiv+0x348>
 80015ee:	e10f      	b.n	8001810 <__aeabi_ddiv+0x568>
 80015f0:	9902      	ldr	r1, [sp, #8]
 80015f2:	f7fe fe2b 	bl	800024c <__aeabi_uidivmod>
 80015f6:	9a03      	ldr	r2, [sp, #12]
 80015f8:	040b      	lsls	r3, r1, #16
 80015fa:	4342      	muls	r2, r0
 80015fc:	0c21      	lsrs	r1, r4, #16
 80015fe:	0005      	movs	r5, r0
 8001600:	4319      	orrs	r1, r3
 8001602:	428a      	cmp	r2, r1
 8001604:	d900      	bls.n	8001608 <__aeabi_ddiv+0x360>
 8001606:	e0cb      	b.n	80017a0 <__aeabi_ddiv+0x4f8>
 8001608:	1a88      	subs	r0, r1, r2
 800160a:	9902      	ldr	r1, [sp, #8]
 800160c:	f7fe fe1e 	bl	800024c <__aeabi_uidivmod>
 8001610:	9a03      	ldr	r2, [sp, #12]
 8001612:	0424      	lsls	r4, r4, #16
 8001614:	4342      	muls	r2, r0
 8001616:	0409      	lsls	r1, r1, #16
 8001618:	0c24      	lsrs	r4, r4, #16
 800161a:	0003      	movs	r3, r0
 800161c:	430c      	orrs	r4, r1
 800161e:	42a2      	cmp	r2, r4
 8001620:	d900      	bls.n	8001624 <__aeabi_ddiv+0x37c>
 8001622:	e0ca      	b.n	80017ba <__aeabi_ddiv+0x512>
 8001624:	4641      	mov	r1, r8
 8001626:	1aa4      	subs	r4, r4, r2
 8001628:	042a      	lsls	r2, r5, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	9f04      	ldr	r7, [sp, #16]
 800162e:	0413      	lsls	r3, r2, #16
 8001630:	0c1b      	lsrs	r3, r3, #16
 8001632:	4359      	muls	r1, r3
 8001634:	4640      	mov	r0, r8
 8001636:	437b      	muls	r3, r7
 8001638:	469c      	mov	ip, r3
 800163a:	0c15      	lsrs	r5, r2, #16
 800163c:	4368      	muls	r0, r5
 800163e:	0c0b      	lsrs	r3, r1, #16
 8001640:	4484      	add	ip, r0
 8001642:	4463      	add	r3, ip
 8001644:	437d      	muls	r5, r7
 8001646:	4298      	cmp	r0, r3
 8001648:	d903      	bls.n	8001652 <__aeabi_ddiv+0x3aa>
 800164a:	2080      	movs	r0, #128	@ 0x80
 800164c:	0240      	lsls	r0, r0, #9
 800164e:	4684      	mov	ip, r0
 8001650:	4465      	add	r5, ip
 8001652:	0c18      	lsrs	r0, r3, #16
 8001654:	0409      	lsls	r1, r1, #16
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	0c09      	lsrs	r1, r1, #16
 800165a:	1940      	adds	r0, r0, r5
 800165c:	185b      	adds	r3, r3, r1
 800165e:	4284      	cmp	r4, r0
 8001660:	d327      	bcc.n	80016b2 <__aeabi_ddiv+0x40a>
 8001662:	d023      	beq.n	80016ac <__aeabi_ddiv+0x404>
 8001664:	2301      	movs	r3, #1
 8001666:	0035      	movs	r5, r6
 8001668:	431a      	orrs	r2, r3
 800166a:	4b94      	ldr	r3, [pc, #592]	@ (80018bc <__aeabi_ddiv+0x614>)
 800166c:	4453      	add	r3, sl
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd60      	ble.n	8001734 <__aeabi_ddiv+0x48c>
 8001672:	0751      	lsls	r1, r2, #29
 8001674:	d000      	beq.n	8001678 <__aeabi_ddiv+0x3d0>
 8001676:	e086      	b.n	8001786 <__aeabi_ddiv+0x4de>
 8001678:	002e      	movs	r6, r5
 800167a:	08d1      	lsrs	r1, r2, #3
 800167c:	465a      	mov	r2, fp
 800167e:	01d2      	lsls	r2, r2, #7
 8001680:	d506      	bpl.n	8001690 <__aeabi_ddiv+0x3e8>
 8001682:	465a      	mov	r2, fp
 8001684:	4b8e      	ldr	r3, [pc, #568]	@ (80018c0 <__aeabi_ddiv+0x618>)
 8001686:	401a      	ands	r2, r3
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	4693      	mov	fp, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4453      	add	r3, sl
 8001690:	4a8c      	ldr	r2, [pc, #560]	@ (80018c4 <__aeabi_ddiv+0x61c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	dd00      	ble.n	8001698 <__aeabi_ddiv+0x3f0>
 8001696:	e680      	b.n	800139a <__aeabi_ddiv+0xf2>
 8001698:	465a      	mov	r2, fp
 800169a:	0752      	lsls	r2, r2, #29
 800169c:	430a      	orrs	r2, r1
 800169e:	4690      	mov	r8, r2
 80016a0:	465a      	mov	r2, fp
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	0254      	lsls	r4, r2, #9
 80016a6:	0b24      	lsrs	r4, r4, #12
 80016a8:	0d5b      	lsrs	r3, r3, #21
 80016aa:	e669      	b.n	8001380 <__aeabi_ddiv+0xd8>
 80016ac:	0035      	movs	r5, r6
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0db      	beq.n	800166a <__aeabi_ddiv+0x3c2>
 80016b2:	9d00      	ldr	r5, [sp, #0]
 80016b4:	1e51      	subs	r1, r2, #1
 80016b6:	46ac      	mov	ip, r5
 80016b8:	4464      	add	r4, ip
 80016ba:	42ac      	cmp	r4, r5
 80016bc:	d200      	bcs.n	80016c0 <__aeabi_ddiv+0x418>
 80016be:	e09e      	b.n	80017fe <__aeabi_ddiv+0x556>
 80016c0:	4284      	cmp	r4, r0
 80016c2:	d200      	bcs.n	80016c6 <__aeabi_ddiv+0x41e>
 80016c4:	e0e1      	b.n	800188a <__aeabi_ddiv+0x5e2>
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x422>
 80016c8:	e0ee      	b.n	80018a8 <__aeabi_ddiv+0x600>
 80016ca:	000a      	movs	r2, r1
 80016cc:	e7ca      	b.n	8001664 <__aeabi_ddiv+0x3bc>
 80016ce:	4542      	cmp	r2, r8
 80016d0:	d900      	bls.n	80016d4 <__aeabi_ddiv+0x42c>
 80016d2:	e708      	b.n	80014e6 <__aeabi_ddiv+0x23e>
 80016d4:	464b      	mov	r3, r9
 80016d6:	07dc      	lsls	r4, r3, #31
 80016d8:	0858      	lsrs	r0, r3, #1
 80016da:	4643      	mov	r3, r8
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	431c      	orrs	r4, r3
 80016e0:	4643      	mov	r3, r8
 80016e2:	07dd      	lsls	r5, r3, #31
 80016e4:	e706      	b.n	80014f4 <__aeabi_ddiv+0x24c>
 80016e6:	f001 fa01 	bl	8002aec <__clzsi2>
 80016ea:	2315      	movs	r3, #21
 80016ec:	469c      	mov	ip, r3
 80016ee:	4484      	add	ip, r0
 80016f0:	0002      	movs	r2, r0
 80016f2:	4663      	mov	r3, ip
 80016f4:	3220      	adds	r2, #32
 80016f6:	2b1c      	cmp	r3, #28
 80016f8:	dc00      	bgt.n	80016fc <__aeabi_ddiv+0x454>
 80016fa:	e692      	b.n	8001422 <__aeabi_ddiv+0x17a>
 80016fc:	0023      	movs	r3, r4
 80016fe:	3808      	subs	r0, #8
 8001700:	4083      	lsls	r3, r0
 8001702:	4699      	mov	r9, r3
 8001704:	2300      	movs	r3, #0
 8001706:	4698      	mov	r8, r3
 8001708:	e69a      	b.n	8001440 <__aeabi_ddiv+0x198>
 800170a:	f001 f9ef 	bl	8002aec <__clzsi2>
 800170e:	0002      	movs	r2, r0
 8001710:	0003      	movs	r3, r0
 8001712:	3215      	adds	r2, #21
 8001714:	3320      	adds	r3, #32
 8001716:	2a1c      	cmp	r2, #28
 8001718:	dc00      	bgt.n	800171c <__aeabi_ddiv+0x474>
 800171a:	e65f      	b.n	80013dc <__aeabi_ddiv+0x134>
 800171c:	9900      	ldr	r1, [sp, #0]
 800171e:	3808      	subs	r0, #8
 8001720:	4081      	lsls	r1, r0
 8001722:	2200      	movs	r2, #0
 8001724:	468b      	mov	fp, r1
 8001726:	e666      	b.n	80013f6 <__aeabi_ddiv+0x14e>
 8001728:	2200      	movs	r2, #0
 800172a:	002e      	movs	r6, r5
 800172c:	2400      	movs	r4, #0
 800172e:	4690      	mov	r8, r2
 8001730:	4b65      	ldr	r3, [pc, #404]	@ (80018c8 <__aeabi_ddiv+0x620>)
 8001732:	e625      	b.n	8001380 <__aeabi_ddiv+0xd8>
 8001734:	002e      	movs	r6, r5
 8001736:	2101      	movs	r1, #1
 8001738:	1ac9      	subs	r1, r1, r3
 800173a:	2938      	cmp	r1, #56	@ 0x38
 800173c:	dd00      	ble.n	8001740 <__aeabi_ddiv+0x498>
 800173e:	e61b      	b.n	8001378 <__aeabi_ddiv+0xd0>
 8001740:	291f      	cmp	r1, #31
 8001742:	dc7e      	bgt.n	8001842 <__aeabi_ddiv+0x59a>
 8001744:	4861      	ldr	r0, [pc, #388]	@ (80018cc <__aeabi_ddiv+0x624>)
 8001746:	0014      	movs	r4, r2
 8001748:	4450      	add	r0, sl
 800174a:	465b      	mov	r3, fp
 800174c:	4082      	lsls	r2, r0
 800174e:	4083      	lsls	r3, r0
 8001750:	40cc      	lsrs	r4, r1
 8001752:	1e50      	subs	r0, r2, #1
 8001754:	4182      	sbcs	r2, r0
 8001756:	4323      	orrs	r3, r4
 8001758:	431a      	orrs	r2, r3
 800175a:	465b      	mov	r3, fp
 800175c:	40cb      	lsrs	r3, r1
 800175e:	0751      	lsls	r1, r2, #29
 8001760:	d009      	beq.n	8001776 <__aeabi_ddiv+0x4ce>
 8001762:	210f      	movs	r1, #15
 8001764:	4011      	ands	r1, r2
 8001766:	2904      	cmp	r1, #4
 8001768:	d005      	beq.n	8001776 <__aeabi_ddiv+0x4ce>
 800176a:	1d11      	adds	r1, r2, #4
 800176c:	4291      	cmp	r1, r2
 800176e:	4192      	sbcs	r2, r2
 8001770:	4252      	negs	r2, r2
 8001772:	189b      	adds	r3, r3, r2
 8001774:	000a      	movs	r2, r1
 8001776:	0219      	lsls	r1, r3, #8
 8001778:	d400      	bmi.n	800177c <__aeabi_ddiv+0x4d4>
 800177a:	e09b      	b.n	80018b4 <__aeabi_ddiv+0x60c>
 800177c:	2200      	movs	r2, #0
 800177e:	2301      	movs	r3, #1
 8001780:	2400      	movs	r4, #0
 8001782:	4690      	mov	r8, r2
 8001784:	e5fc      	b.n	8001380 <__aeabi_ddiv+0xd8>
 8001786:	210f      	movs	r1, #15
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x4e8>
 800178e:	e773      	b.n	8001678 <__aeabi_ddiv+0x3d0>
 8001790:	1d11      	adds	r1, r2, #4
 8001792:	4291      	cmp	r1, r2
 8001794:	4192      	sbcs	r2, r2
 8001796:	4252      	negs	r2, r2
 8001798:	002e      	movs	r6, r5
 800179a:	08c9      	lsrs	r1, r1, #3
 800179c:	4493      	add	fp, r2
 800179e:	e76d      	b.n	800167c <__aeabi_ddiv+0x3d4>
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	3d01      	subs	r5, #1
 80017a4:	469c      	mov	ip, r3
 80017a6:	4461      	add	r1, ip
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d900      	bls.n	80017ae <__aeabi_ddiv+0x506>
 80017ac:	e72c      	b.n	8001608 <__aeabi_ddiv+0x360>
 80017ae:	428a      	cmp	r2, r1
 80017b0:	d800      	bhi.n	80017b4 <__aeabi_ddiv+0x50c>
 80017b2:	e729      	b.n	8001608 <__aeabi_ddiv+0x360>
 80017b4:	1e85      	subs	r5, r0, #2
 80017b6:	4461      	add	r1, ip
 80017b8:	e726      	b.n	8001608 <__aeabi_ddiv+0x360>
 80017ba:	9900      	ldr	r1, [sp, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	468c      	mov	ip, r1
 80017c0:	4464      	add	r4, ip
 80017c2:	42a1      	cmp	r1, r4
 80017c4:	d900      	bls.n	80017c8 <__aeabi_ddiv+0x520>
 80017c6:	e72d      	b.n	8001624 <__aeabi_ddiv+0x37c>
 80017c8:	42a2      	cmp	r2, r4
 80017ca:	d800      	bhi.n	80017ce <__aeabi_ddiv+0x526>
 80017cc:	e72a      	b.n	8001624 <__aeabi_ddiv+0x37c>
 80017ce:	1e83      	subs	r3, r0, #2
 80017d0:	4464      	add	r4, ip
 80017d2:	e727      	b.n	8001624 <__aeabi_ddiv+0x37c>
 80017d4:	4287      	cmp	r7, r0
 80017d6:	d000      	beq.n	80017da <__aeabi_ddiv+0x532>
 80017d8:	e6fe      	b.n	80015d8 <__aeabi_ddiv+0x330>
 80017da:	45a9      	cmp	r9, r5
 80017dc:	d900      	bls.n	80017e0 <__aeabi_ddiv+0x538>
 80017de:	e6fb      	b.n	80015d8 <__aeabi_ddiv+0x330>
 80017e0:	e6f5      	b.n	80015ce <__aeabi_ddiv+0x326>
 80017e2:	42a2      	cmp	r2, r4
 80017e4:	d800      	bhi.n	80017e8 <__aeabi_ddiv+0x540>
 80017e6:	e6b9      	b.n	800155c <__aeabi_ddiv+0x2b4>
 80017e8:	1e83      	subs	r3, r0, #2
 80017ea:	4464      	add	r4, ip
 80017ec:	e6b6      	b.n	800155c <__aeabi_ddiv+0x2b4>
 80017ee:	428a      	cmp	r2, r1
 80017f0:	d800      	bhi.n	80017f4 <__aeabi_ddiv+0x54c>
 80017f2:	e69f      	b.n	8001534 <__aeabi_ddiv+0x28c>
 80017f4:	46bc      	mov	ip, r7
 80017f6:	1e83      	subs	r3, r0, #2
 80017f8:	4698      	mov	r8, r3
 80017fa:	4461      	add	r1, ip
 80017fc:	e69a      	b.n	8001534 <__aeabi_ddiv+0x28c>
 80017fe:	000a      	movs	r2, r1
 8001800:	4284      	cmp	r4, r0
 8001802:	d000      	beq.n	8001806 <__aeabi_ddiv+0x55e>
 8001804:	e72e      	b.n	8001664 <__aeabi_ddiv+0x3bc>
 8001806:	454b      	cmp	r3, r9
 8001808:	d000      	beq.n	800180c <__aeabi_ddiv+0x564>
 800180a:	e72b      	b.n	8001664 <__aeabi_ddiv+0x3bc>
 800180c:	0035      	movs	r5, r6
 800180e:	e72c      	b.n	800166a <__aeabi_ddiv+0x3c2>
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <__aeabi_ddiv+0x614>)
 8001812:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <__aeabi_ddiv+0x628>)
 8001814:	4453      	add	r3, sl
 8001816:	4592      	cmp	sl, r2
 8001818:	db43      	blt.n	80018a2 <__aeabi_ddiv+0x5fa>
 800181a:	2201      	movs	r2, #1
 800181c:	2100      	movs	r1, #0
 800181e:	4493      	add	fp, r2
 8001820:	e72c      	b.n	800167c <__aeabi_ddiv+0x3d4>
 8001822:	42ac      	cmp	r4, r5
 8001824:	d800      	bhi.n	8001828 <__aeabi_ddiv+0x580>
 8001826:	e6d7      	b.n	80015d8 <__aeabi_ddiv+0x330>
 8001828:	2302      	movs	r3, #2
 800182a:	425b      	negs	r3, r3
 800182c:	469c      	mov	ip, r3
 800182e:	9900      	ldr	r1, [sp, #0]
 8001830:	444d      	add	r5, r9
 8001832:	454d      	cmp	r5, r9
 8001834:	419b      	sbcs	r3, r3
 8001836:	44e3      	add	fp, ip
 8001838:	468c      	mov	ip, r1
 800183a:	425b      	negs	r3, r3
 800183c:	4463      	add	r3, ip
 800183e:	18c0      	adds	r0, r0, r3
 8001840:	e6cc      	b.n	80015dc <__aeabi_ddiv+0x334>
 8001842:	201f      	movs	r0, #31
 8001844:	4240      	negs	r0, r0
 8001846:	1ac3      	subs	r3, r0, r3
 8001848:	4658      	mov	r0, fp
 800184a:	40d8      	lsrs	r0, r3
 800184c:	2920      	cmp	r1, #32
 800184e:	d004      	beq.n	800185a <__aeabi_ddiv+0x5b2>
 8001850:	4659      	mov	r1, fp
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <__aeabi_ddiv+0x62c>)
 8001854:	4453      	add	r3, sl
 8001856:	4099      	lsls	r1, r3
 8001858:	430a      	orrs	r2, r1
 800185a:	1e53      	subs	r3, r2, #1
 800185c:	419a      	sbcs	r2, r3
 800185e:	2307      	movs	r3, #7
 8001860:	0019      	movs	r1, r3
 8001862:	4302      	orrs	r2, r0
 8001864:	2400      	movs	r4, #0
 8001866:	4011      	ands	r1, r2
 8001868:	4213      	tst	r3, r2
 800186a:	d009      	beq.n	8001880 <__aeabi_ddiv+0x5d8>
 800186c:	3308      	adds	r3, #8
 800186e:	4013      	ands	r3, r2
 8001870:	2b04      	cmp	r3, #4
 8001872:	d01d      	beq.n	80018b0 <__aeabi_ddiv+0x608>
 8001874:	1d13      	adds	r3, r2, #4
 8001876:	4293      	cmp	r3, r2
 8001878:	4189      	sbcs	r1, r1
 800187a:	001a      	movs	r2, r3
 800187c:	4249      	negs	r1, r1
 800187e:	0749      	lsls	r1, r1, #29
 8001880:	08d2      	lsrs	r2, r2, #3
 8001882:	430a      	orrs	r2, r1
 8001884:	4690      	mov	r8, r2
 8001886:	2300      	movs	r3, #0
 8001888:	e57a      	b.n	8001380 <__aeabi_ddiv+0xd8>
 800188a:	4649      	mov	r1, r9
 800188c:	9f00      	ldr	r7, [sp, #0]
 800188e:	004d      	lsls	r5, r1, #1
 8001890:	454d      	cmp	r5, r9
 8001892:	4189      	sbcs	r1, r1
 8001894:	46bc      	mov	ip, r7
 8001896:	4249      	negs	r1, r1
 8001898:	4461      	add	r1, ip
 800189a:	46a9      	mov	r9, r5
 800189c:	3a02      	subs	r2, #2
 800189e:	1864      	adds	r4, r4, r1
 80018a0:	e7ae      	b.n	8001800 <__aeabi_ddiv+0x558>
 80018a2:	2201      	movs	r2, #1
 80018a4:	4252      	negs	r2, r2
 80018a6:	e746      	b.n	8001736 <__aeabi_ddiv+0x48e>
 80018a8:	4599      	cmp	r9, r3
 80018aa:	d3ee      	bcc.n	800188a <__aeabi_ddiv+0x5e2>
 80018ac:	000a      	movs	r2, r1
 80018ae:	e7aa      	b.n	8001806 <__aeabi_ddiv+0x55e>
 80018b0:	2100      	movs	r1, #0
 80018b2:	e7e5      	b.n	8001880 <__aeabi_ddiv+0x5d8>
 80018b4:	0759      	lsls	r1, r3, #29
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	0b1c      	lsrs	r4, r3, #12
 80018ba:	e7e1      	b.n	8001880 <__aeabi_ddiv+0x5d8>
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	000007ff 	.word	0x000007ff
 80018cc:	0000041e 	.word	0x0000041e
 80018d0:	fffffc02 	.word	0xfffffc02
 80018d4:	0000043e 	.word	0x0000043e

080018d8 <__eqdf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	4657      	mov	r7, sl
 80018dc:	46de      	mov	lr, fp
 80018de:	464e      	mov	r6, r9
 80018e0:	4645      	mov	r5, r8
 80018e2:	b5e0      	push	{r5, r6, r7, lr}
 80018e4:	000d      	movs	r5, r1
 80018e6:	0004      	movs	r4, r0
 80018e8:	0fe8      	lsrs	r0, r5, #31
 80018ea:	4683      	mov	fp, r0
 80018ec:	0309      	lsls	r1, r1, #12
 80018ee:	0fd8      	lsrs	r0, r3, #31
 80018f0:	0b09      	lsrs	r1, r1, #12
 80018f2:	4682      	mov	sl, r0
 80018f4:	4819      	ldr	r0, [pc, #100]	@ (800195c <__eqdf2+0x84>)
 80018f6:	468c      	mov	ip, r1
 80018f8:	031f      	lsls	r7, r3, #12
 80018fa:	0069      	lsls	r1, r5, #1
 80018fc:	005e      	lsls	r6, r3, #1
 80018fe:	0d49      	lsrs	r1, r1, #21
 8001900:	0b3f      	lsrs	r7, r7, #12
 8001902:	0d76      	lsrs	r6, r6, #21
 8001904:	4281      	cmp	r1, r0
 8001906:	d018      	beq.n	800193a <__eqdf2+0x62>
 8001908:	4286      	cmp	r6, r0
 800190a:	d00f      	beq.n	800192c <__eqdf2+0x54>
 800190c:	2001      	movs	r0, #1
 800190e:	42b1      	cmp	r1, r6
 8001910:	d10d      	bne.n	800192e <__eqdf2+0x56>
 8001912:	45bc      	cmp	ip, r7
 8001914:	d10b      	bne.n	800192e <__eqdf2+0x56>
 8001916:	4294      	cmp	r4, r2
 8001918:	d109      	bne.n	800192e <__eqdf2+0x56>
 800191a:	45d3      	cmp	fp, sl
 800191c:	d01c      	beq.n	8001958 <__eqdf2+0x80>
 800191e:	2900      	cmp	r1, #0
 8001920:	d105      	bne.n	800192e <__eqdf2+0x56>
 8001922:	4660      	mov	r0, ip
 8001924:	4320      	orrs	r0, r4
 8001926:	1e43      	subs	r3, r0, #1
 8001928:	4198      	sbcs	r0, r3
 800192a:	e000      	b.n	800192e <__eqdf2+0x56>
 800192c:	2001      	movs	r0, #1
 800192e:	bcf0      	pop	{r4, r5, r6, r7}
 8001930:	46bb      	mov	fp, r7
 8001932:	46b2      	mov	sl, r6
 8001934:	46a9      	mov	r9, r5
 8001936:	46a0      	mov	r8, r4
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	2001      	movs	r0, #1
 800193c:	428e      	cmp	r6, r1
 800193e:	d1f6      	bne.n	800192e <__eqdf2+0x56>
 8001940:	4661      	mov	r1, ip
 8001942:	4339      	orrs	r1, r7
 8001944:	000f      	movs	r7, r1
 8001946:	4317      	orrs	r7, r2
 8001948:	4327      	orrs	r7, r4
 800194a:	d1f0      	bne.n	800192e <__eqdf2+0x56>
 800194c:	465b      	mov	r3, fp
 800194e:	4652      	mov	r2, sl
 8001950:	1a98      	subs	r0, r3, r2
 8001952:	1e43      	subs	r3, r0, #1
 8001954:	4198      	sbcs	r0, r3
 8001956:	e7ea      	b.n	800192e <__eqdf2+0x56>
 8001958:	2000      	movs	r0, #0
 800195a:	e7e8      	b.n	800192e <__eqdf2+0x56>
 800195c:	000007ff 	.word	0x000007ff

08001960 <__gedf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4657      	mov	r7, sl
 8001964:	464e      	mov	r6, r9
 8001966:	4645      	mov	r5, r8
 8001968:	46de      	mov	lr, fp
 800196a:	b5e0      	push	{r5, r6, r7, lr}
 800196c:	000d      	movs	r5, r1
 800196e:	030e      	lsls	r6, r1, #12
 8001970:	0049      	lsls	r1, r1, #1
 8001972:	0d49      	lsrs	r1, r1, #21
 8001974:	468a      	mov	sl, r1
 8001976:	0fdf      	lsrs	r7, r3, #31
 8001978:	0fe9      	lsrs	r1, r5, #31
 800197a:	46bc      	mov	ip, r7
 800197c:	b083      	sub	sp, #12
 800197e:	4f2f      	ldr	r7, [pc, #188]	@ (8001a3c <__gedf2+0xdc>)
 8001980:	0004      	movs	r4, r0
 8001982:	4680      	mov	r8, r0
 8001984:	9101      	str	r1, [sp, #4]
 8001986:	0058      	lsls	r0, r3, #1
 8001988:	0319      	lsls	r1, r3, #12
 800198a:	4691      	mov	r9, r2
 800198c:	0b36      	lsrs	r6, r6, #12
 800198e:	0b09      	lsrs	r1, r1, #12
 8001990:	0d40      	lsrs	r0, r0, #21
 8001992:	45ba      	cmp	sl, r7
 8001994:	d01d      	beq.n	80019d2 <__gedf2+0x72>
 8001996:	42b8      	cmp	r0, r7
 8001998:	d00d      	beq.n	80019b6 <__gedf2+0x56>
 800199a:	4657      	mov	r7, sl
 800199c:	2f00      	cmp	r7, #0
 800199e:	d12a      	bne.n	80019f6 <__gedf2+0x96>
 80019a0:	4334      	orrs	r4, r6
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d124      	bne.n	80019f0 <__gedf2+0x90>
 80019a6:	430a      	orrs	r2, r1
 80019a8:	d036      	beq.n	8001a18 <__gedf2+0xb8>
 80019aa:	2c00      	cmp	r4, #0
 80019ac:	d141      	bne.n	8001a32 <__gedf2+0xd2>
 80019ae:	4663      	mov	r3, ip
 80019b0:	0058      	lsls	r0, r3, #1
 80019b2:	3801      	subs	r0, #1
 80019b4:	e015      	b.n	80019e2 <__gedf2+0x82>
 80019b6:	4311      	orrs	r1, r2
 80019b8:	d138      	bne.n	8001a2c <__gedf2+0xcc>
 80019ba:	4653      	mov	r3, sl
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <__gedf2+0x64>
 80019c0:	4326      	orrs	r6, r4
 80019c2:	d0f4      	beq.n	80019ae <__gedf2+0x4e>
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	4563      	cmp	r3, ip
 80019c8:	d107      	bne.n	80019da <__gedf2+0x7a>
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	0058      	lsls	r0, r3, #1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e007      	b.n	80019e2 <__gedf2+0x82>
 80019d2:	4326      	orrs	r6, r4
 80019d4:	d12a      	bne.n	8001a2c <__gedf2+0xcc>
 80019d6:	4550      	cmp	r0, sl
 80019d8:	d021      	beq.n	8001a1e <__gedf2+0xbe>
 80019da:	2001      	movs	r0, #1
 80019dc:	9b01      	ldr	r3, [sp, #4]
 80019de:	425f      	negs	r7, r3
 80019e0:	4338      	orrs	r0, r7
 80019e2:	b003      	add	sp, #12
 80019e4:	bcf0      	pop	{r4, r5, r6, r7}
 80019e6:	46bb      	mov	fp, r7
 80019e8:	46b2      	mov	sl, r6
 80019ea:	46a9      	mov	r9, r5
 80019ec:	46a0      	mov	r8, r4
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d0dc      	beq.n	80019ae <__gedf2+0x4e>
 80019f4:	e7e6      	b.n	80019c4 <__gedf2+0x64>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d0ef      	beq.n	80019da <__gedf2+0x7a>
 80019fa:	9b01      	ldr	r3, [sp, #4]
 80019fc:	4563      	cmp	r3, ip
 80019fe:	d1ec      	bne.n	80019da <__gedf2+0x7a>
 8001a00:	4582      	cmp	sl, r0
 8001a02:	dcea      	bgt.n	80019da <__gedf2+0x7a>
 8001a04:	dbe1      	blt.n	80019ca <__gedf2+0x6a>
 8001a06:	428e      	cmp	r6, r1
 8001a08:	d8e7      	bhi.n	80019da <__gedf2+0x7a>
 8001a0a:	d1de      	bne.n	80019ca <__gedf2+0x6a>
 8001a0c:	45c8      	cmp	r8, r9
 8001a0e:	d8e4      	bhi.n	80019da <__gedf2+0x7a>
 8001a10:	2000      	movs	r0, #0
 8001a12:	45c8      	cmp	r8, r9
 8001a14:	d2e5      	bcs.n	80019e2 <__gedf2+0x82>
 8001a16:	e7d8      	b.n	80019ca <__gedf2+0x6a>
 8001a18:	2c00      	cmp	r4, #0
 8001a1a:	d0e2      	beq.n	80019e2 <__gedf2+0x82>
 8001a1c:	e7dd      	b.n	80019da <__gedf2+0x7a>
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	d104      	bne.n	8001a2c <__gedf2+0xcc>
 8001a22:	9b01      	ldr	r3, [sp, #4]
 8001a24:	4563      	cmp	r3, ip
 8001a26:	d1d8      	bne.n	80019da <__gedf2+0x7a>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	e7da      	b.n	80019e2 <__gedf2+0x82>
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	4240      	negs	r0, r0
 8001a30:	e7d7      	b.n	80019e2 <__gedf2+0x82>
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	4563      	cmp	r3, ip
 8001a36:	d0e6      	beq.n	8001a06 <__gedf2+0xa6>
 8001a38:	e7cf      	b.n	80019da <__gedf2+0x7a>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	000007ff 	.word	0x000007ff

08001a40 <__ledf2>:
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a42:	4657      	mov	r7, sl
 8001a44:	464e      	mov	r6, r9
 8001a46:	4645      	mov	r5, r8
 8001a48:	46de      	mov	lr, fp
 8001a4a:	b5e0      	push	{r5, r6, r7, lr}
 8001a4c:	000d      	movs	r5, r1
 8001a4e:	030e      	lsls	r6, r1, #12
 8001a50:	0049      	lsls	r1, r1, #1
 8001a52:	0d49      	lsrs	r1, r1, #21
 8001a54:	468a      	mov	sl, r1
 8001a56:	0fdf      	lsrs	r7, r3, #31
 8001a58:	0fe9      	lsrs	r1, r5, #31
 8001a5a:	46bc      	mov	ip, r7
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	4f2e      	ldr	r7, [pc, #184]	@ (8001b18 <__ledf2+0xd8>)
 8001a60:	0004      	movs	r4, r0
 8001a62:	4680      	mov	r8, r0
 8001a64:	9101      	str	r1, [sp, #4]
 8001a66:	0058      	lsls	r0, r3, #1
 8001a68:	0319      	lsls	r1, r3, #12
 8001a6a:	4691      	mov	r9, r2
 8001a6c:	0b36      	lsrs	r6, r6, #12
 8001a6e:	0b09      	lsrs	r1, r1, #12
 8001a70:	0d40      	lsrs	r0, r0, #21
 8001a72:	45ba      	cmp	sl, r7
 8001a74:	d01e      	beq.n	8001ab4 <__ledf2+0x74>
 8001a76:	42b8      	cmp	r0, r7
 8001a78:	d00d      	beq.n	8001a96 <__ledf2+0x56>
 8001a7a:	4657      	mov	r7, sl
 8001a7c:	2f00      	cmp	r7, #0
 8001a7e:	d127      	bne.n	8001ad0 <__ledf2+0x90>
 8001a80:	4334      	orrs	r4, r6
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d133      	bne.n	8001aee <__ledf2+0xae>
 8001a86:	430a      	orrs	r2, r1
 8001a88:	d034      	beq.n	8001af4 <__ledf2+0xb4>
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d140      	bne.n	8001b10 <__ledf2+0xd0>
 8001a8e:	4663      	mov	r3, ip
 8001a90:	0058      	lsls	r0, r3, #1
 8001a92:	3801      	subs	r0, #1
 8001a94:	e015      	b.n	8001ac2 <__ledf2+0x82>
 8001a96:	4311      	orrs	r1, r2
 8001a98:	d112      	bne.n	8001ac0 <__ledf2+0x80>
 8001a9a:	4653      	mov	r3, sl
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <__ledf2+0x64>
 8001aa0:	4326      	orrs	r6, r4
 8001aa2:	d0f4      	beq.n	8001a8e <__ledf2+0x4e>
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	4563      	cmp	r3, ip
 8001aa8:	d01d      	beq.n	8001ae6 <__ledf2+0xa6>
 8001aaa:	2001      	movs	r0, #1
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	425f      	negs	r7, r3
 8001ab0:	4338      	orrs	r0, r7
 8001ab2:	e006      	b.n	8001ac2 <__ledf2+0x82>
 8001ab4:	4326      	orrs	r6, r4
 8001ab6:	d103      	bne.n	8001ac0 <__ledf2+0x80>
 8001ab8:	4550      	cmp	r0, sl
 8001aba:	d1f6      	bne.n	8001aaa <__ledf2+0x6a>
 8001abc:	4311      	orrs	r1, r2
 8001abe:	d01c      	beq.n	8001afa <__ledf2+0xba>
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	b003      	add	sp, #12
 8001ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac6:	46bb      	mov	fp, r7
 8001ac8:	46b2      	mov	sl, r6
 8001aca:	46a9      	mov	r9, r5
 8001acc:	46a0      	mov	r8, r4
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d0ea      	beq.n	8001aaa <__ledf2+0x6a>
 8001ad4:	9b01      	ldr	r3, [sp, #4]
 8001ad6:	4563      	cmp	r3, ip
 8001ad8:	d1e7      	bne.n	8001aaa <__ledf2+0x6a>
 8001ada:	4582      	cmp	sl, r0
 8001adc:	dce5      	bgt.n	8001aaa <__ledf2+0x6a>
 8001ade:	db02      	blt.n	8001ae6 <__ledf2+0xa6>
 8001ae0:	428e      	cmp	r6, r1
 8001ae2:	d8e2      	bhi.n	8001aaa <__ledf2+0x6a>
 8001ae4:	d00e      	beq.n	8001b04 <__ledf2+0xc4>
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	0058      	lsls	r0, r3, #1
 8001aea:	3801      	subs	r0, #1
 8001aec:	e7e9      	b.n	8001ac2 <__ledf2+0x82>
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d0cd      	beq.n	8001a8e <__ledf2+0x4e>
 8001af2:	e7d7      	b.n	8001aa4 <__ledf2+0x64>
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d0e4      	beq.n	8001ac2 <__ledf2+0x82>
 8001af8:	e7d7      	b.n	8001aaa <__ledf2+0x6a>
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	2000      	movs	r0, #0
 8001afe:	4563      	cmp	r3, ip
 8001b00:	d0df      	beq.n	8001ac2 <__ledf2+0x82>
 8001b02:	e7d2      	b.n	8001aaa <__ledf2+0x6a>
 8001b04:	45c8      	cmp	r8, r9
 8001b06:	d8d0      	bhi.n	8001aaa <__ledf2+0x6a>
 8001b08:	2000      	movs	r0, #0
 8001b0a:	45c8      	cmp	r8, r9
 8001b0c:	d2d9      	bcs.n	8001ac2 <__ledf2+0x82>
 8001b0e:	e7ea      	b.n	8001ae6 <__ledf2+0xa6>
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	4563      	cmp	r3, ip
 8001b14:	d0e4      	beq.n	8001ae0 <__ledf2+0xa0>
 8001b16:	e7c8      	b.n	8001aaa <__ledf2+0x6a>
 8001b18:	000007ff 	.word	0x000007ff

08001b1c <__aeabi_dmul>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	4657      	mov	r7, sl
 8001b20:	464e      	mov	r6, r9
 8001b22:	46de      	mov	lr, fp
 8001b24:	4645      	mov	r5, r8
 8001b26:	b5e0      	push	{r5, r6, r7, lr}
 8001b28:	001f      	movs	r7, r3
 8001b2a:	030b      	lsls	r3, r1, #12
 8001b2c:	0b1b      	lsrs	r3, r3, #12
 8001b2e:	0016      	movs	r6, r2
 8001b30:	469a      	mov	sl, r3
 8001b32:	0fca      	lsrs	r2, r1, #31
 8001b34:	004b      	lsls	r3, r1, #1
 8001b36:	0004      	movs	r4, r0
 8001b38:	4691      	mov	r9, r2
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	0d5b      	lsrs	r3, r3, #21
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0x26>
 8001b40:	e1cf      	b.n	8001ee2 <__aeabi_dmul+0x3c6>
 8001b42:	4acd      	ldr	r2, [pc, #820]	@ (8001e78 <__aeabi_dmul+0x35c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d055      	beq.n	8001bf4 <__aeabi_dmul+0xd8>
 8001b48:	4651      	mov	r1, sl
 8001b4a:	0f42      	lsrs	r2, r0, #29
 8001b4c:	00c9      	lsls	r1, r1, #3
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	0409      	lsls	r1, r1, #16
 8001b54:	4311      	orrs	r1, r2
 8001b56:	00c2      	lsls	r2, r0, #3
 8001b58:	4690      	mov	r8, r2
 8001b5a:	4ac8      	ldr	r2, [pc, #800]	@ (8001e7c <__aeabi_dmul+0x360>)
 8001b5c:	468a      	mov	sl, r1
 8001b5e:	4693      	mov	fp, r2
 8001b60:	449b      	add	fp, r3
 8001b62:	2300      	movs	r3, #0
 8001b64:	2500      	movs	r5, #0
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	033c      	lsls	r4, r7, #12
 8001b6a:	007b      	lsls	r3, r7, #1
 8001b6c:	0ffa      	lsrs	r2, r7, #31
 8001b6e:	9601      	str	r6, [sp, #4]
 8001b70:	0b24      	lsrs	r4, r4, #12
 8001b72:	0d5b      	lsrs	r3, r3, #21
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dmul+0x5e>
 8001b78:	e188      	b.n	8001e8c <__aeabi_dmul+0x370>
 8001b7a:	4abf      	ldr	r2, [pc, #764]	@ (8001e78 <__aeabi_dmul+0x35c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dmul+0x66>
 8001b80:	e092      	b.n	8001ca8 <__aeabi_dmul+0x18c>
 8001b82:	4abe      	ldr	r2, [pc, #760]	@ (8001e7c <__aeabi_dmul+0x360>)
 8001b84:	4694      	mov	ip, r2
 8001b86:	4463      	add	r3, ip
 8001b88:	449b      	add	fp, r3
 8001b8a:	2d0a      	cmp	r5, #10
 8001b8c:	dc42      	bgt.n	8001c14 <__aeabi_dmul+0xf8>
 8001b8e:	00e4      	lsls	r4, r4, #3
 8001b90:	0f73      	lsrs	r3, r6, #29
 8001b92:	4323      	orrs	r3, r4
 8001b94:	2480      	movs	r4, #128	@ 0x80
 8001b96:	4649      	mov	r1, r9
 8001b98:	0424      	lsls	r4, r4, #16
 8001b9a:	431c      	orrs	r4, r3
 8001b9c:	00f3      	lsls	r3, r6, #3
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	9b00      	ldr	r3, [sp, #0]
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	4059      	eors	r1, r3
 8001ba6:	b2cb      	uxtb	r3, r1
 8001ba8:	9303      	str	r3, [sp, #12]
 8001baa:	2d02      	cmp	r5, #2
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dmul+0x94>
 8001bae:	e094      	b.n	8001cda <__aeabi_dmul+0x1be>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	40ab      	lsls	r3, r5
 8001bb4:	001d      	movs	r5, r3
 8001bb6:	23a6      	movs	r3, #166	@ 0xa6
 8001bb8:	002a      	movs	r2, r5
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	421d      	tst	r5, r3
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dmul+0xa8>
 8001bc2:	e229      	b.n	8002018 <__aeabi_dmul+0x4fc>
 8001bc4:	2390      	movs	r3, #144	@ 0x90
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	421d      	tst	r5, r3
 8001bca:	d100      	bne.n	8001bce <__aeabi_dmul+0xb2>
 8001bcc:	e24d      	b.n	800206a <__aeabi_dmul+0x54e>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2480      	movs	r4, #128	@ 0x80
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	0324      	lsls	r4, r4, #12
 8001bd6:	4ba8      	ldr	r3, [pc, #672]	@ (8001e78 <__aeabi_dmul+0x35c>)
 8001bd8:	0010      	movs	r0, r2
 8001bda:	464a      	mov	r2, r9
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	4323      	orrs	r3, r4
 8001be0:	07d2      	lsls	r2, r2, #31
 8001be2:	4313      	orrs	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	b005      	add	sp, #20
 8001be8:	bcf0      	pop	{r4, r5, r6, r7}
 8001bea:	46bb      	mov	fp, r7
 8001bec:	46b2      	mov	sl, r6
 8001bee:	46a9      	mov	r9, r5
 8001bf0:	46a0      	mov	r8, r4
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf4:	4652      	mov	r2, sl
 8001bf6:	4302      	orrs	r2, r0
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_dmul+0xe2>
 8001bfc:	e1ac      	b.n	8001f58 <__aeabi_dmul+0x43c>
 8001bfe:	469b      	mov	fp, r3
 8001c00:	2302      	movs	r3, #2
 8001c02:	4692      	mov	sl, r2
 8001c04:	2508      	movs	r5, #8
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	e7ae      	b.n	8001b68 <__aeabi_dmul+0x4c>
 8001c0a:	9b00      	ldr	r3, [sp, #0]
 8001c0c:	46a2      	mov	sl, r4
 8001c0e:	4699      	mov	r9, r3
 8001c10:	9b01      	ldr	r3, [sp, #4]
 8001c12:	4698      	mov	r8, r3
 8001c14:	9b02      	ldr	r3, [sp, #8]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dmul+0x100>
 8001c1a:	e1ca      	b.n	8001fb2 <__aeabi_dmul+0x496>
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dmul+0x106>
 8001c20:	e192      	b.n	8001f48 <__aeabi_dmul+0x42c>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d110      	bne.n	8001c48 <__aeabi_dmul+0x12c>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2400      	movs	r4, #0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	e7d4      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 8001c2e:	2201      	movs	r2, #1
 8001c30:	087b      	lsrs	r3, r7, #1
 8001c32:	403a      	ands	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4652      	mov	r2, sl
 8001c38:	07d2      	lsls	r2, r2, #31
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	4698      	mov	r8, r3
 8001c3e:	4653      	mov	r3, sl
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	469a      	mov	sl, r3
 8001c44:	9b03      	ldr	r3, [sp, #12]
 8001c46:	4699      	mov	r9, r3
 8001c48:	465b      	mov	r3, fp
 8001c4a:	1c58      	adds	r0, r3, #1
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	445b      	add	r3, fp
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	dc00      	bgt.n	8001c58 <__aeabi_dmul+0x13c>
 8001c56:	e1b1      	b.n	8001fbc <__aeabi_dmul+0x4a0>
 8001c58:	4642      	mov	r2, r8
 8001c5a:	0752      	lsls	r2, r2, #29
 8001c5c:	d00b      	beq.n	8001c76 <__aeabi_dmul+0x15a>
 8001c5e:	220f      	movs	r2, #15
 8001c60:	4641      	mov	r1, r8
 8001c62:	400a      	ands	r2, r1
 8001c64:	2a04      	cmp	r2, #4
 8001c66:	d006      	beq.n	8001c76 <__aeabi_dmul+0x15a>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	1d11      	adds	r1, r2, #4
 8001c6c:	4541      	cmp	r1, r8
 8001c6e:	4192      	sbcs	r2, r2
 8001c70:	4688      	mov	r8, r1
 8001c72:	4252      	negs	r2, r2
 8001c74:	4492      	add	sl, r2
 8001c76:	4652      	mov	r2, sl
 8001c78:	01d2      	lsls	r2, r2, #7
 8001c7a:	d506      	bpl.n	8001c8a <__aeabi_dmul+0x16e>
 8001c7c:	4652      	mov	r2, sl
 8001c7e:	4b80      	ldr	r3, [pc, #512]	@ (8001e80 <__aeabi_dmul+0x364>)
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	4692      	mov	sl, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	18c3      	adds	r3, r0, r3
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e84 <__aeabi_dmul+0x368>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dmul+0x176>
 8001c90:	e18f      	b.n	8001fb2 <__aeabi_dmul+0x496>
 8001c92:	4642      	mov	r2, r8
 8001c94:	08d1      	lsrs	r1, r2, #3
 8001c96:	4652      	mov	r2, sl
 8001c98:	0752      	lsls	r2, r2, #29
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	4651      	mov	r1, sl
 8001c9e:	055b      	lsls	r3, r3, #21
 8001ca0:	024c      	lsls	r4, r1, #9
 8001ca2:	0b24      	lsrs	r4, r4, #12
 8001ca4:	0d5b      	lsrs	r3, r3, #21
 8001ca6:	e797      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 8001ca8:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <__aeabi_dmul+0x35c>)
 8001caa:	4326      	orrs	r6, r4
 8001cac:	469c      	mov	ip, r3
 8001cae:	44e3      	add	fp, ip
 8001cb0:	2e00      	cmp	r6, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dmul+0x19a>
 8001cb4:	e16f      	b.n	8001f96 <__aeabi_dmul+0x47a>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	4649      	mov	r1, r9
 8001cba:	431d      	orrs	r5, r3
 8001cbc:	9b00      	ldr	r3, [sp, #0]
 8001cbe:	4059      	eors	r1, r3
 8001cc0:	b2cb      	uxtb	r3, r1
 8001cc2:	9303      	str	r3, [sp, #12]
 8001cc4:	2d0a      	cmp	r5, #10
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_dmul+0x1ae>
 8001cc8:	e133      	b.n	8001f32 <__aeabi_dmul+0x416>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	40ab      	lsls	r3, r5
 8001cce:	001d      	movs	r5, r3
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2288      	movs	r2, #136	@ 0x88
 8001cd6:	422a      	tst	r2, r5
 8001cd8:	d197      	bne.n	8001c0a <__aeabi_dmul+0xee>
 8001cda:	4642      	mov	r2, r8
 8001cdc:	4643      	mov	r3, r8
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	0c12      	lsrs	r2, r2, #16
 8001ce2:	0016      	movs	r6, r2
 8001ce4:	9801      	ldr	r0, [sp, #4]
 8001ce6:	0c1d      	lsrs	r5, r3, #16
 8001ce8:	0c03      	lsrs	r3, r0, #16
 8001cea:	0400      	lsls	r0, r0, #16
 8001cec:	0c00      	lsrs	r0, r0, #16
 8001cee:	4346      	muls	r6, r0
 8001cf0:	46b4      	mov	ip, r6
 8001cf2:	001e      	movs	r6, r3
 8001cf4:	436e      	muls	r6, r5
 8001cf6:	9600      	str	r6, [sp, #0]
 8001cf8:	0016      	movs	r6, r2
 8001cfa:	0007      	movs	r7, r0
 8001cfc:	435e      	muls	r6, r3
 8001cfe:	4661      	mov	r1, ip
 8001d00:	46b0      	mov	r8, r6
 8001d02:	436f      	muls	r7, r5
 8001d04:	0c0e      	lsrs	r6, r1, #16
 8001d06:	44b8      	add	r8, r7
 8001d08:	4446      	add	r6, r8
 8001d0a:	42b7      	cmp	r7, r6
 8001d0c:	d905      	bls.n	8001d1a <__aeabi_dmul+0x1fe>
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	0249      	lsls	r1, r1, #9
 8001d12:	4688      	mov	r8, r1
 8001d14:	9f00      	ldr	r7, [sp, #0]
 8001d16:	4447      	add	r7, r8
 8001d18:	9700      	str	r7, [sp, #0]
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	0409      	lsls	r1, r1, #16
 8001d1e:	0c09      	lsrs	r1, r1, #16
 8001d20:	0c37      	lsrs	r7, r6, #16
 8001d22:	0436      	lsls	r6, r6, #16
 8001d24:	468c      	mov	ip, r1
 8001d26:	0031      	movs	r1, r6
 8001d28:	4461      	add	r1, ip
 8001d2a:	9101      	str	r1, [sp, #4]
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	0c26      	lsrs	r6, r4, #16
 8001d30:	0424      	lsls	r4, r4, #16
 8001d32:	0c24      	lsrs	r4, r4, #16
 8001d34:	4361      	muls	r1, r4
 8001d36:	468c      	mov	ip, r1
 8001d38:	0021      	movs	r1, r4
 8001d3a:	4369      	muls	r1, r5
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	4661      	mov	r1, ip
 8001d40:	0c09      	lsrs	r1, r1, #16
 8001d42:	4688      	mov	r8, r1
 8001d44:	4372      	muls	r2, r6
 8001d46:	444a      	add	r2, r9
 8001d48:	4442      	add	r2, r8
 8001d4a:	4375      	muls	r5, r6
 8001d4c:	4591      	cmp	r9, r2
 8001d4e:	d903      	bls.n	8001d58 <__aeabi_dmul+0x23c>
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	0249      	lsls	r1, r1, #9
 8001d54:	4688      	mov	r8, r1
 8001d56:	4445      	add	r5, r8
 8001d58:	0c11      	lsrs	r1, r2, #16
 8001d5a:	4688      	mov	r8, r1
 8001d5c:	4661      	mov	r1, ip
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	0c09      	lsrs	r1, r1, #16
 8001d62:	468c      	mov	ip, r1
 8001d64:	0412      	lsls	r2, r2, #16
 8001d66:	4462      	add	r2, ip
 8001d68:	18b9      	adds	r1, r7, r2
 8001d6a:	9102      	str	r1, [sp, #8]
 8001d6c:	4651      	mov	r1, sl
 8001d6e:	0c09      	lsrs	r1, r1, #16
 8001d70:	468c      	mov	ip, r1
 8001d72:	4651      	mov	r1, sl
 8001d74:	040f      	lsls	r7, r1, #16
 8001d76:	0c3f      	lsrs	r7, r7, #16
 8001d78:	0039      	movs	r1, r7
 8001d7a:	4341      	muls	r1, r0
 8001d7c:	4445      	add	r5, r8
 8001d7e:	4688      	mov	r8, r1
 8001d80:	4661      	mov	r1, ip
 8001d82:	4341      	muls	r1, r0
 8001d84:	468a      	mov	sl, r1
 8001d86:	4641      	mov	r1, r8
 8001d88:	4660      	mov	r0, ip
 8001d8a:	0c09      	lsrs	r1, r1, #16
 8001d8c:	4689      	mov	r9, r1
 8001d8e:	4358      	muls	r0, r3
 8001d90:	437b      	muls	r3, r7
 8001d92:	4453      	add	r3, sl
 8001d94:	444b      	add	r3, r9
 8001d96:	459a      	cmp	sl, r3
 8001d98:	d903      	bls.n	8001da2 <__aeabi_dmul+0x286>
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	0249      	lsls	r1, r1, #9
 8001d9e:	4689      	mov	r9, r1
 8001da0:	4448      	add	r0, r9
 8001da2:	0c19      	lsrs	r1, r3, #16
 8001da4:	4689      	mov	r9, r1
 8001da6:	4641      	mov	r1, r8
 8001da8:	0409      	lsls	r1, r1, #16
 8001daa:	0c09      	lsrs	r1, r1, #16
 8001dac:	4688      	mov	r8, r1
 8001dae:	0039      	movs	r1, r7
 8001db0:	4361      	muls	r1, r4
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	4443      	add	r3, r8
 8001db6:	4688      	mov	r8, r1
 8001db8:	4661      	mov	r1, ip
 8001dba:	434c      	muls	r4, r1
 8001dbc:	4371      	muls	r1, r6
 8001dbe:	468c      	mov	ip, r1
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	4377      	muls	r7, r6
 8001dc4:	0c0e      	lsrs	r6, r1, #16
 8001dc6:	193f      	adds	r7, r7, r4
 8001dc8:	19f6      	adds	r6, r6, r7
 8001dca:	4448      	add	r0, r9
 8001dcc:	42b4      	cmp	r4, r6
 8001dce:	d903      	bls.n	8001dd8 <__aeabi_dmul+0x2bc>
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	4689      	mov	r9, r1
 8001dd6:	44cc      	add	ip, r9
 8001dd8:	9902      	ldr	r1, [sp, #8]
 8001dda:	9f00      	ldr	r7, [sp, #0]
 8001ddc:	4689      	mov	r9, r1
 8001dde:	0431      	lsls	r1, r6, #16
 8001de0:	444f      	add	r7, r9
 8001de2:	4689      	mov	r9, r1
 8001de4:	4641      	mov	r1, r8
 8001de6:	4297      	cmp	r7, r2
 8001de8:	4192      	sbcs	r2, r2
 8001dea:	040c      	lsls	r4, r1, #16
 8001dec:	0c24      	lsrs	r4, r4, #16
 8001dee:	444c      	add	r4, r9
 8001df0:	18ff      	adds	r7, r7, r3
 8001df2:	4252      	negs	r2, r2
 8001df4:	1964      	adds	r4, r4, r5
 8001df6:	18a1      	adds	r1, r4, r2
 8001df8:	429f      	cmp	r7, r3
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	4688      	mov	r8, r1
 8001dfe:	4682      	mov	sl, r0
 8001e00:	425b      	negs	r3, r3
 8001e02:	4699      	mov	r9, r3
 8001e04:	4590      	cmp	r8, r2
 8001e06:	4192      	sbcs	r2, r2
 8001e08:	42ac      	cmp	r4, r5
 8001e0a:	41a4      	sbcs	r4, r4
 8001e0c:	44c2      	add	sl, r8
 8001e0e:	44d1      	add	r9, sl
 8001e10:	4252      	negs	r2, r2
 8001e12:	4264      	negs	r4, r4
 8001e14:	4314      	orrs	r4, r2
 8001e16:	4599      	cmp	r9, r3
 8001e18:	419b      	sbcs	r3, r3
 8001e1a:	4582      	cmp	sl, r0
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	425b      	negs	r3, r3
 8001e20:	4252      	negs	r2, r2
 8001e22:	4313      	orrs	r3, r2
 8001e24:	464a      	mov	r2, r9
 8001e26:	0c36      	lsrs	r6, r6, #16
 8001e28:	19a4      	adds	r4, r4, r6
 8001e2a:	18e3      	adds	r3, r4, r3
 8001e2c:	4463      	add	r3, ip
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	0dd2      	lsrs	r2, r2, #23
 8001e32:	431a      	orrs	r2, r3
 8001e34:	9901      	ldr	r1, [sp, #4]
 8001e36:	4692      	mov	sl, r2
 8001e38:	027a      	lsls	r2, r7, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	1e50      	subs	r0, r2, #1
 8001e3e:	4182      	sbcs	r2, r0
 8001e40:	0dff      	lsrs	r7, r7, #23
 8001e42:	4317      	orrs	r7, r2
 8001e44:	464a      	mov	r2, r9
 8001e46:	0252      	lsls	r2, r2, #9
 8001e48:	4317      	orrs	r7, r2
 8001e4a:	46b8      	mov	r8, r7
 8001e4c:	01db      	lsls	r3, r3, #7
 8001e4e:	d500      	bpl.n	8001e52 <__aeabi_dmul+0x336>
 8001e50:	e6ed      	b.n	8001c2e <__aeabi_dmul+0x112>
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <__aeabi_dmul+0x36c>)
 8001e54:	9a03      	ldr	r2, [sp, #12]
 8001e56:	445b      	add	r3, fp
 8001e58:	4691      	mov	r9, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dc00      	bgt.n	8001e60 <__aeabi_dmul+0x344>
 8001e5e:	e0ac      	b.n	8001fba <__aeabi_dmul+0x49e>
 8001e60:	003a      	movs	r2, r7
 8001e62:	0752      	lsls	r2, r2, #29
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dmul+0x34c>
 8001e66:	e710      	b.n	8001c8a <__aeabi_dmul+0x16e>
 8001e68:	220f      	movs	r2, #15
 8001e6a:	4658      	mov	r0, fp
 8001e6c:	403a      	ands	r2, r7
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dmul+0x358>
 8001e72:	e6f9      	b.n	8001c68 <__aeabi_dmul+0x14c>
 8001e74:	e709      	b.n	8001c8a <__aeabi_dmul+0x16e>
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff
 8001e7c:	fffffc01 	.word	0xfffffc01
 8001e80:	feffffff 	.word	0xfeffffff
 8001e84:	000007fe 	.word	0x000007fe
 8001e88:	000003ff 	.word	0x000003ff
 8001e8c:	0022      	movs	r2, r4
 8001e8e:	4332      	orrs	r2, r6
 8001e90:	d06f      	beq.n	8001f72 <__aeabi_dmul+0x456>
 8001e92:	2c00      	cmp	r4, #0
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x37c>
 8001e96:	e0c2      	b.n	800201e <__aeabi_dmul+0x502>
 8001e98:	0020      	movs	r0, r4
 8001e9a:	f000 fe27 	bl	8002aec <__clzsi2>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	3a0b      	subs	r2, #11
 8001ea4:	201d      	movs	r0, #29
 8001ea6:	1a82      	subs	r2, r0, r2
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	0019      	movs	r1, r3
 8001eac:	40d0      	lsrs	r0, r2
 8001eae:	3908      	subs	r1, #8
 8001eb0:	408c      	lsls	r4, r1
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	4322      	orrs	r2, r4
 8001eb6:	0034      	movs	r4, r6
 8001eb8:	408c      	lsls	r4, r1
 8001eba:	4659      	mov	r1, fp
 8001ebc:	1acb      	subs	r3, r1, r3
 8001ebe:	4986      	ldr	r1, [pc, #536]	@ (80020d8 <__aeabi_dmul+0x5bc>)
 8001ec0:	468b      	mov	fp, r1
 8001ec2:	449b      	add	fp, r3
 8001ec4:	2d0a      	cmp	r5, #10
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dmul+0x3ae>
 8001ec8:	e6a4      	b.n	8001c14 <__aeabi_dmul+0xf8>
 8001eca:	4649      	mov	r1, r9
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	9401      	str	r4, [sp, #4]
 8001ed0:	4059      	eors	r1, r3
 8001ed2:	b2cb      	uxtb	r3, r1
 8001ed4:	0014      	movs	r4, r2
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	9303      	str	r3, [sp, #12]
 8001eda:	2d02      	cmp	r5, #2
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dmul+0x3c4>
 8001ede:	e667      	b.n	8001bb0 <__aeabi_dmul+0x94>
 8001ee0:	e6fb      	b.n	8001cda <__aeabi_dmul+0x1be>
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	4303      	orrs	r3, r0
 8001ee6:	4698      	mov	r8, r3
 8001ee8:	d03c      	beq.n	8001f64 <__aeabi_dmul+0x448>
 8001eea:	4653      	mov	r3, sl
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x3d6>
 8001ef0:	e0a3      	b.n	800203a <__aeabi_dmul+0x51e>
 8001ef2:	4650      	mov	r0, sl
 8001ef4:	f000 fdfa 	bl	8002aec <__clzsi2>
 8001ef8:	230b      	movs	r3, #11
 8001efa:	425b      	negs	r3, r3
 8001efc:	469c      	mov	ip, r3
 8001efe:	0002      	movs	r2, r0
 8001f00:	4484      	add	ip, r0
 8001f02:	0011      	movs	r1, r2
 8001f04:	4650      	mov	r0, sl
 8001f06:	3908      	subs	r1, #8
 8001f08:	4088      	lsls	r0, r1
 8001f0a:	231d      	movs	r3, #29
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4660      	mov	r0, ip
 8001f10:	1a1b      	subs	r3, r3, r0
 8001f12:	0020      	movs	r0, r4
 8001f14:	40d8      	lsrs	r0, r3
 8001f16:	0003      	movs	r3, r0
 8001f18:	4640      	mov	r0, r8
 8001f1a:	4303      	orrs	r3, r0
 8001f1c:	469a      	mov	sl, r3
 8001f1e:	0023      	movs	r3, r4
 8001f20:	408b      	lsls	r3, r1
 8001f22:	4698      	mov	r8, r3
 8001f24:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <__aeabi_dmul+0x5bc>)
 8001f26:	2500      	movs	r5, #0
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	e61a      	b.n	8001b68 <__aeabi_dmul+0x4c>
 8001f32:	2d0f      	cmp	r5, #15
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dmul+0x41c>
 8001f36:	e0c9      	b.n	80020cc <__aeabi_dmul+0x5b0>
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	4652      	mov	r2, sl
 8001f3c:	031b      	lsls	r3, r3, #12
 8001f3e:	421a      	tst	r2, r3
 8001f40:	d002      	beq.n	8001f48 <__aeabi_dmul+0x42c>
 8001f42:	421c      	tst	r4, r3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dmul+0x42c>
 8001f46:	e092      	b.n	800206e <__aeabi_dmul+0x552>
 8001f48:	2480      	movs	r4, #128	@ 0x80
 8001f4a:	4653      	mov	r3, sl
 8001f4c:	0324      	lsls	r4, r4, #12
 8001f4e:	431c      	orrs	r4, r3
 8001f50:	0324      	lsls	r4, r4, #12
 8001f52:	4642      	mov	r2, r8
 8001f54:	0b24      	lsrs	r4, r4, #12
 8001f56:	e63e      	b.n	8001bd6 <__aeabi_dmul+0xba>
 8001f58:	469b      	mov	fp, r3
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	250c      	movs	r5, #12
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	e601      	b.n	8001b68 <__aeabi_dmul+0x4c>
 8001f64:	2300      	movs	r3, #0
 8001f66:	469a      	mov	sl, r3
 8001f68:	469b      	mov	fp, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	2504      	movs	r5, #4
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	e5fa      	b.n	8001b68 <__aeabi_dmul+0x4c>
 8001f72:	2101      	movs	r1, #1
 8001f74:	430d      	orrs	r5, r1
 8001f76:	2d0a      	cmp	r5, #10
 8001f78:	dd00      	ble.n	8001f7c <__aeabi_dmul+0x460>
 8001f7a:	e64b      	b.n	8001c14 <__aeabi_dmul+0xf8>
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	9800      	ldr	r0, [sp, #0]
 8001f80:	4041      	eors	r1, r0
 8001f82:	b2c9      	uxtb	r1, r1
 8001f84:	9103      	str	r1, [sp, #12]
 8001f86:	2d02      	cmp	r5, #2
 8001f88:	dc00      	bgt.n	8001f8c <__aeabi_dmul+0x470>
 8001f8a:	e096      	b.n	80020ba <__aeabi_dmul+0x59e>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2001      	movs	r0, #1
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	e60c      	b.n	8001bb0 <__aeabi_dmul+0x94>
 8001f96:	4649      	mov	r1, r9
 8001f98:	2302      	movs	r3, #2
 8001f9a:	9a00      	ldr	r2, [sp, #0]
 8001f9c:	432b      	orrs	r3, r5
 8001f9e:	4051      	eors	r1, r2
 8001fa0:	b2ca      	uxtb	r2, r1
 8001fa2:	9203      	str	r2, [sp, #12]
 8001fa4:	2b0a      	cmp	r3, #10
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_dmul+0x48e>
 8001fa8:	e634      	b.n	8001c14 <__aeabi_dmul+0xf8>
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d157      	bne.n	800205e <__aeabi_dmul+0x542>
 8001fae:	9b03      	ldr	r3, [sp, #12]
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <__aeabi_dmul+0x5c0>)
 8001fb8:	e60e      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 8001fba:	4658      	mov	r0, fp
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	1ac9      	subs	r1, r1, r3
 8001fc0:	2938      	cmp	r1, #56	@ 0x38
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_dmul+0x4aa>
 8001fc4:	e62f      	b.n	8001c26 <__aeabi_dmul+0x10a>
 8001fc6:	291f      	cmp	r1, #31
 8001fc8:	dd56      	ble.n	8002078 <__aeabi_dmul+0x55c>
 8001fca:	221f      	movs	r2, #31
 8001fcc:	4654      	mov	r4, sl
 8001fce:	4252      	negs	r2, r2
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	40dc      	lsrs	r4, r3
 8001fd4:	2920      	cmp	r1, #32
 8001fd6:	d007      	beq.n	8001fe8 <__aeabi_dmul+0x4cc>
 8001fd8:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <__aeabi_dmul+0x5c4>)
 8001fda:	4642      	mov	r2, r8
 8001fdc:	469c      	mov	ip, r3
 8001fde:	4653      	mov	r3, sl
 8001fe0:	4460      	add	r0, ip
 8001fe2:	4083      	lsls	r3, r0
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	4642      	mov	r2, r8
 8001fea:	2107      	movs	r1, #7
 8001fec:	1e53      	subs	r3, r2, #1
 8001fee:	419a      	sbcs	r2, r3
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	4322      	orrs	r2, r4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	4211      	tst	r1, r2
 8001ffa:	d009      	beq.n	8002010 <__aeabi_dmul+0x4f4>
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b04      	cmp	r3, #4
 8002002:	d05d      	beq.n	80020c0 <__aeabi_dmul+0x5a4>
 8002004:	1d11      	adds	r1, r2, #4
 8002006:	4291      	cmp	r1, r2
 8002008:	419b      	sbcs	r3, r3
 800200a:	000a      	movs	r2, r1
 800200c:	425b      	negs	r3, r3
 800200e:	075b      	lsls	r3, r3, #29
 8002010:	08d2      	lsrs	r2, r2, #3
 8002012:	431a      	orrs	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	e5df      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 8002018:	9b03      	ldr	r3, [sp, #12]
 800201a:	4699      	mov	r9, r3
 800201c:	e5fa      	b.n	8001c14 <__aeabi_dmul+0xf8>
 800201e:	9801      	ldr	r0, [sp, #4]
 8002020:	f000 fd64 	bl	8002aec <__clzsi2>
 8002024:	0002      	movs	r2, r0
 8002026:	0003      	movs	r3, r0
 8002028:	3215      	adds	r2, #21
 800202a:	3320      	adds	r3, #32
 800202c:	2a1c      	cmp	r2, #28
 800202e:	dc00      	bgt.n	8002032 <__aeabi_dmul+0x516>
 8002030:	e738      	b.n	8001ea4 <__aeabi_dmul+0x388>
 8002032:	9a01      	ldr	r2, [sp, #4]
 8002034:	3808      	subs	r0, #8
 8002036:	4082      	lsls	r2, r0
 8002038:	e73f      	b.n	8001eba <__aeabi_dmul+0x39e>
 800203a:	f000 fd57 	bl	8002aec <__clzsi2>
 800203e:	2315      	movs	r3, #21
 8002040:	469c      	mov	ip, r3
 8002042:	4484      	add	ip, r0
 8002044:	0002      	movs	r2, r0
 8002046:	4663      	mov	r3, ip
 8002048:	3220      	adds	r2, #32
 800204a:	2b1c      	cmp	r3, #28
 800204c:	dc00      	bgt.n	8002050 <__aeabi_dmul+0x534>
 800204e:	e758      	b.n	8001f02 <__aeabi_dmul+0x3e6>
 8002050:	2300      	movs	r3, #0
 8002052:	4698      	mov	r8, r3
 8002054:	0023      	movs	r3, r4
 8002056:	3808      	subs	r0, #8
 8002058:	4083      	lsls	r3, r0
 800205a:	469a      	mov	sl, r3
 800205c:	e762      	b.n	8001f24 <__aeabi_dmul+0x408>
 800205e:	001d      	movs	r5, r3
 8002060:	2300      	movs	r3, #0
 8002062:	2400      	movs	r4, #0
 8002064:	2002      	movs	r0, #2
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	e5a2      	b.n	8001bb0 <__aeabi_dmul+0x94>
 800206a:	9002      	str	r0, [sp, #8]
 800206c:	e632      	b.n	8001cd4 <__aeabi_dmul+0x1b8>
 800206e:	431c      	orrs	r4, r3
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	9a01      	ldr	r2, [sp, #4]
 8002074:	4699      	mov	r9, r3
 8002076:	e5ae      	b.n	8001bd6 <__aeabi_dmul+0xba>
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <__aeabi_dmul+0x5c8>)
 800207a:	4652      	mov	r2, sl
 800207c:	18c3      	adds	r3, r0, r3
 800207e:	4640      	mov	r0, r8
 8002080:	409a      	lsls	r2, r3
 8002082:	40c8      	lsrs	r0, r1
 8002084:	4302      	orrs	r2, r0
 8002086:	4640      	mov	r0, r8
 8002088:	4098      	lsls	r0, r3
 800208a:	0003      	movs	r3, r0
 800208c:	1e58      	subs	r0, r3, #1
 800208e:	4183      	sbcs	r3, r0
 8002090:	4654      	mov	r4, sl
 8002092:	431a      	orrs	r2, r3
 8002094:	40cc      	lsrs	r4, r1
 8002096:	0753      	lsls	r3, r2, #29
 8002098:	d009      	beq.n	80020ae <__aeabi_dmul+0x592>
 800209a:	230f      	movs	r3, #15
 800209c:	4013      	ands	r3, r2
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d005      	beq.n	80020ae <__aeabi_dmul+0x592>
 80020a2:	1d13      	adds	r3, r2, #4
 80020a4:	4293      	cmp	r3, r2
 80020a6:	4192      	sbcs	r2, r2
 80020a8:	4252      	negs	r2, r2
 80020aa:	18a4      	adds	r4, r4, r2
 80020ac:	001a      	movs	r2, r3
 80020ae:	0223      	lsls	r3, r4, #8
 80020b0:	d508      	bpl.n	80020c4 <__aeabi_dmul+0x5a8>
 80020b2:	2301      	movs	r3, #1
 80020b4:	2400      	movs	r4, #0
 80020b6:	2200      	movs	r2, #0
 80020b8:	e58e      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 80020ba:	4689      	mov	r9, r1
 80020bc:	2400      	movs	r4, #0
 80020be:	e58b      	b.n	8001bd8 <__aeabi_dmul+0xbc>
 80020c0:	2300      	movs	r3, #0
 80020c2:	e7a5      	b.n	8002010 <__aeabi_dmul+0x4f4>
 80020c4:	0763      	lsls	r3, r4, #29
 80020c6:	0264      	lsls	r4, r4, #9
 80020c8:	0b24      	lsrs	r4, r4, #12
 80020ca:	e7a1      	b.n	8002010 <__aeabi_dmul+0x4f4>
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	46a2      	mov	sl, r4
 80020d0:	4699      	mov	r9, r3
 80020d2:	9b01      	ldr	r3, [sp, #4]
 80020d4:	4698      	mov	r8, r3
 80020d6:	e737      	b.n	8001f48 <__aeabi_dmul+0x42c>
 80020d8:	fffffc0d 	.word	0xfffffc0d
 80020dc:	000007ff 	.word	0x000007ff
 80020e0:	0000043e 	.word	0x0000043e
 80020e4:	0000041e 	.word	0x0000041e

080020e8 <__aeabi_dsub>:
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	4657      	mov	r7, sl
 80020ec:	464e      	mov	r6, r9
 80020ee:	4645      	mov	r5, r8
 80020f0:	46de      	mov	lr, fp
 80020f2:	b5e0      	push	{r5, r6, r7, lr}
 80020f4:	b083      	sub	sp, #12
 80020f6:	9000      	str	r0, [sp, #0]
 80020f8:	9101      	str	r1, [sp, #4]
 80020fa:	030c      	lsls	r4, r1, #12
 80020fc:	004d      	lsls	r5, r1, #1
 80020fe:	0fce      	lsrs	r6, r1, #31
 8002100:	0a61      	lsrs	r1, r4, #9
 8002102:	9c00      	ldr	r4, [sp, #0]
 8002104:	005f      	lsls	r7, r3, #1
 8002106:	0f64      	lsrs	r4, r4, #29
 8002108:	430c      	orrs	r4, r1
 800210a:	9900      	ldr	r1, [sp, #0]
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	00c8      	lsls	r0, r1, #3
 8002112:	0319      	lsls	r1, r3, #12
 8002114:	0d7b      	lsrs	r3, r7, #21
 8002116:	4699      	mov	r9, r3
 8002118:	9b01      	ldr	r3, [sp, #4]
 800211a:	4fcc      	ldr	r7, [pc, #816]	@ (800244c <__aeabi_dsub+0x364>)
 800211c:	0fdb      	lsrs	r3, r3, #31
 800211e:	469c      	mov	ip, r3
 8002120:	0a4b      	lsrs	r3, r1, #9
 8002122:	9900      	ldr	r1, [sp, #0]
 8002124:	4680      	mov	r8, r0
 8002126:	0f49      	lsrs	r1, r1, #29
 8002128:	4319      	orrs	r1, r3
 800212a:	9b00      	ldr	r3, [sp, #0]
 800212c:	468b      	mov	fp, r1
 800212e:	00da      	lsls	r2, r3, #3
 8002130:	4692      	mov	sl, r2
 8002132:	0d6d      	lsrs	r5, r5, #21
 8002134:	45b9      	cmp	r9, r7
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x52>
 8002138:	e0bf      	b.n	80022ba <__aeabi_dsub+0x1d2>
 800213a:	2301      	movs	r3, #1
 800213c:	4661      	mov	r1, ip
 800213e:	4059      	eors	r1, r3
 8002140:	464b      	mov	r3, r9
 8002142:	468c      	mov	ip, r1
 8002144:	1aeb      	subs	r3, r5, r3
 8002146:	428e      	cmp	r6, r1
 8002148:	d075      	beq.n	8002236 <__aeabi_dsub+0x14e>
 800214a:	2b00      	cmp	r3, #0
 800214c:	dc00      	bgt.n	8002150 <__aeabi_dsub+0x68>
 800214e:	e2a3      	b.n	8002698 <__aeabi_dsub+0x5b0>
 8002150:	4649      	mov	r1, r9
 8002152:	2900      	cmp	r1, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x70>
 8002156:	e0ce      	b.n	80022f6 <__aeabi_dsub+0x20e>
 8002158:	42bd      	cmp	r5, r7
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x76>
 800215c:	e200      	b.n	8002560 <__aeabi_dsub+0x478>
 800215e:	2701      	movs	r7, #1
 8002160:	2b38      	cmp	r3, #56	@ 0x38
 8002162:	dc19      	bgt.n	8002198 <__aeabi_dsub+0xb0>
 8002164:	2780      	movs	r7, #128	@ 0x80
 8002166:	4659      	mov	r1, fp
 8002168:	043f      	lsls	r7, r7, #16
 800216a:	4339      	orrs	r1, r7
 800216c:	468b      	mov	fp, r1
 800216e:	2b1f      	cmp	r3, #31
 8002170:	dd00      	ble.n	8002174 <__aeabi_dsub+0x8c>
 8002172:	e1fa      	b.n	800256a <__aeabi_dsub+0x482>
 8002174:	2720      	movs	r7, #32
 8002176:	1af9      	subs	r1, r7, r3
 8002178:	468c      	mov	ip, r1
 800217a:	4659      	mov	r1, fp
 800217c:	4667      	mov	r7, ip
 800217e:	40b9      	lsls	r1, r7
 8002180:	000f      	movs	r7, r1
 8002182:	0011      	movs	r1, r2
 8002184:	40d9      	lsrs	r1, r3
 8002186:	430f      	orrs	r7, r1
 8002188:	4661      	mov	r1, ip
 800218a:	408a      	lsls	r2, r1
 800218c:	1e51      	subs	r1, r2, #1
 800218e:	418a      	sbcs	r2, r1
 8002190:	4659      	mov	r1, fp
 8002192:	40d9      	lsrs	r1, r3
 8002194:	4317      	orrs	r7, r2
 8002196:	1a64      	subs	r4, r4, r1
 8002198:	1bc7      	subs	r7, r0, r7
 800219a:	42b8      	cmp	r0, r7
 800219c:	4180      	sbcs	r0, r0
 800219e:	4240      	negs	r0, r0
 80021a0:	1a24      	subs	r4, r4, r0
 80021a2:	0223      	lsls	r3, r4, #8
 80021a4:	d400      	bmi.n	80021a8 <__aeabi_dsub+0xc0>
 80021a6:	e140      	b.n	800242a <__aeabi_dsub+0x342>
 80021a8:	0264      	lsls	r4, r4, #9
 80021aa:	0a64      	lsrs	r4, r4, #9
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0xca>
 80021b0:	e154      	b.n	800245c <__aeabi_dsub+0x374>
 80021b2:	0020      	movs	r0, r4
 80021b4:	f000 fc9a 	bl	8002aec <__clzsi2>
 80021b8:	0003      	movs	r3, r0
 80021ba:	3b08      	subs	r3, #8
 80021bc:	2120      	movs	r1, #32
 80021be:	0038      	movs	r0, r7
 80021c0:	1aca      	subs	r2, r1, r3
 80021c2:	40d0      	lsrs	r0, r2
 80021c4:	409c      	lsls	r4, r3
 80021c6:	0002      	movs	r2, r0
 80021c8:	409f      	lsls	r7, r3
 80021ca:	4322      	orrs	r2, r4
 80021cc:	429d      	cmp	r5, r3
 80021ce:	dd00      	ble.n	80021d2 <__aeabi_dsub+0xea>
 80021d0:	e1a6      	b.n	8002520 <__aeabi_dsub+0x438>
 80021d2:	1b58      	subs	r0, r3, r5
 80021d4:	3001      	adds	r0, #1
 80021d6:	1a09      	subs	r1, r1, r0
 80021d8:	003c      	movs	r4, r7
 80021da:	408f      	lsls	r7, r1
 80021dc:	40c4      	lsrs	r4, r0
 80021de:	1e7b      	subs	r3, r7, #1
 80021e0:	419f      	sbcs	r7, r3
 80021e2:	0013      	movs	r3, r2
 80021e4:	408b      	lsls	r3, r1
 80021e6:	4327      	orrs	r7, r4
 80021e8:	431f      	orrs	r7, r3
 80021ea:	40c2      	lsrs	r2, r0
 80021ec:	003b      	movs	r3, r7
 80021ee:	0014      	movs	r4, r2
 80021f0:	2500      	movs	r5, #0
 80021f2:	4313      	orrs	r3, r2
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x110>
 80021f6:	e1f7      	b.n	80025e8 <__aeabi_dsub+0x500>
 80021f8:	077b      	lsls	r3, r7, #29
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x116>
 80021fc:	e377      	b.n	80028ee <__aeabi_dsub+0x806>
 80021fe:	230f      	movs	r3, #15
 8002200:	0038      	movs	r0, r7
 8002202:	403b      	ands	r3, r7
 8002204:	2b04      	cmp	r3, #4
 8002206:	d004      	beq.n	8002212 <__aeabi_dsub+0x12a>
 8002208:	1d38      	adds	r0, r7, #4
 800220a:	42b8      	cmp	r0, r7
 800220c:	41bf      	sbcs	r7, r7
 800220e:	427f      	negs	r7, r7
 8002210:	19e4      	adds	r4, r4, r7
 8002212:	0223      	lsls	r3, r4, #8
 8002214:	d400      	bmi.n	8002218 <__aeabi_dsub+0x130>
 8002216:	e368      	b.n	80028ea <__aeabi_dsub+0x802>
 8002218:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <__aeabi_dsub+0x364>)
 800221a:	3501      	adds	r5, #1
 800221c:	429d      	cmp	r5, r3
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x13a>
 8002220:	e0f4      	b.n	800240c <__aeabi_dsub+0x324>
 8002222:	4b8b      	ldr	r3, [pc, #556]	@ (8002450 <__aeabi_dsub+0x368>)
 8002224:	056d      	lsls	r5, r5, #21
 8002226:	401c      	ands	r4, r3
 8002228:	0d6d      	lsrs	r5, r5, #21
 800222a:	0767      	lsls	r7, r4, #29
 800222c:	08c0      	lsrs	r0, r0, #3
 800222e:	0264      	lsls	r4, r4, #9
 8002230:	4307      	orrs	r7, r0
 8002232:	0b24      	lsrs	r4, r4, #12
 8002234:	e0ec      	b.n	8002410 <__aeabi_dsub+0x328>
 8002236:	2b00      	cmp	r3, #0
 8002238:	dc00      	bgt.n	800223c <__aeabi_dsub+0x154>
 800223a:	e329      	b.n	8002890 <__aeabi_dsub+0x7a8>
 800223c:	4649      	mov	r1, r9
 800223e:	2900      	cmp	r1, #0
 8002240:	d000      	beq.n	8002244 <__aeabi_dsub+0x15c>
 8002242:	e0d6      	b.n	80023f2 <__aeabi_dsub+0x30a>
 8002244:	4659      	mov	r1, fp
 8002246:	4311      	orrs	r1, r2
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x164>
 800224a:	e12e      	b.n	80024aa <__aeabi_dsub+0x3c2>
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x16c>
 8002252:	e1e6      	b.n	8002622 <__aeabi_dsub+0x53a>
 8002254:	42bb      	cmp	r3, r7
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x172>
 8002258:	e182      	b.n	8002560 <__aeabi_dsub+0x478>
 800225a:	2701      	movs	r7, #1
 800225c:	000b      	movs	r3, r1
 800225e:	2938      	cmp	r1, #56	@ 0x38
 8002260:	dc14      	bgt.n	800228c <__aeabi_dsub+0x1a4>
 8002262:	2b1f      	cmp	r3, #31
 8002264:	dd00      	ble.n	8002268 <__aeabi_dsub+0x180>
 8002266:	e23c      	b.n	80026e2 <__aeabi_dsub+0x5fa>
 8002268:	2720      	movs	r7, #32
 800226a:	1af9      	subs	r1, r7, r3
 800226c:	468c      	mov	ip, r1
 800226e:	4659      	mov	r1, fp
 8002270:	4667      	mov	r7, ip
 8002272:	40b9      	lsls	r1, r7
 8002274:	000f      	movs	r7, r1
 8002276:	0011      	movs	r1, r2
 8002278:	40d9      	lsrs	r1, r3
 800227a:	430f      	orrs	r7, r1
 800227c:	4661      	mov	r1, ip
 800227e:	408a      	lsls	r2, r1
 8002280:	1e51      	subs	r1, r2, #1
 8002282:	418a      	sbcs	r2, r1
 8002284:	4659      	mov	r1, fp
 8002286:	40d9      	lsrs	r1, r3
 8002288:	4317      	orrs	r7, r2
 800228a:	1864      	adds	r4, r4, r1
 800228c:	183f      	adds	r7, r7, r0
 800228e:	4287      	cmp	r7, r0
 8002290:	4180      	sbcs	r0, r0
 8002292:	4240      	negs	r0, r0
 8002294:	1824      	adds	r4, r4, r0
 8002296:	0223      	lsls	r3, r4, #8
 8002298:	d400      	bmi.n	800229c <__aeabi_dsub+0x1b4>
 800229a:	e0c6      	b.n	800242a <__aeabi_dsub+0x342>
 800229c:	4b6b      	ldr	r3, [pc, #428]	@ (800244c <__aeabi_dsub+0x364>)
 800229e:	3501      	adds	r5, #1
 80022a0:	429d      	cmp	r5, r3
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dsub+0x1be>
 80022a4:	e0b2      	b.n	800240c <__aeabi_dsub+0x324>
 80022a6:	2101      	movs	r1, #1
 80022a8:	4b69      	ldr	r3, [pc, #420]	@ (8002450 <__aeabi_dsub+0x368>)
 80022aa:	087a      	lsrs	r2, r7, #1
 80022ac:	401c      	ands	r4, r3
 80022ae:	4039      	ands	r1, r7
 80022b0:	430a      	orrs	r2, r1
 80022b2:	07e7      	lsls	r7, r4, #31
 80022b4:	4317      	orrs	r7, r2
 80022b6:	0864      	lsrs	r4, r4, #1
 80022b8:	e79e      	b.n	80021f8 <__aeabi_dsub+0x110>
 80022ba:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <__aeabi_dsub+0x36c>)
 80022bc:	4311      	orrs	r1, r2
 80022be:	468a      	mov	sl, r1
 80022c0:	18eb      	adds	r3, r5, r3
 80022c2:	2900      	cmp	r1, #0
 80022c4:	d028      	beq.n	8002318 <__aeabi_dsub+0x230>
 80022c6:	4566      	cmp	r6, ip
 80022c8:	d02c      	beq.n	8002324 <__aeabi_dsub+0x23c>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d05b      	beq.n	8002386 <__aeabi_dsub+0x29e>
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x1ec>
 80022d2:	e12c      	b.n	800252e <__aeabi_dsub+0x446>
 80022d4:	465b      	mov	r3, fp
 80022d6:	4666      	mov	r6, ip
 80022d8:	075f      	lsls	r7, r3, #29
 80022da:	08d2      	lsrs	r2, r2, #3
 80022dc:	4317      	orrs	r7, r2
 80022de:	08dd      	lsrs	r5, r3, #3
 80022e0:	003b      	movs	r3, r7
 80022e2:	432b      	orrs	r3, r5
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x200>
 80022e6:	e0e2      	b.n	80024ae <__aeabi_dsub+0x3c6>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	0324      	lsls	r4, r4, #12
 80022ec:	432c      	orrs	r4, r5
 80022ee:	0324      	lsls	r4, r4, #12
 80022f0:	4d56      	ldr	r5, [pc, #344]	@ (800244c <__aeabi_dsub+0x364>)
 80022f2:	0b24      	lsrs	r4, r4, #12
 80022f4:	e08c      	b.n	8002410 <__aeabi_dsub+0x328>
 80022f6:	4659      	mov	r1, fp
 80022f8:	4311      	orrs	r1, r2
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x216>
 80022fc:	e0d5      	b.n	80024aa <__aeabi_dsub+0x3c2>
 80022fe:	1e59      	subs	r1, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x21e>
 8002304:	e1b9      	b.n	800267a <__aeabi_dsub+0x592>
 8002306:	42bb      	cmp	r3, r7
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x224>
 800230a:	e1b1      	b.n	8002670 <__aeabi_dsub+0x588>
 800230c:	2701      	movs	r7, #1
 800230e:	000b      	movs	r3, r1
 8002310:	2938      	cmp	r1, #56	@ 0x38
 8002312:	dd00      	ble.n	8002316 <__aeabi_dsub+0x22e>
 8002314:	e740      	b.n	8002198 <__aeabi_dsub+0xb0>
 8002316:	e72a      	b.n	800216e <__aeabi_dsub+0x86>
 8002318:	4661      	mov	r1, ip
 800231a:	2701      	movs	r7, #1
 800231c:	4079      	eors	r1, r7
 800231e:	468c      	mov	ip, r1
 8002320:	4566      	cmp	r6, ip
 8002322:	d1d2      	bne.n	80022ca <__aeabi_dsub+0x1e2>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x242>
 8002328:	e0c5      	b.n	80024b6 <__aeabi_dsub+0x3ce>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x248>
 800232e:	e155      	b.n	80025dc <__aeabi_dsub+0x4f4>
 8002330:	464b      	mov	r3, r9
 8002332:	0025      	movs	r5, r4
 8002334:	4305      	orrs	r5, r0
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x252>
 8002338:	e212      	b.n	8002760 <__aeabi_dsub+0x678>
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	468c      	mov	ip, r1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x25c>
 8002342:	e249      	b.n	80027d8 <__aeabi_dsub+0x6f0>
 8002344:	4d41      	ldr	r5, [pc, #260]	@ (800244c <__aeabi_dsub+0x364>)
 8002346:	42ab      	cmp	r3, r5
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x264>
 800234a:	e28f      	b.n	800286c <__aeabi_dsub+0x784>
 800234c:	2701      	movs	r7, #1
 800234e:	2938      	cmp	r1, #56	@ 0x38
 8002350:	dc11      	bgt.n	8002376 <__aeabi_dsub+0x28e>
 8002352:	4663      	mov	r3, ip
 8002354:	2b1f      	cmp	r3, #31
 8002356:	dd00      	ble.n	800235a <__aeabi_dsub+0x272>
 8002358:	e25b      	b.n	8002812 <__aeabi_dsub+0x72a>
 800235a:	4661      	mov	r1, ip
 800235c:	2320      	movs	r3, #32
 800235e:	0027      	movs	r7, r4
 8002360:	1a5b      	subs	r3, r3, r1
 8002362:	0005      	movs	r5, r0
 8002364:	4098      	lsls	r0, r3
 8002366:	409f      	lsls	r7, r3
 8002368:	40cd      	lsrs	r5, r1
 800236a:	1e43      	subs	r3, r0, #1
 800236c:	4198      	sbcs	r0, r3
 800236e:	40cc      	lsrs	r4, r1
 8002370:	432f      	orrs	r7, r5
 8002372:	4307      	orrs	r7, r0
 8002374:	44a3      	add	fp, r4
 8002376:	18bf      	adds	r7, r7, r2
 8002378:	4297      	cmp	r7, r2
 800237a:	4192      	sbcs	r2, r2
 800237c:	4252      	negs	r2, r2
 800237e:	445a      	add	r2, fp
 8002380:	0014      	movs	r4, r2
 8002382:	464d      	mov	r5, r9
 8002384:	e787      	b.n	8002296 <__aeabi_dsub+0x1ae>
 8002386:	4f34      	ldr	r7, [pc, #208]	@ (8002458 <__aeabi_dsub+0x370>)
 8002388:	1c6b      	adds	r3, r5, #1
 800238a:	423b      	tst	r3, r7
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x2a8>
 800238e:	e0b6      	b.n	80024fe <__aeabi_dsub+0x416>
 8002390:	4659      	mov	r1, fp
 8002392:	0023      	movs	r3, r4
 8002394:	4311      	orrs	r1, r2
 8002396:	000f      	movs	r7, r1
 8002398:	4303      	orrs	r3, r0
 800239a:	2d00      	cmp	r5, #0
 800239c:	d000      	beq.n	80023a0 <__aeabi_dsub+0x2b8>
 800239e:	e126      	b.n	80025ee <__aeabi_dsub+0x506>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x2be>
 80023a4:	e1c0      	b.n	8002728 <__aeabi_dsub+0x640>
 80023a6:	2900      	cmp	r1, #0
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x2c4>
 80023aa:	e0a1      	b.n	80024f0 <__aeabi_dsub+0x408>
 80023ac:	1a83      	subs	r3, r0, r2
 80023ae:	4698      	mov	r8, r3
 80023b0:	465b      	mov	r3, fp
 80023b2:	4540      	cmp	r0, r8
 80023b4:	41ad      	sbcs	r5, r5
 80023b6:	1ae3      	subs	r3, r4, r3
 80023b8:	426d      	negs	r5, r5
 80023ba:	1b5b      	subs	r3, r3, r5
 80023bc:	2580      	movs	r5, #128	@ 0x80
 80023be:	042d      	lsls	r5, r5, #16
 80023c0:	422b      	tst	r3, r5
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x2de>
 80023c4:	e14b      	b.n	800265e <__aeabi_dsub+0x576>
 80023c6:	465b      	mov	r3, fp
 80023c8:	1a10      	subs	r0, r2, r0
 80023ca:	4282      	cmp	r2, r0
 80023cc:	4192      	sbcs	r2, r2
 80023ce:	1b1c      	subs	r4, r3, r4
 80023d0:	0007      	movs	r7, r0
 80023d2:	2601      	movs	r6, #1
 80023d4:	4663      	mov	r3, ip
 80023d6:	4252      	negs	r2, r2
 80023d8:	1aa4      	subs	r4, r4, r2
 80023da:	4327      	orrs	r7, r4
 80023dc:	401e      	ands	r6, r3
 80023de:	2f00      	cmp	r7, #0
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x2fc>
 80023e2:	e142      	b.n	800266a <__aeabi_dsub+0x582>
 80023e4:	422c      	tst	r4, r5
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x302>
 80023e8:	e26d      	b.n	80028c6 <__aeabi_dsub+0x7de>
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <__aeabi_dsub+0x368>)
 80023ec:	2501      	movs	r5, #1
 80023ee:	401c      	ands	r4, r3
 80023f0:	e71b      	b.n	800222a <__aeabi_dsub+0x142>
 80023f2:	42bd      	cmp	r5, r7
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x310>
 80023f6:	e13b      	b.n	8002670 <__aeabi_dsub+0x588>
 80023f8:	2701      	movs	r7, #1
 80023fa:	2b38      	cmp	r3, #56	@ 0x38
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dsub+0x318>
 80023fe:	e745      	b.n	800228c <__aeabi_dsub+0x1a4>
 8002400:	2780      	movs	r7, #128	@ 0x80
 8002402:	4659      	mov	r1, fp
 8002404:	043f      	lsls	r7, r7, #16
 8002406:	4339      	orrs	r1, r7
 8002408:	468b      	mov	fp, r1
 800240a:	e72a      	b.n	8002262 <__aeabi_dsub+0x17a>
 800240c:	2400      	movs	r4, #0
 800240e:	2700      	movs	r7, #0
 8002410:	052d      	lsls	r5, r5, #20
 8002412:	4325      	orrs	r5, r4
 8002414:	07f6      	lsls	r6, r6, #31
 8002416:	4335      	orrs	r5, r6
 8002418:	0038      	movs	r0, r7
 800241a:	0029      	movs	r1, r5
 800241c:	b003      	add	sp, #12
 800241e:	bcf0      	pop	{r4, r5, r6, r7}
 8002420:	46bb      	mov	fp, r7
 8002422:	46b2      	mov	sl, r6
 8002424:	46a9      	mov	r9, r5
 8002426:	46a0      	mov	r8, r4
 8002428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242a:	077b      	lsls	r3, r7, #29
 800242c:	d004      	beq.n	8002438 <__aeabi_dsub+0x350>
 800242e:	230f      	movs	r3, #15
 8002430:	403b      	ands	r3, r7
 8002432:	2b04      	cmp	r3, #4
 8002434:	d000      	beq.n	8002438 <__aeabi_dsub+0x350>
 8002436:	e6e7      	b.n	8002208 <__aeabi_dsub+0x120>
 8002438:	002b      	movs	r3, r5
 800243a:	08f8      	lsrs	r0, r7, #3
 800243c:	4a03      	ldr	r2, [pc, #12]	@ (800244c <__aeabi_dsub+0x364>)
 800243e:	0767      	lsls	r7, r4, #29
 8002440:	4307      	orrs	r7, r0
 8002442:	08e5      	lsrs	r5, r4, #3
 8002444:	4293      	cmp	r3, r2
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x362>
 8002448:	e74a      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800244a:	e0a5      	b.n	8002598 <__aeabi_dsub+0x4b0>
 800244c:	000007ff 	.word	0x000007ff
 8002450:	ff7fffff 	.word	0xff7fffff
 8002454:	fffff801 	.word	0xfffff801
 8002458:	000007fe 	.word	0x000007fe
 800245c:	0038      	movs	r0, r7
 800245e:	f000 fb45 	bl	8002aec <__clzsi2>
 8002462:	0003      	movs	r3, r0
 8002464:	3318      	adds	r3, #24
 8002466:	2b1f      	cmp	r3, #31
 8002468:	dc00      	bgt.n	800246c <__aeabi_dsub+0x384>
 800246a:	e6a7      	b.n	80021bc <__aeabi_dsub+0xd4>
 800246c:	003a      	movs	r2, r7
 800246e:	3808      	subs	r0, #8
 8002470:	4082      	lsls	r2, r0
 8002472:	429d      	cmp	r5, r3
 8002474:	dd00      	ble.n	8002478 <__aeabi_dsub+0x390>
 8002476:	e08a      	b.n	800258e <__aeabi_dsub+0x4a6>
 8002478:	1b5b      	subs	r3, r3, r5
 800247a:	1c58      	adds	r0, r3, #1
 800247c:	281f      	cmp	r0, #31
 800247e:	dc00      	bgt.n	8002482 <__aeabi_dsub+0x39a>
 8002480:	e1d8      	b.n	8002834 <__aeabi_dsub+0x74c>
 8002482:	0017      	movs	r7, r2
 8002484:	3b1f      	subs	r3, #31
 8002486:	40df      	lsrs	r7, r3
 8002488:	2820      	cmp	r0, #32
 800248a:	d005      	beq.n	8002498 <__aeabi_dsub+0x3b0>
 800248c:	2340      	movs	r3, #64	@ 0x40
 800248e:	1a1b      	subs	r3, r3, r0
 8002490:	409a      	lsls	r2, r3
 8002492:	1e53      	subs	r3, r2, #1
 8002494:	419a      	sbcs	r2, r3
 8002496:	4317      	orrs	r7, r2
 8002498:	2500      	movs	r5, #0
 800249a:	2f00      	cmp	r7, #0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x3b8>
 800249e:	e0e5      	b.n	800266c <__aeabi_dsub+0x584>
 80024a0:	077b      	lsls	r3, r7, #29
 80024a2:	d000      	beq.n	80024a6 <__aeabi_dsub+0x3be>
 80024a4:	e6ab      	b.n	80021fe <__aeabi_dsub+0x116>
 80024a6:	002c      	movs	r4, r5
 80024a8:	e7c6      	b.n	8002438 <__aeabi_dsub+0x350>
 80024aa:	08c0      	lsrs	r0, r0, #3
 80024ac:	e7c6      	b.n	800243c <__aeabi_dsub+0x354>
 80024ae:	2700      	movs	r7, #0
 80024b0:	2400      	movs	r4, #0
 80024b2:	4dd1      	ldr	r5, [pc, #836]	@ (80027f8 <__aeabi_dsub+0x710>)
 80024b4:	e7ac      	b.n	8002410 <__aeabi_dsub+0x328>
 80024b6:	4fd1      	ldr	r7, [pc, #836]	@ (80027fc <__aeabi_dsub+0x714>)
 80024b8:	1c6b      	adds	r3, r5, #1
 80024ba:	423b      	tst	r3, r7
 80024bc:	d171      	bne.n	80025a2 <__aeabi_dsub+0x4ba>
 80024be:	0023      	movs	r3, r4
 80024c0:	4303      	orrs	r3, r0
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	d000      	beq.n	80024c8 <__aeabi_dsub+0x3e0>
 80024c6:	e14e      	b.n	8002766 <__aeabi_dsub+0x67e>
 80024c8:	4657      	mov	r7, sl
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x3e8>
 80024ce:	e1b5      	b.n	800283c <__aeabi_dsub+0x754>
 80024d0:	2f00      	cmp	r7, #0
 80024d2:	d00d      	beq.n	80024f0 <__aeabi_dsub+0x408>
 80024d4:	1883      	adds	r3, r0, r2
 80024d6:	4283      	cmp	r3, r0
 80024d8:	4180      	sbcs	r0, r0
 80024da:	445c      	add	r4, fp
 80024dc:	4240      	negs	r0, r0
 80024de:	1824      	adds	r4, r4, r0
 80024e0:	0222      	lsls	r2, r4, #8
 80024e2:	d500      	bpl.n	80024e6 <__aeabi_dsub+0x3fe>
 80024e4:	e1c8      	b.n	8002878 <__aeabi_dsub+0x790>
 80024e6:	001f      	movs	r7, r3
 80024e8:	4698      	mov	r8, r3
 80024ea:	4327      	orrs	r7, r4
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x408>
 80024ee:	e0bc      	b.n	800266a <__aeabi_dsub+0x582>
 80024f0:	4643      	mov	r3, r8
 80024f2:	0767      	lsls	r7, r4, #29
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	431f      	orrs	r7, r3
 80024f8:	08e5      	lsrs	r5, r4, #3
 80024fa:	2300      	movs	r3, #0
 80024fc:	e04c      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80024fe:	1a83      	subs	r3, r0, r2
 8002500:	4698      	mov	r8, r3
 8002502:	465b      	mov	r3, fp
 8002504:	4540      	cmp	r0, r8
 8002506:	41bf      	sbcs	r7, r7
 8002508:	1ae3      	subs	r3, r4, r3
 800250a:	427f      	negs	r7, r7
 800250c:	1bdb      	subs	r3, r3, r7
 800250e:	021f      	lsls	r7, r3, #8
 8002510:	d47c      	bmi.n	800260c <__aeabi_dsub+0x524>
 8002512:	4647      	mov	r7, r8
 8002514:	431f      	orrs	r7, r3
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x432>
 8002518:	e0a6      	b.n	8002668 <__aeabi_dsub+0x580>
 800251a:	001c      	movs	r4, r3
 800251c:	4647      	mov	r7, r8
 800251e:	e645      	b.n	80021ac <__aeabi_dsub+0xc4>
 8002520:	4cb7      	ldr	r4, [pc, #732]	@ (8002800 <__aeabi_dsub+0x718>)
 8002522:	1aed      	subs	r5, r5, r3
 8002524:	4014      	ands	r4, r2
 8002526:	077b      	lsls	r3, r7, #29
 8002528:	d000      	beq.n	800252c <__aeabi_dsub+0x444>
 800252a:	e780      	b.n	800242e <__aeabi_dsub+0x346>
 800252c:	e784      	b.n	8002438 <__aeabi_dsub+0x350>
 800252e:	464b      	mov	r3, r9
 8002530:	0025      	movs	r5, r4
 8002532:	4305      	orrs	r5, r0
 8002534:	d066      	beq.n	8002604 <__aeabi_dsub+0x51c>
 8002536:	1e5f      	subs	r7, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d100      	bne.n	800253e <__aeabi_dsub+0x456>
 800253c:	e0fc      	b.n	8002738 <__aeabi_dsub+0x650>
 800253e:	4dae      	ldr	r5, [pc, #696]	@ (80027f8 <__aeabi_dsub+0x710>)
 8002540:	42ab      	cmp	r3, r5
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x45e>
 8002544:	e15e      	b.n	8002804 <__aeabi_dsub+0x71c>
 8002546:	4666      	mov	r6, ip
 8002548:	2f38      	cmp	r7, #56	@ 0x38
 800254a:	dc00      	bgt.n	800254e <__aeabi_dsub+0x466>
 800254c:	e0b4      	b.n	80026b8 <__aeabi_dsub+0x5d0>
 800254e:	2001      	movs	r0, #1
 8002550:	1a17      	subs	r7, r2, r0
 8002552:	42ba      	cmp	r2, r7
 8002554:	4192      	sbcs	r2, r2
 8002556:	465b      	mov	r3, fp
 8002558:	4252      	negs	r2, r2
 800255a:	464d      	mov	r5, r9
 800255c:	1a9c      	subs	r4, r3, r2
 800255e:	e620      	b.n	80021a2 <__aeabi_dsub+0xba>
 8002560:	0767      	lsls	r7, r4, #29
 8002562:	08c0      	lsrs	r0, r0, #3
 8002564:	4307      	orrs	r7, r0
 8002566:	08e5      	lsrs	r5, r4, #3
 8002568:	e6ba      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800256a:	001f      	movs	r7, r3
 800256c:	4659      	mov	r1, fp
 800256e:	3f20      	subs	r7, #32
 8002570:	40f9      	lsrs	r1, r7
 8002572:	000f      	movs	r7, r1
 8002574:	2b20      	cmp	r3, #32
 8002576:	d005      	beq.n	8002584 <__aeabi_dsub+0x49c>
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	1acb      	subs	r3, r1, r3
 800257c:	4659      	mov	r1, fp
 800257e:	4099      	lsls	r1, r3
 8002580:	430a      	orrs	r2, r1
 8002582:	4692      	mov	sl, r2
 8002584:	4653      	mov	r3, sl
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	4193      	sbcs	r3, r2
 800258a:	431f      	orrs	r7, r3
 800258c:	e604      	b.n	8002198 <__aeabi_dsub+0xb0>
 800258e:	1aeb      	subs	r3, r5, r3
 8002590:	4d9b      	ldr	r5, [pc, #620]	@ (8002800 <__aeabi_dsub+0x718>)
 8002592:	4015      	ands	r5, r2
 8002594:	076f      	lsls	r7, r5, #29
 8002596:	08ed      	lsrs	r5, r5, #3
 8002598:	032c      	lsls	r4, r5, #12
 800259a:	055d      	lsls	r5, r3, #21
 800259c:	0b24      	lsrs	r4, r4, #12
 800259e:	0d6d      	lsrs	r5, r5, #21
 80025a0:	e736      	b.n	8002410 <__aeabi_dsub+0x328>
 80025a2:	4d95      	ldr	r5, [pc, #596]	@ (80027f8 <__aeabi_dsub+0x710>)
 80025a4:	42ab      	cmp	r3, r5
 80025a6:	d100      	bne.n	80025aa <__aeabi_dsub+0x4c2>
 80025a8:	e0d6      	b.n	8002758 <__aeabi_dsub+0x670>
 80025aa:	1882      	adds	r2, r0, r2
 80025ac:	0021      	movs	r1, r4
 80025ae:	4282      	cmp	r2, r0
 80025b0:	4180      	sbcs	r0, r0
 80025b2:	4459      	add	r1, fp
 80025b4:	4240      	negs	r0, r0
 80025b6:	1808      	adds	r0, r1, r0
 80025b8:	07c7      	lsls	r7, r0, #31
 80025ba:	0852      	lsrs	r2, r2, #1
 80025bc:	4317      	orrs	r7, r2
 80025be:	0844      	lsrs	r4, r0, #1
 80025c0:	0752      	lsls	r2, r2, #29
 80025c2:	d400      	bmi.n	80025c6 <__aeabi_dsub+0x4de>
 80025c4:	e185      	b.n	80028d2 <__aeabi_dsub+0x7ea>
 80025c6:	220f      	movs	r2, #15
 80025c8:	001d      	movs	r5, r3
 80025ca:	403a      	ands	r2, r7
 80025cc:	2a04      	cmp	r2, #4
 80025ce:	d000      	beq.n	80025d2 <__aeabi_dsub+0x4ea>
 80025d0:	e61a      	b.n	8002208 <__aeabi_dsub+0x120>
 80025d2:	08ff      	lsrs	r7, r7, #3
 80025d4:	0764      	lsls	r4, r4, #29
 80025d6:	4327      	orrs	r7, r4
 80025d8:	0905      	lsrs	r5, r0, #4
 80025da:	e7dd      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80025dc:	465b      	mov	r3, fp
 80025de:	08d2      	lsrs	r2, r2, #3
 80025e0:	075f      	lsls	r7, r3, #29
 80025e2:	4317      	orrs	r7, r2
 80025e4:	08dd      	lsrs	r5, r3, #3
 80025e6:	e67b      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 80025e8:	2700      	movs	r7, #0
 80025ea:	2400      	movs	r4, #0
 80025ec:	e710      	b.n	8002410 <__aeabi_dsub+0x328>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d000      	beq.n	80025f4 <__aeabi_dsub+0x50c>
 80025f2:	e0d6      	b.n	80027a2 <__aeabi_dsub+0x6ba>
 80025f4:	2900      	cmp	r1, #0
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x512>
 80025f8:	e12f      	b.n	800285a <__aeabi_dsub+0x772>
 80025fa:	2480      	movs	r4, #128	@ 0x80
 80025fc:	2600      	movs	r6, #0
 80025fe:	4d7e      	ldr	r5, [pc, #504]	@ (80027f8 <__aeabi_dsub+0x710>)
 8002600:	0324      	lsls	r4, r4, #12
 8002602:	e705      	b.n	8002410 <__aeabi_dsub+0x328>
 8002604:	4666      	mov	r6, ip
 8002606:	465c      	mov	r4, fp
 8002608:	08d0      	lsrs	r0, r2, #3
 800260a:	e717      	b.n	800243c <__aeabi_dsub+0x354>
 800260c:	465b      	mov	r3, fp
 800260e:	1a17      	subs	r7, r2, r0
 8002610:	42ba      	cmp	r2, r7
 8002612:	4192      	sbcs	r2, r2
 8002614:	1b1c      	subs	r4, r3, r4
 8002616:	2601      	movs	r6, #1
 8002618:	4663      	mov	r3, ip
 800261a:	4252      	negs	r2, r2
 800261c:	1aa4      	subs	r4, r4, r2
 800261e:	401e      	ands	r6, r3
 8002620:	e5c4      	b.n	80021ac <__aeabi_dsub+0xc4>
 8002622:	1883      	adds	r3, r0, r2
 8002624:	4283      	cmp	r3, r0
 8002626:	4180      	sbcs	r0, r0
 8002628:	445c      	add	r4, fp
 800262a:	4240      	negs	r0, r0
 800262c:	1825      	adds	r5, r4, r0
 800262e:	022a      	lsls	r2, r5, #8
 8002630:	d400      	bmi.n	8002634 <__aeabi_dsub+0x54c>
 8002632:	e0da      	b.n	80027ea <__aeabi_dsub+0x702>
 8002634:	4a72      	ldr	r2, [pc, #456]	@ (8002800 <__aeabi_dsub+0x718>)
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	4015      	ands	r5, r2
 800263a:	07ea      	lsls	r2, r5, #31
 800263c:	431a      	orrs	r2, r3
 800263e:	0869      	lsrs	r1, r5, #1
 8002640:	075b      	lsls	r3, r3, #29
 8002642:	d400      	bmi.n	8002646 <__aeabi_dsub+0x55e>
 8002644:	e14a      	b.n	80028dc <__aeabi_dsub+0x7f4>
 8002646:	230f      	movs	r3, #15
 8002648:	4013      	ands	r3, r2
 800264a:	2b04      	cmp	r3, #4
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x568>
 800264e:	e0fc      	b.n	800284a <__aeabi_dsub+0x762>
 8002650:	1d17      	adds	r7, r2, #4
 8002652:	4297      	cmp	r7, r2
 8002654:	41a4      	sbcs	r4, r4
 8002656:	4264      	negs	r4, r4
 8002658:	2502      	movs	r5, #2
 800265a:	1864      	adds	r4, r4, r1
 800265c:	e6ec      	b.n	8002438 <__aeabi_dsub+0x350>
 800265e:	4647      	mov	r7, r8
 8002660:	001c      	movs	r4, r3
 8002662:	431f      	orrs	r7, r3
 8002664:	d000      	beq.n	8002668 <__aeabi_dsub+0x580>
 8002666:	e743      	b.n	80024f0 <__aeabi_dsub+0x408>
 8002668:	2600      	movs	r6, #0
 800266a:	2500      	movs	r5, #0
 800266c:	2400      	movs	r4, #0
 800266e:	e6cf      	b.n	8002410 <__aeabi_dsub+0x328>
 8002670:	08c0      	lsrs	r0, r0, #3
 8002672:	0767      	lsls	r7, r4, #29
 8002674:	4307      	orrs	r7, r0
 8002676:	08e5      	lsrs	r5, r4, #3
 8002678:	e632      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800267a:	1a87      	subs	r7, r0, r2
 800267c:	465b      	mov	r3, fp
 800267e:	42b8      	cmp	r0, r7
 8002680:	4180      	sbcs	r0, r0
 8002682:	1ae4      	subs	r4, r4, r3
 8002684:	4240      	negs	r0, r0
 8002686:	1a24      	subs	r4, r4, r0
 8002688:	0223      	lsls	r3, r4, #8
 800268a:	d428      	bmi.n	80026de <__aeabi_dsub+0x5f6>
 800268c:	0763      	lsls	r3, r4, #29
 800268e:	08ff      	lsrs	r7, r7, #3
 8002690:	431f      	orrs	r7, r3
 8002692:	08e5      	lsrs	r5, r4, #3
 8002694:	2301      	movs	r3, #1
 8002696:	e77f      	b.n	8002598 <__aeabi_dsub+0x4b0>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x5b6>
 800269c:	e673      	b.n	8002386 <__aeabi_dsub+0x29e>
 800269e:	464b      	mov	r3, r9
 80026a0:	1b5f      	subs	r7, r3, r5
 80026a2:	003b      	movs	r3, r7
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x5c2>
 80026a8:	e742      	b.n	8002530 <__aeabi_dsub+0x448>
 80026aa:	2f38      	cmp	r7, #56	@ 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dsub+0x5c8>
 80026ae:	e0ec      	b.n	800288a <__aeabi_dsub+0x7a2>
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	000e      	movs	r6, r1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431c      	orrs	r4, r3
 80026b8:	2f1f      	cmp	r7, #31
 80026ba:	dc25      	bgt.n	8002708 <__aeabi_dsub+0x620>
 80026bc:	2520      	movs	r5, #32
 80026be:	0023      	movs	r3, r4
 80026c0:	1bed      	subs	r5, r5, r7
 80026c2:	0001      	movs	r1, r0
 80026c4:	40a8      	lsls	r0, r5
 80026c6:	40ab      	lsls	r3, r5
 80026c8:	40f9      	lsrs	r1, r7
 80026ca:	1e45      	subs	r5, r0, #1
 80026cc:	41a8      	sbcs	r0, r5
 80026ce:	430b      	orrs	r3, r1
 80026d0:	40fc      	lsrs	r4, r7
 80026d2:	4318      	orrs	r0, r3
 80026d4:	465b      	mov	r3, fp
 80026d6:	1b1b      	subs	r3, r3, r4
 80026d8:	469b      	mov	fp, r3
 80026da:	e739      	b.n	8002550 <__aeabi_dsub+0x468>
 80026dc:	4666      	mov	r6, ip
 80026de:	2501      	movs	r5, #1
 80026e0:	e562      	b.n	80021a8 <__aeabi_dsub+0xc0>
 80026e2:	001f      	movs	r7, r3
 80026e4:	4659      	mov	r1, fp
 80026e6:	3f20      	subs	r7, #32
 80026e8:	40f9      	lsrs	r1, r7
 80026ea:	468c      	mov	ip, r1
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d005      	beq.n	80026fc <__aeabi_dsub+0x614>
 80026f0:	2740      	movs	r7, #64	@ 0x40
 80026f2:	4659      	mov	r1, fp
 80026f4:	1afb      	subs	r3, r7, r3
 80026f6:	4099      	lsls	r1, r3
 80026f8:	430a      	orrs	r2, r1
 80026fa:	4692      	mov	sl, r2
 80026fc:	4657      	mov	r7, sl
 80026fe:	1e7b      	subs	r3, r7, #1
 8002700:	419f      	sbcs	r7, r3
 8002702:	4663      	mov	r3, ip
 8002704:	431f      	orrs	r7, r3
 8002706:	e5c1      	b.n	800228c <__aeabi_dsub+0x1a4>
 8002708:	003b      	movs	r3, r7
 800270a:	0025      	movs	r5, r4
 800270c:	3b20      	subs	r3, #32
 800270e:	40dd      	lsrs	r5, r3
 8002710:	2f20      	cmp	r7, #32
 8002712:	d004      	beq.n	800271e <__aeabi_dsub+0x636>
 8002714:	2340      	movs	r3, #64	@ 0x40
 8002716:	1bdb      	subs	r3, r3, r7
 8002718:	409c      	lsls	r4, r3
 800271a:	4320      	orrs	r0, r4
 800271c:	4680      	mov	r8, r0
 800271e:	4640      	mov	r0, r8
 8002720:	1e43      	subs	r3, r0, #1
 8002722:	4198      	sbcs	r0, r3
 8002724:	4328      	orrs	r0, r5
 8002726:	e713      	b.n	8002550 <__aeabi_dsub+0x468>
 8002728:	2900      	cmp	r1, #0
 800272a:	d09d      	beq.n	8002668 <__aeabi_dsub+0x580>
 800272c:	2601      	movs	r6, #1
 800272e:	4663      	mov	r3, ip
 8002730:	465c      	mov	r4, fp
 8002732:	4690      	mov	r8, r2
 8002734:	401e      	ands	r6, r3
 8002736:	e6db      	b.n	80024f0 <__aeabi_dsub+0x408>
 8002738:	1a17      	subs	r7, r2, r0
 800273a:	465b      	mov	r3, fp
 800273c:	42ba      	cmp	r2, r7
 800273e:	4192      	sbcs	r2, r2
 8002740:	1b1c      	subs	r4, r3, r4
 8002742:	4252      	negs	r2, r2
 8002744:	1aa4      	subs	r4, r4, r2
 8002746:	0223      	lsls	r3, r4, #8
 8002748:	d4c8      	bmi.n	80026dc <__aeabi_dsub+0x5f4>
 800274a:	0763      	lsls	r3, r4, #29
 800274c:	08ff      	lsrs	r7, r7, #3
 800274e:	431f      	orrs	r7, r3
 8002750:	4666      	mov	r6, ip
 8002752:	2301      	movs	r3, #1
 8002754:	08e5      	lsrs	r5, r4, #3
 8002756:	e71f      	b.n	8002598 <__aeabi_dsub+0x4b0>
 8002758:	001d      	movs	r5, r3
 800275a:	2400      	movs	r4, #0
 800275c:	2700      	movs	r7, #0
 800275e:	e657      	b.n	8002410 <__aeabi_dsub+0x328>
 8002760:	465c      	mov	r4, fp
 8002762:	08d0      	lsrs	r0, r2, #3
 8002764:	e66a      	b.n	800243c <__aeabi_dsub+0x354>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x684>
 800276a:	e737      	b.n	80025dc <__aeabi_dsub+0x4f4>
 800276c:	4653      	mov	r3, sl
 800276e:	08c0      	lsrs	r0, r0, #3
 8002770:	0767      	lsls	r7, r4, #29
 8002772:	4307      	orrs	r7, r0
 8002774:	08e5      	lsrs	r5, r4, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x694>
 800277a:	e5b1      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	421d      	tst	r5, r3
 8002782:	d008      	beq.n	8002796 <__aeabi_dsub+0x6ae>
 8002784:	4659      	mov	r1, fp
 8002786:	08c8      	lsrs	r0, r1, #3
 8002788:	4218      	tst	r0, r3
 800278a:	d104      	bne.n	8002796 <__aeabi_dsub+0x6ae>
 800278c:	08d2      	lsrs	r2, r2, #3
 800278e:	0749      	lsls	r1, r1, #29
 8002790:	430a      	orrs	r2, r1
 8002792:	0017      	movs	r7, r2
 8002794:	0005      	movs	r5, r0
 8002796:	0f7b      	lsrs	r3, r7, #29
 8002798:	00ff      	lsls	r7, r7, #3
 800279a:	08ff      	lsrs	r7, r7, #3
 800279c:	075b      	lsls	r3, r3, #29
 800279e:	431f      	orrs	r7, r3
 80027a0:	e59e      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 80027a2:	08c0      	lsrs	r0, r0, #3
 80027a4:	0763      	lsls	r3, r4, #29
 80027a6:	4318      	orrs	r0, r3
 80027a8:	08e5      	lsrs	r5, r4, #3
 80027aa:	2900      	cmp	r1, #0
 80027ac:	d053      	beq.n	8002856 <__aeabi_dsub+0x76e>
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	421d      	tst	r5, r3
 80027b4:	d00a      	beq.n	80027cc <__aeabi_dsub+0x6e4>
 80027b6:	4659      	mov	r1, fp
 80027b8:	08cc      	lsrs	r4, r1, #3
 80027ba:	421c      	tst	r4, r3
 80027bc:	d106      	bne.n	80027cc <__aeabi_dsub+0x6e4>
 80027be:	2601      	movs	r6, #1
 80027c0:	4663      	mov	r3, ip
 80027c2:	0025      	movs	r5, r4
 80027c4:	08d0      	lsrs	r0, r2, #3
 80027c6:	0749      	lsls	r1, r1, #29
 80027c8:	4308      	orrs	r0, r1
 80027ca:	401e      	ands	r6, r3
 80027cc:	0f47      	lsrs	r7, r0, #29
 80027ce:	00c0      	lsls	r0, r0, #3
 80027d0:	08c0      	lsrs	r0, r0, #3
 80027d2:	077f      	lsls	r7, r7, #29
 80027d4:	4307      	orrs	r7, r0
 80027d6:	e583      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 80027d8:	1883      	adds	r3, r0, r2
 80027da:	4293      	cmp	r3, r2
 80027dc:	4192      	sbcs	r2, r2
 80027de:	445c      	add	r4, fp
 80027e0:	4252      	negs	r2, r2
 80027e2:	18a5      	adds	r5, r4, r2
 80027e4:	022a      	lsls	r2, r5, #8
 80027e6:	d500      	bpl.n	80027ea <__aeabi_dsub+0x702>
 80027e8:	e724      	b.n	8002634 <__aeabi_dsub+0x54c>
 80027ea:	076f      	lsls	r7, r5, #29
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	431f      	orrs	r7, r3
 80027f0:	08ed      	lsrs	r5, r5, #3
 80027f2:	2301      	movs	r3, #1
 80027f4:	e6d0      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	000007ff 	.word	0x000007ff
 80027fc:	000007fe 	.word	0x000007fe
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	465b      	mov	r3, fp
 8002806:	08d2      	lsrs	r2, r2, #3
 8002808:	075f      	lsls	r7, r3, #29
 800280a:	4666      	mov	r6, ip
 800280c:	4317      	orrs	r7, r2
 800280e:	08dd      	lsrs	r5, r3, #3
 8002810:	e566      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 8002812:	0025      	movs	r5, r4
 8002814:	3b20      	subs	r3, #32
 8002816:	40dd      	lsrs	r5, r3
 8002818:	4663      	mov	r3, ip
 800281a:	2b20      	cmp	r3, #32
 800281c:	d005      	beq.n	800282a <__aeabi_dsub+0x742>
 800281e:	2340      	movs	r3, #64	@ 0x40
 8002820:	4661      	mov	r1, ip
 8002822:	1a5b      	subs	r3, r3, r1
 8002824:	409c      	lsls	r4, r3
 8002826:	4320      	orrs	r0, r4
 8002828:	4680      	mov	r8, r0
 800282a:	4647      	mov	r7, r8
 800282c:	1e7b      	subs	r3, r7, #1
 800282e:	419f      	sbcs	r7, r3
 8002830:	432f      	orrs	r7, r5
 8002832:	e5a0      	b.n	8002376 <__aeabi_dsub+0x28e>
 8002834:	2120      	movs	r1, #32
 8002836:	2700      	movs	r7, #0
 8002838:	1a09      	subs	r1, r1, r0
 800283a:	e4d2      	b.n	80021e2 <__aeabi_dsub+0xfa>
 800283c:	2f00      	cmp	r7, #0
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x75a>
 8002840:	e713      	b.n	800266a <__aeabi_dsub+0x582>
 8002842:	465c      	mov	r4, fp
 8002844:	0017      	movs	r7, r2
 8002846:	2500      	movs	r5, #0
 8002848:	e5f6      	b.n	8002438 <__aeabi_dsub+0x350>
 800284a:	08d7      	lsrs	r7, r2, #3
 800284c:	0749      	lsls	r1, r1, #29
 800284e:	2302      	movs	r3, #2
 8002850:	430f      	orrs	r7, r1
 8002852:	092d      	lsrs	r5, r5, #4
 8002854:	e6a0      	b.n	8002598 <__aeabi_dsub+0x4b0>
 8002856:	0007      	movs	r7, r0
 8002858:	e542      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800285a:	465b      	mov	r3, fp
 800285c:	2601      	movs	r6, #1
 800285e:	075f      	lsls	r7, r3, #29
 8002860:	08dd      	lsrs	r5, r3, #3
 8002862:	4663      	mov	r3, ip
 8002864:	08d2      	lsrs	r2, r2, #3
 8002866:	4317      	orrs	r7, r2
 8002868:	401e      	ands	r6, r3
 800286a:	e539      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 800286c:	465b      	mov	r3, fp
 800286e:	08d2      	lsrs	r2, r2, #3
 8002870:	075f      	lsls	r7, r3, #29
 8002872:	4317      	orrs	r7, r2
 8002874:	08dd      	lsrs	r5, r3, #3
 8002876:	e533      	b.n	80022e0 <__aeabi_dsub+0x1f8>
 8002878:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <__aeabi_dsub+0x80c>)
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	4022      	ands	r2, r4
 800287e:	0757      	lsls	r7, r2, #29
 8002880:	0252      	lsls	r2, r2, #9
 8002882:	2501      	movs	r5, #1
 8002884:	431f      	orrs	r7, r3
 8002886:	0b14      	lsrs	r4, r2, #12
 8002888:	e5c2      	b.n	8002410 <__aeabi_dsub+0x328>
 800288a:	000e      	movs	r6, r1
 800288c:	2001      	movs	r0, #1
 800288e:	e65f      	b.n	8002550 <__aeabi_dsub+0x468>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <__aeabi_dsub+0x7c8>
 8002894:	464b      	mov	r3, r9
 8002896:	1b5b      	subs	r3, r3, r5
 8002898:	469c      	mov	ip, r3
 800289a:	2d00      	cmp	r5, #0
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x7b8>
 800289e:	e548      	b.n	8002332 <__aeabi_dsub+0x24a>
 80028a0:	2701      	movs	r7, #1
 80028a2:	2b38      	cmp	r3, #56	@ 0x38
 80028a4:	dd00      	ble.n	80028a8 <__aeabi_dsub+0x7c0>
 80028a6:	e566      	b.n	8002376 <__aeabi_dsub+0x28e>
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431c      	orrs	r4, r3
 80028ae:	e550      	b.n	8002352 <__aeabi_dsub+0x26a>
 80028b0:	1c6b      	adds	r3, r5, #1
 80028b2:	4d11      	ldr	r5, [pc, #68]	@ (80028f8 <__aeabi_dsub+0x810>)
 80028b4:	422b      	tst	r3, r5
 80028b6:	d000      	beq.n	80028ba <__aeabi_dsub+0x7d2>
 80028b8:	e673      	b.n	80025a2 <__aeabi_dsub+0x4ba>
 80028ba:	4659      	mov	r1, fp
 80028bc:	0023      	movs	r3, r4
 80028be:	4311      	orrs	r1, r2
 80028c0:	468a      	mov	sl, r1
 80028c2:	4303      	orrs	r3, r0
 80028c4:	e600      	b.n	80024c8 <__aeabi_dsub+0x3e0>
 80028c6:	0767      	lsls	r7, r4, #29
 80028c8:	08c0      	lsrs	r0, r0, #3
 80028ca:	2300      	movs	r3, #0
 80028cc:	4307      	orrs	r7, r0
 80028ce:	08e5      	lsrs	r5, r4, #3
 80028d0:	e662      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80028d2:	0764      	lsls	r4, r4, #29
 80028d4:	08ff      	lsrs	r7, r7, #3
 80028d6:	4327      	orrs	r7, r4
 80028d8:	0905      	lsrs	r5, r0, #4
 80028da:	e65d      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80028dc:	08d2      	lsrs	r2, r2, #3
 80028de:	0749      	lsls	r1, r1, #29
 80028e0:	4311      	orrs	r1, r2
 80028e2:	000f      	movs	r7, r1
 80028e4:	2302      	movs	r3, #2
 80028e6:	092d      	lsrs	r5, r5, #4
 80028e8:	e656      	b.n	8002598 <__aeabi_dsub+0x4b0>
 80028ea:	0007      	movs	r7, r0
 80028ec:	e5a4      	b.n	8002438 <__aeabi_dsub+0x350>
 80028ee:	0038      	movs	r0, r7
 80028f0:	e48f      	b.n	8002212 <__aeabi_dsub+0x12a>
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	ff7fffff 	.word	0xff7fffff
 80028f8:	000007fe 	.word	0x000007fe

080028fc <__aeabi_dcmpun>:
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	46c6      	mov	lr, r8
 8002900:	031e      	lsls	r6, r3, #12
 8002902:	0b36      	lsrs	r6, r6, #12
 8002904:	46b0      	mov	r8, r6
 8002906:	4e0d      	ldr	r6, [pc, #52]	@ (800293c <__aeabi_dcmpun+0x40>)
 8002908:	030c      	lsls	r4, r1, #12
 800290a:	004d      	lsls	r5, r1, #1
 800290c:	005f      	lsls	r7, r3, #1
 800290e:	b500      	push	{lr}
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0d6d      	lsrs	r5, r5, #21
 8002914:	0d7f      	lsrs	r7, r7, #21
 8002916:	42b5      	cmp	r5, r6
 8002918:	d00b      	beq.n	8002932 <__aeabi_dcmpun+0x36>
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__aeabi_dcmpun+0x40>)
 800291c:	2000      	movs	r0, #0
 800291e:	428f      	cmp	r7, r1
 8002920:	d104      	bne.n	800292c <__aeabi_dcmpun+0x30>
 8002922:	4646      	mov	r6, r8
 8002924:	4316      	orrs	r6, r2
 8002926:	0030      	movs	r0, r6
 8002928:	1e43      	subs	r3, r0, #1
 800292a:	4198      	sbcs	r0, r3
 800292c:	bc80      	pop	{r7}
 800292e:	46b8      	mov	r8, r7
 8002930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002932:	4304      	orrs	r4, r0
 8002934:	2001      	movs	r0, #1
 8002936:	2c00      	cmp	r4, #0
 8002938:	d1f8      	bne.n	800292c <__aeabi_dcmpun+0x30>
 800293a:	e7ee      	b.n	800291a <__aeabi_dcmpun+0x1e>
 800293c:	000007ff 	.word	0x000007ff

08002940 <__aeabi_d2iz>:
 8002940:	000b      	movs	r3, r1
 8002942:	0002      	movs	r2, r0
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	4d16      	ldr	r5, [pc, #88]	@ (80029a0 <__aeabi_d2iz+0x60>)
 8002948:	030c      	lsls	r4, r1, #12
 800294a:	b082      	sub	sp, #8
 800294c:	0049      	lsls	r1, r1, #1
 800294e:	2000      	movs	r0, #0
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	0b24      	lsrs	r4, r4, #12
 8002956:	0d49      	lsrs	r1, r1, #21
 8002958:	0fde      	lsrs	r6, r3, #31
 800295a:	42a9      	cmp	r1, r5
 800295c:	dd04      	ble.n	8002968 <__aeabi_d2iz+0x28>
 800295e:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <__aeabi_d2iz+0x64>)
 8002960:	4281      	cmp	r1, r0
 8002962:	dd03      	ble.n	800296c <__aeabi_d2iz+0x2c>
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <__aeabi_d2iz+0x68>)
 8002966:	18f0      	adds	r0, r6, r3
 8002968:	b002      	add	sp, #8
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	2080      	movs	r0, #128	@ 0x80
 800296e:	0340      	lsls	r0, r0, #13
 8002970:	4320      	orrs	r0, r4
 8002972:	4c0e      	ldr	r4, [pc, #56]	@ (80029ac <__aeabi_d2iz+0x6c>)
 8002974:	1a64      	subs	r4, r4, r1
 8002976:	2c1f      	cmp	r4, #31
 8002978:	dd08      	ble.n	800298c <__aeabi_d2iz+0x4c>
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <__aeabi_d2iz+0x70>)
 800297c:	1a5b      	subs	r3, r3, r1
 800297e:	40d8      	lsrs	r0, r3
 8002980:	0003      	movs	r3, r0
 8002982:	4258      	negs	r0, r3
 8002984:	2e00      	cmp	r6, #0
 8002986:	d1ef      	bne.n	8002968 <__aeabi_d2iz+0x28>
 8002988:	0018      	movs	r0, r3
 800298a:	e7ed      	b.n	8002968 <__aeabi_d2iz+0x28>
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <__aeabi_d2iz+0x74>)
 800298e:	9a00      	ldr	r2, [sp, #0]
 8002990:	469c      	mov	ip, r3
 8002992:	0003      	movs	r3, r0
 8002994:	4461      	add	r1, ip
 8002996:	408b      	lsls	r3, r1
 8002998:	40e2      	lsrs	r2, r4
 800299a:	4313      	orrs	r3, r2
 800299c:	e7f1      	b.n	8002982 <__aeabi_d2iz+0x42>
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	000003fe 	.word	0x000003fe
 80029a4:	0000041d 	.word	0x0000041d
 80029a8:	7fffffff 	.word	0x7fffffff
 80029ac:	00000433 	.word	0x00000433
 80029b0:	00000413 	.word	0x00000413
 80029b4:	fffffbed 	.word	0xfffffbed

080029b8 <__aeabi_i2d>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d016      	beq.n	80029ec <__aeabi_i2d+0x34>
 80029be:	17c3      	asrs	r3, r0, #31
 80029c0:	18c5      	adds	r5, r0, r3
 80029c2:	405d      	eors	r5, r3
 80029c4:	0fc4      	lsrs	r4, r0, #31
 80029c6:	0028      	movs	r0, r5
 80029c8:	f000 f890 	bl	8002aec <__clzsi2>
 80029cc:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <__aeabi_i2d+0x58>)
 80029ce:	1a1b      	subs	r3, r3, r0
 80029d0:	055b      	lsls	r3, r3, #21
 80029d2:	0d5b      	lsrs	r3, r3, #21
 80029d4:	280a      	cmp	r0, #10
 80029d6:	dc14      	bgt.n	8002a02 <__aeabi_i2d+0x4a>
 80029d8:	0002      	movs	r2, r0
 80029da:	002e      	movs	r6, r5
 80029dc:	3215      	adds	r2, #21
 80029de:	4096      	lsls	r6, r2
 80029e0:	220b      	movs	r2, #11
 80029e2:	1a12      	subs	r2, r2, r0
 80029e4:	40d5      	lsrs	r5, r2
 80029e6:	032d      	lsls	r5, r5, #12
 80029e8:	0b2d      	lsrs	r5, r5, #12
 80029ea:	e003      	b.n	80029f4 <__aeabi_i2d+0x3c>
 80029ec:	2400      	movs	r4, #0
 80029ee:	2300      	movs	r3, #0
 80029f0:	2500      	movs	r5, #0
 80029f2:	2600      	movs	r6, #0
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	432b      	orrs	r3, r5
 80029f8:	07e4      	lsls	r4, r4, #31
 80029fa:	4323      	orrs	r3, r4
 80029fc:	0030      	movs	r0, r6
 80029fe:	0019      	movs	r1, r3
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	380b      	subs	r0, #11
 8002a04:	4085      	lsls	r5, r0
 8002a06:	032d      	lsls	r5, r5, #12
 8002a08:	2600      	movs	r6, #0
 8002a0a:	0b2d      	lsrs	r5, r5, #12
 8002a0c:	e7f2      	b.n	80029f4 <__aeabi_i2d+0x3c>
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	0000041e 	.word	0x0000041e

08002a14 <__aeabi_ui2d>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	1e04      	subs	r4, r0, #0
 8002a18:	d010      	beq.n	8002a3c <__aeabi_ui2d+0x28>
 8002a1a:	f000 f867 	bl	8002aec <__clzsi2>
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <__aeabi_ui2d+0x44>)
 8002a20:	1a1b      	subs	r3, r3, r0
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	280a      	cmp	r0, #10
 8002a28:	dc0f      	bgt.n	8002a4a <__aeabi_ui2d+0x36>
 8002a2a:	220b      	movs	r2, #11
 8002a2c:	0021      	movs	r1, r4
 8002a2e:	1a12      	subs	r2, r2, r0
 8002a30:	40d1      	lsrs	r1, r2
 8002a32:	3015      	adds	r0, #21
 8002a34:	030a      	lsls	r2, r1, #12
 8002a36:	4084      	lsls	r4, r0
 8002a38:	0b12      	lsrs	r2, r2, #12
 8002a3a:	e001      	b.n	8002a40 <__aeabi_ui2d+0x2c>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2200      	movs	r2, #0
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	4313      	orrs	r3, r2
 8002a44:	0020      	movs	r0, r4
 8002a46:	0019      	movs	r1, r3
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	0022      	movs	r2, r4
 8002a4c:	380b      	subs	r0, #11
 8002a4e:	4082      	lsls	r2, r0
 8002a50:	0312      	lsls	r2, r2, #12
 8002a52:	2400      	movs	r4, #0
 8002a54:	0b12      	lsrs	r2, r2, #12
 8002a56:	e7f3      	b.n	8002a40 <__aeabi_ui2d+0x2c>
 8002a58:	0000041e 	.word	0x0000041e

08002a5c <__aeabi_f2d>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	0242      	lsls	r2, r0, #9
 8002a60:	0043      	lsls	r3, r0, #1
 8002a62:	0fc4      	lsrs	r4, r0, #31
 8002a64:	20fe      	movs	r0, #254	@ 0xfe
 8002a66:	0e1b      	lsrs	r3, r3, #24
 8002a68:	1c59      	adds	r1, r3, #1
 8002a6a:	0a55      	lsrs	r5, r2, #9
 8002a6c:	4208      	tst	r0, r1
 8002a6e:	d00c      	beq.n	8002a8a <__aeabi_f2d+0x2e>
 8002a70:	21e0      	movs	r1, #224	@ 0xe0
 8002a72:	0089      	lsls	r1, r1, #2
 8002a74:	468c      	mov	ip, r1
 8002a76:	076d      	lsls	r5, r5, #29
 8002a78:	0b12      	lsrs	r2, r2, #12
 8002a7a:	4463      	add	r3, ip
 8002a7c:	051b      	lsls	r3, r3, #20
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	07e4      	lsls	r4, r4, #31
 8002a82:	4323      	orrs	r3, r4
 8002a84:	0028      	movs	r0, r5
 8002a86:	0019      	movs	r1, r3
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <__aeabi_f2d+0x5c>
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	d01b      	beq.n	8002aca <__aeabi_f2d+0x6e>
 8002a92:	0028      	movs	r0, r5
 8002a94:	f000 f82a 	bl	8002aec <__clzsi2>
 8002a98:	280a      	cmp	r0, #10
 8002a9a:	dc1c      	bgt.n	8002ad6 <__aeabi_f2d+0x7a>
 8002a9c:	230b      	movs	r3, #11
 8002a9e:	002a      	movs	r2, r5
 8002aa0:	1a1b      	subs	r3, r3, r0
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	3315      	adds	r3, #21
 8002aa8:	409d      	lsls	r5, r3
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <__aeabi_f2d+0x88>)
 8002aac:	0312      	lsls	r2, r2, #12
 8002aae:	1a1b      	subs	r3, r3, r0
 8002ab0:	055b      	lsls	r3, r3, #21
 8002ab2:	0b12      	lsrs	r2, r2, #12
 8002ab4:	0d5b      	lsrs	r3, r3, #21
 8002ab6:	e7e1      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ab8:	2d00      	cmp	r5, #0
 8002aba:	d009      	beq.n	8002ad0 <__aeabi_f2d+0x74>
 8002abc:	0b13      	lsrs	r3, r2, #12
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	0312      	lsls	r2, r2, #12
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	076d      	lsls	r5, r5, #29
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <__aeabi_f2d+0x8c>)
 8002ac8:	e7d8      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2200      	movs	r2, #0
 8002ace:	e7d5      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <__aeabi_f2d+0x8c>)
 8002ad4:	e7d2      	b.n	8002a7c <__aeabi_f2d+0x20>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	002a      	movs	r2, r5
 8002ada:	3b0b      	subs	r3, #11
 8002adc:	409a      	lsls	r2, r3
 8002ade:	2500      	movs	r5, #0
 8002ae0:	e7e3      	b.n	8002aaa <__aeabi_f2d+0x4e>
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	00000389 	.word	0x00000389
 8002ae8:	000007ff 	.word	0x000007ff

08002aec <__clzsi2>:
 8002aec:	211c      	movs	r1, #28
 8002aee:	2301      	movs	r3, #1
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d301      	bcc.n	8002afa <__clzsi2+0xe>
 8002af6:	0c00      	lsrs	r0, r0, #16
 8002af8:	3910      	subs	r1, #16
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	4298      	cmp	r0, r3
 8002afe:	d301      	bcc.n	8002b04 <__clzsi2+0x18>
 8002b00:	0a00      	lsrs	r0, r0, #8
 8002b02:	3908      	subs	r1, #8
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	4298      	cmp	r0, r3
 8002b08:	d301      	bcc.n	8002b0e <__clzsi2+0x22>
 8002b0a:	0900      	lsrs	r0, r0, #4
 8002b0c:	3904      	subs	r1, #4
 8002b0e:	a202      	add	r2, pc, #8	@ (adr r2, 8002b18 <__clzsi2+0x2c>)
 8002b10:	5c10      	ldrb	r0, [r2, r0]
 8002b12:	1840      	adds	r0, r0, r1
 8002b14:	4770      	bx	lr
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	02020304 	.word	0x02020304
 8002b1c:	01010101 	.word	0x01010101
	...

08002b28 <__clzdi2>:
 8002b28:	b510      	push	{r4, lr}
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d103      	bne.n	8002b36 <__clzdi2+0xe>
 8002b2e:	f7ff ffdd 	bl	8002aec <__clzsi2>
 8002b32:	3020      	adds	r0, #32
 8002b34:	e002      	b.n	8002b3c <__clzdi2+0x14>
 8002b36:	0008      	movs	r0, r1
 8002b38:	f7ff ffd8 	bl	8002aec <__clzsi2>
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)

08002b40 <DistanceSensor_Init>:
#define MIN_DISTANCE 10

//extern speaker Speaker;

void DistanceSensor_Init(distancesensor* sensor, TIM_HandleTypeDef* timer)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	sensor->timer = timer;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	601a      	str	r2, [r3, #0]

	sensor->timeDifference = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
	sensor->countAtMaxDistance = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	731a      	strb	r2, [r3, #12]

}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <DistanceSensor_Start>:

void DistanceSensor_Start(distancesensor* sensor)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2104      	movs	r1, #4
 8002b72:	0018      	movs	r0, r3
 8002b74:	f003 fed4 	bl	8006920 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(sensor->timer, TIM_CHANNEL_1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f004 f892 	bl	8006ca8 <HAL_TIM_IC_Start_IT>
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <DistanceSensor_InputCaptureInterrupt>:
	HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
	HAL_TIM_IC_Stop_IT(sensor->timer, TIM_CHANNEL_1);
}

void DistanceSensor_InputCaptureInterrupt(distancesensor* sensor)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

		if (HAL_GPIO_ReadPin(sensor->icGPIOPort, sensor->icGPIOPin)) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7d1b      	ldrb	r3, [r3, #20]
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	f001 fd86 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d010      	beq.n	8002bca <DistanceSensor_InputCaptureInterrupt+0x3e>
			sensor->IC_Value1 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // First rising edge
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2100      	movs	r1, #0
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f004 fd2c 	bl	800760c <HAL_TIM_ReadCapturedValue>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Stop(sensor->timer, TIM_CHANNEL_2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f003 ff8a 	bl	8006adc <HAL_TIM_PWM_Stop>
			DistanceSensor_Handle(sensor);

		}


}
 8002bc8:	e034      	b.n	8002c34 <DistanceSensor_InputCaptureInterrupt+0xa8>
			sensor->IC_Value2 = HAL_TIM_ReadCapturedValue(sensor->timer, TIM_CHANNEL_1); // Second rising edge
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f004 fd1b 	bl	800760c <HAL_TIM_ReadCapturedValue>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	80da      	strh	r2, [r3, #6]
			if (sensor->IC_Value2 > sensor->IC_Value1) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	88da      	ldrh	r2, [r3, #6]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	889b      	ldrh	r3, [r3, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d909      	bls.n	8002bfe <DistanceSensor_InputCaptureInterrupt+0x72>
				sensor->timeDifference = sensor->IC_Value2 - sensor->IC_Value1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	88db      	ldrh	r3, [r3, #6]
 8002bee:	001a      	movs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	889b      	ldrh	r3, [r3, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e00b      	b.n	8002c16 <DistanceSensor_InputCaptureInterrupt+0x8a>
				sensor->timeDifference = (TIM_PERIOD + 1 - sensor->IC_Value1) + sensor->IC_Value2; // Handle overflow
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	889b      	ldrh	r3, [r3, #4]
 8002c02:	001a      	movs	r2, r3
 8002c04:	2380      	movs	r3, #128	@ 0x80
 8002c06:	025b      	lsls	r3, r3, #9
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	88d2      	ldrh	r2, [r2, #6]
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	001a      	movs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
			HAL_TIM_PWM_Start(sensor->timer, TIM_CHANNEL_2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f003 fe7f 	bl	8006920 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCounter(sensor->timer, 65535);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <DistanceSensor_InputCaptureInterrupt+0xb0>)
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24
			DistanceSensor_Handle(sensor);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f81c 	bl	8002c6c <DistanceSensor_Handle>
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	0000ffff 	.word	0x0000ffff

08002c40 <DistanceSensor_GetDistance>:

float DistanceSensor_GetDistance(distancesensor* sensor)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	// Number of microseconds / 58 = distance in cm
	return (float) sensor->timeDifference / 58;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd ff1f 	bl	8000a90 <__aeabi_ui2f>
 8002c52:	1c03      	adds	r3, r0, #0
 8002c54:	4904      	ldr	r1, [pc, #16]	@ (8002c68 <DistanceSensor_GetDistance+0x28>)
 8002c56:	1c18      	adds	r0, r3, #0
 8002c58:	f7fd fd4c 	bl	80006f4 <__aeabi_fdiv>
 8002c5c:	1c03      	adds	r3, r0, #0
}
 8002c5e:	1c18      	adds	r0, r3, #0
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b002      	add	sp, #8
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	42680000 	.word	0x42680000

08002c6c <DistanceSensor_Handle>:

void DistanceSensor_Handle(distancesensor* sensor)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	float distance = DistanceSensor_GetDistance(sensor);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff ffe2 	bl	8002c40 <DistanceSensor_GetDistance>
 8002c7c:	1c03      	adds	r3, r0, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
	if (sensor->countAtMaxDistance > 5)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7b1b      	ldrb	r3, [r3, #12]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d80f      	bhi.n	8002ca8 <DistanceSensor_Handle+0x3c>
	{
		//HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_SET);

		//if (!Speaker.isActive) Speaker_Start(&Speaker, sensor->ID);
	}
	else if (distance < MIN_DISTANCE)
 8002c88:	4909      	ldr	r1, [pc, #36]	@ (8002cb0 <DistanceSensor_Handle+0x44>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7fd fc1e 	bl	80004cc <__aeabi_fcmplt>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d006      	beq.n	8002ca2 <DistanceSensor_Handle+0x36>
	{
		sensor->countAtMaxDistance++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7b1b      	ldrb	r3, [r3, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	731a      	strb	r2, [r3, #12]
		//HAL_GPIO_WritePin(sensor->statusGPIOPort, sensor->statusGPIOPin, GPIO_PIN_RESET);

		//if (Speaker.isActive) Speaker_Stop(&Speaker, sensor->ID);

	}
}
 8002ca0:	e002      	b.n	8002ca8 <DistanceSensor_Handle+0x3c>
		sensor->countAtMaxDistance = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	731a      	strb	r2, [r3, #12]
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	41200000 	.word	0x41200000

08002cb4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <HAL_TIM_IC_CaptureCallback+0x38>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_IC_CaptureCallback+0x1c>
		DistanceSensor_InputCaptureInterrupt(&Front);
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff5f 	bl	8002b8c <DistanceSensor_InputCaptureInterrupt>
	}
	else if (htim->Instance == TIM2) {
		DistanceSensor_InputCaptureInterrupt(&Back);
	}

}
 8002cce:	e009      	b.n	8002ce4 <HAL_TIM_IC_CaptureCallback+0x30>
	else if (htim->Instance == TIM2) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d103      	bne.n	8002ce4 <HAL_TIM_IC_CaptureCallback+0x30>
		DistanceSensor_InputCaptureInterrupt(&Back);
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff ff54 	bl	8002b8c <DistanceSensor_InputCaptureInterrupt>
}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	2000047c 	.word	0x2000047c
 8002cf4:	2000049c 	.word	0x2000049c

08002cf8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
	{
		//Front.risingEdge = true;
	}
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d0c:	f000 ffe2 	bl	8003cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d10:	f000 f844 	bl	8002d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d14:	f000 fb48 	bl	80033a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d18:	f000 fb28 	bl	800336c <MX_DMA_Init>
  MX_TIM3_Init();
 8002d1c:	f000 f9c0 	bl	80030a0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002d20:	f000 faf0 	bl	8003304 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002d24:	f000 f916 	bl	8002f54 <MX_TIM2_Init>
  MX_TIM17_Init();
 8002d28:	f000 fa62 	bl	80031f0 <MX_TIM17_Init>
  MX_I2C1_Init();
 8002d2c:	f000 f894 	bl	8002e58 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002d30:	f000 f8d2 	bl	8002ed8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //Speaker_Init(&Speaker, &htim17);
  DistanceSensor_Init(&Front, &htim3);
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <main+0x80>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <main+0x84>)
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff ff00 	bl	8002b40 <DistanceSensor_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //DistanceSensor_Start(&FrontDistanceSensor);
  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
  DistanceSensor_Start(&Front);
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <main+0x84>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff ff0e 	bl	8002b64 <DistanceSensor_Start>
	  HAL_Delay(100);

	*/

	  //RFID_ReadRegister(&RFIDModule, TPrescalerReg, 1, &value, 0);
	  sprintf(Data, "%f\r\n", DistanceSensor_GetDistance(&Front));
 8002d48:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <main+0x84>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7ff ff78 	bl	8002c40 <DistanceSensor_GetDistance>
 8002d50:	1c03      	adds	r3, r0, #0
 8002d52:	1c18      	adds	r0, r3, #0
 8002d54:	f7ff fe82 	bl	8002a5c <__aeabi_f2d>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	000b      	movs	r3, r1
 8002d5c:	490c      	ldr	r1, [pc, #48]	@ (8002d90 <main+0x88>)
 8002d5e:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <main+0x8c>)
 8002d60:	f006 fd84 	bl	800986c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <main+0x8c>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7fd f9ce 	bl	8000108 <strlen>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	425b      	negs	r3, r3
 8002d74:	4907      	ldr	r1, [pc, #28]	@ (8002d94 <main+0x8c>)
 8002d76:	4808      	ldr	r0, [pc, #32]	@ (8002d98 <main+0x90>)
 8002d78:	f005 fb04 	bl	8008384 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8002d7c:	20fa      	movs	r0, #250	@ 0xfa
 8002d7e:	f001 f82f 	bl	8003de0 <HAL_Delay>
	  sprintf(Data, "%f\r\n", DistanceSensor_GetDistance(&Front));
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	e7e0      	b.n	8002d48 <main+0x40>
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	20000350 	.word	0x20000350
 8002d8c:	2000047c 	.word	0x2000047c
 8002d90:	0800bc20 	.word	0x0800bc20
 8002d94:	200004bc 	.word	0x200004bc
 8002d98:	200003e8 	.word	0x200003e8

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b093      	sub	sp, #76	@ 0x4c
 8002da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	2410      	movs	r4, #16
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	0018      	movs	r0, r3
 8002da8:	2338      	movs	r3, #56	@ 0x38
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f006 fdcb 	bl	8009948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db2:	003b      	movs	r3, r7
 8002db4:	0018      	movs	r0, r3
 8002db6:	2310      	movs	r3, #16
 8002db8:	001a      	movs	r2, r3
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f006 fdc4 	bl	8009948 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f002 fc77 	bl	80056b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	2202      	movs	r2, #2
 8002dce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	2280      	movs	r2, #128	@ 0x80
 8002dd4:	0052      	lsls	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002dd8:	0021      	movs	r1, r4
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2202      	movs	r2, #2
 8002dea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2202      	movs	r2, #2
 8002df0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2280      	movs	r2, #128	@ 0x80
 8002e02:	0292      	lsls	r2, r2, #10
 8002e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	0492      	lsls	r2, r2, #18
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	2280      	movs	r2, #128	@ 0x80
 8002e12:	0592      	lsls	r2, r2, #22
 8002e14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f002 fc99 	bl	8005750 <HAL_RCC_OscConfig>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002e22:	f000 fb1f 	bl	8003464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e26:	003b      	movs	r3, r7
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2202      	movs	r2, #2
 8002e30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e32:	003b      	movs	r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e38:	003b      	movs	r3, r7
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e3e:	003b      	movs	r3, r7
 8002e40:	2102      	movs	r1, #2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f002 ff9e 	bl	8005d84 <HAL_RCC_ClockConfig>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d001      	beq.n	8002e50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e4c:	f000 fb0a 	bl	8003464 <Error_Handler>
  }
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b013      	add	sp, #76	@ 0x4c
 8002e56:	bd90      	pop	{r4, r7, pc}

08002e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <MX_I2C1_Init+0x78>)
 8002e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <MX_I2C1_Init+0x7c>)
 8002e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e74:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e80:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002e94:	0018      	movs	r0, r3
 8002e96:	f001 fc45 	bl	8004724 <HAL_I2C_Init>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e9e:	f000 fae1 	bl	8003464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f002 fb6e 	bl	8005588 <HAL_I2CEx_ConfigAnalogFilter>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002eb0:	f000 fad8 	bl	8003464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <MX_I2C1_Init+0x74>)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f002 fbb1 	bl	8005620 <HAL_I2CEx_ConfigDigitalFilter>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ec2:	f000 facf 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200001f0 	.word	0x200001f0
 8002ed0:	40005400 	.word	0x40005400
 8002ed4:	00602173 	.word	0x00602173

08002ed8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <MX_SPI2_Init+0x78>)
 8002ee0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002ee4:	2282      	movs	r2, #130	@ 0x82
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eea:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002ef2:	22e0      	movs	r2, #224	@ 0xe0
 8002ef4:	00d2      	lsls	r2, r2, #3
 8002ef6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002efe:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	02d2      	lsls	r2, r2, #11
 8002f0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f0e:	2230      	movs	r2, #48	@ 0x30
 8002f10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f26:	2207      	movs	r2, #7
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f32:	2208      	movs	r2, #8
 8002f34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f36:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <MX_SPI2_Init+0x74>)
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f003 fa65 	bl	8006408 <HAL_SPI_Init>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002f42:	f000 fa8f 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200002a0 	.word	0x200002a0
 8002f50:	40003800 	.word	0x40003800

08002f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b092      	sub	sp, #72	@ 0x48
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	2338      	movs	r3, #56	@ 0x38
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	0018      	movs	r0, r3
 8002f60:	2310      	movs	r3, #16
 8002f62:	001a      	movs	r2, r3
 8002f64:	2100      	movs	r1, #0
 8002f66:	f006 fcef 	bl	8009948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6a:	232c      	movs	r3, #44	@ 0x2c
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	0018      	movs	r0, r3
 8002f70:	230c      	movs	r3, #12
 8002f72:	001a      	movs	r2, r3
 8002f74:	2100      	movs	r1, #0
 8002f76:	f006 fce7 	bl	8009948 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f7a:	231c      	movs	r3, #28
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	0018      	movs	r0, r3
 8002f80:	2310      	movs	r3, #16
 8002f82:	001a      	movs	r2, r3
 8002f84:	2100      	movs	r1, #0
 8002f86:	f006 fcdf 	bl	8009948 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8a:	003b      	movs	r3, r7
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	231c      	movs	r3, #28
 8002f90:	001a      	movs	r2, r3
 8002f92:	2100      	movs	r1, #0
 8002f94:	f006 fcd8 	bl	8009948 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f98:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	05d2      	lsls	r2, r2, #23
 8002f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fa2:	223f      	movs	r2, #63	@ 0x3f
 8002fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002fac:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fae:	4a3b      	ldr	r2, [pc, #236]	@ (800309c <MX_TIM2_Init+0x148>)
 8002fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb2:	4b39      	ldr	r3, [pc, #228]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fb8:	4b37      	ldr	r3, [pc, #220]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fbe:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f003 fbf5 	bl	80067b0 <HAL_TIM_Base_Init>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002fca:	f000 fa4b 	bl	8003464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fce:	2138      	movs	r1, #56	@ 0x38
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2280      	movs	r2, #128	@ 0x80
 8002fd4:	0152      	lsls	r2, r2, #5
 8002fd6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fd8:	187a      	adds	r2, r7, r1
 8002fda:	4b2f      	ldr	r3, [pc, #188]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f004 fa3e 	bl	8007460 <HAL_TIM_ConfigClockSource>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002fe8:	f000 fa3c 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002fec:	4b2a      	ldr	r3, [pc, #168]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f003 fdfa 	bl	8006be8 <HAL_TIM_IC_Init>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002ff8:	f000 fa34 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ffc:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <MX_TIM2_Init+0x144>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f003 fc2e 	bl	8006860 <HAL_TIM_PWM_Init>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003008:	f000 fa2c 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800300c:	212c      	movs	r1, #44	@ 0x2c
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800301a:	187a      	adds	r2, r7, r1
 800301c:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <MX_TIM2_Init+0x144>)
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f005 f83d 	bl	80080a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800302a:	f000 fa1b 	bl	8003464 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800302e:	211c      	movs	r1, #28
 8003030:	187b      	adds	r3, r7, r1
 8003032:	220a      	movs	r2, #10
 8003034:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2201      	movs	r2, #1
 800303a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800303c:	187b      	adds	r3, r7, r1
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003048:	1879      	adds	r1, r7, r1
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <MX_TIM2_Init+0x144>)
 800304c:	2200      	movs	r2, #0
 800304e:	0018      	movs	r0, r3
 8003050:	f004 f862 	bl	8007118 <HAL_TIM_IC_ConfigChannel>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8003058:	f000 fa04 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305c:	003b      	movs	r3, r7
 800305e:	2260      	movs	r2, #96	@ 0x60
 8003060:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8003062:	003b      	movs	r3, r7
 8003064:	220a      	movs	r2, #10
 8003066:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003068:	003b      	movs	r3, r7
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306e:	003b      	movs	r3, r7
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003074:	0039      	movs	r1, r7
 8003076:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <MX_TIM2_Init+0x144>)
 8003078:	2204      	movs	r2, #4
 800307a:	0018      	movs	r0, r3
 800307c:	f004 f8f0 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8003084:	f000 f9ee 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <MX_TIM2_Init+0x144>)
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fbf6 	bl	800387c <HAL_TIM_MspPostInit>

}
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b012      	add	sp, #72	@ 0x48
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000304 	.word	0x20000304
 800309c:	0000ffff 	.word	0x0000ffff

080030a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b092      	sub	sp, #72	@ 0x48
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030a6:	2338      	movs	r3, #56	@ 0x38
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	0018      	movs	r0, r3
 80030ac:	2310      	movs	r3, #16
 80030ae:	001a      	movs	r2, r3
 80030b0:	2100      	movs	r1, #0
 80030b2:	f006 fc49 	bl	8009948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b6:	232c      	movs	r3, #44	@ 0x2c
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	0018      	movs	r0, r3
 80030bc:	230c      	movs	r3, #12
 80030be:	001a      	movs	r2, r3
 80030c0:	2100      	movs	r1, #0
 80030c2:	f006 fc41 	bl	8009948 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030c6:	231c      	movs	r3, #28
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	0018      	movs	r0, r3
 80030cc:	2310      	movs	r3, #16
 80030ce:	001a      	movs	r2, r3
 80030d0:	2100      	movs	r1, #0
 80030d2:	f006 fc39 	bl	8009948 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d6:	003b      	movs	r3, r7
 80030d8:	0018      	movs	r0, r3
 80030da:	231c      	movs	r3, #28
 80030dc:	001a      	movs	r2, r3
 80030de:	2100      	movs	r1, #0
 80030e0:	f006 fc32 	bl	8009948 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80030e6:	4a40      	ldr	r2, [pc, #256]	@ (80031e8 <MX_TIM3_Init+0x148>)
 80030e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80030ea:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80030ec:	223f      	movs	r2, #63	@ 0x3f
 80030ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	4b3c      	ldr	r3, [pc, #240]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030f6:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80030f8:	4a3c      	ldr	r2, [pc, #240]	@ (80031ec <MX_TIM3_Init+0x14c>)
 80030fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003102:	4b38      	ldr	r3, [pc, #224]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <MX_TIM3_Init+0x144>)
 800310a:	0018      	movs	r0, r3
 800310c:	f003 fb50 	bl	80067b0 <HAL_TIM_Base_Init>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003114:	f000 f9a6 	bl	8003464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003118:	2138      	movs	r1, #56	@ 0x38
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	0152      	lsls	r2, r2, #5
 8003120:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003122:	187a      	adds	r2, r7, r1
 8003124:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f004 f999 	bl	8007460 <HAL_TIM_ConfigClockSource>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003132:	f000 f997 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003138:	0018      	movs	r0, r3
 800313a:	f003 fd55 	bl	8006be8 <HAL_TIM_IC_Init>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003142:	f000 f98f 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003148:	0018      	movs	r0, r3
 800314a:	f003 fb89 	bl	8006860 <HAL_TIM_PWM_Init>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003152:	f000 f987 	bl	8003464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003156:	212c      	movs	r1, #44	@ 0x2c
 8003158:	187b      	adds	r3, r7, r1
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315e:	187b      	adds	r3, r7, r1
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003164:	187a      	adds	r2, r7, r1
 8003166:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f004 ff98 	bl	80080a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003174:	f000 f976 	bl	8003464 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003178:	211c      	movs	r1, #28
 800317a:	187b      	adds	r3, r7, r1
 800317c:	220a      	movs	r2, #10
 800317e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2201      	movs	r2, #1
 8003184:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003186:	187b      	adds	r3, r7, r1
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003192:	1879      	adds	r1, r7, r1
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <MX_TIM3_Init+0x144>)
 8003196:	2200      	movs	r2, #0
 8003198:	0018      	movs	r0, r3
 800319a:	f003 ffbd 	bl	8007118 <HAL_TIM_IC_ConfigChannel>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80031a2:	f000 f95f 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a6:	003b      	movs	r3, r7
 80031a8:	2260      	movs	r2, #96	@ 0x60
 80031aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80031ac:	003b      	movs	r3, r7
 80031ae:	220a      	movs	r2, #10
 80031b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b2:	003b      	movs	r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b8:	003b      	movs	r3, r7
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031be:	0039      	movs	r1, r7
 80031c0:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80031c2:	2204      	movs	r2, #4
 80031c4:	0018      	movs	r0, r3
 80031c6:	f004 f84b 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM3_Init+0x132>
  {
    Error_Handler();
 80031ce:	f000 f949 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031d2:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <MX_TIM3_Init+0x144>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 fb51 	bl	800387c <HAL_TIM_MspPostInit>

}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b012      	add	sp, #72	@ 0x48
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	20000350 	.word	0x20000350
 80031e8:	40000400 	.word	0x40000400
 80031ec:	0000ffff 	.word	0x0000ffff

080031f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b094      	sub	sp, #80	@ 0x50
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f6:	2334      	movs	r3, #52	@ 0x34
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	0018      	movs	r0, r3
 80031fc:	231c      	movs	r3, #28
 80031fe:	001a      	movs	r2, r3
 8003200:	2100      	movs	r1, #0
 8003202:	f006 fba1 	bl	8009948 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003206:	003b      	movs	r3, r7
 8003208:	0018      	movs	r0, r3
 800320a:	2334      	movs	r3, #52	@ 0x34
 800320c:	001a      	movs	r2, r3
 800320e:	2100      	movs	r1, #0
 8003210:	f006 fb9a 	bl	8009948 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003214:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003216:	4a38      	ldr	r2, [pc, #224]	@ (80032f8 <MX_TIM17_Init+0x108>)
 8003218:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 800321a:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <MX_TIM17_Init+0x104>)
 800321c:	223f      	movs	r2, #63	@ 0x3f
 800321e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003220:	4b34      	ldr	r3, [pc, #208]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2273;
 8003226:	4b33      	ldr	r3, [pc, #204]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003228:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <MX_TIM17_Init+0x10c>)
 800322a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322c:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <MX_TIM17_Init+0x104>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003232:	4b30      	ldr	r3, [pc, #192]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003238:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <MX_TIM17_Init+0x104>)
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800323e:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003240:	0018      	movs	r0, r3
 8003242:	f003 fab5 	bl	80067b0 <HAL_TIM_Base_Init>
 8003246:	1e03      	subs	r3, r0, #0
 8003248:	d001      	beq.n	800324e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800324a:	f000 f90b 	bl	8003464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <MX_TIM17_Init+0x104>)
 8003250:	0018      	movs	r0, r3
 8003252:	f003 fb05 	bl	8006860 <HAL_TIM_PWM_Init>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800325a:	f000 f903 	bl	8003464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800325e:	2134      	movs	r1, #52	@ 0x34
 8003260:	187b      	adds	r3, r7, r1
 8003262:	2260      	movs	r2, #96	@ 0x60
 8003264:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1137;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	4a25      	ldr	r2, [pc, #148]	@ (8003300 <MX_TIM17_Init+0x110>)
 800326a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003278:	187b      	adds	r3, r7, r1
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800327e:	187b      	adds	r3, r7, r1
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003284:	187b      	adds	r3, r7, r1
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800328a:	1879      	adds	r1, r7, r1
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <MX_TIM17_Init+0x104>)
 800328e:	2200      	movs	r2, #0
 8003290:	0018      	movs	r0, r3
 8003292:	f003 ffe5 	bl	8007260 <HAL_TIM_PWM_ConfigChannel>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800329a:	f000 f8e3 	bl	8003464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329e:	003b      	movs	r3, r7
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a4:	003b      	movs	r3, r7
 80032a6:	2200      	movs	r2, #0
 80032a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032aa:	003b      	movs	r3, r7
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032b0:	003b      	movs	r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032b6:	003b      	movs	r3, r7
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032bc:	003b      	movs	r3, r7
 80032be:	2280      	movs	r2, #128	@ 0x80
 80032c0:	0192      	lsls	r2, r2, #6
 80032c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032c4:	003b      	movs	r3, r7
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032ca:	003b      	movs	r3, r7
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80032d0:	003a      	movs	r2, r7
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <MX_TIM17_Init+0x104>)
 80032d4:	0011      	movs	r1, r2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f004 ff4a 	bl	8008170 <HAL_TIMEx_ConfigBreakDeadTime>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80032e0:	f000 f8c0 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <MX_TIM17_Init+0x104>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fac8 	bl	800387c <HAL_TIM_MspPostInit>

}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b014      	add	sp, #80	@ 0x50
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2000039c 	.word	0x2000039c
 80032f8:	40014800 	.word	0x40014800
 80032fc:	000008e1 	.word	0x000008e1
 8003300:	00000471 	.word	0x00000471

08003304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003308:	4b16      	ldr	r3, [pc, #88]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 800330a:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <MX_USART2_UART_Init+0x64>)
 800330c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003310:	22e1      	movs	r2, #225	@ 0xe1
 8003312:	0252      	lsls	r2, r2, #9
 8003314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003316:	4b13      	ldr	r3, [pc, #76]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003322:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 800332a:	220c      	movs	r2, #12
 800332c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003340:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <MX_USART2_UART_Init+0x60>)
 800334e:	0018      	movs	r0, r3
 8003350:	f004 ffc2 	bl	80082d8 <HAL_UART_Init>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003358:	f000 f884 	bl	8003464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	200003e8 	.word	0x200003e8
 8003368:	40004400 	.word	0x40004400

0800336c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <MX_DMA_Init+0x38>)
 8003374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <MX_DMA_Init+0x38>)
 8003378:	2101      	movs	r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <MX_DMA_Init+0x38>)
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2009      	movs	r0, #9
 8003390:	f000 fdf6 	bl	8003f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003394:	2009      	movs	r0, #9
 8003396:	f000 fe08 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000

080033a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b08b      	sub	sp, #44	@ 0x2c
 80033ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ae:	2414      	movs	r4, #20
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	0018      	movs	r0, r3
 80033b4:	2314      	movs	r3, #20
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	f006 fac5 	bl	8009948 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c2:	4b26      	ldr	r3, [pc, #152]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033c4:	2104      	movs	r1, #4
 80033c6:	430a      	orrs	r2, r1
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ca:	4b24      	ldr	r3, [pc, #144]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ce:	2204      	movs	r2, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033da:	4b20      	ldr	r3, [pc, #128]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033dc:	2101      	movs	r1, #1
 80033de:	430a      	orrs	r2, r1
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e2:	4b1e      	ldr	r3, [pc, #120]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	2201      	movs	r2, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033f4:	2102      	movs	r1, #2
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <MX_GPIO_Init+0xb4>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	2202      	movs	r2, #2
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <MX_GPIO_Init+0xb4>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <MX_GPIO_Init+0xb4>)
 800340c:	2108      	movs	r1, #8
 800340e:	430a      	orrs	r2, r1
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34
 8003412:	4b12      	ldr	r3, [pc, #72]	@ (800345c <MX_GPIO_Init+0xb4>)
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	2208      	movs	r2, #8
 8003418:	4013      	ands	r3, r2
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISTANCE_SENSOR_FRONT_STATUS_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin, GPIO_PIN_RESET);
 800341e:	23c0      	movs	r3, #192	@ 0xc0
 8003420:	01db      	lsls	r3, r3, #7
 8003422:	480f      	ldr	r0, [pc, #60]	@ (8003460 <MX_GPIO_Init+0xb8>)
 8003424:	2200      	movs	r2, #0
 8003426:	0019      	movs	r1, r3
 8003428:	f001 f95f 	bl	80046ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISTANCE_SENSOR_FRONT_STATUS_Pin DISTANCE_SENSOR_BACK_STATUS_Pin */
  GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_STATUS_Pin|DISTANCE_SENSOR_BACK_STATUS_Pin;
 800342c:	193b      	adds	r3, r7, r4
 800342e:	22c0      	movs	r2, #192	@ 0xc0
 8003430:	01d2      	lsls	r2, r2, #7
 8003432:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003434:	193b      	adds	r3, r7, r4
 8003436:	2201      	movs	r2, #1
 8003438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	193b      	adds	r3, r7, r4
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	193b      	adds	r3, r7, r4
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003446:	193b      	adds	r3, r7, r4
 8003448:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <MX_GPIO_Init+0xb8>)
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f000 ffcb 	bl	80043e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b00b      	add	sp, #44	@ 0x2c
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	40021000 	.word	0x40021000
 8003460:	50000800 	.word	0x50000800

08003464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	e7fd      	b.n	800346c <Error_Handler+0x8>

08003470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <HAL_MspInit+0x44>)
 8003478:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <HAL_MspInit+0x44>)
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <HAL_MspInit+0x44>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_MspInit+0x44>)
 8003490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_MspInit+0x44>)
 8003494:	2180      	movs	r1, #128	@ 0x80
 8003496:	0549      	lsls	r1, r1, #21
 8003498:	430a      	orrs	r2, r1
 800349a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_MspInit+0x44>)
 800349e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	055b      	lsls	r3, r3, #21
 80034a4:	4013      	ands	r3, r2
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b095      	sub	sp, #84	@ 0x54
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	233c      	movs	r3, #60	@ 0x3c
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	0018      	movs	r0, r3
 80034c6:	2314      	movs	r3, #20
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f006 fa3c 	bl	8009948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034d0:	2410      	movs	r4, #16
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	0018      	movs	r0, r3
 80034d6:	232c      	movs	r3, #44	@ 0x2c
 80034d8:	001a      	movs	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	f006 fa34 	bl	8009948 <memset>
  if(hi2c->Instance==I2C1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3d      	ldr	r2, [pc, #244]	@ (80035dc <HAL_I2C_MspInit+0x124>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d173      	bne.n	80035d2 <HAL_I2C_MspInit+0x11a>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	2220      	movs	r2, #32
 80034ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	0018      	movs	r0, r3
 80034fa:	f002 fded 	bl	80060d8 <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003502:	f7ff ffaf 	bl	8003464 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	4b36      	ldr	r3, [pc, #216]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 8003508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800350a:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 800350c:	2101      	movs	r1, #1
 800350e:	430a      	orrs	r2, r1
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
 8003512:	4b33      	ldr	r3, [pc, #204]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	2201      	movs	r2, #1
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800351e:	213c      	movs	r1, #60	@ 0x3c
 8003520:	187b      	adds	r3, r7, r1
 8003522:	22c0      	movs	r2, #192	@ 0xc0
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2212      	movs	r2, #18
 800352c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	187b      	adds	r3, r7, r1
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2206      	movs	r2, #6
 800353e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	187a      	adds	r2, r7, r1
 8003542:	23a0      	movs	r3, #160	@ 0xa0
 8003544:	05db      	lsls	r3, r3, #23
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f000 ff4d 	bl	80043e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800354e:	4b24      	ldr	r3, [pc, #144]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 8003550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003552:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 8003554:	2180      	movs	r1, #128	@ 0x80
 8003556:	0389      	lsls	r1, r1, #14
 8003558:	430a      	orrs	r2, r1
 800355a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800355c:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <HAL_I2C_MspInit+0x128>)
 800355e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	039b      	lsls	r3, r3, #14
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_I2C_MspInit+0x130>)
 800356e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003570:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 8003572:	220a      	movs	r2, #10
 8003574:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003576:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003582:	4b18      	ldr	r3, [pc, #96]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 8003584:	2280      	movs	r2, #128	@ 0x80
 8003586:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003588:	4b16      	ldr	r3, [pc, #88]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 800358a:	2280      	movs	r2, #128	@ 0x80
 800358c:	0052      	lsls	r2, r2, #1
 800358e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 8003592:	2280      	movs	r2, #128	@ 0x80
 8003594:	00d2      	lsls	r2, r2, #3
 8003596:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	0152      	lsls	r2, r2, #5
 80035a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80035a6:	4b0f      	ldr	r3, [pc, #60]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fd1b 	bl	8003fe4 <HAL_DMA_Init>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 80035b2:	f7ff ff57 	bl	8003464 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 80035ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <HAL_I2C_MspInit+0x12c>)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	2017      	movs	r0, #23
 80035c8:	f000 fcda 	bl	8003f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80035cc:	2017      	movs	r0, #23
 80035ce:	f000 fcec 	bl	8003faa <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b015      	add	sp, #84	@ 0x54
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	40005400 	.word	0x40005400
 80035e0:	40021000 	.word	0x40021000
 80035e4:	20000244 	.word	0x20000244
 80035e8:	40020008 	.word	0x40020008

080035ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b08b      	sub	sp, #44	@ 0x2c
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	2414      	movs	r4, #20
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	0018      	movs	r0, r3
 80035fa:	2314      	movs	r3, #20
 80035fc:	001a      	movs	r2, r3
 80035fe:	2100      	movs	r1, #0
 8003600:	f006 f9a2 	bl	8009948 <memset>
  if(hspi->Instance==SPI2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <HAL_SPI_MspInit+0x13c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d000      	beq.n	8003610 <HAL_SPI_MspInit+0x24>
 800360e:	e087      	b.n	8003720 <HAL_SPI_MspInit+0x134>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003610:	4b46      	ldr	r3, [pc, #280]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003614:	4b45      	ldr	r3, [pc, #276]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	01c9      	lsls	r1, r1, #7
 800361a:	430a      	orrs	r2, r1
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800361e:	4b43      	ldr	r3, [pc, #268]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	01db      	lsls	r3, r3, #7
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362c:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <HAL_SPI_MspInit+0x140>)
 800362e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003630:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003632:	2101      	movs	r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34
 8003638:	4b3c      	ldr	r3, [pc, #240]	@ (800372c <HAL_SPI_MspInit+0x140>)
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003648:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_SPI_MspInit+0x140>)
 800364a:	2102      	movs	r1, #2
 800364c:	430a      	orrs	r2, r1
 800364e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003650:	4b36      	ldr	r3, [pc, #216]	@ (800372c <HAL_SPI_MspInit+0x140>)
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI2_MOSI
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800365c:	193b      	adds	r3, r7, r4
 800365e:	2210      	movs	r2, #16
 8003660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	193b      	adds	r3, r7, r4
 8003664:	2202      	movs	r2, #2
 8003666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	193b      	adds	r3, r7, r4
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	193b      	adds	r3, r7, r4
 8003670:	2200      	movs	r2, #0
 8003672:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003674:	193b      	adds	r3, r7, r4
 8003676:	2201      	movs	r2, #1
 8003678:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	193a      	adds	r2, r7, r4
 800367c:	23a0      	movs	r3, #160	@ 0xa0
 800367e:	05db      	lsls	r3, r3, #23
 8003680:	0011      	movs	r1, r2
 8003682:	0018      	movs	r0, r3
 8003684:	f000 feb0 	bl	80043e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003688:	193b      	adds	r3, r7, r4
 800368a:	2204      	movs	r2, #4
 800368c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	193b      	adds	r3, r7, r4
 8003690:	2202      	movs	r2, #2
 8003692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	193b      	adds	r3, r7, r4
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	2201      	movs	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <HAL_SPI_MspInit+0x144>)
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f000 fe9b 	bl	80043e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036b2:	0021      	movs	r1, r4
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	00d2      	lsls	r2, r2, #3
 80036ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	000c      	movs	r4, r1
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	2202      	movs	r2, #2
 80036c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	193b      	adds	r3, r7, r4
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	2205      	movs	r2, #5
 80036d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	193b      	adds	r3, r7, r4
 80036d8:	4a15      	ldr	r2, [pc, #84]	@ (8003730 <HAL_SPI_MspInit+0x144>)
 80036da:	0019      	movs	r1, r3
 80036dc:	0010      	movs	r0, r2
 80036de:	f000 fe83 	bl	80043e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036e2:	0021      	movs	r1, r4
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	0152      	lsls	r2, r2, #5
 80036ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	2202      	movs	r2, #2
 80036f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	187b      	adds	r3, r7, r1
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_SPI_MspInit+0x144>)
 8003708:	0019      	movs	r1, r3
 800370a:	0010      	movs	r0, r2
 800370c:	f000 fe6c 	bl	80043e8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	2100      	movs	r1, #0
 8003714:	201a      	movs	r0, #26
 8003716:	f000 fc33 	bl	8003f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800371a:	201a      	movs	r0, #26
 800371c:	f000 fc45 	bl	8003faa <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003720:	46c0      	nop			@ (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b00b      	add	sp, #44	@ 0x2c
 8003726:	bd90      	pop	{r4, r7, pc}
 8003728:	40003800 	.word	0x40003800
 800372c:	40021000 	.word	0x40021000
 8003730:	50000400 	.word	0x50000400

08003734 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b08d      	sub	sp, #52	@ 0x34
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	241c      	movs	r4, #28
 800373e:	193b      	adds	r3, r7, r4
 8003740:	0018      	movs	r0, r3
 8003742:	2314      	movs	r3, #20
 8003744:	001a      	movs	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	f006 f8fe 	bl	8009948 <memset>
  if(htim_base->Instance==TIM2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	05db      	lsls	r3, r3, #23
 8003754:	429a      	cmp	r2, r3
 8003756:	d137      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x94>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003758:	4b45      	ldr	r3, [pc, #276]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 800375a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800375c:	4b44      	ldr	r3, [pc, #272]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 800375e:	2101      	movs	r1, #1
 8003760:	430a      	orrs	r2, r1
 8003762:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003764:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b3f      	ldr	r3, [pc, #252]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 8003772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003774:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	635a      	str	r2, [r3, #52]	@ 0x34
 800377c:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 800377e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003780:	2201      	movs	r2, #1
 8003782:	4013      	ands	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_INPUT_CAPTURE_Pin;
 8003788:	0021      	movs	r1, r4
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2202      	movs	r2, #2
 8003794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	187b      	adds	r3, r7, r1
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	187b      	adds	r3, r7, r1
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2202      	movs	r2, #2
 80037a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 80037a8:	187a      	adds	r2, r7, r1
 80037aa:	23a0      	movs	r3, #160	@ 0xa0
 80037ac:	05db      	lsls	r3, r3, #23
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 fe19 	bl	80043e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	200f      	movs	r0, #15
 80037bc:	f000 fbe0 	bl	8003f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037c0:	200f      	movs	r0, #15
 80037c2:	f000 fbf2 	bl	8003faa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80037c6:	e04f      	b.n	8003868 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <HAL_TIM_Base_MspInit+0x140>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d137      	bne.n	8003842 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d2:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037d8:	2102      	movs	r1, #2
 80037da:	430a      	orrs	r2, r1
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	4b21      	ldr	r3, [pc, #132]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037f0:	2101      	movs	r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_Pin;
 8003802:	211c      	movs	r1, #28
 8003804:	187b      	adds	r3, r7, r1
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2202      	movs	r2, #2
 800380e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2201      	movs	r2, #1
 8003820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8003822:	187a      	adds	r2, r7, r1
 8003824:	23a0      	movs	r3, #160	@ 0xa0
 8003826:	05db      	lsls	r3, r3, #23
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fddc 	bl	80043e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	2010      	movs	r0, #16
 8003836:	f000 fba3 	bl	8003f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800383a:	2010      	movs	r0, #16
 800383c:	f000 fbb5 	bl	8003faa <HAL_NVIC_EnableIRQ>
}
 8003840:	e012      	b.n	8003868 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM17)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <HAL_TIM_Base_MspInit+0x144>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 800384e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 8003852:	2180      	movs	r1, #128	@ 0x80
 8003854:	02c9      	lsls	r1, r1, #11
 8003856:	430a      	orrs	r2, r1
 8003858:	641a      	str	r2, [r3, #64]	@ 0x40
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_TIM_Base_MspInit+0x13c>)
 800385c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	02db      	lsls	r3, r3, #11
 8003862:	4013      	ands	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b00d      	add	sp, #52	@ 0x34
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	40000400 	.word	0x40000400
 8003878:	40014800 	.word	0x40014800

0800387c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b08b      	sub	sp, #44	@ 0x2c
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	2414      	movs	r4, #20
 8003886:	193b      	adds	r3, r7, r4
 8003888:	0018      	movs	r0, r3
 800388a:	2314      	movs	r3, #20
 800388c:	001a      	movs	r2, r3
 800388e:	2100      	movs	r1, #0
 8003890:	f006 f85a 	bl	8009948 <memset>
  if(htim->Instance==TIM2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	05db      	lsls	r3, r3, #23
 800389c:	429a      	cmp	r2, r3
 800389e:	d123      	bne.n	80038e8 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 80038a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	430a      	orrs	r2, r1
 80038aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80038ac:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 80038ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_BACK_PULSE_Pin;
 80038b8:	0021      	movs	r1, r4
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2202      	movs	r2, #2
 80038be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2202      	movs	r2, #2
 80038c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2202      	movs	r2, #2
 80038d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_BACK_PULSE_GPIO_Port, &GPIO_InitStruct);
 80038d8:	187a      	adds	r2, r7, r1
 80038da:	23a0      	movs	r3, #160	@ 0xa0
 80038dc:	05db      	lsls	r3, r3, #23
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 fd81 	bl	80043e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80038e6:	e04f      	b.n	8003988 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <HAL_TIM_MspPostInit+0x118>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d123      	bne.n	800393a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f2:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 80038f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f6:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 8003900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003902:	2201      	movs	r2, #1
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISTANCE_SENSOR_FRONT_PULSE_Pin;
 800390a:	2114      	movs	r1, #20
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	187b      	adds	r3, r7, r1
 8003914:	2202      	movs	r2, #2
 8003916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	187b      	adds	r3, r7, r1
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	187b      	adds	r3, r7, r1
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003924:	187b      	adds	r3, r7, r1
 8003926:	2201      	movs	r2, #1
 8003928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DISTANCE_SENSOR_FRONT_PULSE_GPIO_Port, &GPIO_InitStruct);
 800392a:	187a      	adds	r2, r7, r1
 800392c:	23a0      	movs	r3, #160	@ 0xa0
 800392e:	05db      	lsls	r3, r3, #23
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f000 fd58 	bl	80043e8 <HAL_GPIO_Init>
}
 8003938:	e026      	b.n	8003988 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM17)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <HAL_TIM_MspPostInit+0x11c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d121      	bne.n	8003988 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003944:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 8003946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003948:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 800394a:	2108      	movs	r1, #8
 800394c:	430a      	orrs	r2, r1
 800394e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003950:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <HAL_TIM_MspPostInit+0x114>)
 8003952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003954:	2208      	movs	r2, #8
 8003956:	4013      	ands	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800395c:	2114      	movs	r1, #20
 800395e:	187b      	adds	r3, r7, r1
 8003960:	2202      	movs	r2, #2
 8003962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	187b      	adds	r3, r7, r1
 8003966:	2202      	movs	r2, #2
 8003968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	187b      	adds	r3, r7, r1
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2202      	movs	r2, #2
 800397a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800397c:	187b      	adds	r3, r7, r1
 800397e:	4a07      	ldr	r2, [pc, #28]	@ (800399c <HAL_TIM_MspPostInit+0x120>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f000 fd30 	bl	80043e8 <HAL_GPIO_Init>
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b00b      	add	sp, #44	@ 0x2c
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	40000400 	.word	0x40000400
 8003998:	40014800 	.word	0x40014800
 800399c:	50000c00 	.word	0x50000c00

080039a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b08b      	sub	sp, #44	@ 0x2c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	2414      	movs	r4, #20
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	0018      	movs	r0, r3
 80039ae:	2314      	movs	r3, #20
 80039b0:	001a      	movs	r2, r3
 80039b2:	2100      	movs	r1, #0
 80039b4:	f005 ffc8 	bl	8009948 <memset>
  if(huart->Instance==USART2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <HAL_UART_MspInit+0x8c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d130      	bne.n	8003a24 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039c8:	2180      	movs	r1, #128	@ 0x80
 80039ca:	0289      	lsls	r1, r1, #10
 80039cc:	430a      	orrs	r2, r1
 80039ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039d0:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	029b      	lsls	r3, r3, #10
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e2:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <HAL_UART_MspInit+0x90>)
 80039ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039f6:	0021      	movs	r1, r4
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	220c      	movs	r2, #12
 80039fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2202      	movs	r2, #2
 8003a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2201      	movs	r2, #1
 8003a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	187a      	adds	r2, r7, r1
 8003a18:	23a0      	movs	r3, #160	@ 0xa0
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	0011      	movs	r1, r2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fce2 	bl	80043e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b00b      	add	sp, #44	@ 0x2c
 8003a2a:	bd90      	pop	{r4, r7, pc}
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40021000 	.word	0x40021000

08003a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	e7fd      	b.n	8003a38 <NMI_Handler+0x4>

08003a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a40:	46c0      	nop			@ (mov r8, r8)
 8003a42:	e7fd      	b.n	8003a40 <HardFault_Handler+0x4>

08003a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a5c:	f000 f9a4 	bl	8003da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <DMA1_Channel1_IRQHandler+0x14>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fbac 	bl	80041cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	20000244 	.word	0x20000244

08003a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <TIM2_IRQHandler+0x14>)
 8003a86:	0018      	movs	r0, r3
 8003a88:	f003 fa3e 	bl	8006f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	20000304 	.word	0x20000304

08003a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <TIM3_IRQHandler+0x14>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f003 fa32 	bl	8006f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	20000350 	.word	0x20000350

08003ab0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <I2C1_IRQHandler+0x2c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	23e0      	movs	r3, #224	@ 0xe0
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d004      	beq.n	8003acc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <I2C1_IRQHandler+0x2c>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 feed 	bl	80048a4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003aca:	e003      	b.n	8003ad4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <I2C1_IRQHandler+0x2c>)
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fece 	bl	8004870 <HAL_I2C_EV_IRQHandler>
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	200001f0 	.word	0x200001f0

08003ae0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <SPI2_IRQHandler+0x14>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f002 fd46 	bl	8006578 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	200002a0 	.word	0x200002a0

08003af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  return 1;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_kill>:

int _kill(int pid, int sig)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b0e:	f005 ff75 	bl	80099fc <__errno>
 8003b12:	0003      	movs	r3, r0
 8003b14:	2216      	movs	r2, #22
 8003b16:	601a      	str	r2, [r3, #0]
  return -1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	425b      	negs	r3, r3
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_exit>:

void _exit (int status)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	425a      	negs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff ffe5 	bl	8003b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	e7fd      	b.n	8003b3a <_exit+0x16>

08003b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e00a      	b.n	8003b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b50:	e000      	b.n	8003b54 <_read+0x16>
 8003b52:	bf00      	nop
 8003b54:	0001      	movs	r1, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	60ba      	str	r2, [r7, #8]
 8003b5c:	b2ca      	uxtb	r2, r1
 8003b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3301      	adds	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	dbf0      	blt.n	8003b50 <_read+0x12>
  }

  return len;
 8003b6e:	687b      	ldr	r3, [r7, #4]
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e009      	b.n	8003b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	60ba      	str	r2, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	0018      	movs	r0, r3
 8003b94:	e000      	b.n	8003b98 <_write+0x20>
 8003b96:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	dbf1      	blt.n	8003b8a <_write+0x12>
  }
  return len;
 8003ba6:	687b      	ldr	r3, [r7, #4]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_close>:

int _close(int file)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	425b      	negs	r3, r3
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	0192      	lsls	r2, r2, #6
 8003bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_isatty>:

int _isatty(int file)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c10:	4a14      	ldr	r2, [pc, #80]	@ (8003c64 <_sbrk+0x5c>)
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <_sbrk+0x60>)
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <_sbrk+0x64>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <_sbrk+0x64>)
 8003c26:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <_sbrk+0x68>)
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <_sbrk+0x64>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d207      	bcs.n	8003c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c38:	f005 fee0 	bl	80099fc <__errno>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	220c      	movs	r2, #12
 8003c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	425b      	negs	r3, r3
 8003c46:	e009      	b.n	8003c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c48:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <_sbrk+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c4e:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	18d2      	adds	r2, r2, r3
 8003c56:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <_sbrk+0x64>)
 8003c58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b006      	add	sp, #24
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20002000 	.word	0x20002000
 8003c68:	00000400 	.word	0x00000400
 8003c6c:	200004fc 	.word	0x200004fc
 8003c70:	20000650 	.word	0x20000650

08003c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c80:	480d      	ldr	r0, [pc, #52]	@ (8003cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c84:	f7ff fff6 	bl	8003c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c88:	480c      	ldr	r0, [pc, #48]	@ (8003cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003c8a:	490d      	ldr	r1, [pc, #52]	@ (8003cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc4 <LoopForever+0xe>)
  movs r3, #0
 8003c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c90:	e002      	b.n	8003c98 <LoopCopyDataInit>

08003c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c96:	3304      	adds	r3, #4

08003c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c9c:	d3f9      	bcc.n	8003c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ccc <LoopForever+0x16>)
  movs r3, #0
 8003ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca4:	e001      	b.n	8003caa <LoopFillZerobss>

08003ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca8:	3204      	adds	r2, #4

08003caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cac:	d3fb      	bcc.n	8003ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003cae:	f005 feab 	bl	8009a08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003cb2:	f7ff f829 	bl	8002d08 <main>

08003cb6 <LoopForever>:

LoopForever:
  b LoopForever
 8003cb6:	e7fe      	b.n	8003cb6 <LoopForever>
  ldr   r0, =_estack
 8003cb8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003cc4:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8003cc8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003ccc:	20000650 	.word	0x20000650

08003cd0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cd0:	e7fe      	b.n	8003cd0 <ADC1_IRQHandler>
	...

08003cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cda:	1dfb      	adds	r3, r7, #7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_Init+0x3c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_Init+0x3c>)
 8003ce6:	2180      	movs	r1, #128	@ 0x80
 8003ce8:	0049      	lsls	r1, r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cee:	2003      	movs	r0, #3
 8003cf0:	f000 f810 	bl	8003d14 <HAL_InitTick>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e001      	b.n	8003d04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d00:	f7ff fbb6 	bl	8003470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d04:	1dfb      	adds	r3, r7, #7
 8003d06:	781b      	ldrb	r3, [r3, #0]
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40022000 	.word	0x40022000

08003d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <HAL_InitTick+0x88>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02b      	beq.n	8003d84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003da0 <HAL_InitTick+0x8c>)
 8003d2e:	681c      	ldr	r4, [r3, #0]
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_InitTick+0x88>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	0019      	movs	r1, r3
 8003d36:	23fa      	movs	r3, #250	@ 0xfa
 8003d38:	0098      	lsls	r0, r3, #2
 8003d3a:	f7fc fa01 	bl	8000140 <__udivsi3>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	0019      	movs	r1, r3
 8003d42:	0020      	movs	r0, r4
 8003d44:	f7fc f9fc 	bl	8000140 <__udivsi3>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f93d 	bl	8003fca <HAL_SYSTICK_Config>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d112      	bne.n	8003d7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d80a      	bhi.n	8003d70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	425b      	negs	r3, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f90c 	bl	8003f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <HAL_InitTick+0x90>)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e00d      	b.n	8003d8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003d70:	230f      	movs	r3, #15
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e008      	b.n	8003d8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e003      	b.n	8003d8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d84:	230f      	movs	r3, #15
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003d8c:	230f      	movs	r3, #15
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	781b      	ldrb	r3, [r3, #0]
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b005      	add	sp, #20
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_IncTick+0x1c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	001a      	movs	r2, r3
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_IncTick+0x20>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	18d2      	adds	r2, r2, r3
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_IncTick+0x20>)
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	46c0      	nop			@ (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	20000500 	.word	0x20000500

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b02      	ldr	r3, [pc, #8]	@ (8003ddc <HAL_GetTick+0x10>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	20000500 	.word	0x20000500

08003de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	d005      	beq.n	8003e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_Delay+0x44>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	001a      	movs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	f7ff ffe0 	bl	8003dcc <HAL_GetTick>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d8f7      	bhi.n	8003e08 <HAL_Delay+0x28>
  {
  }
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	20000008 	.word	0x20000008

08003e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	0002      	movs	r2, r0
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e3a:	d809      	bhi.n	8003e50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	001a      	movs	r2, r3
 8003e42:	231f      	movs	r3, #31
 8003e44:	401a      	ands	r2, r3
 8003e46:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <__NVIC_EnableIRQ+0x30>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4091      	lsls	r1, r2
 8003e4c:	000a      	movs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b002      	add	sp, #8
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	0002      	movs	r2, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e70:	d828      	bhi.n	8003ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e72:	4a2f      	ldr	r2, [pc, #188]	@ (8003f30 <__NVIC_SetPriority+0xd4>)
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	33c0      	adds	r3, #192	@ 0xc0
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	589b      	ldr	r3, [r3, r2]
 8003e82:	1dfa      	adds	r2, r7, #7
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	0011      	movs	r1, r2
 8003e88:	2203      	movs	r2, #3
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	00d2      	lsls	r2, r2, #3
 8003e8e:	21ff      	movs	r1, #255	@ 0xff
 8003e90:	4091      	lsls	r1, r2
 8003e92:	000a      	movs	r2, r1
 8003e94:	43d2      	mvns	r2, r2
 8003e96:	401a      	ands	r2, r3
 8003e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	22ff      	movs	r2, #255	@ 0xff
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	1dfb      	adds	r3, r7, #7
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	4003      	ands	r3, r0
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eb0:	481f      	ldr	r0, [pc, #124]	@ (8003f30 <__NVIC_SetPriority+0xd4>)
 8003eb2:	1dfb      	adds	r3, r7, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	33c0      	adds	r3, #192	@ 0xc0
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ec2:	e031      	b.n	8003f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <__NVIC_SetPriority+0xd8>)
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	0019      	movs	r1, r3
 8003ecc:	230f      	movs	r3, #15
 8003ece:	400b      	ands	r3, r1
 8003ed0:	3b08      	subs	r3, #8
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	3306      	adds	r3, #6
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	18d3      	adds	r3, r2, r3
 8003eda:	3304      	adds	r3, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1dfa      	adds	r2, r7, #7
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	00d2      	lsls	r2, r2, #3
 8003eea:	21ff      	movs	r1, #255	@ 0xff
 8003eec:	4091      	lsls	r1, r2
 8003eee:	000a      	movs	r2, r1
 8003ef0:	43d2      	mvns	r2, r2
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	22ff      	movs	r2, #255	@ 0xff
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	0018      	movs	r0, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	4003      	ands	r3, r0
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f0c:	4809      	ldr	r0, [pc, #36]	@ (8003f34 <__NVIC_SetPriority+0xd8>)
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	001c      	movs	r4, r3
 8003f14:	230f      	movs	r3, #15
 8003f16:	4023      	ands	r3, r4
 8003f18:	3b08      	subs	r3, #8
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	3306      	adds	r3, #6
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	18c3      	adds	r3, r0, r3
 8003f24:	3304      	adds	r3, #4
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b003      	add	sp, #12
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	1e5a      	subs	r2, r3, #1
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	045b      	lsls	r3, r3, #17
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d301      	bcc.n	8003f50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e010      	b.n	8003f72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <SysTick_Config+0x44>)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	3a01      	subs	r2, #1
 8003f56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f58:	2301      	movs	r3, #1
 8003f5a:	425b      	negs	r3, r3
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff ff7c 	bl	8003e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <SysTick_Config+0x44>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6a:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <SysTick_Config+0x44>)
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b002      	add	sp, #8
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	e000e010 	.word	0xe000e010

08003f80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	1c02      	adds	r2, r0, #0
 8003f90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	0011      	movs	r1, r2
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff ff5d 	bl	8003e5c <__NVIC_SetPriority>
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff ff33 	bl	8003e28 <__NVIC_EnableIRQ>
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff ffaf 	bl	8003f38 <SysTick_Config>
 8003fda:	0003      	movs	r3, r0
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e077      	b.n	80040e6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80040f0 <HAL_DMA_Init+0x10c>)
 8003ffc:	4694      	mov	ip, r2
 8003ffe:	4463      	add	r3, ip
 8004000:	2114      	movs	r1, #20
 8004002:	0018      	movs	r0, r3
 8004004:	f7fc f89c 	bl	8000140 <__udivsi3>
 8004008:	0003      	movs	r3, r0
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2225      	movs	r2, #37	@ 0x25
 8004014:	2102      	movs	r1, #2
 8004016:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4934      	ldr	r1, [pc, #208]	@ (80040f4 <HAL_DMA_Init+0x110>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f971 	bl	8004348 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	01db      	lsls	r3, r3, #7
 800406e:	429a      	cmp	r2, r3
 8004070:	d102      	bne.n	8004078 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004080:	213f      	movs	r1, #63	@ 0x3f
 8004082:	400a      	ands	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800408e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_DMA_Init+0xd8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d80d      	bhi.n	80040bc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f97c 	bl	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	e008      	b.n	80040ce <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2225      	movs	r2, #37	@ 0x25
 80040d8:	2101      	movs	r1, #1
 80040da:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	bffdfff8 	.word	0xbffdfff8
 80040f4:	ffff800f 	.word	0xffff800f

080040f8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	210f      	movs	r1, #15
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2225      	movs	r2, #37	@ 0x25
 800410c:	5c9b      	ldrb	r3, [r3, r2]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d006      	beq.n	8004122 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e049      	b.n	80041b6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	210e      	movs	r1, #14
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	491d      	ldr	r1, [pc, #116]	@ (80041c4 <HAL_DMA_Abort_IT+0xcc>)
 800414e:	400a      	ands	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004152:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_DMA_Abort_IT+0xd0>)
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	221c      	movs	r2, #28
 800415c:	4013      	ands	r3, r2
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_DMA_Abort_IT+0xd0>)
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004184:	490f      	ldr	r1, [pc, #60]	@ (80041c4 <HAL_DMA_Abort_IT+0xcc>)
 8004186:	400a      	ands	r2, r1
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2225      	movs	r2, #37	@ 0x25
 8004198:	2101      	movs	r1, #1
 800419a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	0010      	movs	r0, r2
 80041b4:	4798      	blx	r3
    }
  }
  return status;
 80041b6:	230f      	movs	r3, #15
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fffffeff 	.word	0xfffffeff
 80041c8:	40020000 	.word	0x40020000

080041cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80041d4:	4b55      	ldr	r3, [pc, #340]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	221c      	movs	r2, #28
 80041e8:	4013      	ands	r3, r2
 80041ea:	2204      	movs	r2, #4
 80041ec:	409a      	lsls	r2, r3
 80041ee:	0013      	movs	r3, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4013      	ands	r3, r2
 80041f4:	d027      	beq.n	8004246 <HAL_DMA_IRQHandler+0x7a>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2204      	movs	r2, #4
 80041fa:	4013      	ands	r3, r2
 80041fc:	d023      	beq.n	8004246 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2220      	movs	r2, #32
 8004206:	4013      	ands	r3, r2
 8004208:	d107      	bne.n	800421a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2104      	movs	r1, #4
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800421a:	4b44      	ldr	r3, [pc, #272]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	221c      	movs	r2, #28
 8004224:	4013      	ands	r3, r2
 8004226:	2204      	movs	r2, #4
 8004228:	409a      	lsls	r2, r3
 800422a:	4b40      	ldr	r3, [pc, #256]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d100      	bne.n	800423a <HAL_DMA_IRQHandler+0x6e>
 8004238:	e073      	b.n	8004322 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	0010      	movs	r0, r2
 8004242:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004244:	e06d      	b.n	8004322 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	221c      	movs	r2, #28
 800424c:	4013      	ands	r3, r2
 800424e:	2202      	movs	r2, #2
 8004250:	409a      	lsls	r2, r3
 8004252:	0013      	movs	r3, r2
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	d02e      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xec>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	d02a      	beq.n	80042b8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2220      	movs	r2, #32
 800426a:	4013      	ands	r3, r2
 800426c:	d10b      	bne.n	8004286 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	210a      	movs	r1, #10
 800427a:	438a      	bics	r2, r1
 800427c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2225      	movs	r2, #37	@ 0x25
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004286:	4b29      	ldr	r3, [pc, #164]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	221c      	movs	r2, #28
 8004290:	4013      	ands	r3, r2
 8004292:	2202      	movs	r2, #2
 8004294:	409a      	lsls	r2, r3
 8004296:	4b25      	ldr	r3, [pc, #148]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	2100      	movs	r1, #0
 80042a2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03a      	beq.n	8004322 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	0010      	movs	r0, r2
 80042b4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80042b6:	e034      	b.n	8004322 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	221c      	movs	r2, #28
 80042be:	4013      	ands	r3, r2
 80042c0:	2208      	movs	r2, #8
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	d02b      	beq.n	8004324 <HAL_DMA_IRQHandler+0x158>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2208      	movs	r2, #8
 80042d0:	4013      	ands	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	210e      	movs	r1, #14
 80042e0:	438a      	bics	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042e4:	4b11      	ldr	r3, [pc, #68]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	221c      	movs	r2, #28
 80042ee:	4013      	ands	r3, r2
 80042f0:	2201      	movs	r2, #1
 80042f2:	409a      	lsls	r2, r3
 80042f4:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <HAL_DMA_IRQHandler+0x160>)
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2225      	movs	r2, #37	@ 0x25
 8004304:	2101      	movs	r1, #1
 8004306:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	@ 0x24
 800430c:	2100      	movs	r1, #0
 800430e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	0010      	movs	r0, r2
 8004320:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	46c0      	nop			@ (mov r8, r8)
}
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40020000 	.word	0x40020000

08004330 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2225      	movs	r2, #37	@ 0x25
 800433c:	5c9b      	ldrb	r3, [r3, r2]
 800433e:	b2db      	uxtb	r3, r3
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b002      	add	sp, #8
 8004346:	bd80      	pop	{r7, pc}

08004348 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	4a10      	ldr	r2, [pc, #64]	@ (8004398 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004358:	4694      	mov	ip, r2
 800435a:	4463      	add	r3, ip
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	001a      	movs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	001a      	movs	r2, r3
 800436a:	23ff      	movs	r3, #255	@ 0xff
 800436c:	4013      	ands	r3, r2
 800436e:	3b08      	subs	r3, #8
 8004370:	2114      	movs	r1, #20
 8004372:	0018      	movs	r0, r3
 8004374:	f7fb fee4 	bl	8000140 <__udivsi3>
 8004378:	0003      	movs	r3, r0
 800437a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a07      	ldr	r2, [pc, #28]	@ (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004380:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	221f      	movs	r2, #31
 8004386:	4013      	ands	r3, r2
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bd80      	pop	{r7, pc}
 8004398:	10008200 	.word	0x10008200
 800439c:	40020880 	.word	0x40020880

080043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	223f      	movs	r2, #63	@ 0x3f
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80043b6:	4694      	mov	ip, r2
 80043b8:	4463      	add	r3, ip
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	001a      	movs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a07      	ldr	r2, [pc, #28]	@ (80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	4013      	ands	r3, r2
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	1000823f 	.word	0x1000823f
 80043e4:	40020940 	.word	0x40020940

080043e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f6:	e147      	b.n	8004688 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4091      	lsls	r1, r2
 8004402:	000a      	movs	r2, r1
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d100      	bne.n	8004410 <HAL_GPIO_Init+0x28>
 800440e:	e138      	b.n	8004682 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	4013      	ands	r3, r2
 8004418:	2b01      	cmp	r3, #1
 800441a:	d005      	beq.n	8004428 <HAL_GPIO_Init+0x40>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2203      	movs	r2, #3
 8004422:	4013      	ands	r3, r2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d130      	bne.n	800448a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	409a      	lsls	r2, r3
 8004436:	0013      	movs	r3, r2
 8004438:	43da      	mvns	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	409a      	lsls	r2, r3
 800444a:	0013      	movs	r3, r2
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445e:	2201      	movs	r2, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	409a      	lsls	r2, r3
 8004464:	0013      	movs	r3, r2
 8004466:	43da      	mvns	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	2201      	movs	r2, #1
 8004476:	401a      	ands	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	409a      	lsls	r2, r3
 800447c:	0013      	movs	r3, r2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	2b03      	cmp	r3, #3
 8004494:	d017      	beq.n	80044c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	409a      	lsls	r2, r3
 80044a4:	0013      	movs	r3, r2
 80044a6:	43da      	mvns	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	0013      	movs	r3, r2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2203      	movs	r2, #3
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d123      	bne.n	800451a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	58d3      	ldr	r3, [r2, r3]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2207      	movs	r2, #7
 80044e4:	4013      	ands	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	409a      	lsls	r2, r3
 80044ec:	0013      	movs	r3, r2
 80044ee:	43da      	mvns	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2107      	movs	r1, #7
 80044fe:	400b      	ands	r3, r1
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	409a      	lsls	r2, r3
 8004504:	0013      	movs	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	08da      	lsrs	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3208      	adds	r2, #8
 8004514:	0092      	lsls	r2, r2, #2
 8004516:	6939      	ldr	r1, [r7, #16]
 8004518:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	409a      	lsls	r2, r3
 8004528:	0013      	movs	r3, r2
 800452a:	43da      	mvns	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2203      	movs	r2, #3
 8004538:	401a      	ands	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	0013      	movs	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	23c0      	movs	r3, #192	@ 0xc0
 8004554:	029b      	lsls	r3, r3, #10
 8004556:	4013      	ands	r3, r2
 8004558:	d100      	bne.n	800455c <HAL_GPIO_Init+0x174>
 800455a:	e092      	b.n	8004682 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800455c:	4a50      	ldr	r2, [pc, #320]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3318      	adds	r3, #24
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	589b      	ldr	r3, [r3, r2]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2203      	movs	r2, #3
 800456e:	4013      	ands	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	220f      	movs	r2, #15
 8004574:	409a      	lsls	r2, r3
 8004576:	0013      	movs	r3, r2
 8004578:	43da      	mvns	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	23a0      	movs	r3, #160	@ 0xa0
 8004584:	05db      	lsls	r3, r3, #23
 8004586:	429a      	cmp	r2, r3
 8004588:	d013      	beq.n	80045b2 <HAL_GPIO_Init+0x1ca>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a45      	ldr	r2, [pc, #276]	@ (80046a4 <HAL_GPIO_Init+0x2bc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00d      	beq.n	80045ae <HAL_GPIO_Init+0x1c6>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a44      	ldr	r2, [pc, #272]	@ (80046a8 <HAL_GPIO_Init+0x2c0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <HAL_GPIO_Init+0x1c2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a43      	ldr	r2, [pc, #268]	@ (80046ac <HAL_GPIO_Init+0x2c4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_GPIO_Init+0x1be>
 80045a2:	2303      	movs	r3, #3
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x1cc>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e004      	b.n	80045b4 <HAL_GPIO_Init+0x1cc>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e002      	b.n	80045b4 <HAL_GPIO_Init+0x1cc>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_GPIO_Init+0x1cc>
 80045b2:	2300      	movs	r3, #0
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	2103      	movs	r1, #3
 80045b8:	400a      	ands	r2, r1
 80045ba:	00d2      	lsls	r2, r2, #3
 80045bc:	4093      	lsls	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80045c4:	4936      	ldr	r1, [pc, #216]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	3318      	adds	r3, #24
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045d2:	4b33      	ldr	r3, [pc, #204]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43da      	mvns	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	2380      	movs	r3, #128	@ 0x80
 80045e8:	035b      	lsls	r3, r3, #13
 80045ea:	4013      	ands	r3, r2
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045f6:	4b2a      	ldr	r3, [pc, #168]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045fc:	4b28      	ldr	r3, [pc, #160]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43da      	mvns	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	039b      	lsls	r3, r3, #14
 8004614:	4013      	ands	r3, r2
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004620:	4b1f      	ldr	r3, [pc, #124]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004626:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 8004628:	2384      	movs	r3, #132	@ 0x84
 800462a:	58d3      	ldr	r3, [r2, r3]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43da      	mvns	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	2380      	movs	r3, #128	@ 0x80
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	4013      	ands	r3, r2
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800464c:	4914      	ldr	r1, [pc, #80]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 800464e:	2284      	movs	r2, #132	@ 0x84
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004654:	4a12      	ldr	r2, [pc, #72]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 8004656:	2380      	movs	r3, #128	@ 0x80
 8004658:	58d3      	ldr	r3, [r2, r3]
 800465a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43da      	mvns	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	025b      	lsls	r3, r3, #9
 800466e:	4013      	ands	r3, r2
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800467a:	4909      	ldr	r1, [pc, #36]	@ (80046a0 <HAL_GPIO_Init+0x2b8>)
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	40da      	lsrs	r2, r3
 8004690:	1e13      	subs	r3, r2, #0
 8004692:	d000      	beq.n	8004696 <HAL_GPIO_Init+0x2ae>
 8004694:	e6b0      	b.n	80043f8 <HAL_GPIO_Init+0x10>
  }
}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021800 	.word	0x40021800
 80046a4:	50000400 	.word	0x50000400
 80046a8:	50000800 	.word	0x50000800
 80046ac:	50000c00 	.word	0x50000c00

080046b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	000a      	movs	r2, r1
 80046ba:	1cbb      	adds	r3, r7, #2
 80046bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	1cba      	adds	r2, r7, #2
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	4013      	ands	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046ca:	230f      	movs	r3, #15
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046d4:	230f      	movs	r3, #15
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	0008      	movs	r0, r1
 80046f4:	0011      	movs	r1, r2
 80046f6:	1cbb      	adds	r3, r7, #2
 80046f8:	1c02      	adds	r2, r0, #0
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	1c7b      	adds	r3, r7, #1
 80046fe:	1c0a      	adds	r2, r1, #0
 8004700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004702:	1c7b      	adds	r3, r7, #1
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800470a:	1cbb      	adds	r3, r7, #2
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004712:	e003      	b.n	800471c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004714:	1cbb      	adds	r3, r7, #2
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800471c:	46c0      	nop			@ (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e08f      	b.n	8004856 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2241      	movs	r2, #65	@ 0x41
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2240      	movs	r2, #64	@ 0x40
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fe feb3 	bl	80034b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2241      	movs	r2, #65	@ 0x41
 8004756:	2124      	movs	r1, #36	@ 0x24
 8004758:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	438a      	bics	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	493b      	ldr	r1, [pc, #236]	@ (8004860 <HAL_I2C_Init+0x13c>)
 8004774:	400a      	ands	r2, r1
 8004776:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4938      	ldr	r1, [pc, #224]	@ (8004864 <HAL_I2C_Init+0x140>)
 8004784:	400a      	ands	r2, r1
 8004786:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d108      	bne.n	80047a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2180      	movs	r1, #128	@ 0x80
 800479a:	0209      	lsls	r1, r1, #8
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e007      	b.n	80047b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2184      	movs	r1, #132	@ 0x84
 80047ac:	0209      	lsls	r1, r1, #8
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d109      	bne.n	80047ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2180      	movs	r1, #128	@ 0x80
 80047c6:	0109      	lsls	r1, r1, #4
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e007      	b.n	80047de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4923      	ldr	r1, [pc, #140]	@ (8004868 <HAL_I2C_Init+0x144>)
 80047da:	400a      	ands	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4920      	ldr	r1, [pc, #128]	@ (800486c <HAL_I2C_Init+0x148>)
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	491a      	ldr	r1, [pc, #104]	@ (8004864 <HAL_I2C_Init+0x140>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2101      	movs	r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2241      	movs	r2, #65	@ 0x41
 8004842:	2120      	movs	r1, #32
 8004844:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2242      	movs	r2, #66	@ 0x42
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	f0ffffff 	.word	0xf0ffffff
 8004864:	ffff7fff 	.word	0xffff7fff
 8004868:	fffff7ff 	.word	0xfffff7ff
 800486c:	02008000 	.word	0x02008000

08004870 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
  }
}
 800489c:	46c0      	nop			@ (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	001a      	movs	r2, r3
 80048c2:	2301      	movs	r3, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	d010      	beq.n	80048ea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	09db      	lsrs	r3, r3, #7
 80048cc:	001a      	movs	r2, r3
 80048ce:	2301      	movs	r3, #1
 80048d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048d2:	d00a      	beq.n	80048ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d8:	2201      	movs	r2, #1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2280      	movs	r2, #128	@ 0x80
 80048e6:	0052      	lsls	r2, r2, #1
 80048e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	0a9b      	lsrs	r3, r3, #10
 80048ee:	001a      	movs	r2, r3
 80048f0:	2301      	movs	r3, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d010      	beq.n	8004918 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	09db      	lsrs	r3, r3, #7
 80048fa:	001a      	movs	r2, r3
 80048fc:	2301      	movs	r3, #1
 80048fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004900:	d00a      	beq.n	8004918 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	2208      	movs	r2, #8
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	00d2      	lsls	r2, r2, #3
 8004916:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	0a5b      	lsrs	r3, r3, #9
 800491c:	001a      	movs	r2, r3
 800491e:	2301      	movs	r3, #1
 8004920:	4013      	ands	r3, r2
 8004922:	d010      	beq.n	8004946 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	09db      	lsrs	r3, r3, #7
 8004928:	001a      	movs	r2, r3
 800492a:	2301      	movs	r3, #1
 800492c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800492e:	d00a      	beq.n	8004946 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004934:	2202      	movs	r2, #2
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2280      	movs	r2, #128	@ 0x80
 8004942:	0092      	lsls	r2, r2, #2
 8004944:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	220b      	movs	r2, #11
 8004950:	4013      	ands	r3, r2
 8004952:	d005      	beq.n	8004960 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0011      	movs	r1, r2
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fc44 	bl	80051e8 <I2C_ITError>
  }
}
 8004960:	46c0      	nop			@ (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b006      	add	sp, #24
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004970:	46c0      	nop			@ (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b002      	add	sp, #8
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	b002      	add	sp, #8
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	0008      	movs	r0, r1
 8004992:	0011      	movs	r1, r2
 8004994:	1cfb      	adds	r3, r7, #3
 8004996:	1c02      	adds	r2, r0, #0
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	003b      	movs	r3, r7
 800499c:	1c0a      	adds	r2, r1, #0
 800499e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2240      	movs	r2, #64	@ 0x40
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <I2C_Slave_ISR_IT+0x24>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0fb      	b.n	8004bf4 <I2C_Slave_ISR_IT+0x21c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	001a      	movs	r2, r3
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d00c      	beq.n	8004a2a <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	001a      	movs	r2, r3
 8004a16:	2301      	movs	r3, #1
 8004a18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a1a:	d006      	beq.n	8004a2a <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 f9f6 	bl	8004e14 <I2C_ITSlaveCplt>
 8004a28:	e0df      	b.n	8004bea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	001a      	movs	r2, r3
 8004a30:	2301      	movs	r3, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d054      	beq.n	8004ae0 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a40:	d04e      	beq.n	8004ae0 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d12d      	bne.n	8004aa8 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2241      	movs	r2, #65	@ 0x41
 8004a50:	5c9b      	ldrb	r3, [r3, r2]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b28      	cmp	r3, #40	@ 0x28
 8004a56:	d10b      	bne.n	8004a70 <I2C_Slave_ISR_IT+0x98>
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	049b      	lsls	r3, r3, #18
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d106      	bne.n	8004a70 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0011      	movs	r1, r2
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fb63 	bl	8005134 <I2C_ITListenCplt>
 8004a6e:	e036      	b.n	8004ade <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2241      	movs	r2, #65	@ 0x41
 8004a74:	5c9b      	ldrb	r3, [r3, r2]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b29      	cmp	r3, #41	@ 0x29
 8004a7a:	d110      	bne.n	8004a9e <I2C_Slave_ISR_IT+0xc6>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bfc <I2C_Slave_ISR_IT+0x224>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00c      	beq.n	8004a9e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fcd5 	bl	800543e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f956 	bl	8004d48 <I2C_ITSlaveSeqCplt>
 8004a9c:	e01f      	b.n	8004ade <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004aa6:	e09d      	b.n	8004be4 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2210      	movs	r2, #16
 8004aae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <I2C_Slave_ISR_IT+0xf6>
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	045b      	lsls	r3, r3, #17
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d000      	beq.n	8004ace <I2C_Slave_ISR_IT+0xf6>
 8004acc:	e08a      	b.n	8004be4 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fb86 	bl	80051e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004adc:	e082      	b.n	8004be4 <I2C_Slave_ISR_IT+0x20c>
 8004ade:	e081      	b.n	8004be4 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d031      	beq.n	8004b50 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	001a      	movs	r2, r3
 8004af2:	2301      	movs	r3, #1
 8004af4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004af6:	d02b      	beq.n	8004b50 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d154      	bne.n	8004be8 <I2C_Slave_ISR_IT+0x210>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	@ (8004bfc <I2C_Slave_ISR_IT+0x224>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d050      	beq.n	8004be8 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 f8fd 	bl	8004d48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b4e:	e04b      	b.n	8004be8 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	001a      	movs	r2, r3
 8004b56:	2301      	movs	r3, #1
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d00c      	beq.n	8004b76 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	001a      	movs	r2, r3
 8004b62:	2301      	movs	r3, #1
 8004b64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b66:	d006      	beq.n	8004b76 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f846 	bl	8004c00 <I2C_ITAddrCplt>
 8004b74:	e039      	b.n	8004bea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d033      	beq.n	8004bea <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	001a      	movs	r2, r3
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b8c:	d02d      	beq.n	8004bea <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d018      	beq.n	8004bca <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004bc8:	e00f      	b.n	8004bea <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	045b      	lsls	r3, r3, #17
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <I2C_Slave_ISR_IT+0x202>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f8b3 	bl	8004d48 <I2C_ITSlaveSeqCplt>
 8004be2:	e002      	b.n	8004bea <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	e000      	b.n	8004bea <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8004be8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2240      	movs	r2, #64	@ 0x40
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	ffff0000 	.word	0xffff0000

08004c00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c00:	b5b0      	push	{r4, r5, r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2241      	movs	r2, #65	@ 0x41
 8004c0e:	5c9b      	ldrb	r3, [r3, r2]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	001a      	movs	r2, r3
 8004c14:	2328      	movs	r3, #40	@ 0x28
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b28      	cmp	r3, #40	@ 0x28
 8004c1a:	d000      	beq.n	8004c1e <I2C_ITAddrCplt+0x1e>
 8004c1c:	e088      	b.n	8004d30 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	250f      	movs	r5, #15
 8004c2a:	197b      	adds	r3, r7, r5
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	400a      	ands	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	200c      	movs	r0, #12
 8004c3e:	183b      	adds	r3, r7, r0
 8004c40:	21fe      	movs	r1, #254	@ 0xfe
 8004c42:	400a      	ands	r2, r1
 8004c44:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	240a      	movs	r4, #10
 8004c50:	193b      	adds	r3, r7, r4
 8004c52:	0592      	lsls	r2, r2, #22
 8004c54:	0d92      	lsrs	r2, r2, #22
 8004c56:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	2308      	movs	r3, #8
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	21fe      	movs	r1, #254	@ 0xfe
 8004c66:	400a      	ands	r2, r1
 8004c68:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d148      	bne.n	8004d04 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c72:	0021      	movs	r1, r4
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	09db      	lsrs	r3, r3, #7
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	183b      	adds	r3, r7, r0
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4053      	eors	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	001a      	movs	r2, r3
 8004c86:	2306      	movs	r3, #6
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d120      	bne.n	8004cce <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004c8c:	183b      	adds	r3, r7, r0
 8004c8e:	187a      	adds	r2, r7, r1
 8004c90:	8812      	ldrh	r2, [r2, #0]
 8004c92:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d14c      	bne.n	8004d40 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2240      	movs	r2, #64	@ 0x40
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	197b      	adds	r3, r7, r5
 8004cc2:	7819      	ldrb	r1, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7ff fe5e 	bl	8004988 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ccc:	e038      	b.n	8004d40 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004cce:	240c      	movs	r4, #12
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	18ba      	adds	r2, r7, r2
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0011      	movs	r1, r2
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fbec 	bl	80054c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2240      	movs	r2, #64	@ 0x40
 8004cec:	2100      	movs	r1, #0
 8004cee:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	7819      	ldrb	r1, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7ff fe43 	bl	8004988 <HAL_I2C_AddrCallback>
}
 8004d02:	e01d      	b.n	8004d40 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 fbd7 	bl	80054c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2240      	movs	r2, #64	@ 0x40
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	230f      	movs	r3, #15
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	7819      	ldrb	r1, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff fe2d 	bl	8004988 <HAL_I2C_AddrCallback>
}
 8004d2e:	e007      	b.n	8004d40 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2208      	movs	r2, #8
 8004d36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2240      	movs	r2, #64	@ 0x40
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]
}
 8004d40:	46c0      	nop			@ (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b004      	add	sp, #16
 8004d46:	bdb0      	pop	{r4, r5, r7, pc}

08004d48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2242      	movs	r2, #66	@ 0x42
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	0b9b      	lsrs	r3, r3, #14
 8004d64:	001a      	movs	r2, r3
 8004d66:	2301      	movs	r3, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d008      	beq.n	8004d7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4925      	ldr	r1, [pc, #148]	@ (8004e0c <I2C_ITSlaveSeqCplt+0xc4>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e00d      	b.n	8004d9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0bdb      	lsrs	r3, r3, #15
 8004d82:	001a      	movs	r2, r3
 8004d84:	2301      	movs	r3, #1
 8004d86:	4013      	ands	r3, r2
 8004d88:	d007      	beq.n	8004d9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	491e      	ldr	r1, [pc, #120]	@ (8004e10 <I2C_ITSlaveSeqCplt+0xc8>)
 8004d96:	400a      	ands	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	@ 0x41
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b29      	cmp	r3, #41	@ 0x29
 8004da4:	d114      	bne.n	8004dd0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2241      	movs	r2, #65	@ 0x41
 8004daa:	2128      	movs	r1, #40	@ 0x28
 8004dac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2221      	movs	r2, #33	@ 0x21
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2101      	movs	r1, #1
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 fb81 	bl	80054c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2240      	movs	r2, #64	@ 0x40
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff fdcd 	bl	8004968 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dce:	e019      	b.n	8004e04 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2241      	movs	r2, #65	@ 0x41
 8004dd4:	5c9b      	ldrb	r3, [r3, r2]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dda:	d113      	bne.n	8004e04 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2241      	movs	r2, #65	@ 0x41
 8004de0:	2128      	movs	r1, #40	@ 0x28
 8004de2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2222      	movs	r2, #34	@ 0x22
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2102      	movs	r1, #2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 fb66 	bl	80054c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	@ 0x40
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff fdba 	bl	8004978 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b004      	add	sp, #16
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	ffffbfff 	.word	0xffffbfff
 8004e10:	ffff7fff 	.word	0xffff7fff

08004e14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e30:	200b      	movs	r0, #11
 8004e32:	183b      	adds	r3, r7, r0
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	2141      	movs	r1, #65	@ 0x41
 8004e38:	5c52      	ldrb	r2, [r2, r1]
 8004e3a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2220      	movs	r2, #32
 8004e42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e44:	183b      	adds	r3, r7, r0
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b21      	cmp	r3, #33	@ 0x21
 8004e4a:	d003      	beq.n	8004e54 <I2C_ITSlaveCplt+0x40>
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b29      	cmp	r3, #41	@ 0x29
 8004e52:	d109      	bne.n	8004e68 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e54:	4ab0      	ldr	r2, [pc, #704]	@ (8005118 <I2C_ITSlaveCplt+0x304>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0011      	movs	r1, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 fb30 	bl	80054c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2221      	movs	r2, #33	@ 0x21
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e66:	e020      	b.n	8004eaa <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e68:	220b      	movs	r2, #11
 8004e6a:	18bb      	adds	r3, r7, r2
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b22      	cmp	r3, #34	@ 0x22
 8004e70:	d003      	beq.n	8004e7a <I2C_ITSlaveCplt+0x66>
 8004e72:	18bb      	adds	r3, r7, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e78:	d109      	bne.n	8004e8e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e7a:	4aa8      	ldr	r2, [pc, #672]	@ (800511c <I2C_ITSlaveCplt+0x308>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0011      	movs	r1, r2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 fb1d 	bl	80054c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2222      	movs	r2, #34	@ 0x22
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e8c:	e00d      	b.n	8004eaa <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004e8e:	230b      	movs	r3, #11
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b28      	cmp	r3, #40	@ 0x28
 8004e96:	d108      	bne.n	8004eaa <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004e98:	4aa1      	ldr	r2, [pc, #644]	@ (8005120 <I2C_ITSlaveCplt+0x30c>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0011      	movs	r1, r2
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 fb0e 	bl	80054c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2180      	movs	r1, #128	@ 0x80
 8004eb6:	0209      	lsls	r1, r1, #8
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4997      	ldr	r1, [pc, #604]	@ (8005124 <I2C_ITSlaveCplt+0x310>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fab5 	bl	800543e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	0b9b      	lsrs	r3, r3, #14
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2301      	movs	r3, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	d013      	beq.n	8004f08 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	498f      	ldr	r1, [pc, #572]	@ (8005128 <I2C_ITSlaveCplt+0x314>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f06:	e018      	b.n	8004f3a <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	0bdb      	lsrs	r3, r3, #15
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4013      	ands	r3, r2
 8004f12:	d012      	beq.n	8004f3a <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4983      	ldr	r1, [pc, #524]	@ (800512c <I2C_ITSlaveCplt+0x318>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d006      	beq.n	8004f3a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	001a      	movs	r2, r3
 8004f40:	2301      	movs	r3, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	d020      	beq.n	8004f88 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	2204      	movs	r2, #4
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d051      	beq.n	800504e <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	001a      	movs	r2, r3
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fb4:	d04b      	beq.n	800504e <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d12d      	bne.n	800501c <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2241      	movs	r2, #65	@ 0x41
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b28      	cmp	r3, #40	@ 0x28
 8004fca:	d10b      	bne.n	8004fe4 <I2C_ITSlaveCplt+0x1d0>
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	049b      	lsls	r3, r3, #18
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d106      	bne.n	8004fe4 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0011      	movs	r1, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f8a9 	bl	8005134 <I2C_ITListenCplt>
 8004fe2:	e034      	b.n	800504e <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2241      	movs	r2, #65	@ 0x41
 8004fe8:	5c9b      	ldrb	r3, [r3, r2]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b29      	cmp	r3, #41	@ 0x29
 8004fee:	d110      	bne.n	8005012 <I2C_ITSlaveCplt+0x1fe>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8005130 <I2C_ITSlaveCplt+0x31c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00c      	beq.n	8005012 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fa1b 	bl	800543e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff fe9c 	bl	8004d48 <I2C_ITSlaveSeqCplt>
 8005010:	e01d      	b.n	800504e <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2210      	movs	r2, #16
 8005018:	61da      	str	r2, [r3, #28]
 800501a:	e018      	b.n	800504e <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	2204      	movs	r2, #4
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <I2C_ITSlaveCplt+0x22c>
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	045b      	lsls	r3, r3, #17
 800503c:	429a      	cmp	r2, r3
 800503e:	d106      	bne.n	800504e <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0011      	movs	r1, r2
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f8cd 	bl	80051e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2242      	movs	r2, #66	@ 0x42
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0011      	movs	r1, r2
 800506c:	0018      	movs	r0, r3
 800506e:	f000 f8bb 	bl	80051e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2241      	movs	r2, #65	@ 0x41
 8005076:	5c9b      	ldrb	r3, [r3, r2]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b28      	cmp	r3, #40	@ 0x28
 800507c:	d147      	bne.n	800510e <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f855 	bl	8005134 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800508a:	e040      	b.n	800510e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	4a27      	ldr	r2, [pc, #156]	@ (8005130 <I2C_ITSlaveCplt+0x31c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d016      	beq.n	80050c4 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff fe55 	bl	8004d48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <I2C_ITSlaveCplt+0x31c>)
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2241      	movs	r2, #65	@ 0x41
 80050a8:	2120      	movs	r1, #32
 80050aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2240      	movs	r2, #64	@ 0x40
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fc73 	bl	80049a8 <HAL_I2C_ListenCpltCallback>
}
 80050c2:	e024      	b.n	800510e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2241      	movs	r2, #65	@ 0x41
 80050c8:	5c9b      	ldrb	r3, [r3, r2]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b22      	cmp	r3, #34	@ 0x22
 80050ce:	d10f      	bne.n	80050f0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2241      	movs	r2, #65	@ 0x41
 80050d4:	2120      	movs	r1, #32
 80050d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2240      	movs	r2, #64	@ 0x40
 80050e2:	2100      	movs	r1, #0
 80050e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff fc45 	bl	8004978 <HAL_I2C_SlaveRxCpltCallback>
}
 80050ee:	e00e      	b.n	800510e <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2241      	movs	r2, #65	@ 0x41
 80050f4:	2120      	movs	r1, #32
 80050f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2240      	movs	r2, #64	@ 0x40
 8005102:	2100      	movs	r1, #0
 8005104:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff fc2d 	bl	8004968 <HAL_I2C_SlaveTxCpltCallback>
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b006      	add	sp, #24
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	00008001 	.word	0x00008001
 800511c:	00008002 	.word	0x00008002
 8005120:	00008003 	.word	0x00008003
 8005124:	fe00e800 	.word	0xfe00e800
 8005128:	ffffbfff 	.word	0xffffbfff
 800512c:	ffff7fff 	.word	0xffff7fff
 8005130:	ffff0000 	.word	0xffff0000

08005134 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a27      	ldr	r2, [pc, #156]	@ (80051e0 <I2C_ITListenCplt+0xac>)
 8005142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2241      	movs	r2, #65	@ 0x41
 800514e:	2120      	movs	r1, #32
 8005150:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2242      	movs	r2, #66	@ 0x42
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	001a      	movs	r2, r3
 8005166:	2301      	movs	r3, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d022      	beq.n	80051b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	2204      	movs	r2, #4
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051b2:	4a0c      	ldr	r2, [pc, #48]	@ (80051e4 <I2C_ITListenCplt+0xb0>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0011      	movs	r1, r2
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 f981 	bl	80054c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2210      	movs	r2, #16
 80051c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2240      	movs	r2, #64	@ 0x40
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff fbe9 	bl	80049a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b002      	add	sp, #8
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	ffff0000 	.word	0xffff0000
 80051e4:	00008003 	.word	0x00008003

080051e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051f2:	200f      	movs	r0, #15
 80051f4:	183b      	adds	r3, r7, r0
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	2141      	movs	r1, #65	@ 0x41
 80051fa:	5c52      	ldrb	r2, [r2, r1]
 80051fc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2242      	movs	r2, #66	@ 0x42
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a72      	ldr	r2, [pc, #456]	@ (80053d4 <I2C_ITError+0x1ec>)
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800521e:	183b      	adds	r3, r7, r0
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b28      	cmp	r3, #40	@ 0x28
 8005224:	d007      	beq.n	8005236 <I2C_ITError+0x4e>
 8005226:	183b      	adds	r3, r7, r0
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b29      	cmp	r3, #41	@ 0x29
 800522c:	d003      	beq.n	8005236 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800522e:	183b      	adds	r3, r7, r0
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b2a      	cmp	r3, #42	@ 0x2a
 8005234:	d10c      	bne.n	8005250 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2103      	movs	r1, #3
 800523a:	0018      	movs	r0, r3
 800523c:	f000 f940 	bl	80054c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2241      	movs	r2, #65	@ 0x41
 8005244:	2128      	movs	r1, #40	@ 0x28
 8005246:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a63      	ldr	r2, [pc, #396]	@ (80053d8 <I2C_ITError+0x1f0>)
 800524c:	635a      	str	r2, [r3, #52]	@ 0x34
 800524e:	e032      	b.n	80052b6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005250:	4a62      	ldr	r2, [pc, #392]	@ (80053dc <I2C_ITError+0x1f4>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f000 f932 	bl	80054c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0018      	movs	r0, r3
 8005260:	f000 f8ed 	bl	800543e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2241      	movs	r2, #65	@ 0x41
 8005268:	5c9b      	ldrb	r3, [r3, r2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b60      	cmp	r3, #96	@ 0x60
 800526e:	d01f      	beq.n	80052b0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2241      	movs	r2, #65	@ 0x41
 8005274:	2120      	movs	r1, #32
 8005276:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2220      	movs	r2, #32
 8005280:	4013      	ands	r3, r2
 8005282:	2b20      	cmp	r3, #32
 8005284:	d114      	bne.n	80052b0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2210      	movs	r2, #16
 800528e:	4013      	ands	r3, r2
 8005290:	2b10      	cmp	r3, #16
 8005292:	d109      	bne.n	80052a8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2210      	movs	r2, #16
 800529a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a0:	2204      	movs	r2, #4
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2220      	movs	r2, #32
 80052ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03b      	beq.n	800533c <I2C_ITError+0x154>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b11      	cmp	r3, #17
 80052c8:	d002      	beq.n	80052d0 <I2C_ITError+0xe8>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b21      	cmp	r3, #33	@ 0x21
 80052ce:	d135      	bne.n	800533c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	401a      	ands	r2, r3
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d107      	bne.n	80052f4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	493c      	ldr	r1, [pc, #240]	@ (80053e0 <I2C_ITError+0x1f8>)
 80052f0:	400a      	ands	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7ff f819 	bl	8004330 <HAL_DMA_GetState>
 80052fe:	0003      	movs	r3, r0
 8005300:	2b01      	cmp	r3, #1
 8005302:	d016      	beq.n	8005332 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	4a36      	ldr	r2, [pc, #216]	@ (80053e4 <I2C_ITError+0x1fc>)
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2240      	movs	r2, #64	@ 0x40
 8005310:	2100      	movs	r1, #0
 8005312:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe feed 	bl	80040f8 <HAL_DMA_Abort_IT>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d051      	beq.n	80053c6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	0018      	movs	r0, r3
 800532e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005330:	e049      	b.n	80053c6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f859 	bl	80053ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800533a:	e044      	b.n	80053c6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d03b      	beq.n	80053bc <I2C_ITError+0x1d4>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b12      	cmp	r3, #18
 8005348:	d002      	beq.n	8005350 <I2C_ITError+0x168>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b22      	cmp	r3, #34	@ 0x22
 800534e:	d135      	bne.n	80053bc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	401a      	ands	r2, r3
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	429a      	cmp	r2, r3
 8005362:	d107      	bne.n	8005374 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	491e      	ldr	r1, [pc, #120]	@ (80053e8 <I2C_ITError+0x200>)
 8005370:	400a      	ands	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005378:	0018      	movs	r0, r3
 800537a:	f7fe ffd9 	bl	8004330 <HAL_DMA_GetState>
 800537e:	0003      	movs	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d016      	beq.n	80053b2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005388:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <I2C_ITError+0x1fc>)
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	@ 0x40
 8005390:	2100      	movs	r1, #0
 8005392:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	0018      	movs	r0, r3
 800539a:	f7fe fead 	bl	80040f8 <HAL_DMA_Abort_IT>
 800539e:	1e03      	subs	r3, r0, #0
 80053a0:	d013      	beq.n	80053ca <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	0018      	movs	r0, r3
 80053ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053b0:	e00b      	b.n	80053ca <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 f819 	bl	80053ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ba:	e006      	b.n	80053ca <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f814 	bl	80053ec <I2C_TreatErrorCallback>
  }
}
 80053c4:	e002      	b.n	80053cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	e000      	b.n	80053cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ca:	46c0      	nop			@ (mov r8, r8)
}
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b004      	add	sp, #16
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	ffff0000 	.word	0xffff0000
 80053d8:	080049d9 	.word	0x080049d9
 80053dc:	00008003 	.word	0x00008003
 80053e0:	ffffbfff 	.word	0xffffbfff
 80053e4:	08005483 	.word	0x08005483
 80053e8:	ffff7fff 	.word	0xffff7fff

080053ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2241      	movs	r2, #65	@ 0x41
 80053f8:	5c9b      	ldrb	r3, [r3, r2]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b60      	cmp	r3, #96	@ 0x60
 80053fe:	d10f      	bne.n	8005420 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2241      	movs	r2, #65	@ 0x41
 8005404:	2120      	movs	r1, #32
 8005406:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2240      	movs	r2, #64	@ 0x40
 8005412:	2100      	movs	r1, #0
 8005414:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0018      	movs	r0, r3
 800541a:	f7ff fad5 	bl	80049c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800541e:	e00a      	b.n	8005436 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2240      	movs	r2, #64	@ 0x40
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f7ff fac1 	bl	80049b8 <HAL_I2C_ErrorCallback>
}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2202      	movs	r2, #2
 800544e:	4013      	ands	r3, r2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d103      	bne.n	800545c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2201      	movs	r2, #1
 8005464:	4013      	ands	r3, r2
 8005466:	2b01      	cmp	r3, #1
 8005468:	d007      	beq.n	800547a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2101      	movs	r1, #1
 8005476:	430a      	orrs	r2, r1
 8005478:	619a      	str	r2, [r3, #24]
  }
}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b002      	add	sp, #8
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	2200      	movs	r2, #0
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ac:	2200      	movs	r2, #0
 80054ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7ff ff9a 	bl	80053ec <I2C_TreatErrorCallback>
}
 80054b8:	46c0      	nop			@ (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	000a      	movs	r2, r1
 80054ca:	1cbb      	adds	r3, r7, #2
 80054cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054d2:	1cbb      	adds	r3, r7, #2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	d010      	beq.n	80054fe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2242      	movs	r2, #66	@ 0x42
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2241      	movs	r2, #65	@ 0x41
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	001a      	movs	r2, r3
 80054ee:	2328      	movs	r3, #40	@ 0x28
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b28      	cmp	r3, #40	@ 0x28
 80054f4:	d003      	beq.n	80054fe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22b0      	movs	r2, #176	@ 0xb0
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054fe:	1cbb      	adds	r3, r7, #2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	2202      	movs	r2, #2
 8005504:	4013      	ands	r3, r2
 8005506:	d010      	beq.n	800552a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2244      	movs	r2, #68	@ 0x44
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2241      	movs	r2, #65	@ 0x41
 8005514:	5c9b      	ldrb	r3, [r3, r2]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	001a      	movs	r2, r3
 800551a:	2328      	movs	r3, #40	@ 0x28
 800551c:	4013      	ands	r3, r2
 800551e:	2b28      	cmp	r3, #40	@ 0x28
 8005520:	d003      	beq.n	800552a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	22b0      	movs	r2, #176	@ 0xb0
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800552a:	1cbb      	adds	r3, r7, #2
 800552c:	2200      	movs	r2, #0
 800552e:	5e9b      	ldrsh	r3, [r3, r2]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da03      	bge.n	800553c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	22b8      	movs	r2, #184	@ 0xb8
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800553c:	1cbb      	adds	r3, r7, #2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	2b10      	cmp	r3, #16
 8005542:	d103      	bne.n	800554c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2290      	movs	r2, #144	@ 0x90
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800554c:	1cbb      	adds	r3, r7, #2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	2b20      	cmp	r3, #32
 8005552:	d103      	bne.n	800555c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800555c:	1cbb      	adds	r3, r7, #2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	d103      	bne.n	800556c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2240      	movs	r2, #64	@ 0x40
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	43d9      	mvns	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	400a      	ands	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b004      	add	sp, #16
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2241      	movs	r2, #65	@ 0x41
 8005596:	5c9b      	ldrb	r3, [r3, r2]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b20      	cmp	r3, #32
 800559c:	d138      	bne.n	8005610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2240      	movs	r2, #64	@ 0x40
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e032      	b.n	8005612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2240      	movs	r2, #64	@ 0x40
 80055b0:	2101      	movs	r1, #1
 80055b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2241      	movs	r2, #65	@ 0x41
 80055b8:	2124      	movs	r1, #36	@ 0x24
 80055ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2101      	movs	r1, #1
 80055c8:	438a      	bics	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4911      	ldr	r1, [pc, #68]	@ (800561c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80055d8:	400a      	ands	r2, r1
 80055da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6819      	ldr	r1, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2101      	movs	r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2241      	movs	r2, #65	@ 0x41
 8005600:	2120      	movs	r1, #32
 8005602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2240      	movs	r2, #64	@ 0x40
 8005608:	2100      	movs	r1, #0
 800560a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	0018      	movs	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	b002      	add	sp, #8
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	ffffefff 	.word	0xffffefff

08005620 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2241      	movs	r2, #65	@ 0x41
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	d139      	bne.n	80056aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2240      	movs	r2, #64	@ 0x40
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005640:	2302      	movs	r3, #2
 8005642:	e033      	b.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	@ 0x40
 8005648:	2101      	movs	r1, #1
 800564a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2241      	movs	r2, #65	@ 0x41
 8005650:	2124      	movs	r1, #36	@ 0x24
 8005652:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	438a      	bics	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2101      	movs	r1, #1
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2241      	movs	r2, #65	@ 0x41
 800569a:	2120      	movs	r1, #32
 800569c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2240      	movs	r2, #64	@ 0x40
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	0018      	movs	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b004      	add	sp, #16
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	fffff0ff 	.word	0xfffff0ff

080056b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80056c0:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d11f      	bne.n	800571c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80056dc:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	0013      	movs	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4912      	ldr	r1, [pc, #72]	@ (8005734 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fa fd28 	bl	8000140 <__udivsi3>
 80056f0:	0003      	movs	r3, r0
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056f6:	e008      	b.n	800570a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b01      	subs	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e001      	b.n	800570a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e009      	b.n	800571e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800570a:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	401a      	ands	r2, r3
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	429a      	cmp	r2, r3
 800571a:	d0ed      	beq.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b004      	add	sp, #16
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	40007000 	.word	0x40007000
 800572c:	fffff9ff 	.word	0xfffff9ff
 8005730:	20000000 	.word	0x20000000
 8005734:	000f4240 	.word	0x000f4240

08005738 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800573c:	4b03      	ldr	r3, [pc, #12]	@ (800574c <LL_RCC_GetAPB1Prescaler+0x14>)
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	23e0      	movs	r3, #224	@ 0xe0
 8005742:	01db      	lsls	r3, r3, #7
 8005744:	4013      	ands	r3, r2
}
 8005746:	0018      	movs	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000

08005750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e2fe      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	4013      	ands	r3, r2
 800576a:	d100      	bne.n	800576e <HAL_RCC_OscConfig+0x1e>
 800576c:	e07c      	b.n	8005868 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576e:	4bc3      	ldr	r3, [pc, #780]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2238      	movs	r2, #56	@ 0x38
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005778:	4bc0      	ldr	r3, [pc, #768]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2203      	movs	r2, #3
 800577e:	4013      	ands	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d102      	bne.n	800578e <HAL_RCC_OscConfig+0x3e>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d002      	beq.n	8005794 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d10b      	bne.n	80057ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	4bb9      	ldr	r3, [pc, #740]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	029b      	lsls	r3, r3, #10
 800579c:	4013      	ands	r3, r2
 800579e:	d062      	beq.n	8005866 <HAL_RCC_OscConfig+0x116>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d15e      	bne.n	8005866 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e2d9      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	025b      	lsls	r3, r3, #9
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_OscConfig+0x78>
 80057b8:	4bb0      	ldr	r3, [pc, #704]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4baf      	ldr	r3, [pc, #700]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	0249      	lsls	r1, r1, #9
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e020      	b.n	800580a <HAL_RCC_OscConfig+0xba>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	23a0      	movs	r3, #160	@ 0xa0
 80057ce:	02db      	lsls	r3, r3, #11
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d10e      	bne.n	80057f2 <HAL_RCC_OscConfig+0xa2>
 80057d4:	4ba9      	ldr	r3, [pc, #676]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4ba8      	ldr	r3, [pc, #672]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057da:	2180      	movs	r1, #128	@ 0x80
 80057dc:	02c9      	lsls	r1, r1, #11
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	4ba6      	ldr	r3, [pc, #664]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4ba5      	ldr	r3, [pc, #660]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	0249      	lsls	r1, r1, #9
 80057ec:	430a      	orrs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	e00b      	b.n	800580a <HAL_RCC_OscConfig+0xba>
 80057f2:	4ba2      	ldr	r3, [pc, #648]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4ba1      	ldr	r3, [pc, #644]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80057f8:	49a1      	ldr	r1, [pc, #644]	@ (8005a80 <HAL_RCC_OscConfig+0x330>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	4b9f      	ldr	r3, [pc, #636]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b9e      	ldr	r3, [pc, #632]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005804:	499f      	ldr	r1, [pc, #636]	@ (8005a84 <HAL_RCC_OscConfig+0x334>)
 8005806:	400a      	ands	r2, r1
 8005808:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fe fadb 	bl	8003dcc <HAL_GetTick>
 8005816:	0003      	movs	r3, r0
 8005818:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fe fad6 	bl	8003dcc <HAL_GetTick>
 8005820:	0002      	movs	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	@ 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e298      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800582e:	4b93      	ldr	r3, [pc, #588]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	2380      	movs	r3, #128	@ 0x80
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	4013      	ands	r3, r2
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xcc>
 800583a:	e015      	b.n	8005868 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fe fac6 	bl	8003dcc <HAL_GetTick>
 8005840:	0003      	movs	r3, r0
 8005842:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005846:	f7fe fac1 	bl	8003dcc <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	@ 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e283      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005858:	4b88      	ldr	r3, [pc, #544]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	2380      	movs	r3, #128	@ 0x80
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	4013      	ands	r3, r2
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0xf6>
 8005864:	e000      	b.n	8005868 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005866:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2202      	movs	r2, #2
 800586e:	4013      	ands	r3, r2
 8005870:	d100      	bne.n	8005874 <HAL_RCC_OscConfig+0x124>
 8005872:	e099      	b.n	80059a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005874:	4b81      	ldr	r3, [pc, #516]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2238      	movs	r2, #56	@ 0x38
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800587e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2203      	movs	r2, #3
 8005884:	4013      	ands	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b10      	cmp	r3, #16
 800588c:	d102      	bne.n	8005894 <HAL_RCC_OscConfig+0x144>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d002      	beq.n	800589a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d135      	bne.n	8005906 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800589a:	4b78      	ldr	r3, [pc, #480]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4013      	ands	r3, r2
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x162>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e256      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b2:	4b72      	ldr	r3, [pc, #456]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4a74      	ldr	r2, [pc, #464]	@ (8005a88 <HAL_RCC_OscConfig+0x338>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d112      	bne.n	80058f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80058ce:	4b6b      	ldr	r3, [pc, #428]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a6e      	ldr	r2, [pc, #440]	@ (8005a8c <HAL_RCC_OscConfig+0x33c>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	0019      	movs	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	4b67      	ldr	r3, [pc, #412]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80058e2:	4b66      	ldr	r3, [pc, #408]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	0adb      	lsrs	r3, r3, #11
 80058e8:	2207      	movs	r2, #7
 80058ea:	4013      	ands	r3, r2
 80058ec:	4a68      	ldr	r2, [pc, #416]	@ (8005a90 <HAL_RCC_OscConfig+0x340>)
 80058ee:	40da      	lsrs	r2, r3
 80058f0:	4b68      	ldr	r3, [pc, #416]	@ (8005a94 <HAL_RCC_OscConfig+0x344>)
 80058f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058f4:	4b68      	ldr	r3, [pc, #416]	@ (8005a98 <HAL_RCC_OscConfig+0x348>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7fe fa0b 	bl	8003d14 <HAL_InitTick>
 80058fe:	1e03      	subs	r3, r0, #0
 8005900:	d051      	beq.n	80059a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e22c      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d030      	beq.n	8005970 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800590e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a5e      	ldr	r2, [pc, #376]	@ (8005a8c <HAL_RCC_OscConfig+0x33c>)
 8005914:	4013      	ands	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	4b57      	ldr	r3, [pc, #348]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005922:	4b56      	ldr	r3, [pc, #344]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b55      	ldr	r3, [pc, #340]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005928:	2180      	movs	r1, #128	@ 0x80
 800592a:	0049      	lsls	r1, r1, #1
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fe fa4c 	bl	8003dcc <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593a:	f7fe fa47 	bl	8003dcc <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e209      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	2380      	movs	r3, #128	@ 0x80
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4013      	ands	r3, r2
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005958:	4b48      	ldr	r3, [pc, #288]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a88 <HAL_RCC_OscConfig+0x338>)
 800595e:	4013      	ands	r3, r2
 8005960:	0019      	movs	r1, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	4b44      	ldr	r3, [pc, #272]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	e01b      	b.n	80059a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005970:	4b42      	ldr	r3, [pc, #264]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b41      	ldr	r3, [pc, #260]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005976:	4949      	ldr	r1, [pc, #292]	@ (8005a9c <HAL_RCC_OscConfig+0x34c>)
 8005978:	400a      	ands	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fe fa26 	bl	8003dcc <HAL_GetTick>
 8005980:	0003      	movs	r3, r0
 8005982:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005986:	f7fe fa21 	bl	8003dcc <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e1e3      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005998:	4b38      	ldr	r3, [pc, #224]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	@ 0x80
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4013      	ands	r3, r2
 80059a2:	d1f0      	bne.n	8005986 <HAL_RCC_OscConfig+0x236>
 80059a4:	e000      	b.n	80059a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2208      	movs	r2, #8
 80059ae:	4013      	ands	r3, r2
 80059b0:	d047      	beq.n	8005a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80059b2:	4b32      	ldr	r3, [pc, #200]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2238      	movs	r2, #56	@ 0x38
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b18      	cmp	r3, #24
 80059bc:	d10a      	bne.n	80059d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80059be:	4b2f      	ldr	r3, [pc, #188]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	2202      	movs	r2, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d03c      	beq.n	8005a42 <HAL_RCC_OscConfig+0x2f2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d138      	bne.n	8005a42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e1c5      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d019      	beq.n	8005a10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80059dc:	4b27      	ldr	r3, [pc, #156]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80059de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059e0:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 80059e2:	2101      	movs	r1, #1
 80059e4:	430a      	orrs	r2, r1
 80059e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fe f9f0 	bl	8003dcc <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f2:	f7fe f9eb 	bl	8003dcc <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1ad      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a04:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a08:	2202      	movs	r2, #2
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d0f1      	beq.n	80059f2 <HAL_RCC_OscConfig+0x2a2>
 8005a0e:	e018      	b.n	8005a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005a10:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a14:	4b19      	ldr	r3, [pc, #100]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a16:	2101      	movs	r1, #1
 8005a18:	438a      	bics	r2, r1
 8005a1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fe f9d6 	bl	8003dcc <HAL_GetTick>
 8005a20:	0003      	movs	r3, r0
 8005a22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a26:	f7fe f9d1 	bl	8003dcc <HAL_GetTick>
 8005a2a:	0002      	movs	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e193      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a38:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d1f1      	bne.n	8005a26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <HAL_RCC_OscConfig+0x2fe>
 8005a4c:	e0c6      	b.n	8005bdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a4e:	231f      	movs	r3, #31
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2238      	movs	r2, #56	@ 0x38
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d11e      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005a62:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <HAL_RCC_OscConfig+0x32c>)
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	2202      	movs	r2, #2
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d100      	bne.n	8005a6e <HAL_RCC_OscConfig+0x31e>
 8005a6c:	e0b6      	b.n	8005bdc <HAL_RCC_OscConfig+0x48c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d000      	beq.n	8005a78 <HAL_RCC_OscConfig+0x328>
 8005a76:	e0b1      	b.n	8005bdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e171      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	fffeffff 	.word	0xfffeffff
 8005a84:	fffbffff 	.word	0xfffbffff
 8005a88:	ffff80ff 	.word	0xffff80ff
 8005a8c:	ffffc7ff 	.word	0xffffc7ff
 8005a90:	00f42400 	.word	0x00f42400
 8005a94:	20000000 	.word	0x20000000
 8005a98:	20000004 	.word	0x20000004
 8005a9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aa0:	4bb1      	ldr	r3, [pc, #708]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	055b      	lsls	r3, r3, #21
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x360>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_RCC_OscConfig+0x362>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4bac      	ldr	r3, [pc, #688]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aba:	4bab      	ldr	r3, [pc, #684]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005abc:	2180      	movs	r1, #128	@ 0x80
 8005abe:	0549      	lsls	r1, r1, #21
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ac4:	4ba8      	ldr	r3, [pc, #672]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ac8:	2380      	movs	r3, #128	@ 0x80
 8005aca:	055b      	lsls	r3, r3, #21
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005ad2:	231f      	movs	r3, #31
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ada:	4ba4      	ldr	r3, [pc, #656]	@ (8005d6c <HAL_RCC_OscConfig+0x61c>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	2380      	movs	r3, #128	@ 0x80
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d11a      	bne.n	8005b1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4ba1      	ldr	r3, [pc, #644]	@ (8005d6c <HAL_RCC_OscConfig+0x61c>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4ba0      	ldr	r3, [pc, #640]	@ (8005d6c <HAL_RCC_OscConfig+0x61c>)
 8005aec:	2180      	movs	r1, #128	@ 0x80
 8005aee:	0049      	lsls	r1, r1, #1
 8005af0:	430a      	orrs	r2, r1
 8005af2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005af4:	f7fe f96a 	bl	8003dcc <HAL_GetTick>
 8005af8:	0003      	movs	r3, r0
 8005afa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afe:	f7fe f965 	bl	8003dcc <HAL_GetTick>
 8005b02:	0002      	movs	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e127      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b10:	4b96      	ldr	r3, [pc, #600]	@ (8005d6c <HAL_RCC_OscConfig+0x61c>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	2380      	movs	r3, #128	@ 0x80
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d106      	bne.n	8005b32 <HAL_RCC_OscConfig+0x3e2>
 8005b24:	4b90      	ldr	r3, [pc, #576]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b28:	4b8f      	ldr	r3, [pc, #572]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b30:	e01c      	b.n	8005b6c <HAL_RCC_OscConfig+0x41c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x404>
 8005b3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b3e:	4b8a      	ldr	r3, [pc, #552]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b40:	2104      	movs	r1, #4
 8005b42:	430a      	orrs	r2, r1
 8005b44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b46:	4b88      	ldr	r3, [pc, #544]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b4a:	4b87      	ldr	r3, [pc, #540]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b52:	e00b      	b.n	8005b6c <HAL_RCC_OscConfig+0x41c>
 8005b54:	4b84      	ldr	r3, [pc, #528]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b58:	4b83      	ldr	r3, [pc, #524]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b60:	4b81      	ldr	r3, [pc, #516]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b64:	4b80      	ldr	r3, [pc, #512]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b66:	2104      	movs	r1, #4
 8005b68:	438a      	bics	r2, r1
 8005b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d014      	beq.n	8005b9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fe f92a 	bl	8003dcc <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7c:	e009      	b.n	8005b92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fe f925 	bl	8003dcc <HAL_GetTick>
 8005b82:	0002      	movs	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	4a79      	ldr	r2, [pc, #484]	@ (8005d70 <HAL_RCC_OscConfig+0x620>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0e6      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	4b75      	ldr	r3, [pc, #468]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b96:	2202      	movs	r2, #2
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x42e>
 8005b9c:	e013      	b.n	8005bc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fe f915 	bl	8003dcc <HAL_GetTick>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ba6:	e009      	b.n	8005bbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fe f910 	bl	8003dcc <HAL_GetTick>
 8005bac:	0002      	movs	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8005d70 <HAL_RCC_OscConfig+0x620>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0d1      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005bc6:	231f      	movs	r3, #31
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b65      	ldr	r3, [pc, #404]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bd4:	4b64      	ldr	r3, [pc, #400]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005bd6:	4967      	ldr	r1, [pc, #412]	@ (8005d74 <HAL_RCC_OscConfig+0x624>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d100      	bne.n	8005be6 <HAL_RCC_OscConfig+0x496>
 8005be4:	e0bb      	b.n	8005d5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005be6:	4b60      	ldr	r3, [pc, #384]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2238      	movs	r2, #56	@ 0x38
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d100      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x4a4>
 8005bf2:	e07b      	b.n	8005cec <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d156      	bne.n	8005caa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b59      	ldr	r3, [pc, #356]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c02:	495d      	ldr	r1, [pc, #372]	@ (8005d78 <HAL_RCC_OscConfig+0x628>)
 8005c04:	400a      	ands	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fe f8e0 	bl	8003dcc <HAL_GetTick>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fe f8db 	bl	8003dcc <HAL_GetTick>
 8005c16:	0002      	movs	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e09d      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c24:	4b50      	ldr	r3, [pc, #320]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	049b      	lsls	r3, r3, #18
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c30:	4b4d      	ldr	r3, [pc, #308]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	4a51      	ldr	r2, [pc, #324]	@ (8005d7c <HAL_RCC_OscConfig+0x62c>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1a      	ldr	r2, [r3, #32]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	4b42      	ldr	r3, [pc, #264]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c60:	430a      	orrs	r2, r1
 8005c62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c64:	4b40      	ldr	r3, [pc, #256]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b3f      	ldr	r3, [pc, #252]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c6a:	2180      	movs	r1, #128	@ 0x80
 8005c6c:	0449      	lsls	r1, r1, #17
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005c72:	4b3d      	ldr	r3, [pc, #244]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	4b3c      	ldr	r3, [pc, #240]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c78:	2180      	movs	r1, #128	@ 0x80
 8005c7a:	0549      	lsls	r1, r1, #21
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fe f8a4 	bl	8003dcc <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8a:	f7fe f89f 	bl	8003dcc <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e061      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9c:	4b32      	ldr	r3, [pc, #200]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	049b      	lsls	r3, r3, #18
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x53a>
 8005ca8:	e059      	b.n	8005d5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005caa:	4b2f      	ldr	r3, [pc, #188]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b2e      	ldr	r3, [pc, #184]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cb0:	4931      	ldr	r1, [pc, #196]	@ (8005d78 <HAL_RCC_OscConfig+0x628>)
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fe f889 	bl	8003dcc <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fe f884 	bl	8003dcc <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e046      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd2:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	2380      	movs	r3, #128	@ 0x80
 8005cd8:	049b      	lsls	r3, r3, #18
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005cde:	4b22      	ldr	r3, [pc, #136]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4b21      	ldr	r3, [pc, #132]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ce4:	4926      	ldr	r1, [pc, #152]	@ (8005d80 <HAL_RCC_OscConfig+0x630>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	60da      	str	r2, [r3, #12]
 8005cea:	e038      	b.n	8005d5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e033      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2203      	movs	r2, #3
 8005d02:	401a      	ands	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d126      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2270      	movs	r2, #112	@ 0x70
 8005d10:	401a      	ands	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d11f      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	23fe      	movs	r3, #254	@ 0xfe
 8005d1e:	01db      	lsls	r3, r3, #7
 8005d20:	401a      	ands	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d116      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	23f8      	movs	r3, #248	@ 0xf8
 8005d30:	039b      	lsls	r3, r3, #14
 8005d32:	401a      	ands	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d10e      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	23e0      	movs	r3, #224	@ 0xe0
 8005d40:	051b      	lsls	r3, r3, #20
 8005d42:	401a      	ands	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d106      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	0f5b      	lsrs	r3, r3, #29
 8005d50:	075a      	lsls	r2, r3, #29
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b008      	add	sp, #32
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	00001388 	.word	0x00001388
 8005d74:	efffffff 	.word	0xefffffff
 8005d78:	feffffff 	.word	0xfeffffff
 8005d7c:	11c1808c 	.word	0x11c1808c
 8005d80:	eefefffc 	.word	0xeefefffc

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0e9      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b76      	ldr	r3, [pc, #472]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2207      	movs	r2, #7
 8005d9e:	4013      	ands	r3, r2
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d91e      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b73      	ldr	r3, [pc, #460]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2207      	movs	r2, #7
 8005dac:	4393      	bics	r3, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	4b70      	ldr	r3, [pc, #448]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005db8:	f7fe f808 	bl	8003dcc <HAL_GetTick>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005dc0:	e009      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc2:	f7fe f803 	bl	8003dcc <HAL_GetTick>
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8005f78 <HAL_RCC_ClockConfig+0x1f4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0ca      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005dd6:	4b67      	ldr	r3, [pc, #412]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2207      	movs	r2, #7
 8005ddc:	4013      	ands	r3, r2
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d1ee      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2202      	movs	r2, #2
 8005dea:	4013      	ands	r3, r2
 8005dec:	d015      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2204      	movs	r2, #4
 8005df4:	4013      	ands	r3, r2
 8005df6:	d006      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005df8:	4b60      	ldr	r3, [pc, #384]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005dfe:	21e0      	movs	r1, #224	@ 0xe0
 8005e00:	01c9      	lsls	r1, r1, #7
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e06:	4b5d      	ldr	r3, [pc, #372]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8005f80 <HAL_RCC_ClockConfig+0x1fc>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	0019      	movs	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	4b59      	ldr	r3, [pc, #356]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e16:	430a      	orrs	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4013      	ands	r3, r2
 8005e22:	d057      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e2c:	4b53      	ldr	r3, [pc, #332]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	029b      	lsls	r3, r3, #10
 8005e34:	4013      	ands	r3, r2
 8005e36:	d12b      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e097      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e44:	4b4d      	ldr	r3, [pc, #308]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	049b      	lsls	r3, r3, #18
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d11f      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e08b      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5c:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4013      	ands	r3, r2
 8005e66:	d113      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e07f      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d106      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e74:	4b41      	ldr	r3, [pc, #260]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e78:	2202      	movs	r2, #2
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e074      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e82:	4b3e      	ldr	r3, [pc, #248]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e86:	2202      	movs	r2, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e06d      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e90:	4b3a      	ldr	r3, [pc, #232]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2207      	movs	r2, #7
 8005e96:	4393      	bics	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b37      	ldr	r3, [pc, #220]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fd ff92 	bl	8003dcc <HAL_GetTick>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eac:	e009      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eae:	f7fd ff8d 	bl	8003dcc <HAL_GetTick>
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f78 <HAL_RCC_ClockConfig+0x1f4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e054      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2238      	movs	r2, #56	@ 0x38
 8005ec8:	401a      	ands	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d1ec      	bne.n	8005eae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b27      	ldr	r3, [pc, #156]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2207      	movs	r2, #7
 8005eda:	4013      	ands	r3, r2
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d21e      	bcs.n	8005f20 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b24      	ldr	r3, [pc, #144]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2207      	movs	r2, #7
 8005ee8:	4393      	bics	r3, r2
 8005eea:	0019      	movs	r1, r3
 8005eec:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ef4:	f7fd ff6a 	bl	8003dcc <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005efc:	e009      	b.n	8005f12 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efe:	f7fd ff65 	bl	8003dcc <HAL_GetTick>
 8005f02:	0002      	movs	r2, r0
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	4a1b      	ldr	r2, [pc, #108]	@ (8005f78 <HAL_RCC_ClockConfig+0x1f4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e02c      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <HAL_RCC_ClockConfig+0x1f0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2207      	movs	r2, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d1ee      	bne.n	8005efe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2204      	movs	r2, #4
 8005f26:	4013      	ands	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f2a:	4b14      	ldr	r3, [pc, #80]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	@ (8005f84 <HAL_RCC_ClockConfig+0x200>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	0019      	movs	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f3e:	f000 f829 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 8005f42:	0001      	movs	r1, r0
 8005f44:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <HAL_RCC_ClockConfig+0x1f8>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0a1b      	lsrs	r3, r3, #8
 8005f4a:	220f      	movs	r2, #15
 8005f4c:	401a      	ands	r2, r3
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <HAL_RCC_ClockConfig+0x204>)
 8005f50:	0092      	lsls	r2, r2, #2
 8005f52:	58d3      	ldr	r3, [r2, r3]
 8005f54:	221f      	movs	r2, #31
 8005f56:	4013      	ands	r3, r2
 8005f58:	000a      	movs	r2, r1
 8005f5a:	40da      	lsrs	r2, r3
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <HAL_RCC_ClockConfig+0x208>)
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <HAL_RCC_ClockConfig+0x20c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7fd fed5 	bl	8003d14 <HAL_InitTick>
 8005f6a:	0003      	movs	r3, r0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b004      	add	sp, #16
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40022000 	.word	0x40022000
 8005f78:	00001388 	.word	0x00001388
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	fffff0ff 	.word	0xfffff0ff
 8005f84:	ffff8fff 	.word	0xffff8fff
 8005f88:	0800bce4 	.word	0x0800bce4
 8005f8c:	20000000 	.word	0x20000000
 8005f90:	20000004 	.word	0x20000004

08005f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2238      	movs	r2, #56	@ 0x38
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005fa4:	4b39      	ldr	r3, [pc, #228]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	0adb      	lsrs	r3, r3, #11
 8005faa:	2207      	movs	r2, #7
 8005fac:	4013      	ands	r3, r2
 8005fae:	2201      	movs	r2, #1
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	4835      	ldr	r0, [pc, #212]	@ (8006090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fba:	f7fa f8c1 	bl	8000140 <__udivsi3>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	e05d      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fc4:	4b31      	ldr	r3, [pc, #196]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2238      	movs	r2, #56	@ 0x38
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d102      	bne.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd0:	4b30      	ldr	r3, [pc, #192]	@ (8006094 <HAL_RCC_GetSysClockFreq+0x100>)
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e054      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2238      	movs	r2, #56	@ 0x38
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d138      	bne.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fec:	4b27      	ldr	r3, [pc, #156]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	2207      	movs	r2, #7
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d10d      	bne.n	800601c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	4824      	ldr	r0, [pc, #144]	@ (8006094 <HAL_RCC_GetSysClockFreq+0x100>)
 8006004:	f7fa f89c 	bl	8000140 <__udivsi3>
 8006008:	0003      	movs	r3, r0
 800600a:	0019      	movs	r1, r3
 800600c:	4b1f      	ldr	r3, [pc, #124]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	227f      	movs	r2, #127	@ 0x7f
 8006014:	4013      	ands	r3, r2
 8006016:	434b      	muls	r3, r1
 8006018:	617b      	str	r3, [r7, #20]
        break;
 800601a:	e00d      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	481c      	ldr	r0, [pc, #112]	@ (8006090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006020:	f7fa f88e 	bl	8000140 <__udivsi3>
 8006024:	0003      	movs	r3, r0
 8006026:	0019      	movs	r1, r3
 8006028:	4b18      	ldr	r3, [pc, #96]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	227f      	movs	r2, #127	@ 0x7f
 8006030:	4013      	ands	r3, r2
 8006032:	434b      	muls	r3, r1
 8006034:	617b      	str	r3, [r7, #20]
        break;
 8006036:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006038:	4b14      	ldr	r3, [pc, #80]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	0f5b      	lsrs	r3, r3, #29
 800603e:	2207      	movs	r2, #7
 8006040:	4013      	ands	r3, r2
 8006042:	3301      	adds	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	6978      	ldr	r0, [r7, #20]
 800604a:	f7fa f879 	bl	8000140 <__udivsi3>
 800604e:	0003      	movs	r3, r0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e015      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006054:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2238      	movs	r2, #56	@ 0x38
 800605a:	4013      	ands	r3, r2
 800605c:	2b20      	cmp	r3, #32
 800605e:	d103      	bne.n	8006068 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006060:	2380      	movs	r3, #128	@ 0x80
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006068:	4b08      	ldr	r3, [pc, #32]	@ (800608c <HAL_RCC_GetSysClockFreq+0xf8>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2238      	movs	r2, #56	@ 0x38
 800606e:	4013      	ands	r3, r2
 8006070:	2b18      	cmp	r3, #24
 8006072:	d103      	bne.n	800607c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006074:	23fa      	movs	r3, #250	@ 0xfa
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	e001      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006080:	693b      	ldr	r3, [r7, #16]
}
 8006082:	0018      	movs	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	b006      	add	sp, #24
 8006088:	bd80      	pop	{r7, pc}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	40021000 	.word	0x40021000
 8006090:	00f42400 	.word	0x00f42400
 8006094:	007a1200 	.word	0x007a1200

08006098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800609c:	4b02      	ldr	r3, [pc, #8]	@ (80060a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800609e:	681b      	ldr	r3, [r3, #0]
}
 80060a0:	0018      	movs	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	20000000 	.word	0x20000000

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b5b0      	push	{r4, r5, r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060b0:	f7ff fff2 	bl	8006098 <HAL_RCC_GetHCLKFreq>
 80060b4:	0004      	movs	r4, r0
 80060b6:	f7ff fb3f 	bl	8005738 <LL_RCC_GetAPB1Prescaler>
 80060ba:	0003      	movs	r3, r0
 80060bc:	0b1a      	lsrs	r2, r3, #12
 80060be:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060c0:	0092      	lsls	r2, r2, #2
 80060c2:	58d3      	ldr	r3, [r2, r3]
 80060c4:	221f      	movs	r2, #31
 80060c6:	4013      	ands	r3, r2
 80060c8:	40dc      	lsrs	r4, r3
 80060ca:	0023      	movs	r3, r4
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bdb0      	pop	{r4, r5, r7, pc}
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	0800bd24 	.word	0x0800bd24

080060d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80060e0:	2313      	movs	r3, #19
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060e8:	2312      	movs	r3, #18
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	4013      	ands	r3, r2
 80060fa:	d100      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80060fc:	e0a3      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fe:	2011      	movs	r0, #17
 8006100:	183b      	adds	r3, r7, r0
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006106:	4bb3      	ldr	r3, [pc, #716]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800610a:	2380      	movs	r3, #128	@ 0x80
 800610c:	055b      	lsls	r3, r3, #21
 800610e:	4013      	ands	r3, r2
 8006110:	d110      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	4bb0      	ldr	r3, [pc, #704]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006116:	4baf      	ldr	r3, [pc, #700]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006118:	2180      	movs	r1, #128	@ 0x80
 800611a:	0549      	lsls	r1, r1, #21
 800611c:	430a      	orrs	r2, r1
 800611e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006120:	4bac      	ldr	r3, [pc, #688]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	055b      	lsls	r3, r3, #21
 8006128:	4013      	ands	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612e:	183b      	adds	r3, r7, r0
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006134:	4ba8      	ldr	r3, [pc, #672]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4ba7      	ldr	r3, [pc, #668]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800613a:	2180      	movs	r1, #128	@ 0x80
 800613c:	0049      	lsls	r1, r1, #1
 800613e:	430a      	orrs	r2, r1
 8006140:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006142:	f7fd fe43 	bl	8003dcc <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800614a:	e00b      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614c:	f7fd fe3e 	bl	8003dcc <HAL_GetTick>
 8006150:	0002      	movs	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d904      	bls.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800615a:	2313      	movs	r3, #19
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2203      	movs	r2, #3
 8006160:	701a      	strb	r2, [r3, #0]
        break;
 8006162:	e005      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006164:	4b9c      	ldr	r3, [pc, #624]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4013      	ands	r3, r2
 800616e:	d0ed      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006170:	2313      	movs	r3, #19
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d154      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800617a:	4b96      	ldr	r3, [pc, #600]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800617c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800617e:	23c0      	movs	r3, #192	@ 0xc0
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4013      	ands	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d019      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	429a      	cmp	r2, r3
 8006194:	d014      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006196:	4b8f      	ldr	r3, [pc, #572]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619a:	4a90      	ldr	r2, [pc, #576]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800619c:	4013      	ands	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a0:	4b8c      	ldr	r3, [pc, #560]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061a4:	4b8b      	ldr	r3, [pc, #556]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061a6:	2180      	movs	r1, #128	@ 0x80
 80061a8:	0249      	lsls	r1, r1, #9
 80061aa:	430a      	orrs	r2, r1
 80061ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ae:	4b89      	ldr	r3, [pc, #548]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061b2:	4b88      	ldr	r3, [pc, #544]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061b4:	498a      	ldr	r1, [pc, #552]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061b6:	400a      	ands	r2, r1
 80061b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061ba:	4b86      	ldr	r3, [pc, #536]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2201      	movs	r2, #1
 80061c4:	4013      	ands	r3, r2
 80061c6:	d016      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fd fe00 	bl	8003dcc <HAL_GetTick>
 80061cc:	0003      	movs	r3, r0
 80061ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d0:	e00c      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fd fdfb 	bl	8003dcc <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	4a81      	ldr	r2, [pc, #516]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d904      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80061e2:	2313      	movs	r3, #19
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	2203      	movs	r2, #3
 80061e8:	701a      	strb	r2, [r3, #0]
            break;
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ec:	4b79      	ldr	r3, [pc, #484]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f0:	2202      	movs	r2, #2
 80061f2:	4013      	ands	r3, r2
 80061f4:	d0ed      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80061f6:	2313      	movs	r3, #19
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006200:	4b74      	ldr	r3, [pc, #464]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006204:	4a75      	ldr	r2, [pc, #468]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800620e:	4b71      	ldr	r3, [pc, #452]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006210:	430a      	orrs	r2, r1
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006214:	e00c      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006216:	2312      	movs	r3, #18
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2213      	movs	r2, #19
 800621c:	18ba      	adds	r2, r7, r2
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	2312      	movs	r3, #18
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	2213      	movs	r2, #19
 800622a:	18ba      	adds	r2, r7, r2
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006230:	2311      	movs	r3, #17
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d105      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623a:	4b66      	ldr	r3, [pc, #408]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800623c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800623e:	4b65      	ldr	r3, [pc, #404]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006240:	4969      	ldr	r1, [pc, #420]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006242:	400a      	ands	r2, r1
 8006244:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	4013      	ands	r3, r2
 800624e:	d009      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006250:	4b60      	ldr	r3, [pc, #384]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006254:	2203      	movs	r2, #3
 8006256:	4393      	bics	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4b5d      	ldr	r3, [pc, #372]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006260:	430a      	orrs	r2, r1
 8006262:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2210      	movs	r2, #16
 800626a:	4013      	ands	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800626e:	4b59      	ldr	r3, [pc, #356]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	4a5e      	ldr	r2, [pc, #376]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006274:	4013      	ands	r3, r2
 8006276:	0019      	movs	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	4b55      	ldr	r3, [pc, #340]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800627e:	430a      	orrs	r2, r1
 8006280:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	2380      	movs	r3, #128	@ 0x80
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4013      	ands	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	4b51      	ldr	r3, [pc, #324]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	4a57      	ldr	r2, [pc, #348]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006294:	4013      	ands	r3, r2
 8006296:	0019      	movs	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	4b4d      	ldr	r3, [pc, #308]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	@ 0x80
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	4013      	ands	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ae:	4b49      	ldr	r3, [pc, #292]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	4a50      	ldr	r2, [pc, #320]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	4b45      	ldr	r3, [pc, #276]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062be:	430a      	orrs	r2, r1
 80062c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2220      	movs	r2, #32
 80062c8:	4013      	ands	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062cc:	4b41      	ldr	r3, [pc, #260]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d0:	4a49      	ldr	r2, [pc, #292]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	0019      	movs	r1, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	4b3e      	ldr	r3, [pc, #248]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062dc:	430a      	orrs	r2, r1
 80062de:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2380      	movs	r3, #128	@ 0x80
 80062e6:	02db      	lsls	r3, r3, #11
 80062e8:	4013      	ands	r3, r2
 80062ea:	d016      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ec:	4b39      	ldr	r3, [pc, #228]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	4a42      	ldr	r2, [pc, #264]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	0019      	movs	r1, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	4b36      	ldr	r3, [pc, #216]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062fc:	430a      	orrs	r2, r1
 80062fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	23c0      	movs	r3, #192	@ 0xc0
 8006306:	051b      	lsls	r3, r3, #20
 8006308:	429a      	cmp	r2, r3
 800630a:	d106      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800630c:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	4b30      	ldr	r3, [pc, #192]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006312:	2180      	movs	r1, #128	@ 0x80
 8006314:	0449      	lsls	r1, r1, #17
 8006316:	430a      	orrs	r2, r1
 8006318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	2380      	movs	r3, #128	@ 0x80
 8006320:	01db      	lsls	r3, r3, #7
 8006322:	4013      	ands	r3, r2
 8006324:	d015      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006326:	4b2b      	ldr	r3, [pc, #172]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	0899      	lsrs	r1, r3, #2
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	4b28      	ldr	r3, [pc, #160]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006334:	430a      	orrs	r2, r1
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	2380      	movs	r3, #128	@ 0x80
 800633e:	05db      	lsls	r3, r3, #23
 8006340:	429a      	cmp	r2, r3
 8006342:	d106      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006344:	4b23      	ldr	r3, [pc, #140]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800634a:	2180      	movs	r1, #128	@ 0x80
 800634c:	0249      	lsls	r1, r1, #9
 800634e:	430a      	orrs	r2, r1
 8006350:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	2380      	movs	r3, #128	@ 0x80
 8006358:	039b      	lsls	r3, r3, #14
 800635a:	4013      	ands	r3, r2
 800635c:	d016      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800635e:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	4a27      	ldr	r2, [pc, #156]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006364:	4013      	ands	r3, r2
 8006366:	0019      	movs	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800636c:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800636e:	430a      	orrs	r2, r1
 8006370:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	03db      	lsls	r3, r3, #15
 800637a:	429a      	cmp	r2, r3
 800637c:	d106      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800637e:	4b15      	ldr	r3, [pc, #84]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	4b14      	ldr	r3, [pc, #80]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006384:	2180      	movs	r1, #128	@ 0x80
 8006386:	0449      	lsls	r1, r1, #17
 8006388:	430a      	orrs	r2, r1
 800638a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4013      	ands	r3, r2
 8006396:	d016      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006398:	4b0e      	ldr	r3, [pc, #56]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800639a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639c:	4a19      	ldr	r2, [pc, #100]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800639e:	4013      	ands	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063a8:	430a      	orrs	r2, r1
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	2380      	movs	r3, #128	@ 0x80
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d106      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063be:	2180      	movs	r1, #128	@ 0x80
 80063c0:	0249      	lsls	r1, r1, #9
 80063c2:	430a      	orrs	r2, r1
 80063c4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80063c6:	2312      	movs	r3, #18
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	781b      	ldrb	r3, [r3, #0]
}
 80063cc:	0018      	movs	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b006      	add	sp, #24
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	fffffcff 	.word	0xfffffcff
 80063e0:	fffeffff 	.word	0xfffeffff
 80063e4:	00001388 	.word	0x00001388
 80063e8:	efffffff 	.word	0xefffffff
 80063ec:	fffff3ff 	.word	0xfffff3ff
 80063f0:	fff3ffff 	.word	0xfff3ffff
 80063f4:	ffcfffff 	.word	0xffcfffff
 80063f8:	ffffcfff 	.word	0xffffcfff
 80063fc:	f3ffffff 	.word	0xf3ffffff
 8006400:	ffbfffff 	.word	0xffbfffff
 8006404:	ffff3fff 	.word	0xffff3fff

08006408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0a8      	b.n	800656c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	2382      	movs	r3, #130	@ 0x82
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	d009      	beq.n	8006442 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	61da      	str	r2, [r3, #28]
 8006434:	e005      	b.n	8006442 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	225d      	movs	r2, #93	@ 0x5d
 800644c:	5c9b      	ldrb	r3, [r3, r2]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	225c      	movs	r2, #92	@ 0x5c
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	0018      	movs	r0, r3
 8006460:	f7fd f8c4 	bl	80035ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	225d      	movs	r2, #93	@ 0x5d
 8006468:	2102      	movs	r1, #2
 800646a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2140      	movs	r1, #64	@ 0x40
 8006478:	438a      	bics	r2, r1
 800647a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	23e0      	movs	r3, #224	@ 0xe0
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	429a      	cmp	r2, r3
 8006486:	d902      	bls.n	800648e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e002      	b.n	8006494 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800648e:	2380      	movs	r3, #128	@ 0x80
 8006490:	015b      	lsls	r3, r3, #5
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	23f0      	movs	r3, #240	@ 0xf0
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	429a      	cmp	r2, r3
 800649e:	d008      	beq.n	80064b2 <HAL_SPI_Init+0xaa>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	23e0      	movs	r3, #224	@ 0xe0
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	2382      	movs	r3, #130	@ 0x82
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	401a      	ands	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6899      	ldr	r1, [r3, #8]
 80064c0:	2384      	movs	r3, #132	@ 0x84
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	400b      	ands	r3, r1
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2102      	movs	r1, #2
 80064ce:	400b      	ands	r3, r1
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2101      	movs	r1, #1
 80064d8:	400b      	ands	r3, r1
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6999      	ldr	r1, [r3, #24]
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	400b      	ands	r3, r1
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	2138      	movs	r1, #56	@ 0x38
 80064ee:	400b      	ands	r3, r1
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	2180      	movs	r1, #128	@ 0x80
 80064f8:	400b      	ands	r3, r1
 80064fa:	431a      	orrs	r2, r3
 80064fc:	0011      	movs	r1, r2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	019b      	lsls	r3, r3, #6
 8006506:	401a      	ands	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	2204      	movs	r2, #4
 8006518:	401a      	ands	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	2110      	movs	r1, #16
 8006520:	400b      	ands	r3, r1
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006528:	2108      	movs	r1, #8
 800652a:	400b      	ands	r3, r1
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	23f0      	movs	r3, #240	@ 0xf0
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	400b      	ands	r3, r1
 8006538:	431a      	orrs	r2, r3
 800653a:	0011      	movs	r1, r2
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	015b      	lsls	r3, r3, #5
 8006542:	401a      	ands	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4907      	ldr	r1, [pc, #28]	@ (8006574 <HAL_SPI_Init+0x16c>)
 8006558:	400a      	ands	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	225d      	movs	r2, #93	@ 0x5d
 8006566:	2101      	movs	r1, #1
 8006568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b004      	add	sp, #16
 8006572:	bd80      	pop	{r7, pc}
 8006574:	fffff7ff 	.word	0xfffff7ff

08006578 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	001a      	movs	r2, r3
 8006596:	2301      	movs	r3, #1
 8006598:	4013      	ands	r3, r2
 800659a:	d10f      	bne.n	80065bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a2:	d00b      	beq.n	80065bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	099b      	lsrs	r3, r3, #6
 80065a8:	001a      	movs	r2, r3
 80065aa:	2301      	movs	r3, #1
 80065ac:	4013      	ands	r3, r2
 80065ae:	d005      	beq.n	80065bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	0010      	movs	r0, r2
 80065b8:	4798      	blx	r3
    return;
 80065ba:	e0d5      	b.n	8006768 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	001a      	movs	r2, r3
 80065c2:	2301      	movs	r3, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <HAL_SPI_IRQHandler+0x68>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	09db      	lsrs	r3, r3, #7
 80065cc:	001a      	movs	r2, r3
 80065ce:	2301      	movs	r3, #1
 80065d0:	4013      	ands	r3, r2
 80065d2:	d005      	beq.n	80065e0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	0010      	movs	r0, r2
 80065dc:	4798      	blx	r3
    return;
 80065de:	e0c3      	b.n	8006768 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	001a      	movs	r2, r3
 80065e6:	2301      	movs	r3, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d10c      	bne.n	8006606 <HAL_SPI_IRQHandler+0x8e>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	099b      	lsrs	r3, r3, #6
 80065f0:	001a      	movs	r2, r3
 80065f2:	2301      	movs	r3, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	d106      	bne.n	8006606 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	001a      	movs	r2, r3
 80065fe:	2301      	movs	r3, #1
 8006600:	4013      	ands	r3, r2
 8006602:	d100      	bne.n	8006606 <HAL_SPI_IRQHandler+0x8e>
 8006604:	e0b0      	b.n	8006768 <HAL_SPI_IRQHandler+0x1f0>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	001a      	movs	r2, r3
 800660c:	2301      	movs	r3, #1
 800660e:	4013      	ands	r3, r2
 8006610:	d100      	bne.n	8006614 <HAL_SPI_IRQHandler+0x9c>
 8006612:	e0a9      	b.n	8006768 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	001a      	movs	r2, r3
 800661a:	2301      	movs	r3, #1
 800661c:	4013      	ands	r3, r2
 800661e:	d023      	beq.n	8006668 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	225d      	movs	r2, #93	@ 0x5d
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d011      	beq.n	8006650 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006630:	2204      	movs	r2, #4
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	e00b      	b.n	8006668 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
        return;
 8006666:	e07f      	b.n	8006768 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	001a      	movs	r2, r3
 800666e:	2301      	movs	r3, #1
 8006670:	4013      	ands	r3, r2
 8006672:	d014      	beq.n	800669e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006678:	2201      	movs	r2, #1
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2140      	movs	r1, #64	@ 0x40
 8006698:	438a      	bics	r2, r1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	001a      	movs	r2, r3
 80066a4:	2301      	movs	r3, #1
 80066a6:	4013      	ands	r3, r2
 80066a8:	d00c      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ae:	2208      	movs	r2, #8
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d04c      	beq.n	8006766 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	21e0      	movs	r1, #224	@ 0xe0
 80066d8:	438a      	bics	r2, r1
 80066da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	225d      	movs	r2, #93	@ 0x5d
 80066e0:	2101      	movs	r1, #1
 80066e2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2202      	movs	r2, #2
 80066e8:	4013      	ands	r3, r2
 80066ea:	d103      	bne.n	80066f4 <HAL_SPI_IRQHandler+0x17c>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2201      	movs	r2, #1
 80066f0:	4013      	ands	r3, r2
 80066f2:	d032      	beq.n	800675a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2103      	movs	r1, #3
 8006700:	438a      	bics	r2, r1
 8006702:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006710:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <HAL_SPI_IRQHandler+0x1f8>)
 8006712:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006718:	0018      	movs	r0, r3
 800671a:	f7fd fced 	bl	80040f8 <HAL_DMA_Abort_IT>
 800671e:	1e03      	subs	r3, r0, #0
 8006720:	d005      	beq.n	800672e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	2240      	movs	r2, #64	@ 0x40
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	4a0d      	ldr	r2, [pc, #52]	@ (8006770 <HAL_SPI_IRQHandler+0x1f8>)
 800673c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	0018      	movs	r0, r3
 8006744:	f7fd fcd8 	bl	80040f8 <HAL_DMA_Abort_IT>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d00b      	beq.n	8006764 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006750:	2240      	movs	r2, #64	@ 0x40
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006758:	e004      	b.n	8006764 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f000 f809 	bl	8006774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006762:	e000      	b.n	8006766 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006764:	46c0      	nop			@ (mov r8, r8)
    return;
 8006766:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006768:	46bd      	mov	sp, r7
 800676a:	b008      	add	sp, #32
 800676c:	bd80      	pop	{r7, pc}
 800676e:	46c0      	nop			@ (mov r8, r8)
 8006770:	08006785 	.word	0x08006785

08006774 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800677c:	46c0      	nop			@ (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b002      	add	sp, #8
 8006782:	bd80      	pop	{r7, pc}

08006784 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2246      	movs	r2, #70	@ 0x46
 8006796:	2100      	movs	r1, #0
 8006798:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7ff ffe6 	bl	8006774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b004      	add	sp, #16
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e04a      	b.n	8006858 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	223d      	movs	r2, #61	@ 0x3d
 80067c6:	5c9b      	ldrb	r3, [r3, r2]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	223c      	movs	r2, #60	@ 0x3c
 80067d2:	2100      	movs	r1, #0
 80067d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	0018      	movs	r0, r3
 80067da:	f7fc ffab 	bl	8003734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	223d      	movs	r2, #61	@ 0x3d
 80067e2:	2102      	movs	r1, #2
 80067e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	0019      	movs	r1, r3
 80067f0:	0010      	movs	r0, r2
 80067f2:	f000 ff57 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2248      	movs	r2, #72	@ 0x48
 80067fa:	2101      	movs	r1, #1
 80067fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	223e      	movs	r2, #62	@ 0x3e
 8006802:	2101      	movs	r1, #1
 8006804:	5499      	strb	r1, [r3, r2]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	223f      	movs	r2, #63	@ 0x3f
 800680a:	2101      	movs	r1, #1
 800680c:	5499      	strb	r1, [r3, r2]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2240      	movs	r2, #64	@ 0x40
 8006812:	2101      	movs	r1, #1
 8006814:	5499      	strb	r1, [r3, r2]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2241      	movs	r2, #65	@ 0x41
 800681a:	2101      	movs	r1, #1
 800681c:	5499      	strb	r1, [r3, r2]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2242      	movs	r2, #66	@ 0x42
 8006822:	2101      	movs	r1, #1
 8006824:	5499      	strb	r1, [r3, r2]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2243      	movs	r2, #67	@ 0x43
 800682a:	2101      	movs	r1, #1
 800682c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2244      	movs	r2, #68	@ 0x44
 8006832:	2101      	movs	r1, #1
 8006834:	5499      	strb	r1, [r3, r2]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2245      	movs	r2, #69	@ 0x45
 800683a:	2101      	movs	r1, #1
 800683c:	5499      	strb	r1, [r3, r2]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2246      	movs	r2, #70	@ 0x46
 8006842:	2101      	movs	r1, #1
 8006844:	5499      	strb	r1, [r3, r2]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2247      	movs	r2, #71	@ 0x47
 800684a:	2101      	movs	r1, #1
 800684c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	223d      	movs	r2, #61	@ 0x3d
 8006852:	2101      	movs	r1, #1
 8006854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	0018      	movs	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	b002      	add	sp, #8
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e04a      	b.n	8006908 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	223d      	movs	r2, #61	@ 0x3d
 8006876:	5c9b      	ldrb	r3, [r3, r2]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d107      	bne.n	800688e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	223c      	movs	r2, #60	@ 0x3c
 8006882:	2100      	movs	r1, #0
 8006884:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	0018      	movs	r0, r3
 800688a:	f000 f841 	bl	8006910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	223d      	movs	r2, #61	@ 0x3d
 8006892:	2102      	movs	r1, #2
 8006894:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3304      	adds	r3, #4
 800689e:	0019      	movs	r1, r3
 80068a0:	0010      	movs	r0, r2
 80068a2:	f000 feff 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2248      	movs	r2, #72	@ 0x48
 80068aa:	2101      	movs	r1, #1
 80068ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	223e      	movs	r2, #62	@ 0x3e
 80068b2:	2101      	movs	r1, #1
 80068b4:	5499      	strb	r1, [r3, r2]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	223f      	movs	r2, #63	@ 0x3f
 80068ba:	2101      	movs	r1, #1
 80068bc:	5499      	strb	r1, [r3, r2]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2240      	movs	r2, #64	@ 0x40
 80068c2:	2101      	movs	r1, #1
 80068c4:	5499      	strb	r1, [r3, r2]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2241      	movs	r2, #65	@ 0x41
 80068ca:	2101      	movs	r1, #1
 80068cc:	5499      	strb	r1, [r3, r2]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2242      	movs	r2, #66	@ 0x42
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2243      	movs	r2, #67	@ 0x43
 80068da:	2101      	movs	r1, #1
 80068dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2244      	movs	r2, #68	@ 0x44
 80068e2:	2101      	movs	r1, #1
 80068e4:	5499      	strb	r1, [r3, r2]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2245      	movs	r2, #69	@ 0x45
 80068ea:	2101      	movs	r1, #1
 80068ec:	5499      	strb	r1, [r3, r2]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2246      	movs	r2, #70	@ 0x46
 80068f2:	2101      	movs	r1, #1
 80068f4:	5499      	strb	r1, [r3, r2]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2247      	movs	r2, #71	@ 0x47
 80068fa:	2101      	movs	r1, #1
 80068fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	223d      	movs	r2, #61	@ 0x3d
 8006902:	2101      	movs	r1, #1
 8006904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	0018      	movs	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	b002      	add	sp, #8
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006918:	46c0      	nop			@ (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d108      	bne.n	8006942 <HAL_TIM_PWM_Start+0x22>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	223e      	movs	r2, #62	@ 0x3e
 8006934:	5c9b      	ldrb	r3, [r3, r2]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	1e5a      	subs	r2, r3, #1
 800693c:	4193      	sbcs	r3, r2
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e037      	b.n	80069b2 <HAL_TIM_PWM_Start+0x92>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d108      	bne.n	800695a <HAL_TIM_PWM_Start+0x3a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	223f      	movs	r2, #63	@ 0x3f
 800694c:	5c9b      	ldrb	r3, [r3, r2]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	1e5a      	subs	r2, r3, #1
 8006954:	4193      	sbcs	r3, r2
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02b      	b.n	80069b2 <HAL_TIM_PWM_Start+0x92>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d108      	bne.n	8006972 <HAL_TIM_PWM_Start+0x52>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2240      	movs	r2, #64	@ 0x40
 8006964:	5c9b      	ldrb	r3, [r3, r2]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	4193      	sbcs	r3, r2
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e01f      	b.n	80069b2 <HAL_TIM_PWM_Start+0x92>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b0c      	cmp	r3, #12
 8006976:	d108      	bne.n	800698a <HAL_TIM_PWM_Start+0x6a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2241      	movs	r2, #65	@ 0x41
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	4193      	sbcs	r3, r2
 8006986:	b2db      	uxtb	r3, r3
 8006988:	e013      	b.n	80069b2 <HAL_TIM_PWM_Start+0x92>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b10      	cmp	r3, #16
 800698e:	d108      	bne.n	80069a2 <HAL_TIM_PWM_Start+0x82>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2242      	movs	r2, #66	@ 0x42
 8006994:	5c9b      	ldrb	r3, [r3, r2]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	1e5a      	subs	r2, r3, #1
 800699c:	4193      	sbcs	r3, r2
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e007      	b.n	80069b2 <HAL_TIM_PWM_Start+0x92>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2243      	movs	r2, #67	@ 0x43
 80069a6:	5c9b      	ldrb	r3, [r3, r2]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	1e5a      	subs	r2, r3, #1
 80069ae:	4193      	sbcs	r3, r2
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e081      	b.n	8006abe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xaa>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	223e      	movs	r2, #62	@ 0x3e
 80069c4:	2102      	movs	r1, #2
 80069c6:	5499      	strb	r1, [r3, r2]
 80069c8:	e023      	b.n	8006a12 <HAL_TIM_PWM_Start+0xf2>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0xba>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	223f      	movs	r2, #63	@ 0x3f
 80069d4:	2102      	movs	r1, #2
 80069d6:	5499      	strb	r1, [r3, r2]
 80069d8:	e01b      	b.n	8006a12 <HAL_TIM_PWM_Start+0xf2>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xca>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2240      	movs	r2, #64	@ 0x40
 80069e4:	2102      	movs	r1, #2
 80069e6:	5499      	strb	r1, [r3, r2]
 80069e8:	e013      	b.n	8006a12 <HAL_TIM_PWM_Start+0xf2>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0xda>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2241      	movs	r2, #65	@ 0x41
 80069f4:	2102      	movs	r1, #2
 80069f6:	5499      	strb	r1, [r3, r2]
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_PWM_Start+0xf2>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0xea>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2242      	movs	r2, #66	@ 0x42
 8006a04:	2102      	movs	r1, #2
 8006a06:	5499      	strb	r1, [r3, r2]
 8006a08:	e003      	b.n	8006a12 <HAL_TIM_PWM_Start+0xf2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2243      	movs	r2, #67	@ 0x43
 8006a0e:	2102      	movs	r1, #2
 8006a10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f001 fb1c 	bl	8008058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a28      	ldr	r2, [pc, #160]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1a8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x11e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a27      	ldr	r2, [pc, #156]	@ (8006acc <HAL_TIM_PWM_Start+0x1ac>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x11e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a25      	ldr	r2, [pc, #148]	@ (8006ad0 <HAL_TIM_PWM_Start+0x1b0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x122>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <HAL_TIM_PWM_Start+0x124>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2180      	movs	r1, #128	@ 0x80
 8006a54:	0209      	lsls	r1, r1, #8
 8006a56:	430a      	orrs	r2, r1
 8006a58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1a8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00a      	beq.n	8006a7a <HAL_TIM_PWM_Start+0x15a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	2380      	movs	r3, #128	@ 0x80
 8006a6a:	05db      	lsls	r3, r3, #23
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIM_PWM_Start+0x15a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <HAL_TIM_PWM_Start+0x1b4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d116      	bne.n	8006aa8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <HAL_TIM_PWM_Start+0x1b8>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	d016      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19a>
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	2380      	movs	r3, #128	@ 0x80
 8006a90:	025b      	lsls	r3, r3, #9
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d011      	beq.n	8006aba <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa6:	e008      	b.n	8006aba <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e000      	b.n	8006abc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	0018      	movs	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b004      	add	sp, #16
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	00010007 	.word	0x00010007

08006adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	2200      	movs	r2, #0
 8006aee:	0018      	movs	r0, r3
 8006af0:	f001 fab2 	bl	8008058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <HAL_TIM_PWM_Stop+0xf4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_TIM_PWM_Stop+0x36>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a34      	ldr	r2, [pc, #208]	@ (8006bd4 <HAL_TIM_PWM_Stop+0xf8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_TIM_PWM_Stop+0x36>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a32      	ldr	r2, [pc, #200]	@ (8006bd8 <HAL_TIM_PWM_Stop+0xfc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <HAL_TIM_PWM_Stop+0x3a>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_TIM_PWM_Stop+0x3c>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	4a2e      	ldr	r2, [pc, #184]	@ (8006bdc <HAL_TIM_PWM_Stop+0x100>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	d10d      	bne.n	8006b44 <HAL_TIM_PWM_Stop+0x68>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <HAL_TIM_PWM_Stop+0x104>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	d107      	bne.n	8006b44 <HAL_TIM_PWM_Stop+0x68>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4929      	ldr	r1, [pc, #164]	@ (8006be4 <HAL_TIM_PWM_Stop+0x108>)
 8006b40:	400a      	ands	r2, r1
 8006b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	4a24      	ldr	r2, [pc, #144]	@ (8006bdc <HAL_TIM_PWM_Stop+0x100>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d10d      	bne.n	8006b6c <HAL_TIM_PWM_Stop+0x90>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	4a22      	ldr	r2, [pc, #136]	@ (8006be0 <HAL_TIM_PWM_Stop+0x104>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIM_PWM_Stop+0x90>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2101      	movs	r1, #1
 8006b68:	438a      	bics	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <HAL_TIM_PWM_Stop+0xa0>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	223e      	movs	r2, #62	@ 0x3e
 8006b76:	2101      	movs	r1, #1
 8006b78:	5499      	strb	r1, [r3, r2]
 8006b7a:	e023      	b.n	8006bc4 <HAL_TIM_PWM_Stop+0xe8>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d104      	bne.n	8006b8c <HAL_TIM_PWM_Stop+0xb0>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223f      	movs	r2, #63	@ 0x3f
 8006b86:	2101      	movs	r1, #1
 8006b88:	5499      	strb	r1, [r3, r2]
 8006b8a:	e01b      	b.n	8006bc4 <HAL_TIM_PWM_Stop+0xe8>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d104      	bne.n	8006b9c <HAL_TIM_PWM_Stop+0xc0>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2240      	movs	r2, #64	@ 0x40
 8006b96:	2101      	movs	r1, #1
 8006b98:	5499      	strb	r1, [r3, r2]
 8006b9a:	e013      	b.n	8006bc4 <HAL_TIM_PWM_Stop+0xe8>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b0c      	cmp	r3, #12
 8006ba0:	d104      	bne.n	8006bac <HAL_TIM_PWM_Stop+0xd0>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2241      	movs	r2, #65	@ 0x41
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	5499      	strb	r1, [r3, r2]
 8006baa:	e00b      	b.n	8006bc4 <HAL_TIM_PWM_Stop+0xe8>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIM_PWM_Stop+0xe0>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2242      	movs	r2, #66	@ 0x42
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	5499      	strb	r1, [r3, r2]
 8006bba:	e003      	b.n	8006bc4 <HAL_TIM_PWM_Stop+0xe8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2243      	movs	r2, #67	@ 0x43
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b002      	add	sp, #8
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40014400 	.word	0x40014400
 8006bd8:	40014800 	.word	0x40014800
 8006bdc:	00001111 	.word	0x00001111
 8006be0:	00000444 	.word	0x00000444
 8006be4:	ffff7fff 	.word	0xffff7fff

08006be8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e04a      	b.n	8006c90 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	223d      	movs	r2, #61	@ 0x3d
 8006bfe:	5c9b      	ldrb	r3, [r3, r2]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	223c      	movs	r2, #60	@ 0x3c
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f000 f841 	bl	8006c98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223d      	movs	r2, #61	@ 0x3d
 8006c1a:	2102      	movs	r1, #2
 8006c1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	0019      	movs	r1, r3
 8006c28:	0010      	movs	r0, r2
 8006c2a:	f000 fd3b 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2248      	movs	r2, #72	@ 0x48
 8006c32:	2101      	movs	r1, #1
 8006c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223e      	movs	r2, #62	@ 0x3e
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	5499      	strb	r1, [r3, r2]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	223f      	movs	r2, #63	@ 0x3f
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2240      	movs	r2, #64	@ 0x40
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	5499      	strb	r1, [r3, r2]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2241      	movs	r2, #65	@ 0x41
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2242      	movs	r2, #66	@ 0x42
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	5499      	strb	r1, [r3, r2]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2243      	movs	r2, #67	@ 0x43
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2244      	movs	r2, #68	@ 0x44
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2245      	movs	r2, #69	@ 0x45
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2246      	movs	r2, #70	@ 0x46
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2247      	movs	r2, #71	@ 0x47
 8006c82:	2101      	movs	r1, #1
 8006c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	223d      	movs	r2, #61	@ 0x3d
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	0018      	movs	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b002      	add	sp, #8
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006ca0:	46c0      	nop			@ (mov r8, r8)
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b002      	add	sp, #8
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	230f      	movs	r3, #15
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_IC_Start_IT+0x22>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	223e      	movs	r2, #62	@ 0x3e
 8006cc4:	5c9b      	ldrb	r3, [r3, r2]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e023      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x6a>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_IC_Start_IT+0x32>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	223f      	movs	r2, #63	@ 0x3f
 8006cd4:	5c9b      	ldrb	r3, [r3, r2]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e01b      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x6a>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_IC_Start_IT+0x42>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2240      	movs	r2, #64	@ 0x40
 8006ce4:	5c9b      	ldrb	r3, [r3, r2]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e013      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x6a>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b0c      	cmp	r3, #12
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_IC_Start_IT+0x52>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2241      	movs	r2, #65	@ 0x41
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e00b      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x6a>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_IC_Start_IT+0x62>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2242      	movs	r2, #66	@ 0x42
 8006d04:	5c9b      	ldrb	r3, [r3, r2]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e003      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x6a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2243      	movs	r2, #67	@ 0x43
 8006d0e:	5c9b      	ldrb	r3, [r3, r2]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	220e      	movs	r2, #14
 8006d14:	18ba      	adds	r2, r7, r2
 8006d16:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_TIM_IC_Start_IT+0x80>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2244      	movs	r2, #68	@ 0x44
 8006d22:	5c9b      	ldrb	r3, [r3, r2]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e013      	b.n	8006d50 <HAL_TIM_IC_Start_IT+0xa8>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d104      	bne.n	8006d38 <HAL_TIM_IC_Start_IT+0x90>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2245      	movs	r2, #69	@ 0x45
 8006d32:	5c9b      	ldrb	r3, [r3, r2]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e00b      	b.n	8006d50 <HAL_TIM_IC_Start_IT+0xa8>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d104      	bne.n	8006d48 <HAL_TIM_IC_Start_IT+0xa0>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2246      	movs	r2, #70	@ 0x46
 8006d42:	5c9b      	ldrb	r3, [r3, r2]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	e003      	b.n	8006d50 <HAL_TIM_IC_Start_IT+0xa8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2247      	movs	r2, #71	@ 0x47
 8006d4c:	5c9b      	ldrb	r3, [r3, r2]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	210d      	movs	r1, #13
 8006d52:	187a      	adds	r2, r7, r1
 8006d54:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d56:	230e      	movs	r3, #14
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d103      	bne.n	8006d68 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d001      	beq.n	8006d6c <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0c3      	b.n	8006ef4 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <HAL_TIM_IC_Start_IT+0xd4>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	223e      	movs	r2, #62	@ 0x3e
 8006d76:	2102      	movs	r1, #2
 8006d78:	5499      	strb	r1, [r3, r2]
 8006d7a:	e023      	b.n	8006dc4 <HAL_TIM_IC_Start_IT+0x11c>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d104      	bne.n	8006d8c <HAL_TIM_IC_Start_IT+0xe4>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	223f      	movs	r2, #63	@ 0x3f
 8006d86:	2102      	movs	r1, #2
 8006d88:	5499      	strb	r1, [r3, r2]
 8006d8a:	e01b      	b.n	8006dc4 <HAL_TIM_IC_Start_IT+0x11c>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d104      	bne.n	8006d9c <HAL_TIM_IC_Start_IT+0xf4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	2102      	movs	r1, #2
 8006d98:	5499      	strb	r1, [r3, r2]
 8006d9a:	e013      	b.n	8006dc4 <HAL_TIM_IC_Start_IT+0x11c>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d104      	bne.n	8006dac <HAL_TIM_IC_Start_IT+0x104>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2241      	movs	r2, #65	@ 0x41
 8006da6:	2102      	movs	r1, #2
 8006da8:	5499      	strb	r1, [r3, r2]
 8006daa:	e00b      	b.n	8006dc4 <HAL_TIM_IC_Start_IT+0x11c>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d104      	bne.n	8006dbc <HAL_TIM_IC_Start_IT+0x114>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2242      	movs	r2, #66	@ 0x42
 8006db6:	2102      	movs	r1, #2
 8006db8:	5499      	strb	r1, [r3, r2]
 8006dba:	e003      	b.n	8006dc4 <HAL_TIM_IC_Start_IT+0x11c>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2243      	movs	r2, #67	@ 0x43
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_TIM_IC_Start_IT+0x12c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2244      	movs	r2, #68	@ 0x44
 8006dce:	2102      	movs	r1, #2
 8006dd0:	5499      	strb	r1, [r3, r2]
 8006dd2:	e013      	b.n	8006dfc <HAL_TIM_IC_Start_IT+0x154>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d104      	bne.n	8006de4 <HAL_TIM_IC_Start_IT+0x13c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2245      	movs	r2, #69	@ 0x45
 8006dde:	2102      	movs	r1, #2
 8006de0:	5499      	strb	r1, [r3, r2]
 8006de2:	e00b      	b.n	8006dfc <HAL_TIM_IC_Start_IT+0x154>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d104      	bne.n	8006df4 <HAL_TIM_IC_Start_IT+0x14c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2246      	movs	r2, #70	@ 0x46
 8006dee:	2102      	movs	r1, #2
 8006df0:	5499      	strb	r1, [r3, r2]
 8006df2:	e003      	b.n	8006dfc <HAL_TIM_IC_Start_IT+0x154>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2247      	movs	r2, #71	@ 0x47
 8006df8:	2102      	movs	r1, #2
 8006dfa:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b0c      	cmp	r3, #12
 8006e00:	d02a      	beq.n	8006e58 <HAL_TIM_IC_Start_IT+0x1b0>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d830      	bhi.n	8006e6a <HAL_TIM_IC_Start_IT+0x1c2>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d01b      	beq.n	8006e46 <HAL_TIM_IC_Start_IT+0x19e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d82a      	bhi.n	8006e6a <HAL_TIM_IC_Start_IT+0x1c2>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_TIM_IC_Start_IT+0x17a>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d009      	beq.n	8006e34 <HAL_TIM_IC_Start_IT+0x18c>
 8006e20:	e023      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	60da      	str	r2, [r3, #12]
      break;
 8006e32:	e01f      	b.n	8006e74 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2104      	movs	r1, #4
 8006e40:	430a      	orrs	r2, r1
 8006e42:	60da      	str	r2, [r3, #12]
      break;
 8006e44:	e016      	b.n	8006e74 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2108      	movs	r1, #8
 8006e52:	430a      	orrs	r2, r1
 8006e54:	60da      	str	r2, [r3, #12]
      break;
 8006e56:	e00d      	b.n	8006e74 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2110      	movs	r1, #16
 8006e64:	430a      	orrs	r2, r1
 8006e66:	60da      	str	r2, [r3, #12]
      break;
 8006e68:	e004      	b.n	8006e74 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8006e6a:	230f      	movs	r3, #15
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
      break;
 8006e72:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8006e74:	230f      	movs	r3, #15
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d137      	bne.n	8006eee <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	0018      	movs	r0, r3
 8006e88:	f001 f8e6 	bl	8008058 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	@ (8006efc <HAL_TIM_IC_Start_IT+0x254>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00a      	beq.n	8006eac <HAL_TIM_IC_Start_IT+0x204>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	2380      	movs	r3, #128	@ 0x80
 8006e9c:	05db      	lsls	r3, r3, #23
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d004      	beq.n	8006eac <HAL_TIM_IC_Start_IT+0x204>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	@ (8006f00 <HAL_TIM_IC_Start_IT+0x258>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d116      	bne.n	8006eda <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <HAL_TIM_IC_Start_IT+0x25c>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d016      	beq.n	8006eec <HAL_TIM_IC_Start_IT+0x244>
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	2380      	movs	r3, #128	@ 0x80
 8006ec2:	025b      	lsls	r3, r3, #9
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d011      	beq.n	8006eec <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed8:	e008      	b.n	8006eec <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e000      	b.n	8006eee <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8006eee:	230f      	movs	r3, #15
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	781b      	ldrb	r3, [r3, #0]
}
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b004      	add	sp, #16
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40000400 	.word	0x40000400
 8006f04:	00010007 	.word	0x00010007

08006f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2202      	movs	r2, #2
 8006f24:	4013      	ands	r3, r2
 8006f26:	d021      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d01d      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2203      	movs	r2, #3
 8006f36:	4252      	negs	r2, r2
 8006f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2203      	movs	r2, #3
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7fb feb0 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8006f54:	e007      	b.n	8006f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f000 fb8b 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	0018      	movs	r0, r3
 8006f62:	f000 fb8f 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	4013      	ands	r3, r2
 8006f72:	d022      	beq.n	8006fba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2204      	movs	r2, #4
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d01e      	beq.n	8006fba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2205      	movs	r2, #5
 8006f82:	4252      	negs	r2, r2
 8006f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	23c0      	movs	r3, #192	@ 0xc0
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4013      	ands	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7fb fe89 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8006fa2:	e007      	b.n	8006fb4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f000 fb64 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f000 fb68 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d021      	beq.n	8007006 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d01d      	beq.n	8007006 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2209      	movs	r2, #9
 8006fd0:	4252      	negs	r2, r2
 8006fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7fb fe63 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 8006fee:	e007      	b.n	8007000 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f000 fb3e 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 fb42 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2210      	movs	r2, #16
 800700a:	4013      	ands	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2210      	movs	r2, #16
 8007012:	4013      	ands	r3, r2
 8007014:	d01e      	beq.n	8007054 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2211      	movs	r2, #17
 800701c:	4252      	negs	r2, r2
 800701e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2208      	movs	r2, #8
 8007024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	23c0      	movs	r3, #192	@ 0xc0
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4013      	ands	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	0018      	movs	r0, r3
 8007038:	f7fb fe3c 	bl	8002cb4 <HAL_TIM_IC_CaptureCallback>
 800703c:	e007      	b.n	800704e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 fb17 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0018      	movs	r0, r3
 800704a:	f000 fb1b 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2201      	movs	r2, #1
 8007058:	4013      	ands	r3, r2
 800705a:	d00c      	beq.n	8007076 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	4013      	ands	r3, r2
 8007062:	d008      	beq.n	8007076 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2202      	movs	r2, #2
 800706a:	4252      	negs	r2, r2
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f7fb fe41 	bl	8002cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2280      	movs	r2, #128	@ 0x80
 800707a:	4013      	ands	r3, r2
 800707c:	d104      	bne.n	8007088 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	2380      	movs	r3, #128	@ 0x80
 8007082:	019b      	lsls	r3, r3, #6
 8007084:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007086:	d00b      	beq.n	80070a0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2280      	movs	r2, #128	@ 0x80
 800708c:	4013      	ands	r3, r2
 800708e:	d007      	beq.n	80070a0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <HAL_TIM_IRQHandler+0x208>)
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f001 f90c 	bl	80082b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2280      	movs	r2, #128	@ 0x80
 80070ae:	4013      	ands	r3, r2
 80070b0:	d007      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a17      	ldr	r2, [pc, #92]	@ (8007114 <HAL_TIM_IRQHandler+0x20c>)
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	0018      	movs	r0, r3
 80070be:	f001 f903 	bl	80082c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2240      	movs	r2, #64	@ 0x40
 80070c6:	4013      	ands	r3, r2
 80070c8:	d00c      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2240      	movs	r2, #64	@ 0x40
 80070ce:	4013      	ands	r3, r2
 80070d0:	d008      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2241      	movs	r2, #65	@ 0x41
 80070d8:	4252      	negs	r2, r2
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0018      	movs	r0, r3
 80070e0:	f000 fad8 	bl	8007694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2220      	movs	r2, #32
 80070e8:	4013      	ands	r3, r2
 80070ea:	d00c      	beq.n	8007106 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	4013      	ands	r3, r2
 80070f2:	d008      	beq.n	8007106 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2221      	movs	r2, #33	@ 0x21
 80070fa:	4252      	negs	r2, r2
 80070fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	0018      	movs	r0, r3
 8007102:	f001 f8d1 	bl	80082a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	46bd      	mov	sp, r7
 800710a:	b004      	add	sp, #16
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	ffffdf7f 	.word	0xffffdf7f
 8007114:	fffffeff 	.word	0xfffffeff

08007118 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007124:	2317      	movs	r3, #23
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	223c      	movs	r2, #60	@ 0x3c
 8007130:	5c9b      	ldrb	r3, [r3, r2]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_TIM_IC_ConfigChannel+0x22>
 8007136:	2302      	movs	r3, #2
 8007138:	e08c      	b.n	8007254 <HAL_TIM_IC_ConfigChannel+0x13c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223c      	movs	r2, #60	@ 0x3c
 800713e:	2101      	movs	r1, #1
 8007140:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d11b      	bne.n	8007180 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007158:	f000 fdc4 	bl	8007ce4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	210c      	movs	r1, #12
 8007168:	438a      	bics	r2, r1
 800716a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	619a      	str	r2, [r3, #24]
 800717e:	e062      	b.n	8007246 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d11c      	bne.n	80071c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007196:	f000 fe29 	bl	8007dec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699a      	ldr	r2, [r3, #24]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	492d      	ldr	r1, [pc, #180]	@ (800725c <HAL_TIM_IC_ConfigChannel+0x144>)
 80071a6:	400a      	ands	r2, r1
 80071a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6999      	ldr	r1, [r3, #24]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	021a      	lsls	r2, r3, #8
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	619a      	str	r2, [r3, #24]
 80071be:	e042      	b.n	8007246 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d11b      	bne.n	80071fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80071d6:	f000 fe7d 	bl	8007ed4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	210c      	movs	r1, #12
 80071e6:	438a      	bics	r2, r1
 80071e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]
 80071fc:	e023      	b.n	8007246 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b0c      	cmp	r3, #12
 8007202:	d11c      	bne.n	800723e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007214:	f000 fe9e 	bl	8007f54 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	490e      	ldr	r1, [pc, #56]	@ (800725c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007224:	400a      	ands	r2, r1
 8007226:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69d9      	ldr	r1, [r3, #28]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	61da      	str	r2, [r3, #28]
 800723c:	e003      	b.n	8007246 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800723e:	2317      	movs	r3, #23
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	2201      	movs	r2, #1
 8007244:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	223c      	movs	r2, #60	@ 0x3c
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]

  return status;
 800724e:	2317      	movs	r3, #23
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	781b      	ldrb	r3, [r3, #0]
}
 8007254:	0018      	movs	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	b006      	add	sp, #24
 800725a:	bd80      	pop	{r7, pc}
 800725c:	fffff3ff 	.word	0xfffff3ff

08007260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2317      	movs	r3, #23
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	223c      	movs	r2, #60	@ 0x3c
 8007278:	5c9b      	ldrb	r3, [r3, r2]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x22>
 800727e:	2302      	movs	r3, #2
 8007280:	e0e5      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	223c      	movs	r2, #60	@ 0x3c
 8007286:	2101      	movs	r1, #1
 8007288:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b14      	cmp	r3, #20
 800728e:	d900      	bls.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007290:	e0d1      	b.n	8007436 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	009a      	lsls	r2, r3, #2
 8007296:	4b70      	ldr	r3, [pc, #448]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0011      	movs	r1, r2
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 fa80 	bl	80077ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2108      	movs	r1, #8
 80072b8:	430a      	orrs	r2, r1
 80072ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2104      	movs	r1, #4
 80072c8:	438a      	bics	r2, r1
 80072ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6999      	ldr	r1, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	619a      	str	r2, [r3, #24]
      break;
 80072de:	e0af      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	0011      	movs	r1, r2
 80072e8:	0018      	movs	r0, r3
 80072ea:	f000 fadf 	bl	80078ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2180      	movs	r1, #128	@ 0x80
 80072fa:	0109      	lsls	r1, r1, #4
 80072fc:	430a      	orrs	r2, r1
 80072fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4954      	ldr	r1, [pc, #336]	@ (800745c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800730c:	400a      	ands	r2, r1
 800730e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6999      	ldr	r1, [r3, #24]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	021a      	lsls	r2, r3, #8
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	619a      	str	r2, [r3, #24]
      break;
 8007324:	e08c      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	0011      	movs	r1, r2
 800732e:	0018      	movs	r0, r3
 8007330:	f000 fb3a 	bl	80079a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2108      	movs	r1, #8
 8007340:	430a      	orrs	r2, r1
 8007342:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2104      	movs	r1, #4
 8007350:	438a      	bics	r2, r1
 8007352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69d9      	ldr	r1, [r3, #28]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	61da      	str	r2, [r3, #28]
      break;
 8007366:	e06b      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	0011      	movs	r1, r2
 8007370:	0018      	movs	r0, r3
 8007372:	f000 fb9b 	bl	8007aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	0109      	lsls	r1, r1, #4
 8007384:	430a      	orrs	r2, r1
 8007386:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4932      	ldr	r1, [pc, #200]	@ (800745c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007394:	400a      	ands	r2, r1
 8007396:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69d9      	ldr	r1, [r3, #28]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	021a      	lsls	r2, r3, #8
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	61da      	str	r2, [r3, #28]
      break;
 80073ac:	e048      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 fbdc 	bl	8007b74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2108      	movs	r1, #8
 80073c8:	430a      	orrs	r2, r1
 80073ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2104      	movs	r1, #4
 80073d8:	438a      	bics	r2, r1
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80073ee:	e027      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	0011      	movs	r1, r2
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 fc15 	bl	8007c28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2180      	movs	r1, #128	@ 0x80
 800740a:	0109      	lsls	r1, r1, #4
 800740c:	430a      	orrs	r2, r1
 800740e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4910      	ldr	r1, [pc, #64]	@ (800745c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800741c:	400a      	ands	r2, r1
 800741e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007434:	e004      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007436:	2317      	movs	r3, #23
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	2201      	movs	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
      break;
 800743e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	223c      	movs	r2, #60	@ 0x3c
 8007444:	2100      	movs	r1, #0
 8007446:	5499      	strb	r1, [r3, r2]

  return status;
 8007448:	2317      	movs	r3, #23
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	781b      	ldrb	r3, [r3, #0]
}
 800744e:	0018      	movs	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	b006      	add	sp, #24
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	0800bd44 	.word	0x0800bd44
 800745c:	fffffbff 	.word	0xfffffbff

08007460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800746a:	230f      	movs	r3, #15
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	223c      	movs	r2, #60	@ 0x3c
 8007476:	5c9b      	ldrb	r3, [r3, r2]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIM_ConfigClockSource+0x20>
 800747c:	2302      	movs	r3, #2
 800747e:	e0bc      	b.n	80075fa <HAL_TIM_ConfigClockSource+0x19a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	223c      	movs	r2, #60	@ 0x3c
 8007484:	2101      	movs	r1, #1
 8007486:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	223d      	movs	r2, #61	@ 0x3d
 800748c:	2102      	movs	r1, #2
 800748e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a5a      	ldr	r2, [pc, #360]	@ (8007604 <HAL_TIM_ConfigClockSource+0x1a4>)
 800749c:	4013      	ands	r3, r2
 800749e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a59      	ldr	r2, [pc, #356]	@ (8007608 <HAL_TIM_ConfigClockSource+0x1a8>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2280      	movs	r2, #128	@ 0x80
 80074b6:	0192      	lsls	r2, r2, #6
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d040      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xde>
 80074bc:	2280      	movs	r2, #128	@ 0x80
 80074be:	0192      	lsls	r2, r2, #6
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d900      	bls.n	80074c6 <HAL_TIM_ConfigClockSource+0x66>
 80074c4:	e088      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074c6:	2280      	movs	r2, #128	@ 0x80
 80074c8:	0152      	lsls	r2, r2, #5
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d100      	bne.n	80074d0 <HAL_TIM_ConfigClockSource+0x70>
 80074ce:	e088      	b.n	80075e2 <HAL_TIM_ConfigClockSource+0x182>
 80074d0:	2280      	movs	r2, #128	@ 0x80
 80074d2:	0152      	lsls	r2, r2, #5
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d900      	bls.n	80074da <HAL_TIM_ConfigClockSource+0x7a>
 80074d8:	e07e      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074da:	2b70      	cmp	r3, #112	@ 0x70
 80074dc:	d018      	beq.n	8007510 <HAL_TIM_ConfigClockSource+0xb0>
 80074de:	d900      	bls.n	80074e2 <HAL_TIM_ConfigClockSource+0x82>
 80074e0:	e07a      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074e2:	2b60      	cmp	r3, #96	@ 0x60
 80074e4:	d04f      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x126>
 80074e6:	d900      	bls.n	80074ea <HAL_TIM_ConfigClockSource+0x8a>
 80074e8:	e076      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074ea:	2b50      	cmp	r3, #80	@ 0x50
 80074ec:	d03b      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x106>
 80074ee:	d900      	bls.n	80074f2 <HAL_TIM_ConfigClockSource+0x92>
 80074f0:	e072      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074f2:	2b40      	cmp	r3, #64	@ 0x40
 80074f4:	d057      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x146>
 80074f6:	d900      	bls.n	80074fa <HAL_TIM_ConfigClockSource+0x9a>
 80074f8:	e06e      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d063      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x166>
 80074fe:	d86b      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d060      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x166>
 8007504:	d868      	bhi.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d05d      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x166>
 800750a:	2b10      	cmp	r3, #16
 800750c:	d05b      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x166>
 800750e:	e063      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007520:	f000 fd7a 	bl	8008018 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2277      	movs	r2, #119	@ 0x77
 8007530:	4313      	orrs	r3, r2
 8007532:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	609a      	str	r2, [r3, #8]
      break;
 800753c:	e052      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800754e:	f000 fd63 	bl	8008018 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2180      	movs	r1, #128	@ 0x80
 800755e:	01c9      	lsls	r1, r1, #7
 8007560:	430a      	orrs	r2, r1
 8007562:	609a      	str	r2, [r3, #8]
      break;
 8007564:	e03e      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007572:	001a      	movs	r2, r3
 8007574:	f000 fc0c 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2150      	movs	r1, #80	@ 0x50
 800757e:	0018      	movs	r0, r3
 8007580:	f000 fd2e 	bl	8007fe0 <TIM_ITRx_SetConfig>
      break;
 8007584:	e02e      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007592:	001a      	movs	r2, r3
 8007594:	f000 fc6c 	bl	8007e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2160      	movs	r1, #96	@ 0x60
 800759e:	0018      	movs	r0, r3
 80075a0:	f000 fd1e 	bl	8007fe0 <TIM_ITRx_SetConfig>
      break;
 80075a4:	e01e      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075b2:	001a      	movs	r2, r3
 80075b4:	f000 fbec 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2140      	movs	r1, #64	@ 0x40
 80075be:	0018      	movs	r0, r3
 80075c0:	f000 fd0e 	bl	8007fe0 <TIM_ITRx_SetConfig>
      break;
 80075c4:	e00e      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f000 fd05 	bl	8007fe0 <TIM_ITRx_SetConfig>
      break;
 80075d6:	e005      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80075d8:	230f      	movs	r3, #15
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	e000      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80075e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	223d      	movs	r2, #61	@ 0x3d
 80075e8:	2101      	movs	r1, #1
 80075ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	223c      	movs	r2, #60	@ 0x3c
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]

  return status;
 80075f4:	230f      	movs	r3, #15
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	781b      	ldrb	r3, [r3, #0]
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b004      	add	sp, #16
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			@ (mov r8, r8)
 8007604:	ffceff88 	.word	0xffceff88
 8007608:	ffff00ff 	.word	0xffff00ff

0800760c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b0c      	cmp	r3, #12
 800761e:	d01e      	beq.n	800765e <HAL_TIM_ReadCapturedValue+0x52>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b0c      	cmp	r3, #12
 8007624:	d820      	bhi.n	8007668 <HAL_TIM_ReadCapturedValue+0x5c>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b08      	cmp	r3, #8
 800762a:	d013      	beq.n	8007654 <HAL_TIM_ReadCapturedValue+0x48>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b08      	cmp	r3, #8
 8007630:	d81a      	bhi.n	8007668 <HAL_TIM_ReadCapturedValue+0x5c>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_TIM_ReadCapturedValue+0x34>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b04      	cmp	r3, #4
 800763c:	d005      	beq.n	800764a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800763e:	e013      	b.n	8007668 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007646:	60fb      	str	r3, [r7, #12]
      break;
 8007648:	e00f      	b.n	800766a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	60fb      	str	r3, [r7, #12]
      break;
 8007652:	e00a      	b.n	800766a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765a:	60fb      	str	r3, [r7, #12]
      break;
 800765c:	e005      	b.n	800766a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	60fb      	str	r3, [r7, #12]
      break;
 8007666:	e000      	b.n	800766a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8007668:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	0018      	movs	r0, r3
 800766e:	46bd      	mov	sp, r7
 8007670:	b004      	add	sp, #16
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800767c:	46c0      	nop			@ (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	b002      	add	sp, #8
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800768c:	46c0      	nop			@ (mov r8, r8)
 800768e:	46bd      	mov	sp, r7
 8007690:	b002      	add	sp, #8
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800769c:	46c0      	nop			@ (mov r8, r8)
 800769e:	46bd      	mov	sp, r7
 80076a0:	b002      	add	sp, #8
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a37      	ldr	r2, [pc, #220]	@ (8007794 <TIM_Base_SetConfig+0xf0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d008      	beq.n	80076ce <TIM_Base_SetConfig+0x2a>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	2380      	movs	r3, #128	@ 0x80
 80076c0:	05db      	lsls	r3, r3, #23
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d003      	beq.n	80076ce <TIM_Base_SetConfig+0x2a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a33      	ldr	r2, [pc, #204]	@ (8007798 <TIM_Base_SetConfig+0xf4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2270      	movs	r2, #112	@ 0x70
 80076d2:	4393      	bics	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007794 <TIM_Base_SetConfig+0xf0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d014      	beq.n	8007712 <TIM_Base_SetConfig+0x6e>
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	2380      	movs	r3, #128	@ 0x80
 80076ec:	05db      	lsls	r3, r3, #23
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d00f      	beq.n	8007712 <TIM_Base_SetConfig+0x6e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a28      	ldr	r2, [pc, #160]	@ (8007798 <TIM_Base_SetConfig+0xf4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00b      	beq.n	8007712 <TIM_Base_SetConfig+0x6e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a27      	ldr	r2, [pc, #156]	@ (800779c <TIM_Base_SetConfig+0xf8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d007      	beq.n	8007712 <TIM_Base_SetConfig+0x6e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <TIM_Base_SetConfig+0xfc>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_Base_SetConfig+0x6e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a25      	ldr	r2, [pc, #148]	@ (80077a4 <TIM_Base_SetConfig+0x100>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d108      	bne.n	8007724 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a24      	ldr	r2, [pc, #144]	@ (80077a8 <TIM_Base_SetConfig+0x104>)
 8007716:	4013      	ands	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2280      	movs	r2, #128	@ 0x80
 8007728:	4393      	bics	r3, r2
 800772a:	001a      	movs	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a11      	ldr	r2, [pc, #68]	@ (8007794 <TIM_Base_SetConfig+0xf0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d007      	beq.n	8007762 <TIM_Base_SetConfig+0xbe>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a12      	ldr	r2, [pc, #72]	@ (80077a0 <TIM_Base_SetConfig+0xfc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_Base_SetConfig+0xbe>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a11      	ldr	r2, [pc, #68]	@ (80077a4 <TIM_Base_SetConfig+0x100>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d103      	bne.n	800776a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2201      	movs	r2, #1
 8007776:	4013      	ands	r3, r2
 8007778:	2b01      	cmp	r3, #1
 800777a:	d106      	bne.n	800778a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2201      	movs	r2, #1
 8007782:	4393      	bics	r3, r2
 8007784:	001a      	movs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	611a      	str	r2, [r3, #16]
  }
}
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	46bd      	mov	sp, r7
 800778e:	b004      	add	sp, #16
 8007790:	bd80      	pop	{r7, pc}
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40000400 	.word	0x40000400
 800779c:	40002000 	.word	0x40002000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800
 80077a8:	fffffcff 	.word	0xfffffcff

080077ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	2201      	movs	r2, #1
 80077c2:	4393      	bics	r3, r2
 80077c4:	001a      	movs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007894 <TIM_OC1_SetConfig+0xe8>)
 80077da:	4013      	ands	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2203      	movs	r2, #3
 80077e2:	4393      	bics	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2202      	movs	r2, #2
 80077f4:	4393      	bics	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a24      	ldr	r2, [pc, #144]	@ (8007898 <TIM_OC1_SetConfig+0xec>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d007      	beq.n	800781a <TIM_OC1_SetConfig+0x6e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a23      	ldr	r2, [pc, #140]	@ (800789c <TIM_OC1_SetConfig+0xf0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC1_SetConfig+0x6e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a22      	ldr	r2, [pc, #136]	@ (80078a0 <TIM_OC1_SetConfig+0xf4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d10c      	bne.n	8007834 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2208      	movs	r2, #8
 800781e:	4393      	bics	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2204      	movs	r2, #4
 8007830:	4393      	bics	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a18      	ldr	r2, [pc, #96]	@ (8007898 <TIM_OC1_SetConfig+0xec>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_OC1_SetConfig+0xa0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a17      	ldr	r2, [pc, #92]	@ (800789c <TIM_OC1_SetConfig+0xf0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_OC1_SetConfig+0xa0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a16      	ldr	r2, [pc, #88]	@ (80078a0 <TIM_OC1_SetConfig+0xf4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d111      	bne.n	8007870 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <TIM_OC1_SetConfig+0xf8>)
 8007850:	4013      	ands	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4a14      	ldr	r2, [pc, #80]	@ (80078a8 <TIM_OC1_SetConfig+0xfc>)
 8007858:	4013      	ands	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	46c0      	nop			@ (mov r8, r8)
 800788c:	46bd      	mov	sp, r7
 800788e:	b006      	add	sp, #24
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	fffeff8f 	.word	0xfffeff8f
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	fffffeff 	.word	0xfffffeff
 80078a8:	fffffdff 	.word	0xfffffdff

080078ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	2210      	movs	r2, #16
 80078c2:	4393      	bics	r3, r2
 80078c4:	001a      	movs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a2c      	ldr	r2, [pc, #176]	@ (800798c <TIM_OC2_SetConfig+0xe0>)
 80078da:	4013      	ands	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007990 <TIM_OC2_SetConfig+0xe4>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2220      	movs	r2, #32
 80078f6:	4393      	bics	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a22      	ldr	r2, [pc, #136]	@ (8007994 <TIM_OC2_SetConfig+0xe8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10d      	bne.n	800792a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2280      	movs	r2, #128	@ 0x80
 8007912:	4393      	bics	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2240      	movs	r2, #64	@ 0x40
 8007926:	4393      	bics	r3, r2
 8007928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a19      	ldr	r2, [pc, #100]	@ (8007994 <TIM_OC2_SetConfig+0xe8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_OC2_SetConfig+0x96>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a18      	ldr	r2, [pc, #96]	@ (8007998 <TIM_OC2_SetConfig+0xec>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_OC2_SetConfig+0x96>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a17      	ldr	r2, [pc, #92]	@ (800799c <TIM_OC2_SetConfig+0xf0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d113      	bne.n	800796a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4a16      	ldr	r2, [pc, #88]	@ (80079a0 <TIM_OC2_SetConfig+0xf4>)
 8007946:	4013      	ands	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4a15      	ldr	r2, [pc, #84]	@ (80079a4 <TIM_OC2_SetConfig+0xf8>)
 800794e:	4013      	ands	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	621a      	str	r2, [r3, #32]
}
 8007984:	46c0      	nop			@ (mov r8, r8)
 8007986:	46bd      	mov	sp, r7
 8007988:	b006      	add	sp, #24
 800798a:	bd80      	pop	{r7, pc}
 800798c:	feff8fff 	.word	0xfeff8fff
 8007990:	fffffcff 	.word	0xfffffcff
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	fffffbff 	.word	0xfffffbff
 80079a4:	fffff7ff 	.word	0xfffff7ff

080079a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	4a31      	ldr	r2, [pc, #196]	@ (8007a84 <TIM_OC3_SetConfig+0xdc>)
 80079be:	401a      	ands	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a88 <TIM_OC3_SetConfig+0xe0>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2203      	movs	r2, #3
 80079dc:	4393      	bics	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	4a27      	ldr	r2, [pc, #156]	@ (8007a8c <TIM_OC3_SetConfig+0xe4>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a23      	ldr	r2, [pc, #140]	@ (8007a90 <TIM_OC3_SetConfig+0xe8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d10d      	bne.n	8007a22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	4a22      	ldr	r2, [pc, #136]	@ (8007a94 <TIM_OC3_SetConfig+0xec>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8007a98 <TIM_OC3_SetConfig+0xf0>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a1a      	ldr	r2, [pc, #104]	@ (8007a90 <TIM_OC3_SetConfig+0xe8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <TIM_OC3_SetConfig+0x92>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a9c <TIM_OC3_SetConfig+0xf4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC3_SetConfig+0x92>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa0 <TIM_OC3_SetConfig+0xf8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d113      	bne.n	8007a62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4a19      	ldr	r2, [pc, #100]	@ (8007aa4 <TIM_OC3_SetConfig+0xfc>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	4a18      	ldr	r2, [pc, #96]	@ (8007aa8 <TIM_OC3_SetConfig+0x100>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	46c0      	nop			@ (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b006      	add	sp, #24
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	fffffeff 	.word	0xfffffeff
 8007a88:	fffeff8f 	.word	0xfffeff8f
 8007a8c:	fffffdff 	.word	0xfffffdff
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	fffff7ff 	.word	0xfffff7ff
 8007a98:	fffffbff 	.word	0xfffffbff
 8007a9c:	40014400 	.word	0x40014400
 8007aa0:	40014800 	.word	0x40014800
 8007aa4:	ffffefff 	.word	0xffffefff
 8007aa8:	ffffdfff 	.word	0xffffdfff

08007aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	4a24      	ldr	r2, [pc, #144]	@ (8007b54 <TIM_OC4_SetConfig+0xa8>)
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4a20      	ldr	r2, [pc, #128]	@ (8007b58 <TIM_OC4_SetConfig+0xac>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a1f      	ldr	r2, [pc, #124]	@ (8007b5c <TIM_OC4_SetConfig+0xb0>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b60 <TIM_OC4_SetConfig+0xb4>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	031b      	lsls	r3, r3, #12
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a17      	ldr	r2, [pc, #92]	@ (8007b64 <TIM_OC4_SetConfig+0xb8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <TIM_OC4_SetConfig+0x70>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a16      	ldr	r2, [pc, #88]	@ (8007b68 <TIM_OC4_SetConfig+0xbc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC4_SetConfig+0x70>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <TIM_OC4_SetConfig+0xc0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d109      	bne.n	8007b30 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4a14      	ldr	r2, [pc, #80]	@ (8007b70 <TIM_OC4_SetConfig+0xc4>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	019b      	lsls	r3, r3, #6
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	46c0      	nop			@ (mov r8, r8)
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b006      	add	sp, #24
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	ffffefff 	.word	0xffffefff
 8007b58:	feff8fff 	.word	0xfeff8fff
 8007b5c:	fffffcff 	.word	0xfffffcff
 8007b60:	ffffdfff 	.word	0xffffdfff
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800
 8007b70:	ffffbfff 	.word	0xffffbfff

08007b74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	4a21      	ldr	r2, [pc, #132]	@ (8007c10 <TIM_OC5_SetConfig+0x9c>)
 8007b8a:	401a      	ands	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <TIM_OC5_SetConfig+0xa0>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <TIM_OC5_SetConfig+0xa4>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a15      	ldr	r2, [pc, #84]	@ (8007c1c <TIM_OC5_SetConfig+0xa8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_OC5_SetConfig+0x66>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a14      	ldr	r2, [pc, #80]	@ (8007c20 <TIM_OC5_SetConfig+0xac>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_OC5_SetConfig+0x66>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a13      	ldr	r2, [pc, #76]	@ (8007c24 <TIM_OC5_SetConfig+0xb0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d109      	bne.n	8007bee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8007c10 <TIM_OC5_SetConfig+0x9c>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	46c0      	nop			@ (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b006      	add	sp, #24
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	fffeffff 	.word	0xfffeffff
 8007c14:	fffeff8f 	.word	0xfffeff8f
 8007c18:	fffdffff 	.word	0xfffdffff
 8007c1c:	40012c00 	.word	0x40012c00
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800

08007c28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	4a22      	ldr	r2, [pc, #136]	@ (8007cc8 <TIM_OC6_SetConfig+0xa0>)
 8007c3e:	401a      	ands	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <TIM_OC6_SetConfig+0xa4>)
 8007c54:	4013      	ands	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd0 <TIM_OC6_SetConfig+0xa8>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	051b      	lsls	r3, r3, #20
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a16      	ldr	r2, [pc, #88]	@ (8007cd4 <TIM_OC6_SetConfig+0xac>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d007      	beq.n	8007c90 <TIM_OC6_SetConfig+0x68>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a15      	ldr	r2, [pc, #84]	@ (8007cd8 <TIM_OC6_SetConfig+0xb0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_OC6_SetConfig+0x68>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a14      	ldr	r2, [pc, #80]	@ (8007cdc <TIM_OC6_SetConfig+0xb4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d109      	bne.n	8007ca4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	4a13      	ldr	r2, [pc, #76]	@ (8007ce0 <TIM_OC6_SetConfig+0xb8>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	029b      	lsls	r3, r3, #10
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	46c0      	nop			@ (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b006      	add	sp, #24
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	ffefffff 	.word	0xffefffff
 8007ccc:	feff8fff 	.word	0xfeff8fff
 8007cd0:	ffdfffff 	.word	0xffdfffff
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800
 8007ce0:	fffbffff 	.word	0xfffbffff

08007ce4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4393      	bics	r3, r2
 8007d00:	001a      	movs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d88 <TIM_TI1_SetConfig+0xa4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d008      	beq.n	8007d26 <TIM_TI1_SetConfig+0x42>
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	2380      	movs	r3, #128	@ 0x80
 8007d18:	05db      	lsls	r3, r3, #23
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d003      	beq.n	8007d26 <TIM_TI1_SetConfig+0x42>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4a1a      	ldr	r2, [pc, #104]	@ (8007d8c <TIM_TI1_SetConfig+0xa8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d101      	bne.n	8007d2a <TIM_TI1_SetConfig+0x46>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <TIM_TI1_SetConfig+0x48>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2203      	movs	r2, #3
 8007d34:	4393      	bics	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e003      	b.n	8007d4a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2201      	movs	r2, #1
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	22f0      	movs	r2, #240	@ 0xf0
 8007d4e:	4393      	bics	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	22ff      	movs	r2, #255	@ 0xff
 8007d58:	4013      	ands	r3, r2
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	220a      	movs	r2, #10
 8007d64:	4393      	bics	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	621a      	str	r2, [r3, #32]
}
 8007d80:	46c0      	nop			@ (mov r8, r8)
 8007d82:	46bd      	mov	sp, r7
 8007d84:	b006      	add	sp, #24
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40000400 	.word	0x40000400

08007d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	2201      	movs	r2, #1
 8007da8:	4393      	bics	r3, r2
 8007daa:	001a      	movs	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	22f0      	movs	r2, #240	@ 0xf0
 8007dba:	4393      	bics	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	220a      	movs	r2, #10
 8007dcc:	4393      	bics	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	621a      	str	r2, [r3, #32]
}
 8007de4:	46c0      	nop			@ (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b006      	add	sp, #24
 8007dea:	bd80      	pop	{r7, pc}

08007dec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	2210      	movs	r2, #16
 8007e06:	4393      	bics	r3, r2
 8007e08:	001a      	movs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4a14      	ldr	r2, [pc, #80]	@ (8007e68 <TIM_TI2_SetConfig+0x7c>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	4a10      	ldr	r2, [pc, #64]	@ (8007e6c <TIM_TI2_SetConfig+0x80>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	031b      	lsls	r3, r3, #12
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	0c1b      	lsrs	r3, r3, #16
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	22a0      	movs	r2, #160	@ 0xa0
 8007e40:	4393      	bics	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	22a0      	movs	r2, #160	@ 0xa0
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b006      	add	sp, #24
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	46c0      	nop			@ (mov r8, r8)
 8007e68:	fffffcff 	.word	0xfffffcff
 8007e6c:	ffff0fff 	.word	0xffff0fff

08007e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	2210      	movs	r2, #16
 8007e88:	4393      	bics	r3, r2
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed0 <TIM_TI2_ConfigInputStage+0x60>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	031b      	lsls	r3, r3, #12
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	22a0      	movs	r2, #160	@ 0xa0
 8007eac:	4393      	bics	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	621a      	str	r2, [r3, #32]
}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b006      	add	sp, #24
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	ffff0fff 	.word	0xffff0fff

08007ed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	4a17      	ldr	r2, [pc, #92]	@ (8007f4c <TIM_TI3_SetConfig+0x78>)
 8007eee:	401a      	ands	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2203      	movs	r2, #3
 8007efe:	4393      	bics	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	22f0      	movs	r2, #240	@ 0xf0
 8007f0e:	4393      	bics	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	22ff      	movs	r2, #255	@ 0xff
 8007f18:	4013      	ands	r3, r2
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	4a0b      	ldr	r2, [pc, #44]	@ (8007f50 <TIM_TI3_SetConfig+0x7c>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	021a      	lsls	r2, r3, #8
 8007f2c:	23a0      	movs	r3, #160	@ 0xa0
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	4013      	ands	r3, r2
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	621a      	str	r2, [r3, #32]
}
 8007f44:	46c0      	nop			@ (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b006      	add	sp, #24
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	fffffeff 	.word	0xfffffeff
 8007f50:	fffff5ff 	.word	0xfffff5ff

08007f54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	4a18      	ldr	r2, [pc, #96]	@ (8007fd0 <TIM_TI4_SetConfig+0x7c>)
 8007f6e:	401a      	ands	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	@ (8007fd4 <TIM_TI4_SetConfig+0x80>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4a12      	ldr	r2, [pc, #72]	@ (8007fd8 <TIM_TI4_SetConfig+0x84>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	031b      	lsls	r3, r3, #12
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8007fdc <TIM_TI4_SetConfig+0x88>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	031a      	lsls	r2, r3, #12
 8007fae:	23a0      	movs	r3, #160	@ 0xa0
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	b006      	add	sp, #24
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	ffffefff 	.word	0xffffefff
 8007fd4:	fffffcff 	.word	0xfffffcff
 8007fd8:	ffff0fff 	.word	0xffff0fff
 8007fdc:	ffff5fff 	.word	0xffff5fff

08007fe0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a08      	ldr	r2, [pc, #32]	@ (8008014 <TIM_ITRx_SetConfig+0x34>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	2207      	movs	r2, #7
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	609a      	str	r2, [r3, #8]
}
 800800a:	46c0      	nop			@ (mov r8, r8)
 800800c:	46bd      	mov	sp, r7
 800800e:	b004      	add	sp, #16
 8008010:	bd80      	pop	{r7, pc}
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	ffcfff8f 	.word	0xffcfff8f

08008018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <TIM_ETR_SetConfig+0x3c>)
 8008030:	4013      	ands	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	021a      	lsls	r2, r3, #8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	431a      	orrs	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4313      	orrs	r3, r2
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	46c0      	nop			@ (mov r8, r8)
 800804e:	46bd      	mov	sp, r7
 8008050:	b006      	add	sp, #24
 8008052:	bd80      	pop	{r7, pc}
 8008054:	ffff00ff 	.word	0xffff00ff

08008058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	221f      	movs	r2, #31
 8008068:	4013      	ands	r3, r2
 800806a:	2201      	movs	r2, #1
 800806c:	409a      	lsls	r2, r3
 800806e:	0013      	movs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	43d2      	mvns	r2, r2
 800807a:	401a      	ands	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	211f      	movs	r1, #31
 8008088:	400b      	ands	r3, r1
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	4099      	lsls	r1, r3
 800808e:	000b      	movs	r3, r1
 8008090:	431a      	orrs	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	b006      	add	sp, #24
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	223c      	movs	r2, #60	@ 0x3c
 80080ae:	5c9b      	ldrb	r3, [r3, r2]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e050      	b.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	223c      	movs	r2, #60	@ 0x3c
 80080bc:	2101      	movs	r1, #1
 80080be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	223d      	movs	r2, #61	@ 0x3d
 80080c4:	2102      	movs	r1, #2
 80080c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a21      	ldr	r2, [pc, #132]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d108      	bne.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4a20      	ldr	r2, [pc, #128]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080e6:	4013      	ands	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2270      	movs	r2, #112	@ 0x70
 80080f8:	4393      	bics	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a14      	ldr	r2, [pc, #80]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00a      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	2380      	movs	r3, #128	@ 0x80
 800811e:	05db      	lsls	r3, r3, #23
 8008120:	429a      	cmp	r2, r3
 8008122:	d004      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a10      	ldr	r2, [pc, #64]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d10c      	bne.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2280      	movs	r2, #128	@ 0x80
 8008132:	4393      	bics	r3, r2
 8008134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4313      	orrs	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	223d      	movs	r2, #61	@ 0x3d
 800814c:	2101      	movs	r1, #1
 800814e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	223c      	movs	r2, #60	@ 0x3c
 8008154:	2100      	movs	r1, #0
 8008156:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	0018      	movs	r0, r3
 800815c:	46bd      	mov	sp, r7
 800815e:	b004      	add	sp, #16
 8008160:	bd80      	pop	{r7, pc}
 8008162:	46c0      	nop			@ (mov r8, r8)
 8008164:	40012c00 	.word	0x40012c00
 8008168:	ff0fffff 	.word	0xff0fffff
 800816c:	40000400 	.word	0x40000400

08008170 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	223c      	movs	r2, #60	@ 0x3c
 8008182:	5c9b      	ldrb	r3, [r3, r2]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008188:	2302      	movs	r3, #2
 800818a:	e06f      	b.n	800826c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	223c      	movs	r2, #60	@ 0x3c
 8008190:	2101      	movs	r1, #1
 8008192:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	22ff      	movs	r2, #255	@ 0xff
 8008198:	4393      	bics	r3, r2
 800819a:	001a      	movs	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a33      	ldr	r2, [pc, #204]	@ (8008274 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80081a8:	401a      	ands	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a30      	ldr	r2, [pc, #192]	@ (8008278 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80081b6:	401a      	ands	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a2e      	ldr	r2, [pc, #184]	@ (800827c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80081c4:	401a      	ands	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008280 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80081d2:	401a      	ands	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a29      	ldr	r2, [pc, #164]	@ (8008284 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80081e0:	401a      	ands	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a26      	ldr	r2, [pc, #152]	@ (8008288 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80081ee:	401a      	ands	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a24      	ldr	r2, [pc, #144]	@ (800828c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80081fc:	401a      	ands	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a21      	ldr	r2, [pc, #132]	@ (8008290 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800820c:	401a      	ands	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1e      	ldr	r2, [pc, #120]	@ (8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d11c      	bne.n	800825a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a1d      	ldr	r2, [pc, #116]	@ (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008224:	401a      	ands	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822a:	051b      	lsls	r3, r3, #20
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a1a      	ldr	r2, [pc, #104]	@ (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008234:	401a      	ands	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a17      	ldr	r2, [pc, #92]	@ (80082a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008242:	401a      	ands	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4a15      	ldr	r2, [pc, #84]	@ (80082a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008250:	401a      	ands	r2, r3
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	223c      	movs	r2, #60	@ 0x3c
 8008266:	2100      	movs	r1, #0
 8008268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b004      	add	sp, #16
 8008272:	bd80      	pop	{r7, pc}
 8008274:	fffffcff 	.word	0xfffffcff
 8008278:	fffffbff 	.word	0xfffffbff
 800827c:	fffff7ff 	.word	0xfffff7ff
 8008280:	ffffefff 	.word	0xffffefff
 8008284:	ffffdfff 	.word	0xffffdfff
 8008288:	ffffbfff 	.word	0xffffbfff
 800828c:	fff0ffff 	.word	0xfff0ffff
 8008290:	efffffff 	.word	0xefffffff
 8008294:	40012c00 	.word	0x40012c00
 8008298:	ff0fffff 	.word	0xff0fffff
 800829c:	feffffff 	.word	0xfeffffff
 80082a0:	fdffffff 	.word	0xfdffffff
 80082a4:	dfffffff 	.word	0xdfffffff

080082a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b0:	46c0      	nop			@ (mov r8, r8)
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b002      	add	sp, #8
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e046      	b.n	8008378 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2288      	movs	r2, #136	@ 0x88
 80082ee:	589b      	ldr	r3, [r3, r2]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d107      	bne.n	8008304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2284      	movs	r2, #132	@ 0x84
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	0018      	movs	r0, r3
 8008300:	f7fb fb4e 	bl	80039a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2288      	movs	r2, #136	@ 0x88
 8008308:	2124      	movs	r1, #36	@ 0x24
 800830a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2101      	movs	r1, #1
 8008318:	438a      	bics	r2, r1
 800831a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	0018      	movs	r0, r3
 8008328:	f000 fb48 	bl	80089bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	0018      	movs	r0, r3
 8008330:	f000 f8cc 	bl	80084cc <UART_SetConfig>
 8008334:	0003      	movs	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e01c      	b.n	8008378 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	490d      	ldr	r1, [pc, #52]	@ (8008380 <HAL_UART_Init+0xa8>)
 800834a:	400a      	ands	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	212a      	movs	r1, #42	@ 0x2a
 800835a:	438a      	bics	r2, r1
 800835c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2101      	movs	r1, #1
 800836a:	430a      	orrs	r2, r1
 800836c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f000 fbd7 	bl	8008b24 <UART_CheckIdleState>
 8008376:	0003      	movs	r3, r0
}
 8008378:	0018      	movs	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	b002      	add	sp, #8
 800837e:	bd80      	pop	{r7, pc}
 8008380:	ffffb7ff 	.word	0xffffb7ff

08008384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	@ 0x28
 8008388:	af02      	add	r7, sp, #8
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	1dbb      	adds	r3, r7, #6
 8008392:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2288      	movs	r2, #136	@ 0x88
 8008398:	589b      	ldr	r3, [r3, r2]
 800839a:	2b20      	cmp	r3, #32
 800839c:	d000      	beq.n	80083a0 <HAL_UART_Transmit+0x1c>
 800839e:	e090      	b.n	80084c2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_UART_Transmit+0x2a>
 80083a6:	1dbb      	adds	r3, r7, #6
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e088      	b.n	80084c4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	015b      	lsls	r3, r3, #5
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d109      	bne.n	80083d2 <HAL_UART_Transmit+0x4e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2201      	movs	r2, #1
 80083ca:	4013      	ands	r3, r2
 80083cc:	d001      	beq.n	80083d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e078      	b.n	80084c4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2290      	movs	r2, #144	@ 0x90
 80083d6:	2100      	movs	r1, #0
 80083d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2288      	movs	r2, #136	@ 0x88
 80083de:	2121      	movs	r1, #33	@ 0x21
 80083e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083e2:	f7fb fcf3 	bl	8003dcc <HAL_GetTick>
 80083e6:	0003      	movs	r3, r0
 80083e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1dba      	adds	r2, r7, #6
 80083ee:	2154      	movs	r1, #84	@ 0x54
 80083f0:	8812      	ldrh	r2, [r2, #0]
 80083f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	1dba      	adds	r2, r7, #6
 80083f8:	2156      	movs	r1, #86	@ 0x56
 80083fa:	8812      	ldrh	r2, [r2, #0]
 80083fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	2380      	movs	r3, #128	@ 0x80
 8008404:	015b      	lsls	r3, r3, #5
 8008406:	429a      	cmp	r2, r3
 8008408:	d108      	bne.n	800841c <HAL_UART_Transmit+0x98>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	e003      	b.n	8008424 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008424:	e030      	b.n	8008488 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	0013      	movs	r3, r2
 8008430:	2200      	movs	r2, #0
 8008432:	2180      	movs	r1, #128	@ 0x80
 8008434:	f000 fc20 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 8008438:	1e03      	subs	r3, r0, #0
 800843a:	d005      	beq.n	8008448 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2288      	movs	r2, #136	@ 0x88
 8008440:	2120      	movs	r1, #32
 8008442:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e03d      	b.n	80084c4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	001a      	movs	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	05d2      	lsls	r2, r2, #23
 800845a:	0dd2      	lsrs	r2, r2, #23
 800845c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	3302      	adds	r3, #2
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	e007      	b.n	8008476 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3301      	adds	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2256      	movs	r2, #86	@ 0x56
 800847a:	5a9b      	ldrh	r3, [r3, r2]
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b299      	uxth	r1, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2256      	movs	r2, #86	@ 0x56
 8008486:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2256      	movs	r2, #86	@ 0x56
 800848c:	5a9b      	ldrh	r3, [r3, r2]
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1c8      	bne.n	8008426 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	0013      	movs	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	2140      	movs	r1, #64	@ 0x40
 80084a2:	f000 fbe9 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 80084a6:	1e03      	subs	r3, r0, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2288      	movs	r2, #136	@ 0x88
 80084ae:	2120      	movs	r1, #32
 80084b0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e006      	b.n	80084c4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2288      	movs	r2, #136	@ 0x88
 80084ba:	2120      	movs	r1, #32
 80084bc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e000      	b.n	80084c4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80084c2:	2302      	movs	r3, #2
  }
}
 80084c4:	0018      	movs	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b008      	add	sp, #32
 80084ca:	bd80      	pop	{r7, pc}

080084cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084cc:	b5b0      	push	{r4, r5, r7, lr}
 80084ce:	b090      	sub	sp, #64	@ 0x40
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084d4:	231a      	movs	r3, #26
 80084d6:	2220      	movs	r2, #32
 80084d8:	189b      	adds	r3, r3, r2
 80084da:	19db      	adds	r3, r3, r7
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4ac4      	ldr	r2, [pc, #784]	@ (8008810 <UART_SetConfig+0x344>)
 8008500:	4013      	ands	r3, r2
 8008502:	0019      	movs	r1, r3
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800850a:	430b      	orrs	r3, r1
 800850c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4abf      	ldr	r2, [pc, #764]	@ (8008814 <UART_SetConfig+0x348>)
 8008516:	4013      	ands	r3, r2
 8008518:	0018      	movs	r0, r3
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	68d9      	ldr	r1, [r3, #12]
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	0003      	movs	r3, r0
 8008524:	430b      	orrs	r3, r1
 8008526:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4ab9      	ldr	r2, [pc, #740]	@ (8008818 <UART_SetConfig+0x34c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800853e:	4313      	orrs	r3, r2
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	4ab4      	ldr	r2, [pc, #720]	@ (800881c <UART_SetConfig+0x350>)
 800854a:	4013      	ands	r3, r2
 800854c:	0019      	movs	r1, r3
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008554:	430b      	orrs	r3, r1
 8008556:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	220f      	movs	r2, #15
 8008560:	4393      	bics	r3, r2
 8008562:	0018      	movs	r0, r3
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	0003      	movs	r3, r0
 800856e:	430b      	orrs	r3, r1
 8008570:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4aaa      	ldr	r2, [pc, #680]	@ (8008820 <UART_SetConfig+0x354>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d131      	bne.n	80085e0 <UART_SetConfig+0x114>
 800857c:	4ba9      	ldr	r3, [pc, #676]	@ (8008824 <UART_SetConfig+0x358>)
 800857e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008580:	2203      	movs	r2, #3
 8008582:	4013      	ands	r3, r2
 8008584:	2b03      	cmp	r3, #3
 8008586:	d01d      	beq.n	80085c4 <UART_SetConfig+0xf8>
 8008588:	d823      	bhi.n	80085d2 <UART_SetConfig+0x106>
 800858a:	2b02      	cmp	r3, #2
 800858c:	d00c      	beq.n	80085a8 <UART_SetConfig+0xdc>
 800858e:	d820      	bhi.n	80085d2 <UART_SetConfig+0x106>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <UART_SetConfig+0xce>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d00e      	beq.n	80085b6 <UART_SetConfig+0xea>
 8008598:	e01b      	b.n	80085d2 <UART_SetConfig+0x106>
 800859a:	231b      	movs	r3, #27
 800859c:	2220      	movs	r2, #32
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	19db      	adds	r3, r3, r7
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e071      	b.n	800868c <UART_SetConfig+0x1c0>
 80085a8:	231b      	movs	r3, #27
 80085aa:	2220      	movs	r2, #32
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	19db      	adds	r3, r3, r7
 80085b0:	2202      	movs	r2, #2
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e06a      	b.n	800868c <UART_SetConfig+0x1c0>
 80085b6:	231b      	movs	r3, #27
 80085b8:	2220      	movs	r2, #32
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	19db      	adds	r3, r3, r7
 80085be:	2204      	movs	r2, #4
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e063      	b.n	800868c <UART_SetConfig+0x1c0>
 80085c4:	231b      	movs	r3, #27
 80085c6:	2220      	movs	r2, #32
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	19db      	adds	r3, r3, r7
 80085cc:	2208      	movs	r2, #8
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	e05c      	b.n	800868c <UART_SetConfig+0x1c0>
 80085d2:	231b      	movs	r3, #27
 80085d4:	2220      	movs	r2, #32
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	19db      	adds	r3, r3, r7
 80085da:	2210      	movs	r2, #16
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	e055      	b.n	800868c <UART_SetConfig+0x1c0>
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a90      	ldr	r2, [pc, #576]	@ (8008828 <UART_SetConfig+0x35c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d106      	bne.n	80085f8 <UART_SetConfig+0x12c>
 80085ea:	231b      	movs	r3, #27
 80085ec:	2220      	movs	r2, #32
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	19db      	adds	r3, r3, r7
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e049      	b.n	800868c <UART_SetConfig+0x1c0>
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a86      	ldr	r2, [pc, #536]	@ (8008818 <UART_SetConfig+0x34c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d13e      	bne.n	8008680 <UART_SetConfig+0x1b4>
 8008602:	4b88      	ldr	r3, [pc, #544]	@ (8008824 <UART_SetConfig+0x358>)
 8008604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008606:	23c0      	movs	r3, #192	@ 0xc0
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	4013      	ands	r3, r2
 800860c:	22c0      	movs	r2, #192	@ 0xc0
 800860e:	0112      	lsls	r2, r2, #4
 8008610:	4293      	cmp	r3, r2
 8008612:	d027      	beq.n	8008664 <UART_SetConfig+0x198>
 8008614:	22c0      	movs	r2, #192	@ 0xc0
 8008616:	0112      	lsls	r2, r2, #4
 8008618:	4293      	cmp	r3, r2
 800861a:	d82a      	bhi.n	8008672 <UART_SetConfig+0x1a6>
 800861c:	2280      	movs	r2, #128	@ 0x80
 800861e:	0112      	lsls	r2, r2, #4
 8008620:	4293      	cmp	r3, r2
 8008622:	d011      	beq.n	8008648 <UART_SetConfig+0x17c>
 8008624:	2280      	movs	r2, #128	@ 0x80
 8008626:	0112      	lsls	r2, r2, #4
 8008628:	4293      	cmp	r3, r2
 800862a:	d822      	bhi.n	8008672 <UART_SetConfig+0x1a6>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <UART_SetConfig+0x16e>
 8008630:	2280      	movs	r2, #128	@ 0x80
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	4293      	cmp	r3, r2
 8008636:	d00e      	beq.n	8008656 <UART_SetConfig+0x18a>
 8008638:	e01b      	b.n	8008672 <UART_SetConfig+0x1a6>
 800863a:	231b      	movs	r3, #27
 800863c:	2220      	movs	r2, #32
 800863e:	189b      	adds	r3, r3, r2
 8008640:	19db      	adds	r3, r3, r7
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e021      	b.n	800868c <UART_SetConfig+0x1c0>
 8008648:	231b      	movs	r3, #27
 800864a:	2220      	movs	r2, #32
 800864c:	189b      	adds	r3, r3, r2
 800864e:	19db      	adds	r3, r3, r7
 8008650:	2202      	movs	r2, #2
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e01a      	b.n	800868c <UART_SetConfig+0x1c0>
 8008656:	231b      	movs	r3, #27
 8008658:	2220      	movs	r2, #32
 800865a:	189b      	adds	r3, r3, r2
 800865c:	19db      	adds	r3, r3, r7
 800865e:	2204      	movs	r2, #4
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e013      	b.n	800868c <UART_SetConfig+0x1c0>
 8008664:	231b      	movs	r3, #27
 8008666:	2220      	movs	r2, #32
 8008668:	189b      	adds	r3, r3, r2
 800866a:	19db      	adds	r3, r3, r7
 800866c:	2208      	movs	r2, #8
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e00c      	b.n	800868c <UART_SetConfig+0x1c0>
 8008672:	231b      	movs	r3, #27
 8008674:	2220      	movs	r2, #32
 8008676:	189b      	adds	r3, r3, r2
 8008678:	19db      	adds	r3, r3, r7
 800867a:	2210      	movs	r2, #16
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e005      	b.n	800868c <UART_SetConfig+0x1c0>
 8008680:	231b      	movs	r3, #27
 8008682:	2220      	movs	r2, #32
 8008684:	189b      	adds	r3, r3, r2
 8008686:	19db      	adds	r3, r3, r7
 8008688:	2210      	movs	r2, #16
 800868a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a61      	ldr	r2, [pc, #388]	@ (8008818 <UART_SetConfig+0x34c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d000      	beq.n	8008698 <UART_SetConfig+0x1cc>
 8008696:	e092      	b.n	80087be <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008698:	231b      	movs	r3, #27
 800869a:	2220      	movs	r2, #32
 800869c:	189b      	adds	r3, r3, r2
 800869e:	19db      	adds	r3, r3, r7
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d015      	beq.n	80086d2 <UART_SetConfig+0x206>
 80086a6:	dc18      	bgt.n	80086da <UART_SetConfig+0x20e>
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d00d      	beq.n	80086c8 <UART_SetConfig+0x1fc>
 80086ac:	dc15      	bgt.n	80086da <UART_SetConfig+0x20e>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <UART_SetConfig+0x1ec>
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d005      	beq.n	80086c2 <UART_SetConfig+0x1f6>
 80086b6:	e010      	b.n	80086da <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b8:	f7fd fcf8 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80086bc:	0003      	movs	r3, r0
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c0:	e014      	b.n	80086ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c2:	4b5a      	ldr	r3, [pc, #360]	@ (800882c <UART_SetConfig+0x360>)
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c6:	e011      	b.n	80086ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c8:	f7fd fc64 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 80086cc:	0003      	movs	r3, r0
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086d0:	e00c      	b.n	80086ec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d2:	2380      	movs	r3, #128	@ 0x80
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086d8:	e008      	b.n	80086ec <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80086de:	231a      	movs	r3, #26
 80086e0:	2220      	movs	r2, #32
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	19db      	adds	r3, r3, r7
 80086e6:	2201      	movs	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
        break;
 80086ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d100      	bne.n	80086f4 <UART_SetConfig+0x228>
 80086f2:	e147      	b.n	8008984 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008830 <UART_SetConfig+0x364>)
 80086fa:	0052      	lsls	r2, r2, #1
 80086fc:	5ad3      	ldrh	r3, [r2, r3]
 80086fe:	0019      	movs	r1, r3
 8008700:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008702:	f7f7 fd1d 	bl	8000140 <__udivsi3>
 8008706:	0003      	movs	r3, r0
 8008708:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	0013      	movs	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	189b      	adds	r3, r3, r2
 8008714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008716:	429a      	cmp	r2, r3
 8008718:	d305      	bcc.n	8008726 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008722:	429a      	cmp	r2, r3
 8008724:	d906      	bls.n	8008734 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8008726:	231a      	movs	r3, #26
 8008728:	2220      	movs	r2, #32
 800872a:	189b      	adds	r3, r3, r2
 800872c:	19db      	adds	r3, r3, r7
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e127      	b.n	8008984 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	2300      	movs	r3, #0
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008740:	4b3b      	ldr	r3, [pc, #236]	@ (8008830 <UART_SetConfig+0x364>)
 8008742:	0052      	lsls	r2, r2, #1
 8008744:	5ad3      	ldrh	r3, [r2, r3]
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	69b8      	ldr	r0, [r7, #24]
 8008752:	69f9      	ldr	r1, [r7, #28]
 8008754:	f7f7 fee2 	bl	800051c <__aeabi_uldivmod>
 8008758:	0002      	movs	r2, r0
 800875a:	000b      	movs	r3, r1
 800875c:	0e11      	lsrs	r1, r2, #24
 800875e:	021d      	lsls	r5, r3, #8
 8008760:	430d      	orrs	r5, r1
 8008762:	0214      	lsls	r4, r2, #8
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68b8      	ldr	r0, [r7, #8]
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	1900      	adds	r0, r0, r4
 8008776:	4169      	adcs	r1, r5
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f7f7 fec9 	bl	800051c <__aeabi_uldivmod>
 800878a:	0002      	movs	r2, r0
 800878c:	000b      	movs	r3, r1
 800878e:	0013      	movs	r3, r2
 8008790:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008794:	23c0      	movs	r3, #192	@ 0xc0
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	429a      	cmp	r2, r3
 800879a:	d309      	bcc.n	80087b0 <UART_SetConfig+0x2e4>
 800879c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879e:	2380      	movs	r3, #128	@ 0x80
 80087a0:	035b      	lsls	r3, r3, #13
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d204      	bcs.n	80087b0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	e0e9      	b.n	8008984 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80087b0:	231a      	movs	r3, #26
 80087b2:	2220      	movs	r2, #32
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	19db      	adds	r3, r3, r7
 80087b8:	2201      	movs	r2, #1
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	e0e2      	b.n	8008984 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	69da      	ldr	r2, [r3, #28]
 80087c2:	2380      	movs	r3, #128	@ 0x80
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d000      	beq.n	80087cc <UART_SetConfig+0x300>
 80087ca:	e083      	b.n	80088d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80087cc:	231b      	movs	r3, #27
 80087ce:	2220      	movs	r2, #32
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d015      	beq.n	8008806 <UART_SetConfig+0x33a>
 80087da:	dc2b      	bgt.n	8008834 <UART_SetConfig+0x368>
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d00d      	beq.n	80087fc <UART_SetConfig+0x330>
 80087e0:	dc28      	bgt.n	8008834 <UART_SetConfig+0x368>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <UART_SetConfig+0x320>
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d005      	beq.n	80087f6 <UART_SetConfig+0x32a>
 80087ea:	e023      	b.n	8008834 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ec:	f7fd fc5e 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80087f0:	0003      	movs	r3, r0
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f4:	e027      	b.n	8008846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087f6:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <UART_SetConfig+0x360>)
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087fa:	e024      	b.n	8008846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087fc:	f7fd fbca 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 8008800:	0003      	movs	r3, r0
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008804:	e01f      	b.n	8008846 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008806:	2380      	movs	r3, #128	@ 0x80
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800880c:	e01b      	b.n	8008846 <UART_SetConfig+0x37a>
 800880e:	46c0      	nop			@ (mov r8, r8)
 8008810:	cfff69f3 	.word	0xcfff69f3
 8008814:	ffffcfff 	.word	0xffffcfff
 8008818:	40008000 	.word	0x40008000
 800881c:	11fff4ff 	.word	0x11fff4ff
 8008820:	40013800 	.word	0x40013800
 8008824:	40021000 	.word	0x40021000
 8008828:	40004400 	.word	0x40004400
 800882c:	00f42400 	.word	0x00f42400
 8008830:	0800bd98 	.word	0x0800bd98
      default:
        pclk = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008838:	231a      	movs	r3, #26
 800883a:	2220      	movs	r2, #32
 800883c:	189b      	adds	r3, r3, r2
 800883e:	19db      	adds	r3, r3, r7
 8008840:	2201      	movs	r2, #1
 8008842:	701a      	strb	r2, [r3, #0]
        break;
 8008844:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	2b00      	cmp	r3, #0
 800884a:	d100      	bne.n	800884e <UART_SetConfig+0x382>
 800884c:	e09a      	b.n	8008984 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008852:	4b58      	ldr	r3, [pc, #352]	@ (80089b4 <UART_SetConfig+0x4e8>)
 8008854:	0052      	lsls	r2, r2, #1
 8008856:	5ad3      	ldrh	r3, [r2, r3]
 8008858:	0019      	movs	r1, r3
 800885a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800885c:	f7f7 fc70 	bl	8000140 <__udivsi3>
 8008860:	0003      	movs	r3, r0
 8008862:	005a      	lsls	r2, r3, #1
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	085b      	lsrs	r3, r3, #1
 800886a:	18d2      	adds	r2, r2, r3
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	0019      	movs	r1, r3
 8008872:	0010      	movs	r0, r2
 8008874:	f7f7 fc64 	bl	8000140 <__udivsi3>
 8008878:	0003      	movs	r3, r0
 800887a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	2b0f      	cmp	r3, #15
 8008880:	d921      	bls.n	80088c6 <UART_SetConfig+0x3fa>
 8008882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008884:	2380      	movs	r3, #128	@ 0x80
 8008886:	025b      	lsls	r3, r3, #9
 8008888:	429a      	cmp	r2, r3
 800888a:	d21c      	bcs.n	80088c6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	b29a      	uxth	r2, r3
 8008890:	200e      	movs	r0, #14
 8008892:	2420      	movs	r4, #32
 8008894:	1903      	adds	r3, r0, r4
 8008896:	19db      	adds	r3, r3, r7
 8008898:	210f      	movs	r1, #15
 800889a:	438a      	bics	r2, r1
 800889c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2207      	movs	r2, #7
 80088a6:	4013      	ands	r3, r2
 80088a8:	b299      	uxth	r1, r3
 80088aa:	1903      	adds	r3, r0, r4
 80088ac:	19db      	adds	r3, r3, r7
 80088ae:	1902      	adds	r2, r0, r4
 80088b0:	19d2      	adds	r2, r2, r7
 80088b2:	8812      	ldrh	r2, [r2, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	1902      	adds	r2, r0, r4
 80088be:	19d2      	adds	r2, r2, r7
 80088c0:	8812      	ldrh	r2, [r2, #0]
 80088c2:	60da      	str	r2, [r3, #12]
 80088c4:	e05e      	b.n	8008984 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80088c6:	231a      	movs	r3, #26
 80088c8:	2220      	movs	r2, #32
 80088ca:	189b      	adds	r3, r3, r2
 80088cc:	19db      	adds	r3, r3, r7
 80088ce:	2201      	movs	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e057      	b.n	8008984 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088d4:	231b      	movs	r3, #27
 80088d6:	2220      	movs	r2, #32
 80088d8:	189b      	adds	r3, r3, r2
 80088da:	19db      	adds	r3, r3, r7
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d015      	beq.n	800890e <UART_SetConfig+0x442>
 80088e2:	dc18      	bgt.n	8008916 <UART_SetConfig+0x44a>
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d00d      	beq.n	8008904 <UART_SetConfig+0x438>
 80088e8:	dc15      	bgt.n	8008916 <UART_SetConfig+0x44a>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <UART_SetConfig+0x428>
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d005      	beq.n	80088fe <UART_SetConfig+0x432>
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088f4:	f7fd fbda 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80088f8:	0003      	movs	r3, r0
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088fc:	e014      	b.n	8008928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088fe:	4b2e      	ldr	r3, [pc, #184]	@ (80089b8 <UART_SetConfig+0x4ec>)
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008902:	e011      	b.n	8008928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008904:	f7fd fb46 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 8008908:	0003      	movs	r3, r0
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800890c:	e00c      	b.n	8008928 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800890e:	2380      	movs	r3, #128	@ 0x80
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008914:	e008      	b.n	8008928 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800891a:	231a      	movs	r3, #26
 800891c:	2220      	movs	r2, #32
 800891e:	189b      	adds	r3, r3, r2
 8008920:	19db      	adds	r3, r3, r7
 8008922:	2201      	movs	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
        break;
 8008926:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02a      	beq.n	8008984 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008932:	4b20      	ldr	r3, [pc, #128]	@ (80089b4 <UART_SetConfig+0x4e8>)
 8008934:	0052      	lsls	r2, r2, #1
 8008936:	5ad3      	ldrh	r3, [r2, r3]
 8008938:	0019      	movs	r1, r3
 800893a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800893c:	f7f7 fc00 	bl	8000140 <__udivsi3>
 8008940:	0003      	movs	r3, r0
 8008942:	001a      	movs	r2, r3
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	18d2      	adds	r2, r2, r3
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	0019      	movs	r1, r3
 8008952:	0010      	movs	r0, r2
 8008954:	f7f7 fbf4 	bl	8000140 <__udivsi3>
 8008958:	0003      	movs	r3, r0
 800895a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	2b0f      	cmp	r3, #15
 8008960:	d90a      	bls.n	8008978 <UART_SetConfig+0x4ac>
 8008962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008964:	2380      	movs	r3, #128	@ 0x80
 8008966:	025b      	lsls	r3, r3, #9
 8008968:	429a      	cmp	r2, r3
 800896a:	d205      	bcs.n	8008978 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	b29a      	uxth	r2, r3
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60da      	str	r2, [r3, #12]
 8008976:	e005      	b.n	8008984 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008978:	231a      	movs	r3, #26
 800897a:	2220      	movs	r2, #32
 800897c:	189b      	adds	r3, r3, r2
 800897e:	19db      	adds	r3, r3, r7
 8008980:	2201      	movs	r2, #1
 8008982:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	226a      	movs	r2, #106	@ 0x6a
 8008988:	2101      	movs	r1, #1
 800898a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	2268      	movs	r2, #104	@ 0x68
 8008990:	2101      	movs	r1, #1
 8008992:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	2200      	movs	r2, #0
 8008998:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	2200      	movs	r2, #0
 800899e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089a0:	231a      	movs	r3, #26
 80089a2:	2220      	movs	r2, #32
 80089a4:	189b      	adds	r3, r3, r2
 80089a6:	19db      	adds	r3, r3, r7
 80089a8:	781b      	ldrb	r3, [r3, #0]
}
 80089aa:	0018      	movs	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b010      	add	sp, #64	@ 0x40
 80089b0:	bdb0      	pop	{r4, r5, r7, pc}
 80089b2:	46c0      	nop			@ (mov r8, r8)
 80089b4:	0800bd98 	.word	0x0800bd98
 80089b8:	00f42400 	.word	0x00f42400

080089bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	2208      	movs	r2, #8
 80089ca:	4013      	ands	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a4a      	ldr	r2, [pc, #296]	@ (8008b00 <UART_AdvFeatureConfig+0x144>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	0019      	movs	r1, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ea:	2201      	movs	r2, #1
 80089ec:	4013      	ands	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4a43      	ldr	r2, [pc, #268]	@ (8008b04 <UART_AdvFeatureConfig+0x148>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	0019      	movs	r1, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	4013      	ands	r3, r2
 8008a10:	d00b      	beq.n	8008a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a3b      	ldr	r2, [pc, #236]	@ (8008b08 <UART_AdvFeatureConfig+0x14c>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	2204      	movs	r2, #4
 8008a30:	4013      	ands	r3, r2
 8008a32:	d00b      	beq.n	8008a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	4a34      	ldr	r2, [pc, #208]	@ (8008b0c <UART_AdvFeatureConfig+0x150>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	0019      	movs	r1, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	2210      	movs	r2, #16
 8008a52:	4013      	ands	r3, r2
 8008a54:	d00b      	beq.n	8008a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8008b10 <UART_AdvFeatureConfig+0x154>)
 8008a5e:	4013      	ands	r3, r2
 8008a60:	0019      	movs	r1, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a72:	2220      	movs	r2, #32
 8008a74:	4013      	ands	r3, r2
 8008a76:	d00b      	beq.n	8008a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	4a25      	ldr	r2, [pc, #148]	@ (8008b14 <UART_AdvFeatureConfig+0x158>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	0019      	movs	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	2240      	movs	r2, #64	@ 0x40
 8008a96:	4013      	ands	r3, r2
 8008a98:	d01d      	beq.n	8008ad6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b18 <UART_AdvFeatureConfig+0x15c>)
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	0019      	movs	r1, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	2380      	movs	r3, #128	@ 0x80
 8008ab8:	035b      	lsls	r3, r3, #13
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d10b      	bne.n	8008ad6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4a15      	ldr	r2, [pc, #84]	@ (8008b1c <UART_AdvFeatureConfig+0x160>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	0019      	movs	r1, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ada:	2280      	movs	r2, #128	@ 0x80
 8008adc:	4013      	ands	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8008b20 <UART_AdvFeatureConfig+0x164>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	0019      	movs	r1, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	605a      	str	r2, [r3, #4]
  }
}
 8008af8:	46c0      	nop			@ (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b002      	add	sp, #8
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	ffff7fff 	.word	0xffff7fff
 8008b04:	fffdffff 	.word	0xfffdffff
 8008b08:	fffeffff 	.word	0xfffeffff
 8008b0c:	fffbffff 	.word	0xfffbffff
 8008b10:	ffffefff 	.word	0xffffefff
 8008b14:	ffffdfff 	.word	0xffffdfff
 8008b18:	ffefffff 	.word	0xffefffff
 8008b1c:	ff9fffff 	.word	0xff9fffff
 8008b20:	fff7ffff 	.word	0xfff7ffff

08008b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b092      	sub	sp, #72	@ 0x48
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2290      	movs	r2, #144	@ 0x90
 8008b30:	2100      	movs	r1, #0
 8008b32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b34:	f7fb f94a 	bl	8003dcc <HAL_GetTick>
 8008b38:	0003      	movs	r3, r0
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2208      	movs	r2, #8
 8008b44:	4013      	ands	r3, r2
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d12d      	bne.n	8008ba6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4c:	2280      	movs	r2, #128	@ 0x80
 8008b4e:	0391      	lsls	r1, r2, #14
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	4a47      	ldr	r2, [pc, #284]	@ (8008c70 <UART_CheckIdleState+0x14c>)
 8008b54:	9200      	str	r2, [sp, #0]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f000 f88e 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 8008b5c:	1e03      	subs	r3, r0, #0
 8008b5e:	d022      	beq.n	8008ba6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b60:	f3ef 8310 	mrs	r3, PRIMASK
 8008b64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b70:	f383 8810 	msr	PRIMASK, r3
}
 8008b74:	46c0      	nop			@ (mov r8, r8)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2180      	movs	r1, #128	@ 0x80
 8008b82:	438a      	bics	r2, r1
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	f383 8810 	msr	PRIMASK, r3
}
 8008b90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2288      	movs	r2, #136	@ 0x88
 8008b96:	2120      	movs	r1, #32
 8008b98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2284      	movs	r2, #132	@ 0x84
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e060      	b.n	8008c68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2204      	movs	r2, #4
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d146      	bne.n	8008c42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb6:	2280      	movs	r2, #128	@ 0x80
 8008bb8:	03d1      	lsls	r1, r2, #15
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c70 <UART_CheckIdleState+0x14c>)
 8008bbe:	9200      	str	r2, [sp, #0]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f000 f859 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 8008bc6:	1e03      	subs	r3, r0, #0
 8008bc8:	d03b      	beq.n	8008c42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bca:	f3ef 8310 	mrs	r3, PRIMASK
 8008bce:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f383 8810 	msr	PRIMASK, r3
}
 8008bde:	46c0      	nop			@ (mov r8, r8)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4922      	ldr	r1, [pc, #136]	@ (8008c74 <UART_CheckIdleState+0x150>)
 8008bec:	400a      	ands	r2, r1
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f383 8810 	msr	PRIMASK, r3
}
 8008bfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008c00:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c06:	2301      	movs	r3, #1
 8008c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f383 8810 	msr	PRIMASK, r3
}
 8008c10:	46c0      	nop			@ (mov r8, r8)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	438a      	bics	r2, r1
 8008c20:	609a      	str	r2, [r3, #8]
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	f383 8810 	msr	PRIMASK, r3
}
 8008c2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	228c      	movs	r2, #140	@ 0x8c
 8008c32:	2120      	movs	r1, #32
 8008c34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2284      	movs	r2, #132	@ 0x84
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e012      	b.n	8008c68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2288      	movs	r2, #136	@ 0x88
 8008c46:	2120      	movs	r1, #32
 8008c48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	228c      	movs	r2, #140	@ 0x8c
 8008c4e:	2120      	movs	r1, #32
 8008c50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2284      	movs	r2, #132	@ 0x84
 8008c62:	2100      	movs	r1, #0
 8008c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	0018      	movs	r0, r3
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b010      	add	sp, #64	@ 0x40
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	01ffffff 	.word	0x01ffffff
 8008c74:	fffffedf 	.word	0xfffffedf

08008c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	1dfb      	adds	r3, r7, #7
 8008c86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c88:	e051      	b.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	d04e      	beq.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c90:	f7fb f89c 	bl	8003dcc <HAL_GetTick>
 8008c94:	0002      	movs	r2, r0
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d302      	bcc.n	8008ca6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e051      	b.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	d03b      	beq.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b80      	cmp	r3, #128	@ 0x80
 8008cba:	d038      	beq.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b40      	cmp	r3, #64	@ 0x40
 8008cc0:	d035      	beq.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	d111      	bne.n	8008cf4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 f83c 	bl	8008d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2290      	movs	r2, #144	@ 0x90
 8008ce4:	2108      	movs	r1, #8
 8008ce6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2284      	movs	r2, #132	@ 0x84
 8008cec:	2100      	movs	r1, #0
 8008cee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e02c      	b.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69da      	ldr	r2, [r3, #28]
 8008cfa:	2380      	movs	r3, #128	@ 0x80
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	401a      	ands	r2, r3
 8008d00:	2380      	movs	r3, #128	@ 0x80
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d112      	bne.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2280      	movs	r2, #128	@ 0x80
 8008d0e:	0112      	lsls	r2, r2, #4
 8008d10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	0018      	movs	r0, r3
 8008d16:	f000 f81f 	bl	8008d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2290      	movs	r2, #144	@ 0x90
 8008d1e:	2120      	movs	r1, #32
 8008d20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2284      	movs	r2, #132	@ 0x84
 8008d26:	2100      	movs	r1, #0
 8008d28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e00f      	b.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4013      	ands	r3, r2
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	425a      	negs	r2, r3
 8008d3e:	4153      	adcs	r3, r2
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	001a      	movs	r2, r3
 8008d44:	1dfb      	adds	r3, r7, #7
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d09e      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	0018      	movs	r0, r3
 8008d50:	46bd      	mov	sp, r7
 8008d52:	b004      	add	sp, #16
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	@ 0x38
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d60:	f3ef 8310 	mrs	r3, PRIMASK
 8008d64:	617b      	str	r3, [r7, #20]
  return(result);
 8008d66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f383 8810 	msr	PRIMASK, r3
}
 8008d74:	46c0      	nop			@ (mov r8, r8)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4926      	ldr	r1, [pc, #152]	@ (8008e1c <UART_EndRxTransfer+0xc4>)
 8008d82:	400a      	ands	r2, r1
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f383 8810 	msr	PRIMASK, r3
}
 8008d90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d92:	f3ef 8310 	mrs	r3, PRIMASK
 8008d96:	623b      	str	r3, [r7, #32]
  return(result);
 8008d98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	f383 8810 	msr	PRIMASK, r3
}
 8008da6:	46c0      	nop			@ (mov r8, r8)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	491b      	ldr	r1, [pc, #108]	@ (8008e20 <UART_EndRxTransfer+0xc8>)
 8008db4:	400a      	ands	r2, r1
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f383 8810 	msr	PRIMASK, r3
}
 8008dc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d118      	bne.n	8008dfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f383 8810 	msr	PRIMASK, r3
}
 8008de0:	46c0      	nop			@ (mov r8, r8)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2110      	movs	r1, #16
 8008dee:	438a      	bics	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f383 8810 	msr	PRIMASK, r3
}
 8008dfc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	228c      	movs	r2, #140	@ 0x8c
 8008e02:	2120      	movs	r1, #32
 8008e04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e12:	46c0      	nop			@ (mov r8, r8)
 8008e14:	46bd      	mov	sp, r7
 8008e16:	b00e      	add	sp, #56	@ 0x38
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	46c0      	nop			@ (mov r8, r8)
 8008e1c:	fffffedf 	.word	0xfffffedf
 8008e20:	effffffe 	.word	0xeffffffe

08008e24 <__cvt>:
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	001f      	movs	r7, r3
 8008e28:	2300      	movs	r3, #0
 8008e2a:	0016      	movs	r6, r2
 8008e2c:	b08b      	sub	sp, #44	@ 0x2c
 8008e2e:	429f      	cmp	r7, r3
 8008e30:	da04      	bge.n	8008e3c <__cvt+0x18>
 8008e32:	2180      	movs	r1, #128	@ 0x80
 8008e34:	0609      	lsls	r1, r1, #24
 8008e36:	187b      	adds	r3, r7, r1
 8008e38:	001f      	movs	r7, r3
 8008e3a:	232d      	movs	r3, #45	@ 0x2d
 8008e3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e3e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	2320      	movs	r3, #32
 8008e44:	2203      	movs	r2, #3
 8008e46:	439d      	bics	r5, r3
 8008e48:	2d46      	cmp	r5, #70	@ 0x46
 8008e4a:	d007      	beq.n	8008e5c <__cvt+0x38>
 8008e4c:	002b      	movs	r3, r5
 8008e4e:	3b45      	subs	r3, #69	@ 0x45
 8008e50:	4259      	negs	r1, r3
 8008e52:	414b      	adcs	r3, r1
 8008e54:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008e56:	3a01      	subs	r2, #1
 8008e58:	18cb      	adds	r3, r1, r3
 8008e5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e5c:	ab09      	add	r3, sp, #36	@ 0x24
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	ab08      	add	r3, sp, #32
 8008e62:	9303      	str	r3, [sp, #12]
 8008e64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e66:	9200      	str	r2, [sp, #0]
 8008e68:	9302      	str	r3, [sp, #8]
 8008e6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e6c:	0032      	movs	r2, r6
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	003b      	movs	r3, r7
 8008e72:	f000 fe81 	bl	8009b78 <_dtoa_r>
 8008e76:	0004      	movs	r4, r0
 8008e78:	2d47      	cmp	r5, #71	@ 0x47
 8008e7a:	d11b      	bne.n	8008eb4 <__cvt+0x90>
 8008e7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d511      	bpl.n	8008ea6 <__cvt+0x82>
 8008e82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e84:	18c3      	adds	r3, r0, r3
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	0030      	movs	r0, r6
 8008e8e:	0039      	movs	r1, r7
 8008e90:	f7f7 fadc 	bl	800044c <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d001      	beq.n	8008e9c <__cvt+0x78>
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9c:	2230      	movs	r2, #48	@ 0x30
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	9907      	ldr	r1, [sp, #28]
 8008ea2:	428b      	cmp	r3, r1
 8008ea4:	d320      	bcc.n	8008ee8 <__cvt+0xc4>
 8008ea6:	0020      	movs	r0, r4
 8008ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008eac:	1b1b      	subs	r3, r3, r4
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	b00b      	add	sp, #44	@ 0x2c
 8008eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008eb6:	18c3      	adds	r3, r0, r3
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	2d46      	cmp	r5, #70	@ 0x46
 8008ebc:	d1e4      	bne.n	8008e88 <__cvt+0x64>
 8008ebe:	7803      	ldrb	r3, [r0, #0]
 8008ec0:	2b30      	cmp	r3, #48	@ 0x30
 8008ec2:	d10c      	bne.n	8008ede <__cvt+0xba>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	0030      	movs	r0, r6
 8008eca:	0039      	movs	r1, r7
 8008ecc:	f7f7 fabe 	bl	800044c <__aeabi_dcmpeq>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d104      	bne.n	8008ede <__cvt+0xba>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ee0:	9a07      	ldr	r2, [sp, #28]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	e7ce      	b.n	8008e86 <__cvt+0x62>
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	9109      	str	r1, [sp, #36]	@ 0x24
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e7d6      	b.n	8008e9e <__cvt+0x7a>

08008ef0 <__exponent>:
 8008ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef2:	232b      	movs	r3, #43	@ 0x2b
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	0005      	movs	r5, r0
 8008ef8:	1e0c      	subs	r4, r1, #0
 8008efa:	7002      	strb	r2, [r0, #0]
 8008efc:	da01      	bge.n	8008f02 <__exponent+0x12>
 8008efe:	424c      	negs	r4, r1
 8008f00:	3302      	adds	r3, #2
 8008f02:	706b      	strb	r3, [r5, #1]
 8008f04:	2c09      	cmp	r4, #9
 8008f06:	dd2c      	ble.n	8008f62 <__exponent+0x72>
 8008f08:	ab02      	add	r3, sp, #8
 8008f0a:	1dde      	adds	r6, r3, #7
 8008f0c:	0020      	movs	r0, r4
 8008f0e:	210a      	movs	r1, #10
 8008f10:	f7f7 fa86 	bl	8000420 <__aeabi_idivmod>
 8008f14:	0037      	movs	r7, r6
 8008f16:	3130      	adds	r1, #48	@ 0x30
 8008f18:	3e01      	subs	r6, #1
 8008f1a:	0020      	movs	r0, r4
 8008f1c:	7031      	strb	r1, [r6, #0]
 8008f1e:	210a      	movs	r1, #10
 8008f20:	9401      	str	r4, [sp, #4]
 8008f22:	f7f7 f997 	bl	8000254 <__divsi3>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	0004      	movs	r4, r0
 8008f2a:	2b63      	cmp	r3, #99	@ 0x63
 8008f2c:	dcee      	bgt.n	8008f0c <__exponent+0x1c>
 8008f2e:	1eba      	subs	r2, r7, #2
 8008f30:	1ca8      	adds	r0, r5, #2
 8008f32:	0001      	movs	r1, r0
 8008f34:	0013      	movs	r3, r2
 8008f36:	3430      	adds	r4, #48	@ 0x30
 8008f38:	7014      	strb	r4, [r2, #0]
 8008f3a:	ac02      	add	r4, sp, #8
 8008f3c:	3407      	adds	r4, #7
 8008f3e:	429c      	cmp	r4, r3
 8008f40:	d80a      	bhi.n	8008f58 <__exponent+0x68>
 8008f42:	2300      	movs	r3, #0
 8008f44:	4294      	cmp	r4, r2
 8008f46:	d303      	bcc.n	8008f50 <__exponent+0x60>
 8008f48:	3309      	adds	r3, #9
 8008f4a:	aa02      	add	r2, sp, #8
 8008f4c:	189b      	adds	r3, r3, r2
 8008f4e:	1bdb      	subs	r3, r3, r7
 8008f50:	18c0      	adds	r0, r0, r3
 8008f52:	1b40      	subs	r0, r0, r5
 8008f54:	b005      	add	sp, #20
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f58:	781c      	ldrb	r4, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	700c      	strb	r4, [r1, #0]
 8008f5e:	3101      	adds	r1, #1
 8008f60:	e7eb      	b.n	8008f3a <__exponent+0x4a>
 8008f62:	2330      	movs	r3, #48	@ 0x30
 8008f64:	18e4      	adds	r4, r4, r3
 8008f66:	70ab      	strb	r3, [r5, #2]
 8008f68:	1d28      	adds	r0, r5, #4
 8008f6a:	70ec      	strb	r4, [r5, #3]
 8008f6c:	e7f1      	b.n	8008f52 <__exponent+0x62>
	...

08008f70 <_printf_float>:
 8008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f72:	b097      	sub	sp, #92	@ 0x5c
 8008f74:	000d      	movs	r5, r1
 8008f76:	920a      	str	r2, [sp, #40]	@ 0x28
 8008f78:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008f7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f7e:	f000 fceb 	bl	8009958 <_localeconv_r>
 8008f82:	6803      	ldr	r3, [r0, #0]
 8008f84:	0018      	movs	r0, r3
 8008f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f88:	f7f7 f8be 	bl	8000108 <strlen>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008f90:	9314      	str	r3, [sp, #80]	@ 0x50
 8008f92:	7e2b      	ldrb	r3, [r5, #24]
 8008f94:	2207      	movs	r2, #7
 8008f96:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	05c9      	lsls	r1, r1, #23
 8008fa2:	d545      	bpl.n	8009030 <_printf_float+0xc0>
 8008fa4:	189b      	adds	r3, r3, r2
 8008fa6:	4393      	bics	r3, r2
 8008fa8:	001a      	movs	r2, r3
 8008faa:	3208      	adds	r2, #8
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	681e      	ldr	r6, [r3, #0]
 8008fb2:	685f      	ldr	r7, [r3, #4]
 8008fb4:	007b      	lsls	r3, r7, #1
 8008fb6:	085b      	lsrs	r3, r3, #1
 8008fb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008fba:	9610      	str	r6, [sp, #64]	@ 0x40
 8008fbc:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008fbe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008fc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008fc2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008fc4:	4ba7      	ldr	r3, [pc, #668]	@ (8009264 <_printf_float+0x2f4>)
 8008fc6:	4252      	negs	r2, r2
 8008fc8:	f7f9 fc98 	bl	80028fc <__aeabi_dcmpun>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d131      	bne.n	8009034 <_printf_float+0xc4>
 8008fd0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008fd2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	4ba3      	ldr	r3, [pc, #652]	@ (8009264 <_printf_float+0x2f4>)
 8008fd8:	4252      	negs	r2, r2
 8008fda:	f7f7 fa47 	bl	800046c <__aeabi_dcmple>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d128      	bne.n	8009034 <_printf_float+0xc4>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	0030      	movs	r0, r6
 8008fe8:	0039      	movs	r1, r7
 8008fea:	f7f7 fa35 	bl	8000458 <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d003      	beq.n	8008ffa <_printf_float+0x8a>
 8008ff2:	002b      	movs	r3, r5
 8008ff4:	222d      	movs	r2, #45	@ 0x2d
 8008ff6:	3343      	adds	r3, #67	@ 0x43
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ffc:	4f9a      	ldr	r7, [pc, #616]	@ (8009268 <_printf_float+0x2f8>)
 8008ffe:	2b47      	cmp	r3, #71	@ 0x47
 8009000:	d800      	bhi.n	8009004 <_printf_float+0x94>
 8009002:	4f9a      	ldr	r7, [pc, #616]	@ (800926c <_printf_float+0x2fc>)
 8009004:	2303      	movs	r3, #3
 8009006:	2400      	movs	r4, #0
 8009008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800900a:	612b      	str	r3, [r5, #16]
 800900c:	3301      	adds	r3, #1
 800900e:	439a      	bics	r2, r3
 8009010:	602a      	str	r2, [r5, #0]
 8009012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009014:	0029      	movs	r1, r5
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800901a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901c:	aa15      	add	r2, sp, #84	@ 0x54
 800901e:	f000 f9e5 	bl	80093ec <_printf_common>
 8009022:	3001      	adds	r0, #1
 8009024:	d000      	beq.n	8009028 <_printf_float+0xb8>
 8009026:	e09e      	b.n	8009166 <_printf_float+0x1f6>
 8009028:	2001      	movs	r0, #1
 800902a:	4240      	negs	r0, r0
 800902c:	b017      	add	sp, #92	@ 0x5c
 800902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009030:	3307      	adds	r3, #7
 8009032:	e7b8      	b.n	8008fa6 <_printf_float+0x36>
 8009034:	0032      	movs	r2, r6
 8009036:	003b      	movs	r3, r7
 8009038:	0030      	movs	r0, r6
 800903a:	0039      	movs	r1, r7
 800903c:	f7f9 fc5e 	bl	80028fc <__aeabi_dcmpun>
 8009040:	2800      	cmp	r0, #0
 8009042:	d00b      	beq.n	800905c <_printf_float+0xec>
 8009044:	2f00      	cmp	r7, #0
 8009046:	da03      	bge.n	8009050 <_printf_float+0xe0>
 8009048:	002b      	movs	r3, r5
 800904a:	222d      	movs	r2, #45	@ 0x2d
 800904c:	3343      	adds	r3, #67	@ 0x43
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009052:	4f87      	ldr	r7, [pc, #540]	@ (8009270 <_printf_float+0x300>)
 8009054:	2b47      	cmp	r3, #71	@ 0x47
 8009056:	d8d5      	bhi.n	8009004 <_printf_float+0x94>
 8009058:	4f86      	ldr	r7, [pc, #536]	@ (8009274 <_printf_float+0x304>)
 800905a:	e7d3      	b.n	8009004 <_printf_float+0x94>
 800905c:	2220      	movs	r2, #32
 800905e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009060:	686b      	ldr	r3, [r5, #4]
 8009062:	4394      	bics	r4, r2
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	d146      	bne.n	80090f6 <_printf_float+0x186>
 8009068:	3307      	adds	r3, #7
 800906a:	606b      	str	r3, [r5, #4]
 800906c:	2380      	movs	r3, #128	@ 0x80
 800906e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	4313      	orrs	r3, r2
 8009074:	2200      	movs	r2, #0
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	9206      	str	r2, [sp, #24]
 800907a:	aa14      	add	r2, sp, #80	@ 0x50
 800907c:	9205      	str	r2, [sp, #20]
 800907e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009080:	a90a      	add	r1, sp, #40	@ 0x28
 8009082:	9204      	str	r2, [sp, #16]
 8009084:	aa13      	add	r2, sp, #76	@ 0x4c
 8009086:	9203      	str	r2, [sp, #12]
 8009088:	2223      	movs	r2, #35	@ 0x23
 800908a:	1852      	adds	r2, r2, r1
 800908c:	9202      	str	r2, [sp, #8]
 800908e:	9301      	str	r3, [sp, #4]
 8009090:	686b      	ldr	r3, [r5, #4]
 8009092:	0032      	movs	r2, r6
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009098:	003b      	movs	r3, r7
 800909a:	f7ff fec3 	bl	8008e24 <__cvt>
 800909e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090a0:	0007      	movs	r7, r0
 80090a2:	2c47      	cmp	r4, #71	@ 0x47
 80090a4:	d12d      	bne.n	8009102 <_printf_float+0x192>
 80090a6:	1cd3      	adds	r3, r2, #3
 80090a8:	db02      	blt.n	80090b0 <_printf_float+0x140>
 80090aa:	686b      	ldr	r3, [r5, #4]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	dd47      	ble.n	8009140 <_printf_float+0x1d0>
 80090b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090b2:	3b02      	subs	r3, #2
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80090b8:	0028      	movs	r0, r5
 80090ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80090bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090be:	3901      	subs	r1, #1
 80090c0:	3050      	adds	r0, #80	@ 0x50
 80090c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090c4:	f7ff ff14 	bl	8008ef0 <__exponent>
 80090c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80090ca:	0004      	movs	r4, r0
 80090cc:	1813      	adds	r3, r2, r0
 80090ce:	612b      	str	r3, [r5, #16]
 80090d0:	2a01      	cmp	r2, #1
 80090d2:	dc02      	bgt.n	80090da <_printf_float+0x16a>
 80090d4:	682a      	ldr	r2, [r5, #0]
 80090d6:	07d2      	lsls	r2, r2, #31
 80090d8:	d501      	bpl.n	80090de <_printf_float+0x16e>
 80090da:	3301      	adds	r3, #1
 80090dc:	612b      	str	r3, [r5, #16]
 80090de:	2323      	movs	r3, #35	@ 0x23
 80090e0:	aa0a      	add	r2, sp, #40	@ 0x28
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d100      	bne.n	80090ec <_printf_float+0x17c>
 80090ea:	e792      	b.n	8009012 <_printf_float+0xa2>
 80090ec:	002b      	movs	r3, r5
 80090ee:	222d      	movs	r2, #45	@ 0x2d
 80090f0:	3343      	adds	r3, #67	@ 0x43
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e78d      	b.n	8009012 <_printf_float+0xa2>
 80090f6:	2c47      	cmp	r4, #71	@ 0x47
 80090f8:	d1b8      	bne.n	800906c <_printf_float+0xfc>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1b6      	bne.n	800906c <_printf_float+0xfc>
 80090fe:	3301      	adds	r3, #1
 8009100:	e7b3      	b.n	800906a <_printf_float+0xfa>
 8009102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009104:	2b65      	cmp	r3, #101	@ 0x65
 8009106:	d9d7      	bls.n	80090b8 <_printf_float+0x148>
 8009108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800910a:	2b66      	cmp	r3, #102	@ 0x66
 800910c:	d11a      	bne.n	8009144 <_printf_float+0x1d4>
 800910e:	686b      	ldr	r3, [r5, #4]
 8009110:	2a00      	cmp	r2, #0
 8009112:	dd09      	ble.n	8009128 <_printf_float+0x1b8>
 8009114:	612a      	str	r2, [r5, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <_printf_float+0x1b0>
 800911a:	6829      	ldr	r1, [r5, #0]
 800911c:	07c9      	lsls	r1, r1, #31
 800911e:	d50b      	bpl.n	8009138 <_printf_float+0x1c8>
 8009120:	3301      	adds	r3, #1
 8009122:	189b      	adds	r3, r3, r2
 8009124:	612b      	str	r3, [r5, #16]
 8009126:	e007      	b.n	8009138 <_printf_float+0x1c8>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <_printf_float+0x1c4>
 800912c:	2201      	movs	r2, #1
 800912e:	6829      	ldr	r1, [r5, #0]
 8009130:	4211      	tst	r1, r2
 8009132:	d000      	beq.n	8009136 <_printf_float+0x1c6>
 8009134:	1c9a      	adds	r2, r3, #2
 8009136:	612a      	str	r2, [r5, #16]
 8009138:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800913a:	2400      	movs	r4, #0
 800913c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800913e:	e7ce      	b.n	80090de <_printf_float+0x16e>
 8009140:	2367      	movs	r3, #103	@ 0x67
 8009142:	930c      	str	r3, [sp, #48]	@ 0x30
 8009144:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009146:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009148:	4299      	cmp	r1, r3
 800914a:	db06      	blt.n	800915a <_printf_float+0x1ea>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	6129      	str	r1, [r5, #16]
 8009150:	07db      	lsls	r3, r3, #31
 8009152:	d5f1      	bpl.n	8009138 <_printf_float+0x1c8>
 8009154:	3101      	adds	r1, #1
 8009156:	6129      	str	r1, [r5, #16]
 8009158:	e7ee      	b.n	8009138 <_printf_float+0x1c8>
 800915a:	2201      	movs	r2, #1
 800915c:	2900      	cmp	r1, #0
 800915e:	dce0      	bgt.n	8009122 <_printf_float+0x1b2>
 8009160:	1892      	adds	r2, r2, r2
 8009162:	1a52      	subs	r2, r2, r1
 8009164:	e7dd      	b.n	8009122 <_printf_float+0x1b2>
 8009166:	682a      	ldr	r2, [r5, #0]
 8009168:	0553      	lsls	r3, r2, #21
 800916a:	d408      	bmi.n	800917e <_printf_float+0x20e>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	003a      	movs	r2, r7
 8009170:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009174:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009176:	47a0      	blx	r4
 8009178:	3001      	adds	r0, #1
 800917a:	d129      	bne.n	80091d0 <_printf_float+0x260>
 800917c:	e754      	b.n	8009028 <_printf_float+0xb8>
 800917e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009180:	2b65      	cmp	r3, #101	@ 0x65
 8009182:	d800      	bhi.n	8009186 <_printf_float+0x216>
 8009184:	e0db      	b.n	800933e <_printf_float+0x3ce>
 8009186:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009188:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	f7f7 f95d 	bl	800044c <__aeabi_dcmpeq>
 8009192:	2800      	cmp	r0, #0
 8009194:	d033      	beq.n	80091fe <_printf_float+0x28e>
 8009196:	2301      	movs	r3, #1
 8009198:	4a37      	ldr	r2, [pc, #220]	@ (8009278 <_printf_float+0x308>)
 800919a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800919c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800919e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80091a0:	47a0      	blx	r4
 80091a2:	3001      	adds	r0, #1
 80091a4:	d100      	bne.n	80091a8 <_printf_float+0x238>
 80091a6:	e73f      	b.n	8009028 <_printf_float+0xb8>
 80091a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80091aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091ac:	42b3      	cmp	r3, r6
 80091ae:	db02      	blt.n	80091b6 <_printf_float+0x246>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	07db      	lsls	r3, r3, #31
 80091b4:	d50c      	bpl.n	80091d0 <_printf_float+0x260>
 80091b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80091b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091c0:	47a0      	blx	r4
 80091c2:	2400      	movs	r4, #0
 80091c4:	3001      	adds	r0, #1
 80091c6:	d100      	bne.n	80091ca <_printf_float+0x25a>
 80091c8:	e72e      	b.n	8009028 <_printf_float+0xb8>
 80091ca:	1e73      	subs	r3, r6, #1
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	dc0a      	bgt.n	80091e6 <_printf_float+0x276>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	079b      	lsls	r3, r3, #30
 80091d4:	d500      	bpl.n	80091d8 <_printf_float+0x268>
 80091d6:	e106      	b.n	80093e6 <_printf_float+0x476>
 80091d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80091da:	68e8      	ldr	r0, [r5, #12]
 80091dc:	4298      	cmp	r0, r3
 80091de:	db00      	blt.n	80091e2 <_printf_float+0x272>
 80091e0:	e724      	b.n	800902c <_printf_float+0xbc>
 80091e2:	0018      	movs	r0, r3
 80091e4:	e722      	b.n	800902c <_printf_float+0xbc>
 80091e6:	002a      	movs	r2, r5
 80091e8:	2301      	movs	r3, #1
 80091ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80091f0:	321a      	adds	r2, #26
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	d100      	bne.n	80091fa <_printf_float+0x28a>
 80091f8:	e716      	b.n	8009028 <_printf_float+0xb8>
 80091fa:	3401      	adds	r4, #1
 80091fc:	e7e5      	b.n	80091ca <_printf_float+0x25a>
 80091fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009200:	2b00      	cmp	r3, #0
 8009202:	dc3b      	bgt.n	800927c <_printf_float+0x30c>
 8009204:	2301      	movs	r3, #1
 8009206:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <_printf_float+0x308>)
 8009208:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800920a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800920c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800920e:	47a0      	blx	r4
 8009210:	3001      	adds	r0, #1
 8009212:	d100      	bne.n	8009216 <_printf_float+0x2a6>
 8009214:	e708      	b.n	8009028 <_printf_float+0xb8>
 8009216:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009218:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800921a:	4333      	orrs	r3, r6
 800921c:	d102      	bne.n	8009224 <_printf_float+0x2b4>
 800921e:	682b      	ldr	r3, [r5, #0]
 8009220:	07db      	lsls	r3, r3, #31
 8009222:	d5d5      	bpl.n	80091d0 <_printf_float+0x260>
 8009224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009226:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800922a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800922c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800922e:	47a0      	blx	r4
 8009230:	2300      	movs	r3, #0
 8009232:	3001      	adds	r0, #1
 8009234:	d100      	bne.n	8009238 <_printf_float+0x2c8>
 8009236:	e6f7      	b.n	8009028 <_printf_float+0xb8>
 8009238:	930c      	str	r3, [sp, #48]	@ 0x30
 800923a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800923c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800923e:	425b      	negs	r3, r3
 8009240:	4293      	cmp	r3, r2
 8009242:	dc01      	bgt.n	8009248 <_printf_float+0x2d8>
 8009244:	0033      	movs	r3, r6
 8009246:	e792      	b.n	800916e <_printf_float+0x1fe>
 8009248:	002a      	movs	r2, r5
 800924a:	2301      	movs	r3, #1
 800924c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800924e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009250:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009252:	321a      	adds	r2, #26
 8009254:	47a0      	blx	r4
 8009256:	3001      	adds	r0, #1
 8009258:	d100      	bne.n	800925c <_printf_float+0x2ec>
 800925a:	e6e5      	b.n	8009028 <_printf_float+0xb8>
 800925c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800925e:	3301      	adds	r3, #1
 8009260:	e7ea      	b.n	8009238 <_printf_float+0x2c8>
 8009262:	46c0      	nop			@ (mov r8, r8)
 8009264:	7fefffff 	.word	0x7fefffff
 8009268:	0800bdb4 	.word	0x0800bdb4
 800926c:	0800bdb0 	.word	0x0800bdb0
 8009270:	0800bdbc 	.word	0x0800bdbc
 8009274:	0800bdb8 	.word	0x0800bdb8
 8009278:	0800bdc0 	.word	0x0800bdc0
 800927c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800927e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009280:	930c      	str	r3, [sp, #48]	@ 0x30
 8009282:	429e      	cmp	r6, r3
 8009284:	dd00      	ble.n	8009288 <_printf_float+0x318>
 8009286:	001e      	movs	r6, r3
 8009288:	2e00      	cmp	r6, #0
 800928a:	dc31      	bgt.n	80092f0 <_printf_float+0x380>
 800928c:	43f3      	mvns	r3, r6
 800928e:	2400      	movs	r4, #0
 8009290:	17db      	asrs	r3, r3, #31
 8009292:	4033      	ands	r3, r6
 8009294:	930e      	str	r3, [sp, #56]	@ 0x38
 8009296:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800929a:	1af3      	subs	r3, r6, r3
 800929c:	42a3      	cmp	r3, r4
 800929e:	dc30      	bgt.n	8009302 <_printf_float+0x392>
 80092a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092a4:	429a      	cmp	r2, r3
 80092a6:	dc38      	bgt.n	800931a <_printf_float+0x3aa>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	07db      	lsls	r3, r3, #31
 80092ac:	d435      	bmi.n	800931a <_printf_float+0x3aa>
 80092ae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80092b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092b4:	1b9b      	subs	r3, r3, r6
 80092b6:	1b14      	subs	r4, r2, r4
 80092b8:	429c      	cmp	r4, r3
 80092ba:	dd00      	ble.n	80092be <_printf_float+0x34e>
 80092bc:	001c      	movs	r4, r3
 80092be:	2c00      	cmp	r4, #0
 80092c0:	dc34      	bgt.n	800932c <_printf_float+0x3bc>
 80092c2:	43e3      	mvns	r3, r4
 80092c4:	2600      	movs	r6, #0
 80092c6:	17db      	asrs	r3, r3, #31
 80092c8:	401c      	ands	r4, r3
 80092ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	1b1b      	subs	r3, r3, r4
 80092d2:	42b3      	cmp	r3, r6
 80092d4:	dc00      	bgt.n	80092d8 <_printf_float+0x368>
 80092d6:	e77b      	b.n	80091d0 <_printf_float+0x260>
 80092d8:	002a      	movs	r2, r5
 80092da:	2301      	movs	r3, #1
 80092dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80092e2:	321a      	adds	r2, #26
 80092e4:	47b8      	blx	r7
 80092e6:	3001      	adds	r0, #1
 80092e8:	d100      	bne.n	80092ec <_printf_float+0x37c>
 80092ea:	e69d      	b.n	8009028 <_printf_float+0xb8>
 80092ec:	3601      	adds	r6, #1
 80092ee:	e7ec      	b.n	80092ca <_printf_float+0x35a>
 80092f0:	0033      	movs	r3, r6
 80092f2:	003a      	movs	r2, r7
 80092f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80092fa:	47a0      	blx	r4
 80092fc:	3001      	adds	r0, #1
 80092fe:	d1c5      	bne.n	800928c <_printf_float+0x31c>
 8009300:	e692      	b.n	8009028 <_printf_float+0xb8>
 8009302:	002a      	movs	r2, r5
 8009304:	2301      	movs	r3, #1
 8009306:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009308:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800930a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800930c:	321a      	adds	r2, #26
 800930e:	47b0      	blx	r6
 8009310:	3001      	adds	r0, #1
 8009312:	d100      	bne.n	8009316 <_printf_float+0x3a6>
 8009314:	e688      	b.n	8009028 <_printf_float+0xb8>
 8009316:	3401      	adds	r4, #1
 8009318:	e7bd      	b.n	8009296 <_printf_float+0x326>
 800931a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800931c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800931e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009320:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009322:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009324:	47a0      	blx	r4
 8009326:	3001      	adds	r0, #1
 8009328:	d1c1      	bne.n	80092ae <_printf_float+0x33e>
 800932a:	e67d      	b.n	8009028 <_printf_float+0xb8>
 800932c:	19ba      	adds	r2, r7, r6
 800932e:	0023      	movs	r3, r4
 8009330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009334:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009336:	47b0      	blx	r6
 8009338:	3001      	adds	r0, #1
 800933a:	d1c2      	bne.n	80092c2 <_printf_float+0x352>
 800933c:	e674      	b.n	8009028 <_printf_float+0xb8>
 800933e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009340:	930c      	str	r3, [sp, #48]	@ 0x30
 8009342:	2b01      	cmp	r3, #1
 8009344:	dc02      	bgt.n	800934c <_printf_float+0x3dc>
 8009346:	2301      	movs	r3, #1
 8009348:	421a      	tst	r2, r3
 800934a:	d039      	beq.n	80093c0 <_printf_float+0x450>
 800934c:	2301      	movs	r3, #1
 800934e:	003a      	movs	r2, r7
 8009350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009354:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009356:	47b0      	blx	r6
 8009358:	3001      	adds	r0, #1
 800935a:	d100      	bne.n	800935e <_printf_float+0x3ee>
 800935c:	e664      	b.n	8009028 <_printf_float+0xb8>
 800935e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009364:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009366:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009368:	47b0      	blx	r6
 800936a:	3001      	adds	r0, #1
 800936c:	d100      	bne.n	8009370 <_printf_float+0x400>
 800936e:	e65b      	b.n	8009028 <_printf_float+0xb8>
 8009370:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009372:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	3b01      	subs	r3, #1
 800937a:	930c      	str	r3, [sp, #48]	@ 0x30
 800937c:	2300      	movs	r3, #0
 800937e:	f7f7 f865 	bl	800044c <__aeabi_dcmpeq>
 8009382:	2800      	cmp	r0, #0
 8009384:	d11a      	bne.n	80093bc <_printf_float+0x44c>
 8009386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009388:	1c7a      	adds	r2, r7, #1
 800938a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800938c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800938e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009390:	47b0      	blx	r6
 8009392:	3001      	adds	r0, #1
 8009394:	d10e      	bne.n	80093b4 <_printf_float+0x444>
 8009396:	e647      	b.n	8009028 <_printf_float+0xb8>
 8009398:	002a      	movs	r2, r5
 800939a:	2301      	movs	r3, #1
 800939c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800939e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80093a2:	321a      	adds	r2, #26
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	d100      	bne.n	80093ac <_printf_float+0x43c>
 80093aa:	e63d      	b.n	8009028 <_printf_float+0xb8>
 80093ac:	3601      	adds	r6, #1
 80093ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093b0:	429e      	cmp	r6, r3
 80093b2:	dbf1      	blt.n	8009398 <_printf_float+0x428>
 80093b4:	002a      	movs	r2, r5
 80093b6:	0023      	movs	r3, r4
 80093b8:	3250      	adds	r2, #80	@ 0x50
 80093ba:	e6d9      	b.n	8009170 <_printf_float+0x200>
 80093bc:	2600      	movs	r6, #0
 80093be:	e7f6      	b.n	80093ae <_printf_float+0x43e>
 80093c0:	003a      	movs	r2, r7
 80093c2:	e7e2      	b.n	800938a <_printf_float+0x41a>
 80093c4:	002a      	movs	r2, r5
 80093c6:	2301      	movs	r3, #1
 80093c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093ce:	3219      	adds	r2, #25
 80093d0:	47b0      	blx	r6
 80093d2:	3001      	adds	r0, #1
 80093d4:	d100      	bne.n	80093d8 <_printf_float+0x468>
 80093d6:	e627      	b.n	8009028 <_printf_float+0xb8>
 80093d8:	3401      	adds	r4, #1
 80093da:	68eb      	ldr	r3, [r5, #12]
 80093dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	dcef      	bgt.n	80093c4 <_printf_float+0x454>
 80093e4:	e6f8      	b.n	80091d8 <_printf_float+0x268>
 80093e6:	2400      	movs	r4, #0
 80093e8:	e7f7      	b.n	80093da <_printf_float+0x46a>
 80093ea:	46c0      	nop			@ (mov r8, r8)

080093ec <_printf_common>:
 80093ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ee:	0016      	movs	r6, r2
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	688a      	ldr	r2, [r1, #8]
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	000c      	movs	r4, r1
 80093f8:	9000      	str	r0, [sp, #0]
 80093fa:	4293      	cmp	r3, r2
 80093fc:	da00      	bge.n	8009400 <_printf_common+0x14>
 80093fe:	0013      	movs	r3, r2
 8009400:	0022      	movs	r2, r4
 8009402:	6033      	str	r3, [r6, #0]
 8009404:	3243      	adds	r2, #67	@ 0x43
 8009406:	7812      	ldrb	r2, [r2, #0]
 8009408:	2a00      	cmp	r2, #0
 800940a:	d001      	beq.n	8009410 <_printf_common+0x24>
 800940c:	3301      	adds	r3, #1
 800940e:	6033      	str	r3, [r6, #0]
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	069b      	lsls	r3, r3, #26
 8009414:	d502      	bpl.n	800941c <_printf_common+0x30>
 8009416:	6833      	ldr	r3, [r6, #0]
 8009418:	3302      	adds	r3, #2
 800941a:	6033      	str	r3, [r6, #0]
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	2306      	movs	r3, #6
 8009420:	0015      	movs	r5, r2
 8009422:	401d      	ands	r5, r3
 8009424:	421a      	tst	r2, r3
 8009426:	d027      	beq.n	8009478 <_printf_common+0x8c>
 8009428:	0023      	movs	r3, r4
 800942a:	3343      	adds	r3, #67	@ 0x43
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	1e5a      	subs	r2, r3, #1
 8009430:	4193      	sbcs	r3, r2
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	0692      	lsls	r2, r2, #26
 8009436:	d430      	bmi.n	800949a <_printf_common+0xae>
 8009438:	0022      	movs	r2, r4
 800943a:	9901      	ldr	r1, [sp, #4]
 800943c:	9800      	ldr	r0, [sp, #0]
 800943e:	9d08      	ldr	r5, [sp, #32]
 8009440:	3243      	adds	r2, #67	@ 0x43
 8009442:	47a8      	blx	r5
 8009444:	3001      	adds	r0, #1
 8009446:	d025      	beq.n	8009494 <_printf_common+0xa8>
 8009448:	2206      	movs	r2, #6
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	2500      	movs	r5, #0
 800944e:	4013      	ands	r3, r2
 8009450:	2b04      	cmp	r3, #4
 8009452:	d105      	bne.n	8009460 <_printf_common+0x74>
 8009454:	6833      	ldr	r3, [r6, #0]
 8009456:	68e5      	ldr	r5, [r4, #12]
 8009458:	1aed      	subs	r5, r5, r3
 800945a:	43eb      	mvns	r3, r5
 800945c:	17db      	asrs	r3, r3, #31
 800945e:	401d      	ands	r5, r3
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	4293      	cmp	r3, r2
 8009466:	dd01      	ble.n	800946c <_printf_common+0x80>
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	18ed      	adds	r5, r5, r3
 800946c:	2600      	movs	r6, #0
 800946e:	42b5      	cmp	r5, r6
 8009470:	d120      	bne.n	80094b4 <_printf_common+0xc8>
 8009472:	2000      	movs	r0, #0
 8009474:	e010      	b.n	8009498 <_printf_common+0xac>
 8009476:	3501      	adds	r5, #1
 8009478:	68e3      	ldr	r3, [r4, #12]
 800947a:	6832      	ldr	r2, [r6, #0]
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	42ab      	cmp	r3, r5
 8009480:	ddd2      	ble.n	8009428 <_printf_common+0x3c>
 8009482:	0022      	movs	r2, r4
 8009484:	2301      	movs	r3, #1
 8009486:	9901      	ldr	r1, [sp, #4]
 8009488:	9800      	ldr	r0, [sp, #0]
 800948a:	9f08      	ldr	r7, [sp, #32]
 800948c:	3219      	adds	r2, #25
 800948e:	47b8      	blx	r7
 8009490:	3001      	adds	r0, #1
 8009492:	d1f0      	bne.n	8009476 <_printf_common+0x8a>
 8009494:	2001      	movs	r0, #1
 8009496:	4240      	negs	r0, r0
 8009498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800949a:	2030      	movs	r0, #48	@ 0x30
 800949c:	18e1      	adds	r1, r4, r3
 800949e:	3143      	adds	r1, #67	@ 0x43
 80094a0:	7008      	strb	r0, [r1, #0]
 80094a2:	0021      	movs	r1, r4
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	3145      	adds	r1, #69	@ 0x45
 80094a8:	7809      	ldrb	r1, [r1, #0]
 80094aa:	18a2      	adds	r2, r4, r2
 80094ac:	3243      	adds	r2, #67	@ 0x43
 80094ae:	3302      	adds	r3, #2
 80094b0:	7011      	strb	r1, [r2, #0]
 80094b2:	e7c1      	b.n	8009438 <_printf_common+0x4c>
 80094b4:	0022      	movs	r2, r4
 80094b6:	2301      	movs	r3, #1
 80094b8:	9901      	ldr	r1, [sp, #4]
 80094ba:	9800      	ldr	r0, [sp, #0]
 80094bc:	9f08      	ldr	r7, [sp, #32]
 80094be:	321a      	adds	r2, #26
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	d0e6      	beq.n	8009494 <_printf_common+0xa8>
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7d1      	b.n	800946e <_printf_common+0x82>
	...

080094cc <_printf_i>:
 80094cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ce:	b08b      	sub	sp, #44	@ 0x2c
 80094d0:	9206      	str	r2, [sp, #24]
 80094d2:	000a      	movs	r2, r1
 80094d4:	3243      	adds	r2, #67	@ 0x43
 80094d6:	9307      	str	r3, [sp, #28]
 80094d8:	9005      	str	r0, [sp, #20]
 80094da:	9203      	str	r2, [sp, #12]
 80094dc:	7e0a      	ldrb	r2, [r1, #24]
 80094de:	000c      	movs	r4, r1
 80094e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094e2:	2a78      	cmp	r2, #120	@ 0x78
 80094e4:	d809      	bhi.n	80094fa <_printf_i+0x2e>
 80094e6:	2a62      	cmp	r2, #98	@ 0x62
 80094e8:	d80b      	bhi.n	8009502 <_printf_i+0x36>
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	d100      	bne.n	80094f0 <_printf_i+0x24>
 80094ee:	e0ba      	b.n	8009666 <_printf_i+0x19a>
 80094f0:	497a      	ldr	r1, [pc, #488]	@ (80096dc <_printf_i+0x210>)
 80094f2:	9104      	str	r1, [sp, #16]
 80094f4:	2a58      	cmp	r2, #88	@ 0x58
 80094f6:	d100      	bne.n	80094fa <_printf_i+0x2e>
 80094f8:	e08e      	b.n	8009618 <_printf_i+0x14c>
 80094fa:	0025      	movs	r5, r4
 80094fc:	3542      	adds	r5, #66	@ 0x42
 80094fe:	702a      	strb	r2, [r5, #0]
 8009500:	e022      	b.n	8009548 <_printf_i+0x7c>
 8009502:	0010      	movs	r0, r2
 8009504:	3863      	subs	r0, #99	@ 0x63
 8009506:	2815      	cmp	r0, #21
 8009508:	d8f7      	bhi.n	80094fa <_printf_i+0x2e>
 800950a:	f7f6 fe0f 	bl	800012c <__gnu_thumb1_case_shi>
 800950e:	0016      	.short	0x0016
 8009510:	fff6001f 	.word	0xfff6001f
 8009514:	fff6fff6 	.word	0xfff6fff6
 8009518:	001ffff6 	.word	0x001ffff6
 800951c:	fff6fff6 	.word	0xfff6fff6
 8009520:	fff6fff6 	.word	0xfff6fff6
 8009524:	0036009f 	.word	0x0036009f
 8009528:	fff6007e 	.word	0xfff6007e
 800952c:	00b0fff6 	.word	0x00b0fff6
 8009530:	0036fff6 	.word	0x0036fff6
 8009534:	fff6fff6 	.word	0xfff6fff6
 8009538:	0082      	.short	0x0082
 800953a:	0025      	movs	r5, r4
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	3542      	adds	r5, #66	@ 0x42
 8009540:	1d11      	adds	r1, r2, #4
 8009542:	6019      	str	r1, [r3, #0]
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	702b      	strb	r3, [r5, #0]
 8009548:	2301      	movs	r3, #1
 800954a:	e09e      	b.n	800968a <_printf_i+0x1be>
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	6809      	ldr	r1, [r1, #0]
 8009550:	1d02      	adds	r2, r0, #4
 8009552:	060d      	lsls	r5, r1, #24
 8009554:	d50b      	bpl.n	800956e <_printf_i+0xa2>
 8009556:	6806      	ldr	r6, [r0, #0]
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	2e00      	cmp	r6, #0
 800955c:	da03      	bge.n	8009566 <_printf_i+0x9a>
 800955e:	232d      	movs	r3, #45	@ 0x2d
 8009560:	9a03      	ldr	r2, [sp, #12]
 8009562:	4276      	negs	r6, r6
 8009564:	7013      	strb	r3, [r2, #0]
 8009566:	4b5d      	ldr	r3, [pc, #372]	@ (80096dc <_printf_i+0x210>)
 8009568:	270a      	movs	r7, #10
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	e018      	b.n	80095a0 <_printf_i+0xd4>
 800956e:	6806      	ldr	r6, [r0, #0]
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	0649      	lsls	r1, r1, #25
 8009574:	d5f1      	bpl.n	800955a <_printf_i+0x8e>
 8009576:	b236      	sxth	r6, r6
 8009578:	e7ef      	b.n	800955a <_printf_i+0x8e>
 800957a:	6808      	ldr	r0, [r1, #0]
 800957c:	6819      	ldr	r1, [r3, #0]
 800957e:	c940      	ldmia	r1!, {r6}
 8009580:	0605      	lsls	r5, r0, #24
 8009582:	d402      	bmi.n	800958a <_printf_i+0xbe>
 8009584:	0640      	lsls	r0, r0, #25
 8009586:	d500      	bpl.n	800958a <_printf_i+0xbe>
 8009588:	b2b6      	uxth	r6, r6
 800958a:	6019      	str	r1, [r3, #0]
 800958c:	4b53      	ldr	r3, [pc, #332]	@ (80096dc <_printf_i+0x210>)
 800958e:	270a      	movs	r7, #10
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	2a6f      	cmp	r2, #111	@ 0x6f
 8009594:	d100      	bne.n	8009598 <_printf_i+0xcc>
 8009596:	3f02      	subs	r7, #2
 8009598:	0023      	movs	r3, r4
 800959a:	2200      	movs	r2, #0
 800959c:	3343      	adds	r3, #67	@ 0x43
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	db06      	blt.n	80095b6 <_printf_i+0xea>
 80095a8:	2104      	movs	r1, #4
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	9d03      	ldr	r5, [sp, #12]
 80095ae:	438a      	bics	r2, r1
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	4333      	orrs	r3, r6
 80095b4:	d00c      	beq.n	80095d0 <_printf_i+0x104>
 80095b6:	9d03      	ldr	r5, [sp, #12]
 80095b8:	0030      	movs	r0, r6
 80095ba:	0039      	movs	r1, r7
 80095bc:	f7f6 fe46 	bl	800024c <__aeabi_uidivmod>
 80095c0:	9b04      	ldr	r3, [sp, #16]
 80095c2:	3d01      	subs	r5, #1
 80095c4:	5c5b      	ldrb	r3, [r3, r1]
 80095c6:	702b      	strb	r3, [r5, #0]
 80095c8:	0033      	movs	r3, r6
 80095ca:	0006      	movs	r6, r0
 80095cc:	429f      	cmp	r7, r3
 80095ce:	d9f3      	bls.n	80095b8 <_printf_i+0xec>
 80095d0:	2f08      	cmp	r7, #8
 80095d2:	d109      	bne.n	80095e8 <_printf_i+0x11c>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	07db      	lsls	r3, r3, #31
 80095d8:	d506      	bpl.n	80095e8 <_printf_i+0x11c>
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	dc02      	bgt.n	80095e8 <_printf_i+0x11c>
 80095e2:	2330      	movs	r3, #48	@ 0x30
 80095e4:	3d01      	subs	r5, #1
 80095e6:	702b      	strb	r3, [r5, #0]
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	1b5b      	subs	r3, r3, r5
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	0021      	movs	r1, r4
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	9805      	ldr	r0, [sp, #20]
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	aa09      	add	r2, sp, #36	@ 0x24
 80095fa:	f7ff fef7 	bl	80093ec <_printf_common>
 80095fe:	3001      	adds	r0, #1
 8009600:	d148      	bne.n	8009694 <_printf_i+0x1c8>
 8009602:	2001      	movs	r0, #1
 8009604:	4240      	negs	r0, r0
 8009606:	b00b      	add	sp, #44	@ 0x2c
 8009608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800960a:	2220      	movs	r2, #32
 800960c:	6809      	ldr	r1, [r1, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	2278      	movs	r2, #120	@ 0x78
 8009614:	4932      	ldr	r1, [pc, #200]	@ (80096e0 <_printf_i+0x214>)
 8009616:	9104      	str	r1, [sp, #16]
 8009618:	0021      	movs	r1, r4
 800961a:	3145      	adds	r1, #69	@ 0x45
 800961c:	700a      	strb	r2, [r1, #0]
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6822      	ldr	r2, [r4, #0]
 8009622:	c940      	ldmia	r1!, {r6}
 8009624:	0610      	lsls	r0, r2, #24
 8009626:	d402      	bmi.n	800962e <_printf_i+0x162>
 8009628:	0650      	lsls	r0, r2, #25
 800962a:	d500      	bpl.n	800962e <_printf_i+0x162>
 800962c:	b2b6      	uxth	r6, r6
 800962e:	6019      	str	r1, [r3, #0]
 8009630:	07d3      	lsls	r3, r2, #31
 8009632:	d502      	bpl.n	800963a <_printf_i+0x16e>
 8009634:	2320      	movs	r3, #32
 8009636:	4313      	orrs	r3, r2
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2e00      	cmp	r6, #0
 800963c:	d001      	beq.n	8009642 <_printf_i+0x176>
 800963e:	2710      	movs	r7, #16
 8009640:	e7aa      	b.n	8009598 <_printf_i+0xcc>
 8009642:	2220      	movs	r2, #32
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	4393      	bics	r3, r2
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	e7f8      	b.n	800963e <_printf_i+0x172>
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	680d      	ldr	r5, [r1, #0]
 8009650:	1d10      	adds	r0, r2, #4
 8009652:	6949      	ldr	r1, [r1, #20]
 8009654:	6018      	str	r0, [r3, #0]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	062e      	lsls	r6, r5, #24
 800965a:	d501      	bpl.n	8009660 <_printf_i+0x194>
 800965c:	6019      	str	r1, [r3, #0]
 800965e:	e002      	b.n	8009666 <_printf_i+0x19a>
 8009660:	066d      	lsls	r5, r5, #25
 8009662:	d5fb      	bpl.n	800965c <_printf_i+0x190>
 8009664:	8019      	strh	r1, [r3, #0]
 8009666:	2300      	movs	r3, #0
 8009668:	9d03      	ldr	r5, [sp, #12]
 800966a:	6123      	str	r3, [r4, #16]
 800966c:	e7bf      	b.n	80095ee <_printf_i+0x122>
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	1d11      	adds	r1, r2, #4
 8009672:	6019      	str	r1, [r3, #0]
 8009674:	6815      	ldr	r5, [r2, #0]
 8009676:	2100      	movs	r1, #0
 8009678:	0028      	movs	r0, r5
 800967a:	6862      	ldr	r2, [r4, #4]
 800967c:	f000 f9eb 	bl	8009a56 <memchr>
 8009680:	2800      	cmp	r0, #0
 8009682:	d001      	beq.n	8009688 <_printf_i+0x1bc>
 8009684:	1b40      	subs	r0, r0, r5
 8009686:	6060      	str	r0, [r4, #4]
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	2300      	movs	r3, #0
 800968e:	9a03      	ldr	r2, [sp, #12]
 8009690:	7013      	strb	r3, [r2, #0]
 8009692:	e7ac      	b.n	80095ee <_printf_i+0x122>
 8009694:	002a      	movs	r2, r5
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	9906      	ldr	r1, [sp, #24]
 800969a:	9805      	ldr	r0, [sp, #20]
 800969c:	9d07      	ldr	r5, [sp, #28]
 800969e:	47a8      	blx	r5
 80096a0:	3001      	adds	r0, #1
 80096a2:	d0ae      	beq.n	8009602 <_printf_i+0x136>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	079b      	lsls	r3, r3, #30
 80096a8:	d415      	bmi.n	80096d6 <_printf_i+0x20a>
 80096aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ac:	68e0      	ldr	r0, [r4, #12]
 80096ae:	4298      	cmp	r0, r3
 80096b0:	daa9      	bge.n	8009606 <_printf_i+0x13a>
 80096b2:	0018      	movs	r0, r3
 80096b4:	e7a7      	b.n	8009606 <_printf_i+0x13a>
 80096b6:	0022      	movs	r2, r4
 80096b8:	2301      	movs	r3, #1
 80096ba:	9906      	ldr	r1, [sp, #24]
 80096bc:	9805      	ldr	r0, [sp, #20]
 80096be:	9e07      	ldr	r6, [sp, #28]
 80096c0:	3219      	adds	r2, #25
 80096c2:	47b0      	blx	r6
 80096c4:	3001      	adds	r0, #1
 80096c6:	d09c      	beq.n	8009602 <_printf_i+0x136>
 80096c8:	3501      	adds	r5, #1
 80096ca:	68e3      	ldr	r3, [r4, #12]
 80096cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dcf0      	bgt.n	80096b6 <_printf_i+0x1ea>
 80096d4:	e7e9      	b.n	80096aa <_printf_i+0x1de>
 80096d6:	2500      	movs	r5, #0
 80096d8:	e7f7      	b.n	80096ca <_printf_i+0x1fe>
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	0800bdc2 	.word	0x0800bdc2
 80096e0:	0800bdd3 	.word	0x0800bdd3

080096e4 <std>:
 80096e4:	2300      	movs	r3, #0
 80096e6:	b510      	push	{r4, lr}
 80096e8:	0004      	movs	r4, r0
 80096ea:	6003      	str	r3, [r0, #0]
 80096ec:	6043      	str	r3, [r0, #4]
 80096ee:	6083      	str	r3, [r0, #8]
 80096f0:	8181      	strh	r1, [r0, #12]
 80096f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80096f4:	81c2      	strh	r2, [r0, #14]
 80096f6:	6103      	str	r3, [r0, #16]
 80096f8:	6143      	str	r3, [r0, #20]
 80096fa:	6183      	str	r3, [r0, #24]
 80096fc:	0019      	movs	r1, r3
 80096fe:	2208      	movs	r2, #8
 8009700:	305c      	adds	r0, #92	@ 0x5c
 8009702:	f000 f921 	bl	8009948 <memset>
 8009706:	4b0b      	ldr	r3, [pc, #44]	@ (8009734 <std+0x50>)
 8009708:	6224      	str	r4, [r4, #32]
 800970a:	6263      	str	r3, [r4, #36]	@ 0x24
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <std+0x54>)
 800970e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <std+0x58>)
 8009712:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009714:	4b0a      	ldr	r3, [pc, #40]	@ (8009740 <std+0x5c>)
 8009716:	6323      	str	r3, [r4, #48]	@ 0x30
 8009718:	4b0a      	ldr	r3, [pc, #40]	@ (8009744 <std+0x60>)
 800971a:	429c      	cmp	r4, r3
 800971c:	d005      	beq.n	800972a <std+0x46>
 800971e:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <std+0x64>)
 8009720:	429c      	cmp	r4, r3
 8009722:	d002      	beq.n	800972a <std+0x46>
 8009724:	4b09      	ldr	r3, [pc, #36]	@ (800974c <std+0x68>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d103      	bne.n	8009732 <std+0x4e>
 800972a:	0020      	movs	r0, r4
 800972c:	3058      	adds	r0, #88	@ 0x58
 800972e:	f000 f98f 	bl	8009a50 <__retarget_lock_init_recursive>
 8009732:	bd10      	pop	{r4, pc}
 8009734:	080098b1 	.word	0x080098b1
 8009738:	080098d9 	.word	0x080098d9
 800973c:	08009911 	.word	0x08009911
 8009740:	0800993d 	.word	0x0800993d
 8009744:	20000504 	.word	0x20000504
 8009748:	2000056c 	.word	0x2000056c
 800974c:	200005d4 	.word	0x200005d4

08009750 <stdio_exit_handler>:
 8009750:	b510      	push	{r4, lr}
 8009752:	4a03      	ldr	r2, [pc, #12]	@ (8009760 <stdio_exit_handler+0x10>)
 8009754:	4903      	ldr	r1, [pc, #12]	@ (8009764 <stdio_exit_handler+0x14>)
 8009756:	4804      	ldr	r0, [pc, #16]	@ (8009768 <stdio_exit_handler+0x18>)
 8009758:	f000 f86c 	bl	8009834 <_fwalk_sglue>
 800975c:	bd10      	pop	{r4, pc}
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	2000000c 	.word	0x2000000c
 8009764:	0800b465 	.word	0x0800b465
 8009768:	2000001c 	.word	0x2000001c

0800976c <cleanup_stdio>:
 800976c:	6841      	ldr	r1, [r0, #4]
 800976e:	4b0b      	ldr	r3, [pc, #44]	@ (800979c <cleanup_stdio+0x30>)
 8009770:	b510      	push	{r4, lr}
 8009772:	0004      	movs	r4, r0
 8009774:	4299      	cmp	r1, r3
 8009776:	d001      	beq.n	800977c <cleanup_stdio+0x10>
 8009778:	f001 fe74 	bl	800b464 <_fflush_r>
 800977c:	68a1      	ldr	r1, [r4, #8]
 800977e:	4b08      	ldr	r3, [pc, #32]	@ (80097a0 <cleanup_stdio+0x34>)
 8009780:	4299      	cmp	r1, r3
 8009782:	d002      	beq.n	800978a <cleanup_stdio+0x1e>
 8009784:	0020      	movs	r0, r4
 8009786:	f001 fe6d 	bl	800b464 <_fflush_r>
 800978a:	68e1      	ldr	r1, [r4, #12]
 800978c:	4b05      	ldr	r3, [pc, #20]	@ (80097a4 <cleanup_stdio+0x38>)
 800978e:	4299      	cmp	r1, r3
 8009790:	d002      	beq.n	8009798 <cleanup_stdio+0x2c>
 8009792:	0020      	movs	r0, r4
 8009794:	f001 fe66 	bl	800b464 <_fflush_r>
 8009798:	bd10      	pop	{r4, pc}
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	20000504 	.word	0x20000504
 80097a0:	2000056c 	.word	0x2000056c
 80097a4:	200005d4 	.word	0x200005d4

080097a8 <global_stdio_init.part.0>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	4b09      	ldr	r3, [pc, #36]	@ (80097d0 <global_stdio_init.part.0+0x28>)
 80097ac:	4a09      	ldr	r2, [pc, #36]	@ (80097d4 <global_stdio_init.part.0+0x2c>)
 80097ae:	2104      	movs	r1, #4
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	4809      	ldr	r0, [pc, #36]	@ (80097d8 <global_stdio_init.part.0+0x30>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	f7ff ff95 	bl	80096e4 <std>
 80097ba:	2201      	movs	r2, #1
 80097bc:	2109      	movs	r1, #9
 80097be:	4807      	ldr	r0, [pc, #28]	@ (80097dc <global_stdio_init.part.0+0x34>)
 80097c0:	f7ff ff90 	bl	80096e4 <std>
 80097c4:	2202      	movs	r2, #2
 80097c6:	2112      	movs	r1, #18
 80097c8:	4805      	ldr	r0, [pc, #20]	@ (80097e0 <global_stdio_init.part.0+0x38>)
 80097ca:	f7ff ff8b 	bl	80096e4 <std>
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	2000063c 	.word	0x2000063c
 80097d4:	08009751 	.word	0x08009751
 80097d8:	20000504 	.word	0x20000504
 80097dc:	2000056c 	.word	0x2000056c
 80097e0:	200005d4 	.word	0x200005d4

080097e4 <__sfp_lock_acquire>:
 80097e4:	b510      	push	{r4, lr}
 80097e6:	4802      	ldr	r0, [pc, #8]	@ (80097f0 <__sfp_lock_acquire+0xc>)
 80097e8:	f000 f933 	bl	8009a52 <__retarget_lock_acquire_recursive>
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	46c0      	nop			@ (mov r8, r8)
 80097f0:	20000645 	.word	0x20000645

080097f4 <__sfp_lock_release>:
 80097f4:	b510      	push	{r4, lr}
 80097f6:	4802      	ldr	r0, [pc, #8]	@ (8009800 <__sfp_lock_release+0xc>)
 80097f8:	f000 f92c 	bl	8009a54 <__retarget_lock_release_recursive>
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	46c0      	nop			@ (mov r8, r8)
 8009800:	20000645 	.word	0x20000645

08009804 <__sinit>:
 8009804:	b510      	push	{r4, lr}
 8009806:	0004      	movs	r4, r0
 8009808:	f7ff ffec 	bl	80097e4 <__sfp_lock_acquire>
 800980c:	6a23      	ldr	r3, [r4, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <__sinit+0x14>
 8009812:	f7ff ffef 	bl	80097f4 <__sfp_lock_release>
 8009816:	bd10      	pop	{r4, pc}
 8009818:	4b04      	ldr	r3, [pc, #16]	@ (800982c <__sinit+0x28>)
 800981a:	6223      	str	r3, [r4, #32]
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <__sinit+0x2c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f6      	bne.n	8009812 <__sinit+0xe>
 8009824:	f7ff ffc0 	bl	80097a8 <global_stdio_init.part.0>
 8009828:	e7f3      	b.n	8009812 <__sinit+0xe>
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	0800976d 	.word	0x0800976d
 8009830:	2000063c 	.word	0x2000063c

08009834 <_fwalk_sglue>:
 8009834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009836:	0014      	movs	r4, r2
 8009838:	2600      	movs	r6, #0
 800983a:	9000      	str	r0, [sp, #0]
 800983c:	9101      	str	r1, [sp, #4]
 800983e:	68a5      	ldr	r5, [r4, #8]
 8009840:	6867      	ldr	r7, [r4, #4]
 8009842:	3f01      	subs	r7, #1
 8009844:	d504      	bpl.n	8009850 <_fwalk_sglue+0x1c>
 8009846:	6824      	ldr	r4, [r4, #0]
 8009848:	2c00      	cmp	r4, #0
 800984a:	d1f8      	bne.n	800983e <_fwalk_sglue+0xa>
 800984c:	0030      	movs	r0, r6
 800984e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009850:	89ab      	ldrh	r3, [r5, #12]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d908      	bls.n	8009868 <_fwalk_sglue+0x34>
 8009856:	220e      	movs	r2, #14
 8009858:	5eab      	ldrsh	r3, [r5, r2]
 800985a:	3301      	adds	r3, #1
 800985c:	d004      	beq.n	8009868 <_fwalk_sglue+0x34>
 800985e:	0029      	movs	r1, r5
 8009860:	9800      	ldr	r0, [sp, #0]
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	4798      	blx	r3
 8009866:	4306      	orrs	r6, r0
 8009868:	3568      	adds	r5, #104	@ 0x68
 800986a:	e7ea      	b.n	8009842 <_fwalk_sglue+0xe>

0800986c <siprintf>:
 800986c:	b40e      	push	{r1, r2, r3}
 800986e:	b510      	push	{r4, lr}
 8009870:	2400      	movs	r4, #0
 8009872:	490c      	ldr	r1, [pc, #48]	@ (80098a4 <siprintf+0x38>)
 8009874:	b09d      	sub	sp, #116	@ 0x74
 8009876:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009878:	9002      	str	r0, [sp, #8]
 800987a:	9006      	str	r0, [sp, #24]
 800987c:	9107      	str	r1, [sp, #28]
 800987e:	9104      	str	r1, [sp, #16]
 8009880:	4809      	ldr	r0, [pc, #36]	@ (80098a8 <siprintf+0x3c>)
 8009882:	490a      	ldr	r1, [pc, #40]	@ (80098ac <siprintf+0x40>)
 8009884:	cb04      	ldmia	r3!, {r2}
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	6800      	ldr	r0, [r0, #0]
 800988a:	a902      	add	r1, sp, #8
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009890:	f001 fc64 	bl	800b15c <_svfiprintf_r>
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	701c      	strb	r4, [r3, #0]
 8009898:	b01d      	add	sp, #116	@ 0x74
 800989a:	bc10      	pop	{r4}
 800989c:	bc08      	pop	{r3}
 800989e:	b003      	add	sp, #12
 80098a0:	4718      	bx	r3
 80098a2:	46c0      	nop			@ (mov r8, r8)
 80098a4:	7fffffff 	.word	0x7fffffff
 80098a8:	20000018 	.word	0x20000018
 80098ac:	ffff0208 	.word	0xffff0208

080098b0 <__sread>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	000c      	movs	r4, r1
 80098b4:	250e      	movs	r5, #14
 80098b6:	5f49      	ldrsh	r1, [r1, r5]
 80098b8:	f000 f878 	bl	80099ac <_read_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	db03      	blt.n	80098c8 <__sread+0x18>
 80098c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80098c2:	181b      	adds	r3, r3, r0
 80098c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	4a02      	ldr	r2, [pc, #8]	@ (80098d4 <__sread+0x24>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	e7f9      	b.n	80098c6 <__sread+0x16>
 80098d2:	46c0      	nop			@ (mov r8, r8)
 80098d4:	ffffefff 	.word	0xffffefff

080098d8 <__swrite>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	001f      	movs	r7, r3
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	0005      	movs	r5, r0
 80098e0:	000c      	movs	r4, r1
 80098e2:	0016      	movs	r6, r2
 80098e4:	05db      	lsls	r3, r3, #23
 80098e6:	d505      	bpl.n	80098f4 <__swrite+0x1c>
 80098e8:	230e      	movs	r3, #14
 80098ea:	5ec9      	ldrsh	r1, [r1, r3]
 80098ec:	2200      	movs	r2, #0
 80098ee:	2302      	movs	r3, #2
 80098f0:	f000 f848 	bl	8009984 <_lseek_r>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	4a05      	ldr	r2, [pc, #20]	@ (800990c <__swrite+0x34>)
 80098f8:	0028      	movs	r0, r5
 80098fa:	4013      	ands	r3, r2
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	0032      	movs	r2, r6
 8009900:	230e      	movs	r3, #14
 8009902:	5ee1      	ldrsh	r1, [r4, r3]
 8009904:	003b      	movs	r3, r7
 8009906:	f000 f865 	bl	80099d4 <_write_r>
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	ffffefff 	.word	0xffffefff

08009910 <__sseek>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	000c      	movs	r4, r1
 8009914:	250e      	movs	r5, #14
 8009916:	5f49      	ldrsh	r1, [r1, r5]
 8009918:	f000 f834 	bl	8009984 <_lseek_r>
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	1c42      	adds	r2, r0, #1
 8009920:	d103      	bne.n	800992a <__sseek+0x1a>
 8009922:	4a05      	ldr	r2, [pc, #20]	@ (8009938 <__sseek+0x28>)
 8009924:	4013      	ands	r3, r2
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	2280      	movs	r2, #128	@ 0x80
 800992c:	0152      	lsls	r2, r2, #5
 800992e:	4313      	orrs	r3, r2
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	6560      	str	r0, [r4, #84]	@ 0x54
 8009934:	e7f8      	b.n	8009928 <__sseek+0x18>
 8009936:	46c0      	nop			@ (mov r8, r8)
 8009938:	ffffefff 	.word	0xffffefff

0800993c <__sclose>:
 800993c:	b510      	push	{r4, lr}
 800993e:	230e      	movs	r3, #14
 8009940:	5ec9      	ldrsh	r1, [r1, r3]
 8009942:	f000 f80d 	bl	8009960 <_close_r>
 8009946:	bd10      	pop	{r4, pc}

08009948 <memset>:
 8009948:	0003      	movs	r3, r0
 800994a:	1882      	adds	r2, r0, r2
 800994c:	4293      	cmp	r3, r2
 800994e:	d100      	bne.n	8009952 <memset+0xa>
 8009950:	4770      	bx	lr
 8009952:	7019      	strb	r1, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	e7f9      	b.n	800994c <memset+0x4>

08009958 <_localeconv_r>:
 8009958:	4800      	ldr	r0, [pc, #0]	@ (800995c <_localeconv_r+0x4>)
 800995a:	4770      	bx	lr
 800995c:	20000158 	.word	0x20000158

08009960 <_close_r>:
 8009960:	2300      	movs	r3, #0
 8009962:	b570      	push	{r4, r5, r6, lr}
 8009964:	4d06      	ldr	r5, [pc, #24]	@ (8009980 <_close_r+0x20>)
 8009966:	0004      	movs	r4, r0
 8009968:	0008      	movs	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7fa f920 	bl	8003bb0 <_close>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d103      	bne.n	800997c <_close_r+0x1c>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d000      	beq.n	800997c <_close_r+0x1c>
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	46c0      	nop			@ (mov r8, r8)
 8009980:	20000640 	.word	0x20000640

08009984 <_lseek_r>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	0004      	movs	r4, r0
 8009988:	0008      	movs	r0, r1
 800998a:	0011      	movs	r1, r2
 800998c:	001a      	movs	r2, r3
 800998e:	2300      	movs	r3, #0
 8009990:	4d05      	ldr	r5, [pc, #20]	@ (80099a8 <_lseek_r+0x24>)
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7fa f92d 	bl	8003bf2 <_lseek>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d103      	bne.n	80099a4 <_lseek_r+0x20>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d000      	beq.n	80099a4 <_lseek_r+0x20>
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
 80099a6:	46c0      	nop			@ (mov r8, r8)
 80099a8:	20000640 	.word	0x20000640

080099ac <_read_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	0004      	movs	r4, r0
 80099b0:	0008      	movs	r0, r1
 80099b2:	0011      	movs	r1, r2
 80099b4:	001a      	movs	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	4d05      	ldr	r5, [pc, #20]	@ (80099d0 <_read_r+0x24>)
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7fa f8bf 	bl	8003b3e <_read>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d103      	bne.n	80099cc <_read_r+0x20>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d000      	beq.n	80099cc <_read_r+0x20>
 80099ca:	6023      	str	r3, [r4, #0]
 80099cc:	bd70      	pop	{r4, r5, r6, pc}
 80099ce:	46c0      	nop			@ (mov r8, r8)
 80099d0:	20000640 	.word	0x20000640

080099d4 <_write_r>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	0004      	movs	r4, r0
 80099d8:	0008      	movs	r0, r1
 80099da:	0011      	movs	r1, r2
 80099dc:	001a      	movs	r2, r3
 80099de:	2300      	movs	r3, #0
 80099e0:	4d05      	ldr	r5, [pc, #20]	@ (80099f8 <_write_r+0x24>)
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7fa f8c8 	bl	8003b78 <_write>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d103      	bne.n	80099f4 <_write_r+0x20>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d000      	beq.n	80099f4 <_write_r+0x20>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	46c0      	nop			@ (mov r8, r8)
 80099f8:	20000640 	.word	0x20000640

080099fc <__errno>:
 80099fc:	4b01      	ldr	r3, [pc, #4]	@ (8009a04 <__errno+0x8>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	4770      	bx	lr
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	20000018 	.word	0x20000018

08009a08 <__libc_init_array>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	2600      	movs	r6, #0
 8009a0c:	4c0c      	ldr	r4, [pc, #48]	@ (8009a40 <__libc_init_array+0x38>)
 8009a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a44 <__libc_init_array+0x3c>)
 8009a10:	1b64      	subs	r4, r4, r5
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	42a6      	cmp	r6, r4
 8009a16:	d109      	bne.n	8009a2c <__libc_init_array+0x24>
 8009a18:	2600      	movs	r6, #0
 8009a1a:	f002 f8f3 	bl	800bc04 <_init>
 8009a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8009a48 <__libc_init_array+0x40>)
 8009a20:	4d0a      	ldr	r5, [pc, #40]	@ (8009a4c <__libc_init_array+0x44>)
 8009a22:	1b64      	subs	r4, r4, r5
 8009a24:	10a4      	asrs	r4, r4, #2
 8009a26:	42a6      	cmp	r6, r4
 8009a28:	d105      	bne.n	8009a36 <__libc_init_array+0x2e>
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	00b3      	lsls	r3, r6, #2
 8009a2e:	58eb      	ldr	r3, [r5, r3]
 8009a30:	4798      	blx	r3
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7ee      	b.n	8009a14 <__libc_init_array+0xc>
 8009a36:	00b3      	lsls	r3, r6, #2
 8009a38:	58eb      	ldr	r3, [r5, r3]
 8009a3a:	4798      	blx	r3
 8009a3c:	3601      	adds	r6, #1
 8009a3e:	e7f2      	b.n	8009a26 <__libc_init_array+0x1e>
 8009a40:	0800c12c 	.word	0x0800c12c
 8009a44:	0800c12c 	.word	0x0800c12c
 8009a48:	0800c130 	.word	0x0800c130
 8009a4c:	0800c12c 	.word	0x0800c12c

08009a50 <__retarget_lock_init_recursive>:
 8009a50:	4770      	bx	lr

08009a52 <__retarget_lock_acquire_recursive>:
 8009a52:	4770      	bx	lr

08009a54 <__retarget_lock_release_recursive>:
 8009a54:	4770      	bx	lr

08009a56 <memchr>:
 8009a56:	b2c9      	uxtb	r1, r1
 8009a58:	1882      	adds	r2, r0, r2
 8009a5a:	4290      	cmp	r0, r2
 8009a5c:	d101      	bne.n	8009a62 <memchr+0xc>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	4770      	bx	lr
 8009a62:	7803      	ldrb	r3, [r0, #0]
 8009a64:	428b      	cmp	r3, r1
 8009a66:	d0fb      	beq.n	8009a60 <memchr+0xa>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	e7f6      	b.n	8009a5a <memchr+0x4>

08009a6c <quorem>:
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	6903      	ldr	r3, [r0, #16]
 8009a70:	690c      	ldr	r4, [r1, #16]
 8009a72:	b089      	sub	sp, #36	@ 0x24
 8009a74:	9003      	str	r0, [sp, #12]
 8009a76:	9106      	str	r1, [sp, #24]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	db63      	blt.n	8009b46 <quorem+0xda>
 8009a7e:	000b      	movs	r3, r1
 8009a80:	3c01      	subs	r4, #1
 8009a82:	3314      	adds	r3, #20
 8009a84:	00a5      	lsls	r5, r4, #2
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	195b      	adds	r3, r3, r5
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	3314      	adds	r3, #20
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	195d      	adds	r5, r3, r5
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	682f      	ldr	r7, [r5, #0]
 8009a98:	681e      	ldr	r6, [r3, #0]
 8009a9a:	0038      	movs	r0, r7
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	0031      	movs	r1, r6
 8009aa0:	f7f6 fb4e 	bl	8000140 <__udivsi3>
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	42b7      	cmp	r7, r6
 8009aa8:	d327      	bcc.n	8009afa <quorem+0x8e>
 8009aaa:	9b04      	ldr	r3, [sp, #16]
 8009aac:	2700      	movs	r7, #0
 8009aae:	469c      	mov	ip, r3
 8009ab0:	9e01      	ldr	r6, [sp, #4]
 8009ab2:	9707      	str	r7, [sp, #28]
 8009ab4:	4662      	mov	r2, ip
 8009ab6:	ca08      	ldmia	r2!, {r3}
 8009ab8:	6830      	ldr	r0, [r6, #0]
 8009aba:	4694      	mov	ip, r2
 8009abc:	9a02      	ldr	r2, [sp, #8]
 8009abe:	b299      	uxth	r1, r3
 8009ac0:	4351      	muls	r1, r2
 8009ac2:	0c1b      	lsrs	r3, r3, #16
 8009ac4:	4353      	muls	r3, r2
 8009ac6:	19c9      	adds	r1, r1, r7
 8009ac8:	0c0a      	lsrs	r2, r1, #16
 8009aca:	189b      	adds	r3, r3, r2
 8009acc:	b289      	uxth	r1, r1
 8009ace:	b282      	uxth	r2, r0
 8009ad0:	1a52      	subs	r2, r2, r1
 8009ad2:	9907      	ldr	r1, [sp, #28]
 8009ad4:	0c1f      	lsrs	r7, r3, #16
 8009ad6:	1852      	adds	r2, r2, r1
 8009ad8:	0c00      	lsrs	r0, r0, #16
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	1411      	asrs	r1, r2, #16
 8009ade:	1ac3      	subs	r3, r0, r3
 8009ae0:	185b      	adds	r3, r3, r1
 8009ae2:	1419      	asrs	r1, r3, #16
 8009ae4:	b292      	uxth	r2, r2
 8009ae6:	041b      	lsls	r3, r3, #16
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	9b05      	ldr	r3, [sp, #20]
 8009aec:	9107      	str	r1, [sp, #28]
 8009aee:	c604      	stmia	r6!, {r2}
 8009af0:	4563      	cmp	r3, ip
 8009af2:	d2df      	bcs.n	8009ab4 <quorem+0x48>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d02b      	beq.n	8009b52 <quorem+0xe6>
 8009afa:	9906      	ldr	r1, [sp, #24]
 8009afc:	9803      	ldr	r0, [sp, #12]
 8009afe:	f001 f9b7 	bl	800ae70 <__mcmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	db1e      	blt.n	8009b44 <quorem+0xd8>
 8009b06:	2600      	movs	r6, #0
 8009b08:	9d01      	ldr	r5, [sp, #4]
 8009b0a:	9904      	ldr	r1, [sp, #16]
 8009b0c:	c901      	ldmia	r1!, {r0}
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	b287      	uxth	r7, r0
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	1bd2      	subs	r2, r2, r7
 8009b16:	1992      	adds	r2, r2, r6
 8009b18:	0c00      	lsrs	r0, r0, #16
 8009b1a:	0c1b      	lsrs	r3, r3, #16
 8009b1c:	1a1b      	subs	r3, r3, r0
 8009b1e:	1410      	asrs	r0, r2, #16
 8009b20:	181b      	adds	r3, r3, r0
 8009b22:	141e      	asrs	r6, r3, #16
 8009b24:	b292      	uxth	r2, r2
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	c504      	stmia	r5!, {r2}
 8009b2e:	428b      	cmp	r3, r1
 8009b30:	d2ec      	bcs.n	8009b0c <quorem+0xa0>
 8009b32:	9a01      	ldr	r2, [sp, #4]
 8009b34:	00a3      	lsls	r3, r4, #2
 8009b36:	18d3      	adds	r3, r2, r3
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	d014      	beq.n	8009b68 <quorem+0xfc>
 8009b3e:	9b02      	ldr	r3, [sp, #8]
 8009b40:	3301      	adds	r3, #1
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	9802      	ldr	r0, [sp, #8]
 8009b46:	b009      	add	sp, #36	@ 0x24
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <quorem+0xee>
 8009b50:	3c01      	subs	r4, #1
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	3d04      	subs	r5, #4
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	d3f7      	bcc.n	8009b4a <quorem+0xde>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	611c      	str	r4, [r3, #16]
 8009b5e:	e7cc      	b.n	8009afa <quorem+0x8e>
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	d104      	bne.n	8009b70 <quorem+0x104>
 8009b66:	3c01      	subs	r4, #1
 8009b68:	9a01      	ldr	r2, [sp, #4]
 8009b6a:	3b04      	subs	r3, #4
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d3f7      	bcc.n	8009b60 <quorem+0xf4>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	611c      	str	r4, [r3, #16]
 8009b74:	e7e3      	b.n	8009b3e <quorem+0xd2>
	...

08009b78 <_dtoa_r>:
 8009b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7a:	0014      	movs	r4, r2
 8009b7c:	001d      	movs	r5, r3
 8009b7e:	69c6      	ldr	r6, [r0, #28]
 8009b80:	b09d      	sub	sp, #116	@ 0x74
 8009b82:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b84:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009b86:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009b88:	9003      	str	r0, [sp, #12]
 8009b8a:	2e00      	cmp	r6, #0
 8009b8c:	d10f      	bne.n	8009bae <_dtoa_r+0x36>
 8009b8e:	2010      	movs	r0, #16
 8009b90:	f000 fe2c 	bl	800a7ec <malloc>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	1e02      	subs	r2, r0, #0
 8009b98:	61d8      	str	r0, [r3, #28]
 8009b9a:	d104      	bne.n	8009ba6 <_dtoa_r+0x2e>
 8009b9c:	21ef      	movs	r1, #239	@ 0xef
 8009b9e:	4bc7      	ldr	r3, [pc, #796]	@ (8009ebc <_dtoa_r+0x344>)
 8009ba0:	48c7      	ldr	r0, [pc, #796]	@ (8009ec0 <_dtoa_r+0x348>)
 8009ba2:	f001 fcb9 	bl	800b518 <__assert_func>
 8009ba6:	6046      	str	r6, [r0, #4]
 8009ba8:	6086      	str	r6, [r0, #8]
 8009baa:	6006      	str	r6, [r0, #0]
 8009bac:	60c6      	str	r6, [r0, #12]
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	d00b      	beq.n	8009bd0 <_dtoa_r+0x58>
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4093      	lsls	r3, r2
 8009bbe:	604a      	str	r2, [r1, #4]
 8009bc0:	608b      	str	r3, [r1, #8]
 8009bc2:	9803      	ldr	r0, [sp, #12]
 8009bc4:	f000 ff12 	bl	800a9ec <_Bfree>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	da1e      	bge.n	8009c12 <_dtoa_r+0x9a>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	006b      	lsls	r3, r5, #1
 8009bda:	085b      	lsrs	r3, r3, #1
 8009bdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bde:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009be0:	4bb8      	ldr	r3, [pc, #736]	@ (8009ec4 <_dtoa_r+0x34c>)
 8009be2:	4ab8      	ldr	r2, [pc, #736]	@ (8009ec4 <_dtoa_r+0x34c>)
 8009be4:	403b      	ands	r3, r7
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d116      	bne.n	8009c18 <_dtoa_r+0xa0>
 8009bea:	4bb7      	ldr	r3, [pc, #732]	@ (8009ec8 <_dtoa_r+0x350>)
 8009bec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	033b      	lsls	r3, r7, #12
 8009bf2:	0b1b      	lsrs	r3, r3, #12
 8009bf4:	4323      	orrs	r3, r4
 8009bf6:	d101      	bne.n	8009bfc <_dtoa_r+0x84>
 8009bf8:	f000 fd80 	bl	800a6fc <_dtoa_r+0xb84>
 8009bfc:	4bb3      	ldr	r3, [pc, #716]	@ (8009ecc <_dtoa_r+0x354>)
 8009bfe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d002      	beq.n	8009c0c <_dtoa_r+0x94>
 8009c06:	4bb2      	ldr	r3, [pc, #712]	@ (8009ed0 <_dtoa_r+0x358>)
 8009c08:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	9808      	ldr	r0, [sp, #32]
 8009c0e:	b01d      	add	sp, #116	@ 0x74
 8009c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c12:	2300      	movs	r3, #0
 8009c14:	603b      	str	r3, [r7, #0]
 8009c16:	e7e2      	b.n	8009bde <_dtoa_r+0x66>
 8009c18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c1c:	9212      	str	r2, [sp, #72]	@ 0x48
 8009c1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009c22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c24:	2200      	movs	r2, #0
 8009c26:	2300      	movs	r3, #0
 8009c28:	f7f6 fc10 	bl	800044c <__aeabi_dcmpeq>
 8009c2c:	1e06      	subs	r6, r0, #0
 8009c2e:	d00b      	beq.n	8009c48 <_dtoa_r+0xd0>
 8009c30:	2301      	movs	r3, #1
 8009c32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <_dtoa_r+0xca>
 8009c3c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ed4 <_dtoa_r+0x35c>)
 8009c3e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	4ba5      	ldr	r3, [pc, #660]	@ (8009ed8 <_dtoa_r+0x360>)
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	e7e1      	b.n	8009c0c <_dtoa_r+0x94>
 8009c48:	ab1a      	add	r3, sp, #104	@ 0x68
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9803      	ldr	r0, [sp, #12]
 8009c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c56:	f001 f9c1 	bl	800afdc <__d2b>
 8009c5a:	007a      	lsls	r2, r7, #1
 8009c5c:	9005      	str	r0, [sp, #20]
 8009c5e:	0d52      	lsrs	r2, r2, #21
 8009c60:	d100      	bne.n	8009c64 <_dtoa_r+0xec>
 8009c62:	e07b      	b.n	8009d5c <_dtoa_r+0x1e4>
 8009c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c66:	9618      	str	r6, [sp, #96]	@ 0x60
 8009c68:	0319      	lsls	r1, r3, #12
 8009c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8009edc <_dtoa_r+0x364>)
 8009c6c:	0b09      	lsrs	r1, r1, #12
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	499b      	ldr	r1, [pc, #620]	@ (8009ee0 <_dtoa_r+0x368>)
 8009c72:	1857      	adds	r7, r2, r1
 8009c74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009c76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c78:	0019      	movs	r1, r3
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4b99      	ldr	r3, [pc, #612]	@ (8009ee4 <_dtoa_r+0x36c>)
 8009c7e:	f7f8 fa33 	bl	80020e8 <__aeabi_dsub>
 8009c82:	4a99      	ldr	r2, [pc, #612]	@ (8009ee8 <_dtoa_r+0x370>)
 8009c84:	4b99      	ldr	r3, [pc, #612]	@ (8009eec <_dtoa_r+0x374>)
 8009c86:	f7f7 ff49 	bl	8001b1c <__aeabi_dmul>
 8009c8a:	4a99      	ldr	r2, [pc, #612]	@ (8009ef0 <_dtoa_r+0x378>)
 8009c8c:	4b99      	ldr	r3, [pc, #612]	@ (8009ef4 <_dtoa_r+0x37c>)
 8009c8e:	f7f6 ff45 	bl	8000b1c <__aeabi_dadd>
 8009c92:	0004      	movs	r4, r0
 8009c94:	0038      	movs	r0, r7
 8009c96:	000d      	movs	r5, r1
 8009c98:	f7f8 fe8e 	bl	80029b8 <__aeabi_i2d>
 8009c9c:	4a96      	ldr	r2, [pc, #600]	@ (8009ef8 <_dtoa_r+0x380>)
 8009c9e:	4b97      	ldr	r3, [pc, #604]	@ (8009efc <_dtoa_r+0x384>)
 8009ca0:	f7f7 ff3c 	bl	8001b1c <__aeabi_dmul>
 8009ca4:	0002      	movs	r2, r0
 8009ca6:	000b      	movs	r3, r1
 8009ca8:	0020      	movs	r0, r4
 8009caa:	0029      	movs	r1, r5
 8009cac:	f7f6 ff36 	bl	8000b1c <__aeabi_dadd>
 8009cb0:	0004      	movs	r4, r0
 8009cb2:	000d      	movs	r5, r1
 8009cb4:	f7f8 fe44 	bl	8002940 <__aeabi_d2iz>
 8009cb8:	2200      	movs	r2, #0
 8009cba:	9004      	str	r0, [sp, #16]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	0020      	movs	r0, r4
 8009cc0:	0029      	movs	r1, r5
 8009cc2:	f7f6 fbc9 	bl	8000458 <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d00b      	beq.n	8009ce2 <_dtoa_r+0x16a>
 8009cca:	9804      	ldr	r0, [sp, #16]
 8009ccc:	f7f8 fe74 	bl	80029b8 <__aeabi_i2d>
 8009cd0:	002b      	movs	r3, r5
 8009cd2:	0022      	movs	r2, r4
 8009cd4:	f7f6 fbba 	bl	800044c <__aeabi_dcmpeq>
 8009cd8:	4243      	negs	r3, r0
 8009cda:	4158      	adcs	r0, r3
 8009cdc:	9b04      	ldr	r3, [sp, #16]
 8009cde:	1a1b      	subs	r3, r3, r0
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	2b16      	cmp	r3, #22
 8009cea:	d810      	bhi.n	8009d0e <_dtoa_r+0x196>
 8009cec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009cee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009cf0:	9a04      	ldr	r2, [sp, #16]
 8009cf2:	4b83      	ldr	r3, [pc, #524]	@ (8009f00 <_dtoa_r+0x388>)
 8009cf4:	00d2      	lsls	r2, r2, #3
 8009cf6:	189b      	adds	r3, r3, r2
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f7f6 fbac 	bl	8000458 <__aeabi_dcmplt>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d047      	beq.n	8009d94 <_dtoa_r+0x21c>
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d0e:	2200      	movs	r2, #0
 8009d10:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009d12:	9206      	str	r2, [sp, #24]
 8009d14:	1bdb      	subs	r3, r3, r7
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	d53e      	bpl.n	8009d98 <_dtoa_r+0x220>
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	9306      	str	r3, [sp, #24]
 8009d20:	2300      	movs	r3, #0
 8009d22:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d24:	9b04      	ldr	r3, [sp, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	db38      	blt.n	8009d9c <_dtoa_r+0x224>
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d2e:	4694      	mov	ip, r2
 8009d30:	4463      	add	r3, ip
 8009d32:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d34:	2300      	movs	r3, #0
 8009d36:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d3c:	2401      	movs	r4, #1
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d862      	bhi.n	8009e08 <_dtoa_r+0x290>
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	dd02      	ble.n	8009d4c <_dtoa_r+0x1d4>
 8009d46:	2400      	movs	r4, #0
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	9322      	str	r3, [sp, #136]	@ 0x88
 8009d4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d4e:	1e98      	subs	r0, r3, #2
 8009d50:	2803      	cmp	r0, #3
 8009d52:	d863      	bhi.n	8009e1c <_dtoa_r+0x2a4>
 8009d54:	f7f6 f9e0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009d58:	2b385654 	.word	0x2b385654
 8009d5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009d5e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009d60:	18f6      	adds	r6, r6, r3
 8009d62:	4b68      	ldr	r3, [pc, #416]	@ (8009f04 <_dtoa_r+0x38c>)
 8009d64:	18f2      	adds	r2, r6, r3
 8009d66:	2a20      	cmp	r2, #32
 8009d68:	dd0f      	ble.n	8009d8a <_dtoa_r+0x212>
 8009d6a:	2340      	movs	r3, #64	@ 0x40
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	409f      	lsls	r7, r3
 8009d70:	4b65      	ldr	r3, [pc, #404]	@ (8009f08 <_dtoa_r+0x390>)
 8009d72:	0038      	movs	r0, r7
 8009d74:	18f3      	adds	r3, r6, r3
 8009d76:	40dc      	lsrs	r4, r3
 8009d78:	4320      	orrs	r0, r4
 8009d7a:	f7f8 fe4b 	bl	8002a14 <__aeabi_ui2d>
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4b62      	ldr	r3, [pc, #392]	@ (8009f0c <_dtoa_r+0x394>)
 8009d82:	1e77      	subs	r7, r6, #1
 8009d84:	18cb      	adds	r3, r1, r3
 8009d86:	9218      	str	r2, [sp, #96]	@ 0x60
 8009d88:	e776      	b.n	8009c78 <_dtoa_r+0x100>
 8009d8a:	2320      	movs	r3, #32
 8009d8c:	0020      	movs	r0, r4
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	4098      	lsls	r0, r3
 8009d92:	e7f2      	b.n	8009d7a <_dtoa_r+0x202>
 8009d94:	9015      	str	r0, [sp, #84]	@ 0x54
 8009d96:	e7ba      	b.n	8009d0e <_dtoa_r+0x196>
 8009d98:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d9a:	e7c3      	b.n	8009d24 <_dtoa_r+0x1ac>
 8009d9c:	9b06      	ldr	r3, [sp, #24]
 8009d9e:	9a04      	ldr	r2, [sp, #16]
 8009da0:	1a9b      	subs	r3, r3, r2
 8009da2:	9306      	str	r3, [sp, #24]
 8009da4:	4253      	negs	r3, r2
 8009da6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009da8:	2300      	movs	r3, #0
 8009daa:	9314      	str	r3, [sp, #80]	@ 0x50
 8009dac:	e7c5      	b.n	8009d3a <_dtoa_r+0x1c2>
 8009dae:	2301      	movs	r3, #1
 8009db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009db2:	9310      	str	r3, [sp, #64]	@ 0x40
 8009db4:	4694      	mov	ip, r2
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	4463      	add	r3, ip
 8009dba:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc08      	bgt.n	8009dd6 <_dtoa_r+0x25e>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e006      	b.n	8009dd6 <_dtoa_r+0x25e>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	9310      	str	r3, [sp, #64]	@ 0x40
 8009dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dd28      	ble.n	8009e24 <_dtoa_r+0x2ac>
 8009dd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd6:	9a03      	ldr	r2, [sp, #12]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	69d0      	ldr	r0, [r2, #28]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	0015      	movs	r5, r2
 8009de0:	3514      	adds	r5, #20
 8009de2:	429d      	cmp	r5, r3
 8009de4:	d923      	bls.n	8009e2e <_dtoa_r+0x2b6>
 8009de6:	6041      	str	r1, [r0, #4]
 8009de8:	9803      	ldr	r0, [sp, #12]
 8009dea:	f000 fdbb 	bl	800a964 <_Balloc>
 8009dee:	9008      	str	r0, [sp, #32]
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d11f      	bne.n	8009e34 <_dtoa_r+0x2bc>
 8009df4:	21b0      	movs	r1, #176	@ 0xb0
 8009df6:	4b46      	ldr	r3, [pc, #280]	@ (8009f10 <_dtoa_r+0x398>)
 8009df8:	4831      	ldr	r0, [pc, #196]	@ (8009ec0 <_dtoa_r+0x348>)
 8009dfa:	9a08      	ldr	r2, [sp, #32]
 8009dfc:	31ff      	adds	r1, #255	@ 0xff
 8009dfe:	e6d0      	b.n	8009ba2 <_dtoa_r+0x2a>
 8009e00:	2300      	movs	r3, #0
 8009e02:	e7e2      	b.n	8009dca <_dtoa_r+0x252>
 8009e04:	2300      	movs	r3, #0
 8009e06:	e7d3      	b.n	8009db0 <_dtoa_r+0x238>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9410      	str	r4, [sp, #64]	@ 0x40
 8009e0c:	9322      	str	r3, [sp, #136]	@ 0x88
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	2200      	movs	r2, #0
 8009e12:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e16:	3313      	adds	r3, #19
 8009e18:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009e1a:	e7dc      	b.n	8009dd6 <_dtoa_r+0x25e>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e20:	3b02      	subs	r3, #2
 8009e22:	e7f5      	b.n	8009e10 <_dtoa_r+0x298>
 8009e24:	2301      	movs	r3, #1
 8009e26:	001a      	movs	r2, r3
 8009e28:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	e7f4      	b.n	8009e18 <_dtoa_r+0x2a0>
 8009e2e:	3101      	adds	r1, #1
 8009e30:	0052      	lsls	r2, r2, #1
 8009e32:	e7d4      	b.n	8009dde <_dtoa_r+0x266>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	9a08      	ldr	r2, [sp, #32]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3e:	2b0e      	cmp	r3, #14
 8009e40:	d900      	bls.n	8009e44 <_dtoa_r+0x2cc>
 8009e42:	e0d6      	b.n	8009ff2 <_dtoa_r+0x47a>
 8009e44:	2c00      	cmp	r4, #0
 8009e46:	d100      	bne.n	8009e4a <_dtoa_r+0x2d2>
 8009e48:	e0d3      	b.n	8009ff2 <_dtoa_r+0x47a>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dd63      	ble.n	8009f18 <_dtoa_r+0x3a0>
 8009e50:	210f      	movs	r1, #15
 8009e52:	9a04      	ldr	r2, [sp, #16]
 8009e54:	4b2a      	ldr	r3, [pc, #168]	@ (8009f00 <_dtoa_r+0x388>)
 8009e56:	400a      	ands	r2, r1
 8009e58:	00d2      	lsls	r2, r2, #3
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	681e      	ldr	r6, [r3, #0]
 8009e5e:	685f      	ldr	r7, [r3, #4]
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	2402      	movs	r4, #2
 8009e64:	111d      	asrs	r5, r3, #4
 8009e66:	05db      	lsls	r3, r3, #23
 8009e68:	d50a      	bpl.n	8009e80 <_dtoa_r+0x308>
 8009e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8009f14 <_dtoa_r+0x39c>)
 8009e6c:	400d      	ands	r5, r1
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e72:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e74:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009e76:	f7f7 fa17 	bl	80012a8 <__aeabi_ddiv>
 8009e7a:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e7e:	3401      	adds	r4, #1
 8009e80:	4b24      	ldr	r3, [pc, #144]	@ (8009f14 <_dtoa_r+0x39c>)
 8009e82:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	d108      	bne.n	8009e9a <_dtoa_r+0x322>
 8009e88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e8c:	0032      	movs	r2, r6
 8009e8e:	003b      	movs	r3, r7
 8009e90:	f7f7 fa0a 	bl	80012a8 <__aeabi_ddiv>
 8009e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e98:	e059      	b.n	8009f4e <_dtoa_r+0x3d6>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	421d      	tst	r5, r3
 8009e9e:	d009      	beq.n	8009eb4 <_dtoa_r+0x33c>
 8009ea0:	18e4      	adds	r4, r4, r3
 8009ea2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ea4:	0030      	movs	r0, r6
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	0039      	movs	r1, r7
 8009eac:	f7f7 fe36 	bl	8001b1c <__aeabi_dmul>
 8009eb0:	0006      	movs	r6, r0
 8009eb2:	000f      	movs	r7, r1
 8009eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eb6:	106d      	asrs	r5, r5, #1
 8009eb8:	3308      	adds	r3, #8
 8009eba:	e7e2      	b.n	8009e82 <_dtoa_r+0x30a>
 8009ebc:	0800bdf1 	.word	0x0800bdf1
 8009ec0:	0800be08 	.word	0x0800be08
 8009ec4:	7ff00000 	.word	0x7ff00000
 8009ec8:	0000270f 	.word	0x0000270f
 8009ecc:	0800bded 	.word	0x0800bded
 8009ed0:	0800bdf0 	.word	0x0800bdf0
 8009ed4:	0800bdc1 	.word	0x0800bdc1
 8009ed8:	0800bdc0 	.word	0x0800bdc0
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	fffffc01 	.word	0xfffffc01
 8009ee4:	3ff80000 	.word	0x3ff80000
 8009ee8:	636f4361 	.word	0x636f4361
 8009eec:	3fd287a7 	.word	0x3fd287a7
 8009ef0:	8b60c8b3 	.word	0x8b60c8b3
 8009ef4:	3fc68a28 	.word	0x3fc68a28
 8009ef8:	509f79fb 	.word	0x509f79fb
 8009efc:	3fd34413 	.word	0x3fd34413
 8009f00:	0800bf58 	.word	0x0800bf58
 8009f04:	00000432 	.word	0x00000432
 8009f08:	00000412 	.word	0x00000412
 8009f0c:	fe100000 	.word	0xfe100000
 8009f10:	0800be60 	.word	0x0800be60
 8009f14:	0800bf30 	.word	0x0800bf30
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	2402      	movs	r4, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d016      	beq.n	8009f4e <_dtoa_r+0x3d6>
 8009f20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009f22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009f24:	220f      	movs	r2, #15
 8009f26:	425d      	negs	r5, r3
 8009f28:	402a      	ands	r2, r5
 8009f2a:	4bd5      	ldr	r3, [pc, #852]	@ (800a280 <_dtoa_r+0x708>)
 8009f2c:	00d2      	lsls	r2, r2, #3
 8009f2e:	189b      	adds	r3, r3, r2
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f7f7 fdf2 	bl	8001b1c <__aeabi_dmul>
 8009f38:	2701      	movs	r7, #1
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f40:	4ed0      	ldr	r6, [pc, #832]	@ (800a284 <_dtoa_r+0x70c>)
 8009f42:	112d      	asrs	r5, r5, #4
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d000      	beq.n	8009f4a <_dtoa_r+0x3d2>
 8009f48:	e095      	b.n	800a076 <_dtoa_r+0x4fe>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1a2      	bne.n	8009e94 <_dtoa_r+0x31c>
 8009f4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009f52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d100      	bne.n	8009f5a <_dtoa_r+0x3e2>
 8009f58:	e098      	b.n	800a08c <_dtoa_r+0x514>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	0030      	movs	r0, r6
 8009f5e:	0039      	movs	r1, r7
 8009f60:	4bc9      	ldr	r3, [pc, #804]	@ (800a288 <_dtoa_r+0x710>)
 8009f62:	f7f6 fa79 	bl	8000458 <__aeabi_dcmplt>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d100      	bne.n	8009f6c <_dtoa_r+0x3f4>
 8009f6a:	e08f      	b.n	800a08c <_dtoa_r+0x514>
 8009f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d100      	bne.n	8009f74 <_dtoa_r+0x3fc>
 8009f72:	e08b      	b.n	800a08c <_dtoa_r+0x514>
 8009f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dd37      	ble.n	8009fea <_dtoa_r+0x472>
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f82:	0030      	movs	r0, r6
 8009f84:	4bc1      	ldr	r3, [pc, #772]	@ (800a28c <_dtoa_r+0x714>)
 8009f86:	0039      	movs	r1, r7
 8009f88:	f7f7 fdc8 	bl	8001b1c <__aeabi_dmul>
 8009f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f92:	3401      	adds	r4, #1
 8009f94:	0020      	movs	r0, r4
 8009f96:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f98:	f7f8 fd0e 	bl	80029b8 <__aeabi_i2d>
 8009f9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa0:	f7f7 fdbc 	bl	8001b1c <__aeabi_dmul>
 8009fa4:	4bba      	ldr	r3, [pc, #744]	@ (800a290 <_dtoa_r+0x718>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f7f6 fdb8 	bl	8000b1c <__aeabi_dadd>
 8009fac:	4bb9      	ldr	r3, [pc, #740]	@ (800a294 <_dtoa_r+0x71c>)
 8009fae:	0006      	movs	r6, r0
 8009fb0:	18cf      	adds	r7, r1, r3
 8009fb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d16d      	bne.n	800a094 <_dtoa_r+0x51c>
 8009fb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4bb6      	ldr	r3, [pc, #728]	@ (800a298 <_dtoa_r+0x720>)
 8009fc0:	f7f8 f892 	bl	80020e8 <__aeabi_dsub>
 8009fc4:	0032      	movs	r2, r6
 8009fc6:	003b      	movs	r3, r7
 8009fc8:	0004      	movs	r4, r0
 8009fca:	000d      	movs	r5, r1
 8009fcc:	f7f6 fa58 	bl	8000480 <__aeabi_dcmpgt>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d000      	beq.n	8009fd6 <_dtoa_r+0x45e>
 8009fd4:	e2b6      	b.n	800a544 <_dtoa_r+0x9cc>
 8009fd6:	2180      	movs	r1, #128	@ 0x80
 8009fd8:	0609      	lsls	r1, r1, #24
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	0032      	movs	r2, r6
 8009fde:	0020      	movs	r0, r4
 8009fe0:	0029      	movs	r1, r5
 8009fe2:	f7f6 fa39 	bl	8000458 <__aeabi_dcmplt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d128      	bne.n	800a03c <_dtoa_r+0x4c4>
 8009fea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009fec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ff2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	da00      	bge.n	8009ffa <_dtoa_r+0x482>
 8009ff8:	e174      	b.n	800a2e4 <_dtoa_r+0x76c>
 8009ffa:	9a04      	ldr	r2, [sp, #16]
 8009ffc:	2a0e      	cmp	r2, #14
 8009ffe:	dd00      	ble.n	800a002 <_dtoa_r+0x48a>
 800a000:	e170      	b.n	800a2e4 <_dtoa_r+0x76c>
 800a002:	4b9f      	ldr	r3, [pc, #636]	@ (800a280 <_dtoa_r+0x708>)
 800a004:	00d2      	lsls	r2, r2, #3
 800a006:	189b      	adds	r3, r3, r2
 800a008:	685c      	ldr	r4, [r3, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	9306      	str	r3, [sp, #24]
 800a00e:	9407      	str	r4, [sp, #28]
 800a010:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a012:	2b00      	cmp	r3, #0
 800a014:	db00      	blt.n	800a018 <_dtoa_r+0x4a0>
 800a016:	e0e7      	b.n	800a1e8 <_dtoa_r+0x670>
 800a018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dd00      	ble.n	800a020 <_dtoa_r+0x4a8>
 800a01e:	e0e3      	b.n	800a1e8 <_dtoa_r+0x670>
 800a020:	d10c      	bne.n	800a03c <_dtoa_r+0x4c4>
 800a022:	9806      	ldr	r0, [sp, #24]
 800a024:	9907      	ldr	r1, [sp, #28]
 800a026:	2200      	movs	r2, #0
 800a028:	4b9b      	ldr	r3, [pc, #620]	@ (800a298 <_dtoa_r+0x720>)
 800a02a:	f7f7 fd77 	bl	8001b1c <__aeabi_dmul>
 800a02e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a032:	f7f6 fa2f 	bl	8000494 <__aeabi_dcmpge>
 800a036:	2800      	cmp	r0, #0
 800a038:	d100      	bne.n	800a03c <_dtoa_r+0x4c4>
 800a03a:	e286      	b.n	800a54a <_dtoa_r+0x9d2>
 800a03c:	2600      	movs	r6, #0
 800a03e:	0037      	movs	r7, r6
 800a040:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a042:	9c08      	ldr	r4, [sp, #32]
 800a044:	43db      	mvns	r3, r3
 800a046:	930c      	str	r3, [sp, #48]	@ 0x30
 800a048:	9704      	str	r7, [sp, #16]
 800a04a:	2700      	movs	r7, #0
 800a04c:	0031      	movs	r1, r6
 800a04e:	9803      	ldr	r0, [sp, #12]
 800a050:	f000 fccc 	bl	800a9ec <_Bfree>
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d100      	bne.n	800a05c <_dtoa_r+0x4e4>
 800a05a:	e0bb      	b.n	800a1d4 <_dtoa_r+0x65c>
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	d005      	beq.n	800a06c <_dtoa_r+0x4f4>
 800a060:	429f      	cmp	r7, r3
 800a062:	d003      	beq.n	800a06c <_dtoa_r+0x4f4>
 800a064:	0039      	movs	r1, r7
 800a066:	9803      	ldr	r0, [sp, #12]
 800a068:	f000 fcc0 	bl	800a9ec <_Bfree>
 800a06c:	9904      	ldr	r1, [sp, #16]
 800a06e:	9803      	ldr	r0, [sp, #12]
 800a070:	f000 fcbc 	bl	800a9ec <_Bfree>
 800a074:	e0ae      	b.n	800a1d4 <_dtoa_r+0x65c>
 800a076:	423d      	tst	r5, r7
 800a078:	d005      	beq.n	800a086 <_dtoa_r+0x50e>
 800a07a:	6832      	ldr	r2, [r6, #0]
 800a07c:	6873      	ldr	r3, [r6, #4]
 800a07e:	f7f7 fd4d 	bl	8001b1c <__aeabi_dmul>
 800a082:	003b      	movs	r3, r7
 800a084:	3401      	adds	r4, #1
 800a086:	106d      	asrs	r5, r5, #1
 800a088:	3608      	adds	r6, #8
 800a08a:	e75b      	b.n	8009f44 <_dtoa_r+0x3cc>
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a092:	e77f      	b.n	8009f94 <_dtoa_r+0x41c>
 800a094:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a096:	4b7a      	ldr	r3, [pc, #488]	@ (800a280 <_dtoa_r+0x708>)
 800a098:	3a01      	subs	r2, #1
 800a09a:	00d2      	lsls	r2, r2, #3
 800a09c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a09e:	189b      	adds	r3, r3, r2
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	d04c      	beq.n	800a142 <_dtoa_r+0x5ca>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	497c      	ldr	r1, [pc, #496]	@ (800a29c <_dtoa_r+0x724>)
 800a0ac:	f7f7 f8fc 	bl	80012a8 <__aeabi_ddiv>
 800a0b0:	0032      	movs	r2, r6
 800a0b2:	003b      	movs	r3, r7
 800a0b4:	f7f8 f818 	bl	80020e8 <__aeabi_dsub>
 800a0b8:	9a08      	ldr	r2, [sp, #32]
 800a0ba:	0006      	movs	r6, r0
 800a0bc:	4694      	mov	ip, r2
 800a0be:	000f      	movs	r7, r1
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0c6:	4463      	add	r3, ip
 800a0c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0ce:	f7f8 fc37 	bl	8002940 <__aeabi_d2iz>
 800a0d2:	0005      	movs	r5, r0
 800a0d4:	f7f8 fc70 	bl	80029b8 <__aeabi_i2d>
 800a0d8:	0002      	movs	r2, r0
 800a0da:	000b      	movs	r3, r1
 800a0dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0e0:	f7f8 f802 	bl	80020e8 <__aeabi_dsub>
 800a0e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0e6:	3530      	adds	r5, #48	@ 0x30
 800a0e8:	1c5c      	adds	r4, r3, #1
 800a0ea:	701d      	strb	r5, [r3, #0]
 800a0ec:	0032      	movs	r2, r6
 800a0ee:	003b      	movs	r3, r7
 800a0f0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a0f4:	f7f6 f9b0 	bl	8000458 <__aeabi_dcmplt>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d16b      	bne.n	800a1d4 <_dtoa_r+0x65c>
 800a0fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a100:	2000      	movs	r0, #0
 800a102:	4961      	ldr	r1, [pc, #388]	@ (800a288 <_dtoa_r+0x710>)
 800a104:	f7f7 fff0 	bl	80020e8 <__aeabi_dsub>
 800a108:	0032      	movs	r2, r6
 800a10a:	003b      	movs	r3, r7
 800a10c:	f7f6 f9a4 	bl	8000458 <__aeabi_dcmplt>
 800a110:	2800      	cmp	r0, #0
 800a112:	d000      	beq.n	800a116 <_dtoa_r+0x59e>
 800a114:	e0c6      	b.n	800a2a4 <_dtoa_r+0x72c>
 800a116:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d100      	bne.n	800a11e <_dtoa_r+0x5a6>
 800a11c:	e765      	b.n	8009fea <_dtoa_r+0x472>
 800a11e:	2200      	movs	r2, #0
 800a120:	0030      	movs	r0, r6
 800a122:	0039      	movs	r1, r7
 800a124:	4b59      	ldr	r3, [pc, #356]	@ (800a28c <_dtoa_r+0x714>)
 800a126:	f7f7 fcf9 	bl	8001b1c <__aeabi_dmul>
 800a12a:	2200      	movs	r2, #0
 800a12c:	0006      	movs	r6, r0
 800a12e:	000f      	movs	r7, r1
 800a130:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a132:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a134:	4b55      	ldr	r3, [pc, #340]	@ (800a28c <_dtoa_r+0x714>)
 800a136:	f7f7 fcf1 	bl	8001b1c <__aeabi_dmul>
 800a13a:	9416      	str	r4, [sp, #88]	@ 0x58
 800a13c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a13e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a140:	e7c3      	b.n	800a0ca <_dtoa_r+0x552>
 800a142:	0030      	movs	r0, r6
 800a144:	0039      	movs	r1, r7
 800a146:	f7f7 fce9 	bl	8001b1c <__aeabi_dmul>
 800a14a:	9d08      	ldr	r5, [sp, #32]
 800a14c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a14e:	002b      	movs	r3, r5
 800a150:	4694      	mov	ip, r2
 800a152:	9016      	str	r0, [sp, #88]	@ 0x58
 800a154:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a156:	4463      	add	r3, ip
 800a158:	9319      	str	r3, [sp, #100]	@ 0x64
 800a15a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a15c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a15e:	f7f8 fbef 	bl	8002940 <__aeabi_d2iz>
 800a162:	0004      	movs	r4, r0
 800a164:	f7f8 fc28 	bl	80029b8 <__aeabi_i2d>
 800a168:	000b      	movs	r3, r1
 800a16a:	0002      	movs	r2, r0
 800a16c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a16e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a170:	f7f7 ffba 	bl	80020e8 <__aeabi_dsub>
 800a174:	3430      	adds	r4, #48	@ 0x30
 800a176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a178:	702c      	strb	r4, [r5, #0]
 800a17a:	3501      	adds	r5, #1
 800a17c:	0006      	movs	r6, r0
 800a17e:	000f      	movs	r7, r1
 800a180:	42ab      	cmp	r3, r5
 800a182:	d12a      	bne.n	800a1da <_dtoa_r+0x662>
 800a184:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a186:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a188:	9b08      	ldr	r3, [sp, #32]
 800a18a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a18c:	469c      	mov	ip, r3
 800a18e:	2200      	movs	r2, #0
 800a190:	4b42      	ldr	r3, [pc, #264]	@ (800a29c <_dtoa_r+0x724>)
 800a192:	4464      	add	r4, ip
 800a194:	f7f6 fcc2 	bl	8000b1c <__aeabi_dadd>
 800a198:	0002      	movs	r2, r0
 800a19a:	000b      	movs	r3, r1
 800a19c:	0030      	movs	r0, r6
 800a19e:	0039      	movs	r1, r7
 800a1a0:	f7f6 f96e 	bl	8000480 <__aeabi_dcmpgt>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d000      	beq.n	800a1aa <_dtoa_r+0x632>
 800a1a8:	e07c      	b.n	800a2a4 <_dtoa_r+0x72c>
 800a1aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	493a      	ldr	r1, [pc, #232]	@ (800a29c <_dtoa_r+0x724>)
 800a1b2:	f7f7 ff99 	bl	80020e8 <__aeabi_dsub>
 800a1b6:	0002      	movs	r2, r0
 800a1b8:	000b      	movs	r3, r1
 800a1ba:	0030      	movs	r0, r6
 800a1bc:	0039      	movs	r1, r7
 800a1be:	f7f6 f94b 	bl	8000458 <__aeabi_dcmplt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d100      	bne.n	800a1c8 <_dtoa_r+0x650>
 800a1c6:	e710      	b.n	8009fea <_dtoa_r+0x472>
 800a1c8:	0023      	movs	r3, r4
 800a1ca:	3c01      	subs	r4, #1
 800a1cc:	7822      	ldrb	r2, [r4, #0]
 800a1ce:	2a30      	cmp	r2, #48	@ 0x30
 800a1d0:	d0fa      	beq.n	800a1c8 <_dtoa_r+0x650>
 800a1d2:	001c      	movs	r4, r3
 800a1d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	e042      	b.n	800a260 <_dtoa_r+0x6e8>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800a28c <_dtoa_r+0x714>)
 800a1de:	f7f7 fc9d 	bl	8001b1c <__aeabi_dmul>
 800a1e2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1e6:	e7b8      	b.n	800a15a <_dtoa_r+0x5e2>
 800a1e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ea:	9d08      	ldr	r5, [sp, #32]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	195b      	adds	r3, r3, r5
 800a1f0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1f2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a1f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f6:	9a06      	ldr	r2, [sp, #24]
 800a1f8:	9b07      	ldr	r3, [sp, #28]
 800a1fa:	0030      	movs	r0, r6
 800a1fc:	0039      	movs	r1, r7
 800a1fe:	f7f7 f853 	bl	80012a8 <__aeabi_ddiv>
 800a202:	f7f8 fb9d 	bl	8002940 <__aeabi_d2iz>
 800a206:	9009      	str	r0, [sp, #36]	@ 0x24
 800a208:	f7f8 fbd6 	bl	80029b8 <__aeabi_i2d>
 800a20c:	9a06      	ldr	r2, [sp, #24]
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	f7f7 fc84 	bl	8001b1c <__aeabi_dmul>
 800a214:	0002      	movs	r2, r0
 800a216:	000b      	movs	r3, r1
 800a218:	0030      	movs	r0, r6
 800a21a:	0039      	movs	r1, r7
 800a21c:	f7f7 ff64 	bl	80020e8 <__aeabi_dsub>
 800a220:	002b      	movs	r3, r5
 800a222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a224:	3501      	adds	r5, #1
 800a226:	3230      	adds	r2, #48	@ 0x30
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a22c:	002c      	movs	r4, r5
 800a22e:	429a      	cmp	r2, r3
 800a230:	d14b      	bne.n	800a2ca <_dtoa_r+0x752>
 800a232:	0002      	movs	r2, r0
 800a234:	000b      	movs	r3, r1
 800a236:	f7f6 fc71 	bl	8000b1c <__aeabi_dadd>
 800a23a:	9a06      	ldr	r2, [sp, #24]
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	0006      	movs	r6, r0
 800a240:	000f      	movs	r7, r1
 800a242:	f7f6 f91d 	bl	8000480 <__aeabi_dcmpgt>
 800a246:	2800      	cmp	r0, #0
 800a248:	d12a      	bne.n	800a2a0 <_dtoa_r+0x728>
 800a24a:	9a06      	ldr	r2, [sp, #24]
 800a24c:	9b07      	ldr	r3, [sp, #28]
 800a24e:	0030      	movs	r0, r6
 800a250:	0039      	movs	r1, r7
 800a252:	f7f6 f8fb 	bl	800044c <__aeabi_dcmpeq>
 800a256:	2800      	cmp	r0, #0
 800a258:	d002      	beq.n	800a260 <_dtoa_r+0x6e8>
 800a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25c:	07dd      	lsls	r5, r3, #31
 800a25e:	d41f      	bmi.n	800a2a0 <_dtoa_r+0x728>
 800a260:	9905      	ldr	r1, [sp, #20]
 800a262:	9803      	ldr	r0, [sp, #12]
 800a264:	f000 fbc2 	bl	800a9ec <_Bfree>
 800a268:	2300      	movs	r3, #0
 800a26a:	7023      	strb	r3, [r4, #0]
 800a26c:	9b04      	ldr	r3, [sp, #16]
 800a26e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a270:	3301      	adds	r3, #1
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a276:	2b00      	cmp	r3, #0
 800a278:	d100      	bne.n	800a27c <_dtoa_r+0x704>
 800a27a:	e4c7      	b.n	8009c0c <_dtoa_r+0x94>
 800a27c:	601c      	str	r4, [r3, #0]
 800a27e:	e4c5      	b.n	8009c0c <_dtoa_r+0x94>
 800a280:	0800bf58 	.word	0x0800bf58
 800a284:	0800bf30 	.word	0x0800bf30
 800a288:	3ff00000 	.word	0x3ff00000
 800a28c:	40240000 	.word	0x40240000
 800a290:	401c0000 	.word	0x401c0000
 800a294:	fcc00000 	.word	0xfcc00000
 800a298:	40140000 	.word	0x40140000
 800a29c:	3fe00000 	.word	0x3fe00000
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2a4:	0023      	movs	r3, r4
 800a2a6:	001c      	movs	r4, r3
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	2a39      	cmp	r2, #57	@ 0x39
 800a2ae:	d108      	bne.n	800a2c2 <_dtoa_r+0x74a>
 800a2b0:	9a08      	ldr	r2, [sp, #32]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d1f7      	bne.n	800a2a6 <_dtoa_r+0x72e>
 800a2b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2b8:	9908      	ldr	r1, [sp, #32]
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2be:	2230      	movs	r2, #48	@ 0x30
 800a2c0:	700a      	strb	r2, [r1, #0]
 800a2c2:	781a      	ldrb	r2, [r3, #0]
 800a2c4:	3201      	adds	r2, #1
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	e784      	b.n	800a1d4 <_dtoa_r+0x65c>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4bc6      	ldr	r3, [pc, #792]	@ (800a5e8 <_dtoa_r+0xa70>)
 800a2ce:	f7f7 fc25 	bl	8001b1c <__aeabi_dmul>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	0006      	movs	r6, r0
 800a2d8:	000f      	movs	r7, r1
 800a2da:	f7f6 f8b7 	bl	800044c <__aeabi_dcmpeq>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d089      	beq.n	800a1f6 <_dtoa_r+0x67e>
 800a2e2:	e7bd      	b.n	800a260 <_dtoa_r+0x6e8>
 800a2e4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a2e6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a2e8:	9c06      	ldr	r4, [sp, #24]
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	d014      	beq.n	800a318 <_dtoa_r+0x7a0>
 800a2ee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a2f0:	2a01      	cmp	r2, #1
 800a2f2:	dd00      	ble.n	800a2f6 <_dtoa_r+0x77e>
 800a2f4:	e0e4      	b.n	800a4c0 <_dtoa_r+0x948>
 800a2f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d100      	bne.n	800a2fe <_dtoa_r+0x786>
 800a2fc:	e0da      	b.n	800a4b4 <_dtoa_r+0x93c>
 800a2fe:	4abb      	ldr	r2, [pc, #748]	@ (800a5ec <_dtoa_r+0xa74>)
 800a300:	189b      	adds	r3, r3, r2
 800a302:	9a06      	ldr	r2, [sp, #24]
 800a304:	2101      	movs	r1, #1
 800a306:	18d2      	adds	r2, r2, r3
 800a308:	9206      	str	r2, [sp, #24]
 800a30a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a30c:	9803      	ldr	r0, [sp, #12]
 800a30e:	18d3      	adds	r3, r2, r3
 800a310:	930d      	str	r3, [sp, #52]	@ 0x34
 800a312:	f000 fc23 	bl	800ab5c <__i2b>
 800a316:	0007      	movs	r7, r0
 800a318:	2c00      	cmp	r4, #0
 800a31a:	d00e      	beq.n	800a33a <_dtoa_r+0x7c2>
 800a31c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd0b      	ble.n	800a33a <_dtoa_r+0x7c2>
 800a322:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a324:	0023      	movs	r3, r4
 800a326:	4294      	cmp	r4, r2
 800a328:	dd00      	ble.n	800a32c <_dtoa_r+0x7b4>
 800a32a:	0013      	movs	r3, r2
 800a32c:	9a06      	ldr	r2, [sp, #24]
 800a32e:	1ae4      	subs	r4, r4, r3
 800a330:	1ad2      	subs	r2, r2, r3
 800a332:	9206      	str	r2, [sp, #24]
 800a334:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	930d      	str	r3, [sp, #52]	@ 0x34
 800a33a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d021      	beq.n	800a384 <_dtoa_r+0x80c>
 800a340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	d100      	bne.n	800a348 <_dtoa_r+0x7d0>
 800a346:	e0d3      	b.n	800a4f0 <_dtoa_r+0x978>
 800a348:	9e05      	ldr	r6, [sp, #20]
 800a34a:	2d00      	cmp	r5, #0
 800a34c:	d014      	beq.n	800a378 <_dtoa_r+0x800>
 800a34e:	0039      	movs	r1, r7
 800a350:	002a      	movs	r2, r5
 800a352:	9803      	ldr	r0, [sp, #12]
 800a354:	f000 fcc4 	bl	800ace0 <__pow5mult>
 800a358:	9a05      	ldr	r2, [sp, #20]
 800a35a:	0001      	movs	r1, r0
 800a35c:	0007      	movs	r7, r0
 800a35e:	9803      	ldr	r0, [sp, #12]
 800a360:	f000 fc14 	bl	800ab8c <__multiply>
 800a364:	0006      	movs	r6, r0
 800a366:	9905      	ldr	r1, [sp, #20]
 800a368:	9803      	ldr	r0, [sp, #12]
 800a36a:	f000 fb3f 	bl	800a9ec <_Bfree>
 800a36e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a370:	9605      	str	r6, [sp, #20]
 800a372:	1b5b      	subs	r3, r3, r5
 800a374:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a376:	d005      	beq.n	800a384 <_dtoa_r+0x80c>
 800a378:	0031      	movs	r1, r6
 800a37a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a37c:	9803      	ldr	r0, [sp, #12]
 800a37e:	f000 fcaf 	bl	800ace0 <__pow5mult>
 800a382:	9005      	str	r0, [sp, #20]
 800a384:	2101      	movs	r1, #1
 800a386:	9803      	ldr	r0, [sp, #12]
 800a388:	f000 fbe8 	bl	800ab5c <__i2b>
 800a38c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a38e:	0006      	movs	r6, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d100      	bne.n	800a396 <_dtoa_r+0x81e>
 800a394:	e1bc      	b.n	800a710 <_dtoa_r+0xb98>
 800a396:	001a      	movs	r2, r3
 800a398:	0001      	movs	r1, r0
 800a39a:	9803      	ldr	r0, [sp, #12]
 800a39c:	f000 fca0 	bl	800ace0 <__pow5mult>
 800a3a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a3a2:	0006      	movs	r6, r0
 800a3a4:	2500      	movs	r5, #0
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	dc16      	bgt.n	800a3d8 <_dtoa_r+0x860>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ae:	42ab      	cmp	r3, r5
 800a3b0:	d10e      	bne.n	800a3d0 <_dtoa_r+0x858>
 800a3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3b4:	031b      	lsls	r3, r3, #12
 800a3b6:	42ab      	cmp	r3, r5
 800a3b8:	d10a      	bne.n	800a3d0 <_dtoa_r+0x858>
 800a3ba:	4b8d      	ldr	r3, [pc, #564]	@ (800a5f0 <_dtoa_r+0xa78>)
 800a3bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a3be:	4213      	tst	r3, r2
 800a3c0:	d006      	beq.n	800a3d0 <_dtoa_r+0x858>
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	9306      	str	r3, [sp, #24]
 800a3ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800a3d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d008      	beq.n	800a3ea <_dtoa_r+0x872>
 800a3d8:	6933      	ldr	r3, [r6, #16]
 800a3da:	3303      	adds	r3, #3
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	18f3      	adds	r3, r6, r3
 800a3e0:	6858      	ldr	r0, [r3, #4]
 800a3e2:	f000 fb6b 	bl	800aabc <__hi0bits>
 800a3e6:	2320      	movs	r3, #32
 800a3e8:	1a18      	subs	r0, r3, r0
 800a3ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3ec:	1818      	adds	r0, r3, r0
 800a3ee:	0002      	movs	r2, r0
 800a3f0:	231f      	movs	r3, #31
 800a3f2:	401a      	ands	r2, r3
 800a3f4:	4218      	tst	r0, r3
 800a3f6:	d100      	bne.n	800a3fa <_dtoa_r+0x882>
 800a3f8:	e081      	b.n	800a4fe <_dtoa_r+0x986>
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	dd79      	ble.n	800a4f6 <_dtoa_r+0x97e>
 800a402:	231c      	movs	r3, #28
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	9a06      	ldr	r2, [sp, #24]
 800a408:	18e4      	adds	r4, r4, r3
 800a40a:	18d2      	adds	r2, r2, r3
 800a40c:	9206      	str	r2, [sp, #24]
 800a40e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a410:	18d3      	adds	r3, r2, r3
 800a412:	930d      	str	r3, [sp, #52]	@ 0x34
 800a414:	9b06      	ldr	r3, [sp, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dd05      	ble.n	800a426 <_dtoa_r+0x8ae>
 800a41a:	001a      	movs	r2, r3
 800a41c:	9905      	ldr	r1, [sp, #20]
 800a41e:	9803      	ldr	r0, [sp, #12]
 800a420:	f000 fcba 	bl	800ad98 <__lshift>
 800a424:	9005      	str	r0, [sp, #20]
 800a426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dd05      	ble.n	800a438 <_dtoa_r+0x8c0>
 800a42c:	0031      	movs	r1, r6
 800a42e:	001a      	movs	r2, r3
 800a430:	9803      	ldr	r0, [sp, #12]
 800a432:	f000 fcb1 	bl	800ad98 <__lshift>
 800a436:	0006      	movs	r6, r0
 800a438:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d061      	beq.n	800a502 <_dtoa_r+0x98a>
 800a43e:	0031      	movs	r1, r6
 800a440:	9805      	ldr	r0, [sp, #20]
 800a442:	f000 fd15 	bl	800ae70 <__mcmp>
 800a446:	2800      	cmp	r0, #0
 800a448:	da5b      	bge.n	800a502 <_dtoa_r+0x98a>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	220a      	movs	r2, #10
 800a44e:	3b01      	subs	r3, #1
 800a450:	930c      	str	r3, [sp, #48]	@ 0x30
 800a452:	9905      	ldr	r1, [sp, #20]
 800a454:	2300      	movs	r3, #0
 800a456:	9803      	ldr	r0, [sp, #12]
 800a458:	f000 faec 	bl	800aa34 <__multadd>
 800a45c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a45e:	9005      	str	r0, [sp, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d100      	bne.n	800a466 <_dtoa_r+0x8ee>
 800a464:	e15b      	b.n	800a71e <_dtoa_r+0xba6>
 800a466:	2300      	movs	r3, #0
 800a468:	0039      	movs	r1, r7
 800a46a:	220a      	movs	r2, #10
 800a46c:	9803      	ldr	r0, [sp, #12]
 800a46e:	f000 fae1 	bl	800aa34 <__multadd>
 800a472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a474:	0007      	movs	r7, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	dc4d      	bgt.n	800a516 <_dtoa_r+0x99e>
 800a47a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	dd46      	ble.n	800a50e <_dtoa_r+0x996>
 800a480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a482:	2b00      	cmp	r3, #0
 800a484:	d000      	beq.n	800a488 <_dtoa_r+0x910>
 800a486:	e5db      	b.n	800a040 <_dtoa_r+0x4c8>
 800a488:	0031      	movs	r1, r6
 800a48a:	2205      	movs	r2, #5
 800a48c:	9803      	ldr	r0, [sp, #12]
 800a48e:	f000 fad1 	bl	800aa34 <__multadd>
 800a492:	0006      	movs	r6, r0
 800a494:	0001      	movs	r1, r0
 800a496:	9805      	ldr	r0, [sp, #20]
 800a498:	f000 fcea 	bl	800ae70 <__mcmp>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dc00      	bgt.n	800a4a2 <_dtoa_r+0x92a>
 800a4a0:	e5ce      	b.n	800a040 <_dtoa_r+0x4c8>
 800a4a2:	9b08      	ldr	r3, [sp, #32]
 800a4a4:	9a08      	ldr	r2, [sp, #32]
 800a4a6:	1c5c      	adds	r4, r3, #1
 800a4a8:	2331      	movs	r3, #49	@ 0x31
 800a4aa:	7013      	strb	r3, [r2, #0]
 800a4ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4b2:	e5c9      	b.n	800a048 <_dtoa_r+0x4d0>
 800a4b4:	2336      	movs	r3, #54	@ 0x36
 800a4b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4b8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	9c06      	ldr	r4, [sp, #24]
 800a4be:	e720      	b.n	800a302 <_dtoa_r+0x78a>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c2:	1e5d      	subs	r5, r3, #1
 800a4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c6:	42ab      	cmp	r3, r5
 800a4c8:	db08      	blt.n	800a4dc <_dtoa_r+0x964>
 800a4ca:	1b5d      	subs	r5, r3, r5
 800a4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	daf4      	bge.n	800a4bc <_dtoa_r+0x944>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d6:	1a9c      	subs	r4, r3, r2
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e712      	b.n	800a302 <_dtoa_r+0x78a>
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a4e0:	1aeb      	subs	r3, r5, r3
 800a4e2:	18d3      	adds	r3, r2, r3
 800a4e4:	9314      	str	r3, [sp, #80]	@ 0x50
 800a4e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a4e8:	9c06      	ldr	r4, [sp, #24]
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ee:	e708      	b.n	800a302 <_dtoa_r+0x78a>
 800a4f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a4f2:	9905      	ldr	r1, [sp, #20]
 800a4f4:	e742      	b.n	800a37c <_dtoa_r+0x804>
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d08c      	beq.n	800a414 <_dtoa_r+0x89c>
 800a4fa:	331c      	adds	r3, #28
 800a4fc:	e783      	b.n	800a406 <_dtoa_r+0x88e>
 800a4fe:	0013      	movs	r3, r2
 800a500:	e7fb      	b.n	800a4fa <_dtoa_r+0x982>
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	930c      	str	r3, [sp, #48]	@ 0x30
 800a506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a508:	930e      	str	r3, [sp, #56]	@ 0x38
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	ddb5      	ble.n	800a47a <_dtoa_r+0x902>
 800a50e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d100      	bne.n	800a516 <_dtoa_r+0x99e>
 800a514:	e107      	b.n	800a726 <_dtoa_r+0xbae>
 800a516:	2c00      	cmp	r4, #0
 800a518:	dd05      	ble.n	800a526 <_dtoa_r+0x9ae>
 800a51a:	0039      	movs	r1, r7
 800a51c:	0022      	movs	r2, r4
 800a51e:	9803      	ldr	r0, [sp, #12]
 800a520:	f000 fc3a 	bl	800ad98 <__lshift>
 800a524:	0007      	movs	r7, r0
 800a526:	9704      	str	r7, [sp, #16]
 800a528:	2d00      	cmp	r5, #0
 800a52a:	d020      	beq.n	800a56e <_dtoa_r+0x9f6>
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	9803      	ldr	r0, [sp, #12]
 800a530:	f000 fa18 	bl	800a964 <_Balloc>
 800a534:	1e04      	subs	r4, r0, #0
 800a536:	d10c      	bne.n	800a552 <_dtoa_r+0x9da>
 800a538:	0022      	movs	r2, r4
 800a53a:	4b2e      	ldr	r3, [pc, #184]	@ (800a5f4 <_dtoa_r+0xa7c>)
 800a53c:	482e      	ldr	r0, [pc, #184]	@ (800a5f8 <_dtoa_r+0xa80>)
 800a53e:	492f      	ldr	r1, [pc, #188]	@ (800a5fc <_dtoa_r+0xa84>)
 800a540:	f7ff fb2f 	bl	8009ba2 <_dtoa_r+0x2a>
 800a544:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a546:	0037      	movs	r7, r6
 800a548:	e7ab      	b.n	800a4a2 <_dtoa_r+0x92a>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a54e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a550:	e7f9      	b.n	800a546 <_dtoa_r+0x9ce>
 800a552:	0039      	movs	r1, r7
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	310c      	adds	r1, #12
 800a558:	3202      	adds	r2, #2
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	300c      	adds	r0, #12
 800a55e:	f000 ffd1 	bl	800b504 <memcpy>
 800a562:	2201      	movs	r2, #1
 800a564:	0021      	movs	r1, r4
 800a566:	9803      	ldr	r0, [sp, #12]
 800a568:	f000 fc16 	bl	800ad98 <__lshift>
 800a56c:	9004      	str	r0, [sp, #16]
 800a56e:	9b08      	ldr	r3, [sp, #32]
 800a570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a572:	9306      	str	r3, [sp, #24]
 800a574:	3b01      	subs	r3, #1
 800a576:	189b      	adds	r3, r3, r2
 800a578:	2201      	movs	r2, #1
 800a57a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a57e:	4013      	ands	r3, r2
 800a580:	930e      	str	r3, [sp, #56]	@ 0x38
 800a582:	0031      	movs	r1, r6
 800a584:	9805      	ldr	r0, [sp, #20]
 800a586:	f7ff fa71 	bl	8009a6c <quorem>
 800a58a:	0039      	movs	r1, r7
 800a58c:	0005      	movs	r5, r0
 800a58e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a590:	9805      	ldr	r0, [sp, #20]
 800a592:	f000 fc6d 	bl	800ae70 <__mcmp>
 800a596:	9a04      	ldr	r2, [sp, #16]
 800a598:	900d      	str	r0, [sp, #52]	@ 0x34
 800a59a:	0031      	movs	r1, r6
 800a59c:	9803      	ldr	r0, [sp, #12]
 800a59e:	f000 fc83 	bl	800aea8 <__mdiff>
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	68c3      	ldr	r3, [r0, #12]
 800a5a6:	0004      	movs	r4, r0
 800a5a8:	3530      	adds	r5, #48	@ 0x30
 800a5aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <_dtoa_r+0xa42>
 800a5b0:	0001      	movs	r1, r0
 800a5b2:	9805      	ldr	r0, [sp, #20]
 800a5b4:	f000 fc5c 	bl	800ae70 <__mcmp>
 800a5b8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5ba:	0021      	movs	r1, r4
 800a5bc:	9803      	ldr	r0, [sp, #12]
 800a5be:	f000 fa15 	bl	800a9ec <_Bfree>
 800a5c2:	9b06      	ldr	r3, [sp, #24]
 800a5c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a5c6:	1c5c      	adds	r4, r3, #1
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	d116      	bne.n	800a600 <_dtoa_r+0xa88>
 800a5d2:	2d39      	cmp	r5, #57	@ 0x39
 800a5d4:	d02f      	beq.n	800a636 <_dtoa_r+0xabe>
 800a5d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dd01      	ble.n	800a5e0 <_dtoa_r+0xa68>
 800a5dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a5de:	3531      	adds	r5, #49	@ 0x31
 800a5e0:	9b06      	ldr	r3, [sp, #24]
 800a5e2:	701d      	strb	r5, [r3, #0]
 800a5e4:	e532      	b.n	800a04c <_dtoa_r+0x4d4>
 800a5e6:	46c0      	nop			@ (mov r8, r8)
 800a5e8:	40240000 	.word	0x40240000
 800a5ec:	00000433 	.word	0x00000433
 800a5f0:	7ff00000 	.word	0x7ff00000
 800a5f4:	0800be60 	.word	0x0800be60
 800a5f8:	0800be08 	.word	0x0800be08
 800a5fc:	000002ef 	.word	0x000002ef
 800a600:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a602:	2b00      	cmp	r3, #0
 800a604:	db04      	blt.n	800a610 <_dtoa_r+0xa98>
 800a606:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a608:	4313      	orrs	r3, r2
 800a60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60c:	4313      	orrs	r3, r2
 800a60e:	d11e      	bne.n	800a64e <_dtoa_r+0xad6>
 800a610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a612:	2b00      	cmp	r3, #0
 800a614:	dde4      	ble.n	800a5e0 <_dtoa_r+0xa68>
 800a616:	9905      	ldr	r1, [sp, #20]
 800a618:	2201      	movs	r2, #1
 800a61a:	9803      	ldr	r0, [sp, #12]
 800a61c:	f000 fbbc 	bl	800ad98 <__lshift>
 800a620:	0031      	movs	r1, r6
 800a622:	9005      	str	r0, [sp, #20]
 800a624:	f000 fc24 	bl	800ae70 <__mcmp>
 800a628:	2800      	cmp	r0, #0
 800a62a:	dc02      	bgt.n	800a632 <_dtoa_r+0xaba>
 800a62c:	d1d8      	bne.n	800a5e0 <_dtoa_r+0xa68>
 800a62e:	07eb      	lsls	r3, r5, #31
 800a630:	d5d6      	bpl.n	800a5e0 <_dtoa_r+0xa68>
 800a632:	2d39      	cmp	r5, #57	@ 0x39
 800a634:	d1d2      	bne.n	800a5dc <_dtoa_r+0xa64>
 800a636:	2339      	movs	r3, #57	@ 0x39
 800a638:	9a06      	ldr	r2, [sp, #24]
 800a63a:	7013      	strb	r3, [r2, #0]
 800a63c:	0023      	movs	r3, r4
 800a63e:	001c      	movs	r4, r3
 800a640:	3b01      	subs	r3, #1
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	2a39      	cmp	r2, #57	@ 0x39
 800a646:	d050      	beq.n	800a6ea <_dtoa_r+0xb72>
 800a648:	3201      	adds	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e4fe      	b.n	800a04c <_dtoa_r+0x4d4>
 800a64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a650:	2b00      	cmp	r3, #0
 800a652:	dd03      	ble.n	800a65c <_dtoa_r+0xae4>
 800a654:	2d39      	cmp	r5, #57	@ 0x39
 800a656:	d0ee      	beq.n	800a636 <_dtoa_r+0xabe>
 800a658:	3501      	adds	r5, #1
 800a65a:	e7c1      	b.n	800a5e0 <_dtoa_r+0xa68>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	9a06      	ldr	r2, [sp, #24]
 800a660:	701d      	strb	r5, [r3, #0]
 800a662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a664:	4293      	cmp	r3, r2
 800a666:	d02b      	beq.n	800a6c0 <_dtoa_r+0xb48>
 800a668:	2300      	movs	r3, #0
 800a66a:	220a      	movs	r2, #10
 800a66c:	9905      	ldr	r1, [sp, #20]
 800a66e:	9803      	ldr	r0, [sp, #12]
 800a670:	f000 f9e0 	bl	800aa34 <__multadd>
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	9005      	str	r0, [sp, #20]
 800a678:	429f      	cmp	r7, r3
 800a67a:	d109      	bne.n	800a690 <_dtoa_r+0xb18>
 800a67c:	0039      	movs	r1, r7
 800a67e:	2300      	movs	r3, #0
 800a680:	220a      	movs	r2, #10
 800a682:	9803      	ldr	r0, [sp, #12]
 800a684:	f000 f9d6 	bl	800aa34 <__multadd>
 800a688:	0007      	movs	r7, r0
 800a68a:	9004      	str	r0, [sp, #16]
 800a68c:	9406      	str	r4, [sp, #24]
 800a68e:	e778      	b.n	800a582 <_dtoa_r+0xa0a>
 800a690:	0039      	movs	r1, r7
 800a692:	2300      	movs	r3, #0
 800a694:	220a      	movs	r2, #10
 800a696:	9803      	ldr	r0, [sp, #12]
 800a698:	f000 f9cc 	bl	800aa34 <__multadd>
 800a69c:	2300      	movs	r3, #0
 800a69e:	0007      	movs	r7, r0
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	9904      	ldr	r1, [sp, #16]
 800a6a4:	9803      	ldr	r0, [sp, #12]
 800a6a6:	f000 f9c5 	bl	800aa34 <__multadd>
 800a6aa:	9004      	str	r0, [sp, #16]
 800a6ac:	e7ee      	b.n	800a68c <_dtoa_r+0xb14>
 800a6ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b0:	2401      	movs	r4, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	dd00      	ble.n	800a6b8 <_dtoa_r+0xb40>
 800a6b6:	001c      	movs	r4, r3
 800a6b8:	9704      	str	r7, [sp, #16]
 800a6ba:	2700      	movs	r7, #0
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	191c      	adds	r4, r3, r4
 800a6c0:	9905      	ldr	r1, [sp, #20]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	9803      	ldr	r0, [sp, #12]
 800a6c6:	f000 fb67 	bl	800ad98 <__lshift>
 800a6ca:	0031      	movs	r1, r6
 800a6cc:	9005      	str	r0, [sp, #20]
 800a6ce:	f000 fbcf 	bl	800ae70 <__mcmp>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	dcb2      	bgt.n	800a63c <_dtoa_r+0xac4>
 800a6d6:	d101      	bne.n	800a6dc <_dtoa_r+0xb64>
 800a6d8:	07ed      	lsls	r5, r5, #31
 800a6da:	d4af      	bmi.n	800a63c <_dtoa_r+0xac4>
 800a6dc:	0023      	movs	r3, r4
 800a6de:	001c      	movs	r4, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	781a      	ldrb	r2, [r3, #0]
 800a6e4:	2a30      	cmp	r2, #48	@ 0x30
 800a6e6:	d0fa      	beq.n	800a6de <_dtoa_r+0xb66>
 800a6e8:	e4b0      	b.n	800a04c <_dtoa_r+0x4d4>
 800a6ea:	9a08      	ldr	r2, [sp, #32]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d1a6      	bne.n	800a63e <_dtoa_r+0xac6>
 800a6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6f6:	2331      	movs	r3, #49	@ 0x31
 800a6f8:	7013      	strb	r3, [r2, #0]
 800a6fa:	e4a7      	b.n	800a04c <_dtoa_r+0x4d4>
 800a6fc:	4b14      	ldr	r3, [pc, #80]	@ (800a750 <_dtoa_r+0xbd8>)
 800a6fe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a700:	9308      	str	r3, [sp, #32]
 800a702:	4b14      	ldr	r3, [pc, #80]	@ (800a754 <_dtoa_r+0xbdc>)
 800a704:	2a00      	cmp	r2, #0
 800a706:	d001      	beq.n	800a70c <_dtoa_r+0xb94>
 800a708:	f7ff fa7e 	bl	8009c08 <_dtoa_r+0x90>
 800a70c:	f7ff fa7e 	bl	8009c0c <_dtoa_r+0x94>
 800a710:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a712:	2b01      	cmp	r3, #1
 800a714:	dc00      	bgt.n	800a718 <_dtoa_r+0xba0>
 800a716:	e648      	b.n	800a3aa <_dtoa_r+0x832>
 800a718:	2001      	movs	r0, #1
 800a71a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a71c:	e665      	b.n	800a3ea <_dtoa_r+0x872>
 800a71e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc00      	bgt.n	800a726 <_dtoa_r+0xbae>
 800a724:	e6a9      	b.n	800a47a <_dtoa_r+0x902>
 800a726:	2400      	movs	r4, #0
 800a728:	0031      	movs	r1, r6
 800a72a:	9805      	ldr	r0, [sp, #20]
 800a72c:	f7ff f99e 	bl	8009a6c <quorem>
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	3030      	adds	r0, #48	@ 0x30
 800a734:	5518      	strb	r0, [r3, r4]
 800a736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a738:	3401      	adds	r4, #1
 800a73a:	0005      	movs	r5, r0
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	ddb6      	ble.n	800a6ae <_dtoa_r+0xb36>
 800a740:	2300      	movs	r3, #0
 800a742:	220a      	movs	r2, #10
 800a744:	9905      	ldr	r1, [sp, #20]
 800a746:	9803      	ldr	r0, [sp, #12]
 800a748:	f000 f974 	bl	800aa34 <__multadd>
 800a74c:	9005      	str	r0, [sp, #20]
 800a74e:	e7eb      	b.n	800a728 <_dtoa_r+0xbb0>
 800a750:	0800bde4 	.word	0x0800bde4
 800a754:	0800bdec 	.word	0x0800bdec

0800a758 <_free_r>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	0005      	movs	r5, r0
 800a75c:	1e0c      	subs	r4, r1, #0
 800a75e:	d010      	beq.n	800a782 <_free_r+0x2a>
 800a760:	3c04      	subs	r4, #4
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	da00      	bge.n	800a76a <_free_r+0x12>
 800a768:	18e4      	adds	r4, r4, r3
 800a76a:	0028      	movs	r0, r5
 800a76c:	f000 f8ea 	bl	800a944 <__malloc_lock>
 800a770:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e8 <_free_r+0x90>)
 800a772:	6813      	ldr	r3, [r2, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d105      	bne.n	800a784 <_free_r+0x2c>
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	6014      	str	r4, [r2, #0]
 800a77c:	0028      	movs	r0, r5
 800a77e:	f000 f8e9 	bl	800a954 <__malloc_unlock>
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	42a3      	cmp	r3, r4
 800a786:	d908      	bls.n	800a79a <_free_r+0x42>
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	1821      	adds	r1, r4, r0
 800a78c:	428b      	cmp	r3, r1
 800a78e:	d1f3      	bne.n	800a778 <_free_r+0x20>
 800a790:	6819      	ldr	r1, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	1809      	adds	r1, r1, r0
 800a796:	6021      	str	r1, [r4, #0]
 800a798:	e7ee      	b.n	800a778 <_free_r+0x20>
 800a79a:	001a      	movs	r2, r3
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <_free_r+0x4e>
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	d9f9      	bls.n	800a79a <_free_r+0x42>
 800a7a6:	6811      	ldr	r1, [r2, #0]
 800a7a8:	1850      	adds	r0, r2, r1
 800a7aa:	42a0      	cmp	r0, r4
 800a7ac:	d10b      	bne.n	800a7c6 <_free_r+0x6e>
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	1809      	adds	r1, r1, r0
 800a7b2:	1850      	adds	r0, r2, r1
 800a7b4:	6011      	str	r1, [r2, #0]
 800a7b6:	4283      	cmp	r3, r0
 800a7b8:	d1e0      	bne.n	800a77c <_free_r+0x24>
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	1841      	adds	r1, r0, r1
 800a7c0:	6011      	str	r1, [r2, #0]
 800a7c2:	6053      	str	r3, [r2, #4]
 800a7c4:	e7da      	b.n	800a77c <_free_r+0x24>
 800a7c6:	42a0      	cmp	r0, r4
 800a7c8:	d902      	bls.n	800a7d0 <_free_r+0x78>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	e7d5      	b.n	800a77c <_free_r+0x24>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	1821      	adds	r1, r4, r0
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	d103      	bne.n	800a7e0 <_free_r+0x88>
 800a7d8:	6819      	ldr	r1, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	1809      	adds	r1, r1, r0
 800a7de:	6021      	str	r1, [r4, #0]
 800a7e0:	6063      	str	r3, [r4, #4]
 800a7e2:	6054      	str	r4, [r2, #4]
 800a7e4:	e7ca      	b.n	800a77c <_free_r+0x24>
 800a7e6:	46c0      	nop			@ (mov r8, r8)
 800a7e8:	2000064c 	.word	0x2000064c

0800a7ec <malloc>:
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	4b03      	ldr	r3, [pc, #12]	@ (800a7fc <malloc+0x10>)
 800a7f0:	0001      	movs	r1, r0
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	f000 f826 	bl	800a844 <_malloc_r>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			@ (mov r8, r8)
 800a7fc:	20000018 	.word	0x20000018

0800a800 <sbrk_aligned>:
 800a800:	b570      	push	{r4, r5, r6, lr}
 800a802:	4e0f      	ldr	r6, [pc, #60]	@ (800a840 <sbrk_aligned+0x40>)
 800a804:	000d      	movs	r5, r1
 800a806:	6831      	ldr	r1, [r6, #0]
 800a808:	0004      	movs	r4, r0
 800a80a:	2900      	cmp	r1, #0
 800a80c:	d102      	bne.n	800a814 <sbrk_aligned+0x14>
 800a80e:	f000 fe67 	bl	800b4e0 <_sbrk_r>
 800a812:	6030      	str	r0, [r6, #0]
 800a814:	0029      	movs	r1, r5
 800a816:	0020      	movs	r0, r4
 800a818:	f000 fe62 	bl	800b4e0 <_sbrk_r>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d103      	bne.n	800a828 <sbrk_aligned+0x28>
 800a820:	2501      	movs	r5, #1
 800a822:	426d      	negs	r5, r5
 800a824:	0028      	movs	r0, r5
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	2303      	movs	r3, #3
 800a82a:	1cc5      	adds	r5, r0, #3
 800a82c:	439d      	bics	r5, r3
 800a82e:	42a8      	cmp	r0, r5
 800a830:	d0f8      	beq.n	800a824 <sbrk_aligned+0x24>
 800a832:	1a29      	subs	r1, r5, r0
 800a834:	0020      	movs	r0, r4
 800a836:	f000 fe53 	bl	800b4e0 <_sbrk_r>
 800a83a:	3001      	adds	r0, #1
 800a83c:	d1f2      	bne.n	800a824 <sbrk_aligned+0x24>
 800a83e:	e7ef      	b.n	800a820 <sbrk_aligned+0x20>
 800a840:	20000648 	.word	0x20000648

0800a844 <_malloc_r>:
 800a844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a846:	2203      	movs	r2, #3
 800a848:	1ccb      	adds	r3, r1, #3
 800a84a:	4393      	bics	r3, r2
 800a84c:	3308      	adds	r3, #8
 800a84e:	0005      	movs	r5, r0
 800a850:	001f      	movs	r7, r3
 800a852:	2b0c      	cmp	r3, #12
 800a854:	d234      	bcs.n	800a8c0 <_malloc_r+0x7c>
 800a856:	270c      	movs	r7, #12
 800a858:	42b9      	cmp	r1, r7
 800a85a:	d833      	bhi.n	800a8c4 <_malloc_r+0x80>
 800a85c:	0028      	movs	r0, r5
 800a85e:	f000 f871 	bl	800a944 <__malloc_lock>
 800a862:	4e37      	ldr	r6, [pc, #220]	@ (800a940 <_malloc_r+0xfc>)
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	001c      	movs	r4, r3
 800a868:	2c00      	cmp	r4, #0
 800a86a:	d12f      	bne.n	800a8cc <_malloc_r+0x88>
 800a86c:	0039      	movs	r1, r7
 800a86e:	0028      	movs	r0, r5
 800a870:	f7ff ffc6 	bl	800a800 <sbrk_aligned>
 800a874:	0004      	movs	r4, r0
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	d15f      	bne.n	800a93a <_malloc_r+0xf6>
 800a87a:	6834      	ldr	r4, [r6, #0]
 800a87c:	9400      	str	r4, [sp, #0]
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d14a      	bne.n	800a91a <_malloc_r+0xd6>
 800a884:	2c00      	cmp	r4, #0
 800a886:	d052      	beq.n	800a92e <_malloc_r+0xea>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	0028      	movs	r0, r5
 800a88c:	18e3      	adds	r3, r4, r3
 800a88e:	9900      	ldr	r1, [sp, #0]
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f000 fe25 	bl	800b4e0 <_sbrk_r>
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	4283      	cmp	r3, r0
 800a89a:	d148      	bne.n	800a92e <_malloc_r+0xea>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	0028      	movs	r0, r5
 800a8a0:	1aff      	subs	r7, r7, r3
 800a8a2:	0039      	movs	r1, r7
 800a8a4:	f7ff ffac 	bl	800a800 <sbrk_aligned>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d040      	beq.n	800a92e <_malloc_r+0xea>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	19db      	adds	r3, r3, r7
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	6833      	ldr	r3, [r6, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	2a00      	cmp	r2, #0
 800a8b8:	d133      	bne.n	800a922 <_malloc_r+0xde>
 800a8ba:	9b00      	ldr	r3, [sp, #0]
 800a8bc:	6033      	str	r3, [r6, #0]
 800a8be:	e019      	b.n	800a8f4 <_malloc_r+0xb0>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dac9      	bge.n	800a858 <_malloc_r+0x14>
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8cc:	6821      	ldr	r1, [r4, #0]
 800a8ce:	1bc9      	subs	r1, r1, r7
 800a8d0:	d420      	bmi.n	800a914 <_malloc_r+0xd0>
 800a8d2:	290b      	cmp	r1, #11
 800a8d4:	d90a      	bls.n	800a8ec <_malloc_r+0xa8>
 800a8d6:	19e2      	adds	r2, r4, r7
 800a8d8:	6027      	str	r7, [r4, #0]
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	d104      	bne.n	800a8e8 <_malloc_r+0xa4>
 800a8de:	6032      	str	r2, [r6, #0]
 800a8e0:	6863      	ldr	r3, [r4, #4]
 800a8e2:	6011      	str	r1, [r2, #0]
 800a8e4:	6053      	str	r3, [r2, #4]
 800a8e6:	e005      	b.n	800a8f4 <_malloc_r+0xb0>
 800a8e8:	605a      	str	r2, [r3, #4]
 800a8ea:	e7f9      	b.n	800a8e0 <_malloc_r+0x9c>
 800a8ec:	6862      	ldr	r2, [r4, #4]
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	d10e      	bne.n	800a910 <_malloc_r+0xcc>
 800a8f2:	6032      	str	r2, [r6, #0]
 800a8f4:	0028      	movs	r0, r5
 800a8f6:	f000 f82d 	bl	800a954 <__malloc_unlock>
 800a8fa:	0020      	movs	r0, r4
 800a8fc:	2207      	movs	r2, #7
 800a8fe:	300b      	adds	r0, #11
 800a900:	1d23      	adds	r3, r4, #4
 800a902:	4390      	bics	r0, r2
 800a904:	1ac2      	subs	r2, r0, r3
 800a906:	4298      	cmp	r0, r3
 800a908:	d0df      	beq.n	800a8ca <_malloc_r+0x86>
 800a90a:	1a1b      	subs	r3, r3, r0
 800a90c:	50a3      	str	r3, [r4, r2]
 800a90e:	e7dc      	b.n	800a8ca <_malloc_r+0x86>
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	e7ef      	b.n	800a8f4 <_malloc_r+0xb0>
 800a914:	0023      	movs	r3, r4
 800a916:	6864      	ldr	r4, [r4, #4]
 800a918:	e7a6      	b.n	800a868 <_malloc_r+0x24>
 800a91a:	9c00      	ldr	r4, [sp, #0]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	e7ad      	b.n	800a87e <_malloc_r+0x3a>
 800a922:	001a      	movs	r2, r3
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	42a3      	cmp	r3, r4
 800a928:	d1fb      	bne.n	800a922 <_malloc_r+0xde>
 800a92a:	2300      	movs	r3, #0
 800a92c:	e7da      	b.n	800a8e4 <_malloc_r+0xa0>
 800a92e:	230c      	movs	r3, #12
 800a930:	0028      	movs	r0, r5
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f000 f80e 	bl	800a954 <__malloc_unlock>
 800a938:	e7c6      	b.n	800a8c8 <_malloc_r+0x84>
 800a93a:	6007      	str	r7, [r0, #0]
 800a93c:	e7da      	b.n	800a8f4 <_malloc_r+0xb0>
 800a93e:	46c0      	nop			@ (mov r8, r8)
 800a940:	2000064c 	.word	0x2000064c

0800a944 <__malloc_lock>:
 800a944:	b510      	push	{r4, lr}
 800a946:	4802      	ldr	r0, [pc, #8]	@ (800a950 <__malloc_lock+0xc>)
 800a948:	f7ff f883 	bl	8009a52 <__retarget_lock_acquire_recursive>
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	46c0      	nop			@ (mov r8, r8)
 800a950:	20000644 	.word	0x20000644

0800a954 <__malloc_unlock>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4802      	ldr	r0, [pc, #8]	@ (800a960 <__malloc_unlock+0xc>)
 800a958:	f7ff f87c 	bl	8009a54 <__retarget_lock_release_recursive>
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	46c0      	nop			@ (mov r8, r8)
 800a960:	20000644 	.word	0x20000644

0800a964 <_Balloc>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	69c5      	ldr	r5, [r0, #28]
 800a968:	0006      	movs	r6, r0
 800a96a:	000c      	movs	r4, r1
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d10e      	bne.n	800a98e <_Balloc+0x2a>
 800a970:	2010      	movs	r0, #16
 800a972:	f7ff ff3b 	bl	800a7ec <malloc>
 800a976:	1e02      	subs	r2, r0, #0
 800a978:	61f0      	str	r0, [r6, #28]
 800a97a:	d104      	bne.n	800a986 <_Balloc+0x22>
 800a97c:	216b      	movs	r1, #107	@ 0x6b
 800a97e:	4b19      	ldr	r3, [pc, #100]	@ (800a9e4 <_Balloc+0x80>)
 800a980:	4819      	ldr	r0, [pc, #100]	@ (800a9e8 <_Balloc+0x84>)
 800a982:	f000 fdc9 	bl	800b518 <__assert_func>
 800a986:	6045      	str	r5, [r0, #4]
 800a988:	6085      	str	r5, [r0, #8]
 800a98a:	6005      	str	r5, [r0, #0]
 800a98c:	60c5      	str	r5, [r0, #12]
 800a98e:	69f5      	ldr	r5, [r6, #28]
 800a990:	68eb      	ldr	r3, [r5, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d013      	beq.n	800a9be <_Balloc+0x5a>
 800a996:	69f3      	ldr	r3, [r6, #28]
 800a998:	00a2      	lsls	r2, r4, #2
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	189b      	adds	r3, r3, r2
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d118      	bne.n	800a9d6 <_Balloc+0x72>
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	000d      	movs	r5, r1
 800a9a8:	40a5      	lsls	r5, r4
 800a9aa:	1d6a      	adds	r2, r5, #5
 800a9ac:	0030      	movs	r0, r6
 800a9ae:	0092      	lsls	r2, r2, #2
 800a9b0:	f000 fdd0 	bl	800b554 <_calloc_r>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d00c      	beq.n	800a9d2 <_Balloc+0x6e>
 800a9b8:	6044      	str	r4, [r0, #4]
 800a9ba:	6085      	str	r5, [r0, #8]
 800a9bc:	e00d      	b.n	800a9da <_Balloc+0x76>
 800a9be:	2221      	movs	r2, #33	@ 0x21
 800a9c0:	2104      	movs	r1, #4
 800a9c2:	0030      	movs	r0, r6
 800a9c4:	f000 fdc6 	bl	800b554 <_calloc_r>
 800a9c8:	69f3      	ldr	r3, [r6, #28]
 800a9ca:	60e8      	str	r0, [r5, #12]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e1      	bne.n	800a996 <_Balloc+0x32>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
 800a9d6:	6802      	ldr	r2, [r0, #0]
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	6103      	str	r3, [r0, #16]
 800a9de:	60c3      	str	r3, [r0, #12]
 800a9e0:	e7f8      	b.n	800a9d4 <_Balloc+0x70>
 800a9e2:	46c0      	nop			@ (mov r8, r8)
 800a9e4:	0800bdf1 	.word	0x0800bdf1
 800a9e8:	0800be71 	.word	0x0800be71

0800a9ec <_Bfree>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	69c6      	ldr	r6, [r0, #28]
 800a9f0:	0005      	movs	r5, r0
 800a9f2:	000c      	movs	r4, r1
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	d10e      	bne.n	800aa16 <_Bfree+0x2a>
 800a9f8:	2010      	movs	r0, #16
 800a9fa:	f7ff fef7 	bl	800a7ec <malloc>
 800a9fe:	1e02      	subs	r2, r0, #0
 800aa00:	61e8      	str	r0, [r5, #28]
 800aa02:	d104      	bne.n	800aa0e <_Bfree+0x22>
 800aa04:	218f      	movs	r1, #143	@ 0x8f
 800aa06:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <_Bfree+0x40>)
 800aa08:	4809      	ldr	r0, [pc, #36]	@ (800aa30 <_Bfree+0x44>)
 800aa0a:	f000 fd85 	bl	800b518 <__assert_func>
 800aa0e:	6046      	str	r6, [r0, #4]
 800aa10:	6086      	str	r6, [r0, #8]
 800aa12:	6006      	str	r6, [r0, #0]
 800aa14:	60c6      	str	r6, [r0, #12]
 800aa16:	2c00      	cmp	r4, #0
 800aa18:	d007      	beq.n	800aa2a <_Bfree+0x3e>
 800aa1a:	69eb      	ldr	r3, [r5, #28]
 800aa1c:	6862      	ldr	r2, [r4, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	6022      	str	r2, [r4, #0]
 800aa28:	601c      	str	r4, [r3, #0]
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	0800bdf1 	.word	0x0800bdf1
 800aa30:	0800be71 	.word	0x0800be71

0800aa34 <__multadd>:
 800aa34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa36:	000f      	movs	r7, r1
 800aa38:	9001      	str	r0, [sp, #4]
 800aa3a:	000c      	movs	r4, r1
 800aa3c:	001e      	movs	r6, r3
 800aa3e:	2000      	movs	r0, #0
 800aa40:	690d      	ldr	r5, [r1, #16]
 800aa42:	3714      	adds	r7, #20
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	3001      	adds	r0, #1
 800aa48:	b299      	uxth	r1, r3
 800aa4a:	4351      	muls	r1, r2
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	4353      	muls	r3, r2
 800aa50:	1989      	adds	r1, r1, r6
 800aa52:	0c0e      	lsrs	r6, r1, #16
 800aa54:	199b      	adds	r3, r3, r6
 800aa56:	0c1e      	lsrs	r6, r3, #16
 800aa58:	b289      	uxth	r1, r1
 800aa5a:	041b      	lsls	r3, r3, #16
 800aa5c:	185b      	adds	r3, r3, r1
 800aa5e:	c708      	stmia	r7!, {r3}
 800aa60:	4285      	cmp	r5, r0
 800aa62:	dcef      	bgt.n	800aa44 <__multadd+0x10>
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	d022      	beq.n	800aaae <__multadd+0x7a>
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	42ab      	cmp	r3, r5
 800aa6c:	dc19      	bgt.n	800aaa2 <__multadd+0x6e>
 800aa6e:	6861      	ldr	r1, [r4, #4]
 800aa70:	9801      	ldr	r0, [sp, #4]
 800aa72:	3101      	adds	r1, #1
 800aa74:	f7ff ff76 	bl	800a964 <_Balloc>
 800aa78:	1e07      	subs	r7, r0, #0
 800aa7a:	d105      	bne.n	800aa88 <__multadd+0x54>
 800aa7c:	003a      	movs	r2, r7
 800aa7e:	21ba      	movs	r1, #186	@ 0xba
 800aa80:	4b0c      	ldr	r3, [pc, #48]	@ (800aab4 <__multadd+0x80>)
 800aa82:	480d      	ldr	r0, [pc, #52]	@ (800aab8 <__multadd+0x84>)
 800aa84:	f000 fd48 	bl	800b518 <__assert_func>
 800aa88:	0021      	movs	r1, r4
 800aa8a:	6922      	ldr	r2, [r4, #16]
 800aa8c:	310c      	adds	r1, #12
 800aa8e:	3202      	adds	r2, #2
 800aa90:	0092      	lsls	r2, r2, #2
 800aa92:	300c      	adds	r0, #12
 800aa94:	f000 fd36 	bl	800b504 <memcpy>
 800aa98:	0021      	movs	r1, r4
 800aa9a:	9801      	ldr	r0, [sp, #4]
 800aa9c:	f7ff ffa6 	bl	800a9ec <_Bfree>
 800aaa0:	003c      	movs	r4, r7
 800aaa2:	1d2b      	adds	r3, r5, #4
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	18e3      	adds	r3, r4, r3
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	605e      	str	r6, [r3, #4]
 800aaac:	6125      	str	r5, [r4, #16]
 800aaae:	0020      	movs	r0, r4
 800aab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aab2:	46c0      	nop			@ (mov r8, r8)
 800aab4:	0800be60 	.word	0x0800be60
 800aab8:	0800be71 	.word	0x0800be71

0800aabc <__hi0bits>:
 800aabc:	2280      	movs	r2, #128	@ 0x80
 800aabe:	0003      	movs	r3, r0
 800aac0:	0252      	lsls	r2, r2, #9
 800aac2:	2000      	movs	r0, #0
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d201      	bcs.n	800aacc <__hi0bits+0x10>
 800aac8:	041b      	lsls	r3, r3, #16
 800aaca:	3010      	adds	r0, #16
 800aacc:	2280      	movs	r2, #128	@ 0x80
 800aace:	0452      	lsls	r2, r2, #17
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d201      	bcs.n	800aad8 <__hi0bits+0x1c>
 800aad4:	3008      	adds	r0, #8
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	2280      	movs	r2, #128	@ 0x80
 800aada:	0552      	lsls	r2, r2, #21
 800aadc:	4293      	cmp	r3, r2
 800aade:	d201      	bcs.n	800aae4 <__hi0bits+0x28>
 800aae0:	3004      	adds	r0, #4
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	2280      	movs	r2, #128	@ 0x80
 800aae6:	05d2      	lsls	r2, r2, #23
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d201      	bcs.n	800aaf0 <__hi0bits+0x34>
 800aaec:	3002      	adds	r0, #2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	db03      	blt.n	800aafc <__hi0bits+0x40>
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	4213      	tst	r3, r2
 800aaf8:	d100      	bne.n	800aafc <__hi0bits+0x40>
 800aafa:	2020      	movs	r0, #32
 800aafc:	4770      	bx	lr

0800aafe <__lo0bits>:
 800aafe:	6803      	ldr	r3, [r0, #0]
 800ab00:	0001      	movs	r1, r0
 800ab02:	2207      	movs	r2, #7
 800ab04:	0018      	movs	r0, r3
 800ab06:	4010      	ands	r0, r2
 800ab08:	4213      	tst	r3, r2
 800ab0a:	d00d      	beq.n	800ab28 <__lo0bits+0x2a>
 800ab0c:	3a06      	subs	r2, #6
 800ab0e:	2000      	movs	r0, #0
 800ab10:	4213      	tst	r3, r2
 800ab12:	d105      	bne.n	800ab20 <__lo0bits+0x22>
 800ab14:	3002      	adds	r0, #2
 800ab16:	4203      	tst	r3, r0
 800ab18:	d003      	beq.n	800ab22 <__lo0bits+0x24>
 800ab1a:	40d3      	lsrs	r3, r2
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	600b      	str	r3, [r1, #0]
 800ab20:	4770      	bx	lr
 800ab22:	089b      	lsrs	r3, r3, #2
 800ab24:	600b      	str	r3, [r1, #0]
 800ab26:	e7fb      	b.n	800ab20 <__lo0bits+0x22>
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	2a00      	cmp	r2, #0
 800ab2c:	d101      	bne.n	800ab32 <__lo0bits+0x34>
 800ab2e:	2010      	movs	r0, #16
 800ab30:	0c1b      	lsrs	r3, r3, #16
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	2a00      	cmp	r2, #0
 800ab36:	d101      	bne.n	800ab3c <__lo0bits+0x3e>
 800ab38:	3008      	adds	r0, #8
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	071a      	lsls	r2, r3, #28
 800ab3e:	d101      	bne.n	800ab44 <__lo0bits+0x46>
 800ab40:	3004      	adds	r0, #4
 800ab42:	091b      	lsrs	r3, r3, #4
 800ab44:	079a      	lsls	r2, r3, #30
 800ab46:	d101      	bne.n	800ab4c <__lo0bits+0x4e>
 800ab48:	3002      	adds	r0, #2
 800ab4a:	089b      	lsrs	r3, r3, #2
 800ab4c:	07da      	lsls	r2, r3, #31
 800ab4e:	d4e9      	bmi.n	800ab24 <__lo0bits+0x26>
 800ab50:	3001      	adds	r0, #1
 800ab52:	085b      	lsrs	r3, r3, #1
 800ab54:	d1e6      	bne.n	800ab24 <__lo0bits+0x26>
 800ab56:	2020      	movs	r0, #32
 800ab58:	e7e2      	b.n	800ab20 <__lo0bits+0x22>
	...

0800ab5c <__i2b>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	000c      	movs	r4, r1
 800ab60:	2101      	movs	r1, #1
 800ab62:	f7ff feff 	bl	800a964 <_Balloc>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d107      	bne.n	800ab7a <__i2b+0x1e>
 800ab6a:	2146      	movs	r1, #70	@ 0x46
 800ab6c:	4c05      	ldr	r4, [pc, #20]	@ (800ab84 <__i2b+0x28>)
 800ab6e:	0002      	movs	r2, r0
 800ab70:	4b05      	ldr	r3, [pc, #20]	@ (800ab88 <__i2b+0x2c>)
 800ab72:	0020      	movs	r0, r4
 800ab74:	31ff      	adds	r1, #255	@ 0xff
 800ab76:	f000 fccf 	bl	800b518 <__assert_func>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	6144      	str	r4, [r0, #20]
 800ab7e:	6103      	str	r3, [r0, #16]
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	46c0      	nop			@ (mov r8, r8)
 800ab84:	0800be71 	.word	0x0800be71
 800ab88:	0800be60 	.word	0x0800be60

0800ab8c <__multiply>:
 800ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8e:	0014      	movs	r4, r2
 800ab90:	690a      	ldr	r2, [r1, #16]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	000d      	movs	r5, r1
 800ab96:	b089      	sub	sp, #36	@ 0x24
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	db02      	blt.n	800aba2 <__multiply+0x16>
 800ab9c:	0023      	movs	r3, r4
 800ab9e:	000c      	movs	r4, r1
 800aba0:	001d      	movs	r5, r3
 800aba2:	6927      	ldr	r7, [r4, #16]
 800aba4:	692e      	ldr	r6, [r5, #16]
 800aba6:	6861      	ldr	r1, [r4, #4]
 800aba8:	19bb      	adds	r3, r7, r6
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	68a3      	ldr	r3, [r4, #8]
 800abae:	19ba      	adds	r2, r7, r6
 800abb0:	4293      	cmp	r3, r2
 800abb2:	da00      	bge.n	800abb6 <__multiply+0x2a>
 800abb4:	3101      	adds	r1, #1
 800abb6:	f7ff fed5 	bl	800a964 <_Balloc>
 800abba:	4684      	mov	ip, r0
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d106      	bne.n	800abce <__multiply+0x42>
 800abc0:	21b1      	movs	r1, #177	@ 0xb1
 800abc2:	4662      	mov	r2, ip
 800abc4:	4b44      	ldr	r3, [pc, #272]	@ (800acd8 <__multiply+0x14c>)
 800abc6:	4845      	ldr	r0, [pc, #276]	@ (800acdc <__multiply+0x150>)
 800abc8:	0049      	lsls	r1, r1, #1
 800abca:	f000 fca5 	bl	800b518 <__assert_func>
 800abce:	0002      	movs	r2, r0
 800abd0:	19bb      	adds	r3, r7, r6
 800abd2:	3214      	adds	r2, #20
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	18d3      	adds	r3, r2, r3
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2100      	movs	r1, #0
 800abdc:	0013      	movs	r3, r2
 800abde:	9801      	ldr	r0, [sp, #4]
 800abe0:	4283      	cmp	r3, r0
 800abe2:	d328      	bcc.n	800ac36 <__multiply+0xaa>
 800abe4:	0023      	movs	r3, r4
 800abe6:	00bf      	lsls	r7, r7, #2
 800abe8:	3314      	adds	r3, #20
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	3514      	adds	r5, #20
 800abee:	19db      	adds	r3, r3, r7
 800abf0:	00b6      	lsls	r6, r6, #2
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	19ab      	adds	r3, r5, r6
 800abf6:	9307      	str	r3, [sp, #28]
 800abf8:	2304      	movs	r3, #4
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	0023      	movs	r3, r4
 800abfe:	9902      	ldr	r1, [sp, #8]
 800ac00:	3315      	adds	r3, #21
 800ac02:	4299      	cmp	r1, r3
 800ac04:	d305      	bcc.n	800ac12 <__multiply+0x86>
 800ac06:	1b0c      	subs	r4, r1, r4
 800ac08:	3c15      	subs	r4, #21
 800ac0a:	08a4      	lsrs	r4, r4, #2
 800ac0c:	3401      	adds	r4, #1
 800ac0e:	00a3      	lsls	r3, r4, #2
 800ac10:	9305      	str	r3, [sp, #20]
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	429d      	cmp	r5, r3
 800ac16:	d310      	bcc.n	800ac3a <__multiply+0xae>
 800ac18:	9b00      	ldr	r3, [sp, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd05      	ble.n	800ac2a <__multiply+0x9e>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	3b04      	subs	r3, #4
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d052      	beq.n	800acd0 <__multiply+0x144>
 800ac2a:	4663      	mov	r3, ip
 800ac2c:	4660      	mov	r0, ip
 800ac2e:	9a00      	ldr	r2, [sp, #0]
 800ac30:	611a      	str	r2, [r3, #16]
 800ac32:	b009      	add	sp, #36	@ 0x24
 800ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac36:	c302      	stmia	r3!, {r1}
 800ac38:	e7d1      	b.n	800abde <__multiply+0x52>
 800ac3a:	682c      	ldr	r4, [r5, #0]
 800ac3c:	b2a4      	uxth	r4, r4
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	d01f      	beq.n	800ac82 <__multiply+0xf6>
 800ac42:	2300      	movs	r3, #0
 800ac44:	0017      	movs	r7, r2
 800ac46:	9e04      	ldr	r6, [sp, #16]
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	ce08      	ldmia	r6!, {r3}
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	9306      	str	r3, [sp, #24]
 800ac50:	466b      	mov	r3, sp
 800ac52:	8b1b      	ldrh	r3, [r3, #24]
 800ac54:	b288      	uxth	r0, r1
 800ac56:	4363      	muls	r3, r4
 800ac58:	181b      	adds	r3, r3, r0
 800ac5a:	9803      	ldr	r0, [sp, #12]
 800ac5c:	0c09      	lsrs	r1, r1, #16
 800ac5e:	181b      	adds	r3, r3, r0
 800ac60:	9806      	ldr	r0, [sp, #24]
 800ac62:	0c00      	lsrs	r0, r0, #16
 800ac64:	4360      	muls	r0, r4
 800ac66:	1840      	adds	r0, r0, r1
 800ac68:	0c19      	lsrs	r1, r3, #16
 800ac6a:	1841      	adds	r1, r0, r1
 800ac6c:	0c08      	lsrs	r0, r1, #16
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	0409      	lsls	r1, r1, #16
 800ac72:	4319      	orrs	r1, r3
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	9003      	str	r0, [sp, #12]
 800ac78:	c702      	stmia	r7!, {r1}
 800ac7a:	42b3      	cmp	r3, r6
 800ac7c:	d8e5      	bhi.n	800ac4a <__multiply+0xbe>
 800ac7e:	9b05      	ldr	r3, [sp, #20]
 800ac80:	50d0      	str	r0, [r2, r3]
 800ac82:	682c      	ldr	r4, [r5, #0]
 800ac84:	0c24      	lsrs	r4, r4, #16
 800ac86:	d020      	beq.n	800acca <__multiply+0x13e>
 800ac88:	2100      	movs	r1, #0
 800ac8a:	0010      	movs	r0, r2
 800ac8c:	6813      	ldr	r3, [r2, #0]
 800ac8e:	9e04      	ldr	r6, [sp, #16]
 800ac90:	9103      	str	r1, [sp, #12]
 800ac92:	6831      	ldr	r1, [r6, #0]
 800ac94:	6807      	ldr	r7, [r0, #0]
 800ac96:	b289      	uxth	r1, r1
 800ac98:	4361      	muls	r1, r4
 800ac9a:	0c3f      	lsrs	r7, r7, #16
 800ac9c:	19c9      	adds	r1, r1, r7
 800ac9e:	9f03      	ldr	r7, [sp, #12]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	19c9      	adds	r1, r1, r7
 800aca4:	040f      	lsls	r7, r1, #16
 800aca6:	431f      	orrs	r7, r3
 800aca8:	6007      	str	r7, [r0, #0]
 800acaa:	ce80      	ldmia	r6!, {r7}
 800acac:	6843      	ldr	r3, [r0, #4]
 800acae:	0c3f      	lsrs	r7, r7, #16
 800acb0:	4367      	muls	r7, r4
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	0c09      	lsrs	r1, r1, #16
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	185b      	adds	r3, r3, r1
 800acba:	0c19      	lsrs	r1, r3, #16
 800acbc:	9103      	str	r1, [sp, #12]
 800acbe:	9902      	ldr	r1, [sp, #8]
 800acc0:	3004      	adds	r0, #4
 800acc2:	42b1      	cmp	r1, r6
 800acc4:	d8e5      	bhi.n	800ac92 <__multiply+0x106>
 800acc6:	9905      	ldr	r1, [sp, #20]
 800acc8:	5053      	str	r3, [r2, r1]
 800acca:	3504      	adds	r5, #4
 800accc:	3204      	adds	r2, #4
 800acce:	e7a0      	b.n	800ac12 <__multiply+0x86>
 800acd0:	9b00      	ldr	r3, [sp, #0]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	e79f      	b.n	800ac18 <__multiply+0x8c>
 800acd8:	0800be60 	.word	0x0800be60
 800acdc:	0800be71 	.word	0x0800be71

0800ace0 <__pow5mult>:
 800ace0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace2:	2303      	movs	r3, #3
 800ace4:	0015      	movs	r5, r2
 800ace6:	0007      	movs	r7, r0
 800ace8:	000e      	movs	r6, r1
 800acea:	401a      	ands	r2, r3
 800acec:	421d      	tst	r5, r3
 800acee:	d008      	beq.n	800ad02 <__pow5mult+0x22>
 800acf0:	4925      	ldr	r1, [pc, #148]	@ (800ad88 <__pow5mult+0xa8>)
 800acf2:	3a01      	subs	r2, #1
 800acf4:	0092      	lsls	r2, r2, #2
 800acf6:	5852      	ldr	r2, [r2, r1]
 800acf8:	2300      	movs	r3, #0
 800acfa:	0031      	movs	r1, r6
 800acfc:	f7ff fe9a 	bl	800aa34 <__multadd>
 800ad00:	0006      	movs	r6, r0
 800ad02:	10ad      	asrs	r5, r5, #2
 800ad04:	d03d      	beq.n	800ad82 <__pow5mult+0xa2>
 800ad06:	69fc      	ldr	r4, [r7, #28]
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d10f      	bne.n	800ad2c <__pow5mult+0x4c>
 800ad0c:	2010      	movs	r0, #16
 800ad0e:	f7ff fd6d 	bl	800a7ec <malloc>
 800ad12:	1e02      	subs	r2, r0, #0
 800ad14:	61f8      	str	r0, [r7, #28]
 800ad16:	d105      	bne.n	800ad24 <__pow5mult+0x44>
 800ad18:	21b4      	movs	r1, #180	@ 0xb4
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ad8c <__pow5mult+0xac>)
 800ad1c:	481c      	ldr	r0, [pc, #112]	@ (800ad90 <__pow5mult+0xb0>)
 800ad1e:	31ff      	adds	r1, #255	@ 0xff
 800ad20:	f000 fbfa 	bl	800b518 <__assert_func>
 800ad24:	6044      	str	r4, [r0, #4]
 800ad26:	6084      	str	r4, [r0, #8]
 800ad28:	6004      	str	r4, [r0, #0]
 800ad2a:	60c4      	str	r4, [r0, #12]
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	689c      	ldr	r4, [r3, #8]
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	d108      	bne.n	800ad48 <__pow5mult+0x68>
 800ad36:	0038      	movs	r0, r7
 800ad38:	4916      	ldr	r1, [pc, #88]	@ (800ad94 <__pow5mult+0xb4>)
 800ad3a:	f7ff ff0f 	bl	800ab5c <__i2b>
 800ad3e:	9b01      	ldr	r3, [sp, #4]
 800ad40:	0004      	movs	r4, r0
 800ad42:	6098      	str	r0, [r3, #8]
 800ad44:	2300      	movs	r3, #0
 800ad46:	6003      	str	r3, [r0, #0]
 800ad48:	2301      	movs	r3, #1
 800ad4a:	421d      	tst	r5, r3
 800ad4c:	d00a      	beq.n	800ad64 <__pow5mult+0x84>
 800ad4e:	0031      	movs	r1, r6
 800ad50:	0022      	movs	r2, r4
 800ad52:	0038      	movs	r0, r7
 800ad54:	f7ff ff1a 	bl	800ab8c <__multiply>
 800ad58:	0031      	movs	r1, r6
 800ad5a:	9001      	str	r0, [sp, #4]
 800ad5c:	0038      	movs	r0, r7
 800ad5e:	f7ff fe45 	bl	800a9ec <_Bfree>
 800ad62:	9e01      	ldr	r6, [sp, #4]
 800ad64:	106d      	asrs	r5, r5, #1
 800ad66:	d00c      	beq.n	800ad82 <__pow5mult+0xa2>
 800ad68:	6820      	ldr	r0, [r4, #0]
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d107      	bne.n	800ad7e <__pow5mult+0x9e>
 800ad6e:	0022      	movs	r2, r4
 800ad70:	0021      	movs	r1, r4
 800ad72:	0038      	movs	r0, r7
 800ad74:	f7ff ff0a 	bl	800ab8c <__multiply>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6020      	str	r0, [r4, #0]
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	0004      	movs	r4, r0
 800ad80:	e7e2      	b.n	800ad48 <__pow5mult+0x68>
 800ad82:	0030      	movs	r0, r6
 800ad84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	0800bf24 	.word	0x0800bf24
 800ad8c:	0800bdf1 	.word	0x0800bdf1
 800ad90:	0800be71 	.word	0x0800be71
 800ad94:	00000271 	.word	0x00000271

0800ad98 <__lshift>:
 800ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9a:	000c      	movs	r4, r1
 800ad9c:	0016      	movs	r6, r2
 800ad9e:	6923      	ldr	r3, [r4, #16]
 800ada0:	1157      	asrs	r7, r2, #5
 800ada2:	b085      	sub	sp, #20
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	3301      	adds	r3, #1
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	6849      	ldr	r1, [r1, #4]
 800adae:	68a3      	ldr	r3, [r4, #8]
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9a00      	ldr	r2, [sp, #0]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	db10      	blt.n	800adda <__lshift+0x42>
 800adb8:	9802      	ldr	r0, [sp, #8]
 800adba:	f7ff fdd3 	bl	800a964 <_Balloc>
 800adbe:	2300      	movs	r3, #0
 800adc0:	0001      	movs	r1, r0
 800adc2:	0005      	movs	r5, r0
 800adc4:	001a      	movs	r2, r3
 800adc6:	3114      	adds	r1, #20
 800adc8:	4298      	cmp	r0, r3
 800adca:	d10c      	bne.n	800ade6 <__lshift+0x4e>
 800adcc:	21ef      	movs	r1, #239	@ 0xef
 800adce:	002a      	movs	r2, r5
 800add0:	4b25      	ldr	r3, [pc, #148]	@ (800ae68 <__lshift+0xd0>)
 800add2:	4826      	ldr	r0, [pc, #152]	@ (800ae6c <__lshift+0xd4>)
 800add4:	0049      	lsls	r1, r1, #1
 800add6:	f000 fb9f 	bl	800b518 <__assert_func>
 800adda:	3101      	adds	r1, #1
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	e7e8      	b.n	800adb2 <__lshift+0x1a>
 800ade0:	0098      	lsls	r0, r3, #2
 800ade2:	500a      	str	r2, [r1, r0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	dbfa      	blt.n	800ade0 <__lshift+0x48>
 800adea:	43fb      	mvns	r3, r7
 800adec:	17db      	asrs	r3, r3, #31
 800adee:	401f      	ands	r7, r3
 800adf0:	00bf      	lsls	r7, r7, #2
 800adf2:	0023      	movs	r3, r4
 800adf4:	201f      	movs	r0, #31
 800adf6:	19c9      	adds	r1, r1, r7
 800adf8:	0037      	movs	r7, r6
 800adfa:	6922      	ldr	r2, [r4, #16]
 800adfc:	3314      	adds	r3, #20
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	189a      	adds	r2, r3, r2
 800ae02:	4007      	ands	r7, r0
 800ae04:	4206      	tst	r6, r0
 800ae06:	d029      	beq.n	800ae5c <__lshift+0xc4>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	1bc0      	subs	r0, r0, r7
 800ae0c:	9003      	str	r0, [sp, #12]
 800ae0e:	468c      	mov	ip, r1
 800ae10:	2000      	movs	r0, #0
 800ae12:	681e      	ldr	r6, [r3, #0]
 800ae14:	40be      	lsls	r6, r7
 800ae16:	4306      	orrs	r6, r0
 800ae18:	4660      	mov	r0, ip
 800ae1a:	c040      	stmia	r0!, {r6}
 800ae1c:	4684      	mov	ip, r0
 800ae1e:	9e03      	ldr	r6, [sp, #12]
 800ae20:	cb01      	ldmia	r3!, {r0}
 800ae22:	40f0      	lsrs	r0, r6
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d8f4      	bhi.n	800ae12 <__lshift+0x7a>
 800ae28:	0026      	movs	r6, r4
 800ae2a:	3615      	adds	r6, #21
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	42b2      	cmp	r2, r6
 800ae30:	d304      	bcc.n	800ae3c <__lshift+0xa4>
 800ae32:	1b13      	subs	r3, r2, r4
 800ae34:	3b15      	subs	r3, #21
 800ae36:	089b      	lsrs	r3, r3, #2
 800ae38:	3301      	adds	r3, #1
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	50c8      	str	r0, [r1, r3]
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d002      	beq.n	800ae48 <__lshift+0xb0>
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	3302      	adds	r3, #2
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	9b00      	ldr	r3, [sp, #0]
 800ae4a:	9802      	ldr	r0, [sp, #8]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	0021      	movs	r1, r4
 800ae50:	612b      	str	r3, [r5, #16]
 800ae52:	f7ff fdcb 	bl	800a9ec <_Bfree>
 800ae56:	0028      	movs	r0, r5
 800ae58:	b005      	add	sp, #20
 800ae5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae5c:	cb01      	ldmia	r3!, {r0}
 800ae5e:	c101      	stmia	r1!, {r0}
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d8fb      	bhi.n	800ae5c <__lshift+0xc4>
 800ae64:	e7f0      	b.n	800ae48 <__lshift+0xb0>
 800ae66:	46c0      	nop			@ (mov r8, r8)
 800ae68:	0800be60 	.word	0x0800be60
 800ae6c:	0800be71 	.word	0x0800be71

0800ae70 <__mcmp>:
 800ae70:	b530      	push	{r4, r5, lr}
 800ae72:	690b      	ldr	r3, [r1, #16]
 800ae74:	6904      	ldr	r4, [r0, #16]
 800ae76:	0002      	movs	r2, r0
 800ae78:	1ae0      	subs	r0, r4, r3
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d10f      	bne.n	800ae9e <__mcmp+0x2e>
 800ae7e:	3214      	adds	r2, #20
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	3114      	adds	r1, #20
 800ae84:	0014      	movs	r4, r2
 800ae86:	18c9      	adds	r1, r1, r3
 800ae88:	18d2      	adds	r2, r2, r3
 800ae8a:	3a04      	subs	r2, #4
 800ae8c:	3904      	subs	r1, #4
 800ae8e:	6815      	ldr	r5, [r2, #0]
 800ae90:	680b      	ldr	r3, [r1, #0]
 800ae92:	429d      	cmp	r5, r3
 800ae94:	d004      	beq.n	800aea0 <__mcmp+0x30>
 800ae96:	2001      	movs	r0, #1
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	d200      	bcs.n	800ae9e <__mcmp+0x2e>
 800ae9c:	3802      	subs	r0, #2
 800ae9e:	bd30      	pop	{r4, r5, pc}
 800aea0:	4294      	cmp	r4, r2
 800aea2:	d3f2      	bcc.n	800ae8a <__mcmp+0x1a>
 800aea4:	e7fb      	b.n	800ae9e <__mcmp+0x2e>
	...

0800aea8 <__mdiff>:
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	000c      	movs	r4, r1
 800aeac:	b087      	sub	sp, #28
 800aeae:	9000      	str	r0, [sp, #0]
 800aeb0:	0011      	movs	r1, r2
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	0017      	movs	r7, r2
 800aeb6:	f7ff ffdb 	bl	800ae70 <__mcmp>
 800aeba:	1e05      	subs	r5, r0, #0
 800aebc:	d110      	bne.n	800aee0 <__mdiff+0x38>
 800aebe:	0001      	movs	r1, r0
 800aec0:	9800      	ldr	r0, [sp, #0]
 800aec2:	f7ff fd4f 	bl	800a964 <_Balloc>
 800aec6:	1e02      	subs	r2, r0, #0
 800aec8:	d104      	bne.n	800aed4 <__mdiff+0x2c>
 800aeca:	4b40      	ldr	r3, [pc, #256]	@ (800afcc <__mdiff+0x124>)
 800aecc:	4840      	ldr	r0, [pc, #256]	@ (800afd0 <__mdiff+0x128>)
 800aece:	4941      	ldr	r1, [pc, #260]	@ (800afd4 <__mdiff+0x12c>)
 800aed0:	f000 fb22 	bl	800b518 <__assert_func>
 800aed4:	2301      	movs	r3, #1
 800aed6:	6145      	str	r5, [r0, #20]
 800aed8:	6103      	str	r3, [r0, #16]
 800aeda:	0010      	movs	r0, r2
 800aedc:	b007      	add	sp, #28
 800aede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee0:	2600      	movs	r6, #0
 800aee2:	42b0      	cmp	r0, r6
 800aee4:	da03      	bge.n	800aeee <__mdiff+0x46>
 800aee6:	0023      	movs	r3, r4
 800aee8:	003c      	movs	r4, r7
 800aeea:	001f      	movs	r7, r3
 800aeec:	3601      	adds	r6, #1
 800aeee:	6861      	ldr	r1, [r4, #4]
 800aef0:	9800      	ldr	r0, [sp, #0]
 800aef2:	f7ff fd37 	bl	800a964 <_Balloc>
 800aef6:	1e02      	subs	r2, r0, #0
 800aef8:	d103      	bne.n	800af02 <__mdiff+0x5a>
 800aefa:	4b34      	ldr	r3, [pc, #208]	@ (800afcc <__mdiff+0x124>)
 800aefc:	4834      	ldr	r0, [pc, #208]	@ (800afd0 <__mdiff+0x128>)
 800aefe:	4936      	ldr	r1, [pc, #216]	@ (800afd8 <__mdiff+0x130>)
 800af00:	e7e6      	b.n	800aed0 <__mdiff+0x28>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	3414      	adds	r4, #20
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	18e3      	adds	r3, r4, r3
 800af0c:	0021      	movs	r1, r4
 800af0e:	9401      	str	r4, [sp, #4]
 800af10:	003c      	movs	r4, r7
 800af12:	9302      	str	r3, [sp, #8]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	3414      	adds	r4, #20
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	18e3      	adds	r3, r4, r3
 800af1c:	9303      	str	r3, [sp, #12]
 800af1e:	0003      	movs	r3, r0
 800af20:	60c6      	str	r6, [r0, #12]
 800af22:	468c      	mov	ip, r1
 800af24:	2000      	movs	r0, #0
 800af26:	3314      	adds	r3, #20
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	9305      	str	r3, [sp, #20]
 800af2c:	4663      	mov	r3, ip
 800af2e:	cb20      	ldmia	r3!, {r5}
 800af30:	b2a9      	uxth	r1, r5
 800af32:	000e      	movs	r6, r1
 800af34:	469c      	mov	ip, r3
 800af36:	cc08      	ldmia	r4!, {r3}
 800af38:	0c2d      	lsrs	r5, r5, #16
 800af3a:	b299      	uxth	r1, r3
 800af3c:	1a71      	subs	r1, r6, r1
 800af3e:	1809      	adds	r1, r1, r0
 800af40:	0c1b      	lsrs	r3, r3, #16
 800af42:	1408      	asrs	r0, r1, #16
 800af44:	1aeb      	subs	r3, r5, r3
 800af46:	181b      	adds	r3, r3, r0
 800af48:	1418      	asrs	r0, r3, #16
 800af4a:	b289      	uxth	r1, r1
 800af4c:	041b      	lsls	r3, r3, #16
 800af4e:	4319      	orrs	r1, r3
 800af50:	9b05      	ldr	r3, [sp, #20]
 800af52:	c302      	stmia	r3!, {r1}
 800af54:	9305      	str	r3, [sp, #20]
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d8e7      	bhi.n	800af2c <__mdiff+0x84>
 800af5c:	0039      	movs	r1, r7
 800af5e:	9c03      	ldr	r4, [sp, #12]
 800af60:	3115      	adds	r1, #21
 800af62:	2304      	movs	r3, #4
 800af64:	428c      	cmp	r4, r1
 800af66:	d304      	bcc.n	800af72 <__mdiff+0xca>
 800af68:	1be3      	subs	r3, r4, r7
 800af6a:	3b15      	subs	r3, #21
 800af6c:	089b      	lsrs	r3, r3, #2
 800af6e:	3301      	adds	r3, #1
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	18cd      	adds	r5, r1, r3
 800af76:	9904      	ldr	r1, [sp, #16]
 800af78:	002e      	movs	r6, r5
 800af7a:	18cb      	adds	r3, r1, r3
 800af7c:	001f      	movs	r7, r3
 800af7e:	9902      	ldr	r1, [sp, #8]
 800af80:	428e      	cmp	r6, r1
 800af82:	d311      	bcc.n	800afa8 <__mdiff+0x100>
 800af84:	9c02      	ldr	r4, [sp, #8]
 800af86:	1ee9      	subs	r1, r5, #3
 800af88:	2000      	movs	r0, #0
 800af8a:	428c      	cmp	r4, r1
 800af8c:	d304      	bcc.n	800af98 <__mdiff+0xf0>
 800af8e:	0021      	movs	r1, r4
 800af90:	3103      	adds	r1, #3
 800af92:	1b49      	subs	r1, r1, r5
 800af94:	0889      	lsrs	r1, r1, #2
 800af96:	0088      	lsls	r0, r1, #2
 800af98:	181b      	adds	r3, r3, r0
 800af9a:	3b04      	subs	r3, #4
 800af9c:	6819      	ldr	r1, [r3, #0]
 800af9e:	2900      	cmp	r1, #0
 800afa0:	d010      	beq.n	800afc4 <__mdiff+0x11c>
 800afa2:	9b00      	ldr	r3, [sp, #0]
 800afa4:	6113      	str	r3, [r2, #16]
 800afa6:	e798      	b.n	800aeda <__mdiff+0x32>
 800afa8:	4684      	mov	ip, r0
 800afaa:	ce02      	ldmia	r6!, {r1}
 800afac:	b288      	uxth	r0, r1
 800afae:	4460      	add	r0, ip
 800afb0:	1400      	asrs	r0, r0, #16
 800afb2:	0c0c      	lsrs	r4, r1, #16
 800afb4:	1904      	adds	r4, r0, r4
 800afb6:	4461      	add	r1, ip
 800afb8:	1420      	asrs	r0, r4, #16
 800afba:	b289      	uxth	r1, r1
 800afbc:	0424      	lsls	r4, r4, #16
 800afbe:	4321      	orrs	r1, r4
 800afc0:	c702      	stmia	r7!, {r1}
 800afc2:	e7dc      	b.n	800af7e <__mdiff+0xd6>
 800afc4:	9900      	ldr	r1, [sp, #0]
 800afc6:	3901      	subs	r1, #1
 800afc8:	9100      	str	r1, [sp, #0]
 800afca:	e7e6      	b.n	800af9a <__mdiff+0xf2>
 800afcc:	0800be60 	.word	0x0800be60
 800afd0:	0800be71 	.word	0x0800be71
 800afd4:	00000237 	.word	0x00000237
 800afd8:	00000245 	.word	0x00000245

0800afdc <__d2b>:
 800afdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afde:	2101      	movs	r1, #1
 800afe0:	0016      	movs	r6, r2
 800afe2:	001f      	movs	r7, r3
 800afe4:	f7ff fcbe 	bl	800a964 <_Balloc>
 800afe8:	1e04      	subs	r4, r0, #0
 800afea:	d105      	bne.n	800aff8 <__d2b+0x1c>
 800afec:	0022      	movs	r2, r4
 800afee:	4b25      	ldr	r3, [pc, #148]	@ (800b084 <__d2b+0xa8>)
 800aff0:	4825      	ldr	r0, [pc, #148]	@ (800b088 <__d2b+0xac>)
 800aff2:	4926      	ldr	r1, [pc, #152]	@ (800b08c <__d2b+0xb0>)
 800aff4:	f000 fa90 	bl	800b518 <__assert_func>
 800aff8:	033b      	lsls	r3, r7, #12
 800affa:	007d      	lsls	r5, r7, #1
 800affc:	0b1b      	lsrs	r3, r3, #12
 800affe:	0d6d      	lsrs	r5, r5, #21
 800b000:	d002      	beq.n	800b008 <__d2b+0x2c>
 800b002:	2280      	movs	r2, #128	@ 0x80
 800b004:	0352      	lsls	r2, r2, #13
 800b006:	4313      	orrs	r3, r2
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	2e00      	cmp	r6, #0
 800b00c:	d025      	beq.n	800b05a <__d2b+0x7e>
 800b00e:	4668      	mov	r0, sp
 800b010:	9600      	str	r6, [sp, #0]
 800b012:	f7ff fd74 	bl	800aafe <__lo0bits>
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	9900      	ldr	r1, [sp, #0]
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d01b      	beq.n	800b056 <__d2b+0x7a>
 800b01e:	2220      	movs	r2, #32
 800b020:	001e      	movs	r6, r3
 800b022:	1a12      	subs	r2, r2, r0
 800b024:	4096      	lsls	r6, r2
 800b026:	0032      	movs	r2, r6
 800b028:	40c3      	lsrs	r3, r0
 800b02a:	430a      	orrs	r2, r1
 800b02c:	6162      	str	r2, [r4, #20]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	9e01      	ldr	r6, [sp, #4]
 800b032:	61a6      	str	r6, [r4, #24]
 800b034:	1e73      	subs	r3, r6, #1
 800b036:	419e      	sbcs	r6, r3
 800b038:	3601      	adds	r6, #1
 800b03a:	6126      	str	r6, [r4, #16]
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	d014      	beq.n	800b06a <__d2b+0x8e>
 800b040:	2635      	movs	r6, #53	@ 0x35
 800b042:	4b13      	ldr	r3, [pc, #76]	@ (800b090 <__d2b+0xb4>)
 800b044:	18ed      	adds	r5, r5, r3
 800b046:	9b08      	ldr	r3, [sp, #32]
 800b048:	182d      	adds	r5, r5, r0
 800b04a:	601d      	str	r5, [r3, #0]
 800b04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04e:	1a36      	subs	r6, r6, r0
 800b050:	601e      	str	r6, [r3, #0]
 800b052:	0020      	movs	r0, r4
 800b054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b056:	6161      	str	r1, [r4, #20]
 800b058:	e7ea      	b.n	800b030 <__d2b+0x54>
 800b05a:	a801      	add	r0, sp, #4
 800b05c:	f7ff fd4f 	bl	800aafe <__lo0bits>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	2601      	movs	r6, #1
 800b064:	6163      	str	r3, [r4, #20]
 800b066:	3020      	adds	r0, #32
 800b068:	e7e7      	b.n	800b03a <__d2b+0x5e>
 800b06a:	4b0a      	ldr	r3, [pc, #40]	@ (800b094 <__d2b+0xb8>)
 800b06c:	18c0      	adds	r0, r0, r3
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	6018      	str	r0, [r3, #0]
 800b072:	4b09      	ldr	r3, [pc, #36]	@ (800b098 <__d2b+0xbc>)
 800b074:	18f3      	adds	r3, r6, r3
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	18e3      	adds	r3, r4, r3
 800b07a:	6958      	ldr	r0, [r3, #20]
 800b07c:	f7ff fd1e 	bl	800aabc <__hi0bits>
 800b080:	0176      	lsls	r6, r6, #5
 800b082:	e7e3      	b.n	800b04c <__d2b+0x70>
 800b084:	0800be60 	.word	0x0800be60
 800b088:	0800be71 	.word	0x0800be71
 800b08c:	0000030f 	.word	0x0000030f
 800b090:	fffffbcd 	.word	0xfffffbcd
 800b094:	fffffbce 	.word	0xfffffbce
 800b098:	3fffffff 	.word	0x3fffffff

0800b09c <__ssputs_r>:
 800b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b09e:	688e      	ldr	r6, [r1, #8]
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	001f      	movs	r7, r3
 800b0a4:	000c      	movs	r4, r1
 800b0a6:	680b      	ldr	r3, [r1, #0]
 800b0a8:	9002      	str	r0, [sp, #8]
 800b0aa:	9203      	str	r2, [sp, #12]
 800b0ac:	42be      	cmp	r6, r7
 800b0ae:	d830      	bhi.n	800b112 <__ssputs_r+0x76>
 800b0b0:	210c      	movs	r1, #12
 800b0b2:	5e62      	ldrsh	r2, [r4, r1]
 800b0b4:	2190      	movs	r1, #144	@ 0x90
 800b0b6:	00c9      	lsls	r1, r1, #3
 800b0b8:	420a      	tst	r2, r1
 800b0ba:	d028      	beq.n	800b10e <__ssputs_r+0x72>
 800b0bc:	2003      	movs	r0, #3
 800b0be:	6921      	ldr	r1, [r4, #16]
 800b0c0:	1a5b      	subs	r3, r3, r1
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	6963      	ldr	r3, [r4, #20]
 800b0c6:	4343      	muls	r3, r0
 800b0c8:	9801      	ldr	r0, [sp, #4]
 800b0ca:	0fdd      	lsrs	r5, r3, #31
 800b0cc:	18ed      	adds	r5, r5, r3
 800b0ce:	1c7b      	adds	r3, r7, #1
 800b0d0:	181b      	adds	r3, r3, r0
 800b0d2:	106d      	asrs	r5, r5, #1
 800b0d4:	42ab      	cmp	r3, r5
 800b0d6:	d900      	bls.n	800b0da <__ssputs_r+0x3e>
 800b0d8:	001d      	movs	r5, r3
 800b0da:	0552      	lsls	r2, r2, #21
 800b0dc:	d528      	bpl.n	800b130 <__ssputs_r+0x94>
 800b0de:	0029      	movs	r1, r5
 800b0e0:	9802      	ldr	r0, [sp, #8]
 800b0e2:	f7ff fbaf 	bl	800a844 <_malloc_r>
 800b0e6:	1e06      	subs	r6, r0, #0
 800b0e8:	d02c      	beq.n	800b144 <__ssputs_r+0xa8>
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	6921      	ldr	r1, [r4, #16]
 800b0ee:	f000 fa09 	bl	800b504 <memcpy>
 800b0f2:	89a2      	ldrh	r2, [r4, #12]
 800b0f4:	4b18      	ldr	r3, [pc, #96]	@ (800b158 <__ssputs_r+0xbc>)
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	2380      	movs	r3, #128	@ 0x80
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	6126      	str	r6, [r4, #16]
 800b102:	18f6      	adds	r6, r6, r3
 800b104:	6026      	str	r6, [r4, #0]
 800b106:	003e      	movs	r6, r7
 800b108:	6165      	str	r5, [r4, #20]
 800b10a:	1aed      	subs	r5, r5, r3
 800b10c:	60a5      	str	r5, [r4, #8]
 800b10e:	42be      	cmp	r6, r7
 800b110:	d900      	bls.n	800b114 <__ssputs_r+0x78>
 800b112:	003e      	movs	r6, r7
 800b114:	0032      	movs	r2, r6
 800b116:	9903      	ldr	r1, [sp, #12]
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	f000 f9ce 	bl	800b4ba <memmove>
 800b11e:	2000      	movs	r0, #0
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	1b9b      	subs	r3, r3, r6
 800b124:	60a3      	str	r3, [r4, #8]
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	199b      	adds	r3, r3, r6
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	b005      	add	sp, #20
 800b12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b130:	002a      	movs	r2, r5
 800b132:	9802      	ldr	r0, [sp, #8]
 800b134:	f000 fa4d 	bl	800b5d2 <_realloc_r>
 800b138:	1e06      	subs	r6, r0, #0
 800b13a:	d1e0      	bne.n	800b0fe <__ssputs_r+0x62>
 800b13c:	6921      	ldr	r1, [r4, #16]
 800b13e:	9802      	ldr	r0, [sp, #8]
 800b140:	f7ff fb0a 	bl	800a758 <_free_r>
 800b144:	230c      	movs	r3, #12
 800b146:	2001      	movs	r0, #1
 800b148:	9a02      	ldr	r2, [sp, #8]
 800b14a:	4240      	negs	r0, r0
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	89a2      	ldrh	r2, [r4, #12]
 800b150:	3334      	adds	r3, #52	@ 0x34
 800b152:	4313      	orrs	r3, r2
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	e7e9      	b.n	800b12c <__ssputs_r+0x90>
 800b158:	fffffb7f 	.word	0xfffffb7f

0800b15c <_svfiprintf_r>:
 800b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15e:	b0a1      	sub	sp, #132	@ 0x84
 800b160:	9003      	str	r0, [sp, #12]
 800b162:	001d      	movs	r5, r3
 800b164:	898b      	ldrh	r3, [r1, #12]
 800b166:	000f      	movs	r7, r1
 800b168:	0016      	movs	r6, r2
 800b16a:	061b      	lsls	r3, r3, #24
 800b16c:	d511      	bpl.n	800b192 <_svfiprintf_r+0x36>
 800b16e:	690b      	ldr	r3, [r1, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10e      	bne.n	800b192 <_svfiprintf_r+0x36>
 800b174:	2140      	movs	r1, #64	@ 0x40
 800b176:	f7ff fb65 	bl	800a844 <_malloc_r>
 800b17a:	6038      	str	r0, [r7, #0]
 800b17c:	6138      	str	r0, [r7, #16]
 800b17e:	2800      	cmp	r0, #0
 800b180:	d105      	bne.n	800b18e <_svfiprintf_r+0x32>
 800b182:	230c      	movs	r3, #12
 800b184:	9a03      	ldr	r2, [sp, #12]
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	2001      	movs	r0, #1
 800b18a:	4240      	negs	r0, r0
 800b18c:	e0cf      	b.n	800b32e <_svfiprintf_r+0x1d2>
 800b18e:	2340      	movs	r3, #64	@ 0x40
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	2300      	movs	r3, #0
 800b194:	ac08      	add	r4, sp, #32
 800b196:	6163      	str	r3, [r4, #20]
 800b198:	3320      	adds	r3, #32
 800b19a:	7663      	strb	r3, [r4, #25]
 800b19c:	3310      	adds	r3, #16
 800b19e:	76a3      	strb	r3, [r4, #26]
 800b1a0:	9507      	str	r5, [sp, #28]
 800b1a2:	0035      	movs	r5, r6
 800b1a4:	782b      	ldrb	r3, [r5, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <_svfiprintf_r+0x52>
 800b1aa:	2b25      	cmp	r3, #37	@ 0x25
 800b1ac:	d148      	bne.n	800b240 <_svfiprintf_r+0xe4>
 800b1ae:	1bab      	subs	r3, r5, r6
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	42b5      	cmp	r5, r6
 800b1b4:	d00b      	beq.n	800b1ce <_svfiprintf_r+0x72>
 800b1b6:	0032      	movs	r2, r6
 800b1b8:	0039      	movs	r1, r7
 800b1ba:	9803      	ldr	r0, [sp, #12]
 800b1bc:	f7ff ff6e 	bl	800b09c <__ssputs_r>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d100      	bne.n	800b1c6 <_svfiprintf_r+0x6a>
 800b1c4:	e0ae      	b.n	800b324 <_svfiprintf_r+0x1c8>
 800b1c6:	6963      	ldr	r3, [r4, #20]
 800b1c8:	9a05      	ldr	r2, [sp, #20]
 800b1ca:	189b      	adds	r3, r3, r2
 800b1cc:	6163      	str	r3, [r4, #20]
 800b1ce:	782b      	ldrb	r3, [r5, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d100      	bne.n	800b1d6 <_svfiprintf_r+0x7a>
 800b1d4:	e0a6      	b.n	800b324 <_svfiprintf_r+0x1c8>
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4252      	negs	r2, r2
 800b1dc:	6062      	str	r2, [r4, #4]
 800b1de:	a904      	add	r1, sp, #16
 800b1e0:	3254      	adds	r2, #84	@ 0x54
 800b1e2:	1852      	adds	r2, r2, r1
 800b1e4:	1c6e      	adds	r6, r5, #1
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	60e3      	str	r3, [r4, #12]
 800b1ea:	60a3      	str	r3, [r4, #8]
 800b1ec:	7013      	strb	r3, [r2, #0]
 800b1ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b1f0:	4b54      	ldr	r3, [pc, #336]	@ (800b344 <_svfiprintf_r+0x1e8>)
 800b1f2:	2205      	movs	r2, #5
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	7831      	ldrb	r1, [r6, #0]
 800b1f8:	9305      	str	r3, [sp, #20]
 800b1fa:	f7fe fc2c 	bl	8009a56 <memchr>
 800b1fe:	1c75      	adds	r5, r6, #1
 800b200:	2800      	cmp	r0, #0
 800b202:	d11f      	bne.n	800b244 <_svfiprintf_r+0xe8>
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	06d3      	lsls	r3, r2, #27
 800b208:	d504      	bpl.n	800b214 <_svfiprintf_r+0xb8>
 800b20a:	2353      	movs	r3, #83	@ 0x53
 800b20c:	a904      	add	r1, sp, #16
 800b20e:	185b      	adds	r3, r3, r1
 800b210:	2120      	movs	r1, #32
 800b212:	7019      	strb	r1, [r3, #0]
 800b214:	0713      	lsls	r3, r2, #28
 800b216:	d504      	bpl.n	800b222 <_svfiprintf_r+0xc6>
 800b218:	2353      	movs	r3, #83	@ 0x53
 800b21a:	a904      	add	r1, sp, #16
 800b21c:	185b      	adds	r3, r3, r1
 800b21e:	212b      	movs	r1, #43	@ 0x2b
 800b220:	7019      	strb	r1, [r3, #0]
 800b222:	7833      	ldrb	r3, [r6, #0]
 800b224:	2b2a      	cmp	r3, #42	@ 0x2a
 800b226:	d016      	beq.n	800b256 <_svfiprintf_r+0xfa>
 800b228:	0035      	movs	r5, r6
 800b22a:	2100      	movs	r1, #0
 800b22c:	200a      	movs	r0, #10
 800b22e:	68e3      	ldr	r3, [r4, #12]
 800b230:	782a      	ldrb	r2, [r5, #0]
 800b232:	1c6e      	adds	r6, r5, #1
 800b234:	3a30      	subs	r2, #48	@ 0x30
 800b236:	2a09      	cmp	r2, #9
 800b238:	d950      	bls.n	800b2dc <_svfiprintf_r+0x180>
 800b23a:	2900      	cmp	r1, #0
 800b23c:	d111      	bne.n	800b262 <_svfiprintf_r+0x106>
 800b23e:	e017      	b.n	800b270 <_svfiprintf_r+0x114>
 800b240:	3501      	adds	r5, #1
 800b242:	e7af      	b.n	800b1a4 <_svfiprintf_r+0x48>
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	6822      	ldr	r2, [r4, #0]
 800b248:	1ac0      	subs	r0, r0, r3
 800b24a:	2301      	movs	r3, #1
 800b24c:	4083      	lsls	r3, r0
 800b24e:	4313      	orrs	r3, r2
 800b250:	002e      	movs	r6, r5
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	e7cc      	b.n	800b1f0 <_svfiprintf_r+0x94>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	1d19      	adds	r1, r3, #4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	9107      	str	r1, [sp, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	db01      	blt.n	800b266 <_svfiprintf_r+0x10a>
 800b262:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b264:	e004      	b.n	800b270 <_svfiprintf_r+0x114>
 800b266:	425b      	negs	r3, r3
 800b268:	60e3      	str	r3, [r4, #12]
 800b26a:	2302      	movs	r3, #2
 800b26c:	4313      	orrs	r3, r2
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	782b      	ldrb	r3, [r5, #0]
 800b272:	2b2e      	cmp	r3, #46	@ 0x2e
 800b274:	d10c      	bne.n	800b290 <_svfiprintf_r+0x134>
 800b276:	786b      	ldrb	r3, [r5, #1]
 800b278:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27a:	d134      	bne.n	800b2e6 <_svfiprintf_r+0x18a>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	3502      	adds	r5, #2
 800b280:	1d1a      	adds	r2, r3, #4
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	9207      	str	r2, [sp, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	da01      	bge.n	800b28e <_svfiprintf_r+0x132>
 800b28a:	2301      	movs	r3, #1
 800b28c:	425b      	negs	r3, r3
 800b28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b290:	4e2d      	ldr	r6, [pc, #180]	@ (800b348 <_svfiprintf_r+0x1ec>)
 800b292:	2203      	movs	r2, #3
 800b294:	0030      	movs	r0, r6
 800b296:	7829      	ldrb	r1, [r5, #0]
 800b298:	f7fe fbdd 	bl	8009a56 <memchr>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d006      	beq.n	800b2ae <_svfiprintf_r+0x152>
 800b2a0:	2340      	movs	r3, #64	@ 0x40
 800b2a2:	1b80      	subs	r0, r0, r6
 800b2a4:	4083      	lsls	r3, r0
 800b2a6:	6822      	ldr	r2, [r4, #0]
 800b2a8:	3501      	adds	r5, #1
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	7829      	ldrb	r1, [r5, #0]
 800b2b0:	2206      	movs	r2, #6
 800b2b2:	4826      	ldr	r0, [pc, #152]	@ (800b34c <_svfiprintf_r+0x1f0>)
 800b2b4:	1c6e      	adds	r6, r5, #1
 800b2b6:	7621      	strb	r1, [r4, #24]
 800b2b8:	f7fe fbcd 	bl	8009a56 <memchr>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d038      	beq.n	800b332 <_svfiprintf_r+0x1d6>
 800b2c0:	4b23      	ldr	r3, [pc, #140]	@ (800b350 <_svfiprintf_r+0x1f4>)
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d122      	bne.n	800b30c <_svfiprintf_r+0x1b0>
 800b2c6:	2207      	movs	r2, #7
 800b2c8:	9b07      	ldr	r3, [sp, #28]
 800b2ca:	3307      	adds	r3, #7
 800b2cc:	4393      	bics	r3, r2
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	6963      	ldr	r3, [r4, #20]
 800b2d4:	9a04      	ldr	r2, [sp, #16]
 800b2d6:	189b      	adds	r3, r3, r2
 800b2d8:	6163      	str	r3, [r4, #20]
 800b2da:	e762      	b.n	800b1a2 <_svfiprintf_r+0x46>
 800b2dc:	4343      	muls	r3, r0
 800b2de:	0035      	movs	r5, r6
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	189b      	adds	r3, r3, r2
 800b2e4:	e7a4      	b.n	800b230 <_svfiprintf_r+0xd4>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	200a      	movs	r0, #10
 800b2ea:	0019      	movs	r1, r3
 800b2ec:	3501      	adds	r5, #1
 800b2ee:	6063      	str	r3, [r4, #4]
 800b2f0:	782a      	ldrb	r2, [r5, #0]
 800b2f2:	1c6e      	adds	r6, r5, #1
 800b2f4:	3a30      	subs	r2, #48	@ 0x30
 800b2f6:	2a09      	cmp	r2, #9
 800b2f8:	d903      	bls.n	800b302 <_svfiprintf_r+0x1a6>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0c8      	beq.n	800b290 <_svfiprintf_r+0x134>
 800b2fe:	9109      	str	r1, [sp, #36]	@ 0x24
 800b300:	e7c6      	b.n	800b290 <_svfiprintf_r+0x134>
 800b302:	4341      	muls	r1, r0
 800b304:	0035      	movs	r5, r6
 800b306:	2301      	movs	r3, #1
 800b308:	1889      	adds	r1, r1, r2
 800b30a:	e7f1      	b.n	800b2f0 <_svfiprintf_r+0x194>
 800b30c:	aa07      	add	r2, sp, #28
 800b30e:	9200      	str	r2, [sp, #0]
 800b310:	0021      	movs	r1, r4
 800b312:	003a      	movs	r2, r7
 800b314:	4b0f      	ldr	r3, [pc, #60]	@ (800b354 <_svfiprintf_r+0x1f8>)
 800b316:	9803      	ldr	r0, [sp, #12]
 800b318:	f7fd fe2a 	bl	8008f70 <_printf_float>
 800b31c:	9004      	str	r0, [sp, #16]
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	3301      	adds	r3, #1
 800b322:	d1d6      	bne.n	800b2d2 <_svfiprintf_r+0x176>
 800b324:	89bb      	ldrh	r3, [r7, #12]
 800b326:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b328:	065b      	lsls	r3, r3, #25
 800b32a:	d500      	bpl.n	800b32e <_svfiprintf_r+0x1d2>
 800b32c:	e72c      	b.n	800b188 <_svfiprintf_r+0x2c>
 800b32e:	b021      	add	sp, #132	@ 0x84
 800b330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b332:	aa07      	add	r2, sp, #28
 800b334:	9200      	str	r2, [sp, #0]
 800b336:	0021      	movs	r1, r4
 800b338:	003a      	movs	r2, r7
 800b33a:	4b06      	ldr	r3, [pc, #24]	@ (800b354 <_svfiprintf_r+0x1f8>)
 800b33c:	9803      	ldr	r0, [sp, #12]
 800b33e:	f7fe f8c5 	bl	80094cc <_printf_i>
 800b342:	e7eb      	b.n	800b31c <_svfiprintf_r+0x1c0>
 800b344:	0800beca 	.word	0x0800beca
 800b348:	0800bed0 	.word	0x0800bed0
 800b34c:	0800bed4 	.word	0x0800bed4
 800b350:	08008f71 	.word	0x08008f71
 800b354:	0800b09d 	.word	0x0800b09d

0800b358 <__sflush_r>:
 800b358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b35a:	220c      	movs	r2, #12
 800b35c:	5e8b      	ldrsh	r3, [r1, r2]
 800b35e:	0005      	movs	r5, r0
 800b360:	000c      	movs	r4, r1
 800b362:	071a      	lsls	r2, r3, #28
 800b364:	d456      	bmi.n	800b414 <__sflush_r+0xbc>
 800b366:	684a      	ldr	r2, [r1, #4]
 800b368:	2a00      	cmp	r2, #0
 800b36a:	dc02      	bgt.n	800b372 <__sflush_r+0x1a>
 800b36c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b36e:	2a00      	cmp	r2, #0
 800b370:	dd4e      	ble.n	800b410 <__sflush_r+0xb8>
 800b372:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b374:	2f00      	cmp	r7, #0
 800b376:	d04b      	beq.n	800b410 <__sflush_r+0xb8>
 800b378:	2200      	movs	r2, #0
 800b37a:	2080      	movs	r0, #128	@ 0x80
 800b37c:	682e      	ldr	r6, [r5, #0]
 800b37e:	602a      	str	r2, [r5, #0]
 800b380:	001a      	movs	r2, r3
 800b382:	0140      	lsls	r0, r0, #5
 800b384:	6a21      	ldr	r1, [r4, #32]
 800b386:	4002      	ands	r2, r0
 800b388:	4203      	tst	r3, r0
 800b38a:	d033      	beq.n	800b3f4 <__sflush_r+0x9c>
 800b38c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	075b      	lsls	r3, r3, #29
 800b392:	d506      	bpl.n	800b3a2 <__sflush_r+0x4a>
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	1ad2      	subs	r2, r2, r3
 800b398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <__sflush_r+0x4a>
 800b39e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3a0:	1ad2      	subs	r2, r2, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	0028      	movs	r0, r5
 800b3a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b3a8:	6a21      	ldr	r1, [r4, #32]
 800b3aa:	47b8      	blx	r7
 800b3ac:	89a2      	ldrh	r2, [r4, #12]
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d106      	bne.n	800b3c0 <__sflush_r+0x68>
 800b3b2:	6829      	ldr	r1, [r5, #0]
 800b3b4:	291d      	cmp	r1, #29
 800b3b6:	d846      	bhi.n	800b446 <__sflush_r+0xee>
 800b3b8:	4b29      	ldr	r3, [pc, #164]	@ (800b460 <__sflush_r+0x108>)
 800b3ba:	40cb      	lsrs	r3, r1
 800b3bc:	07db      	lsls	r3, r3, #31
 800b3be:	d542      	bpl.n	800b446 <__sflush_r+0xee>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6063      	str	r3, [r4, #4]
 800b3c4:	6923      	ldr	r3, [r4, #16]
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	04d2      	lsls	r2, r2, #19
 800b3ca:	d505      	bpl.n	800b3d8 <__sflush_r+0x80>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <__sflush_r+0x7e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d100      	bne.n	800b3d8 <__sflush_r+0x80>
 800b3d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3da:	602e      	str	r6, [r5, #0]
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	d017      	beq.n	800b410 <__sflush_r+0xb8>
 800b3e0:	0023      	movs	r3, r4
 800b3e2:	3344      	adds	r3, #68	@ 0x44
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	d002      	beq.n	800b3ee <__sflush_r+0x96>
 800b3e8:	0028      	movs	r0, r5
 800b3ea:	f7ff f9b5 	bl	800a758 <_free_r>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3f2:	e00d      	b.n	800b410 <__sflush_r+0xb8>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	0028      	movs	r0, r5
 800b3f8:	47b8      	blx	r7
 800b3fa:	0002      	movs	r2, r0
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d1c6      	bne.n	800b38e <__sflush_r+0x36>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0c3      	beq.n	800b38e <__sflush_r+0x36>
 800b406:	2b1d      	cmp	r3, #29
 800b408:	d001      	beq.n	800b40e <__sflush_r+0xb6>
 800b40a:	2b16      	cmp	r3, #22
 800b40c:	d11a      	bne.n	800b444 <__sflush_r+0xec>
 800b40e:	602e      	str	r6, [r5, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e01e      	b.n	800b452 <__sflush_r+0xfa>
 800b414:	690e      	ldr	r6, [r1, #16]
 800b416:	2e00      	cmp	r6, #0
 800b418:	d0fa      	beq.n	800b410 <__sflush_r+0xb8>
 800b41a:	680f      	ldr	r7, [r1, #0]
 800b41c:	600e      	str	r6, [r1, #0]
 800b41e:	1bba      	subs	r2, r7, r6
 800b420:	9201      	str	r2, [sp, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	079b      	lsls	r3, r3, #30
 800b426:	d100      	bne.n	800b42a <__sflush_r+0xd2>
 800b428:	694a      	ldr	r2, [r1, #20]
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	ddee      	ble.n	800b410 <__sflush_r+0xb8>
 800b432:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b434:	0032      	movs	r2, r6
 800b436:	001f      	movs	r7, r3
 800b438:	0028      	movs	r0, r5
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	6a21      	ldr	r1, [r4, #32]
 800b43e:	47b8      	blx	r7
 800b440:	2800      	cmp	r0, #0
 800b442:	dc07      	bgt.n	800b454 <__sflush_r+0xfc>
 800b444:	89a2      	ldrh	r2, [r4, #12]
 800b446:	2340      	movs	r3, #64	@ 0x40
 800b448:	2001      	movs	r0, #1
 800b44a:	4313      	orrs	r3, r2
 800b44c:	b21b      	sxth	r3, r3
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	4240      	negs	r0, r0
 800b452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	1836      	adds	r6, r6, r0
 800b458:	1a1b      	subs	r3, r3, r0
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	e7e6      	b.n	800b42c <__sflush_r+0xd4>
 800b45e:	46c0      	nop			@ (mov r8, r8)
 800b460:	20400001 	.word	0x20400001

0800b464 <_fflush_r>:
 800b464:	690b      	ldr	r3, [r1, #16]
 800b466:	b570      	push	{r4, r5, r6, lr}
 800b468:	0005      	movs	r5, r0
 800b46a:	000c      	movs	r4, r1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <_fflush_r+0x12>
 800b470:	2500      	movs	r5, #0
 800b472:	0028      	movs	r0, r5
 800b474:	bd70      	pop	{r4, r5, r6, pc}
 800b476:	2800      	cmp	r0, #0
 800b478:	d004      	beq.n	800b484 <_fflush_r+0x20>
 800b47a:	6a03      	ldr	r3, [r0, #32]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <_fflush_r+0x20>
 800b480:	f7fe f9c0 	bl	8009804 <__sinit>
 800b484:	220c      	movs	r2, #12
 800b486:	5ea3      	ldrsh	r3, [r4, r2]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f1      	beq.n	800b470 <_fflush_r+0xc>
 800b48c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b48e:	07d2      	lsls	r2, r2, #31
 800b490:	d404      	bmi.n	800b49c <_fflush_r+0x38>
 800b492:	059b      	lsls	r3, r3, #22
 800b494:	d402      	bmi.n	800b49c <_fflush_r+0x38>
 800b496:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b498:	f7fe fadb 	bl	8009a52 <__retarget_lock_acquire_recursive>
 800b49c:	0028      	movs	r0, r5
 800b49e:	0021      	movs	r1, r4
 800b4a0:	f7ff ff5a 	bl	800b358 <__sflush_r>
 800b4a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4a6:	0005      	movs	r5, r0
 800b4a8:	07db      	lsls	r3, r3, #31
 800b4aa:	d4e2      	bmi.n	800b472 <_fflush_r+0xe>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	059b      	lsls	r3, r3, #22
 800b4b0:	d4df      	bmi.n	800b472 <_fflush_r+0xe>
 800b4b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4b4:	f7fe face 	bl	8009a54 <__retarget_lock_release_recursive>
 800b4b8:	e7db      	b.n	800b472 <_fflush_r+0xe>

0800b4ba <memmove>:
 800b4ba:	b510      	push	{r4, lr}
 800b4bc:	4288      	cmp	r0, r1
 800b4be:	d902      	bls.n	800b4c6 <memmove+0xc>
 800b4c0:	188b      	adds	r3, r1, r2
 800b4c2:	4298      	cmp	r0, r3
 800b4c4:	d308      	bcc.n	800b4d8 <memmove+0x1e>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d007      	beq.n	800b4dc <memmove+0x22>
 800b4cc:	5ccc      	ldrb	r4, [r1, r3]
 800b4ce:	54c4      	strb	r4, [r0, r3]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	e7f9      	b.n	800b4c8 <memmove+0xe>
 800b4d4:	5c8b      	ldrb	r3, [r1, r2]
 800b4d6:	5483      	strb	r3, [r0, r2]
 800b4d8:	3a01      	subs	r2, #1
 800b4da:	d2fb      	bcs.n	800b4d4 <memmove+0x1a>
 800b4dc:	bd10      	pop	{r4, pc}
	...

0800b4e0 <_sbrk_r>:
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	4d06      	ldr	r5, [pc, #24]	@ (800b500 <_sbrk_r+0x20>)
 800b4e6:	0004      	movs	r4, r0
 800b4e8:	0008      	movs	r0, r1
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7f8 fb8c 	bl	8003c08 <_sbrk>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d103      	bne.n	800b4fc <_sbrk_r+0x1c>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d000      	beq.n	800b4fc <_sbrk_r+0x1c>
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	bd70      	pop	{r4, r5, r6, pc}
 800b4fe:	46c0      	nop			@ (mov r8, r8)
 800b500:	20000640 	.word	0x20000640

0800b504 <memcpy>:
 800b504:	2300      	movs	r3, #0
 800b506:	b510      	push	{r4, lr}
 800b508:	429a      	cmp	r2, r3
 800b50a:	d100      	bne.n	800b50e <memcpy+0xa>
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	5ccc      	ldrb	r4, [r1, r3]
 800b510:	54c4      	strb	r4, [r0, r3]
 800b512:	3301      	adds	r3, #1
 800b514:	e7f8      	b.n	800b508 <memcpy+0x4>
	...

0800b518 <__assert_func>:
 800b518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b51a:	0014      	movs	r4, r2
 800b51c:	001a      	movs	r2, r3
 800b51e:	4b09      	ldr	r3, [pc, #36]	@ (800b544 <__assert_func+0x2c>)
 800b520:	0005      	movs	r5, r0
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	000e      	movs	r6, r1
 800b526:	68d8      	ldr	r0, [r3, #12]
 800b528:	4b07      	ldr	r3, [pc, #28]	@ (800b548 <__assert_func+0x30>)
 800b52a:	2c00      	cmp	r4, #0
 800b52c:	d101      	bne.n	800b532 <__assert_func+0x1a>
 800b52e:	4b07      	ldr	r3, [pc, #28]	@ (800b54c <__assert_func+0x34>)
 800b530:	001c      	movs	r4, r3
 800b532:	4907      	ldr	r1, [pc, #28]	@ (800b550 <__assert_func+0x38>)
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	9402      	str	r4, [sp, #8]
 800b538:	002b      	movs	r3, r5
 800b53a:	9600      	str	r6, [sp, #0]
 800b53c:	f000 f886 	bl	800b64c <fiprintf>
 800b540:	f000 f894 	bl	800b66c <abort>
 800b544:	20000018 	.word	0x20000018
 800b548:	0800bee5 	.word	0x0800bee5
 800b54c:	0800bf20 	.word	0x0800bf20
 800b550:	0800bef2 	.word	0x0800bef2

0800b554 <_calloc_r>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	0c0b      	lsrs	r3, r1, #16
 800b558:	0c15      	lsrs	r5, r2, #16
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d11e      	bne.n	800b59c <_calloc_r+0x48>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	d10c      	bne.n	800b57c <_calloc_r+0x28>
 800b562:	b289      	uxth	r1, r1
 800b564:	b294      	uxth	r4, r2
 800b566:	434c      	muls	r4, r1
 800b568:	0021      	movs	r1, r4
 800b56a:	f7ff f96b 	bl	800a844 <_malloc_r>
 800b56e:	1e05      	subs	r5, r0, #0
 800b570:	d01b      	beq.n	800b5aa <_calloc_r+0x56>
 800b572:	0022      	movs	r2, r4
 800b574:	2100      	movs	r1, #0
 800b576:	f7fe f9e7 	bl	8009948 <memset>
 800b57a:	e016      	b.n	800b5aa <_calloc_r+0x56>
 800b57c:	1c2b      	adds	r3, r5, #0
 800b57e:	1c0c      	adds	r4, r1, #0
 800b580:	b289      	uxth	r1, r1
 800b582:	b292      	uxth	r2, r2
 800b584:	434a      	muls	r2, r1
 800b586:	b29b      	uxth	r3, r3
 800b588:	b2a1      	uxth	r1, r4
 800b58a:	4359      	muls	r1, r3
 800b58c:	0c14      	lsrs	r4, r2, #16
 800b58e:	190c      	adds	r4, r1, r4
 800b590:	0c23      	lsrs	r3, r4, #16
 800b592:	d107      	bne.n	800b5a4 <_calloc_r+0x50>
 800b594:	0424      	lsls	r4, r4, #16
 800b596:	b292      	uxth	r2, r2
 800b598:	4314      	orrs	r4, r2
 800b59a:	e7e5      	b.n	800b568 <_calloc_r+0x14>
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	d101      	bne.n	800b5a4 <_calloc_r+0x50>
 800b5a0:	1c14      	adds	r4, r2, #0
 800b5a2:	e7ed      	b.n	800b580 <_calloc_r+0x2c>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	0028      	movs	r0, r5
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}

0800b5ae <__ascii_mbtowc>:
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	2900      	cmp	r1, #0
 800b5b2:	d100      	bne.n	800b5b6 <__ascii_mbtowc+0x8>
 800b5b4:	a901      	add	r1, sp, #4
 800b5b6:	1e10      	subs	r0, r2, #0
 800b5b8:	d006      	beq.n	800b5c8 <__ascii_mbtowc+0x1a>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d006      	beq.n	800b5cc <__ascii_mbtowc+0x1e>
 800b5be:	7813      	ldrb	r3, [r2, #0]
 800b5c0:	600b      	str	r3, [r1, #0]
 800b5c2:	7810      	ldrb	r0, [r2, #0]
 800b5c4:	1e43      	subs	r3, r0, #1
 800b5c6:	4198      	sbcs	r0, r3
 800b5c8:	b002      	add	sp, #8
 800b5ca:	4770      	bx	lr
 800b5cc:	2002      	movs	r0, #2
 800b5ce:	4240      	negs	r0, r0
 800b5d0:	e7fa      	b.n	800b5c8 <__ascii_mbtowc+0x1a>

0800b5d2 <_realloc_r>:
 800b5d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5d4:	0006      	movs	r6, r0
 800b5d6:	000c      	movs	r4, r1
 800b5d8:	0015      	movs	r5, r2
 800b5da:	2900      	cmp	r1, #0
 800b5dc:	d105      	bne.n	800b5ea <_realloc_r+0x18>
 800b5de:	0011      	movs	r1, r2
 800b5e0:	f7ff f930 	bl	800a844 <_malloc_r>
 800b5e4:	0004      	movs	r4, r0
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	d103      	bne.n	800b5f6 <_realloc_r+0x24>
 800b5ee:	f7ff f8b3 	bl	800a758 <_free_r>
 800b5f2:	002c      	movs	r4, r5
 800b5f4:	e7f7      	b.n	800b5e6 <_realloc_r+0x14>
 800b5f6:	f000 f840 	bl	800b67a <_malloc_usable_size_r>
 800b5fa:	0007      	movs	r7, r0
 800b5fc:	4285      	cmp	r5, r0
 800b5fe:	d802      	bhi.n	800b606 <_realloc_r+0x34>
 800b600:	0843      	lsrs	r3, r0, #1
 800b602:	42ab      	cmp	r3, r5
 800b604:	d3ef      	bcc.n	800b5e6 <_realloc_r+0x14>
 800b606:	0029      	movs	r1, r5
 800b608:	0030      	movs	r0, r6
 800b60a:	f7ff f91b 	bl	800a844 <_malloc_r>
 800b60e:	9001      	str	r0, [sp, #4]
 800b610:	2800      	cmp	r0, #0
 800b612:	d101      	bne.n	800b618 <_realloc_r+0x46>
 800b614:	9c01      	ldr	r4, [sp, #4]
 800b616:	e7e6      	b.n	800b5e6 <_realloc_r+0x14>
 800b618:	002a      	movs	r2, r5
 800b61a:	42bd      	cmp	r5, r7
 800b61c:	d900      	bls.n	800b620 <_realloc_r+0x4e>
 800b61e:	003a      	movs	r2, r7
 800b620:	0021      	movs	r1, r4
 800b622:	9801      	ldr	r0, [sp, #4]
 800b624:	f7ff ff6e 	bl	800b504 <memcpy>
 800b628:	0021      	movs	r1, r4
 800b62a:	0030      	movs	r0, r6
 800b62c:	f7ff f894 	bl	800a758 <_free_r>
 800b630:	e7f0      	b.n	800b614 <_realloc_r+0x42>

0800b632 <__ascii_wctomb>:
 800b632:	0003      	movs	r3, r0
 800b634:	1e08      	subs	r0, r1, #0
 800b636:	d005      	beq.n	800b644 <__ascii_wctomb+0x12>
 800b638:	2aff      	cmp	r2, #255	@ 0xff
 800b63a:	d904      	bls.n	800b646 <__ascii_wctomb+0x14>
 800b63c:	228a      	movs	r2, #138	@ 0x8a
 800b63e:	2001      	movs	r0, #1
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	4240      	negs	r0, r0
 800b644:	4770      	bx	lr
 800b646:	2001      	movs	r0, #1
 800b648:	700a      	strb	r2, [r1, #0]
 800b64a:	e7fb      	b.n	800b644 <__ascii_wctomb+0x12>

0800b64c <fiprintf>:
 800b64c:	b40e      	push	{r1, r2, r3}
 800b64e:	b517      	push	{r0, r1, r2, r4, lr}
 800b650:	4c05      	ldr	r4, [pc, #20]	@ (800b668 <fiprintf+0x1c>)
 800b652:	ab05      	add	r3, sp, #20
 800b654:	cb04      	ldmia	r3!, {r2}
 800b656:	0001      	movs	r1, r0
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	f000 f83c 	bl	800b6d8 <_vfiprintf_r>
 800b660:	bc1e      	pop	{r1, r2, r3, r4}
 800b662:	bc08      	pop	{r3}
 800b664:	b003      	add	sp, #12
 800b666:	4718      	bx	r3
 800b668:	20000018 	.word	0x20000018

0800b66c <abort>:
 800b66c:	2006      	movs	r0, #6
 800b66e:	b510      	push	{r4, lr}
 800b670:	f000 fa18 	bl	800baa4 <raise>
 800b674:	2001      	movs	r0, #1
 800b676:	f7f8 fa55 	bl	8003b24 <_exit>

0800b67a <_malloc_usable_size_r>:
 800b67a:	1f0b      	subs	r3, r1, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	1f18      	subs	r0, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	da01      	bge.n	800b688 <_malloc_usable_size_r+0xe>
 800b684:	580b      	ldr	r3, [r1, r0]
 800b686:	18c0      	adds	r0, r0, r3
 800b688:	4770      	bx	lr

0800b68a <__sfputc_r>:
 800b68a:	6893      	ldr	r3, [r2, #8]
 800b68c:	b510      	push	{r4, lr}
 800b68e:	3b01      	subs	r3, #1
 800b690:	6093      	str	r3, [r2, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	da04      	bge.n	800b6a0 <__sfputc_r+0x16>
 800b696:	6994      	ldr	r4, [r2, #24]
 800b698:	42a3      	cmp	r3, r4
 800b69a:	db07      	blt.n	800b6ac <__sfputc_r+0x22>
 800b69c:	290a      	cmp	r1, #10
 800b69e:	d005      	beq.n	800b6ac <__sfputc_r+0x22>
 800b6a0:	6813      	ldr	r3, [r2, #0]
 800b6a2:	1c58      	adds	r0, r3, #1
 800b6a4:	6010      	str	r0, [r2, #0]
 800b6a6:	7019      	strb	r1, [r3, #0]
 800b6a8:	0008      	movs	r0, r1
 800b6aa:	bd10      	pop	{r4, pc}
 800b6ac:	f000 f930 	bl	800b910 <__swbuf_r>
 800b6b0:	0001      	movs	r1, r0
 800b6b2:	e7f9      	b.n	800b6a8 <__sfputc_r+0x1e>

0800b6b4 <__sfputs_r>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	0006      	movs	r6, r0
 800b6b8:	000f      	movs	r7, r1
 800b6ba:	0014      	movs	r4, r2
 800b6bc:	18d5      	adds	r5, r2, r3
 800b6be:	42ac      	cmp	r4, r5
 800b6c0:	d101      	bne.n	800b6c6 <__sfputs_r+0x12>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e007      	b.n	800b6d6 <__sfputs_r+0x22>
 800b6c6:	7821      	ldrb	r1, [r4, #0]
 800b6c8:	003a      	movs	r2, r7
 800b6ca:	0030      	movs	r0, r6
 800b6cc:	f7ff ffdd 	bl	800b68a <__sfputc_r>
 800b6d0:	3401      	adds	r4, #1
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d1f3      	bne.n	800b6be <__sfputs_r+0xa>
 800b6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6d8 <_vfiprintf_r>:
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	b0a1      	sub	sp, #132	@ 0x84
 800b6dc:	000f      	movs	r7, r1
 800b6de:	0015      	movs	r5, r2
 800b6e0:	001e      	movs	r6, r3
 800b6e2:	9003      	str	r0, [sp, #12]
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d004      	beq.n	800b6f2 <_vfiprintf_r+0x1a>
 800b6e8:	6a03      	ldr	r3, [r0, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d101      	bne.n	800b6f2 <_vfiprintf_r+0x1a>
 800b6ee:	f7fe f889 	bl	8009804 <__sinit>
 800b6f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6f4:	07db      	lsls	r3, r3, #31
 800b6f6:	d405      	bmi.n	800b704 <_vfiprintf_r+0x2c>
 800b6f8:	89bb      	ldrh	r3, [r7, #12]
 800b6fa:	059b      	lsls	r3, r3, #22
 800b6fc:	d402      	bmi.n	800b704 <_vfiprintf_r+0x2c>
 800b6fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b700:	f7fe f9a7 	bl	8009a52 <__retarget_lock_acquire_recursive>
 800b704:	89bb      	ldrh	r3, [r7, #12]
 800b706:	071b      	lsls	r3, r3, #28
 800b708:	d502      	bpl.n	800b710 <_vfiprintf_r+0x38>
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d113      	bne.n	800b738 <_vfiprintf_r+0x60>
 800b710:	0039      	movs	r1, r7
 800b712:	9803      	ldr	r0, [sp, #12]
 800b714:	f000 f93e 	bl	800b994 <__swsetup_r>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d00d      	beq.n	800b738 <_vfiprintf_r+0x60>
 800b71c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b71e:	07db      	lsls	r3, r3, #31
 800b720:	d503      	bpl.n	800b72a <_vfiprintf_r+0x52>
 800b722:	2001      	movs	r0, #1
 800b724:	4240      	negs	r0, r0
 800b726:	b021      	add	sp, #132	@ 0x84
 800b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b72a:	89bb      	ldrh	r3, [r7, #12]
 800b72c:	059b      	lsls	r3, r3, #22
 800b72e:	d4f8      	bmi.n	800b722 <_vfiprintf_r+0x4a>
 800b730:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b732:	f7fe f98f 	bl	8009a54 <__retarget_lock_release_recursive>
 800b736:	e7f4      	b.n	800b722 <_vfiprintf_r+0x4a>
 800b738:	2300      	movs	r3, #0
 800b73a:	ac08      	add	r4, sp, #32
 800b73c:	6163      	str	r3, [r4, #20]
 800b73e:	3320      	adds	r3, #32
 800b740:	7663      	strb	r3, [r4, #25]
 800b742:	3310      	adds	r3, #16
 800b744:	76a3      	strb	r3, [r4, #26]
 800b746:	9607      	str	r6, [sp, #28]
 800b748:	002e      	movs	r6, r5
 800b74a:	7833      	ldrb	r3, [r6, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <_vfiprintf_r+0x7c>
 800b750:	2b25      	cmp	r3, #37	@ 0x25
 800b752:	d148      	bne.n	800b7e6 <_vfiprintf_r+0x10e>
 800b754:	1b73      	subs	r3, r6, r5
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	42ae      	cmp	r6, r5
 800b75a:	d00b      	beq.n	800b774 <_vfiprintf_r+0x9c>
 800b75c:	002a      	movs	r2, r5
 800b75e:	0039      	movs	r1, r7
 800b760:	9803      	ldr	r0, [sp, #12]
 800b762:	f7ff ffa7 	bl	800b6b4 <__sfputs_r>
 800b766:	3001      	adds	r0, #1
 800b768:	d100      	bne.n	800b76c <_vfiprintf_r+0x94>
 800b76a:	e0ae      	b.n	800b8ca <_vfiprintf_r+0x1f2>
 800b76c:	6963      	ldr	r3, [r4, #20]
 800b76e:	9a05      	ldr	r2, [sp, #20]
 800b770:	189b      	adds	r3, r3, r2
 800b772:	6163      	str	r3, [r4, #20]
 800b774:	7833      	ldrb	r3, [r6, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d100      	bne.n	800b77c <_vfiprintf_r+0xa4>
 800b77a:	e0a6      	b.n	800b8ca <_vfiprintf_r+0x1f2>
 800b77c:	2201      	movs	r2, #1
 800b77e:	2300      	movs	r3, #0
 800b780:	4252      	negs	r2, r2
 800b782:	6062      	str	r2, [r4, #4]
 800b784:	a904      	add	r1, sp, #16
 800b786:	3254      	adds	r2, #84	@ 0x54
 800b788:	1852      	adds	r2, r2, r1
 800b78a:	1c75      	adds	r5, r6, #1
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	60e3      	str	r3, [r4, #12]
 800b790:	60a3      	str	r3, [r4, #8]
 800b792:	7013      	strb	r3, [r2, #0]
 800b794:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b796:	4b59      	ldr	r3, [pc, #356]	@ (800b8fc <_vfiprintf_r+0x224>)
 800b798:	2205      	movs	r2, #5
 800b79a:	0018      	movs	r0, r3
 800b79c:	7829      	ldrb	r1, [r5, #0]
 800b79e:	9305      	str	r3, [sp, #20]
 800b7a0:	f7fe f959 	bl	8009a56 <memchr>
 800b7a4:	1c6e      	adds	r6, r5, #1
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d11f      	bne.n	800b7ea <_vfiprintf_r+0x112>
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	06d3      	lsls	r3, r2, #27
 800b7ae:	d504      	bpl.n	800b7ba <_vfiprintf_r+0xe2>
 800b7b0:	2353      	movs	r3, #83	@ 0x53
 800b7b2:	a904      	add	r1, sp, #16
 800b7b4:	185b      	adds	r3, r3, r1
 800b7b6:	2120      	movs	r1, #32
 800b7b8:	7019      	strb	r1, [r3, #0]
 800b7ba:	0713      	lsls	r3, r2, #28
 800b7bc:	d504      	bpl.n	800b7c8 <_vfiprintf_r+0xf0>
 800b7be:	2353      	movs	r3, #83	@ 0x53
 800b7c0:	a904      	add	r1, sp, #16
 800b7c2:	185b      	adds	r3, r3, r1
 800b7c4:	212b      	movs	r1, #43	@ 0x2b
 800b7c6:	7019      	strb	r1, [r3, #0]
 800b7c8:	782b      	ldrb	r3, [r5, #0]
 800b7ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7cc:	d016      	beq.n	800b7fc <_vfiprintf_r+0x124>
 800b7ce:	002e      	movs	r6, r5
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	200a      	movs	r0, #10
 800b7d4:	68e3      	ldr	r3, [r4, #12]
 800b7d6:	7832      	ldrb	r2, [r6, #0]
 800b7d8:	1c75      	adds	r5, r6, #1
 800b7da:	3a30      	subs	r2, #48	@ 0x30
 800b7dc:	2a09      	cmp	r2, #9
 800b7de:	d950      	bls.n	800b882 <_vfiprintf_r+0x1aa>
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	d111      	bne.n	800b808 <_vfiprintf_r+0x130>
 800b7e4:	e017      	b.n	800b816 <_vfiprintf_r+0x13e>
 800b7e6:	3601      	adds	r6, #1
 800b7e8:	e7af      	b.n	800b74a <_vfiprintf_r+0x72>
 800b7ea:	9b05      	ldr	r3, [sp, #20]
 800b7ec:	6822      	ldr	r2, [r4, #0]
 800b7ee:	1ac0      	subs	r0, r0, r3
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4083      	lsls	r3, r0
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	0035      	movs	r5, r6
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	e7cc      	b.n	800b796 <_vfiprintf_r+0xbe>
 800b7fc:	9b07      	ldr	r3, [sp, #28]
 800b7fe:	1d19      	adds	r1, r3, #4
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	9107      	str	r1, [sp, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	db01      	blt.n	800b80c <_vfiprintf_r+0x134>
 800b808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b80a:	e004      	b.n	800b816 <_vfiprintf_r+0x13e>
 800b80c:	425b      	negs	r3, r3
 800b80e:	60e3      	str	r3, [r4, #12]
 800b810:	2302      	movs	r3, #2
 800b812:	4313      	orrs	r3, r2
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	7833      	ldrb	r3, [r6, #0]
 800b818:	2b2e      	cmp	r3, #46	@ 0x2e
 800b81a:	d10c      	bne.n	800b836 <_vfiprintf_r+0x15e>
 800b81c:	7873      	ldrb	r3, [r6, #1]
 800b81e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b820:	d134      	bne.n	800b88c <_vfiprintf_r+0x1b4>
 800b822:	9b07      	ldr	r3, [sp, #28]
 800b824:	3602      	adds	r6, #2
 800b826:	1d1a      	adds	r2, r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	9207      	str	r2, [sp, #28]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	da01      	bge.n	800b834 <_vfiprintf_r+0x15c>
 800b830:	2301      	movs	r3, #1
 800b832:	425b      	negs	r3, r3
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	4d32      	ldr	r5, [pc, #200]	@ (800b900 <_vfiprintf_r+0x228>)
 800b838:	2203      	movs	r2, #3
 800b83a:	0028      	movs	r0, r5
 800b83c:	7831      	ldrb	r1, [r6, #0]
 800b83e:	f7fe f90a 	bl	8009a56 <memchr>
 800b842:	2800      	cmp	r0, #0
 800b844:	d006      	beq.n	800b854 <_vfiprintf_r+0x17c>
 800b846:	2340      	movs	r3, #64	@ 0x40
 800b848:	1b40      	subs	r0, r0, r5
 800b84a:	4083      	lsls	r3, r0
 800b84c:	6822      	ldr	r2, [r4, #0]
 800b84e:	3601      	adds	r6, #1
 800b850:	4313      	orrs	r3, r2
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	7831      	ldrb	r1, [r6, #0]
 800b856:	2206      	movs	r2, #6
 800b858:	482a      	ldr	r0, [pc, #168]	@ (800b904 <_vfiprintf_r+0x22c>)
 800b85a:	1c75      	adds	r5, r6, #1
 800b85c:	7621      	strb	r1, [r4, #24]
 800b85e:	f7fe f8fa 	bl	8009a56 <memchr>
 800b862:	2800      	cmp	r0, #0
 800b864:	d040      	beq.n	800b8e8 <_vfiprintf_r+0x210>
 800b866:	4b28      	ldr	r3, [pc, #160]	@ (800b908 <_vfiprintf_r+0x230>)
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d122      	bne.n	800b8b2 <_vfiprintf_r+0x1da>
 800b86c:	2207      	movs	r2, #7
 800b86e:	9b07      	ldr	r3, [sp, #28]
 800b870:	3307      	adds	r3, #7
 800b872:	4393      	bics	r3, r2
 800b874:	3308      	adds	r3, #8
 800b876:	9307      	str	r3, [sp, #28]
 800b878:	6963      	ldr	r3, [r4, #20]
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	189b      	adds	r3, r3, r2
 800b87e:	6163      	str	r3, [r4, #20]
 800b880:	e762      	b.n	800b748 <_vfiprintf_r+0x70>
 800b882:	4343      	muls	r3, r0
 800b884:	002e      	movs	r6, r5
 800b886:	2101      	movs	r1, #1
 800b888:	189b      	adds	r3, r3, r2
 800b88a:	e7a4      	b.n	800b7d6 <_vfiprintf_r+0xfe>
 800b88c:	2300      	movs	r3, #0
 800b88e:	200a      	movs	r0, #10
 800b890:	0019      	movs	r1, r3
 800b892:	3601      	adds	r6, #1
 800b894:	6063      	str	r3, [r4, #4]
 800b896:	7832      	ldrb	r2, [r6, #0]
 800b898:	1c75      	adds	r5, r6, #1
 800b89a:	3a30      	subs	r2, #48	@ 0x30
 800b89c:	2a09      	cmp	r2, #9
 800b89e:	d903      	bls.n	800b8a8 <_vfiprintf_r+0x1d0>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d0c8      	beq.n	800b836 <_vfiprintf_r+0x15e>
 800b8a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8a6:	e7c6      	b.n	800b836 <_vfiprintf_r+0x15e>
 800b8a8:	4341      	muls	r1, r0
 800b8aa:	002e      	movs	r6, r5
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	1889      	adds	r1, r1, r2
 800b8b0:	e7f1      	b.n	800b896 <_vfiprintf_r+0x1be>
 800b8b2:	aa07      	add	r2, sp, #28
 800b8b4:	9200      	str	r2, [sp, #0]
 800b8b6:	0021      	movs	r1, r4
 800b8b8:	003a      	movs	r2, r7
 800b8ba:	4b14      	ldr	r3, [pc, #80]	@ (800b90c <_vfiprintf_r+0x234>)
 800b8bc:	9803      	ldr	r0, [sp, #12]
 800b8be:	f7fd fb57 	bl	8008f70 <_printf_float>
 800b8c2:	9004      	str	r0, [sp, #16]
 800b8c4:	9b04      	ldr	r3, [sp, #16]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	d1d6      	bne.n	800b878 <_vfiprintf_r+0x1a0>
 800b8ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8cc:	07db      	lsls	r3, r3, #31
 800b8ce:	d405      	bmi.n	800b8dc <_vfiprintf_r+0x204>
 800b8d0:	89bb      	ldrh	r3, [r7, #12]
 800b8d2:	059b      	lsls	r3, r3, #22
 800b8d4:	d402      	bmi.n	800b8dc <_vfiprintf_r+0x204>
 800b8d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b8d8:	f7fe f8bc 	bl	8009a54 <__retarget_lock_release_recursive>
 800b8dc:	89bb      	ldrh	r3, [r7, #12]
 800b8de:	065b      	lsls	r3, r3, #25
 800b8e0:	d500      	bpl.n	800b8e4 <_vfiprintf_r+0x20c>
 800b8e2:	e71e      	b.n	800b722 <_vfiprintf_r+0x4a>
 800b8e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b8e6:	e71e      	b.n	800b726 <_vfiprintf_r+0x4e>
 800b8e8:	aa07      	add	r2, sp, #28
 800b8ea:	9200      	str	r2, [sp, #0]
 800b8ec:	0021      	movs	r1, r4
 800b8ee:	003a      	movs	r2, r7
 800b8f0:	4b06      	ldr	r3, [pc, #24]	@ (800b90c <_vfiprintf_r+0x234>)
 800b8f2:	9803      	ldr	r0, [sp, #12]
 800b8f4:	f7fd fdea 	bl	80094cc <_printf_i>
 800b8f8:	e7e3      	b.n	800b8c2 <_vfiprintf_r+0x1ea>
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	0800beca 	.word	0x0800beca
 800b900:	0800bed0 	.word	0x0800bed0
 800b904:	0800bed4 	.word	0x0800bed4
 800b908:	08008f71 	.word	0x08008f71
 800b90c:	0800b6b5 	.word	0x0800b6b5

0800b910 <__swbuf_r>:
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b912:	0006      	movs	r6, r0
 800b914:	000d      	movs	r5, r1
 800b916:	0014      	movs	r4, r2
 800b918:	2800      	cmp	r0, #0
 800b91a:	d004      	beq.n	800b926 <__swbuf_r+0x16>
 800b91c:	6a03      	ldr	r3, [r0, #32]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <__swbuf_r+0x16>
 800b922:	f7fd ff6f 	bl	8009804 <__sinit>
 800b926:	69a3      	ldr	r3, [r4, #24]
 800b928:	60a3      	str	r3, [r4, #8]
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	071b      	lsls	r3, r3, #28
 800b92e:	d502      	bpl.n	800b936 <__swbuf_r+0x26>
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <__swbuf_r+0x3a>
 800b936:	0021      	movs	r1, r4
 800b938:	0030      	movs	r0, r6
 800b93a:	f000 f82b 	bl	800b994 <__swsetup_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d003      	beq.n	800b94a <__swbuf_r+0x3a>
 800b942:	2501      	movs	r5, #1
 800b944:	426d      	negs	r5, r5
 800b946:	0028      	movs	r0, r5
 800b948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	6820      	ldr	r0, [r4, #0]
 800b94e:	b2ef      	uxtb	r7, r5
 800b950:	1ac0      	subs	r0, r0, r3
 800b952:	6963      	ldr	r3, [r4, #20]
 800b954:	b2ed      	uxtb	r5, r5
 800b956:	4283      	cmp	r3, r0
 800b958:	dc05      	bgt.n	800b966 <__swbuf_r+0x56>
 800b95a:	0021      	movs	r1, r4
 800b95c:	0030      	movs	r0, r6
 800b95e:	f7ff fd81 	bl	800b464 <_fflush_r>
 800b962:	2800      	cmp	r0, #0
 800b964:	d1ed      	bne.n	800b942 <__swbuf_r+0x32>
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	3001      	adds	r0, #1
 800b96a:	3b01      	subs	r3, #1
 800b96c:	60a3      	str	r3, [r4, #8]
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	701f      	strb	r7, [r3, #0]
 800b976:	6963      	ldr	r3, [r4, #20]
 800b978:	4283      	cmp	r3, r0
 800b97a:	d004      	beq.n	800b986 <__swbuf_r+0x76>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d5e1      	bpl.n	800b946 <__swbuf_r+0x36>
 800b982:	2d0a      	cmp	r5, #10
 800b984:	d1df      	bne.n	800b946 <__swbuf_r+0x36>
 800b986:	0021      	movs	r1, r4
 800b988:	0030      	movs	r0, r6
 800b98a:	f7ff fd6b 	bl	800b464 <_fflush_r>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0d9      	beq.n	800b946 <__swbuf_r+0x36>
 800b992:	e7d6      	b.n	800b942 <__swbuf_r+0x32>

0800b994 <__swsetup_r>:
 800b994:	4b2d      	ldr	r3, [pc, #180]	@ (800ba4c <__swsetup_r+0xb8>)
 800b996:	b570      	push	{r4, r5, r6, lr}
 800b998:	0005      	movs	r5, r0
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	000c      	movs	r4, r1
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d004      	beq.n	800b9ac <__swsetup_r+0x18>
 800b9a2:	6a03      	ldr	r3, [r0, #32]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <__swsetup_r+0x18>
 800b9a8:	f7fd ff2c 	bl	8009804 <__sinit>
 800b9ac:	220c      	movs	r2, #12
 800b9ae:	5ea3      	ldrsh	r3, [r4, r2]
 800b9b0:	071a      	lsls	r2, r3, #28
 800b9b2:	d423      	bmi.n	800b9fc <__swsetup_r+0x68>
 800b9b4:	06da      	lsls	r2, r3, #27
 800b9b6:	d407      	bmi.n	800b9c8 <__swsetup_r+0x34>
 800b9b8:	2209      	movs	r2, #9
 800b9ba:	602a      	str	r2, [r5, #0]
 800b9bc:	2240      	movs	r2, #64	@ 0x40
 800b9be:	2001      	movs	r0, #1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	4240      	negs	r0, r0
 800b9c6:	e03a      	b.n	800ba3e <__swsetup_r+0xaa>
 800b9c8:	075b      	lsls	r3, r3, #29
 800b9ca:	d513      	bpl.n	800b9f4 <__swsetup_r+0x60>
 800b9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d008      	beq.n	800b9e4 <__swsetup_r+0x50>
 800b9d2:	0023      	movs	r3, r4
 800b9d4:	3344      	adds	r3, #68	@ 0x44
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d002      	beq.n	800b9e0 <__swsetup_r+0x4c>
 800b9da:	0028      	movs	r0, r5
 800b9dc:	f7fe febc 	bl	800a758 <_free_r>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9e4:	2224      	movs	r2, #36	@ 0x24
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	4393      	bics	r3, r2
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	6063      	str	r3, [r4, #4]
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	2308      	movs	r3, #8
 800b9f6:	89a2      	ldrh	r2, [r4, #12]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10b      	bne.n	800ba1a <__swsetup_r+0x86>
 800ba02:	21a0      	movs	r1, #160	@ 0xa0
 800ba04:	2280      	movs	r2, #128	@ 0x80
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	0089      	lsls	r1, r1, #2
 800ba0a:	0092      	lsls	r2, r2, #2
 800ba0c:	400b      	ands	r3, r1
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d003      	beq.n	800ba1a <__swsetup_r+0x86>
 800ba12:	0021      	movs	r1, r4
 800ba14:	0028      	movs	r0, r5
 800ba16:	f000 f88f 	bl	800bb38 <__smakebuf_r>
 800ba1a:	220c      	movs	r2, #12
 800ba1c:	5ea3      	ldrsh	r3, [r4, r2]
 800ba1e:	2101      	movs	r1, #1
 800ba20:	001a      	movs	r2, r3
 800ba22:	400a      	ands	r2, r1
 800ba24:	420b      	tst	r3, r1
 800ba26:	d00b      	beq.n	800ba40 <__swsetup_r+0xac>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	60a2      	str	r2, [r4, #8]
 800ba2c:	6962      	ldr	r2, [r4, #20]
 800ba2e:	4252      	negs	r2, r2
 800ba30:	61a2      	str	r2, [r4, #24]
 800ba32:	2000      	movs	r0, #0
 800ba34:	6922      	ldr	r2, [r4, #16]
 800ba36:	4282      	cmp	r2, r0
 800ba38:	d101      	bne.n	800ba3e <__swsetup_r+0xaa>
 800ba3a:	061a      	lsls	r2, r3, #24
 800ba3c:	d4be      	bmi.n	800b9bc <__swsetup_r+0x28>
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}
 800ba40:	0799      	lsls	r1, r3, #30
 800ba42:	d400      	bmi.n	800ba46 <__swsetup_r+0xb2>
 800ba44:	6962      	ldr	r2, [r4, #20]
 800ba46:	60a2      	str	r2, [r4, #8]
 800ba48:	e7f3      	b.n	800ba32 <__swsetup_r+0x9e>
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	20000018 	.word	0x20000018

0800ba50 <_raise_r>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	0004      	movs	r4, r0
 800ba54:	000d      	movs	r5, r1
 800ba56:	291f      	cmp	r1, #31
 800ba58:	d904      	bls.n	800ba64 <_raise_r+0x14>
 800ba5a:	2316      	movs	r3, #22
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	2001      	movs	r0, #1
 800ba60:	4240      	negs	r0, r0
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <_raise_r+0x24>
 800ba6a:	008a      	lsls	r2, r1, #2
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	d108      	bne.n	800ba86 <_raise_r+0x36>
 800ba74:	0020      	movs	r0, r4
 800ba76:	f000 f831 	bl	800badc <_getpid_r>
 800ba7a:	002a      	movs	r2, r5
 800ba7c:	0001      	movs	r1, r0
 800ba7e:	0020      	movs	r0, r4
 800ba80:	f000 f81a 	bl	800bab8 <_kill_r>
 800ba84:	e7ed      	b.n	800ba62 <_raise_r+0x12>
 800ba86:	2a01      	cmp	r2, #1
 800ba88:	d009      	beq.n	800ba9e <_raise_r+0x4e>
 800ba8a:	1c51      	adds	r1, r2, #1
 800ba8c:	d103      	bne.n	800ba96 <_raise_r+0x46>
 800ba8e:	2316      	movs	r3, #22
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	2001      	movs	r0, #1
 800ba94:	e7e5      	b.n	800ba62 <_raise_r+0x12>
 800ba96:	2100      	movs	r1, #0
 800ba98:	0028      	movs	r0, r5
 800ba9a:	6019      	str	r1, [r3, #0]
 800ba9c:	4790      	blx	r2
 800ba9e:	2000      	movs	r0, #0
 800baa0:	e7df      	b.n	800ba62 <_raise_r+0x12>
	...

0800baa4 <raise>:
 800baa4:	b510      	push	{r4, lr}
 800baa6:	4b03      	ldr	r3, [pc, #12]	@ (800bab4 <raise+0x10>)
 800baa8:	0001      	movs	r1, r0
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	f7ff ffd0 	bl	800ba50 <_raise_r>
 800bab0:	bd10      	pop	{r4, pc}
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	20000018 	.word	0x20000018

0800bab8 <_kill_r>:
 800bab8:	2300      	movs	r3, #0
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	4d06      	ldr	r5, [pc, #24]	@ (800bad8 <_kill_r+0x20>)
 800babe:	0004      	movs	r4, r0
 800bac0:	0008      	movs	r0, r1
 800bac2:	0011      	movs	r1, r2
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	f7f8 f81d 	bl	8003b04 <_kill>
 800baca:	1c43      	adds	r3, r0, #1
 800bacc:	d103      	bne.n	800bad6 <_kill_r+0x1e>
 800bace:	682b      	ldr	r3, [r5, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d000      	beq.n	800bad6 <_kill_r+0x1e>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	20000640 	.word	0x20000640

0800badc <_getpid_r>:
 800badc:	b510      	push	{r4, lr}
 800bade:	f7f8 f80b 	bl	8003af8 <_getpid>
 800bae2:	bd10      	pop	{r4, pc}

0800bae4 <__swhatbuf_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	000e      	movs	r6, r1
 800bae8:	001d      	movs	r5, r3
 800baea:	230e      	movs	r3, #14
 800baec:	5ec9      	ldrsh	r1, [r1, r3]
 800baee:	0014      	movs	r4, r2
 800baf0:	b096      	sub	sp, #88	@ 0x58
 800baf2:	2900      	cmp	r1, #0
 800baf4:	da0c      	bge.n	800bb10 <__swhatbuf_r+0x2c>
 800baf6:	89b2      	ldrh	r2, [r6, #12]
 800baf8:	2380      	movs	r3, #128	@ 0x80
 800bafa:	0011      	movs	r1, r2
 800bafc:	4019      	ands	r1, r3
 800bafe:	421a      	tst	r2, r3
 800bb00:	d114      	bne.n	800bb2c <__swhatbuf_r+0x48>
 800bb02:	2380      	movs	r3, #128	@ 0x80
 800bb04:	00db      	lsls	r3, r3, #3
 800bb06:	2000      	movs	r0, #0
 800bb08:	6029      	str	r1, [r5, #0]
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	b016      	add	sp, #88	@ 0x58
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	466a      	mov	r2, sp
 800bb12:	f000 f853 	bl	800bbbc <_fstat_r>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	dbed      	blt.n	800baf6 <__swhatbuf_r+0x12>
 800bb1a:	23f0      	movs	r3, #240	@ 0xf0
 800bb1c:	9901      	ldr	r1, [sp, #4]
 800bb1e:	021b      	lsls	r3, r3, #8
 800bb20:	4019      	ands	r1, r3
 800bb22:	4b04      	ldr	r3, [pc, #16]	@ (800bb34 <__swhatbuf_r+0x50>)
 800bb24:	18c9      	adds	r1, r1, r3
 800bb26:	424b      	negs	r3, r1
 800bb28:	4159      	adcs	r1, r3
 800bb2a:	e7ea      	b.n	800bb02 <__swhatbuf_r+0x1e>
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	2340      	movs	r3, #64	@ 0x40
 800bb30:	e7e9      	b.n	800bb06 <__swhatbuf_r+0x22>
 800bb32:	46c0      	nop			@ (mov r8, r8)
 800bb34:	ffffe000 	.word	0xffffe000

0800bb38 <__smakebuf_r>:
 800bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3a:	2602      	movs	r6, #2
 800bb3c:	898b      	ldrh	r3, [r1, #12]
 800bb3e:	0005      	movs	r5, r0
 800bb40:	000c      	movs	r4, r1
 800bb42:	b085      	sub	sp, #20
 800bb44:	4233      	tst	r3, r6
 800bb46:	d007      	beq.n	800bb58 <__smakebuf_r+0x20>
 800bb48:	0023      	movs	r3, r4
 800bb4a:	3347      	adds	r3, #71	@ 0x47
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	2301      	movs	r3, #1
 800bb52:	6163      	str	r3, [r4, #20]
 800bb54:	b005      	add	sp, #20
 800bb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb58:	ab03      	add	r3, sp, #12
 800bb5a:	aa02      	add	r2, sp, #8
 800bb5c:	f7ff ffc2 	bl	800bae4 <__swhatbuf_r>
 800bb60:	9f02      	ldr	r7, [sp, #8]
 800bb62:	9001      	str	r0, [sp, #4]
 800bb64:	0039      	movs	r1, r7
 800bb66:	0028      	movs	r0, r5
 800bb68:	f7fe fe6c 	bl	800a844 <_malloc_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d108      	bne.n	800bb82 <__smakebuf_r+0x4a>
 800bb70:	220c      	movs	r2, #12
 800bb72:	5ea3      	ldrsh	r3, [r4, r2]
 800bb74:	059a      	lsls	r2, r3, #22
 800bb76:	d4ed      	bmi.n	800bb54 <__smakebuf_r+0x1c>
 800bb78:	2203      	movs	r2, #3
 800bb7a:	4393      	bics	r3, r2
 800bb7c:	431e      	orrs	r6, r3
 800bb7e:	81a6      	strh	r6, [r4, #12]
 800bb80:	e7e2      	b.n	800bb48 <__smakebuf_r+0x10>
 800bb82:	2380      	movs	r3, #128	@ 0x80
 800bb84:	89a2      	ldrh	r2, [r4, #12]
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	6120      	str	r0, [r4, #16]
 800bb90:	6167      	str	r7, [r4, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00c      	beq.n	800bbb0 <__smakebuf_r+0x78>
 800bb96:	0028      	movs	r0, r5
 800bb98:	230e      	movs	r3, #14
 800bb9a:	5ee1      	ldrsh	r1, [r4, r3]
 800bb9c:	f000 f820 	bl	800bbe0 <_isatty_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d005      	beq.n	800bbb0 <__smakebuf_r+0x78>
 800bba4:	2303      	movs	r3, #3
 800bba6:	89a2      	ldrh	r2, [r4, #12]
 800bba8:	439a      	bics	r2, r3
 800bbaa:	3b02      	subs	r3, #2
 800bbac:	4313      	orrs	r3, r2
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	9a01      	ldr	r2, [sp, #4]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	e7cc      	b.n	800bb54 <__smakebuf_r+0x1c>
	...

0800bbbc <_fstat_r>:
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	b570      	push	{r4, r5, r6, lr}
 800bbc0:	4d06      	ldr	r5, [pc, #24]	@ (800bbdc <_fstat_r+0x20>)
 800bbc2:	0004      	movs	r4, r0
 800bbc4:	0008      	movs	r0, r1
 800bbc6:	0011      	movs	r1, r2
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	f7f7 fffb 	bl	8003bc4 <_fstat>
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	d103      	bne.n	800bbda <_fstat_r+0x1e>
 800bbd2:	682b      	ldr	r3, [r5, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d000      	beq.n	800bbda <_fstat_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	20000640 	.word	0x20000640

0800bbe0 <_isatty_r>:
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	b570      	push	{r4, r5, r6, lr}
 800bbe4:	4d06      	ldr	r5, [pc, #24]	@ (800bc00 <_isatty_r+0x20>)
 800bbe6:	0004      	movs	r4, r0
 800bbe8:	0008      	movs	r0, r1
 800bbea:	602b      	str	r3, [r5, #0]
 800bbec:	f7f7 fff8 	bl	8003be0 <_isatty>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d103      	bne.n	800bbfc <_isatty_r+0x1c>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d000      	beq.n	800bbfc <_isatty_r+0x1c>
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	46c0      	nop			@ (mov r8, r8)
 800bc00:	20000640 	.word	0x20000640

0800bc04 <_init>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	46c0      	nop			@ (mov r8, r8)
 800bc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0a:	bc08      	pop	{r3}
 800bc0c:	469e      	mov	lr, r3
 800bc0e:	4770      	bx	lr

0800bc10 <_fini>:
 800bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc16:	bc08      	pop	{r3}
 800bc18:	469e      	mov	lr, r3
 800bc1a:	4770      	bx	lr
