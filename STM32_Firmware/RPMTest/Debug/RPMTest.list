
RPMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007d70  08007d70  00017d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800822c  0800822c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001d8  0800840c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800840c  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eea6  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9c  00000000  00000000  0002f0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad2  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ac9  00000000  00000000  00032822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100e6  00000000  00000000  0004a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000973e4  00000000  00000000  0005a3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043ac  00000000  00000000  000f17b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f5b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d58 	.word	0x08007d58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08007d58 	.word	0x08007d58

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f977 	bl	8001730 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8c7 	bl	80015e0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f969 	bl	8001730 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f95f 	bl	8001730 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8ef 	bl	8001664 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f8e5 	bl	8001664 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f8ca 	bl	80026a0 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f8c5 	bl	80026a0 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0047      	lsls	r7, r0, #1
 800068e:	1c0c      	adds	r4, r1, #0
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2f00      	cmp	r7, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fdiv+0x1c>
 800069a:	e06f      	b.n	800077c <__aeabi_fdiv+0xfc>
 800069c:	2fff      	cmp	r7, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fdiv+0x22>
 80006a0:	e074      	b.n	800078c <__aeabi_fdiv+0x10c>
 80006a2:	2300      	movs	r3, #0
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	4699      	mov	r9, r3
 80006a8:	469a      	mov	sl, r3
 80006aa:	00ed      	lsls	r5, r5, #3
 80006ac:	04d2      	lsls	r2, r2, #19
 80006ae:	4315      	orrs	r5, r2
 80006b0:	3f7f      	subs	r7, #127	; 0x7f
 80006b2:	0263      	lsls	r3, r4, #9
 80006b4:	0a5b      	lsrs	r3, r3, #9
 80006b6:	4698      	mov	r8, r3
 80006b8:	0063      	lsls	r3, r4, #1
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fe4      	lsrs	r4, r4, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d04d      	beq.n	800075e <__aeabi_fdiv+0xde>
 80006c2:	2bff      	cmp	r3, #255	; 0xff
 80006c4:	d045      	beq.n	8000752 <__aeabi_fdiv+0xd2>
 80006c6:	4642      	mov	r2, r8
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	04c9      	lsls	r1, r1, #19
 80006ce:	4311      	orrs	r1, r2
 80006d0:	4688      	mov	r8, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	3b7f      	subs	r3, #127	; 0x7f
 80006d6:	0031      	movs	r1, r6
 80006d8:	1aff      	subs	r7, r7, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	4061      	eors	r1, r4
 80006de:	b2c9      	uxtb	r1, r1
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d900      	bls.n	80006e6 <__aeabi_fdiv+0x66>
 80006e4:	e0b8      	b.n	8000858 <__aeabi_fdiv+0x1d8>
 80006e6:	4870      	ldr	r0, [pc, #448]	; (80008a8 <__aeabi_fdiv+0x228>)
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	58c3      	ldr	r3, [r0, r3]
 80006ec:	469f      	mov	pc, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	0026      	movs	r6, r4
 80006f4:	4645      	mov	r5, r8
 80006f6:	4692      	mov	sl, r2
 80006f8:	4653      	mov	r3, sl
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d100      	bne.n	8000700 <__aeabi_fdiv+0x80>
 80006fe:	e08d      	b.n	800081c <__aeabi_fdiv+0x19c>
 8000700:	2b03      	cmp	r3, #3
 8000702:	d100      	bne.n	8000706 <__aeabi_fdiv+0x86>
 8000704:	e0a1      	b.n	800084a <__aeabi_fdiv+0x1ca>
 8000706:	2b01      	cmp	r3, #1
 8000708:	d018      	beq.n	800073c <__aeabi_fdiv+0xbc>
 800070a:	003b      	movs	r3, r7
 800070c:	337f      	adds	r3, #127	; 0x7f
 800070e:	2b00      	cmp	r3, #0
 8000710:	dd6d      	ble.n	80007ee <__aeabi_fdiv+0x16e>
 8000712:	076a      	lsls	r2, r5, #29
 8000714:	d004      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 8000716:	220f      	movs	r2, #15
 8000718:	402a      	ands	r2, r5
 800071a:	2a04      	cmp	r2, #4
 800071c:	d000      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 800071e:	3504      	adds	r5, #4
 8000720:	012a      	lsls	r2, r5, #4
 8000722:	d503      	bpl.n	800072c <__aeabi_fdiv+0xac>
 8000724:	4b61      	ldr	r3, [pc, #388]	; (80008ac <__aeabi_fdiv+0x22c>)
 8000726:	401d      	ands	r5, r3
 8000728:	003b      	movs	r3, r7
 800072a:	3380      	adds	r3, #128	; 0x80
 800072c:	2bfe      	cmp	r3, #254	; 0xfe
 800072e:	dd00      	ble.n	8000732 <__aeabi_fdiv+0xb2>
 8000730:	e074      	b.n	800081c <__aeabi_fdiv+0x19c>
 8000732:	01aa      	lsls	r2, r5, #6
 8000734:	0a52      	lsrs	r2, r2, #9
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	e002      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800073a:	000e      	movs	r6, r1
 800073c:	2000      	movs	r0, #0
 800073e:	2200      	movs	r2, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4310      	orrs	r0, r2
 8000746:	4330      	orrs	r0, r6
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	4643      	mov	r3, r8
 8000754:	2b00      	cmp	r3, #0
 8000756:	d13f      	bne.n	80007d8 <__aeabi_fdiv+0x158>
 8000758:	2202      	movs	r2, #2
 800075a:	3fff      	subs	r7, #255	; 0xff
 800075c:	e003      	b.n	8000766 <__aeabi_fdiv+0xe6>
 800075e:	4643      	mov	r3, r8
 8000760:	2b00      	cmp	r3, #0
 8000762:	d12d      	bne.n	80007c0 <__aeabi_fdiv+0x140>
 8000764:	2201      	movs	r2, #1
 8000766:	0031      	movs	r1, r6
 8000768:	464b      	mov	r3, r9
 800076a:	4061      	eors	r1, r4
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	4313      	orrs	r3, r2
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d838      	bhi.n	80007e6 <__aeabi_fdiv+0x166>
 8000774:	484e      	ldr	r0, [pc, #312]	; (80008b0 <__aeabi_fdiv+0x230>)
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	58c3      	ldr	r3, [r0, r3]
 800077a:	469f      	mov	pc, r3
 800077c:	2d00      	cmp	r5, #0
 800077e:	d113      	bne.n	80007a8 <__aeabi_fdiv+0x128>
 8000780:	2304      	movs	r3, #4
 8000782:	4699      	mov	r9, r3
 8000784:	3b03      	subs	r3, #3
 8000786:	2700      	movs	r7, #0
 8000788:	469a      	mov	sl, r3
 800078a:	e792      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d105      	bne.n	800079c <__aeabi_fdiv+0x11c>
 8000790:	2308      	movs	r3, #8
 8000792:	4699      	mov	r9, r3
 8000794:	3b06      	subs	r3, #6
 8000796:	27ff      	movs	r7, #255	; 0xff
 8000798:	469a      	mov	sl, r3
 800079a:	e78a      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800079c:	230c      	movs	r3, #12
 800079e:	4699      	mov	r9, r3
 80007a0:	3b09      	subs	r3, #9
 80007a2:	27ff      	movs	r7, #255	; 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e784      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007a8:	0028      	movs	r0, r5
 80007aa:	f001 ff5b 	bl	8002664 <__clzsi2>
 80007ae:	2776      	movs	r7, #118	; 0x76
 80007b0:	1f43      	subs	r3, r0, #5
 80007b2:	409d      	lsls	r5, r3
 80007b4:	2300      	movs	r3, #0
 80007b6:	427f      	negs	r7, r7
 80007b8:	4699      	mov	r9, r3
 80007ba:	469a      	mov	sl, r3
 80007bc:	1a3f      	subs	r7, r7, r0
 80007be:	e778      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007c0:	4640      	mov	r0, r8
 80007c2:	f001 ff4f 	bl	8002664 <__clzsi2>
 80007c6:	4642      	mov	r2, r8
 80007c8:	1f43      	subs	r3, r0, #5
 80007ca:	409a      	lsls	r2, r3
 80007cc:	2376      	movs	r3, #118	; 0x76
 80007ce:	425b      	negs	r3, r3
 80007d0:	4690      	mov	r8, r2
 80007d2:	1a1b      	subs	r3, r3, r0
 80007d4:	2200      	movs	r2, #0
 80007d6:	e77e      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007d8:	2303      	movs	r3, #3
 80007da:	464a      	mov	r2, r9
 80007dc:	431a      	orrs	r2, r3
 80007de:	4691      	mov	r9, r2
 80007e0:	33fc      	adds	r3, #252	; 0xfc
 80007e2:	2203      	movs	r2, #3
 80007e4:	e777      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007e6:	000e      	movs	r6, r1
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	2200      	movs	r2, #0
 80007ec:	e7a8      	b.n	8000740 <__aeabi_fdiv+0xc0>
 80007ee:	2201      	movs	r2, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b1b      	cmp	r3, #27
 80007f4:	dca2      	bgt.n	800073c <__aeabi_fdiv+0xbc>
 80007f6:	379e      	adds	r7, #158	; 0x9e
 80007f8:	002a      	movs	r2, r5
 80007fa:	40bd      	lsls	r5, r7
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	1e6b      	subs	r3, r5, #1
 8000800:	419d      	sbcs	r5, r3
 8000802:	4315      	orrs	r5, r2
 8000804:	076a      	lsls	r2, r5, #29
 8000806:	d004      	beq.n	8000812 <__aeabi_fdiv+0x192>
 8000808:	220f      	movs	r2, #15
 800080a:	402a      	ands	r2, r5
 800080c:	2a04      	cmp	r2, #4
 800080e:	d000      	beq.n	8000812 <__aeabi_fdiv+0x192>
 8000810:	3504      	adds	r5, #4
 8000812:	016a      	lsls	r2, r5, #5
 8000814:	d544      	bpl.n	80008a0 <__aeabi_fdiv+0x220>
 8000816:	2001      	movs	r0, #1
 8000818:	2200      	movs	r2, #0
 800081a:	e791      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	2200      	movs	r2, #0
 8000820:	e78e      	b.n	8000740 <__aeabi_fdiv+0xc0>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	2600      	movs	r6, #0
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	03d2      	lsls	r2, r2, #15
 800082a:	e789      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800082c:	2300      	movs	r3, #0
 800082e:	4698      	mov	r8, r3
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	03d2      	lsls	r2, r2, #15
 8000834:	4215      	tst	r5, r2
 8000836:	d008      	beq.n	800084a <__aeabi_fdiv+0x1ca>
 8000838:	4643      	mov	r3, r8
 800083a:	4213      	tst	r3, r2
 800083c:	d105      	bne.n	800084a <__aeabi_fdiv+0x1ca>
 800083e:	431a      	orrs	r2, r3
 8000840:	0252      	lsls	r2, r2, #9
 8000842:	0026      	movs	r6, r4
 8000844:	20ff      	movs	r0, #255	; 0xff
 8000846:	0a52      	lsrs	r2, r2, #9
 8000848:	e77a      	b.n	8000740 <__aeabi_fdiv+0xc0>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	03d2      	lsls	r2, r2, #15
 800084e:	432a      	orrs	r2, r5
 8000850:	0252      	lsls	r2, r2, #9
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	0a52      	lsrs	r2, r2, #9
 8000856:	e773      	b.n	8000740 <__aeabi_fdiv+0xc0>
 8000858:	4642      	mov	r2, r8
 800085a:	016b      	lsls	r3, r5, #5
 800085c:	0155      	lsls	r5, r2, #5
 800085e:	42ab      	cmp	r3, r5
 8000860:	d21a      	bcs.n	8000898 <__aeabi_fdiv+0x218>
 8000862:	201b      	movs	r0, #27
 8000864:	2200      	movs	r2, #0
 8000866:	3f01      	subs	r7, #1
 8000868:	2601      	movs	r6, #1
 800086a:	001c      	movs	r4, r3
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2c00      	cmp	r4, #0
 8000872:	db01      	blt.n	8000878 <__aeabi_fdiv+0x1f8>
 8000874:	429d      	cmp	r5, r3
 8000876:	d801      	bhi.n	800087c <__aeabi_fdiv+0x1fc>
 8000878:	1b5b      	subs	r3, r3, r5
 800087a:	4332      	orrs	r2, r6
 800087c:	3801      	subs	r0, #1
 800087e:	2800      	cmp	r0, #0
 8000880:	d1f3      	bne.n	800086a <__aeabi_fdiv+0x1ea>
 8000882:	1e58      	subs	r0, r3, #1
 8000884:	4183      	sbcs	r3, r0
 8000886:	4313      	orrs	r3, r2
 8000888:	001d      	movs	r5, r3
 800088a:	003b      	movs	r3, r7
 800088c:	337f      	adds	r3, #127	; 0x7f
 800088e:	000e      	movs	r6, r1
 8000890:	2b00      	cmp	r3, #0
 8000892:	dd00      	ble.n	8000896 <__aeabi_fdiv+0x216>
 8000894:	e73d      	b.n	8000712 <__aeabi_fdiv+0x92>
 8000896:	e7aa      	b.n	80007ee <__aeabi_fdiv+0x16e>
 8000898:	201a      	movs	r0, #26
 800089a:	2201      	movs	r2, #1
 800089c:	1b5b      	subs	r3, r3, r5
 800089e:	e7e3      	b.n	8000868 <__aeabi_fdiv+0x1e8>
 80008a0:	01aa      	lsls	r2, r5, #6
 80008a2:	2000      	movs	r0, #0
 80008a4:	0a52      	lsrs	r2, r2, #9
 80008a6:	e74b      	b.n	8000740 <__aeabi_fdiv+0xc0>
 80008a8:	08007d7c 	.word	0x08007d7c
 80008ac:	f7ffffff 	.word	0xf7ffffff
 80008b0:	08007dbc 	.word	0x08007dbc

080008b4 <__aeabi_ui2f>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	1e04      	subs	r4, r0, #0
 80008b8:	d00e      	beq.n	80008d8 <__aeabi_ui2f+0x24>
 80008ba:	f001 fed3 	bl	8002664 <__clzsi2>
 80008be:	239e      	movs	r3, #158	; 0x9e
 80008c0:	0001      	movs	r1, r0
 80008c2:	1a1b      	subs	r3, r3, r0
 80008c4:	2b96      	cmp	r3, #150	; 0x96
 80008c6:	dc0c      	bgt.n	80008e2 <__aeabi_ui2f+0x2e>
 80008c8:	2808      	cmp	r0, #8
 80008ca:	d02c      	beq.n	8000926 <__aeabi_ui2f+0x72>
 80008cc:	3908      	subs	r1, #8
 80008ce:	408c      	lsls	r4, r1
 80008d0:	0264      	lsls	r4, r4, #9
 80008d2:	0a64      	lsrs	r4, r4, #9
 80008d4:	b2d8      	uxtb	r0, r3
 80008d6:	e001      	b.n	80008dc <__aeabi_ui2f+0x28>
 80008d8:	2000      	movs	r0, #0
 80008da:	2400      	movs	r4, #0
 80008dc:	05c0      	lsls	r0, r0, #23
 80008de:	4320      	orrs	r0, r4
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	2b99      	cmp	r3, #153	; 0x99
 80008e4:	dd0a      	ble.n	80008fc <__aeabi_ui2f+0x48>
 80008e6:	0002      	movs	r2, r0
 80008e8:	0020      	movs	r0, r4
 80008ea:	321b      	adds	r2, #27
 80008ec:	4090      	lsls	r0, r2
 80008ee:	0002      	movs	r2, r0
 80008f0:	1e50      	subs	r0, r2, #1
 80008f2:	4182      	sbcs	r2, r0
 80008f4:	2005      	movs	r0, #5
 80008f6:	1a40      	subs	r0, r0, r1
 80008f8:	40c4      	lsrs	r4, r0
 80008fa:	4314      	orrs	r4, r2
 80008fc:	2905      	cmp	r1, #5
 80008fe:	dc16      	bgt.n	800092e <__aeabi_ui2f+0x7a>
 8000900:	0022      	movs	r2, r4
 8000902:	480f      	ldr	r0, [pc, #60]	; (8000940 <__aeabi_ui2f+0x8c>)
 8000904:	4002      	ands	r2, r0
 8000906:	0765      	lsls	r5, r4, #29
 8000908:	d009      	beq.n	800091e <__aeabi_ui2f+0x6a>
 800090a:	250f      	movs	r5, #15
 800090c:	402c      	ands	r4, r5
 800090e:	2c04      	cmp	r4, #4
 8000910:	d005      	beq.n	800091e <__aeabi_ui2f+0x6a>
 8000912:	3204      	adds	r2, #4
 8000914:	0154      	lsls	r4, r2, #5
 8000916:	d502      	bpl.n	800091e <__aeabi_ui2f+0x6a>
 8000918:	239f      	movs	r3, #159	; 0x9f
 800091a:	4002      	ands	r2, r0
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	0192      	lsls	r2, r2, #6
 8000920:	0a54      	lsrs	r4, r2, #9
 8000922:	b2d8      	uxtb	r0, r3
 8000924:	e7da      	b.n	80008dc <__aeabi_ui2f+0x28>
 8000926:	0264      	lsls	r4, r4, #9
 8000928:	2096      	movs	r0, #150	; 0x96
 800092a:	0a64      	lsrs	r4, r4, #9
 800092c:	e7d6      	b.n	80008dc <__aeabi_ui2f+0x28>
 800092e:	1f4a      	subs	r2, r1, #5
 8000930:	4094      	lsls	r4, r2
 8000932:	0022      	movs	r2, r4
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <__aeabi_ui2f+0x8c>)
 8000936:	4002      	ands	r2, r0
 8000938:	0765      	lsls	r5, r4, #29
 800093a:	d0f0      	beq.n	800091e <__aeabi_ui2f+0x6a>
 800093c:	e7e5      	b.n	800090a <__aeabi_ui2f+0x56>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	fbffffff 	.word	0xfbffffff

08000944 <__aeabi_dadd>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	464f      	mov	r7, r9
 8000948:	4646      	mov	r6, r8
 800094a:	46d6      	mov	lr, sl
 800094c:	0004      	movs	r4, r0
 800094e:	b5c0      	push	{r6, r7, lr}
 8000950:	001f      	movs	r7, r3
 8000952:	030b      	lsls	r3, r1, #12
 8000954:	0010      	movs	r0, r2
 8000956:	004e      	lsls	r6, r1, #1
 8000958:	0a5b      	lsrs	r3, r3, #9
 800095a:	0fcd      	lsrs	r5, r1, #31
 800095c:	0f61      	lsrs	r1, r4, #29
 800095e:	007a      	lsls	r2, r7, #1
 8000960:	4319      	orrs	r1, r3
 8000962:	00e3      	lsls	r3, r4, #3
 8000964:	033c      	lsls	r4, r7, #12
 8000966:	0fff      	lsrs	r7, r7, #31
 8000968:	46bc      	mov	ip, r7
 800096a:	0a64      	lsrs	r4, r4, #9
 800096c:	0f47      	lsrs	r7, r0, #29
 800096e:	4327      	orrs	r7, r4
 8000970:	0d76      	lsrs	r6, r6, #21
 8000972:	0d52      	lsrs	r2, r2, #21
 8000974:	00c0      	lsls	r0, r0, #3
 8000976:	46b9      	mov	r9, r7
 8000978:	4680      	mov	r8, r0
 800097a:	1ab7      	subs	r7, r6, r2
 800097c:	4565      	cmp	r5, ip
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x3e>
 8000980:	e09b      	b.n	8000aba <__aeabi_dadd+0x176>
 8000982:	2f00      	cmp	r7, #0
 8000984:	dc00      	bgt.n	8000988 <__aeabi_dadd+0x44>
 8000986:	e084      	b.n	8000a92 <__aeabi_dadd+0x14e>
 8000988:	2a00      	cmp	r2, #0
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x4a>
 800098c:	e0be      	b.n	8000b0c <__aeabi_dadd+0x1c8>
 800098e:	4ac8      	ldr	r2, [pc, #800]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000990:	4296      	cmp	r6, r2
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x52>
 8000994:	e124      	b.n	8000be0 <__aeabi_dadd+0x29c>
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	464c      	mov	r4, r9
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	4314      	orrs	r4, r2
 800099e:	46a1      	mov	r9, r4
 80009a0:	2f38      	cmp	r7, #56	; 0x38
 80009a2:	dd00      	ble.n	80009a6 <__aeabi_dadd+0x62>
 80009a4:	e167      	b.n	8000c76 <__aeabi_dadd+0x332>
 80009a6:	2f1f      	cmp	r7, #31
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dadd+0x68>
 80009aa:	e1d6      	b.n	8000d5a <__aeabi_dadd+0x416>
 80009ac:	2220      	movs	r2, #32
 80009ae:	464c      	mov	r4, r9
 80009b0:	1bd2      	subs	r2, r2, r7
 80009b2:	4094      	lsls	r4, r2
 80009b4:	46a2      	mov	sl, r4
 80009b6:	4644      	mov	r4, r8
 80009b8:	40fc      	lsrs	r4, r7
 80009ba:	0020      	movs	r0, r4
 80009bc:	4654      	mov	r4, sl
 80009be:	4304      	orrs	r4, r0
 80009c0:	4640      	mov	r0, r8
 80009c2:	4090      	lsls	r0, r2
 80009c4:	1e42      	subs	r2, r0, #1
 80009c6:	4190      	sbcs	r0, r2
 80009c8:	464a      	mov	r2, r9
 80009ca:	40fa      	lsrs	r2, r7
 80009cc:	4304      	orrs	r4, r0
 80009ce:	1a89      	subs	r1, r1, r2
 80009d0:	1b1c      	subs	r4, r3, r4
 80009d2:	42a3      	cmp	r3, r4
 80009d4:	4192      	sbcs	r2, r2
 80009d6:	4252      	negs	r2, r2
 80009d8:	1a8b      	subs	r3, r1, r2
 80009da:	469a      	mov	sl, r3
 80009dc:	4653      	mov	r3, sl
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_dadd+0xa0>
 80009e2:	e0d4      	b.n	8000b8e <__aeabi_dadd+0x24a>
 80009e4:	4653      	mov	r3, sl
 80009e6:	025a      	lsls	r2, r3, #9
 80009e8:	0a53      	lsrs	r3, r2, #9
 80009ea:	469a      	mov	sl, r3
 80009ec:	4653      	mov	r3, sl
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0xb0>
 80009f2:	e104      	b.n	8000bfe <__aeabi_dadd+0x2ba>
 80009f4:	4650      	mov	r0, sl
 80009f6:	f001 fe35 	bl	8002664 <__clzsi2>
 80009fa:	0003      	movs	r3, r0
 80009fc:	3b08      	subs	r3, #8
 80009fe:	2220      	movs	r2, #32
 8000a00:	0020      	movs	r0, r4
 8000a02:	1ad2      	subs	r2, r2, r3
 8000a04:	4651      	mov	r1, sl
 8000a06:	40d0      	lsrs	r0, r2
 8000a08:	4099      	lsls	r1, r3
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	409c      	lsls	r4, r3
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	42b3      	cmp	r3, r6
 8000a12:	da00      	bge.n	8000a16 <__aeabi_dadd+0xd2>
 8000a14:	e102      	b.n	8000c1c <__aeabi_dadd+0x2d8>
 8000a16:	1b9b      	subs	r3, r3, r6
 8000a18:	1c59      	adds	r1, r3, #1
 8000a1a:	291f      	cmp	r1, #31
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dadd+0xdc>
 8000a1e:	e0a7      	b.n	8000b70 <__aeabi_dadd+0x22c>
 8000a20:	2320      	movs	r3, #32
 8000a22:	0010      	movs	r0, r2
 8000a24:	0026      	movs	r6, r4
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	409c      	lsls	r4, r3
 8000a2a:	4098      	lsls	r0, r3
 8000a2c:	40ce      	lsrs	r6, r1
 8000a2e:	40ca      	lsrs	r2, r1
 8000a30:	1e63      	subs	r3, r4, #1
 8000a32:	419c      	sbcs	r4, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	4692      	mov	sl, r2
 8000a38:	2600      	movs	r6, #0
 8000a3a:	4304      	orrs	r4, r0
 8000a3c:	0763      	lsls	r3, r4, #29
 8000a3e:	d009      	beq.n	8000a54 <__aeabi_dadd+0x110>
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d005      	beq.n	8000a54 <__aeabi_dadd+0x110>
 8000a48:	1d23      	adds	r3, r4, #4
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	41a4      	sbcs	r4, r4
 8000a4e:	4264      	negs	r4, r4
 8000a50:	44a2      	add	sl, r4
 8000a52:	001c      	movs	r4, r3
 8000a54:	4653      	mov	r3, sl
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	d400      	bmi.n	8000a5c <__aeabi_dadd+0x118>
 8000a5a:	e09b      	b.n	8000b94 <__aeabi_dadd+0x250>
 8000a5c:	4b94      	ldr	r3, [pc, #592]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000a5e:	3601      	adds	r6, #1
 8000a60:	429e      	cmp	r6, r3
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x122>
 8000a64:	e0b8      	b.n	8000bd8 <__aeabi_dadd+0x294>
 8000a66:	4653      	mov	r3, sl
 8000a68:	4992      	ldr	r1, [pc, #584]	; (8000cb4 <__aeabi_dadd+0x370>)
 8000a6a:	08e4      	lsrs	r4, r4, #3
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	0019      	movs	r1, r3
 8000a70:	075b      	lsls	r3, r3, #29
 8000a72:	4323      	orrs	r3, r4
 8000a74:	0572      	lsls	r2, r6, #21
 8000a76:	024c      	lsls	r4, r1, #9
 8000a78:	0b24      	lsrs	r4, r4, #12
 8000a7a:	0d52      	lsrs	r2, r2, #21
 8000a7c:	0512      	lsls	r2, r2, #20
 8000a7e:	07ed      	lsls	r5, r5, #31
 8000a80:	4322      	orrs	r2, r4
 8000a82:	432a      	orrs	r2, r5
 8000a84:	0018      	movs	r0, r3
 8000a86:	0011      	movs	r1, r2
 8000a88:	bce0      	pop	{r5, r6, r7}
 8000a8a:	46ba      	mov	sl, r7
 8000a8c:	46b1      	mov	r9, r6
 8000a8e:	46a8      	mov	r8, r5
 8000a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d048      	beq.n	8000b28 <__aeabi_dadd+0x1e4>
 8000a96:	1b97      	subs	r7, r2, r6
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x15a>
 8000a9c:	e10e      	b.n	8000cbc <__aeabi_dadd+0x378>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x162>
 8000aa4:	e1b7      	b.n	8000e16 <__aeabi_dadd+0x4d2>
 8000aa6:	1e7c      	subs	r4, r7, #1
 8000aa8:	2f01      	cmp	r7, #1
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x16a>
 8000aac:	e226      	b.n	8000efc <__aeabi_dadd+0x5b8>
 8000aae:	4d80      	ldr	r5, [pc, #512]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000ab0:	42af      	cmp	r7, r5
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x172>
 8000ab4:	e1d5      	b.n	8000e62 <__aeabi_dadd+0x51e>
 8000ab6:	0027      	movs	r7, r4
 8000ab8:	e107      	b.n	8000cca <__aeabi_dadd+0x386>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	dc00      	bgt.n	8000ac0 <__aeabi_dadd+0x17c>
 8000abe:	e0b2      	b.n	8000c26 <__aeabi_dadd+0x2e2>
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d047      	beq.n	8000b54 <__aeabi_dadd+0x210>
 8000ac4:	4a7a      	ldr	r2, [pc, #488]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000ac6:	4296      	cmp	r6, r2
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x188>
 8000aca:	e089      	b.n	8000be0 <__aeabi_dadd+0x29c>
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	464c      	mov	r4, r9
 8000ad0:	0412      	lsls	r2, r2, #16
 8000ad2:	4314      	orrs	r4, r2
 8000ad4:	46a1      	mov	r9, r4
 8000ad6:	2f38      	cmp	r7, #56	; 0x38
 8000ad8:	dc6b      	bgt.n	8000bb2 <__aeabi_dadd+0x26e>
 8000ada:	2f1f      	cmp	r7, #31
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_dadd+0x19c>
 8000ade:	e16e      	b.n	8000dbe <__aeabi_dadd+0x47a>
 8000ae0:	003a      	movs	r2, r7
 8000ae2:	4648      	mov	r0, r9
 8000ae4:	3a20      	subs	r2, #32
 8000ae6:	40d0      	lsrs	r0, r2
 8000ae8:	4684      	mov	ip, r0
 8000aea:	2f20      	cmp	r7, #32
 8000aec:	d007      	beq.n	8000afe <__aeabi_dadd+0x1ba>
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	4648      	mov	r0, r9
 8000af2:	1bd2      	subs	r2, r2, r7
 8000af4:	4090      	lsls	r0, r2
 8000af6:	0002      	movs	r2, r0
 8000af8:	4640      	mov	r0, r8
 8000afa:	4310      	orrs	r0, r2
 8000afc:	4680      	mov	r8, r0
 8000afe:	4640      	mov	r0, r8
 8000b00:	1e42      	subs	r2, r0, #1
 8000b02:	4190      	sbcs	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	4314      	orrs	r4, r2
 8000b0a:	e057      	b.n	8000bbc <__aeabi_dadd+0x278>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	4302      	orrs	r2, r0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x1d0>
 8000b12:	e103      	b.n	8000d1c <__aeabi_dadd+0x3d8>
 8000b14:	1e7a      	subs	r2, r7, #1
 8000b16:	2f01      	cmp	r7, #1
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x1d8>
 8000b1a:	e193      	b.n	8000e44 <__aeabi_dadd+0x500>
 8000b1c:	4c64      	ldr	r4, [pc, #400]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000b1e:	42a7      	cmp	r7, r4
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x1e0>
 8000b22:	e18a      	b.n	8000e3a <__aeabi_dadd+0x4f6>
 8000b24:	0017      	movs	r7, r2
 8000b26:	e73b      	b.n	80009a0 <__aeabi_dadd+0x5c>
 8000b28:	4c63      	ldr	r4, [pc, #396]	; (8000cb8 <__aeabi_dadd+0x374>)
 8000b2a:	1c72      	adds	r2, r6, #1
 8000b2c:	4222      	tst	r2, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x1ee>
 8000b30:	e0e0      	b.n	8000cf4 <__aeabi_dadd+0x3b0>
 8000b32:	000a      	movs	r2, r1
 8000b34:	431a      	orrs	r2, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dadd+0x1f8>
 8000b3a:	e174      	b.n	8000e26 <__aeabi_dadd+0x4e2>
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x1fe>
 8000b40:	e1d0      	b.n	8000ee4 <__aeabi_dadd+0x5a0>
 8000b42:	464a      	mov	r2, r9
 8000b44:	4302      	orrs	r2, r0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x206>
 8000b48:	e1e3      	b.n	8000f12 <__aeabi_dadd+0x5ce>
 8000b4a:	074a      	lsls	r2, r1, #29
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	08c9      	lsrs	r1, r1, #3
 8000b52:	e029      	b.n	8000ba8 <__aeabi_dadd+0x264>
 8000b54:	464a      	mov	r2, r9
 8000b56:	4302      	orrs	r2, r0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x218>
 8000b5a:	e17d      	b.n	8000e58 <__aeabi_dadd+0x514>
 8000b5c:	1e7a      	subs	r2, r7, #1
 8000b5e:	2f01      	cmp	r7, #1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x220>
 8000b62:	e0e0      	b.n	8000d26 <__aeabi_dadd+0x3e2>
 8000b64:	4c52      	ldr	r4, [pc, #328]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000b66:	42a7      	cmp	r7, r4
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x228>
 8000b6a:	e166      	b.n	8000e3a <__aeabi_dadd+0x4f6>
 8000b6c:	0017      	movs	r7, r2
 8000b6e:	e7b2      	b.n	8000ad6 <__aeabi_dadd+0x192>
 8000b70:	0010      	movs	r0, r2
 8000b72:	3b1f      	subs	r3, #31
 8000b74:	40d8      	lsrs	r0, r3
 8000b76:	2920      	cmp	r1, #32
 8000b78:	d003      	beq.n	8000b82 <__aeabi_dadd+0x23e>
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	4314      	orrs	r4, r2
 8000b82:	1e63      	subs	r3, r4, #1
 8000b84:	419c      	sbcs	r4, r3
 8000b86:	2300      	movs	r3, #0
 8000b88:	2600      	movs	r6, #0
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	4304      	orrs	r4, r0
 8000b8e:	0763      	lsls	r3, r4, #29
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dadd+0x250>
 8000b92:	e755      	b.n	8000a40 <__aeabi_dadd+0xfc>
 8000b94:	4652      	mov	r2, sl
 8000b96:	08e3      	lsrs	r3, r4, #3
 8000b98:	0752      	lsls	r2, r2, #29
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	0037      	movs	r7, r6
 8000ba0:	08d1      	lsrs	r1, r2, #3
 8000ba2:	4a43      	ldr	r2, [pc, #268]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000ba4:	4297      	cmp	r7, r2
 8000ba6:	d01f      	beq.n	8000be8 <__aeabi_dadd+0x2a4>
 8000ba8:	0309      	lsls	r1, r1, #12
 8000baa:	057a      	lsls	r2, r7, #21
 8000bac:	0b0c      	lsrs	r4, r1, #12
 8000bae:	0d52      	lsrs	r2, r2, #21
 8000bb0:	e764      	b.n	8000a7c <__aeabi_dadd+0x138>
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	464c      	mov	r4, r9
 8000bb6:	4314      	orrs	r4, r2
 8000bb8:	1e62      	subs	r2, r4, #1
 8000bba:	4194      	sbcs	r4, r2
 8000bbc:	18e4      	adds	r4, r4, r3
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	4192      	sbcs	r2, r2
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	448a      	add	sl, r1
 8000bc8:	4653      	mov	r3, sl
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	d5df      	bpl.n	8000b8e <__aeabi_dadd+0x24a>
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000bd0:	3601      	adds	r6, #1
 8000bd2:	429e      	cmp	r6, r3
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dadd+0x294>
 8000bd6:	e0b3      	b.n	8000d40 <__aeabi_dadd+0x3fc>
 8000bd8:	0032      	movs	r2, r6
 8000bda:	2400      	movs	r4, #0
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e74d      	b.n	8000a7c <__aeabi_dadd+0x138>
 8000be0:	074a      	lsls	r2, r1, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c9      	lsrs	r1, r1, #3
 8000be8:	001a      	movs	r2, r3
 8000bea:	430a      	orrs	r2, r1
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x2ac>
 8000bee:	e200      	b.n	8000ff2 <__aeabi_dadd+0x6ae>
 8000bf0:	2480      	movs	r4, #128	; 0x80
 8000bf2:	0324      	lsls	r4, r4, #12
 8000bf4:	430c      	orrs	r4, r1
 8000bf6:	0324      	lsls	r4, r4, #12
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000bfa:	0b24      	lsrs	r4, r4, #12
 8000bfc:	e73e      	b.n	8000a7c <__aeabi_dadd+0x138>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f001 fd30 	bl	8002664 <__clzsi2>
 8000c04:	0003      	movs	r3, r0
 8000c06:	3318      	adds	r3, #24
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_dadd+0x2ca>
 8000c0c:	e6f7      	b.n	80009fe <__aeabi_dadd+0xba>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	3808      	subs	r0, #8
 8000c12:	4082      	lsls	r2, r0
 8000c14:	2400      	movs	r4, #0
 8000c16:	42b3      	cmp	r3, r6
 8000c18:	db00      	blt.n	8000c1c <__aeabi_dadd+0x2d8>
 8000c1a:	e6fc      	b.n	8000a16 <__aeabi_dadd+0xd2>
 8000c1c:	1af6      	subs	r6, r6, r3
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <__aeabi_dadd+0x370>)
 8000c20:	401a      	ands	r2, r3
 8000c22:	4692      	mov	sl, r2
 8000c24:	e70a      	b.n	8000a3c <__aeabi_dadd+0xf8>
 8000c26:	2f00      	cmp	r7, #0
 8000c28:	d02b      	beq.n	8000c82 <__aeabi_dadd+0x33e>
 8000c2a:	1b97      	subs	r7, r2, r6
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x2ee>
 8000c30:	e0b8      	b.n	8000da4 <__aeabi_dadd+0x460>
 8000c32:	4c1f      	ldr	r4, [pc, #124]	; (8000cb0 <__aeabi_dadd+0x36c>)
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x2f6>
 8000c38:	e11c      	b.n	8000e74 <__aeabi_dadd+0x530>
 8000c3a:	2480      	movs	r4, #128	; 0x80
 8000c3c:	0424      	lsls	r4, r4, #16
 8000c3e:	4321      	orrs	r1, r4
 8000c40:	2f38      	cmp	r7, #56	; 0x38
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dadd+0x302>
 8000c44:	e11e      	b.n	8000e84 <__aeabi_dadd+0x540>
 8000c46:	2f1f      	cmp	r7, #31
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_dadd+0x308>
 8000c4a:	e19e      	b.n	8000f8a <__aeabi_dadd+0x646>
 8000c4c:	2620      	movs	r6, #32
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1bf6      	subs	r6, r6, r7
 8000c52:	0018      	movs	r0, r3
 8000c54:	40b3      	lsls	r3, r6
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	40f8      	lsrs	r0, r7
 8000c5a:	1e5e      	subs	r6, r3, #1
 8000c5c:	41b3      	sbcs	r3, r6
 8000c5e:	40f9      	lsrs	r1, r7
 8000c60:	4304      	orrs	r4, r0
 8000c62:	431c      	orrs	r4, r3
 8000c64:	4489      	add	r9, r1
 8000c66:	4444      	add	r4, r8
 8000c68:	4544      	cmp	r4, r8
 8000c6a:	419b      	sbcs	r3, r3
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	444b      	add	r3, r9
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	e7a8      	b.n	8000bc8 <__aeabi_dadd+0x284>
 8000c76:	4642      	mov	r2, r8
 8000c78:	464c      	mov	r4, r9
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	1e62      	subs	r2, r4, #1
 8000c7e:	4194      	sbcs	r4, r2
 8000c80:	e6a6      	b.n	80009d0 <__aeabi_dadd+0x8c>
 8000c82:	4c0d      	ldr	r4, [pc, #52]	; (8000cb8 <__aeabi_dadd+0x374>)
 8000c84:	1c72      	adds	r2, r6, #1
 8000c86:	4222      	tst	r2, r4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x348>
 8000c8a:	e0a8      	b.n	8000dde <__aeabi_dadd+0x49a>
 8000c8c:	000a      	movs	r2, r1
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d000      	beq.n	8000c96 <__aeabi_dadd+0x352>
 8000c94:	e10a      	b.n	8000eac <__aeabi_dadd+0x568>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x358>
 8000c9a:	e15e      	b.n	8000f5a <__aeabi_dadd+0x616>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	4302      	orrs	r2, r0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x360>
 8000ca2:	e161      	b.n	8000f68 <__aeabi_dadd+0x624>
 8000ca4:	074a      	lsls	r2, r1, #29
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	08c9      	lsrs	r1, r1, #3
 8000cac:	e77c      	b.n	8000ba8 <__aeabi_dadd+0x264>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	000007ff 	.word	0x000007ff
 8000cb4:	ff7fffff 	.word	0xff7fffff
 8000cb8:	000007fe 	.word	0x000007fe
 8000cbc:	4ccf      	ldr	r4, [pc, #828]	; (8000ffc <__aeabi_dadd+0x6b8>)
 8000cbe:	42a2      	cmp	r2, r4
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x380>
 8000cc2:	e0ce      	b.n	8000e62 <__aeabi_dadd+0x51e>
 8000cc4:	2480      	movs	r4, #128	; 0x80
 8000cc6:	0424      	lsls	r4, r4, #16
 8000cc8:	4321      	orrs	r1, r4
 8000cca:	2f38      	cmp	r7, #56	; 0x38
 8000ccc:	dc5b      	bgt.n	8000d86 <__aeabi_dadd+0x442>
 8000cce:	2f1f      	cmp	r7, #31
 8000cd0:	dd00      	ble.n	8000cd4 <__aeabi_dadd+0x390>
 8000cd2:	e0dc      	b.n	8000e8e <__aeabi_dadd+0x54a>
 8000cd4:	2520      	movs	r5, #32
 8000cd6:	000c      	movs	r4, r1
 8000cd8:	1bed      	subs	r5, r5, r7
 8000cda:	001e      	movs	r6, r3
 8000cdc:	40ab      	lsls	r3, r5
 8000cde:	40ac      	lsls	r4, r5
 8000ce0:	40fe      	lsrs	r6, r7
 8000ce2:	1e5d      	subs	r5, r3, #1
 8000ce4:	41ab      	sbcs	r3, r5
 8000ce6:	4334      	orrs	r4, r6
 8000ce8:	40f9      	lsrs	r1, r7
 8000cea:	431c      	orrs	r4, r3
 8000cec:	464b      	mov	r3, r9
 8000cee:	1a5b      	subs	r3, r3, r1
 8000cf0:	4699      	mov	r9, r3
 8000cf2:	e04c      	b.n	8000d8e <__aeabi_dadd+0x44a>
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	1a1c      	subs	r4, r3, r0
 8000cf8:	1a88      	subs	r0, r1, r2
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	4192      	sbcs	r2, r2
 8000cfe:	4252      	negs	r2, r2
 8000d00:	4692      	mov	sl, r2
 8000d02:	0002      	movs	r2, r0
 8000d04:	4650      	mov	r0, sl
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	4692      	mov	sl, r2
 8000d0a:	0212      	lsls	r2, r2, #8
 8000d0c:	d478      	bmi.n	8000e00 <__aeabi_dadd+0x4bc>
 8000d0e:	4653      	mov	r3, sl
 8000d10:	4323      	orrs	r3, r4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x3d2>
 8000d14:	e66a      	b.n	80009ec <__aeabi_dadd+0xa8>
 8000d16:	2100      	movs	r1, #0
 8000d18:	2500      	movs	r5, #0
 8000d1a:	e745      	b.n	8000ba8 <__aeabi_dadd+0x264>
 8000d1c:	074a      	lsls	r2, r1, #29
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	e73d      	b.n	8000ba2 <__aeabi_dadd+0x25e>
 8000d26:	181c      	adds	r4, r3, r0
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	419b      	sbcs	r3, r3
 8000d2c:	4449      	add	r1, r9
 8000d2e:	468a      	mov	sl, r1
 8000d30:	425b      	negs	r3, r3
 8000d32:	449a      	add	sl, r3
 8000d34:	4653      	mov	r3, sl
 8000d36:	2601      	movs	r6, #1
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	d400      	bmi.n	8000d3e <__aeabi_dadd+0x3fa>
 8000d3c:	e727      	b.n	8000b8e <__aeabi_dadd+0x24a>
 8000d3e:	2602      	movs	r6, #2
 8000d40:	4652      	mov	r2, sl
 8000d42:	4baf      	ldr	r3, [pc, #700]	; (8001000 <__aeabi_dadd+0x6bc>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	401a      	ands	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	4021      	ands	r1, r4
 8000d4c:	0862      	lsrs	r2, r4, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	07dc      	lsls	r4, r3, #31
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	469a      	mov	sl, r3
 8000d56:	4314      	orrs	r4, r2
 8000d58:	e670      	b.n	8000a3c <__aeabi_dadd+0xf8>
 8000d5a:	003a      	movs	r2, r7
 8000d5c:	464c      	mov	r4, r9
 8000d5e:	3a20      	subs	r2, #32
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	46a4      	mov	ip, r4
 8000d64:	2f20      	cmp	r7, #32
 8000d66:	d007      	beq.n	8000d78 <__aeabi_dadd+0x434>
 8000d68:	2240      	movs	r2, #64	; 0x40
 8000d6a:	4648      	mov	r0, r9
 8000d6c:	1bd2      	subs	r2, r2, r7
 8000d6e:	4090      	lsls	r0, r2
 8000d70:	0002      	movs	r2, r0
 8000d72:	4640      	mov	r0, r8
 8000d74:	4310      	orrs	r0, r2
 8000d76:	4680      	mov	r8, r0
 8000d78:	4640      	mov	r0, r8
 8000d7a:	1e42      	subs	r2, r0, #1
 8000d7c:	4190      	sbcs	r0, r2
 8000d7e:	4662      	mov	r2, ip
 8000d80:	0004      	movs	r4, r0
 8000d82:	4314      	orrs	r4, r2
 8000d84:	e624      	b.n	80009d0 <__aeabi_dadd+0x8c>
 8000d86:	4319      	orrs	r1, r3
 8000d88:	000c      	movs	r4, r1
 8000d8a:	1e63      	subs	r3, r4, #1
 8000d8c:	419c      	sbcs	r4, r3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	1b1c      	subs	r4, r3, r4
 8000d92:	45a0      	cmp	r8, r4
 8000d94:	419b      	sbcs	r3, r3
 8000d96:	4649      	mov	r1, r9
 8000d98:	425b      	negs	r3, r3
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	4665      	mov	r5, ip
 8000da0:	0016      	movs	r6, r2
 8000da2:	e61b      	b.n	80009dc <__aeabi_dadd+0x98>
 8000da4:	000c      	movs	r4, r1
 8000da6:	431c      	orrs	r4, r3
 8000da8:	d100      	bne.n	8000dac <__aeabi_dadd+0x468>
 8000daa:	e0c7      	b.n	8000f3c <__aeabi_dadd+0x5f8>
 8000dac:	1e7c      	subs	r4, r7, #1
 8000dae:	2f01      	cmp	r7, #1
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dadd+0x470>
 8000db2:	e0f9      	b.n	8000fa8 <__aeabi_dadd+0x664>
 8000db4:	4e91      	ldr	r6, [pc, #580]	; (8000ffc <__aeabi_dadd+0x6b8>)
 8000db6:	42b7      	cmp	r7, r6
 8000db8:	d05c      	beq.n	8000e74 <__aeabi_dadd+0x530>
 8000dba:	0027      	movs	r7, r4
 8000dbc:	e740      	b.n	8000c40 <__aeabi_dadd+0x2fc>
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	464c      	mov	r4, r9
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	1bd2      	subs	r2, r2, r7
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	40f8      	lsrs	r0, r7
 8000dca:	4304      	orrs	r4, r0
 8000dcc:	4640      	mov	r0, r8
 8000dce:	4090      	lsls	r0, r2
 8000dd0:	1e42      	subs	r2, r0, #1
 8000dd2:	4190      	sbcs	r0, r2
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	40fa      	lsrs	r2, r7
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	1889      	adds	r1, r1, r2
 8000ddc:	e6ee      	b.n	8000bbc <__aeabi_dadd+0x278>
 8000dde:	4c87      	ldr	r4, [pc, #540]	; (8000ffc <__aeabi_dadd+0x6b8>)
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x4a2>
 8000de4:	e6f9      	b.n	8000bda <__aeabi_dadd+0x296>
 8000de6:	1818      	adds	r0, r3, r0
 8000de8:	4298      	cmp	r0, r3
 8000dea:	419b      	sbcs	r3, r3
 8000dec:	4449      	add	r1, r9
 8000dee:	425b      	negs	r3, r3
 8000df0:	18cb      	adds	r3, r1, r3
 8000df2:	07dc      	lsls	r4, r3, #31
 8000df4:	0840      	lsrs	r0, r0, #1
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	469a      	mov	sl, r3
 8000dfa:	0016      	movs	r6, r2
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	e6c6      	b.n	8000b8e <__aeabi_dadd+0x24a>
 8000e00:	4642      	mov	r2, r8
 8000e02:	1ad4      	subs	r4, r2, r3
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	4180      	sbcs	r0, r0
 8000e08:	464b      	mov	r3, r9
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	1a0b      	subs	r3, r1, r0
 8000e10:	469a      	mov	sl, r3
 8000e12:	4665      	mov	r5, ip
 8000e14:	e5ea      	b.n	80009ec <__aeabi_dadd+0xa8>
 8000e16:	464b      	mov	r3, r9
 8000e18:	464a      	mov	r2, r9
 8000e1a:	08c0      	lsrs	r0, r0, #3
 8000e1c:	075b      	lsls	r3, r3, #29
 8000e1e:	4665      	mov	r5, ip
 8000e20:	4303      	orrs	r3, r0
 8000e22:	08d1      	lsrs	r1, r2, #3
 8000e24:	e6bd      	b.n	8000ba2 <__aeabi_dadd+0x25e>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d000      	beq.n	8000e2c <__aeabi_dadd+0x4e8>
 8000e2a:	e08e      	b.n	8000f4a <__aeabi_dadd+0x606>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	d117      	bne.n	8000e62 <__aeabi_dadd+0x51e>
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	2500      	movs	r5, #0
 8000e36:	0309      	lsls	r1, r1, #12
 8000e38:	e6da      	b.n	8000bf0 <__aeabi_dadd+0x2ac>
 8000e3a:	074a      	lsls	r2, r1, #29
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	08c9      	lsrs	r1, r1, #3
 8000e42:	e6d1      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	464a      	mov	r2, r9
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	419b      	sbcs	r3, r3
 8000e4c:	1a89      	subs	r1, r1, r2
 8000e4e:	425b      	negs	r3, r3
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	469a      	mov	sl, r3
 8000e54:	2601      	movs	r6, #1
 8000e56:	e5c1      	b.n	80009dc <__aeabi_dadd+0x98>
 8000e58:	074a      	lsls	r2, r1, #29
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	e69f      	b.n	8000ba2 <__aeabi_dadd+0x25e>
 8000e62:	4643      	mov	r3, r8
 8000e64:	08d8      	lsrs	r0, r3, #3
 8000e66:	464b      	mov	r3, r9
 8000e68:	464a      	mov	r2, r9
 8000e6a:	075b      	lsls	r3, r3, #29
 8000e6c:	4665      	mov	r5, ip
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	08d1      	lsrs	r1, r2, #3
 8000e72:	e6b9      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000e74:	4643      	mov	r3, r8
 8000e76:	08d8      	lsrs	r0, r3, #3
 8000e78:	464b      	mov	r3, r9
 8000e7a:	464a      	mov	r2, r9
 8000e7c:	075b      	lsls	r3, r3, #29
 8000e7e:	4303      	orrs	r3, r0
 8000e80:	08d1      	lsrs	r1, r2, #3
 8000e82:	e6b1      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000e84:	4319      	orrs	r1, r3
 8000e86:	000c      	movs	r4, r1
 8000e88:	1e63      	subs	r3, r4, #1
 8000e8a:	419c      	sbcs	r4, r3
 8000e8c:	e6eb      	b.n	8000c66 <__aeabi_dadd+0x322>
 8000e8e:	003c      	movs	r4, r7
 8000e90:	000d      	movs	r5, r1
 8000e92:	3c20      	subs	r4, #32
 8000e94:	40e5      	lsrs	r5, r4
 8000e96:	2f20      	cmp	r7, #32
 8000e98:	d003      	beq.n	8000ea2 <__aeabi_dadd+0x55e>
 8000e9a:	2440      	movs	r4, #64	; 0x40
 8000e9c:	1be4      	subs	r4, r4, r7
 8000e9e:	40a1      	lsls	r1, r4
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	001c      	movs	r4, r3
 8000ea4:	1e63      	subs	r3, r4, #1
 8000ea6:	419c      	sbcs	r4, r3
 8000ea8:	432c      	orrs	r4, r5
 8000eaa:	e770      	b.n	8000d8e <__aeabi_dadd+0x44a>
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	d0e1      	beq.n	8000e74 <__aeabi_dadd+0x530>
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	d0c1      	beq.n	8000e3a <__aeabi_dadd+0x4f6>
 8000eb6:	074a      	lsls	r2, r1, #29
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	08c9      	lsrs	r1, r1, #3
 8000ec0:	0312      	lsls	r2, r2, #12
 8000ec2:	4211      	tst	r1, r2
 8000ec4:	d008      	beq.n	8000ed8 <__aeabi_dadd+0x594>
 8000ec6:	4648      	mov	r0, r9
 8000ec8:	08c4      	lsrs	r4, r0, #3
 8000eca:	4214      	tst	r4, r2
 8000ecc:	d104      	bne.n	8000ed8 <__aeabi_dadd+0x594>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	0021      	movs	r1, r4
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	0742      	lsls	r2, r0, #29
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	0f5a      	lsrs	r2, r3, #29
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	0752      	lsls	r2, r2, #29
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	e681      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	4303      	orrs	r3, r0
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dadd+0x5a8>
 8000eea:	e714      	b.n	8000d16 <__aeabi_dadd+0x3d2>
 8000eec:	464b      	mov	r3, r9
 8000eee:	464a      	mov	r2, r9
 8000ef0:	08c0      	lsrs	r0, r0, #3
 8000ef2:	075b      	lsls	r3, r3, #29
 8000ef4:	4665      	mov	r5, ip
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	08d1      	lsrs	r1, r2, #3
 8000efa:	e655      	b.n	8000ba8 <__aeabi_dadd+0x264>
 8000efc:	1ac4      	subs	r4, r0, r3
 8000efe:	45a0      	cmp	r8, r4
 8000f00:	4180      	sbcs	r0, r0
 8000f02:	464b      	mov	r3, r9
 8000f04:	4240      	negs	r0, r0
 8000f06:	1a59      	subs	r1, r3, r1
 8000f08:	1a0b      	subs	r3, r1, r0
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	4665      	mov	r5, ip
 8000f0e:	2601      	movs	r6, #1
 8000f10:	e564      	b.n	80009dc <__aeabi_dadd+0x98>
 8000f12:	1a1c      	subs	r4, r3, r0
 8000f14:	464a      	mov	r2, r9
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	4180      	sbcs	r0, r0
 8000f1a:	1a8a      	subs	r2, r1, r2
 8000f1c:	4240      	negs	r0, r0
 8000f1e:	1a12      	subs	r2, r2, r0
 8000f20:	4692      	mov	sl, r2
 8000f22:	0212      	lsls	r2, r2, #8
 8000f24:	d549      	bpl.n	8000fba <__aeabi_dadd+0x676>
 8000f26:	4642      	mov	r2, r8
 8000f28:	1ad4      	subs	r4, r2, r3
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	4180      	sbcs	r0, r0
 8000f2e:	464b      	mov	r3, r9
 8000f30:	4240      	negs	r0, r0
 8000f32:	1a59      	subs	r1, r3, r1
 8000f34:	1a0b      	subs	r3, r1, r0
 8000f36:	469a      	mov	sl, r3
 8000f38:	4665      	mov	r5, ip
 8000f3a:	e57f      	b.n	8000a3c <__aeabi_dadd+0xf8>
 8000f3c:	464b      	mov	r3, r9
 8000f3e:	464a      	mov	r2, r9
 8000f40:	08c0      	lsrs	r0, r0, #3
 8000f42:	075b      	lsls	r3, r3, #29
 8000f44:	4303      	orrs	r3, r0
 8000f46:	08d1      	lsrs	r1, r2, #3
 8000f48:	e62b      	b.n	8000ba2 <__aeabi_dadd+0x25e>
 8000f4a:	464a      	mov	r2, r9
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	d138      	bne.n	8000fc4 <__aeabi_dadd+0x680>
 8000f52:	074a      	lsls	r2, r1, #29
 8000f54:	4313      	orrs	r3, r2
 8000f56:	08c9      	lsrs	r1, r1, #3
 8000f58:	e646      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000f5a:	464b      	mov	r3, r9
 8000f5c:	464a      	mov	r2, r9
 8000f5e:	08c0      	lsrs	r0, r0, #3
 8000f60:	075b      	lsls	r3, r3, #29
 8000f62:	4303      	orrs	r3, r0
 8000f64:	08d1      	lsrs	r1, r2, #3
 8000f66:	e61f      	b.n	8000ba8 <__aeabi_dadd+0x264>
 8000f68:	181c      	adds	r4, r3, r0
 8000f6a:	429c      	cmp	r4, r3
 8000f6c:	419b      	sbcs	r3, r3
 8000f6e:	4449      	add	r1, r9
 8000f70:	468a      	mov	sl, r1
 8000f72:	425b      	negs	r3, r3
 8000f74:	449a      	add	sl, r3
 8000f76:	4653      	mov	r3, sl
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	d400      	bmi.n	8000f7e <__aeabi_dadd+0x63a>
 8000f7c:	e607      	b.n	8000b8e <__aeabi_dadd+0x24a>
 8000f7e:	4652      	mov	r2, sl
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <__aeabi_dadd+0x6bc>)
 8000f82:	2601      	movs	r6, #1
 8000f84:	401a      	ands	r2, r3
 8000f86:	4692      	mov	sl, r2
 8000f88:	e601      	b.n	8000b8e <__aeabi_dadd+0x24a>
 8000f8a:	003c      	movs	r4, r7
 8000f8c:	000e      	movs	r6, r1
 8000f8e:	3c20      	subs	r4, #32
 8000f90:	40e6      	lsrs	r6, r4
 8000f92:	2f20      	cmp	r7, #32
 8000f94:	d003      	beq.n	8000f9e <__aeabi_dadd+0x65a>
 8000f96:	2440      	movs	r4, #64	; 0x40
 8000f98:	1be4      	subs	r4, r4, r7
 8000f9a:	40a1      	lsls	r1, r4
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	1e63      	subs	r3, r4, #1
 8000fa2:	419c      	sbcs	r4, r3
 8000fa4:	4334      	orrs	r4, r6
 8000fa6:	e65e      	b.n	8000c66 <__aeabi_dadd+0x322>
 8000fa8:	4443      	add	r3, r8
 8000faa:	4283      	cmp	r3, r0
 8000fac:	4180      	sbcs	r0, r0
 8000fae:	4449      	add	r1, r9
 8000fb0:	468a      	mov	sl, r1
 8000fb2:	4240      	negs	r0, r0
 8000fb4:	001c      	movs	r4, r3
 8000fb6:	4482      	add	sl, r0
 8000fb8:	e6bc      	b.n	8000d34 <__aeabi_dadd+0x3f0>
 8000fba:	4653      	mov	r3, sl
 8000fbc:	4323      	orrs	r3, r4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dadd+0x67e>
 8000fc0:	e6a9      	b.n	8000d16 <__aeabi_dadd+0x3d2>
 8000fc2:	e5e4      	b.n	8000b8e <__aeabi_dadd+0x24a>
 8000fc4:	074a      	lsls	r2, r1, #29
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	08c9      	lsrs	r1, r1, #3
 8000fcc:	0312      	lsls	r2, r2, #12
 8000fce:	4211      	tst	r1, r2
 8000fd0:	d009      	beq.n	8000fe6 <__aeabi_dadd+0x6a2>
 8000fd2:	4648      	mov	r0, r9
 8000fd4:	08c4      	lsrs	r4, r0, #3
 8000fd6:	4214      	tst	r4, r2
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_dadd+0x6a2>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	4665      	mov	r5, ip
 8000fde:	0021      	movs	r1, r4
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	0742      	lsls	r2, r0, #29
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	0f5a      	lsrs	r2, r3, #29
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	0752      	lsls	r2, r2, #29
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	e5fa      	b.n	8000be8 <__aeabi_dadd+0x2a4>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4a01      	ldr	r2, [pc, #4]	; (8000ffc <__aeabi_dadd+0x6b8>)
 8000ff6:	001c      	movs	r4, r3
 8000ff8:	e540      	b.n	8000a7c <__aeabi_dadd+0x138>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	000007ff 	.word	0x000007ff
 8001000:	ff7fffff 	.word	0xff7fffff

08001004 <__aeabi_ddiv>:
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	4657      	mov	r7, sl
 8001008:	464e      	mov	r6, r9
 800100a:	4645      	mov	r5, r8
 800100c:	46de      	mov	lr, fp
 800100e:	b5e0      	push	{r5, r6, r7, lr}
 8001010:	030c      	lsls	r4, r1, #12
 8001012:	001f      	movs	r7, r3
 8001014:	004b      	lsls	r3, r1, #1
 8001016:	4681      	mov	r9, r0
 8001018:	4692      	mov	sl, r2
 800101a:	0005      	movs	r5, r0
 800101c:	b085      	sub	sp, #20
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	0fce      	lsrs	r6, r1, #31
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x26>
 8001028:	e152      	b.n	80012d0 <__aeabi_ddiv+0x2cc>
 800102a:	4ad2      	ldr	r2, [pc, #840]	; (8001374 <__aeabi_ddiv+0x370>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x2e>
 8001030:	e16e      	b.n	8001310 <__aeabi_ddiv+0x30c>
 8001032:	0f42      	lsrs	r2, r0, #29
 8001034:	00e4      	lsls	r4, r4, #3
 8001036:	4314      	orrs	r4, r2
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	0412      	lsls	r2, r2, #16
 800103c:	4322      	orrs	r2, r4
 800103e:	4690      	mov	r8, r2
 8001040:	4acd      	ldr	r2, [pc, #820]	; (8001378 <__aeabi_ddiv+0x374>)
 8001042:	00c5      	lsls	r5, r0, #3
 8001044:	4693      	mov	fp, r2
 8001046:	449b      	add	fp, r3
 8001048:	2300      	movs	r3, #0
 800104a:	4699      	mov	r9, r3
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	033c      	lsls	r4, r7, #12
 8001050:	007b      	lsls	r3, r7, #1
 8001052:	4650      	mov	r0, sl
 8001054:	0b24      	lsrs	r4, r4, #12
 8001056:	0d5b      	lsrs	r3, r3, #21
 8001058:	0fff      	lsrs	r7, r7, #31
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_ddiv+0x5c>
 800105e:	e11a      	b.n	8001296 <__aeabi_ddiv+0x292>
 8001060:	4ac4      	ldr	r2, [pc, #784]	; (8001374 <__aeabi_ddiv+0x370>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x64>
 8001066:	e15e      	b.n	8001326 <__aeabi_ddiv+0x322>
 8001068:	0f42      	lsrs	r2, r0, #29
 800106a:	00e4      	lsls	r4, r4, #3
 800106c:	4322      	orrs	r2, r4
 800106e:	2480      	movs	r4, #128	; 0x80
 8001070:	0424      	lsls	r4, r4, #16
 8001072:	4314      	orrs	r4, r2
 8001074:	4ac0      	ldr	r2, [pc, #768]	; (8001378 <__aeabi_ddiv+0x374>)
 8001076:	00c1      	lsls	r1, r0, #3
 8001078:	4694      	mov	ip, r2
 800107a:	465a      	mov	r2, fp
 800107c:	4463      	add	r3, ip
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	469b      	mov	fp, r3
 8001082:	2000      	movs	r0, #0
 8001084:	0033      	movs	r3, r6
 8001086:	407b      	eors	r3, r7
 8001088:	469a      	mov	sl, r3
 800108a:	464b      	mov	r3, r9
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d827      	bhi.n	80010e0 <__aeabi_ddiv+0xdc>
 8001090:	4aba      	ldr	r2, [pc, #744]	; (800137c <__aeabi_ddiv+0x378>)
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	469f      	mov	pc, r3
 8001098:	46b2      	mov	sl, r6
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d016      	beq.n	80010ce <__aeabi_ddiv+0xca>
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0xa2>
 80010a4:	e287      	b.n	80015b6 <__aeabi_ddiv+0x5b2>
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d000      	beq.n	80010ac <__aeabi_ddiv+0xa8>
 80010aa:	e0d5      	b.n	8001258 <__aeabi_ddiv+0x254>
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2500      	movs	r5, #0
 80010b2:	051b      	lsls	r3, r3, #20
 80010b4:	4313      	orrs	r3, r2
 80010b6:	4652      	mov	r2, sl
 80010b8:	07d2      	lsls	r2, r2, #31
 80010ba:	4313      	orrs	r3, r2
 80010bc:	0028      	movs	r0, r5
 80010be:	0019      	movs	r1, r3
 80010c0:	b005      	add	sp, #20
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
 80010c4:	46bb      	mov	fp, r7
 80010c6:	46b2      	mov	sl, r6
 80010c8:	46a9      	mov	r9, r5
 80010ca:	46a0      	mov	r8, r4
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	2200      	movs	r2, #0
 80010d0:	2500      	movs	r5, #0
 80010d2:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <__aeabi_ddiv+0x370>)
 80010d4:	e7ed      	b.n	80010b2 <__aeabi_ddiv+0xae>
 80010d6:	46ba      	mov	sl, r7
 80010d8:	46a0      	mov	r8, r4
 80010da:	000d      	movs	r5, r1
 80010dc:	9000      	str	r0, [sp, #0]
 80010de:	e7dc      	b.n	800109a <__aeabi_ddiv+0x96>
 80010e0:	4544      	cmp	r4, r8
 80010e2:	d200      	bcs.n	80010e6 <__aeabi_ddiv+0xe2>
 80010e4:	e1c4      	b.n	8001470 <__aeabi_ddiv+0x46c>
 80010e6:	d100      	bne.n	80010ea <__aeabi_ddiv+0xe6>
 80010e8:	e1bf      	b.n	800146a <__aeabi_ddiv+0x466>
 80010ea:	2301      	movs	r3, #1
 80010ec:	425b      	negs	r3, r3
 80010ee:	469c      	mov	ip, r3
 80010f0:	002e      	movs	r6, r5
 80010f2:	4640      	mov	r0, r8
 80010f4:	2500      	movs	r5, #0
 80010f6:	44e3      	add	fp, ip
 80010f8:	0223      	lsls	r3, r4, #8
 80010fa:	0e0c      	lsrs	r4, r1, #24
 80010fc:	431c      	orrs	r4, r3
 80010fe:	0c1b      	lsrs	r3, r3, #16
 8001100:	4699      	mov	r9, r3
 8001102:	0423      	lsls	r3, r4, #16
 8001104:	020a      	lsls	r2, r1, #8
 8001106:	0c1f      	lsrs	r7, r3, #16
 8001108:	4649      	mov	r1, r9
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	9701      	str	r7, [sp, #4]
 800110e:	f7ff f89d 	bl	800024c <__aeabi_uidivmod>
 8001112:	0002      	movs	r2, r0
 8001114:	437a      	muls	r2, r7
 8001116:	040b      	lsls	r3, r1, #16
 8001118:	0c31      	lsrs	r1, r6, #16
 800111a:	4680      	mov	r8, r0
 800111c:	4319      	orrs	r1, r3
 800111e:	428a      	cmp	r2, r1
 8001120:	d907      	bls.n	8001132 <__aeabi_ddiv+0x12e>
 8001122:	2301      	movs	r3, #1
 8001124:	425b      	negs	r3, r3
 8001126:	469c      	mov	ip, r3
 8001128:	1909      	adds	r1, r1, r4
 800112a:	44e0      	add	r8, ip
 800112c:	428c      	cmp	r4, r1
 800112e:	d800      	bhi.n	8001132 <__aeabi_ddiv+0x12e>
 8001130:	e201      	b.n	8001536 <__aeabi_ddiv+0x532>
 8001132:	1a88      	subs	r0, r1, r2
 8001134:	4649      	mov	r1, r9
 8001136:	f7ff f889 	bl	800024c <__aeabi_uidivmod>
 800113a:	9a01      	ldr	r2, [sp, #4]
 800113c:	0436      	lsls	r6, r6, #16
 800113e:	4342      	muls	r2, r0
 8001140:	0409      	lsls	r1, r1, #16
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	0003      	movs	r3, r0
 8001146:	430e      	orrs	r6, r1
 8001148:	42b2      	cmp	r2, r6
 800114a:	d904      	bls.n	8001156 <__aeabi_ddiv+0x152>
 800114c:	1936      	adds	r6, r6, r4
 800114e:	3b01      	subs	r3, #1
 8001150:	42b4      	cmp	r4, r6
 8001152:	d800      	bhi.n	8001156 <__aeabi_ddiv+0x152>
 8001154:	e1e9      	b.n	800152a <__aeabi_ddiv+0x526>
 8001156:	1ab0      	subs	r0, r6, r2
 8001158:	4642      	mov	r2, r8
 800115a:	9e00      	ldr	r6, [sp, #0]
 800115c:	0412      	lsls	r2, r2, #16
 800115e:	431a      	orrs	r2, r3
 8001160:	0c33      	lsrs	r3, r6, #16
 8001162:	001f      	movs	r7, r3
 8001164:	0c11      	lsrs	r1, r2, #16
 8001166:	4690      	mov	r8, r2
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	0413      	lsls	r3, r2, #16
 800116c:	0432      	lsls	r2, r6, #16
 800116e:	0c16      	lsrs	r6, r2, #16
 8001170:	0032      	movs	r2, r6
 8001172:	0c1b      	lsrs	r3, r3, #16
 8001174:	435a      	muls	r2, r3
 8001176:	9603      	str	r6, [sp, #12]
 8001178:	437b      	muls	r3, r7
 800117a:	434e      	muls	r6, r1
 800117c:	4379      	muls	r1, r7
 800117e:	0c17      	lsrs	r7, r2, #16
 8001180:	46bc      	mov	ip, r7
 8001182:	199b      	adds	r3, r3, r6
 8001184:	4463      	add	r3, ip
 8001186:	429e      	cmp	r6, r3
 8001188:	d903      	bls.n	8001192 <__aeabi_ddiv+0x18e>
 800118a:	2680      	movs	r6, #128	; 0x80
 800118c:	0276      	lsls	r6, r6, #9
 800118e:	46b4      	mov	ip, r6
 8001190:	4461      	add	r1, ip
 8001192:	0c1e      	lsrs	r6, r3, #16
 8001194:	1871      	adds	r1, r6, r1
 8001196:	0416      	lsls	r6, r2, #16
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	0c36      	lsrs	r6, r6, #16
 800119c:	199e      	adds	r6, r3, r6
 800119e:	4288      	cmp	r0, r1
 80011a0:	d302      	bcc.n	80011a8 <__aeabi_ddiv+0x1a4>
 80011a2:	d112      	bne.n	80011ca <__aeabi_ddiv+0x1c6>
 80011a4:	42b5      	cmp	r5, r6
 80011a6:	d210      	bcs.n	80011ca <__aeabi_ddiv+0x1c6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	9b00      	ldr	r3, [sp, #0]
 80011ae:	469c      	mov	ip, r3
 80011b0:	4465      	add	r5, ip
 80011b2:	001f      	movs	r7, r3
 80011b4:	429d      	cmp	r5, r3
 80011b6:	419b      	sbcs	r3, r3
 80011b8:	425b      	negs	r3, r3
 80011ba:	191b      	adds	r3, r3, r4
 80011bc:	18c0      	adds	r0, r0, r3
 80011be:	4284      	cmp	r4, r0
 80011c0:	d200      	bcs.n	80011c4 <__aeabi_ddiv+0x1c0>
 80011c2:	e19e      	b.n	8001502 <__aeabi_ddiv+0x4fe>
 80011c4:	d100      	bne.n	80011c8 <__aeabi_ddiv+0x1c4>
 80011c6:	e199      	b.n	80014fc <__aeabi_ddiv+0x4f8>
 80011c8:	4690      	mov	r8, r2
 80011ca:	1bae      	subs	r6, r5, r6
 80011cc:	42b5      	cmp	r5, r6
 80011ce:	41ad      	sbcs	r5, r5
 80011d0:	1a40      	subs	r0, r0, r1
 80011d2:	426d      	negs	r5, r5
 80011d4:	1b40      	subs	r0, r0, r5
 80011d6:	4284      	cmp	r4, r0
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0x1d8>
 80011da:	e1d2      	b.n	8001582 <__aeabi_ddiv+0x57e>
 80011dc:	4649      	mov	r1, r9
 80011de:	f7ff f835 	bl	800024c <__aeabi_uidivmod>
 80011e2:	9a01      	ldr	r2, [sp, #4]
 80011e4:	040b      	lsls	r3, r1, #16
 80011e6:	4342      	muls	r2, r0
 80011e8:	0c31      	lsrs	r1, r6, #16
 80011ea:	0005      	movs	r5, r0
 80011ec:	4319      	orrs	r1, r3
 80011ee:	428a      	cmp	r2, r1
 80011f0:	d900      	bls.n	80011f4 <__aeabi_ddiv+0x1f0>
 80011f2:	e16c      	b.n	80014ce <__aeabi_ddiv+0x4ca>
 80011f4:	1a88      	subs	r0, r1, r2
 80011f6:	4649      	mov	r1, r9
 80011f8:	f7ff f828 	bl	800024c <__aeabi_uidivmod>
 80011fc:	9a01      	ldr	r2, [sp, #4]
 80011fe:	0436      	lsls	r6, r6, #16
 8001200:	4342      	muls	r2, r0
 8001202:	0409      	lsls	r1, r1, #16
 8001204:	0c36      	lsrs	r6, r6, #16
 8001206:	0003      	movs	r3, r0
 8001208:	430e      	orrs	r6, r1
 800120a:	42b2      	cmp	r2, r6
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x20c>
 800120e:	e153      	b.n	80014b8 <__aeabi_ddiv+0x4b4>
 8001210:	9803      	ldr	r0, [sp, #12]
 8001212:	1ab6      	subs	r6, r6, r2
 8001214:	0002      	movs	r2, r0
 8001216:	042d      	lsls	r5, r5, #16
 8001218:	431d      	orrs	r5, r3
 800121a:	9f02      	ldr	r7, [sp, #8]
 800121c:	042b      	lsls	r3, r5, #16
 800121e:	0c1b      	lsrs	r3, r3, #16
 8001220:	435a      	muls	r2, r3
 8001222:	437b      	muls	r3, r7
 8001224:	469c      	mov	ip, r3
 8001226:	0c29      	lsrs	r1, r5, #16
 8001228:	4348      	muls	r0, r1
 800122a:	0c13      	lsrs	r3, r2, #16
 800122c:	4484      	add	ip, r0
 800122e:	4463      	add	r3, ip
 8001230:	4379      	muls	r1, r7
 8001232:	4298      	cmp	r0, r3
 8001234:	d903      	bls.n	800123e <__aeabi_ddiv+0x23a>
 8001236:	2080      	movs	r0, #128	; 0x80
 8001238:	0240      	lsls	r0, r0, #9
 800123a:	4684      	mov	ip, r0
 800123c:	4461      	add	r1, ip
 800123e:	0c18      	lsrs	r0, r3, #16
 8001240:	0412      	lsls	r2, r2, #16
 8001242:	041b      	lsls	r3, r3, #16
 8001244:	0c12      	lsrs	r2, r2, #16
 8001246:	1840      	adds	r0, r0, r1
 8001248:	189b      	adds	r3, r3, r2
 800124a:	4286      	cmp	r6, r0
 800124c:	d200      	bcs.n	8001250 <__aeabi_ddiv+0x24c>
 800124e:	e100      	b.n	8001452 <__aeabi_ddiv+0x44e>
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x250>
 8001252:	e0fb      	b.n	800144c <__aeabi_ddiv+0x448>
 8001254:	2301      	movs	r3, #1
 8001256:	431d      	orrs	r5, r3
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <__aeabi_ddiv+0x37c>)
 800125a:	445b      	add	r3, fp
 800125c:	2b00      	cmp	r3, #0
 800125e:	dc00      	bgt.n	8001262 <__aeabi_ddiv+0x25e>
 8001260:	e0aa      	b.n	80013b8 <__aeabi_ddiv+0x3b4>
 8001262:	076a      	lsls	r2, r5, #29
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x264>
 8001266:	e13d      	b.n	80014e4 <__aeabi_ddiv+0x4e0>
 8001268:	08e9      	lsrs	r1, r5, #3
 800126a:	4642      	mov	r2, r8
 800126c:	01d2      	lsls	r2, r2, #7
 800126e:	d506      	bpl.n	800127e <__aeabi_ddiv+0x27a>
 8001270:	4642      	mov	r2, r8
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <__aeabi_ddiv+0x380>)
 8001274:	401a      	ands	r2, r3
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	4690      	mov	r8, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	445b      	add	r3, fp
 800127e:	4a42      	ldr	r2, [pc, #264]	; (8001388 <__aeabi_ddiv+0x384>)
 8001280:	4293      	cmp	r3, r2
 8001282:	dd00      	ble.n	8001286 <__aeabi_ddiv+0x282>
 8001284:	e723      	b.n	80010ce <__aeabi_ddiv+0xca>
 8001286:	4642      	mov	r2, r8
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	0755      	lsls	r5, r2, #29
 800128c:	0252      	lsls	r2, r2, #9
 800128e:	430d      	orrs	r5, r1
 8001290:	0b12      	lsrs	r2, r2, #12
 8001292:	0d5b      	lsrs	r3, r3, #21
 8001294:	e70d      	b.n	80010b2 <__aeabi_ddiv+0xae>
 8001296:	4651      	mov	r1, sl
 8001298:	4321      	orrs	r1, r4
 800129a:	d100      	bne.n	800129e <__aeabi_ddiv+0x29a>
 800129c:	e07c      	b.n	8001398 <__aeabi_ddiv+0x394>
 800129e:	2c00      	cmp	r4, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_ddiv+0x2a0>
 80012a2:	e0fb      	b.n	800149c <__aeabi_ddiv+0x498>
 80012a4:	0020      	movs	r0, r4
 80012a6:	f001 f9dd 	bl	8002664 <__clzsi2>
 80012aa:	0002      	movs	r2, r0
 80012ac:	3a0b      	subs	r2, #11
 80012ae:	231d      	movs	r3, #29
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	4652      	mov	r2, sl
 80012b4:	0001      	movs	r1, r0
 80012b6:	40da      	lsrs	r2, r3
 80012b8:	4653      	mov	r3, sl
 80012ba:	3908      	subs	r1, #8
 80012bc:	408b      	lsls	r3, r1
 80012be:	408c      	lsls	r4, r1
 80012c0:	0019      	movs	r1, r3
 80012c2:	4314      	orrs	r4, r2
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <__aeabi_ddiv+0x388>)
 80012c6:	4458      	add	r0, fp
 80012c8:	469b      	mov	fp, r3
 80012ca:	4483      	add	fp, r0
 80012cc:	2000      	movs	r0, #0
 80012ce:	e6d9      	b.n	8001084 <__aeabi_ddiv+0x80>
 80012d0:	0003      	movs	r3, r0
 80012d2:	4323      	orrs	r3, r4
 80012d4:	4698      	mov	r8, r3
 80012d6:	d044      	beq.n	8001362 <__aeabi_ddiv+0x35e>
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x2da>
 80012dc:	e0cf      	b.n	800147e <__aeabi_ddiv+0x47a>
 80012de:	0020      	movs	r0, r4
 80012e0:	f001 f9c0 	bl	8002664 <__clzsi2>
 80012e4:	0001      	movs	r1, r0
 80012e6:	0002      	movs	r2, r0
 80012e8:	390b      	subs	r1, #11
 80012ea:	231d      	movs	r3, #29
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	4649      	mov	r1, r9
 80012f0:	0010      	movs	r0, r2
 80012f2:	40d9      	lsrs	r1, r3
 80012f4:	3808      	subs	r0, #8
 80012f6:	4084      	lsls	r4, r0
 80012f8:	000b      	movs	r3, r1
 80012fa:	464d      	mov	r5, r9
 80012fc:	4323      	orrs	r3, r4
 80012fe:	4698      	mov	r8, r3
 8001300:	4085      	lsls	r5, r0
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <__aeabi_ddiv+0x38c>)
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	469b      	mov	fp, r3
 8001308:	2300      	movs	r3, #0
 800130a:	4699      	mov	r9, r3
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	e69e      	b.n	800104e <__aeabi_ddiv+0x4a>
 8001310:	0002      	movs	r2, r0
 8001312:	4322      	orrs	r2, r4
 8001314:	4690      	mov	r8, r2
 8001316:	d11d      	bne.n	8001354 <__aeabi_ddiv+0x350>
 8001318:	2208      	movs	r2, #8
 800131a:	469b      	mov	fp, r3
 800131c:	2302      	movs	r3, #2
 800131e:	2500      	movs	r5, #0
 8001320:	4691      	mov	r9, r2
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	e693      	b.n	800104e <__aeabi_ddiv+0x4a>
 8001326:	4651      	mov	r1, sl
 8001328:	4321      	orrs	r1, r4
 800132a:	d109      	bne.n	8001340 <__aeabi_ddiv+0x33c>
 800132c:	2302      	movs	r3, #2
 800132e:	464a      	mov	r2, r9
 8001330:	431a      	orrs	r2, r3
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <__aeabi_ddiv+0x390>)
 8001334:	4691      	mov	r9, r2
 8001336:	469c      	mov	ip, r3
 8001338:	2400      	movs	r4, #0
 800133a:	2002      	movs	r0, #2
 800133c:	44e3      	add	fp, ip
 800133e:	e6a1      	b.n	8001084 <__aeabi_ddiv+0x80>
 8001340:	2303      	movs	r3, #3
 8001342:	464a      	mov	r2, r9
 8001344:	431a      	orrs	r2, r3
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <__aeabi_ddiv+0x390>)
 8001348:	4691      	mov	r9, r2
 800134a:	469c      	mov	ip, r3
 800134c:	4651      	mov	r1, sl
 800134e:	2003      	movs	r0, #3
 8001350:	44e3      	add	fp, ip
 8001352:	e697      	b.n	8001084 <__aeabi_ddiv+0x80>
 8001354:	220c      	movs	r2, #12
 8001356:	469b      	mov	fp, r3
 8001358:	2303      	movs	r3, #3
 800135a:	46a0      	mov	r8, r4
 800135c:	4691      	mov	r9, r2
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	e675      	b.n	800104e <__aeabi_ddiv+0x4a>
 8001362:	2304      	movs	r3, #4
 8001364:	4699      	mov	r9, r3
 8001366:	2300      	movs	r3, #0
 8001368:	469b      	mov	fp, r3
 800136a:	3301      	adds	r3, #1
 800136c:	2500      	movs	r5, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	e66d      	b.n	800104e <__aeabi_ddiv+0x4a>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	000007ff 	.word	0x000007ff
 8001378:	fffffc01 	.word	0xfffffc01
 800137c:	08007dfc 	.word	0x08007dfc
 8001380:	000003ff 	.word	0x000003ff
 8001384:	feffffff 	.word	0xfeffffff
 8001388:	000007fe 	.word	0x000007fe
 800138c:	000003f3 	.word	0x000003f3
 8001390:	fffffc0d 	.word	0xfffffc0d
 8001394:	fffff801 	.word	0xfffff801
 8001398:	464a      	mov	r2, r9
 800139a:	2301      	movs	r3, #1
 800139c:	431a      	orrs	r2, r3
 800139e:	4691      	mov	r9, r2
 80013a0:	2400      	movs	r4, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	e66e      	b.n	8001084 <__aeabi_ddiv+0x80>
 80013a6:	2300      	movs	r3, #0
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	469a      	mov	sl, r3
 80013ac:	2500      	movs	r5, #0
 80013ae:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <__aeabi_ddiv+0x5cc>)
 80013b0:	0312      	lsls	r2, r2, #12
 80013b2:	e67e      	b.n	80010b2 <__aeabi_ddiv+0xae>
 80013b4:	2501      	movs	r5, #1
 80013b6:	426d      	negs	r5, r5
 80013b8:	2201      	movs	r2, #1
 80013ba:	1ad2      	subs	r2, r2, r3
 80013bc:	2a38      	cmp	r2, #56	; 0x38
 80013be:	dd00      	ble.n	80013c2 <__aeabi_ddiv+0x3be>
 80013c0:	e674      	b.n	80010ac <__aeabi_ddiv+0xa8>
 80013c2:	2a1f      	cmp	r2, #31
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_ddiv+0x3c4>
 80013c6:	e0bd      	b.n	8001544 <__aeabi_ddiv+0x540>
 80013c8:	211f      	movs	r1, #31
 80013ca:	4249      	negs	r1, r1
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	4641      	mov	r1, r8
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	000b      	movs	r3, r1
 80013d4:	2a20      	cmp	r2, #32
 80013d6:	d004      	beq.n	80013e2 <__aeabi_ddiv+0x3de>
 80013d8:	4641      	mov	r1, r8
 80013da:	4a7e      	ldr	r2, [pc, #504]	; (80015d4 <__aeabi_ddiv+0x5d0>)
 80013dc:	445a      	add	r2, fp
 80013de:	4091      	lsls	r1, r2
 80013e0:	430d      	orrs	r5, r1
 80013e2:	0029      	movs	r1, r5
 80013e4:	1e4a      	subs	r2, r1, #1
 80013e6:	4191      	sbcs	r1, r2
 80013e8:	4319      	orrs	r1, r3
 80013ea:	2307      	movs	r3, #7
 80013ec:	001d      	movs	r5, r3
 80013ee:	2200      	movs	r2, #0
 80013f0:	400d      	ands	r5, r1
 80013f2:	420b      	tst	r3, r1
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x3f4>
 80013f6:	e0d0      	b.n	800159a <__aeabi_ddiv+0x596>
 80013f8:	220f      	movs	r2, #15
 80013fa:	2300      	movs	r3, #0
 80013fc:	400a      	ands	r2, r1
 80013fe:	2a04      	cmp	r2, #4
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x400>
 8001402:	e0c7      	b.n	8001594 <__aeabi_ddiv+0x590>
 8001404:	1d0a      	adds	r2, r1, #4
 8001406:	428a      	cmp	r2, r1
 8001408:	4189      	sbcs	r1, r1
 800140a:	4249      	negs	r1, r1
 800140c:	185b      	adds	r3, r3, r1
 800140e:	0011      	movs	r1, r2
 8001410:	021a      	lsls	r2, r3, #8
 8001412:	d400      	bmi.n	8001416 <__aeabi_ddiv+0x412>
 8001414:	e0be      	b.n	8001594 <__aeabi_ddiv+0x590>
 8001416:	2301      	movs	r3, #1
 8001418:	2200      	movs	r2, #0
 800141a:	2500      	movs	r5, #0
 800141c:	e649      	b.n	80010b2 <__aeabi_ddiv+0xae>
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	4643      	mov	r3, r8
 8001422:	0312      	lsls	r2, r2, #12
 8001424:	4213      	tst	r3, r2
 8001426:	d008      	beq.n	800143a <__aeabi_ddiv+0x436>
 8001428:	4214      	tst	r4, r2
 800142a:	d106      	bne.n	800143a <__aeabi_ddiv+0x436>
 800142c:	4322      	orrs	r2, r4
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	46ba      	mov	sl, r7
 8001432:	000d      	movs	r5, r1
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e63b      	b.n	80010b2 <__aeabi_ddiv+0xae>
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	4643      	mov	r3, r8
 800143e:	0312      	lsls	r2, r2, #12
 8001440:	431a      	orrs	r2, r3
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	46b2      	mov	sl, r6
 8001446:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <__aeabi_ddiv+0x5cc>)
 8001448:	0b12      	lsrs	r2, r2, #12
 800144a:	e632      	b.n	80010b2 <__aeabi_ddiv+0xae>
 800144c:	2b00      	cmp	r3, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_ddiv+0x44e>
 8001450:	e702      	b.n	8001258 <__aeabi_ddiv+0x254>
 8001452:	19a6      	adds	r6, r4, r6
 8001454:	1e6a      	subs	r2, r5, #1
 8001456:	42a6      	cmp	r6, r4
 8001458:	d200      	bcs.n	800145c <__aeabi_ddiv+0x458>
 800145a:	e089      	b.n	8001570 <__aeabi_ddiv+0x56c>
 800145c:	4286      	cmp	r6, r0
 800145e:	d200      	bcs.n	8001462 <__aeabi_ddiv+0x45e>
 8001460:	e09f      	b.n	80015a2 <__aeabi_ddiv+0x59e>
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x462>
 8001464:	e0af      	b.n	80015c6 <__aeabi_ddiv+0x5c2>
 8001466:	0015      	movs	r5, r2
 8001468:	e6f4      	b.n	8001254 <__aeabi_ddiv+0x250>
 800146a:	42a9      	cmp	r1, r5
 800146c:	d900      	bls.n	8001470 <__aeabi_ddiv+0x46c>
 800146e:	e63c      	b.n	80010ea <__aeabi_ddiv+0xe6>
 8001470:	4643      	mov	r3, r8
 8001472:	07de      	lsls	r6, r3, #31
 8001474:	0858      	lsrs	r0, r3, #1
 8001476:	086b      	lsrs	r3, r5, #1
 8001478:	431e      	orrs	r6, r3
 800147a:	07ed      	lsls	r5, r5, #31
 800147c:	e63c      	b.n	80010f8 <__aeabi_ddiv+0xf4>
 800147e:	f001 f8f1 	bl	8002664 <__clzsi2>
 8001482:	0001      	movs	r1, r0
 8001484:	0002      	movs	r2, r0
 8001486:	3115      	adds	r1, #21
 8001488:	3220      	adds	r2, #32
 800148a:	291c      	cmp	r1, #28
 800148c:	dc00      	bgt.n	8001490 <__aeabi_ddiv+0x48c>
 800148e:	e72c      	b.n	80012ea <__aeabi_ddiv+0x2e6>
 8001490:	464b      	mov	r3, r9
 8001492:	3808      	subs	r0, #8
 8001494:	4083      	lsls	r3, r0
 8001496:	2500      	movs	r5, #0
 8001498:	4698      	mov	r8, r3
 800149a:	e732      	b.n	8001302 <__aeabi_ddiv+0x2fe>
 800149c:	f001 f8e2 	bl	8002664 <__clzsi2>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	3215      	adds	r2, #21
 80014a6:	3020      	adds	r0, #32
 80014a8:	2a1c      	cmp	r2, #28
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_ddiv+0x4aa>
 80014ac:	e6ff      	b.n	80012ae <__aeabi_ddiv+0x2aa>
 80014ae:	4654      	mov	r4, sl
 80014b0:	3b08      	subs	r3, #8
 80014b2:	2100      	movs	r1, #0
 80014b4:	409c      	lsls	r4, r3
 80014b6:	e705      	b.n	80012c4 <__aeabi_ddiv+0x2c0>
 80014b8:	1936      	adds	r6, r6, r4
 80014ba:	3b01      	subs	r3, #1
 80014bc:	42b4      	cmp	r4, r6
 80014be:	d900      	bls.n	80014c2 <__aeabi_ddiv+0x4be>
 80014c0:	e6a6      	b.n	8001210 <__aeabi_ddiv+0x20c>
 80014c2:	42b2      	cmp	r2, r6
 80014c4:	d800      	bhi.n	80014c8 <__aeabi_ddiv+0x4c4>
 80014c6:	e6a3      	b.n	8001210 <__aeabi_ddiv+0x20c>
 80014c8:	1e83      	subs	r3, r0, #2
 80014ca:	1936      	adds	r6, r6, r4
 80014cc:	e6a0      	b.n	8001210 <__aeabi_ddiv+0x20c>
 80014ce:	1909      	adds	r1, r1, r4
 80014d0:	3d01      	subs	r5, #1
 80014d2:	428c      	cmp	r4, r1
 80014d4:	d900      	bls.n	80014d8 <__aeabi_ddiv+0x4d4>
 80014d6:	e68d      	b.n	80011f4 <__aeabi_ddiv+0x1f0>
 80014d8:	428a      	cmp	r2, r1
 80014da:	d800      	bhi.n	80014de <__aeabi_ddiv+0x4da>
 80014dc:	e68a      	b.n	80011f4 <__aeabi_ddiv+0x1f0>
 80014de:	1e85      	subs	r5, r0, #2
 80014e0:	1909      	adds	r1, r1, r4
 80014e2:	e687      	b.n	80011f4 <__aeabi_ddiv+0x1f0>
 80014e4:	220f      	movs	r2, #15
 80014e6:	402a      	ands	r2, r5
 80014e8:	2a04      	cmp	r2, #4
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x4ea>
 80014ec:	e6bc      	b.n	8001268 <__aeabi_ddiv+0x264>
 80014ee:	1d29      	adds	r1, r5, #4
 80014f0:	42a9      	cmp	r1, r5
 80014f2:	41ad      	sbcs	r5, r5
 80014f4:	426d      	negs	r5, r5
 80014f6:	08c9      	lsrs	r1, r1, #3
 80014f8:	44a8      	add	r8, r5
 80014fa:	e6b6      	b.n	800126a <__aeabi_ddiv+0x266>
 80014fc:	42af      	cmp	r7, r5
 80014fe:	d900      	bls.n	8001502 <__aeabi_ddiv+0x4fe>
 8001500:	e662      	b.n	80011c8 <__aeabi_ddiv+0x1c4>
 8001502:	4281      	cmp	r1, r0
 8001504:	d804      	bhi.n	8001510 <__aeabi_ddiv+0x50c>
 8001506:	d000      	beq.n	800150a <__aeabi_ddiv+0x506>
 8001508:	e65e      	b.n	80011c8 <__aeabi_ddiv+0x1c4>
 800150a:	42ae      	cmp	r6, r5
 800150c:	d800      	bhi.n	8001510 <__aeabi_ddiv+0x50c>
 800150e:	e65b      	b.n	80011c8 <__aeabi_ddiv+0x1c4>
 8001510:	2302      	movs	r3, #2
 8001512:	425b      	negs	r3, r3
 8001514:	469c      	mov	ip, r3
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	44e0      	add	r8, ip
 800151a:	469c      	mov	ip, r3
 800151c:	4465      	add	r5, ip
 800151e:	429d      	cmp	r5, r3
 8001520:	419b      	sbcs	r3, r3
 8001522:	425b      	negs	r3, r3
 8001524:	191b      	adds	r3, r3, r4
 8001526:	18c0      	adds	r0, r0, r3
 8001528:	e64f      	b.n	80011ca <__aeabi_ddiv+0x1c6>
 800152a:	42b2      	cmp	r2, r6
 800152c:	d800      	bhi.n	8001530 <__aeabi_ddiv+0x52c>
 800152e:	e612      	b.n	8001156 <__aeabi_ddiv+0x152>
 8001530:	1e83      	subs	r3, r0, #2
 8001532:	1936      	adds	r6, r6, r4
 8001534:	e60f      	b.n	8001156 <__aeabi_ddiv+0x152>
 8001536:	428a      	cmp	r2, r1
 8001538:	d800      	bhi.n	800153c <__aeabi_ddiv+0x538>
 800153a:	e5fa      	b.n	8001132 <__aeabi_ddiv+0x12e>
 800153c:	1e83      	subs	r3, r0, #2
 800153e:	4698      	mov	r8, r3
 8001540:	1909      	adds	r1, r1, r4
 8001542:	e5f6      	b.n	8001132 <__aeabi_ddiv+0x12e>
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <__aeabi_ddiv+0x5d4>)
 8001546:	0028      	movs	r0, r5
 8001548:	445b      	add	r3, fp
 800154a:	4641      	mov	r1, r8
 800154c:	409d      	lsls	r5, r3
 800154e:	4099      	lsls	r1, r3
 8001550:	40d0      	lsrs	r0, r2
 8001552:	1e6b      	subs	r3, r5, #1
 8001554:	419d      	sbcs	r5, r3
 8001556:	4643      	mov	r3, r8
 8001558:	4301      	orrs	r1, r0
 800155a:	4329      	orrs	r1, r5
 800155c:	40d3      	lsrs	r3, r2
 800155e:	074a      	lsls	r2, r1, #29
 8001560:	d100      	bne.n	8001564 <__aeabi_ddiv+0x560>
 8001562:	e755      	b.n	8001410 <__aeabi_ddiv+0x40c>
 8001564:	220f      	movs	r2, #15
 8001566:	400a      	ands	r2, r1
 8001568:	2a04      	cmp	r2, #4
 800156a:	d000      	beq.n	800156e <__aeabi_ddiv+0x56a>
 800156c:	e74a      	b.n	8001404 <__aeabi_ddiv+0x400>
 800156e:	e74f      	b.n	8001410 <__aeabi_ddiv+0x40c>
 8001570:	0015      	movs	r5, r2
 8001572:	4286      	cmp	r6, r0
 8001574:	d000      	beq.n	8001578 <__aeabi_ddiv+0x574>
 8001576:	e66d      	b.n	8001254 <__aeabi_ddiv+0x250>
 8001578:	9a00      	ldr	r2, [sp, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d000      	beq.n	8001580 <__aeabi_ddiv+0x57c>
 800157e:	e669      	b.n	8001254 <__aeabi_ddiv+0x250>
 8001580:	e66a      	b.n	8001258 <__aeabi_ddiv+0x254>
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <__aeabi_ddiv+0x5d8>)
 8001584:	445b      	add	r3, fp
 8001586:	2b00      	cmp	r3, #0
 8001588:	dc00      	bgt.n	800158c <__aeabi_ddiv+0x588>
 800158a:	e713      	b.n	80013b4 <__aeabi_ddiv+0x3b0>
 800158c:	2501      	movs	r5, #1
 800158e:	2100      	movs	r1, #0
 8001590:	44a8      	add	r8, r5
 8001592:	e66a      	b.n	800126a <__aeabi_ddiv+0x266>
 8001594:	075d      	lsls	r5, r3, #29
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	0b1a      	lsrs	r2, r3, #12
 800159a:	08c9      	lsrs	r1, r1, #3
 800159c:	2300      	movs	r3, #0
 800159e:	430d      	orrs	r5, r1
 80015a0:	e587      	b.n	80010b2 <__aeabi_ddiv+0xae>
 80015a2:	9900      	ldr	r1, [sp, #0]
 80015a4:	3d02      	subs	r5, #2
 80015a6:	004a      	lsls	r2, r1, #1
 80015a8:	428a      	cmp	r2, r1
 80015aa:	41bf      	sbcs	r7, r7
 80015ac:	427f      	negs	r7, r7
 80015ae:	193f      	adds	r7, r7, r4
 80015b0:	19f6      	adds	r6, r6, r7
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	e7dd      	b.n	8001572 <__aeabi_ddiv+0x56e>
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	4643      	mov	r3, r8
 80015ba:	0312      	lsls	r2, r2, #12
 80015bc:	431a      	orrs	r2, r3
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <__aeabi_ddiv+0x5cc>)
 80015c2:	0b12      	lsrs	r2, r2, #12
 80015c4:	e575      	b.n	80010b2 <__aeabi_ddiv+0xae>
 80015c6:	9900      	ldr	r1, [sp, #0]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d3ea      	bcc.n	80015a2 <__aeabi_ddiv+0x59e>
 80015cc:	0015      	movs	r5, r2
 80015ce:	e7d3      	b.n	8001578 <__aeabi_ddiv+0x574>
 80015d0:	000007ff 	.word	0x000007ff
 80015d4:	0000043e 	.word	0x0000043e
 80015d8:	0000041e 	.word	0x0000041e
 80015dc:	000003ff 	.word	0x000003ff

080015e0 <__eqdf2>:
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	464e      	mov	r6, r9
 80015e4:	4645      	mov	r5, r8
 80015e6:	46de      	mov	lr, fp
 80015e8:	4657      	mov	r7, sl
 80015ea:	4690      	mov	r8, r2
 80015ec:	b5e0      	push	{r5, r6, r7, lr}
 80015ee:	0017      	movs	r7, r2
 80015f0:	031a      	lsls	r2, r3, #12
 80015f2:	0b12      	lsrs	r2, r2, #12
 80015f4:	0005      	movs	r5, r0
 80015f6:	4684      	mov	ip, r0
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <__eqdf2+0x80>)
 80015fa:	030e      	lsls	r6, r1, #12
 80015fc:	004c      	lsls	r4, r1, #1
 80015fe:	4691      	mov	r9, r2
 8001600:	005a      	lsls	r2, r3, #1
 8001602:	0fdb      	lsrs	r3, r3, #31
 8001604:	469b      	mov	fp, r3
 8001606:	0b36      	lsrs	r6, r6, #12
 8001608:	0d64      	lsrs	r4, r4, #21
 800160a:	0fc9      	lsrs	r1, r1, #31
 800160c:	0d52      	lsrs	r2, r2, #21
 800160e:	4284      	cmp	r4, r0
 8001610:	d019      	beq.n	8001646 <__eqdf2+0x66>
 8001612:	4282      	cmp	r2, r0
 8001614:	d010      	beq.n	8001638 <__eqdf2+0x58>
 8001616:	2001      	movs	r0, #1
 8001618:	4294      	cmp	r4, r2
 800161a:	d10e      	bne.n	800163a <__eqdf2+0x5a>
 800161c:	454e      	cmp	r6, r9
 800161e:	d10c      	bne.n	800163a <__eqdf2+0x5a>
 8001620:	2001      	movs	r0, #1
 8001622:	45c4      	cmp	ip, r8
 8001624:	d109      	bne.n	800163a <__eqdf2+0x5a>
 8001626:	4559      	cmp	r1, fp
 8001628:	d017      	beq.n	800165a <__eqdf2+0x7a>
 800162a:	2c00      	cmp	r4, #0
 800162c:	d105      	bne.n	800163a <__eqdf2+0x5a>
 800162e:	0030      	movs	r0, r6
 8001630:	4328      	orrs	r0, r5
 8001632:	1e43      	subs	r3, r0, #1
 8001634:	4198      	sbcs	r0, r3
 8001636:	e000      	b.n	800163a <__eqdf2+0x5a>
 8001638:	2001      	movs	r0, #1
 800163a:	bcf0      	pop	{r4, r5, r6, r7}
 800163c:	46bb      	mov	fp, r7
 800163e:	46b2      	mov	sl, r6
 8001640:	46a9      	mov	r9, r5
 8001642:	46a0      	mov	r8, r4
 8001644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001646:	0033      	movs	r3, r6
 8001648:	2001      	movs	r0, #1
 800164a:	432b      	orrs	r3, r5
 800164c:	d1f5      	bne.n	800163a <__eqdf2+0x5a>
 800164e:	42a2      	cmp	r2, r4
 8001650:	d1f3      	bne.n	800163a <__eqdf2+0x5a>
 8001652:	464b      	mov	r3, r9
 8001654:	433b      	orrs	r3, r7
 8001656:	d1f0      	bne.n	800163a <__eqdf2+0x5a>
 8001658:	e7e2      	b.n	8001620 <__eqdf2+0x40>
 800165a:	2000      	movs	r0, #0
 800165c:	e7ed      	b.n	800163a <__eqdf2+0x5a>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	000007ff 	.word	0x000007ff

08001664 <__gedf2>:
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	4647      	mov	r7, r8
 8001668:	46ce      	mov	lr, r9
 800166a:	0004      	movs	r4, r0
 800166c:	0018      	movs	r0, r3
 800166e:	0016      	movs	r6, r2
 8001670:	031b      	lsls	r3, r3, #12
 8001672:	0b1b      	lsrs	r3, r3, #12
 8001674:	4d2d      	ldr	r5, [pc, #180]	; (800172c <__gedf2+0xc8>)
 8001676:	004a      	lsls	r2, r1, #1
 8001678:	4699      	mov	r9, r3
 800167a:	b580      	push	{r7, lr}
 800167c:	0043      	lsls	r3, r0, #1
 800167e:	030f      	lsls	r7, r1, #12
 8001680:	46a4      	mov	ip, r4
 8001682:	46b0      	mov	r8, r6
 8001684:	0b3f      	lsrs	r7, r7, #12
 8001686:	0d52      	lsrs	r2, r2, #21
 8001688:	0fc9      	lsrs	r1, r1, #31
 800168a:	0d5b      	lsrs	r3, r3, #21
 800168c:	0fc0      	lsrs	r0, r0, #31
 800168e:	42aa      	cmp	r2, r5
 8001690:	d021      	beq.n	80016d6 <__gedf2+0x72>
 8001692:	42ab      	cmp	r3, r5
 8001694:	d013      	beq.n	80016be <__gedf2+0x5a>
 8001696:	2a00      	cmp	r2, #0
 8001698:	d122      	bne.n	80016e0 <__gedf2+0x7c>
 800169a:	433c      	orrs	r4, r7
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <__gedf2+0x42>
 80016a0:	464d      	mov	r5, r9
 80016a2:	432e      	orrs	r6, r5
 80016a4:	d022      	beq.n	80016ec <__gedf2+0x88>
 80016a6:	2c00      	cmp	r4, #0
 80016a8:	d010      	beq.n	80016cc <__gedf2+0x68>
 80016aa:	4281      	cmp	r1, r0
 80016ac:	d022      	beq.n	80016f4 <__gedf2+0x90>
 80016ae:	2002      	movs	r0, #2
 80016b0:	3901      	subs	r1, #1
 80016b2:	4008      	ands	r0, r1
 80016b4:	3801      	subs	r0, #1
 80016b6:	bcc0      	pop	{r6, r7}
 80016b8:	46b9      	mov	r9, r7
 80016ba:	46b0      	mov	r8, r6
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	464d      	mov	r5, r9
 80016c0:	432e      	orrs	r6, r5
 80016c2:	d129      	bne.n	8001718 <__gedf2+0xb4>
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d1f0      	bne.n	80016aa <__gedf2+0x46>
 80016c8:	433c      	orrs	r4, r7
 80016ca:	d1ee      	bne.n	80016aa <__gedf2+0x46>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d1f2      	bne.n	80016b6 <__gedf2+0x52>
 80016d0:	2001      	movs	r0, #1
 80016d2:	4240      	negs	r0, r0
 80016d4:	e7ef      	b.n	80016b6 <__gedf2+0x52>
 80016d6:	003d      	movs	r5, r7
 80016d8:	4325      	orrs	r5, r4
 80016da:	d11d      	bne.n	8001718 <__gedf2+0xb4>
 80016dc:	4293      	cmp	r3, r2
 80016de:	d0ee      	beq.n	80016be <__gedf2+0x5a>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e2      	bne.n	80016aa <__gedf2+0x46>
 80016e4:	464c      	mov	r4, r9
 80016e6:	4326      	orrs	r6, r4
 80016e8:	d1df      	bne.n	80016aa <__gedf2+0x46>
 80016ea:	e7e0      	b.n	80016ae <__gedf2+0x4a>
 80016ec:	2000      	movs	r0, #0
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d0e1      	beq.n	80016b6 <__gedf2+0x52>
 80016f2:	e7dc      	b.n	80016ae <__gedf2+0x4a>
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dc0a      	bgt.n	800170e <__gedf2+0xaa>
 80016f8:	dbe8      	blt.n	80016cc <__gedf2+0x68>
 80016fa:	454f      	cmp	r7, r9
 80016fc:	d8d7      	bhi.n	80016ae <__gedf2+0x4a>
 80016fe:	d00e      	beq.n	800171e <__gedf2+0xba>
 8001700:	2000      	movs	r0, #0
 8001702:	454f      	cmp	r7, r9
 8001704:	d2d7      	bcs.n	80016b6 <__gedf2+0x52>
 8001706:	2900      	cmp	r1, #0
 8001708:	d0e2      	beq.n	80016d0 <__gedf2+0x6c>
 800170a:	0008      	movs	r0, r1
 800170c:	e7d3      	b.n	80016b6 <__gedf2+0x52>
 800170e:	4243      	negs	r3, r0
 8001710:	4158      	adcs	r0, r3
 8001712:	0040      	lsls	r0, r0, #1
 8001714:	3801      	subs	r0, #1
 8001716:	e7ce      	b.n	80016b6 <__gedf2+0x52>
 8001718:	2002      	movs	r0, #2
 800171a:	4240      	negs	r0, r0
 800171c:	e7cb      	b.n	80016b6 <__gedf2+0x52>
 800171e:	45c4      	cmp	ip, r8
 8001720:	d8c5      	bhi.n	80016ae <__gedf2+0x4a>
 8001722:	2000      	movs	r0, #0
 8001724:	45c4      	cmp	ip, r8
 8001726:	d2c6      	bcs.n	80016b6 <__gedf2+0x52>
 8001728:	e7ed      	b.n	8001706 <__gedf2+0xa2>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff

08001730 <__ledf2>:
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	4647      	mov	r7, r8
 8001734:	46ce      	mov	lr, r9
 8001736:	0004      	movs	r4, r0
 8001738:	0018      	movs	r0, r3
 800173a:	0016      	movs	r6, r2
 800173c:	031b      	lsls	r3, r3, #12
 800173e:	0b1b      	lsrs	r3, r3, #12
 8001740:	4d2c      	ldr	r5, [pc, #176]	; (80017f4 <__ledf2+0xc4>)
 8001742:	004a      	lsls	r2, r1, #1
 8001744:	4699      	mov	r9, r3
 8001746:	b580      	push	{r7, lr}
 8001748:	0043      	lsls	r3, r0, #1
 800174a:	030f      	lsls	r7, r1, #12
 800174c:	46a4      	mov	ip, r4
 800174e:	46b0      	mov	r8, r6
 8001750:	0b3f      	lsrs	r7, r7, #12
 8001752:	0d52      	lsrs	r2, r2, #21
 8001754:	0fc9      	lsrs	r1, r1, #31
 8001756:	0d5b      	lsrs	r3, r3, #21
 8001758:	0fc0      	lsrs	r0, r0, #31
 800175a:	42aa      	cmp	r2, r5
 800175c:	d00d      	beq.n	800177a <__ledf2+0x4a>
 800175e:	42ab      	cmp	r3, r5
 8001760:	d010      	beq.n	8001784 <__ledf2+0x54>
 8001762:	2a00      	cmp	r2, #0
 8001764:	d127      	bne.n	80017b6 <__ledf2+0x86>
 8001766:	433c      	orrs	r4, r7
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <__ledf2+0x60>
 800176c:	464d      	mov	r5, r9
 800176e:	432e      	orrs	r6, r5
 8001770:	d10e      	bne.n	8001790 <__ledf2+0x60>
 8001772:	2000      	movs	r0, #0
 8001774:	2c00      	cmp	r4, #0
 8001776:	d015      	beq.n	80017a4 <__ledf2+0x74>
 8001778:	e00e      	b.n	8001798 <__ledf2+0x68>
 800177a:	003d      	movs	r5, r7
 800177c:	4325      	orrs	r5, r4
 800177e:	d110      	bne.n	80017a2 <__ledf2+0x72>
 8001780:	4293      	cmp	r3, r2
 8001782:	d118      	bne.n	80017b6 <__ledf2+0x86>
 8001784:	464d      	mov	r5, r9
 8001786:	432e      	orrs	r6, r5
 8001788:	d10b      	bne.n	80017a2 <__ledf2+0x72>
 800178a:	2a00      	cmp	r2, #0
 800178c:	d102      	bne.n	8001794 <__ledf2+0x64>
 800178e:	433c      	orrs	r4, r7
 8001790:	2c00      	cmp	r4, #0
 8001792:	d00b      	beq.n	80017ac <__ledf2+0x7c>
 8001794:	4281      	cmp	r1, r0
 8001796:	d014      	beq.n	80017c2 <__ledf2+0x92>
 8001798:	2002      	movs	r0, #2
 800179a:	3901      	subs	r1, #1
 800179c:	4008      	ands	r0, r1
 800179e:	3801      	subs	r0, #1
 80017a0:	e000      	b.n	80017a4 <__ledf2+0x74>
 80017a2:	2002      	movs	r0, #2
 80017a4:	bcc0      	pop	{r6, r7}
 80017a6:	46b9      	mov	r9, r7
 80017a8:	46b0      	mov	r8, r6
 80017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d1f9      	bne.n	80017a4 <__ledf2+0x74>
 80017b0:	2001      	movs	r0, #1
 80017b2:	4240      	negs	r0, r0
 80017b4:	e7f6      	b.n	80017a4 <__ledf2+0x74>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ec      	bne.n	8001794 <__ledf2+0x64>
 80017ba:	464c      	mov	r4, r9
 80017bc:	4326      	orrs	r6, r4
 80017be:	d1e9      	bne.n	8001794 <__ledf2+0x64>
 80017c0:	e7ea      	b.n	8001798 <__ledf2+0x68>
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dd04      	ble.n	80017d0 <__ledf2+0xa0>
 80017c6:	4243      	negs	r3, r0
 80017c8:	4158      	adcs	r0, r3
 80017ca:	0040      	lsls	r0, r0, #1
 80017cc:	3801      	subs	r0, #1
 80017ce:	e7e9      	b.n	80017a4 <__ledf2+0x74>
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbeb      	blt.n	80017ac <__ledf2+0x7c>
 80017d4:	454f      	cmp	r7, r9
 80017d6:	d8df      	bhi.n	8001798 <__ledf2+0x68>
 80017d8:	d006      	beq.n	80017e8 <__ledf2+0xb8>
 80017da:	2000      	movs	r0, #0
 80017dc:	454f      	cmp	r7, r9
 80017de:	d2e1      	bcs.n	80017a4 <__ledf2+0x74>
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d0e5      	beq.n	80017b0 <__ledf2+0x80>
 80017e4:	0008      	movs	r0, r1
 80017e6:	e7dd      	b.n	80017a4 <__ledf2+0x74>
 80017e8:	45c4      	cmp	ip, r8
 80017ea:	d8d5      	bhi.n	8001798 <__ledf2+0x68>
 80017ec:	2000      	movs	r0, #0
 80017ee:	45c4      	cmp	ip, r8
 80017f0:	d2d8      	bcs.n	80017a4 <__ledf2+0x74>
 80017f2:	e7f5      	b.n	80017e0 <__ledf2+0xb0>
 80017f4:	000007ff 	.word	0x000007ff

080017f8 <__aeabi_dmul>:
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	4645      	mov	r5, r8
 80017fc:	46de      	mov	lr, fp
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	b5e0      	push	{r5, r6, r7, lr}
 8001804:	001f      	movs	r7, r3
 8001806:	030b      	lsls	r3, r1, #12
 8001808:	0b1b      	lsrs	r3, r3, #12
 800180a:	469b      	mov	fp, r3
 800180c:	004d      	lsls	r5, r1, #1
 800180e:	0fcb      	lsrs	r3, r1, #31
 8001810:	0004      	movs	r4, r0
 8001812:	4691      	mov	r9, r2
 8001814:	4698      	mov	r8, r3
 8001816:	b087      	sub	sp, #28
 8001818:	0d6d      	lsrs	r5, r5, #21
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x26>
 800181c:	e1cd      	b.n	8001bba <__aeabi_dmul+0x3c2>
 800181e:	4bce      	ldr	r3, [pc, #824]	; (8001b58 <__aeabi_dmul+0x360>)
 8001820:	429d      	cmp	r5, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dmul+0x2e>
 8001824:	e1e9      	b.n	8001bfa <__aeabi_dmul+0x402>
 8001826:	465a      	mov	r2, fp
 8001828:	0f43      	lsrs	r3, r0, #29
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	4313      	orrs	r3, r2
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	00c3      	lsls	r3, r0, #3
 8001836:	469a      	mov	sl, r3
 8001838:	4bc8      	ldr	r3, [pc, #800]	; (8001b5c <__aeabi_dmul+0x364>)
 800183a:	4693      	mov	fp, r2
 800183c:	469c      	mov	ip, r3
 800183e:	2300      	movs	r3, #0
 8001840:	2600      	movs	r6, #0
 8001842:	4465      	add	r5, ip
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	033c      	lsls	r4, r7, #12
 8001848:	007b      	lsls	r3, r7, #1
 800184a:	4648      	mov	r0, r9
 800184c:	0b24      	lsrs	r4, r4, #12
 800184e:	0d5b      	lsrs	r3, r3, #21
 8001850:	0fff      	lsrs	r7, r7, #31
 8001852:	2b00      	cmp	r3, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dmul+0x60>
 8001856:	e189      	b.n	8001b6c <__aeabi_dmul+0x374>
 8001858:	4abf      	ldr	r2, [pc, #764]	; (8001b58 <__aeabi_dmul+0x360>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <__aeabi_dmul+0x9a>
 800185e:	0f42      	lsrs	r2, r0, #29
 8001860:	00e4      	lsls	r4, r4, #3
 8001862:	4322      	orrs	r2, r4
 8001864:	2480      	movs	r4, #128	; 0x80
 8001866:	0424      	lsls	r4, r4, #16
 8001868:	4314      	orrs	r4, r2
 800186a:	4abc      	ldr	r2, [pc, #752]	; (8001b5c <__aeabi_dmul+0x364>)
 800186c:	2100      	movs	r1, #0
 800186e:	4694      	mov	ip, r2
 8001870:	4642      	mov	r2, r8
 8001872:	4463      	add	r3, ip
 8001874:	195b      	adds	r3, r3, r5
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	407a      	eors	r2, r7
 800187c:	3301      	adds	r3, #1
 800187e:	00c0      	lsls	r0, r0, #3
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2e0a      	cmp	r6, #10
 8001886:	dd1c      	ble.n	80018c2 <__aeabi_dmul+0xca>
 8001888:	003a      	movs	r2, r7
 800188a:	2e0b      	cmp	r6, #11
 800188c:	d05e      	beq.n	800194c <__aeabi_dmul+0x154>
 800188e:	4647      	mov	r7, r8
 8001890:	e056      	b.n	8001940 <__aeabi_dmul+0x148>
 8001892:	4649      	mov	r1, r9
 8001894:	4bb0      	ldr	r3, [pc, #704]	; (8001b58 <__aeabi_dmul+0x360>)
 8001896:	4321      	orrs	r1, r4
 8001898:	18eb      	adds	r3, r5, r3
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2900      	cmp	r1, #0
 800189e:	d12a      	bne.n	80018f6 <__aeabi_dmul+0xfe>
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	2202      	movs	r2, #2
 80018a4:	0100      	lsls	r0, r0, #4
 80018a6:	002b      	movs	r3, r5
 80018a8:	4684      	mov	ip, r0
 80018aa:	4316      	orrs	r6, r2
 80018ac:	4642      	mov	r2, r8
 80018ae:	4463      	add	r3, ip
 80018b0:	407a      	eors	r2, r7
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2e0a      	cmp	r6, #10
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dmul+0xc4>
 80018ba:	e231      	b.n	8001d20 <__aeabi_dmul+0x528>
 80018bc:	2000      	movs	r0, #0
 80018be:	2400      	movs	r4, #0
 80018c0:	2102      	movs	r1, #2
 80018c2:	2e02      	cmp	r6, #2
 80018c4:	dc26      	bgt.n	8001914 <__aeabi_dmul+0x11c>
 80018c6:	3e01      	subs	r6, #1
 80018c8:	2e01      	cmp	r6, #1
 80018ca:	d852      	bhi.n	8001972 <__aeabi_dmul+0x17a>
 80018cc:	2902      	cmp	r1, #2
 80018ce:	d04c      	beq.n	800196a <__aeabi_dmul+0x172>
 80018d0:	2901      	cmp	r1, #1
 80018d2:	d000      	beq.n	80018d6 <__aeabi_dmul+0xde>
 80018d4:	e118      	b.n	8001b08 <__aeabi_dmul+0x310>
 80018d6:	2300      	movs	r3, #0
 80018d8:	2400      	movs	r4, #0
 80018da:	2500      	movs	r5, #0
 80018dc:	051b      	lsls	r3, r3, #20
 80018de:	4323      	orrs	r3, r4
 80018e0:	07d2      	lsls	r2, r2, #31
 80018e2:	4313      	orrs	r3, r2
 80018e4:	0028      	movs	r0, r5
 80018e6:	0019      	movs	r1, r3
 80018e8:	b007      	add	sp, #28
 80018ea:	bcf0      	pop	{r4, r5, r6, r7}
 80018ec:	46bb      	mov	fp, r7
 80018ee:	46b2      	mov	sl, r6
 80018f0:	46a9      	mov	r9, r5
 80018f2:	46a0      	mov	r8, r4
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	2203      	movs	r2, #3
 80018fa:	0109      	lsls	r1, r1, #4
 80018fc:	002b      	movs	r3, r5
 80018fe:	468c      	mov	ip, r1
 8001900:	4316      	orrs	r6, r2
 8001902:	4642      	mov	r2, r8
 8001904:	4463      	add	r3, ip
 8001906:	407a      	eors	r2, r7
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2e0a      	cmp	r6, #10
 800190e:	dd00      	ble.n	8001912 <__aeabi_dmul+0x11a>
 8001910:	e228      	b.n	8001d64 <__aeabi_dmul+0x56c>
 8001912:	2103      	movs	r1, #3
 8001914:	2501      	movs	r5, #1
 8001916:	40b5      	lsls	r5, r6
 8001918:	46ac      	mov	ip, r5
 800191a:	26a6      	movs	r6, #166	; 0xa6
 800191c:	4663      	mov	r3, ip
 800191e:	00f6      	lsls	r6, r6, #3
 8001920:	4035      	ands	r5, r6
 8001922:	4233      	tst	r3, r6
 8001924:	d10b      	bne.n	800193e <__aeabi_dmul+0x146>
 8001926:	2690      	movs	r6, #144	; 0x90
 8001928:	00b6      	lsls	r6, r6, #2
 800192a:	4233      	tst	r3, r6
 800192c:	d118      	bne.n	8001960 <__aeabi_dmul+0x168>
 800192e:	3eb9      	subs	r6, #185	; 0xb9
 8001930:	3eff      	subs	r6, #255	; 0xff
 8001932:	421e      	tst	r6, r3
 8001934:	d01d      	beq.n	8001972 <__aeabi_dmul+0x17a>
 8001936:	46a3      	mov	fp, r4
 8001938:	4682      	mov	sl, r0
 800193a:	9100      	str	r1, [sp, #0]
 800193c:	e000      	b.n	8001940 <__aeabi_dmul+0x148>
 800193e:	0017      	movs	r7, r2
 8001940:	9900      	ldr	r1, [sp, #0]
 8001942:	003a      	movs	r2, r7
 8001944:	2902      	cmp	r1, #2
 8001946:	d010      	beq.n	800196a <__aeabi_dmul+0x172>
 8001948:	465c      	mov	r4, fp
 800194a:	4650      	mov	r0, sl
 800194c:	2903      	cmp	r1, #3
 800194e:	d1bf      	bne.n	80018d0 <__aeabi_dmul+0xd8>
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	031b      	lsls	r3, r3, #12
 8001954:	431c      	orrs	r4, r3
 8001956:	0324      	lsls	r4, r4, #12
 8001958:	0005      	movs	r5, r0
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <__aeabi_dmul+0x360>)
 800195c:	0b24      	lsrs	r4, r4, #12
 800195e:	e7bd      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001960:	2480      	movs	r4, #128	; 0x80
 8001962:	2200      	movs	r2, #0
 8001964:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <__aeabi_dmul+0x360>)
 8001966:	0324      	lsls	r4, r4, #12
 8001968:	e7b8      	b.n	80018dc <__aeabi_dmul+0xe4>
 800196a:	2400      	movs	r4, #0
 800196c:	2500      	movs	r5, #0
 800196e:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <__aeabi_dmul+0x360>)
 8001970:	e7b4      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001972:	4653      	mov	r3, sl
 8001974:	041e      	lsls	r6, r3, #16
 8001976:	0c36      	lsrs	r6, r6, #16
 8001978:	0c1f      	lsrs	r7, r3, #16
 800197a:	0033      	movs	r3, r6
 800197c:	0c01      	lsrs	r1, r0, #16
 800197e:	0400      	lsls	r0, r0, #16
 8001980:	0c00      	lsrs	r0, r0, #16
 8001982:	4343      	muls	r3, r0
 8001984:	4698      	mov	r8, r3
 8001986:	0003      	movs	r3, r0
 8001988:	437b      	muls	r3, r7
 800198a:	4699      	mov	r9, r3
 800198c:	0033      	movs	r3, r6
 800198e:	434b      	muls	r3, r1
 8001990:	469c      	mov	ip, r3
 8001992:	4643      	mov	r3, r8
 8001994:	000d      	movs	r5, r1
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	469a      	mov	sl, r3
 800199a:	437d      	muls	r5, r7
 800199c:	44cc      	add	ip, r9
 800199e:	44d4      	add	ip, sl
 80019a0:	9500      	str	r5, [sp, #0]
 80019a2:	45e1      	cmp	r9, ip
 80019a4:	d904      	bls.n	80019b0 <__aeabi_dmul+0x1b8>
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	4699      	mov	r9, r3
 80019ac:	444d      	add	r5, r9
 80019ae:	9500      	str	r5, [sp, #0]
 80019b0:	4663      	mov	r3, ip
 80019b2:	0c1b      	lsrs	r3, r3, #16
 80019b4:	001d      	movs	r5, r3
 80019b6:	4663      	mov	r3, ip
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	469c      	mov	ip, r3
 80019bc:	4643      	mov	r3, r8
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	4698      	mov	r8, r3
 80019c4:	4663      	mov	r3, ip
 80019c6:	4443      	add	r3, r8
 80019c8:	9303      	str	r3, [sp, #12]
 80019ca:	0c23      	lsrs	r3, r4, #16
 80019cc:	4698      	mov	r8, r3
 80019ce:	0033      	movs	r3, r6
 80019d0:	0424      	lsls	r4, r4, #16
 80019d2:	0c24      	lsrs	r4, r4, #16
 80019d4:	4363      	muls	r3, r4
 80019d6:	469c      	mov	ip, r3
 80019d8:	0023      	movs	r3, r4
 80019da:	437b      	muls	r3, r7
 80019dc:	4699      	mov	r9, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	435e      	muls	r6, r3
 80019e2:	435f      	muls	r7, r3
 80019e4:	444e      	add	r6, r9
 80019e6:	4663      	mov	r3, ip
 80019e8:	46b2      	mov	sl, r6
 80019ea:	0c1e      	lsrs	r6, r3, #16
 80019ec:	4456      	add	r6, sl
 80019ee:	45b1      	cmp	r9, r6
 80019f0:	d903      	bls.n	80019fa <__aeabi_dmul+0x202>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	4699      	mov	r9, r3
 80019f8:	444f      	add	r7, r9
 80019fa:	0c33      	lsrs	r3, r6, #16
 80019fc:	4699      	mov	r9, r3
 80019fe:	003b      	movs	r3, r7
 8001a00:	444b      	add	r3, r9
 8001a02:	9305      	str	r3, [sp, #20]
 8001a04:	4663      	mov	r3, ip
 8001a06:	46ac      	mov	ip, r5
 8001a08:	041f      	lsls	r7, r3, #16
 8001a0a:	0c3f      	lsrs	r7, r7, #16
 8001a0c:	0436      	lsls	r6, r6, #16
 8001a0e:	19f6      	adds	r6, r6, r7
 8001a10:	44b4      	add	ip, r6
 8001a12:	4663      	mov	r3, ip
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	465b      	mov	r3, fp
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	469c      	mov	ip, r3
 8001a1c:	465b      	mov	r3, fp
 8001a1e:	041f      	lsls	r7, r3, #16
 8001a20:	0c3f      	lsrs	r7, r7, #16
 8001a22:	003b      	movs	r3, r7
 8001a24:	4343      	muls	r3, r0
 8001a26:	4699      	mov	r9, r3
 8001a28:	4663      	mov	r3, ip
 8001a2a:	4343      	muls	r3, r0
 8001a2c:	469a      	mov	sl, r3
 8001a2e:	464b      	mov	r3, r9
 8001a30:	4660      	mov	r0, ip
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	469b      	mov	fp, r3
 8001a36:	4348      	muls	r0, r1
 8001a38:	4379      	muls	r1, r7
 8001a3a:	4451      	add	r1, sl
 8001a3c:	4459      	add	r1, fp
 8001a3e:	458a      	cmp	sl, r1
 8001a40:	d903      	bls.n	8001a4a <__aeabi_dmul+0x252>
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	469a      	mov	sl, r3
 8001a48:	4450      	add	r0, sl
 8001a4a:	0c0b      	lsrs	r3, r1, #16
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	464b      	mov	r3, r9
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	4699      	mov	r9, r3
 8001a56:	003b      	movs	r3, r7
 8001a58:	4363      	muls	r3, r4
 8001a5a:	0409      	lsls	r1, r1, #16
 8001a5c:	4645      	mov	r5, r8
 8001a5e:	4449      	add	r1, r9
 8001a60:	4699      	mov	r9, r3
 8001a62:	4663      	mov	r3, ip
 8001a64:	435c      	muls	r4, r3
 8001a66:	436b      	muls	r3, r5
 8001a68:	469c      	mov	ip, r3
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	4698      	mov	r8, r3
 8001a70:	436f      	muls	r7, r5
 8001a72:	193f      	adds	r7, r7, r4
 8001a74:	4447      	add	r7, r8
 8001a76:	4450      	add	r0, sl
 8001a78:	42bc      	cmp	r4, r7
 8001a7a:	d903      	bls.n	8001a84 <__aeabi_dmul+0x28c>
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	4698      	mov	r8, r3
 8001a82:	44c4      	add	ip, r8
 8001a84:	9b04      	ldr	r3, [sp, #16]
 8001a86:	9d00      	ldr	r5, [sp, #0]
 8001a88:	4698      	mov	r8, r3
 8001a8a:	4445      	add	r5, r8
 8001a8c:	42b5      	cmp	r5, r6
 8001a8e:	41b6      	sbcs	r6, r6
 8001a90:	4273      	negs	r3, r6
 8001a92:	4698      	mov	r8, r3
 8001a94:	464b      	mov	r3, r9
 8001a96:	041e      	lsls	r6, r3, #16
 8001a98:	9b05      	ldr	r3, [sp, #20]
 8001a9a:	043c      	lsls	r4, r7, #16
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	0c36      	lsrs	r6, r6, #16
 8001aa0:	19a4      	adds	r4, r4, r6
 8001aa2:	444c      	add	r4, r9
 8001aa4:	46a1      	mov	r9, r4
 8001aa6:	4683      	mov	fp, r0
 8001aa8:	186e      	adds	r6, r5, r1
 8001aaa:	44c1      	add	r9, r8
 8001aac:	428e      	cmp	r6, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44cb      	add	fp, r9
 8001ab2:	465d      	mov	r5, fp
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	186d      	adds	r5, r5, r1
 8001ab8:	429c      	cmp	r4, r3
 8001aba:	41a4      	sbcs	r4, r4
 8001abc:	45c1      	cmp	r9, r8
 8001abe:	419b      	sbcs	r3, r3
 8001ac0:	4583      	cmp	fp, r0
 8001ac2:	4180      	sbcs	r0, r0
 8001ac4:	428d      	cmp	r5, r1
 8001ac6:	4189      	sbcs	r1, r1
 8001ac8:	425b      	negs	r3, r3
 8001aca:	4264      	negs	r4, r4
 8001acc:	431c      	orrs	r4, r3
 8001ace:	4240      	negs	r0, r0
 8001ad0:	9b03      	ldr	r3, [sp, #12]
 8001ad2:	4249      	negs	r1, r1
 8001ad4:	4301      	orrs	r1, r0
 8001ad6:	0270      	lsls	r0, r6, #9
 8001ad8:	0c3f      	lsrs	r7, r7, #16
 8001ada:	4318      	orrs	r0, r3
 8001adc:	19e4      	adds	r4, r4, r7
 8001ade:	1e47      	subs	r7, r0, #1
 8001ae0:	41b8      	sbcs	r0, r7
 8001ae2:	1864      	adds	r4, r4, r1
 8001ae4:	4464      	add	r4, ip
 8001ae6:	0df6      	lsrs	r6, r6, #23
 8001ae8:	0261      	lsls	r1, r4, #9
 8001aea:	4330      	orrs	r0, r6
 8001aec:	0dec      	lsrs	r4, r5, #23
 8001aee:	026e      	lsls	r6, r5, #9
 8001af0:	430c      	orrs	r4, r1
 8001af2:	4330      	orrs	r0, r6
 8001af4:	01c9      	lsls	r1, r1, #7
 8001af6:	d400      	bmi.n	8001afa <__aeabi_dmul+0x302>
 8001af8:	e0f1      	b.n	8001cde <__aeabi_dmul+0x4e6>
 8001afa:	2101      	movs	r1, #1
 8001afc:	0843      	lsrs	r3, r0, #1
 8001afe:	4001      	ands	r1, r0
 8001b00:	430b      	orrs	r3, r1
 8001b02:	07e0      	lsls	r0, r4, #31
 8001b04:	4318      	orrs	r0, r3
 8001b06:	0864      	lsrs	r4, r4, #1
 8001b08:	4915      	ldr	r1, [pc, #84]	; (8001b60 <__aeabi_dmul+0x368>)
 8001b0a:	9b02      	ldr	r3, [sp, #8]
 8001b0c:	468c      	mov	ip, r1
 8001b0e:	4463      	add	r3, ip
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dc00      	bgt.n	8001b16 <__aeabi_dmul+0x31e>
 8001b14:	e097      	b.n	8001c46 <__aeabi_dmul+0x44e>
 8001b16:	0741      	lsls	r1, r0, #29
 8001b18:	d009      	beq.n	8001b2e <__aeabi_dmul+0x336>
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	4001      	ands	r1, r0
 8001b1e:	2904      	cmp	r1, #4
 8001b20:	d005      	beq.n	8001b2e <__aeabi_dmul+0x336>
 8001b22:	1d01      	adds	r1, r0, #4
 8001b24:	4281      	cmp	r1, r0
 8001b26:	4180      	sbcs	r0, r0
 8001b28:	4240      	negs	r0, r0
 8001b2a:	1824      	adds	r4, r4, r0
 8001b2c:	0008      	movs	r0, r1
 8001b2e:	01e1      	lsls	r1, r4, #7
 8001b30:	d506      	bpl.n	8001b40 <__aeabi_dmul+0x348>
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	00c9      	lsls	r1, r1, #3
 8001b36:	468c      	mov	ip, r1
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <__aeabi_dmul+0x36c>)
 8001b3a:	401c      	ands	r4, r3
 8001b3c:	9b02      	ldr	r3, [sp, #8]
 8001b3e:	4463      	add	r3, ip
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <__aeabi_dmul+0x370>)
 8001b42:	428b      	cmp	r3, r1
 8001b44:	dd00      	ble.n	8001b48 <__aeabi_dmul+0x350>
 8001b46:	e710      	b.n	800196a <__aeabi_dmul+0x172>
 8001b48:	0761      	lsls	r1, r4, #29
 8001b4a:	08c5      	lsrs	r5, r0, #3
 8001b4c:	0264      	lsls	r4, r4, #9
 8001b4e:	055b      	lsls	r3, r3, #21
 8001b50:	430d      	orrs	r5, r1
 8001b52:	0b24      	lsrs	r4, r4, #12
 8001b54:	0d5b      	lsrs	r3, r3, #21
 8001b56:	e6c1      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001b58:	000007ff 	.word	0x000007ff
 8001b5c:	fffffc01 	.word	0xfffffc01
 8001b60:	000003ff 	.word	0x000003ff
 8001b64:	feffffff 	.word	0xfeffffff
 8001b68:	000007fe 	.word	0x000007fe
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	d059      	beq.n	8001c26 <__aeabi_dmul+0x42e>
 8001b72:	2c00      	cmp	r4, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dmul+0x380>
 8001b76:	e0a3      	b.n	8001cc0 <__aeabi_dmul+0x4c8>
 8001b78:	0020      	movs	r0, r4
 8001b7a:	f000 fd73 	bl	8002664 <__clzsi2>
 8001b7e:	0001      	movs	r1, r0
 8001b80:	0003      	movs	r3, r0
 8001b82:	390b      	subs	r1, #11
 8001b84:	221d      	movs	r2, #29
 8001b86:	1a52      	subs	r2, r2, r1
 8001b88:	4649      	mov	r1, r9
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	40d1      	lsrs	r1, r2
 8001b8e:	464a      	mov	r2, r9
 8001b90:	3808      	subs	r0, #8
 8001b92:	4082      	lsls	r2, r0
 8001b94:	4084      	lsls	r4, r0
 8001b96:	0010      	movs	r0, r2
 8001b98:	430c      	orrs	r4, r1
 8001b9a:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <__aeabi_dmul+0x574>)
 8001b9c:	1aeb      	subs	r3, r5, r3
 8001b9e:	4694      	mov	ip, r2
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	4463      	add	r3, ip
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	407a      	eors	r2, r7
 8001baa:	3301      	adds	r3, #1
 8001bac:	2100      	movs	r1, #0
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	2e0a      	cmp	r6, #10
 8001bb4:	dd00      	ble.n	8001bb8 <__aeabi_dmul+0x3c0>
 8001bb6:	e667      	b.n	8001888 <__aeabi_dmul+0x90>
 8001bb8:	e683      	b.n	80018c2 <__aeabi_dmul+0xca>
 8001bba:	465b      	mov	r3, fp
 8001bbc:	4303      	orrs	r3, r0
 8001bbe:	469a      	mov	sl, r3
 8001bc0:	d02a      	beq.n	8001c18 <__aeabi_dmul+0x420>
 8001bc2:	465b      	mov	r3, fp
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d06d      	beq.n	8001ca4 <__aeabi_dmul+0x4ac>
 8001bc8:	4658      	mov	r0, fp
 8001bca:	f000 fd4b 	bl	8002664 <__clzsi2>
 8001bce:	0001      	movs	r1, r0
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	390b      	subs	r1, #11
 8001bd4:	221d      	movs	r2, #29
 8001bd6:	1a52      	subs	r2, r2, r1
 8001bd8:	0021      	movs	r1, r4
 8001bda:	0018      	movs	r0, r3
 8001bdc:	465d      	mov	r5, fp
 8001bde:	40d1      	lsrs	r1, r2
 8001be0:	3808      	subs	r0, #8
 8001be2:	4085      	lsls	r5, r0
 8001be4:	000a      	movs	r2, r1
 8001be6:	4084      	lsls	r4, r0
 8001be8:	432a      	orrs	r2, r5
 8001bea:	4693      	mov	fp, r2
 8001bec:	46a2      	mov	sl, r4
 8001bee:	4d5f      	ldr	r5, [pc, #380]	; (8001d6c <__aeabi_dmul+0x574>)
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	1aed      	subs	r5, r5, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	e625      	b.n	8001846 <__aeabi_dmul+0x4e>
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	4303      	orrs	r3, r0
 8001bfe:	469a      	mov	sl, r3
 8001c00:	d105      	bne.n	8001c0e <__aeabi_dmul+0x416>
 8001c02:	2300      	movs	r3, #0
 8001c04:	469b      	mov	fp, r3
 8001c06:	3302      	adds	r3, #2
 8001c08:	2608      	movs	r6, #8
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	e61b      	b.n	8001846 <__aeabi_dmul+0x4e>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	4682      	mov	sl, r0
 8001c12:	260c      	movs	r6, #12
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	e616      	b.n	8001846 <__aeabi_dmul+0x4e>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	469b      	mov	fp, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	2604      	movs	r6, #4
 8001c20:	2500      	movs	r5, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	e60f      	b.n	8001846 <__aeabi_dmul+0x4e>
 8001c26:	4642      	mov	r2, r8
 8001c28:	3301      	adds	r3, #1
 8001c2a:	9501      	str	r5, [sp, #4]
 8001c2c:	431e      	orrs	r6, r3
 8001c2e:	9b01      	ldr	r3, [sp, #4]
 8001c30:	407a      	eors	r2, r7
 8001c32:	3301      	adds	r3, #1
 8001c34:	2400      	movs	r4, #0
 8001c36:	2000      	movs	r0, #0
 8001c38:	2101      	movs	r1, #1
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	2e0a      	cmp	r6, #10
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dmul+0x44c>
 8001c42:	e621      	b.n	8001888 <__aeabi_dmul+0x90>
 8001c44:	e63d      	b.n	80018c2 <__aeabi_dmul+0xca>
 8001c46:	2101      	movs	r1, #1
 8001c48:	1ac9      	subs	r1, r1, r3
 8001c4a:	2938      	cmp	r1, #56	; 0x38
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dmul+0x458>
 8001c4e:	e642      	b.n	80018d6 <__aeabi_dmul+0xde>
 8001c50:	291f      	cmp	r1, #31
 8001c52:	dd47      	ble.n	8001ce4 <__aeabi_dmul+0x4ec>
 8001c54:	261f      	movs	r6, #31
 8001c56:	0025      	movs	r5, r4
 8001c58:	4276      	negs	r6, r6
 8001c5a:	1af3      	subs	r3, r6, r3
 8001c5c:	40dd      	lsrs	r5, r3
 8001c5e:	002b      	movs	r3, r5
 8001c60:	2920      	cmp	r1, #32
 8001c62:	d005      	beq.n	8001c70 <__aeabi_dmul+0x478>
 8001c64:	4942      	ldr	r1, [pc, #264]	; (8001d70 <__aeabi_dmul+0x578>)
 8001c66:	9d02      	ldr	r5, [sp, #8]
 8001c68:	468c      	mov	ip, r1
 8001c6a:	4465      	add	r5, ip
 8001c6c:	40ac      	lsls	r4, r5
 8001c6e:	4320      	orrs	r0, r4
 8001c70:	1e41      	subs	r1, r0, #1
 8001c72:	4188      	sbcs	r0, r1
 8001c74:	4318      	orrs	r0, r3
 8001c76:	2307      	movs	r3, #7
 8001c78:	001d      	movs	r5, r3
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	4005      	ands	r5, r0
 8001c7e:	4203      	tst	r3, r0
 8001c80:	d04a      	beq.n	8001d18 <__aeabi_dmul+0x520>
 8001c82:	230f      	movs	r3, #15
 8001c84:	2400      	movs	r4, #0
 8001c86:	4003      	ands	r3, r0
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d042      	beq.n	8001d12 <__aeabi_dmul+0x51a>
 8001c8c:	1d03      	adds	r3, r0, #4
 8001c8e:	4283      	cmp	r3, r0
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	4240      	negs	r0, r0
 8001c94:	1824      	adds	r4, r4, r0
 8001c96:	0018      	movs	r0, r3
 8001c98:	0223      	lsls	r3, r4, #8
 8001c9a:	d53a      	bpl.n	8001d12 <__aeabi_dmul+0x51a>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	e61b      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001ca4:	f000 fcde 	bl	8002664 <__clzsi2>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	0003      	movs	r3, r0
 8001cac:	3115      	adds	r1, #21
 8001cae:	3320      	adds	r3, #32
 8001cb0:	291c      	cmp	r1, #28
 8001cb2:	dd8f      	ble.n	8001bd4 <__aeabi_dmul+0x3dc>
 8001cb4:	3808      	subs	r0, #8
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4084      	lsls	r4, r0
 8001cba:	4692      	mov	sl, r2
 8001cbc:	46a3      	mov	fp, r4
 8001cbe:	e796      	b.n	8001bee <__aeabi_dmul+0x3f6>
 8001cc0:	f000 fcd0 	bl	8002664 <__clzsi2>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3115      	adds	r1, #21
 8001cca:	3320      	adds	r3, #32
 8001ccc:	291c      	cmp	r1, #28
 8001cce:	dc00      	bgt.n	8001cd2 <__aeabi_dmul+0x4da>
 8001cd0:	e758      	b.n	8001b84 <__aeabi_dmul+0x38c>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	464c      	mov	r4, r9
 8001cd6:	3a08      	subs	r2, #8
 8001cd8:	2000      	movs	r0, #0
 8001cda:	4094      	lsls	r4, r2
 8001cdc:	e75d      	b.n	8001b9a <__aeabi_dmul+0x3a2>
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	e711      	b.n	8001b08 <__aeabi_dmul+0x310>
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <__aeabi_dmul+0x57c>)
 8001ce6:	0026      	movs	r6, r4
 8001ce8:	469c      	mov	ip, r3
 8001cea:	0003      	movs	r3, r0
 8001cec:	9d02      	ldr	r5, [sp, #8]
 8001cee:	40cb      	lsrs	r3, r1
 8001cf0:	4465      	add	r5, ip
 8001cf2:	40ae      	lsls	r6, r5
 8001cf4:	431e      	orrs	r6, r3
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	40ab      	lsls	r3, r5
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	4183      	sbcs	r3, r0
 8001cfe:	0030      	movs	r0, r6
 8001d00:	4318      	orrs	r0, r3
 8001d02:	40cc      	lsrs	r4, r1
 8001d04:	0743      	lsls	r3, r0, #29
 8001d06:	d0c7      	beq.n	8001c98 <__aeabi_dmul+0x4a0>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4003      	ands	r3, r0
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d1bd      	bne.n	8001c8c <__aeabi_dmul+0x494>
 8001d10:	e7c2      	b.n	8001c98 <__aeabi_dmul+0x4a0>
 8001d12:	0765      	lsls	r5, r4, #29
 8001d14:	0264      	lsls	r4, r4, #9
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	08c0      	lsrs	r0, r0, #3
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4305      	orrs	r5, r0
 8001d1e:	e5dd      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001d20:	2500      	movs	r5, #0
 8001d22:	2302      	movs	r3, #2
 8001d24:	2e0f      	cmp	r6, #15
 8001d26:	d10c      	bne.n	8001d42 <__aeabi_dmul+0x54a>
 8001d28:	2480      	movs	r4, #128	; 0x80
 8001d2a:	465b      	mov	r3, fp
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	4223      	tst	r3, r4
 8001d30:	d00e      	beq.n	8001d50 <__aeabi_dmul+0x558>
 8001d32:	4221      	tst	r1, r4
 8001d34:	d10c      	bne.n	8001d50 <__aeabi_dmul+0x558>
 8001d36:	430c      	orrs	r4, r1
 8001d38:	0324      	lsls	r4, r4, #12
 8001d3a:	003a      	movs	r2, r7
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <__aeabi_dmul+0x580>)
 8001d3e:	0b24      	lsrs	r4, r4, #12
 8001d40:	e5cc      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001d42:	2e0b      	cmp	r6, #11
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dmul+0x550>
 8001d46:	e5a2      	b.n	800188e <__aeabi_dmul+0x96>
 8001d48:	468b      	mov	fp, r1
 8001d4a:	46aa      	mov	sl, r5
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	e5f7      	b.n	8001940 <__aeabi_dmul+0x148>
 8001d50:	2480      	movs	r4, #128	; 0x80
 8001d52:	465b      	mov	r3, fp
 8001d54:	0324      	lsls	r4, r4, #12
 8001d56:	431c      	orrs	r4, r3
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	4642      	mov	r2, r8
 8001d5c:	4655      	mov	r5, sl
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <__aeabi_dmul+0x580>)
 8001d60:	0b24      	lsrs	r4, r4, #12
 8001d62:	e5bb      	b.n	80018dc <__aeabi_dmul+0xe4>
 8001d64:	464d      	mov	r5, r9
 8001d66:	0021      	movs	r1, r4
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e7db      	b.n	8001d24 <__aeabi_dmul+0x52c>
 8001d6c:	fffffc0d 	.word	0xfffffc0d
 8001d70:	0000043e 	.word	0x0000043e
 8001d74:	0000041e 	.word	0x0000041e
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__aeabi_dsub>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4657      	mov	r7, sl
 8001d80:	464e      	mov	r6, r9
 8001d82:	4645      	mov	r5, r8
 8001d84:	46de      	mov	lr, fp
 8001d86:	b5e0      	push	{r5, r6, r7, lr}
 8001d88:	000d      	movs	r5, r1
 8001d8a:	0004      	movs	r4, r0
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	0010      	movs	r0, r2
 8001d90:	032b      	lsls	r3, r5, #12
 8001d92:	0a5b      	lsrs	r3, r3, #9
 8001d94:	0f62      	lsrs	r2, r4, #29
 8001d96:	431a      	orrs	r2, r3
 8001d98:	00e3      	lsls	r3, r4, #3
 8001d9a:	030c      	lsls	r4, r1, #12
 8001d9c:	0a64      	lsrs	r4, r4, #9
 8001d9e:	0f47      	lsrs	r7, r0, #29
 8001da0:	4327      	orrs	r7, r4
 8001da2:	4cd0      	ldr	r4, [pc, #832]	; (80020e4 <__aeabi_dsub+0x368>)
 8001da4:	006e      	lsls	r6, r5, #1
 8001da6:	4691      	mov	r9, r2
 8001da8:	b083      	sub	sp, #12
 8001daa:	004a      	lsls	r2, r1, #1
 8001dac:	00c0      	lsls	r0, r0, #3
 8001dae:	4698      	mov	r8, r3
 8001db0:	46a2      	mov	sl, r4
 8001db2:	0d76      	lsrs	r6, r6, #21
 8001db4:	0fed      	lsrs	r5, r5, #31
 8001db6:	0d52      	lsrs	r2, r2, #21
 8001db8:	0fc9      	lsrs	r1, r1, #31
 8001dba:	9001      	str	r0, [sp, #4]
 8001dbc:	42a2      	cmp	r2, r4
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x46>
 8001dc0:	e0b9      	b.n	8001f36 <__aeabi_dsub+0x1ba>
 8001dc2:	2401      	movs	r4, #1
 8001dc4:	4061      	eors	r1, r4
 8001dc6:	468b      	mov	fp, r1
 8001dc8:	428d      	cmp	r5, r1
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0x52>
 8001dcc:	e08d      	b.n	8001eea <__aeabi_dsub+0x16e>
 8001dce:	1ab4      	subs	r4, r6, r2
 8001dd0:	46a4      	mov	ip, r4
 8001dd2:	2c00      	cmp	r4, #0
 8001dd4:	dc00      	bgt.n	8001dd8 <__aeabi_dsub+0x5c>
 8001dd6:	e0b7      	b.n	8001f48 <__aeabi_dsub+0x1cc>
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x62>
 8001ddc:	e0cb      	b.n	8001f76 <__aeabi_dsub+0x1fa>
 8001dde:	4ac1      	ldr	r2, [pc, #772]	; (80020e4 <__aeabi_dsub+0x368>)
 8001de0:	4296      	cmp	r6, r2
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x6a>
 8001de4:	e186      	b.n	80020f4 <__aeabi_dsub+0x378>
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	0412      	lsls	r2, r2, #16
 8001dea:	4317      	orrs	r7, r2
 8001dec:	4662      	mov	r2, ip
 8001dee:	2a38      	cmp	r2, #56	; 0x38
 8001df0:	dd00      	ble.n	8001df4 <__aeabi_dsub+0x78>
 8001df2:	e1a4      	b.n	800213e <__aeabi_dsub+0x3c2>
 8001df4:	2a1f      	cmp	r2, #31
 8001df6:	dd00      	ble.n	8001dfa <__aeabi_dsub+0x7e>
 8001df8:	e21d      	b.n	8002236 <__aeabi_dsub+0x4ba>
 8001dfa:	4661      	mov	r1, ip
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	003c      	movs	r4, r7
 8001e00:	1a52      	subs	r2, r2, r1
 8001e02:	0001      	movs	r1, r0
 8001e04:	4090      	lsls	r0, r2
 8001e06:	4094      	lsls	r4, r2
 8001e08:	1e42      	subs	r2, r0, #1
 8001e0a:	4190      	sbcs	r0, r2
 8001e0c:	4662      	mov	r2, ip
 8001e0e:	46a0      	mov	r8, r4
 8001e10:	4664      	mov	r4, ip
 8001e12:	40d7      	lsrs	r7, r2
 8001e14:	464a      	mov	r2, r9
 8001e16:	40e1      	lsrs	r1, r4
 8001e18:	4644      	mov	r4, r8
 8001e1a:	1bd2      	subs	r2, r2, r7
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	430c      	orrs	r4, r1
 8001e20:	4304      	orrs	r4, r0
 8001e22:	1b1c      	subs	r4, r3, r4
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	4192      	sbcs	r2, r2
 8001e28:	464b      	mov	r3, r9
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	469a      	mov	sl, r3
 8001e30:	4653      	mov	r3, sl
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	d400      	bmi.n	8001e38 <__aeabi_dsub+0xbc>
 8001e36:	e12b      	b.n	8002090 <__aeabi_dsub+0x314>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	025a      	lsls	r2, r3, #9
 8001e3c:	0a53      	lsrs	r3, r2, #9
 8001e3e:	469a      	mov	sl, r3
 8001e40:	4653      	mov	r3, sl
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0xcc>
 8001e46:	e166      	b.n	8002116 <__aeabi_dsub+0x39a>
 8001e48:	4650      	mov	r0, sl
 8001e4a:	f000 fc0b 	bl	8002664 <__clzsi2>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	3b08      	subs	r3, #8
 8001e52:	2220      	movs	r2, #32
 8001e54:	0020      	movs	r0, r4
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	4651      	mov	r1, sl
 8001e5a:	40d0      	lsrs	r0, r2
 8001e5c:	4099      	lsls	r1, r3
 8001e5e:	0002      	movs	r2, r0
 8001e60:	409c      	lsls	r4, r3
 8001e62:	430a      	orrs	r2, r1
 8001e64:	429e      	cmp	r6, r3
 8001e66:	dd00      	ble.n	8001e6a <__aeabi_dsub+0xee>
 8001e68:	e164      	b.n	8002134 <__aeabi_dsub+0x3b8>
 8001e6a:	1b9b      	subs	r3, r3, r6
 8001e6c:	1c59      	adds	r1, r3, #1
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0xf8>
 8001e72:	e0fe      	b.n	8002072 <__aeabi_dsub+0x2f6>
 8001e74:	2320      	movs	r3, #32
 8001e76:	0010      	movs	r0, r2
 8001e78:	0026      	movs	r6, r4
 8001e7a:	1a5b      	subs	r3, r3, r1
 8001e7c:	409c      	lsls	r4, r3
 8001e7e:	4098      	lsls	r0, r3
 8001e80:	40ce      	lsrs	r6, r1
 8001e82:	40ca      	lsrs	r2, r1
 8001e84:	1e63      	subs	r3, r4, #1
 8001e86:	419c      	sbcs	r4, r3
 8001e88:	4330      	orrs	r0, r6
 8001e8a:	4692      	mov	sl, r2
 8001e8c:	2600      	movs	r6, #0
 8001e8e:	4304      	orrs	r4, r0
 8001e90:	0763      	lsls	r3, r4, #29
 8001e92:	d009      	beq.n	8001ea8 <__aeabi_dsub+0x12c>
 8001e94:	230f      	movs	r3, #15
 8001e96:	4023      	ands	r3, r4
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d005      	beq.n	8001ea8 <__aeabi_dsub+0x12c>
 8001e9c:	1d23      	adds	r3, r4, #4
 8001e9e:	42a3      	cmp	r3, r4
 8001ea0:	41a4      	sbcs	r4, r4
 8001ea2:	4264      	negs	r4, r4
 8001ea4:	44a2      	add	sl, r4
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	4653      	mov	r3, sl
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	d400      	bmi.n	8001eb0 <__aeabi_dsub+0x134>
 8001eae:	e0f2      	b.n	8002096 <__aeabi_dsub+0x31a>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <__aeabi_dsub+0x368>)
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	429e      	cmp	r6, r3
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x13e>
 8001eb8:	e10f      	b.n	80020da <__aeabi_dsub+0x35e>
 8001eba:	4653      	mov	r3, sl
 8001ebc:	498a      	ldr	r1, [pc, #552]	; (80020e8 <__aeabi_dsub+0x36c>)
 8001ebe:	08e4      	lsrs	r4, r4, #3
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	075b      	lsls	r3, r3, #29
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	0572      	lsls	r2, r6, #21
 8001eca:	024c      	lsls	r4, r1, #9
 8001ecc:	0b24      	lsrs	r4, r4, #12
 8001ece:	0d52      	lsrs	r2, r2, #21
 8001ed0:	0512      	lsls	r2, r2, #20
 8001ed2:	4322      	orrs	r2, r4
 8001ed4:	07ed      	lsls	r5, r5, #31
 8001ed6:	432a      	orrs	r2, r5
 8001ed8:	0018      	movs	r0, r3
 8001eda:	0011      	movs	r1, r2
 8001edc:	b003      	add	sp, #12
 8001ede:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee0:	46bb      	mov	fp, r7
 8001ee2:	46b2      	mov	sl, r6
 8001ee4:	46a9      	mov	r9, r5
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eea:	1ab4      	subs	r4, r6, r2
 8001eec:	46a4      	mov	ip, r4
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	dd59      	ble.n	8001fa6 <__aeabi_dsub+0x22a>
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x17c>
 8001ef6:	e0b0      	b.n	800205a <__aeabi_dsub+0x2de>
 8001ef8:	4556      	cmp	r6, sl
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x182>
 8001efc:	e0fa      	b.n	80020f4 <__aeabi_dsub+0x378>
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0412      	lsls	r2, r2, #16
 8001f02:	4317      	orrs	r7, r2
 8001f04:	4662      	mov	r2, ip
 8001f06:	2a38      	cmp	r2, #56	; 0x38
 8001f08:	dd00      	ble.n	8001f0c <__aeabi_dsub+0x190>
 8001f0a:	e0d4      	b.n	80020b6 <__aeabi_dsub+0x33a>
 8001f0c:	2a1f      	cmp	r2, #31
 8001f0e:	dc00      	bgt.n	8001f12 <__aeabi_dsub+0x196>
 8001f10:	e1c0      	b.n	8002294 <__aeabi_dsub+0x518>
 8001f12:	0039      	movs	r1, r7
 8001f14:	3a20      	subs	r2, #32
 8001f16:	40d1      	lsrs	r1, r2
 8001f18:	4662      	mov	r2, ip
 8001f1a:	2a20      	cmp	r2, #32
 8001f1c:	d006      	beq.n	8001f2c <__aeabi_dsub+0x1b0>
 8001f1e:	4664      	mov	r4, ip
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	1b12      	subs	r2, r2, r4
 8001f24:	003c      	movs	r4, r7
 8001f26:	4094      	lsls	r4, r2
 8001f28:	4304      	orrs	r4, r0
 8001f2a:	9401      	str	r4, [sp, #4]
 8001f2c:	9c01      	ldr	r4, [sp, #4]
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	430c      	orrs	r4, r1
 8001f34:	e0c3      	b.n	80020be <__aeabi_dsub+0x342>
 8001f36:	003c      	movs	r4, r7
 8001f38:	4304      	orrs	r4, r0
 8001f3a:	d02b      	beq.n	8001f94 <__aeabi_dsub+0x218>
 8001f3c:	468b      	mov	fp, r1
 8001f3e:	428d      	cmp	r5, r1
 8001f40:	d02e      	beq.n	8001fa0 <__aeabi_dsub+0x224>
 8001f42:	4c6a      	ldr	r4, [pc, #424]	; (80020ec <__aeabi_dsub+0x370>)
 8001f44:	46a4      	mov	ip, r4
 8001f46:	44b4      	add	ip, r6
 8001f48:	4664      	mov	r4, ip
 8001f4a:	2c00      	cmp	r4, #0
 8001f4c:	d05f      	beq.n	800200e <__aeabi_dsub+0x292>
 8001f4e:	1b94      	subs	r4, r2, r6
 8001f50:	46a4      	mov	ip, r4
 8001f52:	2e00      	cmp	r6, #0
 8001f54:	d000      	beq.n	8001f58 <__aeabi_dsub+0x1dc>
 8001f56:	e120      	b.n	800219a <__aeabi_dsub+0x41e>
 8001f58:	464c      	mov	r4, r9
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x1e4>
 8001f5e:	e1c7      	b.n	80022f0 <__aeabi_dsub+0x574>
 8001f60:	4661      	mov	r1, ip
 8001f62:	1e4c      	subs	r4, r1, #1
 8001f64:	2901      	cmp	r1, #1
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x1ee>
 8001f68:	e223      	b.n	80023b2 <__aeabi_dsub+0x636>
 8001f6a:	4d5e      	ldr	r5, [pc, #376]	; (80020e4 <__aeabi_dsub+0x368>)
 8001f6c:	45ac      	cmp	ip, r5
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x1f6>
 8001f70:	e1d8      	b.n	8002324 <__aeabi_dsub+0x5a8>
 8001f72:	46a4      	mov	ip, r4
 8001f74:	e11a      	b.n	80021ac <__aeabi_dsub+0x430>
 8001f76:	003a      	movs	r2, r7
 8001f78:	4302      	orrs	r2, r0
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x202>
 8001f7c:	e0e4      	b.n	8002148 <__aeabi_dsub+0x3cc>
 8001f7e:	0022      	movs	r2, r4
 8001f80:	3a01      	subs	r2, #1
 8001f82:	2c01      	cmp	r4, #1
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x20c>
 8001f86:	e1c3      	b.n	8002310 <__aeabi_dsub+0x594>
 8001f88:	4956      	ldr	r1, [pc, #344]	; (80020e4 <__aeabi_dsub+0x368>)
 8001f8a:	428c      	cmp	r4, r1
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x214>
 8001f8e:	e0b1      	b.n	80020f4 <__aeabi_dsub+0x378>
 8001f90:	4694      	mov	ip, r2
 8001f92:	e72b      	b.n	8001dec <__aeabi_dsub+0x70>
 8001f94:	2401      	movs	r4, #1
 8001f96:	4061      	eors	r1, r4
 8001f98:	468b      	mov	fp, r1
 8001f9a:	428d      	cmp	r5, r1
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x224>
 8001f9e:	e716      	b.n	8001dce <__aeabi_dsub+0x52>
 8001fa0:	4952      	ldr	r1, [pc, #328]	; (80020ec <__aeabi_dsub+0x370>)
 8001fa2:	468c      	mov	ip, r1
 8001fa4:	44b4      	add	ip, r6
 8001fa6:	4664      	mov	r4, ip
 8001fa8:	2c00      	cmp	r4, #0
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x232>
 8001fac:	e0d3      	b.n	8002156 <__aeabi_dsub+0x3da>
 8001fae:	1b91      	subs	r1, r2, r6
 8001fb0:	468c      	mov	ip, r1
 8001fb2:	2e00      	cmp	r6, #0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x23c>
 8001fb6:	e15e      	b.n	8002276 <__aeabi_dsub+0x4fa>
 8001fb8:	494a      	ldr	r1, [pc, #296]	; (80020e4 <__aeabi_dsub+0x368>)
 8001fba:	428a      	cmp	r2, r1
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x244>
 8001fbe:	e1be      	b.n	800233e <__aeabi_dsub+0x5c2>
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	464c      	mov	r4, r9
 8001fc4:	0409      	lsls	r1, r1, #16
 8001fc6:	430c      	orrs	r4, r1
 8001fc8:	46a1      	mov	r9, r4
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2938      	cmp	r1, #56	; 0x38
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x256>
 8001fd0:	e1ba      	b.n	8002348 <__aeabi_dsub+0x5cc>
 8001fd2:	291f      	cmp	r1, #31
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x25c>
 8001fd6:	e227      	b.n	8002428 <__aeabi_dsub+0x6ac>
 8001fd8:	2420      	movs	r4, #32
 8001fda:	1a64      	subs	r4, r4, r1
 8001fdc:	4649      	mov	r1, r9
 8001fde:	40a1      	lsls	r1, r4
 8001fe0:	001e      	movs	r6, r3
 8001fe2:	4688      	mov	r8, r1
 8001fe4:	4661      	mov	r1, ip
 8001fe6:	40a3      	lsls	r3, r4
 8001fe8:	40ce      	lsrs	r6, r1
 8001fea:	4641      	mov	r1, r8
 8001fec:	1e5c      	subs	r4, r3, #1
 8001fee:	41a3      	sbcs	r3, r4
 8001ff0:	4331      	orrs	r1, r6
 8001ff2:	4319      	orrs	r1, r3
 8001ff4:	000c      	movs	r4, r1
 8001ff6:	4663      	mov	r3, ip
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	40d9      	lsrs	r1, r3
 8001ffc:	187f      	adds	r7, r7, r1
 8001ffe:	1824      	adds	r4, r4, r0
 8002000:	4284      	cmp	r4, r0
 8002002:	419b      	sbcs	r3, r3
 8002004:	425b      	negs	r3, r3
 8002006:	469a      	mov	sl, r3
 8002008:	0016      	movs	r6, r2
 800200a:	44ba      	add	sl, r7
 800200c:	e05d      	b.n	80020ca <__aeabi_dsub+0x34e>
 800200e:	4c38      	ldr	r4, [pc, #224]	; (80020f0 <__aeabi_dsub+0x374>)
 8002010:	1c72      	adds	r2, r6, #1
 8002012:	4222      	tst	r2, r4
 8002014:	d000      	beq.n	8002018 <__aeabi_dsub+0x29c>
 8002016:	e0df      	b.n	80021d8 <__aeabi_dsub+0x45c>
 8002018:	464a      	mov	r2, r9
 800201a:	431a      	orrs	r2, r3
 800201c:	2e00      	cmp	r6, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dsub+0x2a6>
 8002020:	e15c      	b.n	80022dc <__aeabi_dsub+0x560>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x2ac>
 8002026:	e1cf      	b.n	80023c8 <__aeabi_dsub+0x64c>
 8002028:	003a      	movs	r2, r7
 800202a:	4302      	orrs	r2, r0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x2b4>
 800202e:	e17f      	b.n	8002330 <__aeabi_dsub+0x5b4>
 8002030:	1a1c      	subs	r4, r3, r0
 8002032:	464a      	mov	r2, r9
 8002034:	42a3      	cmp	r3, r4
 8002036:	4189      	sbcs	r1, r1
 8002038:	1bd2      	subs	r2, r2, r7
 800203a:	4249      	negs	r1, r1
 800203c:	1a52      	subs	r2, r2, r1
 800203e:	4692      	mov	sl, r2
 8002040:	0212      	lsls	r2, r2, #8
 8002042:	d400      	bmi.n	8002046 <__aeabi_dsub+0x2ca>
 8002044:	e20a      	b.n	800245c <__aeabi_dsub+0x6e0>
 8002046:	1ac4      	subs	r4, r0, r3
 8002048:	42a0      	cmp	r0, r4
 800204a:	4180      	sbcs	r0, r0
 800204c:	464b      	mov	r3, r9
 800204e:	4240      	negs	r0, r0
 8002050:	1aff      	subs	r7, r7, r3
 8002052:	1a3b      	subs	r3, r7, r0
 8002054:	469a      	mov	sl, r3
 8002056:	465d      	mov	r5, fp
 8002058:	e71a      	b.n	8001e90 <__aeabi_dsub+0x114>
 800205a:	003a      	movs	r2, r7
 800205c:	4302      	orrs	r2, r0
 800205e:	d073      	beq.n	8002148 <__aeabi_dsub+0x3cc>
 8002060:	0022      	movs	r2, r4
 8002062:	3a01      	subs	r2, #1
 8002064:	2c01      	cmp	r4, #1
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x2ee>
 8002068:	e0cb      	b.n	8002202 <__aeabi_dsub+0x486>
 800206a:	4554      	cmp	r4, sl
 800206c:	d042      	beq.n	80020f4 <__aeabi_dsub+0x378>
 800206e:	4694      	mov	ip, r2
 8002070:	e748      	b.n	8001f04 <__aeabi_dsub+0x188>
 8002072:	0010      	movs	r0, r2
 8002074:	3b1f      	subs	r3, #31
 8002076:	40d8      	lsrs	r0, r3
 8002078:	2920      	cmp	r1, #32
 800207a:	d003      	beq.n	8002084 <__aeabi_dsub+0x308>
 800207c:	2340      	movs	r3, #64	; 0x40
 800207e:	1a5b      	subs	r3, r3, r1
 8002080:	409a      	lsls	r2, r3
 8002082:	4314      	orrs	r4, r2
 8002084:	1e63      	subs	r3, r4, #1
 8002086:	419c      	sbcs	r4, r3
 8002088:	2300      	movs	r3, #0
 800208a:	2600      	movs	r6, #0
 800208c:	469a      	mov	sl, r3
 800208e:	4304      	orrs	r4, r0
 8002090:	0763      	lsls	r3, r4, #29
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x31a>
 8002094:	e6fe      	b.n	8001e94 <__aeabi_dsub+0x118>
 8002096:	4652      	mov	r2, sl
 8002098:	08e3      	lsrs	r3, r4, #3
 800209a:	0752      	lsls	r2, r2, #29
 800209c:	4313      	orrs	r3, r2
 800209e:	4652      	mov	r2, sl
 80020a0:	46b4      	mov	ip, r6
 80020a2:	08d2      	lsrs	r2, r2, #3
 80020a4:	490f      	ldr	r1, [pc, #60]	; (80020e4 <__aeabi_dsub+0x368>)
 80020a6:	458c      	cmp	ip, r1
 80020a8:	d02a      	beq.n	8002100 <__aeabi_dsub+0x384>
 80020aa:	0312      	lsls	r2, r2, #12
 80020ac:	0b14      	lsrs	r4, r2, #12
 80020ae:	4662      	mov	r2, ip
 80020b0:	0552      	lsls	r2, r2, #21
 80020b2:	0d52      	lsrs	r2, r2, #21
 80020b4:	e70c      	b.n	8001ed0 <__aeabi_dsub+0x154>
 80020b6:	003c      	movs	r4, r7
 80020b8:	4304      	orrs	r4, r0
 80020ba:	1e62      	subs	r2, r4, #1
 80020bc:	4194      	sbcs	r4, r2
 80020be:	18e4      	adds	r4, r4, r3
 80020c0:	429c      	cmp	r4, r3
 80020c2:	4192      	sbcs	r2, r2
 80020c4:	4252      	negs	r2, r2
 80020c6:	444a      	add	r2, r9
 80020c8:	4692      	mov	sl, r2
 80020ca:	4653      	mov	r3, sl
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	d5df      	bpl.n	8002090 <__aeabi_dsub+0x314>
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__aeabi_dsub+0x368>)
 80020d2:	3601      	adds	r6, #1
 80020d4:	429e      	cmp	r6, r3
 80020d6:	d000      	beq.n	80020da <__aeabi_dsub+0x35e>
 80020d8:	e0a0      	b.n	800221c <__aeabi_dsub+0x4a0>
 80020da:	0032      	movs	r2, r6
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	e6f6      	b.n	8001ed0 <__aeabi_dsub+0x154>
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	000007ff 	.word	0x000007ff
 80020e8:	ff7fffff 	.word	0xff7fffff
 80020ec:	fffff801 	.word	0xfffff801
 80020f0:	000007fe 	.word	0x000007fe
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	464a      	mov	r2, r9
 80020f8:	0752      	lsls	r2, r2, #29
 80020fa:	4313      	orrs	r3, r2
 80020fc:	464a      	mov	r2, r9
 80020fe:	08d2      	lsrs	r2, r2, #3
 8002100:	0019      	movs	r1, r3
 8002102:	4311      	orrs	r1, r2
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x38c>
 8002106:	e1b5      	b.n	8002474 <__aeabi_dsub+0x6f8>
 8002108:	2480      	movs	r4, #128	; 0x80
 800210a:	0324      	lsls	r4, r4, #12
 800210c:	4314      	orrs	r4, r2
 800210e:	0324      	lsls	r4, r4, #12
 8002110:	4ad5      	ldr	r2, [pc, #852]	; (8002468 <__aeabi_dsub+0x6ec>)
 8002112:	0b24      	lsrs	r4, r4, #12
 8002114:	e6dc      	b.n	8001ed0 <__aeabi_dsub+0x154>
 8002116:	0020      	movs	r0, r4
 8002118:	f000 faa4 	bl	8002664 <__clzsi2>
 800211c:	0003      	movs	r3, r0
 800211e:	3318      	adds	r3, #24
 8002120:	2b1f      	cmp	r3, #31
 8002122:	dc00      	bgt.n	8002126 <__aeabi_dsub+0x3aa>
 8002124:	e695      	b.n	8001e52 <__aeabi_dsub+0xd6>
 8002126:	0022      	movs	r2, r4
 8002128:	3808      	subs	r0, #8
 800212a:	4082      	lsls	r2, r0
 800212c:	2400      	movs	r4, #0
 800212e:	429e      	cmp	r6, r3
 8002130:	dc00      	bgt.n	8002134 <__aeabi_dsub+0x3b8>
 8002132:	e69a      	b.n	8001e6a <__aeabi_dsub+0xee>
 8002134:	1af6      	subs	r6, r6, r3
 8002136:	4bcd      	ldr	r3, [pc, #820]	; (800246c <__aeabi_dsub+0x6f0>)
 8002138:	401a      	ands	r2, r3
 800213a:	4692      	mov	sl, r2
 800213c:	e6a8      	b.n	8001e90 <__aeabi_dsub+0x114>
 800213e:	003c      	movs	r4, r7
 8002140:	4304      	orrs	r4, r0
 8002142:	1e62      	subs	r2, r4, #1
 8002144:	4194      	sbcs	r4, r2
 8002146:	e66c      	b.n	8001e22 <__aeabi_dsub+0xa6>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e7a6      	b.n	80020a4 <__aeabi_dsub+0x328>
 8002156:	4cc6      	ldr	r4, [pc, #792]	; (8002470 <__aeabi_dsub+0x6f4>)
 8002158:	1c72      	adds	r2, r6, #1
 800215a:	4222      	tst	r2, r4
 800215c:	d000      	beq.n	8002160 <__aeabi_dsub+0x3e4>
 800215e:	e0ac      	b.n	80022ba <__aeabi_dsub+0x53e>
 8002160:	464a      	mov	r2, r9
 8002162:	431a      	orrs	r2, r3
 8002164:	2e00      	cmp	r6, #0
 8002166:	d000      	beq.n	800216a <__aeabi_dsub+0x3ee>
 8002168:	e105      	b.n	8002376 <__aeabi_dsub+0x5fa>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x3f4>
 800216e:	e156      	b.n	800241e <__aeabi_dsub+0x6a2>
 8002170:	003a      	movs	r2, r7
 8002172:	4302      	orrs	r2, r0
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x3fc>
 8002176:	e0db      	b.n	8002330 <__aeabi_dsub+0x5b4>
 8002178:	181c      	adds	r4, r3, r0
 800217a:	429c      	cmp	r4, r3
 800217c:	419b      	sbcs	r3, r3
 800217e:	444f      	add	r7, r9
 8002180:	46ba      	mov	sl, r7
 8002182:	425b      	negs	r3, r3
 8002184:	449a      	add	sl, r3
 8002186:	4653      	mov	r3, sl
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	d400      	bmi.n	800218e <__aeabi_dsub+0x412>
 800218c:	e780      	b.n	8002090 <__aeabi_dsub+0x314>
 800218e:	4652      	mov	r2, sl
 8002190:	4bb6      	ldr	r3, [pc, #728]	; (800246c <__aeabi_dsub+0x6f0>)
 8002192:	2601      	movs	r6, #1
 8002194:	401a      	ands	r2, r3
 8002196:	4692      	mov	sl, r2
 8002198:	e77a      	b.n	8002090 <__aeabi_dsub+0x314>
 800219a:	4cb3      	ldr	r4, [pc, #716]	; (8002468 <__aeabi_dsub+0x6ec>)
 800219c:	42a2      	cmp	r2, r4
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x426>
 80021a0:	e0c0      	b.n	8002324 <__aeabi_dsub+0x5a8>
 80021a2:	2480      	movs	r4, #128	; 0x80
 80021a4:	464d      	mov	r5, r9
 80021a6:	0424      	lsls	r4, r4, #16
 80021a8:	4325      	orrs	r5, r4
 80021aa:	46a9      	mov	r9, r5
 80021ac:	4664      	mov	r4, ip
 80021ae:	2c38      	cmp	r4, #56	; 0x38
 80021b0:	dc53      	bgt.n	800225a <__aeabi_dsub+0x4de>
 80021b2:	4661      	mov	r1, ip
 80021b4:	2c1f      	cmp	r4, #31
 80021b6:	dd00      	ble.n	80021ba <__aeabi_dsub+0x43e>
 80021b8:	e0cd      	b.n	8002356 <__aeabi_dsub+0x5da>
 80021ba:	2520      	movs	r5, #32
 80021bc:	001e      	movs	r6, r3
 80021be:	1b2d      	subs	r5, r5, r4
 80021c0:	464c      	mov	r4, r9
 80021c2:	40ab      	lsls	r3, r5
 80021c4:	40ac      	lsls	r4, r5
 80021c6:	40ce      	lsrs	r6, r1
 80021c8:	1e5d      	subs	r5, r3, #1
 80021ca:	41ab      	sbcs	r3, r5
 80021cc:	4334      	orrs	r4, r6
 80021ce:	4323      	orrs	r3, r4
 80021d0:	464c      	mov	r4, r9
 80021d2:	40cc      	lsrs	r4, r1
 80021d4:	1b3f      	subs	r7, r7, r4
 80021d6:	e045      	b.n	8002264 <__aeabi_dsub+0x4e8>
 80021d8:	464a      	mov	r2, r9
 80021da:	1a1c      	subs	r4, r3, r0
 80021dc:	1bd1      	subs	r1, r2, r7
 80021de:	42a3      	cmp	r3, r4
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	4252      	negs	r2, r2
 80021e4:	4692      	mov	sl, r2
 80021e6:	000a      	movs	r2, r1
 80021e8:	4651      	mov	r1, sl
 80021ea:	1a52      	subs	r2, r2, r1
 80021ec:	4692      	mov	sl, r2
 80021ee:	0212      	lsls	r2, r2, #8
 80021f0:	d500      	bpl.n	80021f4 <__aeabi_dsub+0x478>
 80021f2:	e083      	b.n	80022fc <__aeabi_dsub+0x580>
 80021f4:	4653      	mov	r3, sl
 80021f6:	4323      	orrs	r3, r4
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x480>
 80021fa:	e621      	b.n	8001e40 <__aeabi_dsub+0xc4>
 80021fc:	2200      	movs	r2, #0
 80021fe:	2500      	movs	r5, #0
 8002200:	e753      	b.n	80020aa <__aeabi_dsub+0x32e>
 8002202:	181c      	adds	r4, r3, r0
 8002204:	429c      	cmp	r4, r3
 8002206:	419b      	sbcs	r3, r3
 8002208:	444f      	add	r7, r9
 800220a:	46ba      	mov	sl, r7
 800220c:	425b      	negs	r3, r3
 800220e:	449a      	add	sl, r3
 8002210:	4653      	mov	r3, sl
 8002212:	2601      	movs	r6, #1
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	d400      	bmi.n	800221a <__aeabi_dsub+0x49e>
 8002218:	e73a      	b.n	8002090 <__aeabi_dsub+0x314>
 800221a:	2602      	movs	r6, #2
 800221c:	4652      	mov	r2, sl
 800221e:	4b93      	ldr	r3, [pc, #588]	; (800246c <__aeabi_dsub+0x6f0>)
 8002220:	2101      	movs	r1, #1
 8002222:	401a      	ands	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	4021      	ands	r1, r4
 8002228:	0862      	lsrs	r2, r4, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	07dc      	lsls	r4, r3, #31
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	469a      	mov	sl, r3
 8002232:	4314      	orrs	r4, r2
 8002234:	e62c      	b.n	8001e90 <__aeabi_dsub+0x114>
 8002236:	0039      	movs	r1, r7
 8002238:	3a20      	subs	r2, #32
 800223a:	40d1      	lsrs	r1, r2
 800223c:	4662      	mov	r2, ip
 800223e:	2a20      	cmp	r2, #32
 8002240:	d006      	beq.n	8002250 <__aeabi_dsub+0x4d4>
 8002242:	4664      	mov	r4, ip
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	1b12      	subs	r2, r2, r4
 8002248:	003c      	movs	r4, r7
 800224a:	4094      	lsls	r4, r2
 800224c:	4304      	orrs	r4, r0
 800224e:	9401      	str	r4, [sp, #4]
 8002250:	9c01      	ldr	r4, [sp, #4]
 8002252:	1e62      	subs	r2, r4, #1
 8002254:	4194      	sbcs	r4, r2
 8002256:	430c      	orrs	r4, r1
 8002258:	e5e3      	b.n	8001e22 <__aeabi_dsub+0xa6>
 800225a:	4649      	mov	r1, r9
 800225c:	4319      	orrs	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	1e5c      	subs	r4, r3, #1
 8002262:	41a3      	sbcs	r3, r4
 8002264:	1ac4      	subs	r4, r0, r3
 8002266:	42a0      	cmp	r0, r4
 8002268:	419b      	sbcs	r3, r3
 800226a:	425b      	negs	r3, r3
 800226c:	1afb      	subs	r3, r7, r3
 800226e:	469a      	mov	sl, r3
 8002270:	465d      	mov	r5, fp
 8002272:	0016      	movs	r6, r2
 8002274:	e5dc      	b.n	8001e30 <__aeabi_dsub+0xb4>
 8002276:	4649      	mov	r1, r9
 8002278:	4319      	orrs	r1, r3
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x502>
 800227c:	e0ae      	b.n	80023dc <__aeabi_dsub+0x660>
 800227e:	4661      	mov	r1, ip
 8002280:	4664      	mov	r4, ip
 8002282:	3901      	subs	r1, #1
 8002284:	2c01      	cmp	r4, #1
 8002286:	d100      	bne.n	800228a <__aeabi_dsub+0x50e>
 8002288:	e0e0      	b.n	800244c <__aeabi_dsub+0x6d0>
 800228a:	4c77      	ldr	r4, [pc, #476]	; (8002468 <__aeabi_dsub+0x6ec>)
 800228c:	45a4      	cmp	ip, r4
 800228e:	d056      	beq.n	800233e <__aeabi_dsub+0x5c2>
 8002290:	468c      	mov	ip, r1
 8002292:	e69a      	b.n	8001fca <__aeabi_dsub+0x24e>
 8002294:	4661      	mov	r1, ip
 8002296:	2220      	movs	r2, #32
 8002298:	003c      	movs	r4, r7
 800229a:	1a52      	subs	r2, r2, r1
 800229c:	4094      	lsls	r4, r2
 800229e:	0001      	movs	r1, r0
 80022a0:	4090      	lsls	r0, r2
 80022a2:	46a0      	mov	r8, r4
 80022a4:	4664      	mov	r4, ip
 80022a6:	1e42      	subs	r2, r0, #1
 80022a8:	4190      	sbcs	r0, r2
 80022aa:	4662      	mov	r2, ip
 80022ac:	40e1      	lsrs	r1, r4
 80022ae:	4644      	mov	r4, r8
 80022b0:	40d7      	lsrs	r7, r2
 80022b2:	430c      	orrs	r4, r1
 80022b4:	4304      	orrs	r4, r0
 80022b6:	44b9      	add	r9, r7
 80022b8:	e701      	b.n	80020be <__aeabi_dsub+0x342>
 80022ba:	496b      	ldr	r1, [pc, #428]	; (8002468 <__aeabi_dsub+0x6ec>)
 80022bc:	428a      	cmp	r2, r1
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x546>
 80022c0:	e70c      	b.n	80020dc <__aeabi_dsub+0x360>
 80022c2:	1818      	adds	r0, r3, r0
 80022c4:	4298      	cmp	r0, r3
 80022c6:	419b      	sbcs	r3, r3
 80022c8:	444f      	add	r7, r9
 80022ca:	425b      	negs	r3, r3
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	07dc      	lsls	r4, r3, #31
 80022d0:	0840      	lsrs	r0, r0, #1
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	469a      	mov	sl, r3
 80022d6:	0016      	movs	r6, r2
 80022d8:	4304      	orrs	r4, r0
 80022da:	e6d9      	b.n	8002090 <__aeabi_dsub+0x314>
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d000      	beq.n	80022e2 <__aeabi_dsub+0x566>
 80022e0:	e081      	b.n	80023e6 <__aeabi_dsub+0x66a>
 80022e2:	003b      	movs	r3, r7
 80022e4:	4303      	orrs	r3, r0
 80022e6:	d11d      	bne.n	8002324 <__aeabi_dsub+0x5a8>
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	2500      	movs	r5, #0
 80022ec:	0312      	lsls	r2, r2, #12
 80022ee:	e70b      	b.n	8002108 <__aeabi_dsub+0x38c>
 80022f0:	08c0      	lsrs	r0, r0, #3
 80022f2:	077b      	lsls	r3, r7, #29
 80022f4:	465d      	mov	r5, fp
 80022f6:	4303      	orrs	r3, r0
 80022f8:	08fa      	lsrs	r2, r7, #3
 80022fa:	e6d3      	b.n	80020a4 <__aeabi_dsub+0x328>
 80022fc:	1ac4      	subs	r4, r0, r3
 80022fe:	42a0      	cmp	r0, r4
 8002300:	4180      	sbcs	r0, r0
 8002302:	464b      	mov	r3, r9
 8002304:	4240      	negs	r0, r0
 8002306:	1aff      	subs	r7, r7, r3
 8002308:	1a3b      	subs	r3, r7, r0
 800230a:	469a      	mov	sl, r3
 800230c:	465d      	mov	r5, fp
 800230e:	e597      	b.n	8001e40 <__aeabi_dsub+0xc4>
 8002310:	1a1c      	subs	r4, r3, r0
 8002312:	464a      	mov	r2, r9
 8002314:	42a3      	cmp	r3, r4
 8002316:	419b      	sbcs	r3, r3
 8002318:	1bd7      	subs	r7, r2, r7
 800231a:	425b      	negs	r3, r3
 800231c:	1afb      	subs	r3, r7, r3
 800231e:	469a      	mov	sl, r3
 8002320:	2601      	movs	r6, #1
 8002322:	e585      	b.n	8001e30 <__aeabi_dsub+0xb4>
 8002324:	08c0      	lsrs	r0, r0, #3
 8002326:	077b      	lsls	r3, r7, #29
 8002328:	465d      	mov	r5, fp
 800232a:	4303      	orrs	r3, r0
 800232c:	08fa      	lsrs	r2, r7, #3
 800232e:	e6e7      	b.n	8002100 <__aeabi_dsub+0x384>
 8002330:	464a      	mov	r2, r9
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	0752      	lsls	r2, r2, #29
 8002336:	4313      	orrs	r3, r2
 8002338:	464a      	mov	r2, r9
 800233a:	08d2      	lsrs	r2, r2, #3
 800233c:	e6b5      	b.n	80020aa <__aeabi_dsub+0x32e>
 800233e:	08c0      	lsrs	r0, r0, #3
 8002340:	077b      	lsls	r3, r7, #29
 8002342:	4303      	orrs	r3, r0
 8002344:	08fa      	lsrs	r2, r7, #3
 8002346:	e6db      	b.n	8002100 <__aeabi_dsub+0x384>
 8002348:	4649      	mov	r1, r9
 800234a:	4319      	orrs	r1, r3
 800234c:	000b      	movs	r3, r1
 800234e:	1e59      	subs	r1, r3, #1
 8002350:	418b      	sbcs	r3, r1
 8002352:	001c      	movs	r4, r3
 8002354:	e653      	b.n	8001ffe <__aeabi_dsub+0x282>
 8002356:	464d      	mov	r5, r9
 8002358:	3c20      	subs	r4, #32
 800235a:	40e5      	lsrs	r5, r4
 800235c:	2920      	cmp	r1, #32
 800235e:	d005      	beq.n	800236c <__aeabi_dsub+0x5f0>
 8002360:	2440      	movs	r4, #64	; 0x40
 8002362:	1a64      	subs	r4, r4, r1
 8002364:	4649      	mov	r1, r9
 8002366:	40a1      	lsls	r1, r4
 8002368:	430b      	orrs	r3, r1
 800236a:	4698      	mov	r8, r3
 800236c:	4643      	mov	r3, r8
 800236e:	1e5c      	subs	r4, r3, #1
 8002370:	41a3      	sbcs	r3, r4
 8002372:	432b      	orrs	r3, r5
 8002374:	e776      	b.n	8002264 <__aeabi_dsub+0x4e8>
 8002376:	2a00      	cmp	r2, #0
 8002378:	d0e1      	beq.n	800233e <__aeabi_dsub+0x5c2>
 800237a:	003a      	movs	r2, r7
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	4302      	orrs	r2, r0
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x608>
 8002382:	e6b8      	b.n	80020f6 <__aeabi_dsub+0x37a>
 8002384:	464a      	mov	r2, r9
 8002386:	0752      	lsls	r2, r2, #29
 8002388:	2480      	movs	r4, #128	; 0x80
 800238a:	4313      	orrs	r3, r2
 800238c:	464a      	mov	r2, r9
 800238e:	0324      	lsls	r4, r4, #12
 8002390:	08d2      	lsrs	r2, r2, #3
 8002392:	4222      	tst	r2, r4
 8002394:	d007      	beq.n	80023a6 <__aeabi_dsub+0x62a>
 8002396:	08fe      	lsrs	r6, r7, #3
 8002398:	4226      	tst	r6, r4
 800239a:	d104      	bne.n	80023a6 <__aeabi_dsub+0x62a>
 800239c:	465d      	mov	r5, fp
 800239e:	0032      	movs	r2, r6
 80023a0:	08c3      	lsrs	r3, r0, #3
 80023a2:	077f      	lsls	r7, r7, #29
 80023a4:	433b      	orrs	r3, r7
 80023a6:	0f59      	lsrs	r1, r3, #29
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	0749      	lsls	r1, r1, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	430b      	orrs	r3, r1
 80023b0:	e6a6      	b.n	8002100 <__aeabi_dsub+0x384>
 80023b2:	1ac4      	subs	r4, r0, r3
 80023b4:	42a0      	cmp	r0, r4
 80023b6:	4180      	sbcs	r0, r0
 80023b8:	464b      	mov	r3, r9
 80023ba:	4240      	negs	r0, r0
 80023bc:	1aff      	subs	r7, r7, r3
 80023be:	1a3b      	subs	r3, r7, r0
 80023c0:	469a      	mov	sl, r3
 80023c2:	465d      	mov	r5, fp
 80023c4:	2601      	movs	r6, #1
 80023c6:	e533      	b.n	8001e30 <__aeabi_dsub+0xb4>
 80023c8:	003b      	movs	r3, r7
 80023ca:	4303      	orrs	r3, r0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x654>
 80023ce:	e715      	b.n	80021fc <__aeabi_dsub+0x480>
 80023d0:	08c0      	lsrs	r0, r0, #3
 80023d2:	077b      	lsls	r3, r7, #29
 80023d4:	465d      	mov	r5, fp
 80023d6:	4303      	orrs	r3, r0
 80023d8:	08fa      	lsrs	r2, r7, #3
 80023da:	e666      	b.n	80020aa <__aeabi_dsub+0x32e>
 80023dc:	08c0      	lsrs	r0, r0, #3
 80023de:	077b      	lsls	r3, r7, #29
 80023e0:	4303      	orrs	r3, r0
 80023e2:	08fa      	lsrs	r2, r7, #3
 80023e4:	e65e      	b.n	80020a4 <__aeabi_dsub+0x328>
 80023e6:	003a      	movs	r2, r7
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	4302      	orrs	r2, r0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x674>
 80023ee:	e682      	b.n	80020f6 <__aeabi_dsub+0x37a>
 80023f0:	464a      	mov	r2, r9
 80023f2:	0752      	lsls	r2, r2, #29
 80023f4:	2480      	movs	r4, #128	; 0x80
 80023f6:	4313      	orrs	r3, r2
 80023f8:	464a      	mov	r2, r9
 80023fa:	0324      	lsls	r4, r4, #12
 80023fc:	08d2      	lsrs	r2, r2, #3
 80023fe:	4222      	tst	r2, r4
 8002400:	d007      	beq.n	8002412 <__aeabi_dsub+0x696>
 8002402:	08fe      	lsrs	r6, r7, #3
 8002404:	4226      	tst	r6, r4
 8002406:	d104      	bne.n	8002412 <__aeabi_dsub+0x696>
 8002408:	465d      	mov	r5, fp
 800240a:	0032      	movs	r2, r6
 800240c:	08c3      	lsrs	r3, r0, #3
 800240e:	077f      	lsls	r7, r7, #29
 8002410:	433b      	orrs	r3, r7
 8002412:	0f59      	lsrs	r1, r3, #29
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	0749      	lsls	r1, r1, #29
 800241a:	430b      	orrs	r3, r1
 800241c:	e670      	b.n	8002100 <__aeabi_dsub+0x384>
 800241e:	08c0      	lsrs	r0, r0, #3
 8002420:	077b      	lsls	r3, r7, #29
 8002422:	4303      	orrs	r3, r0
 8002424:	08fa      	lsrs	r2, r7, #3
 8002426:	e640      	b.n	80020aa <__aeabi_dsub+0x32e>
 8002428:	464c      	mov	r4, r9
 800242a:	3920      	subs	r1, #32
 800242c:	40cc      	lsrs	r4, r1
 800242e:	4661      	mov	r1, ip
 8002430:	2920      	cmp	r1, #32
 8002432:	d006      	beq.n	8002442 <__aeabi_dsub+0x6c6>
 8002434:	4666      	mov	r6, ip
 8002436:	2140      	movs	r1, #64	; 0x40
 8002438:	1b89      	subs	r1, r1, r6
 800243a:	464e      	mov	r6, r9
 800243c:	408e      	lsls	r6, r1
 800243e:	4333      	orrs	r3, r6
 8002440:	4698      	mov	r8, r3
 8002442:	4643      	mov	r3, r8
 8002444:	1e59      	subs	r1, r3, #1
 8002446:	418b      	sbcs	r3, r1
 8002448:	431c      	orrs	r4, r3
 800244a:	e5d8      	b.n	8001ffe <__aeabi_dsub+0x282>
 800244c:	181c      	adds	r4, r3, r0
 800244e:	4284      	cmp	r4, r0
 8002450:	4180      	sbcs	r0, r0
 8002452:	444f      	add	r7, r9
 8002454:	46ba      	mov	sl, r7
 8002456:	4240      	negs	r0, r0
 8002458:	4482      	add	sl, r0
 800245a:	e6d9      	b.n	8002210 <__aeabi_dsub+0x494>
 800245c:	4653      	mov	r3, sl
 800245e:	4323      	orrs	r3, r4
 8002460:	d100      	bne.n	8002464 <__aeabi_dsub+0x6e8>
 8002462:	e6cb      	b.n	80021fc <__aeabi_dsub+0x480>
 8002464:	e614      	b.n	8002090 <__aeabi_dsub+0x314>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	000007ff 	.word	0x000007ff
 800246c:	ff7fffff 	.word	0xff7fffff
 8002470:	000007fe 	.word	0x000007fe
 8002474:	2300      	movs	r3, #0
 8002476:	4a01      	ldr	r2, [pc, #4]	; (800247c <__aeabi_dsub+0x700>)
 8002478:	001c      	movs	r4, r3
 800247a:	e529      	b.n	8001ed0 <__aeabi_dsub+0x154>
 800247c:	000007ff 	.word	0x000007ff

08002480 <__aeabi_dcmpun>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	0005      	movs	r5, r0
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <__aeabi_dcmpun+0x38>)
 8002486:	031c      	lsls	r4, r3, #12
 8002488:	0016      	movs	r6, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	030a      	lsls	r2, r1, #12
 800248e:	0049      	lsls	r1, r1, #1
 8002490:	0b12      	lsrs	r2, r2, #12
 8002492:	0d49      	lsrs	r1, r1, #21
 8002494:	0b24      	lsrs	r4, r4, #12
 8002496:	0d5b      	lsrs	r3, r3, #21
 8002498:	4281      	cmp	r1, r0
 800249a:	d008      	beq.n	80024ae <__aeabi_dcmpun+0x2e>
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <__aeabi_dcmpun+0x38>)
 800249e:	2000      	movs	r0, #0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <__aeabi_dcmpun+0x2c>
 80024a4:	0020      	movs	r0, r4
 80024a6:	4330      	orrs	r0, r6
 80024a8:	1e43      	subs	r3, r0, #1
 80024aa:	4198      	sbcs	r0, r3
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
 80024ae:	2001      	movs	r0, #1
 80024b0:	432a      	orrs	r2, r5
 80024b2:	d1fb      	bne.n	80024ac <__aeabi_dcmpun+0x2c>
 80024b4:	e7f2      	b.n	800249c <__aeabi_dcmpun+0x1c>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007ff 	.word	0x000007ff

080024bc <__aeabi_d2iz>:
 80024bc:	000a      	movs	r2, r1
 80024be:	b530      	push	{r4, r5, lr}
 80024c0:	4c13      	ldr	r4, [pc, #76]	; (8002510 <__aeabi_d2iz+0x54>)
 80024c2:	0053      	lsls	r3, r2, #1
 80024c4:	0309      	lsls	r1, r1, #12
 80024c6:	0005      	movs	r5, r0
 80024c8:	0b09      	lsrs	r1, r1, #12
 80024ca:	2000      	movs	r0, #0
 80024cc:	0d5b      	lsrs	r3, r3, #21
 80024ce:	0fd2      	lsrs	r2, r2, #31
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	dd04      	ble.n	80024de <__aeabi_d2iz+0x22>
 80024d4:	480f      	ldr	r0, [pc, #60]	; (8002514 <__aeabi_d2iz+0x58>)
 80024d6:	4283      	cmp	r3, r0
 80024d8:	dd02      	ble.n	80024e0 <__aeabi_d2iz+0x24>
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <__aeabi_d2iz+0x5c>)
 80024dc:	18d0      	adds	r0, r2, r3
 80024de:	bd30      	pop	{r4, r5, pc}
 80024e0:	2080      	movs	r0, #128	; 0x80
 80024e2:	0340      	lsls	r0, r0, #13
 80024e4:	4301      	orrs	r1, r0
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <__aeabi_d2iz+0x60>)
 80024e8:	1ac0      	subs	r0, r0, r3
 80024ea:	281f      	cmp	r0, #31
 80024ec:	dd08      	ble.n	8002500 <__aeabi_d2iz+0x44>
 80024ee:	480c      	ldr	r0, [pc, #48]	; (8002520 <__aeabi_d2iz+0x64>)
 80024f0:	1ac3      	subs	r3, r0, r3
 80024f2:	40d9      	lsrs	r1, r3
 80024f4:	000b      	movs	r3, r1
 80024f6:	4258      	negs	r0, r3
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d1f0      	bne.n	80024de <__aeabi_d2iz+0x22>
 80024fc:	0018      	movs	r0, r3
 80024fe:	e7ee      	b.n	80024de <__aeabi_d2iz+0x22>
 8002500:	4c08      	ldr	r4, [pc, #32]	; (8002524 <__aeabi_d2iz+0x68>)
 8002502:	40c5      	lsrs	r5, r0
 8002504:	46a4      	mov	ip, r4
 8002506:	4463      	add	r3, ip
 8002508:	4099      	lsls	r1, r3
 800250a:	000b      	movs	r3, r1
 800250c:	432b      	orrs	r3, r5
 800250e:	e7f2      	b.n	80024f6 <__aeabi_d2iz+0x3a>
 8002510:	000003fe 	.word	0x000003fe
 8002514:	0000041d 	.word	0x0000041d
 8002518:	7fffffff 	.word	0x7fffffff
 800251c:	00000433 	.word	0x00000433
 8002520:	00000413 	.word	0x00000413
 8002524:	fffffbed 	.word	0xfffffbed

08002528 <__aeabi_i2d>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	2800      	cmp	r0, #0
 800252c:	d016      	beq.n	800255c <__aeabi_i2d+0x34>
 800252e:	17c3      	asrs	r3, r0, #31
 8002530:	18c5      	adds	r5, r0, r3
 8002532:	405d      	eors	r5, r3
 8002534:	0fc4      	lsrs	r4, r0, #31
 8002536:	0028      	movs	r0, r5
 8002538:	f000 f894 	bl	8002664 <__clzsi2>
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <__aeabi_i2d+0x5c>)
 800253e:	1a1b      	subs	r3, r3, r0
 8002540:	280a      	cmp	r0, #10
 8002542:	dc16      	bgt.n	8002572 <__aeabi_i2d+0x4a>
 8002544:	0002      	movs	r2, r0
 8002546:	002e      	movs	r6, r5
 8002548:	3215      	adds	r2, #21
 800254a:	4096      	lsls	r6, r2
 800254c:	220b      	movs	r2, #11
 800254e:	1a12      	subs	r2, r2, r0
 8002550:	40d5      	lsrs	r5, r2
 8002552:	055b      	lsls	r3, r3, #21
 8002554:	032d      	lsls	r5, r5, #12
 8002556:	0b2d      	lsrs	r5, r5, #12
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	e003      	b.n	8002564 <__aeabi_i2d+0x3c>
 800255c:	2400      	movs	r4, #0
 800255e:	2300      	movs	r3, #0
 8002560:	2500      	movs	r5, #0
 8002562:	2600      	movs	r6, #0
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	432b      	orrs	r3, r5
 8002568:	07e4      	lsls	r4, r4, #31
 800256a:	4323      	orrs	r3, r4
 800256c:	0030      	movs	r0, r6
 800256e:	0019      	movs	r1, r3
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	380b      	subs	r0, #11
 8002574:	4085      	lsls	r5, r0
 8002576:	055b      	lsls	r3, r3, #21
 8002578:	032d      	lsls	r5, r5, #12
 800257a:	2600      	movs	r6, #0
 800257c:	0b2d      	lsrs	r5, r5, #12
 800257e:	0d5b      	lsrs	r3, r3, #21
 8002580:	e7f0      	b.n	8002564 <__aeabi_i2d+0x3c>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	0000041e 	.word	0x0000041e

08002588 <__aeabi_ui2d>:
 8002588:	b510      	push	{r4, lr}
 800258a:	1e04      	subs	r4, r0, #0
 800258c:	d010      	beq.n	80025b0 <__aeabi_ui2d+0x28>
 800258e:	f000 f869 	bl	8002664 <__clzsi2>
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <__aeabi_ui2d+0x48>)
 8002594:	1a1b      	subs	r3, r3, r0
 8002596:	280a      	cmp	r0, #10
 8002598:	dc11      	bgt.n	80025be <__aeabi_ui2d+0x36>
 800259a:	220b      	movs	r2, #11
 800259c:	0021      	movs	r1, r4
 800259e:	1a12      	subs	r2, r2, r0
 80025a0:	40d1      	lsrs	r1, r2
 80025a2:	3015      	adds	r0, #21
 80025a4:	030a      	lsls	r2, r1, #12
 80025a6:	055b      	lsls	r3, r3, #21
 80025a8:	4084      	lsls	r4, r0
 80025aa:	0b12      	lsrs	r2, r2, #12
 80025ac:	0d5b      	lsrs	r3, r3, #21
 80025ae:	e001      	b.n	80025b4 <__aeabi_ui2d+0x2c>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	051b      	lsls	r3, r3, #20
 80025b6:	4313      	orrs	r3, r2
 80025b8:	0020      	movs	r0, r4
 80025ba:	0019      	movs	r1, r3
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	0022      	movs	r2, r4
 80025c0:	380b      	subs	r0, #11
 80025c2:	4082      	lsls	r2, r0
 80025c4:	055b      	lsls	r3, r3, #21
 80025c6:	0312      	lsls	r2, r2, #12
 80025c8:	2400      	movs	r4, #0
 80025ca:	0b12      	lsrs	r2, r2, #12
 80025cc:	0d5b      	lsrs	r3, r3, #21
 80025ce:	e7f1      	b.n	80025b4 <__aeabi_ui2d+0x2c>
 80025d0:	0000041e 	.word	0x0000041e

080025d4 <__aeabi_f2d>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	0242      	lsls	r2, r0, #9
 80025d8:	0043      	lsls	r3, r0, #1
 80025da:	0fc4      	lsrs	r4, r0, #31
 80025dc:	20fe      	movs	r0, #254	; 0xfe
 80025de:	0e1b      	lsrs	r3, r3, #24
 80025e0:	1c59      	adds	r1, r3, #1
 80025e2:	0a55      	lsrs	r5, r2, #9
 80025e4:	4208      	tst	r0, r1
 80025e6:	d00c      	beq.n	8002602 <__aeabi_f2d+0x2e>
 80025e8:	21e0      	movs	r1, #224	; 0xe0
 80025ea:	0089      	lsls	r1, r1, #2
 80025ec:	468c      	mov	ip, r1
 80025ee:	076d      	lsls	r5, r5, #29
 80025f0:	0b12      	lsrs	r2, r2, #12
 80025f2:	4463      	add	r3, ip
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	4313      	orrs	r3, r2
 80025f8:	07e4      	lsls	r4, r4, #31
 80025fa:	4323      	orrs	r3, r4
 80025fc:	0028      	movs	r0, r5
 80025fe:	0019      	movs	r1, r3
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	2b00      	cmp	r3, #0
 8002604:	d114      	bne.n	8002630 <__aeabi_f2d+0x5c>
 8002606:	2d00      	cmp	r5, #0
 8002608:	d01b      	beq.n	8002642 <__aeabi_f2d+0x6e>
 800260a:	0028      	movs	r0, r5
 800260c:	f000 f82a 	bl	8002664 <__clzsi2>
 8002610:	280a      	cmp	r0, #10
 8002612:	dc1c      	bgt.n	800264e <__aeabi_f2d+0x7a>
 8002614:	230b      	movs	r3, #11
 8002616:	002a      	movs	r2, r5
 8002618:	1a1b      	subs	r3, r3, r0
 800261a:	40da      	lsrs	r2, r3
 800261c:	0003      	movs	r3, r0
 800261e:	3315      	adds	r3, #21
 8002620:	409d      	lsls	r5, r3
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <__aeabi_f2d+0x88>)
 8002624:	0312      	lsls	r2, r2, #12
 8002626:	1a1b      	subs	r3, r3, r0
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	0b12      	lsrs	r2, r2, #12
 800262c:	0d5b      	lsrs	r3, r3, #21
 800262e:	e7e1      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002630:	2d00      	cmp	r5, #0
 8002632:	d009      	beq.n	8002648 <__aeabi_f2d+0x74>
 8002634:	0b13      	lsrs	r3, r2, #12
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	0312      	lsls	r2, r2, #12
 800263a:	431a      	orrs	r2, r3
 800263c:	076d      	lsls	r5, r5, #29
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <__aeabi_f2d+0x8c>)
 8002640:	e7d8      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	e7d5      	b.n	80025f4 <__aeabi_f2d+0x20>
 8002648:	2200      	movs	r2, #0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <__aeabi_f2d+0x8c>)
 800264c:	e7d2      	b.n	80025f4 <__aeabi_f2d+0x20>
 800264e:	0003      	movs	r3, r0
 8002650:	002a      	movs	r2, r5
 8002652:	3b0b      	subs	r3, #11
 8002654:	409a      	lsls	r2, r3
 8002656:	2500      	movs	r5, #0
 8002658:	e7e3      	b.n	8002622 <__aeabi_f2d+0x4e>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	00000389 	.word	0x00000389
 8002660:	000007ff 	.word	0x000007ff

08002664 <__clzsi2>:
 8002664:	211c      	movs	r1, #28
 8002666:	2301      	movs	r3, #1
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	4298      	cmp	r0, r3
 800266c:	d301      	bcc.n	8002672 <__clzsi2+0xe>
 800266e:	0c00      	lsrs	r0, r0, #16
 8002670:	3910      	subs	r1, #16
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	4298      	cmp	r0, r3
 8002676:	d301      	bcc.n	800267c <__clzsi2+0x18>
 8002678:	0a00      	lsrs	r0, r0, #8
 800267a:	3908      	subs	r1, #8
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	4298      	cmp	r0, r3
 8002680:	d301      	bcc.n	8002686 <__clzsi2+0x22>
 8002682:	0900      	lsrs	r0, r0, #4
 8002684:	3904      	subs	r1, #4
 8002686:	a202      	add	r2, pc, #8	; (adr r2, 8002690 <__clzsi2+0x2c>)
 8002688:	5c10      	ldrb	r0, [r2, r0]
 800268a:	1840      	adds	r0, r0, r1
 800268c:	4770      	bx	lr
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	02020304 	.word	0x02020304
 8002694:	01010101 	.word	0x01010101
	...

080026a0 <__clzdi2>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	2900      	cmp	r1, #0
 80026a4:	d103      	bne.n	80026ae <__clzdi2+0xe>
 80026a6:	f7ff ffdd 	bl	8002664 <__clzsi2>
 80026aa:	3020      	adds	r0, #32
 80026ac:	e002      	b.n	80026b4 <__clzdi2+0x14>
 80026ae:	0008      	movs	r0, r1
 80026b0:	f7ff ffd8 	bl	8002664 <__clzsi2>
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)

080026b8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    	i++;
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80026ca:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim16);
		  sprintf(Data, "SUM: %f\r\n", (float) numberOfTicks * 6);
		  HAL_UART_Transmit(&huart2, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
	  }
	*/
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000320 	.word	0x20000320

080026d8 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b085      	sub	sp, #20
 80026dc:	af02      	add	r7, sp, #8
 80026de:	0002      	movs	r2, r0
 80026e0:	1dbb      	adds	r3, r7, #6
 80026e2:	801a      	strh	r2, [r3, #0]


	if (IsFirstCapture)
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d016      	beq.n	800271a <HAL_GPIO_EXTI_Falling_Callback+0x42>
	{
		HAL_TIM_Base_Start_IT(&htim16);
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f001 fc38 	bl	8003f64 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, (GPIO_PinState) 0);
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	0059      	lsls	r1, r3, #1
 80026f8:	23a0      	movs	r3, #160	; 0xa0
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	2200      	movs	r2, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fe2a 	bl	8003358 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start(&htim17);
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8002706:	0018      	movs	r0, r3
 8002708:	f001 fbe0 	bl	8003ecc <HAL_TIM_Base_Start>
		__HAL_TIM_SetCounter(&htim17, 0);
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
		IsFirstCapture = 0;
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
	}


	numberOfTicks++;
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8002724:	801a      	strh	r2, [r3, #0]

	sprintf(Data, "%lu %f\r\n", __HAL_TIM_GetCounter(&htim17), (float) 60 * 10000 / __HAL_TIM_GetCounter(&htim17));
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	0018      	movs	r0, r3
 8002734:	f7fe f8be 	bl	80008b4 <__aeabi_ui2f>
 8002738:	1c03      	adds	r3, r0, #0
 800273a:	1c19      	adds	r1, r3, #0
 800273c:	4815      	ldr	r0, [pc, #84]	; (8002794 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 800273e:	f7fd ff9f 	bl	8000680 <__aeabi_fdiv>
 8002742:	1c03      	adds	r3, r0, #0
 8002744:	1c18      	adds	r0, r3, #0
 8002746:	f7ff ff45 	bl	80025d4 <__aeabi_f2d>
 800274a:	0002      	movs	r2, r0
 800274c:	000b      	movs	r3, r1
 800274e:	4912      	ldr	r1, [pc, #72]	; (8002798 <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 8002750:	4812      	ldr	r0, [pc, #72]	; (800279c <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8002752:	9200      	str	r2, [sp, #0]
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	0022      	movs	r2, r4
 8002758:	f003 f904 	bl	8005964 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*) Data, strlen(Data), HAL_MAX_DELAY);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 800275e:	0018      	movs	r0, r3
 8002760:	f7fd fcd2 	bl	8000108 <strlen>
 8002764:	0003      	movs	r3, r0
 8002766:	b29a      	uxth	r2, r3
 8002768:	2301      	movs	r3, #1
 800276a:	425b      	negs	r3, r3
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 800276e:	480c      	ldr	r0, [pc, #48]	; (80027a0 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 8002770:	f001 fe66 	bl	8004440 <HAL_UART_Transmit>

	__HAL_TIM_SetCounter(&htim17, 0);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24


}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b003      	add	sp, #12
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	20000000 	.word	0x20000000
 8002788:	200001f4 	.word	0x200001f4
 800278c:	20000240 	.word	0x20000240
 8002790:	20000322 	.word	0x20000322
 8002794:	49127c00 	.word	0x49127c00
 8002798:	08007d70 	.word	0x08007d70
 800279c:	20000324 	.word	0x20000324
 80027a0:	2000028c 	.word	0x2000028c

080027a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a8:	f000 fb0e 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ac:	f000 f809 	bl	80027c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b0:	f000 f8ec 	bl	800298c <MX_GPIO_Init>
  MX_TIM16_Init();
 80027b4:	f000 f864 	bl	8002880 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80027b8:	f000 f8b4 	bl	8002924 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80027bc:	f000 f888 	bl	80028d0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <main+0x1c>

080027c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c2:	b590      	push	{r4, r7, lr}
 80027c4:	b093      	sub	sp, #76	; 0x4c
 80027c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c8:	2410      	movs	r4, #16
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	2338      	movs	r3, #56	; 0x38
 80027d0:	001a      	movs	r2, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	f003 f932 	bl	8005a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d8:	003b      	movs	r3, r7
 80027da:	0018      	movs	r0, r3
 80027dc:	2310      	movs	r3, #16
 80027de:	001a      	movs	r2, r3
 80027e0:	2100      	movs	r1, #0
 80027e2:	f003 f92b 	bl	8005a3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fe06 	bl	80033fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	2202      	movs	r2, #2
 80027f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0052      	lsls	r2, r2, #1
 80027fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027fe:	0021      	movs	r1, r4
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2202      	movs	r2, #2
 8002810:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2202      	movs	r2, #2
 8002816:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2200      	movs	r2, #0
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2208      	movs	r2, #8
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	0292      	lsls	r2, r2, #10
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0492      	lsls	r2, r2, #18
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0592      	lsls	r2, r2, #22
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	187b      	adds	r3, r7, r1
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fe28 	bl	8003494 <HAL_RCC_OscConfig>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002848:	f000 f8f2 	bl	8002a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284c:	003b      	movs	r3, r7
 800284e:	2207      	movs	r2, #7
 8002850:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002852:	003b      	movs	r3, r7
 8002854:	2202      	movs	r2, #2
 8002856:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	003b      	movs	r3, r7
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285e:	003b      	movs	r3, r7
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002864:	003b      	movs	r3, r7
 8002866:	2102      	movs	r1, #2
 8002868:	0018      	movs	r0, r3
 800286a:	f001 f92d 	bl	8003ac8 <HAL_RCC_ClockConfig>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002872:	f000 f8dd 	bl	8002a30 <Error_Handler>
  }
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b013      	add	sp, #76	; 0x4c
 800287c:	bd90      	pop	{r4, r7, pc}
	...

08002880 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_TIM16_Init+0x44>)
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <MX_TIM16_Init+0x48>)
 8002888:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_TIM16_Init+0x44>)
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <MX_TIM16_Init+0x4c>)
 800288e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_TIM16_Init+0x44>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250-1;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <MX_TIM16_Init+0x44>)
 8002898:	22f9      	movs	r2, #249	; 0xf9
 800289a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_TIM16_Init+0x44>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <MX_TIM16_Init+0x44>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_TIM16_Init+0x44>)
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <MX_TIM16_Init+0x44>)
 80028b0:	0018      	movs	r0, r3
 80028b2:	f001 fab3 	bl	8003e1c <HAL_TIM_Base_Init>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80028ba:	f000 f8b9 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200001f4 	.word	0x200001f4
 80028c8:	40014400 	.word	0x40014400
 80028cc:	0000f9ff 	.word	0x0000f9ff

080028d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <MX_TIM17_Init+0x44>)
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <MX_TIM17_Init+0x48>)
 80028d8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400-1;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_TIM17_Init+0x44>)
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <MX_TIM17_Init+0x4c>)
 80028de:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_TIM17_Init+0x44>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_TIM17_Init+0x44>)
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <MX_TIM17_Init+0x50>)
 80028ea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_TIM17_Init+0x44>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_TIM17_Init+0x44>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_TIM17_Init+0x44>)
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <MX_TIM17_Init+0x44>)
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fa8b 	bl	8003e1c <HAL_TIM_Base_Init>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800290a:	f000 f891 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000240 	.word	0x20000240
 8002918:	40014800 	.word	0x40014800
 800291c:	000018ff 	.word	0x000018ff
 8002920:	0000ffff 	.word	0x0000ffff

08002924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_USART2_UART_Init+0x60>)
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <MX_USART2_UART_Init+0x64>)
 800292c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002930:	22e1      	movs	r2, #225	; 0xe1
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_USART2_UART_Init+0x60>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_USART2_UART_Init+0x60>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <MX_USART2_UART_Init+0x60>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <MX_USART2_UART_Init+0x60>)
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <MX_USART2_UART_Init+0x60>)
 800296e:	0018      	movs	r0, r3
 8002970:	f001 fd10 	bl	8004394 <HAL_UART_Init>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d001      	beq.n	800297c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002978:	f000 f85a 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	2000028c 	.word	0x2000028c
 8002988:	40004400 	.word	0x40004400

0800298c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	0018      	movs	r0, r3
 8002996:	2314      	movs	r3, #20
 8002998:	001a      	movs	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	f003 f84e 	bl	8005a3c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <MX_GPIO_Init+0xa0>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <MX_GPIO_Init+0xa0>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <MX_GPIO_Init+0xa0>)
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	0059      	lsls	r1, r3, #1
 80029bc:	23a0      	movs	r3, #160	; 0xa0
 80029be:	05db      	lsls	r3, r3, #23
 80029c0:	2201      	movs	r2, #1
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fcc8 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FALLING_EDGES_COUNTER_Pin */
  GPIO_InitStruct.Pin = FALLING_EDGES_COUNTER_Pin;
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2284      	movs	r2, #132	; 0x84
 80029d2:	0392      	lsls	r2, r2, #14
 80029d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FALLING_EDGES_COUNTER_GPIO_Port, &GPIO_InitStruct);
 80029dc:	1d3a      	adds	r2, r7, #4
 80029de:	23a0      	movs	r3, #160	; 0xa0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fb53 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2201      	movs	r2, #1
 80029f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2201      	movs	r2, #1
 80029fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a04:	1d3a      	adds	r2, r7, #4
 8002a06:	23a0      	movs	r3, #160	; 0xa0
 8002a08:	05db      	lsls	r3, r3, #23
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fb3f 	bl	8003090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2007      	movs	r0, #7
 8002a18:	f000 fb08 	bl	800302c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a1c:	2007      	movs	r0, #7
 8002a1e:	f000 fb1a 	bl	8003056 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b006      	add	sp, #24
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000

08002a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <Error_Handler+0x8>
	...

08002a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_MspInit+0x44>)
 8002a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_MspInit+0x44>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_MspInit+0x44>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_MspInit+0x44>)
 8002a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_MspInit+0x44>)
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0549      	lsls	r1, r1, #21
 8002a64:	430a      	orrs	r2, r1
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_MspInit+0x44>)
 8002a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	055b      	lsls	r3, r3, #21
 8002a70:	4013      	ands	r3, r2
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_Base_MspInit+0x70>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d116      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	0289      	lsls	r1, r1, #10
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2015      	movs	r0, #21
 8002ab8:	f000 fab8 	bl	800302c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002abc:	2015      	movs	r0, #21
 8002abe:	f000 faca 	bl	8003056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ac2:	e012      	b.n	8002aea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM17)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_TIM_Base_MspInit+0x78>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	02c9      	lsls	r1, r1, #11
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_TIM_Base_MspInit+0x74>)
 8002ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	02db      	lsls	r3, r3, #11
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40014800 	.word	0x40014800

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	2414      	movs	r4, #20
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2314      	movs	r3, #20
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f002 ff92 	bl	8005a3c <memset>
  if(huart->Instance==USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_UART_MspInit+0x8c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d130      	bne.n	8002b84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	0289      	lsls	r1, r1, #10
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_UART_MspInit+0x90>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b56:	0021      	movs	r1, r4
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2202      	movs	r2, #2
 8002b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2201      	movs	r2, #1
 8002b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	187a      	adds	r2, r7, r1
 8002b78:	23a0      	movs	r3, #160	; 0xa0
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fa86 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b00b      	add	sp, #44	; 0x2c
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40021000 	.word	0x40021000

08002b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b98:	e7fe      	b.n	8002b98 <NMI_Handler+0x4>

08002b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <HardFault_Handler+0x4>

08002ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb8:	f000 f970 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FALLING_EDGES_COUNTER_Pin);
 8002bc6:	2040      	movs	r0, #64	; 0x40
 8002bc8:	f000 fbe4 	bl	8003394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <TIM16_IRQHandler+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fa16 	bl	800400c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	200001f4 	.word	0x200001f4

08002bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_kill>:

int _kill(int pid, int sig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c02:	f002 ff75 	bl	8005af0 <__errno>
 8002c06:	0003      	movs	r3, r0
 8002c08:	2216      	movs	r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	425b      	negs	r3, r3
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_exit>:

void _exit (int status)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c20:	2301      	movs	r3, #1
 8002c22:	425a      	negs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ffe5 	bl	8002bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c2e:	e7fe      	b.n	8002c2e <_exit+0x16>

08002c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e00a      	b.n	8002c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c42:	e000      	b.n	8002c46 <_read+0x16>
 8002c44:	bf00      	nop
 8002c46:	0001      	movs	r1, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	60ba      	str	r2, [r7, #8]
 8002c4e:	b2ca      	uxtb	r2, r1
 8002c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dbf0      	blt.n	8002c42 <_read+0x12>
  }

  return len;
 8002c60:	687b      	ldr	r3, [r7, #4]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b006      	add	sp, #24
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e009      	b.n	8002c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	60ba      	str	r2, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	e000      	b.n	8002c8a <_write+0x20>
 8002c88:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf1      	blt.n	8002c7c <_write+0x12>
  }
  return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_close>:

int _close(int file)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	425b      	negs	r3, r3
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b002      	add	sp, #8
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0192      	lsls	r2, r2, #6
 8002cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b004      	add	sp, #16
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f002 fee0 	bl	8005af0 <__errno>
 8002d30:	0003      	movs	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d2      	adds	r2, r2, r3
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20002000 	.word	0x20002000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20000364 	.word	0x20000364
 8002d64:	200004b8 	.word	0x200004b8

08002d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d78:	f7ff fff6 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <LoopForever+0xe>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <LoopForever+0x16>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da2:	f002 feab 	bl	8005afc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002da6:	f7ff fcfd 	bl	80027a4 <main>

08002daa <LoopForever>:

LoopForever:
  b LoopForever
 8002daa:	e7fe      	b.n	8002daa <LoopForever>
  ldr   r0, =_estack
 8002dac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002db8:	08008234 	.word	0x08008234
  ldr r2, =_sbss
 8002dbc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002dc0:	200004b8 	.word	0x200004b8

08002dc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC1_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_Init+0x3c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Init+0x3c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002de2:	2003      	movs	r0, #3
 8002de4:	f000 f810 	bl	8002e08 <HAL_InitTick>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e001      	b.n	8002df8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fe22 	bl	8002a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_InitTick+0x88>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02b      	beq.n	8002e78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_InitTick+0x8c>)
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_InitTick+0x88>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	0019      	movs	r1, r3
 8002e2a:	23fa      	movs	r3, #250	; 0xfa
 8002e2c:	0098      	lsls	r0, r3, #2
 8002e2e:	f7fd f987 	bl	8000140 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	0019      	movs	r1, r3
 8002e36:	0020      	movs	r0, r4
 8002e38:	f7fd f982 	bl	8000140 <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f919 	bl	8003076 <HAL_SYSTICK_Config>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d112      	bne.n	8002e6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d80a      	bhi.n	8002e64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f8e8 	bl	800302c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_InitTick+0x90>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e00d      	b.n	8002e80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e64:	230f      	movs	r3, #15
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e008      	b.n	8002e80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6e:	230f      	movs	r3, #15
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e003      	b.n	8002e80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e80:	230f      	movs	r3, #15
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b005      	add	sp, #20
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000004 	.word	0x20000004
 8002e98:	20000008 	.word	0x20000008

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	18d2      	adds	r2, r2, r3
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_IncTick+0x20>)
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	20000368 	.word	0x20000368

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000368 	.word	0x20000368

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	0002      	movs	r2, r0
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee6:	d809      	bhi.n	8002efc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	001a      	movs	r2, r3
 8002eee:	231f      	movs	r3, #31
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_EnableIRQ+0x30>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4091      	lsls	r1, r2
 8002ef8:	000a      	movs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	0002      	movs	r2, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1c:	d828      	bhi.n	8002f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	33c0      	adds	r3, #192	; 0xc0
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	589b      	ldr	r3, [r3, r2]
 8002f2e:	1dfa      	adds	r2, r7, #7
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	0011      	movs	r1, r2
 8002f34:	2203      	movs	r2, #3
 8002f36:	400a      	ands	r2, r1
 8002f38:	00d2      	lsls	r2, r2, #3
 8002f3a:	21ff      	movs	r1, #255	; 0xff
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	401a      	ands	r2, r3
 8002f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	2303      	movs	r3, #3
 8002f56:	4003      	ands	r3, r0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	481f      	ldr	r0, [pc, #124]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	430a      	orrs	r2, r1
 8002f68:	33c0      	adds	r3, #192	; 0xc0
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f6e:	e031      	b.n	8002fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	0019      	movs	r1, r3
 8002f78:	230f      	movs	r3, #15
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	3b08      	subs	r3, #8
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3306      	adds	r3, #6
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1dfa      	adds	r2, r7, #7
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	2203      	movs	r2, #3
 8002f92:	400a      	ands	r2, r1
 8002f94:	00d2      	lsls	r2, r2, #3
 8002f96:	21ff      	movs	r1, #255	; 0xff
 8002f98:	4091      	lsls	r1, r2
 8002f9a:	000a      	movs	r2, r1
 8002f9c:	43d2      	mvns	r2, r2
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	401a      	ands	r2, r3
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	4003      	ands	r3, r0
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	001c      	movs	r4, r3
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	4023      	ands	r3, r4
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	3306      	adds	r3, #6
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	18c3      	adds	r3, r0, r3
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b003      	add	sp, #12
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	045b      	lsls	r3, r3, #17
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d301      	bcc.n	8002ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e010      	b.n	800301e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <SysTick_Config+0x44>)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	3a01      	subs	r2, #1
 8003002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003004:	2301      	movs	r3, #1
 8003006:	425b      	negs	r3, r3
 8003008:	2103      	movs	r1, #3
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff ff7c 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x44>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x44>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	210f      	movs	r1, #15
 8003038:	187b      	adds	r3, r7, r1
 800303a:	1c02      	adds	r2, r0, #0
 800303c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	187b      	adds	r3, r7, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b25b      	sxtb	r3, r3
 8003046:	0011      	movs	r1, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff5d 	bl	8002f08 <__NVIC_SetPriority>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	0002      	movs	r2, r0
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b25b      	sxtb	r3, r3
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff ff33 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ffaf 	bl	8002fe4 <SysTick_Config>
 8003086:	0003      	movs	r3, r0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309e:	e147      	b.n	8003330 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4091      	lsls	r1, r2
 80030aa:	000a      	movs	r2, r1
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <HAL_GPIO_Init+0x28>
 80030b6:	e138      	b.n	800332a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d005      	beq.n	80030d0 <HAL_GPIO_Init+0x40>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d130      	bne.n	8003132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	43da      	mvns	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	0013      	movs	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003106:	2201      	movs	r2, #1
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	43da      	mvns	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	2201      	movs	r2, #1
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2203      	movs	r2, #3
 8003138:	4013      	ands	r3, r2
 800313a:	2b03      	cmp	r3, #3
 800313c:	d017      	beq.n	800316e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	43da      	mvns	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	4013      	ands	r3, r2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d123      	bne.n	80031c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	58d3      	ldr	r3, [r2, r3]
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2107      	movs	r1, #7
 80031a6:	400b      	ands	r3, r1
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2203      	movs	r2, #3
 80031e0:	401a      	ands	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	23c0      	movs	r3, #192	; 0xc0
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_GPIO_Init+0x174>
 8003202:	e092      	b.n	800332a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3318      	adds	r3, #24
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2203      	movs	r2, #3
 8003216:	4013      	ands	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	220f      	movs	r2, #15
 800321c:	409a      	lsls	r2, r3
 800321e:	0013      	movs	r3, r2
 8003220:	43da      	mvns	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	23a0      	movs	r3, #160	; 0xa0
 800322c:	05db      	lsls	r3, r3, #23
 800322e:	429a      	cmp	r2, r3
 8003230:	d013      	beq.n	800325a <HAL_GPIO_Init+0x1ca>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x2bc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_GPIO_Init+0x1c6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a44      	ldr	r2, [pc, #272]	; (8003350 <HAL_GPIO_Init+0x2c0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x1c2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_GPIO_Init+0x2c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_GPIO_Init+0x1be>
 800324a:	2303      	movs	r3, #3
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x1cc>
 800324e:	2305      	movs	r3, #5
 8003250:	e004      	b.n	800325c <HAL_GPIO_Init+0x1cc>
 8003252:	2302      	movs	r3, #2
 8003254:	e002      	b.n	800325c <HAL_GPIO_Init+0x1cc>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_GPIO_Init+0x1cc>
 800325a:	2300      	movs	r3, #0
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	2103      	movs	r1, #3
 8003260:	400a      	ands	r2, r1
 8003262:	00d2      	lsls	r2, r2, #3
 8003264:	4093      	lsls	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800326c:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3318      	adds	r3, #24
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43da      	mvns	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	035b      	lsls	r3, r3, #13
 8003292:	4013      	ands	r3, r2
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	039b      	lsls	r3, r3, #14
 80032bc:	4013      	ands	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032d0:	2384      	movs	r3, #132	; 0x84
 80032d2:	58d3      	ldr	r3, [r2, r3]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43da      	mvns	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	4013      	ands	r3, r2
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f4:	4914      	ldr	r1, [pc, #80]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032f6:	2284      	movs	r2, #132	; 0x84
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	58d3      	ldr	r3, [r2, r3]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43da      	mvns	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	025b      	lsls	r3, r3, #9
 8003316:	4013      	ands	r3, r2
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003322:	4909      	ldr	r1, [pc, #36]	; (8003348 <HAL_GPIO_Init+0x2b8>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	40da      	lsrs	r2, r3
 8003338:	1e13      	subs	r3, r2, #0
 800333a:	d000      	beq.n	800333e <HAL_GPIO_Init+0x2ae>
 800333c:	e6b0      	b.n	80030a0 <HAL_GPIO_Init+0x10>
  }
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021800 	.word	0x40021800
 800334c:	50000400 	.word	0x50000400
 8003350:	50000800 	.word	0x50000800
 8003354:	50000c00 	.word	0x50000c00

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	0008      	movs	r0, r1
 8003362:	0011      	movs	r1, r2
 8003364:	1cbb      	adds	r3, r7, #2
 8003366:	1c02      	adds	r2, r0, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	1c7b      	adds	r3, r7, #1
 800336c:	1c0a      	adds	r2, r1, #0
 800336e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	1c7b      	adds	r3, r7, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003382:	1cbb      	adds	r3, r7, #2
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	0002      	movs	r2, r0
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	1dba      	adds	r2, r7, #6
 80033a6:	8812      	ldrh	r2, [r2, #0]
 80033a8:	4013      	ands	r3, r2
 80033aa:	d008      	beq.n	80033be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033ae:	1dba      	adds	r2, r7, #6
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033b4:	1dbb      	adds	r3, r7, #6
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f815 	bl	80033e8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	1dba      	adds	r2, r7, #6
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	4013      	ands	r3, r2
 80033c8:	d008      	beq.n	80033dc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033cc:	1dba      	adds	r2, r7, #6
 80033ce:	8812      	ldrh	r2, [r2, #0]
 80033d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80033d2:	1dbb      	adds	r3, r7, #6
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff f97e 	bl	80026d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021800 	.word	0x40021800

080033e8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dbb      	adds	r3, r7, #6
 80033f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800340a:	4013      	ands	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d11f      	bne.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	0013      	movs	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	189b      	adds	r3, r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4912      	ldr	r1, [pc, #72]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800342e:	0018      	movs	r0, r3
 8003430:	f7fc fe86 	bl	8000140 <__udivsi3>
 8003434:	0003      	movs	r3, r0
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800343a:	e008      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e001      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e009      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	429a      	cmp	r2, r3
 800345e:	d0ed      	beq.n	800343c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b004      	add	sp, #16
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40007000 	.word	0x40007000
 8003470:	fffff9ff 	.word	0xfffff9ff
 8003474:	20000004 	.word	0x20000004
 8003478:	000f4240 	.word	0x000f4240

0800347c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	23e0      	movs	r3, #224	; 0xe0
 8003486:	01db      	lsls	r3, r3, #7
 8003488:	4013      	ands	r3, r2
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000

08003494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e2fe      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_RCC_OscConfig+0x1e>
 80034b0:	e07c      	b.n	80035ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b2:	4bc3      	ldr	r3, [pc, #780]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2238      	movs	r2, #56	; 0x38
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034bc:	4bc0      	ldr	r3, [pc, #768]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2203      	movs	r2, #3
 80034c2:	4013      	ands	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3e>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	4bb9      	ldr	r3, [pc, #740]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	4013      	ands	r3, r2
 80034e2:	d062      	beq.n	80035aa <HAL_RCC_OscConfig+0x116>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d15e      	bne.n	80035aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e2d9      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	025b      	lsls	r3, r3, #9
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x78>
 80034fc:	4bb0      	ldr	r3, [pc, #704]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4baf      	ldr	r3, [pc, #700]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0249      	lsls	r1, r1, #9
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e020      	b.n	800354e <HAL_RCC_OscConfig+0xba>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	23a0      	movs	r3, #160	; 0xa0
 8003512:	02db      	lsls	r3, r3, #11
 8003514:	429a      	cmp	r2, r3
 8003516:	d10e      	bne.n	8003536 <HAL_RCC_OscConfig+0xa2>
 8003518:	4ba9      	ldr	r3, [pc, #676]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4ba8      	ldr	r3, [pc, #672]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	02c9      	lsls	r1, r1, #11
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4ba6      	ldr	r3, [pc, #664]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4ba5      	ldr	r3, [pc, #660]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0249      	lsls	r1, r1, #9
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0xba>
 8003536:	4ba2      	ldr	r3, [pc, #648]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4ba1      	ldr	r3, [pc, #644]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800353c:	49a1      	ldr	r1, [pc, #644]	; (80037c4 <HAL_RCC_OscConfig+0x330>)
 800353e:	400a      	ands	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	4b9f      	ldr	r3, [pc, #636]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b9e      	ldr	r3, [pc, #632]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003548:	499f      	ldr	r1, [pc, #636]	; (80037c8 <HAL_RCC_OscConfig+0x334>)
 800354a:	400a      	ands	r2, r1
 800354c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7ff fcb3 	bl	8002ec0 <HAL_GetTick>
 800355a:	0003      	movs	r3, r0
 800355c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7ff fcae 	bl	8002ec0 <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e298      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	4013      	ands	r3, r2
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xcc>
 800357e:	e015      	b.n	80035ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7ff fc9e 	bl	8002ec0 <HAL_GetTick>
 8003584:	0003      	movs	r3, r0
 8003586:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358a:	f7ff fc99 	bl	8002ec0 <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e283      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	029b      	lsls	r3, r3, #10
 80035a4:	4013      	ands	r3, r2
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0xf6>
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_RCC_OscConfig+0x124>
 80035b6:	e099      	b.n	80036ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b8:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2238      	movs	r2, #56	; 0x38
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c2:	4b7f      	ldr	r3, [pc, #508]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0x144>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d002      	beq.n	80035de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d135      	bne.n	800364a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035de:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4013      	ands	r3, r2
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x162>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e256      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a74      	ldr	r2, [pc, #464]	; (80037cc <HAL_RCC_OscConfig+0x338>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d112      	bne.n	8003638 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003612:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6e      	ldr	r2, [pc, #440]	; (80037d0 <HAL_RCC_OscConfig+0x33c>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003626:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0adb      	lsrs	r3, r3, #11
 800362c:	2207      	movs	r2, #7
 800362e:	4013      	ands	r3, r2
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCC_OscConfig+0x340>)
 8003632:	40da      	lsrs	r2, r3
 8003634:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x344>)
 8003636:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003638:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x348>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff fbe3 	bl	8002e08 <HAL_InitTick>
 8003642:	1e03      	subs	r3, r0, #0
 8003644:	d051      	beq.n	80036ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e22c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d030      	beq.n	80036b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5e      	ldr	r2, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x33c>)
 8003658:	4013      	ands	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0049      	lsls	r1, r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff fc24 	bl	8002ec0 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7ff fc1f 	bl	8002ec0 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e209      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4013      	ands	r3, r2
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a4a      	ldr	r2, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x338>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e01b      	b.n	80036ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80036ba:	4949      	ldr	r1, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0x34c>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7ff fbfe 	bl	8002ec0 <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7ff fbf9 	bl	8002ec0 <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1e3      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036dc:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4013      	ands	r3, r2
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x236>
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	4013      	ands	r3, r2
 80036f4:	d047      	beq.n	8003786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036f6:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2238      	movs	r2, #56	; 0x38
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b18      	cmp	r3, #24
 8003700:	d10a      	bne.n	8003718 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	2202      	movs	r2, #2
 8003708:	4013      	ands	r3, r2
 800370a:	d03c      	beq.n	8003786 <HAL_RCC_OscConfig+0x2f2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d138      	bne.n	8003786 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e1c5      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d019      	beq.n	8003754 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003726:	2101      	movs	r1, #1
 8003728:	430a      	orrs	r2, r1
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7ff fbc8 	bl	8002ec0 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003736:	f7ff fbc3 	bl	8002ec0 <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1ad      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	2202      	movs	r2, #2
 800374e:	4013      	ands	r3, r2
 8003750:	d0f1      	beq.n	8003736 <HAL_RCC_OscConfig+0x2a2>
 8003752:	e018      	b.n	8003786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 8003756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800375a:	2101      	movs	r1, #1
 800375c:	438a      	bics	r2, r1
 800375e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7ff fbae 	bl	8002ec0 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376a:	f7ff fba9 	bl	8002ec0 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e193      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2202      	movs	r2, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d1f1      	bne.n	800376a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x2fe>
 8003790:	e0c6      	b.n	8003920 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	231f      	movs	r3, #31
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2238      	movs	r2, #56	; 0x38
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d11e      	bne.n	80037e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x32c>)
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2202      	movs	r2, #2
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_RCC_OscConfig+0x31e>
 80037b0:	e0b6      	b.n	8003920 <HAL_RCC_OscConfig+0x48c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d000      	beq.n	80037bc <HAL_RCC_OscConfig+0x328>
 80037ba:	e0b1      	b.n	8003920 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e171      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	fffeffff 	.word	0xfffeffff
 80037c8:	fffbffff 	.word	0xfffbffff
 80037cc:	ffff80ff 	.word	0xffff80ff
 80037d0:	ffffc7ff 	.word	0xffffc7ff
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	20000004 	.word	0x20000004
 80037dc:	20000008 	.word	0x20000008
 80037e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e4:	4bb1      	ldr	r3, [pc, #708]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80037e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	055b      	lsls	r3, r3, #21
 80037ec:	4013      	ands	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x360>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x362>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4bac      	ldr	r3, [pc, #688]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80037fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fe:	4bab      	ldr	r3, [pc, #684]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	0549      	lsls	r1, r1, #21
 8003804:	430a      	orrs	r2, r1
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
 8003808:	4ba8      	ldr	r3, [pc, #672]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800380a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	055b      	lsls	r3, r3, #21
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003816:	231f      	movs	r3, #31
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381e:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <HAL_RCC_OscConfig+0x61c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d11a      	bne.n	8003860 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382a:	4ba1      	ldr	r3, [pc, #644]	; (8003ab0 <HAL_RCC_OscConfig+0x61c>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4ba0      	ldr	r3, [pc, #640]	; (8003ab0 <HAL_RCC_OscConfig+0x61c>)
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0049      	lsls	r1, r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003838:	f7ff fb42 	bl	8002ec0 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003842:	f7ff fb3d 	bl	8002ec0 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e127      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x61c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4013      	ands	r3, r2
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x3e2>
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800386a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800386c:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800386e:	2101      	movs	r1, #1
 8003870:	430a      	orrs	r2, r1
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x41c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x404>
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003882:	4b8a      	ldr	r3, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003884:	2104      	movs	r1, #4
 8003886:	430a      	orrs	r2, r1
 8003888:	65da      	str	r2, [r3, #92]	; 0x5c
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800388c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800388e:	4b87      	ldr	r3, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003890:	2101      	movs	r1, #1
 8003892:	430a      	orrs	r2, r1
 8003894:	65da      	str	r2, [r3, #92]	; 0x5c
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0x41c>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800389a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800389c:	4b83      	ldr	r3, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800389e:	2101      	movs	r1, #1
 80038a0:	438a      	bics	r2, r1
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80038a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038a8:	4b80      	ldr	r3, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80038aa:	2104      	movs	r1, #4
 80038ac:	438a      	bics	r2, r1
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d014      	beq.n	80038e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7ff fb02 	bl	8002ec0 <HAL_GetTick>
 80038bc:	0003      	movs	r3, r0
 80038be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7ff fafd 	bl	8002ec0 <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	4a79      	ldr	r2, [pc, #484]	; (8003ab4 <HAL_RCC_OscConfig+0x620>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0e6      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b75      	ldr	r3, [pc, #468]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	2202      	movs	r2, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x42e>
 80038e0:	e013      	b.n	800390a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7ff faed 	bl	8002ec0 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ea:	e009      	b.n	8003900 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7ff fae8 	bl	8002ec0 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	4a6f      	ldr	r2, [pc, #444]	; (8003ab4 <HAL_RCC_OscConfig+0x620>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0d1      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003900:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2202      	movs	r2, #2
 8003906:	4013      	ands	r3, r2
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003918:	4b64      	ldr	r3, [pc, #400]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800391a:	4967      	ldr	r1, [pc, #412]	; (8003ab8 <HAL_RCC_OscConfig+0x624>)
 800391c:	400a      	ands	r2, r1
 800391e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d100      	bne.n	800392a <HAL_RCC_OscConfig+0x496>
 8003928:	e0bb      	b.n	8003aa2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392a:	4b60      	ldr	r3, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2238      	movs	r2, #56	; 0x38
 8003930:	4013      	ands	r3, r2
 8003932:	2b10      	cmp	r3, #16
 8003934:	d100      	bne.n	8003938 <HAL_RCC_OscConfig+0x4a4>
 8003936:	e07b      	b.n	8003a30 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d156      	bne.n	80039ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003940:	4b5a      	ldr	r3, [pc, #360]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003946:	495d      	ldr	r1, [pc, #372]	; (8003abc <HAL_RCC_OscConfig+0x628>)
 8003948:	400a      	ands	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff fab8 	bl	8002ec0 <HAL_GetTick>
 8003950:	0003      	movs	r3, r0
 8003952:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7ff fab3 	bl	8002ec0 <HAL_GetTick>
 800395a:	0002      	movs	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e09d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	049b      	lsls	r3, r3, #18
 8003970:	4013      	ands	r3, r2
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003974:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a51      	ldr	r2, [pc, #324]	; (8003ac0 <HAL_RCC_OscConfig+0x62c>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	431a      	orrs	r2, r3
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	0449      	lsls	r1, r1, #17
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0549      	lsls	r1, r1, #21
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff fa7c 	bl	8002ec0 <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ce:	f7ff fa77 	bl	8002ec0 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e061      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e0:	4b32      	ldr	r3, [pc, #200]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	049b      	lsls	r3, r3, #18
 80039e8:	4013      	ands	r3, r2
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x53a>
 80039ec:	e059      	b.n	8003aa2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ee:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 80039f4:	4931      	ldr	r1, [pc, #196]	; (8003abc <HAL_RCC_OscConfig+0x628>)
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7ff fa61 	bl	8002ec0 <HAL_GetTick>
 80039fe:	0003      	movs	r3, r0
 8003a00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7ff fa5c 	bl	8002ec0 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e046      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a16:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	049b      	lsls	r3, r3, #18
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003a28:	4926      	ldr	r1, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x630>)
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e038      	b.n	8003aa2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e033      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCC_OscConfig+0x618>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2203      	movs	r2, #3
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d126      	bne.n	8003a9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2270      	movs	r2, #112	; 0x70
 8003a54:	401a      	ands	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	23fe      	movs	r3, #254	; 0xfe
 8003a62:	01db      	lsls	r3, r3, #7
 8003a64:	401a      	ands	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d116      	bne.n	8003a9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	23f8      	movs	r3, #248	; 0xf8
 8003a74:	039b      	lsls	r3, r3, #14
 8003a76:	401a      	ands	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	23e0      	movs	r3, #224	; 0xe0
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	0f5b      	lsrs	r3, r3, #29
 8003a94:	075a      	lsls	r2, r3, #29
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b008      	add	sp, #32
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	efffffff 	.word	0xefffffff
 8003abc:	feffffff 	.word	0xfeffffff
 8003ac0:	11c1808c 	.word	0x11c1808c
 8003ac4:	eefefffc 	.word	0xeefefffc

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0e9      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d91e      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b73      	ldr	r3, [pc, #460]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2207      	movs	r2, #7
 8003af0:	4393      	bics	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003afc:	f7ff f9e0 	bl	8002ec0 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b04:	e009      	b.n	8003b1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b06:	f7ff f9db 	bl	8002ec0 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_RCC_ClockConfig+0x1f4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0ca      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b1a:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2207      	movs	r2, #7
 8003b20:	4013      	ands	r3, r2
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d015      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2204      	movs	r2, #4
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d006      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b42:	21e0      	movs	r1, #224	; 0xe0
 8003b44:	01c9      	lsls	r1, r1, #7
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	; (8003cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2201      	movs	r2, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d057      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d12b      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e097      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b88:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	049b      	lsls	r3, r3, #18
 8003b90:	4013      	ands	r3, r2
 8003b92:	d11f      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e08b      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d113      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e07f      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb8:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e074      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	2202      	movs	r2, #2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e06d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2207      	movs	r2, #7
 8003bda:	4393      	bics	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7ff f96a 	bl	8002ec0 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf0:	e009      	b.n	8003c06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf2:	f7ff f965 	bl	8002ec0 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <HAL_RCC_ClockConfig+0x1f4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e054      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2238      	movs	r2, #56	; 0x38
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1ec      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	4013      	ands	r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d21e      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c38:	f7ff f942 	bl	8002ec0 <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c40:	e009      	b.n	8003c56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7ff f93d 	bl	8002ec0 <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_RCC_ClockConfig+0x1f4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e02c      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <HAL_RCC_ClockConfig+0x200>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c82:	f000 f829 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c86:	0001      	movs	r1, r0
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	220f      	movs	r2, #15
 8003c90:	401a      	ands	r2, r3
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x204>)
 8003c94:	0092      	lsls	r2, r2, #2
 8003c96:	58d3      	ldr	r3, [r2, r3]
 8003c98:	221f      	movs	r2, #31
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	000a      	movs	r2, r1
 8003c9e:	40da      	lsrs	r2, r3
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x208>)
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_ClockConfig+0x20c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff f8ad 	bl	8002e08 <HAL_InitTick>
 8003cae:	0003      	movs	r3, r0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	00001388 	.word	0x00001388
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	fffff0ff 	.word	0xfffff0ff
 8003cc8:	ffff8fff 	.word	0xffff8fff
 8003ccc:	08007e3c 	.word	0x08007e3c
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	20000008 	.word	0x20000008

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2238      	movs	r2, #56	; 0x38
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d10f      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0adb      	lsrs	r3, r3, #11
 8003cee:	2207      	movs	r2, #7
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	0013      	movs	r3, r2
 8003cf8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	4835      	ldr	r0, [pc, #212]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cfe:	f7fc fa1f 	bl	8000140 <__udivsi3>
 8003d02:	0003      	movs	r3, r0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e05d      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2238      	movs	r2, #56	; 0x38
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d14:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e054      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2238      	movs	r2, #56	; 0x38
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d138      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	2207      	movs	r2, #7
 8003d38:	4013      	ands	r3, r2
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4824      	ldr	r0, [pc, #144]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d48:	f7fc f9fa 	bl	8000140 <__udivsi3>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	0019      	movs	r1, r3
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	227f      	movs	r2, #127	; 0x7f
 8003d58:	4013      	ands	r3, r2
 8003d5a:	434b      	muls	r3, r1
 8003d5c:	617b      	str	r3, [r7, #20]
        break;
 8003d5e:	e00d      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	481c      	ldr	r0, [pc, #112]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d64:	f7fc f9ec 	bl	8000140 <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	227f      	movs	r2, #127	; 0x7f
 8003d74:	4013      	ands	r3, r2
 8003d76:	434b      	muls	r3, r1
 8003d78:	617b      	str	r3, [r7, #20]
        break;
 8003d7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0f5b      	lsrs	r3, r3, #29
 8003d82:	2207      	movs	r2, #7
 8003d84:	4013      	ands	r3, r2
 8003d86:	3301      	adds	r3, #1
 8003d88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f7fc f9d7 	bl	8000140 <__udivsi3>
 8003d92:	0003      	movs	r3, r0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e015      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2238      	movs	r2, #56	; 0x38
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d103      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2238      	movs	r2, #56	; 0x38
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b18      	cmp	r3, #24
 8003db6:	d103      	bne.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003db8:	23fa      	movs	r3, #250	; 0xfa
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dc4:	693b      	ldr	r3, [r7, #16]
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	007a1200 	.word	0x007a1200

08003ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_RCC_GetHCLKFreq+0x10>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20000004 	.word	0x20000004

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003df4:	f7ff fff2 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8003df8:	0004      	movs	r4, r0
 8003dfa:	f7ff fb3f 	bl	800347c <LL_RCC_GetAPB1Prescaler>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	0b1a      	lsrs	r2, r3, #12
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	58d3      	ldr	r3, [r2, r3]
 8003e08:	221f      	movs	r2, #31
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	40dc      	lsrs	r4, r3
 8003e0e:	0023      	movs	r3, r4
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bdb0      	pop	{r4, r5, r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	08007e7c 	.word	0x08007e7c

08003e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e04a      	b.n	8003ec4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	223d      	movs	r2, #61	; 0x3d
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223c      	movs	r2, #60	; 0x3c
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7fe fe1d 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	223d      	movs	r2, #61	; 0x3d
 8003e4e:	2102      	movs	r1, #2
 8003e50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	0010      	movs	r0, r2
 8003e5e:	f000 f9fd 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2248      	movs	r2, #72	; 0x48
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	223e      	movs	r2, #62	; 0x3e
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223f      	movs	r2, #63	; 0x3f
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2241      	movs	r2, #65	; 0x41
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2242      	movs	r2, #66	; 0x42
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2243      	movs	r2, #67	; 0x43
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2244      	movs	r2, #68	; 0x44
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2245      	movs	r2, #69	; 0x45
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2246      	movs	r2, #70	; 0x46
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2247      	movs	r2, #71	; 0x47
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223d      	movs	r2, #61	; 0x3d
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223d      	movs	r2, #61	; 0x3d
 8003ed8:	5c9b      	ldrb	r3, [r3, r2]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d001      	beq.n	8003ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e035      	b.n	8003f50 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223d      	movs	r2, #61	; 0x3d
 8003ee8:	2102      	movs	r1, #2
 8003eea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <HAL_TIM_Base_Start+0x8c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00a      	beq.n	8003f0c <HAL_TIM_Base_Start+0x40>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_Base_Start+0x40>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_TIM_Base_Start+0x90>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d116      	bne.n	8003f3a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HAL_TIM_Base_Start+0x94>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d016      	beq.n	8003f4c <HAL_TIM_Base_Start+0x80>
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d011      	beq.n	8003f4c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	e008      	b.n	8003f4c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e000      	b.n	8003f4e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b004      	add	sp, #16
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	00010007 	.word	0x00010007

08003f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	223d      	movs	r2, #61	; 0x3d
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e03d      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	223d      	movs	r2, #61	; 0x3d
 8003f80:	2102      	movs	r1, #2
 8003f82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	430a      	orrs	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x50>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	05db      	lsls	r3, r3, #23
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x50>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d116      	bne.n	8003fe2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <HAL_TIM_Base_Start_IT+0xa4>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d016      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x90>
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	025b      	lsls	r3, r3, #9
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d011      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	e008      	b.n	8003ff4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e000      	b.n	8003ff6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b004      	add	sp, #16
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	00010007 	.word	0x00010007

0800400c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d021      	beq.n	8004070 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2202      	movs	r2, #2
 8004030:	4013      	ands	r3, r2
 8004032:	d01d      	beq.n	8004070 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2203      	movs	r2, #3
 800403a:	4252      	negs	r2, r2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2203      	movs	r2, #3
 800404c:	4013      	ands	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f8ea 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8004058:	e007      	b.n	800406a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f8dd 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f8e9 	bl	800423c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2204      	movs	r2, #4
 8004074:	4013      	ands	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d01e      	beq.n	80040be <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2205      	movs	r2, #5
 8004086:	4252      	negs	r2, r2
 8004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	23c0      	movs	r3, #192	; 0xc0
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4013      	ands	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 f8c3 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 80040a6:	e007      	b.n	80040b8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f8b6 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 f8c2 	bl	800423c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2208      	movs	r2, #8
 80040c2:	4013      	ands	r3, r2
 80040c4:	d021      	beq.n	800410a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2208      	movs	r2, #8
 80040ca:	4013      	ands	r3, r2
 80040cc:	d01d      	beq.n	800410a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2209      	movs	r2, #9
 80040d4:	4252      	negs	r2, r2
 80040d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2204      	movs	r2, #4
 80040dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2203      	movs	r2, #3
 80040e6:	4013      	ands	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f89d 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 80040f2:	e007      	b.n	8004104 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f890 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f89c 	bl	800423c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2210      	movs	r2, #16
 800410e:	4013      	ands	r3, r2
 8004110:	d022      	beq.n	8004158 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2210      	movs	r2, #16
 8004116:	4013      	ands	r3, r2
 8004118:	d01e      	beq.n	8004158 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2211      	movs	r2, #17
 8004120:	4252      	negs	r2, r2
 8004122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2208      	movs	r2, #8
 8004128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	23c0      	movs	r3, #192	; 0xc0
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4013      	ands	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f876 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8004140:	e007      	b.n	8004152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f869 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f875 	bl	800423c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2201      	movs	r2, #1
 800415c:	4013      	ands	r3, r2
 800415e:	d00c      	beq.n	800417a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d008      	beq.n	800417a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	4252      	negs	r2, r2
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7fe fa9f 	bl	80026b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	4013      	ands	r3, r2
 8004180:	d104      	bne.n	800418c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	019b      	lsls	r3, r3, #6
 8004188:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800418a:	d00b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	4013      	ands	r3, r2
 8004192:	d007      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_TIM_IRQHandler+0x208>)
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f8e8 	bl	8004374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	4013      	ands	r3, r2
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_TIM_IRQHandler+0x20c>)
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 f8df 	bl	8004384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	4013      	ands	r3, r2
 80041cc:	d00c      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	4013      	ands	r3, r2
 80041d4:	d008      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2241      	movs	r2, #65	; 0x41
 80041dc:	4252      	negs	r2, r2
 80041de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 f832 	bl	800424c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2220      	movs	r2, #32
 80041ec:	4013      	ands	r3, r2
 80041ee:	d00c      	beq.n	800420a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	4013      	ands	r3, r2
 80041f6:	d008      	beq.n	800420a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2221      	movs	r2, #33	; 0x21
 80041fe:	4252      	negs	r2, r2
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f8ad 	bl	8004364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	ffffdf7f 	.word	0xffffdf7f
 8004218:	fffffeff 	.word	0xfffffeff

0800421c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	b002      	add	sp, #8
 800425a:	bd80      	pop	{r7, pc}

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a37      	ldr	r2, [pc, #220]	; (800434c <TIM_Base_SetConfig+0xf0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d008      	beq.n	8004286 <TIM_Base_SetConfig+0x2a>
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	05db      	lsls	r3, r3, #23
 800427a:	429a      	cmp	r2, r3
 800427c:	d003      	beq.n	8004286 <TIM_Base_SetConfig+0x2a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a33      	ldr	r2, [pc, #204]	; (8004350 <TIM_Base_SetConfig+0xf4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2270      	movs	r2, #112	; 0x70
 800428a:	4393      	bics	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <TIM_Base_SetConfig+0xf0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d014      	beq.n	80042ca <TIM_Base_SetConfig+0x6e>
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	05db      	lsls	r3, r3, #23
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0x6e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <TIM_Base_SetConfig+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x6e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <TIM_Base_SetConfig+0xf8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x6e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a26      	ldr	r2, [pc, #152]	; (8004358 <TIM_Base_SetConfig+0xfc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x6e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a25      	ldr	r2, [pc, #148]	; (800435c <TIM_Base_SetConfig+0x100>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <TIM_Base_SetConfig+0x104>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	4393      	bics	r3, r2
 80042e2:	001a      	movs	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <TIM_Base_SetConfig+0xf0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0xbe>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <TIM_Base_SetConfig+0xfc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0xbe>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <TIM_Base_SetConfig+0x100>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d103      	bne.n	8004322 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2201      	movs	r2, #1
 800433a:	4393      	bics	r3, r2
 800433c:	001a      	movs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	611a      	str	r2, [r3, #16]
  }
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400
 8004354:	40002000 	.word	0x40002000
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800
 8004360:	fffffcff 	.word	0xfffffcff

08004364 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b002      	add	sp, #8
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e046      	b.n	8004434 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2288      	movs	r2, #136	; 0x88
 80043aa:	589b      	ldr	r3, [r3, r2]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2284      	movs	r2, #132	; 0x84
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fe fba0 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2288      	movs	r2, #136	; 0x88
 80043c4:	2124      	movs	r1, #36	; 0x24
 80043c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 fb48 	bl	8004a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 f8cc 	bl	8004588 <UART_SetConfig>
 80043f0:	0003      	movs	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e01c      	b.n	8004434 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	490d      	ldr	r1, [pc, #52]	; (800443c <HAL_UART_Init+0xa8>)
 8004406:	400a      	ands	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	212a      	movs	r1, #42	; 0x2a
 8004416:	438a      	bics	r2, r1
 8004418:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 fbd7 	bl	8004be0 <UART_CheckIdleState>
 8004432:	0003      	movs	r3, r0
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}
 800443c:	ffffb7ff 	.word	0xffffb7ff

08004440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	1dbb      	adds	r3, r7, #6
 800444e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2288      	movs	r2, #136	; 0x88
 8004454:	589b      	ldr	r3, [r3, r2]
 8004456:	2b20      	cmp	r3, #32
 8004458:	d000      	beq.n	800445c <HAL_UART_Transmit+0x1c>
 800445a:	e090      	b.n	800457e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_UART_Transmit+0x2a>
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e088      	b.n	8004580 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	015b      	lsls	r3, r3, #5
 8004476:	429a      	cmp	r2, r3
 8004478:	d109      	bne.n	800448e <HAL_UART_Transmit+0x4e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2201      	movs	r2, #1
 8004486:	4013      	ands	r3, r2
 8004488:	d001      	beq.n	800448e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e078      	b.n	8004580 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2290      	movs	r2, #144	; 0x90
 8004492:	2100      	movs	r1, #0
 8004494:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2288      	movs	r2, #136	; 0x88
 800449a:	2121      	movs	r1, #33	; 0x21
 800449c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449e:	f7fe fd0f 	bl	8002ec0 <HAL_GetTick>
 80044a2:	0003      	movs	r3, r0
 80044a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1dba      	adds	r2, r7, #6
 80044aa:	2154      	movs	r1, #84	; 0x54
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1dba      	adds	r2, r7, #6
 80044b4:	2156      	movs	r1, #86	; 0x56
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d108      	bne.n	80044d8 <HAL_UART_Transmit+0x98>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e003      	b.n	80044e0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044e0:	e030      	b.n	8004544 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	0013      	movs	r3, r2
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	f000 fc20 	bl	8004d34 <UART_WaitOnFlagUntilTimeout>
 80044f4:	1e03      	subs	r3, r0, #0
 80044f6:	d005      	beq.n	8004504 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2288      	movs	r2, #136	; 0x88
 80044fc:	2120      	movs	r1, #32
 80044fe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e03d      	b.n	8004580 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	001a      	movs	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	05d2      	lsls	r2, r2, #23
 8004516:	0dd2      	lsrs	r2, r2, #23
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3302      	adds	r3, #2
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e007      	b.n	8004532 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2256      	movs	r2, #86	; 0x56
 8004536:	5a9b      	ldrh	r3, [r3, r2]
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b299      	uxth	r1, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2256      	movs	r2, #86	; 0x56
 8004542:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2256      	movs	r2, #86	; 0x56
 8004548:	5a9b      	ldrh	r3, [r3, r2]
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1c8      	bne.n	80044e2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	0013      	movs	r3, r2
 800455a:	2200      	movs	r2, #0
 800455c:	2140      	movs	r1, #64	; 0x40
 800455e:	f000 fbe9 	bl	8004d34 <UART_WaitOnFlagUntilTimeout>
 8004562:	1e03      	subs	r3, r0, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2288      	movs	r2, #136	; 0x88
 800456a:	2120      	movs	r1, #32
 800456c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e006      	b.n	8004580 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2288      	movs	r2, #136	; 0x88
 8004576:	2120      	movs	r1, #32
 8004578:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
  }
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b008      	add	sp, #32
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004588:	b5b0      	push	{r4, r5, r7, lr}
 800458a:	b090      	sub	sp, #64	; 0x40
 800458c:	af00      	add	r7, sp, #0
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004590:	231a      	movs	r3, #26
 8004592:	2220      	movs	r2, #32
 8004594:	189b      	adds	r3, r3, r2
 8004596:	19db      	adds	r3, r3, r7
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4ac4      	ldr	r2, [pc, #784]	; (80048cc <UART_SetConfig+0x344>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	430b      	orrs	r3, r1
 80045c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4abf      	ldr	r2, [pc, #764]	; (80048d0 <UART_SetConfig+0x348>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	0018      	movs	r0, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	0003      	movs	r3, r0
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4ab9      	ldr	r2, [pc, #740]	; (80048d4 <UART_SetConfig+0x34c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fa:	4313      	orrs	r3, r2
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4ab4      	ldr	r2, [pc, #720]	; (80048d8 <UART_SetConfig+0x350>)
 8004606:	4013      	ands	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004610:	430b      	orrs	r3, r1
 8004612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	220f      	movs	r2, #15
 800461c:	4393      	bics	r3, r2
 800461e:	0018      	movs	r0, r3
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	0003      	movs	r3, r0
 800462a:	430b      	orrs	r3, r1
 800462c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4aaa      	ldr	r2, [pc, #680]	; (80048dc <UART_SetConfig+0x354>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d131      	bne.n	800469c <UART_SetConfig+0x114>
 8004638:	4ba9      	ldr	r3, [pc, #676]	; (80048e0 <UART_SetConfig+0x358>)
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	2203      	movs	r2, #3
 800463e:	4013      	ands	r3, r2
 8004640:	2b03      	cmp	r3, #3
 8004642:	d01d      	beq.n	8004680 <UART_SetConfig+0xf8>
 8004644:	d823      	bhi.n	800468e <UART_SetConfig+0x106>
 8004646:	2b02      	cmp	r3, #2
 8004648:	d00c      	beq.n	8004664 <UART_SetConfig+0xdc>
 800464a:	d820      	bhi.n	800468e <UART_SetConfig+0x106>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <UART_SetConfig+0xce>
 8004650:	2b01      	cmp	r3, #1
 8004652:	d00e      	beq.n	8004672 <UART_SetConfig+0xea>
 8004654:	e01b      	b.n	800468e <UART_SetConfig+0x106>
 8004656:	231b      	movs	r3, #27
 8004658:	2220      	movs	r2, #32
 800465a:	189b      	adds	r3, r3, r2
 800465c:	19db      	adds	r3, r3, r7
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e071      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004664:	231b      	movs	r3, #27
 8004666:	2220      	movs	r2, #32
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2202      	movs	r2, #2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e06a      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004672:	231b      	movs	r3, #27
 8004674:	2220      	movs	r2, #32
 8004676:	189b      	adds	r3, r3, r2
 8004678:	19db      	adds	r3, r3, r7
 800467a:	2204      	movs	r2, #4
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e063      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004680:	231b      	movs	r3, #27
 8004682:	2220      	movs	r2, #32
 8004684:	189b      	adds	r3, r3, r2
 8004686:	19db      	adds	r3, r3, r7
 8004688:	2208      	movs	r2, #8
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e05c      	b.n	8004748 <UART_SetConfig+0x1c0>
 800468e:	231b      	movs	r3, #27
 8004690:	2220      	movs	r2, #32
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2210      	movs	r2, #16
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e055      	b.n	8004748 <UART_SetConfig+0x1c0>
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a90      	ldr	r2, [pc, #576]	; (80048e4 <UART_SetConfig+0x35c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d106      	bne.n	80046b4 <UART_SetConfig+0x12c>
 80046a6:	231b      	movs	r3, #27
 80046a8:	2220      	movs	r2, #32
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e049      	b.n	8004748 <UART_SetConfig+0x1c0>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a86      	ldr	r2, [pc, #536]	; (80048d4 <UART_SetConfig+0x34c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d13e      	bne.n	800473c <UART_SetConfig+0x1b4>
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <UART_SetConfig+0x358>)
 80046c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c2:	23c0      	movs	r3, #192	; 0xc0
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4013      	ands	r3, r2
 80046c8:	22c0      	movs	r2, #192	; 0xc0
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <UART_SetConfig+0x198>
 80046d0:	22c0      	movs	r2, #192	; 0xc0
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d82a      	bhi.n	800472e <UART_SetConfig+0x1a6>
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	4293      	cmp	r3, r2
 80046de:	d011      	beq.n	8004704 <UART_SetConfig+0x17c>
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d822      	bhi.n	800472e <UART_SetConfig+0x1a6>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <UART_SetConfig+0x16e>
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <UART_SetConfig+0x18a>
 80046f4:	e01b      	b.n	800472e <UART_SetConfig+0x1a6>
 80046f6:	231b      	movs	r3, #27
 80046f8:	2220      	movs	r2, #32
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	19db      	adds	r3, r3, r7
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e021      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004704:	231b      	movs	r3, #27
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2202      	movs	r2, #2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e01a      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004712:	231b      	movs	r3, #27
 8004714:	2220      	movs	r2, #32
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	2204      	movs	r2, #4
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e013      	b.n	8004748 <UART_SetConfig+0x1c0>
 8004720:	231b      	movs	r3, #27
 8004722:	2220      	movs	r2, #32
 8004724:	189b      	adds	r3, r3, r2
 8004726:	19db      	adds	r3, r3, r7
 8004728:	2208      	movs	r2, #8
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e00c      	b.n	8004748 <UART_SetConfig+0x1c0>
 800472e:	231b      	movs	r3, #27
 8004730:	2220      	movs	r2, #32
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2210      	movs	r2, #16
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e005      	b.n	8004748 <UART_SetConfig+0x1c0>
 800473c:	231b      	movs	r3, #27
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2210      	movs	r2, #16
 8004746:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <UART_SetConfig+0x34c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d000      	beq.n	8004754 <UART_SetConfig+0x1cc>
 8004752:	e092      	b.n	800487a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004754:	231b      	movs	r3, #27
 8004756:	2220      	movs	r2, #32
 8004758:	189b      	adds	r3, r3, r2
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d015      	beq.n	800478e <UART_SetConfig+0x206>
 8004762:	dc18      	bgt.n	8004796 <UART_SetConfig+0x20e>
 8004764:	2b04      	cmp	r3, #4
 8004766:	d00d      	beq.n	8004784 <UART_SetConfig+0x1fc>
 8004768:	dc15      	bgt.n	8004796 <UART_SetConfig+0x20e>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0x1ec>
 800476e:	2b02      	cmp	r3, #2
 8004770:	d005      	beq.n	800477e <UART_SetConfig+0x1f6>
 8004772:	e010      	b.n	8004796 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7ff fb3c 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8004778:	0003      	movs	r3, r0
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800477c:	e014      	b.n	80047a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <UART_SetConfig+0x360>)
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004782:	e011      	b.n	80047a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004784:	f7ff faa8 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8004788:	0003      	movs	r3, r0
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800478c:	e00c      	b.n	80047a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004794:	e008      	b.n	80047a8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800479a:	231a      	movs	r3, #26
 800479c:	2220      	movs	r2, #32
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	19db      	adds	r3, r3, r7
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
        break;
 80047a6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <UART_SetConfig+0x228>
 80047ae:	e147      	b.n	8004a40 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b4:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <UART_SetConfig+0x364>)
 80047b6:	0052      	lsls	r2, r2, #1
 80047b8:	5ad3      	ldrh	r3, [r2, r3]
 80047ba:	0019      	movs	r1, r3
 80047bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047be:	f7fb fcbf 	bl	8000140 <__udivsi3>
 80047c2:	0003      	movs	r3, r0
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	0013      	movs	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d305      	bcc.n	80047e2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047de:	429a      	cmp	r2, r3
 80047e0:	d906      	bls.n	80047f0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80047e2:	231a      	movs	r3, #26
 80047e4:	2220      	movs	r2, #32
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	19db      	adds	r3, r3, r7
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e127      	b.n	8004a40 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <UART_SetConfig+0x364>)
 80047fe:	0052      	lsls	r2, r2, #1
 8004800:	5ad3      	ldrh	r3, [r2, r3]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	f7fb fe4a 	bl	80004a8 <__aeabi_uldivmod>
 8004814:	0002      	movs	r2, r0
 8004816:	000b      	movs	r3, r1
 8004818:	0e11      	lsrs	r1, r2, #24
 800481a:	021d      	lsls	r5, r3, #8
 800481c:	430d      	orrs	r5, r1
 800481e:	0214      	lsls	r4, r2, #8
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	1900      	adds	r0, r0, r4
 8004832:	4169      	adcs	r1, r5
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f7fb fe31 	bl	80004a8 <__aeabi_uldivmod>
 8004846:	0002      	movs	r2, r0
 8004848:	000b      	movs	r3, r1
 800484a:	0013      	movs	r3, r2
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800484e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d309      	bcc.n	800486c <UART_SetConfig+0x2e4>
 8004858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	035b      	lsls	r3, r3, #13
 800485e:	429a      	cmp	r2, r3
 8004860:	d204      	bcs.n	800486c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e0e9      	b.n	8004a40 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800486c:	231a      	movs	r3, #26
 800486e:	2220      	movs	r2, #32
 8004870:	189b      	adds	r3, r3, r2
 8004872:	19db      	adds	r3, r3, r7
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e0e2      	b.n	8004a40 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	429a      	cmp	r2, r3
 8004884:	d000      	beq.n	8004888 <UART_SetConfig+0x300>
 8004886:	e083      	b.n	8004990 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004888:	231b      	movs	r3, #27
 800488a:	2220      	movs	r2, #32
 800488c:	189b      	adds	r3, r3, r2
 800488e:	19db      	adds	r3, r3, r7
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d015      	beq.n	80048c2 <UART_SetConfig+0x33a>
 8004896:	dc2b      	bgt.n	80048f0 <UART_SetConfig+0x368>
 8004898:	2b04      	cmp	r3, #4
 800489a:	d00d      	beq.n	80048b8 <UART_SetConfig+0x330>
 800489c:	dc28      	bgt.n	80048f0 <UART_SetConfig+0x368>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x320>
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d005      	beq.n	80048b2 <UART_SetConfig+0x32a>
 80048a6:	e023      	b.n	80048f0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7ff faa2 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 80048ac:	0003      	movs	r3, r0
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048b0:	e027      	b.n	8004902 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <UART_SetConfig+0x360>)
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048b6:	e024      	b.n	8004902 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b8:	f7ff fa0e 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 80048bc:	0003      	movs	r3, r0
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048c0:	e01f      	b.n	8004902 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048c8:	e01b      	b.n	8004902 <UART_SetConfig+0x37a>
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	cfff69f3 	.word	0xcfff69f3
 80048d0:	ffffcfff 	.word	0xffffcfff
 80048d4:	40008000 	.word	0x40008000
 80048d8:	11fff4ff 	.word	0x11fff4ff
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40004400 	.word	0x40004400
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	08007e9c 	.word	0x08007e9c
      default:
        pclk = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80048f4:	231a      	movs	r3, #26
 80048f6:	2220      	movs	r2, #32
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
        break;
 8004900:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d100      	bne.n	800490a <UART_SetConfig+0x382>
 8004908:	e09a      	b.n	8004a40 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800490e:	4b58      	ldr	r3, [pc, #352]	; (8004a70 <UART_SetConfig+0x4e8>)
 8004910:	0052      	lsls	r2, r2, #1
 8004912:	5ad3      	ldrh	r3, [r2, r3]
 8004914:	0019      	movs	r1, r3
 8004916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004918:	f7fb fc12 	bl	8000140 <__udivsi3>
 800491c:	0003      	movs	r3, r0
 800491e:	005a      	lsls	r2, r3, #1
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	18d2      	adds	r2, r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0019      	movs	r1, r3
 800492e:	0010      	movs	r0, r2
 8004930:	f7fb fc06 	bl	8000140 <__udivsi3>
 8004934:	0003      	movs	r3, r0
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d921      	bls.n	8004982 <UART_SetConfig+0x3fa>
 800493e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	025b      	lsls	r3, r3, #9
 8004944:	429a      	cmp	r2, r3
 8004946:	d21c      	bcs.n	8004982 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	b29a      	uxth	r2, r3
 800494c:	200e      	movs	r0, #14
 800494e:	2420      	movs	r4, #32
 8004950:	1903      	adds	r3, r0, r4
 8004952:	19db      	adds	r3, r3, r7
 8004954:	210f      	movs	r1, #15
 8004956:	438a      	bics	r2, r1
 8004958:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	b29b      	uxth	r3, r3
 8004960:	2207      	movs	r2, #7
 8004962:	4013      	ands	r3, r2
 8004964:	b299      	uxth	r1, r3
 8004966:	1903      	adds	r3, r0, r4
 8004968:	19db      	adds	r3, r3, r7
 800496a:	1902      	adds	r2, r0, r4
 800496c:	19d2      	adds	r2, r2, r7
 800496e:	8812      	ldrh	r2, [r2, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	1902      	adds	r2, r0, r4
 800497a:	19d2      	adds	r2, r2, r7
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	e05e      	b.n	8004a40 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004982:	231a      	movs	r3, #26
 8004984:	2220      	movs	r2, #32
 8004986:	189b      	adds	r3, r3, r2
 8004988:	19db      	adds	r3, r3, r7
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e057      	b.n	8004a40 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004990:	231b      	movs	r3, #27
 8004992:	2220      	movs	r2, #32
 8004994:	189b      	adds	r3, r3, r2
 8004996:	19db      	adds	r3, r3, r7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d015      	beq.n	80049ca <UART_SetConfig+0x442>
 800499e:	dc18      	bgt.n	80049d2 <UART_SetConfig+0x44a>
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d00d      	beq.n	80049c0 <UART_SetConfig+0x438>
 80049a4:	dc15      	bgt.n	80049d2 <UART_SetConfig+0x44a>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <UART_SetConfig+0x428>
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d005      	beq.n	80049ba <UART_SetConfig+0x432>
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7ff fa1e 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 80049b4:	0003      	movs	r3, r0
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049b8:	e014      	b.n	80049e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ba:	4b2e      	ldr	r3, [pc, #184]	; (8004a74 <UART_SetConfig+0x4ec>)
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049be:	e011      	b.n	80049e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c0:	f7ff f98a 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 80049c4:	0003      	movs	r3, r0
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c8:	e00c      	b.n	80049e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d0:	e008      	b.n	80049e4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80049d6:	231a      	movs	r3, #26
 80049d8:	2220      	movs	r2, #32
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	19db      	adds	r3, r3, r7
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
        break;
 80049e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02a      	beq.n	8004a40 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <UART_SetConfig+0x4e8>)
 80049f0:	0052      	lsls	r2, r2, #1
 80049f2:	5ad3      	ldrh	r3, [r2, r3]
 80049f4:	0019      	movs	r1, r3
 80049f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049f8:	f7fb fba2 	bl	8000140 <__udivsi3>
 80049fc:	0003      	movs	r3, r0
 80049fe:	001a      	movs	r2, r3
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	18d2      	adds	r2, r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	0010      	movs	r0, r2
 8004a10:	f7fb fb96 	bl	8000140 <__udivsi3>
 8004a14:	0003      	movs	r3, r0
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d90a      	bls.n	8004a34 <UART_SetConfig+0x4ac>
 8004a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	025b      	lsls	r3, r3, #9
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d205      	bcs.n	8004a34 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	e005      	b.n	8004a40 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a34:	231a      	movs	r3, #26
 8004a36:	2220      	movs	r2, #32
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	19db      	adds	r3, r3, r7
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	226a      	movs	r2, #106	; 0x6a
 8004a44:	2101      	movs	r1, #1
 8004a46:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2268      	movs	r2, #104	; 0x68
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2200      	movs	r2, #0
 8004a54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	2200      	movs	r2, #0
 8004a5a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004a5c:	231a      	movs	r3, #26
 8004a5e:	2220      	movs	r2, #32
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	19db      	adds	r3, r3, r7
 8004a64:	781b      	ldrb	r3, [r3, #0]
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b010      	add	sp, #64	; 0x40
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	08007e9c 	.word	0x08007e9c
 8004a74:	00f42400 	.word	0x00f42400

08004a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	2208      	movs	r2, #8
 8004a86:	4013      	ands	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <UART_AdvFeatureConfig+0x144>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	0019      	movs	r1, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a43      	ldr	r2, [pc, #268]	; (8004bc0 <UART_AdvFeatureConfig+0x148>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	2202      	movs	r2, #2
 8004aca:	4013      	ands	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <UART_AdvFeatureConfig+0x14c>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	2204      	movs	r2, #4
 8004aec:	4013      	ands	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a34      	ldr	r2, [pc, #208]	; (8004bc8 <UART_AdvFeatureConfig+0x150>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <UART_AdvFeatureConfig+0x154>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <UART_AdvFeatureConfig+0x158>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	4013      	ands	r3, r2
 8004b54:	d01d      	beq.n	8004b92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <UART_AdvFeatureConfig+0x15c>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	035b      	lsls	r3, r3, #13
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d10b      	bne.n	8004b92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <UART_AdvFeatureConfig+0x160>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <UART_AdvFeatureConfig+0x164>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	ffff7fff 	.word	0xffff7fff
 8004bc0:	fffdffff 	.word	0xfffdffff
 8004bc4:	fffeffff 	.word	0xfffeffff
 8004bc8:	fffbffff 	.word	0xfffbffff
 8004bcc:	ffffefff 	.word	0xffffefff
 8004bd0:	ffffdfff 	.word	0xffffdfff
 8004bd4:	ffefffff 	.word	0xffefffff
 8004bd8:	ff9fffff 	.word	0xff9fffff
 8004bdc:	fff7ffff 	.word	0xfff7ffff

08004be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b092      	sub	sp, #72	; 0x48
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2290      	movs	r2, #144	; 0x90
 8004bec:	2100      	movs	r1, #0
 8004bee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf0:	f7fe f966 	bl	8002ec0 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2208      	movs	r2, #8
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d12d      	bne.n	8004c62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	0391      	lsls	r1, r2, #14
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4a47      	ldr	r2, [pc, #284]	; (8004d2c <UART_CheckIdleState+0x14c>)
 8004c10:	9200      	str	r2, [sp, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f000 f88e 	bl	8004d34 <UART_WaitOnFlagUntilTimeout>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d022      	beq.n	8004c62 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c26:	2301      	movs	r3, #1
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	438a      	bics	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2288      	movs	r2, #136	; 0x88
 8004c52:	2120      	movs	r1, #32
 8004c54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2284      	movs	r2, #132	; 0x84
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e060      	b.n	8004d24 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2204      	movs	r2, #4
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d146      	bne.n	8004cfe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	2280      	movs	r2, #128	; 0x80
 8004c74:	03d1      	lsls	r1, r2, #15
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <UART_CheckIdleState+0x14c>)
 8004c7a:	9200      	str	r2, [sp, #0]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f000 f859 	bl	8004d34 <UART_WaitOnFlagUntilTimeout>
 8004c82:	1e03      	subs	r3, r0, #0
 8004c84:	d03b      	beq.n	8004cfe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c86:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c90:	2301      	movs	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f383 8810 	msr	PRIMASK, r3
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4922      	ldr	r1, [pc, #136]	; (8004d30 <UART_CheckIdleState+0x150>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	438a      	bics	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	228c      	movs	r2, #140	; 0x8c
 8004cee:	2120      	movs	r1, #32
 8004cf0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2284      	movs	r2, #132	; 0x84
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e012      	b.n	8004d24 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2288      	movs	r2, #136	; 0x88
 8004d02:	2120      	movs	r1, #32
 8004d04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	228c      	movs	r2, #140	; 0x8c
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2284      	movs	r2, #132	; 0x84
 8004d1e:	2100      	movs	r1, #0
 8004d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b010      	add	sp, #64	; 0x40
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	01ffffff 	.word	0x01ffffff
 8004d30:	fffffedf 	.word	0xfffffedf

08004d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d44:	e051      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	d04e      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fe f8b8 	bl	8002ec0 <HAL_GetTick>
 8004d50:	0002      	movs	r2, r0
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e051      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d03b      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d038      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d035      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d111      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f83c 	bl	8004e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2290      	movs	r2, #144	; 0x90
 8004da0:	2108      	movs	r1, #8
 8004da2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2284      	movs	r2, #132	; 0x84
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02c      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	401a      	ands	r2, r3
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d112      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2280      	movs	r2, #128	; 0x80
 8004dca:	0112      	lsls	r2, r2, #4
 8004dcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 f81f 	bl	8004e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2290      	movs	r2, #144	; 0x90
 8004dda:	2120      	movs	r1, #32
 8004ddc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2284      	movs	r2, #132	; 0x84
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e00f      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	425a      	negs	r2, r3
 8004dfa:	4153      	adcs	r3, r2
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	001a      	movs	r2, r3
 8004e00:	1dfb      	adds	r3, r7, #7
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d09e      	beq.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	617b      	str	r3, [r7, #20]
  return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f383 8810 	msr	PRIMASK, r3
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4926      	ldr	r1, [pc, #152]	; (8004ed8 <UART_EndRxTransfer+0xc4>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f383 8810 	msr	PRIMASK, r3
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	623b      	str	r3, [r7, #32]
  return(result);
 8004e54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	491b      	ldr	r1, [pc, #108]	; (8004edc <UART_EndRxTransfer+0xc8>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d118      	bne.n	8004eba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	438a      	bics	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	228c      	movs	r2, #140	; 0x8c
 8004ebe:	2120      	movs	r1, #32
 8004ec0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b00e      	add	sp, #56	; 0x38
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	fffffedf 	.word	0xfffffedf
 8004edc:	effffffe 	.word	0xeffffffe

08004ee0 <__cvt>:
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	001e      	movs	r6, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	0014      	movs	r4, r2
 8004ee8:	b08b      	sub	sp, #44	; 0x2c
 8004eea:	429e      	cmp	r6, r3
 8004eec:	da04      	bge.n	8004ef8 <__cvt+0x18>
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	0609      	lsls	r1, r1, #24
 8004ef2:	1873      	adds	r3, r6, r1
 8004ef4:	001e      	movs	r6, r3
 8004ef6:	232d      	movs	r3, #45	; 0x2d
 8004ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004efa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004efc:	7013      	strb	r3, [r2, #0]
 8004efe:	2320      	movs	r3, #32
 8004f00:	2203      	movs	r2, #3
 8004f02:	439f      	bics	r7, r3
 8004f04:	2f46      	cmp	r7, #70	; 0x46
 8004f06:	d007      	beq.n	8004f18 <__cvt+0x38>
 8004f08:	003b      	movs	r3, r7
 8004f0a:	3b45      	subs	r3, #69	; 0x45
 8004f0c:	4259      	negs	r1, r3
 8004f0e:	414b      	adcs	r3, r1
 8004f10:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004f12:	3a01      	subs	r2, #1
 8004f14:	18cb      	adds	r3, r1, r3
 8004f16:	9310      	str	r3, [sp, #64]	; 0x40
 8004f18:	ab09      	add	r3, sp, #36	; 0x24
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	ab08      	add	r3, sp, #32
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f22:	9200      	str	r2, [sp, #0]
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f28:	0022      	movs	r2, r4
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	0033      	movs	r3, r6
 8004f2e:	f000 fea7 	bl	8005c80 <_dtoa_r>
 8004f32:	0005      	movs	r5, r0
 8004f34:	2f47      	cmp	r7, #71	; 0x47
 8004f36:	d102      	bne.n	8004f3e <__cvt+0x5e>
 8004f38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f3a:	07db      	lsls	r3, r3, #31
 8004f3c:	d528      	bpl.n	8004f90 <__cvt+0xb0>
 8004f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f40:	18eb      	adds	r3, r5, r3
 8004f42:	9307      	str	r3, [sp, #28]
 8004f44:	2f46      	cmp	r7, #70	; 0x46
 8004f46:	d114      	bne.n	8004f72 <__cvt+0x92>
 8004f48:	782b      	ldrb	r3, [r5, #0]
 8004f4a:	2b30      	cmp	r3, #48	; 0x30
 8004f4c:	d10c      	bne.n	8004f68 <__cvt+0x88>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	0020      	movs	r0, r4
 8004f54:	0031      	movs	r1, r6
 8004f56:	f7fb fa79 	bl	800044c <__aeabi_dcmpeq>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d104      	bne.n	8004f68 <__cvt+0x88>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f6a:	9a07      	ldr	r2, [sp, #28]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	9307      	str	r3, [sp, #28]
 8004f72:	2200      	movs	r2, #0
 8004f74:	2300      	movs	r3, #0
 8004f76:	0020      	movs	r0, r4
 8004f78:	0031      	movs	r1, r6
 8004f7a:	f7fb fa67 	bl	800044c <__aeabi_dcmpeq>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d001      	beq.n	8004f86 <__cvt+0xa6>
 8004f82:	9b07      	ldr	r3, [sp, #28]
 8004f84:	9309      	str	r3, [sp, #36]	; 0x24
 8004f86:	2230      	movs	r2, #48	; 0x30
 8004f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8a:	9907      	ldr	r1, [sp, #28]
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	d306      	bcc.n	8004f9e <__cvt+0xbe>
 8004f90:	0028      	movs	r0, r5
 8004f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f96:	1b5b      	subs	r3, r3, r5
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	b00b      	add	sp, #44	; 0x2c
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	9109      	str	r1, [sp, #36]	; 0x24
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e7f0      	b.n	8004f88 <__cvt+0xa8>

08004fa6 <__exponent>:
 8004fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa8:	1c83      	adds	r3, r0, #2
 8004faa:	b087      	sub	sp, #28
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	0005      	movs	r5, r0
 8004fb0:	000c      	movs	r4, r1
 8004fb2:	232b      	movs	r3, #43	; 0x2b
 8004fb4:	7002      	strb	r2, [r0, #0]
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	da01      	bge.n	8004fbe <__exponent+0x18>
 8004fba:	424c      	negs	r4, r1
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	706b      	strb	r3, [r5, #1]
 8004fc0:	2c09      	cmp	r4, #9
 8004fc2:	dd2f      	ble.n	8005024 <__exponent+0x7e>
 8004fc4:	270a      	movs	r7, #10
 8004fc6:	ab04      	add	r3, sp, #16
 8004fc8:	1dde      	adds	r6, r3, #7
 8004fca:	0020      	movs	r0, r4
 8004fcc:	0039      	movs	r1, r7
 8004fce:	9601      	str	r6, [sp, #4]
 8004fd0:	f7fb fa26 	bl	8000420 <__aeabi_idivmod>
 8004fd4:	3e01      	subs	r6, #1
 8004fd6:	3130      	adds	r1, #48	; 0x30
 8004fd8:	0020      	movs	r0, r4
 8004fda:	7031      	strb	r1, [r6, #0]
 8004fdc:	0039      	movs	r1, r7
 8004fde:	9402      	str	r4, [sp, #8]
 8004fe0:	f7fb f938 	bl	8000254 <__divsi3>
 8004fe4:	9b02      	ldr	r3, [sp, #8]
 8004fe6:	0004      	movs	r4, r0
 8004fe8:	2b63      	cmp	r3, #99	; 0x63
 8004fea:	dcee      	bgt.n	8004fca <__exponent+0x24>
 8004fec:	9b01      	ldr	r3, [sp, #4]
 8004fee:	3430      	adds	r4, #48	; 0x30
 8004ff0:	1e9a      	subs	r2, r3, #2
 8004ff2:	0013      	movs	r3, r2
 8004ff4:	9903      	ldr	r1, [sp, #12]
 8004ff6:	7014      	strb	r4, [r2, #0]
 8004ff8:	a804      	add	r0, sp, #16
 8004ffa:	3007      	adds	r0, #7
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	d80c      	bhi.n	800501a <__exponent+0x74>
 8005000:	2300      	movs	r3, #0
 8005002:	4282      	cmp	r2, r0
 8005004:	d804      	bhi.n	8005010 <__exponent+0x6a>
 8005006:	aa04      	add	r2, sp, #16
 8005008:	3309      	adds	r3, #9
 800500a:	189b      	adds	r3, r3, r2
 800500c:	9a01      	ldr	r2, [sp, #4]
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	9a03      	ldr	r2, [sp, #12]
 8005012:	18d3      	adds	r3, r2, r3
 8005014:	1b58      	subs	r0, r3, r5
 8005016:	b007      	add	sp, #28
 8005018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800501a:	7818      	ldrb	r0, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	7008      	strb	r0, [r1, #0]
 8005020:	3101      	adds	r1, #1
 8005022:	e7e9      	b.n	8004ff8 <__exponent+0x52>
 8005024:	2330      	movs	r3, #48	; 0x30
 8005026:	3430      	adds	r4, #48	; 0x30
 8005028:	70ab      	strb	r3, [r5, #2]
 800502a:	70ec      	strb	r4, [r5, #3]
 800502c:	1d2b      	adds	r3, r5, #4
 800502e:	e7f1      	b.n	8005014 <__exponent+0x6e>

08005030 <_printf_float>:
 8005030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005032:	b095      	sub	sp, #84	; 0x54
 8005034:	000c      	movs	r4, r1
 8005036:	9208      	str	r2, [sp, #32]
 8005038:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	0007      	movs	r7, r0
 800503e:	f000 fd05 	bl	8005a4c <_localeconv_r>
 8005042:	6803      	ldr	r3, [r0, #0]
 8005044:	0018      	movs	r0, r3
 8005046:	930c      	str	r3, [sp, #48]	; 0x30
 8005048:	f7fb f85e 	bl	8000108 <strlen>
 800504c:	2300      	movs	r3, #0
 800504e:	9312      	str	r3, [sp, #72]	; 0x48
 8005050:	7e23      	ldrb	r3, [r4, #24]
 8005052:	2207      	movs	r2, #7
 8005054:	930a      	str	r3, [sp, #40]	; 0x28
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	900d      	str	r0, [sp, #52]	; 0x34
 800505a:	930b      	str	r3, [sp, #44]	; 0x2c
 800505c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	05c9      	lsls	r1, r1, #23
 8005062:	d547      	bpl.n	80050f4 <_printf_float+0xc4>
 8005064:	189b      	adds	r3, r3, r2
 8005066:	4393      	bics	r3, r2
 8005068:	001a      	movs	r2, r3
 800506a:	3208      	adds	r2, #8
 800506c:	602a      	str	r2, [r5, #0]
 800506e:	681e      	ldr	r6, [r3, #0]
 8005070:	685d      	ldr	r5, [r3, #4]
 8005072:	0032      	movs	r2, r6
 8005074:	002b      	movs	r3, r5
 8005076:	64a2      	str	r2, [r4, #72]	; 0x48
 8005078:	64e3      	str	r3, [r4, #76]	; 0x4c
 800507a:	2201      	movs	r2, #1
 800507c:	006b      	lsls	r3, r5, #1
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	930e      	str	r3, [sp, #56]	; 0x38
 8005082:	0030      	movs	r0, r6
 8005084:	4bab      	ldr	r3, [pc, #684]	; (8005334 <_printf_float+0x304>)
 8005086:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005088:	4252      	negs	r2, r2
 800508a:	f7fd f9f9 	bl	8002480 <__aeabi_dcmpun>
 800508e:	2800      	cmp	r0, #0
 8005090:	d132      	bne.n	80050f8 <_printf_float+0xc8>
 8005092:	2201      	movs	r2, #1
 8005094:	0030      	movs	r0, r6
 8005096:	4ba7      	ldr	r3, [pc, #668]	; (8005334 <_printf_float+0x304>)
 8005098:	990e      	ldr	r1, [sp, #56]	; 0x38
 800509a:	4252      	negs	r2, r2
 800509c:	f7fb f9e6 	bl	800046c <__aeabi_dcmple>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d129      	bne.n	80050f8 <_printf_float+0xc8>
 80050a4:	2200      	movs	r2, #0
 80050a6:	2300      	movs	r3, #0
 80050a8:	0030      	movs	r0, r6
 80050aa:	0029      	movs	r1, r5
 80050ac:	f7fb f9d4 	bl	8000458 <__aeabi_dcmplt>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d003      	beq.n	80050bc <_printf_float+0x8c>
 80050b4:	0023      	movs	r3, r4
 80050b6:	222d      	movs	r2, #45	; 0x2d
 80050b8:	3343      	adds	r3, #67	; 0x43
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050be:	4d9e      	ldr	r5, [pc, #632]	; (8005338 <_printf_float+0x308>)
 80050c0:	2b47      	cmp	r3, #71	; 0x47
 80050c2:	d900      	bls.n	80050c6 <_printf_float+0x96>
 80050c4:	4d9d      	ldr	r5, [pc, #628]	; (800533c <_printf_float+0x30c>)
 80050c6:	2303      	movs	r3, #3
 80050c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	3301      	adds	r3, #1
 80050ce:	439a      	bics	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6022      	str	r2, [r4, #0]
 80050d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	0021      	movs	r1, r4
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	0038      	movs	r0, r7
 80050de:	9b08      	ldr	r3, [sp, #32]
 80050e0:	aa13      	add	r2, sp, #76	; 0x4c
 80050e2:	f000 f9fb 	bl	80054dc <_printf_common>
 80050e6:	3001      	adds	r0, #1
 80050e8:	d000      	beq.n	80050ec <_printf_float+0xbc>
 80050ea:	e0a3      	b.n	8005234 <_printf_float+0x204>
 80050ec:	2001      	movs	r0, #1
 80050ee:	4240      	negs	r0, r0
 80050f0:	b015      	add	sp, #84	; 0x54
 80050f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f4:	3307      	adds	r3, #7
 80050f6:	e7b6      	b.n	8005066 <_printf_float+0x36>
 80050f8:	0032      	movs	r2, r6
 80050fa:	002b      	movs	r3, r5
 80050fc:	0030      	movs	r0, r6
 80050fe:	0029      	movs	r1, r5
 8005100:	f7fd f9be 	bl	8002480 <__aeabi_dcmpun>
 8005104:	2800      	cmp	r0, #0
 8005106:	d00b      	beq.n	8005120 <_printf_float+0xf0>
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_float+0xe4>
 800510c:	0023      	movs	r3, r4
 800510e:	222d      	movs	r2, #45	; 0x2d
 8005110:	3343      	adds	r3, #67	; 0x43
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005116:	4d8a      	ldr	r5, [pc, #552]	; (8005340 <_printf_float+0x310>)
 8005118:	2b47      	cmp	r3, #71	; 0x47
 800511a:	d9d4      	bls.n	80050c6 <_printf_float+0x96>
 800511c:	4d89      	ldr	r5, [pc, #548]	; (8005344 <_printf_float+0x314>)
 800511e:	e7d2      	b.n	80050c6 <_printf_float+0x96>
 8005120:	2220      	movs	r2, #32
 8005122:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	4391      	bics	r1, r2
 8005128:	910e      	str	r1, [sp, #56]	; 0x38
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	d14a      	bne.n	80051c4 <_printf_float+0x194>
 800512e:	3307      	adds	r3, #7
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4313      	orrs	r3, r2
 800513a:	2200      	movs	r2, #0
 800513c:	9206      	str	r2, [sp, #24]
 800513e:	aa12      	add	r2, sp, #72	; 0x48
 8005140:	9205      	str	r2, [sp, #20]
 8005142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	9204      	str	r2, [sp, #16]
 8005148:	aa11      	add	r2, sp, #68	; 0x44
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	2223      	movs	r2, #35	; 0x23
 800514e:	a908      	add	r1, sp, #32
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	1852      	adds	r2, r2, r1
 8005156:	9202      	str	r2, [sp, #8]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	0032      	movs	r2, r6
 800515c:	002b      	movs	r3, r5
 800515e:	0038      	movs	r0, r7
 8005160:	f7ff febe 	bl	8004ee0 <__cvt>
 8005164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005166:	0005      	movs	r5, r0
 8005168:	2b47      	cmp	r3, #71	; 0x47
 800516a:	d109      	bne.n	8005180 <_printf_float+0x150>
 800516c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800516e:	1cda      	adds	r2, r3, #3
 8005170:	db02      	blt.n	8005178 <_printf_float+0x148>
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	4293      	cmp	r3, r2
 8005176:	dd49      	ble.n	800520c <_printf_float+0x1dc>
 8005178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517a:	3b02      	subs	r3, #2
 800517c:	b2db      	uxtb	r3, r3
 800517e:	930a      	str	r3, [sp, #40]	; 0x28
 8005180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005182:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005184:	2b65      	cmp	r3, #101	; 0x65
 8005186:	d824      	bhi.n	80051d2 <_printf_float+0x1a2>
 8005188:	0020      	movs	r0, r4
 800518a:	001a      	movs	r2, r3
 800518c:	3901      	subs	r1, #1
 800518e:	3050      	adds	r0, #80	; 0x50
 8005190:	9111      	str	r1, [sp, #68]	; 0x44
 8005192:	f7ff ff08 	bl	8004fa6 <__exponent>
 8005196:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005198:	900b      	str	r0, [sp, #44]	; 0x2c
 800519a:	1813      	adds	r3, r2, r0
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	2a01      	cmp	r2, #1
 80051a0:	dc02      	bgt.n	80051a8 <_printf_float+0x178>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	07d2      	lsls	r2, r2, #31
 80051a6:	d501      	bpl.n	80051ac <_printf_float+0x17c>
 80051a8:	3301      	adds	r3, #1
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	2323      	movs	r3, #35	; 0x23
 80051ae:	aa08      	add	r2, sp, #32
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d100      	bne.n	80051ba <_printf_float+0x18a>
 80051b8:	e78d      	b.n	80050d6 <_printf_float+0xa6>
 80051ba:	0023      	movs	r3, r4
 80051bc:	222d      	movs	r2, #45	; 0x2d
 80051be:	3343      	adds	r3, #67	; 0x43
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e788      	b.n	80050d6 <_printf_float+0xa6>
 80051c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c6:	2a47      	cmp	r2, #71	; 0x47
 80051c8:	d1b3      	bne.n	8005132 <_printf_float+0x102>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1b1      	bne.n	8005132 <_printf_float+0x102>
 80051ce:	3301      	adds	r3, #1
 80051d0:	e7ae      	b.n	8005130 <_printf_float+0x100>
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	2b66      	cmp	r3, #102	; 0x66
 80051d6:	d11b      	bne.n	8005210 <_printf_float+0x1e0>
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	2900      	cmp	r1, #0
 80051dc:	dd09      	ble.n	80051f2 <_printf_float+0x1c2>
 80051de:	6121      	str	r1, [r4, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <_printf_float+0x1ba>
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	07d2      	lsls	r2, r2, #31
 80051e8:	d50b      	bpl.n	8005202 <_printf_float+0x1d2>
 80051ea:	3301      	adds	r3, #1
 80051ec:	185b      	adds	r3, r3, r1
 80051ee:	6123      	str	r3, [r4, #16]
 80051f0:	e007      	b.n	8005202 <_printf_float+0x1d2>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <_printf_float+0x1ce>
 80051f6:	2201      	movs	r2, #1
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	4211      	tst	r1, r2
 80051fc:	d000      	beq.n	8005200 <_printf_float+0x1d0>
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	6122      	str	r2, [r4, #16]
 8005202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005204:	65a3      	str	r3, [r4, #88]	; 0x58
 8005206:	2300      	movs	r3, #0
 8005208:	930b      	str	r3, [sp, #44]	; 0x2c
 800520a:	e7cf      	b.n	80051ac <_printf_float+0x17c>
 800520c:	2367      	movs	r3, #103	; 0x67
 800520e:	930a      	str	r3, [sp, #40]	; 0x28
 8005210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005214:	4299      	cmp	r1, r3
 8005216:	db06      	blt.n	8005226 <_printf_float+0x1f6>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	6121      	str	r1, [r4, #16]
 800521c:	07db      	lsls	r3, r3, #31
 800521e:	d5f0      	bpl.n	8005202 <_printf_float+0x1d2>
 8005220:	3101      	adds	r1, #1
 8005222:	6121      	str	r1, [r4, #16]
 8005224:	e7ed      	b.n	8005202 <_printf_float+0x1d2>
 8005226:	2201      	movs	r2, #1
 8005228:	2900      	cmp	r1, #0
 800522a:	dc01      	bgt.n	8005230 <_printf_float+0x200>
 800522c:	1892      	adds	r2, r2, r2
 800522e:	1a52      	subs	r2, r2, r1
 8005230:	189b      	adds	r3, r3, r2
 8005232:	e7dc      	b.n	80051ee <_printf_float+0x1be>
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	0553      	lsls	r3, r2, #21
 8005238:	d408      	bmi.n	800524c <_printf_float+0x21c>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	002a      	movs	r2, r5
 800523e:	0038      	movs	r0, r7
 8005240:	9908      	ldr	r1, [sp, #32]
 8005242:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005244:	47a8      	blx	r5
 8005246:	3001      	adds	r0, #1
 8005248:	d12a      	bne.n	80052a0 <_printf_float+0x270>
 800524a:	e74f      	b.n	80050ec <_printf_float+0xbc>
 800524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524e:	2b65      	cmp	r3, #101	; 0x65
 8005250:	d800      	bhi.n	8005254 <_printf_float+0x224>
 8005252:	e0ec      	b.n	800542e <_printf_float+0x3fe>
 8005254:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005256:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	f7fb f8f6 	bl	800044c <__aeabi_dcmpeq>
 8005260:	2800      	cmp	r0, #0
 8005262:	d034      	beq.n	80052ce <_printf_float+0x29e>
 8005264:	2301      	movs	r3, #1
 8005266:	0038      	movs	r0, r7
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <_printf_float+0x318>)
 800526a:	9908      	ldr	r1, [sp, #32]
 800526c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800526e:	47a8      	blx	r5
 8005270:	3001      	adds	r0, #1
 8005272:	d100      	bne.n	8005276 <_printf_float+0x246>
 8005274:	e73a      	b.n	80050ec <_printf_float+0xbc>
 8005276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800527a:	429a      	cmp	r2, r3
 800527c:	db02      	blt.n	8005284 <_printf_float+0x254>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07db      	lsls	r3, r3, #31
 8005282:	d50d      	bpl.n	80052a0 <_printf_float+0x270>
 8005284:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005286:	0038      	movs	r0, r7
 8005288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800528a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800528c:	9908      	ldr	r1, [sp, #32]
 800528e:	47a8      	blx	r5
 8005290:	2500      	movs	r5, #0
 8005292:	3001      	adds	r0, #1
 8005294:	d100      	bne.n	8005298 <_printf_float+0x268>
 8005296:	e729      	b.n	80050ec <_printf_float+0xbc>
 8005298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800529a:	3b01      	subs	r3, #1
 800529c:	42ab      	cmp	r3, r5
 800529e:	dc0a      	bgt.n	80052b6 <_printf_float+0x286>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	d500      	bpl.n	80052a8 <_printf_float+0x278>
 80052a6:	e116      	b.n	80054d6 <_printf_float+0x4a6>
 80052a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	4298      	cmp	r0, r3
 80052ae:	db00      	blt.n	80052b2 <_printf_float+0x282>
 80052b0:	e71e      	b.n	80050f0 <_printf_float+0xc0>
 80052b2:	0018      	movs	r0, r3
 80052b4:	e71c      	b.n	80050f0 <_printf_float+0xc0>
 80052b6:	0022      	movs	r2, r4
 80052b8:	2301      	movs	r3, #1
 80052ba:	0038      	movs	r0, r7
 80052bc:	9908      	ldr	r1, [sp, #32]
 80052be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80052c0:	321a      	adds	r2, #26
 80052c2:	47b0      	blx	r6
 80052c4:	3001      	adds	r0, #1
 80052c6:	d100      	bne.n	80052ca <_printf_float+0x29a>
 80052c8:	e710      	b.n	80050ec <_printf_float+0xbc>
 80052ca:	3501      	adds	r5, #1
 80052cc:	e7e4      	b.n	8005298 <_printf_float+0x268>
 80052ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc3b      	bgt.n	800534c <_printf_float+0x31c>
 80052d4:	2301      	movs	r3, #1
 80052d6:	0038      	movs	r0, r7
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <_printf_float+0x318>)
 80052da:	9908      	ldr	r1, [sp, #32]
 80052dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80052de:	47b0      	blx	r6
 80052e0:	3001      	adds	r0, #1
 80052e2:	d100      	bne.n	80052e6 <_printf_float+0x2b6>
 80052e4:	e702      	b.n	80050ec <_printf_float+0xbc>
 80052e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d102      	bne.n	80052f4 <_printf_float+0x2c4>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	07db      	lsls	r3, r3, #31
 80052f2:	d5d5      	bpl.n	80052a0 <_printf_float+0x270>
 80052f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052f6:	0038      	movs	r0, r7
 80052f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052fa:	9908      	ldr	r1, [sp, #32]
 80052fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80052fe:	47b0      	blx	r6
 8005300:	2300      	movs	r3, #0
 8005302:	3001      	adds	r0, #1
 8005304:	d100      	bne.n	8005308 <_printf_float+0x2d8>
 8005306:	e6f1      	b.n	80050ec <_printf_float+0xbc>
 8005308:	930a      	str	r3, [sp, #40]	; 0x28
 800530a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530e:	425b      	negs	r3, r3
 8005310:	4293      	cmp	r3, r2
 8005312:	dc01      	bgt.n	8005318 <_printf_float+0x2e8>
 8005314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005316:	e791      	b.n	800523c <_printf_float+0x20c>
 8005318:	0022      	movs	r2, r4
 800531a:	2301      	movs	r3, #1
 800531c:	0038      	movs	r0, r7
 800531e:	9908      	ldr	r1, [sp, #32]
 8005320:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005322:	321a      	adds	r2, #26
 8005324:	47b0      	blx	r6
 8005326:	3001      	adds	r0, #1
 8005328:	d100      	bne.n	800532c <_printf_float+0x2fc>
 800532a:	e6df      	b.n	80050ec <_printf_float+0xbc>
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	3301      	adds	r3, #1
 8005330:	e7ea      	b.n	8005308 <_printf_float+0x2d8>
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	7fefffff 	.word	0x7fefffff
 8005338:	08007eb4 	.word	0x08007eb4
 800533c:	08007eb8 	.word	0x08007eb8
 8005340:	08007ebc 	.word	0x08007ebc
 8005344:	08007ec0 	.word	0x08007ec0
 8005348:	08007ec4 	.word	0x08007ec4
 800534c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800534e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005350:	920a      	str	r2, [sp, #40]	; 0x28
 8005352:	429a      	cmp	r2, r3
 8005354:	dd00      	ble.n	8005358 <_printf_float+0x328>
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	dc3d      	bgt.n	80053da <_printf_float+0x3aa>
 800535e:	2300      	movs	r3, #0
 8005360:	930e      	str	r3, [sp, #56]	; 0x38
 8005362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005364:	43db      	mvns	r3, r3
 8005366:	17db      	asrs	r3, r3, #31
 8005368:	930f      	str	r3, [sp, #60]	; 0x3c
 800536a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800536c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800536e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005372:	4013      	ands	r3, r2
 8005374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800537a:	4293      	cmp	r3, r2
 800537c:	dc36      	bgt.n	80053ec <_printf_float+0x3bc>
 800537e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005382:	429a      	cmp	r2, r3
 8005384:	db40      	blt.n	8005408 <_printf_float+0x3d8>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	07db      	lsls	r3, r3, #31
 800538a:	d43d      	bmi.n	8005408 <_printf_float+0x3d8>
 800538c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800538e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005392:	1af3      	subs	r3, r6, r3
 8005394:	1ab6      	subs	r6, r6, r2
 8005396:	429e      	cmp	r6, r3
 8005398:	dd00      	ble.n	800539c <_printf_float+0x36c>
 800539a:	001e      	movs	r6, r3
 800539c:	2e00      	cmp	r6, #0
 800539e:	dc3c      	bgt.n	800541a <_printf_float+0x3ea>
 80053a0:	2300      	movs	r3, #0
 80053a2:	930a      	str	r3, [sp, #40]	; 0x28
 80053a4:	43f3      	mvns	r3, r6
 80053a6:	17db      	asrs	r3, r3, #31
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053b2:	4032      	ands	r2, r6
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053b8:	4293      	cmp	r3, r2
 80053ba:	dc00      	bgt.n	80053be <_printf_float+0x38e>
 80053bc:	e770      	b.n	80052a0 <_printf_float+0x270>
 80053be:	0022      	movs	r2, r4
 80053c0:	2301      	movs	r3, #1
 80053c2:	0038      	movs	r0, r7
 80053c4:	9908      	ldr	r1, [sp, #32]
 80053c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053c8:	321a      	adds	r2, #26
 80053ca:	47a8      	blx	r5
 80053cc:	3001      	adds	r0, #1
 80053ce:	d100      	bne.n	80053d2 <_printf_float+0x3a2>
 80053d0:	e68c      	b.n	80050ec <_printf_float+0xbc>
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	3301      	adds	r3, #1
 80053d6:	930a      	str	r3, [sp, #40]	; 0x28
 80053d8:	e7e7      	b.n	80053aa <_printf_float+0x37a>
 80053da:	002a      	movs	r2, r5
 80053dc:	0038      	movs	r0, r7
 80053de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e0:	9908      	ldr	r1, [sp, #32]
 80053e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80053e4:	47b0      	blx	r6
 80053e6:	3001      	adds	r0, #1
 80053e8:	d1b9      	bne.n	800535e <_printf_float+0x32e>
 80053ea:	e67f      	b.n	80050ec <_printf_float+0xbc>
 80053ec:	0022      	movs	r2, r4
 80053ee:	2301      	movs	r3, #1
 80053f0:	0038      	movs	r0, r7
 80053f2:	9908      	ldr	r1, [sp, #32]
 80053f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80053f6:	321a      	adds	r2, #26
 80053f8:	47b0      	blx	r6
 80053fa:	3001      	adds	r0, #1
 80053fc:	d100      	bne.n	8005400 <_printf_float+0x3d0>
 80053fe:	e675      	b.n	80050ec <_printf_float+0xbc>
 8005400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005402:	3301      	adds	r3, #1
 8005404:	930e      	str	r3, [sp, #56]	; 0x38
 8005406:	e7b0      	b.n	800536a <_printf_float+0x33a>
 8005408:	0038      	movs	r0, r7
 800540a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800540e:	9908      	ldr	r1, [sp, #32]
 8005410:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005412:	47b0      	blx	r6
 8005414:	3001      	adds	r0, #1
 8005416:	d1b9      	bne.n	800538c <_printf_float+0x35c>
 8005418:	e668      	b.n	80050ec <_printf_float+0xbc>
 800541a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541c:	0038      	movs	r0, r7
 800541e:	18ea      	adds	r2, r5, r3
 8005420:	9908      	ldr	r1, [sp, #32]
 8005422:	0033      	movs	r3, r6
 8005424:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005426:	47a8      	blx	r5
 8005428:	3001      	adds	r0, #1
 800542a:	d1b9      	bne.n	80053a0 <_printf_float+0x370>
 800542c:	e65e      	b.n	80050ec <_printf_float+0xbc>
 800542e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005430:	2b01      	cmp	r3, #1
 8005432:	dc02      	bgt.n	800543a <_printf_float+0x40a>
 8005434:	2301      	movs	r3, #1
 8005436:	421a      	tst	r2, r3
 8005438:	d03a      	beq.n	80054b0 <_printf_float+0x480>
 800543a:	2301      	movs	r3, #1
 800543c:	002a      	movs	r2, r5
 800543e:	0038      	movs	r0, r7
 8005440:	9908      	ldr	r1, [sp, #32]
 8005442:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005444:	47b0      	blx	r6
 8005446:	3001      	adds	r0, #1
 8005448:	d100      	bne.n	800544c <_printf_float+0x41c>
 800544a:	e64f      	b.n	80050ec <_printf_float+0xbc>
 800544c:	0038      	movs	r0, r7
 800544e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005452:	9908      	ldr	r1, [sp, #32]
 8005454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005456:	47b0      	blx	r6
 8005458:	3001      	adds	r0, #1
 800545a:	d100      	bne.n	800545e <_printf_float+0x42e>
 800545c:	e646      	b.n	80050ec <_printf_float+0xbc>
 800545e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005460:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005464:	2200      	movs	r2, #0
 8005466:	001e      	movs	r6, r3
 8005468:	2300      	movs	r3, #0
 800546a:	f7fa ffef 	bl	800044c <__aeabi_dcmpeq>
 800546e:	2800      	cmp	r0, #0
 8005470:	d11c      	bne.n	80054ac <_printf_float+0x47c>
 8005472:	0033      	movs	r3, r6
 8005474:	1c6a      	adds	r2, r5, #1
 8005476:	3b01      	subs	r3, #1
 8005478:	0038      	movs	r0, r7
 800547a:	9908      	ldr	r1, [sp, #32]
 800547c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800547e:	47a8      	blx	r5
 8005480:	3001      	adds	r0, #1
 8005482:	d10f      	bne.n	80054a4 <_printf_float+0x474>
 8005484:	e632      	b.n	80050ec <_printf_float+0xbc>
 8005486:	0022      	movs	r2, r4
 8005488:	2301      	movs	r3, #1
 800548a:	0038      	movs	r0, r7
 800548c:	9908      	ldr	r1, [sp, #32]
 800548e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005490:	321a      	adds	r2, #26
 8005492:	47b0      	blx	r6
 8005494:	3001      	adds	r0, #1
 8005496:	d100      	bne.n	800549a <_printf_float+0x46a>
 8005498:	e628      	b.n	80050ec <_printf_float+0xbc>
 800549a:	3501      	adds	r5, #1
 800549c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800549e:	3b01      	subs	r3, #1
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dcf0      	bgt.n	8005486 <_printf_float+0x456>
 80054a4:	0022      	movs	r2, r4
 80054a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a8:	3250      	adds	r2, #80	; 0x50
 80054aa:	e6c8      	b.n	800523e <_printf_float+0x20e>
 80054ac:	2500      	movs	r5, #0
 80054ae:	e7f5      	b.n	800549c <_printf_float+0x46c>
 80054b0:	002a      	movs	r2, r5
 80054b2:	e7e1      	b.n	8005478 <_printf_float+0x448>
 80054b4:	0022      	movs	r2, r4
 80054b6:	2301      	movs	r3, #1
 80054b8:	0038      	movs	r0, r7
 80054ba:	9908      	ldr	r1, [sp, #32]
 80054bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80054be:	3219      	adds	r2, #25
 80054c0:	47b0      	blx	r6
 80054c2:	3001      	adds	r0, #1
 80054c4:	d100      	bne.n	80054c8 <_printf_float+0x498>
 80054c6:	e611      	b.n	80050ec <_printf_float+0xbc>
 80054c8:	3501      	adds	r5, #1
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dcef      	bgt.n	80054b4 <_printf_float+0x484>
 80054d4:	e6e8      	b.n	80052a8 <_printf_float+0x278>
 80054d6:	2500      	movs	r5, #0
 80054d8:	e7f7      	b.n	80054ca <_printf_float+0x49a>
 80054da:	46c0      	nop			; (mov r8, r8)

080054dc <_printf_common>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	0016      	movs	r6, r2
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	688a      	ldr	r2, [r1, #8]
 80054e4:	690b      	ldr	r3, [r1, #16]
 80054e6:	000c      	movs	r4, r1
 80054e8:	9000      	str	r0, [sp, #0]
 80054ea:	4293      	cmp	r3, r2
 80054ec:	da00      	bge.n	80054f0 <_printf_common+0x14>
 80054ee:	0013      	movs	r3, r2
 80054f0:	0022      	movs	r2, r4
 80054f2:	6033      	str	r3, [r6, #0]
 80054f4:	3243      	adds	r2, #67	; 0x43
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	d001      	beq.n	8005500 <_printf_common+0x24>
 80054fc:	3301      	adds	r3, #1
 80054fe:	6033      	str	r3, [r6, #0]
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	069b      	lsls	r3, r3, #26
 8005504:	d502      	bpl.n	800550c <_printf_common+0x30>
 8005506:	6833      	ldr	r3, [r6, #0]
 8005508:	3302      	adds	r3, #2
 800550a:	6033      	str	r3, [r6, #0]
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	2306      	movs	r3, #6
 8005510:	0015      	movs	r5, r2
 8005512:	401d      	ands	r5, r3
 8005514:	421a      	tst	r2, r3
 8005516:	d027      	beq.n	8005568 <_printf_common+0x8c>
 8005518:	0023      	movs	r3, r4
 800551a:	3343      	adds	r3, #67	; 0x43
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	1e5a      	subs	r2, r3, #1
 8005520:	4193      	sbcs	r3, r2
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	0692      	lsls	r2, r2, #26
 8005526:	d430      	bmi.n	800558a <_printf_common+0xae>
 8005528:	0022      	movs	r2, r4
 800552a:	9901      	ldr	r1, [sp, #4]
 800552c:	9800      	ldr	r0, [sp, #0]
 800552e:	9d08      	ldr	r5, [sp, #32]
 8005530:	3243      	adds	r2, #67	; 0x43
 8005532:	47a8      	blx	r5
 8005534:	3001      	adds	r0, #1
 8005536:	d025      	beq.n	8005584 <_printf_common+0xa8>
 8005538:	2206      	movs	r2, #6
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	2500      	movs	r5, #0
 800553e:	4013      	ands	r3, r2
 8005540:	2b04      	cmp	r3, #4
 8005542:	d105      	bne.n	8005550 <_printf_common+0x74>
 8005544:	6833      	ldr	r3, [r6, #0]
 8005546:	68e5      	ldr	r5, [r4, #12]
 8005548:	1aed      	subs	r5, r5, r3
 800554a:	43eb      	mvns	r3, r5
 800554c:	17db      	asrs	r3, r3, #31
 800554e:	401d      	ands	r5, r3
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	6922      	ldr	r2, [r4, #16]
 8005554:	4293      	cmp	r3, r2
 8005556:	dd01      	ble.n	800555c <_printf_common+0x80>
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	18ed      	adds	r5, r5, r3
 800555c:	2600      	movs	r6, #0
 800555e:	42b5      	cmp	r5, r6
 8005560:	d120      	bne.n	80055a4 <_printf_common+0xc8>
 8005562:	2000      	movs	r0, #0
 8005564:	e010      	b.n	8005588 <_printf_common+0xac>
 8005566:	3501      	adds	r5, #1
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	6832      	ldr	r2, [r6, #0]
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	42ab      	cmp	r3, r5
 8005570:	ddd2      	ble.n	8005518 <_printf_common+0x3c>
 8005572:	0022      	movs	r2, r4
 8005574:	2301      	movs	r3, #1
 8005576:	9901      	ldr	r1, [sp, #4]
 8005578:	9800      	ldr	r0, [sp, #0]
 800557a:	9f08      	ldr	r7, [sp, #32]
 800557c:	3219      	adds	r2, #25
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	d1f0      	bne.n	8005566 <_printf_common+0x8a>
 8005584:	2001      	movs	r0, #1
 8005586:	4240      	negs	r0, r0
 8005588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800558a:	2030      	movs	r0, #48	; 0x30
 800558c:	18e1      	adds	r1, r4, r3
 800558e:	3143      	adds	r1, #67	; 0x43
 8005590:	7008      	strb	r0, [r1, #0]
 8005592:	0021      	movs	r1, r4
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	3145      	adds	r1, #69	; 0x45
 8005598:	7809      	ldrb	r1, [r1, #0]
 800559a:	18a2      	adds	r2, r4, r2
 800559c:	3243      	adds	r2, #67	; 0x43
 800559e:	3302      	adds	r3, #2
 80055a0:	7011      	strb	r1, [r2, #0]
 80055a2:	e7c1      	b.n	8005528 <_printf_common+0x4c>
 80055a4:	0022      	movs	r2, r4
 80055a6:	2301      	movs	r3, #1
 80055a8:	9901      	ldr	r1, [sp, #4]
 80055aa:	9800      	ldr	r0, [sp, #0]
 80055ac:	9f08      	ldr	r7, [sp, #32]
 80055ae:	321a      	adds	r2, #26
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	d0e6      	beq.n	8005584 <_printf_common+0xa8>
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7d1      	b.n	800555e <_printf_common+0x82>
	...

080055bc <_printf_i>:
 80055bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055be:	b08b      	sub	sp, #44	; 0x2c
 80055c0:	9206      	str	r2, [sp, #24]
 80055c2:	000a      	movs	r2, r1
 80055c4:	3243      	adds	r2, #67	; 0x43
 80055c6:	9307      	str	r3, [sp, #28]
 80055c8:	9005      	str	r0, [sp, #20]
 80055ca:	9204      	str	r2, [sp, #16]
 80055cc:	7e0a      	ldrb	r2, [r1, #24]
 80055ce:	000c      	movs	r4, r1
 80055d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055d2:	2a78      	cmp	r2, #120	; 0x78
 80055d4:	d809      	bhi.n	80055ea <_printf_i+0x2e>
 80055d6:	2a62      	cmp	r2, #98	; 0x62
 80055d8:	d80b      	bhi.n	80055f2 <_printf_i+0x36>
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d100      	bne.n	80055e0 <_printf_i+0x24>
 80055de:	e0be      	b.n	800575e <_printf_i+0x1a2>
 80055e0:	497c      	ldr	r1, [pc, #496]	; (80057d4 <_printf_i+0x218>)
 80055e2:	9103      	str	r1, [sp, #12]
 80055e4:	2a58      	cmp	r2, #88	; 0x58
 80055e6:	d100      	bne.n	80055ea <_printf_i+0x2e>
 80055e8:	e093      	b.n	8005712 <_printf_i+0x156>
 80055ea:	0026      	movs	r6, r4
 80055ec:	3642      	adds	r6, #66	; 0x42
 80055ee:	7032      	strb	r2, [r6, #0]
 80055f0:	e022      	b.n	8005638 <_printf_i+0x7c>
 80055f2:	0010      	movs	r0, r2
 80055f4:	3863      	subs	r0, #99	; 0x63
 80055f6:	2815      	cmp	r0, #21
 80055f8:	d8f7      	bhi.n	80055ea <_printf_i+0x2e>
 80055fa:	f7fa fd97 	bl	800012c <__gnu_thumb1_case_shi>
 80055fe:	0016      	.short	0x0016
 8005600:	fff6001f 	.word	0xfff6001f
 8005604:	fff6fff6 	.word	0xfff6fff6
 8005608:	001ffff6 	.word	0x001ffff6
 800560c:	fff6fff6 	.word	0xfff6fff6
 8005610:	fff6fff6 	.word	0xfff6fff6
 8005614:	003600a3 	.word	0x003600a3
 8005618:	fff60083 	.word	0xfff60083
 800561c:	00b4fff6 	.word	0x00b4fff6
 8005620:	0036fff6 	.word	0x0036fff6
 8005624:	fff6fff6 	.word	0xfff6fff6
 8005628:	0087      	.short	0x0087
 800562a:	0026      	movs	r6, r4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	3642      	adds	r6, #66	; 0x42
 8005630:	1d11      	adds	r1, r2, #4
 8005632:	6019      	str	r1, [r3, #0]
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	7033      	strb	r3, [r6, #0]
 8005638:	2301      	movs	r3, #1
 800563a:	e0a2      	b.n	8005782 <_printf_i+0x1c6>
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	6809      	ldr	r1, [r1, #0]
 8005640:	1d02      	adds	r2, r0, #4
 8005642:	060d      	lsls	r5, r1, #24
 8005644:	d50b      	bpl.n	800565e <_printf_i+0xa2>
 8005646:	6805      	ldr	r5, [r0, #0]
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	2d00      	cmp	r5, #0
 800564c:	da03      	bge.n	8005656 <_printf_i+0x9a>
 800564e:	232d      	movs	r3, #45	; 0x2d
 8005650:	9a04      	ldr	r2, [sp, #16]
 8005652:	426d      	negs	r5, r5
 8005654:	7013      	strb	r3, [r2, #0]
 8005656:	4b5f      	ldr	r3, [pc, #380]	; (80057d4 <_printf_i+0x218>)
 8005658:	270a      	movs	r7, #10
 800565a:	9303      	str	r3, [sp, #12]
 800565c:	e01b      	b.n	8005696 <_printf_i+0xda>
 800565e:	6805      	ldr	r5, [r0, #0]
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	0649      	lsls	r1, r1, #25
 8005664:	d5f1      	bpl.n	800564a <_printf_i+0x8e>
 8005666:	b22d      	sxth	r5, r5
 8005668:	e7ef      	b.n	800564a <_printf_i+0x8e>
 800566a:	680d      	ldr	r5, [r1, #0]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	1d08      	adds	r0, r1, #4
 8005670:	6018      	str	r0, [r3, #0]
 8005672:	062e      	lsls	r6, r5, #24
 8005674:	d501      	bpl.n	800567a <_printf_i+0xbe>
 8005676:	680d      	ldr	r5, [r1, #0]
 8005678:	e003      	b.n	8005682 <_printf_i+0xc6>
 800567a:	066d      	lsls	r5, r5, #25
 800567c:	d5fb      	bpl.n	8005676 <_printf_i+0xba>
 800567e:	680d      	ldr	r5, [r1, #0]
 8005680:	b2ad      	uxth	r5, r5
 8005682:	4b54      	ldr	r3, [pc, #336]	; (80057d4 <_printf_i+0x218>)
 8005684:	2708      	movs	r7, #8
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	2a6f      	cmp	r2, #111	; 0x6f
 800568a:	d000      	beq.n	800568e <_printf_i+0xd2>
 800568c:	3702      	adds	r7, #2
 800568e:	0023      	movs	r3, r4
 8005690:	2200      	movs	r2, #0
 8005692:	3343      	adds	r3, #67	; 0x43
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	6863      	ldr	r3, [r4, #4]
 8005698:	60a3      	str	r3, [r4, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db03      	blt.n	80056a6 <_printf_i+0xea>
 800569e:	2104      	movs	r1, #4
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	438a      	bics	r2, r1
 80056a4:	6022      	str	r2, [r4, #0]
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	d102      	bne.n	80056b0 <_printf_i+0xf4>
 80056aa:	9e04      	ldr	r6, [sp, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <_printf_i+0x10e>
 80056b0:	9e04      	ldr	r6, [sp, #16]
 80056b2:	0028      	movs	r0, r5
 80056b4:	0039      	movs	r1, r7
 80056b6:	f7fa fdc9 	bl	800024c <__aeabi_uidivmod>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3e01      	subs	r6, #1
 80056be:	5c5b      	ldrb	r3, [r3, r1]
 80056c0:	7033      	strb	r3, [r6, #0]
 80056c2:	002b      	movs	r3, r5
 80056c4:	0005      	movs	r5, r0
 80056c6:	429f      	cmp	r7, r3
 80056c8:	d9f3      	bls.n	80056b2 <_printf_i+0xf6>
 80056ca:	2f08      	cmp	r7, #8
 80056cc:	d109      	bne.n	80056e2 <_printf_i+0x126>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	07db      	lsls	r3, r3, #31
 80056d2:	d506      	bpl.n	80056e2 <_printf_i+0x126>
 80056d4:	6862      	ldr	r2, [r4, #4]
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	dc02      	bgt.n	80056e2 <_printf_i+0x126>
 80056dc:	2330      	movs	r3, #48	; 0x30
 80056de:	3e01      	subs	r6, #1
 80056e0:	7033      	strb	r3, [r6, #0]
 80056e2:	9b04      	ldr	r3, [sp, #16]
 80056e4:	1b9b      	subs	r3, r3, r6
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	9b07      	ldr	r3, [sp, #28]
 80056ea:	0021      	movs	r1, r4
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	9805      	ldr	r0, [sp, #20]
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	aa09      	add	r2, sp, #36	; 0x24
 80056f4:	f7ff fef2 	bl	80054dc <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d147      	bne.n	800578c <_printf_i+0x1d0>
 80056fc:	2001      	movs	r0, #1
 80056fe:	4240      	negs	r0, r0
 8005700:	b00b      	add	sp, #44	; 0x2c
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005704:	2220      	movs	r2, #32
 8005706:	6809      	ldr	r1, [r1, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	6022      	str	r2, [r4, #0]
 800570c:	2278      	movs	r2, #120	; 0x78
 800570e:	4932      	ldr	r1, [pc, #200]	; (80057d8 <_printf_i+0x21c>)
 8005710:	9103      	str	r1, [sp, #12]
 8005712:	0021      	movs	r1, r4
 8005714:	3145      	adds	r1, #69	; 0x45
 8005716:	700a      	strb	r2, [r1, #0]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	c920      	ldmia	r1!, {r5}
 800571e:	0610      	lsls	r0, r2, #24
 8005720:	d402      	bmi.n	8005728 <_printf_i+0x16c>
 8005722:	0650      	lsls	r0, r2, #25
 8005724:	d500      	bpl.n	8005728 <_printf_i+0x16c>
 8005726:	b2ad      	uxth	r5, r5
 8005728:	6019      	str	r1, [r3, #0]
 800572a:	07d3      	lsls	r3, r2, #31
 800572c:	d502      	bpl.n	8005734 <_printf_i+0x178>
 800572e:	2320      	movs	r3, #32
 8005730:	4313      	orrs	r3, r2
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	2710      	movs	r7, #16
 8005736:	2d00      	cmp	r5, #0
 8005738:	d1a9      	bne.n	800568e <_printf_i+0xd2>
 800573a:	2220      	movs	r2, #32
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	4393      	bics	r3, r2
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	e7a4      	b.n	800568e <_printf_i+0xd2>
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	680d      	ldr	r5, [r1, #0]
 8005748:	1d10      	adds	r0, r2, #4
 800574a:	6949      	ldr	r1, [r1, #20]
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	062e      	lsls	r6, r5, #24
 8005752:	d501      	bpl.n	8005758 <_printf_i+0x19c>
 8005754:	6019      	str	r1, [r3, #0]
 8005756:	e002      	b.n	800575e <_printf_i+0x1a2>
 8005758:	066d      	lsls	r5, r5, #25
 800575a:	d5fb      	bpl.n	8005754 <_printf_i+0x198>
 800575c:	8019      	strh	r1, [r3, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	9e04      	ldr	r6, [sp, #16]
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	e7c0      	b.n	80056e8 <_printf_i+0x12c>
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	1d11      	adds	r1, r2, #4
 800576a:	6019      	str	r1, [r3, #0]
 800576c:	6816      	ldr	r6, [r2, #0]
 800576e:	2100      	movs	r1, #0
 8005770:	0030      	movs	r0, r6
 8005772:	6862      	ldr	r2, [r4, #4]
 8005774:	f000 f9e9 	bl	8005b4a <memchr>
 8005778:	2800      	cmp	r0, #0
 800577a:	d001      	beq.n	8005780 <_printf_i+0x1c4>
 800577c:	1b80      	subs	r0, r0, r6
 800577e:	6060      	str	r0, [r4, #4]
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	2300      	movs	r3, #0
 8005786:	9a04      	ldr	r2, [sp, #16]
 8005788:	7013      	strb	r3, [r2, #0]
 800578a:	e7ad      	b.n	80056e8 <_printf_i+0x12c>
 800578c:	0032      	movs	r2, r6
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	9906      	ldr	r1, [sp, #24]
 8005792:	9805      	ldr	r0, [sp, #20]
 8005794:	9d07      	ldr	r5, [sp, #28]
 8005796:	47a8      	blx	r5
 8005798:	3001      	adds	r0, #1
 800579a:	d0af      	beq.n	80056fc <_printf_i+0x140>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	079b      	lsls	r3, r3, #30
 80057a0:	d415      	bmi.n	80057ce <_printf_i+0x212>
 80057a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a4:	68e0      	ldr	r0, [r4, #12]
 80057a6:	4298      	cmp	r0, r3
 80057a8:	daaa      	bge.n	8005700 <_printf_i+0x144>
 80057aa:	0018      	movs	r0, r3
 80057ac:	e7a8      	b.n	8005700 <_printf_i+0x144>
 80057ae:	0022      	movs	r2, r4
 80057b0:	2301      	movs	r3, #1
 80057b2:	9906      	ldr	r1, [sp, #24]
 80057b4:	9805      	ldr	r0, [sp, #20]
 80057b6:	9e07      	ldr	r6, [sp, #28]
 80057b8:	3219      	adds	r2, #25
 80057ba:	47b0      	blx	r6
 80057bc:	3001      	adds	r0, #1
 80057be:	d09d      	beq.n	80056fc <_printf_i+0x140>
 80057c0:	3501      	adds	r5, #1
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	dcf0      	bgt.n	80057ae <_printf_i+0x1f2>
 80057cc:	e7e9      	b.n	80057a2 <_printf_i+0x1e6>
 80057ce:	2500      	movs	r5, #0
 80057d0:	e7f7      	b.n	80057c2 <_printf_i+0x206>
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	08007ec6 	.word	0x08007ec6
 80057d8:	08007ed7 	.word	0x08007ed7

080057dc <std>:
 80057dc:	2300      	movs	r3, #0
 80057de:	b510      	push	{r4, lr}
 80057e0:	0004      	movs	r4, r0
 80057e2:	6003      	str	r3, [r0, #0]
 80057e4:	6043      	str	r3, [r0, #4]
 80057e6:	6083      	str	r3, [r0, #8]
 80057e8:	8181      	strh	r1, [r0, #12]
 80057ea:	6643      	str	r3, [r0, #100]	; 0x64
 80057ec:	81c2      	strh	r2, [r0, #14]
 80057ee:	6103      	str	r3, [r0, #16]
 80057f0:	6143      	str	r3, [r0, #20]
 80057f2:	6183      	str	r3, [r0, #24]
 80057f4:	0019      	movs	r1, r3
 80057f6:	2208      	movs	r2, #8
 80057f8:	305c      	adds	r0, #92	; 0x5c
 80057fa:	f000 f91f 	bl	8005a3c <memset>
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <std+0x50>)
 8005800:	6224      	str	r4, [r4, #32]
 8005802:	6263      	str	r3, [r4, #36]	; 0x24
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <std+0x54>)
 8005806:	62a3      	str	r3, [r4, #40]	; 0x28
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <std+0x58>)
 800580a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <std+0x5c>)
 800580e:	6323      	str	r3, [r4, #48]	; 0x30
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <std+0x60>)
 8005812:	429c      	cmp	r4, r3
 8005814:	d005      	beq.n	8005822 <std+0x46>
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <std+0x64>)
 8005818:	429c      	cmp	r4, r3
 800581a:	d002      	beq.n	8005822 <std+0x46>
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <std+0x68>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d103      	bne.n	800582a <std+0x4e>
 8005822:	0020      	movs	r0, r4
 8005824:	3058      	adds	r0, #88	; 0x58
 8005826:	f000 f98d 	bl	8005b44 <__retarget_lock_init_recursive>
 800582a:	bd10      	pop	{r4, pc}
 800582c:	080059a5 	.word	0x080059a5
 8005830:	080059cd 	.word	0x080059cd
 8005834:	08005a05 	.word	0x08005a05
 8005838:	08005a31 	.word	0x08005a31
 800583c:	2000036c 	.word	0x2000036c
 8005840:	200003d4 	.word	0x200003d4
 8005844:	2000043c 	.word	0x2000043c

08005848 <stdio_exit_handler>:
 8005848:	b510      	push	{r4, lr}
 800584a:	4a03      	ldr	r2, [pc, #12]	; (8005858 <stdio_exit_handler+0x10>)
 800584c:	4903      	ldr	r1, [pc, #12]	; (800585c <stdio_exit_handler+0x14>)
 800584e:	4804      	ldr	r0, [pc, #16]	; (8005860 <stdio_exit_handler+0x18>)
 8005850:	f000 f86c 	bl	800592c <_fwalk_sglue>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	20000010 	.word	0x20000010
 800585c:	080075b9 	.word	0x080075b9
 8005860:	2000001c 	.word	0x2000001c

08005864 <cleanup_stdio>:
 8005864:	6841      	ldr	r1, [r0, #4]
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <cleanup_stdio+0x30>)
 8005868:	b510      	push	{r4, lr}
 800586a:	0004      	movs	r4, r0
 800586c:	4299      	cmp	r1, r3
 800586e:	d001      	beq.n	8005874 <cleanup_stdio+0x10>
 8005870:	f001 fea2 	bl	80075b8 <_fflush_r>
 8005874:	68a1      	ldr	r1, [r4, #8]
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <cleanup_stdio+0x34>)
 8005878:	4299      	cmp	r1, r3
 800587a:	d002      	beq.n	8005882 <cleanup_stdio+0x1e>
 800587c:	0020      	movs	r0, r4
 800587e:	f001 fe9b 	bl	80075b8 <_fflush_r>
 8005882:	68e1      	ldr	r1, [r4, #12]
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <cleanup_stdio+0x38>)
 8005886:	4299      	cmp	r1, r3
 8005888:	d002      	beq.n	8005890 <cleanup_stdio+0x2c>
 800588a:	0020      	movs	r0, r4
 800588c:	f001 fe94 	bl	80075b8 <_fflush_r>
 8005890:	bd10      	pop	{r4, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	2000036c 	.word	0x2000036c
 8005898:	200003d4 	.word	0x200003d4
 800589c:	2000043c 	.word	0x2000043c

080058a0 <global_stdio_init.part.0>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <global_stdio_init.part.0+0x28>)
 80058a4:	4a09      	ldr	r2, [pc, #36]	; (80058cc <global_stdio_init.part.0+0x2c>)
 80058a6:	2104      	movs	r1, #4
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	4809      	ldr	r0, [pc, #36]	; (80058d0 <global_stdio_init.part.0+0x30>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	f7ff ff95 	bl	80057dc <std>
 80058b2:	2201      	movs	r2, #1
 80058b4:	2109      	movs	r1, #9
 80058b6:	4807      	ldr	r0, [pc, #28]	; (80058d4 <global_stdio_init.part.0+0x34>)
 80058b8:	f7ff ff90 	bl	80057dc <std>
 80058bc:	2202      	movs	r2, #2
 80058be:	2112      	movs	r1, #18
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <global_stdio_init.part.0+0x38>)
 80058c2:	f7ff ff8b 	bl	80057dc <std>
 80058c6:	bd10      	pop	{r4, pc}
 80058c8:	200004a4 	.word	0x200004a4
 80058cc:	08005849 	.word	0x08005849
 80058d0:	2000036c 	.word	0x2000036c
 80058d4:	200003d4 	.word	0x200003d4
 80058d8:	2000043c 	.word	0x2000043c

080058dc <__sfp_lock_acquire>:
 80058dc:	b510      	push	{r4, lr}
 80058de:	4802      	ldr	r0, [pc, #8]	; (80058e8 <__sfp_lock_acquire+0xc>)
 80058e0:	f000 f931 	bl	8005b46 <__retarget_lock_acquire_recursive>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	200004ad 	.word	0x200004ad

080058ec <__sfp_lock_release>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4802      	ldr	r0, [pc, #8]	; (80058f8 <__sfp_lock_release+0xc>)
 80058f0:	f000 f92a 	bl	8005b48 <__retarget_lock_release_recursive>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	200004ad 	.word	0x200004ad

080058fc <__sinit>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	0004      	movs	r4, r0
 8005900:	f7ff ffec 	bl	80058dc <__sfp_lock_acquire>
 8005904:	6a23      	ldr	r3, [r4, #32]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <__sinit+0x14>
 800590a:	f7ff ffef 	bl	80058ec <__sfp_lock_release>
 800590e:	bd10      	pop	{r4, pc}
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <__sinit+0x28>)
 8005912:	6223      	str	r3, [r4, #32]
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <__sinit+0x2c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f6      	bne.n	800590a <__sinit+0xe>
 800591c:	f7ff ffc0 	bl	80058a0 <global_stdio_init.part.0>
 8005920:	e7f3      	b.n	800590a <__sinit+0xe>
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	08005865 	.word	0x08005865
 8005928:	200004a4 	.word	0x200004a4

0800592c <_fwalk_sglue>:
 800592c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592e:	0014      	movs	r4, r2
 8005930:	2600      	movs	r6, #0
 8005932:	9000      	str	r0, [sp, #0]
 8005934:	9101      	str	r1, [sp, #4]
 8005936:	68a5      	ldr	r5, [r4, #8]
 8005938:	6867      	ldr	r7, [r4, #4]
 800593a:	3f01      	subs	r7, #1
 800593c:	d504      	bpl.n	8005948 <_fwalk_sglue+0x1c>
 800593e:	6824      	ldr	r4, [r4, #0]
 8005940:	2c00      	cmp	r4, #0
 8005942:	d1f8      	bne.n	8005936 <_fwalk_sglue+0xa>
 8005944:	0030      	movs	r0, r6
 8005946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005948:	89ab      	ldrh	r3, [r5, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d908      	bls.n	8005960 <_fwalk_sglue+0x34>
 800594e:	220e      	movs	r2, #14
 8005950:	5eab      	ldrsh	r3, [r5, r2]
 8005952:	3301      	adds	r3, #1
 8005954:	d004      	beq.n	8005960 <_fwalk_sglue+0x34>
 8005956:	0029      	movs	r1, r5
 8005958:	9800      	ldr	r0, [sp, #0]
 800595a:	9b01      	ldr	r3, [sp, #4]
 800595c:	4798      	blx	r3
 800595e:	4306      	orrs	r6, r0
 8005960:	3568      	adds	r5, #104	; 0x68
 8005962:	e7ea      	b.n	800593a <_fwalk_sglue+0xe>

08005964 <siprintf>:
 8005964:	b40e      	push	{r1, r2, r3}
 8005966:	b500      	push	{lr}
 8005968:	490b      	ldr	r1, [pc, #44]	; (8005998 <siprintf+0x34>)
 800596a:	b09c      	sub	sp, #112	; 0x70
 800596c:	ab1d      	add	r3, sp, #116	; 0x74
 800596e:	9002      	str	r0, [sp, #8]
 8005970:	9006      	str	r0, [sp, #24]
 8005972:	9107      	str	r1, [sp, #28]
 8005974:	9104      	str	r1, [sp, #16]
 8005976:	4809      	ldr	r0, [pc, #36]	; (800599c <siprintf+0x38>)
 8005978:	4909      	ldr	r1, [pc, #36]	; (80059a0 <siprintf+0x3c>)
 800597a:	cb04      	ldmia	r3!, {r2}
 800597c:	9105      	str	r1, [sp, #20]
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	a902      	add	r1, sp, #8
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	f001 fc8e 	bl	80072a4 <_svfiprintf_r>
 8005988:	2200      	movs	r2, #0
 800598a:	9b02      	ldr	r3, [sp, #8]
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	b01c      	add	sp, #112	; 0x70
 8005990:	bc08      	pop	{r3}
 8005992:	b003      	add	sp, #12
 8005994:	4718      	bx	r3
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	7fffffff 	.word	0x7fffffff
 800599c:	20000068 	.word	0x20000068
 80059a0:	ffff0208 	.word	0xffff0208

080059a4 <__sread>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	000c      	movs	r4, r1
 80059a8:	250e      	movs	r5, #14
 80059aa:	5f49      	ldrsh	r1, [r1, r5]
 80059ac:	f000 f878 	bl	8005aa0 <_read_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	db03      	blt.n	80059bc <__sread+0x18>
 80059b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059b6:	181b      	adds	r3, r3, r0
 80059b8:	6563      	str	r3, [r4, #84]	; 0x54
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	4a02      	ldr	r2, [pc, #8]	; (80059c8 <__sread+0x24>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	e7f9      	b.n	80059ba <__sread+0x16>
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	ffffefff 	.word	0xffffefff

080059cc <__swrite>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	001f      	movs	r7, r3
 80059d0:	898b      	ldrh	r3, [r1, #12]
 80059d2:	0005      	movs	r5, r0
 80059d4:	000c      	movs	r4, r1
 80059d6:	0016      	movs	r6, r2
 80059d8:	05db      	lsls	r3, r3, #23
 80059da:	d505      	bpl.n	80059e8 <__swrite+0x1c>
 80059dc:	230e      	movs	r3, #14
 80059de:	5ec9      	ldrsh	r1, [r1, r3]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2302      	movs	r3, #2
 80059e4:	f000 f848 	bl	8005a78 <_lseek_r>
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <__swrite+0x34>)
 80059ec:	0028      	movs	r0, r5
 80059ee:	4013      	ands	r3, r2
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	0032      	movs	r2, r6
 80059f4:	230e      	movs	r3, #14
 80059f6:	5ee1      	ldrsh	r1, [r4, r3]
 80059f8:	003b      	movs	r3, r7
 80059fa:	f000 f865 	bl	8005ac8 <_write_r>
 80059fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a00:	ffffefff 	.word	0xffffefff

08005a04 <__sseek>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	000c      	movs	r4, r1
 8005a08:	250e      	movs	r5, #14
 8005a0a:	5f49      	ldrsh	r1, [r1, r5]
 8005a0c:	f000 f834 	bl	8005a78 <_lseek_r>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	1c42      	adds	r2, r0, #1
 8005a14:	d103      	bne.n	8005a1e <__sseek+0x1a>
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <__sseek+0x28>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	0152      	lsls	r2, r2, #5
 8005a22:	4313      	orrs	r3, r2
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	6560      	str	r0, [r4, #84]	; 0x54
 8005a28:	e7f8      	b.n	8005a1c <__sseek+0x18>
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	ffffefff 	.word	0xffffefff

08005a30 <__sclose>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	230e      	movs	r3, #14
 8005a34:	5ec9      	ldrsh	r1, [r1, r3]
 8005a36:	f000 f80d 	bl	8005a54 <_close_r>
 8005a3a:	bd10      	pop	{r4, pc}

08005a3c <memset>:
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	1882      	adds	r2, r0, r2
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d100      	bne.n	8005a46 <memset+0xa>
 8005a44:	4770      	bx	lr
 8005a46:	7019      	strb	r1, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	e7f9      	b.n	8005a40 <memset+0x4>

08005a4c <_localeconv_r>:
 8005a4c:	4800      	ldr	r0, [pc, #0]	; (8005a50 <_localeconv_r+0x4>)
 8005a4e:	4770      	bx	lr
 8005a50:	2000015c 	.word	0x2000015c

08005a54 <_close_r>:
 8005a54:	2300      	movs	r3, #0
 8005a56:	b570      	push	{r4, r5, r6, lr}
 8005a58:	4d06      	ldr	r5, [pc, #24]	; (8005a74 <_close_r+0x20>)
 8005a5a:	0004      	movs	r4, r0
 8005a5c:	0008      	movs	r0, r1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fd f91f 	bl	8002ca2 <_close>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d103      	bne.n	8005a70 <_close_r+0x1c>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d000      	beq.n	8005a70 <_close_r+0x1c>
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	200004a8 	.word	0x200004a8

08005a78 <_lseek_r>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	0004      	movs	r4, r0
 8005a7c:	0008      	movs	r0, r1
 8005a7e:	0011      	movs	r1, r2
 8005a80:	001a      	movs	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	4d05      	ldr	r5, [pc, #20]	; (8005a9c <_lseek_r+0x24>)
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fd f92c 	bl	8002ce4 <_lseek>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d103      	bne.n	8005a98 <_lseek_r+0x20>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d000      	beq.n	8005a98 <_lseek_r+0x20>
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	200004a8 	.word	0x200004a8

08005aa0 <_read_r>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	0004      	movs	r4, r0
 8005aa4:	0008      	movs	r0, r1
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	001a      	movs	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4d05      	ldr	r5, [pc, #20]	; (8005ac4 <_read_r+0x24>)
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fd f8be 	bl	8002c30 <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d103      	bne.n	8005ac0 <_read_r+0x20>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d000      	beq.n	8005ac0 <_read_r+0x20>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	200004a8 	.word	0x200004a8

08005ac8 <_write_r>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	0004      	movs	r4, r0
 8005acc:	0008      	movs	r0, r1
 8005ace:	0011      	movs	r1, r2
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4d05      	ldr	r5, [pc, #20]	; (8005aec <_write_r+0x24>)
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fd f8c7 	bl	8002c6a <_write>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_write_r+0x20>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d000      	beq.n	8005ae8 <_write_r+0x20>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd70      	pop	{r4, r5, r6, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	200004a8 	.word	0x200004a8

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	20000068 	.word	0x20000068

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	2600      	movs	r6, #0
 8005b00:	4c0c      	ldr	r4, [pc, #48]	; (8005b34 <__libc_init_array+0x38>)
 8005b02:	4d0d      	ldr	r5, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	f002 f923 	bl	8007d58 <_init>
 8005b12:	4c0a      	ldr	r4, [pc, #40]	; (8005b3c <__libc_init_array+0x40>)
 8005b14:	4d0a      	ldr	r5, [pc, #40]	; (8005b40 <__libc_init_array+0x44>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	00b3      	lsls	r3, r6, #2
 8005b22:	58eb      	ldr	r3, [r5, r3]
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	00b3      	lsls	r3, r6, #2
 8005b2c:	58eb      	ldr	r3, [r5, r3]
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	0800822c 	.word	0x0800822c
 8005b38:	0800822c 	.word	0x0800822c
 8005b3c:	08008230 	.word	0x08008230
 8005b40:	0800822c 	.word	0x0800822c

08005b44 <__retarget_lock_init_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <__retarget_lock_acquire_recursive>:
 8005b46:	4770      	bx	lr

08005b48 <__retarget_lock_release_recursive>:
 8005b48:	4770      	bx	lr

08005b4a <memchr>:
 8005b4a:	b2c9      	uxtb	r1, r1
 8005b4c:	1882      	adds	r2, r0, r2
 8005b4e:	4290      	cmp	r0, r2
 8005b50:	d101      	bne.n	8005b56 <memchr+0xc>
 8005b52:	2000      	movs	r0, #0
 8005b54:	4770      	bx	lr
 8005b56:	7803      	ldrb	r3, [r0, #0]
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d0fb      	beq.n	8005b54 <memchr+0xa>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	e7f6      	b.n	8005b4e <memchr+0x4>

08005b60 <quorem>:
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	6902      	ldr	r2, [r0, #16]
 8005b64:	690b      	ldr	r3, [r1, #16]
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	0007      	movs	r7, r0
 8005b6a:	9104      	str	r1, [sp, #16]
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	db69      	blt.n	8005c46 <quorem+0xe6>
 8005b72:	3b01      	subs	r3, #1
 8005b74:	009c      	lsls	r4, r3, #2
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	000b      	movs	r3, r1
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	191b      	adds	r3, r3, r4
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	003b      	movs	r3, r7
 8005b84:	3314      	adds	r3, #20
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	191c      	adds	r4, r3, r4
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	6826      	ldr	r6, [r4, #0]
 8005b8e:	681d      	ldr	r5, [r3, #0]
 8005b90:	0030      	movs	r0, r6
 8005b92:	3501      	adds	r5, #1
 8005b94:	0029      	movs	r1, r5
 8005b96:	f7fa fad3 	bl	8000140 <__udivsi3>
 8005b9a:	9002      	str	r0, [sp, #8]
 8005b9c:	42ae      	cmp	r6, r5
 8005b9e:	d329      	bcc.n	8005bf4 <quorem+0x94>
 8005ba0:	9b06      	ldr	r3, [sp, #24]
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	469c      	mov	ip, r3
 8005ba6:	9d03      	ldr	r5, [sp, #12]
 8005ba8:	9606      	str	r6, [sp, #24]
 8005baa:	4662      	mov	r2, ip
 8005bac:	ca08      	ldmia	r2!, {r3}
 8005bae:	6828      	ldr	r0, [r5, #0]
 8005bb0:	4694      	mov	ip, r2
 8005bb2:	9a02      	ldr	r2, [sp, #8]
 8005bb4:	b299      	uxth	r1, r3
 8005bb6:	4351      	muls	r1, r2
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	4353      	muls	r3, r2
 8005bbc:	1989      	adds	r1, r1, r6
 8005bbe:	0c0a      	lsrs	r2, r1, #16
 8005bc0:	189b      	adds	r3, r3, r2
 8005bc2:	9307      	str	r3, [sp, #28]
 8005bc4:	0c1e      	lsrs	r6, r3, #16
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	b282      	uxth	r2, r0
 8005bca:	18d2      	adds	r2, r2, r3
 8005bcc:	466b      	mov	r3, sp
 8005bce:	b289      	uxth	r1, r1
 8005bd0:	8b9b      	ldrh	r3, [r3, #28]
 8005bd2:	1a52      	subs	r2, r2, r1
 8005bd4:	0c01      	lsrs	r1, r0, #16
 8005bd6:	1ac9      	subs	r1, r1, r3
 8005bd8:	1413      	asrs	r3, r2, #16
 8005bda:	18cb      	adds	r3, r1, r3
 8005bdc:	1419      	asrs	r1, r3, #16
 8005bde:	b292      	uxth	r2, r2
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	4313      	orrs	r3, r2
 8005be4:	c508      	stmia	r5!, {r3}
 8005be6:	9b05      	ldr	r3, [sp, #20]
 8005be8:	9106      	str	r1, [sp, #24]
 8005bea:	4563      	cmp	r3, ip
 8005bec:	d2dd      	bcs.n	8005baa <quorem+0x4a>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d030      	beq.n	8005c56 <quorem+0xf6>
 8005bf4:	0038      	movs	r0, r7
 8005bf6:	9904      	ldr	r1, [sp, #16]
 8005bf8:	f001 f9de 	bl	8006fb8 <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	db21      	blt.n	8005c44 <quorem+0xe4>
 8005c00:	0038      	movs	r0, r7
 8005c02:	2600      	movs	r6, #0
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	9c04      	ldr	r4, [sp, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	3014      	adds	r0, #20
 8005c0e:	3414      	adds	r4, #20
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	cc02      	ldmia	r4!, {r1}
 8005c14:	b29d      	uxth	r5, r3
 8005c16:	19ad      	adds	r5, r5, r6
 8005c18:	b28a      	uxth	r2, r1
 8005c1a:	1aaa      	subs	r2, r5, r2
 8005c1c:	0c09      	lsrs	r1, r1, #16
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	1a5b      	subs	r3, r3, r1
 8005c22:	1411      	asrs	r1, r2, #16
 8005c24:	185b      	adds	r3, r3, r1
 8005c26:	141e      	asrs	r6, r3, #16
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	c008      	stmia	r0!, {r3}
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	d2ec      	bcs.n	8005c10 <quorem+0xb0>
 8005c36:	9b01      	ldr	r3, [sp, #4]
 8005c38:	9a03      	ldr	r2, [sp, #12]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	18d3      	adds	r3, r2, r3
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d015      	beq.n	8005c70 <quorem+0x110>
 8005c44:	9802      	ldr	r0, [sp, #8]
 8005c46:	b009      	add	sp, #36	; 0x24
 8005c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d106      	bne.n	8005c5e <quorem+0xfe>
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	3c04      	subs	r4, #4
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	d3f5      	bcc.n	8005c4a <quorem+0xea>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e7c7      	b.n	8005bf4 <quorem+0x94>
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	d106      	bne.n	8005c78 <quorem+0x118>
 8005c6a:	9a01      	ldr	r2, [sp, #4]
 8005c6c:	3a01      	subs	r2, #1
 8005c6e:	9201      	str	r2, [sp, #4]
 8005c70:	9a03      	ldr	r2, [sp, #12]
 8005c72:	3b04      	subs	r3, #4
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3f5      	bcc.n	8005c64 <quorem+0x104>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	e7e2      	b.n	8005c44 <quorem+0xe4>
	...

08005c80 <_dtoa_r>:
 8005c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c82:	0014      	movs	r4, r2
 8005c84:	001d      	movs	r5, r3
 8005c86:	69c6      	ldr	r6, [r0, #28]
 8005c88:	b09d      	sub	sp, #116	; 0x74
 8005c8a:	9408      	str	r4, [sp, #32]
 8005c8c:	9509      	str	r5, [sp, #36]	; 0x24
 8005c8e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8005c90:	9004      	str	r0, [sp, #16]
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	d10f      	bne.n	8005cb6 <_dtoa_r+0x36>
 8005c96:	2010      	movs	r0, #16
 8005c98:	f000 fe4a 	bl	8006930 <malloc>
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	1e02      	subs	r2, r0, #0
 8005ca0:	61d8      	str	r0, [r3, #28]
 8005ca2:	d104      	bne.n	8005cae <_dtoa_r+0x2e>
 8005ca4:	21ef      	movs	r1, #239	; 0xef
 8005ca6:	4bc6      	ldr	r3, [pc, #792]	; (8005fc0 <_dtoa_r+0x340>)
 8005ca8:	48c6      	ldr	r0, [pc, #792]	; (8005fc4 <_dtoa_r+0x344>)
 8005caa:	f001 fcdf 	bl	800766c <__assert_func>
 8005cae:	6046      	str	r6, [r0, #4]
 8005cb0:	6086      	str	r6, [r0, #8]
 8005cb2:	6006      	str	r6, [r0, #0]
 8005cb4:	60c6      	str	r6, [r0, #12]
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d00b      	beq.n	8005cd8 <_dtoa_r+0x58>
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4093      	lsls	r3, r2
 8005cc6:	604a      	str	r2, [r1, #4]
 8005cc8:	608b      	str	r3, [r1, #8]
 8005cca:	9804      	ldr	r0, [sp, #16]
 8005ccc:	f000 ff32 	bl	8006b34 <_Bfree>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	da1e      	bge.n	8005d1a <_dtoa_r+0x9a>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	006b      	lsls	r3, r5, #1
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ce8:	4bb7      	ldr	r3, [pc, #732]	; (8005fc8 <_dtoa_r+0x348>)
 8005cea:	4ab7      	ldr	r2, [pc, #732]	; (8005fc8 <_dtoa_r+0x348>)
 8005cec:	403b      	ands	r3, r7
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d116      	bne.n	8005d20 <_dtoa_r+0xa0>
 8005cf2:	4bb6      	ldr	r3, [pc, #728]	; (8005fcc <_dtoa_r+0x34c>)
 8005cf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	033b      	lsls	r3, r7, #12
 8005cfa:	0b1b      	lsrs	r3, r3, #12
 8005cfc:	4323      	orrs	r3, r4
 8005cfe:	d101      	bne.n	8005d04 <_dtoa_r+0x84>
 8005d00:	f000 fdb5 	bl	800686e <_dtoa_r+0xbee>
 8005d04:	4bb2      	ldr	r3, [pc, #712]	; (8005fd0 <_dtoa_r+0x350>)
 8005d06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d08:	9306      	str	r3, [sp, #24]
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d002      	beq.n	8005d14 <_dtoa_r+0x94>
 8005d0e:	4bb1      	ldr	r3, [pc, #708]	; (8005fd4 <_dtoa_r+0x354>)
 8005d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	9806      	ldr	r0, [sp, #24]
 8005d16:	b01d      	add	sp, #116	; 0x74
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	e7e2      	b.n	8005ce6 <_dtoa_r+0x66>
 8005d20:	9a08      	ldr	r2, [sp, #32]
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	9210      	str	r2, [sp, #64]	; 0x40
 8005d26:	9311      	str	r3, [sp, #68]	; 0x44
 8005d28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f7fa fb8c 	bl	800044c <__aeabi_dcmpeq>
 8005d34:	1e06      	subs	r6, r0, #0
 8005d36:	d009      	beq.n	8005d4c <_dtoa_r+0xcc>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4ba6      	ldr	r3, [pc, #664]	; (8005fd8 <_dtoa_r+0x358>)
 8005d40:	9306      	str	r3, [sp, #24]
 8005d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0e5      	beq.n	8005d14 <_dtoa_r+0x94>
 8005d48:	4ba4      	ldr	r3, [pc, #656]	; (8005fdc <_dtoa_r+0x35c>)
 8005d4a:	e7e1      	b.n	8005d10 <_dtoa_r+0x90>
 8005d4c:	ab1a      	add	r3, sp, #104	; 0x68
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	ab1b      	add	r3, sp, #108	; 0x6c
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	9804      	ldr	r0, [sp, #16]
 8005d56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d5a:	f001 f9e1 	bl	8007120 <__d2b>
 8005d5e:	007a      	lsls	r2, r7, #1
 8005d60:	9005      	str	r0, [sp, #20]
 8005d62:	0d52      	lsrs	r2, r2, #21
 8005d64:	d100      	bne.n	8005d68 <_dtoa_r+0xe8>
 8005d66:	e07b      	b.n	8005e60 <_dtoa_r+0x1e0>
 8005d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d6a:	9617      	str	r6, [sp, #92]	; 0x5c
 8005d6c:	0319      	lsls	r1, r3, #12
 8005d6e:	4b9c      	ldr	r3, [pc, #624]	; (8005fe0 <_dtoa_r+0x360>)
 8005d70:	0b09      	lsrs	r1, r1, #12
 8005d72:	430b      	orrs	r3, r1
 8005d74:	499b      	ldr	r1, [pc, #620]	; (8005fe4 <_dtoa_r+0x364>)
 8005d76:	1857      	adds	r7, r2, r1
 8005d78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	2200      	movs	r2, #0
 8005d80:	4b99      	ldr	r3, [pc, #612]	; (8005fe8 <_dtoa_r+0x368>)
 8005d82:	f7fb fffb 	bl	8001d7c <__aeabi_dsub>
 8005d86:	4a99      	ldr	r2, [pc, #612]	; (8005fec <_dtoa_r+0x36c>)
 8005d88:	4b99      	ldr	r3, [pc, #612]	; (8005ff0 <_dtoa_r+0x370>)
 8005d8a:	f7fb fd35 	bl	80017f8 <__aeabi_dmul>
 8005d8e:	4a99      	ldr	r2, [pc, #612]	; (8005ff4 <_dtoa_r+0x374>)
 8005d90:	4b99      	ldr	r3, [pc, #612]	; (8005ff8 <_dtoa_r+0x378>)
 8005d92:	f7fa fdd7 	bl	8000944 <__aeabi_dadd>
 8005d96:	0004      	movs	r4, r0
 8005d98:	0038      	movs	r0, r7
 8005d9a:	000d      	movs	r5, r1
 8005d9c:	f7fc fbc4 	bl	8002528 <__aeabi_i2d>
 8005da0:	4a96      	ldr	r2, [pc, #600]	; (8005ffc <_dtoa_r+0x37c>)
 8005da2:	4b97      	ldr	r3, [pc, #604]	; (8006000 <_dtoa_r+0x380>)
 8005da4:	f7fb fd28 	bl	80017f8 <__aeabi_dmul>
 8005da8:	0002      	movs	r2, r0
 8005daa:	000b      	movs	r3, r1
 8005dac:	0020      	movs	r0, r4
 8005dae:	0029      	movs	r1, r5
 8005db0:	f7fa fdc8 	bl	8000944 <__aeabi_dadd>
 8005db4:	0004      	movs	r4, r0
 8005db6:	000d      	movs	r5, r1
 8005db8:	f7fc fb80 	bl	80024bc <__aeabi_d2iz>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	9003      	str	r0, [sp, #12]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	0029      	movs	r1, r5
 8005dc6:	f7fa fb47 	bl	8000458 <__aeabi_dcmplt>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d00b      	beq.n	8005de6 <_dtoa_r+0x166>
 8005dce:	9803      	ldr	r0, [sp, #12]
 8005dd0:	f7fc fbaa 	bl	8002528 <__aeabi_i2d>
 8005dd4:	002b      	movs	r3, r5
 8005dd6:	0022      	movs	r2, r4
 8005dd8:	f7fa fb38 	bl	800044c <__aeabi_dcmpeq>
 8005ddc:	4243      	negs	r3, r0
 8005dde:	4158      	adcs	r0, r3
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	1a1b      	subs	r3, r3, r0
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	2301      	movs	r3, #1
 8005de8:	9316      	str	r3, [sp, #88]	; 0x58
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	2b16      	cmp	r3, #22
 8005dee:	d810      	bhi.n	8005e12 <_dtoa_r+0x192>
 8005df0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005df4:	9a03      	ldr	r2, [sp, #12]
 8005df6:	4b83      	ldr	r3, [pc, #524]	; (8006004 <_dtoa_r+0x384>)
 8005df8:	00d2      	lsls	r2, r2, #3
 8005dfa:	189b      	adds	r3, r3, r2
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f7fa fb2a 	bl	8000458 <__aeabi_dcmplt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d047      	beq.n	8005e98 <_dtoa_r+0x218>
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9316      	str	r3, [sp, #88]	; 0x58
 8005e12:	2200      	movs	r2, #0
 8005e14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005e16:	920a      	str	r2, [sp, #40]	; 0x28
 8005e18:	1bdb      	subs	r3, r3, r7
 8005e1a:	1e5a      	subs	r2, r3, #1
 8005e1c:	d53e      	bpl.n	8005e9c <_dtoa_r+0x21c>
 8005e1e:	2201      	movs	r2, #1
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	930a      	str	r3, [sp, #40]	; 0x28
 8005e24:	2300      	movs	r3, #0
 8005e26:	930c      	str	r3, [sp, #48]	; 0x30
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	db38      	blt.n	8005ea0 <_dtoa_r+0x220>
 8005e2e:	9a03      	ldr	r2, [sp, #12]
 8005e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e32:	4694      	mov	ip, r2
 8005e34:	4463      	add	r3, ip
 8005e36:	930c      	str	r3, [sp, #48]	; 0x30
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e40:	2401      	movs	r4, #1
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d867      	bhi.n	8005f16 <_dtoa_r+0x296>
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	dd02      	ble.n	8005e50 <_dtoa_r+0x1d0>
 8005e4a:	2400      	movs	r4, #0
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	9322      	str	r3, [sp, #136]	; 0x88
 8005e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e52:	1e98      	subs	r0, r3, #2
 8005e54:	2803      	cmp	r0, #3
 8005e56:	d867      	bhi.n	8005f28 <_dtoa_r+0x2a8>
 8005e58:	f7fa f95e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005e5c:	5b383a2b 	.word	0x5b383a2b
 8005e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e62:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005e64:	18f6      	adds	r6, r6, r3
 8005e66:	4b68      	ldr	r3, [pc, #416]	; (8006008 <_dtoa_r+0x388>)
 8005e68:	18f2      	adds	r2, r6, r3
 8005e6a:	2a20      	cmp	r2, #32
 8005e6c:	dd0f      	ble.n	8005e8e <_dtoa_r+0x20e>
 8005e6e:	2340      	movs	r3, #64	; 0x40
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	409f      	lsls	r7, r3
 8005e74:	4b65      	ldr	r3, [pc, #404]	; (800600c <_dtoa_r+0x38c>)
 8005e76:	0038      	movs	r0, r7
 8005e78:	18f3      	adds	r3, r6, r3
 8005e7a:	40dc      	lsrs	r4, r3
 8005e7c:	4320      	orrs	r0, r4
 8005e7e:	f7fc fb83 	bl	8002588 <__aeabi_ui2d>
 8005e82:	2201      	movs	r2, #1
 8005e84:	4b62      	ldr	r3, [pc, #392]	; (8006010 <_dtoa_r+0x390>)
 8005e86:	1e77      	subs	r7, r6, #1
 8005e88:	18cb      	adds	r3, r1, r3
 8005e8a:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e8c:	e776      	b.n	8005d7c <_dtoa_r+0xfc>
 8005e8e:	2320      	movs	r3, #32
 8005e90:	0020      	movs	r0, r4
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	4098      	lsls	r0, r3
 8005e96:	e7f2      	b.n	8005e7e <_dtoa_r+0x1fe>
 8005e98:	9016      	str	r0, [sp, #88]	; 0x58
 8005e9a:	e7ba      	b.n	8005e12 <_dtoa_r+0x192>
 8005e9c:	920c      	str	r2, [sp, #48]	; 0x30
 8005e9e:	e7c3      	b.n	8005e28 <_dtoa_r+0x1a8>
 8005ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea2:	9a03      	ldr	r2, [sp, #12]
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea8:	4253      	negs	r3, r2
 8005eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8005eac:	2300      	movs	r3, #0
 8005eae:	9313      	str	r3, [sp, #76]	; 0x4c
 8005eb0:	e7c5      	b.n	8005e3e <_dtoa_r+0x1be>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eba:	9307      	str	r3, [sp, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc13      	bgt.n	8005ee8 <_dtoa_r+0x268>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec6:	9307      	str	r3, [sp, #28]
 8005ec8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005eca:	e00d      	b.n	8005ee8 <_dtoa_r+0x268>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7f1      	b.n	8005eb4 <_dtoa_r+0x234>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed6:	4694      	mov	ip, r2
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	4463      	add	r3, ip
 8005edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ede:	3301      	adds	r3, #1
 8005ee0:	9307      	str	r3, [sp, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dc00      	bgt.n	8005ee8 <_dtoa_r+0x268>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	2100      	movs	r1, #0
 8005eec:	69d0      	ldr	r0, [r2, #28]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	0015      	movs	r5, r2
 8005ef2:	3514      	adds	r5, #20
 8005ef4:	429d      	cmp	r5, r3
 8005ef6:	d91b      	bls.n	8005f30 <_dtoa_r+0x2b0>
 8005ef8:	6041      	str	r1, [r0, #4]
 8005efa:	9804      	ldr	r0, [sp, #16]
 8005efc:	f000 fdd6 	bl	8006aac <_Balloc>
 8005f00:	9006      	str	r0, [sp, #24]
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d117      	bne.n	8005f36 <_dtoa_r+0x2b6>
 8005f06:	21b0      	movs	r1, #176	; 0xb0
 8005f08:	4b42      	ldr	r3, [pc, #264]	; (8006014 <_dtoa_r+0x394>)
 8005f0a:	482e      	ldr	r0, [pc, #184]	; (8005fc4 <_dtoa_r+0x344>)
 8005f0c:	9a06      	ldr	r2, [sp, #24]
 8005f0e:	31ff      	adds	r1, #255	; 0xff
 8005f10:	e6cb      	b.n	8005caa <_dtoa_r+0x2a>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e7dd      	b.n	8005ed2 <_dtoa_r+0x252>
 8005f16:	2300      	movs	r3, #0
 8005f18:	940f      	str	r4, [sp, #60]	; 0x3c
 8005f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f20:	9307      	str	r3, [sp, #28]
 8005f22:	2200      	movs	r2, #0
 8005f24:	3313      	adds	r3, #19
 8005f26:	e7cf      	b.n	8005ec8 <_dtoa_r+0x248>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f2c:	3b02      	subs	r3, #2
 8005f2e:	e7f6      	b.n	8005f1e <_dtoa_r+0x29e>
 8005f30:	3101      	adds	r1, #1
 8005f32:	0052      	lsls	r2, r2, #1
 8005f34:	e7dc      	b.n	8005ef0 <_dtoa_r+0x270>
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	9b07      	ldr	r3, [sp, #28]
 8005f40:	2b0e      	cmp	r3, #14
 8005f42:	d900      	bls.n	8005f46 <_dtoa_r+0x2c6>
 8005f44:	e0e5      	b.n	8006112 <_dtoa_r+0x492>
 8005f46:	2c00      	cmp	r4, #0
 8005f48:	d100      	bne.n	8005f4c <_dtoa_r+0x2cc>
 8005f4a:	e0e2      	b.n	8006112 <_dtoa_r+0x492>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dd64      	ble.n	800601c <_dtoa_r+0x39c>
 8005f52:	210f      	movs	r1, #15
 8005f54:	9a03      	ldr	r2, [sp, #12]
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <_dtoa_r+0x384>)
 8005f58:	400a      	ands	r2, r1
 8005f5a:	00d2      	lsls	r2, r2, #3
 8005f5c:	189b      	adds	r3, r3, r2
 8005f5e:	681e      	ldr	r6, [r3, #0]
 8005f60:	685f      	ldr	r7, [r3, #4]
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	2402      	movs	r4, #2
 8005f66:	111d      	asrs	r5, r3, #4
 8005f68:	05db      	lsls	r3, r3, #23
 8005f6a:	d50a      	bpl.n	8005f82 <_dtoa_r+0x302>
 8005f6c:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <_dtoa_r+0x398>)
 8005f6e:	400d      	ands	r5, r1
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005f76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f78:	f7fb f844 	bl	8001004 <__aeabi_ddiv>
 8005f7c:	9008      	str	r0, [sp, #32]
 8005f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8005f80:	3401      	adds	r4, #1
 8005f82:	4b25      	ldr	r3, [pc, #148]	; (8006018 <_dtoa_r+0x398>)
 8005f84:	930e      	str	r3, [sp, #56]	; 0x38
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	d108      	bne.n	8005f9c <_dtoa_r+0x31c>
 8005f8a:	9808      	ldr	r0, [sp, #32]
 8005f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f8e:	0032      	movs	r2, r6
 8005f90:	003b      	movs	r3, r7
 8005f92:	f7fb f837 	bl	8001004 <__aeabi_ddiv>
 8005f96:	9008      	str	r0, [sp, #32]
 8005f98:	9109      	str	r1, [sp, #36]	; 0x24
 8005f9a:	e05a      	b.n	8006052 <_dtoa_r+0x3d2>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	421d      	tst	r5, r3
 8005fa0:	d009      	beq.n	8005fb6 <_dtoa_r+0x336>
 8005fa2:	18e4      	adds	r4, r4, r3
 8005fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa6:	0030      	movs	r0, r6
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	0039      	movs	r1, r7
 8005fae:	f7fb fc23 	bl	80017f8 <__aeabi_dmul>
 8005fb2:	0006      	movs	r6, r0
 8005fb4:	000f      	movs	r7, r1
 8005fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb8:	106d      	asrs	r5, r5, #1
 8005fba:	3308      	adds	r3, #8
 8005fbc:	e7e2      	b.n	8005f84 <_dtoa_r+0x304>
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	08007ef5 	.word	0x08007ef5
 8005fc4:	08007f0c 	.word	0x08007f0c
 8005fc8:	7ff00000 	.word	0x7ff00000
 8005fcc:	0000270f 	.word	0x0000270f
 8005fd0:	08007ef1 	.word	0x08007ef1
 8005fd4:	08007ef4 	.word	0x08007ef4
 8005fd8:	08007ec4 	.word	0x08007ec4
 8005fdc:	08007ec5 	.word	0x08007ec5
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	fffffc01 	.word	0xfffffc01
 8005fe8:	3ff80000 	.word	0x3ff80000
 8005fec:	636f4361 	.word	0x636f4361
 8005ff0:	3fd287a7 	.word	0x3fd287a7
 8005ff4:	8b60c8b3 	.word	0x8b60c8b3
 8005ff8:	3fc68a28 	.word	0x3fc68a28
 8005ffc:	509f79fb 	.word	0x509f79fb
 8006000:	3fd34413 	.word	0x3fd34413
 8006004:	08007ff8 	.word	0x08007ff8
 8006008:	00000432 	.word	0x00000432
 800600c:	00000412 	.word	0x00000412
 8006010:	fe100000 	.word	0xfe100000
 8006014:	08007f64 	.word	0x08007f64
 8006018:	08007fd0 	.word	0x08007fd0
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	2402      	movs	r4, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <_dtoa_r+0x3d2>
 8006024:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006026:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006028:	220f      	movs	r2, #15
 800602a:	425d      	negs	r5, r3
 800602c:	402a      	ands	r2, r5
 800602e:	4bdd      	ldr	r3, [pc, #884]	; (80063a4 <_dtoa_r+0x724>)
 8006030:	00d2      	lsls	r2, r2, #3
 8006032:	189b      	adds	r3, r3, r2
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f7fb fbde 	bl	80017f8 <__aeabi_dmul>
 800603c:	2701      	movs	r7, #1
 800603e:	2300      	movs	r3, #0
 8006040:	9008      	str	r0, [sp, #32]
 8006042:	9109      	str	r1, [sp, #36]	; 0x24
 8006044:	4ed8      	ldr	r6, [pc, #864]	; (80063a8 <_dtoa_r+0x728>)
 8006046:	112d      	asrs	r5, r5, #4
 8006048:	2d00      	cmp	r5, #0
 800604a:	d000      	beq.n	800604e <_dtoa_r+0x3ce>
 800604c:	e091      	b.n	8006172 <_dtoa_r+0x4f2>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1a1      	bne.n	8005f96 <_dtoa_r+0x316>
 8006052:	9e08      	ldr	r6, [sp, #32]
 8006054:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006056:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006058:	2b00      	cmp	r3, #0
 800605a:	d100      	bne.n	800605e <_dtoa_r+0x3de>
 800605c:	e094      	b.n	8006188 <_dtoa_r+0x508>
 800605e:	2200      	movs	r2, #0
 8006060:	0030      	movs	r0, r6
 8006062:	0039      	movs	r1, r7
 8006064:	4bd1      	ldr	r3, [pc, #836]	; (80063ac <_dtoa_r+0x72c>)
 8006066:	f7fa f9f7 	bl	8000458 <__aeabi_dcmplt>
 800606a:	2800      	cmp	r0, #0
 800606c:	d100      	bne.n	8006070 <_dtoa_r+0x3f0>
 800606e:	e08b      	b.n	8006188 <_dtoa_r+0x508>
 8006070:	9b07      	ldr	r3, [sp, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d100      	bne.n	8006078 <_dtoa_r+0x3f8>
 8006076:	e087      	b.n	8006188 <_dtoa_r+0x508>
 8006078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd45      	ble.n	800610a <_dtoa_r+0x48a>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	3b01      	subs	r3, #1
 8006084:	930e      	str	r3, [sp, #56]	; 0x38
 8006086:	0030      	movs	r0, r6
 8006088:	4bc9      	ldr	r3, [pc, #804]	; (80063b0 <_dtoa_r+0x730>)
 800608a:	0039      	movs	r1, r7
 800608c:	f7fb fbb4 	bl	80017f8 <__aeabi_dmul>
 8006090:	9008      	str	r0, [sp, #32]
 8006092:	9109      	str	r1, [sp, #36]	; 0x24
 8006094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006096:	3401      	adds	r4, #1
 8006098:	0020      	movs	r0, r4
 800609a:	9e08      	ldr	r6, [sp, #32]
 800609c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800609e:	9312      	str	r3, [sp, #72]	; 0x48
 80060a0:	f7fc fa42 	bl	8002528 <__aeabi_i2d>
 80060a4:	0032      	movs	r2, r6
 80060a6:	003b      	movs	r3, r7
 80060a8:	f7fb fba6 	bl	80017f8 <__aeabi_dmul>
 80060ac:	2200      	movs	r2, #0
 80060ae:	4bc1      	ldr	r3, [pc, #772]	; (80063b4 <_dtoa_r+0x734>)
 80060b0:	f7fa fc48 	bl	8000944 <__aeabi_dadd>
 80060b4:	4ac0      	ldr	r2, [pc, #768]	; (80063b8 <_dtoa_r+0x738>)
 80060b6:	9014      	str	r0, [sp, #80]	; 0x50
 80060b8:	9115      	str	r1, [sp, #84]	; 0x54
 80060ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80060be:	4694      	mov	ip, r2
 80060c0:	9308      	str	r3, [sp, #32]
 80060c2:	9409      	str	r4, [sp, #36]	; 0x24
 80060c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060c6:	4463      	add	r3, ip
 80060c8:	9318      	str	r3, [sp, #96]	; 0x60
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d15e      	bne.n	8006190 <_dtoa_r+0x510>
 80060d2:	2200      	movs	r2, #0
 80060d4:	4bb9      	ldr	r3, [pc, #740]	; (80063bc <_dtoa_r+0x73c>)
 80060d6:	0030      	movs	r0, r6
 80060d8:	0039      	movs	r1, r7
 80060da:	f7fb fe4f 	bl	8001d7c <__aeabi_dsub>
 80060de:	9a08      	ldr	r2, [sp, #32]
 80060e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80060e2:	0004      	movs	r4, r0
 80060e4:	000d      	movs	r5, r1
 80060e6:	f7fa f9cb 	bl	8000480 <__aeabi_dcmpgt>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d000      	beq.n	80060f0 <_dtoa_r+0x470>
 80060ee:	e2b3      	b.n	8006658 <_dtoa_r+0x9d8>
 80060f0:	48b3      	ldr	r0, [pc, #716]	; (80063c0 <_dtoa_r+0x740>)
 80060f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80060f4:	4684      	mov	ip, r0
 80060f6:	4461      	add	r1, ip
 80060f8:	000b      	movs	r3, r1
 80060fa:	0020      	movs	r0, r4
 80060fc:	0029      	movs	r1, r5
 80060fe:	9a08      	ldr	r2, [sp, #32]
 8006100:	f7fa f9aa 	bl	8000458 <__aeabi_dcmplt>
 8006104:	2800      	cmp	r0, #0
 8006106:	d000      	beq.n	800610a <_dtoa_r+0x48a>
 8006108:	e2a3      	b.n	8006652 <_dtoa_r+0x9d2>
 800610a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800610c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800610e:	9308      	str	r3, [sp, #32]
 8006110:	9409      	str	r4, [sp, #36]	; 0x24
 8006112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006114:	2b00      	cmp	r3, #0
 8006116:	da00      	bge.n	800611a <_dtoa_r+0x49a>
 8006118:	e179      	b.n	800640e <_dtoa_r+0x78e>
 800611a:	9a03      	ldr	r2, [sp, #12]
 800611c:	2a0e      	cmp	r2, #14
 800611e:	dd00      	ble.n	8006122 <_dtoa_r+0x4a2>
 8006120:	e175      	b.n	800640e <_dtoa_r+0x78e>
 8006122:	4ba0      	ldr	r3, [pc, #640]	; (80063a4 <_dtoa_r+0x724>)
 8006124:	00d2      	lsls	r2, r2, #3
 8006126:	189b      	adds	r3, r3, r2
 8006128:	681e      	ldr	r6, [r3, #0]
 800612a:	685f      	ldr	r7, [r3, #4]
 800612c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800612e:	2b00      	cmp	r3, #0
 8006130:	db00      	blt.n	8006134 <_dtoa_r+0x4b4>
 8006132:	e0e5      	b.n	8006300 <_dtoa_r+0x680>
 8006134:	9b07      	ldr	r3, [sp, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd00      	ble.n	800613c <_dtoa_r+0x4bc>
 800613a:	e0e1      	b.n	8006300 <_dtoa_r+0x680>
 800613c:	d000      	beq.n	8006140 <_dtoa_r+0x4c0>
 800613e:	e288      	b.n	8006652 <_dtoa_r+0x9d2>
 8006140:	2200      	movs	r2, #0
 8006142:	0030      	movs	r0, r6
 8006144:	0039      	movs	r1, r7
 8006146:	4b9d      	ldr	r3, [pc, #628]	; (80063bc <_dtoa_r+0x73c>)
 8006148:	f7fb fb56 	bl	80017f8 <__aeabi_dmul>
 800614c:	9a08      	ldr	r2, [sp, #32]
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	f7fa f9a0 	bl	8000494 <__aeabi_dcmpge>
 8006154:	9e07      	ldr	r6, [sp, #28]
 8006156:	0037      	movs	r7, r6
 8006158:	2800      	cmp	r0, #0
 800615a:	d000      	beq.n	800615e <_dtoa_r+0x4de>
 800615c:	e25f      	b.n	800661e <_dtoa_r+0x99e>
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	9a06      	ldr	r2, [sp, #24]
 8006162:	3301      	adds	r3, #1
 8006164:	9308      	str	r3, [sp, #32]
 8006166:	2331      	movs	r3, #49	; 0x31
 8006168:	7013      	strb	r3, [r2, #0]
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	9303      	str	r3, [sp, #12]
 8006170:	e25a      	b.n	8006628 <_dtoa_r+0x9a8>
 8006172:	423d      	tst	r5, r7
 8006174:	d005      	beq.n	8006182 <_dtoa_r+0x502>
 8006176:	6832      	ldr	r2, [r6, #0]
 8006178:	6873      	ldr	r3, [r6, #4]
 800617a:	f7fb fb3d 	bl	80017f8 <__aeabi_dmul>
 800617e:	003b      	movs	r3, r7
 8006180:	3401      	adds	r4, #1
 8006182:	106d      	asrs	r5, r5, #1
 8006184:	3608      	adds	r6, #8
 8006186:	e75f      	b.n	8006048 <_dtoa_r+0x3c8>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	930e      	str	r3, [sp, #56]	; 0x38
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	e783      	b.n	8006098 <_dtoa_r+0x418>
 8006190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006192:	4b84      	ldr	r3, [pc, #528]	; (80063a4 <_dtoa_r+0x724>)
 8006194:	3a01      	subs	r2, #1
 8006196:	00d2      	lsls	r2, r2, #3
 8006198:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800619a:	189b      	adds	r3, r3, r2
 800619c:	9c08      	ldr	r4, [sp, #32]
 800619e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d051      	beq.n	800624c <_dtoa_r+0x5cc>
 80061a8:	2000      	movs	r0, #0
 80061aa:	4986      	ldr	r1, [pc, #536]	; (80063c4 <_dtoa_r+0x744>)
 80061ac:	f7fa ff2a 	bl	8001004 <__aeabi_ddiv>
 80061b0:	0022      	movs	r2, r4
 80061b2:	002b      	movs	r3, r5
 80061b4:	f7fb fde2 	bl	8001d7c <__aeabi_dsub>
 80061b8:	9a06      	ldr	r2, [sp, #24]
 80061ba:	0004      	movs	r4, r0
 80061bc:	4694      	mov	ip, r2
 80061be:	000d      	movs	r5, r1
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	9314      	str	r3, [sp, #80]	; 0x50
 80061c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061c6:	4463      	add	r3, ip
 80061c8:	9318      	str	r3, [sp, #96]	; 0x60
 80061ca:	0039      	movs	r1, r7
 80061cc:	0030      	movs	r0, r6
 80061ce:	f7fc f975 	bl	80024bc <__aeabi_d2iz>
 80061d2:	9012      	str	r0, [sp, #72]	; 0x48
 80061d4:	f7fc f9a8 	bl	8002528 <__aeabi_i2d>
 80061d8:	0002      	movs	r2, r0
 80061da:	000b      	movs	r3, r1
 80061dc:	0030      	movs	r0, r6
 80061de:	0039      	movs	r1, r7
 80061e0:	f7fb fdcc 	bl	8001d7c <__aeabi_dsub>
 80061e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061e8:	3301      	adds	r3, #1
 80061ea:	9308      	str	r3, [sp, #32]
 80061ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ee:	0006      	movs	r6, r0
 80061f0:	3330      	adds	r3, #48	; 0x30
 80061f2:	7013      	strb	r3, [r2, #0]
 80061f4:	0022      	movs	r2, r4
 80061f6:	002b      	movs	r3, r5
 80061f8:	000f      	movs	r7, r1
 80061fa:	f7fa f92d 	bl	8000458 <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d174      	bne.n	80062ec <_dtoa_r+0x66c>
 8006202:	0032      	movs	r2, r6
 8006204:	003b      	movs	r3, r7
 8006206:	2000      	movs	r0, #0
 8006208:	4968      	ldr	r1, [pc, #416]	; (80063ac <_dtoa_r+0x72c>)
 800620a:	f7fb fdb7 	bl	8001d7c <__aeabi_dsub>
 800620e:	0022      	movs	r2, r4
 8006210:	002b      	movs	r3, r5
 8006212:	f7fa f921 	bl	8000458 <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	d000      	beq.n	800621c <_dtoa_r+0x59c>
 800621a:	e0d7      	b.n	80063cc <_dtoa_r+0x74c>
 800621c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800621e:	9a08      	ldr	r2, [sp, #32]
 8006220:	4293      	cmp	r3, r2
 8006222:	d100      	bne.n	8006226 <_dtoa_r+0x5a6>
 8006224:	e771      	b.n	800610a <_dtoa_r+0x48a>
 8006226:	2200      	movs	r2, #0
 8006228:	0020      	movs	r0, r4
 800622a:	0029      	movs	r1, r5
 800622c:	4b60      	ldr	r3, [pc, #384]	; (80063b0 <_dtoa_r+0x730>)
 800622e:	f7fb fae3 	bl	80017f8 <__aeabi_dmul>
 8006232:	4b5f      	ldr	r3, [pc, #380]	; (80063b0 <_dtoa_r+0x730>)
 8006234:	0004      	movs	r4, r0
 8006236:	000d      	movs	r5, r1
 8006238:	0030      	movs	r0, r6
 800623a:	0039      	movs	r1, r7
 800623c:	2200      	movs	r2, #0
 800623e:	f7fb fadb 	bl	80017f8 <__aeabi_dmul>
 8006242:	9b08      	ldr	r3, [sp, #32]
 8006244:	0006      	movs	r6, r0
 8006246:	000f      	movs	r7, r1
 8006248:	9314      	str	r3, [sp, #80]	; 0x50
 800624a:	e7be      	b.n	80061ca <_dtoa_r+0x54a>
 800624c:	0020      	movs	r0, r4
 800624e:	0029      	movs	r1, r5
 8006250:	f7fb fad2 	bl	80017f8 <__aeabi_dmul>
 8006254:	9a06      	ldr	r2, [sp, #24]
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	4694      	mov	ip, r2
 800625a:	9308      	str	r3, [sp, #32]
 800625c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800625e:	9014      	str	r0, [sp, #80]	; 0x50
 8006260:	9115      	str	r1, [sp, #84]	; 0x54
 8006262:	4463      	add	r3, ip
 8006264:	9319      	str	r3, [sp, #100]	; 0x64
 8006266:	0030      	movs	r0, r6
 8006268:	0039      	movs	r1, r7
 800626a:	f7fc f927 	bl	80024bc <__aeabi_d2iz>
 800626e:	9018      	str	r0, [sp, #96]	; 0x60
 8006270:	f7fc f95a 	bl	8002528 <__aeabi_i2d>
 8006274:	0002      	movs	r2, r0
 8006276:	000b      	movs	r3, r1
 8006278:	0030      	movs	r0, r6
 800627a:	0039      	movs	r1, r7
 800627c:	f7fb fd7e 	bl	8001d7c <__aeabi_dsub>
 8006280:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	3630      	adds	r6, #48	; 0x30
 8006286:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006288:	701e      	strb	r6, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	0004      	movs	r4, r0
 800628e:	000d      	movs	r5, r1
 8006290:	9308      	str	r3, [sp, #32]
 8006292:	4293      	cmp	r3, r2
 8006294:	d12d      	bne.n	80062f2 <_dtoa_r+0x672>
 8006296:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006298:	9915      	ldr	r1, [sp, #84]	; 0x54
 800629a:	9a06      	ldr	r2, [sp, #24]
 800629c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800629e:	4694      	mov	ip, r2
 80062a0:	4463      	add	r3, ip
 80062a2:	2200      	movs	r2, #0
 80062a4:	9308      	str	r3, [sp, #32]
 80062a6:	4b47      	ldr	r3, [pc, #284]	; (80063c4 <_dtoa_r+0x744>)
 80062a8:	f7fa fb4c 	bl	8000944 <__aeabi_dadd>
 80062ac:	0002      	movs	r2, r0
 80062ae:	000b      	movs	r3, r1
 80062b0:	0020      	movs	r0, r4
 80062b2:	0029      	movs	r1, r5
 80062b4:	f7fa f8e4 	bl	8000480 <__aeabi_dcmpgt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d000      	beq.n	80062be <_dtoa_r+0x63e>
 80062bc:	e086      	b.n	80063cc <_dtoa_r+0x74c>
 80062be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062c2:	2000      	movs	r0, #0
 80062c4:	493f      	ldr	r1, [pc, #252]	; (80063c4 <_dtoa_r+0x744>)
 80062c6:	f7fb fd59 	bl	8001d7c <__aeabi_dsub>
 80062ca:	0002      	movs	r2, r0
 80062cc:	000b      	movs	r3, r1
 80062ce:	0020      	movs	r0, r4
 80062d0:	0029      	movs	r1, r5
 80062d2:	f7fa f8c1 	bl	8000458 <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d100      	bne.n	80062dc <_dtoa_r+0x65c>
 80062da:	e716      	b.n	800610a <_dtoa_r+0x48a>
 80062dc:	9b08      	ldr	r3, [sp, #32]
 80062de:	001a      	movs	r2, r3
 80062e0:	3a01      	subs	r2, #1
 80062e2:	9208      	str	r2, [sp, #32]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	2a30      	cmp	r2, #48	; 0x30
 80062e8:	d0f8      	beq.n	80062dc <_dtoa_r+0x65c>
 80062ea:	9308      	str	r3, [sp, #32]
 80062ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	e046      	b.n	8006380 <_dtoa_r+0x700>
 80062f2:	2200      	movs	r2, #0
 80062f4:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <_dtoa_r+0x730>)
 80062f6:	f7fb fa7f 	bl	80017f8 <__aeabi_dmul>
 80062fa:	0006      	movs	r6, r0
 80062fc:	000f      	movs	r7, r1
 80062fe:	e7b2      	b.n	8006266 <_dtoa_r+0x5e6>
 8006300:	9b06      	ldr	r3, [sp, #24]
 8006302:	9a06      	ldr	r2, [sp, #24]
 8006304:	930a      	str	r3, [sp, #40]	; 0x28
 8006306:	9b07      	ldr	r3, [sp, #28]
 8006308:	9c08      	ldr	r4, [sp, #32]
 800630a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800630c:	3b01      	subs	r3, #1
 800630e:	189b      	adds	r3, r3, r2
 8006310:	930b      	str	r3, [sp, #44]	; 0x2c
 8006312:	0032      	movs	r2, r6
 8006314:	003b      	movs	r3, r7
 8006316:	0020      	movs	r0, r4
 8006318:	0029      	movs	r1, r5
 800631a:	f7fa fe73 	bl	8001004 <__aeabi_ddiv>
 800631e:	f7fc f8cd 	bl	80024bc <__aeabi_d2iz>
 8006322:	9007      	str	r0, [sp, #28]
 8006324:	f7fc f900 	bl	8002528 <__aeabi_i2d>
 8006328:	0032      	movs	r2, r6
 800632a:	003b      	movs	r3, r7
 800632c:	f7fb fa64 	bl	80017f8 <__aeabi_dmul>
 8006330:	0002      	movs	r2, r0
 8006332:	000b      	movs	r3, r1
 8006334:	0020      	movs	r0, r4
 8006336:	0029      	movs	r1, r5
 8006338:	f7fb fd20 	bl	8001d7c <__aeabi_dsub>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	001a      	movs	r2, r3
 8006340:	3201      	adds	r2, #1
 8006342:	920a      	str	r2, [sp, #40]	; 0x28
 8006344:	9208      	str	r2, [sp, #32]
 8006346:	9a07      	ldr	r2, [sp, #28]
 8006348:	3230      	adds	r2, #48	; 0x30
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800634e:	429a      	cmp	r2, r3
 8006350:	d14f      	bne.n	80063f2 <_dtoa_r+0x772>
 8006352:	0002      	movs	r2, r0
 8006354:	000b      	movs	r3, r1
 8006356:	f7fa faf5 	bl	8000944 <__aeabi_dadd>
 800635a:	0032      	movs	r2, r6
 800635c:	003b      	movs	r3, r7
 800635e:	0004      	movs	r4, r0
 8006360:	000d      	movs	r5, r1
 8006362:	f7fa f88d 	bl	8000480 <__aeabi_dcmpgt>
 8006366:	2800      	cmp	r0, #0
 8006368:	d12e      	bne.n	80063c8 <_dtoa_r+0x748>
 800636a:	0032      	movs	r2, r6
 800636c:	003b      	movs	r3, r7
 800636e:	0020      	movs	r0, r4
 8006370:	0029      	movs	r1, r5
 8006372:	f7fa f86b 	bl	800044c <__aeabi_dcmpeq>
 8006376:	2800      	cmp	r0, #0
 8006378:	d002      	beq.n	8006380 <_dtoa_r+0x700>
 800637a:	9b07      	ldr	r3, [sp, #28]
 800637c:	07de      	lsls	r6, r3, #31
 800637e:	d423      	bmi.n	80063c8 <_dtoa_r+0x748>
 8006380:	9905      	ldr	r1, [sp, #20]
 8006382:	9804      	ldr	r0, [sp, #16]
 8006384:	f000 fbd6 	bl	8006b34 <_Bfree>
 8006388:	2300      	movs	r3, #0
 800638a:	9a08      	ldr	r2, [sp, #32]
 800638c:	7013      	strb	r3, [r2, #0]
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006392:	3301      	adds	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006398:	2b00      	cmp	r3, #0
 800639a:	d100      	bne.n	800639e <_dtoa_r+0x71e>
 800639c:	e4ba      	b.n	8005d14 <_dtoa_r+0x94>
 800639e:	9a08      	ldr	r2, [sp, #32]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e4b7      	b.n	8005d14 <_dtoa_r+0x94>
 80063a4:	08007ff8 	.word	0x08007ff8
 80063a8:	08007fd0 	.word	0x08007fd0
 80063ac:	3ff00000 	.word	0x3ff00000
 80063b0:	40240000 	.word	0x40240000
 80063b4:	401c0000 	.word	0x401c0000
 80063b8:	fcc00000 	.word	0xfcc00000
 80063bc:	40140000 	.word	0x40140000
 80063c0:	7cc00000 	.word	0x7cc00000
 80063c4:	3fe00000 	.word	0x3fe00000
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	930e      	str	r3, [sp, #56]	; 0x38
 80063cc:	9b08      	ldr	r3, [sp, #32]
 80063ce:	9308      	str	r3, [sp, #32]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	2a39      	cmp	r2, #57	; 0x39
 80063d6:	d108      	bne.n	80063ea <_dtoa_r+0x76a>
 80063d8:	9a06      	ldr	r2, [sp, #24]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1f7      	bne.n	80063ce <_dtoa_r+0x74e>
 80063de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e0:	9906      	ldr	r1, [sp, #24]
 80063e2:	3201      	adds	r2, #1
 80063e4:	920e      	str	r2, [sp, #56]	; 0x38
 80063e6:	2230      	movs	r2, #48	; 0x30
 80063e8:	700a      	strb	r2, [r1, #0]
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	3201      	adds	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e77c      	b.n	80062ec <_dtoa_r+0x66c>
 80063f2:	2200      	movs	r2, #0
 80063f4:	4ba9      	ldr	r3, [pc, #676]	; (800669c <_dtoa_r+0xa1c>)
 80063f6:	f7fb f9ff 	bl	80017f8 <__aeabi_dmul>
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	0004      	movs	r4, r0
 8006400:	000d      	movs	r5, r1
 8006402:	f7fa f823 	bl	800044c <__aeabi_dcmpeq>
 8006406:	2800      	cmp	r0, #0
 8006408:	d100      	bne.n	800640c <_dtoa_r+0x78c>
 800640a:	e782      	b.n	8006312 <_dtoa_r+0x692>
 800640c:	e7b8      	b.n	8006380 <_dtoa_r+0x700>
 800640e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006410:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006412:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006414:	2f00      	cmp	r7, #0
 8006416:	d012      	beq.n	800643e <_dtoa_r+0x7be>
 8006418:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800641a:	2a01      	cmp	r2, #1
 800641c:	dc6e      	bgt.n	80064fc <_dtoa_r+0x87c>
 800641e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006420:	2a00      	cmp	r2, #0
 8006422:	d065      	beq.n	80064f0 <_dtoa_r+0x870>
 8006424:	4a9e      	ldr	r2, [pc, #632]	; (80066a0 <_dtoa_r+0xa20>)
 8006426:	189b      	adds	r3, r3, r2
 8006428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642a:	2101      	movs	r1, #1
 800642c:	18d2      	adds	r2, r2, r3
 800642e:	920a      	str	r2, [sp, #40]	; 0x28
 8006430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006432:	9804      	ldr	r0, [sp, #16]
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	930c      	str	r3, [sp, #48]	; 0x30
 8006438:	f000 fc2c 	bl	8006c94 <__i2b>
 800643c:	0007      	movs	r7, r0
 800643e:	2c00      	cmp	r4, #0
 8006440:	d00e      	beq.n	8006460 <_dtoa_r+0x7e0>
 8006442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006444:	2b00      	cmp	r3, #0
 8006446:	dd0b      	ble.n	8006460 <_dtoa_r+0x7e0>
 8006448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644a:	0023      	movs	r3, r4
 800644c:	4294      	cmp	r4, r2
 800644e:	dd00      	ble.n	8006452 <_dtoa_r+0x7d2>
 8006450:	0013      	movs	r3, r2
 8006452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006454:	1ae4      	subs	r4, r4, r3
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	920a      	str	r2, [sp, #40]	; 0x28
 800645a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	930c      	str	r3, [sp, #48]	; 0x30
 8006460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01e      	beq.n	80064a4 <_dtoa_r+0x824>
 8006466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d05c      	beq.n	8006526 <_dtoa_r+0x8a6>
 800646c:	2d00      	cmp	r5, #0
 800646e:	dd10      	ble.n	8006492 <_dtoa_r+0x812>
 8006470:	0039      	movs	r1, r7
 8006472:	002a      	movs	r2, r5
 8006474:	9804      	ldr	r0, [sp, #16]
 8006476:	f000 fcd5 	bl	8006e24 <__pow5mult>
 800647a:	9a05      	ldr	r2, [sp, #20]
 800647c:	0001      	movs	r1, r0
 800647e:	0007      	movs	r7, r0
 8006480:	9804      	ldr	r0, [sp, #16]
 8006482:	f000 fc1f 	bl	8006cc4 <__multiply>
 8006486:	0006      	movs	r6, r0
 8006488:	9905      	ldr	r1, [sp, #20]
 800648a:	9804      	ldr	r0, [sp, #16]
 800648c:	f000 fb52 	bl	8006b34 <_Bfree>
 8006490:	9605      	str	r6, [sp, #20]
 8006492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006494:	1b5a      	subs	r2, r3, r5
 8006496:	42ab      	cmp	r3, r5
 8006498:	d004      	beq.n	80064a4 <_dtoa_r+0x824>
 800649a:	9905      	ldr	r1, [sp, #20]
 800649c:	9804      	ldr	r0, [sp, #16]
 800649e:	f000 fcc1 	bl	8006e24 <__pow5mult>
 80064a2:	9005      	str	r0, [sp, #20]
 80064a4:	2101      	movs	r1, #1
 80064a6:	9804      	ldr	r0, [sp, #16]
 80064a8:	f000 fbf4 	bl	8006c94 <__i2b>
 80064ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064ae:	0006      	movs	r6, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd3a      	ble.n	800652a <_dtoa_r+0x8aa>
 80064b4:	001a      	movs	r2, r3
 80064b6:	0001      	movs	r1, r0
 80064b8:	9804      	ldr	r0, [sp, #16]
 80064ba:	f000 fcb3 	bl	8006e24 <__pow5mult>
 80064be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c0:	0006      	movs	r6, r0
 80064c2:	2500      	movs	r5, #0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	dc38      	bgt.n	800653a <_dtoa_r+0x8ba>
 80064c8:	2500      	movs	r5, #0
 80064ca:	9b08      	ldr	r3, [sp, #32]
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	d130      	bne.n	8006532 <_dtoa_r+0x8b2>
 80064d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d2:	031b      	lsls	r3, r3, #12
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	d12c      	bne.n	8006532 <_dtoa_r+0x8b2>
 80064d8:	4b72      	ldr	r3, [pc, #456]	; (80066a4 <_dtoa_r+0xa24>)
 80064da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064dc:	4213      	tst	r3, r2
 80064de:	d028      	beq.n	8006532 <_dtoa_r+0x8b2>
 80064e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e2:	3501      	adds	r5, #1
 80064e4:	3301      	adds	r3, #1
 80064e6:	930a      	str	r3, [sp, #40]	; 0x28
 80064e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ea:	3301      	adds	r3, #1
 80064ec:	930c      	str	r3, [sp, #48]	; 0x30
 80064ee:	e020      	b.n	8006532 <_dtoa_r+0x8b2>
 80064f0:	2336      	movs	r3, #54	; 0x36
 80064f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80064f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80064f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	e795      	b.n	8006428 <_dtoa_r+0x7a8>
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	1e5d      	subs	r5, r3, #1
 8006500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006502:	42ab      	cmp	r3, r5
 8006504:	db07      	blt.n	8006516 <_dtoa_r+0x896>
 8006506:	1b5d      	subs	r5, r3, r5
 8006508:	9b07      	ldr	r3, [sp, #28]
 800650a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	da8b      	bge.n	8006428 <_dtoa_r+0x7a8>
 8006510:	1ae4      	subs	r4, r4, r3
 8006512:	2300      	movs	r3, #0
 8006514:	e788      	b.n	8006428 <_dtoa_r+0x7a8>
 8006516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800651a:	1aeb      	subs	r3, r5, r3
 800651c:	18d3      	adds	r3, r2, r3
 800651e:	950d      	str	r5, [sp, #52]	; 0x34
 8006520:	9313      	str	r3, [sp, #76]	; 0x4c
 8006522:	2500      	movs	r5, #0
 8006524:	e7f0      	b.n	8006508 <_dtoa_r+0x888>
 8006526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006528:	e7b7      	b.n	800649a <_dtoa_r+0x81a>
 800652a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800652c:	2500      	movs	r5, #0
 800652e:	2b01      	cmp	r3, #1
 8006530:	ddca      	ble.n	80064c8 <_dtoa_r+0x848>
 8006532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006534:	2001      	movs	r0, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <_dtoa_r+0x8cc>
 800653a:	6933      	ldr	r3, [r6, #16]
 800653c:	3303      	adds	r3, #3
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18f3      	adds	r3, r6, r3
 8006542:	6858      	ldr	r0, [r3, #4]
 8006544:	f000 fb5e 	bl	8006c04 <__hi0bits>
 8006548:	2320      	movs	r3, #32
 800654a:	1a18      	subs	r0, r3, r0
 800654c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800654e:	1818      	adds	r0, r3, r0
 8006550:	0002      	movs	r2, r0
 8006552:	231f      	movs	r3, #31
 8006554:	401a      	ands	r2, r3
 8006556:	4218      	tst	r0, r3
 8006558:	d047      	beq.n	80065ea <_dtoa_r+0x96a>
 800655a:	3301      	adds	r3, #1
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	2b04      	cmp	r3, #4
 8006560:	dd3f      	ble.n	80065e2 <_dtoa_r+0x962>
 8006562:	231c      	movs	r3, #28
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006568:	18e4      	adds	r4, r4, r3
 800656a:	18d2      	adds	r2, r2, r3
 800656c:	920a      	str	r2, [sp, #40]	; 0x28
 800656e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006570:	18d3      	adds	r3, r2, r3
 8006572:	930c      	str	r3, [sp, #48]	; 0x30
 8006574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd05      	ble.n	8006586 <_dtoa_r+0x906>
 800657a:	001a      	movs	r2, r3
 800657c:	9905      	ldr	r1, [sp, #20]
 800657e:	9804      	ldr	r0, [sp, #16]
 8006580:	f000 fcac 	bl	8006edc <__lshift>
 8006584:	9005      	str	r0, [sp, #20]
 8006586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	dd05      	ble.n	8006598 <_dtoa_r+0x918>
 800658c:	0031      	movs	r1, r6
 800658e:	001a      	movs	r2, r3
 8006590:	9804      	ldr	r0, [sp, #16]
 8006592:	f000 fca3 	bl	8006edc <__lshift>
 8006596:	0006      	movs	r6, r0
 8006598:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800659a:	2b00      	cmp	r3, #0
 800659c:	d027      	beq.n	80065ee <_dtoa_r+0x96e>
 800659e:	0031      	movs	r1, r6
 80065a0:	9805      	ldr	r0, [sp, #20]
 80065a2:	f000 fd09 	bl	8006fb8 <__mcmp>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	da21      	bge.n	80065ee <_dtoa_r+0x96e>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	220a      	movs	r2, #10
 80065ae:	3b01      	subs	r3, #1
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	9905      	ldr	r1, [sp, #20]
 80065b4:	2300      	movs	r3, #0
 80065b6:	9804      	ldr	r0, [sp, #16]
 80065b8:	f000 fae0 	bl	8006b7c <__multadd>
 80065bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065be:	9005      	str	r0, [sp, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d100      	bne.n	80065c6 <_dtoa_r+0x946>
 80065c4:	e15d      	b.n	8006882 <_dtoa_r+0xc02>
 80065c6:	2300      	movs	r3, #0
 80065c8:	0039      	movs	r1, r7
 80065ca:	220a      	movs	r2, #10
 80065cc:	9804      	ldr	r0, [sp, #16]
 80065ce:	f000 fad5 	bl	8006b7c <__multadd>
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	0007      	movs	r7, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dc49      	bgt.n	800666e <_dtoa_r+0x9ee>
 80065da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065dc:	2b02      	cmp	r3, #2
 80065de:	dc0e      	bgt.n	80065fe <_dtoa_r+0x97e>
 80065e0:	e045      	b.n	800666e <_dtoa_r+0x9ee>
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d0c6      	beq.n	8006574 <_dtoa_r+0x8f4>
 80065e6:	331c      	adds	r3, #28
 80065e8:	e7bd      	b.n	8006566 <_dtoa_r+0x8e6>
 80065ea:	0013      	movs	r3, r2
 80065ec:	e7fb      	b.n	80065e6 <_dtoa_r+0x966>
 80065ee:	9b07      	ldr	r3, [sp, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc36      	bgt.n	8006662 <_dtoa_r+0x9e2>
 80065f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	dd33      	ble.n	8006662 <_dtoa_r+0x9e2>
 80065fa:	9b07      	ldr	r3, [sp, #28]
 80065fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80065fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10c      	bne.n	800661e <_dtoa_r+0x99e>
 8006604:	0031      	movs	r1, r6
 8006606:	2205      	movs	r2, #5
 8006608:	9804      	ldr	r0, [sp, #16]
 800660a:	f000 fab7 	bl	8006b7c <__multadd>
 800660e:	0006      	movs	r6, r0
 8006610:	0001      	movs	r1, r0
 8006612:	9805      	ldr	r0, [sp, #20]
 8006614:	f000 fcd0 	bl	8006fb8 <__mcmp>
 8006618:	2800      	cmp	r0, #0
 800661a:	dd00      	ble.n	800661e <_dtoa_r+0x99e>
 800661c:	e59f      	b.n	800615e <_dtoa_r+0x4de>
 800661e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006620:	43db      	mvns	r3, r3
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	9308      	str	r3, [sp, #32]
 8006628:	2500      	movs	r5, #0
 800662a:	0031      	movs	r1, r6
 800662c:	9804      	ldr	r0, [sp, #16]
 800662e:	f000 fa81 	bl	8006b34 <_Bfree>
 8006632:	2f00      	cmp	r7, #0
 8006634:	d100      	bne.n	8006638 <_dtoa_r+0x9b8>
 8006636:	e6a3      	b.n	8006380 <_dtoa_r+0x700>
 8006638:	2d00      	cmp	r5, #0
 800663a:	d005      	beq.n	8006648 <_dtoa_r+0x9c8>
 800663c:	42bd      	cmp	r5, r7
 800663e:	d003      	beq.n	8006648 <_dtoa_r+0x9c8>
 8006640:	0029      	movs	r1, r5
 8006642:	9804      	ldr	r0, [sp, #16]
 8006644:	f000 fa76 	bl	8006b34 <_Bfree>
 8006648:	0039      	movs	r1, r7
 800664a:	9804      	ldr	r0, [sp, #16]
 800664c:	f000 fa72 	bl	8006b34 <_Bfree>
 8006650:	e696      	b.n	8006380 <_dtoa_r+0x700>
 8006652:	2600      	movs	r6, #0
 8006654:	0037      	movs	r7, r6
 8006656:	e7e2      	b.n	800661e <_dtoa_r+0x99e>
 8006658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	0037      	movs	r7, r6
 8006660:	e57d      	b.n	800615e <_dtoa_r+0x4de>
 8006662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d100      	bne.n	800666a <_dtoa_r+0x9ea>
 8006668:	e0c3      	b.n	80067f2 <_dtoa_r+0xb72>
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	930b      	str	r3, [sp, #44]	; 0x2c
 800666e:	2c00      	cmp	r4, #0
 8006670:	dd05      	ble.n	800667e <_dtoa_r+0x9fe>
 8006672:	0039      	movs	r1, r7
 8006674:	0022      	movs	r2, r4
 8006676:	9804      	ldr	r0, [sp, #16]
 8006678:	f000 fc30 	bl	8006edc <__lshift>
 800667c:	0007      	movs	r7, r0
 800667e:	0038      	movs	r0, r7
 8006680:	2d00      	cmp	r5, #0
 8006682:	d024      	beq.n	80066ce <_dtoa_r+0xa4e>
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	9804      	ldr	r0, [sp, #16]
 8006688:	f000 fa10 	bl	8006aac <_Balloc>
 800668c:	1e04      	subs	r4, r0, #0
 800668e:	d111      	bne.n	80066b4 <_dtoa_r+0xa34>
 8006690:	0022      	movs	r2, r4
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <_dtoa_r+0xa28>)
 8006694:	4805      	ldr	r0, [pc, #20]	; (80066ac <_dtoa_r+0xa2c>)
 8006696:	4906      	ldr	r1, [pc, #24]	; (80066b0 <_dtoa_r+0xa30>)
 8006698:	f7ff fb07 	bl	8005caa <_dtoa_r+0x2a>
 800669c:	40240000 	.word	0x40240000
 80066a0:	00000433 	.word	0x00000433
 80066a4:	7ff00000 	.word	0x7ff00000
 80066a8:	08007f64 	.word	0x08007f64
 80066ac:	08007f0c 	.word	0x08007f0c
 80066b0:	000002ef 	.word	0x000002ef
 80066b4:	0039      	movs	r1, r7
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	310c      	adds	r1, #12
 80066ba:	3202      	adds	r2, #2
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	300c      	adds	r0, #12
 80066c0:	f000 ffca 	bl	8007658 <memcpy>
 80066c4:	2201      	movs	r2, #1
 80066c6:	0021      	movs	r1, r4
 80066c8:	9804      	ldr	r0, [sp, #16]
 80066ca:	f000 fc07 	bl	8006edc <__lshift>
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	2201      	movs	r2, #1
 80066da:	003d      	movs	r5, r7
 80066dc:	0007      	movs	r7, r0
 80066de:	930e      	str	r3, [sp, #56]	; 0x38
 80066e0:	9b08      	ldr	r3, [sp, #32]
 80066e2:	4013      	ands	r3, r2
 80066e4:	930d      	str	r3, [sp, #52]	; 0x34
 80066e6:	0031      	movs	r1, r6
 80066e8:	9805      	ldr	r0, [sp, #20]
 80066ea:	f7ff fa39 	bl	8005b60 <quorem>
 80066ee:	0029      	movs	r1, r5
 80066f0:	0004      	movs	r4, r0
 80066f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80066f4:	9805      	ldr	r0, [sp, #20]
 80066f6:	f000 fc5f 	bl	8006fb8 <__mcmp>
 80066fa:	003a      	movs	r2, r7
 80066fc:	900c      	str	r0, [sp, #48]	; 0x30
 80066fe:	0031      	movs	r1, r6
 8006700:	9804      	ldr	r0, [sp, #16]
 8006702:	f000 fc75 	bl	8006ff0 <__mdiff>
 8006706:	2201      	movs	r2, #1
 8006708:	68c3      	ldr	r3, [r0, #12]
 800670a:	3430      	adds	r4, #48	; 0x30
 800670c:	9008      	str	r0, [sp, #32]
 800670e:	920a      	str	r2, [sp, #40]	; 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <_dtoa_r+0xa9e>
 8006714:	0001      	movs	r1, r0
 8006716:	9805      	ldr	r0, [sp, #20]
 8006718:	f000 fc4e 	bl	8006fb8 <__mcmp>
 800671c:	900a      	str	r0, [sp, #40]	; 0x28
 800671e:	9908      	ldr	r1, [sp, #32]
 8006720:	9804      	ldr	r0, [sp, #16]
 8006722:	f000 fa07 	bl	8006b34 <_Bfree>
 8006726:	9b07      	ldr	r3, [sp, #28]
 8006728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800672a:	3301      	adds	r3, #1
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006730:	4313      	orrs	r3, r2
 8006732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006734:	4313      	orrs	r3, r2
 8006736:	d109      	bne.n	800674c <_dtoa_r+0xacc>
 8006738:	2c39      	cmp	r4, #57	; 0x39
 800673a:	d022      	beq.n	8006782 <_dtoa_r+0xb02>
 800673c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	dd01      	ble.n	8006746 <_dtoa_r+0xac6>
 8006742:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006744:	3431      	adds	r4, #49	; 0x31
 8006746:	9b07      	ldr	r3, [sp, #28]
 8006748:	701c      	strb	r4, [r3, #0]
 800674a:	e76e      	b.n	800662a <_dtoa_r+0x9aa>
 800674c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674e:	2b00      	cmp	r3, #0
 8006750:	db04      	blt.n	800675c <_dtoa_r+0xadc>
 8006752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006754:	4313      	orrs	r3, r2
 8006756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006758:	4313      	orrs	r3, r2
 800675a:	d11e      	bne.n	800679a <_dtoa_r+0xb1a>
 800675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	ddf1      	ble.n	8006746 <_dtoa_r+0xac6>
 8006762:	9905      	ldr	r1, [sp, #20]
 8006764:	2201      	movs	r2, #1
 8006766:	9804      	ldr	r0, [sp, #16]
 8006768:	f000 fbb8 	bl	8006edc <__lshift>
 800676c:	0031      	movs	r1, r6
 800676e:	9005      	str	r0, [sp, #20]
 8006770:	f000 fc22 	bl	8006fb8 <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	dc02      	bgt.n	800677e <_dtoa_r+0xafe>
 8006778:	d1e5      	bne.n	8006746 <_dtoa_r+0xac6>
 800677a:	07e3      	lsls	r3, r4, #31
 800677c:	d5e3      	bpl.n	8006746 <_dtoa_r+0xac6>
 800677e:	2c39      	cmp	r4, #57	; 0x39
 8006780:	d1df      	bne.n	8006742 <_dtoa_r+0xac2>
 8006782:	2339      	movs	r3, #57	; 0x39
 8006784:	9a07      	ldr	r2, [sp, #28]
 8006786:	7013      	strb	r3, [r2, #0]
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	3b01      	subs	r3, #1
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	2a39      	cmp	r2, #57	; 0x39
 8006792:	d063      	beq.n	800685c <_dtoa_r+0xbdc>
 8006794:	3201      	adds	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	e747      	b.n	800662a <_dtoa_r+0x9aa>
 800679a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679c:	2b00      	cmp	r3, #0
 800679e:	dd03      	ble.n	80067a8 <_dtoa_r+0xb28>
 80067a0:	2c39      	cmp	r4, #57	; 0x39
 80067a2:	d0ee      	beq.n	8006782 <_dtoa_r+0xb02>
 80067a4:	3401      	adds	r4, #1
 80067a6:	e7ce      	b.n	8006746 <_dtoa_r+0xac6>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	701c      	strb	r4, [r3, #0]
 80067ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d03e      	beq.n	8006832 <_dtoa_r+0xbb2>
 80067b4:	2300      	movs	r3, #0
 80067b6:	220a      	movs	r2, #10
 80067b8:	9905      	ldr	r1, [sp, #20]
 80067ba:	9804      	ldr	r0, [sp, #16]
 80067bc:	f000 f9de 	bl	8006b7c <__multadd>
 80067c0:	2300      	movs	r3, #0
 80067c2:	9005      	str	r0, [sp, #20]
 80067c4:	220a      	movs	r2, #10
 80067c6:	0029      	movs	r1, r5
 80067c8:	9804      	ldr	r0, [sp, #16]
 80067ca:	42bd      	cmp	r5, r7
 80067cc:	d106      	bne.n	80067dc <_dtoa_r+0xb5c>
 80067ce:	f000 f9d5 	bl	8006b7c <__multadd>
 80067d2:	0005      	movs	r5, r0
 80067d4:	0007      	movs	r7, r0
 80067d6:	9b08      	ldr	r3, [sp, #32]
 80067d8:	9307      	str	r3, [sp, #28]
 80067da:	e784      	b.n	80066e6 <_dtoa_r+0xa66>
 80067dc:	f000 f9ce 	bl	8006b7c <__multadd>
 80067e0:	0039      	movs	r1, r7
 80067e2:	0005      	movs	r5, r0
 80067e4:	2300      	movs	r3, #0
 80067e6:	220a      	movs	r2, #10
 80067e8:	9804      	ldr	r0, [sp, #16]
 80067ea:	f000 f9c7 	bl	8006b7c <__multadd>
 80067ee:	0007      	movs	r7, r0
 80067f0:	e7f1      	b.n	80067d6 <_dtoa_r+0xb56>
 80067f2:	9b07      	ldr	r3, [sp, #28]
 80067f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f6:	2500      	movs	r5, #0
 80067f8:	0031      	movs	r1, r6
 80067fa:	9805      	ldr	r0, [sp, #20]
 80067fc:	f7ff f9b0 	bl	8005b60 <quorem>
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	3030      	adds	r0, #48	; 0x30
 8006804:	5558      	strb	r0, [r3, r5]
 8006806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006808:	3501      	adds	r5, #1
 800680a:	0004      	movs	r4, r0
 800680c:	42ab      	cmp	r3, r5
 800680e:	dd07      	ble.n	8006820 <_dtoa_r+0xba0>
 8006810:	2300      	movs	r3, #0
 8006812:	220a      	movs	r2, #10
 8006814:	9905      	ldr	r1, [sp, #20]
 8006816:	9804      	ldr	r0, [sp, #16]
 8006818:	f000 f9b0 	bl	8006b7c <__multadd>
 800681c:	9005      	str	r0, [sp, #20]
 800681e:	e7eb      	b.n	80067f8 <_dtoa_r+0xb78>
 8006820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006822:	2301      	movs	r3, #1
 8006824:	2a00      	cmp	r2, #0
 8006826:	dd00      	ble.n	800682a <_dtoa_r+0xbaa>
 8006828:	0013      	movs	r3, r2
 800682a:	2500      	movs	r5, #0
 800682c:	9a06      	ldr	r2, [sp, #24]
 800682e:	18d3      	adds	r3, r2, r3
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	9905      	ldr	r1, [sp, #20]
 8006834:	2201      	movs	r2, #1
 8006836:	9804      	ldr	r0, [sp, #16]
 8006838:	f000 fb50 	bl	8006edc <__lshift>
 800683c:	0031      	movs	r1, r6
 800683e:	9005      	str	r0, [sp, #20]
 8006840:	f000 fbba 	bl	8006fb8 <__mcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	dc9f      	bgt.n	8006788 <_dtoa_r+0xb08>
 8006848:	d101      	bne.n	800684e <_dtoa_r+0xbce>
 800684a:	07e4      	lsls	r4, r4, #31
 800684c:	d49c      	bmi.n	8006788 <_dtoa_r+0xb08>
 800684e:	9b08      	ldr	r3, [sp, #32]
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	3b01      	subs	r3, #1
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	2a30      	cmp	r2, #48	; 0x30
 8006858:	d0fa      	beq.n	8006850 <_dtoa_r+0xbd0>
 800685a:	e6e6      	b.n	800662a <_dtoa_r+0x9aa>
 800685c:	9a06      	ldr	r2, [sp, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d193      	bne.n	800678a <_dtoa_r+0xb0a>
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	2331      	movs	r3, #49	; 0x31
 800686a:	7013      	strb	r3, [r2, #0]
 800686c:	e6dd      	b.n	800662a <_dtoa_r+0x9aa>
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <_dtoa_r+0xc14>)
 8006870:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	4b08      	ldr	r3, [pc, #32]	; (8006898 <_dtoa_r+0xc18>)
 8006876:	2a00      	cmp	r2, #0
 8006878:	d001      	beq.n	800687e <_dtoa_r+0xbfe>
 800687a:	f7ff fa49 	bl	8005d10 <_dtoa_r+0x90>
 800687e:	f7ff fa49 	bl	8005d14 <_dtoa_r+0x94>
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	dcb6      	bgt.n	80067f6 <_dtoa_r+0xb76>
 8006888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800688a:	2b02      	cmp	r3, #2
 800688c:	dd00      	ble.n	8006890 <_dtoa_r+0xc10>
 800688e:	e6b6      	b.n	80065fe <_dtoa_r+0x97e>
 8006890:	e7b1      	b.n	80067f6 <_dtoa_r+0xb76>
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	08007ee8 	.word	0x08007ee8
 8006898:	08007ef0 	.word	0x08007ef0

0800689c <_free_r>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	0005      	movs	r5, r0
 80068a0:	2900      	cmp	r1, #0
 80068a2:	d010      	beq.n	80068c6 <_free_r+0x2a>
 80068a4:	1f0c      	subs	r4, r1, #4
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da00      	bge.n	80068ae <_free_r+0x12>
 80068ac:	18e4      	adds	r4, r4, r3
 80068ae:	0028      	movs	r0, r5
 80068b0:	f000 f8ec 	bl	8006a8c <__malloc_lock>
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <_free_r+0x90>)
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <_free_r+0x2c>
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	6014      	str	r4, [r2, #0]
 80068c0:	0028      	movs	r0, r5
 80068c2:	f000 f8eb 	bl	8006a9c <__malloc_unlock>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	d908      	bls.n	80068de <_free_r+0x42>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	1821      	adds	r1, r4, r0
 80068d0:	428b      	cmp	r3, r1
 80068d2:	d1f3      	bne.n	80068bc <_free_r+0x20>
 80068d4:	6819      	ldr	r1, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	1809      	adds	r1, r1, r0
 80068da:	6021      	str	r1, [r4, #0]
 80068dc:	e7ee      	b.n	80068bc <_free_r+0x20>
 80068de:	001a      	movs	r2, r3
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <_free_r+0x4e>
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	d9f9      	bls.n	80068de <_free_r+0x42>
 80068ea:	6811      	ldr	r1, [r2, #0]
 80068ec:	1850      	adds	r0, r2, r1
 80068ee:	42a0      	cmp	r0, r4
 80068f0:	d10b      	bne.n	800690a <_free_r+0x6e>
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1809      	adds	r1, r1, r0
 80068f6:	1850      	adds	r0, r2, r1
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	4283      	cmp	r3, r0
 80068fc:	d1e0      	bne.n	80068c0 <_free_r+0x24>
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	1841      	adds	r1, r0, r1
 8006904:	6011      	str	r1, [r2, #0]
 8006906:	6053      	str	r3, [r2, #4]
 8006908:	e7da      	b.n	80068c0 <_free_r+0x24>
 800690a:	42a0      	cmp	r0, r4
 800690c:	d902      	bls.n	8006914 <_free_r+0x78>
 800690e:	230c      	movs	r3, #12
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	e7d5      	b.n	80068c0 <_free_r+0x24>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	1821      	adds	r1, r4, r0
 8006918:	428b      	cmp	r3, r1
 800691a:	d103      	bne.n	8006924 <_free_r+0x88>
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	1809      	adds	r1, r1, r0
 8006922:	6021      	str	r1, [r4, #0]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6054      	str	r4, [r2, #4]
 8006928:	e7ca      	b.n	80068c0 <_free_r+0x24>
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	200004b0 	.word	0x200004b0

08006930 <malloc>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <malloc+0x10>)
 8006934:	0001      	movs	r1, r0
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	f000 f826 	bl	8006988 <_malloc_r>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000068 	.word	0x20000068

08006944 <sbrk_aligned>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0f      	ldr	r6, [pc, #60]	; (8006984 <sbrk_aligned+0x40>)
 8006948:	000d      	movs	r5, r1
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	0004      	movs	r4, r0
 800694e:	2900      	cmp	r1, #0
 8006950:	d102      	bne.n	8006958 <sbrk_aligned+0x14>
 8006952:	f000 fe6f 	bl	8007634 <_sbrk_r>
 8006956:	6030      	str	r0, [r6, #0]
 8006958:	0029      	movs	r1, r5
 800695a:	0020      	movs	r0, r4
 800695c:	f000 fe6a 	bl	8007634 <_sbrk_r>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d00a      	beq.n	800697a <sbrk_aligned+0x36>
 8006964:	2303      	movs	r3, #3
 8006966:	1cc5      	adds	r5, r0, #3
 8006968:	439d      	bics	r5, r3
 800696a:	42a8      	cmp	r0, r5
 800696c:	d007      	beq.n	800697e <sbrk_aligned+0x3a>
 800696e:	1a29      	subs	r1, r5, r0
 8006970:	0020      	movs	r0, r4
 8006972:	f000 fe5f 	bl	8007634 <_sbrk_r>
 8006976:	3001      	adds	r0, #1
 8006978:	d101      	bne.n	800697e <sbrk_aligned+0x3a>
 800697a:	2501      	movs	r5, #1
 800697c:	426d      	negs	r5, r5
 800697e:	0028      	movs	r0, r5
 8006980:	bd70      	pop	{r4, r5, r6, pc}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	200004b4 	.word	0x200004b4

08006988 <_malloc_r>:
 8006988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800698a:	2203      	movs	r2, #3
 800698c:	1ccb      	adds	r3, r1, #3
 800698e:	4393      	bics	r3, r2
 8006990:	3308      	adds	r3, #8
 8006992:	0006      	movs	r6, r0
 8006994:	001f      	movs	r7, r3
 8006996:	2b0c      	cmp	r3, #12
 8006998:	d238      	bcs.n	8006a0c <_malloc_r+0x84>
 800699a:	270c      	movs	r7, #12
 800699c:	42b9      	cmp	r1, r7
 800699e:	d837      	bhi.n	8006a10 <_malloc_r+0x88>
 80069a0:	0030      	movs	r0, r6
 80069a2:	f000 f873 	bl	8006a8c <__malloc_lock>
 80069a6:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <_malloc_r+0x100>)
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	001c      	movs	r4, r3
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d133      	bne.n	8006a1a <_malloc_r+0x92>
 80069b2:	0039      	movs	r1, r7
 80069b4:	0030      	movs	r0, r6
 80069b6:	f7ff ffc5 	bl	8006944 <sbrk_aligned>
 80069ba:	0004      	movs	r4, r0
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d15e      	bne.n	8006a7e <_malloc_r+0xf6>
 80069c0:	9b00      	ldr	r3, [sp, #0]
 80069c2:	681c      	ldr	r4, [r3, #0]
 80069c4:	0025      	movs	r5, r4
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	d14e      	bne.n	8006a68 <_malloc_r+0xe0>
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d051      	beq.n	8006a72 <_malloc_r+0xea>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	0029      	movs	r1, r5
 80069d2:	18e3      	adds	r3, r4, r3
 80069d4:	0030      	movs	r0, r6
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	f000 fe2c 	bl	8007634 <_sbrk_r>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	4283      	cmp	r3, r0
 80069e0:	d147      	bne.n	8006a72 <_malloc_r+0xea>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	0030      	movs	r0, r6
 80069e6:	1aff      	subs	r7, r7, r3
 80069e8:	0039      	movs	r1, r7
 80069ea:	f7ff ffab 	bl	8006944 <sbrk_aligned>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d03f      	beq.n	8006a72 <_malloc_r+0xea>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	19db      	adds	r3, r3, r7
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	9b00      	ldr	r3, [sp, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d040      	beq.n	8006a82 <_malloc_r+0xfa>
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	42a2      	cmp	r2, r4
 8006a04:	d133      	bne.n	8006a6e <_malloc_r+0xe6>
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	e014      	b.n	8006a36 <_malloc_r+0xae>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dac5      	bge.n	800699c <_malloc_r+0x14>
 8006a10:	230c      	movs	r3, #12
 8006a12:	2500      	movs	r5, #0
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	0028      	movs	r0, r5
 8006a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a1a:	6821      	ldr	r1, [r4, #0]
 8006a1c:	1bc9      	subs	r1, r1, r7
 8006a1e:	d420      	bmi.n	8006a62 <_malloc_r+0xda>
 8006a20:	290b      	cmp	r1, #11
 8006a22:	d918      	bls.n	8006a56 <_malloc_r+0xce>
 8006a24:	19e2      	adds	r2, r4, r7
 8006a26:	6027      	str	r7, [r4, #0]
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d112      	bne.n	8006a52 <_malloc_r+0xca>
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	6011      	str	r1, [r2, #0]
 8006a34:	6053      	str	r3, [r2, #4]
 8006a36:	0030      	movs	r0, r6
 8006a38:	0025      	movs	r5, r4
 8006a3a:	f000 f82f 	bl	8006a9c <__malloc_unlock>
 8006a3e:	2207      	movs	r2, #7
 8006a40:	350b      	adds	r5, #11
 8006a42:	1d23      	adds	r3, r4, #4
 8006a44:	4395      	bics	r5, r2
 8006a46:	1aea      	subs	r2, r5, r3
 8006a48:	429d      	cmp	r5, r3
 8006a4a:	d0e4      	beq.n	8006a16 <_malloc_r+0x8e>
 8006a4c:	1b5b      	subs	r3, r3, r5
 8006a4e:	50a3      	str	r3, [r4, r2]
 8006a50:	e7e1      	b.n	8006a16 <_malloc_r+0x8e>
 8006a52:	605a      	str	r2, [r3, #4]
 8006a54:	e7ec      	b.n	8006a30 <_malloc_r+0xa8>
 8006a56:	6862      	ldr	r2, [r4, #4]
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d1d5      	bne.n	8006a08 <_malloc_r+0x80>
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e7e9      	b.n	8006a36 <_malloc_r+0xae>
 8006a62:	0023      	movs	r3, r4
 8006a64:	6864      	ldr	r4, [r4, #4]
 8006a66:	e7a2      	b.n	80069ae <_malloc_r+0x26>
 8006a68:	002c      	movs	r4, r5
 8006a6a:	686d      	ldr	r5, [r5, #4]
 8006a6c:	e7ab      	b.n	80069c6 <_malloc_r+0x3e>
 8006a6e:	0013      	movs	r3, r2
 8006a70:	e7c4      	b.n	80069fc <_malloc_r+0x74>
 8006a72:	230c      	movs	r3, #12
 8006a74:	0030      	movs	r0, r6
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f000 f810 	bl	8006a9c <__malloc_unlock>
 8006a7c:	e7cb      	b.n	8006a16 <_malloc_r+0x8e>
 8006a7e:	6027      	str	r7, [r4, #0]
 8006a80:	e7d9      	b.n	8006a36 <_malloc_r+0xae>
 8006a82:	605b      	str	r3, [r3, #4]
 8006a84:	deff      	udf	#255	; 0xff
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	200004b0 	.word	0x200004b0

08006a8c <__malloc_lock>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	4802      	ldr	r0, [pc, #8]	; (8006a98 <__malloc_lock+0xc>)
 8006a90:	f7ff f859 	bl	8005b46 <__retarget_lock_acquire_recursive>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	200004ac 	.word	0x200004ac

08006a9c <__malloc_unlock>:
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	4802      	ldr	r0, [pc, #8]	; (8006aa8 <__malloc_unlock+0xc>)
 8006aa0:	f7ff f852 	bl	8005b48 <__retarget_lock_release_recursive>
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	200004ac 	.word	0x200004ac

08006aac <_Balloc>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	69c5      	ldr	r5, [r0, #28]
 8006ab0:	0006      	movs	r6, r0
 8006ab2:	000c      	movs	r4, r1
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	d10e      	bne.n	8006ad6 <_Balloc+0x2a>
 8006ab8:	2010      	movs	r0, #16
 8006aba:	f7ff ff39 	bl	8006930 <malloc>
 8006abe:	1e02      	subs	r2, r0, #0
 8006ac0:	61f0      	str	r0, [r6, #28]
 8006ac2:	d104      	bne.n	8006ace <_Balloc+0x22>
 8006ac4:	216b      	movs	r1, #107	; 0x6b
 8006ac6:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <_Balloc+0x80>)
 8006ac8:	4819      	ldr	r0, [pc, #100]	; (8006b30 <_Balloc+0x84>)
 8006aca:	f000 fdcf 	bl	800766c <__assert_func>
 8006ace:	6045      	str	r5, [r0, #4]
 8006ad0:	6085      	str	r5, [r0, #8]
 8006ad2:	6005      	str	r5, [r0, #0]
 8006ad4:	60c5      	str	r5, [r0, #12]
 8006ad6:	69f5      	ldr	r5, [r6, #28]
 8006ad8:	68eb      	ldr	r3, [r5, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d013      	beq.n	8006b06 <_Balloc+0x5a>
 8006ade:	69f3      	ldr	r3, [r6, #28]
 8006ae0:	00a2      	lsls	r2, r4, #2
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d118      	bne.n	8006b1e <_Balloc+0x72>
 8006aec:	2101      	movs	r1, #1
 8006aee:	000d      	movs	r5, r1
 8006af0:	40a5      	lsls	r5, r4
 8006af2:	1d6a      	adds	r2, r5, #5
 8006af4:	0030      	movs	r0, r6
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	f000 fdd6 	bl	80076a8 <_calloc_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d00c      	beq.n	8006b1a <_Balloc+0x6e>
 8006b00:	6044      	str	r4, [r0, #4]
 8006b02:	6085      	str	r5, [r0, #8]
 8006b04:	e00d      	b.n	8006b22 <_Balloc+0x76>
 8006b06:	2221      	movs	r2, #33	; 0x21
 8006b08:	2104      	movs	r1, #4
 8006b0a:	0030      	movs	r0, r6
 8006b0c:	f000 fdcc 	bl	80076a8 <_calloc_r>
 8006b10:	69f3      	ldr	r3, [r6, #28]
 8006b12:	60e8      	str	r0, [r5, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e1      	bne.n	8006ade <_Balloc+0x32>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	6802      	ldr	r2, [r0, #0]
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	2300      	movs	r3, #0
 8006b24:	6103      	str	r3, [r0, #16]
 8006b26:	60c3      	str	r3, [r0, #12]
 8006b28:	e7f8      	b.n	8006b1c <_Balloc+0x70>
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	08007ef5 	.word	0x08007ef5
 8006b30:	08007f75 	.word	0x08007f75

08006b34 <_Bfree>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	69c6      	ldr	r6, [r0, #28]
 8006b38:	0005      	movs	r5, r0
 8006b3a:	000c      	movs	r4, r1
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	d10e      	bne.n	8006b5e <_Bfree+0x2a>
 8006b40:	2010      	movs	r0, #16
 8006b42:	f7ff fef5 	bl	8006930 <malloc>
 8006b46:	1e02      	subs	r2, r0, #0
 8006b48:	61e8      	str	r0, [r5, #28]
 8006b4a:	d104      	bne.n	8006b56 <_Bfree+0x22>
 8006b4c:	218f      	movs	r1, #143	; 0x8f
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <_Bfree+0x40>)
 8006b50:	4809      	ldr	r0, [pc, #36]	; (8006b78 <_Bfree+0x44>)
 8006b52:	f000 fd8b 	bl	800766c <__assert_func>
 8006b56:	6046      	str	r6, [r0, #4]
 8006b58:	6086      	str	r6, [r0, #8]
 8006b5a:	6006      	str	r6, [r0, #0]
 8006b5c:	60c6      	str	r6, [r0, #12]
 8006b5e:	2c00      	cmp	r4, #0
 8006b60:	d007      	beq.n	8006b72 <_Bfree+0x3e>
 8006b62:	69eb      	ldr	r3, [r5, #28]
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	0092      	lsls	r2, r2, #2
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	601c      	str	r4, [r3, #0]
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	08007ef5 	.word	0x08007ef5
 8006b78:	08007f75 	.word	0x08007f75

08006b7c <__multadd>:
 8006b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7e:	000e      	movs	r6, r1
 8006b80:	9001      	str	r0, [sp, #4]
 8006b82:	000c      	movs	r4, r1
 8006b84:	001d      	movs	r5, r3
 8006b86:	2000      	movs	r0, #0
 8006b88:	690f      	ldr	r7, [r1, #16]
 8006b8a:	3614      	adds	r6, #20
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	3001      	adds	r0, #1
 8006b90:	b299      	uxth	r1, r3
 8006b92:	4351      	muls	r1, r2
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	4353      	muls	r3, r2
 8006b98:	1949      	adds	r1, r1, r5
 8006b9a:	0c0d      	lsrs	r5, r1, #16
 8006b9c:	195b      	adds	r3, r3, r5
 8006b9e:	0c1d      	lsrs	r5, r3, #16
 8006ba0:	b289      	uxth	r1, r1
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	185b      	adds	r3, r3, r1
 8006ba6:	c608      	stmia	r6!, {r3}
 8006ba8:	4287      	cmp	r7, r0
 8006baa:	dcef      	bgt.n	8006b8c <__multadd+0x10>
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	d022      	beq.n	8006bf6 <__multadd+0x7a>
 8006bb0:	68a3      	ldr	r3, [r4, #8]
 8006bb2:	42bb      	cmp	r3, r7
 8006bb4:	dc19      	bgt.n	8006bea <__multadd+0x6e>
 8006bb6:	6861      	ldr	r1, [r4, #4]
 8006bb8:	9801      	ldr	r0, [sp, #4]
 8006bba:	3101      	adds	r1, #1
 8006bbc:	f7ff ff76 	bl	8006aac <_Balloc>
 8006bc0:	1e06      	subs	r6, r0, #0
 8006bc2:	d105      	bne.n	8006bd0 <__multadd+0x54>
 8006bc4:	0032      	movs	r2, r6
 8006bc6:	21ba      	movs	r1, #186	; 0xba
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <__multadd+0x80>)
 8006bca:	480d      	ldr	r0, [pc, #52]	; (8006c00 <__multadd+0x84>)
 8006bcc:	f000 fd4e 	bl	800766c <__assert_func>
 8006bd0:	0021      	movs	r1, r4
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	310c      	adds	r1, #12
 8006bd6:	3202      	adds	r2, #2
 8006bd8:	0092      	lsls	r2, r2, #2
 8006bda:	300c      	adds	r0, #12
 8006bdc:	f000 fd3c 	bl	8007658 <memcpy>
 8006be0:	0021      	movs	r1, r4
 8006be2:	9801      	ldr	r0, [sp, #4]
 8006be4:	f7ff ffa6 	bl	8006b34 <_Bfree>
 8006be8:	0034      	movs	r4, r6
 8006bea:	1d3b      	adds	r3, r7, #4
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	18e3      	adds	r3, r4, r3
 8006bf0:	605d      	str	r5, [r3, #4]
 8006bf2:	1c7b      	adds	r3, r7, #1
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	0020      	movs	r0, r4
 8006bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	08007f64 	.word	0x08007f64
 8006c00:	08007f75 	.word	0x08007f75

08006c04 <__hi0bits>:
 8006c04:	0003      	movs	r3, r0
 8006c06:	0c02      	lsrs	r2, r0, #16
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4282      	cmp	r2, r0
 8006c0c:	d101      	bne.n	8006c12 <__hi0bits+0xe>
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	3010      	adds	r0, #16
 8006c12:	0e1a      	lsrs	r2, r3, #24
 8006c14:	d101      	bne.n	8006c1a <__hi0bits+0x16>
 8006c16:	3008      	adds	r0, #8
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	0f1a      	lsrs	r2, r3, #28
 8006c1c:	d101      	bne.n	8006c22 <__hi0bits+0x1e>
 8006c1e:	3004      	adds	r0, #4
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	0f9a      	lsrs	r2, r3, #30
 8006c24:	d101      	bne.n	8006c2a <__hi0bits+0x26>
 8006c26:	3002      	adds	r0, #2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db03      	blt.n	8006c36 <__hi0bits+0x32>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	d400      	bmi.n	8006c36 <__hi0bits+0x32>
 8006c34:	2020      	movs	r0, #32
 8006c36:	4770      	bx	lr

08006c38 <__lo0bits>:
 8006c38:	6803      	ldr	r3, [r0, #0]
 8006c3a:	0001      	movs	r1, r0
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	0018      	movs	r0, r3
 8006c40:	4010      	ands	r0, r2
 8006c42:	4213      	tst	r3, r2
 8006c44:	d00d      	beq.n	8006c62 <__lo0bits+0x2a>
 8006c46:	3a06      	subs	r2, #6
 8006c48:	2000      	movs	r0, #0
 8006c4a:	4213      	tst	r3, r2
 8006c4c:	d105      	bne.n	8006c5a <__lo0bits+0x22>
 8006c4e:	3002      	adds	r0, #2
 8006c50:	4203      	tst	r3, r0
 8006c52:	d003      	beq.n	8006c5c <__lo0bits+0x24>
 8006c54:	40d3      	lsrs	r3, r2
 8006c56:	0010      	movs	r0, r2
 8006c58:	600b      	str	r3, [r1, #0]
 8006c5a:	4770      	bx	lr
 8006c5c:	089b      	lsrs	r3, r3, #2
 8006c5e:	600b      	str	r3, [r1, #0]
 8006c60:	e7fb      	b.n	8006c5a <__lo0bits+0x22>
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d101      	bne.n	8006c6c <__lo0bits+0x34>
 8006c68:	2010      	movs	r0, #16
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	d101      	bne.n	8006c76 <__lo0bits+0x3e>
 8006c72:	3008      	adds	r0, #8
 8006c74:	0a1b      	lsrs	r3, r3, #8
 8006c76:	071a      	lsls	r2, r3, #28
 8006c78:	d101      	bne.n	8006c7e <__lo0bits+0x46>
 8006c7a:	3004      	adds	r0, #4
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	079a      	lsls	r2, r3, #30
 8006c80:	d101      	bne.n	8006c86 <__lo0bits+0x4e>
 8006c82:	3002      	adds	r0, #2
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	07da      	lsls	r2, r3, #31
 8006c88:	d4e9      	bmi.n	8006c5e <__lo0bits+0x26>
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	d1e6      	bne.n	8006c5e <__lo0bits+0x26>
 8006c90:	2020      	movs	r0, #32
 8006c92:	e7e2      	b.n	8006c5a <__lo0bits+0x22>

08006c94 <__i2b>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	000c      	movs	r4, r1
 8006c98:	2101      	movs	r1, #1
 8006c9a:	f7ff ff07 	bl	8006aac <_Balloc>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d107      	bne.n	8006cb2 <__i2b+0x1e>
 8006ca2:	2146      	movs	r1, #70	; 0x46
 8006ca4:	4c05      	ldr	r4, [pc, #20]	; (8006cbc <__i2b+0x28>)
 8006ca6:	0002      	movs	r2, r0
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <__i2b+0x2c>)
 8006caa:	0020      	movs	r0, r4
 8006cac:	31ff      	adds	r1, #255	; 0xff
 8006cae:	f000 fcdd 	bl	800766c <__assert_func>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	6144      	str	r4, [r0, #20]
 8006cb6:	6103      	str	r3, [r0, #16]
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	08007f75 	.word	0x08007f75
 8006cc0:	08007f64 	.word	0x08007f64

08006cc4 <__multiply>:
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	0015      	movs	r5, r2
 8006cc8:	690a      	ldr	r2, [r1, #16]
 8006cca:	692b      	ldr	r3, [r5, #16]
 8006ccc:	000c      	movs	r4, r1
 8006cce:	b08b      	sub	sp, #44	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	da01      	bge.n	8006cd8 <__multiply+0x14>
 8006cd4:	002c      	movs	r4, r5
 8006cd6:	000d      	movs	r5, r1
 8006cd8:	6927      	ldr	r7, [r4, #16]
 8006cda:	692e      	ldr	r6, [r5, #16]
 8006cdc:	6861      	ldr	r1, [r4, #4]
 8006cde:	19bb      	adds	r3, r7, r6
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	68a3      	ldr	r3, [r4, #8]
 8006ce4:	19ba      	adds	r2, r7, r6
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	da00      	bge.n	8006cec <__multiply+0x28>
 8006cea:	3101      	adds	r1, #1
 8006cec:	f7ff fede 	bl	8006aac <_Balloc>
 8006cf0:	9002      	str	r0, [sp, #8]
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d106      	bne.n	8006d04 <__multiply+0x40>
 8006cf6:	21b1      	movs	r1, #177	; 0xb1
 8006cf8:	4b48      	ldr	r3, [pc, #288]	; (8006e1c <__multiply+0x158>)
 8006cfa:	4849      	ldr	r0, [pc, #292]	; (8006e20 <__multiply+0x15c>)
 8006cfc:	9a02      	ldr	r2, [sp, #8]
 8006cfe:	0049      	lsls	r1, r1, #1
 8006d00:	f000 fcb4 	bl	800766c <__assert_func>
 8006d04:	9b02      	ldr	r3, [sp, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	3314      	adds	r3, #20
 8006d0a:	469c      	mov	ip, r3
 8006d0c:	19bb      	adds	r3, r7, r6
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4463      	add	r3, ip
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	4663      	mov	r3, ip
 8006d16:	9904      	ldr	r1, [sp, #16]
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	d32a      	bcc.n	8006d72 <__multiply+0xae>
 8006d1c:	0023      	movs	r3, r4
 8006d1e:	00bf      	lsls	r7, r7, #2
 8006d20:	3314      	adds	r3, #20
 8006d22:	3514      	adds	r5, #20
 8006d24:	9308      	str	r3, [sp, #32]
 8006d26:	00b6      	lsls	r6, r6, #2
 8006d28:	19db      	adds	r3, r3, r7
 8006d2a:	9305      	str	r3, [sp, #20]
 8006d2c:	19ab      	adds	r3, r5, r6
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	2304      	movs	r3, #4
 8006d32:	9306      	str	r3, [sp, #24]
 8006d34:	0023      	movs	r3, r4
 8006d36:	9a05      	ldr	r2, [sp, #20]
 8006d38:	3315      	adds	r3, #21
 8006d3a:	9501      	str	r5, [sp, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d305      	bcc.n	8006d4c <__multiply+0x88>
 8006d40:	1b13      	subs	r3, r2, r4
 8006d42:	3b15      	subs	r3, #21
 8006d44:	089b      	lsrs	r3, r3, #2
 8006d46:	3301      	adds	r3, #1
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	9306      	str	r3, [sp, #24]
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d310      	bcc.n	8006d76 <__multiply+0xb2>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd05      	ble.n	8006d66 <__multiply+0xa2>
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	3b04      	subs	r3, #4
 8006d5e:	9304      	str	r3, [sp, #16]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d056      	beq.n	8006e14 <__multiply+0x150>
 8006d66:	9b02      	ldr	r3, [sp, #8]
 8006d68:	9a03      	ldr	r2, [sp, #12]
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	611a      	str	r2, [r3, #16]
 8006d6e:	b00b      	add	sp, #44	; 0x2c
 8006d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d72:	c304      	stmia	r3!, {r2}
 8006d74:	e7cf      	b.n	8006d16 <__multiply+0x52>
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	b280      	uxth	r0, r0
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d01e      	beq.n	8006dbe <__multiply+0xfa>
 8006d80:	4667      	mov	r7, ip
 8006d82:	2500      	movs	r5, #0
 8006d84:	9e08      	ldr	r6, [sp, #32]
 8006d86:	ce02      	ldmia	r6!, {r1}
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	9307      	str	r3, [sp, #28]
 8006d8c:	b28b      	uxth	r3, r1
 8006d8e:	4343      	muls	r3, r0
 8006d90:	001a      	movs	r2, r3
 8006d92:	466b      	mov	r3, sp
 8006d94:	8b9b      	ldrh	r3, [r3, #28]
 8006d96:	18d3      	adds	r3, r2, r3
 8006d98:	195b      	adds	r3, r3, r5
 8006d9a:	0c0d      	lsrs	r5, r1, #16
 8006d9c:	4345      	muls	r5, r0
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	0c11      	lsrs	r1, r2, #16
 8006da2:	1869      	adds	r1, r5, r1
 8006da4:	0c1a      	lsrs	r2, r3, #16
 8006da6:	188a      	adds	r2, r1, r2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	0c15      	lsrs	r5, r2, #16
 8006dac:	0412      	lsls	r2, r2, #16
 8006dae:	431a      	orrs	r2, r3
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	c704      	stmia	r7!, {r2}
 8006db4:	42b3      	cmp	r3, r6
 8006db6:	d8e6      	bhi.n	8006d86 <__multiply+0xc2>
 8006db8:	4663      	mov	r3, ip
 8006dba:	9a06      	ldr	r2, [sp, #24]
 8006dbc:	509d      	str	r5, [r3, r2]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	0c00      	lsrs	r0, r0, #16
 8006dc4:	d020      	beq.n	8006e08 <__multiply+0x144>
 8006dc6:	4663      	mov	r3, ip
 8006dc8:	0025      	movs	r5, r4
 8006dca:	4661      	mov	r1, ip
 8006dcc:	2700      	movs	r7, #0
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3514      	adds	r5, #20
 8006dd2:	682a      	ldr	r2, [r5, #0]
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	b292      	uxth	r2, r2
 8006dd8:	4342      	muls	r2, r0
 8006dda:	0c36      	lsrs	r6, r6, #16
 8006ddc:	1992      	adds	r2, r2, r6
 8006dde:	19d2      	adds	r2, r2, r7
 8006de0:	0416      	lsls	r6, r2, #16
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	431e      	orrs	r6, r3
 8006de6:	600e      	str	r6, [r1, #0]
 8006de8:	cd40      	ldmia	r5!, {r6}
 8006dea:	684b      	ldr	r3, [r1, #4]
 8006dec:	0c36      	lsrs	r6, r6, #16
 8006dee:	4346      	muls	r6, r0
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	0c12      	lsrs	r2, r2, #16
 8006df4:	18f3      	adds	r3, r6, r3
 8006df6:	189b      	adds	r3, r3, r2
 8006df8:	9a05      	ldr	r2, [sp, #20]
 8006dfa:	0c1f      	lsrs	r7, r3, #16
 8006dfc:	3104      	adds	r1, #4
 8006dfe:	42aa      	cmp	r2, r5
 8006e00:	d8e7      	bhi.n	8006dd2 <__multiply+0x10e>
 8006e02:	4662      	mov	r2, ip
 8006e04:	9906      	ldr	r1, [sp, #24]
 8006e06:	5053      	str	r3, [r2, r1]
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2304      	movs	r3, #4
 8006e10:	449c      	add	ip, r3
 8006e12:	e79b      	b.n	8006d4c <__multiply+0x88>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	9303      	str	r3, [sp, #12]
 8006e1a:	e79b      	b.n	8006d54 <__multiply+0x90>
 8006e1c:	08007f64 	.word	0x08007f64
 8006e20:	08007f75 	.word	0x08007f75

08006e24 <__pow5mult>:
 8006e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e26:	2303      	movs	r3, #3
 8006e28:	0015      	movs	r5, r2
 8006e2a:	0007      	movs	r7, r0
 8006e2c:	000e      	movs	r6, r1
 8006e2e:	401a      	ands	r2, r3
 8006e30:	421d      	tst	r5, r3
 8006e32:	d008      	beq.n	8006e46 <__pow5mult+0x22>
 8006e34:	4925      	ldr	r1, [pc, #148]	; (8006ecc <__pow5mult+0xa8>)
 8006e36:	3a01      	subs	r2, #1
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	5852      	ldr	r2, [r2, r1]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	0031      	movs	r1, r6
 8006e40:	f7ff fe9c 	bl	8006b7c <__multadd>
 8006e44:	0006      	movs	r6, r0
 8006e46:	10ad      	asrs	r5, r5, #2
 8006e48:	d03d      	beq.n	8006ec6 <__pow5mult+0xa2>
 8006e4a:	69fc      	ldr	r4, [r7, #28]
 8006e4c:	2c00      	cmp	r4, #0
 8006e4e:	d10f      	bne.n	8006e70 <__pow5mult+0x4c>
 8006e50:	2010      	movs	r0, #16
 8006e52:	f7ff fd6d 	bl	8006930 <malloc>
 8006e56:	1e02      	subs	r2, r0, #0
 8006e58:	61f8      	str	r0, [r7, #28]
 8006e5a:	d105      	bne.n	8006e68 <__pow5mult+0x44>
 8006e5c:	21b4      	movs	r1, #180	; 0xb4
 8006e5e:	4b1c      	ldr	r3, [pc, #112]	; (8006ed0 <__pow5mult+0xac>)
 8006e60:	481c      	ldr	r0, [pc, #112]	; (8006ed4 <__pow5mult+0xb0>)
 8006e62:	31ff      	adds	r1, #255	; 0xff
 8006e64:	f000 fc02 	bl	800766c <__assert_func>
 8006e68:	6044      	str	r4, [r0, #4]
 8006e6a:	6084      	str	r4, [r0, #8]
 8006e6c:	6004      	str	r4, [r0, #0]
 8006e6e:	60c4      	str	r4, [r0, #12]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	689c      	ldr	r4, [r3, #8]
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	d108      	bne.n	8006e8c <__pow5mult+0x68>
 8006e7a:	0038      	movs	r0, r7
 8006e7c:	4916      	ldr	r1, [pc, #88]	; (8006ed8 <__pow5mult+0xb4>)
 8006e7e:	f7ff ff09 	bl	8006c94 <__i2b>
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	0004      	movs	r4, r0
 8006e86:	6098      	str	r0, [r3, #8]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6003      	str	r3, [r0, #0]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	421d      	tst	r5, r3
 8006e90:	d00a      	beq.n	8006ea8 <__pow5mult+0x84>
 8006e92:	0031      	movs	r1, r6
 8006e94:	0022      	movs	r2, r4
 8006e96:	0038      	movs	r0, r7
 8006e98:	f7ff ff14 	bl	8006cc4 <__multiply>
 8006e9c:	0031      	movs	r1, r6
 8006e9e:	9001      	str	r0, [sp, #4]
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f7ff fe47 	bl	8006b34 <_Bfree>
 8006ea6:	9e01      	ldr	r6, [sp, #4]
 8006ea8:	106d      	asrs	r5, r5, #1
 8006eaa:	d00c      	beq.n	8006ec6 <__pow5mult+0xa2>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d107      	bne.n	8006ec2 <__pow5mult+0x9e>
 8006eb2:	0022      	movs	r2, r4
 8006eb4:	0021      	movs	r1, r4
 8006eb6:	0038      	movs	r0, r7
 8006eb8:	f7ff ff04 	bl	8006cc4 <__multiply>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6020      	str	r0, [r4, #0]
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	0004      	movs	r4, r0
 8006ec4:	e7e2      	b.n	8006e8c <__pow5mult+0x68>
 8006ec6:	0030      	movs	r0, r6
 8006ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	080080c0 	.word	0x080080c0
 8006ed0:	08007ef5 	.word	0x08007ef5
 8006ed4:	08007f75 	.word	0x08007f75
 8006ed8:	00000271 	.word	0x00000271

08006edc <__lshift>:
 8006edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ede:	000c      	movs	r4, r1
 8006ee0:	0017      	movs	r7, r2
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	1155      	asrs	r5, r2, #5
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	18eb      	adds	r3, r5, r3
 8006eea:	9302      	str	r3, [sp, #8]
 8006eec:	3301      	adds	r3, #1
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	6849      	ldr	r1, [r1, #4]
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	9004      	str	r0, [sp, #16]
 8006ef6:	9a01      	ldr	r2, [sp, #4]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	db10      	blt.n	8006f1e <__lshift+0x42>
 8006efc:	9804      	ldr	r0, [sp, #16]
 8006efe:	f7ff fdd5 	bl	8006aac <_Balloc>
 8006f02:	2300      	movs	r3, #0
 8006f04:	0002      	movs	r2, r0
 8006f06:	0006      	movs	r6, r0
 8006f08:	0019      	movs	r1, r3
 8006f0a:	3214      	adds	r2, #20
 8006f0c:	4298      	cmp	r0, r3
 8006f0e:	d10c      	bne.n	8006f2a <__lshift+0x4e>
 8006f10:	31df      	adds	r1, #223	; 0xdf
 8006f12:	0032      	movs	r2, r6
 8006f14:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <__lshift+0xd4>)
 8006f16:	4827      	ldr	r0, [pc, #156]	; (8006fb4 <__lshift+0xd8>)
 8006f18:	31ff      	adds	r1, #255	; 0xff
 8006f1a:	f000 fba7 	bl	800766c <__assert_func>
 8006f1e:	3101      	adds	r1, #1
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	e7e8      	b.n	8006ef6 <__lshift+0x1a>
 8006f24:	0098      	lsls	r0, r3, #2
 8006f26:	5011      	str	r1, [r2, r0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	42ab      	cmp	r3, r5
 8006f2c:	dbfa      	blt.n	8006f24 <__lshift+0x48>
 8006f2e:	43eb      	mvns	r3, r5
 8006f30:	17db      	asrs	r3, r3, #31
 8006f32:	401d      	ands	r5, r3
 8006f34:	211f      	movs	r1, #31
 8006f36:	0023      	movs	r3, r4
 8006f38:	0038      	movs	r0, r7
 8006f3a:	00ad      	lsls	r5, r5, #2
 8006f3c:	1955      	adds	r5, r2, r5
 8006f3e:	6922      	ldr	r2, [r4, #16]
 8006f40:	3314      	adds	r3, #20
 8006f42:	0092      	lsls	r2, r2, #2
 8006f44:	4008      	ands	r0, r1
 8006f46:	4684      	mov	ip, r0
 8006f48:	189a      	adds	r2, r3, r2
 8006f4a:	420f      	tst	r7, r1
 8006f4c:	d02a      	beq.n	8006fa4 <__lshift+0xc8>
 8006f4e:	3101      	adds	r1, #1
 8006f50:	1a09      	subs	r1, r1, r0
 8006f52:	9105      	str	r1, [sp, #20]
 8006f54:	2100      	movs	r1, #0
 8006f56:	9503      	str	r5, [sp, #12]
 8006f58:	4667      	mov	r7, ip
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	40b8      	lsls	r0, r7
 8006f5e:	4308      	orrs	r0, r1
 8006f60:	9903      	ldr	r1, [sp, #12]
 8006f62:	c101      	stmia	r1!, {r0}
 8006f64:	9103      	str	r1, [sp, #12]
 8006f66:	9805      	ldr	r0, [sp, #20]
 8006f68:	cb02      	ldmia	r3!, {r1}
 8006f6a:	40c1      	lsrs	r1, r0
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d8f3      	bhi.n	8006f58 <__lshift+0x7c>
 8006f70:	0020      	movs	r0, r4
 8006f72:	3015      	adds	r0, #21
 8006f74:	2304      	movs	r3, #4
 8006f76:	4282      	cmp	r2, r0
 8006f78:	d304      	bcc.n	8006f84 <__lshift+0xa8>
 8006f7a:	1b13      	subs	r3, r2, r4
 8006f7c:	3b15      	subs	r3, #21
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	3301      	adds	r3, #1
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	50e9      	str	r1, [r5, r3]
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d002      	beq.n	8006f90 <__lshift+0xb4>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	9804      	ldr	r0, [sp, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	0021      	movs	r1, r4
 8006f98:	6133      	str	r3, [r6, #16]
 8006f9a:	f7ff fdcb 	bl	8006b34 <_Bfree>
 8006f9e:	0030      	movs	r0, r6
 8006fa0:	b007      	add	sp, #28
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa4:	cb02      	ldmia	r3!, {r1}
 8006fa6:	c502      	stmia	r5!, {r1}
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d8fb      	bhi.n	8006fa4 <__lshift+0xc8>
 8006fac:	e7f0      	b.n	8006f90 <__lshift+0xb4>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	08007f64 	.word	0x08007f64
 8006fb4:	08007f75 	.word	0x08007f75

08006fb8 <__mcmp>:
 8006fb8:	b530      	push	{r4, r5, lr}
 8006fba:	690b      	ldr	r3, [r1, #16]
 8006fbc:	6904      	ldr	r4, [r0, #16]
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	1ae0      	subs	r0, r4, r3
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d10e      	bne.n	8006fe4 <__mcmp+0x2c>
 8006fc6:	3214      	adds	r2, #20
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	3114      	adds	r1, #20
 8006fcc:	0014      	movs	r4, r2
 8006fce:	18c9      	adds	r1, r1, r3
 8006fd0:	18d2      	adds	r2, r2, r3
 8006fd2:	3a04      	subs	r2, #4
 8006fd4:	3904      	subs	r1, #4
 8006fd6:	6815      	ldr	r5, [r2, #0]
 8006fd8:	680b      	ldr	r3, [r1, #0]
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	d003      	beq.n	8006fe6 <__mcmp+0x2e>
 8006fde:	2001      	movs	r0, #1
 8006fe0:	429d      	cmp	r5, r3
 8006fe2:	d303      	bcc.n	8006fec <__mcmp+0x34>
 8006fe4:	bd30      	pop	{r4, r5, pc}
 8006fe6:	4294      	cmp	r4, r2
 8006fe8:	d3f3      	bcc.n	8006fd2 <__mcmp+0x1a>
 8006fea:	e7fb      	b.n	8006fe4 <__mcmp+0x2c>
 8006fec:	4240      	negs	r0, r0
 8006fee:	e7f9      	b.n	8006fe4 <__mcmp+0x2c>

08006ff0 <__mdiff>:
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	000e      	movs	r6, r1
 8006ff4:	0007      	movs	r7, r0
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	0030      	movs	r0, r6
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	0014      	movs	r4, r2
 8006ffe:	f7ff ffdb 	bl	8006fb8 <__mcmp>
 8007002:	1e05      	subs	r5, r0, #0
 8007004:	d110      	bne.n	8007028 <__mdiff+0x38>
 8007006:	0001      	movs	r1, r0
 8007008:	0038      	movs	r0, r7
 800700a:	f7ff fd4f 	bl	8006aac <_Balloc>
 800700e:	1e02      	subs	r2, r0, #0
 8007010:	d104      	bne.n	800701c <__mdiff+0x2c>
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <__mdiff+0x120>)
 8007014:	483f      	ldr	r0, [pc, #252]	; (8007114 <__mdiff+0x124>)
 8007016:	4940      	ldr	r1, [pc, #256]	; (8007118 <__mdiff+0x128>)
 8007018:	f000 fb28 	bl	800766c <__assert_func>
 800701c:	2301      	movs	r3, #1
 800701e:	6145      	str	r5, [r0, #20]
 8007020:	6103      	str	r3, [r0, #16]
 8007022:	0010      	movs	r0, r2
 8007024:	b007      	add	sp, #28
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007028:	2301      	movs	r3, #1
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	2800      	cmp	r0, #0
 800702e:	db04      	blt.n	800703a <__mdiff+0x4a>
 8007030:	0023      	movs	r3, r4
 8007032:	0034      	movs	r4, r6
 8007034:	001e      	movs	r6, r3
 8007036:	2300      	movs	r3, #0
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	0038      	movs	r0, r7
 800703c:	6861      	ldr	r1, [r4, #4]
 800703e:	f7ff fd35 	bl	8006aac <_Balloc>
 8007042:	1e02      	subs	r2, r0, #0
 8007044:	d103      	bne.n	800704e <__mdiff+0x5e>
 8007046:	4b32      	ldr	r3, [pc, #200]	; (8007110 <__mdiff+0x120>)
 8007048:	4832      	ldr	r0, [pc, #200]	; (8007114 <__mdiff+0x124>)
 800704a:	4934      	ldr	r1, [pc, #208]	; (800711c <__mdiff+0x12c>)
 800704c:	e7e4      	b.n	8007018 <__mdiff+0x28>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	2700      	movs	r7, #0
 8007052:	60c3      	str	r3, [r0, #12]
 8007054:	6920      	ldr	r0, [r4, #16]
 8007056:	3414      	adds	r4, #20
 8007058:	0083      	lsls	r3, r0, #2
 800705a:	18e3      	adds	r3, r4, r3
 800705c:	0021      	movs	r1, r4
 800705e:	9401      	str	r4, [sp, #4]
 8007060:	0034      	movs	r4, r6
 8007062:	9302      	str	r3, [sp, #8]
 8007064:	6933      	ldr	r3, [r6, #16]
 8007066:	3414      	adds	r4, #20
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	18e3      	adds	r3, r4, r3
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	0013      	movs	r3, r2
 8007070:	3314      	adds	r3, #20
 8007072:	469c      	mov	ip, r3
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	9104      	str	r1, [sp, #16]
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	cc02      	ldmia	r4!, {r1}
 800707c:	cb20      	ldmia	r3!, {r5}
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	b2ab      	uxth	r3, r5
 8007082:	19df      	adds	r7, r3, r7
 8007084:	b28b      	uxth	r3, r1
 8007086:	1afb      	subs	r3, r7, r3
 8007088:	0c09      	lsrs	r1, r1, #16
 800708a:	0c2d      	lsrs	r5, r5, #16
 800708c:	1a6d      	subs	r5, r5, r1
 800708e:	1419      	asrs	r1, r3, #16
 8007090:	1869      	adds	r1, r5, r1
 8007092:	b29b      	uxth	r3, r3
 8007094:	140f      	asrs	r7, r1, #16
 8007096:	0409      	lsls	r1, r1, #16
 8007098:	4319      	orrs	r1, r3
 800709a:	4663      	mov	r3, ip
 800709c:	c302      	stmia	r3!, {r1}
 800709e:	469c      	mov	ip, r3
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	d8e8      	bhi.n	8007078 <__mdiff+0x88>
 80070a6:	0031      	movs	r1, r6
 80070a8:	9c03      	ldr	r4, [sp, #12]
 80070aa:	3115      	adds	r1, #21
 80070ac:	2304      	movs	r3, #4
 80070ae:	428c      	cmp	r4, r1
 80070b0:	d304      	bcc.n	80070bc <__mdiff+0xcc>
 80070b2:	1ba3      	subs	r3, r4, r6
 80070b4:	3b15      	subs	r3, #21
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	3301      	adds	r3, #1
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	9901      	ldr	r1, [sp, #4]
 80070be:	18cd      	adds	r5, r1, r3
 80070c0:	9905      	ldr	r1, [sp, #20]
 80070c2:	002e      	movs	r6, r5
 80070c4:	18cb      	adds	r3, r1, r3
 80070c6:	469c      	mov	ip, r3
 80070c8:	9902      	ldr	r1, [sp, #8]
 80070ca:	428e      	cmp	r6, r1
 80070cc:	d310      	bcc.n	80070f0 <__mdiff+0x100>
 80070ce:	9e02      	ldr	r6, [sp, #8]
 80070d0:	1ee9      	subs	r1, r5, #3
 80070d2:	2400      	movs	r4, #0
 80070d4:	428e      	cmp	r6, r1
 80070d6:	d304      	bcc.n	80070e2 <__mdiff+0xf2>
 80070d8:	0031      	movs	r1, r6
 80070da:	3103      	adds	r1, #3
 80070dc:	1b49      	subs	r1, r1, r5
 80070de:	0889      	lsrs	r1, r1, #2
 80070e0:	008c      	lsls	r4, r1, #2
 80070e2:	191b      	adds	r3, r3, r4
 80070e4:	3b04      	subs	r3, #4
 80070e6:	6819      	ldr	r1, [r3, #0]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d00f      	beq.n	800710c <__mdiff+0x11c>
 80070ec:	6110      	str	r0, [r2, #16]
 80070ee:	e798      	b.n	8007022 <__mdiff+0x32>
 80070f0:	ce02      	ldmia	r6!, {r1}
 80070f2:	b28c      	uxth	r4, r1
 80070f4:	19e4      	adds	r4, r4, r7
 80070f6:	0c0f      	lsrs	r7, r1, #16
 80070f8:	1421      	asrs	r1, r4, #16
 80070fa:	1879      	adds	r1, r7, r1
 80070fc:	b2a4      	uxth	r4, r4
 80070fe:	140f      	asrs	r7, r1, #16
 8007100:	0409      	lsls	r1, r1, #16
 8007102:	4321      	orrs	r1, r4
 8007104:	4664      	mov	r4, ip
 8007106:	c402      	stmia	r4!, {r1}
 8007108:	46a4      	mov	ip, r4
 800710a:	e7dd      	b.n	80070c8 <__mdiff+0xd8>
 800710c:	3801      	subs	r0, #1
 800710e:	e7e9      	b.n	80070e4 <__mdiff+0xf4>
 8007110:	08007f64 	.word	0x08007f64
 8007114:	08007f75 	.word	0x08007f75
 8007118:	00000237 	.word	0x00000237
 800711c:	00000245 	.word	0x00000245

08007120 <__d2b>:
 8007120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007122:	2101      	movs	r1, #1
 8007124:	0014      	movs	r4, r2
 8007126:	001d      	movs	r5, r3
 8007128:	9f08      	ldr	r7, [sp, #32]
 800712a:	f7ff fcbf 	bl	8006aac <_Balloc>
 800712e:	1e06      	subs	r6, r0, #0
 8007130:	d105      	bne.n	800713e <__d2b+0x1e>
 8007132:	0032      	movs	r2, r6
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <__d2b+0xa8>)
 8007136:	4825      	ldr	r0, [pc, #148]	; (80071cc <__d2b+0xac>)
 8007138:	4925      	ldr	r1, [pc, #148]	; (80071d0 <__d2b+0xb0>)
 800713a:	f000 fa97 	bl	800766c <__assert_func>
 800713e:	032b      	lsls	r3, r5, #12
 8007140:	006d      	lsls	r5, r5, #1
 8007142:	0b1b      	lsrs	r3, r3, #12
 8007144:	0d6d      	lsrs	r5, r5, #21
 8007146:	d125      	bne.n	8007194 <__d2b+0x74>
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	2c00      	cmp	r4, #0
 800714c:	d028      	beq.n	80071a0 <__d2b+0x80>
 800714e:	4668      	mov	r0, sp
 8007150:	9400      	str	r4, [sp, #0]
 8007152:	f7ff fd71 	bl	8006c38 <__lo0bits>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	9900      	ldr	r1, [sp, #0]
 800715a:	2800      	cmp	r0, #0
 800715c:	d01e      	beq.n	800719c <__d2b+0x7c>
 800715e:	2220      	movs	r2, #32
 8007160:	001c      	movs	r4, r3
 8007162:	1a12      	subs	r2, r2, r0
 8007164:	4094      	lsls	r4, r2
 8007166:	0022      	movs	r2, r4
 8007168:	40c3      	lsrs	r3, r0
 800716a:	430a      	orrs	r2, r1
 800716c:	6172      	str	r2, [r6, #20]
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	9c01      	ldr	r4, [sp, #4]
 8007172:	61b4      	str	r4, [r6, #24]
 8007174:	1e63      	subs	r3, r4, #1
 8007176:	419c      	sbcs	r4, r3
 8007178:	3401      	adds	r4, #1
 800717a:	6134      	str	r4, [r6, #16]
 800717c:	2d00      	cmp	r5, #0
 800717e:	d017      	beq.n	80071b0 <__d2b+0x90>
 8007180:	2435      	movs	r4, #53	; 0x35
 8007182:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <__d2b+0xb4>)
 8007184:	18ed      	adds	r5, r5, r3
 8007186:	182d      	adds	r5, r5, r0
 8007188:	603d      	str	r5, [r7, #0]
 800718a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718c:	1a24      	subs	r4, r4, r0
 800718e:	601c      	str	r4, [r3, #0]
 8007190:	0030      	movs	r0, r6
 8007192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	0352      	lsls	r2, r2, #13
 8007198:	4313      	orrs	r3, r2
 800719a:	e7d5      	b.n	8007148 <__d2b+0x28>
 800719c:	6171      	str	r1, [r6, #20]
 800719e:	e7e7      	b.n	8007170 <__d2b+0x50>
 80071a0:	a801      	add	r0, sp, #4
 80071a2:	f7ff fd49 	bl	8006c38 <__lo0bits>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	2401      	movs	r4, #1
 80071aa:	6173      	str	r3, [r6, #20]
 80071ac:	3020      	adds	r0, #32
 80071ae:	e7e4      	b.n	800717a <__d2b+0x5a>
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <__d2b+0xb8>)
 80071b2:	18c0      	adds	r0, r0, r3
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <__d2b+0xbc>)
 80071b6:	6038      	str	r0, [r7, #0]
 80071b8:	18e3      	adds	r3, r4, r3
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	18f3      	adds	r3, r6, r3
 80071be:	6958      	ldr	r0, [r3, #20]
 80071c0:	f7ff fd20 	bl	8006c04 <__hi0bits>
 80071c4:	0164      	lsls	r4, r4, #5
 80071c6:	e7e0      	b.n	800718a <__d2b+0x6a>
 80071c8:	08007f64 	.word	0x08007f64
 80071cc:	08007f75 	.word	0x08007f75
 80071d0:	0000030f 	.word	0x0000030f
 80071d4:	fffffbcd 	.word	0xfffffbcd
 80071d8:	fffffbce 	.word	0xfffffbce
 80071dc:	3fffffff 	.word	0x3fffffff

080071e0 <__ssputs_r>:
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b085      	sub	sp, #20
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	688e      	ldr	r6, [r1, #8]
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	0007      	movs	r7, r0
 80071ee:	000c      	movs	r4, r1
 80071f0:	680b      	ldr	r3, [r1, #0]
 80071f2:	4296      	cmp	r6, r2
 80071f4:	d831      	bhi.n	800725a <__ssputs_r+0x7a>
 80071f6:	898a      	ldrh	r2, [r1, #12]
 80071f8:	2190      	movs	r1, #144	; 0x90
 80071fa:	00c9      	lsls	r1, r1, #3
 80071fc:	420a      	tst	r2, r1
 80071fe:	d029      	beq.n	8007254 <__ssputs_r+0x74>
 8007200:	2003      	movs	r0, #3
 8007202:	6921      	ldr	r1, [r4, #16]
 8007204:	1a5b      	subs	r3, r3, r1
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	4343      	muls	r3, r0
 800720c:	0fdd      	lsrs	r5, r3, #31
 800720e:	18ed      	adds	r5, r5, r3
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	9802      	ldr	r0, [sp, #8]
 8007214:	3301      	adds	r3, #1
 8007216:	181b      	adds	r3, r3, r0
 8007218:	106d      	asrs	r5, r5, #1
 800721a:	42ab      	cmp	r3, r5
 800721c:	d900      	bls.n	8007220 <__ssputs_r+0x40>
 800721e:	001d      	movs	r5, r3
 8007220:	0552      	lsls	r2, r2, #21
 8007222:	d529      	bpl.n	8007278 <__ssputs_r+0x98>
 8007224:	0029      	movs	r1, r5
 8007226:	0038      	movs	r0, r7
 8007228:	f7ff fbae 	bl	8006988 <_malloc_r>
 800722c:	1e06      	subs	r6, r0, #0
 800722e:	d02d      	beq.n	800728c <__ssputs_r+0xac>
 8007230:	9a02      	ldr	r2, [sp, #8]
 8007232:	6921      	ldr	r1, [r4, #16]
 8007234:	f000 fa10 	bl	8007658 <memcpy>
 8007238:	89a2      	ldrh	r2, [r4, #12]
 800723a:	4b19      	ldr	r3, [pc, #100]	; (80072a0 <__ssputs_r+0xc0>)
 800723c:	401a      	ands	r2, r3
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	4313      	orrs	r3, r2
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	6126      	str	r6, [r4, #16]
 8007248:	18f6      	adds	r6, r6, r3
 800724a:	6026      	str	r6, [r4, #0]
 800724c:	6165      	str	r5, [r4, #20]
 800724e:	9e01      	ldr	r6, [sp, #4]
 8007250:	1aed      	subs	r5, r5, r3
 8007252:	60a5      	str	r5, [r4, #8]
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	429e      	cmp	r6, r3
 8007258:	d900      	bls.n	800725c <__ssputs_r+0x7c>
 800725a:	9e01      	ldr	r6, [sp, #4]
 800725c:	0032      	movs	r2, r6
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	f000 f9d4 	bl	800760e <memmove>
 8007266:	2000      	movs	r0, #0
 8007268:	68a3      	ldr	r3, [r4, #8]
 800726a:	1b9b      	subs	r3, r3, r6
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	199b      	adds	r3, r3, r6
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	b005      	add	sp, #20
 8007276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007278:	002a      	movs	r2, r5
 800727a:	0038      	movs	r0, r7
 800727c:	f000 fa53 	bl	8007726 <_realloc_r>
 8007280:	1e06      	subs	r6, r0, #0
 8007282:	d1df      	bne.n	8007244 <__ssputs_r+0x64>
 8007284:	0038      	movs	r0, r7
 8007286:	6921      	ldr	r1, [r4, #16]
 8007288:	f7ff fb08 	bl	800689c <_free_r>
 800728c:	230c      	movs	r3, #12
 800728e:	2001      	movs	r0, #1
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	89a2      	ldrh	r2, [r4, #12]
 8007294:	3334      	adds	r3, #52	; 0x34
 8007296:	4313      	orrs	r3, r2
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	4240      	negs	r0, r0
 800729c:	e7ea      	b.n	8007274 <__ssputs_r+0x94>
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	fffffb7f 	.word	0xfffffb7f

080072a4 <_svfiprintf_r>:
 80072a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a6:	b0a1      	sub	sp, #132	; 0x84
 80072a8:	9003      	str	r0, [sp, #12]
 80072aa:	001d      	movs	r5, r3
 80072ac:	898b      	ldrh	r3, [r1, #12]
 80072ae:	000f      	movs	r7, r1
 80072b0:	0016      	movs	r6, r2
 80072b2:	061b      	lsls	r3, r3, #24
 80072b4:	d511      	bpl.n	80072da <_svfiprintf_r+0x36>
 80072b6:	690b      	ldr	r3, [r1, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10e      	bne.n	80072da <_svfiprintf_r+0x36>
 80072bc:	2140      	movs	r1, #64	; 0x40
 80072be:	f7ff fb63 	bl	8006988 <_malloc_r>
 80072c2:	6038      	str	r0, [r7, #0]
 80072c4:	6138      	str	r0, [r7, #16]
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d105      	bne.n	80072d6 <_svfiprintf_r+0x32>
 80072ca:	230c      	movs	r3, #12
 80072cc:	9a03      	ldr	r2, [sp, #12]
 80072ce:	3801      	subs	r0, #1
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	b021      	add	sp, #132	; 0x84
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	2340      	movs	r3, #64	; 0x40
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	2300      	movs	r3, #0
 80072dc:	ac08      	add	r4, sp, #32
 80072de:	6163      	str	r3, [r4, #20]
 80072e0:	3320      	adds	r3, #32
 80072e2:	7663      	strb	r3, [r4, #25]
 80072e4:	3310      	adds	r3, #16
 80072e6:	76a3      	strb	r3, [r4, #26]
 80072e8:	9507      	str	r5, [sp, #28]
 80072ea:	0035      	movs	r5, r6
 80072ec:	782b      	ldrb	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <_svfiprintf_r+0x52>
 80072f2:	2b25      	cmp	r3, #37	; 0x25
 80072f4:	d148      	bne.n	8007388 <_svfiprintf_r+0xe4>
 80072f6:	1bab      	subs	r3, r5, r6
 80072f8:	9305      	str	r3, [sp, #20]
 80072fa:	42b5      	cmp	r5, r6
 80072fc:	d00b      	beq.n	8007316 <_svfiprintf_r+0x72>
 80072fe:	0032      	movs	r2, r6
 8007300:	0039      	movs	r1, r7
 8007302:	9803      	ldr	r0, [sp, #12]
 8007304:	f7ff ff6c 	bl	80071e0 <__ssputs_r>
 8007308:	3001      	adds	r0, #1
 800730a:	d100      	bne.n	800730e <_svfiprintf_r+0x6a>
 800730c:	e0af      	b.n	800746e <_svfiprintf_r+0x1ca>
 800730e:	6963      	ldr	r3, [r4, #20]
 8007310:	9a05      	ldr	r2, [sp, #20]
 8007312:	189b      	adds	r3, r3, r2
 8007314:	6163      	str	r3, [r4, #20]
 8007316:	782b      	ldrb	r3, [r5, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d100      	bne.n	800731e <_svfiprintf_r+0x7a>
 800731c:	e0a7      	b.n	800746e <_svfiprintf_r+0x1ca>
 800731e:	2201      	movs	r2, #1
 8007320:	2300      	movs	r3, #0
 8007322:	4252      	negs	r2, r2
 8007324:	6062      	str	r2, [r4, #4]
 8007326:	a904      	add	r1, sp, #16
 8007328:	3254      	adds	r2, #84	; 0x54
 800732a:	1852      	adds	r2, r2, r1
 800732c:	1c6e      	adds	r6, r5, #1
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	60e3      	str	r3, [r4, #12]
 8007332:	60a3      	str	r3, [r4, #8]
 8007334:	7013      	strb	r3, [r2, #0]
 8007336:	65a3      	str	r3, [r4, #88]	; 0x58
 8007338:	4b55      	ldr	r3, [pc, #340]	; (8007490 <_svfiprintf_r+0x1ec>)
 800733a:	2205      	movs	r2, #5
 800733c:	0018      	movs	r0, r3
 800733e:	7831      	ldrb	r1, [r6, #0]
 8007340:	9305      	str	r3, [sp, #20]
 8007342:	f7fe fc02 	bl	8005b4a <memchr>
 8007346:	1c75      	adds	r5, r6, #1
 8007348:	2800      	cmp	r0, #0
 800734a:	d11f      	bne.n	800738c <_svfiprintf_r+0xe8>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	06d3      	lsls	r3, r2, #27
 8007350:	d504      	bpl.n	800735c <_svfiprintf_r+0xb8>
 8007352:	2353      	movs	r3, #83	; 0x53
 8007354:	a904      	add	r1, sp, #16
 8007356:	185b      	adds	r3, r3, r1
 8007358:	2120      	movs	r1, #32
 800735a:	7019      	strb	r1, [r3, #0]
 800735c:	0713      	lsls	r3, r2, #28
 800735e:	d504      	bpl.n	800736a <_svfiprintf_r+0xc6>
 8007360:	2353      	movs	r3, #83	; 0x53
 8007362:	a904      	add	r1, sp, #16
 8007364:	185b      	adds	r3, r3, r1
 8007366:	212b      	movs	r1, #43	; 0x2b
 8007368:	7019      	strb	r1, [r3, #0]
 800736a:	7833      	ldrb	r3, [r6, #0]
 800736c:	2b2a      	cmp	r3, #42	; 0x2a
 800736e:	d016      	beq.n	800739e <_svfiprintf_r+0xfa>
 8007370:	0035      	movs	r5, r6
 8007372:	2100      	movs	r1, #0
 8007374:	200a      	movs	r0, #10
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	782a      	ldrb	r2, [r5, #0]
 800737a:	1c6e      	adds	r6, r5, #1
 800737c:	3a30      	subs	r2, #48	; 0x30
 800737e:	2a09      	cmp	r2, #9
 8007380:	d94e      	bls.n	8007420 <_svfiprintf_r+0x17c>
 8007382:	2900      	cmp	r1, #0
 8007384:	d111      	bne.n	80073aa <_svfiprintf_r+0x106>
 8007386:	e017      	b.n	80073b8 <_svfiprintf_r+0x114>
 8007388:	3501      	adds	r5, #1
 800738a:	e7af      	b.n	80072ec <_svfiprintf_r+0x48>
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	1ac0      	subs	r0, r0, r3
 8007392:	2301      	movs	r3, #1
 8007394:	4083      	lsls	r3, r0
 8007396:	4313      	orrs	r3, r2
 8007398:	002e      	movs	r6, r5
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	e7cc      	b.n	8007338 <_svfiprintf_r+0x94>
 800739e:	9b07      	ldr	r3, [sp, #28]
 80073a0:	1d19      	adds	r1, r3, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	9107      	str	r1, [sp, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	db01      	blt.n	80073ae <_svfiprintf_r+0x10a>
 80073aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ac:	e004      	b.n	80073b8 <_svfiprintf_r+0x114>
 80073ae:	425b      	negs	r3, r3
 80073b0:	60e3      	str	r3, [r4, #12]
 80073b2:	2302      	movs	r3, #2
 80073b4:	4313      	orrs	r3, r2
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	782b      	ldrb	r3, [r5, #0]
 80073ba:	2b2e      	cmp	r3, #46	; 0x2e
 80073bc:	d10a      	bne.n	80073d4 <_svfiprintf_r+0x130>
 80073be:	786b      	ldrb	r3, [r5, #1]
 80073c0:	2b2a      	cmp	r3, #42	; 0x2a
 80073c2:	d135      	bne.n	8007430 <_svfiprintf_r+0x18c>
 80073c4:	9b07      	ldr	r3, [sp, #28]
 80073c6:	3502      	adds	r5, #2
 80073c8:	1d1a      	adds	r2, r3, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	9207      	str	r2, [sp, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	db2b      	blt.n	800742a <_svfiprintf_r+0x186>
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	4e2f      	ldr	r6, [pc, #188]	; (8007494 <_svfiprintf_r+0x1f0>)
 80073d6:	2203      	movs	r2, #3
 80073d8:	0030      	movs	r0, r6
 80073da:	7829      	ldrb	r1, [r5, #0]
 80073dc:	f7fe fbb5 	bl	8005b4a <memchr>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d006      	beq.n	80073f2 <_svfiprintf_r+0x14e>
 80073e4:	2340      	movs	r3, #64	; 0x40
 80073e6:	1b80      	subs	r0, r0, r6
 80073e8:	4083      	lsls	r3, r0
 80073ea:	6822      	ldr	r2, [r4, #0]
 80073ec:	3501      	adds	r5, #1
 80073ee:	4313      	orrs	r3, r2
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	7829      	ldrb	r1, [r5, #0]
 80073f4:	2206      	movs	r2, #6
 80073f6:	4828      	ldr	r0, [pc, #160]	; (8007498 <_svfiprintf_r+0x1f4>)
 80073f8:	1c6e      	adds	r6, r5, #1
 80073fa:	7621      	strb	r1, [r4, #24]
 80073fc:	f7fe fba5 	bl	8005b4a <memchr>
 8007400:	2800      	cmp	r0, #0
 8007402:	d03c      	beq.n	800747e <_svfiprintf_r+0x1da>
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <_svfiprintf_r+0x1f8>)
 8007406:	2b00      	cmp	r3, #0
 8007408:	d125      	bne.n	8007456 <_svfiprintf_r+0x1b2>
 800740a:	2207      	movs	r2, #7
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	3307      	adds	r3, #7
 8007410:	4393      	bics	r3, r2
 8007412:	3308      	adds	r3, #8
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	6963      	ldr	r3, [r4, #20]
 8007418:	9a04      	ldr	r2, [sp, #16]
 800741a:	189b      	adds	r3, r3, r2
 800741c:	6163      	str	r3, [r4, #20]
 800741e:	e764      	b.n	80072ea <_svfiprintf_r+0x46>
 8007420:	4343      	muls	r3, r0
 8007422:	0035      	movs	r5, r6
 8007424:	2101      	movs	r1, #1
 8007426:	189b      	adds	r3, r3, r2
 8007428:	e7a6      	b.n	8007378 <_svfiprintf_r+0xd4>
 800742a:	2301      	movs	r3, #1
 800742c:	425b      	negs	r3, r3
 800742e:	e7d0      	b.n	80073d2 <_svfiprintf_r+0x12e>
 8007430:	2300      	movs	r3, #0
 8007432:	200a      	movs	r0, #10
 8007434:	001a      	movs	r2, r3
 8007436:	3501      	adds	r5, #1
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	7829      	ldrb	r1, [r5, #0]
 800743c:	1c6e      	adds	r6, r5, #1
 800743e:	3930      	subs	r1, #48	; 0x30
 8007440:	2909      	cmp	r1, #9
 8007442:	d903      	bls.n	800744c <_svfiprintf_r+0x1a8>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0c5      	beq.n	80073d4 <_svfiprintf_r+0x130>
 8007448:	9209      	str	r2, [sp, #36]	; 0x24
 800744a:	e7c3      	b.n	80073d4 <_svfiprintf_r+0x130>
 800744c:	4342      	muls	r2, r0
 800744e:	0035      	movs	r5, r6
 8007450:	2301      	movs	r3, #1
 8007452:	1852      	adds	r2, r2, r1
 8007454:	e7f1      	b.n	800743a <_svfiprintf_r+0x196>
 8007456:	aa07      	add	r2, sp, #28
 8007458:	9200      	str	r2, [sp, #0]
 800745a:	0021      	movs	r1, r4
 800745c:	003a      	movs	r2, r7
 800745e:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <_svfiprintf_r+0x1fc>)
 8007460:	9803      	ldr	r0, [sp, #12]
 8007462:	f7fd fde5 	bl	8005030 <_printf_float>
 8007466:	9004      	str	r0, [sp, #16]
 8007468:	9b04      	ldr	r3, [sp, #16]
 800746a:	3301      	adds	r3, #1
 800746c:	d1d3      	bne.n	8007416 <_svfiprintf_r+0x172>
 800746e:	89bb      	ldrh	r3, [r7, #12]
 8007470:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007472:	065b      	lsls	r3, r3, #25
 8007474:	d400      	bmi.n	8007478 <_svfiprintf_r+0x1d4>
 8007476:	e72c      	b.n	80072d2 <_svfiprintf_r+0x2e>
 8007478:	2001      	movs	r0, #1
 800747a:	4240      	negs	r0, r0
 800747c:	e729      	b.n	80072d2 <_svfiprintf_r+0x2e>
 800747e:	aa07      	add	r2, sp, #28
 8007480:	9200      	str	r2, [sp, #0]
 8007482:	0021      	movs	r1, r4
 8007484:	003a      	movs	r2, r7
 8007486:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <_svfiprintf_r+0x1fc>)
 8007488:	9803      	ldr	r0, [sp, #12]
 800748a:	f7fe f897 	bl	80055bc <_printf_i>
 800748e:	e7ea      	b.n	8007466 <_svfiprintf_r+0x1c2>
 8007490:	080080cc 	.word	0x080080cc
 8007494:	080080d2 	.word	0x080080d2
 8007498:	080080d6 	.word	0x080080d6
 800749c:	08005031 	.word	0x08005031
 80074a0:	080071e1 	.word	0x080071e1

080074a4 <__sflush_r>:
 80074a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074a6:	898b      	ldrh	r3, [r1, #12]
 80074a8:	0005      	movs	r5, r0
 80074aa:	000c      	movs	r4, r1
 80074ac:	071a      	lsls	r2, r3, #28
 80074ae:	d45c      	bmi.n	800756a <__sflush_r+0xc6>
 80074b0:	684a      	ldr	r2, [r1, #4]
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	dc04      	bgt.n	80074c0 <__sflush_r+0x1c>
 80074b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80074b8:	2a00      	cmp	r2, #0
 80074ba:	dc01      	bgt.n	80074c0 <__sflush_r+0x1c>
 80074bc:	2000      	movs	r0, #0
 80074be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80074c2:	2f00      	cmp	r7, #0
 80074c4:	d0fa      	beq.n	80074bc <__sflush_r+0x18>
 80074c6:	2200      	movs	r2, #0
 80074c8:	2080      	movs	r0, #128	; 0x80
 80074ca:	682e      	ldr	r6, [r5, #0]
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	001a      	movs	r2, r3
 80074d0:	0140      	lsls	r0, r0, #5
 80074d2:	6a21      	ldr	r1, [r4, #32]
 80074d4:	4002      	ands	r2, r0
 80074d6:	4203      	tst	r3, r0
 80074d8:	d034      	beq.n	8007544 <__sflush_r+0xa0>
 80074da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	075b      	lsls	r3, r3, #29
 80074e0:	d506      	bpl.n	80074f0 <__sflush_r+0x4c>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	1ac0      	subs	r0, r0, r3
 80074e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <__sflush_r+0x4c>
 80074ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ee:	1ac0      	subs	r0, r0, r3
 80074f0:	0002      	movs	r2, r0
 80074f2:	2300      	movs	r3, #0
 80074f4:	0028      	movs	r0, r5
 80074f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	47b8      	blx	r7
 80074fc:	89a2      	ldrh	r2, [r4, #12]
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d106      	bne.n	8007510 <__sflush_r+0x6c>
 8007502:	6829      	ldr	r1, [r5, #0]
 8007504:	291d      	cmp	r1, #29
 8007506:	d82c      	bhi.n	8007562 <__sflush_r+0xbe>
 8007508:	4b2a      	ldr	r3, [pc, #168]	; (80075b4 <__sflush_r+0x110>)
 800750a:	410b      	asrs	r3, r1
 800750c:	07db      	lsls	r3, r3, #31
 800750e:	d428      	bmi.n	8007562 <__sflush_r+0xbe>
 8007510:	2300      	movs	r3, #0
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	04d2      	lsls	r2, r2, #19
 800751a:	d505      	bpl.n	8007528 <__sflush_r+0x84>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <__sflush_r+0x82>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d100      	bne.n	8007528 <__sflush_r+0x84>
 8007526:	6560      	str	r0, [r4, #84]	; 0x54
 8007528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752a:	602e      	str	r6, [r5, #0]
 800752c:	2900      	cmp	r1, #0
 800752e:	d0c5      	beq.n	80074bc <__sflush_r+0x18>
 8007530:	0023      	movs	r3, r4
 8007532:	3344      	adds	r3, #68	; 0x44
 8007534:	4299      	cmp	r1, r3
 8007536:	d002      	beq.n	800753e <__sflush_r+0x9a>
 8007538:	0028      	movs	r0, r5
 800753a:	f7ff f9af 	bl	800689c <_free_r>
 800753e:	2000      	movs	r0, #0
 8007540:	6360      	str	r0, [r4, #52]	; 0x34
 8007542:	e7bc      	b.n	80074be <__sflush_r+0x1a>
 8007544:	2301      	movs	r3, #1
 8007546:	0028      	movs	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d1c6      	bne.n	80074dc <__sflush_r+0x38>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0c3      	beq.n	80074dc <__sflush_r+0x38>
 8007554:	2b1d      	cmp	r3, #29
 8007556:	d001      	beq.n	800755c <__sflush_r+0xb8>
 8007558:	2b16      	cmp	r3, #22
 800755a:	d101      	bne.n	8007560 <__sflush_r+0xbc>
 800755c:	602e      	str	r6, [r5, #0]
 800755e:	e7ad      	b.n	80074bc <__sflush_r+0x18>
 8007560:	89a2      	ldrh	r2, [r4, #12]
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	4313      	orrs	r3, r2
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	e7a9      	b.n	80074be <__sflush_r+0x1a>
 800756a:	690e      	ldr	r6, [r1, #16]
 800756c:	2e00      	cmp	r6, #0
 800756e:	d0a5      	beq.n	80074bc <__sflush_r+0x18>
 8007570:	680f      	ldr	r7, [r1, #0]
 8007572:	600e      	str	r6, [r1, #0]
 8007574:	1bba      	subs	r2, r7, r6
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	079b      	lsls	r3, r3, #30
 800757c:	d100      	bne.n	8007580 <__sflush_r+0xdc>
 800757e:	694a      	ldr	r2, [r1, #20]
 8007580:	60a2      	str	r2, [r4, #8]
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd99      	ble.n	80074bc <__sflush_r+0x18>
 8007588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800758a:	0032      	movs	r2, r6
 800758c:	001f      	movs	r7, r3
 800758e:	0028      	movs	r0, r5
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	6a21      	ldr	r1, [r4, #32]
 8007594:	47b8      	blx	r7
 8007596:	2800      	cmp	r0, #0
 8007598:	dc06      	bgt.n	80075a8 <__sflush_r+0x104>
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	2001      	movs	r0, #1
 800759e:	89a2      	ldrh	r2, [r4, #12]
 80075a0:	4240      	negs	r0, r0
 80075a2:	4313      	orrs	r3, r2
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	e78a      	b.n	80074be <__sflush_r+0x1a>
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	1836      	adds	r6, r6, r0
 80075ac:	1a1b      	subs	r3, r3, r0
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	e7e7      	b.n	8007582 <__sflush_r+0xde>
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	dfbffffe 	.word	0xdfbffffe

080075b8 <_fflush_r>:
 80075b8:	690b      	ldr	r3, [r1, #16]
 80075ba:	b570      	push	{r4, r5, r6, lr}
 80075bc:	0005      	movs	r5, r0
 80075be:	000c      	movs	r4, r1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <_fflush_r+0x12>
 80075c4:	2500      	movs	r5, #0
 80075c6:	0028      	movs	r0, r5
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d004      	beq.n	80075d8 <_fflush_r+0x20>
 80075ce:	6a03      	ldr	r3, [r0, #32]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <_fflush_r+0x20>
 80075d4:	f7fe f992 	bl	80058fc <__sinit>
 80075d8:	220c      	movs	r2, #12
 80075da:	5ea3      	ldrsh	r3, [r4, r2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f1      	beq.n	80075c4 <_fflush_r+0xc>
 80075e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e2:	07d2      	lsls	r2, r2, #31
 80075e4:	d404      	bmi.n	80075f0 <_fflush_r+0x38>
 80075e6:	059b      	lsls	r3, r3, #22
 80075e8:	d402      	bmi.n	80075f0 <_fflush_r+0x38>
 80075ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ec:	f7fe faab 	bl	8005b46 <__retarget_lock_acquire_recursive>
 80075f0:	0028      	movs	r0, r5
 80075f2:	0021      	movs	r1, r4
 80075f4:	f7ff ff56 	bl	80074a4 <__sflush_r>
 80075f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fa:	0005      	movs	r5, r0
 80075fc:	07db      	lsls	r3, r3, #31
 80075fe:	d4e2      	bmi.n	80075c6 <_fflush_r+0xe>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	059b      	lsls	r3, r3, #22
 8007604:	d4df      	bmi.n	80075c6 <_fflush_r+0xe>
 8007606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007608:	f7fe fa9e 	bl	8005b48 <__retarget_lock_release_recursive>
 800760c:	e7db      	b.n	80075c6 <_fflush_r+0xe>

0800760e <memmove>:
 800760e:	b510      	push	{r4, lr}
 8007610:	4288      	cmp	r0, r1
 8007612:	d902      	bls.n	800761a <memmove+0xc>
 8007614:	188b      	adds	r3, r1, r2
 8007616:	4298      	cmp	r0, r3
 8007618:	d303      	bcc.n	8007622 <memmove+0x14>
 800761a:	2300      	movs	r3, #0
 800761c:	e007      	b.n	800762e <memmove+0x20>
 800761e:	5c8b      	ldrb	r3, [r1, r2]
 8007620:	5483      	strb	r3, [r0, r2]
 8007622:	3a01      	subs	r2, #1
 8007624:	d2fb      	bcs.n	800761e <memmove+0x10>
 8007626:	bd10      	pop	{r4, pc}
 8007628:	5ccc      	ldrb	r4, [r1, r3]
 800762a:	54c4      	strb	r4, [r0, r3]
 800762c:	3301      	adds	r3, #1
 800762e:	429a      	cmp	r2, r3
 8007630:	d1fa      	bne.n	8007628 <memmove+0x1a>
 8007632:	e7f8      	b.n	8007626 <memmove+0x18>

08007634 <_sbrk_r>:
 8007634:	2300      	movs	r3, #0
 8007636:	b570      	push	{r4, r5, r6, lr}
 8007638:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_sbrk_r+0x20>)
 800763a:	0004      	movs	r4, r0
 800763c:	0008      	movs	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7fb fb5c 	bl	8002cfc <_sbrk>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d103      	bne.n	8007650 <_sbrk_r+0x1c>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d000      	beq.n	8007650 <_sbrk_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	200004a8 	.word	0x200004a8

08007658 <memcpy>:
 8007658:	2300      	movs	r3, #0
 800765a:	b510      	push	{r4, lr}
 800765c:	429a      	cmp	r2, r3
 800765e:	d100      	bne.n	8007662 <memcpy+0xa>
 8007660:	bd10      	pop	{r4, pc}
 8007662:	5ccc      	ldrb	r4, [r1, r3]
 8007664:	54c4      	strb	r4, [r0, r3]
 8007666:	3301      	adds	r3, #1
 8007668:	e7f8      	b.n	800765c <memcpy+0x4>
	...

0800766c <__assert_func>:
 800766c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800766e:	0014      	movs	r4, r2
 8007670:	001a      	movs	r2, r3
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <__assert_func+0x2c>)
 8007674:	0005      	movs	r5, r0
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	000e      	movs	r6, r1
 800767a:	68d8      	ldr	r0, [r3, #12]
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <__assert_func+0x30>)
 800767e:	2c00      	cmp	r4, #0
 8007680:	d101      	bne.n	8007686 <__assert_func+0x1a>
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <__assert_func+0x34>)
 8007684:	001c      	movs	r4, r3
 8007686:	4907      	ldr	r1, [pc, #28]	; (80076a4 <__assert_func+0x38>)
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	9402      	str	r4, [sp, #8]
 800768c:	002b      	movs	r3, r5
 800768e:	9600      	str	r6, [sp, #0]
 8007690:	f000 f886 	bl	80077a0 <fiprintf>
 8007694:	f000 f894 	bl	80077c0 <abort>
 8007698:	20000068 	.word	0x20000068
 800769c:	080080e7 	.word	0x080080e7
 80076a0:	08008122 	.word	0x08008122
 80076a4:	080080f4 	.word	0x080080f4

080076a8 <_calloc_r>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	0c0b      	lsrs	r3, r1, #16
 80076ac:	0c15      	lsrs	r5, r2, #16
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11e      	bne.n	80076f0 <_calloc_r+0x48>
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	d10c      	bne.n	80076d0 <_calloc_r+0x28>
 80076b6:	b289      	uxth	r1, r1
 80076b8:	b294      	uxth	r4, r2
 80076ba:	434c      	muls	r4, r1
 80076bc:	0021      	movs	r1, r4
 80076be:	f7ff f963 	bl	8006988 <_malloc_r>
 80076c2:	1e05      	subs	r5, r0, #0
 80076c4:	d01b      	beq.n	80076fe <_calloc_r+0x56>
 80076c6:	0022      	movs	r2, r4
 80076c8:	2100      	movs	r1, #0
 80076ca:	f7fe f9b7 	bl	8005a3c <memset>
 80076ce:	e016      	b.n	80076fe <_calloc_r+0x56>
 80076d0:	1c2b      	adds	r3, r5, #0
 80076d2:	1c0c      	adds	r4, r1, #0
 80076d4:	b289      	uxth	r1, r1
 80076d6:	b292      	uxth	r2, r2
 80076d8:	434a      	muls	r2, r1
 80076da:	b2a1      	uxth	r1, r4
 80076dc:	b29c      	uxth	r4, r3
 80076de:	434c      	muls	r4, r1
 80076e0:	0c13      	lsrs	r3, r2, #16
 80076e2:	18e4      	adds	r4, r4, r3
 80076e4:	0c23      	lsrs	r3, r4, #16
 80076e6:	d107      	bne.n	80076f8 <_calloc_r+0x50>
 80076e8:	0424      	lsls	r4, r4, #16
 80076ea:	b292      	uxth	r2, r2
 80076ec:	4314      	orrs	r4, r2
 80076ee:	e7e5      	b.n	80076bc <_calloc_r+0x14>
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d101      	bne.n	80076f8 <_calloc_r+0x50>
 80076f4:	1c14      	adds	r4, r2, #0
 80076f6:	e7ed      	b.n	80076d4 <_calloc_r+0x2c>
 80076f8:	230c      	movs	r3, #12
 80076fa:	2500      	movs	r5, #0
 80076fc:	6003      	str	r3, [r0, #0]
 80076fe:	0028      	movs	r0, r5
 8007700:	bd70      	pop	{r4, r5, r6, pc}

08007702 <__ascii_mbtowc>:
 8007702:	b082      	sub	sp, #8
 8007704:	2900      	cmp	r1, #0
 8007706:	d100      	bne.n	800770a <__ascii_mbtowc+0x8>
 8007708:	a901      	add	r1, sp, #4
 800770a:	1e10      	subs	r0, r2, #0
 800770c:	d006      	beq.n	800771c <__ascii_mbtowc+0x1a>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d006      	beq.n	8007720 <__ascii_mbtowc+0x1e>
 8007712:	7813      	ldrb	r3, [r2, #0]
 8007714:	600b      	str	r3, [r1, #0]
 8007716:	7810      	ldrb	r0, [r2, #0]
 8007718:	1e43      	subs	r3, r0, #1
 800771a:	4198      	sbcs	r0, r3
 800771c:	b002      	add	sp, #8
 800771e:	4770      	bx	lr
 8007720:	2002      	movs	r0, #2
 8007722:	4240      	negs	r0, r0
 8007724:	e7fa      	b.n	800771c <__ascii_mbtowc+0x1a>

08007726 <_realloc_r>:
 8007726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007728:	0007      	movs	r7, r0
 800772a:	000e      	movs	r6, r1
 800772c:	0014      	movs	r4, r2
 800772e:	2900      	cmp	r1, #0
 8007730:	d105      	bne.n	800773e <_realloc_r+0x18>
 8007732:	0011      	movs	r1, r2
 8007734:	f7ff f928 	bl	8006988 <_malloc_r>
 8007738:	0005      	movs	r5, r0
 800773a:	0028      	movs	r0, r5
 800773c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800773e:	2a00      	cmp	r2, #0
 8007740:	d103      	bne.n	800774a <_realloc_r+0x24>
 8007742:	f7ff f8ab 	bl	800689c <_free_r>
 8007746:	0025      	movs	r5, r4
 8007748:	e7f7      	b.n	800773a <_realloc_r+0x14>
 800774a:	f000 f840 	bl	80077ce <_malloc_usable_size_r>
 800774e:	9001      	str	r0, [sp, #4]
 8007750:	4284      	cmp	r4, r0
 8007752:	d803      	bhi.n	800775c <_realloc_r+0x36>
 8007754:	0035      	movs	r5, r6
 8007756:	0843      	lsrs	r3, r0, #1
 8007758:	42a3      	cmp	r3, r4
 800775a:	d3ee      	bcc.n	800773a <_realloc_r+0x14>
 800775c:	0021      	movs	r1, r4
 800775e:	0038      	movs	r0, r7
 8007760:	f7ff f912 	bl	8006988 <_malloc_r>
 8007764:	1e05      	subs	r5, r0, #0
 8007766:	d0e8      	beq.n	800773a <_realloc_r+0x14>
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	0022      	movs	r2, r4
 800776c:	429c      	cmp	r4, r3
 800776e:	d900      	bls.n	8007772 <_realloc_r+0x4c>
 8007770:	001a      	movs	r2, r3
 8007772:	0031      	movs	r1, r6
 8007774:	0028      	movs	r0, r5
 8007776:	f7ff ff6f 	bl	8007658 <memcpy>
 800777a:	0031      	movs	r1, r6
 800777c:	0038      	movs	r0, r7
 800777e:	f7ff f88d 	bl	800689c <_free_r>
 8007782:	e7da      	b.n	800773a <_realloc_r+0x14>

08007784 <__ascii_wctomb>:
 8007784:	0003      	movs	r3, r0
 8007786:	1e08      	subs	r0, r1, #0
 8007788:	d005      	beq.n	8007796 <__ascii_wctomb+0x12>
 800778a:	2aff      	cmp	r2, #255	; 0xff
 800778c:	d904      	bls.n	8007798 <__ascii_wctomb+0x14>
 800778e:	228a      	movs	r2, #138	; 0x8a
 8007790:	2001      	movs	r0, #1
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	4240      	negs	r0, r0
 8007796:	4770      	bx	lr
 8007798:	2001      	movs	r0, #1
 800779a:	700a      	strb	r2, [r1, #0]
 800779c:	e7fb      	b.n	8007796 <__ascii_wctomb+0x12>
	...

080077a0 <fiprintf>:
 80077a0:	b40e      	push	{r1, r2, r3}
 80077a2:	b517      	push	{r0, r1, r2, r4, lr}
 80077a4:	4c05      	ldr	r4, [pc, #20]	; (80077bc <fiprintf+0x1c>)
 80077a6:	ab05      	add	r3, sp, #20
 80077a8:	cb04      	ldmia	r3!, {r2}
 80077aa:	0001      	movs	r1, r0
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	f000 f83c 	bl	800782c <_vfiprintf_r>
 80077b4:	bc1e      	pop	{r1, r2, r3, r4}
 80077b6:	bc08      	pop	{r3}
 80077b8:	b003      	add	sp, #12
 80077ba:	4718      	bx	r3
 80077bc:	20000068 	.word	0x20000068

080077c0 <abort>:
 80077c0:	2006      	movs	r0, #6
 80077c2:	b510      	push	{r4, lr}
 80077c4:	f000 fa1e 	bl	8007c04 <raise>
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7fb fa25 	bl	8002c18 <_exit>

080077ce <_malloc_usable_size_r>:
 80077ce:	1f0b      	subs	r3, r1, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1f18      	subs	r0, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da01      	bge.n	80077dc <_malloc_usable_size_r+0xe>
 80077d8:	580b      	ldr	r3, [r1, r0]
 80077da:	18c0      	adds	r0, r0, r3
 80077dc:	4770      	bx	lr

080077de <__sfputc_r>:
 80077de:	6893      	ldr	r3, [r2, #8]
 80077e0:	b510      	push	{r4, lr}
 80077e2:	3b01      	subs	r3, #1
 80077e4:	6093      	str	r3, [r2, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da04      	bge.n	80077f4 <__sfputc_r+0x16>
 80077ea:	6994      	ldr	r4, [r2, #24]
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	db07      	blt.n	8007800 <__sfputc_r+0x22>
 80077f0:	290a      	cmp	r1, #10
 80077f2:	d005      	beq.n	8007800 <__sfputc_r+0x22>
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	1c58      	adds	r0, r3, #1
 80077f8:	6010      	str	r0, [r2, #0]
 80077fa:	7019      	strb	r1, [r3, #0]
 80077fc:	0008      	movs	r0, r1
 80077fe:	bd10      	pop	{r4, pc}
 8007800:	f000 f930 	bl	8007a64 <__swbuf_r>
 8007804:	0001      	movs	r1, r0
 8007806:	e7f9      	b.n	80077fc <__sfputc_r+0x1e>

08007808 <__sfputs_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	0006      	movs	r6, r0
 800780c:	000f      	movs	r7, r1
 800780e:	0014      	movs	r4, r2
 8007810:	18d5      	adds	r5, r2, r3
 8007812:	42ac      	cmp	r4, r5
 8007814:	d101      	bne.n	800781a <__sfputs_r+0x12>
 8007816:	2000      	movs	r0, #0
 8007818:	e007      	b.n	800782a <__sfputs_r+0x22>
 800781a:	7821      	ldrb	r1, [r4, #0]
 800781c:	003a      	movs	r2, r7
 800781e:	0030      	movs	r0, r6
 8007820:	f7ff ffdd 	bl	80077de <__sfputc_r>
 8007824:	3401      	adds	r4, #1
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d1f3      	bne.n	8007812 <__sfputs_r+0xa>
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800782c <_vfiprintf_r>:
 800782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782e:	b0a1      	sub	sp, #132	; 0x84
 8007830:	000f      	movs	r7, r1
 8007832:	0015      	movs	r5, r2
 8007834:	001e      	movs	r6, r3
 8007836:	9003      	str	r0, [sp, #12]
 8007838:	2800      	cmp	r0, #0
 800783a:	d004      	beq.n	8007846 <_vfiprintf_r+0x1a>
 800783c:	6a03      	ldr	r3, [r0, #32]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <_vfiprintf_r+0x1a>
 8007842:	f7fe f85b 	bl	80058fc <__sinit>
 8007846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007848:	07db      	lsls	r3, r3, #31
 800784a:	d405      	bmi.n	8007858 <_vfiprintf_r+0x2c>
 800784c:	89bb      	ldrh	r3, [r7, #12]
 800784e:	059b      	lsls	r3, r3, #22
 8007850:	d402      	bmi.n	8007858 <_vfiprintf_r+0x2c>
 8007852:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007854:	f7fe f977 	bl	8005b46 <__retarget_lock_acquire_recursive>
 8007858:	89bb      	ldrh	r3, [r7, #12]
 800785a:	071b      	lsls	r3, r3, #28
 800785c:	d502      	bpl.n	8007864 <_vfiprintf_r+0x38>
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d113      	bne.n	800788c <_vfiprintf_r+0x60>
 8007864:	0039      	movs	r1, r7
 8007866:	9803      	ldr	r0, [sp, #12]
 8007868:	f000 f93e 	bl	8007ae8 <__swsetup_r>
 800786c:	2800      	cmp	r0, #0
 800786e:	d00d      	beq.n	800788c <_vfiprintf_r+0x60>
 8007870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007872:	07db      	lsls	r3, r3, #31
 8007874:	d503      	bpl.n	800787e <_vfiprintf_r+0x52>
 8007876:	2001      	movs	r0, #1
 8007878:	4240      	negs	r0, r0
 800787a:	b021      	add	sp, #132	; 0x84
 800787c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800787e:	89bb      	ldrh	r3, [r7, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d4f8      	bmi.n	8007876 <_vfiprintf_r+0x4a>
 8007884:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007886:	f7fe f95f 	bl	8005b48 <__retarget_lock_release_recursive>
 800788a:	e7f4      	b.n	8007876 <_vfiprintf_r+0x4a>
 800788c:	2300      	movs	r3, #0
 800788e:	ac08      	add	r4, sp, #32
 8007890:	6163      	str	r3, [r4, #20]
 8007892:	3320      	adds	r3, #32
 8007894:	7663      	strb	r3, [r4, #25]
 8007896:	3310      	adds	r3, #16
 8007898:	76a3      	strb	r3, [r4, #26]
 800789a:	9607      	str	r6, [sp, #28]
 800789c:	002e      	movs	r6, r5
 800789e:	7833      	ldrb	r3, [r6, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <_vfiprintf_r+0x7c>
 80078a4:	2b25      	cmp	r3, #37	; 0x25
 80078a6:	d148      	bne.n	800793a <_vfiprintf_r+0x10e>
 80078a8:	1b73      	subs	r3, r6, r5
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	42ae      	cmp	r6, r5
 80078ae:	d00b      	beq.n	80078c8 <_vfiprintf_r+0x9c>
 80078b0:	002a      	movs	r2, r5
 80078b2:	0039      	movs	r1, r7
 80078b4:	9803      	ldr	r0, [sp, #12]
 80078b6:	f7ff ffa7 	bl	8007808 <__sfputs_r>
 80078ba:	3001      	adds	r0, #1
 80078bc:	d100      	bne.n	80078c0 <_vfiprintf_r+0x94>
 80078be:	e0af      	b.n	8007a20 <_vfiprintf_r+0x1f4>
 80078c0:	6963      	ldr	r3, [r4, #20]
 80078c2:	9a05      	ldr	r2, [sp, #20]
 80078c4:	189b      	adds	r3, r3, r2
 80078c6:	6163      	str	r3, [r4, #20]
 80078c8:	7833      	ldrb	r3, [r6, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d100      	bne.n	80078d0 <_vfiprintf_r+0xa4>
 80078ce:	e0a7      	b.n	8007a20 <_vfiprintf_r+0x1f4>
 80078d0:	2201      	movs	r2, #1
 80078d2:	2300      	movs	r3, #0
 80078d4:	4252      	negs	r2, r2
 80078d6:	6062      	str	r2, [r4, #4]
 80078d8:	a904      	add	r1, sp, #16
 80078da:	3254      	adds	r2, #84	; 0x54
 80078dc:	1852      	adds	r2, r2, r1
 80078de:	1c75      	adds	r5, r6, #1
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	60e3      	str	r3, [r4, #12]
 80078e4:	60a3      	str	r3, [r4, #8]
 80078e6:	7013      	strb	r3, [r2, #0]
 80078e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80078ea:	4b59      	ldr	r3, [pc, #356]	; (8007a50 <_vfiprintf_r+0x224>)
 80078ec:	2205      	movs	r2, #5
 80078ee:	0018      	movs	r0, r3
 80078f0:	7829      	ldrb	r1, [r5, #0]
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	f7fe f929 	bl	8005b4a <memchr>
 80078f8:	1c6e      	adds	r6, r5, #1
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d11f      	bne.n	800793e <_vfiprintf_r+0x112>
 80078fe:	6822      	ldr	r2, [r4, #0]
 8007900:	06d3      	lsls	r3, r2, #27
 8007902:	d504      	bpl.n	800790e <_vfiprintf_r+0xe2>
 8007904:	2353      	movs	r3, #83	; 0x53
 8007906:	a904      	add	r1, sp, #16
 8007908:	185b      	adds	r3, r3, r1
 800790a:	2120      	movs	r1, #32
 800790c:	7019      	strb	r1, [r3, #0]
 800790e:	0713      	lsls	r3, r2, #28
 8007910:	d504      	bpl.n	800791c <_vfiprintf_r+0xf0>
 8007912:	2353      	movs	r3, #83	; 0x53
 8007914:	a904      	add	r1, sp, #16
 8007916:	185b      	adds	r3, r3, r1
 8007918:	212b      	movs	r1, #43	; 0x2b
 800791a:	7019      	strb	r1, [r3, #0]
 800791c:	782b      	ldrb	r3, [r5, #0]
 800791e:	2b2a      	cmp	r3, #42	; 0x2a
 8007920:	d016      	beq.n	8007950 <_vfiprintf_r+0x124>
 8007922:	002e      	movs	r6, r5
 8007924:	2100      	movs	r1, #0
 8007926:	200a      	movs	r0, #10
 8007928:	68e3      	ldr	r3, [r4, #12]
 800792a:	7832      	ldrb	r2, [r6, #0]
 800792c:	1c75      	adds	r5, r6, #1
 800792e:	3a30      	subs	r2, #48	; 0x30
 8007930:	2a09      	cmp	r2, #9
 8007932:	d94e      	bls.n	80079d2 <_vfiprintf_r+0x1a6>
 8007934:	2900      	cmp	r1, #0
 8007936:	d111      	bne.n	800795c <_vfiprintf_r+0x130>
 8007938:	e017      	b.n	800796a <_vfiprintf_r+0x13e>
 800793a:	3601      	adds	r6, #1
 800793c:	e7af      	b.n	800789e <_vfiprintf_r+0x72>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1ac0      	subs	r0, r0, r3
 8007944:	2301      	movs	r3, #1
 8007946:	4083      	lsls	r3, r0
 8007948:	4313      	orrs	r3, r2
 800794a:	0035      	movs	r5, r6
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	e7cc      	b.n	80078ea <_vfiprintf_r+0xbe>
 8007950:	9b07      	ldr	r3, [sp, #28]
 8007952:	1d19      	adds	r1, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	9107      	str	r1, [sp, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	db01      	blt.n	8007960 <_vfiprintf_r+0x134>
 800795c:	930b      	str	r3, [sp, #44]	; 0x2c
 800795e:	e004      	b.n	800796a <_vfiprintf_r+0x13e>
 8007960:	425b      	negs	r3, r3
 8007962:	60e3      	str	r3, [r4, #12]
 8007964:	2302      	movs	r3, #2
 8007966:	4313      	orrs	r3, r2
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	7833      	ldrb	r3, [r6, #0]
 800796c:	2b2e      	cmp	r3, #46	; 0x2e
 800796e:	d10a      	bne.n	8007986 <_vfiprintf_r+0x15a>
 8007970:	7873      	ldrb	r3, [r6, #1]
 8007972:	2b2a      	cmp	r3, #42	; 0x2a
 8007974:	d135      	bne.n	80079e2 <_vfiprintf_r+0x1b6>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	3602      	adds	r6, #2
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9207      	str	r2, [sp, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db2b      	blt.n	80079dc <_vfiprintf_r+0x1b0>
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	4d33      	ldr	r5, [pc, #204]	; (8007a54 <_vfiprintf_r+0x228>)
 8007988:	2203      	movs	r2, #3
 800798a:	0028      	movs	r0, r5
 800798c:	7831      	ldrb	r1, [r6, #0]
 800798e:	f7fe f8dc 	bl	8005b4a <memchr>
 8007992:	2800      	cmp	r0, #0
 8007994:	d006      	beq.n	80079a4 <_vfiprintf_r+0x178>
 8007996:	2340      	movs	r3, #64	; 0x40
 8007998:	1b40      	subs	r0, r0, r5
 800799a:	4083      	lsls	r3, r0
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	3601      	adds	r6, #1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	7831      	ldrb	r1, [r6, #0]
 80079a6:	2206      	movs	r2, #6
 80079a8:	482b      	ldr	r0, [pc, #172]	; (8007a58 <_vfiprintf_r+0x22c>)
 80079aa:	1c75      	adds	r5, r6, #1
 80079ac:	7621      	strb	r1, [r4, #24]
 80079ae:	f7fe f8cc 	bl	8005b4a <memchr>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d043      	beq.n	8007a3e <_vfiprintf_r+0x212>
 80079b6:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <_vfiprintf_r+0x230>)
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d125      	bne.n	8007a08 <_vfiprintf_r+0x1dc>
 80079bc:	2207      	movs	r2, #7
 80079be:	9b07      	ldr	r3, [sp, #28]
 80079c0:	3307      	adds	r3, #7
 80079c2:	4393      	bics	r3, r2
 80079c4:	3308      	adds	r3, #8
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	6963      	ldr	r3, [r4, #20]
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	6163      	str	r3, [r4, #20]
 80079d0:	e764      	b.n	800789c <_vfiprintf_r+0x70>
 80079d2:	4343      	muls	r3, r0
 80079d4:	002e      	movs	r6, r5
 80079d6:	2101      	movs	r1, #1
 80079d8:	189b      	adds	r3, r3, r2
 80079da:	e7a6      	b.n	800792a <_vfiprintf_r+0xfe>
 80079dc:	2301      	movs	r3, #1
 80079de:	425b      	negs	r3, r3
 80079e0:	e7d0      	b.n	8007984 <_vfiprintf_r+0x158>
 80079e2:	2300      	movs	r3, #0
 80079e4:	200a      	movs	r0, #10
 80079e6:	001a      	movs	r2, r3
 80079e8:	3601      	adds	r6, #1
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	7831      	ldrb	r1, [r6, #0]
 80079ee:	1c75      	adds	r5, r6, #1
 80079f0:	3930      	subs	r1, #48	; 0x30
 80079f2:	2909      	cmp	r1, #9
 80079f4:	d903      	bls.n	80079fe <_vfiprintf_r+0x1d2>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0c5      	beq.n	8007986 <_vfiprintf_r+0x15a>
 80079fa:	9209      	str	r2, [sp, #36]	; 0x24
 80079fc:	e7c3      	b.n	8007986 <_vfiprintf_r+0x15a>
 80079fe:	4342      	muls	r2, r0
 8007a00:	002e      	movs	r6, r5
 8007a02:	2301      	movs	r3, #1
 8007a04:	1852      	adds	r2, r2, r1
 8007a06:	e7f1      	b.n	80079ec <_vfiprintf_r+0x1c0>
 8007a08:	aa07      	add	r2, sp, #28
 8007a0a:	9200      	str	r2, [sp, #0]
 8007a0c:	0021      	movs	r1, r4
 8007a0e:	003a      	movs	r2, r7
 8007a10:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <_vfiprintf_r+0x234>)
 8007a12:	9803      	ldr	r0, [sp, #12]
 8007a14:	f7fd fb0c 	bl	8005030 <_printf_float>
 8007a18:	9004      	str	r0, [sp, #16]
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	d1d3      	bne.n	80079c8 <_vfiprintf_r+0x19c>
 8007a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a22:	07db      	lsls	r3, r3, #31
 8007a24:	d405      	bmi.n	8007a32 <_vfiprintf_r+0x206>
 8007a26:	89bb      	ldrh	r3, [r7, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d402      	bmi.n	8007a32 <_vfiprintf_r+0x206>
 8007a2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007a2e:	f7fe f88b 	bl	8005b48 <__retarget_lock_release_recursive>
 8007a32:	89bb      	ldrh	r3, [r7, #12]
 8007a34:	065b      	lsls	r3, r3, #25
 8007a36:	d500      	bpl.n	8007a3a <_vfiprintf_r+0x20e>
 8007a38:	e71d      	b.n	8007876 <_vfiprintf_r+0x4a>
 8007a3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a3c:	e71d      	b.n	800787a <_vfiprintf_r+0x4e>
 8007a3e:	aa07      	add	r2, sp, #28
 8007a40:	9200      	str	r2, [sp, #0]
 8007a42:	0021      	movs	r1, r4
 8007a44:	003a      	movs	r2, r7
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <_vfiprintf_r+0x234>)
 8007a48:	9803      	ldr	r0, [sp, #12]
 8007a4a:	f7fd fdb7 	bl	80055bc <_printf_i>
 8007a4e:	e7e3      	b.n	8007a18 <_vfiprintf_r+0x1ec>
 8007a50:	080080cc 	.word	0x080080cc
 8007a54:	080080d2 	.word	0x080080d2
 8007a58:	080080d6 	.word	0x080080d6
 8007a5c:	08005031 	.word	0x08005031
 8007a60:	08007809 	.word	0x08007809

08007a64 <__swbuf_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	0006      	movs	r6, r0
 8007a68:	000d      	movs	r5, r1
 8007a6a:	0014      	movs	r4, r2
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d004      	beq.n	8007a7a <__swbuf_r+0x16>
 8007a70:	6a03      	ldr	r3, [r0, #32]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <__swbuf_r+0x16>
 8007a76:	f7fd ff41 	bl	80058fc <__sinit>
 8007a7a:	69a3      	ldr	r3, [r4, #24]
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	071b      	lsls	r3, r3, #28
 8007a82:	d528      	bpl.n	8007ad6 <__swbuf_r+0x72>
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d025      	beq.n	8007ad6 <__swbuf_r+0x72>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	b2ef      	uxtb	r7, r5
 8007a90:	1ac0      	subs	r0, r0, r3
 8007a92:	6963      	ldr	r3, [r4, #20]
 8007a94:	b2ed      	uxtb	r5, r5
 8007a96:	4283      	cmp	r3, r0
 8007a98:	dc05      	bgt.n	8007aa6 <__swbuf_r+0x42>
 8007a9a:	0021      	movs	r1, r4
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	f7ff fd8b 	bl	80075b8 <_fflush_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d11d      	bne.n	8007ae2 <__swbuf_r+0x7e>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	701f      	strb	r7, [r3, #0]
 8007ab6:	6963      	ldr	r3, [r4, #20]
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x62>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d507      	bpl.n	8007ad2 <__swbuf_r+0x6e>
 8007ac2:	2d0a      	cmp	r5, #10
 8007ac4:	d105      	bne.n	8007ad2 <__swbuf_r+0x6e>
 8007ac6:	0021      	movs	r1, r4
 8007ac8:	0030      	movs	r0, r6
 8007aca:	f7ff fd75 	bl	80075b8 <_fflush_r>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d107      	bne.n	8007ae2 <__swbuf_r+0x7e>
 8007ad2:	0028      	movs	r0, r5
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad6:	0021      	movs	r1, r4
 8007ad8:	0030      	movs	r0, r6
 8007ada:	f000 f805 	bl	8007ae8 <__swsetup_r>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d0d3      	beq.n	8007a8a <__swbuf_r+0x26>
 8007ae2:	2501      	movs	r5, #1
 8007ae4:	426d      	negs	r5, r5
 8007ae6:	e7f4      	b.n	8007ad2 <__swbuf_r+0x6e>

08007ae8 <__swsetup_r>:
 8007ae8:	4b30      	ldr	r3, [pc, #192]	; (8007bac <__swsetup_r+0xc4>)
 8007aea:	b570      	push	{r4, r5, r6, lr}
 8007aec:	0005      	movs	r5, r0
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	000c      	movs	r4, r1
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d004      	beq.n	8007b00 <__swsetup_r+0x18>
 8007af6:	6a03      	ldr	r3, [r0, #32]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <__swsetup_r+0x18>
 8007afc:	f7fd fefe 	bl	80058fc <__sinit>
 8007b00:	230c      	movs	r3, #12
 8007b02:	5ee2      	ldrsh	r2, [r4, r3]
 8007b04:	b293      	uxth	r3, r2
 8007b06:	0711      	lsls	r1, r2, #28
 8007b08:	d423      	bmi.n	8007b52 <__swsetup_r+0x6a>
 8007b0a:	06d9      	lsls	r1, r3, #27
 8007b0c:	d407      	bmi.n	8007b1e <__swsetup_r+0x36>
 8007b0e:	2309      	movs	r3, #9
 8007b10:	2001      	movs	r0, #1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	3337      	adds	r3, #55	; 0x37
 8007b16:	4313      	orrs	r3, r2
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	4240      	negs	r0, r0
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	075b      	lsls	r3, r3, #29
 8007b20:	d513      	bpl.n	8007b4a <__swsetup_r+0x62>
 8007b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d008      	beq.n	8007b3a <__swsetup_r+0x52>
 8007b28:	0023      	movs	r3, r4
 8007b2a:	3344      	adds	r3, #68	; 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x4e>
 8007b30:	0028      	movs	r0, r5
 8007b32:	f7fe feb3 	bl	800689c <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3a:	2224      	movs	r2, #36	; 0x24
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	4393      	bics	r3, r2
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	89a2      	ldrh	r2, [r4, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <__swsetup_r+0x88>
 8007b58:	21a0      	movs	r1, #160	; 0xa0
 8007b5a:	2280      	movs	r2, #128	; 0x80
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	0089      	lsls	r1, r1, #2
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	400b      	ands	r3, r1
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <__swsetup_r+0x88>
 8007b68:	0021      	movs	r1, r4
 8007b6a:	0028      	movs	r0, r5
 8007b6c:	f000 f892 	bl	8007c94 <__smakebuf_r>
 8007b70:	220c      	movs	r2, #12
 8007b72:	5ea3      	ldrsh	r3, [r4, r2]
 8007b74:	2001      	movs	r0, #1
 8007b76:	001a      	movs	r2, r3
 8007b78:	b299      	uxth	r1, r3
 8007b7a:	4002      	ands	r2, r0
 8007b7c:	4203      	tst	r3, r0
 8007b7e:	d00f      	beq.n	8007ba0 <__swsetup_r+0xb8>
 8007b80:	2200      	movs	r2, #0
 8007b82:	60a2      	str	r2, [r4, #8]
 8007b84:	6962      	ldr	r2, [r4, #20]
 8007b86:	4252      	negs	r2, r2
 8007b88:	61a2      	str	r2, [r4, #24]
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	4282      	cmp	r2, r0
 8007b90:	d1c4      	bne.n	8007b1c <__swsetup_r+0x34>
 8007b92:	0609      	lsls	r1, r1, #24
 8007b94:	d5c2      	bpl.n	8007b1c <__swsetup_r+0x34>
 8007b96:	2240      	movs	r2, #64	; 0x40
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	3801      	subs	r0, #1
 8007b9e:	e7bd      	b.n	8007b1c <__swsetup_r+0x34>
 8007ba0:	0788      	lsls	r0, r1, #30
 8007ba2:	d400      	bmi.n	8007ba6 <__swsetup_r+0xbe>
 8007ba4:	6962      	ldr	r2, [r4, #20]
 8007ba6:	60a2      	str	r2, [r4, #8]
 8007ba8:	e7ef      	b.n	8007b8a <__swsetup_r+0xa2>
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	20000068 	.word	0x20000068

08007bb0 <_raise_r>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	0004      	movs	r4, r0
 8007bb4:	000d      	movs	r5, r1
 8007bb6:	291f      	cmp	r1, #31
 8007bb8:	d904      	bls.n	8007bc4 <_raise_r+0x14>
 8007bba:	2316      	movs	r3, #22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	4240      	negs	r0, r0
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <_raise_r+0x24>
 8007bca:	008a      	lsls	r2, r1, #2
 8007bcc:	189b      	adds	r3, r3, r2
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	d108      	bne.n	8007be6 <_raise_r+0x36>
 8007bd4:	0020      	movs	r0, r4
 8007bd6:	f000 f831 	bl	8007c3c <_getpid_r>
 8007bda:	002a      	movs	r2, r5
 8007bdc:	0001      	movs	r1, r0
 8007bde:	0020      	movs	r0, r4
 8007be0:	f000 f81a 	bl	8007c18 <_kill_r>
 8007be4:	e7ed      	b.n	8007bc2 <_raise_r+0x12>
 8007be6:	2000      	movs	r0, #0
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	d0ea      	beq.n	8007bc2 <_raise_r+0x12>
 8007bec:	1c51      	adds	r1, r2, #1
 8007bee:	d103      	bne.n	8007bf8 <_raise_r+0x48>
 8007bf0:	2316      	movs	r3, #22
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	e7e4      	b.n	8007bc2 <_raise_r+0x12>
 8007bf8:	2400      	movs	r4, #0
 8007bfa:	0028      	movs	r0, r5
 8007bfc:	601c      	str	r4, [r3, #0]
 8007bfe:	4790      	blx	r2
 8007c00:	0020      	movs	r0, r4
 8007c02:	e7de      	b.n	8007bc2 <_raise_r+0x12>

08007c04 <raise>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <raise+0x10>)
 8007c08:	0001      	movs	r1, r0
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	f7ff ffd0 	bl	8007bb0 <_raise_r>
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	20000068 	.word	0x20000068

08007c18 <_kill_r>:
 8007c18:	2300      	movs	r3, #0
 8007c1a:	b570      	push	{r4, r5, r6, lr}
 8007c1c:	4d06      	ldr	r5, [pc, #24]	; (8007c38 <_kill_r+0x20>)
 8007c1e:	0004      	movs	r4, r0
 8007c20:	0008      	movs	r0, r1
 8007c22:	0011      	movs	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7fa ffe7 	bl	8002bf8 <_kill>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d103      	bne.n	8007c36 <_kill_r+0x1e>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d000      	beq.n	8007c36 <_kill_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	200004a8 	.word	0x200004a8

08007c3c <_getpid_r>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	f7fa ffd5 	bl	8002bec <_getpid>
 8007c42:	bd10      	pop	{r4, pc}

08007c44 <__swhatbuf_r>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	000e      	movs	r6, r1
 8007c48:	001d      	movs	r5, r3
 8007c4a:	230e      	movs	r3, #14
 8007c4c:	5ec9      	ldrsh	r1, [r1, r3]
 8007c4e:	0014      	movs	r4, r2
 8007c50:	b096      	sub	sp, #88	; 0x58
 8007c52:	2900      	cmp	r1, #0
 8007c54:	da0c      	bge.n	8007c70 <__swhatbuf_r+0x2c>
 8007c56:	89b2      	ldrh	r2, [r6, #12]
 8007c58:	2380      	movs	r3, #128	; 0x80
 8007c5a:	0011      	movs	r1, r2
 8007c5c:	4019      	ands	r1, r3
 8007c5e:	421a      	tst	r2, r3
 8007c60:	d013      	beq.n	8007c8a <__swhatbuf_r+0x46>
 8007c62:	2100      	movs	r1, #0
 8007c64:	3b40      	subs	r3, #64	; 0x40
 8007c66:	2000      	movs	r0, #0
 8007c68:	6029      	str	r1, [r5, #0]
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	b016      	add	sp, #88	; 0x58
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	466a      	mov	r2, sp
 8007c72:	f000 f84d 	bl	8007d10 <_fstat_r>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	dbed      	blt.n	8007c56 <__swhatbuf_r+0x12>
 8007c7a:	23f0      	movs	r3, #240	; 0xf0
 8007c7c:	9901      	ldr	r1, [sp, #4]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	4019      	ands	r1, r3
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <__swhatbuf_r+0x4c>)
 8007c84:	18c9      	adds	r1, r1, r3
 8007c86:	424b      	negs	r3, r1
 8007c88:	4159      	adcs	r1, r3
 8007c8a:	2380      	movs	r3, #128	; 0x80
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	e7ea      	b.n	8007c66 <__swhatbuf_r+0x22>
 8007c90:	ffffe000 	.word	0xffffe000

08007c94 <__smakebuf_r>:
 8007c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c96:	2602      	movs	r6, #2
 8007c98:	898b      	ldrh	r3, [r1, #12]
 8007c9a:	0005      	movs	r5, r0
 8007c9c:	000c      	movs	r4, r1
 8007c9e:	4233      	tst	r3, r6
 8007ca0:	d006      	beq.n	8007cb0 <__smakebuf_r+0x1c>
 8007ca2:	0023      	movs	r3, r4
 8007ca4:	3347      	adds	r3, #71	; 0x47
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2301      	movs	r3, #1
 8007cac:	6163      	str	r3, [r4, #20]
 8007cae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007cb0:	466a      	mov	r2, sp
 8007cb2:	ab01      	add	r3, sp, #4
 8007cb4:	f7ff ffc6 	bl	8007c44 <__swhatbuf_r>
 8007cb8:	9900      	ldr	r1, [sp, #0]
 8007cba:	0007      	movs	r7, r0
 8007cbc:	0028      	movs	r0, r5
 8007cbe:	f7fe fe63 	bl	8006988 <_malloc_r>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d108      	bne.n	8007cd8 <__smakebuf_r+0x44>
 8007cc6:	220c      	movs	r2, #12
 8007cc8:	5ea3      	ldrsh	r3, [r4, r2]
 8007cca:	059a      	lsls	r2, r3, #22
 8007ccc:	d4ef      	bmi.n	8007cae <__smakebuf_r+0x1a>
 8007cce:	2203      	movs	r2, #3
 8007cd0:	4393      	bics	r3, r2
 8007cd2:	431e      	orrs	r6, r3
 8007cd4:	81a6      	strh	r6, [r4, #12]
 8007cd6:	e7e4      	b.n	8007ca2 <__smakebuf_r+0xe>
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	89a2      	ldrh	r2, [r4, #12]
 8007cdc:	6020      	str	r0, [r4, #0]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	9b00      	ldr	r3, [sp, #0]
 8007ce4:	6120      	str	r0, [r4, #16]
 8007ce6:	6163      	str	r3, [r4, #20]
 8007ce8:	9b01      	ldr	r3, [sp, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <__smakebuf_r+0x74>
 8007cee:	0028      	movs	r0, r5
 8007cf0:	230e      	movs	r3, #14
 8007cf2:	5ee1      	ldrsh	r1, [r4, r3]
 8007cf4:	f000 f81e 	bl	8007d34 <_isatty_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d005      	beq.n	8007d08 <__smakebuf_r+0x74>
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	89a2      	ldrh	r2, [r4, #12]
 8007d00:	439a      	bics	r2, r3
 8007d02:	3b02      	subs	r3, #2
 8007d04:	4313      	orrs	r3, r2
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	433b      	orrs	r3, r7
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	e7ce      	b.n	8007cae <__smakebuf_r+0x1a>

08007d10 <_fstat_r>:
 8007d10:	2300      	movs	r3, #0
 8007d12:	b570      	push	{r4, r5, r6, lr}
 8007d14:	4d06      	ldr	r5, [pc, #24]	; (8007d30 <_fstat_r+0x20>)
 8007d16:	0004      	movs	r4, r0
 8007d18:	0008      	movs	r0, r1
 8007d1a:	0011      	movs	r1, r2
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	f7fa ffca 	bl	8002cb6 <_fstat>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d103      	bne.n	8007d2e <_fstat_r+0x1e>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d000      	beq.n	8007d2e <_fstat_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	200004a8 	.word	0x200004a8

08007d34 <_isatty_r>:
 8007d34:	2300      	movs	r3, #0
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	4d06      	ldr	r5, [pc, #24]	; (8007d54 <_isatty_r+0x20>)
 8007d3a:	0004      	movs	r4, r0
 8007d3c:	0008      	movs	r0, r1
 8007d3e:	602b      	str	r3, [r5, #0]
 8007d40:	f7fa ffc7 	bl	8002cd2 <_isatty>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d103      	bne.n	8007d50 <_isatty_r+0x1c>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d000      	beq.n	8007d50 <_isatty_r+0x1c>
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	200004a8 	.word	0x200004a8

08007d58 <_init>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr

08007d64 <_fini>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr
